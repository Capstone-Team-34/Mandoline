org.apache.commons.math3.stat.descriptive.DescriptiveStatistics extends java.lang.Object implements org.apache.commons.math3.stat.descriptive.StatisticalSummary java.io.Serializable
public static final int INFINITE_WINDOW
private static final java.lang.String SET_QUANTILE_METHOD_NAME
private static final long serialVersionUID
private org.apache.commons.math3.util.ResizableDoubleArray eDA
private org.apache.commons.math3.stat.descriptive.UnivariateStatistic geometricMeanImpl
private org.apache.commons.math3.stat.descriptive.UnivariateStatistic kurtosisImpl
private org.apache.commons.math3.stat.descriptive.UnivariateStatistic maxImpl
private org.apache.commons.math3.stat.descriptive.UnivariateStatistic meanImpl
private org.apache.commons.math3.stat.descriptive.UnivariateStatistic minImpl
private org.apache.commons.math3.stat.descriptive.UnivariateStatistic percentileImpl
private org.apache.commons.math3.stat.descriptive.UnivariateStatistic skewnessImpl
private org.apache.commons.math3.stat.descriptive.UnivariateStatistic sumImpl
private org.apache.commons.math3.stat.descriptive.UnivariateStatistic sumsqImpl
private org.apache.commons.math3.stat.descriptive.UnivariateStatistic varianceImpl
protected int windowSize
    public void <init>()
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        org.apache.commons.math3.util.ResizableDoubleArray $r1;
        org.apache.commons.math3.stat.descriptive.moment.Mean $r2;
        org.apache.commons.math3.stat.descriptive.moment.GeometricMean $r3;
        org.apache.commons.math3.stat.descriptive.moment.Kurtosis $r4;
        org.apache.commons.math3.stat.descriptive.rank.Max $r5;
        org.apache.commons.math3.stat.descriptive.rank.Min $r6;
        org.apache.commons.math3.stat.descriptive.rank.Percentile $r7;
        org.apache.commons.math3.stat.descriptive.moment.Skewness $r8;
        org.apache.commons.math3.stat.descriptive.moment.Variance $r9;
        org.apache.commons.math3.stat.descriptive.summary.SumOfSquares $r10;
        org.apache.commons.math3.stat.descriptive.summary.Sum $r11;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: int windowSize> = -1;

        $r1 = new org.apache.commons.math3.util.ResizableDoubleArray;

        specialinvoke $r1.<org.apache.commons.math3.util.ResizableDoubleArray: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.util.ResizableDoubleArray eDA> = $r1;

        $r2 = new org.apache.commons.math3.stat.descriptive.moment.Mean;

        specialinvoke $r2.<org.apache.commons.math3.stat.descriptive.moment.Mean: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic meanImpl> = $r2;

        $r3 = new org.apache.commons.math3.stat.descriptive.moment.GeometricMean;

        specialinvoke $r3.<org.apache.commons.math3.stat.descriptive.moment.GeometricMean: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic geometricMeanImpl> = $r3;

        $r4 = new org.apache.commons.math3.stat.descriptive.moment.Kurtosis;

        specialinvoke $r4.<org.apache.commons.math3.stat.descriptive.moment.Kurtosis: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic kurtosisImpl> = $r4;

        $r5 = new org.apache.commons.math3.stat.descriptive.rank.Max;

        specialinvoke $r5.<org.apache.commons.math3.stat.descriptive.rank.Max: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic maxImpl> = $r5;

        $r6 = new org.apache.commons.math3.stat.descriptive.rank.Min;

        specialinvoke $r6.<org.apache.commons.math3.stat.descriptive.rank.Min: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic minImpl> = $r6;

        $r7 = new org.apache.commons.math3.stat.descriptive.rank.Percentile;

        specialinvoke $r7.<org.apache.commons.math3.stat.descriptive.rank.Percentile: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic percentileImpl> = $r7;

        $r8 = new org.apache.commons.math3.stat.descriptive.moment.Skewness;

        specialinvoke $r8.<org.apache.commons.math3.stat.descriptive.moment.Skewness: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic skewnessImpl> = $r8;

        $r9 = new org.apache.commons.math3.stat.descriptive.moment.Variance;

        specialinvoke $r9.<org.apache.commons.math3.stat.descriptive.moment.Variance: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic varianceImpl> = $r9;

        $r10 = new org.apache.commons.math3.stat.descriptive.summary.SumOfSquares;

        specialinvoke $r10.<org.apache.commons.math3.stat.descriptive.summary.SumOfSquares: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic sumsqImpl> = $r10;

        $r11 = new org.apache.commons.math3.stat.descriptive.summary.Sum;

        specialinvoke $r11.<org.apache.commons.math3.stat.descriptive.summary.Sum: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic sumImpl> = $r11;

        return;
    }
    public void <init>(int) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        int $i0;
        org.apache.commons.math3.util.ResizableDoubleArray $r1;
        org.apache.commons.math3.stat.descriptive.moment.Mean $r2;
        org.apache.commons.math3.stat.descriptive.moment.GeometricMean $r3;
        org.apache.commons.math3.stat.descriptive.moment.Kurtosis $r4;
        org.apache.commons.math3.stat.descriptive.rank.Max $r5;
        org.apache.commons.math3.stat.descriptive.rank.Min $r6;
        org.apache.commons.math3.stat.descriptive.rank.Percentile $r7;
        org.apache.commons.math3.stat.descriptive.moment.Skewness $r8;
        org.apache.commons.math3.stat.descriptive.moment.Variance $r9;
        org.apache.commons.math3.stat.descriptive.summary.SumOfSquares $r10;
        org.apache.commons.math3.stat.descriptive.summary.Sum $r11;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        $i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: int windowSize> = -1;

        $r1 = new org.apache.commons.math3.util.ResizableDoubleArray;

        specialinvoke $r1.<org.apache.commons.math3.util.ResizableDoubleArray: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.util.ResizableDoubleArray eDA> = $r1;

        $r2 = new org.apache.commons.math3.stat.descriptive.moment.Mean;

        specialinvoke $r2.<org.apache.commons.math3.stat.descriptive.moment.Mean: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic meanImpl> = $r2;

        $r3 = new org.apache.commons.math3.stat.descriptive.moment.GeometricMean;

        specialinvoke $r3.<org.apache.commons.math3.stat.descriptive.moment.GeometricMean: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic geometricMeanImpl> = $r3;

        $r4 = new org.apache.commons.math3.stat.descriptive.moment.Kurtosis;

        specialinvoke $r4.<org.apache.commons.math3.stat.descriptive.moment.Kurtosis: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic kurtosisImpl> = $r4;

        $r5 = new org.apache.commons.math3.stat.descriptive.rank.Max;

        specialinvoke $r5.<org.apache.commons.math3.stat.descriptive.rank.Max: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic maxImpl> = $r5;

        $r6 = new org.apache.commons.math3.stat.descriptive.rank.Min;

        specialinvoke $r6.<org.apache.commons.math3.stat.descriptive.rank.Min: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic minImpl> = $r6;

        $r7 = new org.apache.commons.math3.stat.descriptive.rank.Percentile;

        specialinvoke $r7.<org.apache.commons.math3.stat.descriptive.rank.Percentile: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic percentileImpl> = $r7;

        $r8 = new org.apache.commons.math3.stat.descriptive.moment.Skewness;

        specialinvoke $r8.<org.apache.commons.math3.stat.descriptive.moment.Skewness: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic skewnessImpl> = $r8;

        $r9 = new org.apache.commons.math3.stat.descriptive.moment.Variance;

        specialinvoke $r9.<org.apache.commons.math3.stat.descriptive.moment.Variance: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic varianceImpl> = $r9;

        $r10 = new org.apache.commons.math3.stat.descriptive.summary.SumOfSquares;

        specialinvoke $r10.<org.apache.commons.math3.stat.descriptive.summary.SumOfSquares: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic sumsqImpl> = $r10;

        $r11 = new org.apache.commons.math3.stat.descriptive.summary.Sum;

        specialinvoke $r11.<org.apache.commons.math3.stat.descriptive.summary.Sum: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic sumImpl> = $r11;

        virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: void setWindowSize(int)>($i0);

        return;
    }
    public void <init>(org.apache.commons.math3.stat.descriptive.DescriptiveStatistics) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0, $r1;
        org.apache.commons.math3.util.ResizableDoubleArray $r2;
        org.apache.commons.math3.stat.descriptive.moment.Mean $r3;
        org.apache.commons.math3.stat.descriptive.moment.GeometricMean $r4;
        org.apache.commons.math3.stat.descriptive.moment.Kurtosis $r5;
        org.apache.commons.math3.stat.descriptive.rank.Max $r6;
        org.apache.commons.math3.stat.descriptive.rank.Min $r7;
        org.apache.commons.math3.stat.descriptive.rank.Percentile $r8;
        org.apache.commons.math3.stat.descriptive.moment.Skewness $r9;
        org.apache.commons.math3.stat.descriptive.moment.Variance $r10;
        org.apache.commons.math3.stat.descriptive.summary.SumOfSquares $r11;
        org.apache.commons.math3.stat.descriptive.summary.Sum $r12;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        $r1 := @parameter0: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: int windowSize> = -1;

        $r2 = new org.apache.commons.math3.util.ResizableDoubleArray;

        specialinvoke $r2.<org.apache.commons.math3.util.ResizableDoubleArray: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.util.ResizableDoubleArray eDA> = $r2;

        $r3 = new org.apache.commons.math3.stat.descriptive.moment.Mean;

        specialinvoke $r3.<org.apache.commons.math3.stat.descriptive.moment.Mean: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic meanImpl> = $r3;

        $r4 = new org.apache.commons.math3.stat.descriptive.moment.GeometricMean;

        specialinvoke $r4.<org.apache.commons.math3.stat.descriptive.moment.GeometricMean: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic geometricMeanImpl> = $r4;

        $r5 = new org.apache.commons.math3.stat.descriptive.moment.Kurtosis;

        specialinvoke $r5.<org.apache.commons.math3.stat.descriptive.moment.Kurtosis: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic kurtosisImpl> = $r5;

        $r6 = new org.apache.commons.math3.stat.descriptive.rank.Max;

        specialinvoke $r6.<org.apache.commons.math3.stat.descriptive.rank.Max: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic maxImpl> = $r6;

        $r7 = new org.apache.commons.math3.stat.descriptive.rank.Min;

        specialinvoke $r7.<org.apache.commons.math3.stat.descriptive.rank.Min: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic minImpl> = $r7;

        $r8 = new org.apache.commons.math3.stat.descriptive.rank.Percentile;

        specialinvoke $r8.<org.apache.commons.math3.stat.descriptive.rank.Percentile: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic percentileImpl> = $r8;

        $r9 = new org.apache.commons.math3.stat.descriptive.moment.Skewness;

        specialinvoke $r9.<org.apache.commons.math3.stat.descriptive.moment.Skewness: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic skewnessImpl> = $r9;

        $r10 = new org.apache.commons.math3.stat.descriptive.moment.Variance;

        specialinvoke $r10.<org.apache.commons.math3.stat.descriptive.moment.Variance: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic varianceImpl> = $r10;

        $r11 = new org.apache.commons.math3.stat.descriptive.summary.SumOfSquares;

        specialinvoke $r11.<org.apache.commons.math3.stat.descriptive.summary.SumOfSquares: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic sumsqImpl> = $r11;

        $r12 = new org.apache.commons.math3.stat.descriptive.summary.Sum;

        specialinvoke $r12.<org.apache.commons.math3.stat.descriptive.summary.Sum: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic sumImpl> = $r12;

        staticinvoke <org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: void copy(org.apache.commons.math3.stat.descriptive.DescriptiveStatistics,org.apache.commons.math3.stat.descriptive.DescriptiveStatistics)>($r1, r0);

        return;
    }
    public void <init>(double[])
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        double[] $r1;
        org.apache.commons.math3.util.ResizableDoubleArray $r2;
        org.apache.commons.math3.stat.descriptive.moment.Mean $r3;
        org.apache.commons.math3.stat.descriptive.moment.GeometricMean $r4;
        org.apache.commons.math3.stat.descriptive.moment.Kurtosis $r5;
        org.apache.commons.math3.stat.descriptive.rank.Max $r6;
        org.apache.commons.math3.stat.descriptive.rank.Min $r7;
        org.apache.commons.math3.stat.descriptive.rank.Percentile $r8;
        org.apache.commons.math3.stat.descriptive.moment.Skewness $r9;
        org.apache.commons.math3.stat.descriptive.moment.Variance $r10;
        org.apache.commons.math3.stat.descriptive.summary.SumOfSquares $r11;
        org.apache.commons.math3.stat.descriptive.summary.Sum $r12;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        $r1 := @parameter0: double[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: int windowSize> = -1;

        $r2 = new org.apache.commons.math3.util.ResizableDoubleArray;

        specialinvoke $r2.<org.apache.commons.math3.util.ResizableDoubleArray: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.util.ResizableDoubleArray eDA> = $r2;

        $r3 = new org.apache.commons.math3.stat.descriptive.moment.Mean;

        specialinvoke $r3.<org.apache.commons.math3.stat.descriptive.moment.Mean: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic meanImpl> = $r3;

        $r4 = new org.apache.commons.math3.stat.descriptive.moment.GeometricMean;

        specialinvoke $r4.<org.apache.commons.math3.stat.descriptive.moment.GeometricMean: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic geometricMeanImpl> = $r4;

        $r5 = new org.apache.commons.math3.stat.descriptive.moment.Kurtosis;

        specialinvoke $r5.<org.apache.commons.math3.stat.descriptive.moment.Kurtosis: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic kurtosisImpl> = $r5;

        $r6 = new org.apache.commons.math3.stat.descriptive.rank.Max;

        specialinvoke $r6.<org.apache.commons.math3.stat.descriptive.rank.Max: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic maxImpl> = $r6;

        $r7 = new org.apache.commons.math3.stat.descriptive.rank.Min;

        specialinvoke $r7.<org.apache.commons.math3.stat.descriptive.rank.Min: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic minImpl> = $r7;

        $r8 = new org.apache.commons.math3.stat.descriptive.rank.Percentile;

        specialinvoke $r8.<org.apache.commons.math3.stat.descriptive.rank.Percentile: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic percentileImpl> = $r8;

        $r9 = new org.apache.commons.math3.stat.descriptive.moment.Skewness;

        specialinvoke $r9.<org.apache.commons.math3.stat.descriptive.moment.Skewness: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic skewnessImpl> = $r9;

        $r10 = new org.apache.commons.math3.stat.descriptive.moment.Variance;

        specialinvoke $r10.<org.apache.commons.math3.stat.descriptive.moment.Variance: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic varianceImpl> = $r10;

        $r11 = new org.apache.commons.math3.stat.descriptive.summary.SumOfSquares;

        specialinvoke $r11.<org.apache.commons.math3.stat.descriptive.summary.SumOfSquares: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic sumsqImpl> = $r11;

        $r12 = new org.apache.commons.math3.stat.descriptive.summary.Sum;

        specialinvoke $r12.<org.apache.commons.math3.stat.descriptive.summary.Sum: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic sumImpl> = $r12;

        if $r1 == null goto label1;

        $r2 = new org.apache.commons.math3.util.ResizableDoubleArray;

        specialinvoke $r2.<org.apache.commons.math3.util.ResizableDoubleArray: void <init>(double[])>($r1);

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.util.ResizableDoubleArray eDA> = $r2;

     label1:
        return;
    }
    public static void copy(org.apache.commons.math3.stat.descriptive.DescriptiveStatistics, org.apache.commons.math3.stat.descriptive.DescriptiveStatistics) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics $r0, $r1;
        org.apache.commons.math3.util.ResizableDoubleArray $r2;
        int $i0;
        org.apache.commons.math3.stat.descriptive.UnivariateStatistic $r3;

        $r0 := @parameter0: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        $r1 := @parameter1: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>($r0);

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>($r1);

        $r2 = $r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.util.ResizableDoubleArray eDA>;

        $r2 = virtualinvoke $r2.<org.apache.commons.math3.util.ResizableDoubleArray: org.apache.commons.math3.util.ResizableDoubleArray copy()>();

        $r1.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.util.ResizableDoubleArray eDA> = $r2;

        $i0 = $r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: int windowSize>;

        $r1.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: int windowSize> = $i0;

        $r3 = $r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic maxImpl>;

        $r3 = interfaceinvoke $r3.<org.apache.commons.math3.stat.descriptive.UnivariateStatistic: org.apache.commons.math3.stat.descriptive.UnivariateStatistic copy()>();

        $r1.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic maxImpl> = $r3;

        $r3 = $r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic meanImpl>;

        $r3 = interfaceinvoke $r3.<org.apache.commons.math3.stat.descriptive.UnivariateStatistic: org.apache.commons.math3.stat.descriptive.UnivariateStatistic copy()>();

        $r1.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic meanImpl> = $r3;

        $r3 = $r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic minImpl>;

        $r3 = interfaceinvoke $r3.<org.apache.commons.math3.stat.descriptive.UnivariateStatistic: org.apache.commons.math3.stat.descriptive.UnivariateStatistic copy()>();

        $r1.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic minImpl> = $r3;

        $r3 = $r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic sumImpl>;

        $r3 = interfaceinvoke $r3.<org.apache.commons.math3.stat.descriptive.UnivariateStatistic: org.apache.commons.math3.stat.descriptive.UnivariateStatistic copy()>();

        $r1.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic sumImpl> = $r3;

        $r3 = $r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic varianceImpl>;

        $r3 = interfaceinvoke $r3.<org.apache.commons.math3.stat.descriptive.UnivariateStatistic: org.apache.commons.math3.stat.descriptive.UnivariateStatistic copy()>();

        $r1.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic varianceImpl> = $r3;

        $r3 = $r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic sumsqImpl>;

        $r3 = interfaceinvoke $r3.<org.apache.commons.math3.stat.descriptive.UnivariateStatistic: org.apache.commons.math3.stat.descriptive.UnivariateStatistic copy()>();

        $r1.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic sumsqImpl> = $r3;

        $r3 = $r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic geometricMeanImpl>;

        $r3 = interfaceinvoke $r3.<org.apache.commons.math3.stat.descriptive.UnivariateStatistic: org.apache.commons.math3.stat.descriptive.UnivariateStatistic copy()>();

        $r1.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic geometricMeanImpl> = $r3;

        $r3 = $r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic kurtosisImpl>;

        $r1.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic kurtosisImpl> = $r3;

        $r3 = $r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic skewnessImpl>;

        $r1.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic skewnessImpl> = $r3;

        $r3 = $r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic percentileImpl>;

        $r1.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic percentileImpl> = $r3;

        return;
    }
    public void addValue(double)
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        double $d0;
        int $i0;
        long $l1, $l2;
        byte $b3;
        org.apache.commons.math3.util.ResizableDoubleArray $r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        $d0 := @parameter0: double;

        $i0 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: int windowSize>;

        if $i0 == -1 goto label2;

        $l1 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: long getN()>();

        $i0 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: int windowSize>;

        $l2 = (long) $i0;

        $b3 = $l1 cmp $l2;

        if $b3 != 0 goto label1;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.util.ResizableDoubleArray eDA>;

        virtualinvoke $r1.<org.apache.commons.math3.util.ResizableDoubleArray: double addElementRolling(double)>($d0);

        return;

     label1:
        $l1 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: long getN()>();

        $i0 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: int windowSize>;

        $l2 = (long) $i0;

        $b3 = $l1 cmp $l2;

        if $b3 >= 0 goto label3;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.util.ResizableDoubleArray eDA>;

        virtualinvoke $r1.<org.apache.commons.math3.util.ResizableDoubleArray: void addElement(double)>($d0);

        return;

     label2:
        $r1 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.util.ResizableDoubleArray eDA>;

        virtualinvoke $r1.<org.apache.commons.math3.util.ResizableDoubleArray: void addElement(double)>($d0);

     label3:
        return;
    }
    public double apply(org.apache.commons.math3.stat.descriptive.UnivariateStatistic)
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        org.apache.commons.math3.stat.descriptive.UnivariateStatistic $r1;
        double $d0;
        org.apache.commons.math3.util.ResizableDoubleArray $r2;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        $r1 := @parameter0: org.apache.commons.math3.stat.descriptive.UnivariateStatistic;

        $r2 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.util.ResizableDoubleArray eDA>;

        $d0 = virtualinvoke $r2.<org.apache.commons.math3.util.ResizableDoubleArray: double compute(org.apache.commons.math3.util.MathArrays$Function)>($r1);

        return $d0;
    }
    public void clear()
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        org.apache.commons.math3.util.ResizableDoubleArray $r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.util.ResizableDoubleArray eDA>;

        virtualinvoke $r1.<org.apache.commons.math3.util.ResizableDoubleArray: void clear()>();

        return;
    }
    public org.apache.commons.math3.stat.descriptive.DescriptiveStatistics copy()
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0, r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        r1 = new org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        specialinvoke r1.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: void <init>()>();

        staticinvoke <org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: void copy(org.apache.commons.math3.stat.descriptive.DescriptiveStatistics,org.apache.commons.math3.stat.descriptive.DescriptiveStatistics)>(r0, r1);

        return r1;
    }
    public double getElement(int)
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        int $i0;
        double $d0;
        org.apache.commons.math3.util.ResizableDoubleArray $r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        $i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.util.ResizableDoubleArray eDA>;

        $d0 = virtualinvoke $r1.<org.apache.commons.math3.util.ResizableDoubleArray: double getElement(int)>($i0);

        return $d0;
    }
    public double getGeometricMean()
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        double $d0;
        org.apache.commons.math3.stat.descriptive.UnivariateStatistic $r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic geometricMeanImpl>;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: double apply(org.apache.commons.math3.stat.descriptive.UnivariateStatistic)>($r1);

        return $d0;
    }
    public org.apache.commons.math3.stat.descriptive.UnivariateStatistic getGeometricMeanImpl()
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        java.lang.Throwable $r1;
        org.apache.commons.math3.stat.descriptive.UnivariateStatistic r2;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        entermonitor r0;

     label1:
        r2 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic geometricMeanImpl>;

     label2:
        exitmonitor r0;

        return r2;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public double getKurtosis()
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        double $d0;
        org.apache.commons.math3.stat.descriptive.UnivariateStatistic $r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic kurtosisImpl>;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: double apply(org.apache.commons.math3.stat.descriptive.UnivariateStatistic)>($r1);

        return $d0;
    }
    public org.apache.commons.math3.stat.descriptive.UnivariateStatistic getKurtosisImpl()
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        java.lang.Throwable $r1;
        org.apache.commons.math3.stat.descriptive.UnivariateStatistic r2;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        entermonitor r0;

     label1:
        r2 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic kurtosisImpl>;

     label2:
        exitmonitor r0;

        return r2;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public double getMax()
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        double $d0;
        org.apache.commons.math3.stat.descriptive.UnivariateStatistic $r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic maxImpl>;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: double apply(org.apache.commons.math3.stat.descriptive.UnivariateStatistic)>($r1);

        return $d0;
    }
    public org.apache.commons.math3.stat.descriptive.UnivariateStatistic getMaxImpl()
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        java.lang.Throwable $r1;
        org.apache.commons.math3.stat.descriptive.UnivariateStatistic r2;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        entermonitor r0;

     label1:
        r2 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic maxImpl>;

     label2:
        exitmonitor r0;

        return r2;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public double getMean()
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        double $d0;
        org.apache.commons.math3.stat.descriptive.UnivariateStatistic $r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic meanImpl>;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: double apply(org.apache.commons.math3.stat.descriptive.UnivariateStatistic)>($r1);

        return $d0;
    }
    public org.apache.commons.math3.stat.descriptive.UnivariateStatistic getMeanImpl()
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        java.lang.Throwable $r1;
        org.apache.commons.math3.stat.descriptive.UnivariateStatistic r2;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        entermonitor r0;

     label1:
        r2 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic meanImpl>;

     label2:
        exitmonitor r0;

        return r2;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public double getMin()
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        double $d0;
        org.apache.commons.math3.stat.descriptive.UnivariateStatistic $r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic minImpl>;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: double apply(org.apache.commons.math3.stat.descriptive.UnivariateStatistic)>($r1);

        return $d0;
    }
    public org.apache.commons.math3.stat.descriptive.UnivariateStatistic getMinImpl()
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        java.lang.Throwable $r1;
        org.apache.commons.math3.stat.descriptive.UnivariateStatistic r2;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        entermonitor r0;

     label1:
        r2 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic minImpl>;

     label2:
        exitmonitor r0;

        return r2;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public long getN()
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        int $i0;
        org.apache.commons.math3.util.ResizableDoubleArray $r1;
        long $l1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.util.ResizableDoubleArray eDA>;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.util.ResizableDoubleArray: int getNumElements()>();

        $l1 = (long) $i0;

        return $l1;
    }
    public double getPercentile(double) throws org.apache.commons.math3.exception.MathIllegalStateException, org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        double $d0;
        java.lang.NoSuchMethodException r1;
        java.lang.IllegalAccessException r2;
        java.lang.reflect.InvocationTargetException r3;
        org.apache.commons.math3.stat.descriptive.UnivariateStatistic $r4;
        boolean $z0;
        org.apache.commons.math3.stat.descriptive.rank.Percentile $r5;
        java.lang.Class $r6, $r8;
        java.lang.Class[] $r7;
        java.lang.reflect.Method $r9;
        java.lang.Object[] $r10;
        java.lang.Double $r11;
        org.apache.commons.math3.exception.MathIllegalStateException $r12;
        org.apache.commons.math3.exception.util.LocalizedFormats $r13;
        java.lang.String $r14;
        java.lang.IllegalStateException $r15;
        java.lang.Throwable $r16;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        $d0 := @parameter0: double;

        $r4 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic percentileImpl>;

        $z0 = $r4 instanceof org.apache.commons.math3.stat.descriptive.rank.Percentile;

        if $z0 == 0 goto label02;

        $r4 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic percentileImpl>;

        $r5 = (org.apache.commons.math3.stat.descriptive.rank.Percentile) $r4;

        virtualinvoke $r5.<org.apache.commons.math3.stat.descriptive.rank.Percentile: void setQuantile(double)>($d0);

     label01:
        $r4 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic percentileImpl>;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: double apply(org.apache.commons.math3.stat.descriptive.UnivariateStatistic)>($r4);

        return $d0;

     label02:
        $r4 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic percentileImpl>;

     label03:
        $r6 = virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();

     label04:
        $r7 = newarray (java.lang.Class)[1];

        $r8 = <java.lang.Double: java.lang.Class TYPE>;

        $r7[0] = $r8;

     label05:
        $r9 = virtualinvoke $r6.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("setQuantile", $r7);

     label06:
        $r4 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic percentileImpl>;

        $r10 = newarray (java.lang.Object)[1];

     label07:
        $r11 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

     label08:
        $r10[0] = $r11;

     label09:
        virtualinvoke $r9.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r4, $r10);

     label10:
        goto label01;

     label11:
        r1 := @caughtexception;

        $r12 = new org.apache.commons.math3.exception.MathIllegalStateException;

        $r13 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD>;

        $r10 = newarray (java.lang.Object)[2];

        $r4 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic percentileImpl>;

        $r6 = virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();

        $r14 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r10[0] = $r14;

        $r10[1] = "setQuantile";

        specialinvoke $r12.<org.apache.commons.math3.exception.MathIllegalStateException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r13, $r10);

        throw $r12;

     label12:
        r2 := @caughtexception;

        $r12 = new org.apache.commons.math3.exception.MathIllegalStateException;

        $r13 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD>;

        $r10 = newarray (java.lang.Object)[2];

        $r10[0] = "setQuantile";

        $r4 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic percentileImpl>;

        $r6 = virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();

        $r14 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r10[1] = $r14;

        specialinvoke $r12.<org.apache.commons.math3.exception.MathIllegalStateException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r13, $r10);

        throw $r12;

     label13:
        r3 := @caughtexception;

        $r15 = new java.lang.IllegalStateException;

        $r16 = virtualinvoke r3.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        specialinvoke $r15.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r16);

        throw $r15;

        catch java.lang.NoSuchMethodException from label03 to label04 with label11;
        catch java.lang.NoSuchMethodException from label05 to label06 with label11;
        catch java.lang.NoSuchMethodException from label07 to label08 with label11;
        catch java.lang.NoSuchMethodException from label09 to label10 with label11;
        catch java.lang.IllegalAccessException from label03 to label04 with label12;
        catch java.lang.IllegalAccessException from label05 to label06 with label12;
        catch java.lang.IllegalAccessException from label07 to label08 with label12;
        catch java.lang.IllegalAccessException from label09 to label10 with label12;
        catch java.lang.reflect.InvocationTargetException from label03 to label04 with label13;
        catch java.lang.reflect.InvocationTargetException from label05 to label06 with label13;
        catch java.lang.reflect.InvocationTargetException from label07 to label08 with label13;
        catch java.lang.reflect.InvocationTargetException from label09 to label10 with label13;
    }
    public org.apache.commons.math3.stat.descriptive.UnivariateStatistic getPercentileImpl()
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        java.lang.Throwable $r1;
        org.apache.commons.math3.stat.descriptive.UnivariateStatistic r2;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        entermonitor r0;

     label1:
        r2 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic percentileImpl>;

     label2:
        exitmonitor r0;

        return r2;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public double getPopulationVariance()
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        double $d0;
        org.apache.commons.math3.stat.descriptive.moment.Variance $r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        $r1 = new org.apache.commons.math3.stat.descriptive.moment.Variance;

        specialinvoke $r1.<org.apache.commons.math3.stat.descriptive.moment.Variance: void <init>(boolean)>(0);

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: double apply(org.apache.commons.math3.stat.descriptive.UnivariateStatistic)>($r1);

        return $d0;
    }
    public double getQuadraticMean()
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        double $d0, $d1;
        long $l0;
        byte $b1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        $l0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: long getN()>();

        $b1 = $l0 cmp 0L;

        if $b1 <= 0 goto label1;

        $d1 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: double getSumsq()>();

        $d0 = (double) $l0;

        $d0 = $d1 / $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d0);

        return $d0;

     label1:
        return #NaN;
    }
    public double getSkewness()
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        double $d0;
        org.apache.commons.math3.stat.descriptive.UnivariateStatistic $r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic skewnessImpl>;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: double apply(org.apache.commons.math3.stat.descriptive.UnivariateStatistic)>($r1);

        return $d0;
    }
    public org.apache.commons.math3.stat.descriptive.UnivariateStatistic getSkewnessImpl()
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        java.lang.Throwable $r1;
        org.apache.commons.math3.stat.descriptive.UnivariateStatistic r2;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        entermonitor r0;

     label1:
        r2 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic skewnessImpl>;

     label2:
        exitmonitor r0;

        return r2;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public double[] getSortedValues()
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        double[] $r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: double[] getValues()>();

        staticinvoke <java.util.Arrays: void sort(double[])>($r1);

        return $r1;
    }
    public double getStandardDeviation()
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        long $l0;
        byte $b1;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        $l0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: long getN()>();

        $b1 = $l0 cmp 0L;

        if $b1 <= 0 goto label2;

        $l0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: long getN()>();

        $b1 = $l0 cmp 1L;

        if $b1 <= 0 goto label1;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: double getVariance()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d0);

        return $d0;

     label1:
        return 0.0;

     label2:
        return #NaN;
    }
    public double getSum()
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        double $d0;
        org.apache.commons.math3.stat.descriptive.UnivariateStatistic $r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic sumImpl>;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: double apply(org.apache.commons.math3.stat.descriptive.UnivariateStatistic)>($r1);

        return $d0;
    }
    public org.apache.commons.math3.stat.descriptive.UnivariateStatistic getSumImpl()
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        java.lang.Throwable $r1;
        org.apache.commons.math3.stat.descriptive.UnivariateStatistic r2;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        entermonitor r0;

     label1:
        r2 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic sumImpl>;

     label2:
        exitmonitor r0;

        return r2;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public double getSumsq()
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        double $d0;
        org.apache.commons.math3.stat.descriptive.UnivariateStatistic $r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic sumsqImpl>;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: double apply(org.apache.commons.math3.stat.descriptive.UnivariateStatistic)>($r1);

        return $d0;
    }
    public org.apache.commons.math3.stat.descriptive.UnivariateStatistic getSumsqImpl()
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        java.lang.Throwable $r1;
        org.apache.commons.math3.stat.descriptive.UnivariateStatistic r2;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        entermonitor r0;

     label1:
        r2 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic sumsqImpl>;

     label2:
        exitmonitor r0;

        return r2;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public double[] getValues()
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        double[] $r1;
        org.apache.commons.math3.util.ResizableDoubleArray $r2;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        $r2 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.util.ResizableDoubleArray eDA>;

        $r1 = virtualinvoke $r2.<org.apache.commons.math3.util.ResizableDoubleArray: double[] getElements()>();

        return $r1;
    }
    public double getVariance()
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        double $d0;
        org.apache.commons.math3.stat.descriptive.UnivariateStatistic $r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic varianceImpl>;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: double apply(org.apache.commons.math3.stat.descriptive.UnivariateStatistic)>($r1);

        return $d0;
    }
    public org.apache.commons.math3.stat.descriptive.UnivariateStatistic getVarianceImpl()
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        java.lang.Throwable $r1;
        org.apache.commons.math3.stat.descriptive.UnivariateStatistic r2;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        entermonitor r0;

     label1:
        r2 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic varianceImpl>;

     label2:
        exitmonitor r0;

        return r2;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public int getWindowSize()
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        int i0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        i0 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: int windowSize>;

        return i0;
    }
    public void removeMostRecentValue() throws org.apache.commons.math3.exception.MathIllegalStateException
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        org.apache.commons.math3.exception.MathIllegalArgumentException r1;
        org.apache.commons.math3.util.ResizableDoubleArray $r2;
        org.apache.commons.math3.exception.MathIllegalStateException $r3;
        org.apache.commons.math3.exception.util.LocalizedFormats $r4;
        java.lang.Object[] $r5;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        $r2 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.util.ResizableDoubleArray eDA>;

     label1:
        virtualinvoke $r2.<org.apache.commons.math3.util.ResizableDoubleArray: void discardMostRecentElements(int)>(1);

     label2:
        return;

     label3:
        r1 := @caughtexception;

        $r3 = new org.apache.commons.math3.exception.MathIllegalStateException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NO_DATA>;

        $r5 = newarray (java.lang.Object)[0];

        specialinvoke $r3.<org.apache.commons.math3.exception.MathIllegalStateException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r4, $r5);

        throw $r3;

        catch org.apache.commons.math3.exception.MathIllegalArgumentException from label1 to label2 with label3;
    }
    public double replaceMostRecentValue(double) throws org.apache.commons.math3.exception.MathIllegalStateException
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        double $d0;
        org.apache.commons.math3.util.ResizableDoubleArray $r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        $d0 := @parameter0: double;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.util.ResizableDoubleArray eDA>;

        $d0 = virtualinvoke $r1.<org.apache.commons.math3.util.ResizableDoubleArray: double substituteMostRecentElement(double)>($d0);

        return $d0;
    }
    public void setGeometricMeanImpl(org.apache.commons.math3.stat.descriptive.UnivariateStatistic)
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        org.apache.commons.math3.stat.descriptive.UnivariateStatistic $r1;
        java.lang.Throwable $r2;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        $r1 := @parameter0: org.apache.commons.math3.stat.descriptive.UnivariateStatistic;

        entermonitor r0;

     label1:
        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic geometricMeanImpl> = $r1;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public void setKurtosisImpl(org.apache.commons.math3.stat.descriptive.UnivariateStatistic)
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        org.apache.commons.math3.stat.descriptive.UnivariateStatistic $r1;
        java.lang.Throwable $r2;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        $r1 := @parameter0: org.apache.commons.math3.stat.descriptive.UnivariateStatistic;

        entermonitor r0;

     label1:
        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic kurtosisImpl> = $r1;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public void setMaxImpl(org.apache.commons.math3.stat.descriptive.UnivariateStatistic)
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        org.apache.commons.math3.stat.descriptive.UnivariateStatistic $r1;
        java.lang.Throwable $r2;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        $r1 := @parameter0: org.apache.commons.math3.stat.descriptive.UnivariateStatistic;

        entermonitor r0;

     label1:
        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic maxImpl> = $r1;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public void setMeanImpl(org.apache.commons.math3.stat.descriptive.UnivariateStatistic)
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        org.apache.commons.math3.stat.descriptive.UnivariateStatistic $r1;
        java.lang.Throwable $r2;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        $r1 := @parameter0: org.apache.commons.math3.stat.descriptive.UnivariateStatistic;

        entermonitor r0;

     label1:
        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic meanImpl> = $r1;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public void setMinImpl(org.apache.commons.math3.stat.descriptive.UnivariateStatistic)
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        org.apache.commons.math3.stat.descriptive.UnivariateStatistic $r1;
        java.lang.Throwable $r2;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        $r1 := @parameter0: org.apache.commons.math3.stat.descriptive.UnivariateStatistic;

        entermonitor r0;

     label1:
        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic minImpl> = $r1;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public void setPercentileImpl(org.apache.commons.math3.stat.descriptive.UnivariateStatistic) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        org.apache.commons.math3.stat.descriptive.UnivariateStatistic $r1;
        java.lang.NoSuchMethodException r2;
        java.lang.IllegalAccessException r3;
        java.lang.reflect.InvocationTargetException r4;
        java.lang.Class $r5, $r7;
        java.lang.Class[] $r6;
        java.lang.reflect.Method $r8;
        java.lang.Object[] $r9;
        java.lang.Double $r10;
        org.apache.commons.math3.exception.MathIllegalArgumentException $r11;
        org.apache.commons.math3.exception.util.LocalizedFormats $r12;
        java.lang.String $r13;
        java.lang.Throwable $r14;
        java.lang.IllegalArgumentException $r15;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        $r1 := @parameter0: org.apache.commons.math3.stat.descriptive.UnivariateStatistic;

        entermonitor r0;

     label01:
        $r5 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

     label02:
        $r6 = newarray (java.lang.Class)[1];

        $r7 = <java.lang.Double: java.lang.Class TYPE>;

        $r6[0] = $r7;

     label03:
        $r8 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("setQuantile", $r6);

     label04:
        $r9 = newarray (java.lang.Object)[1];

     label05:
        $r10 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(50.0);

     label06:
        $r9[0] = $r10;

     label07:
        virtualinvoke $r8.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r1, $r9);

     label08:
        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic percentileImpl> = $r1;

     label09:
        exitmonitor r0;

        return;

     label10:
        r2 := @caughtexception;

     label11:
        $r11 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r12 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD>;

        $r9 = newarray (java.lang.Object)[2];

        $r5 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r13 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r9[0] = $r13;

        $r9[1] = "setQuantile";

        specialinvoke $r11.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r12, $r9);

        throw $r11;

     label12:
        $r14 := @caughtexception;

        exitmonitor r0;

        throw $r14;

     label13:
        r3 := @caughtexception;

     label14:
        $r11 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r12 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD>;

        $r9 = newarray (java.lang.Object)[2];

        $r9[0] = "setQuantile";

        $r5 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r13 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r9[1] = $r13;

        specialinvoke $r11.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r12, $r9);

        throw $r11;

     label15:
        r4 := @caughtexception;

        $r15 = new java.lang.IllegalArgumentException;

        $r14 = virtualinvoke r4.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r14);

        throw $r15;

     label16:
        nop;

        catch java.lang.NoSuchMethodException from label01 to label02 with label10;
        catch java.lang.NoSuchMethodException from label03 to label04 with label10;
        catch java.lang.NoSuchMethodException from label05 to label06 with label10;
        catch java.lang.NoSuchMethodException from label07 to label08 with label10;
        catch java.lang.IllegalAccessException from label01 to label02 with label13;
        catch java.lang.IllegalAccessException from label03 to label04 with label13;
        catch java.lang.IllegalAccessException from label05 to label06 with label13;
        catch java.lang.IllegalAccessException from label07 to label08 with label13;
        catch java.lang.reflect.InvocationTargetException from label01 to label02 with label15;
        catch java.lang.reflect.InvocationTargetException from label03 to label04 with label15;
        catch java.lang.reflect.InvocationTargetException from label05 to label06 with label15;
        catch java.lang.reflect.InvocationTargetException from label07 to label08 with label15;
        catch java.lang.Throwable from label01 to label08 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label11 to label12 with label12;
        catch java.lang.Throwable from label14 to label16 with label12;
    }
    public void setSkewnessImpl(org.apache.commons.math3.stat.descriptive.UnivariateStatistic)
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        org.apache.commons.math3.stat.descriptive.UnivariateStatistic $r1;
        java.lang.Throwable $r2;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        $r1 := @parameter0: org.apache.commons.math3.stat.descriptive.UnivariateStatistic;

        entermonitor r0;

     label1:
        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic skewnessImpl> = $r1;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public void setSumImpl(org.apache.commons.math3.stat.descriptive.UnivariateStatistic)
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        org.apache.commons.math3.stat.descriptive.UnivariateStatistic $r1;
        java.lang.Throwable $r2;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        $r1 := @parameter0: org.apache.commons.math3.stat.descriptive.UnivariateStatistic;

        entermonitor r0;

     label1:
        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic sumImpl> = $r1;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public void setSumsqImpl(org.apache.commons.math3.stat.descriptive.UnivariateStatistic)
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        org.apache.commons.math3.stat.descriptive.UnivariateStatistic $r1;
        java.lang.Throwable $r2;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        $r1 := @parameter0: org.apache.commons.math3.stat.descriptive.UnivariateStatistic;

        entermonitor r0;

     label1:
        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic sumsqImpl> = $r1;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public void setVarianceImpl(org.apache.commons.math3.stat.descriptive.UnivariateStatistic)
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        org.apache.commons.math3.stat.descriptive.UnivariateStatistic $r1;
        java.lang.Throwable $r2;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        $r1 := @parameter0: org.apache.commons.math3.stat.descriptive.UnivariateStatistic;

        entermonitor r0;

     label1:
        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic varianceImpl> = $r1;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public void setWindowSize(int) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        int $i0, $i1;
        org.apache.commons.math3.exception.MathIllegalArgumentException $r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        java.lang.Object[] $r3;
        java.lang.Integer $r4;
        org.apache.commons.math3.util.ResizableDoubleArray $r5, $r6;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        $i0 := @parameter0: int;

        if $i0 >= 1 goto label1;

        if $i0 == -1 goto label1;

        $r1 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NOT_POSITIVE_WINDOW_SIZE>;

        $r3 = newarray (java.lang.Object)[1];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3[0] = $r4;

        specialinvoke $r1.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r2, $r3);

        throw $r1;

     label1:
        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: int windowSize> = $i0;

        if $i0 == -1 goto label2;

        $r5 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.util.ResizableDoubleArray eDA>;

        $i1 = virtualinvoke $r5.<org.apache.commons.math3.util.ResizableDoubleArray: int getNumElements()>();

        if $i0 >= $i1 goto label2;

        $r5 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.util.ResizableDoubleArray eDA>;

        $r6 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.util.ResizableDoubleArray eDA>;

        $i1 = virtualinvoke $r6.<org.apache.commons.math3.util.ResizableDoubleArray: int getNumElements()>();

        $i0 = $i1 - $i0;

        virtualinvoke $r5.<org.apache.commons.math3.util.ResizableDoubleArray: void discardFrontElements(int)>($i0);

     label2:
        return;
    }
    public java.lang.String toString()
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        org.apache.commons.math3.exception.MathIllegalStateException r1;
        java.lang.StringBuilder r2, $r3;
        long $l0;
        double $d0;
        java.lang.String $r4;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DescriptiveStatistics:");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r3 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("n: ");

        $l0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: long getN()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r3 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("min: ");

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: double getMin()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r3 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("max: ");

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: double getMax()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r3 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mean: ");

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: double getMean()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r3 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("std dev: ");

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: double getStandardDeviation()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

     label1:
        $r3 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("median: ");

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: double getPercentile(double)>(50.0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

     label2:
        $r3 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("skewness: ");

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: double getSkewness()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r3 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("kurtosis: ");

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: double getKurtosis()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;

     label3:
        r1 := @caughtexception;

        $r3 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("median: unavailable");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        goto label2;

        catch org.apache.commons.math3.exception.MathIllegalStateException from label1 to label2 with label3;
    }
