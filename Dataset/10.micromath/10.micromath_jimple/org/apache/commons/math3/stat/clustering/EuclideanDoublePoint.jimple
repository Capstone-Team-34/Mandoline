org.apache.commons.math3.stat.clustering.EuclideanDoublePoint extends java.lang.Object implements org.apache.commons.math3.stat.clustering.Clusterable java.io.Serializable
private static final long serialVersionUID
private final double[] point
    public void <init>(double[])
    {
        org.apache.commons.math3.stat.clustering.EuclideanDoublePoint r0;
        double[] $r1;

        r0 := @this: org.apache.commons.math3.stat.clustering.EuclideanDoublePoint;

        $r1 := @parameter0: double[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.stat.clustering.EuclideanDoublePoint: double[] point> = $r1;

        return;
    }
    public volatile java.lang.Object centroidOf(java.util.Collection)
    {
        org.apache.commons.math3.stat.clustering.EuclideanDoublePoint r0;
        java.util.Collection $r1;

        r0 := @this: org.apache.commons.math3.stat.clustering.EuclideanDoublePoint;

        $r1 := @parameter0: java.util.Collection;

        r0 = virtualinvoke r0.<org.apache.commons.math3.stat.clustering.EuclideanDoublePoint: org.apache.commons.math3.stat.clustering.EuclideanDoublePoint centroidOf(java.util.Collection)>($r1);

        return r0;
    }
    public org.apache.commons.math3.stat.clustering.EuclideanDoublePoint centroidOf(java.util.Collection)
    {
        org.apache.commons.math3.stat.clustering.EuclideanDoublePoint r0;
        java.util.Collection r1;
        double[] r2, $r5;
        int $i0, $i1;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.stat.clustering.EuclideanDoublePoint;

        r1 := @parameter0: java.util.Collection;

        r2 = virtualinvoke r0.<org.apache.commons.math3.stat.clustering.EuclideanDoublePoint: double[] getPoint()>();

        $i0 = lengthof r2;

        r2 = newarray (double)[$i0];

        $r3 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r0 = (org.apache.commons.math3.stat.clustering.EuclideanDoublePoint) $r4;

        $i0 = 0;

     label2:
        $i1 = lengthof r2;

        if $i0 >= $i1 goto label1;

        $d0 = r2[$i0];

        $r5 = virtualinvoke r0.<org.apache.commons.math3.stat.clustering.EuclideanDoublePoint: double[] getPoint()>();

        $d1 = $r5[$i0];

        $d0 = $d0 + $d1;

        r2[$i0] = $d0;

        $i0 = $i0 + 1;

        goto label2;

     label3:
        $i0 = 0;

     label4:
        $i1 = lengthof r2;

        if $i0 >= $i1 goto label5;

        $d0 = r2[$i0];

        $i1 = interfaceinvoke r1.<java.util.Collection: int size()>();

        $d1 = (double) $i1;

        $d0 = $d0 / $d1;

        r2[$i0] = $d0;

        $i0 = $i0 + 1;

        goto label4;

     label5:
        r0 = new org.apache.commons.math3.stat.clustering.EuclideanDoublePoint;

        specialinvoke r0.<org.apache.commons.math3.stat.clustering.EuclideanDoublePoint: void <init>(double[])>(r2);

        return r0;
    }
    public volatile double distanceFrom(java.lang.Object)
    {
        org.apache.commons.math3.stat.clustering.EuclideanDoublePoint r0, $r2;
        double $d0;
        java.lang.Object $r1;

        r0 := @this: org.apache.commons.math3.stat.clustering.EuclideanDoublePoint;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math3.stat.clustering.EuclideanDoublePoint) $r1;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.clustering.EuclideanDoublePoint: double distanceFrom(org.apache.commons.math3.stat.clustering.EuclideanDoublePoint)>($r2);

        return $d0;
    }
    public double distanceFrom(org.apache.commons.math3.stat.clustering.EuclideanDoublePoint)
    {
        org.apache.commons.math3.stat.clustering.EuclideanDoublePoint r0, $r1;
        double[] $r2, $r3;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.clustering.EuclideanDoublePoint;

        $r1 := @parameter0: org.apache.commons.math3.stat.clustering.EuclideanDoublePoint;

        $r2 = r0.<org.apache.commons.math3.stat.clustering.EuclideanDoublePoint: double[] point>;

        $r3 = virtualinvoke $r1.<org.apache.commons.math3.stat.clustering.EuclideanDoublePoint: double[] getPoint()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.MathArrays: double distance(double[],double[])>($r2, $r3);

        return $d0;
    }
    public boolean equals(java.lang.Object)
    {
        org.apache.commons.math3.stat.clustering.EuclideanDoublePoint r0;
        double[] $r1, $r3;
        boolean $z0;
        java.lang.Object r2;

        r0 := @this: org.apache.commons.math3.stat.clustering.EuclideanDoublePoint;

        r2 := @parameter0: java.lang.Object;

        $z0 = r2 instanceof org.apache.commons.math3.stat.clustering.EuclideanDoublePoint;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r3 = r0.<org.apache.commons.math3.stat.clustering.EuclideanDoublePoint: double[] point>;

        r0 = (org.apache.commons.math3.stat.clustering.EuclideanDoublePoint) r2;

        $r1 = r0.<org.apache.commons.math3.stat.clustering.EuclideanDoublePoint: double[] point>;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(double[],double[])>($r3, $r1);

        return $z0;
    }
    public double[] getPoint()
    {
        org.apache.commons.math3.stat.clustering.EuclideanDoublePoint r0;
        double[] r1;

        r0 := @this: org.apache.commons.math3.stat.clustering.EuclideanDoublePoint;

        r1 = r0.<org.apache.commons.math3.stat.clustering.EuclideanDoublePoint: double[] point>;

        return r1;
    }
    public int hashCode()
    {
        org.apache.commons.math3.stat.clustering.EuclideanDoublePoint r0;
        int $i0;
        double[] $r1;

        r0 := @this: org.apache.commons.math3.stat.clustering.EuclideanDoublePoint;

        $r1 = r0.<org.apache.commons.math3.stat.clustering.EuclideanDoublePoint: double[] point>;

        $i0 = staticinvoke <java.util.Arrays: int hashCode(double[])>($r1);

        return $i0;
    }
    public java.lang.String toString()
    {
        org.apache.commons.math3.stat.clustering.EuclideanDoublePoint r0;
        java.lang.String $r1;
        double[] $r2;

        r0 := @this: org.apache.commons.math3.stat.clustering.EuclideanDoublePoint;

        $r2 = r0.<org.apache.commons.math3.stat.clustering.EuclideanDoublePoint: double[] point>;

        $r1 = staticinvoke <java.util.Arrays: java.lang.String toString(double[])>($r2);

        return $r1;
    }
