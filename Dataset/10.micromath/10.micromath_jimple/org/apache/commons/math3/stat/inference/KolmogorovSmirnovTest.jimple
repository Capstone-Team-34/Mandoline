org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest extends java.lang.Object
protected static final double KS_SUM_CAUCHY_CRITERION
protected static final int LARGE_SAMPLE_PRODUCT
protected static final int MAXIMUM_PARTIAL_SUM_COUNT
protected static final int MONTE_CARLO_ITERATIONS
protected static final double PG_SUM_RELATIVE_ERROR
protected static final int SMALL_SAMPLE_PRODUCT
private final org.apache.commons.math3.random.RandomGenerator rng
    public void <init>()
    {
        org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest r0;
        org.apache.commons.math3.random.Well19937c $r1;

        r0 := @this: org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.commons.math3.random.Well19937c;

        specialinvoke $r1.<org.apache.commons.math3.random.Well19937c: void <init>()>();

        r0.<org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: org.apache.commons.math3.random.RandomGenerator rng> = $r1;

        return;
    }
    public void <init>(org.apache.commons.math3.random.RandomGenerator)
    {
        org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest r0;
        org.apache.commons.math3.random.RandomGenerator $r1;

        r0 := @this: org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest;

        $r1 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: org.apache.commons.math3.random.RandomGenerator rng> = $r1;

        return;
    }
    private static int c(int, int, int, int, long, boolean)
    {
        int $i0, $i1, $i2, $i3;
        long $l4, $l5, $l6, $l7;
        boolean $z0;
        byte $b8;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $l4 := @parameter4: long;

        $z0 := @parameter5: boolean;

        if $z0 == 0 goto label2;

        $l5 = (long) $i0;

        $l6 = (long) $i3;

        $l5 = $l5 * $l6;

        $l6 = (long) $i1;

        $l7 = (long) $i2;

        $l6 = $l6 * $l7;

        $l5 = $l5 - $l6;

        $l5 = staticinvoke <org.apache.commons.math3.util.FastMath: long abs(long)>($l5);

        $b8 = $l5 cmp $l4;

        if $b8 > 0 goto label1;

        return 1;

     label1:
        return 0;

     label2:
        $l5 = (long) $i0;

        $l6 = (long) $i3;

        $l5 = $l5 * $l6;

        $l6 = (long) $i1;

        $l7 = (long) $i2;

        $l6 = $l6 * $l7;

        $l5 = $l5 - $l6;

        $l5 = staticinvoke <org.apache.commons.math3.util.FastMath: long abs(long)>($l5);

        $b8 = $l5 cmp $l4;

        if $b8 < 0 goto label3;

        return 0;

     label3:
        return 1;
    }
    private static long calculateIntegralD(double, int, int, boolean)
    {
        double $d0, $d1, $d2;
        int $i0, $i1;
        boolean $z0;
        long l2, $l3;
        byte $b4;

        $d0 := @parameter0: double;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $l3 = (long) $i0;

        l2 = (long) $i1;

        l2 = $l3 * l2;

        $d1 = $d0 - 1.0E-12;

        $d2 = (double) l2;

        $d1 = $d1 * $d2;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double ceil(double)>($d1);

        $l3 = (long) $d1;

        $d0 = 1.0E-12 + $d0;

        $d1 = (double) l2;

        $d0 = $d0 * $d1;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double floor(double)>($d0);

        l2 = (long) $d0;

        if $z0 == 0 goto label1;

        $b4 = l2 cmp $l3;

        if $b4 != 0 goto label1;

        $l3 = $l3 + 1L;

     label1:
        return $l3;
    }
    private void checkArray(double[])
    {
        org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest r0;
        double[] $r1;
        org.apache.commons.math3.exception.NullArgumentException $r2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3;
        java.lang.Object[] $r4;
        int $i0;
        org.apache.commons.math3.exception.InsufficientDataException $r5;
        java.lang.Integer $r6;

        r0 := @this: org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest;

        $r1 := @parameter0: double[];

        if $r1 != null goto label1;

        $r2 = new org.apache.commons.math3.exception.NullArgumentException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NULL_NOT_ALLOWED>;

        $r4 = newarray (java.lang.Object)[0];

        specialinvoke $r2.<org.apache.commons.math3.exception.NullArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r3, $r4);

        throw $r2;

     label1:
        $i0 = lengthof $r1;

        if $i0 >= 2 goto label2;

        $r5 = new org.apache.commons.math3.exception.InsufficientDataException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE>;

        $r4 = newarray (java.lang.Object)[2];

        $i0 = lengthof $r1;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r4[0] = $r6;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r4[1] = $r6;

        specialinvoke $r5.<org.apache.commons.math3.exception.InsufficientDataException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r3, $r4);

        throw $r5;

     label2:
        return;
    }
    private org.apache.commons.math3.linear.FieldMatrix createExactH(double, int) throws org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.fraction.FractionConversionException
    {
        org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest r0;
        double $d0, $d1, $d2;
        int $i0, i1, i2, $i4, $i5;
        org.apache.commons.math3.fraction.FractionConversionException r1, r2;
        org.apache.commons.math3.fraction.BigFraction[] r3, $r12, $r13;
        byte $b3;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r4;
        java.lang.Double $r5, $r6;
        org.apache.commons.math3.fraction.BigFraction r7, $r11, $r14;
        int[] $r8;
        java.lang.Object $r9;
        org.apache.commons.math3.fraction.BigFraction[][] r10;
        org.apache.commons.math3.linear.Array2DRowFieldMatrix $r15;
        org.apache.commons.math3.fraction.BigFractionField $r16;

        r0 := @this: org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest;

        $d0 := @parameter0: double;

        $i0 := @parameter1: int;

        $d1 = (double) $i0;

        $d1 = $d1 * $d0;

        $d1 = staticinvoke <java.lang.Math: double ceil(double)>($d1);

        i1 = (int) $d1;

        i2 = i1 * 2;

        i2 = i2 + -1;

        $d1 = (double) i1;

        $d2 = (double) $i0;

        $d0 = $d2 * $d0;

        $d0 = $d1 - $d0;

        $b3 = $d0 cmpl 1.0;

        if $b3 < 0 goto label01;

        $r4 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        specialinvoke $r4.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r5, $r6, 0);

        throw $r4;

     label01:
        r7 = new org.apache.commons.math3.fraction.BigFraction;

     label02:
        specialinvoke r7.<org.apache.commons.math3.fraction.BigFraction: void <init>(double,double,int)>($d0, 1.0E-20, 10000);

     label03:
        $r8 = newarray (int)[2];

        $r8[0] = i2;

        $r8[1] = i2;

        $r9 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>(class "Lorg/apache/commons/math3/fraction/BigFraction;", $r8);

        r10 = (org.apache.commons.math3.fraction.BigFraction[][]) $r9;

        $i0 = 0;

     label04:
        if $i0 >= i2 goto label13;

        i1 = 0;

     label05:
        if i1 >= i2 goto label12;

        $i4 = $i0 - i1;

        $i4 = $i4 + 1;

        if $i4 >= 0 goto label11;

        r3 = r10[$i0];

        $r11 = <org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction ZERO>;

        r3[i1] = $r11;

     label06:
        i1 = i1 + 1;

        goto label05;

     label07:
        r1 := @caughtexception;

        r7 = new org.apache.commons.math3.fraction.BigFraction;

     label08:
        specialinvoke r7.<org.apache.commons.math3.fraction.BigFraction: void <init>(double,double,int)>($d0, 1.0E-10, 10000);

     label09:
        goto label03;

     label10:
        r2 := @caughtexception;

        r7 = new org.apache.commons.math3.fraction.BigFraction;

        specialinvoke r7.<org.apache.commons.math3.fraction.BigFraction: void <init>(double,double,int)>($d0, 1.0E-5, 10000);

        goto label03;

     label11:
        r3 = r10[$i0];

        $r11 = <org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction ONE>;

        r3[i1] = $r11;

        goto label06;

     label12:
        $i0 = $i0 + 1;

        goto label04;

     label13:
        r3 = newarray (org.apache.commons.math3.fraction.BigFraction)[i2];

        r3[0] = r7;

        $i0 = 1;

     label14:
        if $i0 >= i2 goto label15;

        i1 = $i0 + -1;

        $r11 = r3[i1];

        $r11 = virtualinvoke r7.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction multiply(org.apache.commons.math3.fraction.BigFraction)>($r11);

        r3[$i0] = $r11;

        $i0 = $i0 + 1;

        goto label14;

     label15:
        $i0 = 0;

     label16:
        if $i0 >= i2 goto label17;

        $r12 = r10[$i0];

        $r13 = r10[$i0];

        $r11 = $r13[0];

        $r14 = r3[$i0];

        $r11 = virtualinvoke $r11.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction subtract(org.apache.commons.math3.fraction.BigFraction)>($r14);

        $r12[0] = $r11;

        i1 = i2 + -1;

        $r12 = r10[i1];

        i1 = i2 + -1;

        $r13 = r10[i1];

        $r11 = $r13[$i0];

        i1 = i2 - $i0;

        i1 = i1 + -1;

        $r14 = r3[i1];

        $r11 = virtualinvoke $r11.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction subtract(org.apache.commons.math3.fraction.BigFraction)>($r14);

        $r12[$i0] = $r11;

        $i0 = $i0 + 1;

        goto label16;

     label17:
        $r11 = <org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction ONE_HALF>;

        $i0 = virtualinvoke r7.<org.apache.commons.math3.fraction.BigFraction: int compareTo(org.apache.commons.math3.fraction.BigFraction)>($r11);

        if $i0 != 1 goto label18;

        $i0 = i2 + -1;

        r3 = r10[$i0];

        $i0 = i2 + -1;

        $r12 = r10[$i0];

        $r11 = $r12[0];

        r7 = virtualinvoke r7.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction multiply(int)>(2);

        r7 = virtualinvoke r7.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction subtract(int)>(1);

        r7 = virtualinvoke r7.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction pow(int)>(i2);

        r7 = virtualinvoke $r11.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction add(org.apache.commons.math3.fraction.BigFraction)>(r7);

        r3[0] = r7;

     label18:
        $i0 = 0;

     label19:
        if $i0 >= i2 goto label24;

        i1 = 0;

     label20:
        $i4 = $i0 + 1;

        if i1 >= $i4 goto label23;

        $i4 = $i0 - i1;

        $i4 = $i4 + 1;

        if $i4 <= 0 goto label22;

        $i4 = 2;

     label21:
        $i5 = $i0 - i1;

        $i5 = $i5 + 1;

        if $i4 > $i5 goto label22;

        r3 = r10[$i0];

        $r12 = r10[$i0];

        r7 = $r12[i1];

        r7 = virtualinvoke r7.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction divide(int)>($i4);

        r3[i1] = r7;

        $i4 = $i4 + 1;

        goto label21;

     label22:
        i1 = i1 + 1;

        goto label20;

     label23:
        $i0 = $i0 + 1;

        goto label19;

     label24:
        $r15 = new org.apache.commons.math3.linear.Array2DRowFieldMatrix;

        $r16 = staticinvoke <org.apache.commons.math3.fraction.BigFractionField: org.apache.commons.math3.fraction.BigFractionField getInstance()>();

        specialinvoke $r15.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: void <init>(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][])>($r16, r10);

        return $r15;

        catch org.apache.commons.math3.fraction.FractionConversionException from label02 to label03 with label07;
        catch org.apache.commons.math3.fraction.FractionConversionException from label08 to label09 with label10;
    }
    private org.apache.commons.math3.linear.RealMatrix createRoundedH(double, int) throws org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest r0;
        double $d0, $d1, $d2;
        int $i0, i1, i2, $i4, $i5;
        double[] r1, $r9, $r10;
        byte $b3;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r2;
        java.lang.Double $r3, $r4;
        int[] $r5;
        java.lang.Class $r6;
        java.lang.Object $r7;
        double[][] r8;
        org.apache.commons.math3.linear.RealMatrix $r11;

        r0 := @this: org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest;

        $d0 := @parameter0: double;

        $i0 := @parameter1: int;

        $d1 = (double) $i0;

        $d1 = $d1 * $d0;

        $d1 = staticinvoke <java.lang.Math: double ceil(double)>($d1);

        i1 = (int) $d1;

        i2 = i1 * 2;

        i2 = i2 + -1;

        $d1 = (double) i1;

        $d2 = (double) $i0;

        $d0 = $d2 * $d0;

        $d0 = $d1 - $d0;

        $b3 = $d0 cmpl 1.0;

        if $b3 < 0 goto label01;

        $r2 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        specialinvoke $r2.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r3, $r4, 0);

        throw $r2;

     label01:
        $r5 = newarray (int)[2];

        $r5[0] = i2;

        $r5[1] = i2;

        $r6 = <java.lang.Double: java.lang.Class TYPE>;

        $r7 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r6, $r5);

        r8 = (double[][]) $r7;

        $i0 = 0;

     label02:
        if $i0 >= i2 goto label07;

        i1 = 0;

     label03:
        if i1 >= i2 goto label06;

        $i4 = $i0 - i1;

        $i4 = $i4 + 1;

        if $i4 >= 0 goto label05;

        r1 = r8[$i0];

        r1[i1] = 0.0;

     label04:
        i1 = i1 + 1;

        goto label03;

     label05:
        r1 = r8[$i0];

        r1[i1] = 1.0;

        goto label04;

     label06:
        $i0 = $i0 + 1;

        goto label02;

     label07:
        r1 = newarray (double)[i2];

        r1[0] = $d0;

        $i0 = 1;

     label08:
        if $i0 >= i2 goto label09;

        i1 = $i0 + -1;

        $d1 = r1[i1];

        $d1 = $d1 * $d0;

        r1[$i0] = $d1;

        $i0 = $i0 + 1;

        goto label08;

     label09:
        $i0 = 0;

     label10:
        if $i0 >= i2 goto label11;

        $r9 = r8[$i0];

        $r10 = r8[$i0];

        $d1 = $r10[0];

        $d2 = r1[$i0];

        $d1 = $d1 - $d2;

        $r9[0] = $d1;

        i1 = i2 + -1;

        $r9 = r8[i1];

        $d1 = $r9[$i0];

        i1 = i2 - $i0;

        i1 = i1 + -1;

        $d2 = r1[i1];

        $d1 = $d1 - $d2;

        $r9[$i0] = $d1;

        $i0 = $i0 + 1;

        goto label10;

     label11:
        $i0 = staticinvoke <java.lang.Double: int compare(double,double)>($d0, 0.5);

        if $i0 <= 0 goto label12;

        $i0 = i2 + -1;

        r1 = r8[$i0];

        $d1 = r1[0];

        $d0 = 2.0 * $d0;

        $d0 = $d0 - 1.0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,int)>($d0, i2);

        $d0 = $d1 + $d0;

        r1[0] = $d0;

     label12:
        $i0 = 0;

     label13:
        if $i0 >= i2 goto label18;

        i1 = 0;

     label14:
        $i4 = $i0 + 1;

        if i1 >= $i4 goto label17;

        $i4 = $i0 - i1;

        $i4 = $i4 + 1;

        if $i4 <= 0 goto label16;

        $i4 = 2;

     label15:
        $i5 = $i0 - i1;

        $i5 = $i5 + 1;

        if $i4 > $i5 goto label16;

        r1 = r8[$i0];

        $d0 = r1[i1];

        $d1 = (double) $i4;

        $d0 = $d0 / $d1;

        r1[i1] = $d0;

        $i4 = $i4 + 1;

        goto label15;

     label16:
        i1 = i1 + 1;

        goto label14;

     label17:
        $i0 = $i0 + 1;

        goto label13;

     label18:
        $r11 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix createRealMatrix(double[][])>(r8);

        return $r11;
    }
    private double exactK(double, int) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest r0;
        double $d0, $d1;
        int $i0, i1, $i2;
        org.apache.commons.math3.linear.FieldMatrix $r1;
        org.apache.commons.math3.FieldElement $r2;
        org.apache.commons.math3.fraction.BigFraction r3;
        java.math.BigDecimal $r4;

        r0 := @this: org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest;

        $d0 := @parameter0: double;

        $i0 := @parameter1: int;

        $d1 = (double) $i0;

        $d1 = $d1 * $d0;

        $d1 = staticinvoke <java.lang.Math: double ceil(double)>($d1);

        i1 = (int) $d1;

        $r1 = specialinvoke r0.<org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: org.apache.commons.math3.linear.FieldMatrix createExactH(double,int)>($d0, $i0);

        $r1 = interfaceinvoke $r1.<org.apache.commons.math3.linear.FieldMatrix: org.apache.commons.math3.linear.FieldMatrix power(int)>($i0);

        $i2 = i1 + -1;

        i1 = i1 + -1;

        $r2 = interfaceinvoke $r1.<org.apache.commons.math3.linear.FieldMatrix: org.apache.commons.math3.FieldElement getEntry(int,int)>($i2, i1);

        r3 = (org.apache.commons.math3.fraction.BigFraction) $r2;

        $i2 = 1;

     label1:
        if $i2 > $i0 goto label2;

        r3 = virtualinvoke r3.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction multiply(int)>($i2);

        r3 = virtualinvoke r3.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction divide(int)>($i0);

        $i2 = $i2 + 1;

        goto label1;

     label2:
        $r4 = virtualinvoke r3.<org.apache.commons.math3.fraction.BigFraction: java.math.BigDecimal bigDecimalValue(int,int)>(20, 4);

        $d0 = virtualinvoke $r4.<java.math.BigDecimal: double doubleValue()>();

        return $d0;
    }
    static void fillBooleanArrayRandomlyWithFixedNumberTrueValues(boolean[], int, org.apache.commons.math3.random.RandomGenerator)
    {
        boolean[] $r0;
        int $i0, $i1, i2;
        org.apache.commons.math3.random.RandomGenerator $r1;
        boolean $z0;

        $r0 := @parameter0: boolean[];

        $i0 := @parameter1: int;

        $r1 := @parameter2: org.apache.commons.math3.random.RandomGenerator;

        staticinvoke <java.util.Arrays: void fill(boolean[],boolean)>($r0, 1);

     label1:
        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label4;

        $i1 = $i0 + 1;

        $i1 = interfaceinvoke $r1.<org.apache.commons.math3.random.RandomGenerator: int nextInt(int)>($i1);

        i2 = $i1;

        $z0 = $r0[$i1];

        if $z0 == 0 goto label3;

     label2:
        $r0[i2] = 0;

        $i0 = $i0 + 1;

        goto label1;

     label3:
        i2 = $i0;

        goto label2;

     label4:
        return;
    }
    private static void fixTies(double[], double[])
    {
        double[] $r0, $r1, $r4;
        org.apache.commons.math3.distribution.UniformRealDistribution r2;
        int $i0, $i1, $i2;
        double[][] $r3;
        double d0, d1, $d2;
        byte $b3;
        org.apache.commons.math3.random.JDKRandomGenerator $r5;
        boolean $z0;
        org.apache.commons.math3.exception.MathInternalError $r6;

        $r0 := @parameter0: double[];

        $r1 := @parameter1: double[];

        $r3 = newarray (double[])[2];

        $r3[0] = $r0;

        $r3[1] = $r1;

        $r4 = staticinvoke <org.apache.commons.math3.util.MathArrays: double[] concatenate(double[][])>($r3);

        $r4 = staticinvoke <org.apache.commons.math3.util.MathArrays: double[] unique(double[])>($r4);

        $i1 = lengthof $r4;

        $i2 = lengthof $r0;

        $i0 = lengthof $r1;

        $i0 = $i2 + $i0;

        if $i1 != $i0 goto label1;

        return;

     label1:
        d0 = 1.0;

        d1 = $r4[0];

        $i1 = 1;

     label2:
        $i0 = lengthof $r4;

        if $i1 >= $i0 goto label4;

        $d2 = $r4[$i1];

        d1 = d1 - $d2;

        $b3 = d1 cmpg d0;

        if $b3 >= 0 goto label3;

        d0 = d1;

     label3:
        d1 = $r4[$i1];

        $i1 = $i1 + 1;

        goto label2;

     label4:
        d0 = d0 / 2.0;

        r2 = new org.apache.commons.math3.distribution.UniformRealDistribution;

        $r5 = new org.apache.commons.math3.random.JDKRandomGenerator;

        specialinvoke $r5.<org.apache.commons.math3.random.JDKRandomGenerator: void <init>(int)>(100);

        d1 = neg d0;

        specialinvoke r2.<org.apache.commons.math3.distribution.UniformRealDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double,double)>($r5, d1, d0);

        $i1 = 0;

     label5:
        staticinvoke <org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: void jitter(double[],org.apache.commons.math3.distribution.RealDistribution)>($r0, r2);

        staticinvoke <org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: void jitter(double[],org.apache.commons.math3.distribution.RealDistribution)>($r1, r2);

        $z0 = staticinvoke <org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: boolean hasTies(double[],double[])>($r0, $r1);

        $i1 = $i1 + 1;

        if $z0 == 0 goto label6;

        if $i1 < 1000 goto label5;

     label6:
        if $z0 == 0 goto label7;

        $r6 = new org.apache.commons.math3.exception.MathInternalError;

        specialinvoke $r6.<org.apache.commons.math3.exception.MathInternalError: void <init>()>();

        throw $r6;

     label7:
        return;
    }
    private static boolean hasTies(double[], double[])
    {
        double[] $r0, $r1;
        java.util.HashSet r2;
        int i0, $i1;
        double $d0;
        java.lang.Double $r3;
        boolean $z0;

        $r0 := @parameter0: double[];

        $r1 := @parameter1: double[];

        r2 = new java.util.HashSet;

        specialinvoke r2.<java.util.HashSet: void <init>()>();

        i0 = 0;

     label1:
        $i1 = lengthof $r0;

        if i0 >= $i1 goto label3;

        $d0 = $r0[i0];

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $z0 = virtualinvoke r2.<java.util.HashSet: boolean add(java.lang.Object)>($r3);

        if $z0 != 0 goto label2;

        return 1;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        i0 = 0;

     label4:
        $i1 = lengthof $r1;

        if i0 >= $i1 goto label5;

        $d0 = $r1[i0];

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $z0 = virtualinvoke r2.<java.util.HashSet: boolean add(java.lang.Object)>($r3);

        if $z0 == 0 goto label6;

        i0 = i0 + 1;

        goto label4;

     label5:
        return 0;

     label6:
        return 1;
    }
    private long integralKolmogorovSmirnovStatistic(double[], double[])
    {
        org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest r0;
        double[] $r1, $r2;
        int i0, i1, i2, i3, $i6;
        double $d0, $d1;
        long l4, l5, $l7;
        byte $b8;

        r0 := @this: org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[];

        specialinvoke r0.<org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: void checkArray(double[])>($r1);

        specialinvoke r0.<org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: void checkArray(double[])>($r2);

        $r1 = staticinvoke <org.apache.commons.math3.util.MathArrays: double[] copyOf(double[])>($r1);

        $r2 = staticinvoke <org.apache.commons.math3.util.MathArrays: double[] copyOf(double[])>($r2);

        staticinvoke <java.util.Arrays: void sort(double[])>($r1);

        staticinvoke <java.util.Arrays: void sort(double[])>($r2);

        i1 = lengthof $r1;

        i0 = lengthof $r2;

        i2 = 0;

        i3 = 0;

        l4 = 0L;

        l5 = 0L;

     label1:
        $d1 = $r1[i2];

        $d0 = $r2[i3];

        $i6 = staticinvoke <java.lang.Double: int compare(double,double)>($d1, $d0);

        if $i6 > 0 goto label3;

        $d0 = $r1[i2];

     label2:
        if i2 >= i1 goto label4;

        $d1 = $r1[i2];

        $i6 = staticinvoke <java.lang.Double: int compare(double,double)>($d1, $d0);

        if $i6 != 0 goto label4;

        i2 = i2 + 1;

        $l7 = (long) i0;

        l4 = l4 + $l7;

        goto label2;

     label3:
        $d0 = $r2[i3];

        goto label2;

     label4:
        if i3 >= i0 goto label5;

        $d1 = $r2[i3];

        $i6 = staticinvoke <java.lang.Double: int compare(double,double)>($d1, $d0);

        if $i6 != 0 goto label5;

        i3 = i3 + 1;

        $l7 = (long) i1;

        l4 = l4 - $l7;

        goto label4;

     label5:
        $b8 = l4 cmp l5;

        if $b8 <= 0 goto label7;

        l5 = l4;

     label6:
        if i2 >= i1 goto label8;

        if i3 < i0 goto label1;

        return l5;

     label7:
        $l7 = neg l4;

        $b8 = $l7 cmp l5;

        if $b8 <= 0 goto label6;

        l5 = neg l4;

        goto label6;

     label8:
        return l5;
    }
    private double integralMonteCarloP(long, int, int, int)
    {
        org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest r0;
        long $l0, l6, $l9;
        int $i1, $i2, $i3, i4, $i5, i7, $i8;
        boolean[] r1;
        double $d0, $d1;
        org.apache.commons.math3.random.RandomGenerator $r2;
        boolean $z0;
        byte $b10;

        r0 := @this: org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $i5 = staticinvoke <org.apache.commons.math3.util.FastMath: int max(int,int)>($i1, $i2);

        $i1 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i1, $i2);

        i4 = $i5 + $i1;

        $i2 = 0;

        r1 = newarray (boolean)[i4];

        i4 = 0;

     label1:
        if i4 >= $i3 goto label6;

        $r2 = r0.<org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: org.apache.commons.math3.random.RandomGenerator rng>;

        staticinvoke <org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: void fillBooleanArrayRandomlyWithFixedNumberTrueValues(boolean[],int,org.apache.commons.math3.random.RandomGenerator)>(r1, $i5, $r2);

        l6 = 0L;

        i7 = 0;

     label2:
        $i8 = lengthof r1;

        if i7 >= $i8 goto label3;

        $z0 = r1[i7];

        if $z0 == 0 goto label4;

        $l9 = (long) $i1;

        l6 = l6 + $l9;

        $b10 = l6 cmp $l0;

        if $b10 < 0 goto label5;

        $i2 = $i2 + 1;

     label3:
        i4 = i4 + 1;

        goto label1;

     label4:
        $l9 = (long) $i5;

        l6 = l6 - $l9;

        $l9 = neg $l0;

        $b10 = l6 cmp $l9;

        if $b10 > 0 goto label5;

        $i2 = $i2 + 1;

        goto label3;

     label5:
        i7 = i7 + 1;

        goto label2;

     label6:
        $d1 = (double) $i2;

        $d0 = (double) $i3;

        $d0 = $d1 / $d0;

        return $d0;
    }
    private static void jitter(double[], org.apache.commons.math3.distribution.RealDistribution)
    {
        double[] $r0;
        org.apache.commons.math3.distribution.RealDistribution $r1;
        int $i0, i1;
        double $d0, $d1;

        $r0 := @parameter0: double[];

        $r1 := @parameter1: org.apache.commons.math3.distribution.RealDistribution;

        i1 = 0;

     label1:
        $i0 = lengthof $r0;

        if i1 >= $i0 goto label2;

        $d1 = $r0[i1];

        $d0 = interfaceinvoke $r1.<org.apache.commons.math3.distribution.RealDistribution: double sample()>();

        $d0 = $d1 + $d0;

        $r0[i1] = $d0;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
    private static double n(int, int, int, int, long, boolean)
    {
        int $i0, $i1, $i2, $i3, $i5, i6, i7, $i8;
        long $l4;
        boolean $z0;
        double[] r0;
        double d0, $d1, $d2;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $l4 := @parameter4: long;

        $z0 := @parameter5: boolean;

        r0 = newarray (double)[$i3];

        d0 = 0.0;

        i6 = 0;

     label1:
        if i6 >= $i3 goto label2;

        i7 = i6 + 1;

        i7 = staticinvoke <org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: int c(int,int,int,int,long,boolean)>(0, i7, $i2, $i3, $l4, $z0);

        $d1 = (double) i7;

        r0[i6] = $d1;

        i6 = i6 + 1;

        goto label1;

     label2:
        i6 = 1;

     label3:
        if i6 > $i0 goto label6;

        i7 = staticinvoke <org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: int c(int,int,int,int,long,boolean)>(i6, 0, $i2, $i3, $l4, $z0);

        d0 = (double) i7;

        i7 = 1;

     label4:
        if i7 > $i1 goto label5;

        $i5 = i7 + -1;

        $i8 = staticinvoke <org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: int c(int,int,int,int,long,boolean)>(i6, i7, $i2, $i3, $l4, $z0);

        $d1 = (double) $i8;

        $i8 = i7 + -1;

        $d2 = r0[$i8];

        d0 = $d2 + d0;

        d0 = $d1 * d0;

        r0[$i5] = d0;

        $i5 = i7 + -1;

        d0 = r0[$i5];

        i7 = i7 + 1;

        goto label4;

     label5:
        i6 = i6 + 1;

        goto label3;

     label6:
        return d0;
    }
    private double roundedK(double, int)
    {
        org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest r0;
        double $d0, $d1, $d2;
        int $i0, i1, $i2;
        org.apache.commons.math3.linear.RealMatrix $r1;

        r0 := @this: org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest;

        $d0 := @parameter0: double;

        $i0 := @parameter1: int;

        $d1 = (double) $i0;

        $d1 = $d1 * $d0;

        $d1 = staticinvoke <java.lang.Math: double ceil(double)>($d1);

        i1 = (int) $d1;

        $r1 = specialinvoke r0.<org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: org.apache.commons.math3.linear.RealMatrix createRoundedH(double,int)>($d0, $i0);

        $r1 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix power(int)>($i0);

        $i2 = i1 + -1;

        i1 = i1 + -1;

        $d0 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>($i2, i1);

        $i2 = 1;

     label1:
        if $i2 > $i0 goto label2;

        $d2 = (double) $i2;

        $d1 = (double) $i0;

        $d1 = $d2 / $d1;

        $d0 = $d0 * $d1;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        return $d0;
    }
    public double approximateP(double, int, int)
    {
        org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest r0;
        double $d0, d1, d2, $d3;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest;

        $d0 := @parameter0: double;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        d1 = (double) $i1;

        d2 = (double) $i0;

        $d3 = d1 * d2;

        d1 = d1 + d2;

        $d3 = $d3 / d1;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d3);

        $d0 = $d0 * $d3;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: double ksSum(double,double,int)>($d0, 1.0E-20, 100000);

        $d0 = 1.0 - $d0;

        return $d0;
    }
    public double bootstrap(double[], double[], int)
    {
        org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest r0;
        double[] $r1, $r2;
        int $i0;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[];

        $i0 := @parameter2: int;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: double bootstrap(double[],double[],int,boolean)>($r1, $r2, $i0, 1);

        return $d0;
    }
    public double bootstrap(double[], double[], int, boolean)
    {
        org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest r0;
        double[] $r1, $r2, r3;
        int $i0, i1, i2, $i3, i5, i6;
        boolean $z0;
        org.apache.commons.math3.distribution.EnumeratedRealDistribution r4;
        org.apache.commons.math3.random.RandomGenerator $r5;
        long $l4, $l7;
        byte $b8;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[];

        $i0 := @parameter2: int;

        $z0 := @parameter3: boolean;

        i1 = lengthof $r1;

        i2 = lengthof $r2;

        $i3 = i1 + i2;

        r3 = newarray (double)[$i3];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, r3, 0, i1);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r3, i1, i2);

        r4 = new org.apache.commons.math3.distribution.EnumeratedRealDistribution;

        $r5 = r0.<org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: org.apache.commons.math3.random.RandomGenerator rng>;

        specialinvoke r4.<org.apache.commons.math3.distribution.EnumeratedRealDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double[])>($r5, r3);

        $l4 = specialinvoke r0.<org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: long integralKolmogorovSmirnovStatistic(double[],double[])>($r1, $r2);

        $i3 = 0;

        i5 = 0;

        i6 = 0;

     label1:
        if i6 >= $i0 goto label4;

        $r1 = virtualinvoke r4.<org.apache.commons.math3.distribution.EnumeratedRealDistribution: double[] sample(int)>(i1);

        $r2 = virtualinvoke r4.<org.apache.commons.math3.distribution.EnumeratedRealDistribution: double[] sample(int)>(i2);

        $l7 = specialinvoke r0.<org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: long integralKolmogorovSmirnovStatistic(double[],double[])>($r1, $r2);

        $b8 = $l7 cmp $l4;

        if $b8 <= 0 goto label3;

        $i3 = $i3 + 1;

     label2:
        i6 = i6 + 1;

        goto label1;

     label3:
        $b8 = $l7 cmp $l4;

        if $b8 != 0 goto label2;

        i5 = i5 + 1;

        goto label2;

     label4:
        if $z0 == 0 goto label5;

        $d0 = (double) $i3;

        $d1 = (double) $i0;

        $d0 = $d0 / $d1;

        return $d0;

     label5:
        i1 = $i3 + i5;

        $d0 = (double) i1;

        $d1 = (double) $i0;

        $d0 = $d0 / $d1;

        return $d0;
    }
    public double cdf(double, int) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest r0;
        double $d0;
        int $i0;

        r0 := @this: org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest;

        $d0 := @parameter0: double;

        $i0 := @parameter1: int;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: double cdf(double,int,boolean)>($d0, $i0, 0);

        return $d0;
    }
    public double cdf(double, int, boolean) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest r0;
        double $d0, d1, d2;
        int $i0, i2;
        boolean $z0;
        byte $b1;

        r0 := @this: org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest;

        $d0 := @parameter0: double;

        $i0 := @parameter1: int;

        $z0 := @parameter2: boolean;

        d2 = (double) $i0;

        d1 = 1.0 / d2;

        d2 = 0.5 * d1;

        $b1 = $d0 cmpg d2;

        if $b1 > 0 goto label1;

        return 0.0;

     label1:
        $b1 = d2 cmpg $d0;

        if $b1 >= 0 goto label3;

        $b1 = $d0 cmpg d1;

        if $b1 > 0 goto label3;

        d2 = 1.0;

        $d0 = 2.0 * $d0;

        $d0 = $d0 - d1;

        i2 = 1;

     label2:
        if i2 > $i0 goto label8;

        d1 = (double) i2;

        d1 = d1 * $d0;

        d2 = d2 * d1;

        i2 = i2 + 1;

        goto label2;

     label3:
        d2 = 1.0 - d1;

        $b1 = d2 cmpg $d0;

        if $b1 > 0 goto label4;

        $b1 = $d0 cmpg 1.0;

        if $b1 >= 0 goto label4;

        $d0 = 1.0 - $d0;

        d2 = (double) $i0;

        $d0 = staticinvoke <java.lang.Math: double pow(double,double)>($d0, d2);

        $d0 = 2.0 * $d0;

        $d0 = 1.0 - $d0;

        return $d0;

     label4:
        $b1 = 1.0 cmpg $d0;

        if $b1 > 0 goto label5;

        return 1.0;

     label5:
        if $z0 == 0 goto label6;

        $d0 = specialinvoke r0.<org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: double exactK(double,int)>($d0, $i0);

        return $d0;

     label6:
        if $i0 > 140 goto label7;

        $d0 = specialinvoke r0.<org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: double roundedK(double,int)>($d0, $i0);

        return $d0;

     label7:
        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: double pelzGood(double,int)>($d0, $i0);

        return $d0;

     label8:
        return d2;
    }
    public double cdfExact(double, int) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest r0;
        double $d0;
        int $i0;

        r0 := @this: org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest;

        $d0 := @parameter0: double;

        $i0 := @parameter1: int;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: double cdf(double,int,boolean)>($d0, $i0, 1);

        return $d0;
    }
    public double exactP(double, int, int, boolean)
    {
        org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest r0;
        double $d0, $d1;
        int $i0, $i1;
        boolean $z0;
        long $l2;

        r0 := @this: org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest;

        $d0 := @parameter0: double;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $l2 = staticinvoke <org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: long calculateIntegralD(double,int,int,boolean)>($d0, $i1, $i0, $z0);

        $d0 = staticinvoke <org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: double n(int,int,int,int,long,boolean)>($i1, $i0, $i1, $i0, $l2, $z0);

        $i0 = $i0 + $i1;

        $d1 = staticinvoke <org.apache.commons.math3.util.CombinatoricsUtils: double binomialCoefficientDouble(int,int)>($i0, $i1);

        $d0 = $d0 / $d1;

        $d0 = 1.0 - $d0;

        return $d0;
    }
    public double kolmogorovSmirnovStatistic(org.apache.commons.math3.distribution.RealDistribution, double[])
    {
        org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest r0;
        org.apache.commons.math3.distribution.RealDistribution $r1;
        double[] $r2, r3;
        int i0, i1, $i2;
        double d0, d1, $d2, $d3, $d4;
        byte $b3;

        r0 := @this: org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest;

        $r1 := @parameter0: org.apache.commons.math3.distribution.RealDistribution;

        $r2 := @parameter1: double[];

        specialinvoke r0.<org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: void checkArray(double[])>($r2);

        i0 = lengthof $r2;

        d0 = (double) i0;

        r3 = newarray (double)[i0];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r3, 0, i0);

        staticinvoke <java.util.Arrays: void sort(double[])>(r3);

        d1 = 0.0;

        i1 = 1;

     label1:
        if i1 > i0 goto label3;

        $i2 = i1 + -1;

        $d2 = r3[$i2];

        $d2 = interfaceinvoke $r1.<org.apache.commons.math3.distribution.RealDistribution: double cumulativeProbability(double)>($d2);

        $i2 = i1 + -1;

        $d3 = (double) $i2;

        $d3 = $d3 / d0;

        $d3 = $d2 - $d3;

        $d4 = (double) i1;

        $d4 = $d4 / d0;

        $d2 = $d4 - $d2;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>($d3, $d2);

        $b3 = $d2 cmpl d1;

        if $b3 <= 0 goto label2;

        d1 = $d2;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return d1;
    }
    public double kolmogorovSmirnovStatistic(double[], double[])
    {
        org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest r0;
        double[] $r1, $r2;
        long $l0, $l2;
        double $d0, $d1;
        int $i1;

        r0 := @this: org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[];

        $l0 = specialinvoke r0.<org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: long integralKolmogorovSmirnovStatistic(double[],double[])>($r1, $r2);

        $d0 = (double) $l0;

        $i1 = lengthof $r1;

        $l0 = (long) $i1;

        $i1 = lengthof $r2;

        $l2 = (long) $i1;

        $l0 = $l0 * $l2;

        $d1 = (double) $l0;

        $d0 = $d0 / $d1;

        return $d0;
    }
    public double kolmogorovSmirnovTest(org.apache.commons.math3.distribution.RealDistribution, double[])
    {
        org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest r0;
        org.apache.commons.math3.distribution.RealDistribution $r1;
        double[] $r2;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest;

        $r1 := @parameter0: org.apache.commons.math3.distribution.RealDistribution;

        $r2 := @parameter1: double[];

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: double kolmogorovSmirnovTest(org.apache.commons.math3.distribution.RealDistribution,double[],boolean)>($r1, $r2, 0);

        return $d0;
    }
    public double kolmogorovSmirnovTest(org.apache.commons.math3.distribution.RealDistribution, double[], boolean)
    {
        org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest r0;
        org.apache.commons.math3.distribution.RealDistribution $r1;
        double[] $r2;
        boolean $z0;
        int $i0;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest;

        $r1 := @parameter0: org.apache.commons.math3.distribution.RealDistribution;

        $r2 := @parameter1: double[];

        $z0 := @parameter2: boolean;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: double kolmogorovSmirnovStatistic(org.apache.commons.math3.distribution.RealDistribution,double[])>($r1, $r2);

        $i0 = lengthof $r2;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: double cdf(double,int,boolean)>($d0, $i0, $z0);

        $d0 = 1.0 - $d0;

        return $d0;
    }
    public double kolmogorovSmirnovTest(double[], double[])
    {
        org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest r0;
        double[] $r1, $r2;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[];

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: double kolmogorovSmirnovTest(double[],double[],boolean)>($r1, $r2, 1);

        return $d0;
    }
    public double kolmogorovSmirnovTest(double[], double[], boolean)
    {
        org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest r0;
        double[] $r1, $r2, $r3, r4, $r5, r6;
        boolean $z0, $z1;
        int $i0, $i4;
        long l1, $l2;
        byte $b3;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[];

        $z0 := @parameter2: boolean;

        $i0 = lengthof $r1;

        l1 = (long) $i0;

        $i0 = lengthof $r2;

        $l2 = (long) $i0;

        l1 = l1 * $l2;

        $b3 = l1 cmp 10000L;

        if $b3 >= 0 goto label2;

        $z1 = staticinvoke <org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: boolean hasTies(double[],double[])>($r1, $r2);

        if $z1 == 0 goto label2;

        $r3 = staticinvoke <org.apache.commons.math3.util.MathArrays: double[] copyOf(double[])>($r1);

        r4 = $r3;

        $r5 = staticinvoke <org.apache.commons.math3.util.MathArrays: double[] copyOf(double[])>($r2);

        r6 = $r5;

        staticinvoke <org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: void fixTies(double[],double[])>($r3, $r5);

     label1:
        $b3 = l1 cmp 10000L;

        if $b3 >= 0 goto label3;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: double kolmogorovSmirnovStatistic(double[],double[])>(r4, r6);

        $i4 = lengthof $r1;

        $i0 = lengthof $r2;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: double exactP(double,int,int,boolean)>($d0, $i4, $i0, $z0);

        return $d0;

     label2:
        r4 = $r1;

        r6 = $r2;

        goto label1;

     label3:
        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: double kolmogorovSmirnovStatistic(double[],double[])>($r1, $r2);

        $i0 = lengthof $r1;

        $i4 = lengthof $r2;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: double approximateP(double,int,int)>($d0, $i0, $i4);

        return $d0;
    }
    public boolean kolmogorovSmirnovTest(org.apache.commons.math3.distribution.RealDistribution, double[], double)
    {
        org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest r0;
        org.apache.commons.math3.distribution.RealDistribution $r1;
        double[] $r2;
        double $d0, $d1;
        byte $b0;
        org.apache.commons.math3.exception.OutOfRangeException $r3;
        org.apache.commons.math3.exception.util.LocalizedFormats $r4;
        java.lang.Double $r5, $r7;
        java.lang.Integer $r6;

        r0 := @this: org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest;

        $r1 := @parameter0: org.apache.commons.math3.distribution.RealDistribution;

        $r2 := @parameter1: double[];

        $d0 := @parameter2: double;

        $b0 = $d0 cmpg 0.0;

        if $b0 <= 0 goto label1;

        $b0 = $d0 cmpl 0.5;

        if $b0 <= 0 goto label2;

     label1:
        $r3 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OUT_OF_BOUND_SIGNIFICANCE_LEVEL>;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.5);

        specialinvoke $r3.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)>($r4, $r5, $r6, $r7);

        throw $r3;

     label2:
        $d1 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: double kolmogorovSmirnovTest(org.apache.commons.math3.distribution.RealDistribution,double[])>($r1, $r2);

        $b0 = $d1 cmpg $d0;

        if $b0 >= 0 goto label3;

        return 1;

     label3:
        return 0;
    }
    public double ksSum(double, double, int)
    {
        org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest r0;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        int $i0, i2;
        byte $b1;
        long l3, $l4;
        org.apache.commons.math3.exception.TooManyIterationsException $r1;
        java.lang.Integer $r2;

        r0 := @this: org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $i0 := @parameter2: int;

        $b1 = $d0 cmpl 0.0;

        if $b1 != 0 goto label1;

        return 0.0;

     label1:
        $d3 = -2.0 * $d0;

        $d0 = $d3 * $d0;

        i2 = -1;

        l3 = 1L;

        $d3 = 0.5;

        $d2 = 1.0;

     label2:
        $b1 = $d2 cmpl $d1;

        if $b1 <= 0 goto label3;

        $l4 = (long) $i0;

        $b1 = l3 cmp $l4;

        if $b1 >= 0 goto label3;

        $d2 = (double) l3;

        $d4 = $d2 * $d0;

        $d2 = (double) l3;

        $d2 = $d4 * $d2;

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d2);

        $d2 = $d4;

        $d5 = (double) i2;

        $d4 = $d5 * $d4;

        $d3 = $d3 + $d4;

        i2 = i2 * -1;

        l3 = l3 + 1L;

        goto label2;

     label3:
        $l4 = (long) $i0;

        $b1 = l3 cmp $l4;

        if $b1 != 0 goto label4;

        $r1 = new org.apache.commons.math3.exception.TooManyIterationsException;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r1.<org.apache.commons.math3.exception.TooManyIterationsException: void <init>(java.lang.Number)>($r2);

        throw $r1;

     label4:
        $d0 = 2.0 * $d3;

        return $d0;
    }
    public double monteCarloP(double, int, int, boolean, int)
    {
        org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest r0;
        double $d0;
        int $i0, $i1, $i2;
        boolean $z0;
        long $l3;

        r0 := @this: org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest;

        $d0 := @parameter0: double;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $i2 := @parameter4: int;

        $l3 = staticinvoke <org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: long calculateIntegralD(double,int,int,boolean)>($d0, $i0, $i1, $z0);

        $d0 = specialinvoke r0.<org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: double integralMonteCarloP(long,int,int,int)>($l3, $i0, $i1, $i2);

        return $d0;
    }
    public double pelzGood(double, int)
    {
        org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest r0;
        double $d0, d1, d2, d3, d4, d5, d6, d7, $d8, $d9, d10, $d11, d12, $d13, $d14, $d15;
        int $i0, i1, $i2;
        byte $b3;
        org.apache.commons.math3.exception.TooManyIterationsException $r1;
        java.lang.Integer $r2;

        r0 := @this: org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest;

        $d0 := @parameter0: double;

        $i0 := @parameter1: int;

        d4 = (double) $i0;

        $d8 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d4);

        d2 = $d0 * $d8;

        $d0 = $d0 * $d0;

        d4 = (double) $i0;

        d3 = $d0 * d4;

        d4 = d3 * d3;

        $d0 = d4 * d3;

        d7 = d4 * d4;

        d1 = 0.0;

        $d9 = 8.0 * d3;

        $d9 = 9.869604401089358 / $d9;

        i1 = 1;

     label01:
        if i1 >= 100000 goto label02;

        $i2 = i1 * 2;

        $i2 = $i2 + -1;

        d10 = (double) $i2;

        $d11 = neg $d9;

        $d11 = $d11 * d10;

        d10 = $d11 * d10;

        d10 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>(d10);

        d1 = d1 + d10;

        $d11 = 1.0E-10 * d1;

        $b3 = d10 cmpg $d11;

        if $b3 > 0 goto label03;

     label02:
        if i1 != 100000 goto label04;

        $r1 = new org.apache.commons.math3.exception.TooManyIterationsException;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(100000);

        specialinvoke $r1.<org.apache.commons.math3.exception.TooManyIterationsException: void <init>(java.lang.Number)>($r2);

        throw $r1;

     label03:
        i1 = i1 + 1;

        goto label01;

     label04:
        $d9 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(6.283185307179586);

        d1 = $d9 * d1;

        d10 = d1 / d2;

        d1 = 2.0 * d3;

        $d11 = 0.0;

        i1 = 0;

     label05:
        if i1 >= 100000 goto label06;

        $d9 = (double) i1;

        $d9 = $d9 + 0.5;

        d5 = $d9 * $d9;

        $d9 = 9.869604401089358 * d5;

        $d9 = $d9 - d3;

        d5 = -9.869604401089358 * d5;

        d5 = d5 / d1;

        d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>(d5);

        $d9 = $d9 * d5;

        $d11 = $d11 + $d9;

        $d9 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d9);

        d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d11);

        d5 = 1.0E-10 * d5;

        $b3 = $d9 cmpg d5;

        if $b3 >= 0 goto label07;

     label06:
        if i1 != 100000 goto label08;

        $r1 = new org.apache.commons.math3.exception.TooManyIterationsException;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(100000);

        specialinvoke $r1.<org.apache.commons.math3.exception.TooManyIterationsException: void <init>(java.lang.Number)>($r2);

        throw $r1;

     label07:
        i1 = i1 + 1;

        goto label05;

     label08:
        $d9 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(1.5707963267948966);

        $d11 = $d11 * $d9;

        d5 = 3.0 * d4;

        d5 = d5 * $d8;

        $d11 = $d11 / d5;

        d10 = d10 + $d11;

        d5 = 2.0 * d4;

        d6 = 6.0 * $d0;

        d12 = 5.0 * d3;

        $d11 = 0.0;

        i1 = 0;

     label09:
        if i1 >= 100000 goto label10;

        $d13 = (double) i1;

        $d13 = $d13 + 0.5;

        $d13 = $d13 * $d13;

        $d14 = d6 + d5;

        $d15 = d5 - d12;

        $d15 = 9.869604401089358 * $d15;

        $d15 = $d15 * $d13;

        $d14 = $d14 + $d15;

        $d15 = 1.0 - d1;

        $d15 = 97.40909103400243 * $d15;

        $d15 = $d15 * $d13;

        $d15 = $d15 * $d13;

        $d14 = $d14 + $d15;

        $d13 = -9.869604401089358 * $d13;

        $d13 = $d13 / d1;

        $d13 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d13);

        $d13 = $d14 * $d13;

        $d11 = $d11 + $d13;

        $d13 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d13);

        $d14 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d11);

        $d14 = 1.0E-10 * $d14;

        $b3 = $d13 cmpg $d14;

        if $b3 >= 0 goto label11;

     label10:
        if i1 != 100000 goto label12;

        $r1 = new org.apache.commons.math3.exception.TooManyIterationsException;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(100000);

        specialinvoke $r1.<org.apache.commons.math3.exception.TooManyIterationsException: void <init>(java.lang.Number)>($r2);

        throw $r1;

     label11:
        i1 = i1 + 1;

        goto label09;

     label12:
        d5 = 0.0;

        i1 = 1;

     label13:
        if i1 >= 100000 goto label14;

        $i2 = i1 * i1;

        d12 = (double) $i2;

        d6 = 9.869604401089358 * d12;

        d12 = -9.869604401089358 * d12;

        d12 = d12 / d1;

        d12 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>(d12);

        d6 = d6 * d12;

        d5 = d5 + d6;

        d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d6);

        d12 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d5);

        d12 = 1.0E-10 * d12;

        $b3 = d6 cmpg d12;

        if $b3 >= 0 goto label15;

     label14:
        if i1 != 100000 goto label16;

        $r1 = new org.apache.commons.math3.exception.TooManyIterationsException;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(100000);

        specialinvoke $r1.<org.apache.commons.math3.exception.TooManyIterationsException: void <init>(java.lang.Number)>($r2);

        throw $r1;

     label15:
        i1 = i1 + 1;

        goto label13;

     label16:
        d6 = (double) $i0;

        d6 = $d9 / d6;

        d12 = 36.0 * d3;

        d12 = d12 * d3;

        d12 = d12 * d3;

        d12 = d12 * d2;

        $d11 = $d11 / d12;

        d12 = 18.0 * d3;

        d2 = d12 * d2;

        d2 = d5 / d2;

        d2 = $d11 - d2;

        d2 = d6 * d2;

        d2 = d10 + d2;

        d10 = 0.0;

        i1 = 0;

     label17:
        if i1 >= 100000 goto label18;

        $d11 = (double) i1;

        $d11 = $d11 + 0.5;

        $d11 = $d11 * $d11;

        d6 = $d11 * $d11;

        d5 = d6 * $d11;

        d5 = 961.3891935753043 * d5;

        d12 = 30.0 * d3;

        d12 = 5.0 - d12;

        d5 = d5 * d12;

        d6 = 97.40909103400243 * d6;

        d12 = -60.0 * d3;

        $d13 = 212.0 * d4;

        d12 = d12 + $d13;

        d6 = d6 * d12;

        d5 = d5 + d6;

        d6 = 9.869604401089358 * $d11;

        d12 = 135.0 * d4;

        $d13 = 96.0 * $d0;

        d12 = d12 - $d13;

        d6 = d6 * d12;

        d5 = d5 + d6;

        d6 = 30.0 * $d0;

        d5 = d5 - d6;

        d6 = 90.0 * d7;

        d5 = d5 - d6;

        $d11 = -9.869604401089358 * $d11;

        $d11 = $d11 / d1;

        $d11 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d11);

        $d11 = d5 * $d11;

        d10 = d10 + $d11;

        $d11 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d11);

        d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d10);

        d5 = 1.0E-10 * d5;

        $b3 = $d11 cmpg d5;

        if $b3 >= 0 goto label19;

     label18:
        if i1 != 100000 goto label20;

        $r1 = new org.apache.commons.math3.exception.TooManyIterationsException;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(100000);

        specialinvoke $r1.<org.apache.commons.math3.exception.TooManyIterationsException: void <init>(java.lang.Number)>($r2);

        throw $r1;

     label19:
        i1 = i1 + 1;

        goto label17;

     label20:
        d7 = 0.0;

        i1 = 1;

     label21:
        if i1 >= 100000 goto label22;

        $i2 = i1 * i1;

        $d11 = (double) $i2;

        d5 = $d11 * $d11;

        d5 = -97.40909103400243 * d5;

        d6 = 29.608813203268074 * $d11;

        d6 = d6 * d3;

        d5 = d5 + d6;

        $d11 = -9.869604401089358 * $d11;

        $d11 = $d11 / d1;

        $d11 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d11);

        $d11 = d5 * $d11;

        d7 = d7 + $d11;

        $d11 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d11);

        d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d7);

        d5 = 1.0E-10 * d5;

        $b3 = $d11 cmpg d5;

        if $b3 >= 0 goto label23;

     label22:
        if i1 != 100000 goto label24;

        $r1 = new org.apache.commons.math3.exception.TooManyIterationsException;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(100000);

        specialinvoke $r1.<org.apache.commons.math3.exception.TooManyIterationsException: void <init>(java.lang.Number)>($r2);

        throw $r1;

     label23:
        i1 = i1 + 1;

        goto label21;

     label24:
        d3 = (double) $i0;

        $d8 = d3 * $d8;

        $d8 = $d9 / $d8;

        d3 = 3240.0 * $d0;

        d4 = d3 * d4;

        d4 = d10 / d4;

        $d0 = 108.0 * $d0;

        $d0 = d7 / $d0;

        $d0 = d4 + $d0;

        $d0 = $d8 * $d0;

        $d0 = $d0 + d2;

        return $d0;
    }
