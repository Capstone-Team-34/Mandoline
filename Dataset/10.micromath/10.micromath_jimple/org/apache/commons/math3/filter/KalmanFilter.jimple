org.apache.commons.math3.filter.KalmanFilter extends java.lang.Object
private org.apache.commons.math3.linear.RealMatrix controlMatrix
private org.apache.commons.math3.linear.RealMatrix errorCovariance
private org.apache.commons.math3.linear.RealMatrix measurementMatrix
private org.apache.commons.math3.linear.RealMatrix measurementMatrixT
private final org.apache.commons.math3.filter.MeasurementModel measurementModel
private final org.apache.commons.math3.filter.ProcessModel processModel
private org.apache.commons.math3.linear.RealVector stateEstimation
private org.apache.commons.math3.linear.RealMatrix transitionMatrix
private org.apache.commons.math3.linear.RealMatrix transitionMatrixT
    public void <init>(org.apache.commons.math3.filter.ProcessModel, org.apache.commons.math3.filter.MeasurementModel) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.linear.NonSquareMatrixException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.linear.MatrixDimensionMismatchException
    {
        org.apache.commons.math3.filter.KalmanFilter r0;
        org.apache.commons.math3.filter.ProcessModel $r1;
        org.apache.commons.math3.filter.MeasurementModel $r2;
        org.apache.commons.math3.linear.RealMatrix $r3, $r5, $r8;
        org.apache.commons.math3.linear.Array2DRowRealMatrix $r4;
        org.apache.commons.math3.linear.RealVector $r6;
        org.apache.commons.math3.linear.ArrayRealVector $r7;
        int $i0, $i1, $i2, $i3;
        org.apache.commons.math3.exception.DimensionMismatchException $r9;
        boolean $z0;
        org.apache.commons.math3.linear.NonSquareMatrixException $r10;
        org.apache.commons.math3.linear.MatrixDimensionMismatchException $r11;

        r0 := @this: org.apache.commons.math3.filter.KalmanFilter;

        $r1 := @parameter0: org.apache.commons.math3.filter.ProcessModel;

        $r2 := @parameter1: org.apache.commons.math3.filter.MeasurementModel;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>($r1);

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>($r2);

        r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.filter.ProcessModel processModel> = $r1;

        r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.filter.MeasurementModel measurementModel> = $r2;

        $r1 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.filter.ProcessModel processModel>;

        $r3 = interfaceinvoke $r1.<org.apache.commons.math3.filter.ProcessModel: org.apache.commons.math3.linear.RealMatrix getStateTransitionMatrix()>();

        r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix transitionMatrix> = $r3;

        $r3 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix transitionMatrix>;

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>($r3);

        $r3 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix transitionMatrix>;

        $r3 = interfaceinvoke $r3.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix transpose()>();

        r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix transitionMatrixT> = $r3;

        $r1 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.filter.ProcessModel processModel>;

        $r3 = interfaceinvoke $r1.<org.apache.commons.math3.filter.ProcessModel: org.apache.commons.math3.linear.RealMatrix getControlMatrix()>();

        if $r3 != null goto label03;

        $r4 = new org.apache.commons.math3.linear.Array2DRowRealMatrix;

        specialinvoke $r4.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void <init>()>();

        r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix controlMatrix> = $r4;

     label01:
        $r2 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.filter.MeasurementModel measurementModel>;

        $r3 = interfaceinvoke $r2.<org.apache.commons.math3.filter.MeasurementModel: org.apache.commons.math3.linear.RealMatrix getMeasurementMatrix()>();

        r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix measurementMatrix> = $r3;

        $r3 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix measurementMatrix>;

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>($r3);

        $r3 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix measurementMatrix>;

        $r3 = interfaceinvoke $r3.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix transpose()>();

        r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix measurementMatrixT> = $r3;

        $r1 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.filter.ProcessModel processModel>;

        $r5 = interfaceinvoke $r1.<org.apache.commons.math3.filter.ProcessModel: org.apache.commons.math3.linear.RealMatrix getProcessNoise()>();

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>($r5);

        $r2 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.filter.MeasurementModel measurementModel>;

        $r3 = interfaceinvoke $r2.<org.apache.commons.math3.filter.MeasurementModel: org.apache.commons.math3.linear.RealMatrix getMeasurementNoise()>();

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>($r3);

        $r1 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.filter.ProcessModel processModel>;

        $r6 = interfaceinvoke $r1.<org.apache.commons.math3.filter.ProcessModel: org.apache.commons.math3.linear.RealVector getInitialStateEstimate()>();

        if $r6 != null goto label04;

        $r7 = new org.apache.commons.math3.linear.ArrayRealVector;

        $r8 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix transitionMatrix>;

        $i0 = interfaceinvoke $r8.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        specialinvoke $r7.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(int)>($i0);

        r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealVector stateEstimation> = $r7;

     label02:
        $r8 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix transitionMatrix>;

        $i0 = interfaceinvoke $r8.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        $r6 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealVector stateEstimation>;

        $i1 = virtualinvoke $r6.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        if $i0 == $i1 goto label05;

        $r9 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $r3 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix transitionMatrix>;

        $i0 = interfaceinvoke $r3.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        $r6 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealVector stateEstimation>;

        $i1 = virtualinvoke $r6.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        specialinvoke $r9.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i0, $i1);

        throw $r9;

     label03:
        $r1 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.filter.ProcessModel processModel>;

        $r3 = interfaceinvoke $r1.<org.apache.commons.math3.filter.ProcessModel: org.apache.commons.math3.linear.RealMatrix getControlMatrix()>();

        r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix controlMatrix> = $r3;

        goto label01;

     label04:
        $r1 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.filter.ProcessModel processModel>;

        $r6 = interfaceinvoke $r1.<org.apache.commons.math3.filter.ProcessModel: org.apache.commons.math3.linear.RealVector getInitialStateEstimate()>();

        r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealVector stateEstimation> = $r6;

        goto label02;

     label05:
        $r1 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.filter.ProcessModel processModel>;

        $r8 = interfaceinvoke $r1.<org.apache.commons.math3.filter.ProcessModel: org.apache.commons.math3.linear.RealMatrix getInitialErrorCovariance()>();

        if $r8 != null goto label07;

        $r8 = interfaceinvoke $r5.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix copy()>();

        r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix errorCovariance> = $r8;

     label06:
        $r8 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix transitionMatrix>;

        $z0 = interfaceinvoke $r8.<org.apache.commons.math3.linear.RealMatrix: boolean isSquare()>();

        if $z0 != 0 goto label08;

        $r10 = new org.apache.commons.math3.linear.NonSquareMatrixException;

        $r3 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix transitionMatrix>;

        $i0 = interfaceinvoke $r3.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $r3 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix transitionMatrix>;

        $i1 = interfaceinvoke $r3.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        specialinvoke $r10.<org.apache.commons.math3.linear.NonSquareMatrixException: void <init>(int,int)>($i0, $i1);

        throw $r10;

     label07:
        $r1 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.filter.ProcessModel processModel>;

        $r8 = interfaceinvoke $r1.<org.apache.commons.math3.filter.ProcessModel: org.apache.commons.math3.linear.RealMatrix getInitialErrorCovariance()>();

        r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix errorCovariance> = $r8;

        goto label06;

     label08:
        $r8 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix controlMatrix>;

        if $r8 == null goto label09;

        $r8 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix controlMatrix>;

        $i0 = interfaceinvoke $r8.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        if $i0 <= 0 goto label09;

        $r8 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix controlMatrix>;

        $i0 = interfaceinvoke $r8.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        if $i0 <= 0 goto label09;

        $r8 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix controlMatrix>;

        $i0 = interfaceinvoke $r8.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $r8 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix transitionMatrix>;

        $i1 = interfaceinvoke $r8.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        if $i0 == $i1 goto label09;

        $r11 = new org.apache.commons.math3.linear.MatrixDimensionMismatchException;

        $r3 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix controlMatrix>;

        $i0 = interfaceinvoke $r3.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $r3 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix controlMatrix>;

        $i1 = interfaceinvoke $r3.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        $r3 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix transitionMatrix>;

        $i2 = interfaceinvoke $r3.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $r3 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix controlMatrix>;

        $i3 = interfaceinvoke $r3.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        specialinvoke $r11.<org.apache.commons.math3.linear.MatrixDimensionMismatchException: void <init>(int,int,int,int)>($i0, $i1, $i2, $i3);

        throw $r11;

     label09:
        $r8 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix transitionMatrix>;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkAdditionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)>($r8, $r5);

        $r5 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix measurementMatrix>;

        $i0 = interfaceinvoke $r5.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        $r5 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix transitionMatrix>;

        $i1 = interfaceinvoke $r5.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        if $i0 == $i1 goto label10;

        $r11 = new org.apache.commons.math3.linear.MatrixDimensionMismatchException;

        $r3 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix measurementMatrix>;

        $i0 = interfaceinvoke $r3.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $r3 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix measurementMatrix>;

        $i1 = interfaceinvoke $r3.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        $r3 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix measurementMatrix>;

        $i2 = interfaceinvoke $r3.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $r3 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix transitionMatrix>;

        $i3 = interfaceinvoke $r3.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        specialinvoke $r11.<org.apache.commons.math3.linear.MatrixDimensionMismatchException: void <init>(int,int,int,int)>($i0, $i1, $i2, $i3);

        throw $r11;

     label10:
        $i0 = interfaceinvoke $r3.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $r5 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix measurementMatrix>;

        $i1 = interfaceinvoke $r5.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        if $i0 == $i1 goto label11;

        $r11 = new org.apache.commons.math3.linear.MatrixDimensionMismatchException;

        $i0 = interfaceinvoke $r3.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $i1 = interfaceinvoke $r3.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        $r5 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix measurementMatrix>;

        $i2 = interfaceinvoke $r5.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $i3 = interfaceinvoke $r3.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        specialinvoke $r11.<org.apache.commons.math3.linear.MatrixDimensionMismatchException: void <init>(int,int,int,int)>($i0, $i1, $i2, $i3);

        throw $r11;

     label11:
        return;
    }
    public void correct(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.linear.SingularMatrixException
    {
        org.apache.commons.math3.filter.KalmanFilter r0;
        org.apache.commons.math3.linear.RealVector $r1, $r6;
        int $i0, $i1;
        org.apache.commons.math3.linear.RealMatrix $r2, $r4, $r9;
        org.apache.commons.math3.exception.DimensionMismatchException $r3;
        org.apache.commons.math3.filter.MeasurementModel $r5;
        org.apache.commons.math3.linear.CholeskyDecomposition $r7;
        org.apache.commons.math3.linear.DecompositionSolver $r8;

        r0 := @this: org.apache.commons.math3.filter.KalmanFilter;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealVector;

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>($r1);

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        $r2 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix measurementMatrix>;

        $i1 = interfaceinvoke $r2.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        if $i0 == $i1 goto label1;

        $r3 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        $r2 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix measurementMatrix>;

        $i1 = interfaceinvoke $r2.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        specialinvoke $r3.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i0, $i1);

        throw $r3;

     label1:
        $r2 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix measurementMatrix>;

        $r4 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix errorCovariance>;

        $r2 = interfaceinvoke $r2.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>($r4);

        $r4 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix measurementMatrixT>;

        $r2 = interfaceinvoke $r2.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>($r4);

        $r5 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.filter.MeasurementModel measurementModel>;

        $r4 = interfaceinvoke $r5.<org.apache.commons.math3.filter.MeasurementModel: org.apache.commons.math3.linear.RealMatrix getMeasurementNoise()>();

        $r2 = interfaceinvoke $r2.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix add(org.apache.commons.math3.linear.RealMatrix)>($r4);

        $r4 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix measurementMatrix>;

        $r6 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealVector stateEstimation>;

        $r6 = interfaceinvoke $r4.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealVector operate(org.apache.commons.math3.linear.RealVector)>($r6);

        $r6 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector subtract(org.apache.commons.math3.linear.RealVector)>($r6);

        $r7 = new org.apache.commons.math3.linear.CholeskyDecomposition;

        specialinvoke $r7.<org.apache.commons.math3.linear.CholeskyDecomposition: void <init>(org.apache.commons.math3.linear.RealMatrix)>($r2);

        $r8 = virtualinvoke $r7.<org.apache.commons.math3.linear.CholeskyDecomposition: org.apache.commons.math3.linear.DecompositionSolver getSolver()>();

        $r2 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix measurementMatrix>;

        $r4 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix errorCovariance>;

        $r4 = interfaceinvoke $r4.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix transpose()>();

        $r2 = interfaceinvoke $r2.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>($r4);

        $r2 = interfaceinvoke $r8.<org.apache.commons.math3.linear.DecompositionSolver: org.apache.commons.math3.linear.RealMatrix solve(org.apache.commons.math3.linear.RealMatrix)>($r2);

        $r4 = interfaceinvoke $r2.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix transpose()>();

        $r1 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealVector stateEstimation>;

        $r6 = interfaceinvoke $r4.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealVector operate(org.apache.commons.math3.linear.RealVector)>($r6);

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector add(org.apache.commons.math3.linear.RealVector)>($r6);

        r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealVector stateEstimation> = $r1;

        $i0 = interfaceinvoke $r4.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $r2 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix createRealIdentityMatrix(int)>($i0);

        $r9 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix measurementMatrix>;

        $r4 = interfaceinvoke $r4.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>($r9);

        $r2 = interfaceinvoke $r2.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix subtract(org.apache.commons.math3.linear.RealMatrix)>($r4);

        $r4 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix errorCovariance>;

        $r2 = interfaceinvoke $r2.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>($r4);

        r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix errorCovariance> = $r2;

        return;
    }
    public void correct(double[]) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.linear.SingularMatrixException
    {
        org.apache.commons.math3.filter.KalmanFilter r0;
        double[] $r1;
        org.apache.commons.math3.linear.ArrayRealVector $r2;

        r0 := @this: org.apache.commons.math3.filter.KalmanFilter;

        $r1 := @parameter0: double[];

        $r2 = new org.apache.commons.math3.linear.ArrayRealVector;

        specialinvoke $r2.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(double[],boolean)>($r1, 0);

        virtualinvoke r0.<org.apache.commons.math3.filter.KalmanFilter: void correct(org.apache.commons.math3.linear.RealVector)>($r2);

        return;
    }
    public double[][] getErrorCovariance()
    {
        org.apache.commons.math3.filter.KalmanFilter r0;
        double[][] $r1;
        org.apache.commons.math3.linear.RealMatrix $r2;

        r0 := @this: org.apache.commons.math3.filter.KalmanFilter;

        $r2 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix errorCovariance>;

        $r1 = interfaceinvoke $r2.<org.apache.commons.math3.linear.RealMatrix: double[][] getData()>();

        return $r1;
    }
    public org.apache.commons.math3.linear.RealMatrix getErrorCovarianceMatrix()
    {
        org.apache.commons.math3.filter.KalmanFilter r0;
        org.apache.commons.math3.linear.RealMatrix $r1;

        r0 := @this: org.apache.commons.math3.filter.KalmanFilter;

        $r1 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix errorCovariance>;

        $r1 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix copy()>();

        return $r1;
    }
    public int getMeasurementDimension()
    {
        org.apache.commons.math3.filter.KalmanFilter r0;
        int $i0;
        org.apache.commons.math3.linear.RealMatrix $r1;

        r0 := @this: org.apache.commons.math3.filter.KalmanFilter;

        $r1 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix measurementMatrix>;

        $i0 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        return $i0;
    }
    public int getStateDimension()
    {
        org.apache.commons.math3.filter.KalmanFilter r0;
        int $i0;
        org.apache.commons.math3.linear.RealVector $r1;

        r0 := @this: org.apache.commons.math3.filter.KalmanFilter;

        $r1 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealVector stateEstimation>;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        return $i0;
    }
    public double[] getStateEstimation()
    {
        org.apache.commons.math3.filter.KalmanFilter r0;
        double[] $r1;
        org.apache.commons.math3.linear.RealVector $r2;

        r0 := @this: org.apache.commons.math3.filter.KalmanFilter;

        $r2 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealVector stateEstimation>;

        $r1 = virtualinvoke $r2.<org.apache.commons.math3.linear.RealVector: double[] toArray()>();

        return $r1;
    }
    public org.apache.commons.math3.linear.RealVector getStateEstimationVector()
    {
        org.apache.commons.math3.filter.KalmanFilter r0;
        org.apache.commons.math3.linear.RealVector $r1;

        r0 := @this: org.apache.commons.math3.filter.KalmanFilter;

        $r1 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealVector stateEstimation>;

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector copy()>();

        return $r1;
    }
    public void predict()
    {
        org.apache.commons.math3.filter.KalmanFilter r0;

        r0 := @this: org.apache.commons.math3.filter.KalmanFilter;

        virtualinvoke r0.<org.apache.commons.math3.filter.KalmanFilter: void predict(org.apache.commons.math3.linear.RealVector)>(null);

        return;
    }
    public void predict(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.filter.KalmanFilter r0;
        org.apache.commons.math3.linear.RealVector $r1, $r4;
        int $i0, $i1;
        org.apache.commons.math3.linear.RealMatrix $r2, $r5;
        org.apache.commons.math3.exception.DimensionMismatchException $r3;
        org.apache.commons.math3.filter.ProcessModel $r6;

        r0 := @this: org.apache.commons.math3.filter.KalmanFilter;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealVector;

        if $r1 == null goto label1;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        $r2 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix controlMatrix>;

        $i1 = interfaceinvoke $r2.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        if $i0 == $i1 goto label1;

        $r3 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        $r2 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix controlMatrix>;

        $i1 = interfaceinvoke $r2.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        specialinvoke $r3.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i0, $i1);

        throw $r3;

     label1:
        $r2 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix transitionMatrix>;

        $r4 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealVector stateEstimation>;

        $r4 = interfaceinvoke $r2.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealVector operate(org.apache.commons.math3.linear.RealVector)>($r4);

        r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealVector stateEstimation> = $r4;

        if $r1 == null goto label2;

        $r4 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealVector stateEstimation>;

        $r2 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix controlMatrix>;

        $r1 = interfaceinvoke $r2.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealVector operate(org.apache.commons.math3.linear.RealVector)>($r1);

        $r1 = virtualinvoke $r4.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector add(org.apache.commons.math3.linear.RealVector)>($r1);

        r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealVector stateEstimation> = $r1;

     label2:
        $r2 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix transitionMatrix>;

        $r5 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix errorCovariance>;

        $r2 = interfaceinvoke $r2.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>($r5);

        $r5 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix transitionMatrixT>;

        $r2 = interfaceinvoke $r2.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>($r5);

        $r6 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.filter.ProcessModel processModel>;

        $r5 = interfaceinvoke $r6.<org.apache.commons.math3.filter.ProcessModel: org.apache.commons.math3.linear.RealMatrix getProcessNoise()>();

        $r2 = interfaceinvoke $r2.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix add(org.apache.commons.math3.linear.RealMatrix)>($r5);

        r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix errorCovariance> = $r2;

        return;
    }
    public void predict(double[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.filter.KalmanFilter r0;
        double[] $r1;
        org.apache.commons.math3.linear.ArrayRealVector $r2;

        r0 := @this: org.apache.commons.math3.filter.KalmanFilter;

        $r1 := @parameter0: double[];

        $r2 = new org.apache.commons.math3.linear.ArrayRealVector;

        specialinvoke $r2.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(double[],boolean)>($r1, 0);

        virtualinvoke r0.<org.apache.commons.math3.filter.KalmanFilter: void predict(org.apache.commons.math3.linear.RealVector)>($r2);

        return;
    }
