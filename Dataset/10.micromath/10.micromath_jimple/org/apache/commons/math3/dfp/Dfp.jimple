org.apache.commons.math3.dfp.Dfp extends java.lang.Object implements org.apache.commons.math3.RealFieldElement
private static final java.lang.String ADD_TRAP
private static final java.lang.String ALIGN_TRAP
private static final java.lang.String DIVIDE_TRAP
public static final int ERR_SCALE
public static final byte FINITE
private static final java.lang.String GREATER_THAN_TRAP
public static final byte INFINITE
private static final java.lang.String LESS_THAN_TRAP
public static final int MAX_EXP
public static final int MIN_EXP
private static final java.lang.String MULTIPLY_TRAP
private static final java.lang.String NAN_STRING
private static final java.lang.String NEG_INFINITY_STRING
private static final java.lang.String NEW_INSTANCE_TRAP
private static final java.lang.String NEXT_AFTER_TRAP
private static final java.lang.String POS_INFINITY_STRING
public static final byte QNAN
public static final int RADIX
public static final byte SNAN
private static final java.lang.String SQRT_TRAP
private static final java.lang.String TRUNC_TRAP
protected int exp
private final org.apache.commons.math3.dfp.DfpField field
protected int[] mant
protected byte nans
protected byte sign
    public void <init>(org.apache.commons.math3.dfp.Dfp)
    {
        org.apache.commons.math3.dfp.Dfp r0, $r1;
        java.lang.Object $r2;
        int[] $r3;
        byte $b0;
        int $i1;
        org.apache.commons.math3.dfp.DfpField $r4;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $r1 := @parameter0: org.apache.commons.math3.dfp.Dfp;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = $r1.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $r2 = virtualinvoke $r3.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (int[]) $r2;

        r0.<org.apache.commons.math3.dfp.Dfp: int[] mant> = $r3;

        $b0 = $r1.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        r0.<org.apache.commons.math3.dfp.Dfp: byte sign> = $b0;

        $i1 = $r1.<org.apache.commons.math3.dfp.Dfp: int exp>;

        r0.<org.apache.commons.math3.dfp.Dfp: int exp> = $i1;

        $b0 = $r1.<org.apache.commons.math3.dfp.Dfp: byte nans>;

        r0.<org.apache.commons.math3.dfp.Dfp: byte nans> = $b0;

        $r4 = $r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField field>;

        r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField field> = $r4;

        return;
    }
    protected void <init>(org.apache.commons.math3.dfp.DfpField)
    {
        org.apache.commons.math3.dfp.Dfp r0;
        org.apache.commons.math3.dfp.DfpField $r1;
        int $i0;
        int[] $r2;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $r1 := @parameter0: org.apache.commons.math3.dfp.DfpField;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.dfp.DfpField: int getRadixDigits()>();

        $r2 = newarray (int)[$i0];

        r0.<org.apache.commons.math3.dfp.Dfp: int[] mant> = $r2;

        r0.<org.apache.commons.math3.dfp.Dfp: byte sign> = 1;

        r0.<org.apache.commons.math3.dfp.Dfp: int exp> = 0;

        r0.<org.apache.commons.math3.dfp.Dfp: byte nans> = 0;

        r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField field> = $r1;

        return;
    }
    protected void <init>(org.apache.commons.math3.dfp.DfpField, byte)
    {
        org.apache.commons.math3.dfp.Dfp r0;
        org.apache.commons.math3.dfp.DfpField $r1;
        byte $b0;
        long $l1;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $r1 := @parameter0: org.apache.commons.math3.dfp.DfpField;

        $b0 := @parameter1: byte;

        $l1 = (long) $b0;

        specialinvoke r0.<org.apache.commons.math3.dfp.Dfp: void <init>(org.apache.commons.math3.dfp.DfpField,long)>($r1, $l1);

        return;
    }
    protected void <init>(org.apache.commons.math3.dfp.DfpField, byte, byte)
    {
        org.apache.commons.math3.dfp.Dfp r0;
        org.apache.commons.math3.dfp.DfpField $r1;
        byte $b0, $b1;
        int $i2;
        int[] $r2;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $r1 := @parameter0: org.apache.commons.math3.dfp.DfpField;

        $b0 := @parameter1: byte;

        $b1 := @parameter2: byte;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField field> = $r1;

        $i2 = virtualinvoke $r1.<org.apache.commons.math3.dfp.DfpField: int getRadixDigits()>();

        $r2 = newarray (int)[$i2];

        r0.<org.apache.commons.math3.dfp.Dfp: int[] mant> = $r2;

        r0.<org.apache.commons.math3.dfp.Dfp: byte sign> = $b0;

        r0.<org.apache.commons.math3.dfp.Dfp: int exp> = 0;

        r0.<org.apache.commons.math3.dfp.Dfp: byte nans> = $b1;

        return;
    }
    protected void <init>(org.apache.commons.math3.dfp.DfpField, double)
    {
        org.apache.commons.math3.dfp.Dfp r0, r3, $r4;
        org.apache.commons.math3.dfp.DfpField $r1;
        double $d0;
        int $i0;
        int[] $r2, $r5, $r6;
        long $l1, l2, $l3;
        byte $b4;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $r1 := @parameter0: org.apache.commons.math3.dfp.DfpField;

        $d0 := @parameter1: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.dfp.DfpField: int getRadixDigits()>();

        $r2 = newarray (int)[$i0];

        r0.<org.apache.commons.math3.dfp.Dfp: int[] mant> = $r2;

        r0.<org.apache.commons.math3.dfp.Dfp: byte sign> = 1;

        r0.<org.apache.commons.math3.dfp.Dfp: int exp> = 0;

        r0.<org.apache.commons.math3.dfp.Dfp: byte nans> = 0;

        r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField field> = $r1;

        $l1 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        l2 = $l1 & 4503599627370495L;

        $l3 = 9218868437227405312L & $l1;

        $l3 = $l3 >> 52;

        $i0 = (int) $l3;

        $i0 = $i0 + -1023;

        if $i0 != -1023 goto label4;

        $b4 = $d0 cmpl 0.0;

        if $b4 != 0 goto label1;

        $l1 = -9223372036854775808L & $l1;

        $b4 = $l1 cmp 0L;

        if $b4 == 0 goto label9;

        r0.<org.apache.commons.math3.dfp.Dfp: byte sign> = -1;

        return;

     label1:
        $i0 = $i0 + 1;

     label2:
        $l3 = 4503599627370496L & l2;

        $b4 = $l3 cmp 0L;

        if $b4 != 0 goto label3;

        $i0 = $i0 + -1;

        l2 = l2 << 1;

        goto label2;

     label3:
        l2 = l2 & 4503599627370495L;

     label4:
        if $i0 != 1024 goto label7;

        $b4 = $d0 cmpl $d0;

        if $b4 == 0 goto label5;

        r0.<org.apache.commons.math3.dfp.Dfp: byte sign> = 1;

        r0.<org.apache.commons.math3.dfp.Dfp: byte nans> = 3;

        return;

     label5:
        $b4 = $d0 cmpg 0.0;

        if $b4 >= 0 goto label6;

        r0.<org.apache.commons.math3.dfp.Dfp: byte sign> = -1;

        r0.<org.apache.commons.math3.dfp.Dfp: byte nans> = 1;

        return;

     label6:
        r0.<org.apache.commons.math3.dfp.Dfp: byte sign> = 1;

        r0.<org.apache.commons.math3.dfp.Dfp: byte nans> = 1;

        return;

     label7:
        r3 = new org.apache.commons.math3.dfp.Dfp;

        specialinvoke r3.<org.apache.commons.math3.dfp.Dfp: void <init>(org.apache.commons.math3.dfp.DfpField,long)>($r1, l2);

        $r4 = new org.apache.commons.math3.dfp.Dfp;

        specialinvoke $r4.<org.apache.commons.math3.dfp.Dfp: void <init>(org.apache.commons.math3.dfp.DfpField,long)>($r1, 4503599627370496L);

        r3 = virtualinvoke r3.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(org.apache.commons.math3.dfp.Dfp)>($r4);

        $r4 = virtualinvoke $r1.<org.apache.commons.math3.dfp.DfpField: org.apache.commons.math3.dfp.Dfp getOne()>();

        r3 = virtualinvoke r3.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r4);

        $r4 = virtualinvoke $r1.<org.apache.commons.math3.dfp.DfpField: org.apache.commons.math3.dfp.Dfp getTwo()>();

        $r4 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp pow(org.apache.commons.math3.dfp.Dfp,int)>($r4, $i0);

        r3 = virtualinvoke r3.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>($r4);

        $r4 = r3;

        $l1 = -9223372036854775808L & $l1;

        $b4 = $l1 cmp 0L;

        if $b4 == 0 goto label8;

        $r4 = virtualinvoke r3.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp negate()>();

     label8:
        $r2 = $r4.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $r5 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $r6 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i0 = lengthof $r6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r5, 0, $i0);

        $b4 = $r4.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        r0.<org.apache.commons.math3.dfp.Dfp: byte sign> = $b4;

        $i0 = $r4.<org.apache.commons.math3.dfp.Dfp: int exp>;

        r0.<org.apache.commons.math3.dfp.Dfp: int exp> = $i0;

        $b4 = $r4.<org.apache.commons.math3.dfp.Dfp: byte nans>;

        r0.<org.apache.commons.math3.dfp.Dfp: byte nans> = $b4;

     label9:
        return;
    }
    protected void <init>(org.apache.commons.math3.dfp.DfpField, int)
    {
        org.apache.commons.math3.dfp.Dfp r0;
        org.apache.commons.math3.dfp.DfpField $r1;
        int $i0;
        long $l1;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $r1 := @parameter0: org.apache.commons.math3.dfp.DfpField;

        $i0 := @parameter1: int;

        $l1 = (long) $i0;

        specialinvoke r0.<org.apache.commons.math3.dfp.Dfp: void <init>(org.apache.commons.math3.dfp.DfpField,long)>($r1, $l1);

        return;
    }
    protected void <init>(org.apache.commons.math3.dfp.DfpField, long)
    {
        org.apache.commons.math3.dfp.Dfp r0;
        org.apache.commons.math3.dfp.DfpField $r1;
        int $i0, $i3, $i4;
        long $l1, $l5;
        int[] $r2, $r3, $r4;
        boolean z0;
        byte $b2;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $r1 := @parameter0: org.apache.commons.math3.dfp.DfpField;

        $l1 := @parameter1: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.dfp.DfpField: int getRadixDigits()>();

        $r2 = newarray (int)[$i0];

        r0.<org.apache.commons.math3.dfp.Dfp: int[] mant> = $r2;

        r0.<org.apache.commons.math3.dfp.Dfp: byte nans> = 0;

        r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField field> = $r1;

        z0 = 0;

        $b2 = $l1 cmp -9223372036854775808L;

        if $b2 != 0 goto label1;

        z0 = 1;

        $l1 = $l1 + 1L;

     label1:
        $b2 = $l1 cmp 0L;

        if $b2 >= 0 goto label4;

        r0.<org.apache.commons.math3.dfp.Dfp: byte sign> = -1;

        $l1 = neg $l1;

     label2:
        r0.<org.apache.commons.math3.dfp.Dfp: int exp> = 0;

     label3:
        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label5;

        $r2 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $r3 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i0 = lengthof $r3;

        $i3 = r0.<org.apache.commons.math3.dfp.Dfp: int exp>;

        $i0 = $i0 - $i3;

        $r3 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $r4 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i3 = lengthof $r4;

        $i3 = $i3 + -1;

        $i4 = r0.<org.apache.commons.math3.dfp.Dfp: int exp>;

        $i3 = $i3 - $i4;

        $i4 = r0.<org.apache.commons.math3.dfp.Dfp: int exp>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i0, $r3, $i3, $i4);

        $r2 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $r3 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i0 = lengthof $r3;

        $i0 = $i0 + -1;

        $l5 = $l1 % 10000L;

        $i3 = (int) $l5;

        $r2[$i0] = $i3;

        $l1 = $l1 / 10000L;

        $i0 = r0.<org.apache.commons.math3.dfp.Dfp: int exp>;

        $i0 = $i0 + 1;

        r0.<org.apache.commons.math3.dfp.Dfp: int exp> = $i0;

        goto label3;

     label4:
        r0.<org.apache.commons.math3.dfp.Dfp: byte sign> = 1;

        goto label2;

     label5:
        if z0 == 0 goto label8;

        $i0 = 0;

     label6:
        $r2 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i3 = lengthof $r2;

        $i3 = $i3 + -1;

        if $i0 >= $i3 goto label8;

        $r2 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i3 = $r2[$i0];

        if $i3 == 0 goto label7;

        $r2 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i3 = $r2[$i0];

        $i3 = $i3 + 1;

        $r2[$i0] = $i3;

        return;

     label7:
        $i0 = $i0 + 1;

        goto label6;

     label8:
        return;
    }
    protected void <init>(org.apache.commons.math3.dfp.DfpField, java.lang.String)
    {
        org.apache.commons.math3.dfp.Dfp r0;
        org.apache.commons.math3.dfp.DfpField $r1;
        java.lang.String $r2, $r5;
        char[] r3;
        int $i0, i1, $i2, i4, i5, $i6;
        int[] $r4;
        boolean z0, $z1;
        char $c3;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $r1 := @parameter0: org.apache.commons.math3.dfp.DfpField;

        $r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.dfp.DfpField: int getRadixDigits()>();

        $r4 = newarray (int)[$i0];

        r0.<org.apache.commons.math3.dfp.Dfp: int[] mant> = $r4;

        r0.<org.apache.commons.math3.dfp.Dfp: byte sign> = 1;

        r0.<org.apache.commons.math3.dfp.Dfp: int exp> = 0;

        r0.<org.apache.commons.math3.dfp.Dfp: byte nans> = 0;

        r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField field> = $r1;

        z0 = 0;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: int getRadixDigits()>();

        $i0 = $i0 * 4;

        $i0 = $i0 + 8;

        r3 = newarray (char)[$i0];

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("Infinity");

        if $z1 == 0 goto label01;

        r0.<org.apache.commons.math3.dfp.Dfp: byte sign> = 1;

        r0.<org.apache.commons.math3.dfp.Dfp: byte nans> = 1;

        return;

     label01:
        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("-Infinity");

        if $z1 == 0 goto label02;

        r0.<org.apache.commons.math3.dfp.Dfp: byte sign> = -1;

        r0.<org.apache.commons.math3.dfp.Dfp: byte nans> = 1;

        return;

     label02:
        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("NaN");

        if $z1 == 0 goto label03;

        r0.<org.apache.commons.math3.dfp.Dfp: byte sign> = 1;

        r0.<org.apache.commons.math3.dfp.Dfp: byte nans> = 3;

        return;

     label03:
        $i0 = virtualinvoke $r2.<java.lang.String: int indexOf(java.lang.String)>("e");

        i1 = $i0;

        if $i0 != -1 goto label04;

        i1 = virtualinvoke $r2.<java.lang.String: int indexOf(java.lang.String)>("E");

     label04:
        $i0 = 0;

        if i1 == -1 goto label23;

        $r5 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(0, i1);

        i1 = i1 + 1;

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int)>(i1);

        $z1 = 0;

        i1 = 0;

     label05:
        $i2 = virtualinvoke $r2.<java.lang.String: int length()>();

        if i1 >= $i2 goto label08;

        $c3 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(i1);

        if $c3 != 45 goto label07;

        $z1 = 1;

     label06:
        i1 = i1 + 1;

        goto label05;

     label07:
        $c3 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(i1);

        if $c3 < 48 goto label06;

        $c3 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(i1);

        if $c3 > 57 goto label06;

        $i0 = $i0 * 10;

        $c3 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(i1);

        $i0 = $i0 + $c3;

        $i0 = $i0 + -48;

        goto label06;

     label08:
        if $z1 == 0 goto label09;

        $i0 = neg $i0;

     label09:
        i1 = virtualinvoke $r5.<java.lang.String: int indexOf(java.lang.String)>("-");

        if i1 == -1 goto label10;

        r0.<org.apache.commons.math3.dfp.Dfp: byte sign> = -1;

     label10:
        i1 = 0;

        $i2 = 0;

     label11:
        $c3 = virtualinvoke $r5.<java.lang.String: char charAt(int)>(i1);

        if $c3 < 49 goto label24;

        $c3 = virtualinvoke $r5.<java.lang.String: char charAt(int)>(i1);

        if $c3 > 57 goto label24;

     label12:
        i4 = 4;

        r3[0] = 48;

        r3[1] = 48;

        r3[2] = 48;

        r3[3] = 48;

        i5 = 0;

     label13:
        $i6 = virtualinvoke $r5.<java.lang.String: int length()>();

        if i1 != $i6 goto label27;

     label14:
        if z0 == 0 goto label16;

        if i4 == 4 goto label16;

     label15:
        i4 = i4 + -1;

        if i4 != 4 goto label31;

     label16:
        if z0 == 0 goto label17;

        if i5 != 0 goto label17;

        $i2 = 0;

     label17:
        if z0 != 0 goto label18;

        $i2 = i4 + -4;

     label18:
        i1 = i5 + -1;

        i4 = i1 + 4;

     label19:
        if i4 <= 4 goto label20;

        $c3 = r3[i4];

        if $c3 == 48 goto label32;

     label20:
        i1 = 400 - $i2;

        i5 = $i0 % 4;

        i1 = i1 - i5;

        i5 = i1 % 4;

        i1 = 4 - i5;

        $i2 = $i2 + i5;

     label21:
        i5 = i4 - i1;

        $r4 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i6 = lengthof $r4;

        $i6 = $i6 * 4;

        if i5 >= $i6 goto label33;

        i5 = 0;

     label22:
        if i5 >= 4 goto label21;

        i4 = i4 + 1;

        r3[i4] = 48;

        i5 = i5 + 1;

        goto label22;

     label23:
        $r5 = $r2;

        goto label09;

     label24:
        if z0 == 0 goto label25;

        $c3 = virtualinvoke $r5.<java.lang.String: char charAt(int)>(i1);

        if $c3 != 48 goto label25;

        $i2 = $i2 + -1;

     label25:
        $c3 = virtualinvoke $r5.<java.lang.String: char charAt(int)>(i1);

        if $c3 != 46 goto label26;

        z0 = 1;

     label26:
        i1 = i1 + 1;

        i4 = virtualinvoke $r5.<java.lang.String: int length()>();

        if i1 != i4 goto label11;

        goto label12;

     label27:
        $r4 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i6 = lengthof $r4;

        $i6 = $i6 * 4;

        $i6 = $i6 + 4;

        $i6 = $i6 + 1;

        if i4 == $i6 goto label14;

        $c3 = virtualinvoke $r5.<java.lang.String: char charAt(int)>(i1);

        if $c3 != 46 goto label28;

        z0 = 1;

        $i2 = i5;

        i1 = i1 + 1;

        goto label13;

     label28:
        $c3 = virtualinvoke $r5.<java.lang.String: char charAt(int)>(i1);

        if $c3 < 48 goto label29;

        $c3 = virtualinvoke $r5.<java.lang.String: char charAt(int)>(i1);

        if $c3 <= 57 goto label30;

     label29:
        i1 = i1 + 1;

        goto label13;

     label30:
        $c3 = virtualinvoke $r5.<java.lang.String: char charAt(int)>(i1);

        r3[i4] = $c3;

        i4 = i4 + 1;

        i1 = i1 + 1;

        i5 = i5 + 1;

        goto label13;

     label31:
        $c3 = r3[i4];

        if $c3 != 48 goto label16;

        i5 = i5 + -1;

        goto label15;

     label32:
        i4 = i4 + -1;

        goto label19;

     label33:
        $r4 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        i4 = lengthof $r4;

        i4 = i4 + -1;

     label34:
        if i4 < 0 goto label35;

        $r4 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $c3 = r3[i1];

        i5 = $c3 + -48;

        i5 = i5 * 1000;

        $i6 = i1 + 1;

        $c3 = r3[$i6];

        $i6 = $c3 + -48;

        $i6 = $i6 * 100;

        i5 = i5 + $i6;

        $i6 = i1 + 2;

        $c3 = r3[$i6];

        $i6 = $c3 + -48;

        $i6 = $i6 * 10;

        i5 = i5 + $i6;

        $i6 = i1 + 3;

        $c3 = r3[$i6];

        $i6 = $c3 + -48;

        i5 = i5 + $i6;

        $r4[i4] = i5;

        i1 = i1 + 4;

        i4 = i4 + -1;

        goto label34;

     label35:
        $i0 = $i2 + $i0;

        $i0 = $i0 / 4;

        r0.<org.apache.commons.math3.dfp.Dfp: int exp> = $i0;

        $i0 = lengthof r3;

        if i1 >= $i0 goto label36;

        $c3 = r3[i1];

        $i0 = $c3 + -48;

        $i0 = $i0 * 1000;

        virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: int round(int)>($i0);

     label36:
        return;
    }
    private static int compare(org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp)
    {
        org.apache.commons.math3.dfp.Dfp $r0, $r1;
        int[] $r2, $r3;
        int $i0, $i3, $i4;
        byte $b1, $b2;

        $r0 := @parameter0: org.apache.commons.math3.dfp.Dfp;

        $r1 := @parameter1: org.apache.commons.math3.dfp.Dfp;

        $r2 = $r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $r3 = $r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i0 = lengthof $r3;

        $i0 = $i0 + -1;

        $i0 = $r2[$i0];

        if $i0 != 0 goto label01;

        $r2 = $r1.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $r3 = $r1.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i0 = lengthof $r3;

        $i0 = $i0 + -1;

        $i0 = $r2[$i0];

        if $i0 != 0 goto label01;

        $b1 = $r0.<org.apache.commons.math3.dfp.Dfp: byte nans>;

        if $b1 != 0 goto label01;

        $b1 = $r1.<org.apache.commons.math3.dfp.Dfp: byte nans>;

        if $b1 != 0 goto label01;

        return 0;

     label01:
        $b1 = $r0.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        $b2 = $r1.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        if $b1 == $b2 goto label03;

        $b1 = $r0.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        if $b1 != -1 goto label02;

        return -1;

     label02:
        return 1;

     label03:
        $b1 = $r0.<org.apache.commons.math3.dfp.Dfp: byte nans>;

        if $b1 != 1 goto label04;

        $b1 = $r1.<org.apache.commons.math3.dfp.Dfp: byte nans>;

        if $b1 != 0 goto label04;

        $b1 = $r0.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        return $b1;

     label04:
        $b1 = $r0.<org.apache.commons.math3.dfp.Dfp: byte nans>;

        if $b1 != 0 goto label05;

        $b1 = $r1.<org.apache.commons.math3.dfp.Dfp: byte nans>;

        if $b1 != 1 goto label05;

        $b1 = $r1.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        $b1 = neg $b1;

        return $b1;

     label05:
        $b1 = $r0.<org.apache.commons.math3.dfp.Dfp: byte nans>;

        if $b1 != 1 goto label06;

        $b1 = $r1.<org.apache.commons.math3.dfp.Dfp: byte nans>;

        if $b1 == 1 goto label12;

     label06:
        $r2 = $r1.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $r3 = $r1.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i0 = lengthof $r3;

        $i0 = $i0 + -1;

        $i0 = $r2[$i0];

        if $i0 == 0 goto label08;

        $r2 = $r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $r3 = $r1.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i0 = lengthof $r3;

        $i0 = $i0 + -1;

        $i0 = $r2[$i0];

        if $i0 == 0 goto label08;

        $i0 = $r0.<org.apache.commons.math3.dfp.Dfp: int exp>;

        $i3 = $r1.<org.apache.commons.math3.dfp.Dfp: int exp>;

        if $i0 >= $i3 goto label07;

        $b1 = $r0.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        $b1 = neg $b1;

        return $b1;

     label07:
        $i0 = $r0.<org.apache.commons.math3.dfp.Dfp: int exp>;

        $i3 = $r1.<org.apache.commons.math3.dfp.Dfp: int exp>;

        if $i0 <= $i3 goto label08;

        $b1 = $r0.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        return $b1;

     label08:
        $r2 = $r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i0 = lengthof $r2;

        $i0 = $i0 + -1;

     label09:
        if $i0 < 0 goto label12;

        $r2 = $r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i3 = $r2[$i0];

        $r2 = $r1.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i4 = $r2[$i0];

        if $i3 <= $i4 goto label10;

        $b1 = $r0.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        return $b1;

     label10:
        $r2 = $r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i3 = $r2[$i0];

        $r2 = $r1.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i4 = $r2[$i0];

        if $i3 >= $i4 goto label11;

        $b1 = $r0.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        $b1 = neg $b1;

        return $b1;

     label11:
        $i0 = $i0 + -1;

        goto label09;

     label12:
        return 0;
    }
    public static org.apache.commons.math3.dfp.Dfp copysign(org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp)
    {
        org.apache.commons.math3.dfp.Dfp $r0, $r1;
        byte $b0;

        $r0 := @parameter0: org.apache.commons.math3.dfp.Dfp;

        $r1 := @parameter1: org.apache.commons.math3.dfp.Dfp;

        $r0 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r0);

        $b0 = $r1.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        $r0.<org.apache.commons.math3.dfp.Dfp: byte sign> = $b0;

        return $r0;
    }
    private org.apache.commons.math3.dfp.Dfp multiplyFast(int)
    {
        int $i0, i1, i3, i4, $i5;
        org.apache.commons.math3.dfp.Dfp r0, $r1, r2;
        byte $b2;
        boolean $z0;
        org.apache.commons.math3.dfp.DfpField $r3;
        int[] $r4, $r5;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>(r0);

        r2 = $r1;

        $b2 = r0.<org.apache.commons.math3.dfp.Dfp: byte nans>;

        if $b2 == 0 goto label03;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: boolean isNaN()>();

        if $z0 == 0 goto label01;

        return r0;

     label01:
        $b2 = r0.<org.apache.commons.math3.dfp.Dfp: byte nans>;

        if $b2 != 1 goto label02;

        if $i0 == 0 goto label02;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>(r0);

        return r0;

     label02:
        $b2 = r0.<org.apache.commons.math3.dfp.Dfp: byte nans>;

        if $b2 != 1 goto label03;

        if $i0 != 0 goto label03;

        $r3 = r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField field>;

        virtualinvoke $r3.<org.apache.commons.math3.dfp.DfpField: void setIEEEFlagsBits(int)>(1);

        $r1 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getZero()>();

        $r1 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r1);

        $r1.<org.apache.commons.math3.dfp.Dfp: byte nans> = 3;

        r2 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getZero()>();

        r2 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>(r2);

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)>(1, "multiply", r2, $r1);

        return r0;

     label03:
        if $i0 < 0 goto label04;

        if $i0 < 10000 goto label05;

     label04:
        $r3 = r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField field>;

        virtualinvoke $r3.<org.apache.commons.math3.dfp.DfpField: void setIEEEFlagsBits(int)>(1);

        $r1 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getZero()>();

        $r1 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r1);

        $r1.<org.apache.commons.math3.dfp.Dfp: byte nans> = 3;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)>(1, "multiply", $r1, $r1);

        return r0;

     label05:
        i3 = 0;

        i4 = 0;

     label06:
        $r4 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        i1 = lengthof $r4;

        if i4 >= i1 goto label07;

        $r4 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        i1 = $r4[i4];

        i1 = i1 * $i0;

        i1 = i1 + i3;

        i3 = i1 / 10000;

        $r4 = $r1.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i5 = i3 * 10000;

        i1 = i1 - $i5;

        $r4[i4] = i1;

        i4 = i4 + 1;

        goto label06;

     label07:
        $i0 = 0;

        if i3 == 0 goto label08;

        $r4 = $r1.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i0 = $r4[0];

        virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: void shiftRight()>();

        $r4 = $r1.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $r5 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        i4 = lengthof $r5;

        i4 = i4 + -1;

        $r4[i4] = i3;

     label08:
        $r4 = $r1.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $r5 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        i3 = lengthof $r5;

        i3 = i3 + -1;

        i3 = $r4[i3];

        if i3 != 0 goto label09;

        $r1.<org.apache.commons.math3.dfp.Dfp: int exp> = 0;

     label09:
        $i0 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: int round(int)>($i0);

        if $i0 == 0 goto label10;

        r2 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)>($i0, "multiply", $r1, $r1);

     label10:
        return r2;
    }
    public volatile java.lang.Object abs()
    {
        org.apache.commons.math3.dfp.Dfp r0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp abs()>();

        return r0;
    }
    public org.apache.commons.math3.dfp.Dfp abs()
    {
        org.apache.commons.math3.dfp.Dfp r0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>(r0);

        r0.<org.apache.commons.math3.dfp.Dfp: byte sign> = 1;

        return r0;
    }
    public volatile java.lang.Object acos()
    {
        org.apache.commons.math3.dfp.Dfp r0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp acos()>();

        return r0;
    }
    public org.apache.commons.math3.dfp.Dfp acos()
    {
        org.apache.commons.math3.dfp.Dfp r0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        r0 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp acos(org.apache.commons.math3.dfp.Dfp)>(r0);

        return r0;
    }
    public volatile java.lang.Object acosh()
    {
        org.apache.commons.math3.dfp.Dfp r0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp acosh()>();

        return r0;
    }
    public org.apache.commons.math3.dfp.Dfp acosh()
    {
        org.apache.commons.math3.dfp.Dfp r0, $r1, $r2;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>(r0);

        $r2 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getOne()>();

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp subtract(org.apache.commons.math3.dfp.Dfp)>($r2);

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp sqrt()>();

        r0 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>(r0);

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp log()>();

        return r0;
    }
    public volatile java.lang.Object add(double)
    {
        org.apache.commons.math3.dfp.Dfp r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $d0 := @parameter0: double;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(double)>($d0);

        return r0;
    }
    public volatile java.lang.Object add(java.lang.Object) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.dfp.Dfp r0, $r2;
        java.lang.Object $r1;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math3.dfp.Dfp) $r1;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r2);

        return r0;
    }
    public org.apache.commons.math3.dfp.Dfp add(double)
    {
        org.apache.commons.math3.dfp.Dfp r0, $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(double)>($d0);

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r1);

        return r0;
    }
    public org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)
    {
        org.apache.commons.math3.dfp.Dfp r0, r1, $r3, $r4, $r5, r6;
        byte b0, b1, b6;
        int i2, i3, $i4, $i5, $i7, $i8;
        org.apache.commons.math3.dfp.DfpField $r2;
        boolean $z0;
        int[] $r7, $r8;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        r1 := @parameter0: org.apache.commons.math3.dfp.Dfp;

        $r2 = r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField field>;

        $i4 = virtualinvoke $r2.<org.apache.commons.math3.dfp.DfpField: int getRadixDigits()>();

        $r2 = r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField field>;

        $i5 = virtualinvoke $r2.<org.apache.commons.math3.dfp.DfpField: int getRadixDigits()>();

        if $i4 == $i5 goto label01;

        $r2 = r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField field>;

        virtualinvoke $r2.<org.apache.commons.math3.dfp.DfpField: void setIEEEFlagsBits(int)>(1);

        $r3 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getZero()>();

        $r3 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r3);

        $r3.<org.apache.commons.math3.dfp.Dfp: byte nans> = 3;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)>(1, "add", r1, $r3);

        return r0;

     label01:
        b0 = r0.<org.apache.commons.math3.dfp.Dfp: byte nans>;

        if b0 != 0 goto label02;

        b0 = r1.<org.apache.commons.math3.dfp.Dfp: byte nans>;

        if b0 == 0 goto label07;

     label02:
        $z0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: boolean isNaN()>();

        if $z0 == 0 goto label03;

        return r0;

     label03:
        $z0 = virtualinvoke r1.<org.apache.commons.math3.dfp.Dfp: boolean isNaN()>();

        if $z0 != 0 goto label24;

        b0 = r0.<org.apache.commons.math3.dfp.Dfp: byte nans>;

        if b0 != 1 goto label04;

        b0 = r1.<org.apache.commons.math3.dfp.Dfp: byte nans>;

        if b0 != 0 goto label04;

        return r0;

     label04:
        b0 = r1.<org.apache.commons.math3.dfp.Dfp: byte nans>;

        if b0 != 1 goto label05;

        b0 = r0.<org.apache.commons.math3.dfp.Dfp: byte nans>;

        if b0 == 0 goto label24;

     label05:
        b0 = r1.<org.apache.commons.math3.dfp.Dfp: byte nans>;

        if b0 != 1 goto label06;

        b0 = r0.<org.apache.commons.math3.dfp.Dfp: byte nans>;

        if b0 != 1 goto label06;

        b0 = r0.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        b1 = r1.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        if b0 == b1 goto label24;

     label06:
        b0 = r1.<org.apache.commons.math3.dfp.Dfp: byte nans>;

        if b0 != 1 goto label07;

        b0 = r0.<org.apache.commons.math3.dfp.Dfp: byte nans>;

        if b0 != 1 goto label07;

        b0 = r0.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        b1 = r1.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        if b0 == b1 goto label07;

        $r2 = r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField field>;

        virtualinvoke $r2.<org.apache.commons.math3.dfp.DfpField: void setIEEEFlagsBits(int)>(1);

        $r3 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getZero()>();

        $r3 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r3);

        $r3.<org.apache.commons.math3.dfp.Dfp: byte nans> = 3;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)>(1, "add", r1, $r3);

        return r0;

     label07:
        $r3 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>(r0);

        $r4 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>(r1);

        $r5 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getZero()>();

        $r5 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r5);

        r6 = $r5;

        b0 = $r3.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        b1 = $r4.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        $r3.<org.apache.commons.math3.dfp.Dfp: byte sign> = 1;

        $r4.<org.apache.commons.math3.dfp.Dfp: byte sign> = 1;

        b6 = b1;

        $i4 = staticinvoke <org.apache.commons.math3.dfp.Dfp: int compare(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)>($r3, $r4);

        if $i4 <= 0 goto label08;

        b6 = b0;

     label08:
        $r7 = $r4.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $r8 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i4 = lengthof $r8;

        $i4 = $i4 + -1;

        $i4 = $r7[$i4];

        if $i4 != 0 goto label09;

        $i4 = $r3.<org.apache.commons.math3.dfp.Dfp: int exp>;

        $r4.<org.apache.commons.math3.dfp.Dfp: int exp> = $i4;

     label09:
        $r7 = $r3.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $r8 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i4 = lengthof $r8;

        $i4 = $i4 + -1;

        $i4 = $r7[$i4];

        if $i4 != 0 goto label10;

        $i4 = $r4.<org.apache.commons.math3.dfp.Dfp: int exp>;

        $r3.<org.apache.commons.math3.dfp.Dfp: int exp> = $i4;

     label10:
        $i4 = 0;

        $i5 = 0;

        $i7 = $r3.<org.apache.commons.math3.dfp.Dfp: int exp>;

        i2 = $r4.<org.apache.commons.math3.dfp.Dfp: int exp>;

        if $i7 >= i2 goto label14;

        $i4 = $r4.<org.apache.commons.math3.dfp.Dfp: int exp>;

        $i4 = virtualinvoke $r3.<org.apache.commons.math3.dfp.Dfp: int align(int)>($i4);

     label11:
        if b0 == b1 goto label12;

        if b0 != b6 goto label15;

        $i5 = virtualinvoke $r4.<org.apache.commons.math3.dfp.Dfp: int complement(int)>($i5);

     label12:
        $i7 = 0;

        i2 = 0;

     label13:
        $r7 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        i3 = lengthof $r7;

        if i2 >= i3 goto label16;

        $r7 = $r3.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        i3 = $r7[i2];

        $r7 = $r4.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i8 = $r7[i2];

        i3 = i3 + $i8;

        i3 = i3 + $i7;

        $i7 = i3 / 10000;

        $r7 = $r5.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i8 = $i7 * 10000;

        i3 = i3 - $i8;

        $r7[i2] = i3;

        i2 = i2 + 1;

        goto label13;

     label14:
        $i5 = $r3.<org.apache.commons.math3.dfp.Dfp: int exp>;

        $i5 = virtualinvoke $r4.<org.apache.commons.math3.dfp.Dfp: int align(int)>($i5);

        goto label11;

     label15:
        $i4 = virtualinvoke $r3.<org.apache.commons.math3.dfp.Dfp: int complement(int)>($i4);

        goto label12;

     label16:
        i2 = $r3.<org.apache.commons.math3.dfp.Dfp: int exp>;

        $r5.<org.apache.commons.math3.dfp.Dfp: int exp> = i2;

        $r5.<org.apache.commons.math3.dfp.Dfp: byte sign> = b6;

        if $i7 == 0 goto label17;

        if b0 != b1 goto label17;

        $r7 = $r5.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        i2 = $r7[0];

        virtualinvoke $r5.<org.apache.commons.math3.dfp.Dfp: void shiftRight()>();

        $r7 = $r5.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $r8 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        i3 = lengthof $r8;

        i3 = i3 + -1;

        $r7[i3] = $i7;

        $i7 = virtualinvoke $r5.<org.apache.commons.math3.dfp.Dfp: int round(int)>(i2);

        if $i7 == 0 goto label17;

        r6 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)>($i7, "add", r1, $r5);

     label17:
        $i7 = 0;

     label18:
        $r7 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        i2 = lengthof $r7;

        if $i7 >= i2 goto label19;

        $r7 = r6.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $r8 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        i2 = lengthof $r8;

        i2 = i2 + -1;

        i2 = $r7[i2];

        if i2 == 0 goto label22;

     label19:
        $r7 = r6.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $r8 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i7 = lengthof $r8;

        $i7 = $i7 + -1;

        $i7 = $r7[$i7];

        if $i7 != 0 goto label20;

        r6.<org.apache.commons.math3.dfp.Dfp: int exp> = 0;

        if b0 == b1 goto label20;

        r6.<org.apache.commons.math3.dfp.Dfp: byte sign> = 1;

     label20:
        $i4 = $i4 + $i5;

        $i4 = virtualinvoke r6.<org.apache.commons.math3.dfp.Dfp: int round(int)>($i4);

        if $i4 == 0 goto label21;

        r6 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)>($i4, "add", r1, r6);

     label21:
        return r6;

     label22:
        virtualinvoke r6.<org.apache.commons.math3.dfp.Dfp: void shiftLeft()>();

        if $i7 != 0 goto label23;

        $r7 = r6.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i4 = $i4 + $i5;

        $r7[0] = $i4;

        $i4 = 0;

        $i5 = 0;

     label23:
        $i7 = $i7 + 1;

        goto label18;

     label24:
        return r1;
    }
    protected int align(int)
    {
        org.apache.commons.math3.dfp.Dfp r0;
        int $i0, i1, i2, i3, $i4;
        boolean z0;
        int[] $r1;
        org.apache.commons.math3.dfp.DfpField $r2;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $i0 := @parameter0: int;

        i2 = 0;

        z0 = 0;

        i1 = r0.<org.apache.commons.math3.dfp.Dfp: int exp>;

        i1 = i1 - $i0;

        i3 = i1;

        if i1 >= 0 goto label1;

        i3 = neg i1;

     label1:
        if i1 != 0 goto label2;

        return 0;

     label2:
        $r1 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i4 = lengthof $r1;

        $i4 = $i4 + 1;

        if i3 <= $i4 goto label3;

        $r1 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        staticinvoke <java.util.Arrays: void fill(int[],int)>($r1, 0);

        r0.<org.apache.commons.math3.dfp.Dfp: int exp> = $i0;

        $r2 = r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField field>;

        virtualinvoke $r2.<org.apache.commons.math3.dfp.DfpField: void setIEEEFlagsBits(int)>(16);

        virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)>(16, "align", r0, r0);

        return 0;

     label3:
        $i0 = 0;

     label4:
        if $i0 >= i3 goto label8;

        if i1 >= 0 goto label7;

        if i2 == 0 goto label5;

        z0 = 1;

     label5:
        $r1 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        i2 = $r1[0];

        virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: void shiftRight()>();

     label6:
        $i0 = $i0 + 1;

        goto label4;

     label7:
        virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: void shiftLeft()>();

        goto label6;

     label8:
        if z0 == 0 goto label9;

        $r2 = r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField field>;

        virtualinvoke $r2.<org.apache.commons.math3.dfp.DfpField: void setIEEEFlagsBits(int)>(16);

        virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)>(16, "align", r0, r0);

     label9:
        return i2;
    }
    public volatile java.lang.Object asin()
    {
        org.apache.commons.math3.dfp.Dfp r0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp asin()>();

        return r0;
    }
    public org.apache.commons.math3.dfp.Dfp asin()
    {
        org.apache.commons.math3.dfp.Dfp r0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        r0 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp asin(org.apache.commons.math3.dfp.Dfp)>(r0);

        return r0;
    }
    public volatile java.lang.Object asinh()
    {
        org.apache.commons.math3.dfp.Dfp r0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp asinh()>();

        return r0;
    }
    public org.apache.commons.math3.dfp.Dfp asinh()
    {
        org.apache.commons.math3.dfp.Dfp r0, $r1, $r2;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>(r0);

        $r2 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getOne()>();

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r2);

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp sqrt()>();

        r0 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>(r0);

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp log()>();

        return r0;
    }
    public volatile java.lang.Object atan()
    {
        org.apache.commons.math3.dfp.Dfp r0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp atan()>();

        return r0;
    }
    public org.apache.commons.math3.dfp.Dfp atan()
    {
        org.apache.commons.math3.dfp.Dfp r0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        r0 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp atan(org.apache.commons.math3.dfp.Dfp)>(r0);

        return r0;
    }
    public volatile java.lang.Object atan2(java.lang.Object) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.dfp.Dfp r0, $r2;
        java.lang.Object $r1;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math3.dfp.Dfp) $r1;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp atan2(org.apache.commons.math3.dfp.Dfp)>($r2);

        return r0;
    }
    public org.apache.commons.math3.dfp.Dfp atan2(org.apache.commons.math3.dfp.Dfp) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.dfp.Dfp r0, $r1, $r2, $r3;
        byte $b0;
        double $d0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $r1 := @parameter0: org.apache.commons.math3.dfp.Dfp;

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>($r1);

        $r3 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>(r0);

        $r2 = virtualinvoke $r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r3);

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp sqrt()>();

        $b0 = $r1.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        if $b0 < 0 goto label1;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getTwo()>();

        $r1 = virtualinvoke $r3.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r1);

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(org.apache.commons.math3.dfp.Dfp)>($r1);

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp atan()>();

        r0 = virtualinvoke $r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>(r0);

        return r0;

     label1:
        $r2 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getTwo()>();

        $r1 = virtualinvoke $r3.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp subtract(org.apache.commons.math3.dfp.Dfp)>($r1);

        $r1 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(org.apache.commons.math3.dfp.Dfp)>($r1);

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp atan()>();

        $r1 = virtualinvoke $r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>($r1);

        $b0 = $r1.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        if $b0 > 0 goto label3;

        $d0 = -3.141592653589793;

     label2:
        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(double)>($d0);

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp subtract(org.apache.commons.math3.dfp.Dfp)>($r1);

        return r0;

     label3:
        $d0 = 3.141592653589793;

        goto label2;
    }
    public volatile java.lang.Object atanh()
    {
        org.apache.commons.math3.dfp.Dfp r0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp atanh()>();

        return r0;
    }
    public org.apache.commons.math3.dfp.Dfp atanh()
    {
        org.apache.commons.math3.dfp.Dfp r0, $r1, $r2;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getOne()>();

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>(r0);

        $r2 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getOne()>();

        r0 = virtualinvoke $r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp subtract(org.apache.commons.math3.dfp.Dfp)>(r0);

        r0 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(org.apache.commons.math3.dfp.Dfp)>(r0);

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp log()>();

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(int)>(2);

        return r0;
    }
    public volatile java.lang.Object cbrt()
    {
        org.apache.commons.math3.dfp.Dfp r0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp cbrt()>();

        return r0;
    }
    public org.apache.commons.math3.dfp.Dfp cbrt()
    {
        org.apache.commons.math3.dfp.Dfp r0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp rootN(int)>(3);

        return r0;
    }
    public volatile java.lang.Object ceil()
    {
        org.apache.commons.math3.dfp.Dfp r0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp ceil()>();

        return r0;
    }
    public org.apache.commons.math3.dfp.Dfp ceil()
    {
        org.apache.commons.math3.dfp.Dfp r0;
        org.apache.commons.math3.dfp.DfpField$RoundingMode $r1;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $r1 = <org.apache.commons.math3.dfp.DfpField$RoundingMode: org.apache.commons.math3.dfp.DfpField$RoundingMode ROUND_CEIL>;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp trunc(org.apache.commons.math3.dfp.DfpField$RoundingMode)>($r1);

        return r0;
    }
    public int classify()
    {
        org.apache.commons.math3.dfp.Dfp r0;
        byte b0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        b0 = r0.<org.apache.commons.math3.dfp.Dfp: byte nans>;

        return b0;
    }
    protected int complement(int)
    {
        org.apache.commons.math3.dfp.Dfp r0;
        int i0, $i1, $i2, $i3, $i4;
        int[] $r1, $r2;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $i1 := @parameter0: int;

        $i2 = 10000 - $i1;

        $i1 = 0;

     label1:
        $r1 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i3 = lengthof $r1;

        if $i1 >= $i3 goto label2;

        $r1 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $r2 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i3 = $r2[$i1];

        $i3 = 10000 - $i3;

        $i3 = $i3 + -1;

        $r1[$i1] = $i3;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        $i1 = $i2 / 10000;

        $i3 = $i1 * 10000;

        $i2 = $i2 - $i3;

        $i3 = 0;

     label3:
        $r1 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        i0 = lengthof $r1;

        if $i3 >= i0 goto label4;

        $r1 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        i0 = $r1[$i3];

        i0 = i0 + $i1;

        $i1 = i0 / 10000;

        $r1 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i4 = $i1 * 10000;

        i0 = i0 - $i4;

        $r1[$i3] = i0;

        $i3 = $i3 + 1;

        goto label3;

     label4:
        return $i2;
    }
    public volatile java.lang.Object copySign(double)
    {
        org.apache.commons.math3.dfp.Dfp r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $d0 := @parameter0: double;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp copySign(double)>($d0);

        return r0;
    }
    public volatile java.lang.Object copySign(java.lang.Object)
    {
        org.apache.commons.math3.dfp.Dfp r0, $r2;
        java.lang.Object $r1;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math3.dfp.Dfp) $r1;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp copySign(org.apache.commons.math3.dfp.Dfp)>($r2);

        return r0;
    }
    public org.apache.commons.math3.dfp.Dfp copySign(double)
    {
        double $d0;
        org.apache.commons.math3.dfp.Dfp r0;
        long $l0;
        byte $b1;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $d0 := @parameter0: double;

        $l0 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $b1 = r0.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        if $b1 < 0 goto label1;

        $b1 = $l0 cmp 0L;

        if $b1 >= 0 goto label3;

     label1:
        $b1 = r0.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        if $b1 >= 0 goto label2;

        $b1 = $l0 cmp 0L;

        if $b1 >= 0 goto label2;

        return r0;

     label2:
        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp negate()>();

     label3:
        return r0;
    }
    public org.apache.commons.math3.dfp.Dfp copySign(org.apache.commons.math3.dfp.Dfp)
    {
        org.apache.commons.math3.dfp.Dfp $r0, $r1;
        byte $b0;

        $r1 := @this: org.apache.commons.math3.dfp.Dfp;

        $r0 := @parameter0: org.apache.commons.math3.dfp.Dfp;

        $b0 = $r1.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        if $b0 < 0 goto label1;

        $b0 = $r0.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        if $b0 >= 0 goto label3;

     label1:
        $b0 = $r1.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        if $b0 >= 0 goto label2;

        $b0 = $r0.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        if $b0 >= 0 goto label2;

        return $r1;

     label2:
        $r1 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp negate()>();

     label3:
        return $r1;
    }
    public volatile java.lang.Object cos()
    {
        org.apache.commons.math3.dfp.Dfp r0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp cos()>();

        return r0;
    }
    public org.apache.commons.math3.dfp.Dfp cos()
    {
        org.apache.commons.math3.dfp.Dfp r0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        r0 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp cos(org.apache.commons.math3.dfp.Dfp)>(r0);

        return r0;
    }
    public volatile java.lang.Object cosh()
    {
        org.apache.commons.math3.dfp.Dfp r0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp cosh()>();

        return r0;
    }
    public org.apache.commons.math3.dfp.Dfp cosh()
    {
        org.apache.commons.math3.dfp.Dfp r0, $r1;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $r1 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp exp(org.apache.commons.math3.dfp.Dfp)>(r0);

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp negate()>();

        r0 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp exp(org.apache.commons.math3.dfp.Dfp)>(r0);

        r0 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>(r0);

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(int)>(2);

        return r0;
    }
    protected java.lang.String dfp2sci()
    {
        org.apache.commons.math3.dfp.Dfp r0;
        int i0, i1, i2, i3, i6;
        char[] r1, r2;
        int[] $r3;
        char $c4;
        byte $b5;
        java.lang.String $r4;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $r3 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        i1 = lengthof $r3;

        i1 = i1 * 4;

        r2 = newarray (char)[i1];

        $r3 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        i1 = lengthof $r3;

        i1 = i1 * 4;

        i1 = i1 + 20;

        r1 = newarray (char)[i1];

        $r3 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        i1 = lengthof $r3;

        i1 = i1 + -1;

        i2 = 0;

     label01:
        if i1 < 0 goto label02;

        i3 = i2 + 1;

        $r3 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        i0 = $r3[i1];

        i0 = i0 / 1000;

        i0 = i0 + 48;

        $c4 = (char) i0;

        r2[i2] = $c4;

        i2 = i3 + 1;

        $r3 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        i0 = $r3[i1];

        i0 = i0 / 100;

        i0 = i0 % 10;

        i0 = i0 + 48;

        $c4 = (char) i0;

        r2[i3] = $c4;

        i3 = i2 + 1;

        $r3 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        i0 = $r3[i1];

        i0 = i0 / 10;

        i0 = i0 % 10;

        i0 = i0 + 48;

        $c4 = (char) i0;

        r2[i2] = $c4;

        i2 = i3 + 1;

        $r3 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        i0 = $r3[i1];

        i0 = i0 % 10;

        i0 = i0 + 48;

        $c4 = (char) i0;

        r2[i3] = $c4;

        i1 = i1 + -1;

        goto label01;

     label02:
        i2 = 0;

     label03:
        i1 = lengthof r2;

        if i2 >= i1 goto label04;

        $c4 = r2[i2];

        if $c4 == 48 goto label07;

     label04:
        i1 = i2;

        i3 = 0;

        $b5 = r0.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        if $b5 != -1 goto label05;

        r1[0] = 45;

        i3 = 1;

     label05:
        i0 = lengthof r2;

        if i2 == i0 goto label08;

        i0 = i3 + 1;

        $c4 = r2[i2];

        r1[i3] = $c4;

        i3 = i0 + 1;

        r1[i0] = 46;

        i2 = i2 + 1;

     label06:
        i0 = lengthof r2;

        if i2 >= i0 goto label09;

        $c4 = r2[i2];

        r1[i3] = $c4;

        i3 = i3 + 1;

        i2 = i2 + 1;

        goto label06;

     label07:
        i2 = i2 + 1;

        goto label03;

     label08:
        i1 = i3 + 1;

        r1[i3] = 48;

        i2 = i1 + 1;

        r1[i1] = 46;

        i1 = i2 + 1;

        r1[i2] = 48;

        i2 = i1 + 1;

        r1[i1] = 101;

        r1[i2] = 48;

        $r4 = new java.lang.String;

        specialinvoke $r4.<java.lang.String: void <init>(char[],int,int)>(r1, 0, 5);

        return $r4;

     label09:
        i2 = i3 + 1;

        r1[i3] = 101;

        i3 = r0.<org.apache.commons.math3.dfp.Dfp: int exp>;

        i3 = i3 * 4;

        i1 = i3 - i1;

        i0 = i1 + -1;

        i1 = i0;

        if i0 >= 0 goto label10;

        i1 = neg i0;

     label10:
        i3 = 1000000000;

     label11:
        if i3 <= i1 goto label12;

        i3 = i3 / 10;

        goto label11;

     label12:
        if i0 >= 0 goto label13;

        r1[i2] = 45;

        i2 = i2 + 1;

     label13:
        if i3 <= 0 goto label14;

        i6 = i1 / i3;

        i6 = i6 + 48;

        $c4 = (char) i6;

        r1[i2] = $c4;

        i1 = i1 % i3;

        i3 = i3 / 10;

        i2 = i2 + 1;

        goto label13;

     label14:
        $r4 = new java.lang.String;

        specialinvoke $r4.<java.lang.String: void <init>(char[],int,int)>(r1, 0, i2);

        return $r4;
    }
    protected java.lang.String dfp2string()
    {
        org.apache.commons.math3.dfp.Dfp r0;
        char[] r1;
        int[] $r2;
        int $i0, i1, i2, i3, $i4;
        boolean z0;
        char $c5;
        byte $b6;
        java.lang.String $r3;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $r2 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i0 = lengthof $r2;

        $i0 = $i0 * 4;

        $i0 = $i0 + 20;

        r1 = newarray (char)[$i0];

        $i0 = r0.<org.apache.commons.math3.dfp.Dfp: int exp>;

        z0 = 0;

        r1[0] = 32;

        if $i0 > 0 goto label15;

        i1 = 1 + 1;

        r1[1] = 48;

        r1[i1] = 46;

        z0 = 1;

        i2 = i1 + 1;

     label01:
        if $i0 >= 0 goto label02;

        i1 = i2 + 1;

        r1[i2] = 48;

        i2 = i1 + 1;

        r1[i1] = 48;

        i1 = i2 + 1;

        r1[i2] = 48;

        i2 = i1 + 1;

        r1[i1] = 48;

        $i0 = $i0 + 1;

        goto label01;

     label02:
        $r2 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        i1 = lengthof $r2;

        i1 = i1 + -1;

     label03:
        if i1 < 0 goto label05;

        i3 = i2 + 1;

        $r2 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i4 = $r2[i1];

        $i4 = $i4 / 1000;

        $i4 = $i4 + 48;

        $c5 = (char) $i4;

        r1[i2] = $c5;

        i2 = i3 + 1;

        $r2 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i4 = $r2[i1];

        $i4 = $i4 / 100;

        $i4 = $i4 % 10;

        $i4 = $i4 + 48;

        $c5 = (char) $i4;

        r1[i3] = $c5;

        i3 = i2 + 1;

        $r2 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i4 = $r2[i1];

        $i4 = $i4 / 10;

        $i4 = $i4 % 10;

        $i4 = $i4 + 48;

        $c5 = (char) $i4;

        r1[i2] = $c5;

        i2 = i3 + 1;

        $r2 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i4 = $r2[i1];

        $i4 = $i4 % 10;

        $i4 = $i4 + 48;

        $c5 = (char) $i4;

        r1[i3] = $c5;

        $i0 = $i0 + -1;

        if $i0 != 0 goto label14;

        i3 = i2 + 1;

        r1[i2] = 46;

        z0 = 1;

     label04:
        i1 = i1 + -1;

        i2 = i3;

        goto label03;

     label05:
        if $i0 <= 0 goto label06;

        i1 = i2 + 1;

        r1[i2] = 48;

        i2 = i1 + 1;

        r1[i1] = 48;

        i1 = i2 + 1;

        r1[i2] = 48;

        i2 = i1 + 1;

        r1[i1] = 48;

        $i0 = $i0 + -1;

        goto label05;

     label06:
        if z0 != 0 goto label13;

        $i0 = i2 + 1;

        r1[i2] = 46;

     label07:
        i1 = 1;

     label08:
        $c5 = r1[i1];

        if $c5 != 48 goto label09;

        i1 = i1 + 1;

        goto label08;

     label09:
        $c5 = r1[i1];

        if $c5 != 46 goto label10;

        i1 = i1 + -1;

     label10:
        i2 = $i0 + -1;

        $c5 = r1[i2];

        if $c5 != 48 goto label11;

        $i0 = $i0 + -1;

        goto label10;

     label11:
        $b6 = r0.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        if $b6 >= 0 goto label12;

        i1 = i1 + -1;

        r1[i1] = 45;

     label12:
        $r3 = new java.lang.String;

        $i0 = $i0 - i1;

        specialinvoke $r3.<java.lang.String: void <init>(char[],int,int)>(r1, i1, $i0);

        return $r3;

     label13:
        $i0 = i2;

        goto label07;

     label14:
        i3 = i2;

        goto label04;

     label15:
        i2 = 1;

        goto label01;
    }
    public volatile java.lang.Object divide(double)
    {
        org.apache.commons.math3.dfp.Dfp r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $d0 := @parameter0: double;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(double)>($d0);

        return r0;
    }
    public volatile java.lang.Object divide(java.lang.Object) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.dfp.Dfp r0, $r2;
        java.lang.Object $r1;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math3.dfp.Dfp) $r1;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(org.apache.commons.math3.dfp.Dfp)>($r2);

        return r0;
    }
    public org.apache.commons.math3.dfp.Dfp divide(double)
    {
        org.apache.commons.math3.dfp.Dfp r0, $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(double)>($d0);

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(org.apache.commons.math3.dfp.Dfp)>($r1);

        return r0;
    }
    public org.apache.commons.math3.dfp.Dfp divide(int)
    {
        org.apache.commons.math3.dfp.Dfp r0, $r2, $r3;
        int $i0, i2, $i3, $i4, $i5;
        byte $b1;
        boolean $z0;
        org.apache.commons.math3.dfp.DfpField $r1;
        int[] $r4, $r5;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $i0 := @parameter0: int;

        $b1 = r0.<org.apache.commons.math3.dfp.Dfp: byte nans>;

        if $b1 == 0 goto label2;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: boolean isNaN()>();

        if $z0 == 0 goto label1;

        return r0;

     label1:
        $b1 = r0.<org.apache.commons.math3.dfp.Dfp: byte nans>;

        if $b1 != 1 goto label2;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>(r0);

        return r0;

     label2:
        if $i0 != 0 goto label3;

        $r1 = r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField field>;

        virtualinvoke $r1.<org.apache.commons.math3.dfp.DfpField: void setIEEEFlagsBits(int)>(2);

        $r2 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getZero()>();

        $r2 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r2);

        $b1 = r0.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        $r2.<org.apache.commons.math3.dfp.Dfp: byte sign> = $b1;

        $r2.<org.apache.commons.math3.dfp.Dfp: byte nans> = 1;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getZero()>();

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)>(2, "divide", $r3, $r2);

        return r0;

     label3:
        if $i0 < 0 goto label4;

        if $i0 < 10000 goto label5;

     label4:
        $r1 = r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField field>;

        virtualinvoke $r1.<org.apache.commons.math3.dfp.DfpField: void setIEEEFlagsBits(int)>(1);

        $r2 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getZero()>();

        $r2 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r2);

        $r2.<org.apache.commons.math3.dfp.Dfp: byte nans> = 3;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)>(1, "divide", $r2, $r2);

        return r0;

     label5:
        $r2 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>(r0);

        i2 = 0;

        $r4 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i3 = lengthof $r4;

        $i3 = $i3 + -1;

     label6:
        if $i3 < 0 goto label7;

        i2 = i2 * 10000;

        $r4 = $r2.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i4 = $r4[$i3];

        i2 = i2 + $i4;

        $i4 = i2 / $i0;

        $i5 = $i4 * $i0;

        i2 = i2 - $i5;

        $r4 = $r2.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $r4[$i3] = $i4;

        $i3 = $i3 + -1;

        goto label6;

     label7:
        $r4 = $r2.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $r5 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i3 = lengthof $r5;

        $i3 = $i3 + -1;

        $i3 = $r4[$i3];

        if $i3 != 0 goto label8;

        virtualinvoke $r2.<org.apache.commons.math3.dfp.Dfp: void shiftLeft()>();

        i2 = i2 * 10000;

        $i3 = i2 / $i0;

        $i4 = $i3 * $i0;

        i2 = i2 - $i4;

        $r4 = $r2.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $r4[0] = $i3;

     label8:
        i2 = i2 * 10000;

        $i0 = i2 / $i0;

        $i0 = virtualinvoke $r2.<org.apache.commons.math3.dfp.Dfp: int round(int)>($i0);

        if $i0 == 0 goto label9;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)>($i0, "divide", $r2, $r2);

        return r0;

     label9:
        return $r2;
    }
    public org.apache.commons.math3.dfp.Dfp divide(org.apache.commons.math3.dfp.Dfp)
    {
        org.apache.commons.math3.dfp.Dfp $r0, r2, $r4, r5;
        int i0, i1, $i2, $i3, $i6, $i7, i8, $i9, $i10;
        int[] r1, $r6, $r7, $r8, $r9;
        org.apache.commons.math3.dfp.DfpField $r3;
        byte $b4, $b5;
        boolean $z0;
        org.apache.commons.math3.dfp.DfpField$RoundingMode $r10, $r11;

        r2 := @this: org.apache.commons.math3.dfp.Dfp;

        $r0 := @parameter0: org.apache.commons.math3.dfp.Dfp;

        i1 = 0;

        $r3 = r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField field>;

        $i2 = virtualinvoke $r3.<org.apache.commons.math3.dfp.DfpField: int getRadixDigits()>();

        $r3 = $r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField field>;

        $i3 = virtualinvoke $r3.<org.apache.commons.math3.dfp.DfpField: int getRadixDigits()>();

        if $i2 == $i3 goto label01;

        $r3 = r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField field>;

        virtualinvoke $r3.<org.apache.commons.math3.dfp.DfpField: void setIEEEFlagsBits(int)>(1);

        $r4 = virtualinvoke r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getZero()>();

        $r4 = virtualinvoke r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r4);

        $r4.<org.apache.commons.math3.dfp.Dfp: byte nans> = 3;

        r2 = virtualinvoke r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)>(1, "divide", $r0, $r4);

        return r2;

     label01:
        $r4 = virtualinvoke r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getZero()>();

        $r4 = virtualinvoke r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r4);

        r5 = $r4;

        $b4 = r2.<org.apache.commons.math3.dfp.Dfp: byte nans>;

        if $b4 != 0 goto label02;

        $b4 = $r0.<org.apache.commons.math3.dfp.Dfp: byte nans>;

        if $b4 == 0 goto label06;

     label02:
        $z0 = virtualinvoke r2.<org.apache.commons.math3.dfp.Dfp: boolean isNaN()>();

        if $z0 != 0 goto label43;

        $z0 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: boolean isNaN()>();

        if $z0 == 0 goto label03;

        return $r0;

     label03:
        $b4 = r2.<org.apache.commons.math3.dfp.Dfp: byte nans>;

        if $b4 != 1 goto label04;

        $b4 = $r0.<org.apache.commons.math3.dfp.Dfp: byte nans>;

        if $b4 != 0 goto label04;

        $r4 = virtualinvoke r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>(r2);

        $b4 = r2.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        $b5 = $r0.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        i1 = $b4 * $b5;

        $b4 = (byte) i1;

        $r4.<org.apache.commons.math3.dfp.Dfp: byte sign> = $b4;

        return $r4;

     label04:
        $b4 = $r0.<org.apache.commons.math3.dfp.Dfp: byte nans>;

        if $b4 != 1 goto label05;

        $b4 = r2.<org.apache.commons.math3.dfp.Dfp: byte nans>;

        if $b4 != 0 goto label05;

        $r4 = virtualinvoke r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getZero()>();

        $r4 = virtualinvoke r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r4);

        $b4 = r2.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        $b5 = $r0.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        i1 = $b4 * $b5;

        $b4 = (byte) i1;

        $r4.<org.apache.commons.math3.dfp.Dfp: byte sign> = $b4;

        return $r4;

     label05:
        $b4 = $r0.<org.apache.commons.math3.dfp.Dfp: byte nans>;

        if $b4 != 1 goto label06;

        $b4 = r2.<org.apache.commons.math3.dfp.Dfp: byte nans>;

        if $b4 != 1 goto label06;

        $r3 = r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField field>;

        virtualinvoke $r3.<org.apache.commons.math3.dfp.DfpField: void setIEEEFlagsBits(int)>(1);

        $r4 = virtualinvoke r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getZero()>();

        $r4 = virtualinvoke r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r4);

        $r4.<org.apache.commons.math3.dfp.Dfp: byte nans> = 3;

        r2 = virtualinvoke r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)>(1, "divide", $r0, $r4);

        return r2;

     label06:
        $r6 = $r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        r1 = r2.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i2 = lengthof r1;

        $i2 = $i2 + -1;

        $i2 = $r6[$i2];

        if $i2 != 0 goto label07;

        $r3 = r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField field>;

        virtualinvoke $r3.<org.apache.commons.math3.dfp.DfpField: void setIEEEFlagsBits(int)>(2);

        $r4 = virtualinvoke r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getZero()>();

        $r4 = virtualinvoke r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r4);

        $b4 = r2.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        $b5 = $r0.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        i1 = $b4 * $b5;

        $b4 = (byte) i1;

        $r4.<org.apache.commons.math3.dfp.Dfp: byte sign> = $b4;

        $r4.<org.apache.commons.math3.dfp.Dfp: byte nans> = 1;

        r2 = virtualinvoke r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)>(2, "divide", $r0, $r4);

        return r2;

     label07:
        $r6 = r2.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i2 = lengthof $r6;

        $i2 = $i2 + 1;

        r1 = newarray (int)[$i2];

        $r6 = r2.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i2 = lengthof $r6;

        $i2 = $i2 + 2;

        $r6 = newarray (int)[$i2];

        $r7 = r2.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i2 = lengthof $r7;

        $i2 = $i2 + 1;

        $r7 = newarray (int)[$i2];

        $r8 = r2.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i2 = lengthof $r8;

        r1[$i2] = 0;

        $r8 = r2.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i2 = lengthof $r8;

        $r6[$i2] = 0;

        $r8 = r2.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i2 = lengthof $r8;

        $i2 = $i2 + 1;

        $r6[$i2] = 0;

        $r8 = r2.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i2 = lengthof $r8;

        $r7[$i2] = 0;

        $i2 = 0;

     label08:
        $r8 = r2.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i3 = lengthof $r8;

        if $i2 >= $i3 goto label09;

        $r8 = r2.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i3 = $r8[$i2];

        r1[$i2] = $i3;

        $r6[$i2] = 0;

        $r7[$i2] = 0;

        $i2 = $i2 + 1;

        goto label08;

     label09:
        $i2 = 0;

        $r8 = r2.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i3 = lengthof $r8;

        $i3 = $i3 + 1;

     label10:
        if $i3 < 0 goto label28;

        $r8 = r2.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i6 = lengthof $r8;

        $i6 = r1[$i6];

        $i6 = $i6 * 10000;

        $r8 = r2.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        i0 = lengthof $r8;

        i0 = i0 + -1;

        i0 = r1[i0];

        i0 = $i6 + i0;

        $r8 = $r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $r9 = r2.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i6 = lengthof $r9;

        $i6 = $i6 + -1;

        $i6 = $r8[$i6];

        $i6 = $i6 + 1;

        $i6 = i0 / $i6;

        i0 = i0 + 1;

        $r8 = $r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $r9 = r2.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i7 = lengthof $r9;

        $i7 = $i7 + -1;

        $i7 = $r8[$i7];

        i0 = i0 / $i7;

        $z0 = 0;

     label11:
        if $z0 != 0 goto label25;

        i1 = $i6 + i0;

        i1 = i1 / 2;

        $i7 = 0;

        i8 = 0;

     label12:
        $r8 = r2.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i9 = lengthof $r8;

        $i9 = $i9 + 1;

        if i8 >= $i9 goto label15;

        $r8 = r2.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i9 = lengthof $r8;

        if i8 >= $i9 goto label14;

        $r8 = $r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i9 = $r8[i8];

     label13:
        $i9 = $i9 * i1;

        $i9 = $i9 + $i7;

        $i10 = $i9 / 10000;

        $i7 = $i10;

        $i10 = $i10 * 10000;

        $i9 = $i9 - $i10;

        $r7[i8] = $i9;

        i8 = i8 + 1;

        goto label12;

     label14:
        $i9 = 0;

        goto label13;

     label15:
        $i7 = 1;

        i8 = 0;

     label16:
        $r8 = r2.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i9 = lengthof $r8;

        $i9 = $i9 + 1;

        if i8 >= $i9 goto label17;

        $i9 = $r7[i8];

        $i9 = 9999 - $i9;

        $i10 = r1[i8];

        $i9 = $i9 + $i10;

        $i9 = $i9 + $i7;

        $i10 = $i9 / 10000;

        $i7 = $i10;

        $i10 = $i10 * 10000;

        $i9 = $i9 - $i10;

        $r7[i8] = $i9;

        i8 = i8 + 1;

        goto label16;

     label17:
        if $i7 != 0 goto label18;

        i0 = i1 + -1;

        goto label11;

     label18:
        $r8 = r2.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i7 = lengthof $r8;

        $i7 = $r7[$i7];

        $i7 = $i7 * 10000;

        $r8 = r2.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        i8 = lengthof $r8;

        i8 = i8 + -1;

        i8 = $r7[i8];

        $i7 = $i7 + i8;

        $r8 = $r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $r9 = r2.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        i8 = lengthof $r9;

        i8 = i8 + -1;

        i8 = $r8[i8];

        i8 = i8 + 1;

        $i7 = $i7 / i8;

        if $i7 < 2 goto label19;

        $i6 = i1 + $i7;

        goto label11;

     label19:
        $z0 = 0;

        $r8 = r2.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i7 = lengthof $r8;

        $i7 = $i7 + -1;

     label20:
        if $i7 < 0 goto label22;

        $r8 = $r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        i8 = $r8[$i7];

        $i9 = $r7[$i7];

        if i8 <= $i9 goto label21;

        $z0 = 1;

     label21:
        $r8 = $r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        i8 = $r8[$i7];

        $i9 = $r7[$i7];

        if i8 >= $i9 goto label24;

     label22:
        $r8 = r2.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i7 = lengthof $r8;

        $i7 = $r7[$i7];

        if $i7 == 0 goto label23;

        $z0 = 0;

     label23:
        if $z0 != 0 goto label11;

        $i6 = i1 + 1;

        goto label11;

     label24:
        $i7 = $i7 + -1;

        goto label20;

     label25:
        $r6[$i3] = i1;

        if i1 != 0 goto label26;

        if $i2 == 0 goto label27;

     label26:
        $i2 = $i2 + 1;

     label27:
        $r3 = r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField field>;

        $r10 = virtualinvoke $r3.<org.apache.commons.math3.dfp.DfpField: org.apache.commons.math3.dfp.DfpField$RoundingMode getRoundingMode()>();

        $r11 = <org.apache.commons.math3.dfp.DfpField$RoundingMode: org.apache.commons.math3.dfp.DfpField$RoundingMode ROUND_DOWN>;

        if $r10 != $r11 goto label32;

        $r8 = r2.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i6 = lengthof $r8;

        if $i2 != $i6 goto label32;

     label28:
        r1 = r2.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        i1 = lengthof r1;

        r1 = r2.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i2 = lengthof r1;

        $i2 = $i2 + 1;

     label29:
        if $i2 < 0 goto label30;

        $i3 = $r6[$i2];

        if $i3 == 0 goto label35;

        i1 = $i2;

     label30:
        $i2 = 0;

     label31:
        r1 = r2.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i3 = lengthof r1;

        if $i2 >= $i3 goto label36;

        r1 = $r4.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $r7 = r2.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i3 = lengthof $r7;

        $i3 = $i3 - $i2;

        $i3 = $i3 + -1;

        $i6 = i1 - $i2;

        $i6 = $r6[$i6];

        r1[$i3] = $i6;

        $i2 = $i2 + 1;

        goto label31;

     label32:
        $r8 = r2.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i6 = lengthof $r8;

        if $i2 > $i6 goto label28;

        r1[0] = 0;

        $i6 = 0;

     label33:
        $r8 = r2.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        i0 = lengthof $r8;

        if $i6 >= i0 goto label34;

        i0 = $i6 + 1;

        $i7 = $r7[$i6];

        r1[i0] = $i7;

        $i6 = $i6 + 1;

        goto label33;

     label34:
        $i3 = $i3 + -1;

        goto label10;

     label35:
        $i2 = $i2 + -1;

        goto label29;

     label36:
        $i2 = r2.<org.apache.commons.math3.dfp.Dfp: int exp>;

        $i3 = $r0.<org.apache.commons.math3.dfp.Dfp: int exp>;

        $i2 = $i2 - $i3;

        $i2 = $i2 + i1;

        r1 = r2.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i3 = lengthof r1;

        $i2 = $i2 - $i3;

        $r4.<org.apache.commons.math3.dfp.Dfp: int exp> = $i2;

        $b4 = r2.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        $b5 = $r0.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        if $b4 != $b5 goto label41;

        $b4 = 1;

     label37:
        $r4.<org.apache.commons.math3.dfp.Dfp: byte sign> = $b4;

        r1 = $r4.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $r7 = r2.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i2 = lengthof $r7;

        $i2 = $i2 + -1;

        $i2 = r1[$i2];

        if $i2 != 0 goto label38;

        $r4.<org.apache.commons.math3.dfp.Dfp: int exp> = 0;

     label38:
        r1 = r2.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i2 = lengthof r1;

        $i2 = $i2 + -1;

        if i1 <= $i2 goto label42;

        r1 = r2.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i2 = lengthof r1;

        i1 = i1 - $i2;

        i1 = $r6[i1];

        i1 = virtualinvoke $r4.<org.apache.commons.math3.dfp.Dfp: int round(int)>(i1);

     label39:
        if i1 == 0 goto label40;

        r5 = virtualinvoke r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)>(i1, "divide", $r0, $r4);

     label40:
        return r5;

     label41:
        $b4 = -1;

        goto label37;

     label42:
        i1 = virtualinvoke $r4.<org.apache.commons.math3.dfp.Dfp: int round(int)>(0);

        goto label39;

     label43:
        return r2;
    }
    public org.apache.commons.math3.dfp.Dfp dotrap(int, java.lang.String, org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp)
    {
        org.apache.commons.math3.dfp.Dfp r0, $r2, $r3, r4, $r5;
        int $i0, $i2, $i4;
        java.lang.String $r1;
        byte $b1, $b3;
        int[] $r6, $r7;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: org.apache.commons.math3.dfp.Dfp;

        $r3 := @parameter3: org.apache.commons.math3.dfp.Dfp;

        r4 = $r3;

        lookupswitch($i0)
        {
            case 1: goto label03;
            case 2: goto label04;
            case 3: goto label01;
            case 4: goto label13;
            case 5: goto label01;
            case 6: goto label01;
            case 7: goto label01;
            case 8: goto label10;
            default: goto label01;
        };

     label01:
        r4 = $r3;

     label02:
        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp trap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)>($i0, $r1, $r2, r4, $r3);

        return r0;

     label03:
        r4 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getZero()>();

        $r5 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>(r4);

        r4 = $r5;

        $b1 = $r3.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        $r5.<org.apache.commons.math3.dfp.Dfp: byte sign> = $b1;

        $r5.<org.apache.commons.math3.dfp.Dfp: byte nans> = 3;

        goto label02;

     label04:
        $b1 = r0.<org.apache.commons.math3.dfp.Dfp: byte nans>;

        if $b1 != 0 goto label05;

        $r6 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $r7 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i2 = lengthof $r7;

        $i2 = $i2 + -1;

        $i2 = $r6[$i2];

        if $i2 == 0 goto label05;

        r4 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getZero()>();

        $r5 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>(r4);

        r4 = $r5;

        $b1 = r0.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        $b3 = $r2.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        $i2 = $b1 * $b3;

        $b1 = (byte) $i2;

        $r5.<org.apache.commons.math3.dfp.Dfp: byte sign> = $b1;

        $r5.<org.apache.commons.math3.dfp.Dfp: byte nans> = 1;

     label05:
        $b1 = r0.<org.apache.commons.math3.dfp.Dfp: byte nans>;

        if $b1 != 0 goto label06;

        $r6 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $r7 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i2 = lengthof $r7;

        $i2 = $i2 + -1;

        $i2 = $r6[$i2];

        if $i2 != 0 goto label06;

        r4 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getZero()>();

        $r5 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>(r4);

        r4 = $r5;

        $r5.<org.apache.commons.math3.dfp.Dfp: byte nans> = 3;

     label06:
        $b1 = r0.<org.apache.commons.math3.dfp.Dfp: byte nans>;

        if $b1 == 1 goto label07;

        $b1 = r0.<org.apache.commons.math3.dfp.Dfp: byte nans>;

        if $b1 != 3 goto label08;

     label07:
        r4 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getZero()>();

        $r5 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>(r4);

        r4 = $r5;

        $r5.<org.apache.commons.math3.dfp.Dfp: byte nans> = 3;

     label08:
        $b1 = r0.<org.apache.commons.math3.dfp.Dfp: byte nans>;

        if $b1 == 1 goto label09;

        $b1 = r0.<org.apache.commons.math3.dfp.Dfp: byte nans>;

        if $b1 != 2 goto label02;

     label09:
        r4 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getZero()>();

        $r5 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>(r4);

        r4 = $r5;

        $r5.<org.apache.commons.math3.dfp.Dfp: byte nans> = 3;

        goto label02;

     label10:
        $i2 = $r3.<org.apache.commons.math3.dfp.Dfp: int exp>;

        $r6 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i4 = lengthof $r6;

        $i2 = $i2 + $i4;

        if $i2 >= -32767 goto label12;

        r4 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getZero()>();

        $r5 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>(r4);

        r4 = $r5;

        $b1 = $r3.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        $r5.<org.apache.commons.math3.dfp.Dfp: byte sign> = $b1;

     label11:
        $i2 = $r3.<org.apache.commons.math3.dfp.Dfp: int exp>;

        $i2 = $i2 + 32760;

        $r3.<org.apache.commons.math3.dfp.Dfp: int exp> = $i2;

        goto label02;

     label12:
        r4 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r3);

        goto label11;

     label13:
        $i2 = $r3.<org.apache.commons.math3.dfp.Dfp: int exp>;

        $i2 = $i2 + -32760;

        $r3.<org.apache.commons.math3.dfp.Dfp: int exp> = $i2;

        r4 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getZero()>();

        $r5 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>(r4);

        r4 = $r5;

        $b1 = $r3.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        $r5.<org.apache.commons.math3.dfp.Dfp: byte sign> = $b1;

        $r5.<org.apache.commons.math3.dfp.Dfp: byte nans> = 1;

        goto label02;
    }
    public boolean equals(java.lang.Object)
    {
        org.apache.commons.math3.dfp.Dfp r0, r2;
        java.lang.Object $r1;
        boolean $z0;
        org.apache.commons.math3.dfp.DfpField $r3;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof org.apache.commons.math3.dfp.Dfp;

        if $z0 == 0 goto label2;

        r2 = (org.apache.commons.math3.dfp.Dfp) $r1;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: boolean isNaN()>();

        if $z0 != 0 goto label2;

        $z0 = virtualinvoke r2.<org.apache.commons.math3.dfp.Dfp: boolean isNaN()>();

        if $z0 != 0 goto label2;

        $r3 = r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField field>;

        $i0 = virtualinvoke $r3.<org.apache.commons.math3.dfp.DfpField: int getRadixDigits()>();

        $r3 = r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField field>;

        $i1 = virtualinvoke $r3.<org.apache.commons.math3.dfp.DfpField: int getRadixDigits()>();

        if $i0 == $i1 goto label1;

        return 0;

     label1:
        $i0 = staticinvoke <org.apache.commons.math3.dfp.Dfp: int compare(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)>(r0, r2);

        if $i0 != 0 goto label2;

        return 1;

     label2:
        return 0;
    }
    public volatile java.lang.Object exp()
    {
        org.apache.commons.math3.dfp.Dfp r0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp exp()>();

        return r0;
    }
    public org.apache.commons.math3.dfp.Dfp exp()
    {
        org.apache.commons.math3.dfp.Dfp r0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        r0 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp exp(org.apache.commons.math3.dfp.Dfp)>(r0);

        return r0;
    }
    public volatile java.lang.Object expm1()
    {
        org.apache.commons.math3.dfp.Dfp r0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp expm1()>();

        return r0;
    }
    public org.apache.commons.math3.dfp.Dfp expm1()
    {
        org.apache.commons.math3.dfp.Dfp r0, $r1;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $r1 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp exp(org.apache.commons.math3.dfp.Dfp)>(r0);

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getOne()>();

        r0 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp subtract(org.apache.commons.math3.dfp.Dfp)>(r0);

        return r0;
    }
    public volatile java.lang.Object floor()
    {
        org.apache.commons.math3.dfp.Dfp r0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp floor()>();

        return r0;
    }
    public org.apache.commons.math3.dfp.Dfp floor()
    {
        org.apache.commons.math3.dfp.Dfp r0;
        org.apache.commons.math3.dfp.DfpField$RoundingMode $r1;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $r1 = <org.apache.commons.math3.dfp.DfpField$RoundingMode: org.apache.commons.math3.dfp.DfpField$RoundingMode ROUND_FLOOR>;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp trunc(org.apache.commons.math3.dfp.DfpField$RoundingMode)>($r1);

        return r0;
    }
    public volatile org.apache.commons.math3.Field getField()
    {
        org.apache.commons.math3.dfp.Dfp r0;
        org.apache.commons.math3.dfp.DfpField $r1;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField getField()>();

        return $r1;
    }
    public org.apache.commons.math3.dfp.DfpField getField()
    {
        org.apache.commons.math3.dfp.Dfp r0;
        org.apache.commons.math3.dfp.DfpField r1;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        r1 = r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField field>;

        return r1;
    }
    public org.apache.commons.math3.dfp.Dfp getOne()
    {
        org.apache.commons.math3.dfp.Dfp r0;
        org.apache.commons.math3.dfp.DfpField $r1;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $r1 = r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField field>;

        r0 = virtualinvoke $r1.<org.apache.commons.math3.dfp.DfpField: org.apache.commons.math3.dfp.Dfp getOne()>();

        return r0;
    }
    public int getRadixDigits()
    {
        org.apache.commons.math3.dfp.Dfp r0;
        int $i0;
        org.apache.commons.math3.dfp.DfpField $r1;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $r1 = r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField field>;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.dfp.DfpField: int getRadixDigits()>();

        return $i0;
    }
    public double getReal()
    {
        org.apache.commons.math3.dfp.Dfp r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: double toDouble()>();

        return $d0;
    }
    public org.apache.commons.math3.dfp.Dfp getTwo()
    {
        org.apache.commons.math3.dfp.Dfp r0;
        org.apache.commons.math3.dfp.DfpField $r1;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $r1 = r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField field>;

        r0 = virtualinvoke $r1.<org.apache.commons.math3.dfp.DfpField: org.apache.commons.math3.dfp.Dfp getTwo()>();

        return r0;
    }
    public org.apache.commons.math3.dfp.Dfp getZero()
    {
        org.apache.commons.math3.dfp.Dfp r0;
        org.apache.commons.math3.dfp.DfpField $r1;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $r1 = r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField field>;

        r0 = virtualinvoke $r1.<org.apache.commons.math3.dfp.DfpField: org.apache.commons.math3.dfp.Dfp getZero()>();

        return r0;
    }
    public boolean greaterThan(org.apache.commons.math3.dfp.Dfp)
    {
        org.apache.commons.math3.dfp.Dfp r0, $r1, $r3;
        boolean $z0, $z1;
        org.apache.commons.math3.dfp.DfpField $r2;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $r1 := @parameter0: org.apache.commons.math3.dfp.Dfp;

        $z0 = 1;

        $r2 = r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField field>;

        $i0 = virtualinvoke $r2.<org.apache.commons.math3.dfp.DfpField: int getRadixDigits()>();

        $r2 = $r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField field>;

        $i1 = virtualinvoke $r2.<org.apache.commons.math3.dfp.DfpField: int getRadixDigits()>();

        if $i0 == $i1 goto label1;

        $r2 = r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField field>;

        virtualinvoke $r2.<org.apache.commons.math3.dfp.DfpField: void setIEEEFlagsBits(int)>(1);

        $r3 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getZero()>();

        $r3 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r3);

        $r3.<org.apache.commons.math3.dfp.Dfp: byte nans> = 3;

        virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)>(1, "greaterThan", $r1, $r3);

        return 0;

     label1:
        $z1 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: boolean isNaN()>();

        if $z1 != 0 goto label2;

        $z1 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: boolean isNaN()>();

        if $z1 == 0 goto label3;

     label2:
        $r2 = r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField field>;

        virtualinvoke $r2.<org.apache.commons.math3.dfp.DfpField: void setIEEEFlagsBits(int)>(1);

        $r3 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getZero()>();

        $r3 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r3);

        virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)>(1, "greaterThan", $r1, $r3);

        return 0;

     label3:
        $i0 = staticinvoke <org.apache.commons.math3.dfp.Dfp: int compare(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)>(r0, $r1);

        if $i0 <= 0 goto label5;

     label4:
        return $z0;

     label5:
        $z0 = 0;

        goto label4;
    }
    public int hashCode()
    {
        org.apache.commons.math3.dfp.Dfp r0;
        boolean $z0;
        int $i0, $i2;
        byte $b1;
        int[] $r1;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: boolean isZero()>();

        if $z0 == 0 goto label2;

        $i0 = 0;

     label1:
        $i0 = $i0 + 17;

        $b1 = r0.<org.apache.commons.math3.dfp.Dfp: byte nans>;

        $i2 = $b1 << 16;

        $i0 = $i0 + $i2;

        $i2 = r0.<org.apache.commons.math3.dfp.Dfp: int exp>;

        $i0 = $i0 + $i2;

        $r1 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i2 = staticinvoke <java.util.Arrays: int hashCode(int[])>($r1);

        $i0 = $i0 + $i2;

        return $i0;

     label2:
        $b1 = r0.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        $i0 = $b1 << 8;

        goto label1;
    }
    public volatile java.lang.Object hypot(java.lang.Object) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.dfp.Dfp r0, $r2;
        java.lang.Object $r1;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math3.dfp.Dfp) $r1;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp hypot(org.apache.commons.math3.dfp.Dfp)>($r2);

        return r0;
    }
    public org.apache.commons.math3.dfp.Dfp hypot(org.apache.commons.math3.dfp.Dfp)
    {
        org.apache.commons.math3.dfp.Dfp r0, $r1;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $r1 := @parameter0: org.apache.commons.math3.dfp.Dfp;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>(r0);

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>($r1);

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r1);

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp sqrt()>();

        return r0;
    }
    public int intLog10()
    {
        org.apache.commons.math3.dfp.Dfp r0;
        int[] $r1, $r2;
        int $i0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $r1 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $r2 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i0 = lengthof $r2;

        $i0 = $i0 + -1;

        $i0 = $r1[$i0];

        if $i0 <= 1000 goto label1;

        $i0 = r0.<org.apache.commons.math3.dfp.Dfp: int exp>;

        $i0 = $i0 * 4;

        $i0 = $i0 + -1;

        return $i0;

     label1:
        $r1 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $r2 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i0 = lengthof $r2;

        $i0 = $i0 + -1;

        $i0 = $r1[$i0];

        if $i0 <= 100 goto label2;

        $i0 = r0.<org.apache.commons.math3.dfp.Dfp: int exp>;

        $i0 = $i0 * 4;

        $i0 = $i0 + -2;

        return $i0;

     label2:
        $r1 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $r2 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i0 = lengthof $r2;

        $i0 = $i0 + -1;

        $i0 = $r1[$i0];

        if $i0 <= 10 goto label3;

        $i0 = r0.<org.apache.commons.math3.dfp.Dfp: int exp>;

        $i0 = $i0 * 4;

        $i0 = $i0 + -3;

        return $i0;

     label3:
        $i0 = r0.<org.apache.commons.math3.dfp.Dfp: int exp>;

        $i0 = $i0 * 4;

        $i0 = $i0 + -4;

        return $i0;
    }
    public int intValue()
    {
        org.apache.commons.math3.dfp.Dfp r0, $r1, $r2;
        int i0, $i1, $i2, $i3;
        boolean $z0;
        int[] $r3;
        byte $b4;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        i0 = 0;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp rint()>();

        $r2 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(int)>(2147483647);

        $z0 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: boolean greaterThan(org.apache.commons.math3.dfp.Dfp)>($r2);

        if $z0 == 0 goto label1;

        return 2147483647;

     label1:
        $r2 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(int)>(-2147483648);

        $z0 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: boolean lessThan(org.apache.commons.math3.dfp.Dfp)>($r2);

        if $z0 == 0 goto label2;

        return -2147483648;

     label2:
        $r3 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i1 = lengthof $r3;

        $i1 = $i1 + -1;

     label3:
        $r3 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i2 = lengthof $r3;

        $i3 = $r1.<org.apache.commons.math3.dfp.Dfp: int exp>;

        $i2 = $i2 - $i3;

        if $i1 < $i2 goto label4;

        i0 = i0 * 10000;

        $r3 = $r1.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i2 = $r3[$i1];

        i0 = i0 + $i2;

        $i1 = $i1 + -1;

        goto label3;

     label4:
        $b4 = $r1.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        if $b4 != -1 goto label5;

        i0 = neg i0;

     label5:
        return i0;
    }
    public boolean isInfinite()
    {
        org.apache.commons.math3.dfp.Dfp r0;
        byte $b0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $b0 = r0.<org.apache.commons.math3.dfp.Dfp: byte nans>;

        if $b0 != 1 goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean isNaN()
    {
        org.apache.commons.math3.dfp.Dfp r0;
        byte $b0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $b0 = r0.<org.apache.commons.math3.dfp.Dfp: byte nans>;

        if $b0 == 3 goto label1;

        $b0 = r0.<org.apache.commons.math3.dfp.Dfp: byte nans>;

        if $b0 != 2 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    public boolean isZero()
    {
        org.apache.commons.math3.dfp.Dfp r0, $r2;
        boolean $z0, $z1;
        org.apache.commons.math3.dfp.DfpField $r1;
        int[] $r3, $r4;
        int $i0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $z0 = 1;

        $z1 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: boolean isNaN()>();

        if $z1 == 0 goto label1;

        $r1 = r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField field>;

        virtualinvoke $r1.<org.apache.commons.math3.dfp.DfpField: void setIEEEFlagsBits(int)>(1);

        $r2 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getZero()>();

        $r2 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r2);

        virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)>(1, "lessThan", r0, $r2);

        return 0;

     label1:
        $r3 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $r4 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i0 = lengthof $r4;

        $i0 = $i0 + -1;

        $i0 = $r3[$i0];

        if $i0 != 0 goto label3;

        $z1 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: boolean isInfinite()>();

        if $z1 != 0 goto label3;

     label2:
        return $z0;

     label3:
        $z0 = 0;

        goto label2;
    }
    public boolean lessThan(org.apache.commons.math3.dfp.Dfp)
    {
        org.apache.commons.math3.dfp.Dfp r0, $r1, $r3;
        boolean $z0, $z1;
        org.apache.commons.math3.dfp.DfpField $r2;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $r1 := @parameter0: org.apache.commons.math3.dfp.Dfp;

        $z0 = 1;

        $r2 = r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField field>;

        $i0 = virtualinvoke $r2.<org.apache.commons.math3.dfp.DfpField: int getRadixDigits()>();

        $r2 = $r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField field>;

        $i1 = virtualinvoke $r2.<org.apache.commons.math3.dfp.DfpField: int getRadixDigits()>();

        if $i0 == $i1 goto label1;

        $r2 = r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField field>;

        virtualinvoke $r2.<org.apache.commons.math3.dfp.DfpField: void setIEEEFlagsBits(int)>(1);

        $r3 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getZero()>();

        $r3 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r3);

        $r3.<org.apache.commons.math3.dfp.Dfp: byte nans> = 3;

        virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)>(1, "lessThan", $r1, $r3);

        return 0;

     label1:
        $z1 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: boolean isNaN()>();

        if $z1 != 0 goto label2;

        $z1 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: boolean isNaN()>();

        if $z1 == 0 goto label3;

     label2:
        $r2 = r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField field>;

        virtualinvoke $r2.<org.apache.commons.math3.dfp.DfpField: void setIEEEFlagsBits(int)>(1);

        $r3 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getZero()>();

        $r3 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r3);

        virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)>(1, "lessThan", $r1, $r3);

        return 0;

     label3:
        $i0 = staticinvoke <org.apache.commons.math3.dfp.Dfp: int compare(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)>(r0, $r1);

        if $i0 >= 0 goto label5;

     label4:
        return $z0;

     label5:
        $z0 = 0;

        goto label4;
    }
    public volatile java.lang.Object linearCombination(double, java.lang.Object, double, java.lang.Object)
    {
        org.apache.commons.math3.dfp.Dfp r0, $r3, $r4;
        double $d0, $d1;
        java.lang.Object $r1, $r2;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $d0 := @parameter0: double;

        $r1 := @parameter1: java.lang.Object;

        $d1 := @parameter2: double;

        $r2 := @parameter3: java.lang.Object;

        $r3 = (org.apache.commons.math3.dfp.Dfp) $r1;

        $r4 = (org.apache.commons.math3.dfp.Dfp) $r2;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp linearCombination(double,org.apache.commons.math3.dfp.Dfp,double,org.apache.commons.math3.dfp.Dfp)>($d0, $r3, $d1, $r4);

        return r0;
    }
    public volatile java.lang.Object linearCombination(double, java.lang.Object, double, java.lang.Object, double, java.lang.Object)
    {
        org.apache.commons.math3.dfp.Dfp r0, $r4, $r5, $r6;
        double $d0, $d1, $d2;
        java.lang.Object $r1, $r2, $r3;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $d0 := @parameter0: double;

        $r1 := @parameter1: java.lang.Object;

        $d1 := @parameter2: double;

        $r2 := @parameter3: java.lang.Object;

        $d2 := @parameter4: double;

        $r3 := @parameter5: java.lang.Object;

        $r4 = (org.apache.commons.math3.dfp.Dfp) $r1;

        $r5 = (org.apache.commons.math3.dfp.Dfp) $r2;

        $r6 = (org.apache.commons.math3.dfp.Dfp) $r3;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp linearCombination(double,org.apache.commons.math3.dfp.Dfp,double,org.apache.commons.math3.dfp.Dfp,double,org.apache.commons.math3.dfp.Dfp)>($d0, $r4, $d1, $r5, $d2, $r6);

        return r0;
    }
    public volatile java.lang.Object linearCombination(double, java.lang.Object, double, java.lang.Object, double, java.lang.Object, double, java.lang.Object)
    {
        org.apache.commons.math3.dfp.Dfp r0, $r5, $r6, $r7, $r8;
        double $d0, $d1, $d2, $d3;
        java.lang.Object $r1, $r2, $r3, $r4;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $d0 := @parameter0: double;

        $r1 := @parameter1: java.lang.Object;

        $d1 := @parameter2: double;

        $r2 := @parameter3: java.lang.Object;

        $d2 := @parameter4: double;

        $r3 := @parameter5: java.lang.Object;

        $d3 := @parameter6: double;

        $r4 := @parameter7: java.lang.Object;

        $r5 = (org.apache.commons.math3.dfp.Dfp) $r1;

        $r6 = (org.apache.commons.math3.dfp.Dfp) $r2;

        $r7 = (org.apache.commons.math3.dfp.Dfp) $r3;

        $r8 = (org.apache.commons.math3.dfp.Dfp) $r4;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp linearCombination(double,org.apache.commons.math3.dfp.Dfp,double,org.apache.commons.math3.dfp.Dfp,double,org.apache.commons.math3.dfp.Dfp,double,org.apache.commons.math3.dfp.Dfp)>($d0, $r5, $d1, $r6, $d2, $r7, $d3, $r8);

        return r0;
    }
    public volatile java.lang.Object linearCombination(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.apache.commons.math3.dfp.Dfp r0, $r5, $r6, $r7, $r8;
        java.lang.Object $r1, $r2, $r3, $r4;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 := @parameter2: java.lang.Object;

        $r4 := @parameter3: java.lang.Object;

        $r5 = (org.apache.commons.math3.dfp.Dfp) $r1;

        $r6 = (org.apache.commons.math3.dfp.Dfp) $r2;

        $r7 = (org.apache.commons.math3.dfp.Dfp) $r3;

        $r8 = (org.apache.commons.math3.dfp.Dfp) $r4;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp linearCombination(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)>($r5, $r6, $r7, $r8);

        return r0;
    }
    public volatile java.lang.Object linearCombination(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.apache.commons.math3.dfp.Dfp r0, $r7, $r8, $r9, $r10, $r11, $r12;
        java.lang.Object $r1, $r2, $r3, $r4, $r5, $r6;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 := @parameter2: java.lang.Object;

        $r4 := @parameter3: java.lang.Object;

        $r5 := @parameter4: java.lang.Object;

        $r6 := @parameter5: java.lang.Object;

        $r7 = (org.apache.commons.math3.dfp.Dfp) $r1;

        $r8 = (org.apache.commons.math3.dfp.Dfp) $r2;

        $r9 = (org.apache.commons.math3.dfp.Dfp) $r3;

        $r10 = (org.apache.commons.math3.dfp.Dfp) $r4;

        $r11 = (org.apache.commons.math3.dfp.Dfp) $r5;

        $r12 = (org.apache.commons.math3.dfp.Dfp) $r6;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp linearCombination(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)>($r7, $r8, $r9, $r10, $r11, $r12);

        return r0;
    }
    public volatile java.lang.Object linearCombination(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.apache.commons.math3.dfp.Dfp r0, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16;
        java.lang.Object $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 := @parameter2: java.lang.Object;

        $r4 := @parameter3: java.lang.Object;

        $r5 := @parameter4: java.lang.Object;

        $r6 := @parameter5: java.lang.Object;

        $r7 := @parameter6: java.lang.Object;

        $r8 := @parameter7: java.lang.Object;

        $r9 = (org.apache.commons.math3.dfp.Dfp) $r1;

        $r10 = (org.apache.commons.math3.dfp.Dfp) $r2;

        $r11 = (org.apache.commons.math3.dfp.Dfp) $r3;

        $r12 = (org.apache.commons.math3.dfp.Dfp) $r4;

        $r13 = (org.apache.commons.math3.dfp.Dfp) $r5;

        $r14 = (org.apache.commons.math3.dfp.Dfp) $r6;

        $r15 = (org.apache.commons.math3.dfp.Dfp) $r7;

        $r16 = (org.apache.commons.math3.dfp.Dfp) $r8;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp linearCombination(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)>($r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16);

        return r0;
    }
    public volatile java.lang.Object linearCombination(double[], java.lang.Object[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.dfp.Dfp r0;
        double[] $r1;
        java.lang.Object[] $r2;
        org.apache.commons.math3.dfp.Dfp[] $r3;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: java.lang.Object[];

        $r3 = (org.apache.commons.math3.dfp.Dfp[]) $r2;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp linearCombination(double[],org.apache.commons.math3.dfp.Dfp[])>($r1, $r3);

        return r0;
    }
    public volatile java.lang.Object linearCombination(java.lang.Object[], java.lang.Object[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.dfp.Dfp r0;
        java.lang.Object[] $r1, $r2;
        org.apache.commons.math3.dfp.Dfp[] $r3, $r4;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $r1 := @parameter0: java.lang.Object[];

        $r2 := @parameter1: java.lang.Object[];

        $r3 = (org.apache.commons.math3.dfp.Dfp[]) $r1;

        $r4 = (org.apache.commons.math3.dfp.Dfp[]) $r2;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp linearCombination(org.apache.commons.math3.dfp.Dfp[],org.apache.commons.math3.dfp.Dfp[])>($r3, $r4);

        return r0;
    }
    public org.apache.commons.math3.dfp.Dfp linearCombination(double, org.apache.commons.math3.dfp.Dfp, double, org.apache.commons.math3.dfp.Dfp)
    {
        org.apache.commons.math3.dfp.Dfp r0, $r1, $r2;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $d0 := @parameter0: double;

        $r1 := @parameter1: org.apache.commons.math3.dfp.Dfp;

        $d1 := @parameter2: double;

        $r2 := @parameter3: org.apache.commons.math3.dfp.Dfp;

        r0 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(double)>($d0);

        $r1 = virtualinvoke $r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(double)>($d1);

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r1);

        return r0;
    }
    public org.apache.commons.math3.dfp.Dfp linearCombination(double, org.apache.commons.math3.dfp.Dfp, double, org.apache.commons.math3.dfp.Dfp, double, org.apache.commons.math3.dfp.Dfp)
    {
        org.apache.commons.math3.dfp.Dfp r0, $r1, $r2, $r3;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $d0 := @parameter0: double;

        $r1 := @parameter1: org.apache.commons.math3.dfp.Dfp;

        $d1 := @parameter2: double;

        $r2 := @parameter3: org.apache.commons.math3.dfp.Dfp;

        $d2 := @parameter4: double;

        $r3 := @parameter5: org.apache.commons.math3.dfp.Dfp;

        r0 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(double)>($d0);

        $r1 = virtualinvoke $r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(double)>($d1);

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r1);

        $r1 = virtualinvoke $r3.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(double)>($d2);

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r1);

        return r0;
    }
    public org.apache.commons.math3.dfp.Dfp linearCombination(double, org.apache.commons.math3.dfp.Dfp, double, org.apache.commons.math3.dfp.Dfp, double, org.apache.commons.math3.dfp.Dfp, double, org.apache.commons.math3.dfp.Dfp)
    {
        org.apache.commons.math3.dfp.Dfp r0, $r1, $r2, $r3, $r4;
        double $d0, $d1, $d2, $d3;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $d0 := @parameter0: double;

        $r1 := @parameter1: org.apache.commons.math3.dfp.Dfp;

        $d1 := @parameter2: double;

        $r2 := @parameter3: org.apache.commons.math3.dfp.Dfp;

        $d2 := @parameter4: double;

        $r3 := @parameter5: org.apache.commons.math3.dfp.Dfp;

        $d3 := @parameter6: double;

        $r4 := @parameter7: org.apache.commons.math3.dfp.Dfp;

        r0 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(double)>($d0);

        $r1 = virtualinvoke $r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(double)>($d1);

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r1);

        $r1 = virtualinvoke $r3.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(double)>($d2);

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r1);

        $r1 = virtualinvoke $r4.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(double)>($d3);

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r1);

        return r0;
    }
    public org.apache.commons.math3.dfp.Dfp linearCombination(org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp)
    {
        org.apache.commons.math3.dfp.Dfp r0, $r1, $r2, $r3, $r4;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $r1 := @parameter0: org.apache.commons.math3.dfp.Dfp;

        $r2 := @parameter1: org.apache.commons.math3.dfp.Dfp;

        $r3 := @parameter2: org.apache.commons.math3.dfp.Dfp;

        $r4 := @parameter3: org.apache.commons.math3.dfp.Dfp;

        r0 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>($r2);

        $r1 = virtualinvoke $r3.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>($r4);

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r1);

        return r0;
    }
    public org.apache.commons.math3.dfp.Dfp linearCombination(org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp)
    {
        org.apache.commons.math3.dfp.Dfp r0, $r1, $r2, $r3, $r4, $r5, $r6;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $r1 := @parameter0: org.apache.commons.math3.dfp.Dfp;

        $r2 := @parameter1: org.apache.commons.math3.dfp.Dfp;

        $r3 := @parameter2: org.apache.commons.math3.dfp.Dfp;

        $r4 := @parameter3: org.apache.commons.math3.dfp.Dfp;

        $r5 := @parameter4: org.apache.commons.math3.dfp.Dfp;

        $r6 := @parameter5: org.apache.commons.math3.dfp.Dfp;

        r0 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>($r2);

        $r1 = virtualinvoke $r3.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>($r4);

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r1);

        $r1 = virtualinvoke $r5.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>($r6);

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r1);

        return r0;
    }
    public org.apache.commons.math3.dfp.Dfp linearCombination(org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp)
    {
        org.apache.commons.math3.dfp.Dfp r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $r1 := @parameter0: org.apache.commons.math3.dfp.Dfp;

        $r2 := @parameter1: org.apache.commons.math3.dfp.Dfp;

        $r3 := @parameter2: org.apache.commons.math3.dfp.Dfp;

        $r4 := @parameter3: org.apache.commons.math3.dfp.Dfp;

        $r5 := @parameter4: org.apache.commons.math3.dfp.Dfp;

        $r6 := @parameter5: org.apache.commons.math3.dfp.Dfp;

        $r7 := @parameter6: org.apache.commons.math3.dfp.Dfp;

        $r8 := @parameter7: org.apache.commons.math3.dfp.Dfp;

        r0 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>($r2);

        $r1 = virtualinvoke $r3.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>($r4);

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r1);

        $r1 = virtualinvoke $r5.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>($r6);

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r1);

        $r1 = virtualinvoke $r7.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>($r8);

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r1);

        return r0;
    }
    public org.apache.commons.math3.dfp.Dfp linearCombination(double[], org.apache.commons.math3.dfp.Dfp[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.dfp.Dfp r0, $r4;
        double[] $r1;
        org.apache.commons.math3.dfp.Dfp[] $r2;
        int $i0, $i1;
        org.apache.commons.math3.exception.DimensionMismatchException $r3;
        double $d0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: org.apache.commons.math3.dfp.Dfp[];

        $i0 = lengthof $r1;

        $i1 = lengthof $r2;

        if $i0 == $i1 goto label1;

        $r3 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i0 = lengthof $r1;

        $i1 = lengthof $r2;

        specialinvoke $r3.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i0, $i1);

        throw $r3;

     label1:
        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getZero()>();

        $i0 = 0;

     label2:
        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label3;

        $r4 = $r2[$i0];

        $d0 = $r1[$i0];

        $r4 = virtualinvoke $r4.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(double)>($d0);

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r4);

        $i0 = $i0 + 1;

        goto label2;

     label3:
        return r0;
    }
    public org.apache.commons.math3.dfp.Dfp linearCombination(org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.dfp.Dfp r0, $r4, $r5;
        org.apache.commons.math3.dfp.Dfp[] $r1, $r2;
        int $i0, $i1;
        org.apache.commons.math3.exception.DimensionMismatchException $r3;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $r1 := @parameter0: org.apache.commons.math3.dfp.Dfp[];

        $r2 := @parameter1: org.apache.commons.math3.dfp.Dfp[];

        $i0 = lengthof $r1;

        $i1 = lengthof $r2;

        if $i0 == $i1 goto label1;

        $r3 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i1 = lengthof $r1;

        $i0 = lengthof $r2;

        specialinvoke $r3.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i1, $i0);

        throw $r3;

     label1:
        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getZero()>();

        $i0 = 0;

     label2:
        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label3;

        $r4 = $r1[$i0];

        $r5 = $r2[$i0];

        $r4 = virtualinvoke $r4.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>($r5);

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r4);

        $i0 = $i0 + 1;

        goto label2;

     label3:
        return r0;
    }
    public volatile java.lang.Object log()
    {
        org.apache.commons.math3.dfp.Dfp r0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp log()>();

        return r0;
    }
    public org.apache.commons.math3.dfp.Dfp log()
    {
        org.apache.commons.math3.dfp.Dfp r0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        r0 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp log(org.apache.commons.math3.dfp.Dfp)>(r0);

        return r0;
    }
    public int log10()
    {
        org.apache.commons.math3.dfp.Dfp r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: int intLog10()>();

        return $i0;
    }
    public int log10K()
    {
        org.apache.commons.math3.dfp.Dfp r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $i0 = r0.<org.apache.commons.math3.dfp.Dfp: int exp>;

        $i0 = $i0 + -1;

        return $i0;
    }
    public volatile java.lang.Object log1p()
    {
        org.apache.commons.math3.dfp.Dfp r0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp log1p()>();

        return r0;
    }
    public org.apache.commons.math3.dfp.Dfp log1p()
    {
        org.apache.commons.math3.dfp.Dfp r0, $r1;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getOne()>();

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r1);

        r0 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp log(org.apache.commons.math3.dfp.Dfp)>(r0);

        return r0;
    }
    public volatile java.lang.Object multiply(double)
    {
        org.apache.commons.math3.dfp.Dfp r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $d0 := @parameter0: double;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(double)>($d0);

        return r0;
    }
    public volatile java.lang.Object multiply(int)
    {
        org.apache.commons.math3.dfp.Dfp r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $i0 := @parameter0: int;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(int)>($i0);

        return r0;
    }
    public volatile java.lang.Object multiply(java.lang.Object) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.dfp.Dfp r0, $r2;
        java.lang.Object $r1;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math3.dfp.Dfp) $r1;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>($r2);

        return r0;
    }
    public org.apache.commons.math3.dfp.Dfp multiply(double)
    {
        org.apache.commons.math3.dfp.Dfp r0, $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(double)>($d0);

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>($r1);

        return r0;
    }
    public org.apache.commons.math3.dfp.Dfp multiply(int)
    {
        org.apache.commons.math3.dfp.Dfp r0, $r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $i0 := @parameter0: int;

        if $i0 < 0 goto label1;

        if $i0 >= 10000 goto label1;

        r0 = specialinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiplyFast(int)>($i0);

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(int)>($i0);

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>($r1);

        return r0;
    }
    public org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)
    {
        org.apache.commons.math3.dfp.Dfp $r0, r2, $r4, r5;
        int[] r1, $r6, $r7;
        byte $b0, $b3, $b8;
        org.apache.commons.math3.dfp.DfpField $r3;
        int $i1, $i2, i4, $i5, $i6, $i7;
        boolean $z0;

        r2 := @this: org.apache.commons.math3.dfp.Dfp;

        $r0 := @parameter0: org.apache.commons.math3.dfp.Dfp;

        $b0 = 1;

        $r3 = r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField field>;

        $i1 = virtualinvoke $r3.<org.apache.commons.math3.dfp.DfpField: int getRadixDigits()>();

        $r3 = $r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField field>;

        $i2 = virtualinvoke $r3.<org.apache.commons.math3.dfp.DfpField: int getRadixDigits()>();

        if $i1 == $i2 goto label01;

        $r3 = r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField field>;

        virtualinvoke $r3.<org.apache.commons.math3.dfp.DfpField: void setIEEEFlagsBits(int)>(1);

        $r4 = virtualinvoke r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getZero()>();

        $r4 = virtualinvoke r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r4);

        $r4.<org.apache.commons.math3.dfp.Dfp: byte nans> = 3;

        r2 = virtualinvoke r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)>(1, "multiply", $r0, $r4);

        return r2;

     label01:
        $r4 = virtualinvoke r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getZero()>();

        $r4 = virtualinvoke r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r4);

        r5 = $r4;

        $b3 = r2.<org.apache.commons.math3.dfp.Dfp: byte nans>;

        if $b3 != 0 goto label02;

        $b3 = $r0.<org.apache.commons.math3.dfp.Dfp: byte nans>;

        if $b3 == 0 goto label09;

     label02:
        $z0 = virtualinvoke r2.<org.apache.commons.math3.dfp.Dfp: boolean isNaN()>();

        if $z0 != 0 goto label25;

        $z0 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: boolean isNaN()>();

        if $z0 == 0 goto label03;

        return $r0;

     label03:
        $b3 = r2.<org.apache.commons.math3.dfp.Dfp: byte nans>;

        if $b3 != 1 goto label04;

        $b3 = $r0.<org.apache.commons.math3.dfp.Dfp: byte nans>;

        if $b3 != 0 goto label04;

        r1 = $r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $r6 = r2.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i1 = lengthof $r6;

        $i1 = $i1 + -1;

        $i1 = r1[$i1];

        if $i1 == 0 goto label04;

        $r4 = virtualinvoke r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>(r2);

        $b0 = r2.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        $b3 = $r0.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        $i1 = $b0 * $b3;

        $b0 = (byte) $i1;

        $r4.<org.apache.commons.math3.dfp.Dfp: byte sign> = $b0;

        return $r4;

     label04:
        $b3 = $r0.<org.apache.commons.math3.dfp.Dfp: byte nans>;

        if $b3 != 1 goto label05;

        $b3 = r2.<org.apache.commons.math3.dfp.Dfp: byte nans>;

        if $b3 != 0 goto label05;

        r1 = r2.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $r6 = r2.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i1 = lengthof $r6;

        $i1 = $i1 + -1;

        $i1 = r1[$i1];

        if $i1 == 0 goto label05;

        $r4 = virtualinvoke r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r0);

        $b0 = r2.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        $b3 = $r0.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        $i1 = $b0 * $b3;

        $b0 = (byte) $i1;

        $r4.<org.apache.commons.math3.dfp.Dfp: byte sign> = $b0;

        return $r4;

     label05:
        $b3 = $r0.<org.apache.commons.math3.dfp.Dfp: byte nans>;

        if $b3 != 1 goto label06;

        $b3 = r2.<org.apache.commons.math3.dfp.Dfp: byte nans>;

        if $b3 != 1 goto label06;

        $r4 = virtualinvoke r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>(r2);

        $b0 = r2.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        $b3 = $r0.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        $i1 = $b0 * $b3;

        $b0 = (byte) $i1;

        $r4.<org.apache.commons.math3.dfp.Dfp: byte sign> = $b0;

        return $r4;

     label06:
        $b3 = $r0.<org.apache.commons.math3.dfp.Dfp: byte nans>;

        if $b3 != 1 goto label07;

        $b3 = r2.<org.apache.commons.math3.dfp.Dfp: byte nans>;

        if $b3 != 0 goto label07;

        r1 = r2.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $r6 = r2.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i1 = lengthof $r6;

        $i1 = $i1 + -1;

        $i1 = r1[$i1];

        if $i1 == 0 goto label08;

     label07:
        $b3 = r2.<org.apache.commons.math3.dfp.Dfp: byte nans>;

        if $b3 != 1 goto label09;

        $b3 = $r0.<org.apache.commons.math3.dfp.Dfp: byte nans>;

        if $b3 != 0 goto label09;

        r1 = $r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $r6 = r2.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i1 = lengthof $r6;

        $i1 = $i1 + -1;

        $i1 = r1[$i1];

        if $i1 != 0 goto label09;

     label08:
        $r3 = r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField field>;

        virtualinvoke $r3.<org.apache.commons.math3.dfp.DfpField: void setIEEEFlagsBits(int)>(1);

        $r4 = virtualinvoke r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getZero()>();

        $r4 = virtualinvoke r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r4);

        $r4.<org.apache.commons.math3.dfp.Dfp: byte nans> = 3;

        r2 = virtualinvoke r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)>(1, "multiply", $r0, $r4);

        return r2;

     label09:
        r1 = r2.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i1 = lengthof r1;

        $i1 = $i1 * 2;

        r1 = newarray (int)[$i1];

        $i1 = 0;

     label10:
        $r6 = r2.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i2 = lengthof $r6;

        if $i1 >= $i2 goto label13;

        $i2 = 0;

        i4 = 0;

     label11:
        $r6 = r2.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i5 = lengthof $r6;

        if i4 >= $i5 goto label12;

        $r6 = r2.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i5 = $r6[$i1];

        $r6 = $r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i6 = $r6[i4];

        $i5 = $i5 * $i6;

        $i6 = $i1 + i4;

        $i6 = r1[$i6];

        $i2 = $i6 + $i2;

        $i6 = $i5 + $i2;

        $i2 = $i6 / 10000;

        $i5 = $i1 + i4;

        $i7 = $i2 * 10000;

        $i6 = $i6 - $i7;

        r1[$i5] = $i6;

        i4 = i4 + 1;

        goto label11;

     label12:
        $r6 = r2.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        i4 = lengthof $r6;

        i4 = i4 + $i1;

        r1[i4] = $i2;

        $i1 = $i1 + 1;

        goto label10;

     label13:
        $r6 = r2.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i1 = lengthof $r6;

        $i1 = $i1 * 2;

        $i1 = $i1 + -1;

        $r6 = r2.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i2 = lengthof $r6;

        $i2 = $i2 * 2;

        $i2 = $i2 + -1;

     label14:
        if $i2 < 0 goto label15;

        i4 = r1[$i2];

        if i4 == 0 goto label17;

        $i1 = $i2;

     label15:
        $i2 = 0;

     label16:
        $r6 = r2.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        i4 = lengthof $r6;

        if $i2 >= i4 goto label18;

        $r6 = $r4.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $r7 = r2.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        i4 = lengthof $r7;

        i4 = i4 - $i2;

        i4 = i4 + -1;

        $i5 = $i1 - $i2;

        $i5 = r1[$i5];

        $r6[i4] = $i5;

        $i2 = $i2 + 1;

        goto label16;

     label17:
        $i2 = $i2 + -1;

        goto label14;

     label18:
        $i2 = r2.<org.apache.commons.math3.dfp.Dfp: int exp>;

        i4 = $r0.<org.apache.commons.math3.dfp.Dfp: int exp>;

        $i2 = $i2 + i4;

        $i2 = $i2 + $i1;

        $r6 = r2.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        i4 = lengthof $r6;

        i4 = i4 * 2;

        $i2 = $i2 - i4;

        $i2 = $i2 + 1;

        $r4.<org.apache.commons.math3.dfp.Dfp: int exp> = $i2;

        $b3 = r2.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        $b8 = $r0.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        if $b3 != $b8 goto label23;

     label19:
        $r4.<org.apache.commons.math3.dfp.Dfp: byte sign> = $b0;

        $r6 = $r4.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $r7 = r2.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i2 = lengthof $r7;

        $i2 = $i2 + -1;

        $i2 = $r6[$i2];

        if $i2 != 0 goto label20;

        $r4.<org.apache.commons.math3.dfp.Dfp: int exp> = 0;

     label20:
        $r6 = r2.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i2 = lengthof $r6;

        $i2 = $i2 + -1;

        if $i1 <= $i2 goto label24;

        $r6 = r2.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i2 = lengthof $r6;

        $i1 = $i1 - $i2;

        $i1 = r1[$i1];

        $i1 = virtualinvoke $r4.<org.apache.commons.math3.dfp.Dfp: int round(int)>($i1);

     label21:
        if $i1 == 0 goto label22;

        r5 = virtualinvoke r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)>($i1, "multiply", $r0, $r4);

     label22:
        return r5;

     label23:
        $b0 = -1;

        goto label19;

     label24:
        $i1 = virtualinvoke $r4.<org.apache.commons.math3.dfp.Dfp: int round(int)>(0);

        goto label21;

     label25:
        return r2;
    }
    public volatile java.lang.Object negate()
    {
        org.apache.commons.math3.dfp.Dfp r0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp negate()>();

        return r0;
    }
    public org.apache.commons.math3.dfp.Dfp negate()
    {
        org.apache.commons.math3.dfp.Dfp r0;
        byte $b0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>(r0);

        $b0 = r0.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        $b0 = neg $b0;

        r0.<org.apache.commons.math3.dfp.Dfp: byte sign> = $b0;

        return r0;
    }
    public boolean negativeOrNull()
    {
        org.apache.commons.math3.dfp.Dfp r0, $r2;
        boolean $z0;
        org.apache.commons.math3.dfp.DfpField $r1;
        byte $b0;
        int[] $r3, $r4;
        int $i1;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: boolean isNaN()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField field>;

        virtualinvoke $r1.<org.apache.commons.math3.dfp.DfpField: void setIEEEFlagsBits(int)>(1);

        $r2 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getZero()>();

        $r2 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r2);

        virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)>(1, "lessThan", r0, $r2);

        return 0;

     label1:
        $b0 = r0.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        if $b0 < 0 goto label2;

        $r3 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $r4 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i1 = lengthof $r4;

        $i1 = $i1 + -1;

        $i1 = $r3[$i1];

        if $i1 != 0 goto label3;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: boolean isInfinite()>();

        if $z0 != 0 goto label3;

     label2:
        return 1;

     label3:
        return 0;
    }
    public org.apache.commons.math3.dfp.Dfp newInstance()
    {
        org.apache.commons.math3.dfp.Dfp r0, $r1;
        org.apache.commons.math3.dfp.DfpField $r2;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $r1 = new org.apache.commons.math3.dfp.Dfp;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField getField()>();

        specialinvoke $r1.<org.apache.commons.math3.dfp.Dfp: void <init>(org.apache.commons.math3.dfp.DfpField)>($r2);

        return $r1;
    }
    public org.apache.commons.math3.dfp.Dfp newInstance(byte)
    {
        org.apache.commons.math3.dfp.Dfp r0, $r1;
        byte $b0;
        org.apache.commons.math3.dfp.DfpField $r2;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $b0 := @parameter0: byte;

        $r1 = new org.apache.commons.math3.dfp.Dfp;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField getField()>();

        specialinvoke $r1.<org.apache.commons.math3.dfp.Dfp: void <init>(org.apache.commons.math3.dfp.DfpField,byte)>($r2, $b0);

        return $r1;
    }
    public org.apache.commons.math3.dfp.Dfp newInstance(byte, byte)
    {
        org.apache.commons.math3.dfp.Dfp r0;
        byte $b0, $b1;
        org.apache.commons.math3.dfp.DfpField $r1;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $b0 := @parameter0: byte;

        $b1 := @parameter1: byte;

        $r1 = r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField field>;

        r0 = virtualinvoke $r1.<org.apache.commons.math3.dfp.DfpField: org.apache.commons.math3.dfp.Dfp newDfp(byte,byte)>($b0, $b1);

        return r0;
    }
    public org.apache.commons.math3.dfp.Dfp newInstance(double)
    {
        org.apache.commons.math3.dfp.Dfp r0, $r1;
        double $d0;
        org.apache.commons.math3.dfp.DfpField $r2;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $d0 := @parameter0: double;

        $r1 = new org.apache.commons.math3.dfp.Dfp;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField getField()>();

        specialinvoke $r1.<org.apache.commons.math3.dfp.Dfp: void <init>(org.apache.commons.math3.dfp.DfpField,double)>($r2, $d0);

        return $r1;
    }
    public org.apache.commons.math3.dfp.Dfp newInstance(int)
    {
        org.apache.commons.math3.dfp.Dfp r0, $r1;
        int $i0;
        org.apache.commons.math3.dfp.DfpField $r2;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $i0 := @parameter0: int;

        $r1 = new org.apache.commons.math3.dfp.Dfp;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField getField()>();

        specialinvoke $r1.<org.apache.commons.math3.dfp.Dfp: void <init>(org.apache.commons.math3.dfp.DfpField,int)>($r2, $i0);

        return $r1;
    }
    public org.apache.commons.math3.dfp.Dfp newInstance(long)
    {
        org.apache.commons.math3.dfp.Dfp r0, $r1;
        long $l0;
        org.apache.commons.math3.dfp.DfpField $r2;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $l0 := @parameter0: long;

        $r1 = new org.apache.commons.math3.dfp.Dfp;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField getField()>();

        specialinvoke $r1.<org.apache.commons.math3.dfp.Dfp: void <init>(org.apache.commons.math3.dfp.DfpField,long)>($r2, $l0);

        return $r1;
    }
    public org.apache.commons.math3.dfp.Dfp newInstance(java.lang.String)
    {
        org.apache.commons.math3.dfp.Dfp r0, $r2;
        java.lang.String $r1;
        org.apache.commons.math3.dfp.DfpField $r3;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $r1 := @parameter0: java.lang.String;

        $r2 = new org.apache.commons.math3.dfp.Dfp;

        $r3 = r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField field>;

        specialinvoke $r2.<org.apache.commons.math3.dfp.Dfp: void <init>(org.apache.commons.math3.dfp.DfpField,java.lang.String)>($r3, $r1);

        return $r2;
    }
    public org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)
    {
        org.apache.commons.math3.dfp.Dfp r0, $r1, $r3;
        org.apache.commons.math3.dfp.DfpField $r2;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $r1 := @parameter0: org.apache.commons.math3.dfp.Dfp;

        $r2 = r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField field>;

        $i0 = virtualinvoke $r2.<org.apache.commons.math3.dfp.DfpField: int getRadixDigits()>();

        $r2 = $r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField field>;

        $i1 = virtualinvoke $r2.<org.apache.commons.math3.dfp.DfpField: int getRadixDigits()>();

        if $i0 == $i1 goto label1;

        $r2 = r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField field>;

        virtualinvoke $r2.<org.apache.commons.math3.dfp.DfpField: void setIEEEFlagsBits(int)>(1);

        $r3 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getZero()>();

        $r3 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r3);

        $r3.<org.apache.commons.math3.dfp.Dfp: byte nans> = 3;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)>(1, "newInstance", $r1, $r3);

        return r0;

     label1:
        r0 = new org.apache.commons.math3.dfp.Dfp;

        specialinvoke r0.<org.apache.commons.math3.dfp.Dfp: void <init>(org.apache.commons.math3.dfp.Dfp)>($r1);

        return r0;
    }
    public org.apache.commons.math3.dfp.Dfp nextAfter(org.apache.commons.math3.dfp.Dfp)
    {
        org.apache.commons.math3.dfp.Dfp r0, $r1, $r3, $r5;
        org.apache.commons.math3.dfp.DfpField $r2;
        int $i0, $i1;
        boolean z0, $z1;
        int[] $r4;
        byte $b2;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $r1 := @parameter0: org.apache.commons.math3.dfp.Dfp;

        $r2 = r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField field>;

        $i0 = virtualinvoke $r2.<org.apache.commons.math3.dfp.DfpField: int getRadixDigits()>();

        $r2 = $r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField field>;

        $i1 = virtualinvoke $r2.<org.apache.commons.math3.dfp.DfpField: int getRadixDigits()>();

        if $i0 == $i1 goto label01;

        $r2 = r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField field>;

        virtualinvoke $r2.<org.apache.commons.math3.dfp.DfpField: void setIEEEFlagsBits(int)>(1);

        $r3 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getZero()>();

        $r3 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r3);

        $r3.<org.apache.commons.math3.dfp.Dfp: byte nans> = 3;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)>(1, "nextAfter", $r1, $r3);

        return r0;

     label01:
        z0 = 0;

        $z1 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: boolean lessThan(org.apache.commons.math3.dfp.Dfp)>($r1);

        if $z1 == 0 goto label02;

        z0 = 1;

     label02:
        $i0 = staticinvoke <org.apache.commons.math3.dfp.Dfp: int compare(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)>(r0, $r1);

        if $i0 != 0 goto label03;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r1);

        return r0;

     label03:
        $r3 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getZero()>();

        $z1 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: boolean lessThan(org.apache.commons.math3.dfp.Dfp)>($r3);

        if $z1 == 0 goto label04;

        if z0 != 0 goto label08;

        z0 = 1;

     label04:
        if z0 == 0 goto label09;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getOne()>();

        $r3 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r3);

        $i0 = r0.<org.apache.commons.math3.dfp.Dfp: int exp>;

        $r4 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i1 = lengthof $r4;

        $i0 = $i0 - $i1;

        $i0 = $i0 + 1;

        $r3.<org.apache.commons.math3.dfp.Dfp: int exp> = $i0;

        $b2 = r0.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        $r3.<org.apache.commons.math3.dfp.Dfp: byte sign> = $b2;

        $r5 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getZero()>();

        z0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: boolean equals(java.lang.Object)>($r5);

        if z0 == 0 goto label05;

        $r4 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i0 = lengthof $r4;

        $i0 = -32767 - $i0;

        $r3.<org.apache.commons.math3.dfp.Dfp: int exp> = $i0;

     label05:
        $r3 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r3);

     label06:
        $i0 = virtualinvoke $r3.<org.apache.commons.math3.dfp.Dfp: int classify()>();

        if $i0 != 1 goto label07;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: int classify()>();

        if $i0 == 1 goto label07;

        $r2 = r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField field>;

        virtualinvoke $r2.<org.apache.commons.math3.dfp.DfpField: void setIEEEFlagsBits(int)>(16);

        $r3 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)>(16, "nextAfter", $r1, $r3);

     label07:
        $r5 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getZero()>();

        z0 = virtualinvoke $r3.<org.apache.commons.math3.dfp.Dfp: boolean equals(java.lang.Object)>($r5);

        if z0 == 0 goto label13;

        $r5 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getZero()>();

        z0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: boolean equals(java.lang.Object)>($r5);

        if z0 != 0 goto label13;

        $r2 = r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField field>;

        virtualinvoke $r2.<org.apache.commons.math3.dfp.DfpField: void setIEEEFlagsBits(int)>(16);

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)>(16, "nextAfter", $r1, $r3);

        return r0;

     label08:
        z0 = 0;

        goto label04;

     label09:
        $r3 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getOne()>();

        $r3 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r3);

        $i0 = r0.<org.apache.commons.math3.dfp.Dfp: int exp>;

        $r3.<org.apache.commons.math3.dfp.Dfp: int exp> = $i0;

        $b2 = r0.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        $r3.<org.apache.commons.math3.dfp.Dfp: byte sign> = $b2;

        z0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: boolean equals(java.lang.Object)>($r3);

        if z0 == 0 goto label12;

        $i0 = r0.<org.apache.commons.math3.dfp.Dfp: int exp>;

        $r4 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i1 = lengthof $r4;

        $i0 = $i0 - $i1;

        $r3.<org.apache.commons.math3.dfp.Dfp: int exp> = $i0;

     label10:
        $r5 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getZero()>();

        z0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: boolean equals(java.lang.Object)>($r5);

        if z0 == 0 goto label11;

        $r4 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i0 = lengthof $r4;

        $i0 = -32767 - $i0;

        $r3.<org.apache.commons.math3.dfp.Dfp: int exp> = $i0;

     label11:
        $r3 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp subtract(org.apache.commons.math3.dfp.Dfp)>($r3);

        goto label06;

     label12:
        $i0 = r0.<org.apache.commons.math3.dfp.Dfp: int exp>;

        $r4 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i1 = lengthof $r4;

        $i0 = $i0 - $i1;

        $i0 = $i0 + 1;

        $r3.<org.apache.commons.math3.dfp.Dfp: int exp> = $i0;

        goto label10;

     label13:
        return $r3;
    }
    public boolean positiveOrNull()
    {
        org.apache.commons.math3.dfp.Dfp r0, $r2;
        boolean $z0;
        org.apache.commons.math3.dfp.DfpField $r1;
        byte $b0;
        int[] $r3, $r4;
        int $i1;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: boolean isNaN()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField field>;

        virtualinvoke $r1.<org.apache.commons.math3.dfp.DfpField: void setIEEEFlagsBits(int)>(1);

        $r2 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getZero()>();

        $r2 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r2);

        virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)>(1, "lessThan", r0, $r2);

        return 0;

     label1:
        $b0 = r0.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        if $b0 > 0 goto label2;

        $r3 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $r4 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i1 = lengthof $r4;

        $i1 = $i1 + -1;

        $i1 = $r3[$i1];

        if $i1 != 0 goto label3;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: boolean isInfinite()>();

        if $z0 != 0 goto label3;

     label2:
        return 1;

     label3:
        return 0;
    }
    public volatile java.lang.Object pow(double)
    {
        org.apache.commons.math3.dfp.Dfp r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $d0 := @parameter0: double;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp pow(double)>($d0);

        return r0;
    }
    public volatile java.lang.Object pow(int)
    {
        org.apache.commons.math3.dfp.Dfp r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $i0 := @parameter0: int;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp pow(int)>($i0);

        return r0;
    }
    public volatile java.lang.Object pow(java.lang.Object) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.dfp.Dfp r0, $r2;
        java.lang.Object $r1;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math3.dfp.Dfp) $r1;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp pow(org.apache.commons.math3.dfp.Dfp)>($r2);

        return r0;
    }
    public org.apache.commons.math3.dfp.Dfp pow(double)
    {
        org.apache.commons.math3.dfp.Dfp r0, $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(double)>($d0);

        r0 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp pow(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)>(r0, $r1);

        return r0;
    }
    public org.apache.commons.math3.dfp.Dfp pow(int)
    {
        org.apache.commons.math3.dfp.Dfp r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $i0 := @parameter0: int;

        r0 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp pow(org.apache.commons.math3.dfp.Dfp,int)>(r0, $i0);

        return r0;
    }
    public org.apache.commons.math3.dfp.Dfp pow(org.apache.commons.math3.dfp.Dfp)
    {
        org.apache.commons.math3.dfp.Dfp r0, $r1;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $r1 := @parameter0: org.apache.commons.math3.dfp.Dfp;

        r0 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp pow(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)>(r0, $r1);

        return r0;
    }
    public org.apache.commons.math3.dfp.Dfp power10(int)
    {
        org.apache.commons.math3.dfp.Dfp r0, $r1;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getOne()>();

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r1);

        $r1 = r0;

        if $i0 < 0 goto label4;

        $i1 = $i0 / 4;

        $i1 = $i1 + 1;

        r0.<org.apache.commons.math3.dfp.Dfp: int exp> = $i1;

     label1:
        $i0 = $i0 % 4;

        $i0 = $i0 + 4;

        $i0 = $i0 % 4;

        lookupswitch($i0)
        {
            case 0: goto label3;
            case 1: goto label5;
            case 2: goto label6;
            default: goto label2;
        };

     label2:
        $r1 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(int)>(1000);

     label3:
        return $r1;

     label4:
        $i1 = $i0 + 1;

        $i1 = $i1 / 4;

        r0.<org.apache.commons.math3.dfp.Dfp: int exp> = $i1;

        goto label1;

     label5:
        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(int)>(10);

        return r0;

     label6:
        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(int)>(100);

        return r0;
    }
    public org.apache.commons.math3.dfp.Dfp power10K(int)
    {
        org.apache.commons.math3.dfp.Dfp r0, $r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getOne()>();

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r1);

        $i0 = $i0 + 1;

        r0.<org.apache.commons.math3.dfp.Dfp: int exp> = $i0;

        return r0;
    }
    public volatile java.lang.Object reciprocal()
    {
        org.apache.commons.math3.dfp.Dfp r0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp reciprocal()>();

        return r0;
    }
    public org.apache.commons.math3.dfp.Dfp reciprocal()
    {
        org.apache.commons.math3.dfp.Dfp r0, $r2;
        org.apache.commons.math3.dfp.DfpField $r1;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $r1 = r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField field>;

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.dfp.DfpField: org.apache.commons.math3.dfp.Dfp getOne()>();

        r0 = virtualinvoke $r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(org.apache.commons.math3.dfp.Dfp)>(r0);

        return r0;
    }
    public volatile java.lang.Object remainder(double)
    {
        org.apache.commons.math3.dfp.Dfp r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $d0 := @parameter0: double;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp remainder(double)>($d0);

        return r0;
    }
    public volatile java.lang.Object remainder(java.lang.Object) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.dfp.Dfp r0, $r2;
        java.lang.Object $r1;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math3.dfp.Dfp) $r1;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp remainder(org.apache.commons.math3.dfp.Dfp)>($r2);

        return r0;
    }
    public org.apache.commons.math3.dfp.Dfp remainder(double)
    {
        org.apache.commons.math3.dfp.Dfp r0, $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(double)>($d0);

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp remainder(org.apache.commons.math3.dfp.Dfp)>($r1);

        return r0;
    }
    public org.apache.commons.math3.dfp.Dfp remainder(org.apache.commons.math3.dfp.Dfp)
    {
        org.apache.commons.math3.dfp.Dfp r0, $r1, $r2;
        int[] $r3, $r4;
        int $i0;
        byte $b1;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $r1 := @parameter0: org.apache.commons.math3.dfp.Dfp;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(org.apache.commons.math3.dfp.Dfp)>($r1);

        $r2 = virtualinvoke $r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp rint()>();

        $r1 = virtualinvoke $r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>($r1);

        $r1 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp subtract(org.apache.commons.math3.dfp.Dfp)>($r1);

        $r3 = $r1.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $r4 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i0 = lengthof $r4;

        $i0 = $i0 + -1;

        $i0 = $r3[$i0];

        if $i0 != 0 goto label1;

        $b1 = r0.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        $r1.<org.apache.commons.math3.dfp.Dfp: byte sign> = $b1;

     label1:
        return $r1;
    }
    public volatile java.lang.Object rint()
    {
        org.apache.commons.math3.dfp.Dfp r0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp rint()>();

        return r0;
    }
    public org.apache.commons.math3.dfp.Dfp rint()
    {
        org.apache.commons.math3.dfp.Dfp r0;
        org.apache.commons.math3.dfp.DfpField$RoundingMode $r1;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $r1 = <org.apache.commons.math3.dfp.DfpField$RoundingMode: org.apache.commons.math3.dfp.DfpField$RoundingMode ROUND_HALF_EVEN>;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp trunc(org.apache.commons.math3.dfp.DfpField$RoundingMode)>($r1);

        return r0;
    }
    public volatile java.lang.Object rootN(int)
    {
        org.apache.commons.math3.dfp.Dfp r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $i0 := @parameter0: int;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp rootN(int)>($i0);

        return r0;
    }
    public org.apache.commons.math3.dfp.Dfp rootN(int)
    {
        org.apache.commons.math3.dfp.Dfp r0, $r1;
        int $i0;
        byte $b1;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $i0 := @parameter0: int;

        $b1 = r0.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        if $b1 < 0 goto label1;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getOne()>();

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(int)>($i0);

        r0 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp pow(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)>(r0, $r1);

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp negate()>();

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getOne()>();

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(int)>($i0);

        r0 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp pow(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)>($r1, r0);

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp negate()>();

        return r0;
    }
    protected int round(int)
    {
        org.apache.commons.math3.dfp.Dfp r0;
        int $i0, i1, $i2, i4, $i5;
        int[] $r1, $r4;
        org.apache.commons.math3.dfp.DfpField $r2;
        org.apache.commons.math3.dfp.DfpField$RoundingMode $r3;
        byte $b3;
        boolean z0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $i0 := @parameter0: int;

        $r1 = <org.apache.commons.math3.dfp.Dfp$1: int[] $SwitchMap$org$apache$commons$math3$dfp$DfpField$RoundingMode>;

        $r2 = r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField field>;

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.dfp.DfpField: org.apache.commons.math3.dfp.DfpField$RoundingMode getRoundingMode()>();

        $i2 = virtualinvoke $r3.<org.apache.commons.math3.dfp.DfpField$RoundingMode: int ordinal()>();

        $i2 = $r1[$i2];

        lookupswitch($i2)
        {
            case 2: goto label17;
            case 3: goto label11;
            case 4: goto label04;
            case 5: goto label05;
            case 6: goto label07;
            case 7: goto label09;
            case 8: goto label14;
            default: goto label01;
        };

     label01:
        $b3 = r0.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        if $b3 != -1 goto label19;

        if $i0 == 0 goto label19;

        z0 = 1;

     label02:
        if z0 == 0 goto label21;

        $i2 = 1;

        i4 = 0;

     label03:
        $r1 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        i1 = lengthof $r1;

        if i4 >= i1 goto label20;

        $r1 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        i1 = $r1[i4];

        i1 = i1 + $i2;

        $i2 = i1 / 10000;

        $r1 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i5 = $i2 * 10000;

        i1 = i1 - $i5;

        $r1[i4] = i1;

        i4 = i4 + 1;

        goto label03;

     label04:
        z0 = 0;

        goto label02;

     label05:
        if $i0 == 0 goto label06;

        z0 = 1;

        goto label02;

     label06:
        z0 = 0;

        goto label02;

     label07:
        if $i0 < 5000 goto label08;

        z0 = 1;

        goto label02;

     label08:
        z0 = 0;

        goto label02;

     label09:
        if $i0 <= 5000 goto label10;

        z0 = 1;

        goto label02;

     label10:
        z0 = 0;

        goto label02;

     label11:
        if $i0 > 5000 goto label12;

        if $i0 != 5000 goto label13;

        $r1 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i2 = $r1[0];

        $i2 = $i2 & 1;

        if $i2 != 1 goto label13;

     label12:
        z0 = 1;

        goto label02;

     label13:
        z0 = 0;

        goto label02;

     label14:
        if $i0 > 5000 goto label15;

        if $i0 != 5000 goto label16;

        $r1 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i2 = $r1[0];

        $i2 = $i2 & 1;

        if $i2 != 0 goto label16;

     label15:
        z0 = 1;

        goto label02;

     label16:
        z0 = 0;

        goto label02;

     label17:
        $b3 = r0.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        if $b3 != 1 goto label18;

        if $i0 == 0 goto label18;

        z0 = 1;

        goto label02;

     label18:
        z0 = 0;

        goto label02;

     label19:
        z0 = 0;

        goto label02;

     label20:
        if $i2 == 0 goto label21;

        virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: void shiftRight()>();

        $r1 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $r4 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        i4 = lengthof $r4;

        i4 = i4 + -1;

        $r1[i4] = $i2;

     label21:
        $i2 = r0.<org.apache.commons.math3.dfp.Dfp: int exp>;

        if $i2 >= -32767 goto label22;

        $r2 = r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField field>;

        virtualinvoke $r2.<org.apache.commons.math3.dfp.DfpField: void setIEEEFlagsBits(int)>(8);

        return 8;

     label22:
        $i2 = r0.<org.apache.commons.math3.dfp.Dfp: int exp>;

        if $i2 <= 32768 goto label23;

        $r2 = r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField field>;

        virtualinvoke $r2.<org.apache.commons.math3.dfp.DfpField: void setIEEEFlagsBits(int)>(4);

        return 4;

     label23:
        if $i0 == 0 goto label24;

        $r2 = r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField field>;

        virtualinvoke $r2.<org.apache.commons.math3.dfp.DfpField: void setIEEEFlagsBits(int)>(16);

        return 16;

     label24:
        return 0;
    }
    public long round()
    {
        org.apache.commons.math3.dfp.Dfp r0;
        double $d0;
        long $l0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: double toDouble()>();

        $l0 = staticinvoke <org.apache.commons.math3.util.FastMath: long round(double)>($d0);

        return $l0;
    }
    public volatile java.lang.Object scalb(int)
    {
        org.apache.commons.math3.dfp.Dfp r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $i0 := @parameter0: int;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp scalb(int)>($i0);

        return r0;
    }
    public org.apache.commons.math3.dfp.Dfp scalb(int)
    {
        org.apache.commons.math3.dfp.Dfp r0, $r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getTwo()>();

        $r1 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp pow(org.apache.commons.math3.dfp.Dfp,int)>($r1, $i0);

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>($r1);

        return r0;
    }
    protected void shiftLeft()
    {
        org.apache.commons.math3.dfp.Dfp r0;
        int $i0, $i1;
        int[] $r1, $r2;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $r1 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i1 = lengthof $r1;

        $i1 = $i1 + -1;

     label1:
        if $i1 <= 0 goto label2;

        $r1 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $r2 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i0 = $i1 + -1;

        $i0 = $r2[$i0];

        $r1[$i1] = $i0;

        $i1 = $i1 + -1;

        goto label1;

     label2:
        $r1 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $r1[0] = 0;

        $i1 = r0.<org.apache.commons.math3.dfp.Dfp: int exp>;

        $i1 = $i1 + -1;

        r0.<org.apache.commons.math3.dfp.Dfp: int exp> = $i1;

        return;
    }
    protected void shiftRight()
    {
        org.apache.commons.math3.dfp.Dfp r0;
        int i0, $i1;
        int[] $r1, $r2;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        i0 = 0;

     label1:
        $r1 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i1 = lengthof $r1;

        $i1 = $i1 + -1;

        if i0 >= $i1 goto label2;

        $r1 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $r2 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i1 = i0 + 1;

        $i1 = $r2[$i1];

        $r1[i0] = $i1;

        i0 = i0 + 1;

        goto label1;

     label2:
        $r1 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $r2 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        i0 = lengthof $r2;

        i0 = i0 + -1;

        $r1[i0] = 0;

        i0 = r0.<org.apache.commons.math3.dfp.Dfp: int exp>;

        i0 = i0 + 1;

        r0.<org.apache.commons.math3.dfp.Dfp: int exp> = i0;

        return;
    }
    public volatile java.lang.Object signum()
    {
        org.apache.commons.math3.dfp.Dfp r0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp signum()>();

        return r0;
    }
    public org.apache.commons.math3.dfp.Dfp signum()
    {
        org.apache.commons.math3.dfp.Dfp r0;
        boolean $z0;
        byte $b0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: boolean isNaN()>();

        if $z0 != 0 goto label4;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: boolean isZero()>();

        if $z0 == 0 goto label1;

        return r0;

     label1:
        $b0 = r0.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        if $b0 <= 0 goto label3;

        $b0 = 1;

     label2:
        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(int)>($b0);

        return r0;

     label3:
        $b0 = -1;

        goto label2;

     label4:
        return r0;
    }
    public volatile java.lang.Object sin()
    {
        org.apache.commons.math3.dfp.Dfp r0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp sin()>();

        return r0;
    }
    public org.apache.commons.math3.dfp.Dfp sin()
    {
        org.apache.commons.math3.dfp.Dfp r0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        r0 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp sin(org.apache.commons.math3.dfp.Dfp)>(r0);

        return r0;
    }
    public volatile java.lang.Object sinh()
    {
        org.apache.commons.math3.dfp.Dfp r0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp sinh()>();

        return r0;
    }
    public org.apache.commons.math3.dfp.Dfp sinh()
    {
        org.apache.commons.math3.dfp.Dfp r0, $r1;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $r1 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp exp(org.apache.commons.math3.dfp.Dfp)>(r0);

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp negate()>();

        r0 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp exp(org.apache.commons.math3.dfp.Dfp)>(r0);

        r0 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp subtract(org.apache.commons.math3.dfp.Dfp)>(r0);

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(int)>(2);

        return r0;
    }
    public volatile java.lang.Object sqrt()
    {
        org.apache.commons.math3.dfp.Dfp r0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp sqrt()>();

        return r0;
    }
    public org.apache.commons.math3.dfp.Dfp sqrt()
    {
        org.apache.commons.math3.dfp.Dfp r0, $r4, $r5, $r6, $r7, $r8;
        byte $b0;
        int[] $r1, $r2, $r9;
        int $i1, $i2;
        org.apache.commons.math3.dfp.DfpField $r3;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $b0 = r0.<org.apache.commons.math3.dfp.Dfp: byte nans>;

        if $b0 != 0 goto label01;

        $r1 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $r2 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i1 = lengthof $r2;

        $i1 = $i1 + -1;

        $i1 = $r1[$i1];

        if $i1 != 0 goto label01;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>(r0);

        return r0;

     label01:
        $b0 = r0.<org.apache.commons.math3.dfp.Dfp: byte nans>;

        if $b0 == 0 goto label04;

        $b0 = r0.<org.apache.commons.math3.dfp.Dfp: byte nans>;

        if $b0 != 1 goto label02;

        $b0 = r0.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        if $b0 != 1 goto label02;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>(r0);

        return r0;

     label02:
        $b0 = r0.<org.apache.commons.math3.dfp.Dfp: byte nans>;

        if $b0 != 3 goto label03;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>(r0);

        return r0;

     label03:
        $b0 = r0.<org.apache.commons.math3.dfp.Dfp: byte nans>;

        if $b0 != 2 goto label04;

        $r3 = r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField field>;

        virtualinvoke $r3.<org.apache.commons.math3.dfp.DfpField: void setIEEEFlagsBits(int)>(1);

        $r4 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>(r0);

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)>(1, "sqrt", null, $r4);

        return r0;

     label04:
        $b0 = r0.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        if $b0 != -1 goto label05;

        $r3 = r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField field>;

        virtualinvoke $r3.<org.apache.commons.math3.dfp.DfpField: void setIEEEFlagsBits(int)>(1);

        $r4 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>(r0);

        $r4.<org.apache.commons.math3.dfp.Dfp: byte nans> = 3;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)>(1, "sqrt", null, $r4);

        return r0;

     label05:
        $r5 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>(r0);

        $r4 = $r5;

        $i1 = $r5.<org.apache.commons.math3.dfp.Dfp: int exp>;

        if $i1 < -1 goto label06;

        $i1 = $r5.<org.apache.commons.math3.dfp.Dfp: int exp>;

        if $i1 <= 1 goto label07;

     label06:
        $i1 = r0.<org.apache.commons.math3.dfp.Dfp: int exp>;

        $i1 = $i1 / 2;

        $r5.<org.apache.commons.math3.dfp.Dfp: int exp> = $i1;

     label07:
        $r1 = $r5.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $r2 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i1 = lengthof $r2;

        $i1 = $i1 + -1;

        $i1 = $r1[$i1];

        $i1 = $i1 / 2000;

        lookupswitch($i1)
        {
            case 0: goto label12;
            case 1: goto label08;
            case 2: goto label13;
            case 3: goto label14;
            default: goto label08;
        };

     label08:
        $r1 = $r5.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $r2 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i1 = lengthof $r2;

        $i1 = $i1 + -1;

        $r1[$i1] = 3000;

     label09:
        virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r5);

        $r5 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getZero()>();

        virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getZero()>();

     label10:
        $z0 = virtualinvoke $r4.<org.apache.commons.math3.dfp.Dfp: boolean unequal(org.apache.commons.math3.dfp.Dfp)>($r5);

        if $z0 == 0 goto label11;

        $r6 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r4);

        $r6.<org.apache.commons.math3.dfp.Dfp: byte sign> = -1;

        $r7 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(org.apache.commons.math3.dfp.Dfp)>($r4);

        $r6 = virtualinvoke $r6.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r7);

        $r6 = virtualinvoke $r6.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(int)>(2);

        $r7 = $r5;

        $r5 = $r4;

        $r8 = virtualinvoke $r4.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r6);

        $r4 = $r8;

        $z0 = virtualinvoke $r8.<org.apache.commons.math3.dfp.Dfp: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label15;

     label11:
        return $r4;

     label12:
        $r1 = $r5.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $r2 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i1 = lengthof $r2;

        $i1 = $i1 + -1;

        $r2 = $r5.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $r9 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i2 = lengthof $r9;

        $i2 = $i2 + -1;

        $i2 = $r2[$i2];

        $i2 = $i2 / 2;

        $i2 = $i2 + 1;

        $r1[$i1] = $i2;

        goto label09;

     label13:
        $r1 = $r5.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $r2 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i1 = lengthof $r2;

        $i1 = $i1 + -1;

        $r1[$i1] = 1500;

        goto label09;

     label14:
        $r1 = $r5.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $r2 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i1 = lengthof $r2;

        $i1 = $i1 + -1;

        $r1[$i1] = 2200;

        goto label09;

     label15:
        $r1 = $r6.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $r2 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i1 = lengthof $r2;

        $i1 = $i1 + -1;

        $i1 = $r1[$i1];

        if $i1 != 0 goto label10;

        goto label11;
    }
    public boolean strictlyNegative()
    {
        org.apache.commons.math3.dfp.Dfp r0, $r2;
        boolean $z0, $z1;
        org.apache.commons.math3.dfp.DfpField $r1;
        byte $b0;
        int[] $r3, $r4;
        int $i1;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $z0 = 1;

        $z1 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: boolean isNaN()>();

        if $z1 == 0 goto label1;

        $r1 = r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField field>;

        virtualinvoke $r1.<org.apache.commons.math3.dfp.DfpField: void setIEEEFlagsBits(int)>(1);

        $r2 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getZero()>();

        $r2 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r2);

        virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)>(1, "lessThan", r0, $r2);

        return 0;

     label1:
        $b0 = r0.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        if $b0 >= 0 goto label3;

        $r3 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $r4 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i1 = lengthof $r4;

        $i1 = $i1 + -1;

        $i1 = $r3[$i1];

        if $i1 != 0 goto label2;

        $z1 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: boolean isInfinite()>();

        if $z1 == 0 goto label3;

     label2:
        return $z0;

     label3:
        $z0 = 0;

        goto label2;
    }
    public boolean strictlyPositive()
    {
        org.apache.commons.math3.dfp.Dfp r0, $r2;
        boolean $z0, $z1;
        org.apache.commons.math3.dfp.DfpField $r1;
        byte $b0;
        int[] $r3, $r4;
        int $i1;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $z0 = 1;

        $z1 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: boolean isNaN()>();

        if $z1 == 0 goto label1;

        $r1 = r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField field>;

        virtualinvoke $r1.<org.apache.commons.math3.dfp.DfpField: void setIEEEFlagsBits(int)>(1);

        $r2 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getZero()>();

        $r2 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r2);

        virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)>(1, "lessThan", r0, $r2);

        return 0;

     label1:
        $b0 = r0.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        if $b0 <= 0 goto label3;

        $r3 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $r4 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i1 = lengthof $r4;

        $i1 = $i1 + -1;

        $i1 = $r3[$i1];

        if $i1 != 0 goto label2;

        $z1 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: boolean isInfinite()>();

        if $z1 == 0 goto label3;

     label2:
        return $z0;

     label3:
        $z0 = 0;

        goto label2;
    }
    public volatile java.lang.Object subtract(double)
    {
        org.apache.commons.math3.dfp.Dfp r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $d0 := @parameter0: double;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp subtract(double)>($d0);

        return r0;
    }
    public volatile java.lang.Object subtract(java.lang.Object) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.dfp.Dfp r0, $r2;
        java.lang.Object $r1;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math3.dfp.Dfp) $r1;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp subtract(org.apache.commons.math3.dfp.Dfp)>($r2);

        return r0;
    }
    public org.apache.commons.math3.dfp.Dfp subtract(double)
    {
        org.apache.commons.math3.dfp.Dfp r0, $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(double)>($d0);

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp subtract(org.apache.commons.math3.dfp.Dfp)>($r1);

        return r0;
    }
    public org.apache.commons.math3.dfp.Dfp subtract(org.apache.commons.math3.dfp.Dfp)
    {
        org.apache.commons.math3.dfp.Dfp r0, $r1;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $r1 := @parameter0: org.apache.commons.math3.dfp.Dfp;

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp negate()>();

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r1);

        return r0;
    }
    public volatile java.lang.Object tan()
    {
        org.apache.commons.math3.dfp.Dfp r0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp tan()>();

        return r0;
    }
    public org.apache.commons.math3.dfp.Dfp tan()
    {
        org.apache.commons.math3.dfp.Dfp r0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        r0 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp tan(org.apache.commons.math3.dfp.Dfp)>(r0);

        return r0;
    }
    public volatile java.lang.Object tanh()
    {
        org.apache.commons.math3.dfp.Dfp r0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp tanh()>();

        return r0;
    }
    public org.apache.commons.math3.dfp.Dfp tanh()
    {
        org.apache.commons.math3.dfp.Dfp r0, $r1, $r2;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $r1 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp exp(org.apache.commons.math3.dfp.Dfp)>(r0);

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp negate()>();

        $r2 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp exp(org.apache.commons.math3.dfp.Dfp)>(r0);

        r0 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp subtract(org.apache.commons.math3.dfp.Dfp)>($r2);

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r2);

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(org.apache.commons.math3.dfp.Dfp)>($r1);

        return r0;
    }
    public double toDouble()
    {
        org.apache.commons.math3.dfp.Dfp r0, $r1, $r2;
        long l0, $l4;
        boolean $z0, $z1;
        int $i1, $i3;
        byte $b2;
        double $d0, d1;
        java.lang.String $r3;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: boolean isInfinite()>();

        if $z0 == 0 goto label02;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getZero()>();

        $z0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: boolean lessThan(org.apache.commons.math3.dfp.Dfp)>($r1);

        if $z0 == 0 goto label01;

        return #-Infinity;

     label01:
        return #Infinity;

     label02:
        $z0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: boolean isNaN()>();

        if $z0 == 0 goto label03;

        return #NaN;

     label03:
        $r1 = r0;

        $z0 = 0;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getZero()>();

        $i1 = staticinvoke <org.apache.commons.math3.dfp.Dfp: int compare(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)>(r0, $r2);

        if $i1 != 0 goto label05;

        $b2 = r0.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        if $b2 >= 0 goto label04;

        return -0.0;

     label04:
        return 0.0;

     label05:
        if $i1 >= 0 goto label06;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp negate()>();

        $z0 = 1;

     label06:
        $i1 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: int intLog10()>();

        $d0 = (double) $i1;

        $d0 = $d0 * 3.32;

        $i1 = (int) $d0;

        if $i1 >= 0 goto label07;

        $i1 = $i1 + -1;

     label07:
        $r2 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getTwo()>();

        $r2 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp pow(org.apache.commons.math3.dfp.Dfp,int)>($r2, $i1);

     label08:
        $z1 = virtualinvoke $r2.<org.apache.commons.math3.dfp.Dfp: boolean lessThan(org.apache.commons.math3.dfp.Dfp)>($r1);

        if $z1 != 0 goto label09;

        $z1 = virtualinvoke $r2.<org.apache.commons.math3.dfp.Dfp: boolean equals(java.lang.Object)>($r1);

        if $z1 == 0 goto label10;

     label09:
        $r2 = virtualinvoke $r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(int)>(2);

        $i1 = $i1 + 1;

        goto label08;

     label10:
        $i1 = $i1 + -1;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getTwo()>();

        $r2 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp pow(org.apache.commons.math3.dfp.Dfp,int)>($r2, $i1);

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(org.apache.commons.math3.dfp.Dfp)>($r2);

        $r2 = $r1;

        if $i1 <= -1023 goto label11;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getOne()>();

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp subtract(org.apache.commons.math3.dfp.Dfp)>($r2);

     label11:
        if $i1 >= -1074 goto label12;

        return 0.0;

     label12:
        if $i1 <= 1023 goto label14;

        if $z0 == 0 goto label13;

        return #-Infinity;

     label13:
        return #Infinity;

     label14:
        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(long)>(4503599627370496L);

        r0 = virtualinvoke $r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>(r0);

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp rint()>();

        $r3 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: java.lang.String toString()>();

        $i3 = virtualinvoke $r3.<java.lang.String: int length()>();

        $i3 = $i3 + -1;

        $r3 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>(0, $i3);

        $l4 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r3);

        l0 = $l4;

        $b2 = $l4 cmp 4503599627370496L;

        if $b2 != 0 goto label15;

        l0 = 0L;

        $i1 = $i1 + 1;

     label15:
        if $i1 > -1023 goto label16;

        $i1 = $i1 + -1;

     label16:
        if $i1 >= -1023 goto label17;

        $i1 = $i1 + 1;

        l0 = l0 >>> 1;

        goto label16;

     label17:
        $l4 = (long) $i1;

        $l4 = $l4 + 1023L;

        $l4 = $l4 << 52;

        l0 = l0 | $l4;

        $d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>(l0);

        d1 = $d0;

        if $z0 == 0 goto label18;

        d1 = neg $d0;

     label18:
        return d1;
    }
    public double[] toSplitDouble()
    {
        org.apache.commons.math3.dfp.Dfp r0, $r2;
        double[] r1;
        double $d0;
        long $l0;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        r1 = newarray (double)[2];

        $d0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: double toDouble()>();

        $l0 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $l0 = $l0 & -1073741824L;

        $d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l0);

        r1[0] = $d0;

        $d0 = r1[0];

        $r2 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(double)>($d0);

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp subtract(org.apache.commons.math3.dfp.Dfp)>($r2);

        $d0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: double toDouble()>();

        r1[1] = $d0;

        return r1;
    }
    public java.lang.String toString()
    {
        org.apache.commons.math3.dfp.Dfp r0;
        byte $b0;
        int $i1, $i2;
        int[] $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $b0 = r0.<org.apache.commons.math3.dfp.Dfp: byte nans>;

        if $b0 == 0 goto label3;

        $b0 = r0.<org.apache.commons.math3.dfp.Dfp: byte nans>;

        if $b0 != 1 goto label2;

        $b0 = r0.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        if $b0 >= 0 goto label1;

        return "-Infinity";

     label1:
        return "Infinity";

     label2:
        return "NaN";

     label3:
        $i1 = r0.<org.apache.commons.math3.dfp.Dfp: int exp>;

        $r1 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i2 = lengthof $r1;

        if $i1 > $i2 goto label4;

        $i1 = r0.<org.apache.commons.math3.dfp.Dfp: int exp>;

        if $i1 >= -1 goto label5;

     label4:
        $r2 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: java.lang.String dfp2sci()>();

        return $r2;

     label5:
        $r2 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: java.lang.String dfp2string()>();

        return $r2;
    }
    protected org.apache.commons.math3.dfp.Dfp trap(int, java.lang.String, org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp)
    {
        org.apache.commons.math3.dfp.Dfp r0, $r2, $r3, $r4;
        int $i0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: org.apache.commons.math3.dfp.Dfp;

        $r3 := @parameter3: org.apache.commons.math3.dfp.Dfp;

        $r4 := @parameter4: org.apache.commons.math3.dfp.Dfp;

        return $r3;
    }
    protected org.apache.commons.math3.dfp.Dfp trunc(org.apache.commons.math3.dfp.DfpField$RoundingMode)
    {
        org.apache.commons.math3.dfp.Dfp r0, $r5, r6, $r7, $r8, r9;
        org.apache.commons.math3.dfp.DfpField$RoundingMode $r1;
        int i0, $i2, $i3, $i4;
        boolean $z0;
        byte $b1;
        int[] $r2, $r3;
        org.apache.commons.math3.dfp.DfpField $r4;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $r1 := @parameter0: org.apache.commons.math3.dfp.DfpField$RoundingMode;

        i0 = 0;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: boolean isNaN()>();

        if $z0 == 0 goto label01;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>(r0);

        return r0;

     label01:
        $b1 = r0.<org.apache.commons.math3.dfp.Dfp: byte nans>;

        if $b1 != 1 goto label02;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>(r0);

        return r0;

     label02:
        $r2 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $r3 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i2 = lengthof $r3;

        $i2 = $i2 + -1;

        $i2 = $r2[$i2];

        if $i2 != 0 goto label03;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>(r0);

        return r0;

     label03:
        $i2 = r0.<org.apache.commons.math3.dfp.Dfp: int exp>;

        if $i2 >= 0 goto label04;

        $r4 = r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField field>;

        virtualinvoke $r4.<org.apache.commons.math3.dfp.DfpField: void setIEEEFlagsBits(int)>(16);

        $r5 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getZero()>();

        $r5 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r5);

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)>(16, "trunc", r0, $r5);

        return r0;

     label04:
        $i2 = r0.<org.apache.commons.math3.dfp.Dfp: int exp>;

        $r2 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i3 = lengthof $r2;

        if $i2 < $i3 goto label05;

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>(r0);

        return r0;

     label05:
        $r5 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>(r0);

        r6 = $r5;

        $i2 = 0;

     label06:
        $r2 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i3 = lengthof $r2;

        $i4 = $r5.<org.apache.commons.math3.dfp.Dfp: int exp>;

        $i3 = $i3 - $i4;

        if $i2 >= $i3 goto label09;

        $r2 = $r5.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $i3 = $r2[$i2];

        if $i3 == 0 goto label08;

        $b1 = 1;

     label07:
        i0 = i0 | $b1;

        $r2 = $r5.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $r2[$i2] = 0;

        $i2 = $i2 + 1;

        goto label06;

     label08:
        $b1 = 0;

        goto label07;

     label09:
        if i0 == 0 goto label15;

        $r2 = <org.apache.commons.math3.dfp.Dfp$1: int[] $SwitchMap$org$apache$commons$math3$dfp$DfpField$RoundingMode>;

        i0 = virtualinvoke $r1.<org.apache.commons.math3.dfp.DfpField$RoundingMode: int ordinal()>();

        i0 = $r2[i0];

        lookupswitch(i0)
        {
            case 1: goto label13;
            case 2: goto label14;
            default: goto label10;
        };

     label10:
        $r7 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(java.lang.String)>("0.5");

        $r8 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp subtract(org.apache.commons.math3.dfp.Dfp)>($r5);

        r9 = $r8;

        $r8.<org.apache.commons.math3.dfp.Dfp: byte sign> = 1;

        $z0 = virtualinvoke $r8.<org.apache.commons.math3.dfp.Dfp: boolean greaterThan(org.apache.commons.math3.dfp.Dfp)>($r7);

        if $z0 == 0 goto label11;

        r6 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getOne()>();

        r6 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>(r6);

        r9 = r6;

        $b1 = r0.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        r6.<org.apache.commons.math3.dfp.Dfp: byte sign> = $b1;

        r6 = virtualinvoke $r5.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>(r6);

     label11:
        $z0 = virtualinvoke r9.<org.apache.commons.math3.dfp.Dfp: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label12;

        i0 = r6.<org.apache.commons.math3.dfp.Dfp: int exp>;

        if i0 <= 0 goto label12;

        $r2 = r6.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        $r3 = r0.<org.apache.commons.math3.dfp.Dfp: int[] mant>;

        i0 = lengthof $r3;

        $i2 = r6.<org.apache.commons.math3.dfp.Dfp: int exp>;

        i0 = i0 - $i2;

        i0 = $r2[i0];

        i0 = i0 & 1;

        if i0 == 0 goto label12;

        $r5 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getOne()>();

        $r5 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r5);

        $b1 = r0.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        $r5.<org.apache.commons.math3.dfp.Dfp: byte sign> = $b1;

        r6 = virtualinvoke r6.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r5);

     label12:
        $r4 = r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField field>;

        virtualinvoke $r4.<org.apache.commons.math3.dfp.DfpField: void setIEEEFlagsBits(int)>(16);

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)>(16, "trunc", r0, r6);

        return r0;

     label13:
        $b1 = $r5.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        if $b1 != -1 goto label12;

        $r7 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(int)>(-1);

        r6 = virtualinvoke $r5.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r7);

        goto label12;

     label14:
        $b1 = $r5.<org.apache.commons.math3.dfp.Dfp: byte sign>;

        if $b1 != 1 goto label12;

        $r7 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getOne()>();

        r6 = virtualinvoke $r5.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r7);

        goto label12;

     label15:
        return $r5;
    }
    public boolean unequal(org.apache.commons.math3.dfp.Dfp)
    {
        org.apache.commons.math3.dfp.Dfp r0, $r1;
        boolean $z0;
        org.apache.commons.math3.dfp.DfpField $r2;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.dfp.Dfp;

        $r1 := @parameter0: org.apache.commons.math3.dfp.Dfp;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: boolean isNaN()>();

        if $z0 != 0 goto label3;

        $z0 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: boolean isNaN()>();

        if $z0 != 0 goto label3;

        $r2 = r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField field>;

        $i0 = virtualinvoke $r2.<org.apache.commons.math3.dfp.DfpField: int getRadixDigits()>();

        $r2 = $r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField field>;

        $i1 = virtualinvoke $r2.<org.apache.commons.math3.dfp.DfpField: int getRadixDigits()>();

        if $i0 == $i1 goto label1;

        return 0;

     label1:
        $z0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: boolean greaterThan(org.apache.commons.math3.dfp.Dfp)>($r1);

        if $z0 != 0 goto label2;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: boolean lessThan(org.apache.commons.math3.dfp.Dfp)>($r1);

        if $z0 == 0 goto label3;

     label2:
        return 1;

     label3:
        return 0;
    }
