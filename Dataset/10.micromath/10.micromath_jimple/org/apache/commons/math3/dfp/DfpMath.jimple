org.apache.commons.math3.dfp.DfpMath extends java.lang.Object
private static final java.lang.String POW_TRAP
    private void <init>()
    {
        org.apache.commons.math3.dfp.DfpMath r0;

        r0 := @this: org.apache.commons.math3.dfp.DfpMath;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static org.apache.commons.math3.dfp.Dfp acos(org.apache.commons.math3.dfp.Dfp)
    {
        org.apache.commons.math3.dfp.Dfp $r0, $r1, $r2;
        boolean z0, $z1;
        org.apache.commons.math3.dfp.DfpField $r3;

        $r0 := @parameter0: org.apache.commons.math3.dfp.Dfp;

        z0 = 0;

        $r1 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getZero()>();

        $z1 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: boolean lessThan(org.apache.commons.math3.dfp.Dfp)>($r1);

        if $z1 == 0 goto label1;

        z0 = 1;

     label1:
        $r1 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getOne()>();

        $r0 = staticinvoke <org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp copysign(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)>($r0, $r1);

        $r1 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getOne()>();

        $r2 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>($r0);

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp subtract(org.apache.commons.math3.dfp.Dfp)>($r2);

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp sqrt()>();

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(org.apache.commons.math3.dfp.Dfp)>($r0);

        $r1 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp atan(org.apache.commons.math3.dfp.Dfp)>($r1);

        $r2 = $r1;

        if z0 == 0 goto label2;

        $r3 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField getField()>();

        $r2 = virtualinvoke $r3.<org.apache.commons.math3.dfp.DfpField: org.apache.commons.math3.dfp.Dfp getPi()>();

        $r2 = virtualinvoke $r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp subtract(org.apache.commons.math3.dfp.Dfp)>($r1);

     label2:
        $r0 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r2);

        return $r0;
    }
    public static org.apache.commons.math3.dfp.Dfp asin(org.apache.commons.math3.dfp.Dfp)
    {
        org.apache.commons.math3.dfp.Dfp $r0, $r1, $r2;

        $r0 := @parameter0: org.apache.commons.math3.dfp.Dfp;

        $r1 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getOne()>();

        $r2 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>($r0);

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp subtract(org.apache.commons.math3.dfp.Dfp)>($r2);

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp sqrt()>();

        $r0 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(org.apache.commons.math3.dfp.Dfp)>($r1);

        $r0 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp atan(org.apache.commons.math3.dfp.Dfp)>($r0);

        return $r0;
    }
    public static org.apache.commons.math3.dfp.Dfp atan(org.apache.commons.math3.dfp.Dfp)
    {
        org.apache.commons.math3.dfp.Dfp $r0, $r3, $r4, $r7, $r8;
        org.apache.commons.math3.dfp.Dfp[] r1, $r5, $r6, $r9;
        org.apache.commons.math3.dfp.DfpField $r2;
        boolean z0, z1, z2, $z3;

        $r0 := @parameter0: org.apache.commons.math3.dfp.Dfp;

        $r2 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField getField()>();

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.dfp.DfpField: org.apache.commons.math3.dfp.Dfp getZero()>();

        $r2 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField getField()>();

        $r4 = virtualinvoke $r2.<org.apache.commons.math3.dfp.DfpField: org.apache.commons.math3.dfp.Dfp getOne()>();

        $r2 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField getField()>();

        $r5 = virtualinvoke $r2.<org.apache.commons.math3.dfp.DfpField: org.apache.commons.math3.dfp.Dfp[] getSqr2Split()>();

        $r2 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField getField()>();

        $r6 = virtualinvoke $r2.<org.apache.commons.math3.dfp.DfpField: org.apache.commons.math3.dfp.Dfp[] getPiSplit()>();

        z0 = 0;

        z1 = 0;

        z2 = 0;

        $r7 = $r5[0];

        $r7 = virtualinvoke $r7.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp subtract(org.apache.commons.math3.dfp.Dfp)>($r4);

        $r8 = $r5[1];

        $r8 = virtualinvoke $r7.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r8);

        $r7 = new org.apache.commons.math3.dfp.Dfp;

        specialinvoke $r7.<org.apache.commons.math3.dfp.Dfp: void <init>(org.apache.commons.math3.dfp.Dfp)>($r0);

        $z3 = virtualinvoke $r7.<org.apache.commons.math3.dfp.Dfp: boolean lessThan(org.apache.commons.math3.dfp.Dfp)>($r3);

        if $z3 == 0 goto label1;

        z1 = 1;

        $r7 = virtualinvoke $r7.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp negate()>();

     label1:
        $z3 = virtualinvoke $r7.<org.apache.commons.math3.dfp.Dfp: boolean greaterThan(org.apache.commons.math3.dfp.Dfp)>($r4);

        if $z3 == 0 goto label2;

        z0 = 1;

        $r7 = virtualinvoke $r4.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(org.apache.commons.math3.dfp.Dfp)>($r7);

     label2:
        $z3 = virtualinvoke $r7.<org.apache.commons.math3.dfp.Dfp: boolean greaterThan(org.apache.commons.math3.dfp.Dfp)>($r8);

        if $z3 == 0 goto label3;

        r1 = newarray (org.apache.commons.math3.dfp.Dfp)[2];

        z2 = 1;

        $r3 = $r5[0];

        $r3 = virtualinvoke $r3.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp subtract(org.apache.commons.math3.dfp.Dfp)>($r4);

        r1[0] = $r3;

        $r3 = $r5[1];

        r1[1] = $r3;

        $r5 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp[] split(org.apache.commons.math3.dfp.Dfp)>($r7);

        $r9 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp[] splitMult(org.apache.commons.math3.dfp.Dfp[],org.apache.commons.math3.dfp.Dfp[])>($r5, r1);

        $r3 = $r9[0];

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r4);

        $r9[0] = $r4;

        $r4 = $r5[0];

        $r3 = r1[0];

        $r4 = virtualinvoke $r4.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp subtract(org.apache.commons.math3.dfp.Dfp)>($r3);

        $r5[0] = $r4;

        $r4 = $r5[1];

        $r3 = r1[1];

        $r4 = virtualinvoke $r4.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp subtract(org.apache.commons.math3.dfp.Dfp)>($r3);

        $r5[1] = $r4;

        r1 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp[] splitDiv(org.apache.commons.math3.dfp.Dfp[],org.apache.commons.math3.dfp.Dfp[])>($r5, $r9);

        $r4 = r1[0];

        $r3 = r1[1];

        $r7 = virtualinvoke $r4.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r3);

     label3:
        $r4 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp atanInternal(org.apache.commons.math3.dfp.Dfp)>($r7);

        $r3 = $r4;

        if z2 == 0 goto label4;

        $r3 = $r6[0];

        $r3 = virtualinvoke $r3.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(int)>(8);

        $r4 = virtualinvoke $r4.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r3);

        $r3 = $r6[1];

        $r3 = virtualinvoke $r3.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(int)>(8);

        $r3 = virtualinvoke $r4.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r3);

     label4:
        if z0 == 0 goto label5;

        $r4 = $r6[0];

        $r4 = virtualinvoke $r4.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(int)>(2);

        $r4 = virtualinvoke $r4.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp subtract(org.apache.commons.math3.dfp.Dfp)>($r3);

        $r3 = $r6[1];

        $r3 = virtualinvoke $r3.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(int)>(2);

        $r3 = virtualinvoke $r4.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r3);

     label5:
        if z1 == 0 goto label6;

        $r3 = virtualinvoke $r3.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp negate()>();

     label6:
        $r0 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r3);

        return $r0;
    }
    protected static org.apache.commons.math3.dfp.Dfp atanInternal(org.apache.commons.math3.dfp.Dfp)
    {
        org.apache.commons.math3.dfp.Dfp $r0, r1, r2, r3, $r4;
        int i0;
        boolean $z0;

        $r0 := @parameter0: org.apache.commons.math3.dfp.Dfp;

        r1 = new org.apache.commons.math3.dfp.Dfp;

        specialinvoke r1.<org.apache.commons.math3.dfp.Dfp: void <init>(org.apache.commons.math3.dfp.Dfp)>($r0);

        r2 = new org.apache.commons.math3.dfp.Dfp;

        specialinvoke r2.<org.apache.commons.math3.dfp.Dfp: void <init>(org.apache.commons.math3.dfp.Dfp)>(r1);

        r3 = new org.apache.commons.math3.dfp.Dfp;

        specialinvoke r3.<org.apache.commons.math3.dfp.Dfp: void <init>(org.apache.commons.math3.dfp.Dfp)>(r1);

        i0 = 3;

     label1:
        if i0 >= 90 goto label3;

        r2 = virtualinvoke r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>($r0);

        r2 = virtualinvoke r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>($r0);

        $r4 = virtualinvoke r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp negate()>();

        r2 = $r4;

        $r4 = virtualinvoke $r4.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(int)>(i0);

        $r4 = virtualinvoke r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r4);

        r1 = $r4;

        $z0 = virtualinvoke $r4.<org.apache.commons.math3.dfp.Dfp: boolean equals(java.lang.Object)>(r3);

        if $z0 == 0 goto label2;

        return $r4;

     label2:
        r3 = new org.apache.commons.math3.dfp.Dfp;

        specialinvoke r3.<org.apache.commons.math3.dfp.Dfp: void <init>(org.apache.commons.math3.dfp.Dfp)>($r4);

        i0 = i0 + 2;

        goto label1;

     label3:
        return r1;
    }
    public static org.apache.commons.math3.dfp.Dfp cos(org.apache.commons.math3.dfp.Dfp)
    {
        org.apache.commons.math3.dfp.Dfp $r0, $r2, $r3, $r4, $r5;
        org.apache.commons.math3.dfp.DfpField $r1;
        boolean z0, $z1;
        org.apache.commons.math3.dfp.Dfp[] r6, $r7;

        $r0 := @parameter0: org.apache.commons.math3.dfp.Dfp;

        $r1 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField getField()>();

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.dfp.DfpField: org.apache.commons.math3.dfp.Dfp getPi()>();

        $r1 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField getField()>();

        $r3 = virtualinvoke $r1.<org.apache.commons.math3.dfp.DfpField: org.apache.commons.math3.dfp.Dfp getZero()>();

        z0 = 0;

        $r4 = virtualinvoke $r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(int)>(2);

        $r5 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp remainder(org.apache.commons.math3.dfp.Dfp)>($r4);

        $r4 = $r5;

        $z1 = virtualinvoke $r5.<org.apache.commons.math3.dfp.Dfp: boolean lessThan(org.apache.commons.math3.dfp.Dfp)>($r3);

        if $z1 == 0 goto label1;

        $r4 = virtualinvoke $r5.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp negate()>();

     label1:
        $r5 = virtualinvoke $r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(int)>(2);

        $z1 = virtualinvoke $r4.<org.apache.commons.math3.dfp.Dfp: boolean greaterThan(org.apache.commons.math3.dfp.Dfp)>($r5);

        if $z1 == 0 goto label2;

        $r4 = virtualinvoke $r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp subtract(org.apache.commons.math3.dfp.Dfp)>($r4);

        z0 = 1;

     label2:
        $r2 = virtualinvoke $r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(int)>(4);

        $z1 = virtualinvoke $r4.<org.apache.commons.math3.dfp.Dfp: boolean lessThan(org.apache.commons.math3.dfp.Dfp)>($r2);

        if $z1 == 0 goto label5;

        r6 = newarray (org.apache.commons.math3.dfp.Dfp)[2];

        r6[0] = $r4;

        r6[1] = $r3;

        $r3 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp cosInternal(org.apache.commons.math3.dfp.Dfp[])>(r6);

     label3:
        if z0 == 0 goto label4;

        $r3 = virtualinvoke $r3.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp negate()>();

     label4:
        $r0 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r3);

        return $r0;

     label5:
        r6 = newarray (org.apache.commons.math3.dfp.Dfp)[2];

        $r1 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField getField()>();

        $r7 = virtualinvoke $r1.<org.apache.commons.math3.dfp.DfpField: org.apache.commons.math3.dfp.Dfp[] getPiSplit()>();

        $r3 = $r7[0];

        $r3 = virtualinvoke $r3.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(int)>(2);

        $r3 = virtualinvoke $r3.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp subtract(org.apache.commons.math3.dfp.Dfp)>($r4);

        r6[0] = $r3;

        $r3 = $r7[1];

        $r3 = virtualinvoke $r3.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(int)>(2);

        r6[1] = $r3;

        $r3 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp sinInternal(org.apache.commons.math3.dfp.Dfp[])>(r6);

        goto label3;
    }
    protected static org.apache.commons.math3.dfp.Dfp cosInternal(org.apache.commons.math3.dfp.Dfp[])
    {
        org.apache.commons.math3.dfp.Dfp[] $r0;
        org.apache.commons.math3.dfp.Dfp $r1, $r2, r3, $r4, $r5, r6, $r7;
        int i0, $i1;
        boolean $z0;

        $r0 := @parameter0: org.apache.commons.math3.dfp.Dfp[];

        $r1 = $r0[0];

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getOne()>();

        r3 = $r2;

        $r1 = $r2;

        $r4 = $r0[0];

        $r5 = $r0[1];

        $r4 = virtualinvoke $r4.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r5);

        $r4 = virtualinvoke $r4.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>($r4);

        $r5 = $r2;

        r6 = new org.apache.commons.math3.dfp.Dfp;

        specialinvoke r6.<org.apache.commons.math3.dfp.Dfp: void <init>(org.apache.commons.math3.dfp.Dfp)>($r2);

        i0 = 2;

     label1:
        if i0 >= 90 goto label3;

        r3 = virtualinvoke r3.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>($r4);

        $r2 = virtualinvoke r3.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp negate()>();

        r3 = $r2;

        $i1 = i0 + -1;

        $i1 = $i1 * i0;

        $r7 = virtualinvoke $r5.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(int)>($i1);

        $r5 = $r7;

        $r2 = virtualinvoke $r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>($r7);

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r2);

        $r1 = $r2;

        $z0 = virtualinvoke $r2.<org.apache.commons.math3.dfp.Dfp: boolean equals(java.lang.Object)>(r6);

        if $z0 == 0 goto label2;

        return $r2;

     label2:
        r6 = new org.apache.commons.math3.dfp.Dfp;

        specialinvoke r6.<org.apache.commons.math3.dfp.Dfp: void <init>(org.apache.commons.math3.dfp.Dfp)>($r2);

        i0 = i0 + 2;

        goto label1;

     label3:
        return $r1;
    }
    public static org.apache.commons.math3.dfp.Dfp exp(org.apache.commons.math3.dfp.Dfp)
    {
        org.apache.commons.math3.dfp.Dfp $r0, $r1, $r2;
        int $i0;
        org.apache.commons.math3.dfp.DfpField $r3;
        org.apache.commons.math3.dfp.Dfp[] $r4;

        $r0 := @parameter0: org.apache.commons.math3.dfp.Dfp;

        $r1 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp rint()>();

        $r2 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp subtract(org.apache.commons.math3.dfp.Dfp)>($r1);

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: int intValue()>();

        if $i0 <= 2147483646 goto label1;

        $r0 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(byte,byte)>(1, 1);

        return $r0;

     label1:
        if $i0 >= -2147483646 goto label2;

        $r0 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance()>();

        return $r0;

     label2:
        $r3 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField getField()>();

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.dfp.DfpField: org.apache.commons.math3.dfp.Dfp[] getESplit()>();

        $r0 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp splitPow(org.apache.commons.math3.dfp.Dfp[],int)>($r4, $i0);

        $r2 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp expInternal(org.apache.commons.math3.dfp.Dfp)>($r2);

        $r0 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>($r2);

        return $r0;
    }
    protected static org.apache.commons.math3.dfp.Dfp expInternal(org.apache.commons.math3.dfp.Dfp)
    {
        org.apache.commons.math3.dfp.Dfp $r0, $r1, r2, $r3, $r4, r5, $r6;
        int i0;
        boolean $z0;

        $r0 := @parameter0: org.apache.commons.math3.dfp.Dfp;

        $r1 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getOne()>();

        r2 = $r1;

        $r3 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getOne()>();

        $r4 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getOne()>();

        r5 = new org.apache.commons.math3.dfp.Dfp;

        specialinvoke r5.<org.apache.commons.math3.dfp.Dfp: void <init>(org.apache.commons.math3.dfp.Dfp)>($r1);

        i0 = 1;

     label1:
        if i0 >= 90 goto label3;

        $r1 = virtualinvoke $r3.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>($r0);

        $r3 = $r1;

        $r6 = virtualinvoke $r4.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(int)>(i0);

        $r4 = $r6;

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>($r6);

        $r1 = virtualinvoke r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r1);

        r2 = $r1;

        $z0 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: boolean equals(java.lang.Object)>(r5);

        if $z0 == 0 goto label2;

        return $r1;

     label2:
        r5 = new org.apache.commons.math3.dfp.Dfp;

        specialinvoke r5.<org.apache.commons.math3.dfp.Dfp: void <init>(org.apache.commons.math3.dfp.Dfp)>($r1);

        i0 = i0 + 1;

        goto label1;

     label3:
        return r2;
    }
    public static org.apache.commons.math3.dfp.Dfp log(org.apache.commons.math3.dfp.Dfp)
    {
        org.apache.commons.math3.dfp.Dfp r0, $r1, $r3;
        int i0, $i1, $i2;
        boolean $z0;
        org.apache.commons.math3.dfp.DfpField $r2;
        org.apache.commons.math3.dfp.Dfp[] $r4, r5, $r8;
        java.lang.StringBuilder $r6;
        java.lang.String $r7;

        r0 := @parameter0: org.apache.commons.math3.dfp.Dfp;

        i0 = 0;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getZero()>();

        $z0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label1;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getZero()>();

        $z0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: boolean lessThan(org.apache.commons.math3.dfp.Dfp)>($r1);

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: boolean isNaN()>();

        if $z0 == 0 goto label2;

     label1:
        $r2 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField getField()>();

        virtualinvoke $r2.<org.apache.commons.math3.dfp.DfpField: void setIEEEFlagsBits(int)>(1);

        $r1 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(byte,byte)>(1, 3);

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)>(1, "ln", r0, $r1);

        return r0;

     label2:
        $i1 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: int classify()>();

        if $i1 == 1 goto label7;

        $r1 = new org.apache.commons.math3.dfp.Dfp;

        specialinvoke $r1.<org.apache.commons.math3.dfp.Dfp: void <init>(org.apache.commons.math3.dfp.Dfp)>(r0);

        $i1 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: int log10K()>();

        $r3 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(int)>(10000);

        $r3 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp pow(org.apache.commons.math3.dfp.Dfp,int)>($r3, $i1);

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(org.apache.commons.math3.dfp.Dfp)>($r3);

        $r3 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp floor()>();

        $i2 = virtualinvoke $r3.<org.apache.commons.math3.dfp.Dfp: int intValue()>();

     label3:
        if $i2 <= 2 goto label4;

        $i2 = $i2 >> 1;

        i0 = i0 + 1;

        goto label3;

     label4:
        $r4 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp[] split(org.apache.commons.math3.dfp.Dfp)>($r1);

        r5 = newarray (org.apache.commons.math3.dfp.Dfp)[2];

        $r1 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getTwo()>();

        $r1 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp pow(org.apache.commons.math3.dfp.Dfp,int)>($r1, i0);

        r5[0] = $r1;

        $r1 = $r4[0];

        $r3 = r5[0];

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(org.apache.commons.math3.dfp.Dfp)>($r3);

        $r4[0] = $r1;

        $r1 = $r4[1];

        $r3 = r5[0];

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(org.apache.commons.math3.dfp.Dfp)>($r3);

        $r4[1] = $r1;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(java.lang.String)>("1.33333");

        r5[0] = $r1;

     label5:
        $r1 = $r4[0];

        $r3 = $r4[1];

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r3);

        $r3 = r5[0];

        $z0 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: boolean greaterThan(org.apache.commons.math3.dfp.Dfp)>($r3);

        if $z0 == 0 goto label6;

        $r1 = $r4[0];

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(int)>(2);

        $r4[0] = $r1;

        $r1 = $r4[1];

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(int)>(2);

        $r4[1] = $r1;

        i0 = i0 + 1;

        goto label5;

     label6:
        r5 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp[] logInternal(org.apache.commons.math3.dfp.Dfp[])>($r4);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $i2 = $i1 * 4;

        i0 = $i2 + i0;

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r1 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(java.lang.String)>($r7);

        $r4[0] = $r1;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getZero()>();

        $r4[1] = $r1;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField getField()>();

        $r8 = virtualinvoke $r2.<org.apache.commons.math3.dfp.DfpField: org.apache.commons.math3.dfp.Dfp[] getLn2Split()>();

        $r8 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp[] splitMult(org.apache.commons.math3.dfp.Dfp[],org.apache.commons.math3.dfp.Dfp[])>($r8, $r4);

        $r1 = r5[0];

        $r3 = $r8[0];

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r3);

        r5[0] = $r1;

        $r1 = r5[1];

        $r3 = $r8[1];

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r3);

        r5[1] = $r1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        i0 = $i1 * 4;

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r1 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(java.lang.String)>($r7);

        $r4[0] = $r1;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getZero()>();

        $r4[1] = $r1;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField getField()>();

        $r8 = virtualinvoke $r2.<org.apache.commons.math3.dfp.DfpField: org.apache.commons.math3.dfp.Dfp[] getLn5Split()>();

        $r4 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp[] splitMult(org.apache.commons.math3.dfp.Dfp[],org.apache.commons.math3.dfp.Dfp[])>($r8, $r4);

        $r1 = r5[0];

        $r3 = $r4[0];

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r3);

        r5[0] = $r1;

        $r1 = r5[1];

        $r3 = $r4[1];

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r3);

        r5[1] = $r1;

        $r1 = r5[0];

        $r3 = r5[1];

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r3);

        r0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r1);

     label7:
        return r0;
    }
    protected static org.apache.commons.math3.dfp.Dfp[] logInternal(org.apache.commons.math3.dfp.Dfp[])
    {
        org.apache.commons.math3.dfp.Dfp[] $r0;
        org.apache.commons.math3.dfp.Dfp $r1, $r2, $r3, r4, $r5;
        int i0, i1;
        boolean $z0;

        $r0 := @parameter0: org.apache.commons.math3.dfp.Dfp[];

        $r1 = $r0[0];

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(int)>(4);

        $r2 = $r0[1];

        $r2 = virtualinvoke $r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(int)>(4);

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r2);

        $r2 = $r0[0];

        $r2 = virtualinvoke $r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(java.lang.String)>("-0.25");

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r2);

        $r3 = $r0[0];

        $r3 = virtualinvoke $r3.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(java.lang.String)>("0.25");

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r3);

        $r2 = virtualinvoke $r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(org.apache.commons.math3.dfp.Dfp)>($r1);

        $r1 = new org.apache.commons.math3.dfp.Dfp;

        specialinvoke $r1.<org.apache.commons.math3.dfp.Dfp: void <init>(org.apache.commons.math3.dfp.Dfp)>($r2);

        r4 = new org.apache.commons.math3.dfp.Dfp;

        specialinvoke r4.<org.apache.commons.math3.dfp.Dfp: void <init>(org.apache.commons.math3.dfp.Dfp)>($r2);

        $r3 = new org.apache.commons.math3.dfp.Dfp;

        specialinvoke $r3.<org.apache.commons.math3.dfp.Dfp: void <init>(org.apache.commons.math3.dfp.Dfp)>($r1);

        i0 = 1;

        i1 = 0;

     label1:
        if i1 >= 10000 goto label2;

        r4 = virtualinvoke r4.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>($r2);

        $r5 = virtualinvoke r4.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>($r2);

        r4 = $r5;

        i0 = i0 + 2;

        $r5 = virtualinvoke $r5.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(int)>(i0);

        $r5 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r5);

        $r1 = $r5;

        $z0 = virtualinvoke $r5.<org.apache.commons.math3.dfp.Dfp: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label3;

     label2:
        $r2 = $r0[0];

        $r2 = virtualinvoke $r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getTwo()>();

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>($r2);

        $r0 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp[] split(org.apache.commons.math3.dfp.Dfp)>($r1);

        return $r0;

     label3:
        $r3 = new org.apache.commons.math3.dfp.Dfp;

        specialinvoke $r3.<org.apache.commons.math3.dfp.Dfp: void <init>(org.apache.commons.math3.dfp.Dfp)>($r5);

        i1 = i1 + 1;

        goto label1;
    }
    public static org.apache.commons.math3.dfp.Dfp pow(org.apache.commons.math3.dfp.Dfp, int)
    {
        org.apache.commons.math3.dfp.Dfp $r0, r1, r2, r3;
        int i0, $i1, i2;
        boolean z0;

        $r0 := @parameter0: org.apache.commons.math3.dfp.Dfp;

        $i1 := @parameter1: int;

        z0 = 0;

        r1 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getOne()>();

        r2 = r1;

        if $i1 != 0 goto label1;

        return r1;

     label1:
        if $i1 >= 0 goto label2;

        z0 = 1;

        $i1 = neg $i1;

     label2:
        r3 = new org.apache.commons.math3.dfp.Dfp;

        specialinvoke r3.<org.apache.commons.math3.dfp.Dfp: void <init>(org.apache.commons.math3.dfp.Dfp)>($r0);

        i2 = 1;

     label3:
        r1 = new org.apache.commons.math3.dfp.Dfp;

        specialinvoke r1.<org.apache.commons.math3.dfp.Dfp: void <init>(org.apache.commons.math3.dfp.Dfp)>(r3);

        i0 = i2;

        r3 = virtualinvoke r3.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>(r3);

        i2 = i2 * 2;

        if $i1 > i2 goto label3;

        $i1 = $i1 - i0;

        r1 = virtualinvoke r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>(r1);

        r2 = r1;

        if $i1 >= 1 goto label2;

        if z0 == 0 goto label4;

        r2 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getOne()>();

        r2 = virtualinvoke r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(org.apache.commons.math3.dfp.Dfp)>(r1);

     label4:
        $r0 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>(r2);

        return $r0;
    }
    public static org.apache.commons.math3.dfp.Dfp pow(org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp)
    {
        org.apache.commons.math3.dfp.Dfp $r0, r1, $r3, $r4, $r5, $r6, $r7;
        org.apache.commons.math3.dfp.DfpField $r2;
        int $i0, $i1;
        boolean z0, $z1;
        org.apache.commons.math3.dfp.Dfp[] $r8;

        r1 := @parameter0: org.apache.commons.math3.dfp.Dfp;

        $r0 := @parameter1: org.apache.commons.math3.dfp.Dfp;

        $r2 = virtualinvoke r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField getField()>();

        $i0 = virtualinvoke $r2.<org.apache.commons.math3.dfp.DfpField: int getRadixDigits()>();

        $r2 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField getField()>();

        $i1 = virtualinvoke $r2.<org.apache.commons.math3.dfp.DfpField: int getRadixDigits()>();

        if $i0 == $i1 goto label01;

        $r2 = virtualinvoke r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField getField()>();

        virtualinvoke $r2.<org.apache.commons.math3.dfp.DfpField: void setIEEEFlagsBits(int)>(1);

        $r0 = virtualinvoke r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getZero()>();

        $r0 = virtualinvoke r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r0);

        $r0.<org.apache.commons.math3.dfp.Dfp: byte nans> = 3;

        r1 = virtualinvoke r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)>(1, "pow", r1, $r0);

        return r1;

     label01:
        $r3 = virtualinvoke r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getZero()>();

        $r4 = virtualinvoke r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getOne()>();

        $r5 = virtualinvoke r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getTwo()>();

        z0 = 0;

        $z1 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label02;

        r1 = virtualinvoke r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r4);

        return r1;

     label02:
        $z1 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label03;

        z0 = virtualinvoke r1.<org.apache.commons.math3.dfp.Dfp: boolean isNaN()>();

        if z0 == 0 goto label28;

        $r2 = virtualinvoke r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField getField()>();

        virtualinvoke $r2.<org.apache.commons.math3.dfp.DfpField: void setIEEEFlagsBits(int)>(1);

        r1 = virtualinvoke r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)>(1, "pow", r1, r1);

        return r1;

     label03:
        $z1 = virtualinvoke r1.<org.apache.commons.math3.dfp.Dfp: boolean isNaN()>();

        if $z1 != 0 goto label04;

        $z1 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: boolean isNaN()>();

        if $z1 == 0 goto label05;

     label04:
        $r2 = virtualinvoke r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField getField()>();

        virtualinvoke $r2.<org.apache.commons.math3.dfp.DfpField: void setIEEEFlagsBits(int)>(1);

        $r0 = virtualinvoke r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(byte,byte)>(1, 3);

        r1 = virtualinvoke r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)>(1, "pow", r1, $r0);

        return r1;

     label05:
        $z1 = virtualinvoke r1.<org.apache.commons.math3.dfp.Dfp: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label11;

        $r4 = staticinvoke <org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp copysign(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)>($r4, r1);

        z0 = virtualinvoke $r4.<org.apache.commons.math3.dfp.Dfp: boolean greaterThan(org.apache.commons.math3.dfp.Dfp)>($r3);

        if z0 == 0 goto label07;

        z0 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: boolean greaterThan(org.apache.commons.math3.dfp.Dfp)>($r3);

        if z0 == 0 goto label06;

        r1 = virtualinvoke r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r3);

        return r1;

     label06:
        $r0 = virtualinvoke r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(byte,byte)>(1, 1);

        r1 = virtualinvoke r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r0);

        return r1;

     label07:
        $i0 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: int classify()>();

        if $i0 != 0 goto label09;

        $r4 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp rint()>();

        z0 = virtualinvoke $r4.<org.apache.commons.math3.dfp.Dfp: boolean equals(java.lang.Object)>($r0);

        if z0 == 0 goto label09;

        $r5 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp remainder(org.apache.commons.math3.dfp.Dfp)>($r5);

        z0 = virtualinvoke $r5.<org.apache.commons.math3.dfp.Dfp: boolean equals(java.lang.Object)>($r3);

        if z0 != 0 goto label09;

        z0 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: boolean greaterThan(org.apache.commons.math3.dfp.Dfp)>($r3);

        if z0 == 0 goto label08;

        $r0 = virtualinvoke $r3.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp negate()>();

        r1 = virtualinvoke r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r0);

        return r1;

     label08:
        $r0 = virtualinvoke r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(byte,byte)>(-1, 1);

        r1 = virtualinvoke r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r0);

        return r1;

     label09:
        z0 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: boolean greaterThan(org.apache.commons.math3.dfp.Dfp)>($r3);

        if z0 == 0 goto label10;

        r1 = virtualinvoke r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r3);

        return r1;

     label10:
        $r0 = virtualinvoke r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(byte,byte)>(1, 1);

        r1 = virtualinvoke r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r0);

        return r1;

     label11:
        $z1 = virtualinvoke r1.<org.apache.commons.math3.dfp.Dfp: boolean lessThan(org.apache.commons.math3.dfp.Dfp)>($r3);

        if $z1 == 0 goto label12;

        r1 = virtualinvoke r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp negate()>();

        z0 = 1;

     label12:
        $z1 = virtualinvoke r1.<org.apache.commons.math3.dfp.Dfp: boolean greaterThan(org.apache.commons.math3.dfp.Dfp)>($r4);

        if $z1 == 0 goto label14;

        $i0 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: int classify()>();

        if $i0 != 1 goto label14;

        z0 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: boolean greaterThan(org.apache.commons.math3.dfp.Dfp)>($r3);

        if z0 == 0 goto label13;

        return $r0;

     label13:
        r1 = virtualinvoke r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r3);

        return r1;

     label14:
        $z1 = virtualinvoke r1.<org.apache.commons.math3.dfp.Dfp: boolean lessThan(org.apache.commons.math3.dfp.Dfp)>($r4);

        if $z1 == 0 goto label16;

        $i0 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: int classify()>();

        if $i0 != 1 goto label16;

        z0 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: boolean greaterThan(org.apache.commons.math3.dfp.Dfp)>($r3);

        if z0 == 0 goto label15;

        r1 = virtualinvoke r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r3);

        return r1;

     label15:
        $r0 = staticinvoke <org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp copysign(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)>($r0, $r4);

        r1 = virtualinvoke r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r0);

        return r1;

     label16:
        $z1 = virtualinvoke r1.<org.apache.commons.math3.dfp.Dfp: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label17;

        $i0 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: int classify()>();

        if $i0 != 1 goto label17;

        $r2 = virtualinvoke r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField getField()>();

        virtualinvoke $r2.<org.apache.commons.math3.dfp.DfpField: void setIEEEFlagsBits(int)>(1);

        $r0 = virtualinvoke r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(byte,byte)>(1, 3);

        r1 = virtualinvoke r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)>(1, "pow", r1, $r0);

        return r1;

     label17:
        $i0 = virtualinvoke r1.<org.apache.commons.math3.dfp.Dfp: int classify()>();

        if $i0 != 1 goto label22;

        if z0 == 0 goto label21;

        $i0 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: int classify()>();

        if $i0 != 0 goto label19;

        $r4 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp rint()>();

        z0 = virtualinvoke $r4.<org.apache.commons.math3.dfp.Dfp: boolean equals(java.lang.Object)>($r0);

        if z0 == 0 goto label19;

        $r5 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp remainder(org.apache.commons.math3.dfp.Dfp)>($r5);

        z0 = virtualinvoke $r5.<org.apache.commons.math3.dfp.Dfp: boolean equals(java.lang.Object)>($r3);

        if z0 != 0 goto label19;

        z0 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: boolean greaterThan(org.apache.commons.math3.dfp.Dfp)>($r3);

        if z0 == 0 goto label18;

        $r0 = virtualinvoke r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(byte,byte)>(-1, 1);

        r1 = virtualinvoke r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r0);

        return r1;

     label18:
        $r0 = virtualinvoke $r3.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp negate()>();

        r1 = virtualinvoke r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r0);

        return r1;

     label19:
        z0 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: boolean greaterThan(org.apache.commons.math3.dfp.Dfp)>($r3);

        if z0 == 0 goto label20;

        $r0 = virtualinvoke r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(byte,byte)>(1, 1);

        r1 = virtualinvoke r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r0);

        return r1;

     label20:
        r1 = virtualinvoke r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r3);

        return r1;

     label21:
        z0 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: boolean greaterThan(org.apache.commons.math3.dfp.Dfp)>($r3);

        if z0 != 0 goto label28;

        r1 = virtualinvoke r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r3);

        return r1;

     label22:
        if z0 == 0 goto label23;

        $r4 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp rint()>();

        $z1 = virtualinvoke $r4.<org.apache.commons.math3.dfp.Dfp: boolean equals(java.lang.Object)>($r0);

        if $z1 != 0 goto label23;

        $r2 = virtualinvoke r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField getField()>();

        virtualinvoke $r2.<org.apache.commons.math3.dfp.DfpField: void setIEEEFlagsBits(int)>(1);

        $r0 = virtualinvoke r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(byte,byte)>(1, 3);

        r1 = virtualinvoke r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)>(1, "pow", r1, $r0);

        return r1;

     label23:
        $r4 = virtualinvoke r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(int)>(100000000);

        $z1 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: boolean lessThan(org.apache.commons.math3.dfp.Dfp)>($r4);

        if $z1 == 0 goto label27;

        $r4 = virtualinvoke r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(int)>(-100000000);

        $z1 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: boolean greaterThan(org.apache.commons.math3.dfp.Dfp)>($r4);

        if $z1 == 0 goto label27;

        $r4 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp rint()>();

        $i0 = virtualinvoke $r4.<org.apache.commons.math3.dfp.Dfp: int intValue()>();

        $r4 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp subtract(org.apache.commons.math3.dfp.Dfp)>($r4);

        $z1 = virtualinvoke $r4.<org.apache.commons.math3.dfp.Dfp: boolean unequal(org.apache.commons.math3.dfp.Dfp)>($r3);

        if $z1 == 0 goto label26;

        $r6 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp log(org.apache.commons.math3.dfp.Dfp)>(r1);

        $r4 = virtualinvoke $r4.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>($r6);

        $r2 = virtualinvoke r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField getField()>();

        $r6 = virtualinvoke $r2.<org.apache.commons.math3.dfp.DfpField: org.apache.commons.math3.dfp.Dfp getLn2()>();

        $r6 = virtualinvoke $r4.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(org.apache.commons.math3.dfp.Dfp)>($r6);

        $r6 = virtualinvoke $r6.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp rint()>();

        $r2 = virtualinvoke r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField getField()>();

        $r7 = virtualinvoke $r2.<org.apache.commons.math3.dfp.DfpField: org.apache.commons.math3.dfp.Dfp getLn2()>();

        $r7 = virtualinvoke $r6.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>($r7);

        $r4 = virtualinvoke $r4.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp subtract(org.apache.commons.math3.dfp.Dfp)>($r7);

        $r8 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp[] split(org.apache.commons.math3.dfp.Dfp)>(r1);

        $r7 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp splitPow(org.apache.commons.math3.dfp.Dfp[],int)>($r8, $i0);

        $i0 = virtualinvoke $r6.<org.apache.commons.math3.dfp.Dfp: int intValue()>();

        $r6 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp pow(org.apache.commons.math3.dfp.Dfp,int)>($r5, $i0);

        $r6 = virtualinvoke $r7.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>($r6);

        $r4 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp exp(org.apache.commons.math3.dfp.Dfp)>($r4);

        $r4 = virtualinvoke $r6.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>($r4);

     label24:
        if z0 == 0 goto label25;

        $r6 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp rint()>();

        z0 = virtualinvoke $r6.<org.apache.commons.math3.dfp.Dfp: boolean equals(java.lang.Object)>($r0);

        if z0 == 0 goto label25;

        $r0 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp remainder(org.apache.commons.math3.dfp.Dfp)>($r5);

        z0 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: boolean equals(java.lang.Object)>($r3);

        if z0 != 0 goto label25;

        $r4 = virtualinvoke $r4.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp negate()>();

     label25:
        r1 = virtualinvoke r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r4);

        return r1;

     label26:
        $r8 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp[] split(org.apache.commons.math3.dfp.Dfp)>(r1);

        $r4 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp splitPow(org.apache.commons.math3.dfp.Dfp[],int)>($r8, $i0);

        goto label24;

     label27:
        $r4 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp log(org.apache.commons.math3.dfp.Dfp)>(r1);

        $r4 = virtualinvoke $r4.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>($r0);

        $r4 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp exp(org.apache.commons.math3.dfp.Dfp)>($r4);

        goto label24;

     label28:
        return r1;
    }
    public static org.apache.commons.math3.dfp.Dfp sin(org.apache.commons.math3.dfp.Dfp)
    {
        org.apache.commons.math3.dfp.Dfp $r0, $r3, $r4, $r5, $r6;
        org.apache.commons.math3.dfp.Dfp[] r1, $r7;
        org.apache.commons.math3.dfp.DfpField $r2;
        boolean z0, $z1;

        $r0 := @parameter0: org.apache.commons.math3.dfp.Dfp;

        $r2 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField getField()>();

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.dfp.DfpField: org.apache.commons.math3.dfp.Dfp getPi()>();

        $r2 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField getField()>();

        $r4 = virtualinvoke $r2.<org.apache.commons.math3.dfp.DfpField: org.apache.commons.math3.dfp.Dfp getZero()>();

        z0 = 0;

        $r5 = virtualinvoke $r3.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(int)>(2);

        $r6 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp remainder(org.apache.commons.math3.dfp.Dfp)>($r5);

        $r5 = $r6;

        $z1 = virtualinvoke $r6.<org.apache.commons.math3.dfp.Dfp: boolean lessThan(org.apache.commons.math3.dfp.Dfp)>($r4);

        if $z1 == 0 goto label1;

        $r5 = virtualinvoke $r6.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp negate()>();

        z0 = 1;

     label1:
        $r4 = virtualinvoke $r3.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(int)>(2);

        $z1 = virtualinvoke $r5.<org.apache.commons.math3.dfp.Dfp: boolean greaterThan(org.apache.commons.math3.dfp.Dfp)>($r4);

        if $z1 == 0 goto label2;

        $r5 = virtualinvoke $r3.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp subtract(org.apache.commons.math3.dfp.Dfp)>($r5);

     label2:
        $r3 = virtualinvoke $r3.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(int)>(4);

        $z1 = virtualinvoke $r5.<org.apache.commons.math3.dfp.Dfp: boolean lessThan(org.apache.commons.math3.dfp.Dfp)>($r3);

        if $z1 == 0 goto label5;

        r1 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp[] split(org.apache.commons.math3.dfp.Dfp)>($r5);

        $r3 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp sinInternal(org.apache.commons.math3.dfp.Dfp[])>(r1);

     label3:
        if z0 == 0 goto label4;

        $r3 = virtualinvoke $r3.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp negate()>();

     label4:
        $r0 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r3);

        return $r0;

     label5:
        r1 = newarray (org.apache.commons.math3.dfp.Dfp)[2];

        $r2 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField getField()>();

        $r7 = virtualinvoke $r2.<org.apache.commons.math3.dfp.DfpField: org.apache.commons.math3.dfp.Dfp[] getPiSplit()>();

        $r3 = $r7[0];

        $r3 = virtualinvoke $r3.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(int)>(2);

        $r3 = virtualinvoke $r3.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp subtract(org.apache.commons.math3.dfp.Dfp)>($r5);

        r1[0] = $r3;

        $r3 = $r7[1];

        $r3 = virtualinvoke $r3.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(int)>(2);

        r1[1] = $r3;

        $r3 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp cosInternal(org.apache.commons.math3.dfp.Dfp[])>(r1);

        goto label3;
    }
    protected static org.apache.commons.math3.dfp.Dfp sinInternal(org.apache.commons.math3.dfp.Dfp[])
    {
        org.apache.commons.math3.dfp.Dfp[] $r0;
        org.apache.commons.math3.dfp.Dfp $r1, $r2, $r3, r4, $r5, r6, $r7;
        int i0, $i1;
        boolean $z0;

        $r0 := @parameter0: org.apache.commons.math3.dfp.Dfp[];

        $r1 = $r0[0];

        $r2 = $r0[1];

        $r3 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r2);

        $r1 = $r3;

        $r2 = virtualinvoke $r3.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>($r3);

        r4 = $r3;

        $r5 = $r0[0];

        $r5 = virtualinvoke $r5.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getOne()>();

        r6 = new org.apache.commons.math3.dfp.Dfp;

        specialinvoke r6.<org.apache.commons.math3.dfp.Dfp: void <init>(org.apache.commons.math3.dfp.Dfp)>($r3);

        i0 = 3;

     label1:
        if i0 >= 90 goto label3;

        r4 = virtualinvoke r4.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>($r2);

        $r3 = virtualinvoke r4.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp negate()>();

        r4 = $r3;

        $i1 = i0 + -1;

        $i1 = $i1 * i0;

        $r7 = virtualinvoke $r5.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(int)>($i1);

        $r5 = $r7;

        $r3 = virtualinvoke $r3.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>($r7);

        $r3 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r3);

        $r1 = $r3;

        $z0 = virtualinvoke $r3.<org.apache.commons.math3.dfp.Dfp: boolean equals(java.lang.Object)>(r6);

        if $z0 == 0 goto label2;

        return $r3;

     label2:
        r6 = new org.apache.commons.math3.dfp.Dfp;

        specialinvoke r6.<org.apache.commons.math3.dfp.Dfp: void <init>(org.apache.commons.math3.dfp.Dfp)>($r3);

        i0 = i0 + 2;

        goto label1;

     label3:
        return $r1;
    }
    protected static org.apache.commons.math3.dfp.Dfp[] split(org.apache.commons.math3.dfp.Dfp)
    {
        org.apache.commons.math3.dfp.Dfp $r0, $r2, $r3;
        org.apache.commons.math3.dfp.Dfp[] r1;
        int $i0;

        $r0 := @parameter0: org.apache.commons.math3.dfp.Dfp;

        r1 = newarray (org.apache.commons.math3.dfp.Dfp)[2];

        $i0 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: int getRadixDigits()>();

        $i0 = $i0 / 2;

        $r2 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp power10K(int)>($i0);

        $r2 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>($r2);

        $r3 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r2);

        $r2 = virtualinvoke $r3.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp subtract(org.apache.commons.math3.dfp.Dfp)>($r2);

        r1[0] = $r2;

        $r2 = r1[0];

        $r0 = virtualinvoke $r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp subtract(org.apache.commons.math3.dfp.Dfp)>($r2);

        r1[1] = $r0;

        return r1;
    }
    protected static org.apache.commons.math3.dfp.Dfp[] split(org.apache.commons.math3.dfp.DfpField, java.lang.String)
    {
        org.apache.commons.math3.dfp.DfpField $r0;
        java.lang.String $r1, $r4;
        char[] r2;
        org.apache.commons.math3.dfp.Dfp[] r3;
        boolean z0;
        int i0, i1, $i2, $i3;
        char $c4;
        org.apache.commons.math3.dfp.Dfp $r5;

        $r0 := @parameter0: org.apache.commons.math3.dfp.DfpField;

        $r1 := @parameter1: java.lang.String;

        r3 = newarray (org.apache.commons.math3.dfp.Dfp)[2];

        z0 = 1;

        i0 = 0;

        i1 = 0;

        $i2 = virtualinvoke $r1.<java.lang.String: int length()>();

        r2 = newarray (char)[$i2];

        $i2 = 0;

     label1:
        $i3 = lengthof r2;

        if $i2 >= $i3 goto label4;

        $c4 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i2);

        r2[$i2] = $c4;

        $c4 = r2[$i2];

        if $c4 < 49 goto label2;

        $c4 = r2[$i2];

        if $c4 > 57 goto label2;

        z0 = 0;

     label2:
        $c4 = r2[$i2];

        if $c4 != 46 goto label3;

        $i3 = 400 - i1;

        $i3 = $i3 % 4;

        i1 = i1 + $i3;

        z0 = 0;

     label3:
        $i3 = virtualinvoke $r0.<org.apache.commons.math3.dfp.DfpField: int getRadixDigits()>();

        $i3 = $i3 / 2;

        $i3 = $i3 * 4;

        if i1 != $i3 goto label7;

        i0 = $i2;

     label4:
        $r4 = new java.lang.String;

        specialinvoke $r4.<java.lang.String: void <init>(char[],int,int)>(r2, 0, i0);

        $r5 = virtualinvoke $r0.<org.apache.commons.math3.dfp.DfpField: org.apache.commons.math3.dfp.Dfp newDfp(java.lang.String)>($r4);

        r3[0] = $r5;

        i1 = 0;

     label5:
        $i2 = lengthof r2;

        if i1 >= $i2 goto label9;

        $c4 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(i1);

        r2[i1] = $c4;

        $c4 = r2[i1];

        if $c4 < 48 goto label6;

        $c4 = r2[i1];

        if $c4 > 57 goto label6;

        if i1 >= i0 goto label6;

        r2[i1] = 48;

     label6:
        i1 = i1 + 1;

        goto label5;

     label7:
        $c4 = r2[$i2];

        if $c4 < 48 goto label8;

        $c4 = r2[$i2];

        if $c4 > 57 goto label8;

        if z0 != 0 goto label8;

        i1 = i1 + 1;

     label8:
        $i2 = $i2 + 1;

        goto label1;

     label9:
        $r1 = new java.lang.String;

        specialinvoke $r1.<java.lang.String: void <init>(char[])>(r2);

        $r5 = virtualinvoke $r0.<org.apache.commons.math3.dfp.DfpField: org.apache.commons.math3.dfp.Dfp newDfp(java.lang.String)>($r1);

        r3[1] = $r5;

        return r3;
    }
    protected static org.apache.commons.math3.dfp.Dfp[] splitDiv(org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[])
    {
        org.apache.commons.math3.dfp.Dfp[] $r0, $r1, r2;
        org.apache.commons.math3.dfp.Dfp $r3, $r4, $r5, $r6;

        $r0 := @parameter0: org.apache.commons.math3.dfp.Dfp[];

        $r1 := @parameter1: org.apache.commons.math3.dfp.Dfp[];

        r2 = newarray (org.apache.commons.math3.dfp.Dfp)[2];

        $r3 = $r0[0];

        $r4 = $r1[0];

        $r3 = virtualinvoke $r3.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(org.apache.commons.math3.dfp.Dfp)>($r4);

        r2[0] = $r3;

        $r3 = $r0[1];

        $r4 = $r1[0];

        $r3 = virtualinvoke $r3.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>($r4);

        $r4 = $r0[0];

        $r5 = $r1[1];

        $r4 = virtualinvoke $r4.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>($r5);

        $r3 = virtualinvoke $r3.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp subtract(org.apache.commons.math3.dfp.Dfp)>($r4);

        r2[1] = $r3;

        $r3 = r2[1];

        $r4 = $r1[0];

        $r5 = $r1[0];

        $r4 = virtualinvoke $r4.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>($r5);

        $r5 = $r1[0];

        $r6 = $r1[1];

        $r5 = virtualinvoke $r5.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>($r6);

        $r4 = virtualinvoke $r4.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r5);

        $r3 = virtualinvoke $r3.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(org.apache.commons.math3.dfp.Dfp)>($r4);

        r2[1] = $r3;

        return r2;
    }
    protected static org.apache.commons.math3.dfp.Dfp[] splitMult(org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[])
    {
        org.apache.commons.math3.dfp.Dfp[] $r0, $r1, r2;
        org.apache.commons.math3.dfp.Dfp $r3, $r4, $r5;
        int $i0;
        boolean $z0;

        $r0 := @parameter0: org.apache.commons.math3.dfp.Dfp[];

        $r1 := @parameter1: org.apache.commons.math3.dfp.Dfp[];

        r2 = newarray (org.apache.commons.math3.dfp.Dfp)[2];

        $r3 = $r0[0];

        $r3 = virtualinvoke $r3.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getZero()>();

        r2[1] = $r3;

        $r3 = $r0[0];

        $r4 = $r1[0];

        $r3 = virtualinvoke $r3.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>($r4);

        r2[0] = $r3;

        $r3 = r2[0];

        $i0 = virtualinvoke $r3.<org.apache.commons.math3.dfp.Dfp: int classify()>();

        if $i0 == 1 goto label2;

        $r3 = r2[0];

        $r4 = r2[1];

        $z0 = virtualinvoke $r3.<org.apache.commons.math3.dfp.Dfp: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label1;

        return r2;

     label1:
        $r3 = $r0[0];

        $r4 = $r1[1];

        $r3 = virtualinvoke $r3.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>($r4);

        $r4 = $r0[1];

        $r5 = $r1[0];

        $r4 = virtualinvoke $r4.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>($r5);

        $r3 = virtualinvoke $r3.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r4);

        $r4 = $r0[1];

        $r5 = $r1[1];

        $r4 = virtualinvoke $r4.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>($r5);

        $r3 = virtualinvoke $r3.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r4);

        r2[1] = $r3;

     label2:
        return r2;
    }
    protected static org.apache.commons.math3.dfp.Dfp splitPow(org.apache.commons.math3.dfp.Dfp[], int)
    {
        org.apache.commons.math3.dfp.Dfp[] $r0, r1, r2, $r5;
        int i0, $i1, i2;
        boolean z0;
        org.apache.commons.math3.dfp.Dfp $r3, $r4;

        $r0 := @parameter0: org.apache.commons.math3.dfp.Dfp[];

        $i1 := @parameter1: int;

        z0 = 0;

        r1 = newarray (org.apache.commons.math3.dfp.Dfp)[2];

        r2 = newarray (org.apache.commons.math3.dfp.Dfp)[2];

        $r3 = $r0[0];

        $r3 = virtualinvoke $r3.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getOne()>();

        r2[0] = $r3;

        $r3 = $r0[0];

        $r3 = virtualinvoke $r3.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getZero()>();

        r2[1] = $r3;

        if $i1 != 0 goto label1;

        $r3 = r2[0];

        $r4 = r2[1];

        $r3 = virtualinvoke $r3.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r4);

        return $r3;

     label1:
        if $i1 >= 0 goto label2;

        z0 = 1;

        $i1 = neg $i1;

     label2:
        $r3 = new org.apache.commons.math3.dfp.Dfp;

        $r4 = $r0[0];

        specialinvoke $r3.<org.apache.commons.math3.dfp.Dfp: void <init>(org.apache.commons.math3.dfp.Dfp)>($r4);

        r1[0] = $r3;

        $r3 = new org.apache.commons.math3.dfp.Dfp;

        $r4 = $r0[1];

        specialinvoke $r3.<org.apache.commons.math3.dfp.Dfp: void <init>(org.apache.commons.math3.dfp.Dfp)>($r4);

        r1[1] = $r3;

        i2 = 1;

     label3:
        i0 = i2;

        i2 = i2 * 2;

        if i2 <= $i1 goto label5;

        $i1 = $i1 - i0;

        $r5 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp[] splitMult(org.apache.commons.math3.dfp.Dfp[],org.apache.commons.math3.dfp.Dfp[])>(r2, r1);

        r2 = $r5;

        if $i1 >= 1 goto label2;

        $r3 = $r5[0];

        $r4 = $r5[1];

        $r3 = virtualinvoke $r3.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r4);

        $r5[0] = $r3;

        if z0 == 0 goto label4;

        $r3 = $r0[0];

        $r3 = virtualinvoke $r3.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getOne()>();

        $r4 = $r5[0];

        $r3 = virtualinvoke $r3.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(org.apache.commons.math3.dfp.Dfp)>($r4);

        $r5[0] = $r3;

     label4:
        $r3 = $r5[0];

        return $r3;

     label5:
        r1 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp[] splitMult(org.apache.commons.math3.dfp.Dfp[],org.apache.commons.math3.dfp.Dfp[])>(r1, r1);

        goto label3;
    }
    public static org.apache.commons.math3.dfp.Dfp tan(org.apache.commons.math3.dfp.Dfp)
    {
        org.apache.commons.math3.dfp.Dfp $r0, $r1;

        $r0 := @parameter0: org.apache.commons.math3.dfp.Dfp;

        $r1 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp sin(org.apache.commons.math3.dfp.Dfp)>($r0);

        $r0 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp cos(org.apache.commons.math3.dfp.Dfp)>($r0);

        $r0 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(org.apache.commons.math3.dfp.Dfp)>($r0);

        return $r0;
    }
