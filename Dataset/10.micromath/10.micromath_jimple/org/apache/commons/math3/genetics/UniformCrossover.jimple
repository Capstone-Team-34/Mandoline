org.apache.commons.math3.genetics.UniformCrossover extends java.lang.Object implements org.apache.commons.math3.genetics.CrossoverPolicy
private final double ratio
    public void <init>(double) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.genetics.UniformCrossover r0;
        double $d0;
        org.apache.commons.math3.exception.util.LocalizedFormats $r1;
        byte $b0;
        org.apache.commons.math3.exception.OutOfRangeException $r2;
        java.lang.Double $r3, $r4, $r5;

        r0 := @this: org.apache.commons.math3.genetics.UniformCrossover;

        $d0 := @parameter0: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $b0 = $d0 cmpg 0.0;

        if $b0 < 0 goto label1;

        $b0 = $d0 cmpl 1.0;

        if $b0 <= 0 goto label2;

     label1:
        $r2 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r1 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats CROSSOVER_RATE>;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        specialinvoke $r2.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)>($r1, $r3, $r4, $r5);

        throw $r2;

     label2:
        r0.<org.apache.commons.math3.genetics.UniformCrossover: double ratio> = $d0;

        return;
    }
    private org.apache.commons.math3.genetics.ChromosomePair mate(org.apache.commons.math3.genetics.AbstractListChromosome, org.apache.commons.math3.genetics.AbstractListChromosome) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.genetics.UniformCrossover r0;
        org.apache.commons.math3.genetics.AbstractListChromosome r1, r2;
        java.util.ArrayList r3, r4;
        double $d0, $d1;
        int $i0, $i1;
        org.apache.commons.math3.exception.DimensionMismatchException $r5;
        java.util.List $r6, $r7;
        org.apache.commons.math3.random.RandomGenerator $r8;
        byte $b2;
        java.lang.Object $r9;
        org.apache.commons.math3.genetics.ChromosomePair $r10;

        r0 := @this: org.apache.commons.math3.genetics.UniformCrossover;

        r1 := @parameter0: org.apache.commons.math3.genetics.AbstractListChromosome;

        r2 := @parameter1: org.apache.commons.math3.genetics.AbstractListChromosome;

        $i0 = virtualinvoke r1.<org.apache.commons.math3.genetics.AbstractListChromosome: int getLength()>();

        $i1 = virtualinvoke r2.<org.apache.commons.math3.genetics.AbstractListChromosome: int getLength()>();

        if $i0 == $i1 goto label1;

        $r5 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i1 = virtualinvoke r2.<org.apache.commons.math3.genetics.AbstractListChromosome: int getLength()>();

        specialinvoke $r5.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i1, $i0);

        throw $r5;

     label1:
        $r6 = virtualinvoke r1.<org.apache.commons.math3.genetics.AbstractListChromosome: java.util.List getRepresentation()>();

        $r7 = virtualinvoke r2.<org.apache.commons.math3.genetics.AbstractListChromosome: java.util.List getRepresentation()>();

        r3 = new java.util.ArrayList;

        specialinvoke r3.<java.util.ArrayList: void <init>(int)>($i0);

        r4 = new java.util.ArrayList;

        specialinvoke r4.<java.util.ArrayList: void <init>(int)>($i0);

        $r8 = staticinvoke <org.apache.commons.math3.genetics.GeneticAlgorithm: org.apache.commons.math3.random.RandomGenerator getRandomGenerator()>();

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label5;

        $d1 = interfaceinvoke $r8.<org.apache.commons.math3.random.RandomGenerator: double nextDouble()>();

        $d0 = r0.<org.apache.commons.math3.genetics.UniformCrossover: double ratio>;

        $b2 = $d1 cmpg $d0;

        if $b2 >= 0 goto label4;

        $r9 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>($i1);

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r9);

        $r9 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>($i1);

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r9);

     label3:
        $i1 = $i1 + 1;

        goto label2;

     label4:
        $r9 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>($i1);

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r9);

        $r9 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>($i1);

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r9);

        goto label3;

     label5:
        $r10 = new org.apache.commons.math3.genetics.ChromosomePair;

        r1 = virtualinvoke r1.<org.apache.commons.math3.genetics.AbstractListChromosome: org.apache.commons.math3.genetics.AbstractListChromosome newFixedLengthChromosome(java.util.List)>(r3);

        r2 = virtualinvoke r2.<org.apache.commons.math3.genetics.AbstractListChromosome: org.apache.commons.math3.genetics.AbstractListChromosome newFixedLengthChromosome(java.util.List)>(r4);

        specialinvoke $r10.<org.apache.commons.math3.genetics.ChromosomePair: void <init>(org.apache.commons.math3.genetics.Chromosome,org.apache.commons.math3.genetics.Chromosome)>(r1, r2);

        return $r10;
    }
    public org.apache.commons.math3.genetics.ChromosomePair crossover(org.apache.commons.math3.genetics.Chromosome, org.apache.commons.math3.genetics.Chromosome) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.genetics.UniformCrossover r0;
        org.apache.commons.math3.exception.util.LocalizedFormats $r1;
        org.apache.commons.math3.genetics.ChromosomePair $r2;
        org.apache.commons.math3.genetics.Chromosome $r3, $r4;
        boolean $z0;
        org.apache.commons.math3.exception.MathIllegalArgumentException $r5;
        java.lang.Object[] $r6;
        org.apache.commons.math3.genetics.AbstractListChromosome $r7, $r8;

        r0 := @this: org.apache.commons.math3.genetics.UniformCrossover;

        $r3 := @parameter0: org.apache.commons.math3.genetics.Chromosome;

        $r4 := @parameter1: org.apache.commons.math3.genetics.Chromosome;

        $z0 = $r3 instanceof org.apache.commons.math3.genetics.AbstractListChromosome;

        if $z0 == 0 goto label1;

        $z0 = $r4 instanceof org.apache.commons.math3.genetics.AbstractListChromosome;

        if $z0 != 0 goto label2;

     label1:
        $r5 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r1 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INVALID_FIXED_LENGTH_CHROMOSOME>;

        $r6 = newarray (java.lang.Object)[0];

        specialinvoke $r5.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r1, $r6);

        throw $r5;

     label2:
        $r7 = (org.apache.commons.math3.genetics.AbstractListChromosome) $r3;

        $r8 = (org.apache.commons.math3.genetics.AbstractListChromosome) $r4;

        $r2 = specialinvoke r0.<org.apache.commons.math3.genetics.UniformCrossover: org.apache.commons.math3.genetics.ChromosomePair mate(org.apache.commons.math3.genetics.AbstractListChromosome,org.apache.commons.math3.genetics.AbstractListChromosome)>($r7, $r8);

        return $r2;
    }
    public double getRatio()
    {
        org.apache.commons.math3.genetics.UniformCrossover r0;
        double d0;

        r0 := @this: org.apache.commons.math3.genetics.UniformCrossover;

        d0 = r0.<org.apache.commons.math3.genetics.UniformCrossover: double ratio>;

        return d0;
    }
