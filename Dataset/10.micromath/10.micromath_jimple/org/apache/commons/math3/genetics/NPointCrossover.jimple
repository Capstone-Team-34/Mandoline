org.apache.commons.math3.genetics.NPointCrossover extends java.lang.Object implements org.apache.commons.math3.genetics.CrossoverPolicy
private final int crossoverPoints
    public void <init>(int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.genetics.NPointCrossover r0;
        int $i0;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r1;
        java.lang.Integer $r2;

        r0 := @this: org.apache.commons.math3.genetics.NPointCrossover;

        $i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if $i0 > 0 goto label1;

        $r1 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r1.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(java.lang.Number)>($r2);

        throw $r1;

     label1:
        r0.<org.apache.commons.math3.genetics.NPointCrossover: int crossoverPoints> = $i0;

        return;
    }
    private org.apache.commons.math3.genetics.ChromosomePair mate(org.apache.commons.math3.genetics.AbstractListChromosome, org.apache.commons.math3.genetics.AbstractListChromosome) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.genetics.NPointCrossover r0;
        org.apache.commons.math3.genetics.AbstractListChromosome r1, r2;
        java.util.ArrayList r3, r4, r5, r13, r14;
        int i0, $i1, $i2, i3, i4, $i5;
        org.apache.commons.math3.exception.DimensionMismatchException $r6;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r7;
        java.lang.Integer $r8, $r9;
        java.util.List $r10, $r11;
        org.apache.commons.math3.random.RandomGenerator $r12;
        java.lang.Object $r15;
        org.apache.commons.math3.genetics.ChromosomePair $r16;

        r0 := @this: org.apache.commons.math3.genetics.NPointCrossover;

        r1 := @parameter0: org.apache.commons.math3.genetics.AbstractListChromosome;

        r2 := @parameter1: org.apache.commons.math3.genetics.AbstractListChromosome;

        $i1 = virtualinvoke r1.<org.apache.commons.math3.genetics.AbstractListChromosome: int getLength()>();

        $i2 = virtualinvoke r2.<org.apache.commons.math3.genetics.AbstractListChromosome: int getLength()>();

        if $i1 == $i2 goto label1;

        $r6 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i2 = virtualinvoke r2.<org.apache.commons.math3.genetics.AbstractListChromosome: int getLength()>();

        specialinvoke $r6.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i2, $i1);

        throw $r6;

     label1:
        $i2 = r0.<org.apache.commons.math3.genetics.NPointCrossover: int crossoverPoints>;

        if $i2 < $i1 goto label2;

        $r7 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $i2 = r0.<org.apache.commons.math3.genetics.NPointCrossover: int crossoverPoints>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        specialinvoke $r7.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r8, $r9, 0);

        throw $r7;

     label2:
        $r10 = virtualinvoke r1.<org.apache.commons.math3.genetics.AbstractListChromosome: java.util.List getRepresentation()>();

        $r11 = virtualinvoke r2.<org.apache.commons.math3.genetics.AbstractListChromosome: java.util.List getRepresentation()>();

        r3 = new java.util.ArrayList;

        specialinvoke r3.<java.util.ArrayList: void <init>(int)>($i1);

        r4 = new java.util.ArrayList;

        specialinvoke r4.<java.util.ArrayList: void <init>(int)>($i1);

        $r12 = staticinvoke <org.apache.commons.math3.genetics.GeneticAlgorithm: org.apache.commons.math3.random.RandomGenerator getRandomGenerator()>();

        r13 = r3;

        r14 = r4;

        $i2 = r0.<org.apache.commons.math3.genetics.NPointCrossover: int crossoverPoints>;

        i3 = 0;

        i4 = 0;

     label3:
        i0 = r0.<org.apache.commons.math3.genetics.NPointCrossover: int crossoverPoints>;

        if i4 >= i0 goto label6;

        i0 = i3 + 1;

        $i5 = $i1 - i3;

        $i5 = $i5 - $i2;

        $i5 = interfaceinvoke $r12.<org.apache.commons.math3.random.RandomGenerator: int nextInt(int)>($i5);

        i0 = i0 + $i5;

     label4:
        if i3 >= i0 goto label5;

        $r15 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>(i3);

        interfaceinvoke r13.<java.util.List: boolean add(java.lang.Object)>($r15);

        $r15 = interfaceinvoke $r11.<java.util.List: java.lang.Object get(int)>(i3);

        interfaceinvoke r14.<java.util.List: boolean add(java.lang.Object)>($r15);

        i3 = i3 + 1;

        goto label4;

     label5:
        r5 = r13;

        r13 = r14;

        r14 = r5;

        i3 = i0;

        i4 = i4 + 1;

        $i2 = $i2 + -1;

        goto label3;

     label6:
        $i2 = i3;

     label7:
        if $i2 >= $i1 goto label8;

        $r15 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>($i2);

        interfaceinvoke r13.<java.util.List: boolean add(java.lang.Object)>($r15);

        $r15 = interfaceinvoke $r11.<java.util.List: java.lang.Object get(int)>($i2);

        interfaceinvoke r14.<java.util.List: boolean add(java.lang.Object)>($r15);

        $i2 = $i2 + 1;

        goto label7;

     label8:
        $r16 = new org.apache.commons.math3.genetics.ChromosomePair;

        r1 = virtualinvoke r1.<org.apache.commons.math3.genetics.AbstractListChromosome: org.apache.commons.math3.genetics.AbstractListChromosome newFixedLengthChromosome(java.util.List)>(r3);

        r2 = virtualinvoke r2.<org.apache.commons.math3.genetics.AbstractListChromosome: org.apache.commons.math3.genetics.AbstractListChromosome newFixedLengthChromosome(java.util.List)>(r4);

        specialinvoke $r16.<org.apache.commons.math3.genetics.ChromosomePair: void <init>(org.apache.commons.math3.genetics.Chromosome,org.apache.commons.math3.genetics.Chromosome)>(r1, r2);

        return $r16;
    }
    public org.apache.commons.math3.genetics.ChromosomePair crossover(org.apache.commons.math3.genetics.Chromosome, org.apache.commons.math3.genetics.Chromosome) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.genetics.NPointCrossover r0;
        org.apache.commons.math3.exception.util.LocalizedFormats $r1;
        org.apache.commons.math3.genetics.ChromosomePair $r2;
        org.apache.commons.math3.genetics.Chromosome $r3, $r4;
        boolean $z0;
        org.apache.commons.math3.exception.MathIllegalArgumentException $r5;
        java.lang.Object[] $r6;
        org.apache.commons.math3.genetics.AbstractListChromosome $r7, $r8;

        r0 := @this: org.apache.commons.math3.genetics.NPointCrossover;

        $r3 := @parameter0: org.apache.commons.math3.genetics.Chromosome;

        $r4 := @parameter1: org.apache.commons.math3.genetics.Chromosome;

        $z0 = $r3 instanceof org.apache.commons.math3.genetics.AbstractListChromosome;

        if $z0 == 0 goto label1;

        $z0 = $r4 instanceof org.apache.commons.math3.genetics.AbstractListChromosome;

        if $z0 != 0 goto label2;

     label1:
        $r5 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r1 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INVALID_FIXED_LENGTH_CHROMOSOME>;

        $r6 = newarray (java.lang.Object)[0];

        specialinvoke $r5.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r1, $r6);

        throw $r5;

     label2:
        $r7 = (org.apache.commons.math3.genetics.AbstractListChromosome) $r3;

        $r8 = (org.apache.commons.math3.genetics.AbstractListChromosome) $r4;

        $r2 = specialinvoke r0.<org.apache.commons.math3.genetics.NPointCrossover: org.apache.commons.math3.genetics.ChromosomePair mate(org.apache.commons.math3.genetics.AbstractListChromosome,org.apache.commons.math3.genetics.AbstractListChromosome)>($r7, $r8);

        return $r2;
    }
    public int getCrossoverPoints()
    {
        org.apache.commons.math3.genetics.NPointCrossover r0;
        int i0;

        r0 := @this: org.apache.commons.math3.genetics.NPointCrossover;

        i0 = r0.<org.apache.commons.math3.genetics.NPointCrossover: int crossoverPoints>;

        return i0;
    }
