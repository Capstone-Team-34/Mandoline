org.apache.commons.math3.genetics.CycleCrossover extends java.lang.Object implements org.apache.commons.math3.genetics.CrossoverPolicy
private final boolean randomStart
    public void <init>()
    {
        org.apache.commons.math3.genetics.CycleCrossover r0;

        r0 := @this: org.apache.commons.math3.genetics.CycleCrossover;

        specialinvoke r0.<org.apache.commons.math3.genetics.CycleCrossover: void <init>(boolean)>(0);

        return;
    }
    public void <init>(boolean)
    {
        org.apache.commons.math3.genetics.CycleCrossover r0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.genetics.CycleCrossover;

        $z0 := @parameter0: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.genetics.CycleCrossover: boolean randomStart> = $z0;

        return;
    }
    public org.apache.commons.math3.genetics.ChromosomePair crossover(org.apache.commons.math3.genetics.Chromosome, org.apache.commons.math3.genetics.Chromosome) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.genetics.CycleCrossover r0;
        org.apache.commons.math3.exception.util.LocalizedFormats $r1;
        org.apache.commons.math3.genetics.ChromosomePair $r2;
        org.apache.commons.math3.genetics.Chromosome $r3, $r4;
        boolean $z0;
        org.apache.commons.math3.exception.MathIllegalArgumentException $r5;
        java.lang.Object[] $r6;
        org.apache.commons.math3.genetics.AbstractListChromosome $r7, $r8;

        r0 := @this: org.apache.commons.math3.genetics.CycleCrossover;

        $r3 := @parameter0: org.apache.commons.math3.genetics.Chromosome;

        $r4 := @parameter1: org.apache.commons.math3.genetics.Chromosome;

        $z0 = $r3 instanceof org.apache.commons.math3.genetics.AbstractListChromosome;

        if $z0 == 0 goto label1;

        $z0 = $r4 instanceof org.apache.commons.math3.genetics.AbstractListChromosome;

        if $z0 != 0 goto label2;

     label1:
        $r5 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r1 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INVALID_FIXED_LENGTH_CHROMOSOME>;

        $r6 = newarray (java.lang.Object)[0];

        specialinvoke $r5.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r1, $r6);

        throw $r5;

     label2:
        $r7 = (org.apache.commons.math3.genetics.AbstractListChromosome) $r3;

        $r8 = (org.apache.commons.math3.genetics.AbstractListChromosome) $r4;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.genetics.CycleCrossover: org.apache.commons.math3.genetics.ChromosomePair mate(org.apache.commons.math3.genetics.AbstractListChromosome,org.apache.commons.math3.genetics.AbstractListChromosome)>($r7, $r8);

        return $r2;
    }
    public boolean isRandomStart()
    {
        org.apache.commons.math3.genetics.CycleCrossover r0;
        boolean z0;

        r0 := @this: org.apache.commons.math3.genetics.CycleCrossover;

        z0 = r0.<org.apache.commons.math3.genetics.CycleCrossover: boolean randomStart>;

        return z0;
    }
    protected org.apache.commons.math3.genetics.ChromosomePair mate(org.apache.commons.math3.genetics.AbstractListChromosome, org.apache.commons.math3.genetics.AbstractListChromosome) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.genetics.CycleCrossover r0;
        org.apache.commons.math3.genetics.AbstractListChromosome r1, r2;
        java.util.ArrayList r3, r4, r5;
        int i0, $i1, i2, i3;
        java.util.HashSet r6;
        org.apache.commons.math3.exception.DimensionMismatchException $r7;
        java.util.List $r8, $r9, $r10;
        boolean $z0;
        org.apache.commons.math3.random.RandomGenerator $r11;
        java.lang.Integer $r12;
        java.lang.Object $r13, $r15;
        java.util.Iterator $r14;
        org.apache.commons.math3.genetics.ChromosomePair $r16;

        r0 := @this: org.apache.commons.math3.genetics.CycleCrossover;

        r1 := @parameter0: org.apache.commons.math3.genetics.AbstractListChromosome;

        r2 := @parameter1: org.apache.commons.math3.genetics.AbstractListChromosome;

        $i1 = virtualinvoke r1.<org.apache.commons.math3.genetics.AbstractListChromosome: int getLength()>();

        i0 = virtualinvoke r2.<org.apache.commons.math3.genetics.AbstractListChromosome: int getLength()>();

        if $i1 == i0 goto label01;

        $r7 = new org.apache.commons.math3.exception.DimensionMismatchException;

        i0 = virtualinvoke r2.<org.apache.commons.math3.genetics.AbstractListChromosome: int getLength()>();

        specialinvoke $r7.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>(i0, $i1);

        throw $r7;

     label01:
        $r8 = virtualinvoke r1.<org.apache.commons.math3.genetics.AbstractListChromosome: java.util.List getRepresentation()>();

        $r9 = virtualinvoke r2.<org.apache.commons.math3.genetics.AbstractListChromosome: java.util.List getRepresentation()>();

        r3 = new java.util.ArrayList;

        $r10 = virtualinvoke r2.<org.apache.commons.math3.genetics.AbstractListChromosome: java.util.List getRepresentation()>();

        specialinvoke r3.<java.util.ArrayList: void <init>(java.util.Collection)>($r10);

        r4 = new java.util.ArrayList;

        $r10 = virtualinvoke r1.<org.apache.commons.math3.genetics.AbstractListChromosome: java.util.List getRepresentation()>();

        specialinvoke r4.<java.util.ArrayList: void <init>(java.util.Collection)>($r10);

        r6 = new java.util.HashSet;

        specialinvoke r6.<java.util.HashSet: void <init>(int)>($i1);

        r5 = new java.util.ArrayList;

        specialinvoke r5.<java.util.ArrayList: void <init>(int)>($i1);

        $z0 = r0.<org.apache.commons.math3.genetics.CycleCrossover: boolean randomStart>;

        if $z0 == 0 goto label05;

        $r11 = staticinvoke <org.apache.commons.math3.genetics.GeneticAlgorithm: org.apache.commons.math3.random.RandomGenerator getRandomGenerator()>();

        i2 = interfaceinvoke $r11.<org.apache.commons.math3.random.RandomGenerator: int nextInt(int)>($i1);

     label02:
        i3 = 1;

     label03:
        i0 = interfaceinvoke r6.<java.util.Set: int size()>();

        if i0 >= $i1 goto label11;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r12);

        $r13 = interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>(i2);

        i0 = interfaceinvoke $r8.<java.util.List: int indexOf(java.lang.Object)>($r13);

     label04:
        $r13 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>(0);

        $r12 = (java.lang.Integer) $r13;

        i2 = virtualinvoke $r12.<java.lang.Integer: int intValue()>();

        if i0 == i2 goto label06;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r12);

        $r13 = interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>(i0);

        i0 = interfaceinvoke $r8.<java.util.List: int indexOf(java.lang.Object)>($r13);

        goto label04;

     label05:
        i2 = 0;

        goto label02;

     label06:
        i0 = i3 + 1;

        i3 = i3 % 2;

        if i3 == 0 goto label08;

        $r14 = interfaceinvoke r5.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z0 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r13 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        $r12 = (java.lang.Integer) $r13;

        i3 = virtualinvoke $r12.<java.lang.Integer: int intValue()>();

        $r13 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i3);

        $r15 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i3);

        interfaceinvoke r3.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i3, $r15);

        interfaceinvoke r4.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i3, $r13);

        goto label07;

     label08:
        interfaceinvoke r6.<java.util.Set: boolean addAll(java.util.Collection)>(r5);

        $r13 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>(0);

        $r12 = (java.lang.Integer) $r13;

        i3 = virtualinvoke $r12.<java.lang.Integer: int intValue()>();

        i3 = i3 + 1;

        i2 = i3 % $i1;

     label09:
        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $z0 = interfaceinvoke r6.<java.util.Set: boolean contains(java.lang.Object)>($r12);

        if $z0 == 0 goto label10;

        i3 = interfaceinvoke r6.<java.util.Set: int size()>();

        if i3 >= $i1 goto label10;

        i2 = i2 + 1;

        if i2 < $i1 goto label09;

        i2 = 0;

        goto label09;

     label10:
        interfaceinvoke r5.<java.util.List: void clear()>();

        i3 = i0;

        goto label03;

     label11:
        $r16 = new org.apache.commons.math3.genetics.ChromosomePair;

        r1 = virtualinvoke r1.<org.apache.commons.math3.genetics.AbstractListChromosome: org.apache.commons.math3.genetics.AbstractListChromosome newFixedLengthChromosome(java.util.List)>(r3);

        r2 = virtualinvoke r2.<org.apache.commons.math3.genetics.AbstractListChromosome: org.apache.commons.math3.genetics.AbstractListChromosome newFixedLengthChromosome(java.util.List)>(r4);

        specialinvoke $r16.<org.apache.commons.math3.genetics.ChromosomePair: void <init>(org.apache.commons.math3.genetics.Chromosome,org.apache.commons.math3.genetics.Chromosome)>(r1, r2);

        return $r16;
    }
