org.apache.commons.math3.genetics.GeneticAlgorithm extends java.lang.Object
private static org.apache.commons.math3.random.RandomGenerator randomGenerator
private final org.apache.commons.math3.genetics.CrossoverPolicy crossoverPolicy
private final double crossoverRate
private int generationsEvolved
private final org.apache.commons.math3.genetics.MutationPolicy mutationPolicy
private final double mutationRate
private final org.apache.commons.math3.genetics.SelectionPolicy selectionPolicy
    static void <clinit>()
    {
        org.apache.commons.math3.random.JDKRandomGenerator $r0;

        $r0 = new org.apache.commons.math3.random.JDKRandomGenerator;

        specialinvoke $r0.<org.apache.commons.math3.random.JDKRandomGenerator: void <init>()>();

        <org.apache.commons.math3.genetics.GeneticAlgorithm: org.apache.commons.math3.random.RandomGenerator randomGenerator> = $r0;

        return;
    }
    public void <init>(org.apache.commons.math3.genetics.CrossoverPolicy, double, org.apache.commons.math3.genetics.MutationPolicy, double, org.apache.commons.math3.genetics.SelectionPolicy) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.genetics.GeneticAlgorithm r0;
        org.apache.commons.math3.genetics.CrossoverPolicy $r1;
        double $d0, $d1;
        org.apache.commons.math3.genetics.MutationPolicy $r2;
        org.apache.commons.math3.genetics.SelectionPolicy $r3;
        byte $b0;
        org.apache.commons.math3.exception.OutOfRangeException $r4;
        org.apache.commons.math3.exception.util.LocalizedFormats $r5;
        java.lang.Double $r6;
        java.lang.Integer $r7, $r8;

        r0 := @this: org.apache.commons.math3.genetics.GeneticAlgorithm;

        $r1 := @parameter0: org.apache.commons.math3.genetics.CrossoverPolicy;

        $d0 := @parameter1: double;

        $r2 := @parameter2: org.apache.commons.math3.genetics.MutationPolicy;

        $d1 := @parameter3: double;

        $r3 := @parameter4: org.apache.commons.math3.genetics.SelectionPolicy;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.genetics.GeneticAlgorithm: int generationsEvolved> = 0;

        $b0 = $d0 cmpg 0.0;

        if $b0 < 0 goto label1;

        $b0 = $d0 cmpl 1.0;

        if $b0 <= 0 goto label2;

     label1:
        $r4 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r5 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats CROSSOVER_RATE>;

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke $r4.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)>($r5, $r6, $r7, $r8);

        throw $r4;

     label2:
        $b0 = $d1 cmpg 0.0;

        if $b0 < 0 goto label3;

        $b0 = $d1 cmpl 1.0;

        if $b0 <= 0 goto label4;

     label3:
        $r4 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r5 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats MUTATION_RATE>;

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke $r4.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)>($r5, $r6, $r7, $r8);

        throw $r4;

     label4:
        r0.<org.apache.commons.math3.genetics.GeneticAlgorithm: org.apache.commons.math3.genetics.CrossoverPolicy crossoverPolicy> = $r1;

        r0.<org.apache.commons.math3.genetics.GeneticAlgorithm: double crossoverRate> = $d0;

        r0.<org.apache.commons.math3.genetics.GeneticAlgorithm: org.apache.commons.math3.genetics.MutationPolicy mutationPolicy> = $r2;

        r0.<org.apache.commons.math3.genetics.GeneticAlgorithm: double mutationRate> = $d1;

        r0.<org.apache.commons.math3.genetics.GeneticAlgorithm: org.apache.commons.math3.genetics.SelectionPolicy selectionPolicy> = $r3;

        return;
    }
    public static org.apache.commons.math3.random.RandomGenerator getRandomGenerator()
    {
        java.lang.Throwable $r0;
        org.apache.commons.math3.random.RandomGenerator r1;

        entermonitor class "Lorg/apache/commons/math3/genetics/GeneticAlgorithm;";

     label1:
        r1 = <org.apache.commons.math3.genetics.GeneticAlgorithm: org.apache.commons.math3.random.RandomGenerator randomGenerator>;

     label2:
        exitmonitor class "Lorg/apache/commons/math3/genetics/GeneticAlgorithm;";

        return r1;

     label3:
        $r0 := @caughtexception;

        exitmonitor class "Lorg/apache/commons/math3/genetics/GeneticAlgorithm;";

        throw $r0;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public static void setRandomGenerator(org.apache.commons.math3.random.RandomGenerator)
    {
        org.apache.commons.math3.random.RandomGenerator $r0;
        java.lang.Throwable $r1;

        $r0 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        entermonitor class "Lorg/apache/commons/math3/genetics/GeneticAlgorithm;";

     label1:
        <org.apache.commons.math3.genetics.GeneticAlgorithm: org.apache.commons.math3.random.RandomGenerator randomGenerator> = $r0;

     label2:
        exitmonitor class "Lorg/apache/commons/math3/genetics/GeneticAlgorithm;";

        return;

     label3:
        $r1 := @caughtexception;

        exitmonitor class "Lorg/apache/commons/math3/genetics/GeneticAlgorithm;";

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public org.apache.commons.math3.genetics.Population evolve(org.apache.commons.math3.genetics.Population, org.apache.commons.math3.genetics.StoppingCondition)
    {
        org.apache.commons.math3.genetics.GeneticAlgorithm r0;
        org.apache.commons.math3.genetics.Population $r1;
        org.apache.commons.math3.genetics.StoppingCondition $r2;
        boolean $z0;
        int $i0;

        r0 := @this: org.apache.commons.math3.genetics.GeneticAlgorithm;

        $r1 := @parameter0: org.apache.commons.math3.genetics.Population;

        $r2 := @parameter1: org.apache.commons.math3.genetics.StoppingCondition;

        r0.<org.apache.commons.math3.genetics.GeneticAlgorithm: int generationsEvolved> = 0;

     label1:
        $z0 = interfaceinvoke $r2.<org.apache.commons.math3.genetics.StoppingCondition: boolean isSatisfied(org.apache.commons.math3.genetics.Population)>($r1);

        if $z0 != 0 goto label2;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.genetics.GeneticAlgorithm: org.apache.commons.math3.genetics.Population nextGeneration(org.apache.commons.math3.genetics.Population)>($r1);

        $i0 = r0.<org.apache.commons.math3.genetics.GeneticAlgorithm: int generationsEvolved>;

        $i0 = $i0 + 1;

        r0.<org.apache.commons.math3.genetics.GeneticAlgorithm: int generationsEvolved> = $i0;

        goto label1;

     label2:
        return $r1;
    }
    public org.apache.commons.math3.genetics.CrossoverPolicy getCrossoverPolicy()
    {
        org.apache.commons.math3.genetics.GeneticAlgorithm r0;
        org.apache.commons.math3.genetics.CrossoverPolicy r1;

        r0 := @this: org.apache.commons.math3.genetics.GeneticAlgorithm;

        r1 = r0.<org.apache.commons.math3.genetics.GeneticAlgorithm: org.apache.commons.math3.genetics.CrossoverPolicy crossoverPolicy>;

        return r1;
    }
    public double getCrossoverRate()
    {
        org.apache.commons.math3.genetics.GeneticAlgorithm r0;
        double d0;

        r0 := @this: org.apache.commons.math3.genetics.GeneticAlgorithm;

        d0 = r0.<org.apache.commons.math3.genetics.GeneticAlgorithm: double crossoverRate>;

        return d0;
    }
    public int getGenerationsEvolved()
    {
        org.apache.commons.math3.genetics.GeneticAlgorithm r0;
        int i0;

        r0 := @this: org.apache.commons.math3.genetics.GeneticAlgorithm;

        i0 = r0.<org.apache.commons.math3.genetics.GeneticAlgorithm: int generationsEvolved>;

        return i0;
    }
    public org.apache.commons.math3.genetics.MutationPolicy getMutationPolicy()
    {
        org.apache.commons.math3.genetics.GeneticAlgorithm r0;
        org.apache.commons.math3.genetics.MutationPolicy r1;

        r0 := @this: org.apache.commons.math3.genetics.GeneticAlgorithm;

        r1 = r0.<org.apache.commons.math3.genetics.GeneticAlgorithm: org.apache.commons.math3.genetics.MutationPolicy mutationPolicy>;

        return r1;
    }
    public double getMutationRate()
    {
        org.apache.commons.math3.genetics.GeneticAlgorithm r0;
        double d0;

        r0 := @this: org.apache.commons.math3.genetics.GeneticAlgorithm;

        d0 = r0.<org.apache.commons.math3.genetics.GeneticAlgorithm: double mutationRate>;

        return d0;
    }
    public org.apache.commons.math3.genetics.SelectionPolicy getSelectionPolicy()
    {
        org.apache.commons.math3.genetics.GeneticAlgorithm r0;
        org.apache.commons.math3.genetics.SelectionPolicy r1;

        r0 := @this: org.apache.commons.math3.genetics.GeneticAlgorithm;

        r1 = r0.<org.apache.commons.math3.genetics.GeneticAlgorithm: org.apache.commons.math3.genetics.SelectionPolicy selectionPolicy>;

        return r1;
    }
    public org.apache.commons.math3.genetics.Population nextGeneration(org.apache.commons.math3.genetics.Population)
    {
        org.apache.commons.math3.genetics.GeneticAlgorithm r0;
        org.apache.commons.math3.genetics.Population $r1, $r3;
        org.apache.commons.math3.genetics.ChromosomePair r2, r6;
        org.apache.commons.math3.random.RandomGenerator $r4;
        int $i0, $i1;
        org.apache.commons.math3.genetics.SelectionPolicy $r5;
        double $d0, $d1;
        byte $b2;
        org.apache.commons.math3.genetics.CrossoverPolicy $r7;
        org.apache.commons.math3.genetics.Chromosome $r8, $r9;
        org.apache.commons.math3.genetics.MutationPolicy $r10;

        r0 := @this: org.apache.commons.math3.genetics.GeneticAlgorithm;

        $r1 := @parameter0: org.apache.commons.math3.genetics.Population;

        $r3 = interfaceinvoke $r1.<org.apache.commons.math3.genetics.Population: org.apache.commons.math3.genetics.Population nextGeneration()>();

        $r4 = staticinvoke <org.apache.commons.math3.genetics.GeneticAlgorithm: org.apache.commons.math3.random.RandomGenerator getRandomGenerator()>();

     label1:
        $i0 = interfaceinvoke $r3.<org.apache.commons.math3.genetics.Population: int getPopulationSize()>();

        $i1 = interfaceinvoke $r3.<org.apache.commons.math3.genetics.Population: int getPopulationLimit()>();

        if $i0 >= $i1 goto label4;

        $r5 = virtualinvoke r0.<org.apache.commons.math3.genetics.GeneticAlgorithm: org.apache.commons.math3.genetics.SelectionPolicy getSelectionPolicy()>();

        r2 = interfaceinvoke $r5.<org.apache.commons.math3.genetics.SelectionPolicy: org.apache.commons.math3.genetics.ChromosomePair select(org.apache.commons.math3.genetics.Population)>($r1);

        r6 = r2;

        $d0 = interfaceinvoke $r4.<org.apache.commons.math3.random.RandomGenerator: double nextDouble()>();

        $d1 = virtualinvoke r0.<org.apache.commons.math3.genetics.GeneticAlgorithm: double getCrossoverRate()>();

        $b2 = $d0 cmpg $d1;

        if $b2 >= 0 goto label2;

        $r7 = virtualinvoke r0.<org.apache.commons.math3.genetics.GeneticAlgorithm: org.apache.commons.math3.genetics.CrossoverPolicy getCrossoverPolicy()>();

        $r8 = virtualinvoke r2.<org.apache.commons.math3.genetics.ChromosomePair: org.apache.commons.math3.genetics.Chromosome getFirst()>();

        $r9 = virtualinvoke r2.<org.apache.commons.math3.genetics.ChromosomePair: org.apache.commons.math3.genetics.Chromosome getSecond()>();

        r6 = interfaceinvoke $r7.<org.apache.commons.math3.genetics.CrossoverPolicy: org.apache.commons.math3.genetics.ChromosomePair crossover(org.apache.commons.math3.genetics.Chromosome,org.apache.commons.math3.genetics.Chromosome)>($r8, $r9);

     label2:
        $d0 = interfaceinvoke $r4.<org.apache.commons.math3.random.RandomGenerator: double nextDouble()>();

        $d1 = virtualinvoke r0.<org.apache.commons.math3.genetics.GeneticAlgorithm: double getMutationRate()>();

        $b2 = $d0 cmpg $d1;

        if $b2 >= 0 goto label3;

        r2 = new org.apache.commons.math3.genetics.ChromosomePair;

        $r10 = virtualinvoke r0.<org.apache.commons.math3.genetics.GeneticAlgorithm: org.apache.commons.math3.genetics.MutationPolicy getMutationPolicy()>();

        $r8 = virtualinvoke r6.<org.apache.commons.math3.genetics.ChromosomePair: org.apache.commons.math3.genetics.Chromosome getFirst()>();

        $r8 = interfaceinvoke $r10.<org.apache.commons.math3.genetics.MutationPolicy: org.apache.commons.math3.genetics.Chromosome mutate(org.apache.commons.math3.genetics.Chromosome)>($r8);

        $r10 = virtualinvoke r0.<org.apache.commons.math3.genetics.GeneticAlgorithm: org.apache.commons.math3.genetics.MutationPolicy getMutationPolicy()>();

        $r9 = virtualinvoke r6.<org.apache.commons.math3.genetics.ChromosomePair: org.apache.commons.math3.genetics.Chromosome getSecond()>();

        $r9 = interfaceinvoke $r10.<org.apache.commons.math3.genetics.MutationPolicy: org.apache.commons.math3.genetics.Chromosome mutate(org.apache.commons.math3.genetics.Chromosome)>($r9);

        specialinvoke r2.<org.apache.commons.math3.genetics.ChromosomePair: void <init>(org.apache.commons.math3.genetics.Chromosome,org.apache.commons.math3.genetics.Chromosome)>($r8, $r9);

        r6 = r2;

     label3:
        $r8 = virtualinvoke r6.<org.apache.commons.math3.genetics.ChromosomePair: org.apache.commons.math3.genetics.Chromosome getFirst()>();

        interfaceinvoke $r3.<org.apache.commons.math3.genetics.Population: void addChromosome(org.apache.commons.math3.genetics.Chromosome)>($r8);

        $i0 = interfaceinvoke $r3.<org.apache.commons.math3.genetics.Population: int getPopulationSize()>();

        $i1 = interfaceinvoke $r3.<org.apache.commons.math3.genetics.Population: int getPopulationLimit()>();

        if $i0 >= $i1 goto label1;

        $r8 = virtualinvoke r6.<org.apache.commons.math3.genetics.ChromosomePair: org.apache.commons.math3.genetics.Chromosome getSecond()>();

        interfaceinvoke $r3.<org.apache.commons.math3.genetics.Population: void addChromosome(org.apache.commons.math3.genetics.Chromosome)>($r8);

        goto label1;

     label4:
        return $r3;
    }
