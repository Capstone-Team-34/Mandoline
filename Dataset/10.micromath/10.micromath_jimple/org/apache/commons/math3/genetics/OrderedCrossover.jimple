org.apache.commons.math3.genetics.OrderedCrossover extends java.lang.Object implements org.apache.commons.math3.genetics.CrossoverPolicy
    public void <init>()
    {
        org.apache.commons.math3.genetics.OrderedCrossover r0;

        r0 := @this: org.apache.commons.math3.genetics.OrderedCrossover;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public org.apache.commons.math3.genetics.ChromosomePair crossover(org.apache.commons.math3.genetics.Chromosome, org.apache.commons.math3.genetics.Chromosome) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.genetics.OrderedCrossover r0;
        org.apache.commons.math3.exception.util.LocalizedFormats $r1;
        org.apache.commons.math3.genetics.ChromosomePair $r2;
        org.apache.commons.math3.genetics.Chromosome $r3, $r4;
        boolean $z0;
        org.apache.commons.math3.exception.MathIllegalArgumentException $r5;
        java.lang.Object[] $r6;
        org.apache.commons.math3.genetics.AbstractListChromosome $r7, $r8;

        r0 := @this: org.apache.commons.math3.genetics.OrderedCrossover;

        $r3 := @parameter0: org.apache.commons.math3.genetics.Chromosome;

        $r4 := @parameter1: org.apache.commons.math3.genetics.Chromosome;

        $z0 = $r3 instanceof org.apache.commons.math3.genetics.AbstractListChromosome;

        if $z0 == 0 goto label1;

        $z0 = $r4 instanceof org.apache.commons.math3.genetics.AbstractListChromosome;

        if $z0 != 0 goto label2;

     label1:
        $r5 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r1 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INVALID_FIXED_LENGTH_CHROMOSOME>;

        $r6 = newarray (java.lang.Object)[0];

        specialinvoke $r5.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r1, $r6);

        throw $r5;

     label2:
        $r7 = (org.apache.commons.math3.genetics.AbstractListChromosome) $r3;

        $r8 = (org.apache.commons.math3.genetics.AbstractListChromosome) $r4;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.genetics.OrderedCrossover: org.apache.commons.math3.genetics.ChromosomePair mate(org.apache.commons.math3.genetics.AbstractListChromosome,org.apache.commons.math3.genetics.AbstractListChromosome)>($r7, $r8);

        return $r2;
    }
    protected org.apache.commons.math3.genetics.ChromosomePair mate(org.apache.commons.math3.genetics.AbstractListChromosome, org.apache.commons.math3.genetics.AbstractListChromosome) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.genetics.OrderedCrossover r0;
        org.apache.commons.math3.genetics.AbstractListChromosome r1, r2;
        java.util.ArrayList r3, r5;
        java.util.HashSet r4, r6;
        int i0, $i1, $i2, $i3, $i4;
        org.apache.commons.math3.exception.DimensionMismatchException $r7;
        java.util.List $r8, $r9, $r11;
        org.apache.commons.math3.random.RandomGenerator $r10;
        java.lang.Object $r12, $r13;
        boolean $z0;
        org.apache.commons.math3.genetics.ChromosomePair $r14;

        r0 := @this: org.apache.commons.math3.genetics.OrderedCrossover;

        r1 := @parameter0: org.apache.commons.math3.genetics.AbstractListChromosome;

        r2 := @parameter1: org.apache.commons.math3.genetics.AbstractListChromosome;

        $i1 = virtualinvoke r1.<org.apache.commons.math3.genetics.AbstractListChromosome: int getLength()>();

        $i2 = virtualinvoke r2.<org.apache.commons.math3.genetics.AbstractListChromosome: int getLength()>();

        if $i1 == $i2 goto label1;

        $r7 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i2 = virtualinvoke r2.<org.apache.commons.math3.genetics.AbstractListChromosome: int getLength()>();

        specialinvoke $r7.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i2, $i1);

        throw $r7;

     label1:
        $r8 = virtualinvoke r1.<org.apache.commons.math3.genetics.AbstractListChromosome: java.util.List getRepresentation()>();

        $r9 = virtualinvoke r2.<org.apache.commons.math3.genetics.AbstractListChromosome: java.util.List getRepresentation()>();

        r3 = new java.util.ArrayList;

        specialinvoke r3.<java.util.ArrayList: void <init>(int)>($i1);

        r5 = new java.util.ArrayList;

        specialinvoke r5.<java.util.ArrayList: void <init>(int)>($i1);

        r4 = new java.util.HashSet;

        specialinvoke r4.<java.util.HashSet: void <init>(int)>($i1);

        r6 = new java.util.HashSet;

        specialinvoke r6.<java.util.HashSet: void <init>(int)>($i1);

        $r10 = staticinvoke <org.apache.commons.math3.genetics.GeneticAlgorithm: org.apache.commons.math3.random.RandomGenerator getRandomGenerator()>();

        $i3 = interfaceinvoke $r10.<org.apache.commons.math3.random.RandomGenerator: int nextInt(int)>($i1);

     label2:
        $i4 = interfaceinvoke $r10.<org.apache.commons.math3.random.RandomGenerator: int nextInt(int)>($i1);

        if $i3 == $i4 goto label2;

        $i2 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i3, $i4);

        $i3 = staticinvoke <org.apache.commons.math3.util.FastMath: int max(int,int)>($i3, $i4);

        $i4 = $i3 + 1;

        $r11 = interfaceinvoke $r8.<java.util.List: java.util.List subList(int,int)>($i2, $i4);

        interfaceinvoke r3.<java.util.List: boolean addAll(java.util.Collection)>($r11);

        interfaceinvoke r4.<java.util.Set: boolean addAll(java.util.Collection)>(r3);

        $i4 = $i3 + 1;

        $r11 = interfaceinvoke $r9.<java.util.List: java.util.List subList(int,int)>($i2, $i4);

        interfaceinvoke r5.<java.util.List: boolean addAll(java.util.Collection)>($r11);

        interfaceinvoke r6.<java.util.Set: boolean addAll(java.util.Collection)>(r5);

        $i4 = 1;

     label3:
        if $i4 > $i1 goto label6;

        i0 = $i3 + $i4;

        i0 = i0 % $i1;

        $r12 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(i0);

        $r13 = interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>(i0);

        $z0 = interfaceinvoke r4.<java.util.Set: boolean contains(java.lang.Object)>($r13);

        if $z0 != 0 goto label4;

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r13);

        interfaceinvoke r4.<java.util.Set: boolean add(java.lang.Object)>($r13);

     label4:
        $z0 = interfaceinvoke r6.<java.util.Set: boolean contains(java.lang.Object)>($r12);

        if $z0 != 0 goto label5;

        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r12);

        interfaceinvoke r6.<java.util.Set: boolean add(java.lang.Object)>($r12);

     label5:
        $i4 = $i4 + 1;

        goto label3;

     label6:
        staticinvoke <java.util.Collections: void rotate(java.util.List,int)>(r3, $i2);

        staticinvoke <java.util.Collections: void rotate(java.util.List,int)>(r5, $i2);

        $r14 = new org.apache.commons.math3.genetics.ChromosomePair;

        r1 = virtualinvoke r1.<org.apache.commons.math3.genetics.AbstractListChromosome: org.apache.commons.math3.genetics.AbstractListChromosome newFixedLengthChromosome(java.util.List)>(r3);

        r2 = virtualinvoke r2.<org.apache.commons.math3.genetics.AbstractListChromosome: org.apache.commons.math3.genetics.AbstractListChromosome newFixedLengthChromosome(java.util.List)>(r5);

        specialinvoke $r14.<org.apache.commons.math3.genetics.ChromosomePair: void <init>(org.apache.commons.math3.genetics.Chromosome,org.apache.commons.math3.genetics.Chromosome)>(r1, r2);

        return $r14;
    }
