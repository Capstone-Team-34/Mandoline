org.apache.commons.math3.genetics.RandomKey extends org.apache.commons.math3.genetics.AbstractListChromosome implements org.apache.commons.math3.genetics.PermutationChromosome
private final java.util.List baseSeqPermutation
private final java.util.List sortedRepresentation
    public void <init>(java.util.List) throws org.apache.commons.math3.genetics.InvalidRepresentationException
    {
        org.apache.commons.math3.genetics.RandomKey r0;
        java.util.List r1, $r3, $r4;
        java.util.ArrayList r2;
        int $i0;

        r0 := @this: org.apache.commons.math3.genetics.RandomKey;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<org.apache.commons.math3.genetics.AbstractListChromosome: void <init>(java.util.List)>(r1);

        r2 = new java.util.ArrayList;

        r1 = virtualinvoke r0.<org.apache.commons.math3.genetics.RandomKey: java.util.List getRepresentation()>();

        specialinvoke r2.<java.util.ArrayList: void <init>(java.util.Collection)>(r1);

        staticinvoke <java.util.Collections: void sort(java.util.List)>(r2);

        r1 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r2);

        r0.<org.apache.commons.math3.genetics.RandomKey: java.util.List sortedRepresentation> = r1;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.genetics.RandomKey: int getLength()>();

        $r3 = staticinvoke <org.apache.commons.math3.genetics.RandomKey: java.util.List baseSequence(int)>($i0);

        $r4 = virtualinvoke r0.<org.apache.commons.math3.genetics.RandomKey: java.util.List getRepresentation()>();

        r1 = r0.<org.apache.commons.math3.genetics.RandomKey: java.util.List sortedRepresentation>;

        r1 = staticinvoke <org.apache.commons.math3.genetics.RandomKey: java.util.List decodeGeneric(java.util.List,java.util.List,java.util.List)>($r3, $r4, r1);

        r1 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r1);

        r0.<org.apache.commons.math3.genetics.RandomKey: java.util.List baseSeqPermutation> = r1;

        return;
    }
    public void <init>(java.lang.Double[]) throws org.apache.commons.math3.genetics.InvalidRepresentationException
    {
        org.apache.commons.math3.genetics.RandomKey r0;
        java.lang.Double[] $r1;
        java.util.List $r2;

        r0 := @this: org.apache.commons.math3.genetics.RandomKey;

        $r1 := @parameter0: java.lang.Double[];

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1);

        specialinvoke r0.<org.apache.commons.math3.genetics.RandomKey: void <init>(java.util.List)>($r2);

        return;
    }
    private static java.util.List baseSequence(int)
    {
        int $i0, i1;
        java.util.ArrayList r0;
        java.lang.Integer $r1;

        $i0 := @parameter0: int;

        r0 = new java.util.ArrayList;

        specialinvoke r0.<java.util.ArrayList: void <init>(int)>($i0);

        i1 = 0;

     label1:
        if i1 >= $i0 goto label2;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>($r1);

        i1 = i1 + 1;

        goto label1;

     label2:
        return r0;
    }
    public static java.util.List comparatorPermutation(java.util.List, java.util.Comparator)
    {
        java.util.List r0;
        java.util.Comparator r1;
        java.util.ArrayList r2;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.Comparator;

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>(java.util.Collection)>(r0);

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(r2, r1);

        r0 = staticinvoke <org.apache.commons.math3.genetics.RandomKey: java.util.List inducedPermutation(java.util.List,java.util.List)>(r0, r2);

        return r0;
    }
    private static java.util.List decodeGeneric(java.util.List, java.util.List, java.util.List) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        java.util.List r0, r1, r2;
        java.util.ArrayList r3, r4;
        int $i0, $i1, $i2;
        org.apache.commons.math3.exception.DimensionMismatchException $r5;
        java.lang.Object $r6;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        r2 := @parameter2: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i1 == $i0 goto label1;

        $r5 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        specialinvoke $r5.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i1, $i0);

        throw $r5;

     label1:
        $i1 = interfaceinvoke r2.<java.util.List: int size()>();

        if $i1 == $i0 goto label2;

        $r5 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i1 = interfaceinvoke r2.<java.util.List: int size()>();

        specialinvoke $r5.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i1, $i0);

        throw $r5;

     label2:
        r3 = new java.util.ArrayList;

        specialinvoke r3.<java.util.ArrayList: void <init>(java.util.Collection)>(r1);

        r4 = new java.util.ArrayList;

        specialinvoke r4.<java.util.ArrayList: void <init>(int)>($i0);

        $i1 = 0;

     label3:
        if $i1 >= $i0 goto label4;

        $r6 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>($i1);

        $i2 = interfaceinvoke r3.<java.util.List: int indexOf(java.lang.Object)>($r6);

        $r6 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>($i2);

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r6);

        interfaceinvoke r3.<java.util.List: java.lang.Object set(int,java.lang.Object)>($i2, null);

        $i1 = $i1 + 1;

        goto label3;

     label4:
        return r4;
    }
    public static final java.util.List identityPermutation(int)
    {
        int $i0, i1;
        java.util.ArrayList r0;
        double $d0, $d1;
        java.lang.Double $r1;

        $i0 := @parameter0: int;

        r0 = new java.util.ArrayList;

        specialinvoke r0.<java.util.ArrayList: void <init>(int)>($i0);

        i1 = 0;

     label1:
        if i1 >= $i0 goto label2;

        $d1 = (double) i1;

        $d0 = (double) $i0;

        $d0 = $d1 / $d0;

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>($r1);

        i1 = i1 + 1;

        goto label1;

     label2:
        return r0;
    }
    public static java.util.List inducedPermutation(java.util.List, java.util.List) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        java.util.List r0, r1;
        java.util.ArrayList r2;
        java.lang.Double[] r3;
        double $d0, $d1;
        int $i0, $i1, $i2;
        org.apache.commons.math3.exception.DimensionMismatchException $r4;
        java.lang.Object $r5;
        org.apache.commons.math3.exception.MathIllegalArgumentException $r6;
        org.apache.commons.math3.exception.util.LocalizedFormats $r7;
        java.lang.Object[] $r8;
        java.lang.Double $r9;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i0 == $i1 goto label1;

        $r4 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        $i1 = interfaceinvoke r0.<java.util.List: int size()>();

        specialinvoke $r4.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i0, $i1);

        throw $r4;

     label1:
        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>(java.util.Collection)>(r0);

        r3 = newarray (java.lang.Double)[$i0];

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label4;

        $r5 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>($i1);

        $i2 = interfaceinvoke r2.<java.util.List: int indexOf(java.lang.Object)>($r5);

        if $i2 != -1 goto label3;

        $r6 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r7 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats DIFFERENT_ORIG_AND_PERMUTED_DATA>;

        $r8 = newarray (java.lang.Object)[0];

        specialinvoke $r6.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r7, $r8);

        throw $r6;

     label3:
        $d1 = (double) $i1;

        $d0 = (double) $i0;

        $d0 = $d1 / $d0;

        $r9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        r3[$i2] = $r9;

        interfaceinvoke r2.<java.util.List: java.lang.Object set(int,java.lang.Object)>($i2, null);

        $i1 = $i1 + 1;

        goto label2;

     label4:
        r0 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r3);

        return r0;
    }
    public static final java.util.List randomPermutation(int)
    {
        int $i0, i1;
        java.util.ArrayList r0;
        org.apache.commons.math3.random.RandomGenerator $r1;
        double $d0;
        java.lang.Double $r2;

        $i0 := @parameter0: int;

        r0 = new java.util.ArrayList;

        specialinvoke r0.<java.util.ArrayList: void <init>(int)>($i0);

        i1 = 0;

     label1:
        if i1 >= $i0 goto label2;

        $r1 = staticinvoke <org.apache.commons.math3.genetics.GeneticAlgorithm: org.apache.commons.math3.random.RandomGenerator getRandomGenerator()>();

        $d0 = interfaceinvoke $r1.<org.apache.commons.math3.random.RandomGenerator: double nextDouble()>();

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>($r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return r0;
    }
    protected void checkValidity(java.util.List) throws org.apache.commons.math3.genetics.InvalidRepresentationException
    {
        org.apache.commons.math3.genetics.RandomKey r0;
        java.util.List r1;
        java.util.Iterator $r2;
        boolean $z0;
        java.lang.Object $r3;
        java.lang.Double $r4;
        double $d0;
        byte $b0;
        org.apache.commons.math3.genetics.InvalidRepresentationException $r5;
        org.apache.commons.math3.exception.util.LocalizedFormats $r6;
        java.lang.Object[] $r7;
        java.lang.Integer $r8;

        r0 := @this: org.apache.commons.math3.genetics.RandomKey;

        r1 := @parameter0: java.util.List;

        $r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (java.lang.Double) $r3;

        $d0 = virtualinvoke $r4.<java.lang.Double: double doubleValue()>();

        $b0 = $d0 cmpg 0.0;

        if $b0 < 0 goto label2;

        $b0 = $d0 cmpl 1.0;

        if $b0 <= 0 goto label1;

     label2:
        $r5 = new org.apache.commons.math3.genetics.InvalidRepresentationException;

        $r6 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OUT_OF_RANGE_SIMPLE>;

        $r7 = newarray (java.lang.Object)[3];

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r7[0] = $r4;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r7[1] = $r8;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r7[2] = $r8;

        specialinvoke $r5.<org.apache.commons.math3.genetics.InvalidRepresentationException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r6, $r7);

        throw $r5;

     label3:
        return;
    }
    public java.util.List decode(java.util.List)
    {
        org.apache.commons.math3.genetics.RandomKey r0;
        java.util.List r1, $r2, $r3;

        r0 := @this: org.apache.commons.math3.genetics.RandomKey;

        r1 := @parameter0: java.util.List;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.genetics.RandomKey: java.util.List getRepresentation()>();

        $r2 = r0.<org.apache.commons.math3.genetics.RandomKey: java.util.List sortedRepresentation>;

        r1 = staticinvoke <org.apache.commons.math3.genetics.RandomKey: java.util.List decodeGeneric(java.util.List,java.util.List,java.util.List)>(r1, $r3, $r2);

        return r1;
    }
    protected boolean isSame(org.apache.commons.math3.genetics.Chromosome)
    {
        org.apache.commons.math3.genetics.RandomKey r0, r4;
        org.apache.commons.math3.genetics.Chromosome $r1;
        java.util.List r2, r3;
        boolean $z0;
        int $i0, $i1;
        java.lang.Object $r5, $r6;

        r0 := @this: org.apache.commons.math3.genetics.RandomKey;

        $r1 := @parameter0: org.apache.commons.math3.genetics.Chromosome;

        $z0 = $r1 instanceof org.apache.commons.math3.genetics.RandomKey;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r4 = (org.apache.commons.math3.genetics.RandomKey) $r1;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.genetics.RandomKey: int getLength()>();

        $i1 = virtualinvoke r4.<org.apache.commons.math3.genetics.RandomKey: int getLength()>();

        if $i0 != $i1 goto label4;

        r3 = r0.<org.apache.commons.math3.genetics.RandomKey: java.util.List baseSeqPermutation>;

        r2 = r4.<org.apache.commons.math3.genetics.RandomKey: java.util.List baseSeqPermutation>;

        $i0 = 0;

     label2:
        $i1 = virtualinvoke r0.<org.apache.commons.math3.genetics.RandomKey: int getLength()>();

        if $i0 >= $i1 goto label3;

        $r5 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>($i0);

        $r6 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>($i0);

        if $r5 != $r6 goto label4;

        $i0 = $i0 + 1;

        goto label2;

     label3:
        return 1;

     label4:
        return 0;
    }
    public java.lang.String toString()
    {
        org.apache.commons.math3.genetics.RandomKey r0;
        java.lang.Object[] $r1;
        double $d0;
        java.lang.Double $r2;
        java.util.List $r3;
        java.lang.String $r4;

        r0 := @this: org.apache.commons.math3.genetics.RandomKey;

        $r1 = newarray (java.lang.Object)[2];

        $d0 = virtualinvoke r0.<org.apache.commons.math3.genetics.RandomKey: double getFitness()>();

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r1[0] = $r2;

        $r3 = r0.<org.apache.commons.math3.genetics.RandomKey: java.util.List baseSeqPermutation>;

        $r1[1] = $r3;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("(f=%s pi=(%s))", $r1);

        return $r4;
    }
