org.apache.commons.math3.genetics.BinaryChromosome extends org.apache.commons.math3.genetics.AbstractListChromosome
    public void <init>(java.util.List) throws org.apache.commons.math3.genetics.InvalidRepresentationException
    {
        org.apache.commons.math3.genetics.BinaryChromosome r0;
        java.util.List r1;

        r0 := @this: org.apache.commons.math3.genetics.BinaryChromosome;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<org.apache.commons.math3.genetics.AbstractListChromosome: void <init>(java.util.List)>(r1);

        return;
    }
    public void <init>(java.lang.Integer[]) throws org.apache.commons.math3.genetics.InvalidRepresentationException
    {
        org.apache.commons.math3.genetics.BinaryChromosome r0;
        java.lang.Integer[] $r1;

        r0 := @this: org.apache.commons.math3.genetics.BinaryChromosome;

        $r1 := @parameter0: java.lang.Integer[];

        specialinvoke r0.<org.apache.commons.math3.genetics.AbstractListChromosome: void <init>(java.lang.Object[])>($r1);

        return;
    }
    public static java.util.List randomBinaryRepresentation(int)
    {
        int $i0, i1, $i2;
        java.util.ArrayList r0;
        org.apache.commons.math3.random.RandomGenerator $r1;
        java.lang.Integer $r2;

        $i0 := @parameter0: int;

        r0 = new java.util.ArrayList;

        specialinvoke r0.<java.util.ArrayList: void <init>(int)>($i0);

        i1 = 0;

     label1:
        if i1 >= $i0 goto label2;

        $r1 = staticinvoke <org.apache.commons.math3.genetics.GeneticAlgorithm: org.apache.commons.math3.random.RandomGenerator getRandomGenerator()>();

        $i2 = interfaceinvoke $r1.<org.apache.commons.math3.random.RandomGenerator: int nextInt(int)>(2);

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>($r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return r0;
    }
    protected void checkValidity(java.util.List) throws org.apache.commons.math3.genetics.InvalidRepresentationException
    {
        org.apache.commons.math3.genetics.BinaryChromosome r0;
        java.util.List r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        java.lang.Integer $r5;
        int $i0;
        org.apache.commons.math3.genetics.InvalidRepresentationException $r6;
        java.lang.Object[] $r7;

        r0 := @this: org.apache.commons.math3.genetics.BinaryChromosome;

        r1 := @parameter0: java.util.List;

        $r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.lang.Integer) $r4;

        $i0 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        if $i0 < 0 goto label2;

        if $i0 <= 1 goto label1;

     label2:
        $r6 = new org.apache.commons.math3.genetics.InvalidRepresentationException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INVALID_BINARY_DIGIT>;

        $r7 = newarray (java.lang.Object)[1];

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r7[0] = $r5;

        specialinvoke $r6.<org.apache.commons.math3.genetics.InvalidRepresentationException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r2, $r7);

        throw $r6;

     label3:
        return;
    }
    protected boolean isSame(org.apache.commons.math3.genetics.Chromosome)
    {
        org.apache.commons.math3.genetics.BinaryChromosome r0, r2;
        org.apache.commons.math3.genetics.Chromosome $r1;
        boolean $z0;
        int $i0, $i1;
        java.util.List $r3;
        java.lang.Object $r4;
        java.lang.Integer $r5;

        r0 := @this: org.apache.commons.math3.genetics.BinaryChromosome;

        $r1 := @parameter0: org.apache.commons.math3.genetics.Chromosome;

        $z0 = $r1 instanceof org.apache.commons.math3.genetics.BinaryChromosome;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = (org.apache.commons.math3.genetics.BinaryChromosome) $r1;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.genetics.BinaryChromosome: int getLength()>();

        $i1 = virtualinvoke r2.<org.apache.commons.math3.genetics.BinaryChromosome: int getLength()>();

        if $i0 == $i1 goto label2;

        return 0;

     label2:
        $i0 = 0;

     label3:
        $r3 = virtualinvoke r0.<org.apache.commons.math3.genetics.BinaryChromosome: java.util.List getRepresentation()>();

        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        if $i0 >= $i1 goto label5;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.genetics.BinaryChromosome: java.util.List getRepresentation()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i0);

        $r5 = (java.lang.Integer) $r4;

        $r3 = virtualinvoke r2.<org.apache.commons.math3.genetics.BinaryChromosome: java.util.List getRepresentation()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i0);

        $z0 = virtualinvoke $r5.<java.lang.Integer: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label4;

        return 0;

     label4:
        $i0 = $i0 + 1;

        goto label3;

     label5:
        return 1;
    }
