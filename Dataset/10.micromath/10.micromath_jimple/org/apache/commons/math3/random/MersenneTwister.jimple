org.apache.commons.math3.random.MersenneTwister extends org.apache.commons.math3.random.BitsStreamGenerator implements java.io.Serializable
private static final int M
private static final int[] MAG01
private static final int N
private static final long serialVersionUID
private int[] mt
private int mti
    static void <clinit>()
    {
        int[] $r0;

        $r0 = newarray (int)[2];

        $r0[0] = 0;

        $r0[1] = -1727483681;

        <org.apache.commons.math3.random.MersenneTwister: int[] MAG01> = $r0;

        return;
    }
    public void <init>()
    {
        org.apache.commons.math3.random.MersenneTwister r0;
        int[] $r1;
        long $l0, $l2;
        int $i1;

        r0 := @this: org.apache.commons.math3.random.MersenneTwister;

        specialinvoke r0.<org.apache.commons.math3.random.BitsStreamGenerator: void <init>()>();

        $r1 = newarray (int)[624];

        r0.<org.apache.commons.math3.random.MersenneTwister: int[] mt> = $r1;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        $l2 = (long) $i1;

        $l0 = $l0 + $l2;

        virtualinvoke r0.<org.apache.commons.math3.random.MersenneTwister: void setSeed(long)>($l0);

        return;
    }
    public void <init>(int)
    {
        org.apache.commons.math3.random.MersenneTwister r0;
        int $i0;
        int[] $r1;

        r0 := @this: org.apache.commons.math3.random.MersenneTwister;

        $i0 := @parameter0: int;

        specialinvoke r0.<org.apache.commons.math3.random.BitsStreamGenerator: void <init>()>();

        $r1 = newarray (int)[624];

        r0.<org.apache.commons.math3.random.MersenneTwister: int[] mt> = $r1;

        virtualinvoke r0.<org.apache.commons.math3.random.MersenneTwister: void setSeed(int)>($i0);

        return;
    }
    public void <init>(long)
    {
        org.apache.commons.math3.random.MersenneTwister r0;
        long $l0;
        int[] $r1;

        r0 := @this: org.apache.commons.math3.random.MersenneTwister;

        $l0 := @parameter0: long;

        specialinvoke r0.<org.apache.commons.math3.random.BitsStreamGenerator: void <init>()>();

        $r1 = newarray (int)[624];

        r0.<org.apache.commons.math3.random.MersenneTwister: int[] mt> = $r1;

        virtualinvoke r0.<org.apache.commons.math3.random.MersenneTwister: void setSeed(long)>($l0);

        return;
    }
    public void <init>(int[])
    {
        org.apache.commons.math3.random.MersenneTwister r0;
        int[] $r1, $r2;

        r0 := @this: org.apache.commons.math3.random.MersenneTwister;

        $r1 := @parameter0: int[];

        specialinvoke r0.<org.apache.commons.math3.random.BitsStreamGenerator: void <init>()>();

        $r2 = newarray (int)[624];

        r0.<org.apache.commons.math3.random.MersenneTwister: int[] mt> = $r2;

        virtualinvoke r0.<org.apache.commons.math3.random.MersenneTwister: void setSeed(int[])>($r1);

        return;
    }
    protected int next(int)
    {
        org.apache.commons.math3.random.MersenneTwister r0;
        int $i0, $i1, i2, i3, $i4, $i5;
        int[] $r1, $r2;

        r0 := @this: org.apache.commons.math3.random.MersenneTwister;

        $i0 := @parameter0: int;

        $i1 = r0.<org.apache.commons.math3.random.MersenneTwister: int mti>;

        if $i1 < 624 goto label5;

        $r1 = r0.<org.apache.commons.math3.random.MersenneTwister: int[] mt>;

        $i1 = $r1[0];

        i2 = 0;

     label1:
        if i2 >= 227 goto label2;

        i3 = $i1;

        $r1 = r0.<org.apache.commons.math3.random.MersenneTwister: int[] mt>;

        $i1 = i2 + 1;

        $i1 = $r1[$i1];

        i3 = i3 & -2147483648;

        $i4 = $i1 & 2147483647;

        i3 = i3 | $i4;

        $r1 = r0.<org.apache.commons.math3.random.MersenneTwister: int[] mt>;

        $r2 = r0.<org.apache.commons.math3.random.MersenneTwister: int[] mt>;

        $i4 = i2 + 397;

        $i4 = $r2[$i4];

        $i5 = i3 >>> 1;

        $i4 = $i4 ^ $i5;

        $r2 = <org.apache.commons.math3.random.MersenneTwister: int[] MAG01>;

        i3 = i3 & 1;

        i3 = $r2[i3];

        i3 = $i4 ^ i3;

        $r1[i2] = i3;

        i2 = i2 + 1;

        goto label1;

     label2:
        i2 = 227;

     label3:
        if i2 >= 623 goto label4;

        i3 = $i1;

        $r1 = r0.<org.apache.commons.math3.random.MersenneTwister: int[] mt>;

        $i1 = i2 + 1;

        $i1 = $r1[$i1];

        i3 = i3 & -2147483648;

        $i4 = $i1 & 2147483647;

        i3 = i3 | $i4;

        $r1 = r0.<org.apache.commons.math3.random.MersenneTwister: int[] mt>;

        $r2 = r0.<org.apache.commons.math3.random.MersenneTwister: int[] mt>;

        $i4 = i2 + -227;

        $i4 = $r2[$i4];

        $i5 = i3 >>> 1;

        $i4 = $i4 ^ $i5;

        $r2 = <org.apache.commons.math3.random.MersenneTwister: int[] MAG01>;

        i3 = i3 & 1;

        i3 = $r2[i3];

        i3 = $i4 ^ i3;

        $r1[i2] = i3;

        i2 = i2 + 1;

        goto label3;

     label4:
        $i1 = $i1 & -2147483648;

        $r1 = r0.<org.apache.commons.math3.random.MersenneTwister: int[] mt>;

        i2 = $r1[0];

        i2 = i2 & 2147483647;

        $i1 = $i1 | i2;

        $r1 = r0.<org.apache.commons.math3.random.MersenneTwister: int[] mt>;

        $r2 = r0.<org.apache.commons.math3.random.MersenneTwister: int[] mt>;

        i2 = $r2[396];

        i3 = $i1 >>> 1;

        i2 = i2 ^ i3;

        $r2 = <org.apache.commons.math3.random.MersenneTwister: int[] MAG01>;

        $i1 = $i1 & 1;

        $i1 = $r2[$i1];

        $i1 = i2 ^ $i1;

        $r1[623] = $i1;

        r0.<org.apache.commons.math3.random.MersenneTwister: int mti> = 0;

     label5:
        $r1 = r0.<org.apache.commons.math3.random.MersenneTwister: int[] mt>;

        $i1 = r0.<org.apache.commons.math3.random.MersenneTwister: int mti>;

        i2 = $i1 + 1;

        r0.<org.apache.commons.math3.random.MersenneTwister: int mti> = i2;

        $i1 = $r1[$i1];

        i2 = $i1 >>> 11;

        $i1 = $i1 ^ i2;

        i2 = $i1 << 7;

        i2 = i2 & -1658038656;

        $i1 = $i1 ^ i2;

        i2 = $i1 << 15;

        i2 = i2 & -272236544;

        $i1 = $i1 ^ i2;

        i2 = $i1 >>> 18;

        $i1 = $i1 ^ i2;

        $i0 = 32 - $i0;

        $i0 = $i1 >>> $i0;

        return $i0;
    }
    public void setSeed(int)
    {
        org.apache.commons.math3.random.MersenneTwister r0;
        int $i0, $i3;
        long l1, $l2;
        int[] $r1;

        r0 := @this: org.apache.commons.math3.random.MersenneTwister;

        $i0 := @parameter0: int;

        l1 = (long) $i0;

        $r1 = r0.<org.apache.commons.math3.random.MersenneTwister: int[] mt>;

        $i0 = (int) l1;

        $r1[0] = $i0;

        r0.<org.apache.commons.math3.random.MersenneTwister: int mti> = 1;

     label1:
        $i0 = r0.<org.apache.commons.math3.random.MersenneTwister: int mti>;

        if $i0 >= 624 goto label2;

        $l2 = l1 >> 30;

        l1 = $l2 ^ l1;

        l1 = 1812433253L * l1;

        $i0 = r0.<org.apache.commons.math3.random.MersenneTwister: int mti>;

        $l2 = (long) $i0;

        l1 = l1 + $l2;

        l1 = l1 & 4294967295L;

        $r1 = r0.<org.apache.commons.math3.random.MersenneTwister: int[] mt>;

        $i0 = r0.<org.apache.commons.math3.random.MersenneTwister: int mti>;

        $i3 = (int) l1;

        $r1[$i0] = $i3;

        $i0 = r0.<org.apache.commons.math3.random.MersenneTwister: int mti>;

        $i0 = $i0 + 1;

        r0.<org.apache.commons.math3.random.MersenneTwister: int mti> = $i0;

        goto label1;

     label2:
        virtualinvoke r0.<org.apache.commons.math3.random.MersenneTwister: void clear()>();

        return;
    }
    public void setSeed(long)
    {
        org.apache.commons.math3.random.MersenneTwister r0;
        long $l0, $l1;
        int[] $r1;
        int $i2;

        r0 := @this: org.apache.commons.math3.random.MersenneTwister;

        $l0 := @parameter0: long;

        $r1 = newarray (int)[2];

        $l1 = $l0 >>> 32;

        $i2 = (int) $l1;

        $r1[0] = $i2;

        $l0 = 4294967295L & $l0;

        $i2 = (int) $l0;

        $r1[1] = $i2;

        virtualinvoke r0.<org.apache.commons.math3.random.MersenneTwister: void setSeed(int[])>($r1);

        return;
    }
    public void setSeed(int[])
    {
        org.apache.commons.math3.random.MersenneTwister r0;
        int[] $r1, $r2, $r3;
        long $l0, $l2, $l6;
        int $i1, i3, $i4, $i5;

        r0 := @this: org.apache.commons.math3.random.MersenneTwister;

        $r1 := @parameter0: int[];

        if $r1 != null goto label01;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        $l2 = (long) $i1;

        $l0 = $l0 + $l2;

        virtualinvoke r0.<org.apache.commons.math3.random.MersenneTwister: void setSeed(long)>($l0);

        return;

     label01:
        virtualinvoke r0.<org.apache.commons.math3.random.MersenneTwister: void setSeed(int)>(19650218);

        $i1 = 1;

        i3 = 0;

        $i4 = lengthof $r1;

        $i4 = staticinvoke <org.apache.commons.math3.util.FastMath: int max(int,int)>(624, $i4);

     label02:
        if $i4 == 0 goto label09;

        $r2 = r0.<org.apache.commons.math3.random.MersenneTwister: int[] mt>;

        $i5 = $r2[$i1];

        $l0 = (long) $i5;

        $l0 = 2147483647L & $l0;

        $r2 = r0.<org.apache.commons.math3.random.MersenneTwister: int[] mt>;

        $i5 = $r2[$i1];

        if $i5 >= 0 goto label07;

        $l2 = 2147483648L;

     label03:
        $l0 = $l0 | $l2;

        $r2 = r0.<org.apache.commons.math3.random.MersenneTwister: int[] mt>;

        $i5 = $i1 + -1;

        $i5 = $r2[$i5];

        $l2 = (long) $i5;

        $l2 = 2147483647L & $l2;

        $r2 = r0.<org.apache.commons.math3.random.MersenneTwister: int[] mt>;

        $i5 = $i1 + -1;

        $i5 = $r2[$i5];

        if $i5 >= 0 goto label08;

        $l6 = 2147483648L;

     label04:
        $l2 = $l2 | $l6;

        $l6 = $l2 >> 30;

        $l2 = $l6 ^ $l2;

        $l2 = $l2 * 1664525L;

        $l0 = $l2 ^ $l0;

        $i5 = $r1[i3];

        $l2 = (long) $i5;

        $l0 = $l0 + $l2;

        $l2 = (long) i3;

        $l0 = $l0 + $l2;

        $r2 = r0.<org.apache.commons.math3.random.MersenneTwister: int[] mt>;

        $l0 = 4294967295L & $l0;

        $i5 = (int) $l0;

        $r2[$i1] = $i5;

        $i1 = $i1 + 1;

        i3 = i3 + 1;

        if $i1 < 624 goto label05;

        $r2 = r0.<org.apache.commons.math3.random.MersenneTwister: int[] mt>;

        $r3 = r0.<org.apache.commons.math3.random.MersenneTwister: int[] mt>;

        $i1 = $r3[623];

        $r2[0] = $i1;

        $i1 = 1;

     label05:
        $i5 = lengthof $r1;

        if i3 < $i5 goto label06;

        i3 = 0;

     label06:
        $i4 = $i4 + -1;

        goto label02;

     label07:
        $l2 = 0L;

        goto label03;

     label08:
        $l6 = 0L;

        goto label04;

     label09:
        i3 = 623;

     label10:
        if i3 == 0 goto label16;

        $r1 = r0.<org.apache.commons.math3.random.MersenneTwister: int[] mt>;

        $i4 = $r1[$i1];

        $l0 = (long) $i4;

        $l0 = 2147483647L & $l0;

        $r1 = r0.<org.apache.commons.math3.random.MersenneTwister: int[] mt>;

        $i4 = $r1[$i1];

        if $i4 >= 0 goto label14;

        $l2 = 2147483648L;

     label11:
        $l0 = $l0 | $l2;

        $r1 = r0.<org.apache.commons.math3.random.MersenneTwister: int[] mt>;

        $i4 = $i1 + -1;

        $i4 = $r1[$i4];

        $l2 = (long) $i4;

        $l2 = 2147483647L & $l2;

        $r1 = r0.<org.apache.commons.math3.random.MersenneTwister: int[] mt>;

        $i4 = $i1 + -1;

        $i4 = $r1[$i4];

        if $i4 >= 0 goto label15;

        $l6 = 2147483648L;

     label12:
        $l2 = $l2 | $l6;

        $l6 = $l2 >> 30;

        $l2 = $l6 ^ $l2;

        $l2 = $l2 * 1566083941L;

        $l0 = $l2 ^ $l0;

        $l2 = (long) $i1;

        $l0 = $l0 - $l2;

        $r1 = r0.<org.apache.commons.math3.random.MersenneTwister: int[] mt>;

        $l0 = 4294967295L & $l0;

        $i4 = (int) $l0;

        $r1[$i1] = $i4;

        $i1 = $i1 + 1;

        if $i1 < 624 goto label13;

        $r1 = r0.<org.apache.commons.math3.random.MersenneTwister: int[] mt>;

        $r2 = r0.<org.apache.commons.math3.random.MersenneTwister: int[] mt>;

        $i1 = $r2[623];

        $r1[0] = $i1;

        $i1 = 1;

     label13:
        i3 = i3 + -1;

        goto label10;

     label14:
        $l2 = 0L;

        goto label11;

     label15:
        $l6 = 0L;

        goto label12;

     label16:
        $r1 = r0.<org.apache.commons.math3.random.MersenneTwister: int[] mt>;

        $r1[0] = -2147483648;

        virtualinvoke r0.<org.apache.commons.math3.random.MersenneTwister: void clear()>();

        return;
    }
