org.apache.commons.math3.random.EmpiricalDistribution extends org.apache.commons.math3.distribution.AbstractRealDistribution
public static final int DEFAULT_BIN_COUNT
private static final java.lang.String FILE_CHARSET
private static final long serialVersionUID
private final int binCount
private final java.util.List binStats
private double delta
private boolean loaded
private double max
private double min
protected final org.apache.commons.math3.random.RandomDataGenerator randomData
private org.apache.commons.math3.stat.descriptive.SummaryStatistics sampleStats
private double[] upperBounds
    public void <init>()
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        specialinvoke r0.<org.apache.commons.math3.random.EmpiricalDistribution: void <init>(int)>(1000);

        return;
    }
    public void <init>(int)
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        int $i0;
        org.apache.commons.math3.random.RandomDataGenerator $r1;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        $i0 := @parameter0: int;

        $r1 = new org.apache.commons.math3.random.RandomDataGenerator;

        specialinvoke $r1.<org.apache.commons.math3.random.RandomDataGenerator: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.random.EmpiricalDistribution: void <init>(int,org.apache.commons.math3.random.RandomDataGenerator)>($i0, $r1);

        return;
    }
    private void <init>(int, org.apache.commons.math3.random.RandomDataGenerator)
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        int $i0;
        org.apache.commons.math3.random.RandomDataGenerator $r1;
        org.apache.commons.math3.random.RandomGenerator $r2;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r3;
        java.lang.Integer $r4;
        java.util.ArrayList $r5;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        $i0 := @parameter0: int;

        $r1 := @parameter1: org.apache.commons.math3.random.RandomDataGenerator;

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator getRandomGenerator()>();

        specialinvoke r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator)>($r2);

        r0.<org.apache.commons.math3.random.EmpiricalDistribution: org.apache.commons.math3.stat.descriptive.SummaryStatistics sampleStats> = null;

        r0.<org.apache.commons.math3.random.EmpiricalDistribution: double max> = #-Infinity;

        r0.<org.apache.commons.math3.random.EmpiricalDistribution: double min> = #Infinity;

        r0.<org.apache.commons.math3.random.EmpiricalDistribution: double delta> = 0.0;

        r0.<org.apache.commons.math3.random.EmpiricalDistribution: boolean loaded> = 0;

        r0.<org.apache.commons.math3.random.EmpiricalDistribution: double[] upperBounds> = null;

        if $i0 > 0 goto label1;

        $r3 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r3.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(java.lang.Number)>($r4);

        throw $r3;

     label1:
        r0.<org.apache.commons.math3.random.EmpiricalDistribution: int binCount> = $i0;

        r0.<org.apache.commons.math3.random.EmpiricalDistribution: org.apache.commons.math3.random.RandomDataGenerator randomData> = $r1;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.math3.random.EmpiricalDistribution: java.util.List binStats> = $r5;

        return;
    }
    public void <init>(int, org.apache.commons.math3.random.RandomDataImpl)
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        int $i0;
        org.apache.commons.math3.random.RandomDataImpl $r1;
        org.apache.commons.math3.random.RandomDataGenerator $r2;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        $i0 := @parameter0: int;

        $r1 := @parameter1: org.apache.commons.math3.random.RandomDataImpl;

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.random.RandomDataImpl: org.apache.commons.math3.random.RandomDataGenerator getDelegate()>();

        specialinvoke r0.<org.apache.commons.math3.random.EmpiricalDistribution: void <init>(int,org.apache.commons.math3.random.RandomDataGenerator)>($i0, $r2);

        return;
    }
    public void <init>(int, org.apache.commons.math3.random.RandomGenerator)
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        int $i0;
        org.apache.commons.math3.random.RandomGenerator $r1;
        org.apache.commons.math3.random.RandomDataGenerator $r2;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        $i0 := @parameter0: int;

        $r1 := @parameter1: org.apache.commons.math3.random.RandomGenerator;

        $r2 = new org.apache.commons.math3.random.RandomDataGenerator;

        specialinvoke $r2.<org.apache.commons.math3.random.RandomDataGenerator: void <init>(org.apache.commons.math3.random.RandomGenerator)>($r1);

        specialinvoke r0.<org.apache.commons.math3.random.EmpiricalDistribution: void <init>(int,org.apache.commons.math3.random.RandomDataGenerator)>($i0, $r2);

        return;
    }
    public void <init>(org.apache.commons.math3.random.RandomDataImpl)
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        org.apache.commons.math3.random.RandomDataImpl $r1;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        $r1 := @parameter0: org.apache.commons.math3.random.RandomDataImpl;

        specialinvoke r0.<org.apache.commons.math3.random.EmpiricalDistribution: void <init>(int,org.apache.commons.math3.random.RandomDataImpl)>(1000, $r1);

        return;
    }
    public void <init>(org.apache.commons.math3.random.RandomGenerator)
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        org.apache.commons.math3.random.RandomGenerator $r1;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        $r1 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        specialinvoke r0.<org.apache.commons.math3.random.EmpiricalDistribution: void <init>(int,org.apache.commons.math3.random.RandomGenerator)>(1000, $r1);

        return;
    }
    static int access$100(org.apache.commons.math3.random.EmpiricalDistribution, double)
    {
        org.apache.commons.math3.random.EmpiricalDistribution $r0;
        double $d0;
        int $i0;

        $r0 := @parameter0: org.apache.commons.math3.random.EmpiricalDistribution;

        $d0 := @parameter1: double;

        $i0 = specialinvoke $r0.<org.apache.commons.math3.random.EmpiricalDistribution: int findBin(double)>($d0);

        return $i0;
    }
    static java.util.List access$200(org.apache.commons.math3.random.EmpiricalDistribution)
    {
        org.apache.commons.math3.random.EmpiricalDistribution $r0;
        java.util.List r1;

        $r0 := @parameter0: org.apache.commons.math3.random.EmpiricalDistribution;

        r1 = $r0.<org.apache.commons.math3.random.EmpiricalDistribution: java.util.List binStats>;

        return r1;
    }
    static org.apache.commons.math3.stat.descriptive.SummaryStatistics access$300(org.apache.commons.math3.random.EmpiricalDistribution)
    {
        org.apache.commons.math3.random.EmpiricalDistribution $r0;
        org.apache.commons.math3.stat.descriptive.SummaryStatistics r1;

        $r0 := @parameter0: org.apache.commons.math3.random.EmpiricalDistribution;

        r1 = $r0.<org.apache.commons.math3.random.EmpiricalDistribution: org.apache.commons.math3.stat.descriptive.SummaryStatistics sampleStats>;

        return r1;
    }
    static org.apache.commons.math3.stat.descriptive.SummaryStatistics access$302(org.apache.commons.math3.random.EmpiricalDistribution, org.apache.commons.math3.stat.descriptive.SummaryStatistics)
    {
        org.apache.commons.math3.random.EmpiricalDistribution $r0;
        org.apache.commons.math3.stat.descriptive.SummaryStatistics $r1;

        $r0 := @parameter0: org.apache.commons.math3.random.EmpiricalDistribution;

        $r1 := @parameter1: org.apache.commons.math3.stat.descriptive.SummaryStatistics;

        $r0.<org.apache.commons.math3.random.EmpiricalDistribution: org.apache.commons.math3.stat.descriptive.SummaryStatistics sampleStats> = $r1;

        return $r1;
    }
    private double cumBinP(int)
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        int $i0;
        double[] $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        $i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: double[] upperBounds>;

        $d0 = $r1[$i0];

        return $d0;
    }
    private void fillBinStats(org.apache.commons.math3.random.EmpiricalDistribution$DataAdapter) throws java.io.IOException
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        org.apache.commons.math3.random.EmpiricalDistribution$DataAdapter $r1;
        org.apache.commons.math3.stat.descriptive.SummaryStatistics r2;
        double $d0, $d1, $d2;
        int $i0, $i1;
        java.util.List $r3;
        boolean $z0;
        double[] $r4, $r6;
        java.lang.Object $r5;
        long $l2;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        $r1 := @parameter0: org.apache.commons.math3.random.EmpiricalDistribution$DataAdapter;

        r2 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: org.apache.commons.math3.stat.descriptive.SummaryStatistics sampleStats>;

        $d0 = virtualinvoke r2.<org.apache.commons.math3.stat.descriptive.SummaryStatistics: double getMin()>();

        r0.<org.apache.commons.math3.random.EmpiricalDistribution: double min> = $d0;

        r2 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: org.apache.commons.math3.stat.descriptive.SummaryStatistics sampleStats>;

        $d0 = virtualinvoke r2.<org.apache.commons.math3.stat.descriptive.SummaryStatistics: double getMax()>();

        r0.<org.apache.commons.math3.random.EmpiricalDistribution: double max> = $d0;

        $d0 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: double max>;

        $d1 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: double min>;

        $d0 = $d0 - $d1;

        $i0 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: int binCount>;

        $d1 = (double) $i0;

        $d0 = $d0 / $d1;

        r0.<org.apache.commons.math3.random.EmpiricalDistribution: double delta> = $d0;

        $r3 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: java.util.List binStats>;

        $z0 = interfaceinvoke $r3.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r3 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: java.util.List binStats>;

        interfaceinvoke $r3.<java.util.List: void clear()>();

     label1:
        $i0 = 0;

     label2:
        $i1 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: int binCount>;

        if $i0 >= $i1 goto label3;

        r2 = new org.apache.commons.math3.stat.descriptive.SummaryStatistics;

        specialinvoke r2.<org.apache.commons.math3.stat.descriptive.SummaryStatistics: void <init>()>();

        $r3 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: java.util.List binStats>;

        interfaceinvoke $r3.<java.util.List: void add(int,java.lang.Object)>($i0, r2);

        $i0 = $i0 + 1;

        goto label2;

     label3:
        virtualinvoke $r1.<org.apache.commons.math3.random.EmpiricalDistribution$DataAdapter: void computeBinStats()>();

        $i0 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: int binCount>;

        $r4 = newarray (double)[$i0];

        r0.<org.apache.commons.math3.random.EmpiricalDistribution: double[] upperBounds> = $r4;

        $r4 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: double[] upperBounds>;

        $r3 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: java.util.List binStats>;

        $r5 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(0);

        r2 = (org.apache.commons.math3.stat.descriptive.SummaryStatistics) $r5;

        $l2 = virtualinvoke r2.<org.apache.commons.math3.stat.descriptive.SummaryStatistics: long getN()>();

        $d0 = (double) $l2;

        r2 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: org.apache.commons.math3.stat.descriptive.SummaryStatistics sampleStats>;

        $l2 = virtualinvoke r2.<org.apache.commons.math3.stat.descriptive.SummaryStatistics: long getN()>();

        $d1 = (double) $l2;

        $d0 = $d0 / $d1;

        $r4[0] = $d0;

        $i0 = 1;

     label4:
        $i1 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: int binCount>;

        $i1 = $i1 + -1;

        if $i0 >= $i1 goto label5;

        $r4 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: double[] upperBounds>;

        $r6 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: double[] upperBounds>;

        $i1 = $i0 + -1;

        $d0 = $r6[$i1];

        $r3 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: java.util.List binStats>;

        $r5 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i0);

        r2 = (org.apache.commons.math3.stat.descriptive.SummaryStatistics) $r5;

        $l2 = virtualinvoke r2.<org.apache.commons.math3.stat.descriptive.SummaryStatistics: long getN()>();

        $d1 = (double) $l2;

        r2 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: org.apache.commons.math3.stat.descriptive.SummaryStatistics sampleStats>;

        $l2 = virtualinvoke r2.<org.apache.commons.math3.stat.descriptive.SummaryStatistics: long getN()>();

        $d2 = (double) $l2;

        $d1 = $d1 / $d2;

        $d0 = $d0 + $d1;

        $r4[$i0] = $d0;

        $i0 = $i0 + 1;

        goto label4;

     label5:
        $r4 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: double[] upperBounds>;

        $i0 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: int binCount>;

        $i0 = $i0 + -1;

        $r4[$i0] = 1.0;

        return;
    }
    private int findBin(double)
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        double $d0, $d1;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        $d0 := @parameter0: double;

        $d1 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: double min>;

        $d1 = $d0 - $d1;

        $d0 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: double delta>;

        $d0 = $d1 / $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double ceil(double)>($d0);

        $i0 = (int) $d0;

        $i0 = $i0 + -1;

        $i0 = staticinvoke <org.apache.commons.math3.util.FastMath: int max(int,int)>($i0, 0);

        $i1 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: int binCount>;

        $i1 = $i1 + -1;

        $i0 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i0, $i1);

        return $i0;
    }
    private org.apache.commons.math3.distribution.RealDistribution k(double)
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        double $d0;
        int $i0;
        java.util.List $r1;
        java.lang.Object $r2;
        org.apache.commons.math3.stat.descriptive.SummaryStatistics $r3;
        org.apache.commons.math3.distribution.RealDistribution $r4;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        $d0 := @parameter0: double;

        $i0 = specialinvoke r0.<org.apache.commons.math3.random.EmpiricalDistribution: int findBin(double)>($d0);

        $r1 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: java.util.List binStats>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        $r3 = (org.apache.commons.math3.stat.descriptive.SummaryStatistics) $r2;

        $r4 = virtualinvoke r0.<org.apache.commons.math3.random.EmpiricalDistribution: org.apache.commons.math3.distribution.RealDistribution getKernel(org.apache.commons.math3.stat.descriptive.SummaryStatistics)>($r3);

        return $r4;
    }
    private double kB(int)
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        int $i0, $i1;
        double[] $r1;
        java.util.List $r2;
        java.lang.Object $r3;
        org.apache.commons.math3.stat.descriptive.SummaryStatistics $r4;
        org.apache.commons.math3.distribution.RealDistribution $r5;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.random.EmpiricalDistribution: double[] getUpperBounds()>();

        $r2 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: java.util.List binStats>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i0);

        $r4 = (org.apache.commons.math3.stat.descriptive.SummaryStatistics) $r3;

        $r5 = virtualinvoke r0.<org.apache.commons.math3.random.EmpiricalDistribution: org.apache.commons.math3.distribution.RealDistribution getKernel(org.apache.commons.math3.stat.descriptive.SummaryStatistics)>($r4);

        if $i0 != 0 goto label1;

        $d0 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: double min>;

        $d1 = $r1[0];

        $d0 = interfaceinvoke $r5.<org.apache.commons.math3.distribution.RealDistribution: double cumulativeProbability(double,double)>($d0, $d1);

        return $d0;

     label1:
        $i1 = $i0 + -1;

        $d0 = $r1[$i1];

        $d1 = $r1[$i0];

        $d0 = interfaceinvoke $r5.<org.apache.commons.math3.distribution.RealDistribution: double cumulativeProbability(double,double)>($d0, $d1);

        return $d0;
    }
    private double pB(int)
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        int $i0;
        double[] $r1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        $i0 := @parameter0: int;

        if $i0 != 0 goto label1;

        $r1 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: double[] upperBounds>;

        $d0 = $r1[0];

        return $d0;

     label1:
        $r1 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: double[] upperBounds>;

        $d0 = $r1[$i0];

        $r1 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: double[] upperBounds>;

        $i0 = $i0 + -1;

        $d1 = $r1[$i0];

        $d0 = $d0 - $d1;

        return $d0;
    }
    private double pBminus(int)
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        int $i0;
        double[] $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        $i0 := @parameter0: int;

        if $i0 != 0 goto label1;

        return 0.0;

     label1:
        $r1 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: double[] upperBounds>;

        $i0 = $i0 + -1;

        $d0 = $r1[$i0];

        return $d0;
    }
    public double cumulativeProbability(double)
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        double $d0, $d1, $d2, $d3, d4;
        byte $b0;
        int $i1;
        org.apache.commons.math3.distribution.RealDistribution $r1;
        boolean $z0;
        double[] $r2;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        $d0 := @parameter0: double;

        $d1 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: double min>;

        $b0 = $d0 cmpg $d1;

        if $b0 >= 0 goto label1;

        return 0.0;

     label1:
        $d1 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: double max>;

        $b0 = $d0 cmpl $d1;

        if $b0 < 0 goto label2;

        return 1.0;

     label2:
        $i1 = specialinvoke r0.<org.apache.commons.math3.random.EmpiricalDistribution: int findBin(double)>($d0);

        $d1 = specialinvoke r0.<org.apache.commons.math3.random.EmpiricalDistribution: double pBminus(int)>($i1);

        $d2 = specialinvoke r0.<org.apache.commons.math3.random.EmpiricalDistribution: double pB(int)>($i1);

        $r1 = specialinvoke r0.<org.apache.commons.math3.random.EmpiricalDistribution: org.apache.commons.math3.distribution.RealDistribution k(double)>($d0);

        $z0 = $r1 instanceof org.apache.commons.math3.distribution.ConstantRealDistribution;

        if $z0 == 0 goto label3;

        $d3 = interfaceinvoke $r1.<org.apache.commons.math3.distribution.RealDistribution: double getNumericalMean()>();

        $b0 = $d0 cmpg $d3;

        if $b0 < 0 goto label6;

        $d0 = $d1 + $d2;

        return $d0;

     label3:
        $r2 = virtualinvoke r0.<org.apache.commons.math3.random.EmpiricalDistribution: double[] getUpperBounds()>();

        $d3 = specialinvoke r0.<org.apache.commons.math3.random.EmpiricalDistribution: double kB(int)>($i1);

        if $i1 != 0 goto label5;

        d4 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: double min>;

     label4:
        $d0 = interfaceinvoke $r1.<org.apache.commons.math3.distribution.RealDistribution: double cumulativeProbability(double)>($d0);

        d4 = interfaceinvoke $r1.<org.apache.commons.math3.distribution.RealDistribution: double cumulativeProbability(double)>(d4);

        $d0 = $d0 - d4;

        $d0 = $d0 / $d3;

        $d0 = $d2 * $d0;

        $d0 = $d1 + $d0;

        return $d0;

     label5:
        $i1 = $i1 + -1;

        d4 = $r2[$i1];

        goto label4;

     label6:
        return $d1;
    }
    public double density(double)
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        double $d0, $d1;
        byte $b0;
        int $i1;
        java.util.List $r1;
        java.lang.Object $r2;
        org.apache.commons.math3.stat.descriptive.SummaryStatistics $r3;
        org.apache.commons.math3.distribution.RealDistribution $r4;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        $d0 := @parameter0: double;

        $d1 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: double min>;

        $b0 = $d0 cmpg $d1;

        if $b0 < 0 goto label1;

        $d1 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: double max>;

        $b0 = $d0 cmpl $d1;

        if $b0 <= 0 goto label2;

     label1:
        return 0.0;

     label2:
        $i1 = specialinvoke r0.<org.apache.commons.math3.random.EmpiricalDistribution: int findBin(double)>($d0);

        $r1 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: java.util.List binStats>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i1);

        $r3 = (org.apache.commons.math3.stat.descriptive.SummaryStatistics) $r2;

        $r4 = virtualinvoke r0.<org.apache.commons.math3.random.EmpiricalDistribution: org.apache.commons.math3.distribution.RealDistribution getKernel(org.apache.commons.math3.stat.descriptive.SummaryStatistics)>($r3);

        $d0 = interfaceinvoke $r4.<org.apache.commons.math3.distribution.RealDistribution: double density(double)>($d0);

        $d1 = specialinvoke r0.<org.apache.commons.math3.random.EmpiricalDistribution: double pB(int)>($i1);

        $d0 = $d0 * $d1;

        $d1 = specialinvoke r0.<org.apache.commons.math3.random.EmpiricalDistribution: double kB(int)>($i1);

        $d0 = $d0 / $d1;

        return $d0;
    }
    public int getBinCount()
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        int i0;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        i0 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: int binCount>;

        return i0;
    }
    public java.util.List getBinStats()
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        java.util.List r1;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        r1 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: java.util.List binStats>;

        return r1;
    }
    public double[] getGeneratorUpperBounds()
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        int i0;
        double[] r1, $r2;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        r1 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: double[] upperBounds>;

        i0 = lengthof r1;

        r1 = newarray (double)[i0];

        $r2 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: double[] upperBounds>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, 0, i0);

        return r1;
    }
    protected org.apache.commons.math3.distribution.RealDistribution getKernel(org.apache.commons.math3.stat.descriptive.SummaryStatistics)
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        org.apache.commons.math3.stat.descriptive.SummaryStatistics $r1;
        long $l0;
        byte $b1;
        double $d0, $d1;
        org.apache.commons.math3.distribution.ConstantRealDistribution $r2;
        org.apache.commons.math3.distribution.NormalDistribution $r3;
        org.apache.commons.math3.random.RandomDataGenerator $r4;
        org.apache.commons.math3.random.RandomGenerator $r5;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        $r1 := @parameter0: org.apache.commons.math3.stat.descriptive.SummaryStatistics;

        $l0 = virtualinvoke $r1.<org.apache.commons.math3.stat.descriptive.SummaryStatistics: long getN()>();

        $b1 = $l0 cmp 1L;

        if $b1 == 0 goto label1;

        $d0 = virtualinvoke $r1.<org.apache.commons.math3.stat.descriptive.SummaryStatistics: double getVariance()>();

        $b1 = $d0 cmpl 0.0;

        if $b1 != 0 goto label2;

     label1:
        $r2 = new org.apache.commons.math3.distribution.ConstantRealDistribution;

        $d0 = virtualinvoke $r1.<org.apache.commons.math3.stat.descriptive.SummaryStatistics: double getMean()>();

        specialinvoke $r2.<org.apache.commons.math3.distribution.ConstantRealDistribution: void <init>(double)>($d0);

        return $r2;

     label2:
        $r3 = new org.apache.commons.math3.distribution.NormalDistribution;

        $r4 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: org.apache.commons.math3.random.RandomDataGenerator randomData>;

        $r5 = virtualinvoke $r4.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator getRandomGenerator()>();

        $d0 = virtualinvoke $r1.<org.apache.commons.math3.stat.descriptive.SummaryStatistics: double getMean()>();

        $d1 = virtualinvoke $r1.<org.apache.commons.math3.stat.descriptive.SummaryStatistics: double getStandardDeviation()>();

        specialinvoke $r3.<org.apache.commons.math3.distribution.NormalDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double,double,double)>($r5, $d0, $d1, 1.0E-9);

        return $r3;
    }
    public double getNextValue() throws org.apache.commons.math3.exception.MathIllegalStateException
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        org.apache.commons.math3.exception.util.LocalizedFormats $r1;
        double $d0;
        boolean $z0;
        org.apache.commons.math3.exception.MathIllegalStateException $r2;
        java.lang.Object[] $r3;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        $z0 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: boolean loaded>;

        if $z0 != 0 goto label1;

        $r2 = new org.apache.commons.math3.exception.MathIllegalStateException;

        $r1 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats DISTRIBUTION_NOT_LOADED>;

        $r3 = newarray (java.lang.Object)[0];

        specialinvoke $r2.<org.apache.commons.math3.exception.MathIllegalStateException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r1, $r3);

        throw $r2;

     label1:
        $d0 = virtualinvoke r0.<org.apache.commons.math3.random.EmpiricalDistribution: double sample()>();

        return $d0;
    }
    public double getNumericalMean()
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        double $d0;
        org.apache.commons.math3.stat.descriptive.SummaryStatistics $r1;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        $r1 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: org.apache.commons.math3.stat.descriptive.SummaryStatistics sampleStats>;

        $d0 = virtualinvoke $r1.<org.apache.commons.math3.stat.descriptive.SummaryStatistics: double getMean()>();

        return $d0;
    }
    public double getNumericalVariance()
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        double $d0;
        org.apache.commons.math3.stat.descriptive.SummaryStatistics $r1;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        $r1 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: org.apache.commons.math3.stat.descriptive.SummaryStatistics sampleStats>;

        $d0 = virtualinvoke $r1.<org.apache.commons.math3.stat.descriptive.SummaryStatistics: double getVariance()>();

        return $d0;
    }
    public org.apache.commons.math3.stat.descriptive.StatisticalSummary getSampleStats()
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        org.apache.commons.math3.stat.descriptive.SummaryStatistics r1;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        r1 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: org.apache.commons.math3.stat.descriptive.SummaryStatistics sampleStats>;

        return r1;
    }
    public double getSupportLowerBound()
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        double d0;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        d0 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: double min>;

        return d0;
    }
    public double getSupportUpperBound()
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        double d0;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        d0 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: double max>;

        return d0;
    }
    public double[] getUpperBounds()
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        double[] r1;
        int $i0, $i1;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        $i0 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: int binCount>;

        r1 = newarray (double)[$i0];

        $i0 = 0;

     label1:
        $i1 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: int binCount>;

        $i1 = $i1 + -1;

        if $i0 >= $i1 goto label2;

        $d0 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: double min>;

        $d1 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: double delta>;

        $i1 = $i0 + 1;

        $d2 = (double) $i1;

        $d1 = $d1 * $d2;

        $d0 = $d0 + $d1;

        r1[$i0] = $d0;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $i0 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: int binCount>;

        $i0 = $i0 + -1;

        $d0 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: double max>;

        r1[$i0] = $d0;

        return r1;
    }
    public double inverseCumulativeProbability(double) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        double $d0, $d1, $d2, d3, $d4, $d5;
        byte $b0;
        org.apache.commons.math3.exception.OutOfRangeException $r1;
        java.lang.Double $r2;
        java.lang.Integer $r3, $r4;
        int i1, $i2;
        java.util.List $r5;
        java.lang.Object $r6;
        org.apache.commons.math3.stat.descriptive.SummaryStatistics $r7;
        org.apache.commons.math3.distribution.RealDistribution $r8;
        double[] $r9;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        $d0 := @parameter0: double;

        $b0 = $d0 cmpg 0.0;

        if $b0 < 0 goto label1;

        $b0 = $d0 cmpl 1.0;

        if $b0 <= 0 goto label2;

     label1:
        $r1 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke $r1.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r2, $r3, $r4);

        throw $r1;

     label2:
        $b0 = $d0 cmpl 0.0;

        if $b0 != 0 goto label3;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.random.EmpiricalDistribution: double getSupportLowerBound()>();

        return $d0;

     label3:
        $b0 = $d0 cmpl 1.0;

        if $b0 != 0 goto label4;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.random.EmpiricalDistribution: double getSupportUpperBound()>();

        return $d0;

     label4:
        i1 = 0;

     label5:
        $d1 = specialinvoke r0.<org.apache.commons.math3.random.EmpiricalDistribution: double cumBinP(int)>(i1);

        $b0 = $d1 cmpg $d0;

        if $b0 >= 0 goto label6;

        i1 = i1 + 1;

        goto label5;

     label6:
        $r5 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: java.util.List binStats>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i1);

        $r7 = (org.apache.commons.math3.stat.descriptive.SummaryStatistics) $r6;

        $r8 = virtualinvoke r0.<org.apache.commons.math3.random.EmpiricalDistribution: org.apache.commons.math3.distribution.RealDistribution getKernel(org.apache.commons.math3.stat.descriptive.SummaryStatistics)>($r7);

        $d2 = specialinvoke r0.<org.apache.commons.math3.random.EmpiricalDistribution: double kB(int)>(i1);

        $r9 = virtualinvoke r0.<org.apache.commons.math3.random.EmpiricalDistribution: double[] getUpperBounds()>();

        if i1 != 0 goto label8;

        d3 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: double min>;

     label7:
        $d1 = interfaceinvoke $r8.<org.apache.commons.math3.distribution.RealDistribution: double cumulativeProbability(double)>(d3);

        $d4 = specialinvoke r0.<org.apache.commons.math3.random.EmpiricalDistribution: double pB(int)>(i1);

        $d5 = specialinvoke r0.<org.apache.commons.math3.random.EmpiricalDistribution: double pBminus(int)>(i1);

        $d0 = $d0 - $d5;

        $b0 = $d0 cmpg 0.0;

        if $b0 <= 0 goto label9;

        $d0 = $d0 * $d2;

        $d0 = $d0 / $d4;

        $d0 = $d0 + $d1;

        $d0 = interfaceinvoke $r8.<org.apache.commons.math3.distribution.RealDistribution: double inverseCumulativeProbability(double)>($d0);

        return $d0;

     label8:
        $i2 = i1 + -1;

        d3 = $r9[$i2];

        goto label7;

     label9:
        return d3;
    }
    public boolean isLoaded()
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        boolean z0;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        z0 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: boolean loaded>;

        return z0;
    }
    public boolean isSupportConnected()
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        return 1;
    }
    public boolean isSupportLowerBoundInclusive()
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        return 1;
    }
    public boolean isSupportUpperBoundInclusive()
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        return 1;
    }
    public void load(java.io.File) throws java.io.IOException, org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        java.io.File $r1;
        org.apache.commons.math3.random.EmpiricalDistribution$StreamDataAdapter r2;
        java.io.BufferedReader r3, r7;
        java.io.FileInputStream r4;
        java.io.IOException $r5, $r10;
        java.nio.charset.Charset $r6;
        java.io.InputStreamReader $r8;
        java.lang.Throwable $r9;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        $r1 := @parameter0: java.io.File;

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>($r1);

        $r6 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("US-ASCII");

        r4 = new java.io.FileInputStream;

        specialinvoke r4.<java.io.FileInputStream: void <init>(java.io.File)>($r1);

        r7 = new java.io.BufferedReader;

        $r8 = new java.io.InputStreamReader;

        specialinvoke $r8.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>(r4, $r6);

        specialinvoke r7.<java.io.BufferedReader: void <init>(java.io.Reader)>($r8);

     label01:
        r2 = new org.apache.commons.math3.random.EmpiricalDistribution$StreamDataAdapter;

        specialinvoke r2.<org.apache.commons.math3.random.EmpiricalDistribution$StreamDataAdapter: void <init>(org.apache.commons.math3.random.EmpiricalDistribution,java.io.BufferedReader)>(r0, r7);

        virtualinvoke r2.<org.apache.commons.math3.random.EmpiricalDistribution$DataAdapter: void computeStats()>();

        r4 = new java.io.FileInputStream;

        specialinvoke r4.<java.io.FileInputStream: void <init>(java.io.File)>($r1);

     label02:
        r3 = new java.io.BufferedReader;

        $r8 = new java.io.InputStreamReader;

        specialinvoke $r8.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>(r4, $r6);

        specialinvoke r3.<java.io.BufferedReader: void <init>(java.io.Reader)>($r8);

     label03:
        r2 = new org.apache.commons.math3.random.EmpiricalDistribution$StreamDataAdapter;

        specialinvoke r2.<org.apache.commons.math3.random.EmpiricalDistribution$StreamDataAdapter: void <init>(org.apache.commons.math3.random.EmpiricalDistribution,java.io.BufferedReader)>(r0, r3);

        specialinvoke r0.<org.apache.commons.math3.random.EmpiricalDistribution: void fillBinStats(org.apache.commons.math3.random.EmpiricalDistribution$DataAdapter)>(r2);

        r0.<org.apache.commons.math3.random.EmpiricalDistribution: boolean loaded> = 1;

     label04:
        virtualinvoke r3.<java.io.BufferedReader: void close()>();

     label05:
        return;

     label06:
        $r9 := @caughtexception;

     label07:
        virtualinvoke r7.<java.io.BufferedReader: void close()>();

     label08:
        throw $r9;

     label09:
        $r10 := @caughtexception;

        return;

     label10:
        $r5 := @caughtexception;

        goto label08;

     label11:
        $r9 := @caughtexception;

        goto label07;

     label12:
        $r9 := @caughtexception;

        r7 = r3;

        goto label07;

        catch java.lang.Throwable from label01 to label02 with label06;
        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.io.IOException from label04 to label05 with label09;
        catch java.io.IOException from label07 to label08 with label10;
    }
    public void load(java.net.URL) throws java.io.IOException, org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.ZeroException
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        java.net.URL $r1;
        org.apache.commons.math3.random.EmpiricalDistribution$StreamDataAdapter r2;
        java.io.BufferedReader r3, r5;
        java.nio.charset.Charset $r4;
        java.io.InputStreamReader $r6;
        java.io.InputStream $r7;
        org.apache.commons.math3.stat.descriptive.SummaryStatistics $r8;
        long $l0;
        byte $b1;
        org.apache.commons.math3.exception.ZeroException $r9;
        org.apache.commons.math3.exception.util.LocalizedFormats $r10;
        java.lang.Object[] $r11;
        java.lang.Throwable $r12;
        java.io.IOException $r13, $r14;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        $r1 := @parameter0: java.net.URL;

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>($r1);

        $r4 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("US-ASCII");

        r5 = new java.io.BufferedReader;

        $r6 = new java.io.InputStreamReader;

        $r7 = virtualinvoke $r1.<java.net.URL: java.io.InputStream openStream()>();

        specialinvoke $r6.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>($r7, $r4);

        specialinvoke r5.<java.io.BufferedReader: void <init>(java.io.Reader)>($r6);

     label01:
        r2 = new org.apache.commons.math3.random.EmpiricalDistribution$StreamDataAdapter;

        specialinvoke r2.<org.apache.commons.math3.random.EmpiricalDistribution$StreamDataAdapter: void <init>(org.apache.commons.math3.random.EmpiricalDistribution,java.io.BufferedReader)>(r0, r5);

        virtualinvoke r2.<org.apache.commons.math3.random.EmpiricalDistribution$DataAdapter: void computeStats()>();

        $r8 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: org.apache.commons.math3.stat.descriptive.SummaryStatistics sampleStats>;

        $l0 = virtualinvoke $r8.<org.apache.commons.math3.stat.descriptive.SummaryStatistics: long getN()>();

     label02:
        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label07;

     label03:
        $r9 = new org.apache.commons.math3.exception.ZeroException;

        $r10 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats URL_CONTAINS_NO_DATA>;

        $r11 = newarray (java.lang.Object)[1];

        $r11[0] = $r1;

        specialinvoke $r9.<org.apache.commons.math3.exception.ZeroException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r10, $r11);

        throw $r9;

     label04:
        $r12 := @caughtexception;

     label05:
        virtualinvoke r5.<java.io.BufferedReader: void close()>();

     label06:
        throw $r12;

     label07:
        r3 = new java.io.BufferedReader;

        $r6 = new java.io.InputStreamReader;

        $r7 = virtualinvoke $r1.<java.net.URL: java.io.InputStream openStream()>();

        specialinvoke $r6.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>($r7, $r4);

        specialinvoke r3.<java.io.BufferedReader: void <init>(java.io.Reader)>($r6);

     label08:
        r2 = new org.apache.commons.math3.random.EmpiricalDistribution$StreamDataAdapter;

        specialinvoke r2.<org.apache.commons.math3.random.EmpiricalDistribution$StreamDataAdapter: void <init>(org.apache.commons.math3.random.EmpiricalDistribution,java.io.BufferedReader)>(r0, r3);

        specialinvoke r0.<org.apache.commons.math3.random.EmpiricalDistribution: void fillBinStats(org.apache.commons.math3.random.EmpiricalDistribution$DataAdapter)>(r2);

        r0.<org.apache.commons.math3.random.EmpiricalDistribution: boolean loaded> = 1;

     label09:
        virtualinvoke r3.<java.io.BufferedReader: void close()>();

     label10:
        return;

     label11:
        $r13 := @caughtexception;

        return;

     label12:
        $r14 := @caughtexception;

        goto label06;

     label13:
        $r12 := @caughtexception;

        r5 = r3;

        goto label05;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label03 to label04 with label04;
        catch java.io.IOException from label05 to label06 with label12;
        catch java.lang.Throwable from label07 to label08 with label04;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.io.IOException from label09 to label10 with label11;
    }
    public void load(double[]) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        double[] $r1;
        org.apache.commons.math3.random.EmpiricalDistribution$ArrayDataAdapter r2;
        java.io.IOException r3;
        org.apache.commons.math3.exception.MathInternalError $r4;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        $r1 := @parameter0: double[];

        r2 = new org.apache.commons.math3.random.EmpiricalDistribution$ArrayDataAdapter;

        specialinvoke r2.<org.apache.commons.math3.random.EmpiricalDistribution$ArrayDataAdapter: void <init>(org.apache.commons.math3.random.EmpiricalDistribution,double[])>(r0, $r1);

     label1:
        virtualinvoke r2.<org.apache.commons.math3.random.EmpiricalDistribution$DataAdapter: void computeStats()>();

     label2:
        r2 = new org.apache.commons.math3.random.EmpiricalDistribution$ArrayDataAdapter;

     label3:
        specialinvoke r2.<org.apache.commons.math3.random.EmpiricalDistribution$ArrayDataAdapter: void <init>(org.apache.commons.math3.random.EmpiricalDistribution,double[])>(r0, $r1);

        specialinvoke r0.<org.apache.commons.math3.random.EmpiricalDistribution: void fillBinStats(org.apache.commons.math3.random.EmpiricalDistribution$DataAdapter)>(r2);

     label4:
        r0.<org.apache.commons.math3.random.EmpiricalDistribution: boolean loaded> = 1;

        return;

     label5:
        r3 := @caughtexception;

        $r4 = new org.apache.commons.math3.exception.MathInternalError;

        specialinvoke $r4.<org.apache.commons.math3.exception.MathInternalError: void <init>()>();

        throw $r4;

        catch java.io.IOException from label1 to label2 with label5;
        catch java.io.IOException from label3 to label4 with label5;
    }
    public double probability(double)
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        $d0 := @parameter0: double;

        return 0.0;
    }
    public void reSeed(long)
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        long $l0;
        org.apache.commons.math3.random.RandomDataGenerator $r1;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        $l0 := @parameter0: long;

        $r1 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: org.apache.commons.math3.random.RandomDataGenerator randomData>;

        virtualinvoke $r1.<org.apache.commons.math3.random.RandomDataGenerator: void reSeed(long)>($l0);

        return;
    }
    public void reseedRandomGenerator(long)
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        long $l0;
        org.apache.commons.math3.random.RandomDataGenerator $r1;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        $l0 := @parameter0: long;

        $r1 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: org.apache.commons.math3.random.RandomDataGenerator randomData>;

        virtualinvoke $r1.<org.apache.commons.math3.random.RandomDataGenerator: void reSeed(long)>($l0);

        return;
    }
