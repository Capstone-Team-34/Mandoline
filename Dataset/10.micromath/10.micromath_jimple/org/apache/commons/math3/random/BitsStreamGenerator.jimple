org.apache.commons.math3.random.BitsStreamGenerator extends java.lang.Object implements org.apache.commons.math3.random.RandomGenerator java.io.Serializable
private static final long serialVersionUID
private double nextGaussian
    public void <init>()
    {
        org.apache.commons.math3.random.BitsStreamGenerator r0;

        r0 := @this: org.apache.commons.math3.random.BitsStreamGenerator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.random.BitsStreamGenerator: double nextGaussian> = #NaN;

        return;
    }
    private void nextBytesFill(byte[], int, int)
    {
        org.apache.commons.math3.random.BitsStreamGenerator r0;
        byte[] $r1;
        int $i0, $i1, i2, $i3, $i4, i5, $i7;
        byte $b6;

        r0 := @this: org.apache.commons.math3.random.BitsStreamGenerator;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i3 = 2147483644 & $i1;

        i2 = $i0 + $i3;

        $i3 = $i0;

     label1:
        if $i3 >= i2 goto label2;

        $i4 = virtualinvoke r0.<org.apache.commons.math3.random.BitsStreamGenerator: int next(int)>(32);

        i5 = $i3 + 1;

        $b6 = (byte) $i4;

        $r1[$i3] = $b6;

        $i3 = i5 + 1;

        $i7 = $i4 >>> 8;

        $b6 = (byte) $i7;

        $r1[i5] = $b6;

        i5 = $i3 + 1;

        $i7 = $i4 >>> 16;

        $b6 = (byte) $i7;

        $r1[$i3] = $b6;

        $i3 = i5 + 1;

        $i4 = $i4 >>> 24;

        $b6 = (byte) $i4;

        $r1[i5] = $b6;

        goto label1;

     label2:
        $i0 = $i0 + $i1;

        if $i3 >= $i0 goto label4;

        $i1 = virtualinvoke r0.<org.apache.commons.math3.random.BitsStreamGenerator: int next(int)>(32);

        i2 = $i3;

     label3:
        $i3 = i2 + 1;

        $b6 = (byte) $i1;

        $r1[i2] = $b6;

        if $i3 >= $i0 goto label4;

        $i1 = $i1 >>> 8;

        i2 = $i3;

        goto label3;

     label4:
        return;
    }
    public void clear()
    {
        org.apache.commons.math3.random.BitsStreamGenerator r0;

        r0 := @this: org.apache.commons.math3.random.BitsStreamGenerator;

        r0.<org.apache.commons.math3.random.BitsStreamGenerator: double nextGaussian> = #NaN;

        return;
    }
protected abstract int next(int) { 
// no body
} 
    public boolean nextBoolean()
    {
        org.apache.commons.math3.random.BitsStreamGenerator r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.random.BitsStreamGenerator;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.random.BitsStreamGenerator: int next(int)>(1);

        if $i0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public void nextBytes(byte[])
    {
        org.apache.commons.math3.random.BitsStreamGenerator r0;
        byte[] $r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.random.BitsStreamGenerator;

        $r1 := @parameter0: byte[];

        $i0 = lengthof $r1;

        specialinvoke r0.<org.apache.commons.math3.random.BitsStreamGenerator: void nextBytesFill(byte[],int,int)>($r1, 0, $i0);

        return;
    }
    public void nextBytes(byte[], int, int)
    {
        org.apache.commons.math3.random.BitsStreamGenerator r0;
        byte[] $r1;
        int $i0, $i1, $i2;
        org.apache.commons.math3.exception.OutOfRangeException $r2;
        java.lang.Integer $r3, $r4, $r5;

        r0 := @this: org.apache.commons.math3.random.BitsStreamGenerator;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if $i0 < 0 goto label1;

        $i2 = lengthof $r1;

        if $i0 < $i2 goto label2;

     label1:
        $r2 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $i0 = lengthof $r1;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r2.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r3, $r4, $r5);

        throw $r2;

     label2:
        if $i1 < 0 goto label3;

        $i2 = lengthof $r1;

        $i2 = $i2 - $i0;

        if $i1 <= $i2 goto label4;

     label3:
        $r2 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $i1 = lengthof $r1;

        $i0 = $i1 - $i0;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r2.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r3, $r4, $r5);

        throw $r2;

     label4:
        specialinvoke r0.<org.apache.commons.math3.random.BitsStreamGenerator: void nextBytesFill(byte[],int,int)>($r1, $i0, $i1);

        return;
    }
    public double nextDouble()
    {
        org.apache.commons.math3.random.BitsStreamGenerator r0;
        long l0, $l2;
        int $i1;
        double $d0;

        r0 := @this: org.apache.commons.math3.random.BitsStreamGenerator;

        $i1 = virtualinvoke r0.<org.apache.commons.math3.random.BitsStreamGenerator: int next(int)>(26);

        l0 = (long) $i1;

        l0 = l0 << 26;

        $i1 = virtualinvoke r0.<org.apache.commons.math3.random.BitsStreamGenerator: int next(int)>(26);

        $l2 = (long) $i1;

        l0 = $l2 | l0;

        $d0 = (double) l0;

        $d0 = $d0 * 2.220446049250313E-16;

        return $d0;
    }
    public float nextFloat()
    {
        org.apache.commons.math3.random.BitsStreamGenerator r0;
        int $i0;
        float $f0;

        r0 := @this: org.apache.commons.math3.random.BitsStreamGenerator;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.random.BitsStreamGenerator: int next(int)>(23);

        $f0 = (float) $i0;

        $f0 = $f0 * 1.1920929E-7F;

        return $f0;
    }
    public double nextGaussian()
    {
        org.apache.commons.math3.random.BitsStreamGenerator r0;
        double d0, $d1, $d2;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.random.BitsStreamGenerator;

        d0 = r0.<org.apache.commons.math3.random.BitsStreamGenerator: double nextGaussian>;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z0 == 0 goto label1;

        d0 = virtualinvoke r0.<org.apache.commons.math3.random.BitsStreamGenerator: double nextDouble()>();

        $d1 = virtualinvoke r0.<org.apache.commons.math3.random.BitsStreamGenerator: double nextDouble()>();

        d0 = 6.283185307179586 * d0;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d1);

        $d1 = -2.0 * $d1;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d1);

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double cos(double)>(d0);

        $d2 = $d1 * $d2;

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sin(double)>(d0);

        d0 = d0 * $d1;

        r0.<org.apache.commons.math3.random.BitsStreamGenerator: double nextGaussian> = d0;

        return $d2;

     label1:
        d0 = r0.<org.apache.commons.math3.random.BitsStreamGenerator: double nextGaussian>;

        r0.<org.apache.commons.math3.random.BitsStreamGenerator: double nextGaussian> = #NaN;

        return d0;
    }
    public int nextInt()
    {
        org.apache.commons.math3.random.BitsStreamGenerator r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.random.BitsStreamGenerator;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.random.BitsStreamGenerator: int next(int)>(32);

        return $i0;
    }
    public int nextInt(int) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math3.random.BitsStreamGenerator r0;
        int $i0, $i1, $i4, $i5;
        long $l2, $l3;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r1;
        java.lang.Integer $r2;

        r0 := @this: org.apache.commons.math3.random.BitsStreamGenerator;

        $i0 := @parameter0: int;

        if $i0 <= 0 goto label2;

        $i1 = neg $i0;

        $i1 = $i1 & $i0;

        if $i1 != $i0 goto label1;

        $l2 = (long) $i0;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.random.BitsStreamGenerator: int next(int)>(31);

        $l3 = (long) $i0;

        $l2 = $l2 * $l3;

        $l2 = $l2 >> 31;

        $i0 = (int) $l2;

        return $i0;

     label1:
        $i4 = virtualinvoke r0.<org.apache.commons.math3.random.BitsStreamGenerator: int next(int)>(31);

        $i1 = $i4 % $i0;

        $i4 = $i4 - $i1;

        $i5 = $i0 + -1;

        $i4 = $i4 + $i5;

        if $i4 < 0 goto label1;

        return $i1;

     label2:
        $r1 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r1.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(java.lang.Number)>($r2);

        throw $r1;
    }
    public long nextLong()
    {
        org.apache.commons.math3.random.BitsStreamGenerator r0;
        long l0, l1;
        int $i2;

        r0 := @this: org.apache.commons.math3.random.BitsStreamGenerator;

        $i2 = virtualinvoke r0.<org.apache.commons.math3.random.BitsStreamGenerator: int next(int)>(32);

        l0 = (long) $i2;

        l0 = l0 << 32;

        $i2 = virtualinvoke r0.<org.apache.commons.math3.random.BitsStreamGenerator: int next(int)>(32);

        l1 = (long) $i2;

        l1 = l1 & 4294967295L;

        l0 = l0 | l1;

        return l0;
    }
    public long nextLong(long) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math3.random.BitsStreamGenerator r0;
        long $l0, l1, $l4, $l5;
        byte $b2;
        int $i3;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r1;
        java.lang.Long $r2;

        r0 := @this: org.apache.commons.math3.random.BitsStreamGenerator;

        $l0 := @parameter0: long;

        $b2 = $l0 cmp 0L;

        if $b2 <= 0 goto label2;

     label1:
        $i3 = virtualinvoke r0.<org.apache.commons.math3.random.BitsStreamGenerator: int next(int)>(31);

        l1 = (long) $i3;

        l1 = l1 << 32;

        $i3 = virtualinvoke r0.<org.apache.commons.math3.random.BitsStreamGenerator: int next(int)>(32);

        $l4 = (long) $i3;

        $l4 = $l4 & 4294967295L;

        $l4 = l1 | $l4;

        l1 = $l4 % $l0;

        $l4 = $l4 - l1;

        $l5 = $l0 - 1L;

        $l4 = $l4 + $l5;

        $b2 = $l4 cmp 0L;

        if $b2 < 0 goto label1;

        return l1;

     label2:
        $r1 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        specialinvoke $r1.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(java.lang.Number)>($r2);

        throw $r1;
    }
public abstract void setSeed(int) { 
// no body
} 
public abstract void setSeed(long) { 
// no body
} 
public abstract void setSeed(int[]) { 
// no body
} 
