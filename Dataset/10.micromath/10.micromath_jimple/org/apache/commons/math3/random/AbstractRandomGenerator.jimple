org.apache.commons.math3.random.AbstractRandomGenerator extends java.lang.Object implements org.apache.commons.math3.random.RandomGenerator
private double cachedNormalDeviate
    public void <init>()
    {
        org.apache.commons.math3.random.AbstractRandomGenerator r0;

        r0 := @this: org.apache.commons.math3.random.AbstractRandomGenerator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.random.AbstractRandomGenerator: double cachedNormalDeviate> = #NaN;

        return;
    }
    public void clear()
    {
        org.apache.commons.math3.random.AbstractRandomGenerator r0;

        r0 := @this: org.apache.commons.math3.random.AbstractRandomGenerator;

        r0.<org.apache.commons.math3.random.AbstractRandomGenerator: double cachedNormalDeviate> = #NaN;

        return;
    }
    public boolean nextBoolean()
    {
        org.apache.commons.math3.random.AbstractRandomGenerator r0;
        double $d0;
        byte $b0;

        r0 := @this: org.apache.commons.math3.random.AbstractRandomGenerator;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.random.AbstractRandomGenerator: double nextDouble()>();

        $b0 = $d0 cmpg 0.5;

        if $b0 > 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public void nextBytes(byte[])
    {
        org.apache.commons.math3.random.AbstractRandomGenerator r0;
        byte[] $r1;
        int $i0, i1, i2, i3;
        byte $b4;

        r0 := @this: org.apache.commons.math3.random.AbstractRandomGenerator;

        $r1 := @parameter0: byte[];

        i1 = 0;

     label1:
        $i0 = lengthof $r1;

        if i1 >= $i0 goto label6;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.random.AbstractRandomGenerator: int nextInt()>();

        i2 = 0;

        i3 = i1;

     label2:
        if i2 >= 3 goto label5;

        if i2 <= 0 goto label3;

        $i0 = $i0 >> 8;

     label3:
        i1 = i3 + 1;

        $b4 = (byte) $i0;

        $r1[i3] = $b4;

        i3 = lengthof $r1;

        if i1 != i3 goto label4;

        return;

     label4:
        i2 = i2 + 1;

        i3 = i1;

        goto label2;

     label5:
        i1 = i3;

        goto label1;

     label6:
        return;
    }
public abstract double nextDouble() { 
// no body
} 
    public float nextFloat()
    {
        org.apache.commons.math3.random.AbstractRandomGenerator r0;
        double $d0;
        float $f0;

        r0 := @this: org.apache.commons.math3.random.AbstractRandomGenerator;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.random.AbstractRandomGenerator: double nextDouble()>();

        $f0 = (float) $d0;

        return $f0;
    }
    public double nextGaussian()
    {
        org.apache.commons.math3.random.AbstractRandomGenerator r0;
        double $d0, d1, d2, $d3;
        boolean $z0;
        byte $b0;

        r0 := @this: org.apache.commons.math3.random.AbstractRandomGenerator;

        $d0 = r0.<org.apache.commons.math3.random.AbstractRandomGenerator: double cachedNormalDeviate>;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 != 0 goto label1;

        $d0 = r0.<org.apache.commons.math3.random.AbstractRandomGenerator: double cachedNormalDeviate>;

        r0.<org.apache.commons.math3.random.AbstractRandomGenerator: double cachedNormalDeviate> = #NaN;

        return $d0;

     label1:
        $d0 = 0.0;

        d1 = 0.0;

        d2 = 1.0;

     label2:
        $b0 = d2 cmpl 1.0;

        if $b0 < 0 goto label3;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.random.AbstractRandomGenerator: double nextDouble()>();

        $d0 = 2.0 * $d0;

        $d0 = $d0 - 1.0;

        d1 = virtualinvoke r0.<org.apache.commons.math3.random.AbstractRandomGenerator: double nextDouble()>();

        d1 = 2.0 * d1;

        d1 = d1 - 1.0;

        d2 = $d0 * $d0;

        $d3 = d1 * d1;

        d2 = d2 + $d3;

        goto label2;

     label3:
        $b0 = d2 cmpl 0.0;

        if $b0 == 0 goto label4;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(d2);

        $d3 = -2.0 * $d3;

        d2 = $d3 / d2;

        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d2);

     label4:
        d1 = d1 * d2;

        r0.<org.apache.commons.math3.random.AbstractRandomGenerator: double cachedNormalDeviate> = d1;

        $d0 = $d0 * d2;

        return $d0;
    }
    public int nextInt()
    {
        org.apache.commons.math3.random.AbstractRandomGenerator r0;
        double $d0;
        int $i0;

        r0 := @this: org.apache.commons.math3.random.AbstractRandomGenerator;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.random.AbstractRandomGenerator: double nextDouble()>();

        $d0 = 2.0 * $d0;

        $d0 = $d0 - 1.0;

        $d0 = $d0 * 2.147483647E9;

        $i0 = (int) $d0;

        return $i0;
    }
    public int nextInt(int)
    {
        org.apache.commons.math3.random.AbstractRandomGenerator r0;
        int $i0, i1;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r1;
        double $d0, $d1;
        java.lang.Integer $r2;

        r0 := @this: org.apache.commons.math3.random.AbstractRandomGenerator;

        $i0 := @parameter0: int;

        if $i0 > 0 goto label1;

        $r1 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r1.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(java.lang.Number)>($r2);

        throw $r1;

     label1:
        $d1 = virtualinvoke r0.<org.apache.commons.math3.random.AbstractRandomGenerator: double nextDouble()>();

        $d0 = (double) $i0;

        $d0 = $d1 * $d0;

        i1 = (int) $d0;

        if i1 >= $i0 goto label2;

        return i1;

     label2:
        $i0 = $i0 + -1;

        return $i0;
    }
    public long nextLong()
    {
        org.apache.commons.math3.random.AbstractRandomGenerator r0;
        double $d0;
        long $l0;

        r0 := @this: org.apache.commons.math3.random.AbstractRandomGenerator;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.random.AbstractRandomGenerator: double nextDouble()>();

        $d0 = 2.0 * $d0;

        $d0 = $d0 - 1.0;

        $d0 = $d0 * 9.223372036854776E18;

        $l0 = (long) $d0;

        return $l0;
    }
    public void setSeed(int)
    {
        org.apache.commons.math3.random.AbstractRandomGenerator r0;
        int $i0;
        long $l1;

        r0 := @this: org.apache.commons.math3.random.AbstractRandomGenerator;

        $i0 := @parameter0: int;

        $l1 = (long) $i0;

        virtualinvoke r0.<org.apache.commons.math3.random.AbstractRandomGenerator: void setSeed(long)>($l1);

        return;
    }
public abstract void setSeed(long) { 
// no body
} 
    public void setSeed(int[])
    {
        org.apache.commons.math3.random.AbstractRandomGenerator r0;
        int[] $r1;
        int i0, i1, i3;
        long $l2, $l4;

        r0 := @this: org.apache.commons.math3.random.AbstractRandomGenerator;

        $r1 := @parameter0: int[];

        $l2 = 0L;

        i0 = lengthof $r1;

        i3 = 0;

     label1:
        if i3 >= i0 goto label2;

        i1 = $r1[i3];

        $l4 = 4294967291L * $l2;

        $l2 = (long) i1;

        $l2 = $l4 + $l2;

        i3 = i3 + 1;

        goto label1;

     label2:
        virtualinvoke r0.<org.apache.commons.math3.random.AbstractRandomGenerator: void setSeed(long)>($l2);

        return;
    }
