org.apache.commons.math3.random.SobolSequenceGenerator extends java.lang.Object implements org.apache.commons.math3.random.RandomVectorGenerator
private static final int BITS
private static final java.lang.String FILE_CHARSET
private static final int MAX_DIMENSION
private static final java.lang.String RESOURCE_NAME
private static final double SCALE
private int count
private final int dimension
private final long[][] direction
private final long[] x
    static void <clinit>()
    {
        double $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,int)>(2.0, 52);

        <org.apache.commons.math3.random.SobolSequenceGenerator: double SCALE> = $d0;

        return;
    }
    public void <init>(int) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.random.SobolSequenceGenerator r0;
        int $i0;
        org.apache.commons.math3.exception.OutOfRangeException $r1;
        java.lang.Integer $r2, $r3, $r4;
        java.lang.Class $r5;
        java.io.InputStream $r6;
        org.apache.commons.math3.exception.MathInternalError $r7;
        int[] $r8;
        java.lang.Object $r9;
        long[][] $r10;
        long[] $r11;
        java.io.IOException r12, $r15, $r16;
        java.lang.Throwable $r13;
        org.apache.commons.math3.exception.MathParseException r14;

        r0 := @this: org.apache.commons.math3.random.SobolSequenceGenerator;

        $i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.random.SobolSequenceGenerator: int count> = 0;

        if $i0 < 1 goto label01;

        if $i0 <= 1000 goto label02;

     label01:
        $r1 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1000);

        specialinvoke $r1.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r2, $r3, $r4);

        throw $r1;

     label02:
        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>("/assets/org/apache/commons/math3/random/new-joe-kuo-6.1000");

        if $r6 != null goto label03;

        $r7 = new org.apache.commons.math3.exception.MathInternalError;

        specialinvoke $r7.<org.apache.commons.math3.exception.MathInternalError: void <init>()>();

        throw $r7;

     label03:
        r0.<org.apache.commons.math3.random.SobolSequenceGenerator: int dimension> = $i0;

        $r8 = newarray (int)[2];

        $r8[0] = $i0;

        $r8[1] = 53;

        $r5 = <java.lang.Long: java.lang.Class TYPE>;

        $r9 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r5, $r8);

        $r10 = (long[][]) $r9;

        r0.<org.apache.commons.math3.random.SobolSequenceGenerator: long[][] direction> = $r10;

        $r11 = newarray (long)[$i0];

        r0.<org.apache.commons.math3.random.SobolSequenceGenerator: long[] x> = $r11;

     label04:
        specialinvoke r0.<org.apache.commons.math3.random.SobolSequenceGenerator: int initFromStream(java.io.InputStream)>($r6);

     label05:
        virtualinvoke $r6.<java.io.InputStream: void close()>();

     label06:
        return;

     label07:
        r12 := @caughtexception;

     label08:
        $r7 = new org.apache.commons.math3.exception.MathInternalError;

        specialinvoke $r7.<org.apache.commons.math3.exception.MathInternalError: void <init>()>();

        throw $r7;

     label09:
        $r13 := @caughtexception;

     label10:
        virtualinvoke $r6.<java.io.InputStream: void close()>();

     label11:
        throw $r13;

     label12:
        r14 := @caughtexception;

     label13:
        $r7 = new org.apache.commons.math3.exception.MathInternalError;

        specialinvoke $r7.<org.apache.commons.math3.exception.MathInternalError: void <init>()>();

        throw $r7;

     label14:
        $r15 := @caughtexception;

        return;

     label15:
        $r16 := @caughtexception;

        goto label11;

        catch java.io.IOException from label04 to label05 with label07;
        catch org.apache.commons.math3.exception.MathParseException from label04 to label05 with label12;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.io.IOException from label05 to label06 with label14;
        catch java.lang.Throwable from label08 to label09 with label09;
        catch java.io.IOException from label10 to label11 with label15;
        catch java.lang.Throwable from label13 to label14 with label09;
    }
    public void <init>(int, java.io.InputStream) throws org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.MathParseException, java.io.IOException
    {
        org.apache.commons.math3.random.SobolSequenceGenerator r0;
        int $i0, $i1;
        java.io.InputStream $r1;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r2;
        java.lang.Integer $r3, $r10, $r11;
        int[] $r4;
        java.lang.Class $r5;
        java.lang.Object $r6;
        long[][] $r7;
        long[] $r8;
        org.apache.commons.math3.exception.OutOfRangeException $r9;

        r0 := @this: org.apache.commons.math3.random.SobolSequenceGenerator;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.io.InputStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.random.SobolSequenceGenerator: int count> = 0;

        if $i0 >= 1 goto label1;

        $r2 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r2.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(java.lang.Number)>($r3);

        throw $r2;

     label1:
        r0.<org.apache.commons.math3.random.SobolSequenceGenerator: int dimension> = $i0;

        $r4 = newarray (int)[2];

        $r4[0] = $i0;

        $r4[1] = 53;

        $r5 = <java.lang.Long: java.lang.Class TYPE>;

        $r6 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r5, $r4);

        $r7 = (long[][]) $r6;

        r0.<org.apache.commons.math3.random.SobolSequenceGenerator: long[][] direction> = $r7;

        $r8 = newarray (long)[$i0];

        r0.<org.apache.commons.math3.random.SobolSequenceGenerator: long[] x> = $r8;

        $i1 = specialinvoke r0.<org.apache.commons.math3.random.SobolSequenceGenerator: int initFromStream(java.io.InputStream)>($r1);

        if $i1 >= $i0 goto label2;

        $r9 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        specialinvoke $r9.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r3, $r10, $r11);

        throw $r9;

     label2:
        return;
    }
    private void initDirectionVector(int, int, int[])
    {
        org.apache.commons.math3.random.SobolSequenceGenerator r0;
        int $i0, $i1, i2, $i3, $i4, i5;
        int[] $r1;
        long[][] $r2;
        long[] $r3, $r4;
        long $l6, $l7, $l8;

        r0 := @this: org.apache.commons.math3.random.SobolSequenceGenerator;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 := @parameter2: int[];

        i2 = lengthof $r1;

        i2 = i2 + -1;

        i5 = 1;

     label1:
        if i5 > i2 goto label2;

        $r2 = r0.<org.apache.commons.math3.random.SobolSequenceGenerator: long[][] direction>;

        $r3 = $r2[$i0];

        $i3 = $r1[i5];

        $l6 = (long) $i3;

        $i3 = 52 - i5;

        $l6 = $l6 << $i3;

        $r3[i5] = $l6;

        i5 = i5 + 1;

        goto label1;

     label2:
        i5 = i2 + 1;

     label3:
        if i5 > 52 goto label6;

        $r2 = r0.<org.apache.commons.math3.random.SobolSequenceGenerator: long[][] direction>;

        $r3 = $r2[$i0];

        $r2 = r0.<org.apache.commons.math3.random.SobolSequenceGenerator: long[][] direction>;

        $r4 = $r2[$i0];

        $i3 = i5 - i2;

        $l6 = $r4[$i3];

        $r2 = r0.<org.apache.commons.math3.random.SobolSequenceGenerator: long[][] direction>;

        $r4 = $r2[$i0];

        $i3 = i5 - i2;

        $l7 = $r4[$i3];

        $l7 = $l7 >> i2;

        $l6 = $l6 ^ $l7;

        $r3[i5] = $l6;

        $i3 = 1;

     label4:
        $i4 = i2 + -1;

        if $i3 > $i4 goto label5;

        $r2 = r0.<org.apache.commons.math3.random.SobolSequenceGenerator: long[][] direction>;

        $r3 = $r2[$i0];

        $l6 = $r3[i5];

        $i4 = i2 + -1;

        $i4 = $i4 - $i3;

        $i4 = $i1 >> $i4;

        $i4 = $i4 & 1;

        $l7 = (long) $i4;

        $r2 = r0.<org.apache.commons.math3.random.SobolSequenceGenerator: long[][] direction>;

        $r4 = $r2[$i0];

        $i4 = i5 - $i3;

        $l8 = $r4[$i4];

        $l7 = $l7 * $l8;

        $l6 = $l6 ^ $l7;

        $r3[i5] = $l6;

        $i3 = $i3 + 1;

        goto label4;

     label5:
        i5 = i5 + 1;

        goto label3;

     label6:
        return;
    }
    private int initFromStream(java.io.InputStream) throws org.apache.commons.math3.exception.MathParseException, java.io.IOException
    {
        org.apache.commons.math3.random.SobolSequenceGenerator r0;
        java.io.InputStream $r1;
        int[] r2;
        java.io.BufferedReader r3;
        java.util.StringTokenizer r4;
        int i0, $i1, i3, $i4, $i5, $i6, $i7, $i8;
        long[][] $r5;
        long[] $r6;
        long $l2;
        java.nio.charset.Charset $r7;
        java.io.InputStreamReader $r8;
        java.lang.String $r9, $r10;
        java.util.NoSuchElementException r11, r16;
        org.apache.commons.math3.exception.MathParseException $r12;
        java.lang.Throwable $r13;
        java.lang.NumberFormatException r14, r15;

        r0 := @this: org.apache.commons.math3.random.SobolSequenceGenerator;

        $r1 := @parameter0: java.io.InputStream;

        i0 = 1;

     label01:
        if i0 > 52 goto label02;

        $r5 = r0.<org.apache.commons.math3.random.SobolSequenceGenerator: long[][] direction>;

        $r6 = $r5[0];

        $i1 = 52 - i0;

        $l2 = 1L << $i1;

        $r6[i0] = $l2;

        i0 = i0 + 1;

        goto label01;

     label02:
        $r7 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("US-ASCII");

        r3 = new java.io.BufferedReader;

        $r8 = new java.io.InputStreamReader;

        specialinvoke $r8.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>($r1, $r7);

        specialinvoke r3.<java.io.BufferedReader: void <init>(java.io.Reader)>($r8);

        i0 = -1;

     label03:
        virtualinvoke r3.<java.io.BufferedReader: java.lang.String readLine()>();

     label04:
        $i1 = 2;

        i3 = 1;

     label05:
        $r9 = virtualinvoke r3.<java.io.BufferedReader: java.lang.String readLine()>();

     label06:
        if $r9 == null goto label30;

     label07:
        r4 = new java.util.StringTokenizer;

        specialinvoke r4.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r9, " ");

     label08:
        $r10 = virtualinvoke r4.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r10);

     label09:
        i0 = $i4;

        if $i4 < 2 goto label33;

     label10:
        $i5 = r0.<org.apache.commons.math3.random.SobolSequenceGenerator: int dimension>;

     label11:
        if $i4 > $i5 goto label33;

     label12:
        $r10 = virtualinvoke r4.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $i6 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r10);

        $r10 = virtualinvoke r4.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $i5 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r10);

     label13:
        $i7 = $i6 + 1;

     label14:
        r2 = newarray (int)[$i7];

     label15:
        $i7 = 1;

     label16:
        if $i7 > $i6 goto label20;

     label17:
        $r10 = virtualinvoke r4.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $i8 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r10);

     label18:
        r2[$i7] = $i8;

     label19:
        $i7 = $i7 + 1;

        goto label16;

     label20:
        $i6 = i3 + 1;

     label21:
        specialinvoke r0.<org.apache.commons.math3.random.SobolSequenceGenerator: void initDirectionVector(int,int,int[])>(i3, $i5, r2);

     label22:
        i3 = r0.<org.apache.commons.math3.random.SobolSequenceGenerator: int dimension>;

     label23:
        if $i4 <= i3 goto label29;

        virtualinvoke r3.<java.io.BufferedReader: void close()>();

        return $i4;

     label24:
        r11 := @caughtexception;

     label25:
        $r12 = new org.apache.commons.math3.exception.MathParseException;

        specialinvoke $r12.<org.apache.commons.math3.exception.MathParseException: void <init>(java.lang.String,int)>($r9, $i1);

        throw $r12;

     label26:
        $r13 := @caughtexception;

        virtualinvoke r3.<java.io.BufferedReader: void close()>();

        throw $r13;

     label27:
        r14 := @caughtexception;

     label28:
        $r12 = new org.apache.commons.math3.exception.MathParseException;

        specialinvoke $r12.<org.apache.commons.math3.exception.MathParseException: void <init>(java.lang.String,int)>($r9, $i1);

        throw $r12;

     label29:
        $i1 = $i1 + 1;

        i3 = $i6;

        goto label05;

     label30:
        virtualinvoke r3.<java.io.BufferedReader: void close()>();

        return i0;

     label31:
        r15 := @caughtexception;

        goto label28;

     label32:
        r16 := @caughtexception;

        goto label25;

     label33:
        $i6 = i3;

        goto label22;

        catch java.lang.Throwable from label03 to label04 with label26;
        catch java.lang.Throwable from label05 to label06 with label26;
        catch java.lang.Throwable from label07 to label08 with label26;
        catch java.util.NoSuchElementException from label08 to label09 with label24;
        catch java.util.NoSuchElementException from label12 to label13 with label24;
        catch java.util.NoSuchElementException from label17 to label18 with label24;
        catch java.lang.NumberFormatException from label08 to label09 with label27;
        catch java.lang.NumberFormatException from label12 to label13 with label27;
        catch java.lang.NumberFormatException from label17 to label18 with label27;
        catch java.lang.Throwable from label08 to label09 with label26;
        catch java.lang.Throwable from label10 to label11 with label26;
        catch java.lang.Throwable from label12 to label13 with label26;
        catch java.lang.Throwable from label14 to label15 with label26;
        catch java.lang.Throwable from label17 to label19 with label26;
        catch java.util.NoSuchElementException from label21 to label22 with label32;
        catch java.lang.NumberFormatException from label21 to label22 with label31;
        catch java.lang.Throwable from label21 to label23 with label26;
        catch java.lang.Throwable from label25 to label26 with label26;
        catch java.lang.Throwable from label28 to label29 with label26;
    }
    public int getNextIndex()
    {
        org.apache.commons.math3.random.SobolSequenceGenerator r0;
        int i0;

        r0 := @this: org.apache.commons.math3.random.SobolSequenceGenerator;

        i0 = r0.<org.apache.commons.math3.random.SobolSequenceGenerator: int count>;

        return i0;
    }
    public double[] nextVector()
    {
        org.apache.commons.math3.random.SobolSequenceGenerator r0;
        double[] r1;
        long $l0, $l4;
        int $i1, $i2, $i3;
        long[] $r2, $r4;
        long[][] $r3;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.random.SobolSequenceGenerator;

        $i1 = r0.<org.apache.commons.math3.random.SobolSequenceGenerator: int dimension>;

        r1 = newarray (double)[$i1];

        $i1 = r0.<org.apache.commons.math3.random.SobolSequenceGenerator: int count>;

        if $i1 != 0 goto label1;

        $i1 = r0.<org.apache.commons.math3.random.SobolSequenceGenerator: int count>;

        $i1 = $i1 + 1;

        r0.<org.apache.commons.math3.random.SobolSequenceGenerator: int count> = $i1;

        return r1;

     label1:
        $i1 = 1;

        $i2 = r0.<org.apache.commons.math3.random.SobolSequenceGenerator: int count>;

        $i2 = $i2 + -1;

     label2:
        $i3 = $i2 & 1;

        if $i3 != 1 goto label3;

        $i2 = $i2 >> 1;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $i2 = 0;

     label4:
        $i3 = r0.<org.apache.commons.math3.random.SobolSequenceGenerator: int dimension>;

        if $i2 >= $i3 goto label5;

        $r2 = r0.<org.apache.commons.math3.random.SobolSequenceGenerator: long[] x>;

        $l4 = $r2[$i2];

        $r3 = r0.<org.apache.commons.math3.random.SobolSequenceGenerator: long[][] direction>;

        $r4 = $r3[$i2];

        $l0 = $r4[$i1];

        $l0 = $l4 ^ $l0;

        $r2[$i2] = $l0;

        $r2 = r0.<org.apache.commons.math3.random.SobolSequenceGenerator: long[] x>;

        $l0 = $r2[$i2];

        $d0 = (double) $l0;

        $d1 = <org.apache.commons.math3.random.SobolSequenceGenerator: double SCALE>;

        $d0 = $d0 / $d1;

        r1[$i2] = $d0;

        $i2 = $i2 + 1;

        goto label4;

     label5:
        $i1 = r0.<org.apache.commons.math3.random.SobolSequenceGenerator: int count>;

        $i1 = $i1 + 1;

        r0.<org.apache.commons.math3.random.SobolSequenceGenerator: int count> = $i1;

        return r1;
    }
    public double[] skipTo(int) throws org.apache.commons.math3.exception.NotPositiveException
    {
        org.apache.commons.math3.random.SobolSequenceGenerator r0;
        int $i0, i2, $i4, $i6;
        long l1, l3, l5, $l8;
        double[] $r1;
        long[] $r2;
        byte $b7;
        long[][] $r3;

        r0 := @this: org.apache.commons.math3.random.SobolSequenceGenerator;

        $i0 := @parameter0: int;

        if $i0 != 0 goto label2;

        $r2 = r0.<org.apache.commons.math3.random.SobolSequenceGenerator: long[] x>;

        staticinvoke <java.util.Arrays: void fill(long[],long)>($r2, 0L);

     label1:
        r0.<org.apache.commons.math3.random.SobolSequenceGenerator: int count> = $i0;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.random.SobolSequenceGenerator: double[] nextVector()>();

        return $r1;

     label2:
        i2 = $i0 + -1;

        $i4 = i2 >> 1;

        i2 = $i4 ^ i2;

        l1 = (long) i2;

        i2 = 0;

     label3:
        $i4 = r0.<org.apache.commons.math3.random.SobolSequenceGenerator: int dimension>;

        if i2 >= $i4 goto label1;

        l5 = 0L;

        $i4 = 1;

     label4:
        if $i4 > 52 goto label5;

        $i6 = $i4 + -1;

        l3 = l1 >> $i6;

        $b7 = l3 cmp 0L;

        if $b7 != 0 goto label6;

     label5:
        $r2 = r0.<org.apache.commons.math3.random.SobolSequenceGenerator: long[] x>;

        $r2[i2] = l5;

        i2 = i2 + 1;

        goto label3;

     label6:
        l3 = l3 & 1L;

        $r3 = r0.<org.apache.commons.math3.random.SobolSequenceGenerator: long[][] direction>;

        $r2 = $r3[i2];

        $l8 = $r2[$i4];

        l3 = $l8 * l3;

        l5 = l5 ^ l3;

        $i4 = $i4 + 1;

        goto label4;
    }
