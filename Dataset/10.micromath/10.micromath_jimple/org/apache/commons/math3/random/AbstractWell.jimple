org.apache.commons.math3.random.AbstractWell extends org.apache.commons.math3.random.BitsStreamGenerator implements java.io.Serializable
private static final long serialVersionUID
protected final int[] i1
protected final int[] i2
protected final int[] i3
protected final int[] iRm1
protected final int[] iRm2
protected int index
protected final int[] v
    protected void <init>(int, int, int, int)
    {
        org.apache.commons.math3.random.AbstractWell r0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.apache.commons.math3.random.AbstractWell;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        specialinvoke r0.<org.apache.commons.math3.random.AbstractWell: void <init>(int,int,int,int,int[])>($i0, $i1, $i2, $i3, null);

        return;
    }
    protected void <init>(int, int, int, int, int)
    {
        org.apache.commons.math3.random.AbstractWell r0;
        int $i0, $i1, $i2, $i3, $i4;
        int[] $r1;

        r0 := @this: org.apache.commons.math3.random.AbstractWell;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $i4 := @parameter4: int;

        $r1 = newarray (int)[1];

        $r1[0] = $i4;

        specialinvoke r0.<org.apache.commons.math3.random.AbstractWell: void <init>(int,int,int,int,int[])>($i0, $i1, $i2, $i3, $r1);

        return;
    }
    protected void <init>(int, int, int, int, long)
    {
        org.apache.commons.math3.random.AbstractWell r0;
        int $i0, $i1, $i2, $i3, $i6;
        long $l4, $l5;
        int[] $r1;

        r0 := @this: org.apache.commons.math3.random.AbstractWell;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $l4 := @parameter4: long;

        $r1 = newarray (int)[2];

        $l5 = $l4 >>> 32;

        $i6 = (int) $l5;

        $r1[0] = $i6;

        $l4 = 4294967295L & $l4;

        $i6 = (int) $l4;

        $r1[1] = $i6;

        specialinvoke r0.<org.apache.commons.math3.random.AbstractWell: void <init>(int,int,int,int,int[])>($i0, $i1, $i2, $i3, $r1);

        return;
    }
    protected void <init>(int, int, int, int, int[])
    {
        org.apache.commons.math3.random.AbstractWell r0;
        int $i0, $i1, $i2, $i3, i4, $i5;
        int[] $r1, $r2;

        r0 := @this: org.apache.commons.math3.random.AbstractWell;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $r1 := @parameter4: int[];

        specialinvoke r0.<org.apache.commons.math3.random.BitsStreamGenerator: void <init>()>();

        $i0 = $i0 + 32;

        $i0 = $i0 + -1;

        $i0 = $i0 / 32;

        $r2 = newarray (int)[$i0];

        r0.<org.apache.commons.math3.random.AbstractWell: int[] v> = $r2;

        r0.<org.apache.commons.math3.random.AbstractWell: int index> = 0;

        $r2 = newarray (int)[$i0];

        r0.<org.apache.commons.math3.random.AbstractWell: int[] iRm1> = $r2;

        $r2 = newarray (int)[$i0];

        r0.<org.apache.commons.math3.random.AbstractWell: int[] iRm2> = $r2;

        $r2 = newarray (int)[$i0];

        r0.<org.apache.commons.math3.random.AbstractWell: int[] i1> = $r2;

        $r2 = newarray (int)[$i0];

        r0.<org.apache.commons.math3.random.AbstractWell: int[] i2> = $r2;

        $r2 = newarray (int)[$i0];

        r0.<org.apache.commons.math3.random.AbstractWell: int[] i3> = $r2;

        i4 = 0;

     label1:
        if i4 >= $i0 goto label2;

        $r2 = r0.<org.apache.commons.math3.random.AbstractWell: int[] iRm1>;

        $i5 = i4 + $i0;

        $i5 = $i5 + -1;

        $i5 = $i5 % $i0;

        $r2[i4] = $i5;

        $r2 = r0.<org.apache.commons.math3.random.AbstractWell: int[] iRm2>;

        $i5 = i4 + $i0;

        $i5 = $i5 + -2;

        $i5 = $i5 % $i0;

        $r2[i4] = $i5;

        $r2 = r0.<org.apache.commons.math3.random.AbstractWell: int[] i1>;

        $i5 = i4 + $i1;

        $i5 = $i5 % $i0;

        $r2[i4] = $i5;

        $r2 = r0.<org.apache.commons.math3.random.AbstractWell: int[] i2>;

        $i5 = i4 + $i2;

        $i5 = $i5 % $i0;

        $r2[i4] = $i5;

        $r2 = r0.<org.apache.commons.math3.random.AbstractWell: int[] i3>;

        $i5 = i4 + $i3;

        $i5 = $i5 % $i0;

        $r2[i4] = $i5;

        i4 = i4 + 1;

        goto label1;

     label2:
        virtualinvoke r0.<org.apache.commons.math3.random.AbstractWell: void setSeed(int[])>($r1);

        return;
    }
protected abstract int next(int) { 
// no body
} 
    public void setSeed(int)
    {
        org.apache.commons.math3.random.AbstractWell r0;
        int $i0;
        int[] $r1;

        r0 := @this: org.apache.commons.math3.random.AbstractWell;

        $i0 := @parameter0: int;

        $r1 = newarray (int)[1];

        $r1[0] = $i0;

        virtualinvoke r0.<org.apache.commons.math3.random.AbstractWell: void setSeed(int[])>($r1);

        return;
    }
    public void setSeed(long)
    {
        org.apache.commons.math3.random.AbstractWell r0;
        long $l0, $l1;
        int[] $r1;
        int $i2;

        r0 := @this: org.apache.commons.math3.random.AbstractWell;

        $l0 := @parameter0: long;

        $r1 = newarray (int)[2];

        $l1 = $l0 >>> 32;

        $i2 = (int) $l1;

        $r1[0] = $i2;

        $l0 = 4294967295L & $l0;

        $i2 = (int) $l0;

        $r1[1] = $i2;

        virtualinvoke r0.<org.apache.commons.math3.random.AbstractWell: void setSeed(int[])>($r1);

        return;
    }
    public void setSeed(int[])
    {
        org.apache.commons.math3.random.AbstractWell r0;
        int[] $r1, $r2, $r3;
        long l0, $l2;
        int $i1, $i3;

        r0 := @this: org.apache.commons.math3.random.AbstractWell;

        $r1 := @parameter0: int[];

        if $r1 != null goto label1;

        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        $l2 = (long) $i1;

        l0 = l0 + $l2;

        virtualinvoke r0.<org.apache.commons.math3.random.AbstractWell: void setSeed(long)>(l0);

        return;

     label1:
        $r2 = r0.<org.apache.commons.math3.random.AbstractWell: int[] v>;

        $i1 = lengthof $r1;

        $r3 = r0.<org.apache.commons.math3.random.AbstractWell: int[] v>;

        $i3 = lengthof $r3;

        $i1 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i1, $i3);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r2, 0, $i1);

        $i1 = lengthof $r1;

        $r2 = r0.<org.apache.commons.math3.random.AbstractWell: int[] v>;

        $i3 = lengthof $r2;

        if $i1 >= $i3 goto label3;

        $i1 = lengthof $r1;

     label2:
        $r2 = r0.<org.apache.commons.math3.random.AbstractWell: int[] v>;

        $i3 = lengthof $r2;

        if $i1 >= $i3 goto label3;

        $r2 = r0.<org.apache.commons.math3.random.AbstractWell: int[] v>;

        $i3 = lengthof $r1;

        $i3 = $i1 - $i3;

        $i3 = $r2[$i3];

        l0 = (long) $i3;

        $r2 = r0.<org.apache.commons.math3.random.AbstractWell: int[] v>;

        $l2 = l0 >> 30;

        l0 = $l2 ^ l0;

        l0 = 1812433253L * l0;

        $l2 = (long) $i1;

        l0 = l0 + $l2;

        l0 = l0 & 4294967295L;

        $i3 = (int) l0;

        $r2[$i1] = $i3;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        r0.<org.apache.commons.math3.random.AbstractWell: int index> = 0;

        virtualinvoke r0.<org.apache.commons.math3.random.AbstractWell: void clear()>();

        return;
    }
