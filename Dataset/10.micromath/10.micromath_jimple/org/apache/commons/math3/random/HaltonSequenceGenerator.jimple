org.apache.commons.math3.random.HaltonSequenceGenerator extends java.lang.Object implements org.apache.commons.math3.random.RandomVectorGenerator
private static final int[] PRIMES
private static final int[] WEIGHTS
private final int[] base
private int count
private final int dimension
private final int[] weight
    static void <clinit>()
    {
        int[] $r0;

        $r0 = newarray (int)[40];

        $r0[0] = 2;

        $r0[1] = 3;

        $r0[2] = 5;

        $r0[3] = 7;

        $r0[4] = 11;

        $r0[5] = 13;

        $r0[6] = 17;

        $r0[7] = 19;

        $r0[8] = 23;

        $r0[9] = 29;

        $r0[10] = 31;

        $r0[11] = 37;

        $r0[12] = 41;

        $r0[13] = 43;

        $r0[14] = 47;

        $r0[15] = 53;

        $r0[16] = 59;

        $r0[17] = 61;

        $r0[18] = 67;

        $r0[19] = 71;

        $r0[20] = 73;

        $r0[21] = 79;

        $r0[22] = 83;

        $r0[23] = 89;

        $r0[24] = 97;

        $r0[25] = 101;

        $r0[26] = 103;

        $r0[27] = 107;

        $r0[28] = 109;

        $r0[29] = 113;

        $r0[30] = 127;

        $r0[31] = 131;

        $r0[32] = 137;

        $r0[33] = 139;

        $r0[34] = 149;

        $r0[35] = 151;

        $r0[36] = 157;

        $r0[37] = 163;

        $r0[38] = 167;

        $r0[39] = 173;

        <org.apache.commons.math3.random.HaltonSequenceGenerator: int[] PRIMES> = $r0;

        $r0 = newarray (int)[40];

        $r0[0] = 1;

        $r0[1] = 2;

        $r0[2] = 3;

        $r0[3] = 3;

        $r0[4] = 8;

        $r0[5] = 11;

        $r0[6] = 12;

        $r0[7] = 14;

        $r0[8] = 7;

        $r0[9] = 18;

        $r0[10] = 12;

        $r0[11] = 13;

        $r0[12] = 17;

        $r0[13] = 18;

        $r0[14] = 29;

        $r0[15] = 14;

        $r0[16] = 18;

        $r0[17] = 43;

        $r0[18] = 41;

        $r0[19] = 44;

        $r0[20] = 40;

        $r0[21] = 30;

        $r0[22] = 47;

        $r0[23] = 65;

        $r0[24] = 71;

        $r0[25] = 28;

        $r0[26] = 40;

        $r0[27] = 60;

        $r0[28] = 79;

        $r0[29] = 89;

        $r0[30] = 56;

        $r0[31] = 50;

        $r0[32] = 52;

        $r0[33] = 61;

        $r0[34] = 108;

        $r0[35] = 56;

        $r0[36] = 66;

        $r0[37] = 63;

        $r0[38] = 60;

        $r0[39] = 66;

        <org.apache.commons.math3.random.HaltonSequenceGenerator: int[] WEIGHTS> = $r0;

        return;
    }
    public void <init>(int) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.random.HaltonSequenceGenerator r0;
        int $i0;
        int[] $r1, $r2;

        r0 := @this: org.apache.commons.math3.random.HaltonSequenceGenerator;

        $i0 := @parameter0: int;

        $r1 = <org.apache.commons.math3.random.HaltonSequenceGenerator: int[] PRIMES>;

        $r2 = <org.apache.commons.math3.random.HaltonSequenceGenerator: int[] WEIGHTS>;

        specialinvoke r0.<org.apache.commons.math3.random.HaltonSequenceGenerator: void <init>(int,int[],int[])>($i0, $r1, $r2);

        return;
    }
    public void <init>(int, int[], int[]) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.random.HaltonSequenceGenerator r0;
        int $i0, $i1, $i2;
        int[] $r1, $r2;
        org.apache.commons.math3.exception.OutOfRangeException $r3;
        java.lang.Integer $r4, $r5, $r6;
        org.apache.commons.math3.exception.DimensionMismatchException $r7;
        java.lang.Object $r8;

        r0 := @this: org.apache.commons.math3.random.HaltonSequenceGenerator;

        $i0 := @parameter0: int;

        $r1 := @parameter1: int[];

        $r2 := @parameter2: int[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.random.HaltonSequenceGenerator: int count> = 0;

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>($r1);

        if $i0 < 1 goto label1;

        $i1 = lengthof $r1;

        if $i0 <= $i1 goto label2;

     label1:
        $r3 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r1 = <org.apache.commons.math3.random.HaltonSequenceGenerator: int[] PRIMES>;

        $i0 = lengthof $r1;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r3.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r4, $r5, $r6);

        throw $r3;

     label2:
        if $r2 == null goto label3;

        $i1 = lengthof $r2;

        $i2 = lengthof $r1;

        if $i1 == $i2 goto label3;

        $r7 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i0 = lengthof $r2;

        $i1 = lengthof $r1;

        specialinvoke $r7.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i0, $i1);

        throw $r7;

     label3:
        r0.<org.apache.commons.math3.random.HaltonSequenceGenerator: int dimension> = $i0;

        $r8 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r1 = (int[]) $r8;

        r0.<org.apache.commons.math3.random.HaltonSequenceGenerator: int[] base> = $r1;

        if $r2 != null goto label5;

        $r1 = null;

     label4:
        r0.<org.apache.commons.math3.random.HaltonSequenceGenerator: int[] weight> = $r1;

        r0.<org.apache.commons.math3.random.HaltonSequenceGenerator: int count> = 0;

        return;

     label5:
        $r8 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r1 = (int[]) $r8;

        goto label4;
    }
    public int getNextIndex()
    {
        org.apache.commons.math3.random.HaltonSequenceGenerator r0;
        int i0;

        r0 := @this: org.apache.commons.math3.random.HaltonSequenceGenerator;

        i0 = r0.<org.apache.commons.math3.random.HaltonSequenceGenerator: int count>;

        return i0;
    }
    public double[] nextVector()
    {
        org.apache.commons.math3.random.HaltonSequenceGenerator r0;
        double[] r1;
        int $i0, $i1, $i2, $i3;
        int[] $r2;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.random.HaltonSequenceGenerator;

        $i1 = r0.<org.apache.commons.math3.random.HaltonSequenceGenerator: int dimension>;

        r1 = newarray (double)[$i1];

        $i1 = 0;

     label1:
        $i2 = r0.<org.apache.commons.math3.random.HaltonSequenceGenerator: int dimension>;

        if $i1 >= $i2 goto label4;

        $i2 = r0.<org.apache.commons.math3.random.HaltonSequenceGenerator: int count>;

        $r2 = r0.<org.apache.commons.math3.random.HaltonSequenceGenerator: int[] base>;

        $i0 = $r2[$i1];

        $d0 = (double) $i0;

        $d0 = 1.0 / $d0;

     label2:
        if $i2 <= 0 goto label3;

        $r2 = r0.<org.apache.commons.math3.random.HaltonSequenceGenerator: int[] base>;

        $i0 = $r2[$i1];

        $r2 = r0.<org.apache.commons.math3.random.HaltonSequenceGenerator: int[] base>;

        $i3 = $r2[$i1];

        $i3 = $i2 % $i3;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.random.HaltonSequenceGenerator: int scramble(int,int,int,int)>($i1, 0, $i0, $i3);

        $d1 = r1[$i1];

        $d2 = (double) $i0;

        $d2 = $d2 * $d0;

        $d1 = $d1 + $d2;

        r1[$i1] = $d1;

        $r2 = r0.<org.apache.commons.math3.random.HaltonSequenceGenerator: int[] base>;

        $i0 = $r2[$i1];

        $i2 = $i2 / $i0;

        $r2 = r0.<org.apache.commons.math3.random.HaltonSequenceGenerator: int[] base>;

        $i0 = $r2[$i1];

        $d1 = (double) $i0;

        $d0 = $d0 / $d1;

        goto label2;

     label3:
        $i1 = $i1 + 1;

        goto label1;

     label4:
        $i1 = r0.<org.apache.commons.math3.random.HaltonSequenceGenerator: int count>;

        $i1 = $i1 + 1;

        r0.<org.apache.commons.math3.random.HaltonSequenceGenerator: int count> = $i1;

        return r1;
    }
    protected int scramble(int, int, int, int)
    {
        org.apache.commons.math3.random.HaltonSequenceGenerator r0;
        int $i0, $i1, $i2, $i3;
        int[] $r1;

        r0 := @this: org.apache.commons.math3.random.HaltonSequenceGenerator;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $r1 = r0.<org.apache.commons.math3.random.HaltonSequenceGenerator: int[] weight>;

        if $r1 == null goto label1;

        $r1 = r0.<org.apache.commons.math3.random.HaltonSequenceGenerator: int[] weight>;

        $i0 = $r1[$i0];

        $i0 = $i0 * $i3;

        $i0 = $i0 % $i2;

        return $i0;

     label1:
        return $i3;
    }
    public double[] skipTo(int) throws org.apache.commons.math3.exception.NotPositiveException
    {
        org.apache.commons.math3.random.HaltonSequenceGenerator r0;
        int $i0;
        double[] $r1;

        r0 := @this: org.apache.commons.math3.random.HaltonSequenceGenerator;

        $i0 := @parameter0: int;

        r0.<org.apache.commons.math3.random.HaltonSequenceGenerator: int count> = $i0;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.random.HaltonSequenceGenerator: double[] nextVector()>();

        return $r1;
    }
