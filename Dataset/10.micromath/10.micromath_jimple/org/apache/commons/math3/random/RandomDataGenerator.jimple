org.apache.commons.math3.random.RandomDataGenerator extends java.lang.Object implements org.apache.commons.math3.random.RandomData java.io.Serializable
private static final long serialVersionUID
private org.apache.commons.math3.random.RandomGenerator rand
private org.apache.commons.math3.random.RandomGenerator secRand
    public void <init>()
    {
        org.apache.commons.math3.random.RandomDataGenerator r0;

        r0 := @this: org.apache.commons.math3.random.RandomDataGenerator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator rand> = null;

        r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator secRand> = null;

        return;
    }
    public void <init>(org.apache.commons.math3.random.RandomGenerator)
    {
        org.apache.commons.math3.random.RandomDataGenerator r0;
        org.apache.commons.math3.random.RandomGenerator $r1;

        r0 := @this: org.apache.commons.math3.random.RandomDataGenerator;

        $r1 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator rand> = null;

        r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator secRand> = null;

        r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator rand> = $r1;

        return;
    }
    private org.apache.commons.math3.random.RandomGenerator getSecRan()
    {
        org.apache.commons.math3.random.RandomDataGenerator r0;
        long $l0, $l1;
        org.apache.commons.math3.random.RandomGenerator $r1;
        java.security.SecureRandom $r2;
        int $i2;

        r0 := @this: org.apache.commons.math3.random.RandomDataGenerator;

        $r1 = r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator secRand>;

        if $r1 != null goto label1;

        $r2 = new java.security.SecureRandom;

        specialinvoke $r2.<java.security.SecureRandom: void <init>()>();

        $r1 = staticinvoke <org.apache.commons.math3.random.RandomGeneratorFactory: org.apache.commons.math3.random.RandomGenerator createRandomGenerator(java.util.Random)>($r2);

        r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator secRand> = $r1;

        $r1 = r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator secRand>;

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $i2 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        $l0 = (long) $i2;

        $l0 = $l1 + $l0;

        interfaceinvoke $r1.<org.apache.commons.math3.random.RandomGenerator: void setSeed(long)>($l0);

     label1:
        $r1 = r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator secRand>;

        return $r1;
    }
    private void initRan()
    {
        org.apache.commons.math3.random.RandomDataGenerator r0;
        org.apache.commons.math3.random.Well19937c $r1;
        long $l0, $l1;
        int $i2;

        r0 := @this: org.apache.commons.math3.random.RandomDataGenerator;

        $r1 = new org.apache.commons.math3.random.Well19937c;

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $i2 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        $l0 = (long) $i2;

        $l0 = $l1 + $l0;

        specialinvoke $r1.<org.apache.commons.math3.random.Well19937c: void <init>(long)>($l0);

        r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator rand> = $r1;

        return;
    }
    private static long nextLong(org.apache.commons.math3.random.RandomGenerator, long) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math3.random.RandomGenerator $r0;
        long $l0, l3, $l5, $l6;
        byte b1;
        byte[] r1;
        int i2, i4;
        java.lang.Long $r2;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r3;

        $r0 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        $l0 := @parameter1: long;

        b1 = $l0 cmp 0L;

        if b1 <= 0 goto label4;

        r1 = newarray (byte)[8];

     label1:
        interfaceinvoke $r0.<org.apache.commons.math3.random.RandomGenerator: void nextBytes(byte[])>(r1);

        l3 = 0L;

        i2 = lengthof r1;

        i4 = 0;

     label2:
        if i4 >= i2 goto label3;

        b1 = r1[i4];

        l3 = l3 << 8;

        $l5 = (long) b1;

        $l5 = $l5 & 255L;

        l3 = l3 | $l5;

        i4 = i4 + 1;

        goto label2;

     label3:
        $l5 = l3 & 9223372036854775807L;

        l3 = $l5 % $l0;

        $l5 = $l5 - l3;

        $l6 = $l0 - 1L;

        $l5 = $l5 + $l6;

        b1 = $l5 cmp 0L;

        if b1 < 0 goto label1;

        return l3;

     label4:
        $r3 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        specialinvoke $r3.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(java.lang.Number)>($r2);

        throw $r3;
    }
    public org.apache.commons.math3.random.RandomGenerator getRandomGenerator()
    {
        org.apache.commons.math3.random.RandomDataGenerator r0;
        org.apache.commons.math3.random.RandomGenerator $r1;

        r0 := @this: org.apache.commons.math3.random.RandomDataGenerator;

        $r1 = r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator rand>;

        if $r1 != null goto label1;

        specialinvoke r0.<org.apache.commons.math3.random.RandomDataGenerator: void initRan()>();

     label1:
        $r1 = r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator rand>;

        return $r1;
    }
    public double nextBeta(double, double)
    {
        org.apache.commons.math3.random.RandomDataGenerator r0;
        double $d0, $d1;
        org.apache.commons.math3.distribution.BetaDistribution $r1;
        org.apache.commons.math3.random.RandomGenerator $r2;

        r0 := @this: org.apache.commons.math3.random.RandomDataGenerator;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $r1 = new org.apache.commons.math3.distribution.BetaDistribution;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator getRandomGenerator()>();

        specialinvoke $r1.<org.apache.commons.math3.distribution.BetaDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double,double,double)>($r2, $d0, $d1, 1.0E-9);

        $d0 = virtualinvoke $r1.<org.apache.commons.math3.distribution.BetaDistribution: double sample()>();

        return $d0;
    }
    public int nextBinomial(int, double)
    {
        org.apache.commons.math3.random.RandomDataGenerator r0;
        int $i0;
        double $d0;
        org.apache.commons.math3.distribution.BinomialDistribution $r1;
        org.apache.commons.math3.random.RandomGenerator $r2;

        r0 := @this: org.apache.commons.math3.random.RandomDataGenerator;

        $i0 := @parameter0: int;

        $d0 := @parameter1: double;

        $r1 = new org.apache.commons.math3.distribution.BinomialDistribution;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator getRandomGenerator()>();

        specialinvoke $r1.<org.apache.commons.math3.distribution.BinomialDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,int,double)>($r2, $i0, $d0);

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.distribution.BinomialDistribution: int sample()>();

        return $i0;
    }
    public double nextCauchy(double, double)
    {
        org.apache.commons.math3.random.RandomDataGenerator r0;
        double $d0, $d1;
        org.apache.commons.math3.distribution.CauchyDistribution $r1;
        org.apache.commons.math3.random.RandomGenerator $r2;

        r0 := @this: org.apache.commons.math3.random.RandomDataGenerator;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $r1 = new org.apache.commons.math3.distribution.CauchyDistribution;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator getRandomGenerator()>();

        specialinvoke $r1.<org.apache.commons.math3.distribution.CauchyDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double,double,double)>($r2, $d0, $d1, 1.0E-9);

        $d0 = virtualinvoke $r1.<org.apache.commons.math3.distribution.CauchyDistribution: double sample()>();

        return $d0;
    }
    public double nextChiSquare(double)
    {
        org.apache.commons.math3.random.RandomDataGenerator r0;
        double $d0;
        org.apache.commons.math3.distribution.ChiSquaredDistribution $r1;
        org.apache.commons.math3.random.RandomGenerator $r2;

        r0 := @this: org.apache.commons.math3.random.RandomDataGenerator;

        $d0 := @parameter0: double;

        $r1 = new org.apache.commons.math3.distribution.ChiSquaredDistribution;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator getRandomGenerator()>();

        specialinvoke $r1.<org.apache.commons.math3.distribution.ChiSquaredDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double,double)>($r2, $d0, 1.0E-9);

        $d0 = virtualinvoke $r1.<org.apache.commons.math3.distribution.ChiSquaredDistribution: double sample()>();

        return $d0;
    }
    public double nextExponential(double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.random.RandomDataGenerator r0;
        double $d0;
        org.apache.commons.math3.distribution.ExponentialDistribution $r1;
        org.apache.commons.math3.random.RandomGenerator $r2;

        r0 := @this: org.apache.commons.math3.random.RandomDataGenerator;

        $d0 := @parameter0: double;

        $r1 = new org.apache.commons.math3.distribution.ExponentialDistribution;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator getRandomGenerator()>();

        specialinvoke $r1.<org.apache.commons.math3.distribution.ExponentialDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double,double)>($r2, $d0, 1.0E-9);

        $d0 = virtualinvoke $r1.<org.apache.commons.math3.distribution.ExponentialDistribution: double sample()>();

        return $d0;
    }
    public double nextF(double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.random.RandomDataGenerator r0;
        double $d0, $d1;
        org.apache.commons.math3.distribution.FDistribution $r1;
        org.apache.commons.math3.random.RandomGenerator $r2;

        r0 := @this: org.apache.commons.math3.random.RandomDataGenerator;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $r1 = new org.apache.commons.math3.distribution.FDistribution;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator getRandomGenerator()>();

        specialinvoke $r1.<org.apache.commons.math3.distribution.FDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double,double,double)>($r2, $d0, $d1, 1.0E-9);

        $d0 = virtualinvoke $r1.<org.apache.commons.math3.distribution.FDistribution: double sample()>();

        return $d0;
    }
    public double nextGamma(double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.random.RandomDataGenerator r0;
        double $d0, $d1;
        org.apache.commons.math3.distribution.GammaDistribution $r1;
        org.apache.commons.math3.random.RandomGenerator $r2;

        r0 := @this: org.apache.commons.math3.random.RandomDataGenerator;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $r1 = new org.apache.commons.math3.distribution.GammaDistribution;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator getRandomGenerator()>();

        specialinvoke $r1.<org.apache.commons.math3.distribution.GammaDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double,double,double)>($r2, $d0, $d1, 1.0E-9);

        $d0 = virtualinvoke $r1.<org.apache.commons.math3.distribution.GammaDistribution: double sample()>();

        return $d0;
    }
    public double nextGaussian(double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.random.RandomDataGenerator r0;
        double $d0, $d1, $d2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r1;
        byte $b0;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r2;
        java.lang.Double $r3;
        org.apache.commons.math3.random.RandomGenerator $r4;

        r0 := @this: org.apache.commons.math3.random.RandomDataGenerator;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $b0 = $d1 cmpg 0.0;

        if $b0 > 0 goto label1;

        $r2 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r1 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats STANDARD_DEVIATION>;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        specialinvoke $r2.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r1, $r3);

        throw $r2;

     label1:
        $r4 = virtualinvoke r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator getRandomGenerator()>();

        $d2 = interfaceinvoke $r4.<org.apache.commons.math3.random.RandomGenerator: double nextGaussian()>();

        $d1 = $d2 * $d1;

        $d0 = $d1 + $d0;

        return $d0;
    }
    public java.lang.String nextHexString(int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.random.RandomDataGenerator r0;
        int $i0, $i1, $i2;
        java.lang.StringBuilder r1, $r9;
        byte[] r2;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r3;
        org.apache.commons.math3.exception.util.LocalizedFormats $r4;
        java.lang.Integer $r5;
        org.apache.commons.math3.random.RandomGenerator $r6;
        byte $b3;
        java.lang.String $r7, r8;

        r0 := @this: org.apache.commons.math3.random.RandomDataGenerator;

        $i0 := @parameter0: int;

        if $i0 > 0 goto label1;

        $r3 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats LENGTH>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r3.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r4, $r5);

        throw $r3;

     label1:
        $r6 = virtualinvoke r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator getRandomGenerator()>();

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        $i1 = $i0 / 2;

        $i1 = $i1 + 1;

        r2 = newarray (byte)[$i1];

        interfaceinvoke $r6.<org.apache.commons.math3.random.RandomGenerator: void nextBytes(byte[])>(r2);

        $i1 = 0;

     label2:
        $i2 = lengthof r2;

        if $i1 >= $i2 goto label4;

        $b3 = r2[$i1];

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($b3);

        $i2 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        $i2 = $i2 + 128;

        $r7 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i2);

        r8 = $r7;

        $i2 = virtualinvoke $r7.<java.lang.String: int length()>();

        if $i2 != 1 goto label3;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $i1 = $i1 + 1;

        goto label2;

     label4:
        $r7 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = virtualinvoke $r7.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        return $r7;
    }
    public int nextHypergeometric(int, int, int) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.random.RandomDataGenerator r0;
        int $i0, $i1, $i2;
        org.apache.commons.math3.distribution.HypergeometricDistribution $r1;
        org.apache.commons.math3.random.RandomGenerator $r2;

        r0 := @this: org.apache.commons.math3.random.RandomDataGenerator;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $r1 = new org.apache.commons.math3.distribution.HypergeometricDistribution;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator getRandomGenerator()>();

        specialinvoke $r1.<org.apache.commons.math3.distribution.HypergeometricDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,int,int,int)>($r2, $i0, $i1, $i2);

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.distribution.HypergeometricDistribution: int sample()>();

        return $i0;
    }
    public int nextInt(int, int) throws org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.random.RandomDataGenerator r0;
        int $i0, $i1;
        org.apache.commons.math3.distribution.UniformIntegerDistribution $r1;
        org.apache.commons.math3.random.RandomGenerator $r2;

        r0 := @this: org.apache.commons.math3.random.RandomDataGenerator;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = new org.apache.commons.math3.distribution.UniformIntegerDistribution;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator getRandomGenerator()>();

        specialinvoke $r1.<org.apache.commons.math3.distribution.UniformIntegerDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,int,int)>($r2, $i0, $i1);

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.distribution.UniformIntegerDistribution: int sample()>();

        return $i0;
    }
    public long nextLong(long, long) throws org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.random.RandomDataGenerator r0;
        long $l0, $l1, l2;
        byte $b3;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        java.lang.Long $r3, $r4;
        org.apache.commons.math3.random.RandomGenerator $r5;
        int $i4;

        r0 := @this: org.apache.commons.math3.random.RandomDataGenerator;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $b3 = $l0 cmp $l1;

        if $b3 < 0 goto label1;

        $r1 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats LOWER_BOUND_NOT_BELOW_UPPER_BOUND>;

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        specialinvoke $r1.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r2, $r3, $r4, 0);

        throw $r1;

     label1:
        l2 = $l1 - $l0;

        l2 = l2 + 1L;

        $b3 = l2 cmp 0L;

        if $b3 > 0 goto label3;

        $r5 = virtualinvoke r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator getRandomGenerator()>();

     label2:
        l2 = interfaceinvoke $r5.<org.apache.commons.math3.random.RandomGenerator: long nextLong()>();

        $b3 = l2 cmp $l0;

        if $b3 < 0 goto label2;

        $b3 = l2 cmp $l1;

        if $b3 > 0 goto label2;

        return l2;

     label3:
        $b3 = l2 cmp 2147483647L;

        if $b3 >= 0 goto label4;

        $r5 = virtualinvoke r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator getRandomGenerator()>();

        $i4 = (int) l2;

        $i4 = interfaceinvoke $r5.<org.apache.commons.math3.random.RandomGenerator: int nextInt(int)>($i4);

        $l1 = (long) $i4;

        $l0 = $l0 + $l1;

        return $l0;

     label4:
        $r5 = virtualinvoke r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator getRandomGenerator()>();

        $l1 = staticinvoke <org.apache.commons.math3.random.RandomDataGenerator: long nextLong(org.apache.commons.math3.random.RandomGenerator,long)>($r5, l2);

        $l0 = $l0 + $l1;

        return $l0;
    }
    public int nextPascal(int, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.random.RandomDataGenerator r0;
        int $i0;
        double $d0;
        org.apache.commons.math3.distribution.PascalDistribution $r1;
        org.apache.commons.math3.random.RandomGenerator $r2;

        r0 := @this: org.apache.commons.math3.random.RandomDataGenerator;

        $i0 := @parameter0: int;

        $d0 := @parameter1: double;

        $r1 = new org.apache.commons.math3.distribution.PascalDistribution;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator getRandomGenerator()>();

        specialinvoke $r1.<org.apache.commons.math3.distribution.PascalDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,int,double)>($r2, $i0, $d0);

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.distribution.PascalDistribution: int sample()>();

        return $i0;
    }
    public int[] nextPermutation(int, int) throws org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.random.RandomDataGenerator r0;
        int $i0, $i1;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        java.lang.Integer $r3, $r4;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r5;
        int[] $r6;
        org.apache.commons.math3.random.RandomGenerator $r7;

        r0 := @this: org.apache.commons.math3.random.RandomDataGenerator;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        if $i1 <= $i0 goto label1;

        $r1 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats PERMUTATION_EXCEEDS_N>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r1.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r2, $r3, $r4, 1);

        throw $r1;

     label1:
        if $i1 > 0 goto label2;

        $r5 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats PERMUTATION_SIZE>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        specialinvoke $r5.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r2, $r3);

        throw $r5;

     label2:
        $r6 = staticinvoke <org.apache.commons.math3.util.MathArrays: int[] natural(int)>($i0);

        $r7 = virtualinvoke r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator getRandomGenerator()>();

        staticinvoke <org.apache.commons.math3.util.MathArrays: void shuffle(int[],org.apache.commons.math3.random.RandomGenerator)>($r6, $r7);

        $r6 = staticinvoke <org.apache.commons.math3.util.MathArrays: int[] copyOf(int[],int)>($r6, $i1);

        return $r6;
    }
    public long nextPoisson(double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.random.RandomDataGenerator r0;
        double $d0;
        org.apache.commons.math3.distribution.PoissonDistribution $r1;
        org.apache.commons.math3.random.RandomGenerator $r2;
        int $i0;
        long $l1;

        r0 := @this: org.apache.commons.math3.random.RandomDataGenerator;

        $d0 := @parameter0: double;

        $r1 = new org.apache.commons.math3.distribution.PoissonDistribution;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator getRandomGenerator()>();

        specialinvoke $r1.<org.apache.commons.math3.distribution.PoissonDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double,double,int)>($r2, $d0, 1.0E-12, 10000000);

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.distribution.PoissonDistribution: int sample()>();

        $l1 = (long) $i0;

        return $l1;
    }
    public java.lang.Object[] nextSample(java.util.Collection, int) throws org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.random.RandomDataGenerator r0;
        java.util.Collection r1;
        int $i0, $i1, $i2;
        java.lang.Object[] r2, $r8;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r3;
        org.apache.commons.math3.exception.util.LocalizedFormats $r4;
        java.lang.Integer $r5, $r6;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r7;
        int[] $r9;
        java.lang.Object $r10;

        r0 := @this: org.apache.commons.math3.random.RandomDataGenerator;

        r1 := @parameter0: java.util.Collection;

        $i0 := @parameter1: int;

        $i1 = interfaceinvoke r1.<java.util.Collection: int size()>();

        if $i0 <= $i1 goto label1;

        $r3 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        specialinvoke $r3.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r4, $r5, $r6, 1);

        throw $r3;

     label1:
        if $i0 > 0 goto label2;

        $r7 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NUMBER_OF_SAMPLES>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r7.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r4, $r5);

        throw $r7;

     label2:
        $r8 = interfaceinvoke r1.<java.util.Collection: java.lang.Object[] toArray()>();

        $r9 = virtualinvoke r0.<org.apache.commons.math3.random.RandomDataGenerator: int[] nextPermutation(int,int)>($i1, $i0);

        r2 = newarray (java.lang.Object)[$i0];

        $i1 = 0;

     label3:
        if $i1 >= $i0 goto label4;

        $i2 = $r9[$i1];

        $r10 = $r8[$i2];

        r2[$i1] = $r10;

        $i1 = $i1 + 1;

        goto label3;

     label4:
        return r2;
    }
    public java.lang.String nextSecureHexString(int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.random.RandomDataGenerator r0;
        int $i0, i1, i2, $i3, $i4;
        java.security.NoSuchAlgorithmException r1;
        java.lang.StringBuilder r2, $r11;
        byte[] r3;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r4;
        org.apache.commons.math3.exception.util.LocalizedFormats $r5;
        java.lang.Integer $r6;
        org.apache.commons.math3.random.RandomGenerator $r7;
        java.security.MessageDigest $r8;
        byte $b5;
        java.lang.String $r9, r10;
        org.apache.commons.math3.exception.MathInternalError $r12;

        r0 := @this: org.apache.commons.math3.random.RandomDataGenerator;

        $i0 := @parameter0: int;

        if $i0 > 0 goto label1;

        $r4 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r5 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats LENGTH>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r4.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r5, $r6);

        throw $r4;

     label1:
        $r7 = specialinvoke r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator getSecRan()>();

     label2:
        $r8 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("SHA-1");

     label3:
        virtualinvoke $r8.<java.security.MessageDigest: void reset()>();

        i1 = $i0 / 40;

        i1 = i1 + 1;

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        i2 = 1;

     label4:
        $i3 = i1 + 1;

        if i2 >= $i3 goto label9;

        r3 = newarray (byte)[40];

        interfaceinvoke $r7.<org.apache.commons.math3.random.RandomGenerator: void nextBytes(byte[])>(r3);

        virtualinvoke $r8.<java.security.MessageDigest: void update(byte[])>(r3);

        r3 = virtualinvoke $r8.<java.security.MessageDigest: byte[] digest()>();

        $i3 = 0;

     label5:
        $i4 = lengthof r3;

        if $i3 >= $i4 goto label8;

        $b5 = r3[$i3];

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($b5);

        $i4 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        $i4 = $i4 + 128;

        $r9 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i4);

        r10 = $r9;

        $i4 = virtualinvoke $r9.<java.lang.String: int length()>();

        if $i4 != 1 goto label6;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0");

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

     label6:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        $i3 = $i3 + 1;

        goto label5;

     label7:
        r1 := @caughtexception;

        $r12 = new org.apache.commons.math3.exception.MathInternalError;

        specialinvoke $r12.<org.apache.commons.math3.exception.MathInternalError: void <init>(java.lang.Throwable)>(r1);

        throw $r12;

     label8:
        i2 = i2 + 1;

        goto label4;

     label9:
        $r9 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = virtualinvoke $r9.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        return $r9;

        catch java.security.NoSuchAlgorithmException from label2 to label3 with label7;
    }
    public int nextSecureInt(int, int) throws org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.random.RandomDataGenerator r0;
        int $i0, $i1;
        org.apache.commons.math3.distribution.UniformIntegerDistribution $r1;
        org.apache.commons.math3.random.RandomGenerator $r2;

        r0 := @this: org.apache.commons.math3.random.RandomDataGenerator;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = new org.apache.commons.math3.distribution.UniformIntegerDistribution;

        $r2 = specialinvoke r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator getSecRan()>();

        specialinvoke $r1.<org.apache.commons.math3.distribution.UniformIntegerDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,int,int)>($r2, $i0, $i1);

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.distribution.UniformIntegerDistribution: int sample()>();

        return $i0;
    }
    public long nextSecureLong(long, long) throws org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.random.RandomDataGenerator r0;
        long $l0, $l1, l2;
        byte $b3;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        java.lang.Long $r3, $r4;
        org.apache.commons.math3.random.RandomGenerator $r5;
        int $i4;

        r0 := @this: org.apache.commons.math3.random.RandomDataGenerator;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $b3 = $l0 cmp $l1;

        if $b3 < 0 goto label1;

        $r1 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats LOWER_BOUND_NOT_BELOW_UPPER_BOUND>;

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        specialinvoke $r1.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r2, $r3, $r4, 0);

        throw $r1;

     label1:
        $r5 = specialinvoke r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator getSecRan()>();

        l2 = $l1 - $l0;

        l2 = l2 + 1L;

        $b3 = l2 cmp 0L;

        if $b3 > 0 goto label3;

     label2:
        l2 = interfaceinvoke $r5.<org.apache.commons.math3.random.RandomGenerator: long nextLong()>();

        $b3 = l2 cmp $l0;

        if $b3 < 0 goto label2;

        $b3 = l2 cmp $l1;

        if $b3 > 0 goto label2;

        return l2;

     label3:
        $b3 = l2 cmp 2147483647L;

        if $b3 >= 0 goto label4;

        $i4 = (int) l2;

        $i4 = interfaceinvoke $r5.<org.apache.commons.math3.random.RandomGenerator: int nextInt(int)>($i4);

        $l1 = (long) $i4;

        $l0 = $l0 + $l1;

        return $l0;

     label4:
        $l1 = staticinvoke <org.apache.commons.math3.random.RandomDataGenerator: long nextLong(org.apache.commons.math3.random.RandomGenerator,long)>($r5, l2);

        $l0 = $l0 + $l1;

        return $l0;
    }
    public double nextT(double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.random.RandomDataGenerator r0;
        double $d0;
        org.apache.commons.math3.distribution.TDistribution $r1;
        org.apache.commons.math3.random.RandomGenerator $r2;

        r0 := @this: org.apache.commons.math3.random.RandomDataGenerator;

        $d0 := @parameter0: double;

        $r1 = new org.apache.commons.math3.distribution.TDistribution;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator getRandomGenerator()>();

        specialinvoke $r1.<org.apache.commons.math3.distribution.TDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double,double)>($r2, $d0, 1.0E-9);

        $d0 = virtualinvoke $r1.<org.apache.commons.math3.distribution.TDistribution: double sample()>();

        return $d0;
    }
    public double nextUniform(double, double) throws org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.exception.NotFiniteNumberException, org.apache.commons.math3.exception.NotANumberException
    {
        org.apache.commons.math3.random.RandomDataGenerator r0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.random.RandomDataGenerator;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.random.RandomDataGenerator: double nextUniform(double,double,boolean)>($d0, $d1, 0);

        return $d0;
    }
    public double nextUniform(double, double, boolean) throws org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.exception.NotFiniteNumberException, org.apache.commons.math3.exception.NotANumberException
    {
        org.apache.commons.math3.random.RandomDataGenerator r0;
        double $d0, $d1, $d2;
        boolean $z0, $z1;
        byte $b0;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        java.lang.Double $r3, $r4;
        org.apache.commons.math3.exception.NotFiniteNumberException $r5;
        java.lang.Object[] $r6;
        org.apache.commons.math3.exception.NotANumberException $r7;
        org.apache.commons.math3.random.RandomGenerator $r8;

        r0 := @this: org.apache.commons.math3.random.RandomDataGenerator;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $z0 := @parameter2: boolean;

        $b0 = $d0 cmpl $d1;

        if $b0 < 0 goto label1;

        $r1 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats LOWER_BOUND_NOT_BELOW_UPPER_BOUND>;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        specialinvoke $r1.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r2, $r3, $r4, 0);

        throw $r1;

     label1:
        $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d0);

        if $z1 == 0 goto label2;

        $r5 = new org.apache.commons.math3.exception.NotFiniteNumberException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INFINITE_BOUND>;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r6 = newarray (java.lang.Object)[0];

        specialinvoke $r5.<org.apache.commons.math3.exception.NotFiniteNumberException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])>($r2, $r3, $r6);

        throw $r5;

     label2:
        $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d1);

        if $z1 == 0 goto label3;

        $r5 = new org.apache.commons.math3.exception.NotFiniteNumberException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INFINITE_BOUND>;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        $r6 = newarray (java.lang.Object)[0];

        specialinvoke $r5.<org.apache.commons.math3.exception.NotFiniteNumberException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])>($r2, $r3, $r6);

        throw $r5;

     label3:
        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z1 != 0 goto label4;

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d1);

        if $z1 == 0 goto label5;

     label4:
        $r7 = new org.apache.commons.math3.exception.NotANumberException;

        specialinvoke $r7.<org.apache.commons.math3.exception.NotANumberException: void <init>()>();

        throw $r7;

     label5:
        $r8 = virtualinvoke r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator getRandomGenerator()>();

        $d2 = interfaceinvoke $r8.<org.apache.commons.math3.random.RandomGenerator: double nextDouble()>();

     label6:
        if $z0 != 0 goto label7;

        $b0 = $d2 cmpg 0.0;

        if $b0 > 0 goto label7;

        $d2 = interfaceinvoke $r8.<org.apache.commons.math3.random.RandomGenerator: double nextDouble()>();

        goto label6;

     label7:
        $d1 = $d2 * $d1;

        $d2 = 1.0 - $d2;

        $d0 = $d2 * $d0;

        $d0 = $d1 + $d0;

        return $d0;
    }
    public double nextWeibull(double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.random.RandomDataGenerator r0;
        double $d0, $d1;
        org.apache.commons.math3.distribution.WeibullDistribution $r1;
        org.apache.commons.math3.random.RandomGenerator $r2;

        r0 := @this: org.apache.commons.math3.random.RandomDataGenerator;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $r1 = new org.apache.commons.math3.distribution.WeibullDistribution;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator getRandomGenerator()>();

        specialinvoke $r1.<org.apache.commons.math3.distribution.WeibullDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double,double,double)>($r2, $d0, $d1, 1.0E-9);

        $d0 = virtualinvoke $r1.<org.apache.commons.math3.distribution.WeibullDistribution: double sample()>();

        return $d0;
    }
    public int nextZipf(int, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.random.RandomDataGenerator r0;
        int $i0;
        double $d0;
        org.apache.commons.math3.distribution.ZipfDistribution $r1;
        org.apache.commons.math3.random.RandomGenerator $r2;

        r0 := @this: org.apache.commons.math3.random.RandomDataGenerator;

        $i0 := @parameter0: int;

        $d0 := @parameter1: double;

        $r1 = new org.apache.commons.math3.distribution.ZipfDistribution;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator getRandomGenerator()>();

        specialinvoke $r1.<org.apache.commons.math3.distribution.ZipfDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,int,double)>($r2, $i0, $d0);

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.distribution.ZipfDistribution: int sample()>();

        return $i0;
    }
    public void reSeed()
    {
        org.apache.commons.math3.random.RandomDataGenerator r0;
        long $l0, $l1;
        org.apache.commons.math3.random.RandomGenerator $r1;
        int $i2;

        r0 := @this: org.apache.commons.math3.random.RandomDataGenerator;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator getRandomGenerator()>();

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $i2 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        $l0 = (long) $i2;

        $l0 = $l1 + $l0;

        interfaceinvoke $r1.<org.apache.commons.math3.random.RandomGenerator: void setSeed(long)>($l0);

        return;
    }
    public void reSeed(long)
    {
        org.apache.commons.math3.random.RandomDataGenerator r0;
        long $l0;
        org.apache.commons.math3.random.RandomGenerator $r1;

        r0 := @this: org.apache.commons.math3.random.RandomDataGenerator;

        $l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator getRandomGenerator()>();

        interfaceinvoke $r1.<org.apache.commons.math3.random.RandomGenerator: void setSeed(long)>($l0);

        return;
    }
    public void reSeedSecure()
    {
        org.apache.commons.math3.random.RandomDataGenerator r0;
        org.apache.commons.math3.random.RandomGenerator $r1;
        long $l0;

        r0 := @this: org.apache.commons.math3.random.RandomDataGenerator;

        $r1 = specialinvoke r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator getSecRan()>();

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        interfaceinvoke $r1.<org.apache.commons.math3.random.RandomGenerator: void setSeed(long)>($l0);

        return;
    }
    public void reSeedSecure(long)
    {
        org.apache.commons.math3.random.RandomDataGenerator r0;
        long $l0;
        org.apache.commons.math3.random.RandomGenerator $r1;

        r0 := @this: org.apache.commons.math3.random.RandomDataGenerator;

        $l0 := @parameter0: long;

        $r1 = specialinvoke r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator getSecRan()>();

        interfaceinvoke $r1.<org.apache.commons.math3.random.RandomGenerator: void setSeed(long)>($l0);

        return;
    }
    public void setSecureAlgorithm(java.lang.String, java.lang.String) throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException
    {
        org.apache.commons.math3.random.RandomDataGenerator r0;
        java.lang.String $r1, $r2;
        java.security.SecureRandom $r3;
        org.apache.commons.math3.random.RandomGenerator $r4;

        r0 := @this: org.apache.commons.math3.random.RandomDataGenerator;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String,java.lang.String)>($r1, $r2);

        $r4 = staticinvoke <org.apache.commons.math3.random.RandomGeneratorFactory: org.apache.commons.math3.random.RandomGenerator createRandomGenerator(java.util.Random)>($r3);

        r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator secRand> = $r4;

        return;
    }
