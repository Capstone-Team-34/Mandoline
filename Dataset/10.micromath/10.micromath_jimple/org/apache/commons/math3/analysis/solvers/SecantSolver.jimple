org.apache.commons.math3.analysis.solvers.SecantSolver extends org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver
protected static final double DEFAULT_ABSOLUTE_ACCURACY
    public void <init>()
    {
        org.apache.commons.math3.analysis.solvers.SecantSolver r0;

        r0 := @this: org.apache.commons.math3.analysis.solvers.SecantSolver;

        specialinvoke r0.<org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver: void <init>(double)>(1.0E-6);

        return;
    }
    public void <init>(double)
    {
        org.apache.commons.math3.analysis.solvers.SecantSolver r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.analysis.solvers.SecantSolver;

        $d0 := @parameter0: double;

        specialinvoke r0.<org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver: void <init>(double)>($d0);

        return;
    }
    public void <init>(double, double)
    {
        org.apache.commons.math3.analysis.solvers.SecantSolver r0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.analysis.solvers.SecantSolver;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver: void <init>(double,double)>($d0, $d1);

        return;
    }
    protected final double doSolve() throws org.apache.commons.math3.exception.TooManyEvaluationsException, org.apache.commons.math3.exception.NoBracketingException
    {
        org.apache.commons.math3.analysis.solvers.SecantSolver r0;
        double $d0, d1, $d2, d3, $d4, d5, $d6, d7, $d8, $d9;
        byte $b0;

        r0 := @this: org.apache.commons.math3.analysis.solvers.SecantSolver;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.SecantSolver: double getMin()>();

        d1 = $d0;

        $d2 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.SecantSolver: double getMax()>();

        d3 = $d2;

        $d4 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.SecantSolver: double computeObjectiveValue(double)>($d0);

        d5 = $d4;

        $d6 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.SecantSolver: double computeObjectiveValue(double)>($d2);

        d7 = $d6;

        $b0 = $d4 cmpl 0.0;

        if $b0 != 0 goto label1;

        return $d0;

     label1:
        $b0 = $d6 cmpl 0.0;

        if $b0 != 0 goto label2;

        return $d2;

     label2:
        virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.SecantSolver: void verifyBracketing(double,double)>($d0, $d2);

        $d0 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.SecantSolver: double getFunctionValueAccuracy()>();

        $d2 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.SecantSolver: double getAbsoluteAccuracy()>();

        $d4 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.SecantSolver: double getRelativeAccuracy()>();

     label3:
        d1 = d3 - d1;

        d1 = d1 * d7;

        d5 = d7 - d5;

        d5 = d1 / d5;

        $d6 = d3 - d5;

        $d8 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.SecantSolver: double computeObjectiveValue(double)>($d6);

        $b0 = $d8 cmpl 0.0;

        if $b0 == 0 goto label5;

        d1 = d3;

        d5 = d7;

        d3 = $d6;

        d7 = $d8;

        $d8 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d8);

        $b0 = $d8 cmpg $d0;

        if $b0 > 0 goto label4;

        return $d6;

     label4:
        $d8 = $d6 - d1;

        $d8 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d8);

        $d9 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d6);

        $d9 = $d9 * $d4;

        $d9 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>($d9, $d2);

        $b0 = $d8 cmpg $d9;

        if $b0 >= 0 goto label3;

     label5:
        return $d6;
    }
