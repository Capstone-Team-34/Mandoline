org.apache.commons.math3.analysis.FunctionUtils$18$1 extends java.lang.Object implements org.apache.commons.math3.analysis.MultivariateMatrixFunction
final org.apache.commons.math3.analysis.FunctionUtils$18 this$0
    void <init>(org.apache.commons.math3.analysis.FunctionUtils$18)
    {
        org.apache.commons.math3.analysis.FunctionUtils$18$1 r0;
        org.apache.commons.math3.analysis.FunctionUtils$18 $r1;

        r0 := @this: org.apache.commons.math3.analysis.FunctionUtils$18$1;

        $r1 := @parameter0: org.apache.commons.math3.analysis.FunctionUtils$18;

        r0.<org.apache.commons.math3.analysis.FunctionUtils$18$1: org.apache.commons.math3.analysis.FunctionUtils$18 this$0> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public double[][] value(double[])
    {
        org.apache.commons.math3.analysis.FunctionUtils$18$1 r0;
        double[] $r1;
        int i0, i1, $i2;
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] r2;
        int[] r3;
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure $r4;
        double $d0;
        org.apache.commons.math3.analysis.FunctionUtils$18 $r5;
        org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction $r6;
        java.lang.Class $r7;
        java.lang.Object $r8;
        double[][] r9;

        r0 := @this: org.apache.commons.math3.analysis.FunctionUtils$18$1;

        $r1 := @parameter0: double[];

        i0 = lengthof $r1;

        r2 = newarray (org.apache.commons.math3.analysis.differentiation.DerivativeStructure)[i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r4 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $d0 = $r1[i1];

        specialinvoke $r4.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(int,int,int,double)>(i0, 1, i1, $d0);

        r2[i1] = $r4;

        i1 = i1 + 1;

        goto label1;

     label2:
        $r5 = r0.<org.apache.commons.math3.analysis.FunctionUtils$18$1: org.apache.commons.math3.analysis.FunctionUtils$18 this$0>;

        $r6 = $r5.<org.apache.commons.math3.analysis.FunctionUtils$18: org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction val$f>;

        r2 = interfaceinvoke $r6.<org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction: org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure[])>(r2);

        i1 = lengthof r2;

        r3 = newarray (int)[2];

        r3[0] = i1;

        r3[1] = i0;

        $r7 = <java.lang.Double: java.lang.Class TYPE>;

        $r8 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r7, r3);

        r9 = (double[][]) $r8;

        r3 = newarray (int)[i0];

        i1 = 0;

     label3:
        $i2 = lengthof r2;

        if i1 >= $i2 goto label6;

        $i2 = 0;

     label4:
        if $i2 >= i0 goto label5;

        r3[$i2] = 1;

        $r1 = r9[i1];

        $r4 = r2[i1];

        $d0 = virtualinvoke $r4.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getPartialDerivative(int[])>(r3);

        $r1[$i2] = $d0;

        r3[$i2] = 0;

        $i2 = $i2 + 1;

        goto label4;

     label5:
        i1 = i1 + 1;

        goto label3;

     label6:
        return r9;
    }
