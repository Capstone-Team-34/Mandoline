org.apache.commons.math3.analysis.solvers.BrentSolver extends org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver
private static final double DEFAULT_ABSOLUTE_ACCURACY
    public void <init>()
    {
        org.apache.commons.math3.analysis.solvers.BrentSolver r0;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BrentSolver;

        specialinvoke r0.<org.apache.commons.math3.analysis.solvers.BrentSolver: void <init>(double)>(1.0E-6);

        return;
    }
    public void <init>(double)
    {
        org.apache.commons.math3.analysis.solvers.BrentSolver r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BrentSolver;

        $d0 := @parameter0: double;

        specialinvoke r0.<org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver: void <init>(double)>($d0);

        return;
    }
    public void <init>(double, double)
    {
        org.apache.commons.math3.analysis.solvers.BrentSolver r0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BrentSolver;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver: void <init>(double,double)>($d0, $d1);

        return;
    }
    public void <init>(double, double, double)
    {
        org.apache.commons.math3.analysis.solvers.BrentSolver r0;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BrentSolver;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        specialinvoke r0.<org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver: void <init>(double,double,double)>($d0, $d1, $d2);

        return;
    }
    private double brent(double, double, double, double)
    {
        org.apache.commons.math3.analysis.solvers.BrentSolver r0;
        double $d0, $d1, $d2, $d3, d4, d5, d6, d7, d8, d9, d10, $d11, $d12, $d13, $d14, $d15;
        byte $b0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BrentSolver;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $d3 := @parameter3: double;

        d7 = $d0;

        d5 = $d2;

        d8 = $d1;

        d9 = $d3;

        $d3 = $d0;

        d10 = $d1 - $d0;

        $d0 = d10;

        $d1 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BrentSolver: double getAbsoluteAccuracy()>();

        $d11 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BrentSolver: double getRelativeAccuracy()>();

     label01:
        d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d2);

        d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d9);

        $b0 = d6 cmpg d4;

        if $b0 >= 0 goto label02;

        d7 = d8;

        d8 = $d3;

        $d3 = d7;

        d5 = d9;

        d9 = $d2;

        $d2 = d5;

     label02:
        d6 = 2.0 * $d11;

        d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d8);

        d6 = d6 * d4;

        d6 = d6 + $d1;

        d4 = $d3 - d8;

        d4 = 0.5 * d4;

        $d12 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d4);

        $b0 = $d12 cmpg d6;

        if $b0 <= 0 goto label18;

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double)>(d9, 0.0);

        if $z0 == 0 goto label03;

        return d8;

     label03:
        $d12 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        $b0 = $d12 cmpg d6;

        if $b0 < 0 goto label04;

        $d12 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d5);

        $d13 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d9);

        $b0 = $d12 cmpg $d13;

        if $b0 > 0 goto label09;

     label04:
        d10 = d4;

        $d0 = d4;

     label05:
        d7 = d8;

        d5 = d9;

        d9 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d10);

        $b0 = d9 cmpl d6;

        if $b0 <= 0 goto label16;

        d8 = d8 + d10;

     label06:
        d6 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BrentSolver: double computeObjectiveValue(double)>(d8);

        d9 = d6;

        $b0 = d6 cmpl 0.0;

        if $b0 <= 0 goto label07;

        $b0 = $d2 cmpl 0.0;

        if $b0 > 0 goto label08;

     label07:
        $b0 = d6 cmpg 0.0;

        if $b0 > 0 goto label01;

        $b0 = $d2 cmpg 0.0;

        if $b0 > 0 goto label01;

     label08:
        $d3 = d7;

        $d2 = d5;

        d10 = d8 - d7;

        $d0 = d10;

        goto label01;

     label09:
        $d12 = d9 / d5;

        $b0 = d7 cmpl $d3;

        if $b0 != 0 goto label13;

        d7 = 2.0 * d4;

        d7 = d7 * $d12;

        d5 = 1.0 - $d12;

     label10:
        $b0 = d7 cmpl 0.0;

        if $b0 <= 0 goto label14;

        d5 = neg d5;

     label11:
        $d12 = $d0;

        $d0 = d10;

        d10 = 1.5 * d4;

        d10 = d10 * d5;

        $d13 = d6 * d5;

        $d13 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d13);

        d10 = d10 - $d13;

        $b0 = d7 cmpl d10;

        if $b0 >= 0 goto label12;

        d10 = 0.5 * $d12;

        d10 = d10 * d5;

        d10 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d10);

        $b0 = d7 cmpl d10;

        if $b0 < 0 goto label15;

     label12:
        d10 = d4;

        $d0 = d4;

        goto label05;

     label13:
        $d13 = d5 / $d2;

        d5 = d9 / $d2;

        $d14 = 2.0 * d4;

        $d14 = $d14 * $d13;

        $d15 = $d13 - d5;

        $d14 = $d14 * $d15;

        d7 = d8 - d7;

        $d15 = d5 - 1.0;

        d7 = d7 * $d15;

        d7 = $d14 - d7;

        d7 = $d12 * d7;

        $d13 = $d13 - 1.0;

        d5 = d5 - 1.0;

        d5 = $d13 * d5;

        $d12 = $d12 - 1.0;

        d5 = d5 * $d12;

        goto label10;

     label14:
        d7 = neg d7;

        goto label11;

     label15:
        d10 = d7 / d5;

        goto label05;

     label16:
        $b0 = d4 cmpl 0.0;

        if $b0 <= 0 goto label17;

        d8 = d8 + d6;

        goto label06;

     label17:
        d8 = d8 - d6;

        goto label06;

     label18:
        return d8;
    }
    protected double doSolve() throws org.apache.commons.math3.exception.NoBracketingException, org.apache.commons.math3.exception.TooManyEvaluationsException, org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.analysis.solvers.BrentSolver r0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        byte $b0;
        org.apache.commons.math3.exception.NoBracketingException $r1;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BrentSolver;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BrentSolver: double getMin()>();

        $d1 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BrentSolver: double getMax()>();

        $d2 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BrentSolver: double getStartValue()>();

        $d3 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BrentSolver: double getFunctionValueAccuracy()>();

        virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BrentSolver: void verifySequence(double,double,double)>($d0, $d2, $d1);

        $d4 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BrentSolver: double computeObjectiveValue(double)>($d2);

        $d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d4);

        $b0 = $d5 cmpg $d3;

        if $b0 > 0 goto label1;

        return $d2;

     label1:
        $d5 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BrentSolver: double computeObjectiveValue(double)>($d0);

        $d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d5);

        $b0 = $d6 cmpg $d3;

        if $b0 > 0 goto label2;

        return $d0;

     label2:
        $d6 = $d4 * $d5;

        $b0 = $d6 cmpg 0.0;

        if $b0 >= 0 goto label3;

        $d0 = specialinvoke r0.<org.apache.commons.math3.analysis.solvers.BrentSolver: double brent(double,double,double,double)>($d0, $d2, $d5, $d4);

        return $d0;

     label3:
        $d6 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BrentSolver: double computeObjectiveValue(double)>($d1);

        $d7 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d6);

        $b0 = $d7 cmpg $d3;

        if $b0 > 0 goto label4;

        return $d1;

     label4:
        $d3 = $d4 * $d6;

        $b0 = $d3 cmpg 0.0;

        if $b0 >= 0 goto label5;

        $d0 = specialinvoke r0.<org.apache.commons.math3.analysis.solvers.BrentSolver: double brent(double,double,double,double)>($d2, $d1, $d4, $d6);

        return $d0;

     label5:
        $r1 = new org.apache.commons.math3.exception.NoBracketingException;

        specialinvoke $r1.<org.apache.commons.math3.exception.NoBracketingException: void <init>(double,double,double,double)>($d0, $d1, $d5, $d6);

        throw $r1;
    }
