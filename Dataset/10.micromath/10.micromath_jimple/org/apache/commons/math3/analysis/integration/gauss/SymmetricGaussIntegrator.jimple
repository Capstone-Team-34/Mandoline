org.apache.commons.math3.analysis.integration.gauss.SymmetricGaussIntegrator extends org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator
    public void <init>(org.apache.commons.math3.util.Pair) throws org.apache.commons.math3.exception.NonMonotonicSequenceException
    {
        org.apache.commons.math3.analysis.integration.gauss.SymmetricGaussIntegrator r0;
        org.apache.commons.math3.util.Pair r1;
        java.lang.Object $r2;
        double[] $r3, $r4;

        r0 := @this: org.apache.commons.math3.analysis.integration.gauss.SymmetricGaussIntegrator;

        r1 := @parameter0: org.apache.commons.math3.util.Pair;

        $r2 = virtualinvoke r1.<org.apache.commons.math3.util.Pair: java.lang.Object getFirst()>();

        $r3 = (double[]) $r2;

        $r2 = virtualinvoke r1.<org.apache.commons.math3.util.Pair: java.lang.Object getSecond()>();

        $r4 = (double[]) $r2;

        specialinvoke r0.<org.apache.commons.math3.analysis.integration.gauss.SymmetricGaussIntegrator: void <init>(double[],double[])>($r3, $r4);

        return;
    }
    public void <init>(double[], double[]) throws org.apache.commons.math3.exception.NonMonotonicSequenceException, org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.analysis.integration.gauss.SymmetricGaussIntegrator r0;
        double[] $r1, $r2;

        r0 := @this: org.apache.commons.math3.analysis.integration.gauss.SymmetricGaussIntegrator;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[];

        specialinvoke r0.<org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator: void <init>(double[],double[])>($r1, $r2);

        return;
    }
    public double integrate(org.apache.commons.math3.analysis.UnivariateFunction)
    {
        org.apache.commons.math3.analysis.integration.gauss.SymmetricGaussIntegrator r0;
        org.apache.commons.math3.analysis.UnivariateFunction $r1;
        int i0, $i1, i2;
        double $d0, $d1, $d2, $d3, $d4;

        r0 := @this: org.apache.commons.math3.analysis.integration.gauss.SymmetricGaussIntegrator;

        $r1 := @parameter0: org.apache.commons.math3.analysis.UnivariateFunction;

        $i1 = virtualinvoke r0.<org.apache.commons.math3.analysis.integration.gauss.SymmetricGaussIntegrator: int getNumberOfPoints()>();

        if $i1 != 1 goto label1;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.analysis.integration.gauss.SymmetricGaussIntegrator: double getWeight(int)>(0);

        $d1 = interfaceinvoke $r1.<org.apache.commons.math3.analysis.UnivariateFunction: double value(double)>(0.0);

        $d0 = $d0 * $d1;

        return $d0;

     label1:
        i0 = $i1 / 2;

        $d0 = 0.0;

        $d1 = 0.0;

        i2 = 0;

     label2:
        if i2 >= i0 goto label3;

        $d2 = virtualinvoke r0.<org.apache.commons.math3.analysis.integration.gauss.SymmetricGaussIntegrator: double getPoint(int)>(i2);

        $d3 = virtualinvoke r0.<org.apache.commons.math3.analysis.integration.gauss.SymmetricGaussIntegrator: double getWeight(int)>(i2);

        $d4 = interfaceinvoke $r1.<org.apache.commons.math3.analysis.UnivariateFunction: double value(double)>($d2);

        $d2 = neg $d2;

        $d2 = interfaceinvoke $r1.<org.apache.commons.math3.analysis.UnivariateFunction: double value(double)>($d2);

        $d4 = $d4 + $d2;

        $d3 = $d4 * $d3;

        $d1 = $d3 - $d1;

        $d3 = $d0 + $d1;

        $d0 = $d3 - $d0;

        $d1 = $d0 - $d1;

        $d0 = $d3;

        i2 = i2 + 1;

        goto label2;

     label3:
        $i1 = $i1 % 2;

        if $i1 == 0 goto label4;

        $d3 = virtualinvoke r0.<org.apache.commons.math3.analysis.integration.gauss.SymmetricGaussIntegrator: double getWeight(int)>(i0);

        $d4 = interfaceinvoke $r1.<org.apache.commons.math3.analysis.UnivariateFunction: double value(double)>(0.0);

        $d3 = $d4 * $d3;

        $d1 = $d3 - $d1;

        $d0 = $d0 + $d1;

     label4:
        return $d0;
    }
