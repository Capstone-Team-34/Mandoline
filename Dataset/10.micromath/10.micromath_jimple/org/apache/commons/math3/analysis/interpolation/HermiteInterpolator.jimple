org.apache.commons.math3.analysis.interpolation.HermiteInterpolator extends java.lang.Object implements org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableVectorFunction
private final java.util.List abscissae
private final java.util.List bottomDiagonal
private final java.util.List topDiagonal
    public void <init>()
    {
        org.apache.commons.math3.analysis.interpolation.HermiteInterpolator r0;
        java.util.ArrayList $r1;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.HermiteInterpolator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.math3.analysis.interpolation.HermiteInterpolator: java.util.List abscissae> = $r1;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.math3.analysis.interpolation.HermiteInterpolator: java.util.List topDiagonal> = $r1;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.math3.analysis.interpolation.HermiteInterpolator: java.util.List bottomDiagonal> = $r1;

        return;
    }
    private void checkInterpolation() throws org.apache.commons.math3.exception.NoDataException
    {
        org.apache.commons.math3.analysis.interpolation.HermiteInterpolator r0;
        org.apache.commons.math3.exception.util.LocalizedFormats $r1;
        boolean $z0;
        java.util.List $r2;
        org.apache.commons.math3.exception.NoDataException $r3;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.HermiteInterpolator;

        $r2 = r0.<org.apache.commons.math3.analysis.interpolation.HermiteInterpolator: java.util.List abscissae>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r3 = new org.apache.commons.math3.exception.NoDataException;

        $r1 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats EMPTY_INTERPOLATION_SAMPLE>;

        specialinvoke $r3.<org.apache.commons.math3.exception.NoDataException: void <init>(org.apache.commons.math3.exception.util.Localizable)>($r1);

        throw $r3;

     label1:
        return;
    }
    private transient org.apache.commons.math3.analysis.polynomials.PolynomialFunction polynomial(double[])
    {
        org.apache.commons.math3.analysis.interpolation.HermiteInterpolator r0;
        double[] $r1;
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction $r2;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.HermiteInterpolator;

        $r1 := @parameter0: double[];

        $r2 = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction;

        specialinvoke $r2.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: void <init>(double[])>($r1);

        return $r2;
    }
    public transient void addSamplePoint(double, double[][]) throws org.apache.commons.math3.exception.ZeroException, org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.analysis.interpolation.HermiteInterpolator r0;
        double $d0, $d1, $d2, $d3;
        double[][] $r1;
        int i0, $i1, $i3, $i4, $i5;
        double[] $r2, r5, r6;
        java.lang.Object $r3;
        long $l2;
        java.util.List $r4;
        java.lang.Double $r7;
        boolean $z0;
        org.apache.commons.math3.exception.ZeroException $r8;
        org.apache.commons.math3.exception.util.LocalizedFormats $r9;
        java.lang.Object[] $r10;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.HermiteInterpolator;

        $d0 := @parameter0: double;

        $r1 := @parameter1: double[][];

        i0 = 0;

     label1:
        $i1 = lengthof $r1;

        if i0 >= $i1 goto label9;

        $r2 = $r1[i0];

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (double[]) $r3;

        if i0 <= 1 goto label3;

        $l2 = staticinvoke <org.apache.commons.math3.util.CombinatoricsUtils: long factorial(int)>(i0);

        $d1 = (double) $l2;

        $d1 = 1.0 / $d1;

        $i1 = 0;

     label2:
        $i3 = lengthof $r2;

        if $i1 >= $i3 goto label3;

        $d2 = $r2[$i1];

        $d2 = $d2 * $d1;

        $r2[$i1] = $d2;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $r4 = r0.<org.apache.commons.math3.analysis.interpolation.HermiteInterpolator: java.util.List abscissae>;

        $i1 = interfaceinvoke $r4.<java.util.List: int size()>();

        $r4 = r0.<org.apache.commons.math3.analysis.interpolation.HermiteInterpolator: java.util.List bottomDiagonal>;

        $i3 = $i1 - i0;

        interfaceinvoke $r4.<java.util.List: void add(int,java.lang.Object)>($i3, $r2);

        r5 = $r2;

        $i3 = i0;

     label4:
        if $i3 >= $i1 goto label8;

        $r4 = r0.<org.apache.commons.math3.analysis.interpolation.HermiteInterpolator: java.util.List bottomDiagonal>;

        $i4 = $i3 + 1;

        $i4 = $i1 - $i4;

        $r3 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>($i4);

        r6 = (double[]) $r3;

        $r4 = r0.<org.apache.commons.math3.analysis.interpolation.HermiteInterpolator: java.util.List abscissae>;

        $i4 = $i3 + 1;

        $i4 = $i1 - $i4;

        $r3 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>($i4);

        $r7 = (java.lang.Double) $r3;

        $d1 = virtualinvoke $r7.<java.lang.Double: double doubleValue()>();

        $d1 = $d0 - $d1;

        $d1 = 1.0 / $d1;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d1);

        if $z0 == 0 goto label5;

        $r8 = new org.apache.commons.math3.exception.ZeroException;

        $r9 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats DUPLICATED_ABSCISSA_DIVISION_BY_ZERO>;

        $r10 = newarray (java.lang.Object)[1];

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r10[0] = $r7;

        specialinvoke $r8.<org.apache.commons.math3.exception.ZeroException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r9, $r10);

        throw $r8;

     label5:
        $i4 = 0;

     label6:
        $i5 = lengthof $r2;

        if $i4 >= $i5 goto label7;

        $d2 = r5[$i4];

        $d3 = r6[$i4];

        $d2 = $d2 - $d3;

        $d2 = $d2 * $d1;

        r6[$i4] = $d2;

        $i4 = $i4 + 1;

        goto label6;

     label7:
        r5 = r6;

        $i3 = $i3 + 1;

        goto label4;

     label8:
        $r4 = r0.<org.apache.commons.math3.analysis.interpolation.HermiteInterpolator: java.util.List topDiagonal>;

        $r3 = virtualinvoke r5.<java.lang.Object: java.lang.Object clone()>();

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r3);

        $r4 = r0.<org.apache.commons.math3.analysis.interpolation.HermiteInterpolator: java.util.List abscissae>;

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r7);

        i0 = i0 + 1;

        goto label1;

     label9:
        return;
    }
    public org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] getPolynomials() throws org.apache.commons.math3.exception.NoDataException
    {
        org.apache.commons.math3.analysis.interpolation.HermiteInterpolator r0;
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] r1;
        double[] $r2, $r7;
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction $r3, $r6, $r8;
        java.util.List $r4;
        java.lang.Object $r5;
        int $i0, $i1, $i2;
        double $d0;
        java.lang.Double $r9;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.HermiteInterpolator;

        specialinvoke r0.<org.apache.commons.math3.analysis.interpolation.HermiteInterpolator: void checkInterpolation()>();

        $r2 = newarray (double)[1];

        $r2[0] = 0.0;

        $r3 = specialinvoke r0.<org.apache.commons.math3.analysis.interpolation.HermiteInterpolator: org.apache.commons.math3.analysis.polynomials.PolynomialFunction polynomial(double[])>($r2);

        $r4 = r0.<org.apache.commons.math3.analysis.interpolation.HermiteInterpolator: java.util.List topDiagonal>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(0);

        $r2 = (double[]) $r5;

        $i0 = lengthof $r2;

        r1 = newarray (org.apache.commons.math3.analysis.polynomials.PolynomialFunction)[$i0];

        $i0 = 0;

     label1:
        $i1 = lengthof r1;

        if $i0 >= $i1 goto label2;

        r1[$i0] = $r3;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $r2 = newarray (double)[1];

        $r2[0] = 1.0;

        $r3 = specialinvoke r0.<org.apache.commons.math3.analysis.interpolation.HermiteInterpolator: org.apache.commons.math3.analysis.polynomials.PolynomialFunction polynomial(double[])>($r2);

        $i0 = 0;

     label3:
        $r4 = r0.<org.apache.commons.math3.analysis.interpolation.HermiteInterpolator: java.util.List topDiagonal>;

        $i1 = interfaceinvoke $r4.<java.util.List: int size()>();

        if $i0 >= $i1 goto label6;

        $r4 = r0.<org.apache.commons.math3.analysis.interpolation.HermiteInterpolator: java.util.List topDiagonal>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>($i0);

        $r2 = (double[]) $r5;

        $i1 = 0;

     label4:
        $i2 = lengthof r1;

        if $i1 >= $i2 goto label5;

        $r6 = r1[$i1];

        $r7 = newarray (double)[1];

        $d0 = $r2[$i1];

        $r7[0] = $d0;

        $r8 = specialinvoke r0.<org.apache.commons.math3.analysis.interpolation.HermiteInterpolator: org.apache.commons.math3.analysis.polynomials.PolynomialFunction polynomial(double[])>($r7);

        $r8 = virtualinvoke $r3.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: org.apache.commons.math3.analysis.polynomials.PolynomialFunction multiply(org.apache.commons.math3.analysis.polynomials.PolynomialFunction)>($r8);

        $r6 = virtualinvoke $r6.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: org.apache.commons.math3.analysis.polynomials.PolynomialFunction add(org.apache.commons.math3.analysis.polynomials.PolynomialFunction)>($r8);

        r1[$i1] = $r6;

        $i1 = $i1 + 1;

        goto label4;

     label5:
        $r2 = newarray (double)[2];

        $r4 = r0.<org.apache.commons.math3.analysis.interpolation.HermiteInterpolator: java.util.List abscissae>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>($i0);

        $r9 = (java.lang.Double) $r5;

        $d0 = virtualinvoke $r9.<java.lang.Double: double doubleValue()>();

        $d0 = neg $d0;

        $r2[0] = $d0;

        $r2[1] = 1.0;

        $r6 = specialinvoke r0.<org.apache.commons.math3.analysis.interpolation.HermiteInterpolator: org.apache.commons.math3.analysis.polynomials.PolynomialFunction polynomial(double[])>($r2);

        $r3 = virtualinvoke $r3.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: org.apache.commons.math3.analysis.polynomials.PolynomialFunction multiply(org.apache.commons.math3.analysis.polynomials.PolynomialFunction)>($r6);

        $i0 = $i0 + 1;

        goto label3;

     label6:
        return r1;
    }
    public double[] value(double) throws org.apache.commons.math3.exception.NoDataException
    {
        org.apache.commons.math3.analysis.interpolation.HermiteInterpolator r0;
        double $d0, d1, d2, $d3;
        double[] r1, r4;
        java.util.List $r2;
        java.lang.Object $r3;
        int $i0, $i1, $i2;
        java.lang.Double $r5;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.HermiteInterpolator;

        $d0 := @parameter0: double;

        specialinvoke r0.<org.apache.commons.math3.analysis.interpolation.HermiteInterpolator: void checkInterpolation()>();

        $r2 = r0.<org.apache.commons.math3.analysis.interpolation.HermiteInterpolator: java.util.List topDiagonal>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(0);

        r1 = (double[]) $r3;

        $i0 = lengthof r1;

        r1 = newarray (double)[$i0];

        d2 = 1.0;

        $i0 = 0;

     label1:
        $r2 = r0.<org.apache.commons.math3.analysis.interpolation.HermiteInterpolator: java.util.List topDiagonal>;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 >= $i1 goto label4;

        $r2 = r0.<org.apache.commons.math3.analysis.interpolation.HermiteInterpolator: java.util.List topDiagonal>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i0);

        r4 = (double[]) $r3;

        $i1 = 0;

     label2:
        $i2 = lengthof r1;

        if $i1 >= $i2 goto label3;

        d1 = r1[$i1];

        $d3 = r4[$i1];

        $d3 = $d3 * d2;

        d1 = d1 + $d3;

        r1[$i1] = d1;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $r2 = r0.<org.apache.commons.math3.analysis.interpolation.HermiteInterpolator: java.util.List abscissae>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i0);

        $r5 = (java.lang.Double) $r3;

        d1 = virtualinvoke $r5.<java.lang.Double: double doubleValue()>();

        d1 = $d0 - d1;

        d2 = d2 * d1;

        $i0 = $i0 + 1;

        goto label1;

     label4:
        return r1;
    }
    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure) throws org.apache.commons.math3.exception.NoDataException
    {
        org.apache.commons.math3.analysis.interpolation.HermiteInterpolator r0;
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure $r1, r7, $r8, $r9;
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] r2;
        double $d0;
        java.util.List $r3;
        java.lang.Object $r4;
        double[] $r5;
        int $i0, $i1, $i2;
        org.apache.commons.math3.Field $r6;
        java.lang.Double $r10;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.HermiteInterpolator;

        $r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        specialinvoke r0.<org.apache.commons.math3.analysis.interpolation.HermiteInterpolator: void checkInterpolation()>();

        $r3 = r0.<org.apache.commons.math3.analysis.interpolation.HermiteInterpolator: java.util.List topDiagonal>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(0);

        $r5 = (double[]) $r4;

        $i0 = lengthof $r5;

        r2 = newarray (org.apache.commons.math3.analysis.differentiation.DerivativeStructure)[$i0];

        $r6 = virtualinvoke $r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.Field getField()>();

        $r4 = interfaceinvoke $r6.<org.apache.commons.math3.Field: java.lang.Object getZero()>();

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>(r2, $r4);

        $r6 = virtualinvoke $r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.Field getField()>();

        $r4 = interfaceinvoke $r6.<org.apache.commons.math3.Field: java.lang.Object getOne()>();

        r7 = (org.apache.commons.math3.analysis.differentiation.DerivativeStructure) $r4;

        $i0 = 0;

     label1:
        $r3 = r0.<org.apache.commons.math3.analysis.interpolation.HermiteInterpolator: java.util.List topDiagonal>;

        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        if $i0 >= $i1 goto label4;

        $r3 = r0.<org.apache.commons.math3.analysis.interpolation.HermiteInterpolator: java.util.List topDiagonal>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i0);

        $r5 = (double[]) $r4;

        $i1 = 0;

     label2:
        $i2 = lengthof r2;

        if $i1 >= $i2 goto label3;

        $r8 = r2[$i1];

        $d0 = $r5[$i1];

        $r9 = virtualinvoke r7.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure multiply(double)>($d0);

        $r8 = virtualinvoke $r8.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure add(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)>($r9);

        r2[$i1] = $r8;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $r3 = r0.<org.apache.commons.math3.analysis.interpolation.HermiteInterpolator: java.util.List abscissae>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i0);

        $r10 = (java.lang.Double) $r4;

        $d0 = virtualinvoke $r10.<java.lang.Double: double doubleValue()>();

        $r8 = virtualinvoke $r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure subtract(double)>($d0);

        r7 = virtualinvoke r7.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure multiply(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)>($r8);

        $i0 = $i0 + 1;

        goto label1;

     label4:
        return r2;
    }
