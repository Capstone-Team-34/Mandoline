org.apache.commons.math3.analysis.polynomials.PolynomialsUtils extends java.lang.Object
private static final java.util.List CHEBYSHEV_COEFFICIENTS
private static final java.util.List HERMITE_COEFFICIENTS
private static final java.util.Map JACOBI_COEFFICIENTS
private static final java.util.List LAGUERRE_COEFFICIENTS
private static final java.util.List LEGENDRE_COEFFICIENTS
    static void <clinit>()
    {
        java.util.ArrayList $r0;
        java.util.List $r1;
        org.apache.commons.math3.fraction.BigFraction $r2;
        java.util.HashMap $r3;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        <org.apache.commons.math3.analysis.polynomials.PolynomialsUtils: java.util.List CHEBYSHEV_COEFFICIENTS> = $r0;

        $r1 = <org.apache.commons.math3.analysis.polynomials.PolynomialsUtils: java.util.List CHEBYSHEV_COEFFICIENTS>;

        $r2 = <org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction ONE>;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2);

        $r1 = <org.apache.commons.math3.analysis.polynomials.PolynomialsUtils: java.util.List CHEBYSHEV_COEFFICIENTS>;

        $r2 = <org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction ZERO>;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2);

        $r1 = <org.apache.commons.math3.analysis.polynomials.PolynomialsUtils: java.util.List CHEBYSHEV_COEFFICIENTS>;

        $r2 = <org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction ONE>;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2);

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        <org.apache.commons.math3.analysis.polynomials.PolynomialsUtils: java.util.List HERMITE_COEFFICIENTS> = $r0;

        $r1 = <org.apache.commons.math3.analysis.polynomials.PolynomialsUtils: java.util.List HERMITE_COEFFICIENTS>;

        $r2 = <org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction ONE>;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2);

        $r1 = <org.apache.commons.math3.analysis.polynomials.PolynomialsUtils: java.util.List HERMITE_COEFFICIENTS>;

        $r2 = <org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction ZERO>;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2);

        $r1 = <org.apache.commons.math3.analysis.polynomials.PolynomialsUtils: java.util.List HERMITE_COEFFICIENTS>;

        $r2 = <org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction TWO>;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2);

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        <org.apache.commons.math3.analysis.polynomials.PolynomialsUtils: java.util.List LAGUERRE_COEFFICIENTS> = $r0;

        $r1 = <org.apache.commons.math3.analysis.polynomials.PolynomialsUtils: java.util.List LAGUERRE_COEFFICIENTS>;

        $r2 = <org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction ONE>;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2);

        $r1 = <org.apache.commons.math3.analysis.polynomials.PolynomialsUtils: java.util.List LAGUERRE_COEFFICIENTS>;

        $r2 = <org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction ONE>;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2);

        $r1 = <org.apache.commons.math3.analysis.polynomials.PolynomialsUtils: java.util.List LAGUERRE_COEFFICIENTS>;

        $r2 = <org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction MINUS_ONE>;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2);

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        <org.apache.commons.math3.analysis.polynomials.PolynomialsUtils: java.util.List LEGENDRE_COEFFICIENTS> = $r0;

        $r1 = <org.apache.commons.math3.analysis.polynomials.PolynomialsUtils: java.util.List LEGENDRE_COEFFICIENTS>;

        $r2 = <org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction ONE>;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2);

        $r1 = <org.apache.commons.math3.analysis.polynomials.PolynomialsUtils: java.util.List LEGENDRE_COEFFICIENTS>;

        $r2 = <org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction ZERO>;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2);

        $r1 = <org.apache.commons.math3.analysis.polynomials.PolynomialsUtils: java.util.List LEGENDRE_COEFFICIENTS>;

        $r2 = <org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction ONE>;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2);

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        <org.apache.commons.math3.analysis.polynomials.PolynomialsUtils: java.util.Map JACOBI_COEFFICIENTS> = $r3;

        return;
    }
    private void <init>()
    {
        org.apache.commons.math3.analysis.polynomials.PolynomialsUtils r0;

        r0 := @this: org.apache.commons.math3.analysis.polynomials.PolynomialsUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    private static org.apache.commons.math3.analysis.polynomials.PolynomialFunction buildPolynomial(int, java.util.List, org.apache.commons.math3.analysis.polynomials.PolynomialsUtils$RecurrenceCoefficientsGenerator)
    {
        int $i0, i1, $i2, $i3;
        java.util.List r0;
        org.apache.commons.math3.analysis.polynomials.PolynomialsUtils$RecurrenceCoefficientsGenerator $r1;
        double[] r2;
        double $d0;
        java.lang.Object $r3;
        org.apache.commons.math3.fraction.BigFraction $r4;
        java.lang.Throwable $r5;
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction $r6;

        $i0 := @parameter0: int;

        r0 := @parameter1: java.util.List;

        $r1 := @parameter2: org.apache.commons.math3.analysis.polynomials.PolynomialsUtils$RecurrenceCoefficientsGenerator;

        entermonitor r0;

     label1:
        i1 = interfaceinvoke r0.<java.util.List: int size()>();

        i1 = i1 * 2;

        $d0 = (double) i1;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d0);

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double floor(double)>($d0);

        i1 = (int) $d0;

        i1 = i1 + -1;

        if $i0 <= i1 goto label2;

        staticinvoke <org.apache.commons.math3.analysis.polynomials.PolynomialsUtils: void computeUpToDegree(int,int,org.apache.commons.math3.analysis.polynomials.PolynomialsUtils$RecurrenceCoefficientsGenerator,java.util.List)>($i0, i1, $r1, r0);

     label2:
        exitmonitor r0;

     label3:
        i1 = $i0 + 1;

        i1 = i1 * $i0;

        i1 = i1 / 2;

        $i2 = $i0 + 1;

        r2 = newarray (double)[$i2];

        $i2 = 0;

     label4:
        if $i2 > $i0 goto label8;

        $i3 = i1 + $i2;

        $r3 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>($i3);

        $r4 = (org.apache.commons.math3.fraction.BigFraction) $r3;

        $d0 = virtualinvoke $r4.<org.apache.commons.math3.fraction.BigFraction: double doubleValue()>();

        r2[$i2] = $d0;

        $i2 = $i2 + 1;

        goto label4;

     label5:
        $r5 := @caughtexception;

     label6:
        exitmonitor r0;

     label7:
        throw $r5;

     label8:
        $r6 = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction;

        specialinvoke $r6.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: void <init>(double[])>(r2);

        return $r6;

        catch java.lang.Throwable from label1 to label3 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }
    private static void computeUpToDegree(int, int, org.apache.commons.math3.analysis.polynomials.PolynomialsUtils$RecurrenceCoefficientsGenerator, java.util.List)
    {
        int $i0, $i1, i2, $i3, i4, $i5;
        org.apache.commons.math3.analysis.polynomials.PolynomialsUtils$RecurrenceCoefficientsGenerator $r0;
        java.util.List r1;
        org.apache.commons.math3.fraction.BigFraction[] $r2;
        java.lang.Object $r3;
        org.apache.commons.math3.fraction.BigFraction r4, r5, $r6, $r7, $r8;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r0 := @parameter2: org.apache.commons.math3.analysis.polynomials.PolynomialsUtils$RecurrenceCoefficientsGenerator;

        r1 := @parameter3: java.util.List;

        $i3 = $i1 + -1;

        $i3 = $i3 * $i1;

        $i3 = $i3 / 2;

     label1:
        if $i1 >= $i0 goto label4;

        i2 = $i3;

        $i3 = $i3 + $i1;

        $r2 = interfaceinvoke $r0.<org.apache.commons.math3.analysis.polynomials.PolynomialsUtils$RecurrenceCoefficientsGenerator: org.apache.commons.math3.fraction.BigFraction[] generate(int)>($i1);

        $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>($i3);

        r4 = (org.apache.commons.math3.fraction.BigFraction) $r3;

        $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i2);

        r5 = (org.apache.commons.math3.fraction.BigFraction) $r3;

        $r6 = $r2[0];

        $r6 = virtualinvoke r4.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction multiply(org.apache.commons.math3.fraction.BigFraction)>($r6);

        $r7 = $r2[2];

        r5 = virtualinvoke r5.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction multiply(org.apache.commons.math3.fraction.BigFraction)>($r7);

        r5 = virtualinvoke $r6.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction subtract(org.apache.commons.math3.fraction.BigFraction)>(r5);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r5);

        i4 = 1;

     label2:
        if i4 >= $i1 goto label3;

        $r6 = r4;

        $i5 = $i3 + i4;

        $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>($i5);

        r4 = (org.apache.commons.math3.fraction.BigFraction) $r3;

        $i5 = i2 + i4;

        $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>($i5);

        r5 = (org.apache.commons.math3.fraction.BigFraction) $r3;

        $r7 = $r2[0];

        $r7 = virtualinvoke r4.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction multiply(org.apache.commons.math3.fraction.BigFraction)>($r7);

        $r8 = $r2[1];

        $r6 = virtualinvoke $r6.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction multiply(org.apache.commons.math3.fraction.BigFraction)>($r8);

        $r6 = virtualinvoke $r7.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction add(org.apache.commons.math3.fraction.BigFraction)>($r6);

        $r7 = $r2[2];

        r5 = virtualinvoke r5.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction multiply(org.apache.commons.math3.fraction.BigFraction)>($r7);

        r5 = virtualinvoke $r6.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction subtract(org.apache.commons.math3.fraction.BigFraction)>(r5);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r5);

        i4 = i4 + 1;

        goto label2;

     label3:
        i2 = $i3 + $i1;

        $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i2);

        r5 = (org.apache.commons.math3.fraction.BigFraction) $r3;

        $r6 = $r2[0];

        $r6 = virtualinvoke r5.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction multiply(org.apache.commons.math3.fraction.BigFraction)>($r6);

        $r7 = $r2[1];

        r4 = virtualinvoke r4.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction multiply(org.apache.commons.math3.fraction.BigFraction)>($r7);

        r4 = virtualinvoke $r6.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction add(org.apache.commons.math3.fraction.BigFraction)>(r4);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r4);

        r4 = $r2[1];

        r4 = virtualinvoke r5.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction multiply(org.apache.commons.math3.fraction.BigFraction)>(r4);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r4);

        $i1 = $i1 + 1;

        goto label1;

     label4:
        return;
    }
    public static org.apache.commons.math3.analysis.polynomials.PolynomialFunction createChebyshevPolynomial(int)
    {
        int $i0;
        org.apache.commons.math3.analysis.polynomials.PolynomialsUtils$1 $r0;
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction $r1;
        java.util.List $r2;

        $i0 := @parameter0: int;

        $r2 = <org.apache.commons.math3.analysis.polynomials.PolynomialsUtils: java.util.List CHEBYSHEV_COEFFICIENTS>;

        $r0 = new org.apache.commons.math3.analysis.polynomials.PolynomialsUtils$1;

        specialinvoke $r0.<org.apache.commons.math3.analysis.polynomials.PolynomialsUtils$1: void <init>()>();

        $r1 = staticinvoke <org.apache.commons.math3.analysis.polynomials.PolynomialsUtils: org.apache.commons.math3.analysis.polynomials.PolynomialFunction buildPolynomial(int,java.util.List,org.apache.commons.math3.analysis.polynomials.PolynomialsUtils$RecurrenceCoefficientsGenerator)>($i0, $r2, $r0);

        return $r1;
    }
    public static org.apache.commons.math3.analysis.polynomials.PolynomialFunction createHermitePolynomial(int)
    {
        int $i0;
        org.apache.commons.math3.analysis.polynomials.PolynomialsUtils$2 $r0;
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction $r1;
        java.util.List $r2;

        $i0 := @parameter0: int;

        $r2 = <org.apache.commons.math3.analysis.polynomials.PolynomialsUtils: java.util.List HERMITE_COEFFICIENTS>;

        $r0 = new org.apache.commons.math3.analysis.polynomials.PolynomialsUtils$2;

        specialinvoke $r0.<org.apache.commons.math3.analysis.polynomials.PolynomialsUtils$2: void <init>()>();

        $r1 = staticinvoke <org.apache.commons.math3.analysis.polynomials.PolynomialsUtils: org.apache.commons.math3.analysis.polynomials.PolynomialFunction buildPolynomial(int,java.util.List,org.apache.commons.math3.analysis.polynomials.PolynomialsUtils$RecurrenceCoefficientsGenerator)>($i0, $r2, $r0);

        return $r1;
    }
    public static org.apache.commons.math3.analysis.polynomials.PolynomialFunction createJacobiPolynomial(int, int, int)
    {
        int $i0, $i1, $i2, $i3;
        org.apache.commons.math3.analysis.polynomials.PolynomialsUtils$JacobiKey r0;
        java.util.ArrayList r1;
        java.util.Map $r2;
        boolean $z0;
        org.apache.commons.math3.fraction.BigFraction $r3;
        java.lang.Object $r4;
        java.util.List $r5;
        org.apache.commons.math3.analysis.polynomials.PolynomialsUtils$5 $r6;
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction $r7;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        r0 = new org.apache.commons.math3.analysis.polynomials.PolynomialsUtils$JacobiKey;

        specialinvoke r0.<org.apache.commons.math3.analysis.polynomials.PolynomialsUtils$JacobiKey: void <init>(int,int)>($i1, $i2);

        $r2 = <org.apache.commons.math3.analysis.polynomials.PolynomialsUtils: java.util.Map JACOBI_COEFFICIENTS>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r0);

        if $z0 != 0 goto label1;

        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>()>();

        $r2 = <org.apache.commons.math3.analysis.polynomials.PolynomialsUtils: java.util.Map JACOBI_COEFFICIENTS>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r1);

        $r3 = <org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction ONE>;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r3);

        $r3 = new org.apache.commons.math3.fraction.BigFraction;

        $i3 = $i1 - $i2;

        specialinvoke $r3.<org.apache.commons.math3.fraction.BigFraction: void <init>(int,int)>($i3, 2);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r3);

        $r3 = new org.apache.commons.math3.fraction.BigFraction;

        $i3 = $i1 + 2;

        $i3 = $i3 + $i2;

        specialinvoke $r3.<org.apache.commons.math3.fraction.BigFraction: void <init>(int,int)>($i3, 2);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r3);

     label1:
        $r2 = <org.apache.commons.math3.analysis.polynomials.PolynomialsUtils: java.util.Map JACOBI_COEFFICIENTS>;

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        $r5 = (java.util.List) $r4;

        $r6 = new org.apache.commons.math3.analysis.polynomials.PolynomialsUtils$5;

        specialinvoke $r6.<org.apache.commons.math3.analysis.polynomials.PolynomialsUtils$5: void <init>(int,int)>($i1, $i2);

        $r7 = staticinvoke <org.apache.commons.math3.analysis.polynomials.PolynomialsUtils: org.apache.commons.math3.analysis.polynomials.PolynomialFunction buildPolynomial(int,java.util.List,org.apache.commons.math3.analysis.polynomials.PolynomialsUtils$RecurrenceCoefficientsGenerator)>($i0, $r5, $r6);

        return $r7;
    }
    public static org.apache.commons.math3.analysis.polynomials.PolynomialFunction createLaguerrePolynomial(int)
    {
        int $i0;
        org.apache.commons.math3.analysis.polynomials.PolynomialsUtils$3 $r0;
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction $r1;
        java.util.List $r2;

        $i0 := @parameter0: int;

        $r2 = <org.apache.commons.math3.analysis.polynomials.PolynomialsUtils: java.util.List LAGUERRE_COEFFICIENTS>;

        $r0 = new org.apache.commons.math3.analysis.polynomials.PolynomialsUtils$3;

        specialinvoke $r0.<org.apache.commons.math3.analysis.polynomials.PolynomialsUtils$3: void <init>()>();

        $r1 = staticinvoke <org.apache.commons.math3.analysis.polynomials.PolynomialsUtils: org.apache.commons.math3.analysis.polynomials.PolynomialFunction buildPolynomial(int,java.util.List,org.apache.commons.math3.analysis.polynomials.PolynomialsUtils$RecurrenceCoefficientsGenerator)>($i0, $r2, $r0);

        return $r1;
    }
    public static org.apache.commons.math3.analysis.polynomials.PolynomialFunction createLegendrePolynomial(int)
    {
        int $i0;
        org.apache.commons.math3.analysis.polynomials.PolynomialsUtils$4 $r0;
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction $r1;
        java.util.List $r2;

        $i0 := @parameter0: int;

        $r2 = <org.apache.commons.math3.analysis.polynomials.PolynomialsUtils: java.util.List LEGENDRE_COEFFICIENTS>;

        $r0 = new org.apache.commons.math3.analysis.polynomials.PolynomialsUtils$4;

        specialinvoke $r0.<org.apache.commons.math3.analysis.polynomials.PolynomialsUtils$4: void <init>()>();

        $r1 = staticinvoke <org.apache.commons.math3.analysis.polynomials.PolynomialsUtils: org.apache.commons.math3.analysis.polynomials.PolynomialFunction buildPolynomial(int,java.util.List,org.apache.commons.math3.analysis.polynomials.PolynomialsUtils$RecurrenceCoefficientsGenerator)>($i0, $r2, $r0);

        return $r1;
    }
    public static double[] shift(double[], double)
    {
        double[] $r0, r1;
        double $d0, $d1, $d2, $d3;
        int i0, i1, i2, $i4, $i5;
        int[] $r2;
        java.lang.Class $r3;
        java.lang.Object $r4;
        int[][] r5;
        long $l3;

        $r0 := @parameter0: double[];

        $d0 := @parameter1: double;

        i0 = lengthof $r0;

        r1 = newarray (double)[i0];

        $r2 = newarray (int)[2];

        $r2[0] = i0;

        $r2[1] = i0;

        $r3 = <java.lang.Integer: java.lang.Class TYPE>;

        $r4 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r3, $r2);

        r5 = (int[][]) $r4;

        i1 = 0;

     label01:
        if i1 >= i0 goto label04;

        i2 = 0;

     label02:
        if i2 > i1 goto label03;

        $r2 = r5[i1];

        $l3 = staticinvoke <org.apache.commons.math3.util.CombinatoricsUtils: long binomialCoefficient(int,int)>(i1, i2);

        $i4 = (int) $l3;

        $r2[i2] = $i4;

        i2 = i2 + 1;

        goto label02;

     label03:
        i1 = i1 + 1;

        goto label01;

     label04:
        i1 = 0;

     label05:
        if i1 >= i0 goto label06;

        $d1 = r1[0];

        $d2 = $r0[i1];

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,int)>($d0, i1);

        $d2 = $d2 * $d3;

        $d1 = $d1 + $d2;

        r1[0] = $d1;

        i1 = i1 + 1;

        goto label05;

     label06:
        i0 = i0 + -1;

        i1 = 0;

     label07:
        if i1 >= i0 goto label10;

        i2 = i1;

     label08:
        if i2 >= i0 goto label09;

        $i4 = i1 + 1;

        $d1 = r1[$i4];

        $i5 = i2 + 1;

        $r2 = r5[$i5];

        $i5 = i2 - i1;

        $i5 = $r2[$i5];

        $d2 = (double) $i5;

        $i5 = i2 + 1;

        $d3 = $r0[$i5];

        $d2 = $d2 * $d3;

        $i5 = i2 - i1;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,int)>($d0, $i5);

        $d2 = $d2 * $d3;

        $d1 = $d1 + $d2;

        r1[$i4] = $d1;

        i2 = i2 + 1;

        goto label08;

     label09:
        i1 = i1 + 1;

        goto label07;

     label10:
        return r1;
    }
