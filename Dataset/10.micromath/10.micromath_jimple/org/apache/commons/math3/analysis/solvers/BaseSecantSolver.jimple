org.apache.commons.math3.analysis.solvers.BaseSecantSolver extends org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver implements org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver
protected static final double DEFAULT_ABSOLUTE_ACCURACY
private org.apache.commons.math3.analysis.solvers.AllowedSolution allowed
private final org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method method
    protected void <init>(double, double, double, org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method)
    {
        org.apache.commons.math3.analysis.solvers.BaseSecantSolver r0;
        double $d0, $d1, $d2;
        org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method $r1;
        org.apache.commons.math3.analysis.solvers.AllowedSolution $r2;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BaseSecantSolver;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $r1 := @parameter3: org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method;

        specialinvoke r0.<org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver: void <init>(double,double,double)>($d0, $d1, $d2);

        $r2 = <org.apache.commons.math3.analysis.solvers.AllowedSolution: org.apache.commons.math3.analysis.solvers.AllowedSolution ANY_SIDE>;

        r0.<org.apache.commons.math3.analysis.solvers.BaseSecantSolver: org.apache.commons.math3.analysis.solvers.AllowedSolution allowed> = $r2;

        r0.<org.apache.commons.math3.analysis.solvers.BaseSecantSolver: org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method method> = $r1;

        return;
    }
    protected void <init>(double, double, org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method)
    {
        org.apache.commons.math3.analysis.solvers.BaseSecantSolver r0;
        double $d0, $d1;
        org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method $r1;
        org.apache.commons.math3.analysis.solvers.AllowedSolution $r2;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BaseSecantSolver;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $r1 := @parameter2: org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method;

        specialinvoke r0.<org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver: void <init>(double,double)>($d0, $d1);

        $r2 = <org.apache.commons.math3.analysis.solvers.AllowedSolution: org.apache.commons.math3.analysis.solvers.AllowedSolution ANY_SIDE>;

        r0.<org.apache.commons.math3.analysis.solvers.BaseSecantSolver: org.apache.commons.math3.analysis.solvers.AllowedSolution allowed> = $r2;

        r0.<org.apache.commons.math3.analysis.solvers.BaseSecantSolver: org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method method> = $r1;

        return;
    }
    protected void <init>(double, org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method)
    {
        org.apache.commons.math3.analysis.solvers.BaseSecantSolver r0;
        double $d0;
        org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method $r1;
        org.apache.commons.math3.analysis.solvers.AllowedSolution $r2;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BaseSecantSolver;

        $d0 := @parameter0: double;

        $r1 := @parameter1: org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method;

        specialinvoke r0.<org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver: void <init>(double)>($d0);

        $r2 = <org.apache.commons.math3.analysis.solvers.AllowedSolution: org.apache.commons.math3.analysis.solvers.AllowedSolution ANY_SIDE>;

        r0.<org.apache.commons.math3.analysis.solvers.BaseSecantSolver: org.apache.commons.math3.analysis.solvers.AllowedSolution allowed> = $r2;

        r0.<org.apache.commons.math3.analysis.solvers.BaseSecantSolver: org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method method> = $r1;

        return;
    }
    protected final double doSolve() throws org.apache.commons.math3.exception.ConvergenceException
    {
        org.apache.commons.math3.analysis.solvers.BaseSecantSolver r0;
        double d0, $d1, d2, $d3, d4, $d5, d6, d7, $d8, $d9, $d10;
        byte $b0;
        boolean z0;
        int[] $r1;
        org.apache.commons.math3.analysis.solvers.AllowedSolution $r2;
        int $i1;
        org.apache.commons.math3.exception.MathInternalError $r3;
        org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method $r4;
        org.apache.commons.math3.exception.ConvergenceException $r5;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BaseSecantSolver;

        $d1 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BaseSecantSolver: double getMin()>();

        d2 = $d1;

        $d3 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BaseSecantSolver: double getMax()>();

        d4 = $d3;

        $d5 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BaseSecantSolver: double computeObjectiveValue(double)>($d1);

        d6 = $d5;

        d0 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BaseSecantSolver: double computeObjectiveValue(double)>($d3);

        d7 = d0;

        $b0 = $d5 cmpl 0.0;

        if $b0 != 0 goto label01;

        return $d1;

     label01:
        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label02;

        return $d3;

     label02:
        virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BaseSecantSolver: void verifyBracketing(double,double)>($d1, $d3);

        $d1 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BaseSecantSolver: double getFunctionValueAccuracy()>();

        $d3 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BaseSecantSolver: double getAbsoluteAccuracy()>();

        $d5 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BaseSecantSolver: double getRelativeAccuracy()>();

        z0 = 0;

     label03:
        d0 = d4 - d2;

        d0 = d0 * d7;

        $d8 = d7 - d6;

        d0 = d0 / $d8;

        d0 = d4 - d0;

        $d8 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BaseSecantSolver: double computeObjectiveValue(double)>(d0);

        $b0 = $d8 cmpl 0.0;

        if $b0 != 0 goto label04;

        return d0;

     label04:
        $d9 = d7 * $d8;

        $b0 = $d9 cmpg 0.0;

        if $b0 >= 0 goto label08;

        d2 = d4;

        d6 = d7;

        if z0 != 0 goto label07;

        z0 = 1;

     label05:
        d4 = d0;

        d7 = $d8;

        $d9 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d8);

        $b0 = $d9 cmpg $d1;

        if $b0 > 0 goto label18;

        $r1 = <org.apache.commons.math3.analysis.solvers.BaseSecantSolver$1: int[] $SwitchMap$org$apache$commons$math3$analysis$solvers$AllowedSolution>;

        $r2 = r0.<org.apache.commons.math3.analysis.solvers.BaseSecantSolver: org.apache.commons.math3.analysis.solvers.AllowedSolution allowed>;

        $i1 = virtualinvoke $r2.<org.apache.commons.math3.analysis.solvers.AllowedSolution: int ordinal()>();

        $i1 = $r1[$i1];

        lookupswitch($i1)
        {
            case 1: goto label13;
            case 2: goto label14;
            case 3: goto label15;
            case 4: goto label16;
            case 5: goto label17;
            default: goto label06;
        };

     label06:
        $r3 = new org.apache.commons.math3.exception.MathInternalError;

        specialinvoke $r3.<org.apache.commons.math3.exception.MathInternalError: void <init>()>();

        throw $r3;

     label07:
        z0 = 0;

        goto label05;

     label08:
        $r1 = <org.apache.commons.math3.analysis.solvers.BaseSecantSolver$1: int[] $SwitchMap$org$apache$commons$math3$analysis$solvers$BaseSecantSolver$Method>;

        $r4 = r0.<org.apache.commons.math3.analysis.solvers.BaseSecantSolver: org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method method>;

        $i1 = virtualinvoke $r4.<org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method: int ordinal()>();

        $i1 = $r1[$i1];

        lookupswitch($i1)
        {
            case 1: goto label10;
            case 2: goto label11;
            case 3: goto label12;
            default: goto label09;
        };

     label09:
        $r3 = new org.apache.commons.math3.exception.MathInternalError;

        specialinvoke $r3.<org.apache.commons.math3.exception.MathInternalError: void <init>()>();

        throw $r3;

     label10:
        d6 = d6 * 0.5;

        goto label05;

     label11:
        d4 = d7 + $d8;

        d7 = d7 / d4;

        d6 = d6 * d7;

        goto label05;

     label12:
        $b0 = d0 cmpl d4;

        if $b0 != 0 goto label05;

        $r5 = new org.apache.commons.math3.exception.ConvergenceException;

        specialinvoke $r5.<org.apache.commons.math3.exception.ConvergenceException: void <init>()>();

        throw $r5;

     label13:
        return d0;

     label14:
        if z0 == 0 goto label18;

        return d0;

     label15:
        if z0 != 0 goto label18;

        return d0;

     label16:
        $b0 = $d8 cmpg 0.0;

        if $b0 > 0 goto label18;

        return d0;

     label17:
        $b0 = $d8 cmpl 0.0;

        if $b0 < 0 goto label18;

        return d0;

     label18:
        $d9 = d0 - d2;

        $d9 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d9);

        $d10 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d0);

        $d10 = $d10 * $d5;

        $d10 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>($d10, $d3);

        $b0 = $d9 cmpg $d10;

        if $b0 >= 0 goto label03;

        $r1 = <org.apache.commons.math3.analysis.solvers.BaseSecantSolver$1: int[] $SwitchMap$org$apache$commons$math3$analysis$solvers$AllowedSolution>;

        $r2 = r0.<org.apache.commons.math3.analysis.solvers.BaseSecantSolver: org.apache.commons.math3.analysis.solvers.AllowedSolution allowed>;

        $i1 = virtualinvoke $r2.<org.apache.commons.math3.analysis.solvers.AllowedSolution: int ordinal()>();

        $i1 = $r1[$i1];

        lookupswitch($i1)
        {
            case 1: goto label20;
            case 2: goto label21;
            case 3: goto label23;
            case 4: goto label25;
            case 5: goto label27;
            default: goto label19;
        };

     label19:
        $r3 = new org.apache.commons.math3.exception.MathInternalError;

        specialinvoke $r3.<org.apache.commons.math3.exception.MathInternalError: void <init>()>();

        throw $r3;

     label20:
        return d0;

     label21:
        if z0 == 0 goto label22;

        return d0;

     label22:
        return d2;

     label23:
        if z0 == 0 goto label24;

        return d2;

     label24:
        return d0;

     label25:
        $b0 = $d8 cmpg 0.0;

        if $b0 > 0 goto label26;

        return d0;

     label26:
        return d2;

     label27:
        $b0 = $d8 cmpl 0.0;

        if $b0 < 0 goto label28;

        return d0;

     label28:
        return d2;
    }
    public double solve(int, org.apache.commons.math3.analysis.UnivariateFunction, double, double, double)
    {
        org.apache.commons.math3.analysis.solvers.BaseSecantSolver r0;
        int $i0;
        org.apache.commons.math3.analysis.UnivariateFunction $r1;
        double $d0, $d1, $d2;
        org.apache.commons.math3.analysis.solvers.AllowedSolution $r2;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BaseSecantSolver;

        $i0 := @parameter0: int;

        $r1 := @parameter1: org.apache.commons.math3.analysis.UnivariateFunction;

        $d0 := @parameter2: double;

        $d1 := @parameter3: double;

        $d2 := @parameter4: double;

        $r2 = <org.apache.commons.math3.analysis.solvers.AllowedSolution: org.apache.commons.math3.analysis.solvers.AllowedSolution ANY_SIDE>;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BaseSecantSolver: double solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)>($i0, $r1, $d0, $d1, $d2, $r2);

        return $d0;
    }
    public double solve(int, org.apache.commons.math3.analysis.UnivariateFunction, double, double, double, org.apache.commons.math3.analysis.solvers.AllowedSolution)
    {
        org.apache.commons.math3.analysis.solvers.BaseSecantSolver r0;
        int $i0;
        org.apache.commons.math3.analysis.UnivariateFunction $r1;
        double $d0, $d1, $d2;
        org.apache.commons.math3.analysis.solvers.AllowedSolution $r2;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BaseSecantSolver;

        $i0 := @parameter0: int;

        $r1 := @parameter1: org.apache.commons.math3.analysis.UnivariateFunction;

        $d0 := @parameter2: double;

        $d1 := @parameter3: double;

        $d2 := @parameter4: double;

        $r2 := @parameter5: org.apache.commons.math3.analysis.solvers.AllowedSolution;

        r0.<org.apache.commons.math3.analysis.solvers.BaseSecantSolver: org.apache.commons.math3.analysis.solvers.AllowedSolution allowed> = $r2;

        $d0 = specialinvoke r0.<org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver: double solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)>($i0, $r1, $d0, $d1, $d2);

        return $d0;
    }
    public double solve(int, org.apache.commons.math3.analysis.UnivariateFunction, double, double, org.apache.commons.math3.analysis.solvers.AllowedSolution)
    {
        org.apache.commons.math3.analysis.solvers.BaseSecantSolver r0;
        int $i0;
        org.apache.commons.math3.analysis.UnivariateFunction $r1;
        double $d0, $d1, $d2;
        org.apache.commons.math3.analysis.solvers.AllowedSolution $r2;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BaseSecantSolver;

        $i0 := @parameter0: int;

        $r1 := @parameter1: org.apache.commons.math3.analysis.UnivariateFunction;

        $d0 := @parameter2: double;

        $d1 := @parameter3: double;

        $r2 := @parameter4: org.apache.commons.math3.analysis.solvers.AllowedSolution;

        $d2 = $d1 - $d0;

        $d2 = 0.5 * $d2;

        $d2 = $d0 + $d2;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BaseSecantSolver: double solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)>($i0, $r1, $d0, $d1, $d2, $r2);

        return $d0;
    }
