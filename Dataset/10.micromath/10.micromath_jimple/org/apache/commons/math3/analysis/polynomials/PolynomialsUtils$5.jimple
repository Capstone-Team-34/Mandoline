org.apache.commons.math3.analysis.polynomials.PolynomialsUtils$5 extends java.lang.Object implements org.apache.commons.math3.analysis.polynomials.PolynomialsUtils$RecurrenceCoefficientsGenerator
final int val$v
final int val$w
    void <init>(int, int)
    {
        org.apache.commons.math3.analysis.polynomials.PolynomialsUtils$5 r0;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.analysis.polynomials.PolynomialsUtils$5;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        r0.<org.apache.commons.math3.analysis.polynomials.PolynomialsUtils$5: int val$v> = $i0;

        r0.<org.apache.commons.math3.analysis.polynomials.PolynomialsUtils$5: int val$w> = $i1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public org.apache.commons.math3.fraction.BigFraction[] generate(int)
    {
        org.apache.commons.math3.analysis.polynomials.PolynomialsUtils$5 r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7;
        org.apache.commons.math3.fraction.BigFraction[] $r1;
        org.apache.commons.math3.fraction.BigFraction $r2;

        r0 := @this: org.apache.commons.math3.analysis.polynomials.PolynomialsUtils$5;

        i1 := @parameter0: int;

        $i5 = i1 + 1;

        i1 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialsUtils$5: int val$v>;

        i1 = i1 + $i5;

        i0 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialsUtils$5: int val$w>;

        i0 = i1 + i0;

        i1 = i0 + $i5;

        i2 = i1 + -1;

        i3 = i1 + -2;

        $i6 = $i5 * 2;

        i0 = $i6 * i0;

        i0 = i0 * i3;

        $r1 = newarray (org.apache.commons.math3.fraction.BigFraction)[3];

        $r2 = new org.apache.commons.math3.fraction.BigFraction;

        $i6 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialsUtils$5: int val$v>;

        $i4 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialsUtils$5: int val$v>;

        $i6 = $i6 * $i4;

        $i7 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialsUtils$5: int val$w>;

        $i4 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialsUtils$5: int val$w>;

        $i4 = $i7 * $i4;

        $i6 = $i6 - $i4;

        $i6 = $i6 * i2;

        specialinvoke $r2.<org.apache.commons.math3.fraction.BigFraction: void <init>(int,int)>($i6, i0);

        $r1[0] = $r2;

        $r2 = new org.apache.commons.math3.fraction.BigFraction;

        i2 = i2 * i1;

        i3 = i2 * i3;

        specialinvoke $r2.<org.apache.commons.math3.fraction.BigFraction: void <init>(int,int)>(i3, i0);

        $r1[1] = $r2;

        $r2 = new org.apache.commons.math3.fraction.BigFraction;

        i3 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialsUtils$5: int val$v>;

        i3 = i3 + $i5;

        i3 = i3 + -1;

        i3 = i3 * 2;

        i2 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialsUtils$5: int val$w>;

        $i5 = i2 + $i5;

        $i5 = $i5 + -1;

        $i5 = i3 * $i5;

        i1 = $i5 * i1;

        specialinvoke $r2.<org.apache.commons.math3.fraction.BigFraction: void <init>(int,int)>(i1, i0);

        $r1[2] = $r2;

        return $r1;
    }
