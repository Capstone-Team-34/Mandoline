org.apache.commons.math3.analysis.interpolation.BicubicInterpolator extends java.lang.Object implements org.apache.commons.math3.analysis.interpolation.BivariateGridInterpolator
    public void <init>()
    {
        org.apache.commons.math3.analysis.interpolation.BicubicInterpolator r0;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.BicubicInterpolator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public volatile org.apache.commons.math3.analysis.BivariateFunction interpolate(double[], double[], double[][]) throws org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NonMonotonicSequenceException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.analysis.interpolation.BicubicInterpolator r0;
        double[] $r1, $r2;
        double[][] $r3;
        org.apache.commons.math3.analysis.interpolation.BicubicInterpolatingFunction $r4;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.BicubicInterpolator;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[];

        $r3 := @parameter2: double[][];

        $r4 = virtualinvoke r0.<org.apache.commons.math3.analysis.interpolation.BicubicInterpolator: org.apache.commons.math3.analysis.interpolation.BicubicInterpolatingFunction interpolate(double[],double[],double[][])>($r1, $r2, $r3);

        return $r4;
    }
    public org.apache.commons.math3.analysis.interpolation.BicubicInterpolatingFunction interpolate(double[], double[], double[][]) throws org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NonMonotonicSequenceException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.analysis.interpolation.BicubicInterpolator r0;
        double[] $r1, $r2, $r12, $r13;
        double[][] $r3, r9, r10, r11;
        double d0, d1, d2, $d3;
        int i0, i1, i2, i3, $i4, $i5, i6, i7;
        org.apache.commons.math3.exception.NoDataException $r4;
        org.apache.commons.math3.exception.DimensionMismatchException $r5;
        int[] $r6;
        java.lang.Class $r7;
        java.lang.Object $r8;
        org.apache.commons.math3.analysis.interpolation.BicubicInterpolator$1 $r14;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.BicubicInterpolator;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[];

        $r3 := @parameter2: double[][];

        $i4 = lengthof $r1;

        if $i4 == 0 goto label1;

        $i4 = lengthof $r2;

        if $i4 == 0 goto label1;

        $i4 = lengthof $r3;

        if $i4 != 0 goto label2;

     label1:
        $r4 = new org.apache.commons.math3.exception.NoDataException;

        specialinvoke $r4.<org.apache.commons.math3.exception.NoDataException: void <init>()>();

        throw $r4;

     label2:
        $i4 = lengthof $r1;

        $i5 = lengthof $r3;

        if $i4 == $i5 goto label3;

        $r5 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i4 = lengthof $r1;

        $i5 = lengthof $r3;

        specialinvoke $r5.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i4, $i5);

        throw $r5;

     label3:
        staticinvoke <org.apache.commons.math3.util.MathArrays: void checkOrder(double[])>($r1);

        staticinvoke <org.apache.commons.math3.util.MathArrays: void checkOrder(double[])>($r2);

        $i4 = lengthof $r1;

        $i5 = lengthof $r2;

        $r6 = newarray (int)[2];

        $r6[0] = $i4;

        $r6[1] = $i5;

        $r7 = <java.lang.Double: java.lang.Class TYPE>;

        $r8 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r7, $r6);

        r9 = (double[][]) $r8;

        $r6 = newarray (int)[2];

        $r6[0] = $i4;

        $r6[1] = $i5;

        $r7 = <java.lang.Double: java.lang.Class TYPE>;

        $r8 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r7, $r6);

        r10 = (double[][]) $r8;

        $r6 = newarray (int)[2];

        $r6[0] = $i4;

        $r6[1] = $i5;

        $r7 = <java.lang.Double: java.lang.Class TYPE>;

        $r8 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r7, $r6);

        r11 = (double[][]) $r8;

        i6 = 1;

     label4:
        i0 = $i4 + -1;

        if i6 >= i0 goto label7;

        i0 = i6 + 1;

        i2 = i6 + -1;

        d0 = $r1[i0];

        d1 = $r1[i2];

        d0 = d0 - d1;

        i7 = 1;

     label5:
        i1 = $i5 + -1;

        if i7 >= i1 goto label6;

        i1 = i7 + 1;

        i3 = i7 + -1;

        d1 = $r2[i1];

        d2 = $r2[i3];

        d1 = d1 - d2;

        $r12 = r9[i6];

        $r13 = $r3[i0];

        d2 = $r13[i7];

        $r13 = $r3[i2];

        $d3 = $r13[i7];

        d2 = d2 - $d3;

        d2 = d2 / d0;

        $r12[i7] = d2;

        $r12 = r10[i6];

        $r13 = $r3[i6];

        d2 = $r13[i1];

        $r13 = $r3[i6];

        $d3 = $r13[i3];

        d2 = d2 - $d3;

        d2 = d2 / d1;

        $r12[i7] = d2;

        d1 = d0 * d1;

        $r12 = r11[i6];

        $r13 = $r3[i0];

        d2 = $r13[i1];

        $r13 = $r3[i0];

        $d3 = $r13[i3];

        d2 = d2 - $d3;

        $r13 = $r3[i2];

        $d3 = $r13[i1];

        d2 = d2 - $d3;

        $r13 = $r3[i2];

        $d3 = $r13[i3];

        d2 = d2 + $d3;

        d1 = d2 / d1;

        $r12[i7] = d1;

        i7 = i7 + 1;

        goto label5;

     label6:
        i6 = i6 + 1;

        goto label4;

     label7:
        $r14 = new org.apache.commons.math3.analysis.interpolation.BicubicInterpolator$1;

        specialinvoke $r14.<org.apache.commons.math3.analysis.interpolation.BicubicInterpolator$1: void <init>(org.apache.commons.math3.analysis.interpolation.BicubicInterpolator,double[],double[],double[][],double[][],double[][],double[][],double[],double[])>(r0, $r1, $r2, $r3, r9, r10, r11, $r1, $r2);

        return $r14;
    }
