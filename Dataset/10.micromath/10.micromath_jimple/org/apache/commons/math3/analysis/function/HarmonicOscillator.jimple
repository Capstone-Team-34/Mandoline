org.apache.commons.math3.analysis.function.HarmonicOscillator extends java.lang.Object implements org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction org.apache.commons.math3.analysis.DifferentiableUnivariateFunction
private final double amplitude
private final double omega
private final double phase
    public void <init>(double, double, double)
    {
        org.apache.commons.math3.analysis.function.HarmonicOscillator r0;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.analysis.function.HarmonicOscillator;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.analysis.function.HarmonicOscillator: double amplitude> = $d0;

        r0.<org.apache.commons.math3.analysis.function.HarmonicOscillator: double omega> = $d1;

        r0.<org.apache.commons.math3.analysis.function.HarmonicOscillator: double phase> = $d2;

        return;
    }
    static double access$000(double, double)
    {
        double $d0, $d1;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d0 = staticinvoke <org.apache.commons.math3.analysis.function.HarmonicOscillator: double value(double,double)>($d0, $d1);

        return $d0;
    }
    private static double value(double, double)
    {
        double $d0, $d1;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double cos(double)>($d0);

        $d0 = $d0 * $d1;

        return $d0;
    }
    public org.apache.commons.math3.analysis.UnivariateFunction derivative()
    {
        org.apache.commons.math3.analysis.function.HarmonicOscillator r0;
        org.apache.commons.math3.analysis.DifferentiableUnivariateFunction $r1;
        org.apache.commons.math3.analysis.UnivariateFunction $r2;

        r0 := @this: org.apache.commons.math3.analysis.function.HarmonicOscillator;

        $r1 = staticinvoke <org.apache.commons.math3.analysis.FunctionUtils: org.apache.commons.math3.analysis.DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction)>(r0);

        $r2 = interfaceinvoke $r1.<org.apache.commons.math3.analysis.DifferentiableUnivariateFunction: org.apache.commons.math3.analysis.UnivariateFunction derivative()>();

        return $r2;
    }
    public double value(double)
    {
        org.apache.commons.math3.analysis.function.HarmonicOscillator r0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.analysis.function.HarmonicOscillator;

        $d0 := @parameter0: double;

        $d1 = r0.<org.apache.commons.math3.analysis.function.HarmonicOscillator: double omega>;

        $d0 = $d1 * $d0;

        $d1 = r0.<org.apache.commons.math3.analysis.function.HarmonicOscillator: double phase>;

        $d0 = $d0 + $d1;

        $d1 = r0.<org.apache.commons.math3.analysis.function.HarmonicOscillator: double amplitude>;

        $d0 = staticinvoke <org.apache.commons.math3.analysis.function.HarmonicOscillator: double value(double,double)>($d0, $d1);

        return $d0;
    }
    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.analysis.function.HarmonicOscillator r0;
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure $r1;
        double d0, $d1, $d2;
        double[] r2;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.analysis.function.HarmonicOscillator;

        $r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        d0 = virtualinvoke $r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getValue()>();

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getOrder()>();

        $i0 = $i0 + 1;

        r2 = newarray (double)[$i0];

        $d1 = r0.<org.apache.commons.math3.analysis.function.HarmonicOscillator: double omega>;

        d0 = $d1 * d0;

        $d1 = r0.<org.apache.commons.math3.analysis.function.HarmonicOscillator: double phase>;

        d0 = d0 + $d1;

        $d1 = r0.<org.apache.commons.math3.analysis.function.HarmonicOscillator: double amplitude>;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double cos(double)>(d0);

        $d1 = $d1 * $d2;

        r2[0] = $d1;

        $i0 = lengthof r2;

        if $i0 <= 1 goto label2;

        $d1 = r0.<org.apache.commons.math3.analysis.function.HarmonicOscillator: double amplitude>;

        $d1 = neg $d1;

        $d2 = r0.<org.apache.commons.math3.analysis.function.HarmonicOscillator: double omega>;

        $d1 = $d1 * $d2;

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sin(double)>(d0);

        d0 = $d1 * d0;

        r2[1] = d0;

        d0 = r0.<org.apache.commons.math3.analysis.function.HarmonicOscillator: double omega>;

        d0 = neg d0;

        $d1 = r0.<org.apache.commons.math3.analysis.function.HarmonicOscillator: double omega>;

        d0 = d0 * $d1;

        $i0 = 2;

     label1:
        $i1 = lengthof r2;

        if $i0 >= $i1 goto label2;

        $i1 = $i0 + -2;

        $d1 = r2[$i1];

        $d1 = $d1 * d0;

        r2[$i0] = $d1;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $r1 = virtualinvoke $r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure compose(double[])>(r2);

        return $r1;
    }
