org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere extends java.lang.Object
private final double background
private final double darkThreshold
private final int dimension
private final double maxDarkFraction
private final java.util.List microsphere
private final java.util.List microsphereData
private final int size
    protected void <init>(int, int, double, double, double)
    {
        org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere r0;
        int $i0, $i1;
        double $d0, $d1, $d2;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r1;
        java.lang.Integer $r2, $r5;
        byte $b2;
        org.apache.commons.math3.exception.OutOfRangeException $r3;
        java.lang.Double $r4;
        org.apache.commons.math3.exception.NotPositiveException $r6;
        java.util.ArrayList $r7;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $d0 := @parameter2: double;

        $d1 := @parameter3: double;

        $d2 := @parameter4: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if $i0 > 0 goto label1;

        $r1 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r1.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(java.lang.Number)>($r2);

        throw $r1;

     label1:
        if $i1 > 0 goto label2;

        $r1 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        specialinvoke $r1.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(java.lang.Number)>($r2);

        throw $r1;

     label2:
        $b2 = $d0 cmpg 0.0;

        if $b2 < 0 goto label3;

        $b2 = $d0 cmpl 1.0;

        if $b2 <= 0 goto label4;

     label3:
        $r3 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke $r3.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r4, $r2, $r5);

        throw $r3;

     label4:
        $b2 = $d1 cmpg 0.0;

        if $b2 >= 0 goto label5;

        $r6 = new org.apache.commons.math3.exception.NotPositiveException;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        specialinvoke $r6.<org.apache.commons.math3.exception.NotPositiveException: void <init>(java.lang.Number)>($r4);

        throw $r6;

     label5:
        r0.<org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere: int dimension> = $i0;

        r0.<org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere: int size> = $i1;

        r0.<org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere: double maxDarkFraction> = $d0;

        r0.<org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere: double darkThreshold> = $d1;

        r0.<org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere: double background> = $d2;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>(int)>($i1);

        r0.<org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere: java.util.List microsphere> = $r7;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>(int)>($i1);

        r0.<org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere: java.util.List microsphereData> = $r7;

        return;
    }
    public void <init>(int, int, double, double, double, org.apache.commons.math3.random.UnitSphereRandomVectorGenerator)
    {
        org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere r0;
        int $i0, $i1;
        double $d0, $d1, $d2;
        org.apache.commons.math3.random.UnitSphereRandomVectorGenerator $r1;
        double[] $r2;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $d0 := @parameter2: double;

        $d1 := @parameter3: double;

        $d2 := @parameter4: double;

        $r1 := @parameter5: org.apache.commons.math3.random.UnitSphereRandomVectorGenerator;

        specialinvoke r0.<org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere: void <init>(int,int,double,double,double)>($i0, $i1, $d0, $d1, $d2);

        $i0 = 0;

     label1:
        if $i0 >= $i1 goto label2;

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.random.UnitSphereRandomVectorGenerator: double[] nextVector()>();

        virtualinvoke r0.<org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere: void add(double[],boolean)>($r2, 0);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }
    protected void <init>(org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere)
    {
        org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere r0, $r1;
        int $i0;
        double $d0, $d1;
        java.util.List $r2;
        java.util.ArrayList $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere$FacetData r6, $r7;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere;

        $r1 := @parameter0: org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = $r1.<org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere: int dimension>;

        r0.<org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere: int dimension> = $i0;

        $i0 = $r1.<org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere: int size>;

        r0.<org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere: int size> = $i0;

        $d0 = $r1.<org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere: double maxDarkFraction>;

        r0.<org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere: double maxDarkFraction> = $d0;

        $d0 = $r1.<org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere: double darkThreshold>;

        r0.<org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere: double darkThreshold> = $d0;

        $d0 = $r1.<org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere: double background>;

        r0.<org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere: double background> = $d0;

        $r2 = $r1.<org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere: java.util.List microsphere>;

        r0.<org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere: java.util.List microsphere> = $r2;

        $r3 = new java.util.ArrayList;

        $i0 = r0.<org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere: int size>;

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>($i0);

        r0.<org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere: java.util.List microsphereData> = $r3;

        $r2 = $r1.<org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere: java.util.List microsphereData>;

        $r4 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere$FacetData) $r5;

        $r2 = r0.<org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere: java.util.List microsphereData>;

        $r7 = new org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere$FacetData;

        $d0 = virtualinvoke r6.<org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere$FacetData: double illumination()>();

        $d1 = virtualinvoke r6.<org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere$FacetData: double sample()>();

        specialinvoke $r7.<org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere$FacetData: void <init>(double,double)>($d0, $d1);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label1;

     label2:
        return;
    }
    private void clear()
    {
        org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere r0;
        org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere$FacetData $r1;
        int i0, $i1;
        java.util.List $r2;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere;

        i0 = 0;

     label1:
        $i1 = r0.<org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere: int size>;

        if i0 >= $i1 goto label2;

        $r2 = r0.<org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere: java.util.List microsphereData>;

        $r1 = new org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere$FacetData;

        specialinvoke $r1.<org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere$FacetData: void <init>(double,double)>(0.0, 0.0);

        interfaceinvoke $r2.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i0, $r1);

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }
    private void illuminate(double[], double, double)
    {
        org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere r0;
        double[] $r1, $r6;
        double $d0, $d1, d2, $d3;
        org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere$FacetData $r2;
        int i0, $i1;
        java.util.List $r3;
        java.lang.Object $r4;
        org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere$Facet $r5;
        byte $b2;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere;

        $r1 := @parameter0: double[];

        $d0 := @parameter1: double;

        $d1 := @parameter2: double;

        i0 = 0;

     label1:
        $i1 = r0.<org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere: int size>;

        if i0 >= $i1 goto label3;

        $r3 = r0.<org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere: java.util.List microsphere>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i0);

        $r5 = (org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere$Facet) $r4;

        $r6 = virtualinvoke $r5.<org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere$Facet: double[] getNormal()>();

        d2 = staticinvoke <org.apache.commons.math3.util.MathArrays: double cosAngle(double[],double[])>($r6, $r1);

        $b2 = d2 cmpl 0.0;

        if $b2 <= 0 goto label2;

        d2 = d2 * $d1;

        $d3 = r0.<org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere: double darkThreshold>;

        $b2 = d2 cmpl $d3;

        if $b2 <= 0 goto label2;

        $r3 = r0.<org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere: java.util.List microsphereData>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i0);

        $r2 = (org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere$FacetData) $r4;

        $d3 = virtualinvoke $r2.<org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere$FacetData: double illumination()>();

        $b2 = d2 cmpl $d3;

        if $b2 <= 0 goto label2;

        $r3 = r0.<org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere: java.util.List microsphereData>;

        $r2 = new org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere$FacetData;

        specialinvoke $r2.<org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere$FacetData: void <init>(double,double)>(d2, $d0);

        interfaceinvoke $r3.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i0, $r2);

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return;
    }
    private double interpolate()
    {
        org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere r0;
        double d0, d1, d2, $d3;
        int i0;
        java.util.List $r1;
        java.util.Iterator $r2;
        boolean $z0;
        java.lang.Object $r3;
        org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere$FacetData r4;
        byte $b1;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere;

        i0 = 0;

        d1 = 0.0;

        d2 = 0.0;

        $r1 = r0.<org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere: java.util.List microsphereData>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere$FacetData) $r3;

        d0 = virtualinvoke r4.<org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere$FacetData: double illumination()>();

        $b1 = d0 cmpl 0.0;

        if $b1 == 0 goto label2;

        $d3 = virtualinvoke r4.<org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere$FacetData: double sample()>();

        $d3 = $d3 * d0;

        d1 = d1 + $d3;

        d2 = d2 + d0;

        goto label1;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        d0 = (double) i0;

        i0 = r0.<org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere: int size>;

        $d3 = (double) i0;

        d0 = d0 / $d3;

        $d3 = r0.<org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere: double maxDarkFraction>;

        $b1 = d0 cmpg $d3;

        if $b1 > 0 goto label4;

        d1 = d1 / d2;

        return d1;

     label4:
        d1 = r0.<org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere: double background>;

        return d1;
    }
    protected void add(double[], boolean)
    {
        org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere r0;
        double[] $r1;
        boolean $z0;
        java.util.List $r2;
        int $i0, $i1;
        org.apache.commons.math3.exception.MaxCountExceededException $r3;
        java.lang.Integer $r4;
        org.apache.commons.math3.exception.DimensionMismatchException $r5;
        org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere$Facet $r6;
        java.lang.Object $r7;
        org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere$FacetData $r8;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere;

        $r1 := @parameter0: double[];

        $z0 := @parameter1: boolean;

        $r2 = r0.<org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere: java.util.List microsphere>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i1 = r0.<org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere: int size>;

        if $i0 < $i1 goto label1;

        $r3 = new org.apache.commons.math3.exception.MaxCountExceededException;

        $i0 = r0.<org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere: int size>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r3.<org.apache.commons.math3.exception.MaxCountExceededException: void <init>(java.lang.Number)>($r4);

        throw $r3;

     label1:
        $i0 = lengthof $r1;

        $i1 = r0.<org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere: int dimension>;

        if $i0 <= $i1 goto label2;

        $r5 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i0 = lengthof $r1;

        $i1 = r0.<org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere: int dimension>;

        specialinvoke $r5.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i0, $i1);

        throw $r5;

     label2:
        $r2 = r0.<org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere: java.util.List microsphere>;

        $r6 = new org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere$Facet;

        if $z0 == 0 goto label4;

        $r7 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r1 = (double[]) $r7;

     label3:
        specialinvoke $r6.<org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere$Facet: void <init>(double[])>($r1);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r6);

        $r2 = r0.<org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere: java.util.List microsphereData>;

        $r8 = new org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere$FacetData;

        specialinvoke $r8.<org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere$FacetData: void <init>(double,double)>(0.0, 0.0);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r8);

        return;

     label4:
        goto label3;
    }
    public org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere copy()
    {
        org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere r0, $r1;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere;

        $r1 = new org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere;

        specialinvoke $r1.<org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere: void <init>(org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere)>(r0);

        return $r1;
    }
    public int getDimension()
    {
        org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere r0;
        int i0;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere;

        i0 = r0.<org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere: int dimension>;

        return i0;
    }
    public int getSize()
    {
        org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere r0;
        int i0;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere;

        i0 = r0.<org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere: int size>;

        return i0;
    }
    public double value(double[], double[][], double[], double, double)
    {
        org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere r0;
        double[] $r1, $r3, $r6;
        double[][] $r2;
        double $d0, $d1, $d2, $d3;
        int i0, i2;
        byte $b1;
        org.apache.commons.math3.exception.NotPositiveException $r4;
        java.lang.Double $r5;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[][];

        $r3 := @parameter2: double[];

        $d0 := @parameter3: double;

        $d1 := @parameter4: double;

        $b1 = $d0 cmpg 0.0;

        if $b1 >= 0 goto label1;

        $r4 = new org.apache.commons.math3.exception.NotPositiveException;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        specialinvoke $r4.<org.apache.commons.math3.exception.NotPositiveException: void <init>(java.lang.Number)>($r5);

        throw $r4;

     label1:
        specialinvoke r0.<org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere: void clear()>();

        i0 = lengthof $r2;

        i2 = 0;

     label2:
        if i2 >= i0 goto label4;

        $r6 = $r2[i2];

        $r6 = staticinvoke <org.apache.commons.math3.util.MathArrays: double[] ebeSubtract(double[],double[])>($r6, $r1);

        $d2 = staticinvoke <org.apache.commons.math3.util.MathArrays: double safeNorm(double[])>($r6);

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d2);

        $b1 = $d3 cmpg $d1;

        if $b1 >= 0 goto label3;

        $d0 = $r3[i2];

        return $d0;

     label3:
        $d3 = neg $d0;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,double)>($d2, $d3);

        $d3 = $r3[i2];

        specialinvoke r0.<org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere: void illuminate(double[],double,double)>($r6, $d3, $d2);

        i2 = i2 + 1;

        goto label2;

     label4:
        $d0 = specialinvoke r0.<org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere: double interpolate()>();

        return $d0;
    }
