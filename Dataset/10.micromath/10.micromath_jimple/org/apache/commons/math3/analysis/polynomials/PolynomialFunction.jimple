org.apache.commons.math3.analysis.polynomials.PolynomialFunction extends java.lang.Object implements org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction org.apache.commons.math3.analysis.DifferentiableUnivariateFunction java.io.Serializable
private static final long serialVersionUID
private final double[] coefficients
    public void <init>(double[]) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NoDataException
    {
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction r0;
        double[] $r1, $r4;
        int i0, $i1;
        org.apache.commons.math3.exception.NoDataException $r2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3;
        double $d0;
        byte $b2;

        r0 := @this: org.apache.commons.math3.analysis.polynomials.PolynomialFunction;

        $r1 := @parameter0: double[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>($r1);

        i0 = lengthof $r1;

        if i0 != 0 goto label1;

        $r2 = new org.apache.commons.math3.exception.NoDataException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY>;

        specialinvoke $r2.<org.apache.commons.math3.exception.NoDataException: void <init>(org.apache.commons.math3.exception.util.Localizable)>($r3);

        throw $r2;

     label1:
        if i0 <= 1 goto label2;

        $i1 = i0 + -1;

        $d0 = $r1[$i1];

        $b2 = $d0 cmpl 0.0;

        if $b2 != 0 goto label2;

        i0 = i0 + -1;

        goto label1;

     label2:
        $r4 = newarray (double)[i0];

        r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: double[] coefficients> = $r4;

        $r4 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r4, 0, i0);

        return;
    }
    protected static double[] differentiate(double[]) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NoDataException
    {
        double[] $r0, r2;
        int i0, $i1;
        double $d0, $d1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r1;
        org.apache.commons.math3.exception.NoDataException $r3;

        $r0 := @parameter0: double[];

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>($r0);

        i0 = lengthof $r0;

        if i0 != 0 goto label1;

        $r3 = new org.apache.commons.math3.exception.NoDataException;

        $r1 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY>;

        specialinvoke $r3.<org.apache.commons.math3.exception.NoDataException: void <init>(org.apache.commons.math3.exception.util.Localizable)>($r1);

        throw $r3;

     label1:
        if i0 != 1 goto label2;

        $r0 = newarray (double)[1];

        $d0 = (double) 0L;

        $r0[0] = $d0;

        return $r0;

     label2:
        $i1 = i0 + -1;

        r2 = newarray (double)[$i1];

        i0 = i0 + -1;

     label3:
        if i0 <= 0 goto label4;

        $i1 = i0 + -1;

        $d1 = (double) i0;

        $d0 = $r0[i0];

        $d0 = $d1 * $d0;

        r2[$i1] = $d0;

        i0 = i0 + -1;

        goto label3;

     label4:
        return r2;
    }
    protected static double evaluate(double[], double) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NoDataException
    {
        double[] $r0;
        double $d0, $d1, $d2;
        int i0, $i1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r1;
        org.apache.commons.math3.exception.NoDataException $r2;

        $r0 := @parameter0: double[];

        $d0 := @parameter1: double;

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>($r0);

        i0 = lengthof $r0;

        if i0 != 0 goto label1;

        $r2 = new org.apache.commons.math3.exception.NoDataException;

        $r1 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY>;

        specialinvoke $r2.<org.apache.commons.math3.exception.NoDataException: void <init>(org.apache.commons.math3.exception.util.Localizable)>($r1);

        throw $r2;

     label1:
        $i1 = i0 + -1;

        $d1 = $r0[$i1];

        i0 = i0 + -2;

     label2:
        if i0 < 0 goto label3;

        $d2 = $d0 * $d1;

        $d1 = $r0[i0];

        $d1 = $d2 + $d1;

        i0 = i0 + -1;

        goto label2;

     label3:
        return $d1;
    }
    private static java.lang.String toString(double)
    {
        double $d0;
        java.lang.String $r0;
        boolean $z0;
        int $i0;

        $d0 := @parameter0: double;

        $r0 = staticinvoke <java.lang.Double: java.lang.String toString(double)>($d0);

        $z0 = virtualinvoke $r0.<java.lang.String: boolean endsWith(java.lang.String)>(".0");

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        $i0 = $i0 + -2;

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

     label1:
        return $r0;
    }
    public org.apache.commons.math3.analysis.polynomials.PolynomialFunction add(org.apache.commons.math3.analysis.polynomials.PolynomialFunction)
    {
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction r0, $r1;
        double[] r2, $r3;
        int $i0, $i1, $i2, $i3;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.analysis.polynomials.PolynomialFunction;

        $r1 := @parameter0: org.apache.commons.math3.analysis.polynomials.PolynomialFunction;

        r2 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $i0 = lengthof r2;

        r2 = $r1.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $i1 = lengthof r2;

        $i0 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i0, $i1);

        r2 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $i1 = lengthof r2;

        r2 = $r1.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $i2 = lengthof r2;

        $i1 = staticinvoke <org.apache.commons.math3.util.FastMath: int max(int,int)>($i1, $i2);

        r2 = newarray (double)[$i1];

        $i2 = 0;

     label1:
        if $i2 >= $i0 goto label2;

        $r3 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $d0 = $r3[$i2];

        $r3 = $r1.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $d1 = $r3[$i2];

        $d0 = $d0 + $d1;

        r2[$i2] = $d0;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        $r3 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $i2 = lengthof $r3;

        $r3 = $r1.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $i3 = lengthof $r3;

        if $i2 >= $i3 goto label4;

        $r3 = $r1.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: double[] coefficients>;

     label3:
        $i1 = $i1 - $i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, $i0, r2, $i0, $i1);

        r0 = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction;

        specialinvoke r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: void <init>(double[])>(r2);

        return r0;

     label4:
        $r3 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        goto label3;
    }
    public int degree()
    {
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction r0;
        double[] $r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.analysis.polynomials.PolynomialFunction;

        $r1 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $i0 = lengthof $r1;

        $i0 = $i0 + -1;

        return $i0;
    }
    public org.apache.commons.math3.analysis.UnivariateFunction derivative()
    {
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction r0;

        r0 := @this: org.apache.commons.math3.analysis.polynomials.PolynomialFunction;

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: org.apache.commons.math3.analysis.polynomials.PolynomialFunction polynomialDerivative()>();

        return r0;
    }
    public boolean equals(java.lang.Object)
    {
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction r0, r3;
        java.lang.Object $r1;
        double[] $r2, $r4;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.analysis.polynomials.PolynomialFunction;

        $r1 := @parameter0: java.lang.Object;

        if r0 != $r1 goto label1;

        return 1;

     label1:
        $z0 = $r1 instanceof org.apache.commons.math3.analysis.polynomials.PolynomialFunction;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r3 = (org.apache.commons.math3.analysis.polynomials.PolynomialFunction) $r1;

        $r4 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $r2 = r3.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(double[],double[])>($r4, $r2);

        if $z0 != 0 goto label3;

        return 0;

     label3:
        return 1;
    }
    public double[] getCoefficients()
    {
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction r0;
        java.lang.Object $r1;
        double[] $r2;

        r0 := @this: org.apache.commons.math3.analysis.polynomials.PolynomialFunction;

        $r2 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $r1 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (double[]) $r1;

        return $r2;
    }
    public int hashCode()
    {
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction r0;
        int $i0;
        double[] $r1;

        r0 := @this: org.apache.commons.math3.analysis.polynomials.PolynomialFunction;

        $r1 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $i0 = staticinvoke <java.util.Arrays: int hashCode(double[])>($r1);

        $i0 = $i0 + 31;

        return $i0;
    }
    public org.apache.commons.math3.analysis.polynomials.PolynomialFunction multiply(org.apache.commons.math3.analysis.polynomials.PolynomialFunction)
    {
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction r0, $r1;
        double[] r2, $r3;
        int $i0, $i1, $i2, $i3;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.analysis.polynomials.PolynomialFunction;

        $r1 := @parameter0: org.apache.commons.math3.analysis.polynomials.PolynomialFunction;

        r2 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $i0 = lengthof r2;

        r2 = $r1.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $i1 = lengthof r2;

        $i0 = $i0 + $i1;

        $i0 = $i0 + -1;

        r2 = newarray (double)[$i0];

        $i0 = 0;

     label1:
        $i1 = lengthof r2;

        if $i0 >= $i1 goto label4;

        r2[$i0] = 0.0;

        $i1 = $i0 + 1;

        $r3 = $r1.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $i2 = lengthof $r3;

        $i1 = $i1 - $i2;

        $i1 = staticinvoke <org.apache.commons.math3.util.FastMath: int max(int,int)>(0, $i1);

     label2:
        $r3 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $i2 = lengthof $r3;

        $i3 = $i0 + 1;

        $i2 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i2, $i3);

        if $i1 >= $i2 goto label3;

        $d0 = r2[$i0];

        $r3 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $d1 = $r3[$i1];

        $r3 = $r1.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $i2 = $i0 - $i1;

        $d2 = $r3[$i2];

        $d1 = $d1 * $d2;

        $d0 = $d0 + $d1;

        r2[$i0] = $d0;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $i0 = $i0 + 1;

        goto label1;

     label4:
        r0 = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction;

        specialinvoke r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: void <init>(double[])>(r2);

        return r0;
    }
    public org.apache.commons.math3.analysis.polynomials.PolynomialFunction negate()
    {
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction r0;
        double[] r1, $r2;
        int $i0, $i1;
        double $d0;

        r0 := @this: org.apache.commons.math3.analysis.polynomials.PolynomialFunction;

        r1 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $i0 = lengthof r1;

        r1 = newarray (double)[$i0];

        $i0 = 0;

     label1:
        $r2 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label2;

        $r2 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $d0 = $r2[$i0];

        $d0 = neg $d0;

        r1[$i0] = $d0;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        r0 = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction;

        specialinvoke r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: void <init>(double[])>(r1);

        return r0;
    }
    public org.apache.commons.math3.analysis.polynomials.PolynomialFunction polynomialDerivative()
    {
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction r0, $r1;
        double[] $r2;

        r0 := @this: org.apache.commons.math3.analysis.polynomials.PolynomialFunction;

        $r1 = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction;

        $r2 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $r2 = staticinvoke <org.apache.commons.math3.analysis.polynomials.PolynomialFunction: double[] differentiate(double[])>($r2);

        specialinvoke $r1.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: void <init>(double[])>($r2);

        return $r1;
    }
    public org.apache.commons.math3.analysis.polynomials.PolynomialFunction subtract(org.apache.commons.math3.analysis.polynomials.PolynomialFunction)
    {
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction r0, $r1;
        double[] r2, $r3;
        int $i0, $i1, $i2, $i3;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.analysis.polynomials.PolynomialFunction;

        $r1 := @parameter0: org.apache.commons.math3.analysis.polynomials.PolynomialFunction;

        r2 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $i0 = lengthof r2;

        r2 = $r1.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $i1 = lengthof r2;

        $i0 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i0, $i1);

        r2 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $i1 = lengthof r2;

        r2 = $r1.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $i2 = lengthof r2;

        $i1 = staticinvoke <org.apache.commons.math3.util.FastMath: int max(int,int)>($i1, $i2);

        r2 = newarray (double)[$i1];

        $i2 = 0;

     label1:
        if $i2 >= $i0 goto label2;

        $r3 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $d0 = $r3[$i2];

        $r3 = $r1.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $d1 = $r3[$i2];

        $d0 = $d0 - $d1;

        r2[$i2] = $d0;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        $r3 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $i2 = lengthof $r3;

        $r3 = $r1.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $i3 = lengthof $r3;

        if $i2 >= $i3 goto label4;

     label3:
        if $i0 >= $i1 goto label5;

        $r3 = $r1.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $d0 = $r3[$i0];

        $d0 = neg $d0;

        r2[$i0] = $d0;

        $i0 = $i0 + 1;

        goto label3;

     label4:
        $r3 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $i1 = $i1 - $i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, $i0, r2, $i0, $i1);

     label5:
        r0 = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction;

        specialinvoke r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: void <init>(double[])>(r2);

        return r0;
    }
    public java.lang.String toString()
    {
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction r0;
        java.lang.StringBuilder r1;
        double[] $r2;
        double $d0, $d1;
        byte $b0;
        int $i1, $i2;
        java.lang.String $r3;

        r0 := @this: org.apache.commons.math3.analysis.polynomials.PolynomialFunction;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $d0 = $r2[0];

        $b0 = $d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        $r2 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $i1 = lengthof $r2;

        if $i1 != 1 goto label2;

        return "0";

     label1:
        $r2 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $d0 = $r2[0];

        $r3 = staticinvoke <org.apache.commons.math3.analysis.polynomials.PolynomialFunction: java.lang.String toString(double)>($d0);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

     label2:
        $i1 = 1;

     label3:
        $r2 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $i2 = lengthof $r2;

        if $i1 >= $i2 goto label9;

        $r2 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $d0 = $r2[$i1];

        $b0 = $d0 cmpl 0.0;

        if $b0 == 0 goto label6;

        $i2 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        if $i2 <= 0 goto label8;

        $r2 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $d0 = $r2[$i1];

        $b0 = $d0 cmpg 0.0;

        if $b0 >= 0 goto label7;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - ");

     label4:
        $r2 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $d0 = $r2[$i1];

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        $d1 = $d0 - 1.0;

        $b0 = $d1 cmpl 0.0;

        if $b0 == 0 goto label5;

        $r3 = staticinvoke <org.apache.commons.math3.analysis.polynomials.PolynomialFunction: java.lang.String toString(double)>($d0);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label5:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("x");

        if $i1 <= 1 goto label6;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(94);

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i1);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

     label6:
        $i1 = $i1 + 1;

        goto label3;

     label7:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" + ");

        goto label4;

     label8:
        $r2 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $d0 = $r2[$i1];

        $b0 = $d0 cmpg 0.0;

        if $b0 >= 0 goto label4;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        goto label4;

     label9:
        $r3 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }
    public double value(double)
    {
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction r0;
        double $d0;
        double[] $r1;

        r0 := @this: org.apache.commons.math3.analysis.polynomials.PolynomialFunction;

        $d0 := @parameter0: double;

        $r1 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $d0 = staticinvoke <org.apache.commons.math3.analysis.polynomials.PolynomialFunction: double evaluate(double[],double)>($r1, $d0);

        return $d0;
    }
    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NoDataException
    {
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction r0;
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure $r1, r5;
        int i0, $i1, $i2, $i3;
        double[] $r2;
        org.apache.commons.math3.exception.NoDataException $r3;
        org.apache.commons.math3.exception.util.LocalizedFormats $r4;
        double $d0;

        r0 := @this: org.apache.commons.math3.analysis.polynomials.PolynomialFunction;

        $r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r2 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>($r2);

        $r2 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        i0 = lengthof $r2;

        if i0 != 0 goto label1;

        $r3 = new org.apache.commons.math3.exception.NoDataException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY>;

        specialinvoke $r3.<org.apache.commons.math3.exception.NoDataException: void <init>(org.apache.commons.math3.exception.util.Localizable)>($r4);

        throw $r3;

     label1:
        r5 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $i1 = virtualinvoke $r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getFreeParameters()>();

        $i2 = virtualinvoke $r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getOrder()>();

        $r2 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $i3 = i0 + -1;

        $d0 = $r2[$i3];

        specialinvoke r5.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(int,int,double)>($i1, $i2, $d0);

        i0 = i0 + -2;

     label2:
        if i0 < 0 goto label3;

        r5 = virtualinvoke r5.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure multiply(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)>($r1);

        $r2 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $d0 = $r2[i0];

        r5 = virtualinvoke r5.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure add(double)>($d0);

        i0 = i0 + -1;

        goto label2;

     label3:
        return r5;
    }
