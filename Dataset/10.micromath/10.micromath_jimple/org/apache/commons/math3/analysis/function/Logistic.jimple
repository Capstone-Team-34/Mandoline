org.apache.commons.math3.analysis.function.Logistic extends java.lang.Object implements org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction org.apache.commons.math3.analysis.DifferentiableUnivariateFunction
private final double a
private final double b
private final double k
private final double m
private final double oneOverN
private final double q
    public void <init>(double, double, double, double, double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.analysis.function.Logistic r0;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        java.lang.Double $r1;
        byte $b0;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r2;

        r0 := @this: org.apache.commons.math3.analysis.function.Logistic;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $d3 := @parameter3: double;

        $d4 := @parameter4: double;

        $d5 := @parameter5: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $b0 = $d5 cmpg 0.0;

        if $b0 > 0 goto label1;

        $r2 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d5);

        specialinvoke $r2.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(java.lang.Number)>($r1);

        throw $r2;

     label1:
        r0.<org.apache.commons.math3.analysis.function.Logistic: double k> = $d0;

        r0.<org.apache.commons.math3.analysis.function.Logistic: double m> = $d1;

        r0.<org.apache.commons.math3.analysis.function.Logistic: double b> = $d2;

        r0.<org.apache.commons.math3.analysis.function.Logistic: double q> = $d3;

        r0.<org.apache.commons.math3.analysis.function.Logistic: double a> = $d4;

        $d0 = 1.0 / $d5;

        r0.<org.apache.commons.math3.analysis.function.Logistic: double oneOverN> = $d0;

        return;
    }
    static double access$000(double, double, double, double, double, double)
    {
        double $d0, $d1, $d2, $d3, $d4, $d5;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $d3 := @parameter3: double;

        $d4 := @parameter4: double;

        $d5 := @parameter5: double;

        $d0 = staticinvoke <org.apache.commons.math3.analysis.function.Logistic: double value(double,double,double,double,double,double)>($d0, $d1, $d2, $d3, $d4, $d5);

        return $d0;
    }
    private static double value(double, double, double, double, double, double)
    {
        double $d0, $d1, $d2, $d3, $d4, $d5;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $d3 := @parameter3: double;

        $d4 := @parameter4: double;

        $d5 := @parameter5: double;

        $d1 = $d1 - $d4;

        $d0 = $d2 * $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d0);

        $d0 = $d0 * $d3;

        $d0 = 1.0 + $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,double)>($d0, $d5);

        $d0 = $d1 / $d0;

        $d0 = $d0 + $d4;

        return $d0;
    }
    public org.apache.commons.math3.analysis.UnivariateFunction derivative()
    {
        org.apache.commons.math3.analysis.function.Logistic r0;
        org.apache.commons.math3.analysis.DifferentiableUnivariateFunction $r1;
        org.apache.commons.math3.analysis.UnivariateFunction $r2;

        r0 := @this: org.apache.commons.math3.analysis.function.Logistic;

        $r1 = staticinvoke <org.apache.commons.math3.analysis.FunctionUtils: org.apache.commons.math3.analysis.DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction)>(r0);

        $r2 = interfaceinvoke $r1.<org.apache.commons.math3.analysis.DifferentiableUnivariateFunction: org.apache.commons.math3.analysis.UnivariateFunction derivative()>();

        return $r2;
    }
    public double value(double)
    {
        org.apache.commons.math3.analysis.function.Logistic r0;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r0 := @this: org.apache.commons.math3.analysis.function.Logistic;

        $d0 := @parameter0: double;

        $d1 = r0.<org.apache.commons.math3.analysis.function.Logistic: double m>;

        $d5 = $d1 - $d0;

        $d0 = r0.<org.apache.commons.math3.analysis.function.Logistic: double k>;

        $d1 = r0.<org.apache.commons.math3.analysis.function.Logistic: double b>;

        $d2 = r0.<org.apache.commons.math3.analysis.function.Logistic: double q>;

        $d3 = r0.<org.apache.commons.math3.analysis.function.Logistic: double a>;

        $d4 = r0.<org.apache.commons.math3.analysis.function.Logistic: double oneOverN>;

        $d0 = staticinvoke <org.apache.commons.math3.analysis.function.Logistic: double value(double,double,double,double,double,double)>($d5, $d0, $d1, $d2, $d3, $d4);

        return $d0;
    }
    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)
    {
        org.apache.commons.math3.analysis.function.Logistic r0;
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure $r1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.analysis.function.Logistic;

        $r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure negate()>();

        $d0 = r0.<org.apache.commons.math3.analysis.function.Logistic: double m>;

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure add(double)>($d0);

        $d0 = r0.<org.apache.commons.math3.analysis.function.Logistic: double b>;

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure multiply(double)>($d0);

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure exp()>();

        $d0 = r0.<org.apache.commons.math3.analysis.function.Logistic: double q>;

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure multiply(double)>($d0);

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure add(double)>(1.0);

        $d0 = r0.<org.apache.commons.math3.analysis.function.Logistic: double oneOverN>;

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure pow(double)>($d0);

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure reciprocal()>();

        $d1 = r0.<org.apache.commons.math3.analysis.function.Logistic: double k>;

        $d0 = r0.<org.apache.commons.math3.analysis.function.Logistic: double a>;

        $d0 = $d1 - $d0;

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure multiply(double)>($d0);

        $d0 = r0.<org.apache.commons.math3.analysis.function.Logistic: double a>;

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure add(double)>($d0);

        return $r1;
    }
