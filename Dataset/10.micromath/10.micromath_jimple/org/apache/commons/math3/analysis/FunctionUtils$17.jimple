org.apache.commons.math3.analysis.FunctionUtils$17 extends java.lang.Object implements org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableFunction
final org.apache.commons.math3.analysis.DifferentiableMultivariateFunction val$f
    void <init>(org.apache.commons.math3.analysis.DifferentiableMultivariateFunction)
    {
        org.apache.commons.math3.analysis.FunctionUtils$17 r0;
        org.apache.commons.math3.analysis.DifferentiableMultivariateFunction $r1;

        r0 := @this: org.apache.commons.math3.analysis.FunctionUtils$17;

        $r1 := @parameter0: org.apache.commons.math3.analysis.DifferentiableMultivariateFunction;

        r0.<org.apache.commons.math3.analysis.FunctionUtils$17: org.apache.commons.math3.analysis.DifferentiableMultivariateFunction val$f> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public double value(double[])
    {
        org.apache.commons.math3.analysis.FunctionUtils$17 r0;
        double[] $r1;
        double $d0;
        org.apache.commons.math3.analysis.DifferentiableMultivariateFunction $r2;

        r0 := @this: org.apache.commons.math3.analysis.FunctionUtils$17;

        $r1 := @parameter0: double[];

        $r2 = r0.<org.apache.commons.math3.analysis.FunctionUtils$17: org.apache.commons.math3.analysis.DifferentiableMultivariateFunction val$f>;

        $d0 = interfaceinvoke $r2.<org.apache.commons.math3.analysis.DifferentiableMultivariateFunction: double value(double[])>($r1);

        return $d0;
    }
    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure[]) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.analysis.FunctionUtils$17 r0;
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] $r1;
        double[] r2, $r11;
        int i0, $i1, $i2, i3, $i4, $i5;
        int[] r3;
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure $r4;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r5;
        java.lang.Integer $r6, $r7;
        org.apache.commons.math3.exception.DimensionMismatchException $r8;
        double $d0, $d1, $d2;
        org.apache.commons.math3.analysis.DifferentiableMultivariateFunction $r9;
        org.apache.commons.math3.analysis.MultivariateVectorFunction $r10;

        r0 := @this: org.apache.commons.math3.analysis.FunctionUtils$17;

        $r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.DerivativeStructure[];

        $r4 = $r1[0];

        $i1 = virtualinvoke $r4.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getFreeParameters()>();

        $r4 = $r1[0];

        $i2 = virtualinvoke $r4.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getOrder()>();

        i0 = lengthof $r1;

        if $i2 <= 1 goto label01;

        $r5 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke $r5.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r6, $r7, 1);

        throw $r5;

     label01:
        i3 = 0;

     label02:
        if i3 >= i0 goto label05;

        $r4 = $r1[i3];

        $i4 = virtualinvoke $r4.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getFreeParameters()>();

        if $i4 == $i1 goto label03;

        $r8 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $r4 = $r1[i3];

        $i2 = virtualinvoke $r4.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getFreeParameters()>();

        specialinvoke $r8.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i2, $i1);

        throw $r8;

     label03:
        $r4 = $r1[i3];

        $i4 = virtualinvoke $r4.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getOrder()>();

        if $i4 == $i2 goto label04;

        $r8 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $r4 = $r1[i3];

        $i1 = virtualinvoke $r4.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getOrder()>();

        specialinvoke $r8.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i1, $i2);

        throw $r8;

     label04:
        i3 = i3 + 1;

        goto label02;

     label05:
        r2 = newarray (double)[i0];

        i3 = 0;

     label06:
        if i3 >= i0 goto label07;

        $r4 = $r1[i3];

        $d0 = virtualinvoke $r4.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getValue()>();

        r2[i3] = $d0;

        i3 = i3 + 1;

        goto label06;

     label07:
        $r9 = r0.<org.apache.commons.math3.analysis.FunctionUtils$17: org.apache.commons.math3.analysis.DifferentiableMultivariateFunction val$f>;

        $d0 = interfaceinvoke $r9.<org.apache.commons.math3.analysis.DifferentiableMultivariateFunction: double value(double[])>(r2);

        $r9 = r0.<org.apache.commons.math3.analysis.FunctionUtils$17: org.apache.commons.math3.analysis.DifferentiableMultivariateFunction val$f>;

        $r10 = interfaceinvoke $r9.<org.apache.commons.math3.analysis.DifferentiableMultivariateFunction: org.apache.commons.math3.analysis.MultivariateVectorFunction gradient()>();

        $r11 = interfaceinvoke $r10.<org.apache.commons.math3.analysis.MultivariateVectorFunction: double[] value(double[])>(r2);

        i3 = $i1 + 1;

        r2 = newarray (double)[i3];

        r2[0] = $d0;

        r3 = newarray (int)[$i1];

        i3 = 0;

     label08:
        if i3 >= $i1 goto label11;

        r3[i3] = 1;

        $i4 = 0;

     label09:
        if $i4 >= i0 goto label10;

        $i5 = i3 + 1;

        $d0 = r2[$i5];

        $d1 = $r11[$i4];

        $r4 = $r1[$i4];

        $d2 = virtualinvoke $r4.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getPartialDerivative(int[])>(r3);

        $d1 = $d1 * $d2;

        $d0 = $d0 + $d1;

        r2[$i5] = $d0;

        $i4 = $i4 + 1;

        goto label09;

     label10:
        r3[i3] = 0;

        i3 = i3 + 1;

        goto label08;

     label11:
        $r4 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        specialinvoke $r4.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(int,int,double[])>($i1, $i2, r2);

        return $r4;
    }
