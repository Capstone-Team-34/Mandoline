org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator extends org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator
private static final org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorFactory FACTORY
private final int numberOfPoints
    static void <clinit>()
    {
        org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorFactory $r0;

        $r0 = new org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorFactory;

        specialinvoke $r0.<org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorFactory: void <init>()>();

        <org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator: org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorFactory FACTORY> = $r0;

        return;
    }
    public void <init>(int, double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator r0;
        int $i0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator;

        $i0 := @parameter0: int;

        $d0 := @parameter1: double;

        $d1 := @parameter2: double;

        specialinvoke r0.<org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator: void <init>(int,double,double,int,int)>($i0, $d0, $d1, 3, 2147483647);

        return;
    }
    public void <init>(int, double, double, int, int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator r0;
        int $i0, $i1, $i2;
        double $d0, $d1;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r1;
        java.lang.Integer $r2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3;

        r0 := @this: org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator;

        $i0 := @parameter0: int;

        $d0 := @parameter1: double;

        $d1 := @parameter2: double;

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        specialinvoke r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: void <init>(double,double,int,int)>($d0, $d1, $i1, $i2);

        if $i0 > 0 goto label1;

        $r1 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NUMBER_OF_POINTS>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r1.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r3, $r2);

        throw $r1;

     label1:
        r0.<org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator: int numberOfPoints> = $i0;

        return;
    }
    public void <init>(int, int, int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator r0;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        specialinvoke r0.<org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator: void <init>(int,double,double,int,int)>($i0, 1.0E-6, 1.0E-15, $i1, $i2);

        return;
    }
    private double stage(int) throws org.apache.commons.math3.exception.TooManyEvaluationsException
    {
        org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator r0;
        int $i0, $i1, i2;
        double d0, d1, d2, $d3, $d4;
        org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator$1 r1;
        org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorFactory $r2;
        org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator $r3;

        r0 := @this: org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator;

        $i0 := @parameter0: int;

        r1 = new org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator$1;

        specialinvoke r1.<org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator$1: void <init>(org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator)>(r0);

        $d3 = virtualinvoke r0.<org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator: double getMin()>();

        d2 = virtualinvoke r0.<org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator: double getMax()>();

        d2 = d2 - $d3;

        $d4 = (double) $i0;

        d2 = d2 / $d4;

        $d4 = 0.0;

        i2 = 0;

     label1:
        if i2 >= $i0 goto label2;

        d0 = (double) i2;

        d0 = d0 * d2;

        d0 = $d3 + d0;

        d1 = d0 + d2;

        $r2 = <org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator: org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorFactory FACTORY>;

        $i1 = r0.<org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator: int numberOfPoints>;

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorFactory: org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator legendreHighPrecision(int,double,double)>($i1, d0, d1);

        d0 = virtualinvoke $r3.<org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator: double integrate(org.apache.commons.math3.analysis.UnivariateFunction)>(r1);

        $d4 = $d4 + d0;

        i2 = i2 + 1;

        goto label1;

     label2:
        return $d4;
    }
    protected double doIntegrate() throws org.apache.commons.math3.exception.MathIllegalArgumentException, org.apache.commons.math3.exception.TooManyEvaluationsException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator r0;
        double $d0, d1, $d2, $d3, $d4, $d5;
        int i0, $i1, $i2;
        byte $b3;

        r0 := @this: org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator;

        d1 = specialinvoke r0.<org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator: double stage(int)>(1);

        i0 = 2;

     label1:
        $d0 = specialinvoke r0.<org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator: double stage(int)>(i0);

        $d2 = $d0 - d1;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d2);

        $d3 = virtualinvoke r0.<org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator: double getAbsoluteAccuracy()>();

        $d4 = virtualinvoke r0.<org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator: double getRelativeAccuracy()>();

        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d1);

        $d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        d1 = d1 + $d5;

        $d4 = $d4 * d1;

        $d4 = $d4 * 0.5;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>($d3, $d4);

        $i1 = virtualinvoke r0.<org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator: int getIterations()>();

        $i1 = $i1 + 1;

        $i2 = virtualinvoke r0.<org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator: int getMinimalIterationCount()>();

        if $i1 < $i2 goto label2;

        $b3 = $d2 cmpg $d3;

        if $b3 > 0 goto label2;

        return $d0;

     label2:
        $d2 = $d2 / $d3;

        $i1 = r0.<org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator: int numberOfPoints>;

        $d3 = (double) $i1;

        $d3 = 0.5 / $d3;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,double)>($d2, $d3);

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double min(double,double)>(4.0, $d2);

        $d3 = (double) i0;

        $d2 = $d3 * $d2;

        $i1 = (int) $d2;

        i0 = i0 + 1;

        i0 = staticinvoke <org.apache.commons.math3.util.FastMath: int max(int,int)>($i1, i0);

        d1 = $d0;

        virtualinvoke r0.<org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator: void incrementCount()>();

        goto label1;
    }
