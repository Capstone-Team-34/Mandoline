org.apache.commons.math3.analysis.FunctionUtils$19 extends java.lang.Object implements org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction
final org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction val$f
    void <init>(org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction)
    {
        org.apache.commons.math3.analysis.FunctionUtils$19 r0;
        org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction $r1;

        r0 := @this: org.apache.commons.math3.analysis.FunctionUtils$19;

        $r1 := @parameter0: org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction;

        r0.<org.apache.commons.math3.analysis.FunctionUtils$19: org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction val$f> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public double[] value(double[])
    {
        org.apache.commons.math3.analysis.FunctionUtils$19 r0;
        double[] $r1;
        org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction $r2;

        r0 := @this: org.apache.commons.math3.analysis.FunctionUtils$19;

        $r1 := @parameter0: double[];

        $r2 = r0.<org.apache.commons.math3.analysis.FunctionUtils$19: org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction val$f>;

        $r1 = interfaceinvoke $r2.<org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction: double[] value(double[])>($r1);

        return $r1;
    }
    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure[]) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.analysis.FunctionUtils$19 r0;
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] $r1, r3;
        double[] r2, $r11, $r14;
        int i0, $i1, $i2, i3, $i4, i5, $i6;
        int[] r4;
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure $r5;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r6;
        java.lang.Integer $r7, $r8;
        org.apache.commons.math3.exception.DimensionMismatchException $r9;
        double $d0, $d1, $d2;
        org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction $r10;
        org.apache.commons.math3.analysis.MultivariateMatrixFunction $r12;
        double[][] $r13;

        r0 := @this: org.apache.commons.math3.analysis.FunctionUtils$19;

        $r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.DerivativeStructure[];

        $r5 = $r1[0];

        $i1 = virtualinvoke $r5.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getFreeParameters()>();

        $r5 = $r1[0];

        $i2 = virtualinvoke $r5.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getOrder()>();

        i0 = lengthof $r1;

        if $i2 <= 1 goto label01;

        $r6 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke $r6.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r7, $r8, 1);

        throw $r6;

     label01:
        i3 = 0;

     label02:
        if i3 >= i0 goto label05;

        $r5 = $r1[i3];

        $i4 = virtualinvoke $r5.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getFreeParameters()>();

        if $i4 == $i1 goto label03;

        $r9 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $r5 = $r1[i3];

        $i2 = virtualinvoke $r5.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getFreeParameters()>();

        specialinvoke $r9.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i2, $i1);

        throw $r9;

     label03:
        $r5 = $r1[i3];

        $i4 = virtualinvoke $r5.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getOrder()>();

        if $i4 == $i2 goto label04;

        $r9 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $r5 = $r1[i3];

        $i1 = virtualinvoke $r5.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getOrder()>();

        specialinvoke $r9.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i1, $i2);

        throw $r9;

     label04:
        i3 = i3 + 1;

        goto label02;

     label05:
        r2 = newarray (double)[i0];

        i3 = 0;

     label06:
        if i3 >= i0 goto label07;

        $r5 = $r1[i3];

        $d0 = virtualinvoke $r5.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getValue()>();

        r2[i3] = $d0;

        i3 = i3 + 1;

        goto label06;

     label07:
        $r10 = r0.<org.apache.commons.math3.analysis.FunctionUtils$19: org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction val$f>;

        $r11 = interfaceinvoke $r10.<org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction: double[] value(double[])>(r2);

        $r10 = r0.<org.apache.commons.math3.analysis.FunctionUtils$19: org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction val$f>;

        $r12 = interfaceinvoke $r10.<org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction: org.apache.commons.math3.analysis.MultivariateMatrixFunction jacobian()>();

        $r13 = interfaceinvoke $r12.<org.apache.commons.math3.analysis.MultivariateMatrixFunction: double[][] value(double[])>(r2);

        i3 = lengthof $r11;

        r3 = newarray (org.apache.commons.math3.analysis.differentiation.DerivativeStructure)[i3];

        i3 = 0;

     label08:
        $i4 = lengthof r3;

        if i3 >= $i4 goto label13;

        $i4 = $i1 + 1;

        r2 = newarray (double)[$i4];

        $d0 = $r11[i3];

        r2[0] = $d0;

        r4 = newarray (int)[$i1];

        $i4 = 0;

     label09:
        if $i4 >= $i1 goto label12;

        r4[$i4] = 1;

        i5 = 0;

     label10:
        if i5 >= i0 goto label11;

        $i6 = $i4 + 1;

        $d0 = r2[$i6];

        $r14 = $r13[i3];

        $d1 = $r14[i5];

        $r5 = $r1[i5];

        $d2 = virtualinvoke $r5.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getPartialDerivative(int[])>(r4);

        $d1 = $d1 * $d2;

        $d0 = $d0 + $d1;

        r2[$i6] = $d0;

        i5 = i5 + 1;

        goto label10;

     label11:
        r4[$i4] = 0;

        $i4 = $i4 + 1;

        goto label09;

     label12:
        $r5 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        specialinvoke $r5.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(int,int,double[])>($i1, $i2, r2);

        r3[i3] = $r5;

        i3 = i3 + 1;

        goto label08;

     label13:
        return r3;
    }
