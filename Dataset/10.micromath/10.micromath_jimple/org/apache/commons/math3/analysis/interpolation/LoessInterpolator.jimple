org.apache.commons.math3.analysis.interpolation.LoessInterpolator extends java.lang.Object implements org.apache.commons.math3.analysis.interpolation.UnivariateInterpolator java.io.Serializable
public static final double DEFAULT_ACCURACY
public static final double DEFAULT_BANDWIDTH
public static final int DEFAULT_ROBUSTNESS_ITERS
private static final long serialVersionUID
private final double accuracy
private final double bandwidth
private final int robustnessIters
    public void <init>()
    {
        org.apache.commons.math3.analysis.interpolation.LoessInterpolator r0;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.LoessInterpolator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.analysis.interpolation.LoessInterpolator: double bandwidth> = 0.3;

        r0.<org.apache.commons.math3.analysis.interpolation.LoessInterpolator: int robustnessIters> = 2;

        r0.<org.apache.commons.math3.analysis.interpolation.LoessInterpolator: double accuracy> = 1.0E-12;

        return;
    }
    public void <init>(double, int)
    {
        org.apache.commons.math3.analysis.interpolation.LoessInterpolator r0;
        double $d0;
        int $i0;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.LoessInterpolator;

        $d0 := @parameter0: double;

        $i0 := @parameter1: int;

        specialinvoke r0.<org.apache.commons.math3.analysis.interpolation.LoessInterpolator: void <init>(double,int,double)>($d0, $i0, 1.0E-12);

        return;
    }
    public void <init>(double, int, double) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.NotPositiveException
    {
        org.apache.commons.math3.analysis.interpolation.LoessInterpolator r0;
        double $d0, $d1;
        int $i0;
        byte $b1;
        org.apache.commons.math3.exception.OutOfRangeException $r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        java.lang.Double $r3;
        java.lang.Integer $r4, $r5;
        org.apache.commons.math3.exception.NotPositiveException $r6;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.LoessInterpolator;

        $d0 := @parameter0: double;

        $i0 := @parameter1: int;

        $d1 := @parameter2: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $b1 = $d0 cmpg 0.0;

        if $b1 < 0 goto label1;

        $b1 = $d0 cmpl 1.0;

        if $b1 <= 0 goto label2;

     label1:
        $r1 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats BANDWIDTH>;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke $r1.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)>($r2, $r3, $r4, $r5);

        throw $r1;

     label2:
        r0.<org.apache.commons.math3.analysis.interpolation.LoessInterpolator: double bandwidth> = $d0;

        if $i0 >= 0 goto label3;

        $r6 = new org.apache.commons.math3.exception.NotPositiveException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats ROBUSTNESS_ITERATIONS>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r6.<org.apache.commons.math3.exception.NotPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r2, $r4);

        throw $r6;

     label3:
        r0.<org.apache.commons.math3.analysis.interpolation.LoessInterpolator: int robustnessIters> = $i0;

        r0.<org.apache.commons.math3.analysis.interpolation.LoessInterpolator: double accuracy> = $d1;

        return;
    }
    private static void checkAllFiniteReal(double[])
    {
        double[] $r0;
        int $i0, i1;
        double $d0;

        $r0 := @parameter0: double[];

        i1 = 0;

     label1:
        $i0 = lengthof $r0;

        if i1 >= $i0 goto label2;

        $d0 = $r0[i1];

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkFinite(double)>($d0);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
    private static int nextNonzero(double[], int)
    {
        double[] $r0;
        int $i0, $i1;
        double $d0;
        byte $b2;

        $r0 := @parameter0: double[];

        $i0 := @parameter1: int;

        $i0 = $i0 + 1;

     label1:
        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label2;

        $d0 = $r0[$i0];

        $b2 = $d0 cmpl 0.0;

        if $b2 != 0 goto label2;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return $i0;
    }
    private static double tricube(double)
    {
        double $d0, $d1;
        byte $b0;

        $d0 := @parameter0: double;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        $b0 = $d0 cmpl 1.0;

        if $b0 < 0 goto label1;

        return 0.0;

     label1:
        $d1 = $d0 * $d0;

        $d0 = $d1 * $d0;

        $d0 = 1.0 - $d0;

        $d1 = $d0 * $d0;

        $d0 = $d1 * $d0;

        return $d0;
    }
    private static void updateBandwidthInterval(double[], double[], int, int[])
    {
        double[] $r0, $r1;
        int $i0, i1, i2, $i3;
        int[] $r2;
        double $d0, $d1, $d2;
        byte $b4;

        $r0 := @parameter0: double[];

        $r1 := @parameter1: double[];

        $i0 := @parameter2: int;

        $r2 := @parameter3: int[];

        i1 = $r2[0];

        i2 = $r2[1];

        i2 = staticinvoke <org.apache.commons.math3.analysis.interpolation.LoessInterpolator: int nextNonzero(double[],int)>($r1, i2);

        $i3 = lengthof $r0;

        if i2 >= $i3 goto label1;

        $d1 = $r0[i2];

        $d0 = $r0[$i0];

        $d1 = $d1 - $d0;

        $d2 = $r0[$i0];

        $d0 = $r0[i1];

        $d0 = $d2 - $d0;

        $b4 = $d1 cmpg $d0;

        if $b4 >= 0 goto label1;

        $i0 = $r2[0];

        $i0 = staticinvoke <org.apache.commons.math3.analysis.interpolation.LoessInterpolator: int nextNonzero(double[],int)>($r1, $i0);

        $r2[0] = $i0;

        $r2[1] = i2;

     label1:
        return;
    }
    public volatile org.apache.commons.math3.analysis.UnivariateFunction interpolate(double[], double[]) throws org.apache.commons.math3.exception.MathIllegalArgumentException, org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.analysis.interpolation.LoessInterpolator r0;
        double[] $r1, $r2;
        org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction $r3;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.LoessInterpolator;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[];

        $r3 = virtualinvoke r0.<org.apache.commons.math3.analysis.interpolation.LoessInterpolator: org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction interpolate(double[],double[])>($r1, $r2);

        return $r3;
    }
    public final org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction interpolate(double[], double[]) throws org.apache.commons.math3.exception.NonMonotonicSequenceException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.NotFiniteNumberException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.analysis.interpolation.LoessInterpolator r0;
        double[] $r1, $r2;
        org.apache.commons.math3.analysis.interpolation.SplineInterpolator $r3;
        org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction $r4;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.LoessInterpolator;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[];

        $r3 = new org.apache.commons.math3.analysis.interpolation.SplineInterpolator;

        specialinvoke $r3.<org.apache.commons.math3.analysis.interpolation.SplineInterpolator: void <init>()>();

        $r2 = virtualinvoke r0.<org.apache.commons.math3.analysis.interpolation.LoessInterpolator: double[] smooth(double[],double[])>($r1, $r2);

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.analysis.interpolation.SplineInterpolator: org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction interpolate(double[],double[])>($r1, $r2);

        return $r4;
    }
    public final double[] smooth(double[], double[]) throws org.apache.commons.math3.exception.NonMonotonicSequenceException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.NotFiniteNumberException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.analysis.interpolation.LoessInterpolator r0;
        double[] $r1, $r2, r3;
        int $i0, $i1;
        org.apache.commons.math3.exception.DimensionMismatchException $r4;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.LoessInterpolator;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[];

        $i0 = lengthof $r1;

        $i1 = lengthof $r2;

        if $i0 == $i1 goto label1;

        $r4 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i1 = lengthof $r1;

        $i0 = lengthof $r2;

        specialinvoke $r4.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i1, $i0);

        throw $r4;

     label1:
        $i0 = lengthof $r1;

        r3 = newarray (double)[$i0];

        staticinvoke <java.util.Arrays: void fill(double[],double)>(r3, 1.0);

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.interpolation.LoessInterpolator: double[] smooth(double[],double[],double[])>($r1, $r2, r3);

        return $r1;
    }
    public final double[] smooth(double[], double[], double[]) throws org.apache.commons.math3.exception.NonMonotonicSequenceException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.NotFiniteNumberException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.analysis.interpolation.LoessInterpolator r0;
        double[] $r1, $r2, $r3, $r11, $r12, $r13, $r14;
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, $d9, $d10;
        int i0, i1, i2, $i3, i4, i5, i7;
        int[] r4;
        org.apache.commons.math3.exception.DimensionMismatchException $r5;
        org.apache.commons.math3.exception.NoDataException $r6;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r7;
        org.apache.commons.math3.exception.util.LocalizedFormats $r8;
        java.lang.Integer $r9, $r10;
        byte $b6;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.LoessInterpolator;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[];

        $r3 := @parameter2: double[];

        i0 = lengthof $r1;

        $i3 = lengthof $r2;

        if i0 == $i3 goto label01;

        $r5 = new org.apache.commons.math3.exception.DimensionMismatchException;

        i0 = lengthof $r1;

        $i3 = lengthof $r2;

        specialinvoke $r5.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>(i0, $i3);

        throw $r5;

     label01:
        $i3 = lengthof $r1;

        if $i3 != 0 goto label02;

        $r6 = new org.apache.commons.math3.exception.NoDataException;

        specialinvoke $r6.<org.apache.commons.math3.exception.NoDataException: void <init>()>();

        throw $r6;

     label02:
        staticinvoke <org.apache.commons.math3.analysis.interpolation.LoessInterpolator: void checkAllFiniteReal(double[])>($r1);

        staticinvoke <org.apache.commons.math3.analysis.interpolation.LoessInterpolator: void checkAllFiniteReal(double[])>($r2);

        staticinvoke <org.apache.commons.math3.analysis.interpolation.LoessInterpolator: void checkAllFiniteReal(double[])>($r3);

        staticinvoke <org.apache.commons.math3.util.MathArrays: void checkOrder(double[])>($r1);

        if $i3 != 1 goto label03;

        $r1 = newarray (double)[1];

        d5 = $r2[0];

        $r1[0] = d5;

        return $r1;

     label03:
        if $i3 != 2 goto label04;

        $r1 = newarray (double)[2];

        d5 = $r2[0];

        $r1[0] = d5;

        d5 = $r2[1];

        $r1[1] = d5;

        return $r1;

     label04:
        d5 = r0.<org.apache.commons.math3.analysis.interpolation.LoessInterpolator: double bandwidth>;

        d1 = (double) $i3;

        d5 = d5 * d1;

        i0 = (int) d5;

        if i0 >= 2 goto label05;

        $r7 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r8 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats BANDWIDTH>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        specialinvoke $r7.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r8, $r9, $r10, 1);

        throw $r7;

     label05:
        $r11 = newarray (double)[$i3];

        $r12 = newarray (double)[$i3];

        $r13 = newarray (double)[$i3];

        $r14 = newarray (double)[$i3];

        staticinvoke <java.util.Arrays: void fill(double[],double)>($r14, 1.0);

        i4 = 0;

     label06:
        i2 = r0.<org.apache.commons.math3.analysis.interpolation.LoessInterpolator: int robustnessIters>;

        if i4 > i2 goto label22;

        r4 = newarray (int)[2];

        r4[0] = 0;

        i2 = i0 + -1;

        r4[1] = i2;

        i5 = 0;

     label07:
        if i5 >= $i3 goto label17;

        d5 = $r1[i5];

        if i5 <= 0 goto label08;

        staticinvoke <org.apache.commons.math3.analysis.interpolation.LoessInterpolator: void updateBandwidthInterval(double[],double[],int,int[])>($r1, $r3, i5, r4);

     label08:
        i1 = r4[0];

        i2 = r4[1];

        d1 = $r1[i5];

        d0 = $r1[i1];

        d1 = d1 - d0;

        d3 = $r1[i2];

        d0 = $r1[i5];

        d0 = d3 - d0;

        $b6 = d1 cmpl d0;

        if $b6 <= 0 goto label12;

        i7 = i1;

     label09:
        d1 = 0.0;

        d2 = 0.0;

        d0 = 0.0;

        d4 = 0.0;

        d3 = 0.0;

        $d9 = $r1[i7];

        $d9 = $d9 - d5;

        $d9 = 1.0 / $d9;

        $d9 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d9);

     label10:
        if i1 > i2 goto label14;

        d6 = $r1[i1];

        d8 = $r2[i1];

        if i1 >= i5 goto label13;

        d7 = d5 - d6;

     label11:
        d7 = d7 * $d9;

        d7 = staticinvoke <org.apache.commons.math3.analysis.interpolation.LoessInterpolator: double tricube(double)>(d7);

        $d10 = $r14[i1];

        d7 = d7 * $d10;

        $d10 = $r3[i1];

        $d10 = d7 * $d10;

        d7 = d6 * $d10;

        d1 = d1 + $d10;

        d2 = d2 + d7;

        d6 = d6 * d7;

        d0 = d0 + d6;

        d6 = d8 * $d10;

        d4 = d4 + d6;

        d8 = d8 * d7;

        d3 = d3 + d8;

        i1 = i1 + 1;

        goto label10;

     label12:
        i7 = i2;

        goto label09;

     label13:
        d7 = d6 - d5;

        goto label11;

     label14:
        d2 = d2 / d1;

        d4 = d4 / d1;

        d3 = d3 / d1;

        d1 = d0 / d1;

        d0 = d2 * d2;

        d0 = d1 - d0;

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d0);

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d0);

        $d9 = r0.<org.apache.commons.math3.analysis.interpolation.LoessInterpolator: double accuracy>;

        $b6 = d0 cmpg $d9;

        if $b6 >= 0 goto label16;

        d1 = 0.0;

     label15:
        d0 = d1 * d2;

        d0 = d4 - d0;

        d5 = d1 * d5;

        d5 = d5 + d0;

        $r11[i5] = d5;

        d5 = $r2[i5];

        d1 = $r11[i5];

        d5 = d5 - d1;

        d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d5);

        $r12[i5] = d5;

        i5 = i5 + 1;

        goto label07;

     label16:
        d0 = d2 * d4;

        d0 = d3 - d0;

        d3 = d2 * d2;

        d1 = d1 - d3;

        d1 = d0 / d1;

        goto label15;

     label17:
        i2 = r0.<org.apache.commons.math3.analysis.interpolation.LoessInterpolator: int robustnessIters>;

        if i4 == i2 goto label22;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r12, 0, $r13, 0, $i3);

        staticinvoke <java.util.Arrays: void sort(double[])>($r13);

        i2 = $i3 / 2;

        d5 = $r13[i2];

        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d5);

        d0 = r0.<org.apache.commons.math3.analysis.interpolation.LoessInterpolator: double accuracy>;

        $b6 = d1 cmpg d0;

        if $b6 < 0 goto label22;

        i2 = 0;

     label18:
        if i2 >= $i3 goto label21;

        d1 = $r12[i2];

        d0 = 6.0 * d5;

        d1 = d1 / d0;

        $b6 = d1 cmpl 1.0;

        if $b6 < 0 goto label20;

        $r14[i2] = 0.0;

     label19:
        i2 = i2 + 1;

        goto label18;

     label20:
        d1 = d1 * d1;

        d1 = 1.0 - d1;

        d1 = d1 * d1;

        $r14[i2] = d1;

        goto label19;

     label21:
        i4 = i4 + 1;

        goto label06;

     label22:
        return $r11;
    }
