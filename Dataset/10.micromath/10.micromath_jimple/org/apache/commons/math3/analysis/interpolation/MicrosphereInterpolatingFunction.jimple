org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction extends java.lang.Object implements org.apache.commons.math3.analysis.MultivariateFunction
private final double brightnessExponent
private final int dimension
private final java.util.List microsphere
private final java.util.Map samples
    public void <init>(double[][], double[], int, int, org.apache.commons.math3.random.UnitSphereRandomVectorGenerator) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction r0;
        double[][] $r1;
        double[] $r2, r4;
        int $i0, $i1, $i2, $i3;
        org.apache.commons.math3.random.UnitSphereRandomVectorGenerator $r3;
        org.apache.commons.math3.exception.NullArgumentException $r5;
        org.apache.commons.math3.exception.NoDataException $r6;
        org.apache.commons.math3.exception.DimensionMismatchException $r7;
        double $d0;
        java.util.HashMap $r8;
        java.util.Map $r9;
        org.apache.commons.math3.linear.ArrayRealVector $r10;
        java.lang.Double $r11;
        java.util.ArrayList $r12;
        java.util.List $r13;
        org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction$MicrosphereSurfaceElement $r14;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction;

        $r1 := @parameter0: double[][];

        $r2 := @parameter1: double[];

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $r3 := @parameter4: org.apache.commons.math3.random.UnitSphereRandomVectorGenerator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if $r1 == null goto label01;

        if $r2 != null goto label02;

     label01:
        $r5 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r5.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r5;

     label02:
        $i2 = lengthof $r1;

        if $i2 != 0 goto label03;

        $r6 = new org.apache.commons.math3.exception.NoDataException;

        specialinvoke $r6.<org.apache.commons.math3.exception.NoDataException: void <init>()>();

        throw $r6;

     label03:
        $i2 = lengthof $r1;

        $i3 = lengthof $r2;

        if $i2 == $i3 goto label04;

        $r7 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i0 = lengthof $r1;

        $i1 = lengthof $r2;

        specialinvoke $r7.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i0, $i1);

        throw $r7;

     label04:
        r4 = $r1[0];

        if r4 != null goto label05;

        $r5 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r5.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r5;

     label05:
        r4 = $r1[0];

        $i2 = lengthof r4;

        r0.<org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction: int dimension> = $i2;

        $d0 = (double) $i0;

        r0.<org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction: double brightnessExponent> = $d0;

        $r8 = new java.util.HashMap;

        $i0 = lengthof $r2;

        specialinvoke $r8.<java.util.HashMap: void <init>(int)>($i0);

        r0.<org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction: java.util.Map samples> = $r8;

        $i0 = 0;

     label06:
        $i2 = lengthof $r1;

        if $i0 >= $i2 goto label09;

        r4 = $r1[$i0];

        if r4 != null goto label07;

        $r5 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r5.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r5;

     label07:
        $i2 = lengthof r4;

        $i3 = r0.<org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction: int dimension>;

        if $i2 == $i3 goto label08;

        $r7 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i0 = lengthof r4;

        $i1 = r0.<org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction: int dimension>;

        specialinvoke $r7.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i0, $i1);

        throw $r7;

     label08:
        $r9 = r0.<org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction: java.util.Map samples>;

        $r10 = new org.apache.commons.math3.linear.ArrayRealVector;

        specialinvoke $r10.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(double[])>(r4);

        $d0 = $r2[$i0];

        $r11 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r11);

        $i0 = $i0 + 1;

        goto label06;

     label09:
        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>(int)>($i1);

        r0.<org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction: java.util.List microsphere> = $r12;

        $i0 = 0;

     label10:
        if $i0 >= $i1 goto label11;

        $r13 = r0.<org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction: java.util.List microsphere>;

        $r14 = new org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction$MicrosphereSurfaceElement;

        $r2 = virtualinvoke $r3.<org.apache.commons.math3.random.UnitSphereRandomVectorGenerator: double[] nextVector()>();

        specialinvoke $r14.<org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction$MicrosphereSurfaceElement: void <init>(double[])>($r2);

        interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>($r14);

        $i0 = $i0 + 1;

        goto label10;

     label11:
        return;
    }
    private double cosAngle(org.apache.commons.math3.linear.RealVector, org.apache.commons.math3.linear.RealVector)
    {
        org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction r0;
        org.apache.commons.math3.linear.RealVector $r1, $r2;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealVector;

        $r2 := @parameter1: org.apache.commons.math3.linear.RealVector;

        $d0 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: double dotProduct(org.apache.commons.math3.linear.RealVector)>($r2);

        $d1 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: double getNorm()>();

        $d2 = virtualinvoke $r2.<org.apache.commons.math3.linear.RealVector: double getNorm()>();

        $d1 = $d1 * $d2;

        $d0 = $d0 / $d1;

        return $d0;
    }
    public double value(double[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction r0;
        double[] $r1;
        org.apache.commons.math3.linear.ArrayRealVector r2;
        java.util.List $r3;
        java.util.Iterator $r4, $r12;
        boolean $z0;
        java.lang.Object $r5;
        org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction$MicrosphereSurfaceElement r6;
        java.util.Map $r7;
        java.util.Set $r8;
        java.util.Map$Entry r9;
        org.apache.commons.math3.linear.RealVector $r10, $r13;
        double $d0, $d1, $d2, $d3;
        byte $b0;
        java.lang.Double $r11;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction;

        $r1 := @parameter0: double[];

        r2 = new org.apache.commons.math3.linear.ArrayRealVector;

        specialinvoke r2.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(double[])>($r1);

        $r3 = r0.<org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction: java.util.List microsphere>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction$MicrosphereSurfaceElement) $r5;

        virtualinvoke r6.<org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction$MicrosphereSurfaceElement: void reset()>();

        goto label1;

     label2:
        $r7 = r0.<org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction: java.util.Map samples>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r9 = (java.util.Map$Entry) $r5;

        $r5 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r10 = (org.apache.commons.math3.linear.RealVector) $r5;

        $r10 = virtualinvoke $r10.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector subtract(org.apache.commons.math3.linear.RealVector)>(r2);

        $d0 = virtualinvoke $r10.<org.apache.commons.math3.linear.RealVector: double getNorm()>();

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double ulp(double)>(1.0);

        $b0 = $d1 cmpg $d2;

        if $b0 >= 0 goto label4;

        $r5 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r11 = (java.lang.Double) $r5;

        $d0 = virtualinvoke $r11.<java.lang.Double: double doubleValue()>();

        return $d0;

     label4:
        $r3 = r0.<org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction: java.util.List microsphere>;

        $r12 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction$MicrosphereSurfaceElement) $r5;

        $d1 = r0.<org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction: double brightnessExponent>;

        $d1 = neg $d1;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,double)>($d0, $d1);

        $r13 = virtualinvoke r6.<org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction$MicrosphereSurfaceElement: org.apache.commons.math3.linear.RealVector normal()>();

        $d2 = specialinvoke r0.<org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction: double cosAngle(org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.linear.RealVector)>($r10, $r13);

        $d1 = $d2 * $d1;

        virtualinvoke r6.<org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction$MicrosphereSurfaceElement: void store(double,java.util.Map$Entry)>($d1, r9);

        goto label5;

     label6:
        $d0 = 0.0;

        $d1 = 0.0;

        $r3 = r0.<org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction: java.util.List microsphere>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label7:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction$MicrosphereSurfaceElement) $r5;

        $d2 = virtualinvoke r6.<org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction$MicrosphereSurfaceElement: double illumination()>();

        r9 = virtualinvoke r6.<org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction$MicrosphereSurfaceElement: java.util.Map$Entry sample()>();

        if r9 == null goto label7;

        $r5 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r11 = (java.lang.Double) $r5;

        $d3 = virtualinvoke $r11.<java.lang.Double: double doubleValue()>();

        $d3 = $d3 * $d2;

        $d0 = $d0 + $d3;

        $d1 = $d1 + $d2;

        goto label7;

     label8:
        $d0 = $d0 / $d1;

        return $d0;
    }
