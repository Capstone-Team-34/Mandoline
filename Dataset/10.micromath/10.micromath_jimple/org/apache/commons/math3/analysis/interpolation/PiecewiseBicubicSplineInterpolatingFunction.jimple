org.apache.commons.math3.analysis.interpolation.PiecewiseBicubicSplineInterpolatingFunction extends java.lang.Object implements org.apache.commons.math3.analysis.BivariateFunction
private static final int MIN_NUM_POINTS
private final double[][] fval
private final double[] xval
private final double[] yval
    public void <init>(double[], double[], double[][]) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.NonMonotonicSequenceException
    {
        org.apache.commons.math3.analysis.interpolation.PiecewiseBicubicSplineInterpolatingFunction r0;
        double[] $r1, $r2, $r4;
        double[][] $r3;
        int i0, i1, $i2;
        org.apache.commons.math3.exception.NullArgumentException $r5;
        org.apache.commons.math3.exception.NoDataException $r6;
        org.apache.commons.math3.exception.InsufficientDataException $r7;
        org.apache.commons.math3.exception.DimensionMismatchException $r8;
        java.lang.Object $r9;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.PiecewiseBicubicSplineInterpolatingFunction;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[];

        $r3 := @parameter2: double[][];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if $r1 == null goto label1;

        if $r2 == null goto label1;

        if $r3 == null goto label1;

        $r4 = $r3[0];

        if $r4 != null goto label2;

     label1:
        $r5 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r5.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r5;

     label2:
        i0 = lengthof $r1;

        i1 = lengthof $r2;

        if i0 == 0 goto label3;

        if i1 == 0 goto label3;

        $i2 = lengthof $r3;

        if $i2 == 0 goto label3;

        $r4 = $r3[0];

        $i2 = lengthof $r4;

        if $i2 != 0 goto label4;

     label3:
        $r6 = new org.apache.commons.math3.exception.NoDataException;

        specialinvoke $r6.<org.apache.commons.math3.exception.NoDataException: void <init>()>();

        throw $r6;

     label4:
        if i0 < 5 goto label5;

        if i1 < 5 goto label5;

        $i2 = lengthof $r3;

        if $i2 < 5 goto label5;

        $r4 = $r3[0];

        $i2 = lengthof $r4;

        if $i2 >= 5 goto label6;

     label5:
        $r7 = new org.apache.commons.math3.exception.InsufficientDataException;

        specialinvoke $r7.<org.apache.commons.math3.exception.InsufficientDataException: void <init>()>();

        throw $r7;

     label6:
        $i2 = lengthof $r3;

        if i0 == $i2 goto label7;

        $r8 = new org.apache.commons.math3.exception.DimensionMismatchException;

        i1 = lengthof $r3;

        specialinvoke $r8.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>(i0, i1);

        throw $r8;

     label7:
        $r4 = $r3[0];

        i0 = lengthof $r4;

        if i1 == i0 goto label8;

        $r8 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $r1 = $r3[0];

        i0 = lengthof $r1;

        specialinvoke $r8.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>(i1, i0);

        throw $r8;

     label8:
        staticinvoke <org.apache.commons.math3.util.MathArrays: void checkOrder(double[])>($r1);

        staticinvoke <org.apache.commons.math3.util.MathArrays: void checkOrder(double[])>($r2);

        $r9 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r1 = (double[]) $r9;

        r0.<org.apache.commons.math3.analysis.interpolation.PiecewiseBicubicSplineInterpolatingFunction: double[] xval> = $r1;

        $r9 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r1 = (double[]) $r9;

        r0.<org.apache.commons.math3.analysis.interpolation.PiecewiseBicubicSplineInterpolatingFunction: double[] yval> = $r1;

        $r9 = virtualinvoke $r3.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (double[][]) $r9;

        r0.<org.apache.commons.math3.analysis.interpolation.PiecewiseBicubicSplineInterpolatingFunction: double[][] fval> = $r3;

        return;
    }
    private int searchIndex(double, double[], int, int)
    {
        org.apache.commons.math3.analysis.interpolation.PiecewiseBicubicSplineInterpolatingFunction r0;
        double $d0;
        double[] $r1;
        int $i0, $i1, $i2, $i3;
        org.apache.commons.math3.exception.OutOfRangeException $r2;
        java.lang.Double $r3, $r4, $r5;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.PiecewiseBicubicSplineInterpolatingFunction;

        $d0 := @parameter0: double;

        $r1 := @parameter1: double[];

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $i2 = staticinvoke <java.util.Arrays: int binarySearch(double[],double)>($r1, $d0);

        if $i2 == -1 goto label1;

        $i3 = lengthof $r1;

        $i3 = neg $i3;

        $i3 = $i3 + -1;

        if $i2 != $i3 goto label2;

     label1:
        $r2 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $d0 = $r1[0];

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $i0 = lengthof $r1;

        $i0 = $i0 + -1;

        $d0 = $r1[$i0];

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        specialinvoke $r2.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r3, $r4, $r5);

        throw $r2;

     label2:
        if $i2 >= 0 goto label5;

        $i2 = neg $i2;

        $i0 = $i2 - $i0;

        $i0 = $i0 + -1;

     label3:
        if $i0 >= 0 goto label4;

        $i0 = 0;

     label4:
        $i2 = $i0 + $i1;

        $i3 = lengthof $r1;

        if $i2 < $i3 goto label6;

        $i0 = lengthof $r1;

        $i0 = $i0 - $i1;

        return $i0;

     label5:
        $i0 = $i2 - $i0;

        goto label3;

     label6:
        return $i0;
    }
    public boolean isValidPoint(double, double)
    {
        org.apache.commons.math3.analysis.interpolation.PiecewiseBicubicSplineInterpolatingFunction r0;
        double $d0, $d1, $d2;
        double[] $r1, $r2;
        byte $b0;
        int $i1;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.PiecewiseBicubicSplineInterpolatingFunction;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $r1 = r0.<org.apache.commons.math3.analysis.interpolation.PiecewiseBicubicSplineInterpolatingFunction: double[] xval>;

        $d2 = $r1[0];

        $b0 = $d0 cmpg $d2;

        if $b0 < 0 goto label2;

        $r1 = r0.<org.apache.commons.math3.analysis.interpolation.PiecewiseBicubicSplineInterpolatingFunction: double[] xval>;

        $r2 = r0.<org.apache.commons.math3.analysis.interpolation.PiecewiseBicubicSplineInterpolatingFunction: double[] xval>;

        $i1 = lengthof $r2;

        $i1 = $i1 + -1;

        $d2 = $r1[$i1];

        $b0 = $d0 cmpl $d2;

        if $b0 > 0 goto label2;

        $r1 = r0.<org.apache.commons.math3.analysis.interpolation.PiecewiseBicubicSplineInterpolatingFunction: double[] yval>;

        $d0 = $r1[0];

        $b0 = $d1 cmpg $d0;

        if $b0 < 0 goto label2;

        $r1 = r0.<org.apache.commons.math3.analysis.interpolation.PiecewiseBicubicSplineInterpolatingFunction: double[] yval>;

        $r2 = r0.<org.apache.commons.math3.analysis.interpolation.PiecewiseBicubicSplineInterpolatingFunction: double[] yval>;

        $i1 = lengthof $r2;

        $i1 = $i1 + -1;

        $d0 = $r1[$i1];

        $b0 = $d1 cmpl $d0;

        if $b0 <= 0 goto label1;

        return 0;

     label1:
        return 1;

     label2:
        return 0;
    }
    public double value(double, double) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.analysis.interpolation.PiecewiseBicubicSplineInterpolatingFunction r0;
        double $d0, $d1, $d2;
        double[] r1, $r3, $r4, $r5, $r6;
        org.apache.commons.math3.analysis.interpolation.AkimaSplineInterpolator r2;
        int $i0, $i1, i2, $i3, $i4;
        double[][] $r7;
        org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction $r8;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.PiecewiseBicubicSplineInterpolatingFunction;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        r2 = new org.apache.commons.math3.analysis.interpolation.AkimaSplineInterpolator;

        specialinvoke r2.<org.apache.commons.math3.analysis.interpolation.AkimaSplineInterpolator: void <init>()>();

        r1 = r0.<org.apache.commons.math3.analysis.interpolation.PiecewiseBicubicSplineInterpolatingFunction: double[] xval>;

        $i0 = specialinvoke r0.<org.apache.commons.math3.analysis.interpolation.PiecewiseBicubicSplineInterpolatingFunction: int searchIndex(double,double[],int,int)>($d0, r1, 2, 5);

        r1 = r0.<org.apache.commons.math3.analysis.interpolation.PiecewiseBicubicSplineInterpolatingFunction: double[] yval>;

        $i1 = specialinvoke r0.<org.apache.commons.math3.analysis.interpolation.PiecewiseBicubicSplineInterpolatingFunction: int searchIndex(double,double[],int,int)>($d1, r1, 2, 5);

        $r3 = newarray (double)[5];

        $r4 = newarray (double)[5];

        $r5 = newarray (double)[5];

        r1 = newarray (double)[5];

        i2 = 0;

     label1:
        if i2 >= 5 goto label2;

        $r6 = r0.<org.apache.commons.math3.analysis.interpolation.PiecewiseBicubicSplineInterpolatingFunction: double[] xval>;

        $i3 = $i0 + i2;

        $d2 = $r6[$i3];

        $r3[i2] = $d2;

        $r6 = r0.<org.apache.commons.math3.analysis.interpolation.PiecewiseBicubicSplineInterpolatingFunction: double[] yval>;

        $i3 = $i1 + i2;

        $d2 = $r6[$i3];

        $r4[i2] = $d2;

        i2 = i2 + 1;

        goto label1;

     label2:
        i2 = 0;

     label3:
        if i2 >= 5 goto label6;

        $i3 = 0;

     label4:
        if $i3 >= 5 goto label5;

        $r7 = r0.<org.apache.commons.math3.analysis.interpolation.PiecewiseBicubicSplineInterpolatingFunction: double[][] fval>;

        $i4 = $i0 + $i3;

        $r6 = $r7[$i4];

        $i4 = $i1 + i2;

        $d2 = $r6[$i4];

        $r5[$i3] = $d2;

        $i3 = $i3 + 1;

        goto label4;

     label5:
        $r8 = virtualinvoke r2.<org.apache.commons.math3.analysis.interpolation.AkimaSplineInterpolator: org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction interpolate(double[],double[])>($r3, $r5);

        $d2 = virtualinvoke $r8.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: double value(double)>($d0);

        r1[i2] = $d2;

        i2 = i2 + 1;

        goto label3;

     label6:
        $r8 = virtualinvoke r2.<org.apache.commons.math3.analysis.interpolation.AkimaSplineInterpolator: org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction interpolate(double[],double[])>($r4, r1);

        $d0 = virtualinvoke $r8.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: double value(double)>($d1);

        return $d0;
    }
