org.apache.commons.math3.analysis.interpolation.MicrosphereProjectionInterpolator extends java.lang.Object implements org.apache.commons.math3.analysis.interpolation.MultivariateInterpolator
private final double exponent
private final org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere microsphere
private final double noInterpolationTolerance
private final boolean sharedSphere
    public void <init>(int, int, double, double, double, double, boolean, double)
    {
        org.apache.commons.math3.analysis.interpolation.MicrosphereProjectionInterpolator r0;
        int $i0, $i1;
        double $d0, $d1, $d2, $d3, $d4;
        boolean $z0;
        org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere $r1;
        org.apache.commons.math3.random.UnitSphereRandomVectorGenerator $r2;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.MicrosphereProjectionInterpolator;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $d0 := @parameter2: double;

        $d1 := @parameter3: double;

        $d2 := @parameter4: double;

        $d3 := @parameter5: double;

        $z0 := @parameter6: boolean;

        $d4 := @parameter7: double;

        $r1 = new org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere;

        $r2 = new org.apache.commons.math3.random.UnitSphereRandomVectorGenerator;

        specialinvoke $r2.<org.apache.commons.math3.random.UnitSphereRandomVectorGenerator: void <init>(int)>($i0);

        specialinvoke $r1.<org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere: void <init>(int,int,double,double,double,org.apache.commons.math3.random.UnitSphereRandomVectorGenerator)>($i0, $i1, $d0, $d1, $d2, $r2);

        specialinvoke r0.<org.apache.commons.math3.analysis.interpolation.MicrosphereProjectionInterpolator: void <init>(org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere,double,boolean,double)>($r1, $d3, $z0, $d4);

        return;
    }
    public void <init>(org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere, double, boolean, double) throws org.apache.commons.math3.exception.NotPositiveException
    {
        org.apache.commons.math3.analysis.interpolation.MicrosphereProjectionInterpolator r0;
        org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere $r1;
        double $d0, $d1;
        boolean $z0;
        java.lang.Double $r2;
        byte $b0;
        org.apache.commons.math3.exception.NotPositiveException $r3;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.MicrosphereProjectionInterpolator;

        $r1 := @parameter0: org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere;

        $d0 := @parameter1: double;

        $z0 := @parameter2: boolean;

        $d1 := @parameter3: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $b0 = $d0 cmpg 0.0;

        if $b0 >= 0 goto label1;

        $r3 = new org.apache.commons.math3.exception.NotPositiveException;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        specialinvoke $r3.<org.apache.commons.math3.exception.NotPositiveException: void <init>(java.lang.Number)>($r2);

        throw $r3;

     label1:
        r0.<org.apache.commons.math3.analysis.interpolation.MicrosphereProjectionInterpolator: org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere microsphere> = $r1;

        r0.<org.apache.commons.math3.analysis.interpolation.MicrosphereProjectionInterpolator: double exponent> = $d0;

        r0.<org.apache.commons.math3.analysis.interpolation.MicrosphereProjectionInterpolator: boolean sharedSphere> = $z0;

        r0.<org.apache.commons.math3.analysis.interpolation.MicrosphereProjectionInterpolator: double noInterpolationTolerance> = $d1;

        return;
    }
    static double access$000(org.apache.commons.math3.analysis.interpolation.MicrosphereProjectionInterpolator)
    {
        org.apache.commons.math3.analysis.interpolation.MicrosphereProjectionInterpolator $r0;
        double d0;

        $r0 := @parameter0: org.apache.commons.math3.analysis.interpolation.MicrosphereProjectionInterpolator;

        d0 = $r0.<org.apache.commons.math3.analysis.interpolation.MicrosphereProjectionInterpolator: double exponent>;

        return d0;
    }
    static double access$100(org.apache.commons.math3.analysis.interpolation.MicrosphereProjectionInterpolator)
    {
        org.apache.commons.math3.analysis.interpolation.MicrosphereProjectionInterpolator $r0;
        double d0;

        $r0 := @parameter0: org.apache.commons.math3.analysis.interpolation.MicrosphereProjectionInterpolator;

        d0 = $r0.<org.apache.commons.math3.analysis.interpolation.MicrosphereProjectionInterpolator: double noInterpolationTolerance>;

        return d0;
    }
    public org.apache.commons.math3.analysis.MultivariateFunction interpolate(double[][], double[]) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.analysis.interpolation.MicrosphereProjectionInterpolator r0;
        double[][] $r1;
        double[] $r2, $r6;
        org.apache.commons.math3.exception.NullArgumentException $r3;
        int $i0, $i1;
        org.apache.commons.math3.exception.NoDataException $r4;
        org.apache.commons.math3.exception.DimensionMismatchException $r5;
        org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere $r7;
        boolean $z0;
        org.apache.commons.math3.analysis.interpolation.MicrosphereProjectionInterpolator$1 $r8;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.MicrosphereProjectionInterpolator;

        $r1 := @parameter0: double[][];

        $r2 := @parameter1: double[];

        if $r1 == null goto label1;

        if $r2 != null goto label2;

     label1:
        $r3 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r3.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r3;

     label2:
        $i0 = lengthof $r1;

        if $i0 != 0 goto label3;

        $r4 = new org.apache.commons.math3.exception.NoDataException;

        specialinvoke $r4.<org.apache.commons.math3.exception.NoDataException: void <init>()>();

        throw $r4;

     label3:
        $i0 = lengthof $r1;

        $i1 = lengthof $r2;

        if $i0 == $i1 goto label4;

        $r5 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i0 = lengthof $r1;

        $i1 = lengthof $r2;

        specialinvoke $r5.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i0, $i1);

        throw $r5;

     label4:
        $r6 = $r1[0];

        if $r6 != null goto label5;

        $r3 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r3.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r3;

     label5:
        $r7 = r0.<org.apache.commons.math3.analysis.interpolation.MicrosphereProjectionInterpolator: org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere microsphere>;

        $i0 = virtualinvoke $r7.<org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere: int getDimension()>();

        $r6 = $r1[0];

        $i1 = lengthof $r6;

        if $i0 == $i1 goto label6;

        $r5 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $r2 = $r1[0];

        $i1 = lengthof $r2;

        specialinvoke $r5.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i1, $i0);

        throw $r5;

     label6:
        $z0 = r0.<org.apache.commons.math3.analysis.interpolation.MicrosphereProjectionInterpolator: boolean sharedSphere>;

        if $z0 == 0 goto label8;

        $r7 = r0.<org.apache.commons.math3.analysis.interpolation.MicrosphereProjectionInterpolator: org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere microsphere>;

     label7:
        $r8 = new org.apache.commons.math3.analysis.interpolation.MicrosphereProjectionInterpolator$1;

        specialinvoke $r8.<org.apache.commons.math3.analysis.interpolation.MicrosphereProjectionInterpolator$1: void <init>(org.apache.commons.math3.analysis.interpolation.MicrosphereProjectionInterpolator,org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere,double[][],double[])>(r0, $r7, $r1, $r2);

        return $r8;

     label8:
        $r7 = r0.<org.apache.commons.math3.analysis.interpolation.MicrosphereProjectionInterpolator: org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere microsphere>;

        $r7 = virtualinvoke $r7.<org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere: org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere copy()>();

        goto label7;
    }
