org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator extends java.lang.Object implements org.apache.commons.math3.analysis.differentiation.UnivariateFunctionDifferentiator org.apache.commons.math3.analysis.differentiation.UnivariateVectorFunctionDifferentiator org.apache.commons.math3.analysis.differentiation.UnivariateMatrixFunctionDifferentiator java.io.Serializable
private static final long serialVersionUID
private final double halfSampleSpan
private final int nbPoints
private final double stepSize
private final double tMax
private final double tMin
    public void <init>(int, double) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator r0;
        int $i0;
        double $d0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator;

        $i0 := @parameter0: int;

        $d0 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator: void <init>(int,double,double,double)>($i0, $d0, #-Infinity, #Infinity);

        return;
    }
    public void <init>(int, double, double, double) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator r0;
        int $i0;
        double $d0, $d1, $d2, $d3;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r1;
        java.lang.Double $r2, $r6;
        java.lang.Integer $r3;
        byte $b1;
        org.apache.commons.math3.exception.NotPositiveException $r4;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r5;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator;

        $i0 := @parameter0: int;

        $d0 := @parameter1: double;

        $d1 := @parameter2: double;

        $d2 := @parameter3: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if $i0 > 1 goto label1;

        $r1 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke $r1.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r2, $r3, 0);

        throw $r1;

     label1:
        r0.<org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator: int nbPoints> = $i0;

        $b1 = $d0 cmpg 0.0;

        if $b1 > 0 goto label2;

        $r4 = new org.apache.commons.math3.exception.NotPositiveException;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        specialinvoke $r4.<org.apache.commons.math3.exception.NotPositiveException: void <init>(java.lang.Number)>($r2);

        throw $r4;

     label2:
        r0.<org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator: double stepSize> = $d0;

        $d0 = 0.5 * $d0;

        $i0 = $i0 + -1;

        $d3 = (double) $i0;

        $d0 = $d0 * $d3;

        r0.<org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator: double halfSampleSpan> = $d0;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator: double halfSampleSpan>;

        $d0 = 2.0 * $d0;

        $d3 = $d2 - $d1;

        $b1 = $d0 cmpl $d3;

        if $b1 < 0 goto label3;

        $r5 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator: double halfSampleSpan>;

        $d0 = 2.0 * $d0;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $d0 = $d2 - $d1;

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        specialinvoke $r5.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r2, $r6, 0);

        throw $r5;

     label3:
        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator: double halfSampleSpan>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double ulp(double)>($d0);

        $d3 = r0.<org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator: double halfSampleSpan>;

        $d1 = $d3 + $d1;

        $d1 = $d1 + $d0;

        r0.<org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator: double tMin> = $d1;

        $d1 = r0.<org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator: double halfSampleSpan>;

        $d1 = $d2 - $d1;

        $d0 = $d1 - $d0;

        r0.<org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator: double tMax> = $d0;

        return;
    }
    static int access$000(org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator)
    {
        org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator $r0;
        int i0;

        $r0 := @parameter0: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator;

        i0 = $r0.<org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator: int nbPoints>;

        return i0;
    }
    static double access$100(org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator)
    {
        org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator $r0;
        double d0;

        $r0 := @parameter0: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator;

        d0 = $r0.<org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator: double tMax>;

        return d0;
    }
    static double access$200(org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator)
    {
        org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator $r0;
        double d0;

        $r0 := @parameter0: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator;

        d0 = $r0.<org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator: double tMin>;

        return d0;
    }
    static double access$300(org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator)
    {
        org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator $r0;
        double d0;

        $r0 := @parameter0: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator;

        d0 = $r0.<org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator: double halfSampleSpan>;

        return d0;
    }
    static double access$400(org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator)
    {
        org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator $r0;
        double d0;

        $r0 := @parameter0: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator;

        d0 = $r0.<org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator: double stepSize>;

        return d0;
    }
    static org.apache.commons.math3.analysis.differentiation.DerivativeStructure access$500(org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator, org.apache.commons.math3.analysis.differentiation.DerivativeStructure, double, double[]) throws org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator $r0;
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure $r1;
        double $d0;
        double[] $r2;

        $r0 := @parameter0: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator;

        $r1 := @parameter1: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $d0 := @parameter2: double;

        $r2 := @parameter3: double[];

        $r1 = specialinvoke $r0.<org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator: org.apache.commons.math3.analysis.differentiation.DerivativeStructure evaluate(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,double[])>($r1, $d0, $r2);

        return $r1;
    }
    private org.apache.commons.math3.analysis.differentiation.DerivativeStructure evaluate(org.apache.commons.math3.analysis.differentiation.DerivativeStructure, double, double[]) throws org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator r0;
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure $r1, r4, r6;
        double $d0, $d1, $d2, $d3;
        double[] $r2, r3, r5;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator;

        $r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $d0 := @parameter1: double;

        $r2 := @parameter2: double[];

        $i0 = r0.<org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator: int nbPoints>;

        r5 = newarray (double)[$i0];

        $i0 = r0.<org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator: int nbPoints>;

        r3 = newarray (double)[$i0];

        $i0 = 0;

     label1:
        $i1 = r0.<org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator: int nbPoints>;

        if $i0 >= $i1 goto label4;

        $d1 = $r2[$i0];

        r3[$i0] = $d1;

        $i1 = 1;

     label2:
        if $i1 > $i0 goto label3;

        $i2 = $i0 - $i1;

        $i3 = $i0 - $i1;

        $i3 = $i3 + 1;

        $d1 = r3[$i3];

        $i3 = $i0 - $i1;

        $d2 = r3[$i3];

        $d1 = $d1 - $d2;

        $d2 = (double) $i1;

        $d3 = r0.<org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator: double stepSize>;

        $d2 = $d2 * $d3;

        $d1 = $d1 / $d2;

        r3[$i2] = $d1;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $d1 = r3[0];

        r5[$i0] = $d1;

        $i0 = $i0 + 1;

        goto label1;

     label4:
        $i0 = virtualinvoke $r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getOrder()>();

        $i1 = virtualinvoke $r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getFreeParameters()>();

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] getAllDerivatives()>();

        $d1 = virtualinvoke $r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getValue()>();

        $d0 = $d1 - $d0;

        $r1 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(int,int,double)>($i1, $i0, 0.0);

        r6 = null;

        $i2 = 0;

     label5:
        $i3 = r0.<org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator: int nbPoints>;

        if $i2 >= $i3 goto label8;

        if $i2 != 0 goto label7;

        r6 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        specialinvoke r6.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(int,int,double)>($i1, $i0, 1.0);

     label6:
        $d1 = r5[$i2];

        r4 = virtualinvoke r6.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure multiply(double)>($d1);

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure add(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)>(r4);

        $i2 = $i2 + 1;

        goto label5;

     label7:
        $i3 = $i2 + -1;

        $d1 = (double) $i3;

        $d2 = r0.<org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator: double stepSize>;

        $d1 = $d1 * $d2;

        $d1 = $d0 - $d1;

        $r2[0] = $d1;

        r4 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        specialinvoke r4.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(int,int,double[])>($i1, $i0, $r2);

        r6 = virtualinvoke r6.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure multiply(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)>(r4);

        goto label6;

     label8:
        return $r1;
    }
    public org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction differentiate(org.apache.commons.math3.analysis.UnivariateFunction)
    {
        org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator r0;
        org.apache.commons.math3.analysis.UnivariateFunction $r1;
        org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator$1 $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator;

        $r1 := @parameter0: org.apache.commons.math3.analysis.UnivariateFunction;

        $r2 = new org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator$1;

        specialinvoke $r2.<org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator$1: void <init>(org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator,org.apache.commons.math3.analysis.UnivariateFunction)>(r0, $r1);

        return $r2;
    }
    public org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableMatrixFunction differentiate(org.apache.commons.math3.analysis.UnivariateMatrixFunction)
    {
        org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator r0;
        org.apache.commons.math3.analysis.UnivariateMatrixFunction $r1;
        org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator$3 $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator;

        $r1 := @parameter0: org.apache.commons.math3.analysis.UnivariateMatrixFunction;

        $r2 = new org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator$3;

        specialinvoke $r2.<org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator$3: void <init>(org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator,org.apache.commons.math3.analysis.UnivariateMatrixFunction)>(r0, $r1);

        return $r2;
    }
    public org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableVectorFunction differentiate(org.apache.commons.math3.analysis.UnivariateVectorFunction)
    {
        org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator r0;
        org.apache.commons.math3.analysis.UnivariateVectorFunction $r1;
        org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator$2 $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator;

        $r1 := @parameter0: org.apache.commons.math3.analysis.UnivariateVectorFunction;

        $r2 = new org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator$2;

        specialinvoke $r2.<org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator$2: void <init>(org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator,org.apache.commons.math3.analysis.UnivariateVectorFunction)>(r0, $r1);

        return $r2;
    }
    public int getNbPoints()
    {
        org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator r0;
        int i0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator;

        i0 = r0.<org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator: int nbPoints>;

        return i0;
    }
    public double getStepSize()
    {
        org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator r0;
        double d0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator;

        d0 = r0.<org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator: double stepSize>;

        return d0;
    }
