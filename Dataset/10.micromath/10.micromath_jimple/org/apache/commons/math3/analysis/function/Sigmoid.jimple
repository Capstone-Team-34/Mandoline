org.apache.commons.math3.analysis.function.Sigmoid extends java.lang.Object implements org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction org.apache.commons.math3.analysis.DifferentiableUnivariateFunction
private final double hi
private final double lo
    public void <init>()
    {
        org.apache.commons.math3.analysis.function.Sigmoid r0;

        r0 := @this: org.apache.commons.math3.analysis.function.Sigmoid;

        specialinvoke r0.<org.apache.commons.math3.analysis.function.Sigmoid: void <init>(double,double)>(0.0, 1.0);

        return;
    }
    public void <init>(double, double)
    {
        org.apache.commons.math3.analysis.function.Sigmoid r0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.analysis.function.Sigmoid;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.analysis.function.Sigmoid: double lo> = $d0;

        r0.<org.apache.commons.math3.analysis.function.Sigmoid: double hi> = $d1;

        return;
    }
    static double access$000(double, double, double)
    {
        double $d0, $d1, $d2;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $d0 = staticinvoke <org.apache.commons.math3.analysis.function.Sigmoid: double value(double,double,double)>($d0, $d1, $d2);

        return $d0;
    }
    private static double value(double, double, double)
    {
        double $d0, $d1, $d2;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $d2 = $d2 - $d1;

        $d0 = neg $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d0);

        $d0 = 1.0 + $d0;

        $d0 = $d2 / $d0;

        $d0 = $d0 + $d1;

        return $d0;
    }
    public org.apache.commons.math3.analysis.UnivariateFunction derivative()
    {
        org.apache.commons.math3.analysis.function.Sigmoid r0;
        org.apache.commons.math3.analysis.DifferentiableUnivariateFunction $r1;
        org.apache.commons.math3.analysis.UnivariateFunction $r2;

        r0 := @this: org.apache.commons.math3.analysis.function.Sigmoid;

        $r1 = staticinvoke <org.apache.commons.math3.analysis.FunctionUtils: org.apache.commons.math3.analysis.DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction)>(r0);

        $r2 = interfaceinvoke $r1.<org.apache.commons.math3.analysis.DifferentiableUnivariateFunction: org.apache.commons.math3.analysis.UnivariateFunction derivative()>();

        return $r2;
    }
    public double value(double)
    {
        org.apache.commons.math3.analysis.function.Sigmoid r0;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.analysis.function.Sigmoid;

        $d0 := @parameter0: double;

        $d1 = r0.<org.apache.commons.math3.analysis.function.Sigmoid: double lo>;

        $d2 = r0.<org.apache.commons.math3.analysis.function.Sigmoid: double hi>;

        $d0 = staticinvoke <org.apache.commons.math3.analysis.function.Sigmoid: double value(double,double,double)>($d0, $d1, $d2);

        return $d0;
    }
    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.analysis.function.Sigmoid r0;
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure $r1;
        double[] r2, r3;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6;
        int $i0, $i1, $i2, $i3;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.analysis.function.Sigmoid;

        $r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getOrder()>();

        $i0 = $i0 + 1;

        r2 = newarray (double)[$i0];

        $d2 = virtualinvoke $r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getValue()>();

        $d2 = neg $d2;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d2);

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d2);

        if $z0 == 0 goto label2;

        $d2 = r0.<org.apache.commons.math3.analysis.function.Sigmoid: double lo>;

        r2[0] = $d2;

        $i0 = lengthof r2;

        staticinvoke <java.util.Arrays: void fill(double[],int,int,double)>(r2, 1, $i0, 0.0);

     label1:
        $r1 = virtualinvoke $r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure compose(double[])>(r2);

        return $r1;

     label2:
        $i0 = lengthof r2;

        r3 = newarray (double)[$i0];

        d0 = 1.0 + $d2;

        d0 = 1.0 / d0;

        $d3 = r0.<org.apache.commons.math3.analysis.function.Sigmoid: double hi>;

        $d4 = r0.<org.apache.commons.math3.analysis.function.Sigmoid: double lo>;

        $d3 = $d3 - $d4;

        $i0 = 0;

     label3:
        $i1 = lengthof r2;

        if $i0 >= $i1 goto label8;

        $d4 = 0.0;

        $d5 = (double) 4607182418800017408L;

        r3[$i0] = $d5;

        $i1 = $i0;

     label4:
        if $i1 < 0 goto label7;

        $d4 = $d4 * $d2;

        $d5 = r3[$i1];

        $d4 = $d4 + $d5;

        if $i1 <= 1 goto label6;

        $i2 = $i1 + -1;

        $i3 = $i0 - $i1;

        $i3 = $i3 + 2;

        $d5 = (double) $i3;

        $i3 = $i1 + -2;

        $d1 = r3[$i3];

        $d5 = $d5 * $d1;

        $i3 = $i1 + -1;

        $d6 = (double) $i3;

        $i3 = $i1 + -1;

        $d1 = r3[$i3];

        $d1 = $d6 * $d1;

        $d5 = $d5 - $d1;

        r3[$i2] = $d5;

     label5:
        $i1 = $i1 + -1;

        goto label4;

     label6:
        r3[0] = 0.0;

        goto label5;

     label7:
        $d3 = $d3 * d0;

        $d4 = $d3 * $d4;

        r2[$i0] = $d4;

        $i0 = $i0 + 1;

        goto label3;

     label8:
        $d2 = r2[0];

        d0 = r0.<org.apache.commons.math3.analysis.function.Sigmoid: double lo>;

        $d2 = $d2 + d0;

        r2[0] = $d2;

        goto label1;
    }
