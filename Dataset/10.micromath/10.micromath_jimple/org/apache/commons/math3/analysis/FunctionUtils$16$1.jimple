org.apache.commons.math3.analysis.FunctionUtils$16$1 extends java.lang.Object implements org.apache.commons.math3.analysis.MultivariateFunction
final org.apache.commons.math3.analysis.FunctionUtils$16 this$0
final int val$k
    void <init>(org.apache.commons.math3.analysis.FunctionUtils$16, int)
    {
        org.apache.commons.math3.analysis.FunctionUtils$16$1 r0;
        org.apache.commons.math3.analysis.FunctionUtils$16 $r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.analysis.FunctionUtils$16$1;

        $r1 := @parameter0: org.apache.commons.math3.analysis.FunctionUtils$16;

        $i0 := @parameter1: int;

        r0.<org.apache.commons.math3.analysis.FunctionUtils$16$1: org.apache.commons.math3.analysis.FunctionUtils$16 this$0> = $r1;

        r0.<org.apache.commons.math3.analysis.FunctionUtils$16$1: int val$k> = $i0;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public double value(double[])
    {
        org.apache.commons.math3.analysis.FunctionUtils$16$1 r0;
        double[] $r1;
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] r2;
        int i0, i1, $i2;
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure $r3;
        double $d0;
        org.apache.commons.math3.analysis.FunctionUtils$16 $r4;
        org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableFunction $r5;
        int[] $r6;

        r0 := @this: org.apache.commons.math3.analysis.FunctionUtils$16$1;

        $r1 := @parameter0: double[];

        i0 = lengthof $r1;

        r2 = newarray (org.apache.commons.math3.analysis.differentiation.DerivativeStructure)[i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        $i2 = r0.<org.apache.commons.math3.analysis.FunctionUtils$16$1: int val$k>;

        if i1 != $i2 goto label3;

        $r3 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $d0 = $r1[i1];

        specialinvoke $r3.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(int,int,int,double)>(1, 1, 0, $d0);

        r2[i1] = $r3;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r3 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $d0 = $r1[i1];

        specialinvoke $r3.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(int,int,double)>(1, 1, $d0);

        r2[i1] = $r3;

        goto label2;

     label4:
        $r4 = r0.<org.apache.commons.math3.analysis.FunctionUtils$16$1: org.apache.commons.math3.analysis.FunctionUtils$16 this$0>;

        $r5 = $r4.<org.apache.commons.math3.analysis.FunctionUtils$16: org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableFunction val$f>;

        $r3 = interfaceinvoke $r5.<org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableFunction: org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure[])>(r2);

        $r6 = newarray (int)[1];

        $r6[0] = 1;

        $d0 = virtualinvoke $r3.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getPartialDerivative(int[])>($r6);

        return $d0;
    }
