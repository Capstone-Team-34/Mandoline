org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm extends java.lang.Object implements org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction
private final double[] a
private final double[] c
private double[] coefficients
private boolean coefficientsComputed
    public void <init>(double[], double[]) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm r0;
        double[] $r1, $r2, $r3;
        int $i0;

        r0 := @this: org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm: void verifyInputArray(double[],double[])>($r1, $r2);

        $i0 = lengthof $r1;

        $r3 = newarray (double)[$i0];

        r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm: double[] a> = $r3;

        $i0 = lengthof $r2;

        $r3 = newarray (double)[$i0];

        r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm: double[] c> = $r3;

        $r3 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm: double[] a>;

        $i0 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r3, 0, $i0);

        $r1 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm: double[] c>;

        $i0 = lengthof $r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r1, 0, $i0);

        r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm: boolean coefficientsComputed> = 0;

        return;
    }
    public static double evaluate(double[], double[], double) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NoDataException
    {
        double[] $r0, $r1;
        double $d0, $d1, d2, $d3;
        int i0;

        $r0 := @parameter0: double[];

        $r1 := @parameter1: double[];

        $d0 := @parameter2: double;

        staticinvoke <org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm: void verifyInputArray(double[],double[])>($r0, $r1);

        i0 = lengthof $r1;

        d2 = $r0[i0];

        i0 = i0 + -1;

     label1:
        if i0 < 0 goto label2;

        $d1 = $r0[i0];

        $d3 = $r1[i0];

        $d3 = $d0 - $d3;

        d2 = $d3 * d2;

        d2 = $d1 + d2;

        i0 = i0 + -1;

        goto label1;

     label2:
        return d2;
    }
    protected static void verifyInputArray(double[], double[]) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.DimensionMismatchException
    {
        double[] $r0, $r1;
        int $i0, $i1;
        org.apache.commons.math3.exception.NoDataException $r2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3;
        org.apache.commons.math3.exception.DimensionMismatchException $r4;

        $r0 := @parameter0: double[];

        $r1 := @parameter1: double[];

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>($r0);

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>($r1);

        $i0 = lengthof $r0;

        if $i0 == 0 goto label1;

        $i0 = lengthof $r1;

        if $i0 != 0 goto label2;

     label1:
        $r2 = new org.apache.commons.math3.exception.NoDataException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY>;

        specialinvoke $r2.<org.apache.commons.math3.exception.NoDataException: void <init>(org.apache.commons.math3.exception.util.Localizable)>($r3);

        throw $r2;

     label2:
        $i0 = lengthof $r0;

        $i1 = lengthof $r1;

        $i1 = $i1 + 1;

        if $i0 == $i1 goto label3;

        $r4 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1>;

        $i0 = lengthof $r0;

        $i1 = lengthof $r1;

        specialinvoke $r4.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(org.apache.commons.math3.exception.util.Localizable,int,int)>($r3, $i0, $i1);

        throw $r4;

     label3:
        return;
    }
    protected void computeCoefficients()
    {
        org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm r0;
        int $i0, $i1, i2, i3;
        double[] $r1, $r2;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm;

        $i1 = virtualinvoke r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm: int degree()>();

        $i0 = $i1 + 1;

        $r1 = newarray (double)[$i0];

        r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm: double[] coefficients> = $r1;

        $i0 = 0;

     label1:
        if $i0 > $i1 goto label2;

        $r1 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm: double[] coefficients>;

        $r1[$i0] = 0.0;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $r1 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm: double[] coefficients>;

        $r2 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm: double[] a>;

        $d0 = $r2[$i1];

        $r1[0] = $d0;

        i2 = $i1 + -1;

     label3:
        if i2 < 0 goto label6;

        i3 = $i1 - i2;

     label4:
        if i3 <= 0 goto label5;

        $r1 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm: double[] coefficients>;

        $r2 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm: double[] coefficients>;

        $i0 = i3 + -1;

        $d0 = $r2[$i0];

        $r2 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm: double[] c>;

        $d1 = $r2[i2];

        $r2 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm: double[] coefficients>;

        $d2 = $r2[i3];

        $d1 = $d1 * $d2;

        $d0 = $d0 - $d1;

        $r1[i3] = $d0;

        i3 = i3 + -1;

        goto label4;

     label5:
        $r1 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm: double[] coefficients>;

        $r2 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm: double[] a>;

        $d0 = $r2[i2];

        $r2 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm: double[] c>;

        $d1 = $r2[i2];

        $r2 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm: double[] coefficients>;

        $d2 = $r2[0];

        $d1 = $d1 * $d2;

        $d0 = $d0 - $d1;

        $r1[0] = $d0;

        i2 = i2 + -1;

        goto label3;

     label6:
        r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm: boolean coefficientsComputed> = 1;

        return;
    }
    public int degree()
    {
        org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm r0;
        double[] $r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm;

        $r1 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm: double[] c>;

        $i0 = lengthof $r1;

        return $i0;
    }
    public double[] getCenters()
    {
        org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm r0;
        double[] r1, $r2, $r3;
        int $i0;

        r0 := @this: org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm;

        r1 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm: double[] c>;

        $i0 = lengthof r1;

        r1 = newarray (double)[$i0];

        $r2 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm: double[] c>;

        $r3 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm: double[] c>;

        $i0 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, 0, $i0);

        return r1;
    }
    public double[] getCoefficients()
    {
        org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm r0;
        double[] r1, $r2, $r3;
        boolean $z0;
        int $i0;

        r0 := @this: org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm;

        $z0 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm: boolean coefficientsComputed>;

        if $z0 != 0 goto label1;

        virtualinvoke r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm: void computeCoefficients()>();

     label1:
        r1 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm: double[] coefficients>;

        $i0 = lengthof r1;

        r1 = newarray (double)[$i0];

        $r2 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm: double[] coefficients>;

        $r3 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm: double[] coefficients>;

        $i0 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, 0, $i0);

        return r1;
    }
    public double[] getNewtonCoefficients()
    {
        org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm r0;
        double[] r1, $r2, $r3;
        int $i0;

        r0 := @this: org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm;

        r1 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm: double[] a>;

        $i0 = lengthof r1;

        r1 = newarray (double)[$i0];

        $r2 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm: double[] a>;

        $r3 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm: double[] a>;

        $i0 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, 0, $i0);

        return r1;
    }
    public double value(double)
    {
        org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm r0;
        double $d0;
        double[] $r1, $r2;

        r0 := @this: org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm;

        $d0 := @parameter0: double;

        $r2 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm: double[] a>;

        $r1 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm: double[] c>;

        $d0 = staticinvoke <org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm: double evaluate(double[],double[],double)>($r2, $r1, $d0);

        return $d0;
    }
    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)
    {
        org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm r0;
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure $r1, r4, $r5;
        int i0, $i1, $i2;
        double[] $r2, $r3;
        double $d0;

        r0 := @this: org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm;

        $r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r2 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm: double[] a>;

        $r3 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm: double[] c>;

        staticinvoke <org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm: void verifyInputArray(double[],double[])>($r2, $r3);

        $r2 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm: double[] c>;

        i0 = lengthof $r2;

        r4 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $i1 = virtualinvoke $r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getFreeParameters()>();

        $i2 = virtualinvoke $r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getOrder()>();

        $r2 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm: double[] a>;

        $d0 = $r2[i0];

        specialinvoke r4.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(int,int,double)>($i1, $i2, $d0);

        i0 = i0 + -1;

     label1:
        if i0 < 0 goto label2;

        $r2 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm: double[] c>;

        $d0 = $r2[i0];

        $r5 = virtualinvoke $r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure subtract(double)>($d0);

        r4 = virtualinvoke $r5.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure multiply(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)>(r4);

        $r2 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm: double[] a>;

        $d0 = $r2[i0];

        r4 = virtualinvoke r4.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure add(double)>($d0);

        i0 = i0 + -1;

        goto label1;

     label2:
        return r4;
    }
