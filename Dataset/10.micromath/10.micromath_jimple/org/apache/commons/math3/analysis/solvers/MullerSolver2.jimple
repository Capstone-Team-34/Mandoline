org.apache.commons.math3.analysis.solvers.MullerSolver2 extends org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver
private static final double DEFAULT_ABSOLUTE_ACCURACY
    public void <init>()
    {
        org.apache.commons.math3.analysis.solvers.MullerSolver2 r0;

        r0 := @this: org.apache.commons.math3.analysis.solvers.MullerSolver2;

        specialinvoke r0.<org.apache.commons.math3.analysis.solvers.MullerSolver2: void <init>(double)>(1.0E-6);

        return;
    }
    public void <init>(double)
    {
        org.apache.commons.math3.analysis.solvers.MullerSolver2 r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.analysis.solvers.MullerSolver2;

        $d0 := @parameter0: double;

        specialinvoke r0.<org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver: void <init>(double)>($d0);

        return;
    }
    public void <init>(double, double)
    {
        org.apache.commons.math3.analysis.solvers.MullerSolver2 r0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.analysis.solvers.MullerSolver2;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver: void <init>(double,double)>($d0, $d1);

        return;
    }
    protected double doSolve() throws org.apache.commons.math3.exception.TooManyEvaluationsException, org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.exception.NoBracketingException
    {
        org.apache.commons.math3.analysis.solvers.MullerSolver2 r0;
        org.apache.commons.math3.exception.NoBracketingException $r1;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, d12, $d13, $d14, $d15;
        byte $b0;

        r0 := @this: org.apache.commons.math3.analysis.solvers.MullerSolver2;

        $d4 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.MullerSolver2: double getMin()>();

        $d5 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.MullerSolver2: double getMax()>();

        virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.MullerSolver2: void verifyInterval(double,double)>($d4, $d5);

        $d6 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.MullerSolver2: double getRelativeAccuracy()>();

        $d7 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.MullerSolver2: double getAbsoluteAccuracy()>();

        $d8 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.MullerSolver2: double getFunctionValueAccuracy()>();

        d3 = $d4;

        $d9 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.MullerSolver2: double computeObjectiveValue(double)>($d4);

        d2 = $d9;

        $d10 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d9);

        $b0 = $d10 cmpg $d8;

        if $b0 >= 0 goto label01;

        return $d4;

     label01:
        $d10 = $d5;

        $d11 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.MullerSolver2: double computeObjectiveValue(double)>($d5);

        d12 = $d11;

        $d13 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d11);

        $b0 = $d13 cmpg $d8;

        if $b0 < 0 goto label13;

        $d13 = $d9 * $d11;

        $b0 = $d13 cmpl 0.0;

        if $b0 <= 0 goto label02;

        $r1 = new org.apache.commons.math3.exception.NoBracketingException;

        specialinvoke $r1.<org.apache.commons.math3.exception.NoBracketingException: void <init>(double,double,double,double)>($d4, $d5, $d9, $d11);

        throw $r1;

     label02:
        $d9 = $d4 + $d5;

        $d9 = 0.5 * $d9;

        $d11 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.MullerSolver2: double computeObjectiveValue(double)>($d9);

        $d13 = #Infinity;

     label03:
        d0 = $d9 - $d10;

        d3 = $d10 - d3;

        d3 = d0 / d3;

        d0 = 1.0 + d3;

        d0 = d0 * d12;

        d0 = $d11 - d0;

        d1 = d3 * d2;

        d0 = d0 + d1;

        d0 = d3 * d0;

        d1 = 2.0 * d3;

        d1 = d1 + 1.0;

        d1 = d1 * $d11;

        $d14 = 1.0 + d3;

        $d15 = 1.0 + d3;

        $d14 = $d14 * $d15;

        $d14 = $d14 * d12;

        d1 = d1 - $d14;

        $d14 = d3 * d3;

        d2 = $d14 * d2;

        d1 = d1 + d2;

        d2 = 1.0 + d3;

        d2 = d2 * $d11;

        d3 = d1 * d1;

        d0 = 4.0 * d0;

        d0 = d0 * d2;

        d0 = d3 - d0;

        $b0 = d0 cmpl 0.0;

        if $b0 < 0 goto label08;

        d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d0);

        d3 = d1 + d3;

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d0);

        d0 = d1 - d0;

        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d3);

        $d14 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d0);

        $b0 = d1 cmpl $d14;

        if $b0 <= 0 goto label07;

     label04:
        $b0 = d3 cmpl 0.0;

        if $b0 == 0 goto label09;

        d2 = 2.0 * d2;

        d0 = $d9 - $d10;

        d2 = d2 * d0;

        d2 = d2 / d3;

        d0 = $d9 - d2;

     label05:
        $b0 = d0 cmpl $d10;

        if $b0 == 0 goto label06;

        $b0 = d0 cmpl $d9;

        if $b0 != 0 goto label10;

     label06:
        d0 = d0 + $d7;

        goto label05;

     label07:
        d3 = d0;

        goto label04;

     label08:
        d3 = d1 * d1;

        d3 = d3 - d0;

        d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d3);

        goto label04;

     label09:
        $d13 = staticinvoke <org.apache.commons.math3.util.FastMath: double random()>();

        d2 = $d5 - $d4;

        $d13 = $d13 * d2;

        d0 = $d4 + $d13;

        $d13 = #Infinity;

     label10:
        d1 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.MullerSolver2: double computeObjectiveValue(double)>(d0);

        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d0);

        d2 = d2 * $d6;

        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>(d2, $d7);

        $d13 = d0 - $d13;

        $d13 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d13);

        $b0 = $d13 cmpg d2;

        if $b0 <= 0 goto label11;

        $d13 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d1);

        $b0 = $d13 cmpg $d8;

        if $b0 > 0 goto label12;

     label11:
        return d0;

     label12:
        d3 = $d10;

        d2 = d12;

        $d10 = $d9;

        d12 = $d11;

        $d9 = d0;

        $d11 = d1;

        $d13 = d0;

        goto label03;

     label13:
        return $d5;
    }
