org.apache.commons.math3.analysis.function.Sinc extends java.lang.Object implements org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction org.apache.commons.math3.analysis.DifferentiableUnivariateFunction
private static final double SHORTCUT
private final boolean normalized
    public void <init>()
    {
        org.apache.commons.math3.analysis.function.Sinc r0;

        r0 := @this: org.apache.commons.math3.analysis.function.Sinc;

        specialinvoke r0.<org.apache.commons.math3.analysis.function.Sinc: void <init>(boolean)>(0);

        return;
    }
    public void <init>(boolean)
    {
        org.apache.commons.math3.analysis.function.Sinc r0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.analysis.function.Sinc;

        $z0 := @parameter0: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.analysis.function.Sinc: boolean normalized> = $z0;

        return;
    }
    public org.apache.commons.math3.analysis.UnivariateFunction derivative()
    {
        org.apache.commons.math3.analysis.function.Sinc r0;
        org.apache.commons.math3.analysis.DifferentiableUnivariateFunction $r1;
        org.apache.commons.math3.analysis.UnivariateFunction $r2;

        r0 := @this: org.apache.commons.math3.analysis.function.Sinc;

        $r1 = staticinvoke <org.apache.commons.math3.analysis.FunctionUtils: org.apache.commons.math3.analysis.DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction)>(r0);

        $r2 = interfaceinvoke $r1.<org.apache.commons.math3.analysis.DifferentiableUnivariateFunction: org.apache.commons.math3.analysis.UnivariateFunction derivative()>();

        return $r2;
    }
    public double value(double)
    {
        org.apache.commons.math3.analysis.function.Sinc r0;
        double $d0, $d1;
        boolean $z0;
        byte $b0;

        r0 := @this: org.apache.commons.math3.analysis.function.Sinc;

        $d0 := @parameter0: double;

        $z0 = r0.<org.apache.commons.math3.analysis.function.Sinc: boolean normalized>;

        if $z0 == 0 goto label2;

        $d0 = 3.141592653589793 * $d0;

     label1:
        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        $b0 = $d1 cmpg 0.006;

        if $b0 > 0 goto label3;

        $d0 = $d0 * $d0;

        $d1 = $d0 - 20.0;

        $d0 = $d1 * $d0;

        $d0 = $d0 + 120.0;

        $d0 = $d0 / 120.0;

        return $d0;

     label2:
        goto label1;

     label3:
        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sin(double)>($d0);

        $d0 = $d1 / $d0;

        return $d0;
    }
    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.analysis.function.Sinc r0;
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure $r1;
        double[] r2, r3;
        double d0, d1, d2, $d3, $d4, $d5, d6, d7, $d8, $d9;
        boolean $z0;
        int $i0, $i2, $i3, $i4;
        byte $b1;

        r0 := @this: org.apache.commons.math3.analysis.function.Sinc;

        $r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $z0 = r0.<org.apache.commons.math3.analysis.function.Sinc: boolean normalized>;

        if $z0 == 0 goto label05;

        d1 = 3.141592653589793;

     label01:
        d2 = virtualinvoke $r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getValue()>();

        d1 = d1 * d2;

        d2 = d1 * d1;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getOrder()>();

        $i0 = $i0 + 1;

        r2 = newarray (double)[$i0];

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d1);

        $b1 = d0 cmpg 0.006;

        if $b1 > 0 goto label10;

        $i0 = 0;

     label02:
        $i2 = lengthof r2;

        if $i0 >= $i2 goto label15;

        $i2 = $i0 / 2;

        $i3 = $i0 & 1;

        if $i3 != 0 goto label07;

        $i2 = $i2 & 1;

        if $i2 != 0 goto label06;

        $b1 = 1;

     label03:
        d0 = (double) $b1;

        $i2 = $i0 + 1;

        $d3 = (double) $i2;

        $d3 = 1.0 / $d3;

        $i2 = $i0 * 2;

        $i2 = $i2 + 6;

        $d4 = (double) $i2;

        $d4 = 1.0 / $d4;

        $i2 = $i0 * 24;

        $i2 = $i2 + 120;

        $d5 = (double) $i2;

        $d5 = d2 / $d5;

        $d4 = $d4 - $d5;

        $d4 = $d4 * d2;

        $d3 = $d3 - $d4;

        d0 = d0 * $d3;

        r2[$i0] = d0;

     label04:
        $i0 = $i0 + 1;

        goto label02;

     label05:
        d1 = 1.0;

        goto label01;

     label06:
        $b1 = -1;

        goto label03;

     label07:
        $i2 = $i2 & 1;

        if $i2 != 0 goto label09;

        d0 = neg d1;

     label08:
        $i2 = $i0 + 2;

        $d3 = (double) $i2;

        $d3 = 1.0 / $d3;

        $i2 = $i0 * 6;

        $i2 = $i2 + 24;

        $d4 = (double) $i2;

        $d4 = 1.0 / $d4;

        $i2 = $i0 * 120;

        $i2 = $i2 + 720;

        $d5 = (double) $i2;

        $d5 = d2 / $d5;

        $d4 = $d4 - $d5;

        $d4 = $d4 * d2;

        $d3 = $d3 - $d4;

        d0 = d0 * $d3;

        r2[$i0] = d0;

        goto label04;

     label09:
        d0 = d1;

        goto label08;

     label10:
        d0 = 1.0 / d1;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double cos(double)>(d1);

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double sin(double)>(d1);

        $d5 = d0 * $d4;

        r2[0] = $d5;

        $i0 = lengthof r2;

        r3 = newarray (double)[$i0];

        $d5 = (double) 4607182418800017408L;

        r3[0] = $d5;

        $d5 = d0;

        $i0 = 1;

     label11:
        $i2 = lengthof r2;

        if $i0 >= $i2 goto label15;

        d6 = 0.0;

        d7 = 0.0;

        $i2 = $i0 & 1;

        if $i2 != 0 goto label13;

        r3[$i0] = 0.0;

        $i2 = $i0;

     label12:
        if $i2 <= 1 goto label14;

        $i3 = $i2 - $i0;

        $d8 = (double) $i3;

        $d9 = r3[$i2];

        $d8 = $d8 * $d9;

        $i3 = $i2 + -1;

        $d9 = r3[$i3];

        $d8 = $d8 - $d9;

        r3[$i2] = $d8;

        d6 = d6 * d2;

        $d8 = r3[$i2];

        d6 = d6 + $d8;

        $i3 = $i2 + -1;

        $i4 = $i2 + -1;

        $i4 = $i4 - $i0;

        $d8 = (double) $i4;

        $i4 = $i2 + -1;

        $d9 = r3[$i4];

        $d8 = $d8 * $d9;

        $i4 = $i2 + -2;

        $d9 = r3[$i4];

        $d8 = $d8 + $d9;

        r3[$i3] = $d8;

        d7 = d7 * d2;

        $i3 = $i2 + -1;

        $d8 = r3[$i3];

        d7 = d7 + $d8;

        $i2 = $i2 + -2;

        goto label12;

     label13:
        $i2 = $i0 + -1;

        d7 = r3[$i2];

        r3[$i0] = d7;

        d7 = r3[$i0];

        $i2 = $i0 + -1;

        goto label12;

     label14:
        $d8 = r3[0];

        $i2 = neg $i0;

        $d9 = (double) $i2;

        $d8 = $d8 * $d9;

        r3[0] = $d8;

        d6 = d6 * d2;

        $d8 = r3[0];

        d6 = d6 + $d8;

        $d5 = $d5 * d0;

        d6 = d6 * $d4;

        d7 = d7 * d1;

        d7 = d7 * $d3;

        d7 = d6 + d7;

        d7 = d7 * $d5;

        r2[$i0] = d7;

        $i0 = $i0 + 1;

        goto label11;

     label15:
        $z0 = r0.<org.apache.commons.math3.analysis.function.Sinc: boolean normalized>;

        if $z0 == 0 goto label17;

        d1 = 3.141592653589793;

        $i0 = 1;

     label16:
        $i2 = lengthof r2;

        if $i0 >= $i2 goto label17;

        d2 = r2[$i0];

        d2 = d2 * d1;

        r2[$i0] = d2;

        d1 = d1 * 3.141592653589793;

        $i0 = $i0 + 1;

        goto label16;

     label17:
        $r1 = virtualinvoke $r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure compose(double[])>(r2);

        return $r1;
    }
