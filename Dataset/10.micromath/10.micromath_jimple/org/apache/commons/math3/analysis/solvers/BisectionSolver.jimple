org.apache.commons.math3.analysis.solvers.BisectionSolver extends org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver
private static final double DEFAULT_ABSOLUTE_ACCURACY
    public void <init>()
    {
        org.apache.commons.math3.analysis.solvers.BisectionSolver r0;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BisectionSolver;

        specialinvoke r0.<org.apache.commons.math3.analysis.solvers.BisectionSolver: void <init>(double)>(1.0E-6);

        return;
    }
    public void <init>(double)
    {
        org.apache.commons.math3.analysis.solvers.BisectionSolver r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BisectionSolver;

        $d0 := @parameter0: double;

        specialinvoke r0.<org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver: void <init>(double)>($d0);

        return;
    }
    public void <init>(double, double)
    {
        org.apache.commons.math3.analysis.solvers.BisectionSolver r0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BisectionSolver;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver: void <init>(double,double)>($d0, $d1);

        return;
    }
    protected double doSolve() throws org.apache.commons.math3.exception.TooManyEvaluationsException
    {
        org.apache.commons.math3.analysis.solvers.BisectionSolver r0;
        double $d0, d1, $d2, d3, $d4, $d5;
        byte $b0;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BisectionSolver;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BisectionSolver: double getMin()>();

        d1 = $d0;

        $d2 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BisectionSolver: double getMax()>();

        d3 = $d2;

        virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BisectionSolver: void verifyInterval(double,double)>($d0, $d2);

        $d0 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BisectionSolver: double getAbsoluteAccuracy()>();

     label1:
        $d2 = staticinvoke <org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils: double midpoint(double,double)>(d1, d3);

        $d4 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BisectionSolver: double computeObjectiveValue(double)>(d1);

        $d5 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BisectionSolver: double computeObjectiveValue(double)>($d2);

        $d4 = $d5 * $d4;

        $b0 = $d4 cmpl 0.0;

        if $b0 <= 0 goto label3;

        d1 = $d2;

     label2:
        $d2 = d3 - d1;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d2);

        $b0 = $d2 cmpg $d0;

        if $b0 > 0 goto label1;

        d1 = staticinvoke <org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils: double midpoint(double,double)>(d1, d3);

        return d1;

     label3:
        d3 = $d2;

        goto label2;
    }
