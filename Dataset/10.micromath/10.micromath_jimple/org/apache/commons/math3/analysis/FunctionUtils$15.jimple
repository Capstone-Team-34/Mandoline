org.apache.commons.math3.analysis.FunctionUtils$15 extends java.lang.Object implements org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction
final org.apache.commons.math3.analysis.DifferentiableUnivariateFunction val$f
    void <init>(org.apache.commons.math3.analysis.DifferentiableUnivariateFunction)
    {
        org.apache.commons.math3.analysis.FunctionUtils$15 r0;
        org.apache.commons.math3.analysis.DifferentiableUnivariateFunction $r1;

        r0 := @this: org.apache.commons.math3.analysis.FunctionUtils$15;

        $r1 := @parameter0: org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;

        r0.<org.apache.commons.math3.analysis.FunctionUtils$15: org.apache.commons.math3.analysis.DifferentiableUnivariateFunction val$f> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public double value(double)
    {
        org.apache.commons.math3.analysis.FunctionUtils$15 r0;
        double $d0;
        org.apache.commons.math3.analysis.DifferentiableUnivariateFunction $r1;

        r0 := @this: org.apache.commons.math3.analysis.FunctionUtils$15;

        $d0 := @parameter0: double;

        $r1 = r0.<org.apache.commons.math3.analysis.FunctionUtils$15: org.apache.commons.math3.analysis.DifferentiableUnivariateFunction val$f>;

        $d0 = interfaceinvoke $r1.<org.apache.commons.math3.analysis.DifferentiableUnivariateFunction: double value(double)>($d0);

        return $d0;
    }
    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure) throws org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.analysis.FunctionUtils$15 r0;
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure $r1, $r7;
        double[] r2;
        int[] r3;
        int $i0, $i1, $i2;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r4;
        java.lang.Integer $r5, $r6;
        org.apache.commons.math3.analysis.DifferentiableUnivariateFunction $r8;
        double $d0, $d1;
        org.apache.commons.math3.analysis.UnivariateFunction $r9;

        r0 := @this: org.apache.commons.math3.analysis.FunctionUtils$15;

        $r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getOrder()>();

        lookupswitch($i0)
        {
            case 0: goto label2;
            case 1: goto label3;
            default: goto label1;
        };

     label1:
        $r4 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getOrder()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke $r4.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r5, $r6, 1);

        throw $r4;

     label2:
        $r7 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getFreeParameters()>();

        $r8 = r0.<org.apache.commons.math3.analysis.FunctionUtils$15: org.apache.commons.math3.analysis.DifferentiableUnivariateFunction val$f>;

        $d0 = virtualinvoke $r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getValue()>();

        $d0 = interfaceinvoke $r8.<org.apache.commons.math3.analysis.DifferentiableUnivariateFunction: double value(double)>($d0);

        specialinvoke $r7.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(int,int,double)>($i0, 0, $d0);

        return $r7;

     label3:
        $i0 = virtualinvoke $r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getFreeParameters()>();

        $i1 = $i0 + 1;

        r2 = newarray (double)[$i1];

        $r8 = r0.<org.apache.commons.math3.analysis.FunctionUtils$15: org.apache.commons.math3.analysis.DifferentiableUnivariateFunction val$f>;

        $d0 = virtualinvoke $r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getValue()>();

        $d0 = interfaceinvoke $r8.<org.apache.commons.math3.analysis.DifferentiableUnivariateFunction: double value(double)>($d0);

        r2[0] = $d0;

        $r8 = r0.<org.apache.commons.math3.analysis.FunctionUtils$15: org.apache.commons.math3.analysis.DifferentiableUnivariateFunction val$f>;

        $r9 = interfaceinvoke $r8.<org.apache.commons.math3.analysis.DifferentiableUnivariateFunction: org.apache.commons.math3.analysis.UnivariateFunction derivative()>();

        $d0 = virtualinvoke $r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getValue()>();

        $d0 = interfaceinvoke $r9.<org.apache.commons.math3.analysis.UnivariateFunction: double value(double)>($d0);

        r3 = newarray (int)[$i0];

        $i1 = 0;

     label4:
        if $i1 >= $i0 goto label5;

        r3[$i1] = 1;

        $i2 = $i1 + 1;

        $d1 = virtualinvoke $r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getPartialDerivative(int[])>(r3);

        $d1 = $d1 * $d0;

        r2[$i2] = $d1;

        r3[$i1] = 0;

        $i1 = $i1 + 1;

        goto label4;

     label5:
        $r1 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(int,int,double[])>($i0, 1, r2);

        return $r1;
    }
