org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator extends java.lang.Object
private final double[] points
private final double[] weights
    public void <init>(org.apache.commons.math3.util.Pair) throws org.apache.commons.math3.exception.NonMonotonicSequenceException
    {
        org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator r0;
        org.apache.commons.math3.util.Pair r1;
        java.lang.Object $r2;
        double[] $r3, $r4;

        r0 := @this: org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator;

        r1 := @parameter0: org.apache.commons.math3.util.Pair;

        $r2 = virtualinvoke r1.<org.apache.commons.math3.util.Pair: java.lang.Object getFirst()>();

        $r3 = (double[]) $r2;

        $r2 = virtualinvoke r1.<org.apache.commons.math3.util.Pair: java.lang.Object getSecond()>();

        $r4 = (double[]) $r2;

        specialinvoke r0.<org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator: void <init>(double[],double[])>($r3, $r4);

        return;
    }
    public void <init>(double[], double[]) throws org.apache.commons.math3.exception.NonMonotonicSequenceException, org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator r0;
        double[] $r1, $r2;
        int $i0, $i1;
        org.apache.commons.math3.exception.DimensionMismatchException $r3;
        org.apache.commons.math3.util.MathArrays$OrderDirection $r4;
        java.lang.Object $r5;

        r0 := @this: org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = lengthof $r1;

        $i1 = lengthof $r2;

        if $i0 == $i1 goto label1;

        $r3 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i0 = lengthof $r1;

        $i1 = lengthof $r2;

        specialinvoke $r3.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i0, $i1);

        throw $r3;

     label1:
        $r4 = <org.apache.commons.math3.util.MathArrays$OrderDirection: org.apache.commons.math3.util.MathArrays$OrderDirection INCREASING>;

        staticinvoke <org.apache.commons.math3.util.MathArrays: boolean checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean,boolean)>($r1, $r4, 1, 1);

        $r5 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r1 = (double[]) $r5;

        r0.<org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator: double[] points> = $r1;

        $r5 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r1 = (double[]) $r5;

        r0.<org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator: double[] weights> = $r1;

        return;
    }
    public int getNumberOfPoints()
    {
        org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator r0;
        double[] $r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator;

        $r1 = r0.<org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator: double[] points>;

        $i0 = lengthof $r1;

        return $i0;
    }
    public double getPoint(int)
    {
        org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator r0;
        int $i0;
        double[] $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator;

        $i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator: double[] points>;

        $d0 = $r1[$i0];

        return $d0;
    }
    public double getWeight(int)
    {
        org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator r0;
        int $i0;
        double[] $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator;

        $i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator: double[] weights>;

        $d0 = $r1[$i0];

        return $d0;
    }
    public double integrate(org.apache.commons.math3.analysis.UnivariateFunction)
    {
        org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator r0;
        org.apache.commons.math3.analysis.UnivariateFunction $r1;
        double d0, d1, d2, d3;
        int i0, $i1;
        double[] $r2;

        r0 := @this: org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator;

        $r1 := @parameter0: org.apache.commons.math3.analysis.UnivariateFunction;

        d3 = 0.0;

        d2 = 0.0;

        i0 = 0;

     label1:
        $r2 = r0.<org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator: double[] points>;

        $i1 = lengthof $r2;

        if i0 >= $i1 goto label2;

        $r2 = r0.<org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator: double[] points>;

        d1 = $r2[i0];

        $r2 = r0.<org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator: double[] weights>;

        d0 = $r2[i0];

        d1 = interfaceinvoke $r1.<org.apache.commons.math3.analysis.UnivariateFunction: double value(double)>(d1);

        d0 = d1 * d0;

        d2 = d0 - d2;

        d0 = d3 + d2;

        d3 = d0 - d3;

        d2 = d3 - d2;

        d3 = d0;

        i0 = i0 + 1;

        goto label1;

     label2:
        return d3;
    }
