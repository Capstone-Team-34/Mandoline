org.apache.commons.math3.analysis.interpolation.TricubicInterpolator$1 extends org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction
final org.apache.commons.math3.analysis.interpolation.TricubicInterpolator this$0
final double[] val$xval
final double[] val$yval
final double[] val$zval
    void <init>(org.apache.commons.math3.analysis.interpolation.TricubicInterpolator, double[], double[], double[], double[][][], double[][][], double[][][], double[][][], double[][][], double[][][], double[][][], double[][][], double[], double[], double[])
    {
        org.apache.commons.math3.analysis.interpolation.TricubicInterpolator$1 r0;
        org.apache.commons.math3.analysis.interpolation.TricubicInterpolator $r1;
        double[] $r2, $r3, $r4, $r13, $r14, $r15;
        double[][][] $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.TricubicInterpolator$1;

        $r1 := @parameter0: org.apache.commons.math3.analysis.interpolation.TricubicInterpolator;

        $r2 := @parameter1: double[];

        $r3 := @parameter2: double[];

        $r4 := @parameter3: double[];

        $r5 := @parameter4: double[][][];

        $r6 := @parameter5: double[][][];

        $r7 := @parameter6: double[][][];

        $r8 := @parameter7: double[][][];

        $r9 := @parameter8: double[][][];

        $r10 := @parameter9: double[][][];

        $r11 := @parameter10: double[][][];

        $r12 := @parameter11: double[][][];

        $r13 := @parameter12: double[];

        $r14 := @parameter13: double[];

        $r15 := @parameter14: double[];

        r0.<org.apache.commons.math3.analysis.interpolation.TricubicInterpolator$1: org.apache.commons.math3.analysis.interpolation.TricubicInterpolator this$0> = $r1;

        r0.<org.apache.commons.math3.analysis.interpolation.TricubicInterpolator$1: double[] val$xval> = $r13;

        r0.<org.apache.commons.math3.analysis.interpolation.TricubicInterpolator$1: double[] val$yval> = $r14;

        r0.<org.apache.commons.math3.analysis.interpolation.TricubicInterpolator$1: double[] val$zval> = $r15;

        specialinvoke r0.<org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction: void <init>(double[],double[],double[],double[][][],double[][][],double[][][],double[][][],double[][][],double[][][],double[][][],double[][][])>($r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12);

        return;
    }
    public boolean isValidPoint(double, double, double)
    {
        org.apache.commons.math3.analysis.interpolation.TricubicInterpolator$1 r0;
        double $d0, $d1, $d2, $d3;
        double[] $r1, $r2;
        byte $b0;
        int $i1;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.TricubicInterpolator$1;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $r1 = r0.<org.apache.commons.math3.analysis.interpolation.TricubicInterpolator$1: double[] val$xval>;

        $d3 = $r1[1];

        $b0 = $d0 cmpg $d3;

        if $b0 < 0 goto label1;

        $r1 = r0.<org.apache.commons.math3.analysis.interpolation.TricubicInterpolator$1: double[] val$xval>;

        $r2 = r0.<org.apache.commons.math3.analysis.interpolation.TricubicInterpolator$1: double[] val$xval>;

        $i1 = lengthof $r2;

        $i1 = $i1 + -2;

        $d3 = $r1[$i1];

        $b0 = $d0 cmpl $d3;

        if $b0 > 0 goto label1;

        $r1 = r0.<org.apache.commons.math3.analysis.interpolation.TricubicInterpolator$1: double[] val$yval>;

        $d0 = $r1[1];

        $b0 = $d1 cmpg $d0;

        if $b0 < 0 goto label1;

        $r1 = r0.<org.apache.commons.math3.analysis.interpolation.TricubicInterpolator$1: double[] val$yval>;

        $r2 = r0.<org.apache.commons.math3.analysis.interpolation.TricubicInterpolator$1: double[] val$yval>;

        $i1 = lengthof $r2;

        $i1 = $i1 + -2;

        $d0 = $r1[$i1];

        $b0 = $d1 cmpl $d0;

        if $b0 > 0 goto label1;

        $r1 = r0.<org.apache.commons.math3.analysis.interpolation.TricubicInterpolator$1: double[] val$zval>;

        $d0 = $r1[1];

        $b0 = $d2 cmpg $d0;

        if $b0 < 0 goto label1;

        $r1 = r0.<org.apache.commons.math3.analysis.interpolation.TricubicInterpolator$1: double[] val$zval>;

        $r2 = r0.<org.apache.commons.math3.analysis.interpolation.TricubicInterpolator$1: double[] val$zval>;

        $i1 = lengthof $r2;

        $i1 = $i1 + -2;

        $d0 = $r1[$i1];

        $b0 = $d2 cmpl $d0;

        if $b0 <= 0 goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }
