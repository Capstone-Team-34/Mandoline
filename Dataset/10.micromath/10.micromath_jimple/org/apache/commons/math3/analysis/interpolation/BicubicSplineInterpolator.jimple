org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolator extends java.lang.Object implements org.apache.commons.math3.analysis.interpolation.BivariateGridInterpolator
private final boolean initializeDerivatives
    public void <init>()
    {
        org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolator r0;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolator;

        specialinvoke r0.<org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolator: void <init>(boolean)>(0);

        return;
    }
    public void <init>(boolean)
    {
        org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolator r0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolator;

        $z0 := @parameter0: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolator: boolean initializeDerivatives> = $z0;

        return;
    }
    private int nextIndex(int, int)
    {
        org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolator r0;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolator;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i0 = $i0 + 1;

        if $i0 >= $i1 goto label1;

        return $i0;

     label1:
        $i0 = $i0 + -1;

        return $i0;
    }
    private int previousIndex(int)
    {
        org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolator r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolator;

        $i0 := @parameter0: int;

        $i0 = $i0 + -1;

        if $i0 < 0 goto label1;

        return $i0;

     label1:
        return 0;
    }
    public volatile org.apache.commons.math3.analysis.BivariateFunction interpolate(double[], double[], double[][]) throws org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NonMonotonicSequenceException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolator r0;
        double[] $r1, $r2;
        double[][] $r3;
        org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction $r4;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolator;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[];

        $r3 := @parameter2: double[][];

        $r4 = virtualinvoke r0.<org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolator: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction interpolate(double[],double[],double[][])>($r1, $r2, $r3);

        return $r4;
    }
    public org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction interpolate(double[], double[], double[][]) throws org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NonMonotonicSequenceException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolator r0;
        double[] $r1, $r2, $r11, $r12;
        double[][] $r3, r10, r17, r18;
        boolean $z0;
        org.apache.commons.math3.analysis.interpolation.SplineInterpolator r4;
        double $d0, $d1, $d2, $d3;
        int $i0, $i1, i2, $i3, $i4, i5, $i6, $i7;
        org.apache.commons.math3.exception.NoDataException $r5;
        org.apache.commons.math3.exception.DimensionMismatchException $r6;
        int[] $r7;
        java.lang.Class $r8;
        java.lang.Object $r9;
        org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction[] $r13, $r15;
        org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction $r14;
        org.apache.commons.math3.analysis.UnivariateFunction $r16;
        org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction $r19;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolator;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[];

        $r3 := @parameter2: double[][];

        $i0 = lengthof $r1;

        if $i0 == 0 goto label01;

        $i0 = lengthof $r2;

        if $i0 == 0 goto label01;

        $i0 = lengthof $r3;

        if $i0 != 0 goto label02;

     label01:
        $r5 = new org.apache.commons.math3.exception.NoDataException;

        specialinvoke $r5.<org.apache.commons.math3.exception.NoDataException: void <init>()>();

        throw $r5;

     label02:
        $i0 = lengthof $r1;

        $i1 = lengthof $r3;

        if $i0 == $i1 goto label03;

        $r6 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i0 = lengthof $r1;

        $i1 = lengthof $r3;

        specialinvoke $r6.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i0, $i1);

        throw $r6;

     label03:
        staticinvoke <org.apache.commons.math3.util.MathArrays: void checkOrder(double[])>($r1);

        staticinvoke <org.apache.commons.math3.util.MathArrays: void checkOrder(double[])>($r2);

        $i1 = lengthof $r1;

        $i0 = lengthof $r2;

        $r7 = newarray (int)[2];

        $r7[0] = $i0;

        $r7[1] = $i1;

        $r8 = <java.lang.Double: java.lang.Class TYPE>;

        $r9 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r8, $r7);

        r10 = (double[][]) $r9;

        i2 = 0;

     label04:
        if i2 >= $i1 goto label08;

        $r11 = $r3[i2];

        $i3 = lengthof $r11;

        if $i3 == $i0 goto label05;

        $r6 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $r1 = $r3[i2];

        $i1 = lengthof $r1;

        specialinvoke $r6.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i1, $i0);

        throw $r6;

     label05:
        $i3 = 0;

     label06:
        if $i3 >= $i0 goto label07;

        $r11 = r10[$i3];

        $r12 = $r3[i2];

        $d1 = $r12[$i3];

        $r11[i2] = $d1;

        $i3 = $i3 + 1;

        goto label06;

     label07:
        i2 = i2 + 1;

        goto label04;

     label08:
        r4 = new org.apache.commons.math3.analysis.interpolation.SplineInterpolator;

        specialinvoke r4.<org.apache.commons.math3.analysis.interpolation.SplineInterpolator: void <init>()>();

        $r13 = newarray (org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction)[$i0];

        i2 = 0;

     label09:
        if i2 >= $i0 goto label10;

        $r11 = r10[i2];

        $r14 = virtualinvoke r4.<org.apache.commons.math3.analysis.interpolation.SplineInterpolator: org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction interpolate(double[],double[])>($r1, $r11);

        $r13[i2] = $r14;

        i2 = i2 + 1;

        goto label09;

     label10:
        $r15 = newarray (org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction)[$i1];

        i2 = 0;

     label11:
        if i2 >= $i1 goto label12;

        $r11 = $r3[i2];

        $r14 = virtualinvoke r4.<org.apache.commons.math3.analysis.interpolation.SplineInterpolator: org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction interpolate(double[],double[])>($r2, $r11);

        $r15[i2] = $r14;

        i2 = i2 + 1;

        goto label11;

     label12:
        $r7 = newarray (int)[2];

        $r7[0] = $i1;

        $r7[1] = $i0;

        $r8 = <java.lang.Double: java.lang.Class TYPE>;

        $r9 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r8, $r7);

        r10 = (double[][]) $r9;

        i2 = 0;

     label13:
        if i2 >= $i0 goto label16;

        $r14 = $r13[i2];

        $r16 = virtualinvoke $r14.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: org.apache.commons.math3.analysis.UnivariateFunction derivative()>();

        $i3 = 0;

     label14:
        if $i3 >= $i1 goto label15;

        $r11 = r10[$i3];

        $d1 = $r1[$i3];

        $d1 = interfaceinvoke $r16.<org.apache.commons.math3.analysis.UnivariateFunction: double value(double)>($d1);

        $r11[i2] = $d1;

        $i3 = $i3 + 1;

        goto label14;

     label15:
        i2 = i2 + 1;

        goto label13;

     label16:
        $r7 = newarray (int)[2];

        $r7[0] = $i1;

        $r7[1] = $i0;

        $r8 = <java.lang.Double: java.lang.Class TYPE>;

        $r9 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r8, $r7);

        r17 = (double[][]) $r9;

        i2 = 0;

     label17:
        if i2 >= $i1 goto label20;

        $r14 = $r15[i2];

        $r16 = virtualinvoke $r14.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: org.apache.commons.math3.analysis.UnivariateFunction derivative()>();

        $i3 = 0;

     label18:
        if $i3 >= $i0 goto label19;

        $r11 = r17[i2];

        $d1 = $r2[$i3];

        $d1 = interfaceinvoke $r16.<org.apache.commons.math3.analysis.UnivariateFunction: double value(double)>($d1);

        $r11[$i3] = $d1;

        $i3 = $i3 + 1;

        goto label18;

     label19:
        i2 = i2 + 1;

        goto label17;

     label20:
        $r7 = newarray (int)[2];

        $r7[0] = $i1;

        $r7[1] = $i0;

        $r8 = <java.lang.Double: java.lang.Class TYPE>;

        $r9 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r8, $r7);

        r18 = (double[][]) $r9;

        i2 = 0;

     label21:
        if i2 >= $i1 goto label24;

        $i3 = specialinvoke r0.<org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolator: int nextIndex(int,int)>(i2, $i1);

        $i4 = specialinvoke r0.<org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolator: int previousIndex(int)>(i2);

        i5 = 0;

     label22:
        if i5 >= $i0 goto label23;

        $i6 = specialinvoke r0.<org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolator: int nextIndex(int,int)>(i5, $i0);

        $i7 = specialinvoke r0.<org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolator: int previousIndex(int)>(i5);

        $r11 = r18[i2];

        $r12 = $r3[$i3];

        $d1 = $r12[$i6];

        $r12 = $r3[$i3];

        $d2 = $r12[$i7];

        $d1 = $d1 - $d2;

        $r12 = $r3[$i4];

        $d2 = $r12[$i6];

        $d1 = $d1 - $d2;

        $r12 = $r3[$i4];

        $d2 = $r12[$i7];

        $d1 = $d1 + $d2;

        $d2 = $r1[$i3];

        $d0 = $r1[$i4];

        $d2 = $d2 - $d0;

        $d3 = $r2[$i6];

        $d0 = $r2[$i7];

        $d0 = $d3 - $d0;

        $d2 = $d2 * $d0;

        $d1 = $d1 / $d2;

        $r11[i5] = $d1;

        i5 = i5 + 1;

        goto label22;

     label23:
        i2 = i2 + 1;

        goto label21;

     label24:
        $r19 = new org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction;

        $z0 = r0.<org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolator: boolean initializeDerivatives>;

        specialinvoke $r19.<org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction: void <init>(double[],double[],double[][],double[][],double[][],double[][],boolean)>($r1, $r2, $r3, r10, r17, r18, $z0);

        return $r19;
    }
