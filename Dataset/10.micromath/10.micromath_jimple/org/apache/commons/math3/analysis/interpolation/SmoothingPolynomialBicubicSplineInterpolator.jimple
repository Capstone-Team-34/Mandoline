org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator extends org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolator
private final int xDegree
private final org.apache.commons.math3.fitting.PolynomialFitter xFitter
private final int yDegree
private final org.apache.commons.math3.fitting.PolynomialFitter yFitter
    public void <init>()
    {
        org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator r0;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator;

        specialinvoke r0.<org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator: void <init>(int)>(3);

        return;
    }
    public void <init>(int) throws org.apache.commons.math3.exception.NotPositiveException
    {
        org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator;

        $i0 := @parameter0: int;

        specialinvoke r0.<org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator: void <init>(int,int)>($i0, $i0);

        return;
    }
    public void <init>(int, int) throws org.apache.commons.math3.exception.NotPositiveException
    {
        org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator r0;
        int $i0, $i1;
        org.apache.commons.math3.optim.SimpleVectorValueChecker r1;
        org.apache.commons.math3.exception.NotPositiveException $r2;
        java.lang.Integer $r3;
        double $d0, $d1;
        org.apache.commons.math3.fitting.PolynomialFitter $r4;
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer $r5;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        specialinvoke r0.<org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolator: void <init>()>();

        if $i0 >= 0 goto label1;

        $r2 = new org.apache.commons.math3.exception.NotPositiveException;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r2.<org.apache.commons.math3.exception.NotPositiveException: void <init>(java.lang.Number)>($r3);

        throw $r2;

     label1:
        if $i1 >= 0 goto label2;

        $r2 = new org.apache.commons.math3.exception.NotPositiveException;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        specialinvoke $r2.<org.apache.commons.math3.exception.NotPositiveException: void <init>(java.lang.Number)>($r3);

        throw $r2;

     label2:
        r0.<org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator: int xDegree> = $i0;

        r0.<org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator: int yDegree> = $i1;

        r1 = new org.apache.commons.math3.optim.SimpleVectorValueChecker;

        $d0 = <org.apache.commons.math3.util.Precision: double EPSILON>;

        $d0 = $d0 * 100.0;

        $d1 = <org.apache.commons.math3.util.Precision: double SAFE_MIN>;

        $d1 = $d1 * 100.0;

        specialinvoke r1.<org.apache.commons.math3.optim.SimpleVectorValueChecker: void <init>(double,double)>($d0, $d1);

        $r4 = new org.apache.commons.math3.fitting.PolynomialFitter;

        $r5 = new org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer;

        specialinvoke $r5.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer: void <init>(boolean,org.apache.commons.math3.optim.ConvergenceChecker)>(0, r1);

        specialinvoke $r4.<org.apache.commons.math3.fitting.PolynomialFitter: void <init>(org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer)>($r5);

        r0.<org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator: org.apache.commons.math3.fitting.PolynomialFitter xFitter> = $r4;

        $r4 = new org.apache.commons.math3.fitting.PolynomialFitter;

        $r5 = new org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer;

        specialinvoke $r5.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer: void <init>(boolean,org.apache.commons.math3.optim.ConvergenceChecker)>(0, r1);

        specialinvoke $r4.<org.apache.commons.math3.fitting.PolynomialFitter: void <init>(org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer)>($r5);

        r0.<org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator: org.apache.commons.math3.fitting.PolynomialFitter yFitter> = $r4;

        return;
    }
    public volatile org.apache.commons.math3.analysis.BivariateFunction interpolate(double[], double[], double[][]) throws org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NonMonotonicSequenceException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator r0;
        double[] $r1, $r2;
        double[][] $r3;
        org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction $r4;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[];

        $r3 := @parameter2: double[][];

        $r4 = virtualinvoke r0.<org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction interpolate(double[],double[],double[][])>($r1, $r2, $r3);

        return $r4;
    }
    public org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction interpolate(double[], double[], double[][]) throws org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NonMonotonicSequenceException
    {
        org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator r0;
        double[] $r1, $r2, $r6;
        double[][] $r3;
        int $i0, $i1, i2, $i3;
        org.apache.commons.math3.exception.NoDataException $r4;
        org.apache.commons.math3.exception.DimensionMismatchException $r5;
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] $r7;
        org.apache.commons.math3.fitting.PolynomialFitter $r8;
        double $d0, $d1;
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction $r9;
        int[] $r10;
        java.lang.Class $r11;
        java.lang.Object $r12;
        org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction $r13;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[];

        $r3 := @parameter2: double[][];

        $i0 = lengthof $r1;

        if $i0 == 0 goto label01;

        $i0 = lengthof $r2;

        if $i0 == 0 goto label01;

        $i0 = lengthof $r3;

        if $i0 != 0 goto label02;

     label01:
        $r4 = new org.apache.commons.math3.exception.NoDataException;

        specialinvoke $r4.<org.apache.commons.math3.exception.NoDataException: void <init>()>();

        throw $r4;

     label02:
        $i0 = lengthof $r1;

        $i1 = lengthof $r3;

        if $i0 == $i1 goto label03;

        $r5 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i0 = lengthof $r1;

        $i1 = lengthof $r3;

        specialinvoke $r5.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i0, $i1);

        throw $r5;

     label03:
        $i1 = lengthof $r1;

        $i0 = lengthof $r2;

        i2 = 0;

     label04:
        if i2 >= $i1 goto label06;

        $r6 = $r3[i2];

        $i3 = lengthof $r6;

        if $i3 == $i0 goto label05;

        $r5 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $r1 = $r3[i2];

        $i1 = lengthof $r1;

        specialinvoke $r5.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i1, $i0);

        throw $r5;

     label05:
        i2 = i2 + 1;

        goto label04;

     label06:
        staticinvoke <org.apache.commons.math3.util.MathArrays: void checkOrder(double[])>($r1);

        staticinvoke <org.apache.commons.math3.util.MathArrays: void checkOrder(double[])>($r2);

        $r7 = newarray (org.apache.commons.math3.analysis.polynomials.PolynomialFunction)[$i0];

        i2 = 0;

     label07:
        if i2 >= $i0 goto label10;

        $r8 = r0.<org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator: org.apache.commons.math3.fitting.PolynomialFitter xFitter>;

        virtualinvoke $r8.<org.apache.commons.math3.fitting.PolynomialFitter: void clearObservations()>();

        $i3 = 0;

     label08:
        if $i3 >= $i1 goto label09;

        $r8 = r0.<org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator: org.apache.commons.math3.fitting.PolynomialFitter xFitter>;

        $d0 = $r1[$i3];

        $r6 = $r3[$i3];

        $d1 = $r6[i2];

        virtualinvoke $r8.<org.apache.commons.math3.fitting.PolynomialFitter: void addObservedPoint(double,double,double)>(1.0, $d0, $d1);

        $i3 = $i3 + 1;

        goto label08;

     label09:
        $r9 = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction;

        $r8 = r0.<org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator: org.apache.commons.math3.fitting.PolynomialFitter xFitter>;

        $i3 = r0.<org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator: int xDegree>;

        $i3 = $i3 + 1;

        $r6 = newarray (double)[$i3];

        $r6 = virtualinvoke $r8.<org.apache.commons.math3.fitting.PolynomialFitter: double[] fit(double[])>($r6);

        specialinvoke $r9.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: void <init>(double[])>($r6);

        $r7[i2] = $r9;

        i2 = i2 + 1;

        goto label07;

     label10:
        $r10 = newarray (int)[2];

        $r10[0] = $i1;

        $r10[1] = $i0;

        $r11 = <java.lang.Double: java.lang.Class TYPE>;

        $r12 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r11, $r10);

        $r3 = (double[][]) $r12;

        i2 = 0;

     label11:
        if i2 >= $i0 goto label14;

        $r9 = $r7[i2];

        $i3 = 0;

     label12:
        if $i3 >= $i1 goto label13;

        $r6 = $r3[$i3];

        $d0 = $r1[$i3];

        $d0 = virtualinvoke $r9.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: double value(double)>($d0);

        $r6[i2] = $d0;

        $i3 = $i3 + 1;

        goto label12;

     label13:
        i2 = i2 + 1;

        goto label11;

     label14:
        $r7 = newarray (org.apache.commons.math3.analysis.polynomials.PolynomialFunction)[$i1];

        i2 = 0;

     label15:
        if i2 >= $i1 goto label18;

        $r8 = r0.<org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator: org.apache.commons.math3.fitting.PolynomialFitter yFitter>;

        virtualinvoke $r8.<org.apache.commons.math3.fitting.PolynomialFitter: void clearObservations()>();

        $i3 = 0;

     label16:
        if $i3 >= $i0 goto label17;

        $r8 = r0.<org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator: org.apache.commons.math3.fitting.PolynomialFitter yFitter>;

        $d0 = $r2[$i3];

        $r6 = $r3[i2];

        $d1 = $r6[$i3];

        virtualinvoke $r8.<org.apache.commons.math3.fitting.PolynomialFitter: void addObservedPoint(double,double,double)>(1.0, $d0, $d1);

        $i3 = $i3 + 1;

        goto label16;

     label17:
        $r9 = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction;

        $r8 = r0.<org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator: org.apache.commons.math3.fitting.PolynomialFitter yFitter>;

        $i3 = r0.<org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator: int yDegree>;

        $i3 = $i3 + 1;

        $r6 = newarray (double)[$i3];

        $r6 = virtualinvoke $r8.<org.apache.commons.math3.fitting.PolynomialFitter: double[] fit(double[])>($r6);

        specialinvoke $r9.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: void <init>(double[])>($r6);

        $r7[i2] = $r9;

        i2 = i2 + 1;

        goto label15;

     label18:
        $r10 = newarray (int)[2];

        $r10[0] = $i1;

        $r10[1] = $i0;

        $r11 = <java.lang.Double: java.lang.Class TYPE>;

        $r12 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r11, $r10);

        $r3 = (double[][]) $r12;

        i2 = 0;

     label19:
        if i2 >= $i1 goto label22;

        $r9 = $r7[i2];

        $i3 = 0;

     label20:
        if $i3 >= $i0 goto label21;

        $r6 = $r3[i2];

        $d0 = $r2[$i3];

        $d0 = virtualinvoke $r9.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: double value(double)>($d0);

        $r6[$i3] = $d0;

        $i3 = $i3 + 1;

        goto label20;

     label21:
        i2 = i2 + 1;

        goto label19;

     label22:
        $r13 = specialinvoke r0.<org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolator: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction interpolate(double[],double[],double[][])>($r1, $r2, $r3);

        return $r13;
    }
