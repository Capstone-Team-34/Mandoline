org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver extends java.lang.Object implements org.apache.commons.math3.analysis.solvers.BaseUnivariateSolver
private static final double DEFAULT_FUNCTION_VALUE_ACCURACY
private static final double DEFAULT_RELATIVE_ACCURACY
private final double absoluteAccuracy
private org.apache.commons.math3.util.IntegerSequence$Incrementor evaluations
private org.apache.commons.math3.analysis.UnivariateFunction function
private final double functionValueAccuracy
private final double relativeAccuracy
private double searchMax
private double searchMin
private double searchStart
    protected void <init>(double)
    {
        org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver;

        $d0 := @parameter0: double;

        specialinvoke r0.<org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver: void <init>(double,double,double)>(1.0E-14, $d0, 1.0E-15);

        return;
    }
    protected void <init>(double, double)
    {
        org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver r0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver: void <init>(double,double,double)>($d0, $d1, 1.0E-15);

        return;
    }
    protected void <init>(double, double, double)
    {
        org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver r0;
        double $d0, $d1, $d2;
        org.apache.commons.math3.util.IntegerSequence$Incrementor $r1;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver: double absoluteAccuracy> = $d1;

        r0.<org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver: double relativeAccuracy> = $d0;

        r0.<org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver: double functionValueAccuracy> = $d2;

        $r1 = staticinvoke <org.apache.commons.math3.util.IntegerSequence$Incrementor: org.apache.commons.math3.util.IntegerSequence$Incrementor create()>();

        r0.<org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver: org.apache.commons.math3.util.IntegerSequence$Incrementor evaluations> = $r1;

        return;
    }
    protected double computeObjectiveValue(double) throws org.apache.commons.math3.exception.TooManyEvaluationsException
    {
        org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver r0;
        double $d0;
        org.apache.commons.math3.analysis.UnivariateFunction $r1;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver;

        $d0 := @parameter0: double;

        virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver: void incrementEvaluationCount()>();

        $r1 = r0.<org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver: org.apache.commons.math3.analysis.UnivariateFunction function>;

        $d0 = interfaceinvoke $r1.<org.apache.commons.math3.analysis.UnivariateFunction: double value(double)>($d0);

        return $d0;
    }
protected abstract double doSolve() throws org.apache.commons.math3.exception.TooManyEvaluationsException, org.apache.commons.math3.exception.NoBracketingException { 
// no body
} 
    public double getAbsoluteAccuracy()
    {
        org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver r0;
        double d0;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver;

        d0 = r0.<org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver: double absoluteAccuracy>;

        return d0;
    }
    public int getEvaluations()
    {
        org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver r0;
        int $i0;
        org.apache.commons.math3.util.IntegerSequence$Incrementor $r1;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver;

        $r1 = r0.<org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver: org.apache.commons.math3.util.IntegerSequence$Incrementor evaluations>;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.util.IntegerSequence$Incrementor: int getCount()>();

        return $i0;
    }
    public double getFunctionValueAccuracy()
    {
        org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver r0;
        double d0;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver;

        d0 = r0.<org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver: double functionValueAccuracy>;

        return d0;
    }
    public double getMax()
    {
        org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver r0;
        double d0;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver;

        d0 = r0.<org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver: double searchMax>;

        return d0;
    }
    public int getMaxEvaluations()
    {
        org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver r0;
        int $i0;
        org.apache.commons.math3.util.IntegerSequence$Incrementor $r1;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver;

        $r1 = r0.<org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver: org.apache.commons.math3.util.IntegerSequence$Incrementor evaluations>;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.util.IntegerSequence$Incrementor: int getMaximalCount()>();

        return $i0;
    }
    public double getMin()
    {
        org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver r0;
        double d0;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver;

        d0 = r0.<org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver: double searchMin>;

        return d0;
    }
    public double getRelativeAccuracy()
    {
        org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver r0;
        double d0;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver;

        d0 = r0.<org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver: double relativeAccuracy>;

        return d0;
    }
    public double getStartValue()
    {
        org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver r0;
        double d0;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver;

        d0 = r0.<org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver: double searchStart>;

        return d0;
    }
    protected void incrementEvaluationCount() throws org.apache.commons.math3.exception.TooManyEvaluationsException
    {
        org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver r0;
        org.apache.commons.math3.exception.MaxCountExceededException r1;
        java.lang.Number $r2;
        org.apache.commons.math3.util.IntegerSequence$Incrementor $r3;
        org.apache.commons.math3.exception.TooManyEvaluationsException $r4;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver;

        $r3 = r0.<org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver: org.apache.commons.math3.util.IntegerSequence$Incrementor evaluations>;

     label1:
        virtualinvoke $r3.<org.apache.commons.math3.util.IntegerSequence$Incrementor: void increment()>();

     label2:
        return;

     label3:
        r1 := @caughtexception;

        $r4 = new org.apache.commons.math3.exception.TooManyEvaluationsException;

        $r2 = virtualinvoke r1.<org.apache.commons.math3.exception.MaxCountExceededException: java.lang.Number getMax()>();

        specialinvoke $r4.<org.apache.commons.math3.exception.TooManyEvaluationsException: void <init>(java.lang.Number)>($r2);

        throw $r4;

        catch org.apache.commons.math3.exception.MaxCountExceededException from label1 to label2 with label3;
    }
    protected boolean isBracketing(double, double)
    {
        org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver r0;
        double $d0, $d1;
        boolean $z0;
        org.apache.commons.math3.analysis.UnivariateFunction $r1;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $r1 = r0.<org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver: org.apache.commons.math3.analysis.UnivariateFunction function>;

        $z0 = staticinvoke <org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils: boolean isBracketing(org.apache.commons.math3.analysis.UnivariateFunction,double,double)>($r1, $d0, $d1);

        return $z0;
    }
    protected boolean isSequence(double, double, double)
    {
        org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver r0;
        double $d0, $d1, $d2;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $z0 = staticinvoke <org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils: boolean isSequence(double,double,double)>($d0, $d1, $d2);

        return $z0;
    }
    protected void setup(int, org.apache.commons.math3.analysis.UnivariateFunction, double, double, double) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver r0;
        int $i0;
        org.apache.commons.math3.analysis.UnivariateFunction r1;
        double $d0, $d1, $d2;
        org.apache.commons.math3.util.IntegerSequence$Incrementor $r2;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver;

        $i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.analysis.UnivariateFunction;

        $d0 := @parameter2: double;

        $d1 := @parameter3: double;

        $d2 := @parameter4: double;

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r1);

        r0.<org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver: double searchMin> = $d0;

        r0.<org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver: double searchMax> = $d1;

        r0.<org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver: double searchStart> = $d2;

        r0.<org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver: org.apache.commons.math3.analysis.UnivariateFunction function> = r1;

        $r2 = r0.<org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver: org.apache.commons.math3.util.IntegerSequence$Incrementor evaluations>;

        $r2 = virtualinvoke $r2.<org.apache.commons.math3.util.IntegerSequence$Incrementor: org.apache.commons.math3.util.IntegerSequence$Incrementor withMaximalCount(int)>($i0);

        $r2 = virtualinvoke $r2.<org.apache.commons.math3.util.IntegerSequence$Incrementor: org.apache.commons.math3.util.IntegerSequence$Incrementor withStart(int)>(0);

        r0.<org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver: org.apache.commons.math3.util.IntegerSequence$Incrementor evaluations> = $r2;

        return;
    }
    public double solve(int, org.apache.commons.math3.analysis.UnivariateFunction, double) throws org.apache.commons.math3.exception.TooManyEvaluationsException, org.apache.commons.math3.exception.NoBracketingException
    {
        org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver r0;
        int $i0;
        org.apache.commons.math3.analysis.UnivariateFunction r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver;

        $i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.analysis.UnivariateFunction;

        $d0 := @parameter2: double;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver: double solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)>($i0, r1, #NaN, #NaN, $d0);

        return $d0;
    }
    public double solve(int, org.apache.commons.math3.analysis.UnivariateFunction, double, double)
    {
        org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver r0;
        int $i0;
        org.apache.commons.math3.analysis.UnivariateFunction r1;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver;

        $i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.analysis.UnivariateFunction;

        $d0 := @parameter2: double;

        $d1 := @parameter3: double;

        $d2 = $d1 - $d0;

        $d2 = 0.5 * $d2;

        $d2 = $d0 + $d2;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver: double solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)>($i0, r1, $d0, $d1, $d2);

        return $d0;
    }
    public double solve(int, org.apache.commons.math3.analysis.UnivariateFunction, double, double, double) throws org.apache.commons.math3.exception.TooManyEvaluationsException, org.apache.commons.math3.exception.NoBracketingException
    {
        org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver r0;
        int $i0;
        org.apache.commons.math3.analysis.UnivariateFunction r1;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver;

        $i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.analysis.UnivariateFunction;

        $d0 := @parameter2: double;

        $d1 := @parameter3: double;

        $d2 := @parameter4: double;

        virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver: void setup(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)>($i0, r1, $d0, $d1, $d2);

        $d0 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver: double doSolve()>();

        return $d0;
    }
    protected void verifyBracketing(double, double) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NoBracketingException
    {
        org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver r0;
        double $d0, $d1;
        org.apache.commons.math3.analysis.UnivariateFunction $r1;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $r1 = r0.<org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver: org.apache.commons.math3.analysis.UnivariateFunction function>;

        staticinvoke <org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils: void verifyBracketing(org.apache.commons.math3.analysis.UnivariateFunction,double,double)>($r1, $d0, $d1);

        return;
    }
    protected void verifyInterval(double, double) throws org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver r0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        staticinvoke <org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils: void verifyInterval(double,double)>($d0, $d1);

        return;
    }
    protected void verifySequence(double, double, double) throws org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver r0;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        staticinvoke <org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils: void verifySequence(double,double,double)>($d0, $d1, $d2);

        return;
    }
