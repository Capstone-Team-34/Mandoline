org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm extends java.lang.Object implements org.apache.commons.math3.analysis.UnivariateFunction
private double[] coefficients
private boolean coefficientsComputed
private final double[] x
private final double[] y
    public void <init>(double[], double[]) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.NonMonotonicSequenceException
    {
        org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm r0;
        double[] $r1, $r2, $r3;
        boolean $z0;
        int $i0;
        double[][] $r4;

        r0 := @this: org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = lengthof $r1;

        $r3 = newarray (double)[$i0];

        r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] x> = $r3;

        $i0 = lengthof $r2;

        $r3 = newarray (double)[$i0];

        r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] y> = $r3;

        $r3 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] x>;

        $i0 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r3, 0, $i0);

        $r3 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] y>;

        $i0 = lengthof $r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r3, 0, $i0);

        r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: boolean coefficientsComputed> = 0;

        $z0 = staticinvoke <org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: boolean verifyInterpolationArray(double[],double[],boolean)>($r1, $r2, 0);

        if $z0 != 0 goto label1;

        $r2 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] x>;

        $r4 = newarray (double[])[1];

        $r1 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] y>;

        $r4[0] = $r1;

        staticinvoke <org.apache.commons.math3.util.MathArrays: void sortInPlace(double[],double[][])>($r2, $r4);

        $r1 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] x>;

        $r2 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] y>;

        staticinvoke <org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: boolean verifyInterpolationArray(double[],double[],boolean)>($r1, $r2, 1);

     label1:
        return;
    }
    public static double evaluate(double[], double[], double) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.NonMonotonicSequenceException
    {
        double[] $r0, $r1, r2, r3;
        double $d0;
        boolean $z0;
        int $i0;
        double[][] $r4;

        $r0 := @parameter0: double[];

        $r1 := @parameter1: double[];

        $d0 := @parameter2: double;

        $z0 = staticinvoke <org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: boolean verifyInterpolationArray(double[],double[],boolean)>($r0, $r1, 0);

        if $z0 == 0 goto label1;

        $d0 = staticinvoke <org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: double evaluateInternal(double[],double[],double)>($r0, $r1, $d0);

        return $d0;

     label1:
        $i0 = lengthof $r0;

        r2 = newarray (double)[$i0];

        $i0 = lengthof $r1;

        r3 = newarray (double)[$i0];

        $i0 = lengthof $r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, r2, 0, $i0);

        $i0 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, r3, 0, $i0);

        $r4 = newarray (double[])[1];

        $r4[0] = r3;

        staticinvoke <org.apache.commons.math3.util.MathArrays: void sortInPlace(double[],double[][])>(r2, $r4);

        staticinvoke <org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: boolean verifyInterpolationArray(double[],double[],boolean)>(r2, r3, 1);

        $d0 = staticinvoke <org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: double evaluateInternal(double[],double[],double)>(r2, r3, $d0);

        return $d0;
    }
    private static double evaluateInternal(double[], double[], double)
    {
        double[] $r0, $r1, r2, r3;
        double $d0, d1, d2, d3, d4, $d5, $d6;
        int i0, i1, i2, i4, $i5;
        byte $b3;

        $r0 := @parameter0: double[];

        $r1 := @parameter1: double[];

        $d0 := @parameter2: double;

        i1 = 0;

        i0 = lengthof $r0;

        r2 = newarray (double)[i0];

        r3 = newarray (double)[i0];

        d4 = #Infinity;

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        d2 = $r1[i2];

        r2[i2] = d2;

        d2 = $r1[i2];

        r3[i2] = d2;

        d2 = $r0[i2];

        d2 = $d0 - d2;

        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d2);

        $b3 = d2 cmpg d4;

        if $b3 >= 0 goto label2;

        i1 = i2;

        d4 = d2;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        d4 = $r1[i1];

        i2 = 1;

     label4:
        if i2 >= i0 goto label9;

        i4 = 0;

     label5:
        $i5 = i0 - i2;

        if i4 >= $i5 goto label6;

        d2 = $r0[i4];

        d2 = d2 - $d0;

        $i5 = i2 + i4;

        d3 = $r0[$i5];

        d3 = d3 - $d0;

        d1 = $r0[i4];

        $i5 = i2 + i4;

        $d5 = $r0[$i5];

        d1 = d1 - $d5;

        $i5 = i4 + 1;

        $d5 = r2[$i5];

        $d6 = r3[i4];

        $d5 = $d5 - $d6;

        d1 = $d5 / d1;

        d2 = d2 * d1;

        r2[i4] = d2;

        d2 = d3 * d1;

        r3[i4] = d2;

        i4 = i4 + 1;

        goto label5;

     label6:
        d2 = (double) i1;

        i4 = i0 - i2;

        i4 = i4 + 1;

        d3 = (double) i4;

        d3 = 0.5 * d3;

        $b3 = d2 cmpg d3;

        if $b3 >= 0 goto label8;

        d2 = r2[i1];

        d4 = d4 + d2;

     label7:
        i2 = i2 + 1;

        goto label4;

     label8:
        i1 = i1 + -1;

        d2 = r3[i1];

        d4 = d4 + d2;

        goto label7;

     label9:
        return d4;
    }
    public static boolean verifyInterpolationArray(double[], double[], boolean) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.NonMonotonicSequenceException
    {
        double[] $r0, $r1;
        boolean $z0;
        int $i0, $i1;
        org.apache.commons.math3.exception.DimensionMismatchException $r2;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r3;
        org.apache.commons.math3.exception.util.LocalizedFormats $r4;
        java.lang.Integer $r5, $r6;
        org.apache.commons.math3.util.MathArrays$OrderDirection $r7;

        $r0 := @parameter0: double[];

        $r1 := @parameter1: double[];

        $z0 := @parameter2: boolean;

        $i0 = lengthof $r0;

        $i1 = lengthof $r1;

        if $i0 == $i1 goto label1;

        $r2 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i0 = lengthof $r0;

        $i1 = lengthof $r1;

        specialinvoke $r2.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i0, $i1);

        throw $r2;

     label1:
        $i0 = lengthof $r0;

        if $i0 >= 2 goto label2;

        $r3 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats WRONG_NUMBER_OF_POINTS>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $i0 = lengthof $r0;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r3.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r4, $r5, $r6, 1);

        throw $r3;

     label2:
        $r7 = <org.apache.commons.math3.util.MathArrays$OrderDirection: org.apache.commons.math3.util.MathArrays$OrderDirection INCREASING>;

        $z0 = staticinvoke <org.apache.commons.math3.util.MathArrays: boolean checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean,boolean)>($r0, $r7, 1, $z0);

        return $z0;
    }
    protected void computeCoefficients()
    {
        org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm r0;
        double[] r1, r2, $r3;
        int i0, $i1, i2, $i3;
        double d0, $d1, $d2, $d3;

        r0 := @this: org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm;

        i0 = virtualinvoke r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: int degree()>();

        i0 = i0 + 1;

        r1 = newarray (double)[i0];

        r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] coefficients> = r1;

        i2 = 0;

     label01:
        if i2 >= i0 goto label02;

        r1 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] coefficients>;

        r1[i2] = 0.0;

        i2 = i2 + 1;

        goto label01;

     label02:
        i2 = i0 + 1;

        r1 = newarray (double)[i2];

        d0 = (double) 4607182418800017408L;

        r1[0] = d0;

        i2 = 0;

     label03:
        if i2 >= i0 goto label06;

        $i1 = i2;

     label04:
        if $i1 <= 0 goto label05;

        $i3 = $i1 + -1;

        d0 = r1[$i3];

        $d1 = r1[$i1];

        r2 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] x>;

        $d2 = r2[i2];

        $d1 = $d1 * $d2;

        d0 = d0 - $d1;

        r1[$i1] = d0;

        $i1 = $i1 + -1;

        goto label04;

     label05:
        d0 = r1[0];

        r2 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] x>;

        $d1 = r2[i2];

        $d1 = neg $d1;

        d0 = d0 * $d1;

        r1[0] = d0;

        $i1 = i2 + 1;

        r1[$i1] = 1.0;

        i2 = i2 + 1;

        goto label03;

     label06:
        r2 = newarray (double)[i0];

        i2 = 0;

     label07:
        if i2 >= i0 goto label13;

        d0 = 1.0;

        $i1 = 0;

     label08:
        if $i1 >= i0 goto label10;

        if i2 == $i1 goto label09;

        $r3 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] x>;

        $d1 = $r3[i2];

        $r3 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] x>;

        $d2 = $r3[$i1];

        $d1 = $d1 - $d2;

        d0 = d0 * $d1;

     label09:
        $i1 = $i1 + 1;

        goto label08;

     label10:
        $r3 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] y>;

        $d1 = $r3[i2];

        d0 = $d1 / d0;

        $i1 = i0 + -1;

        $d1 = r1[i0];

        r2[$i1] = $d1;

        $r3 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] coefficients>;

        $i3 = i0 + -1;

        $d1 = $r3[$i3];

        $i1 = i0 + -1;

        $d2 = r2[$i1];

        $d2 = $d2 * d0;

        $d1 = $d1 + $d2;

        $r3[$i3] = $d1;

        $i1 = i0 + -2;

     label11:
        if $i1 < 0 goto label12;

        $i3 = $i1 + 1;

        $d1 = r1[$i3];

        $i3 = $i1 + 1;

        $d2 = r2[$i3];

        $r3 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] x>;

        $d3 = $r3[i2];

        $d2 = $d2 * $d3;

        $d1 = $d1 + $d2;

        r2[$i1] = $d1;

        $r3 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] coefficients>;

        $d1 = $r3[$i1];

        $d2 = r2[$i1];

        $d2 = $d2 * d0;

        $d1 = $d1 + $d2;

        $r3[$i1] = $d1;

        $i1 = $i1 + -1;

        goto label11;

     label12:
        i2 = i2 + 1;

        goto label07;

     label13:
        r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: boolean coefficientsComputed> = 1;

        return;
    }
    public int degree()
    {
        org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm r0;
        double[] $r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm;

        $r1 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] x>;

        $i0 = lengthof $r1;

        $i0 = $i0 + -1;

        return $i0;
    }
    public double[] getCoefficients()
    {
        org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm r0;
        double[] r1, $r2, $r3;
        boolean $z0;
        int $i0;

        r0 := @this: org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm;

        $z0 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: boolean coefficientsComputed>;

        if $z0 != 0 goto label1;

        virtualinvoke r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: void computeCoefficients()>();

     label1:
        r1 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] coefficients>;

        $i0 = lengthof r1;

        r1 = newarray (double)[$i0];

        $r2 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] coefficients>;

        $r3 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] coefficients>;

        $i0 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, 0, $i0);

        return r1;
    }
    public double[] getInterpolatingPoints()
    {
        org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm r0;
        double[] r1, $r2, $r3;
        int $i0;

        r0 := @this: org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm;

        r1 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] x>;

        $i0 = lengthof r1;

        r1 = newarray (double)[$i0];

        $r2 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] x>;

        $r3 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] x>;

        $i0 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, 0, $i0);

        return r1;
    }
    public double[] getInterpolatingValues()
    {
        org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm r0;
        double[] r1, $r2, $r3;
        int $i0;

        r0 := @this: org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm;

        r1 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] y>;

        $i0 = lengthof r1;

        r1 = newarray (double)[$i0];

        $r2 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] y>;

        $r3 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] y>;

        $i0 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, 0, $i0);

        return r1;
    }
    public double value(double)
    {
        org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm r0;
        double $d0;
        double[] $r1, $r2;

        r0 := @this: org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm;

        $d0 := @parameter0: double;

        $r2 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] x>;

        $r1 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] y>;

        $d0 = staticinvoke <org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: double evaluateInternal(double[],double[],double)>($r2, $r1, $d0);

        return $d0;
    }
