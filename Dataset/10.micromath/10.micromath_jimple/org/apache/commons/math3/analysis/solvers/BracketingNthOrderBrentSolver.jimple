org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver extends org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver implements org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver
private static final double DEFAULT_ABSOLUTE_ACCURACY
private static final int DEFAULT_MAXIMAL_ORDER
private static final int MAXIMAL_AGING
private static final double REDUCTION_FACTOR
private org.apache.commons.math3.analysis.solvers.AllowedSolution allowed
private final int maximalOrder
    public void <init>()
    {
        org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver r0;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver;

        specialinvoke r0.<org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver: void <init>(double,int)>(1.0E-6, 5);

        return;
    }
    public void <init>(double, double, double, int) throws org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver r0;
        double $d0, $d1, $d2;
        int $i0;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r1;
        java.lang.Integer $r2, $r3;
        org.apache.commons.math3.analysis.solvers.AllowedSolution $r4;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $i0 := @parameter3: int;

        specialinvoke r0.<org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver: void <init>(double,double,double)>($d0, $d1, $d2);

        if $i0 >= 2 goto label1;

        $r1 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        specialinvoke $r1.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r2, $r3, 1);

        throw $r1;

     label1:
        r0.<org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver: int maximalOrder> = $i0;

        $r4 = <org.apache.commons.math3.analysis.solvers.AllowedSolution: org.apache.commons.math3.analysis.solvers.AllowedSolution ANY_SIDE>;

        r0.<org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver: org.apache.commons.math3.analysis.solvers.AllowedSolution allowed> = $r4;

        return;
    }
    public void <init>(double, double, int) throws org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver r0;
        double $d0, $d1;
        int $i0;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r1;
        java.lang.Integer $r2, $r3;
        org.apache.commons.math3.analysis.solvers.AllowedSolution $r4;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $i0 := @parameter2: int;

        specialinvoke r0.<org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver: void <init>(double,double)>($d0, $d1);

        if $i0 >= 2 goto label1;

        $r1 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        specialinvoke $r1.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r2, $r3, 1);

        throw $r1;

     label1:
        r0.<org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver: int maximalOrder> = $i0;

        $r4 = <org.apache.commons.math3.analysis.solvers.AllowedSolution: org.apache.commons.math3.analysis.solvers.AllowedSolution ANY_SIDE>;

        r0.<org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver: org.apache.commons.math3.analysis.solvers.AllowedSolution allowed> = $r4;

        return;
    }
    public void <init>(double, int) throws org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver r0;
        double $d0;
        int $i0;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r1;
        java.lang.Integer $r2, $r3;
        org.apache.commons.math3.analysis.solvers.AllowedSolution $r4;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver;

        $d0 := @parameter0: double;

        $i0 := @parameter1: int;

        specialinvoke r0.<org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver: void <init>(double)>($d0);

        if $i0 >= 2 goto label1;

        $r1 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        specialinvoke $r1.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r2, $r3, 1);

        throw $r1;

     label1:
        r0.<org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver: int maximalOrder> = $i0;

        $r4 = <org.apache.commons.math3.analysis.solvers.AllowedSolution: org.apache.commons.math3.analysis.solvers.AllowedSolution ANY_SIDE>;

        r0.<org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver: org.apache.commons.math3.analysis.solvers.AllowedSolution allowed> = $r4;

        return;
    }
    private double guessX(double, double[], double[], int, int)
    {
        org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver r0;
        double $d0, $d1, $d2, $d3;
        double[] $r1, $r2;
        int $i0, $i1, i2, i3, i4, $i5;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver;

        $d0 := @parameter0: double;

        $r1 := @parameter1: double[];

        $r2 := @parameter2: double[];

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        i3 = $i0;

     label1:
        i2 = $i1 + -1;

        if i3 >= i2 goto label4;

        i2 = i3 + 1;

        i2 = i2 - $i0;

        i4 = $i1 + -1;

     label2:
        if i4 <= i3 goto label3;

        $d2 = $r1[i4];

        $i5 = i4 + -1;

        $d1 = $r1[$i5];

        $d2 = $d2 - $d1;

        $d3 = $r2[i4];

        $i5 = i4 - i2;

        $d1 = $r2[$i5];

        $d1 = $d3 - $d1;

        $d2 = $d2 / $d1;

        $r1[i4] = $d2;

        i4 = i4 + -1;

        goto label2;

     label3:
        i3 = i3 + 1;

        goto label1;

     label4:
        $d1 = 0.0;

        $i1 = $i1 + -1;

     label5:
        if $i1 < $i0 goto label6;

        $d2 = $r1[$i1];

        $d3 = $r2[$i1];

        $d3 = $d0 - $d3;

        $d1 = $d3 * $d1;

        $d1 = $d2 + $d1;

        $i1 = $i1 + -1;

        goto label5;

     label6:
        return $d1;
    }
    protected double doSolve() throws org.apache.commons.math3.exception.TooManyEvaluationsException, org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.exception.NoBracketingException
    {
        org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver r0;
        double d0, $d1, d2, d3, d4, d5, $d6, $d7, $d8, $d9;
        int $i0, i2, $i3, i4, i5, $i6, $i7, $i8;
        double[] $r1, $r2, r3;
        boolean $z0;
        byte $b1;
        int[] $r4;
        org.apache.commons.math3.analysis.solvers.AllowedSolution $r5;
        org.apache.commons.math3.exception.MathInternalError $r6;
        org.apache.commons.math3.exception.NoBracketingException $r7;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver;

        $i0 = r0.<org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver: int maximalOrder>;

        $i0 = $i0 + 1;

        $r1 = newarray (double)[$i0];

        $i0 = r0.<org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver: int maximalOrder>;

        $i0 = $i0 + 1;

        $r2 = newarray (double)[$i0];

        $d1 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver: double getMin()>();

        $r1[0] = $d1;

        $d1 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver: double getStartValue()>();

        $r1[1] = $d1;

        $d1 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver: double getMax()>();

        $r1[2] = $d1;

        $d1 = $r1[0];

        d2 = $r1[1];

        d3 = $r1[2];

        virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver: void verifySequence(double,double,double)>($d1, d2, d3);

        $d1 = $r1[1];

        $d1 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver: double computeObjectiveValue(double)>($d1);

        $r2[1] = $d1;

        $d1 = $r2[1];

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,int)>($d1, 0.0, 1);

        if $z0 == 0 goto label02;

        $d1 = $r1[1];

     label01:
        return $d1;

     label02:
        $d1 = $r1[0];

        $d1 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver: double computeObjectiveValue(double)>($d1);

        $r2[0] = $d1;

        $d1 = $r2[0];

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,int)>($d1, 0.0, 1);

        if $z0 == 0 goto label03;

        $d1 = $r1[0];

        return $d1;

     label03:
        $d1 = $r2[0];

        d2 = $r2[1];

        $d1 = $d1 * d2;

        $b1 = $d1 cmpg 0.0;

        if $b1 >= 0 goto label08;

        $i0 = 2;

        i2 = 1;

     label04:
        $i3 = lengthof $r1;

        r3 = newarray (double)[$i3];

        $i3 = i2 + -1;

        $d1 = $r1[$i3];

        $i3 = i2 + -1;

        d2 = $r2[$i3];

        d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d2);

        $i3 = 0;

        d3 = $r1[i2];

        d5 = $r2[i2];

        $d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d5);

        i4 = 0;

     label05:
        d0 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver: double getAbsoluteAccuracy()>();

        $d7 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver: double getRelativeAccuracy()>();

        $d8 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d1);

        $d9 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d3);

        $d8 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>($d8, $d9);

        $d7 = $d7 * $d8;

        d0 = d0 + $d7;

        $d7 = d3 - $d1;

        $b1 = $d7 cmpg d0;

        if $b1 <= 0 goto label06;

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>(d4, $d6);

        $d7 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver: double getFunctionValueAccuracy()>();

        $b1 = d0 cmpg $d7;

        if $b1 >= 0 goto label17;

     label06:
        $r4 = <org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver$1: int[] $SwitchMap$org$apache$commons$math3$analysis$solvers$AllowedSolution>;

        $r5 = r0.<org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver: org.apache.commons.math3.analysis.solvers.AllowedSolution allowed>;

        $i0 = virtualinvoke $r5.<org.apache.commons.math3.analysis.solvers.AllowedSolution: int ordinal()>();

        $i0 = $r4[$i0];

        lookupswitch($i0)
        {
            case 1: goto label11;
            case 2: goto label01;
            case 3: goto label12;
            case 4: goto label13;
            case 5: goto label14;
            default: goto label07;
        };

     label07:
        $r6 = new org.apache.commons.math3.exception.MathInternalError;

        specialinvoke $r6.<org.apache.commons.math3.exception.MathInternalError: void <init>()>();

        throw $r6;

     label08:
        $d1 = $r1[2];

        $d1 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver: double computeObjectiveValue(double)>($d1);

        $r2[2] = $d1;

        $d1 = $r2[2];

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,int)>($d1, 0.0, 1);

        if $z0 == 0 goto label09;

        $d1 = $r1[2];

        return $d1;

     label09:
        $d1 = $r2[1];

        d2 = $r2[2];

        $d1 = $d1 * d2;

        $b1 = $d1 cmpg 0.0;

        if $b1 >= 0 goto label10;

        $i0 = 3;

        i2 = 2;

        goto label04;

     label10:
        $r7 = new org.apache.commons.math3.exception.NoBracketingException;

        $d1 = $r1[0];

        d2 = $r1[2];

        d3 = $r2[0];

        d5 = $r2[2];

        specialinvoke $r7.<org.apache.commons.math3.exception.NoBracketingException: void <init>(double,double,double,double)>($d1, d2, d3, d5);

        throw $r7;

     label11:
        $b1 = d4 cmpg $d6;

        if $b1 < 0 goto label32;

     label12:
        return d3;

     label13:
        $b1 = d2 cmpg 0.0;

        if $b1 <= 0 goto label32;

        return d3;

     label14:
        $b1 = d2 cmpg 0.0;

        if $b1 >= 0 goto label16;

     label15:
        return d3;

     label16:
        d3 = $d1;

        goto label15;

     label17:
        if $i3 < 2 goto label25;

        i5 = $i3 + -2;

        $i6 = 1 << i5;

        $i6 = $i6 + -1;

        d0 = (double) $i6;

        i5 = i5 + 1;

        $d7 = (double) i5;

        $d8 = d0 * d2;

        $d9 = 0.0625 * $d7;

        $d9 = $d9 * d5;

        $d8 = $d8 - $d9;

        d0 = d0 + $d7;

        $d7 = $d8 / d0;

     label18:
        i5 = 0;

        $i6 = $i0;

     label19:
        $i7 = $i6 - i5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, i5, r3, i5, $i7);

        $d8 = specialinvoke r0.<org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver: double guessX(double,double[],double[],int,int)>($d7, r3, $r2, i5, $i6);

        d0 = $d8;

        $b1 = $d8 cmpl $d1;

        if $b1 <= 0 goto label20;

        $b1 = $d8 cmpg d3;

        if $b1 < 0 goto label22;

     label20:
        $i7 = i2 - i5;

        $i8 = $i6 - i2;

        if $i7 < $i8 goto label27;

        i5 = i5 + 1;

     label21:
        d0 = #NaN;

     label22:
        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z0 == 0 goto label23;

        $i7 = $i6 - i5;

        if $i7 > 1 goto label19;

     label23:
        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z0 == 0 goto label24;

        d0 = d3 - $d1;

        d0 = 0.5 * d0;

        d0 = $d1 + d0;

        i5 = i2 + -1;

        $i6 = i2;

     label24:
        $d7 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver: double computeObjectiveValue(double)>(d0);

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,int)>($d7, 0.0, 1);

        if $z0 == 0 goto label28;

        return d0;

     label25:
        if i4 < 2 goto label26;

        i5 = i4 + -2;

        $i6 = i5 + 1;

        d0 = (double) $i6;

        i5 = 1 << i5;

        i5 = i5 + -1;

        $d7 = (double) i5;

        $d8 = $d7 * d5;

        $d9 = 0.0625 * d0;

        $d9 = $d9 * d2;

        $d8 = $d8 - $d9;

        d0 = d0 + $d7;

        $d7 = $d8 / d0;

        goto label18;

     label26:
        $d7 = 0.0;

        goto label18;

     label27:
        $i6 = $i6 + -1;

        goto label21;

     label28:
        if $i0 <= 2 goto label30;

        $i7 = $i6 - i5;

        if $i7 == $i0 goto label30;

        $i0 = $i6 - i5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, i5, $r1, 0, $i0);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, i5, $r2, 0, $i0);

        i2 = i2 - i5;

     label29:
        i5 = i2 + 1;

        $i6 = $i0 - i2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, i2, $r1, i5, $i6);

        $r1[i2] = d0;

        i5 = i2 + 1;

        $i6 = $i0 - i2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, i2, $r2, i5, $i6);

        $r2[i2] = $d7;

        $i0 = $i0 + 1;

        $d8 = $d7 * d2;

        $b1 = $d8 cmpg 0.0;

        if $b1 > 0 goto label31;

        d3 = d0;

        d5 = $d7;

        $d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d7);

        $i3 = $i3 + 1;

        i4 = 0;

        goto label05;

     label30:
        i5 = lengthof $r1;

        if $i0 != i5 goto label29;

        $i0 = $i0 + -1;

        i5 = lengthof $r1;

        i5 = i5 + 1;

        i5 = i5 / 2;

        if i2 < i5 goto label29;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 1, $r1, 0, $i0);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 1, $r2, 0, $i0);

        i2 = i2 + -1;

        goto label29;

     label31:
        $d1 = d0;

        d2 = $d7;

        d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d7);

        $i3 = 0;

        i4 = i4 + 1;

        i2 = i2 + 1;

        goto label05;

     label32:
        return $d1;
    }
    public int getMaximalOrder()
    {
        org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver r0;
        int i0;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver;

        i0 = r0.<org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver: int maximalOrder>;

        return i0;
    }
    public double solve(int, org.apache.commons.math3.analysis.UnivariateFunction, double, double, double, org.apache.commons.math3.analysis.solvers.AllowedSolution) throws org.apache.commons.math3.exception.TooManyEvaluationsException, org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.exception.NoBracketingException
    {
        org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver r0;
        int $i0;
        org.apache.commons.math3.analysis.UnivariateFunction $r1;
        double $d0, $d1, $d2;
        org.apache.commons.math3.analysis.solvers.AllowedSolution $r2;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver;

        $i0 := @parameter0: int;

        $r1 := @parameter1: org.apache.commons.math3.analysis.UnivariateFunction;

        $d0 := @parameter2: double;

        $d1 := @parameter3: double;

        $d2 := @parameter4: double;

        $r2 := @parameter5: org.apache.commons.math3.analysis.solvers.AllowedSolution;

        r0.<org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver: org.apache.commons.math3.analysis.solvers.AllowedSolution allowed> = $r2;

        $d0 = specialinvoke r0.<org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver: double solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)>($i0, $r1, $d0, $d1, $d2);

        return $d0;
    }
    public double solve(int, org.apache.commons.math3.analysis.UnivariateFunction, double, double, org.apache.commons.math3.analysis.solvers.AllowedSolution) throws org.apache.commons.math3.exception.TooManyEvaluationsException, org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.exception.NoBracketingException
    {
        org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver r0;
        int $i0;
        org.apache.commons.math3.analysis.UnivariateFunction $r1;
        double $d0, $d1;
        org.apache.commons.math3.analysis.solvers.AllowedSolution $r2;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver;

        $i0 := @parameter0: int;

        $r1 := @parameter1: org.apache.commons.math3.analysis.UnivariateFunction;

        $d0 := @parameter2: double;

        $d1 := @parameter3: double;

        $r2 := @parameter4: org.apache.commons.math3.analysis.solvers.AllowedSolution;

        r0.<org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver: org.apache.commons.math3.analysis.solvers.AllowedSolution allowed> = $r2;

        $d0 = specialinvoke r0.<org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver: double solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)>($i0, $r1, $d0, $d1);

        return $d0;
    }
