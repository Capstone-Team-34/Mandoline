org.apache.commons.math3.analysis.differentiation.DSCompiler extends java.lang.Object
private static java.util.concurrent.atomic.AtomicReference compilers
private final int[][][] compIndirection
private final int[][] derivativesIndirection
private final int[] lowerIndirection
private final int[][][] multIndirection
private final int order
private final int parameters
private final int[][] sizes
    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicReference $r0;

        $r0 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r0.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>(null);

        <org.apache.commons.math3.analysis.differentiation.DSCompiler: java.util.concurrent.atomic.AtomicReference compilers> = $r0;

        return;
    }
    private void <init>(int, int, org.apache.commons.math3.analysis.differentiation.DSCompiler, org.apache.commons.math3.analysis.differentiation.DSCompiler) throws org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0, $r1, $r2;
        int $i0, $i1;
        int[][] $r3, $r4;
        int[] $r5;
        int[][][] $r6;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 := @parameter2: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        $r2 := @parameter3: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int parameters> = $i0;

        r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order> = $i1;

        $r3 = staticinvoke <org.apache.commons.math3.analysis.differentiation.DSCompiler: int[][] compileSizes(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler)>($i0, $i1, $r1);

        r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[][] sizes> = $r3;

        $r3 = staticinvoke <org.apache.commons.math3.analysis.differentiation.DSCompiler: int[][] compileDerivativesIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)>($i0, $i1, $r1, $r2);

        r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[][] derivativesIndirection> = $r3;

        $r5 = staticinvoke <org.apache.commons.math3.analysis.differentiation.DSCompiler: int[] compileLowerIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)>($i0, $i1, $r1, $r2);

        r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[] lowerIndirection> = $r5;

        $r5 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[] lowerIndirection>;

        $r6 = staticinvoke <org.apache.commons.math3.analysis.differentiation.DSCompiler: int[][][] compileMultiplicationIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[])>($i0, $i1, $r1, $r2, $r5);

        r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[][][] multIndirection> = $r6;

        $r3 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[][] sizes>;

        $r4 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[][] derivativesIndirection>;

        $r6 = staticinvoke <org.apache.commons.math3.analysis.differentiation.DSCompiler: int[][][] compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])>($i0, $i1, $r1, $r2, $r3, $r4);

        r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[][][] compIndirection> = $r6;

        return;
    }
    private static int[][][] compileCompositionIndirection(int, int, org.apache.commons.math3.analysis.differentiation.DSCompiler, org.apache.commons.math3.analysis.differentiation.DSCompiler, int[][], int[][]) throws org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        int $i0, $i1, i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10;
        org.apache.commons.math3.analysis.differentiation.DSCompiler $r0, $r1;
        int[][] $r2, $r3, r4, $r12;
        java.util.ArrayList r5, r7;
        int[] r6, r8, $r11, $r13;
        int[][][] r9, $r10;
        java.lang.Object $r14;
        byte $b11;
        java.lang.Object[] $r15;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r0 := @parameter2: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        $r1 := @parameter3: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        $r2 := @parameter4: int[][];

        $r3 := @parameter5: int[][];

        if $i0 == 0 goto label01;

        if $i1 != 0 goto label02;

     label01:
        r9 = newarray (int[][])[1];

        $r2 = newarray (int[])[1];

        r8 = newarray (int)[2];

        r8[0] = 1;

        r8[1] = 0;

        $r2[0] = r8;

        r9[0] = $r2;

        return r9;

     label02:
        r9 = $r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[][][] compIndirection>;

        $i3 = lengthof r9;

        r9 = $r1.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[][][] compIndirection>;

        i2 = lengthof r9;

        $i4 = $i3 + i2;

        r9 = newarray (int[][])[$i4];

        $r10 = $r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[][][] compIndirection>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, 0, r9, 0, $i3);

        $i4 = 0;

     label03:
        if $i4 >= i2 goto label25;

        r7 = new java.util.ArrayList;

        specialinvoke r7.<java.util.ArrayList: void <init>()>();

        $r10 = $r1.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[][][] compIndirection>;

        r4 = $r10[$i4];

        $i5 = lengthof r4;

        i6 = 0;

     label04:
        if i6 >= $i5 goto label12;

        r8 = r4[i6];

        $i7 = lengthof r8;

        $i7 = $i7 + 1;

        r6 = newarray (int)[$i7];

        $i7 = r8[0];

        r6[0] = $i7;

        $i7 = r8[1];

        $i7 = $i7 + 1;

        r6[1] = $i7;

        $r11 = newarray (int)[$i0];

        $i7 = $i0 + -1;

        $r11[$i7] = 1;

        $i7 = lengthof r8;

        $i8 = staticinvoke <org.apache.commons.math3.analysis.differentiation.DSCompiler: int getPartialDerivativeIndex(int,int,int[][],int[])>($i0, $i1, $r2, $r11);

        r6[$i7] = $i8;

        $i7 = 2;

     label05:
        $i8 = lengthof r8;

        if $i7 >= $i8 goto label06;

        $i8 = r8[$i7];

        $r12 = $r1.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[][] derivativesIndirection>;

        $i8 = staticinvoke <org.apache.commons.math3.analysis.differentiation.DSCompiler: int convertIndex(int,int,int[][],int,int,int[][])>($i8, $i0, $r12, $i0, $i1, $r2);

        r6[$i7] = $i8;

        $i7 = $i7 + 1;

        goto label05;

     label06:
        $i7 = lengthof r6;

        staticinvoke <java.util.Arrays: void sort(int[],int,int)>(r6, 2, $i7);

        interfaceinvoke r7.<java.util.List: boolean add(java.lang.Object)>(r6);

        $i7 = 2;

     label07:
        $i8 = lengthof r8;

        if $i7 >= $i8 goto label11;

        $i8 = lengthof r8;

        r6 = newarray (int)[$i8];

        $i8 = r8[0];

        r6[0] = $i8;

        $i8 = r8[1];

        r6[1] = $i8;

        $i8 = 2;

     label08:
        $i9 = lengthof r8;

        if $i8 >= $i9 goto label10;

        $i9 = r8[$i8];

        $r12 = $r1.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[][] derivativesIndirection>;

        $i9 = staticinvoke <org.apache.commons.math3.analysis.differentiation.DSCompiler: int convertIndex(int,int,int[][],int,int,int[][])>($i9, $i0, $r12, $i0, $i1, $r2);

        r6[$i8] = $i9;

        if $i8 != $i7 goto label09;

        $i9 = r6[$i8];

        $r13 = $r3[$i9];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r13, 0, $r11, 0, $i0);

        $i9 = $i0 + -1;

        $i10 = $r11[$i9];

        $i10 = $i10 + 1;

        $r11[$i9] = $i10;

        $i9 = staticinvoke <org.apache.commons.math3.analysis.differentiation.DSCompiler: int getPartialDerivativeIndex(int,int,int[][],int[])>($i0, $i1, $r2, $r11);

        r6[$i8] = $i9;

     label09:
        $i8 = $i8 + 1;

        goto label08;

     label10:
        $i8 = lengthof r6;

        staticinvoke <java.util.Arrays: void sort(int[],int,int)>(r6, 2, $i8);

        interfaceinvoke r7.<java.util.List: boolean add(java.lang.Object)>(r6);

        $i7 = $i7 + 1;

        goto label07;

     label11:
        i6 = i6 + 1;

        goto label04;

     label12:
        r5 = new java.util.ArrayList;

        $i5 = interfaceinvoke r7.<java.util.List: int size()>();

        specialinvoke r5.<java.util.ArrayList: void <init>(int)>($i5);

        $i5 = 0;

     label13:
        i6 = interfaceinvoke r7.<java.util.List: int size()>();

        if $i5 >= i6 goto label24;

        $r14 = interfaceinvoke r7.<java.util.List: java.lang.Object get(int)>($i5);

        r8 = (int[]) $r14;

        i6 = r8[0];

        if i6 <= 0 goto label23;

        i6 = $i5 + 1;

     label14:
        $i7 = interfaceinvoke r7.<java.util.List: int size()>();

        if i6 >= $i7 goto label22;

        $r14 = interfaceinvoke r7.<java.util.List: java.lang.Object get(int)>(i6);

        $r11 = (int[]) $r14;

        $i7 = lengthof r8;

        $i8 = lengthof $r11;

        if $i7 != $i8 goto label18;

        $i7 = 1;

     label15:
        $i8 = 1;

     label16:
        if $i7 == 0 goto label20;

        $i9 = lengthof r8;

        if $i8 >= $i9 goto label20;

        $i9 = r8[$i8];

        $i10 = $r11[$i8];

        if $i9 != $i10 goto label19;

        $b11 = 1;

     label17:
        $i7 = $i7 & $b11;

        $i8 = $i8 + 1;

        goto label16;

     label18:
        $i7 = 0;

        goto label15;

     label19:
        $b11 = 0;

        goto label17;

     label20:
        if $i7 == 0 goto label21;

        $i7 = r8[0];

        $i8 = $r11[0];

        $i7 = $i7 + $i8;

        r8[0] = $i7;

        $r11[0] = 0;

     label21:
        i6 = i6 + 1;

        goto label14;

     label22:
        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>(r8);

     label23:
        $i5 = $i5 + 1;

        goto label13;

     label24:
        $i5 = $i3 + $i4;

        i6 = interfaceinvoke r5.<java.util.List: int size()>();

        r4 = newarray (int[])[i6];

        $r15 = interfaceinvoke r5.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r4);

        r4 = (int[][]) $r15;

        r9[$i5] = r4;

        $i4 = $i4 + 1;

        goto label03;

     label25:
        return r9;
    }
    private static int[][] compileDerivativesIndirection(int, int, org.apache.commons.math3.analysis.differentiation.DSCompiler, org.apache.commons.math3.analysis.differentiation.DSCompiler)
    {
        int $i0, $i1, i2, $i3, $i4, $i5;
        org.apache.commons.math3.analysis.differentiation.DSCompiler $r0, $r1;
        int[] $r2, $r7;
        java.lang.Class $r3;
        java.lang.Object $r4;
        int[][] $r5, $r6;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r0 := @parameter2: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        $r1 := @parameter3: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        if $i0 == 0 goto label1;

        if $i1 != 0 goto label2;

     label1:
        $r2 = newarray (int)[2];

        $r2[0] = 1;

        $r2[1] = $i0;

        $r3 = <java.lang.Integer: java.lang.Class TYPE>;

        $r4 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r3, $r2);

        $r5 = (int[][]) $r4;

        return $r5;

     label2:
        $r5 = $r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[][] derivativesIndirection>;

        i2 = lengthof $r5;

        $r5 = $r1.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[][] derivativesIndirection>;

        $i1 = lengthof $r5;

        $i3 = i2 + $i1;

        $r2 = newarray (int)[2];

        $r2[0] = $i3;

        $r2[1] = $i0;

        $r3 = <java.lang.Integer: java.lang.Class TYPE>;

        $r4 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r3, $r2);

        $r5 = (int[][]) $r4;

        $i3 = 0;

     label3:
        if $i3 >= i2 goto label4;

        $r6 = $r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[][] derivativesIndirection>;

        $r2 = $r6[$i3];

        $r7 = $r5[$i3];

        $i4 = $i0 + -1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r7, 0, $i4);

        $i3 = $i3 + 1;

        goto label3;

     label4:
        $i3 = 0;

     label5:
        if $i3 >= $i1 goto label6;

        $r6 = $r1.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[][] derivativesIndirection>;

        $r2 = $r6[$i3];

        $i4 = i2 + $i3;

        $r7 = $r5[$i4];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r7, 0, $i0);

        $i4 = i2 + $i3;

        $r2 = $r5[$i4];

        $i4 = $i0 + -1;

        $i5 = $r2[$i4];

        $i5 = $i5 + 1;

        $r2[$i4] = $i5;

        $i3 = $i3 + 1;

        goto label5;

     label6:
        return $r5;
    }
    private static int[] compileLowerIndirection(int, int, org.apache.commons.math3.analysis.differentiation.DSCompiler, org.apache.commons.math3.analysis.differentiation.DSCompiler)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.apache.commons.math3.analysis.differentiation.DSCompiler $r0, $r1;
        int[] r2, $r3;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r0 := @parameter2: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        $r1 := @parameter3: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        if $i0 == 0 goto label1;

        if $i1 > 1 goto label2;

     label1:
        r2 = newarray (int)[1];

        r2[0] = 0;

        return r2;

     label2:
        r2 = $r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[] lowerIndirection>;

        $i1 = lengthof r2;

        r2 = $r1.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[] lowerIndirection>;

        $i0 = lengthof r2;

        $i3 = $i1 + $i0;

        r2 = newarray (int)[$i3];

        $r3 = $r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[] lowerIndirection>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r2, 0, $i1);

        $i3 = 0;

     label3:
        if $i3 >= $i0 goto label4;

        $i4 = $i1 + $i3;

        $i2 = virtualinvoke $r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int getSize()>();

        $r3 = $r1.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[] lowerIndirection>;

        $i5 = $r3[$i3];

        $i2 = $i2 + $i5;

        r2[$i4] = $i2;

        $i3 = $i3 + 1;

        goto label3;

     label4:
        return r2;
    }
    private static int[][][] compileMultiplicationIndirection(int, int, org.apache.commons.math3.analysis.differentiation.DSCompiler, org.apache.commons.math3.analysis.differentiation.DSCompiler, int[])
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        org.apache.commons.math3.analysis.differentiation.DSCompiler $r0, $r1;
        int[] $r2, $r8, $r9;
        java.util.ArrayList r3, r5;
        int[][] r4;
        int[][][] r6, $r7;
        java.lang.Object $r10;
        java.lang.Object[] $r11;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r0 := @parameter2: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        $r1 := @parameter3: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        $r2 := @parameter4: int[];

        if $i0 == 0 goto label01;

        if $i1 != 0 goto label02;

     label01:
        r6 = newarray (int[][])[1];

        r4 = newarray (int[])[1];

        $r2 = newarray (int)[3];

        $r2[0] = 1;

        $r2[1] = 0;

        $r2[2] = 0;

        r4[0] = $r2;

        r6[0] = r4;

        return r6;

     label02:
        r6 = $r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[][][] multIndirection>;

        $i1 = lengthof r6;

        r6 = $r1.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[][][] multIndirection>;

        $i0 = lengthof r6;

        $i2 = $i1 + $i0;

        r6 = newarray (int[][])[$i2];

        $r7 = $r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[][][] multIndirection>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, r6, 0, $i1);

        $i2 = 0;

     label03:
        if $i2 >= $i0 goto label12;

        $r7 = $r1.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[][][] multIndirection>;

        r4 = $r7[$i2];

        r5 = new java.util.ArrayList;

        $i3 = lengthof r4;

        $i3 = $i3 * 2;

        specialinvoke r5.<java.util.ArrayList: void <init>(int)>($i3);

        $i3 = 0;

     label04:
        $i4 = lengthof r4;

        if $i3 >= $i4 goto label05;

        $r8 = newarray (int)[3];

        $r9 = r4[$i3];

        $i4 = $r9[0];

        $r8[0] = $i4;

        $r9 = r4[$i3];

        $i4 = $r9[1];

        $i4 = $r2[$i4];

        $r8[1] = $i4;

        $r9 = r4[$i3];

        $i4 = $r9[2];

        $i4 = $i4 + $i1;

        $r8[2] = $i4;

        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r8);

        $r8 = newarray (int)[3];

        $r9 = r4[$i3];

        $i4 = $r9[0];

        $r8[0] = $i4;

        $r9 = r4[$i3];

        $i4 = $r9[1];

        $i4 = $i4 + $i1;

        $r8[1] = $i4;

        $r9 = r4[$i3];

        $i4 = $r9[2];

        $i4 = $r2[$i4];

        $r8[2] = $i4;

        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r8);

        $i3 = $i3 + 1;

        goto label04;

     label05:
        r3 = new java.util.ArrayList;

        $i3 = interfaceinvoke r5.<java.util.List: int size()>();

        specialinvoke r3.<java.util.ArrayList: void <init>(int)>($i3);

        $i3 = 0;

     label06:
        $i4 = interfaceinvoke r5.<java.util.List: int size()>();

        if $i3 >= $i4 goto label11;

        $r10 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>($i3);

        $r8 = (int[]) $r10;

        $i4 = $r8[0];

        if $i4 <= 0 goto label10;

        $i4 = $i3 + 1;

     label07:
        $i5 = interfaceinvoke r5.<java.util.List: int size()>();

        if $i4 >= $i5 goto label09;

        $r10 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>($i4);

        $r9 = (int[]) $r10;

        $i5 = $r8[1];

        $i6 = $r9[1];

        if $i5 != $i6 goto label08;

        $i5 = $r8[2];

        $i6 = $r9[2];

        if $i5 != $i6 goto label08;

        $i5 = $r8[0];

        $i6 = $r9[0];

        $i5 = $i5 + $i6;

        $r8[0] = $i5;

        $r9[0] = 0;

     label08:
        $i4 = $i4 + 1;

        goto label07;

     label09:
        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r8);

     label10:
        $i3 = $i3 + 1;

        goto label06;

     label11:
        $i3 = $i1 + $i2;

        $i4 = interfaceinvoke r3.<java.util.List: int size()>();

        r4 = newarray (int[])[$i4];

        $r11 = interfaceinvoke r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r4);

        r4 = (int[][]) $r11;

        r6[$i3] = r4;

        $i2 = $i2 + 1;

        goto label03;

     label12:
        return r6;
    }
    private static int[][] compileSizes(int, int, org.apache.commons.math3.analysis.differentiation.DSCompiler)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.apache.commons.math3.analysis.differentiation.DSCompiler $r0;
        int[] $r1, $r6;
        java.lang.Class $r2;
        java.lang.Object $r3;
        int[][] r4, $r5;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r0 := @parameter2: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        $i3 = $i0 + 1;

        $i4 = $i1 + 1;

        $r1 = newarray (int)[2];

        $r1[0] = $i3;

        $r1[1] = $i4;

        $r2 = <java.lang.Integer: java.lang.Class TYPE>;

        $r3 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r2, $r1);

        r4 = (int[][]) $r3;

        if $i0 != 0 goto label1;

        $r1 = r4[0];

        staticinvoke <java.util.Arrays: void fill(int[],int)>($r1, 1);

        return r4;

     label1:
        $r5 = $r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[][] sizes>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r4, 0, $i0);

        $r1 = r4[$i0];

        $r1[0] = 1;

        $i3 = 0;

     label2:
        if $i3 >= $i1 goto label3;

        $r1 = r4[$i0];

        $i4 = $i3 + 1;

        $r6 = r4[$i0];

        $i5 = $r6[$i3];

        $i2 = $i0 + -1;

        $r6 = r4[$i2];

        $i2 = $i3 + 1;

        $i2 = $r6[$i2];

        $i5 = $i5 + $i2;

        $r1[$i4] = $i5;

        $i3 = $i3 + 1;

        goto label2;

     label3:
        return r4;
    }
    private static int convertIndex(int, int, int[][], int, int, int[][]) throws org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        int $i0, $i1, $i2, $i3;
        int[][] $r0, $r1;
        int[] r2, $r3;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r0 := @parameter2: int[][];

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        $r1 := @parameter5: int[][];

        r2 = newarray (int)[$i2];

        $r3 = $r0[$i0];

        $i0 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i1, $i2);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r2, 0, $i0);

        $i0 = staticinvoke <org.apache.commons.math3.analysis.differentiation.DSCompiler: int getPartialDerivativeIndex(int,int,int[][],int[])>($i2, $i3, $r1, r2);

        return $i0;
    }
    public static org.apache.commons.math3.analysis.differentiation.DSCompiler getCompiler(int, int) throws org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        int $i0, $i1, i2, $i3, $i4, $i5;
        org.apache.commons.math3.analysis.differentiation.DSCompiler[] $r0, $r7, $r8;
        java.util.concurrent.atomic.AtomicReference $r1;
        java.lang.Object $r2;
        org.apache.commons.math3.analysis.differentiation.DSCompiler[][] r3, r6;
        org.apache.commons.math3.analysis.differentiation.DSCompiler $r4, r9, $r10;
        int[] $r5;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = <org.apache.commons.math3.analysis.differentiation.DSCompiler: java.util.concurrent.atomic.AtomicReference compilers>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r3 = (org.apache.commons.math3.analysis.differentiation.DSCompiler[][]) $r2;

        if r3 == null goto label01;

        $i3 = lengthof r3;

        if $i3 <= $i0 goto label01;

        $r0 = r3[$i0];

        $i3 = lengthof $r0;

        if $i3 <= $i1 goto label01;

        $r0 = r3[$i0];

        $r4 = $r0[$i1];

        if $r4 == null goto label01;

        $r0 = r3[$i0];

        $r4 = $r0[$i1];

        return $r4;

     label01:
        if r3 != null goto label05;

        $i3 = 0;

     label02:
        $i3 = staticinvoke <org.apache.commons.math3.util.FastMath: int max(int,int)>($i0, $i3);

        if r3 != null goto label06;

        $i4 = 0;

     label03:
        $i4 = staticinvoke <org.apache.commons.math3.util.FastMath: int max(int,int)>($i1, $i4);

        $i3 = $i3 + 1;

        $i4 = $i4 + 1;

        $r5 = newarray (int)[2];

        $r5[0] = $i3;

        $r5[1] = $i4;

        $r2 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>(class "Lorg/apache/commons/math3/analysis/differentiation/DSCompiler;", $r5);

        r6 = (org.apache.commons.math3.analysis.differentiation.DSCompiler[][]) $r2;

        if r3 == null goto label07;

        $i3 = 0;

     label04:
        $i4 = lengthof r3;

        if $i3 >= $i4 goto label07;

        $r7 = r3[$i3];

        $r0 = r6[$i3];

        $r8 = r3[$i3];

        $i4 = lengthof $r8;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, $r0, 0, $i4);

        $i3 = $i3 + 1;

        goto label04;

     label05:
        $i3 = lengthof r3;

        goto label02;

     label06:
        $r0 = r3[0];

        $i4 = lengthof $r0;

        goto label03;

     label07:
        $i3 = 0;

     label08:
        $i4 = $i0 + $i1;

        if $i3 > $i4 goto label16;

        $i4 = $i3 - $i0;

        $i4 = staticinvoke <org.apache.commons.math3.util.FastMath: int max(int,int)>(0, $i4);

     label09:
        i2 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i1, $i3);

        if $i4 > i2 goto label15;

        i2 = $i3 - $i4;

        $r0 = r6[i2];

        $r4 = $r0[$i4];

        if $r4 != null goto label12;

        if i2 != 0 goto label13;

        $r4 = null;

     label10:
        if $i4 != 0 goto label14;

        r9 = null;

     label11:
        $r0 = r6[i2];

        $r10 = new org.apache.commons.math3.analysis.differentiation.DSCompiler;

        specialinvoke $r10.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void <init>(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)>(i2, $i4, $r4, r9);

        $r0[$i4] = $r10;

     label12:
        $i4 = $i4 + 1;

        goto label09;

     label13:
        $i5 = i2 + -1;

        $r0 = r6[$i5];

        $r4 = $r0[$i4];

        goto label10;

     label14:
        $r0 = r6[i2];

        $i5 = $i4 + -1;

        r9 = $r0[$i5];

        goto label11;

     label15:
        $i3 = $i3 + 1;

        goto label08;

     label16:
        $r1 = <org.apache.commons.math3.analysis.differentiation.DSCompiler: java.util.concurrent.atomic.AtomicReference compilers>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(r3, r6);

        $r0 = r6[$i0];

        $r4 = $r0[$i1];

        return $r4;
    }
    private static transient int getPartialDerivativeIndex(int, int, int[][], int[]) throws org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        int $i0, $i1, i2, i3, i4, i5, $i6, i7;
        int[][] $r0;
        int[] $r1, $r5;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r2;
        java.lang.Integer $r3, $r4;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r0 := @parameter2: int[][];

        $r1 := @parameter3: int[];

        i2 = 0;

        i3 = $i1;

        i4 = 0;

        $i0 = $i0 + -1;

     label1:
        if $i0 < 0 goto label4;

        i5 = $r1[$i0];

        i4 = i4 + i5;

        if i4 <= $i1 goto label5;

        $r2 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i4);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        specialinvoke $r2.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r3, $r4, 1);

        throw $r2;

     label2:
        i3 = $i6 + -1;

        if $i6 <= 0 goto label3;

        $r5 = $r0[$i0];

        $i6 = $r5[i7];

        i2 = i2 + $i6;

        $i6 = i3;

        i7 = i7 + -1;

        goto label2;

     label3:
        $i0 = $i0 + -1;

        i3 = i7;

        goto label1;

     label4:
        return i2;

     label5:
        $i6 = i5;

        i7 = i3;

        goto label2;
    }
    public void acos(double[], int, double[], int)
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        double[] $r1, $r2, r3, r4;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        double d0, d1, d2, $d3, $d4, d5, $d6, $d7;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        $r1 := @parameter0: double[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: double[];

        $i1 := @parameter3: int;

        $i2 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        $i2 = $i2 + 1;

        r3 = newarray (double)[$i2];

        d1 = $r1[$i0];

        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double acos(double)>(d1);

        r3[0] = d2;

        $i2 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if $i2 <= 0 goto label7;

        $i2 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        r4 = newarray (double)[$i2];

        d2 = (double) -4616189618054758400L;

        r4[0] = d2;

        d2 = d1 * d1;

        d0 = 1.0 - d2;

        d0 = 1.0 / d0;

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d0);

        d5 = $d4;

        $d6 = r4[0];

        $d4 = $d6 * $d4;

        r3[1] = $d4;

        $i2 = 2;

     label1:
        $i3 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if $i2 > $i3 goto label7;

        $d4 = 0.0;

        $i3 = $i2 + -1;

        $i4 = $i2 + -1;

        $d6 = (double) $i4;

        $i4 = $i2 + -2;

        $d3 = r4[$i4];

        $d6 = $d6 * $d3;

        r4[$i3] = $d6;

        $i3 = $i2 + -1;

     label2:
        if $i3 < 0 goto label5;

        $d4 = $d4 * d2;

        $d6 = r4[$i3];

        $d4 = $d4 + $d6;

        if $i3 <= 2 goto label4;

        $i4 = $i3 + -2;

        $i5 = $i3 + -1;

        $d6 = (double) $i5;

        $i5 = $i3 + -1;

        $d3 = r4[$i5];

        $d6 = $d6 * $d3;

        $i5 = $i2 * 2;

        $i5 = $i5 - $i3;

        $d7 = (double) $i5;

        $i5 = $i3 + -3;

        $d3 = r4[$i5];

        $d3 = $d7 * $d3;

        $d6 = $d6 + $d3;

        r4[$i4] = $d6;

     label3:
        $i3 = $i3 + -2;

        goto label2;

     label4:
        if $i3 != 2 goto label3;

        $d6 = r4[1];

        r4[0] = $d6;

        goto label3;

     label5:
        $i3 = $i2 & 1;

        if $i3 != 0 goto label6;

        $d4 = $d4 * d1;

     label6:
        d5 = d5 * d0;

        $d4 = d5 * $d4;

        r3[$i2] = $d4;

        $i2 = $i2 + 1;

        goto label1;

     label7:
        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void compose(double[],int,double[],double[],int)>($r1, $i0, r3, $r2, $i1);

        return;
    }
    public void acosh(double[], int, double[], int)
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        double[] $r1, $r2, r3, r4;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        double d0, d1, d2, $d3, $d4, d5, $d6, $d7;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        $r1 := @parameter0: double[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: double[];

        $i1 := @parameter3: int;

        $i2 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        $i2 = $i2 + 1;

        r3 = newarray (double)[$i2];

        d1 = $r1[$i0];

        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double acosh(double)>(d1);

        r3[0] = d2;

        $i2 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if $i2 <= 0 goto label7;

        $i2 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        r4 = newarray (double)[$i2];

        d2 = (double) 4607182418800017408L;

        r4[0] = d2;

        d2 = d1 * d1;

        d0 = d2 - 1.0;

        d0 = 1.0 / d0;

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d0);

        d5 = $d4;

        $d6 = r4[0];

        $d4 = $d6 * $d4;

        r3[1] = $d4;

        $i2 = 2;

     label1:
        $i3 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if $i2 > $i3 goto label7;

        $d4 = 0.0;

        $i3 = $i2 + -1;

        $i4 = 1 - $i2;

        $d6 = (double) $i4;

        $i4 = $i2 + -2;

        $d3 = r4[$i4];

        $d6 = $d6 * $d3;

        r4[$i3] = $d6;

        $i3 = $i2 + -1;

     label2:
        if $i3 < 0 goto label5;

        $d4 = $d4 * d2;

        $d6 = r4[$i3];

        $d4 = $d4 + $d6;

        if $i3 <= 2 goto label4;

        $i4 = $i3 + -2;

        $i5 = 1 - $i3;

        $d6 = (double) $i5;

        $i5 = $i3 + -1;

        $d3 = r4[$i5];

        $d6 = $d6 * $d3;

        $i5 = $i2 * 2;

        $i5 = $i3 - $i5;

        $d7 = (double) $i5;

        $i5 = $i3 + -3;

        $d3 = r4[$i5];

        $d3 = $d7 * $d3;

        $d6 = $d6 + $d3;

        r4[$i4] = $d6;

     label3:
        $i3 = $i3 + -2;

        goto label2;

     label4:
        if $i3 != 2 goto label3;

        $d6 = r4[1];

        $d6 = neg $d6;

        r4[0] = $d6;

        goto label3;

     label5:
        $i3 = $i2 & 1;

        if $i3 != 0 goto label6;

        $d4 = $d4 * d1;

     label6:
        d5 = d5 * d0;

        $d4 = d5 * $d4;

        r3[$i2] = $d4;

        $i2 = $i2 + 1;

        goto label1;

     label7:
        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void compose(double[],int,double[],double[],int)>($r1, $i0, r3, $r2, $i1);

        return;
    }
    public void add(double[], int, double[], int, double[], int)
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        double[] $r1, $r2, $r3;
        int $i0, $i1, $i2, $i3, i4, $i5;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        $r1 := @parameter0: double[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: double[];

        $i1 := @parameter3: int;

        $r3 := @parameter4: double[];

        $i2 := @parameter5: int;

        i4 = 0;

     label1:
        $i3 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int getSize()>();

        if i4 >= $i3 goto label2;

        $i3 = $i2 + i4;

        $i5 = $i0 + i4;

        $d0 = $r1[$i5];

        $i5 = $i1 + i4;

        $d1 = $r2[$i5];

        $d0 = $d0 + $d1;

        $r3[$i3] = $d0;

        i4 = i4 + 1;

        goto label1;

     label2:
        return;
    }
    public void asin(double[], int, double[], int)
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        double[] $r1, $r2, r3, r4;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        double d0, d1, d2, $d3, $d4, d5, $d6, $d7;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        $r1 := @parameter0: double[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: double[];

        $i1 := @parameter3: int;

        $i2 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        $i2 = $i2 + 1;

        r3 = newarray (double)[$i2];

        d1 = $r1[$i0];

        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double asin(double)>(d1);

        r3[0] = d2;

        $i2 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if $i2 <= 0 goto label7;

        $i2 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        r4 = newarray (double)[$i2];

        d2 = (double) 4607182418800017408L;

        r4[0] = d2;

        d2 = d1 * d1;

        d0 = 1.0 - d2;

        d0 = 1.0 / d0;

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d0);

        d5 = $d4;

        $d6 = r4[0];

        $d4 = $d6 * $d4;

        r3[1] = $d4;

        $i2 = 2;

     label1:
        $i3 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if $i2 > $i3 goto label7;

        $d4 = 0.0;

        $i3 = $i2 + -1;

        $i4 = $i2 + -1;

        $d6 = (double) $i4;

        $i4 = $i2 + -2;

        $d3 = r4[$i4];

        $d6 = $d6 * $d3;

        r4[$i3] = $d6;

        $i3 = $i2 + -1;

     label2:
        if $i3 < 0 goto label5;

        $d4 = $d4 * d2;

        $d6 = r4[$i3];

        $d4 = $d4 + $d6;

        if $i3 <= 2 goto label4;

        $i4 = $i3 + -2;

        $i5 = $i3 + -1;

        $d6 = (double) $i5;

        $i5 = $i3 + -1;

        $d3 = r4[$i5];

        $d6 = $d6 * $d3;

        $i5 = $i2 * 2;

        $i5 = $i5 - $i3;

        $d7 = (double) $i5;

        $i5 = $i3 + -3;

        $d3 = r4[$i5];

        $d3 = $d7 * $d3;

        $d6 = $d6 + $d3;

        r4[$i4] = $d6;

     label3:
        $i3 = $i3 + -2;

        goto label2;

     label4:
        if $i3 != 2 goto label3;

        $d6 = r4[1];

        r4[0] = $d6;

        goto label3;

     label5:
        $i3 = $i2 & 1;

        if $i3 != 0 goto label6;

        $d4 = $d4 * d1;

     label6:
        d5 = d5 * d0;

        $d4 = d5 * $d4;

        r3[$i2] = $d4;

        $i2 = $i2 + 1;

        goto label1;

     label7:
        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void compose(double[],int,double[],double[],int)>($r1, $i0, r3, $r2, $i1);

        return;
    }
    public void asinh(double[], int, double[], int)
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        double[] $r1, $r2, r3, r4;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        double d0, d1, d2, $d3, $d4, d5, $d6, $d7;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        $r1 := @parameter0: double[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: double[];

        $i1 := @parameter3: int;

        $i2 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        $i2 = $i2 + 1;

        r3 = newarray (double)[$i2];

        d1 = $r1[$i0];

        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double asinh(double)>(d1);

        r3[0] = d2;

        $i2 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if $i2 <= 0 goto label7;

        $i2 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        r4 = newarray (double)[$i2];

        d2 = (double) 4607182418800017408L;

        r4[0] = d2;

        d2 = d1 * d1;

        d0 = 1.0 + d2;

        d0 = 1.0 / d0;

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d0);

        d5 = $d4;

        $d6 = r4[0];

        $d4 = $d6 * $d4;

        r3[1] = $d4;

        $i2 = 2;

     label1:
        $i3 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if $i2 > $i3 goto label7;

        $d4 = 0.0;

        $i3 = $i2 + -1;

        $i4 = 1 - $i2;

        $d6 = (double) $i4;

        $i4 = $i2 + -2;

        $d3 = r4[$i4];

        $d6 = $d6 * $d3;

        r4[$i3] = $d6;

        $i3 = $i2 + -1;

     label2:
        if $i3 < 0 goto label5;

        $d4 = $d4 * d2;

        $d6 = r4[$i3];

        $d4 = $d4 + $d6;

        if $i3 <= 2 goto label4;

        $i4 = $i3 + -2;

        $i5 = $i3 + -1;

        $d6 = (double) $i5;

        $i5 = $i3 + -1;

        $d3 = r4[$i5];

        $d6 = $d6 * $d3;

        $i5 = $i2 * 2;

        $i5 = $i3 - $i5;

        $d7 = (double) $i5;

        $i5 = $i3 + -3;

        $d3 = r4[$i5];

        $d3 = $d7 * $d3;

        $d6 = $d6 + $d3;

        r4[$i4] = $d6;

     label3:
        $i3 = $i3 + -2;

        goto label2;

     label4:
        if $i3 != 2 goto label3;

        $d6 = r4[1];

        r4[0] = $d6;

        goto label3;

     label5:
        $i3 = $i2 & 1;

        if $i3 != 0 goto label6;

        $d4 = $d4 * d1;

     label6:
        d5 = d5 * d0;

        $d4 = d5 * $d4;

        r3[$i2] = $d4;

        $i2 = $i2 + 1;

        goto label1;

     label7:
        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void compose(double[],int,double[],double[],int)>($r1, $i0, r3, $r2, $i1);

        return;
    }
    public void atan(double[], int, double[], int)
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        double[] $r1, $r2, r3, r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        double d0, d1, d2, $d3, d4, $d5, $d6, $d7;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        $r1 := @parameter0: double[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: double[];

        $i1 := @parameter3: int;

        $i2 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        $i2 = $i2 + 1;

        r3 = newarray (double)[$i2];

        d1 = $r1[$i0];

        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan(double)>(d1);

        r3[0] = d2;

        $i2 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if $i2 <= 0 goto label7;

        $i2 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        r4 = newarray (double)[$i2];

        d2 = (double) 4607182418800017408L;

        r4[0] = d2;

        d2 = d1 * d1;

        d0 = 1.0 + d2;

        d0 = 1.0 / d0;

        d4 = d0;

        $d5 = r4[0];

        $d5 = $d5 * d0;

        r3[1] = $d5;

        $i2 = 2;

     label1:
        $i3 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if $i2 > $i3 goto label7;

        $d5 = 0.0;

        $i3 = $i2 + -1;

        $i4 = neg $i2;

        $d6 = (double) $i4;

        $i4 = $i2 + -2;

        $d3 = r4[$i4];

        $d6 = $d6 * $d3;

        r4[$i3] = $d6;

        $i3 = $i2 + -1;

     label2:
        if $i3 < 0 goto label5;

        $d5 = $d5 * d2;

        $d6 = r4[$i3];

        $d5 = $d5 + $d6;

        if $i3 <= 2 goto label4;

        $i4 = $i3 + -2;

        $i5 = $i3 + -1;

        $d6 = (double) $i5;

        $i5 = $i3 + -1;

        $d3 = r4[$i5];

        $d6 = $d6 * $d3;

        $i5 = $i3 + -1;

        $i6 = $i2 * 2;

        $i5 = $i5 - $i6;

        $d7 = (double) $i5;

        $i5 = $i3 + -3;

        $d3 = r4[$i5];

        $d3 = $d7 * $d3;

        $d6 = $d6 + $d3;

        r4[$i4] = $d6;

     label3:
        $i3 = $i3 + -2;

        goto label2;

     label4:
        if $i3 != 2 goto label3;

        $d6 = r4[1];

        r4[0] = $d6;

        goto label3;

     label5:
        $i3 = $i2 & 1;

        if $i3 != 0 goto label6;

        $d5 = $d5 * d1;

     label6:
        d4 = d4 * d0;

        $d5 = d4 * $d5;

        r3[$i2] = $d5;

        $i2 = $i2 + 1;

        goto label1;

     label7:
        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void compose(double[],int,double[],double[],int)>($r1, $i0, r3, $r2, $i1);

        return;
    }
    public void atan2(double[], int, double[], int, double[], int)
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        double[] $r1, $r2, $r3, r4, r5;
        int $i0, $i1, $i2, $i3, $i5;
        double $d0, $d1;
        byte $b4;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        $r1 := @parameter0: double[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: double[];

        $i1 := @parameter3: int;

        $r3 := @parameter4: double[];

        $i2 := @parameter5: int;

        $i3 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int getSize()>();

        r4 = newarray (double)[$i3];

        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void multiply(double[],int,double[],int,double[],int)>($r2, $i1, $r2, $i1, r4, 0);

        $i3 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int getSize()>();

        r5 = newarray (double)[$i3];

        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void multiply(double[],int,double[],int,double[],int)>($r1, $i0, $r1, $i0, r5, 0);

        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void add(double[],int,double[],int,double[],int)>(r4, 0, r5, 0, r5, 0);

        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void rootN(double[],int,int,double[],int)>(r5, 0, 2, r4, 0);

        $d0 = $r2[$i1];

        $b4 = $d0 cmpl 0.0;

        if $b4 < 0 goto label2;

        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void add(double[],int,double[],int,double[],int)>(r4, 0, $r2, $i1, r5, 0);

        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void divide(double[],int,double[],int,double[],int)>($r1, $i0, r5, 0, r4, 0);

        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void atan(double[],int,double[],int)>(r4, 0, r5, 0);

        $i3 = 0;

     label1:
        $i5 = lengthof r5;

        if $i3 >= $i5 goto label6;

        $i5 = $i2 + $i3;

        $d0 = r5[$i3];

        $d0 = 2.0 * $d0;

        $r3[$i5] = $d0;

        $i3 = $i3 + 1;

        goto label1;

     label2:
        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void subtract(double[],int,double[],int,double[],int)>(r4, 0, $r2, $i1, r5, 0);

        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void divide(double[],int,double[],int,double[],int)>($r1, $i0, r5, 0, r4, 0);

        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void atan(double[],int,double[],int)>(r4, 0, r5, 0);

        $d0 = r5[0];

        $b4 = $d0 cmpg 0.0;

        if $b4 > 0 goto label5;

        $d0 = -3.141592653589793;

     label3:
        $d1 = r5[0];

        $d1 = 2.0 * $d1;

        $d0 = $d0 - $d1;

        $r3[$i2] = $d0;

        $i3 = 1;

     label4:
        $i5 = lengthof r5;

        if $i3 >= $i5 goto label6;

        $i5 = $i2 + $i3;

        $d0 = r5[$i3];

        $d0 = -2.0 * $d0;

        $r3[$i5] = $d0;

        $i3 = $i3 + 1;

        goto label4;

     label5:
        $d0 = 3.141592653589793;

        goto label3;

     label6:
        $d0 = $r1[$i0];

        $d1 = $r2[$i1];

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d0, $d1);

        $r3[$i2] = $d0;

        return;
    }
    public void atanh(double[], int, double[], int)
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        double[] $r1, $r2, r3, r4;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        double d0, d1, d2, $d3, d4, $d5, $d6, $d7;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        $r1 := @parameter0: double[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: double[];

        $i1 := @parameter3: int;

        $i2 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        $i2 = $i2 + 1;

        r3 = newarray (double)[$i2];

        d1 = $r1[$i0];

        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double atanh(double)>(d1);

        r3[0] = d2;

        $i2 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if $i2 <= 0 goto label7;

        $i2 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        r4 = newarray (double)[$i2];

        d2 = (double) 4607182418800017408L;

        r4[0] = d2;

        d2 = d1 * d1;

        d0 = 1.0 - d2;

        d0 = 1.0 / d0;

        d4 = d0;

        $d5 = r4[0];

        $d5 = $d5 * d0;

        r3[1] = $d5;

        $i2 = 2;

     label1:
        $i3 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if $i2 > $i3 goto label7;

        $d5 = 0.0;

        $i3 = $i2 + -1;

        $d6 = (double) $i2;

        $i4 = $i2 + -2;

        $d3 = r4[$i4];

        $d6 = $d6 * $d3;

        r4[$i3] = $d6;

        $i3 = $i2 + -1;

     label2:
        if $i3 < 0 goto label5;

        $d5 = $d5 * d2;

        $d6 = r4[$i3];

        $d5 = $d5 + $d6;

        if $i3 <= 2 goto label4;

        $i4 = $i3 + -2;

        $i5 = $i3 + -1;

        $d6 = (double) $i5;

        $i5 = $i3 + -1;

        $d3 = r4[$i5];

        $d6 = $d6 * $d3;

        $i5 = $i2 * 2;

        $i5 = $i5 - $i3;

        $i5 = $i5 + 1;

        $d7 = (double) $i5;

        $i5 = $i3 + -3;

        $d3 = r4[$i5];

        $d3 = $d7 * $d3;

        $d6 = $d6 + $d3;

        r4[$i4] = $d6;

     label3:
        $i3 = $i3 + -2;

        goto label2;

     label4:
        if $i3 != 2 goto label3;

        $d6 = r4[1];

        r4[0] = $d6;

        goto label3;

     label5:
        $i3 = $i2 & 1;

        if $i3 != 0 goto label6;

        $d5 = $d5 * d1;

     label6:
        d4 = d4 * d0;

        $d5 = d4 * $d5;

        r3[$i2] = $d5;

        $i2 = $i2 + 1;

        goto label1;

     label7:
        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void compose(double[],int,double[],double[],int)>($r1, $i0, r3, $r2, $i1);

        return;
    }
    public void checkCompatibility(org.apache.commons.math3.analysis.differentiation.DSCompiler) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0, $r1;
        int $i0, $i1;
        org.apache.commons.math3.exception.DimensionMismatchException $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        $r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        $i0 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int parameters>;

        $i1 = $r1.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int parameters>;

        if $i0 == $i1 goto label1;

        $r2 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i0 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int parameters>;

        $i1 = $r1.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int parameters>;

        specialinvoke $r2.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i0, $i1);

        throw $r2;

     label1:
        $i0 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        $i1 = $r1.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if $i0 == $i1 goto label2;

        $r2 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i0 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        $i1 = $r1.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        specialinvoke $r2.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i0, $i1);

        throw $r2;

     label2:
        return;
    }
    public void compose(double[], int, double[], double[], int)
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        double[] $r1, $r2, $r3;
        int $i0, $i1, i2, $i3, $i4, $i5;
        int[][] r4;
        int[] r5;
        double $d0, d1, $d2;
        int[][][] $r6;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        $r1 := @parameter0: double[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: double[];

        $r3 := @parameter3: double[];

        $i1 := @parameter4: int;

        i2 = 0;

     label1:
        $r6 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[][][] compIndirection>;

        $i3 = lengthof $r6;

        if i2 >= $i3 goto label6;

        $r6 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[][][] compIndirection>;

        r4 = $r6[i2];

        d1 = 0.0;

        $i3 = 0;

     label2:
        $i4 = lengthof r4;

        if $i3 >= $i4 goto label5;

        r5 = r4[$i3];

        $i4 = r5[0];

        $d2 = (double) $i4;

        $i4 = r5[1];

        $d0 = $r2[$i4];

        $d0 = $d2 * $d0;

        $i4 = 2;

     label3:
        $i5 = lengthof r5;

        if $i4 >= $i5 goto label4;

        $i5 = r5[$i4];

        $i5 = $i5 + $i0;

        $d2 = $r1[$i5];

        $d0 = $d0 * $d2;

        $i4 = $i4 + 1;

        goto label3;

     label4:
        d1 = d1 + $d0;

        $i3 = $i3 + 1;

        goto label2;

     label5:
        $i3 = $i1 + i2;

        $r3[$i3] = d1;

        i2 = i2 + 1;

        goto label1;

     label6:
        return;
    }
    public void cos(double[], int, double[], int)
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        double[] $r1, $r2, r3;
        int $i0, $i1, $i2, $i3;
        double $d0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        $r1 := @parameter0: double[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: double[];

        $i1 := @parameter3: int;

        $i2 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        $i2 = $i2 + 1;

        r3 = newarray (double)[$i2];

        $d0 = $r1[$i0];

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double cos(double)>($d0);

        r3[0] = $d0;

        $i2 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if $i2 <= 0 goto label2;

        $d0 = $r1[$i0];

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sin(double)>($d0);

        $d0 = neg $d0;

        r3[1] = $d0;

        $i2 = 2;

     label1:
        $i3 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if $i2 > $i3 goto label2;

        $i3 = $i2 + -2;

        $d0 = r3[$i3];

        $d0 = neg $d0;

        r3[$i2] = $d0;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void compose(double[],int,double[],double[],int)>($r1, $i0, r3, $r2, $i1);

        return;
    }
    public void cosh(double[], int, double[], int)
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        double[] $r1, $r2, r3;
        int $i0, $i1, $i2, $i3;
        double $d0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        $r1 := @parameter0: double[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: double[];

        $i1 := @parameter3: int;

        $i2 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        $i2 = $i2 + 1;

        r3 = newarray (double)[$i2];

        $d0 = $r1[$i0];

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double cosh(double)>($d0);

        r3[0] = $d0;

        $i2 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if $i2 <= 0 goto label2;

        $d0 = $r1[$i0];

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sinh(double)>($d0);

        r3[1] = $d0;

        $i2 = 2;

     label1:
        $i3 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if $i2 > $i3 goto label2;

        $i3 = $i2 + -2;

        $d0 = r3[$i3];

        r3[$i2] = $d0;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void compose(double[],int,double[],double[],int)>($r1, $i0, r3, $r2, $i1);

        return;
    }
    public void divide(double[], int, double[], int, double[], int)
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        double[] $r1, $r2, $r3, r4;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        $r1 := @parameter0: double[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: double[];

        $i1 := @parameter3: int;

        $r3 := @parameter4: double[];

        $i2 := @parameter5: int;

        $i1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int getSize()>();

        r4 = newarray (double)[$i1];

        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void pow(double[],int,int,double[],int)>($r2, $i0, -1, r4, 0);

        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void multiply(double[],int,double[],int,double[],int)>($r1, $i0, r4, 0, $r3, $i2);

        return;
    }
    public void exp(double[], int, double[], int)
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        double[] $r1, $r2, r3;
        int $i0, $i1, $i2;
        double $d0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        $r1 := @parameter0: double[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: double[];

        $i1 := @parameter3: int;

        $i2 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        $i2 = $i2 + 1;

        r3 = newarray (double)[$i2];

        $d0 = $r1[$i0];

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d0);

        staticinvoke <java.util.Arrays: void fill(double[],double)>(r3, $d0);

        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void compose(double[],int,double[],double[],int)>($r1, $i0, r3, $r2, $i1);

        return;
    }
    public void expm1(double[], int, double[], int)
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        double[] $r1, $r2, r3;
        int $i0, $i1, $i2;
        double $d0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        $r1 := @parameter0: double[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: double[];

        $i1 := @parameter3: int;

        $i2 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        $i2 = $i2 + 1;

        r3 = newarray (double)[$i2];

        $d0 = $r1[$i0];

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double expm1(double)>($d0);

        r3[0] = $d0;

        $i2 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        $i2 = $i2 + 1;

        $d0 = $r1[$i0];

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d0);

        staticinvoke <java.util.Arrays: void fill(double[],int,int,double)>(r3, 1, $i2, $d0);

        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void compose(double[],int,double[],double[],int)>($r1, $i0, r3, $r2, $i1);

        return;
    }
    public int getFreeParameters()
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        int i0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        i0 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int parameters>;

        return i0;
    }
    public int getOrder()
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        int i0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        i0 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        return i0;
    }
    public transient int getPartialDerivativeIndex(int[]) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        int[] $r1;
        int $i0, $i1;
        org.apache.commons.math3.exception.DimensionMismatchException $r2;
        int[][] $r3;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        $r1 := @parameter0: int[];

        $i0 = lengthof $r1;

        $i1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int getFreeParameters()>();

        if $i0 == $i1 goto label1;

        $r2 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i0 = lengthof $r1;

        $i1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int getFreeParameters()>();

        specialinvoke $r2.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i0, $i1);

        throw $r2;

     label1:
        $i0 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int parameters>;

        $i1 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        $r3 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[][] sizes>;

        $i0 = staticinvoke <org.apache.commons.math3.analysis.differentiation.DSCompiler: int getPartialDerivativeIndex(int,int,int[][],int[])>($i0, $i1, $r3, $r1);

        return $i0;
    }
    public int[] getPartialDerivativeOrders(int)
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        int $i0;
        int[][] $r1;
        int[] $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        $i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[][] derivativesIndirection>;

        $r2 = $r1[$i0];

        return $r2;
    }
    public int getSize()
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        int[][] $r1;
        int $i0;
        int[] $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        $r1 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[][] sizes>;

        $i0 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int parameters>;

        $r2 = $r1[$i0];

        $i0 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        $i0 = $r2[$i0];

        return $i0;
    }
    public void linearCombination(double, double[], int, double, double[], int, double, double[], int, double, double[], int, double[], int)
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        double[] $r1, $r2, $r3, $r4, $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, $i7;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        $d0 := @parameter0: double;

        $r1 := @parameter1: double[];

        $i0 := @parameter2: int;

        $d1 := @parameter3: double;

        $r2 := @parameter4: double[];

        $i1 := @parameter5: int;

        $d2 := @parameter6: double;

        $r3 := @parameter7: double[];

        $i2 := @parameter8: int;

        $d3 := @parameter9: double;

        $r4 := @parameter10: double[];

        $i3 := @parameter11: int;

        $r5 := @parameter12: double[];

        $i4 := @parameter13: int;

        i6 = 0;

     label1:
        $i5 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int getSize()>();

        if i6 >= $i5 goto label2;

        $i5 = $i4 + i6;

        $i7 = $i0 + i6;

        $d4 = $r1[$i7];

        $i7 = $i1 + i6;

        $d5 = $r2[$i7];

        $i7 = $i2 + i6;

        $d6 = $r3[$i7];

        $i7 = $i3 + i6;

        $d7 = $r4[$i7];

        $d4 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double,double,double,double,double)>($d0, $d4, $d1, $d5, $d2, $d6, $d3, $d7);

        $r5[$i5] = $d4;

        i6 = i6 + 1;

        goto label1;

     label2:
        return;
    }
    public void linearCombination(double, double[], int, double, double[], int, double, double[], int, double[], int)
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        double[] $r1, $r2, $r3, $r4;
        int $i0, $i1, $i2, $i3, $i4, i5, $i6;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        $d0 := @parameter0: double;

        $r1 := @parameter1: double[];

        $i0 := @parameter2: int;

        $d1 := @parameter3: double;

        $r2 := @parameter4: double[];

        $i1 := @parameter5: int;

        $d2 := @parameter6: double;

        $r3 := @parameter7: double[];

        $i2 := @parameter8: int;

        $r4 := @parameter9: double[];

        $i3 := @parameter10: int;

        i5 = 0;

     label1:
        $i4 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int getSize()>();

        if i5 >= $i4 goto label2;

        $i4 = $i3 + i5;

        $i6 = $i0 + i5;

        $d3 = $r1[$i6];

        $i6 = $i1 + i5;

        $d4 = $r2[$i6];

        $i6 = $i2 + i5;

        $d5 = $r3[$i6];

        $d3 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double,double,double)>($d0, $d3, $d1, $d4, $d2, $d5);

        $r4[$i4] = $d3;

        i5 = i5 + 1;

        goto label1;

     label2:
        return;
    }
    public void linearCombination(double, double[], int, double, double[], int, double[], int)
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        double $d0, $d1, $d2, $d3;
        double[] $r1, $r2, $r3;
        int $i0, $i1, $i2, $i3, i4, $i5;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        $d0 := @parameter0: double;

        $r1 := @parameter1: double[];

        $i0 := @parameter2: int;

        $d1 := @parameter3: double;

        $r2 := @parameter4: double[];

        $i1 := @parameter5: int;

        $r3 := @parameter6: double[];

        $i2 := @parameter7: int;

        i4 = 0;

     label1:
        $i3 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int getSize()>();

        if i4 >= $i3 goto label2;

        $i3 = $i2 + i4;

        $i5 = $i0 + i4;

        $d2 = $r1[$i5];

        $i5 = $i1 + i4;

        $d3 = $r2[$i5];

        $d2 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double)>($d0, $d2, $d1, $d3);

        $r3[$i3] = $d2;

        i4 = i4 + 1;

        goto label1;

     label2:
        return;
    }
    public void log(double[], int, double[], int)
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        double[] $r1, $r2, r3;
        int $i0, $i1, $i2, $i3;
        double d0, d1, $d2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        $r1 := @parameter0: double[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: double[];

        $i1 := @parameter3: int;

        $i2 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        $i2 = $i2 + 1;

        r3 = newarray (double)[$i2];

        d0 = $r1[$i0];

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(d0);

        r3[0] = d0;

        $i2 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if $i2 <= 0 goto label2;

        d0 = $r1[$i0];

        d0 = 1.0 / d0;

        d1 = d0;

        $i2 = 1;

     label1:
        $i3 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if $i2 > $i3 goto label2;

        r3[$i2] = d1;

        $i3 = neg $i2;

        $d2 = (double) $i3;

        $d2 = $d2 * d0;

        d1 = d1 * $d2;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void compose(double[],int,double[],double[],int)>($r1, $i0, r3, $r2, $i1);

        return;
    }
    public void log10(double[], int, double[], int)
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        double[] $r1, $r2, r3;
        int $i0, $i1, $i2, $i3;
        double d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        $r1 := @parameter0: double[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: double[];

        $i1 := @parameter3: int;

        $i2 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        $i2 = $i2 + 1;

        r3 = newarray (double)[$i2];

        d0 = $r1[$i0];

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double log10(double)>(d0);

        r3[0] = d0;

        $i2 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if $i2 <= 0 goto label2;

        d0 = $r1[$i0];

        d0 = 1.0 / d0;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(10.0);

        $d1 = d0 / $d1;

        $i2 = 1;

     label1:
        $i3 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if $i2 > $i3 goto label2;

        r3[$i2] = $d1;

        $i3 = neg $i2;

        $d2 = (double) $i3;

        $d2 = $d2 * d0;

        $d1 = $d1 * $d2;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void compose(double[],int,double[],double[],int)>($r1, $i0, r3, $r2, $i1);

        return;
    }
    public void log1p(double[], int, double[], int)
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        double[] $r1, $r2, r3;
        int $i0, $i1, $i2, $i3;
        double d0, d1, $d2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        $r1 := @parameter0: double[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: double[];

        $i1 := @parameter3: int;

        $i2 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        $i2 = $i2 + 1;

        r3 = newarray (double)[$i2];

        d0 = $r1[$i0];

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double log1p(double)>(d0);

        r3[0] = d0;

        $i2 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if $i2 <= 0 goto label2;

        d0 = $r1[$i0];

        d0 = 1.0 + d0;

        d0 = 1.0 / d0;

        d1 = d0;

        $i2 = 1;

     label1:
        $i3 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if $i2 > $i3 goto label2;

        r3[$i2] = d1;

        $i3 = neg $i2;

        $d2 = (double) $i3;

        $d2 = $d2 * d0;

        d1 = d1 * $d2;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void compose(double[],int,double[],double[],int)>($r1, $i0, r3, $r2, $i1);

        return;
    }
    public void multiply(double[], int, double[], int, double[], int)
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        double[] $r1, $r2, $r3;
        int $i0, $i1, $i2, i3, $i4, $i5;
        int[][] r4;
        int[][][] $r5;
        double d0, $d1, $d2;
        int[] $r6;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        $r1 := @parameter0: double[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: double[];

        $i1 := @parameter3: int;

        $r3 := @parameter4: double[];

        $i2 := @parameter5: int;

        i3 = 0;

     label1:
        $r5 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[][][] multIndirection>;

        $i4 = lengthof $r5;

        if i3 >= $i4 goto label4;

        $r5 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[][][] multIndirection>;

        r4 = $r5[i3];

        d0 = 0.0;

        $i4 = 0;

     label2:
        $i5 = lengthof r4;

        if $i4 >= $i5 goto label3;

        $r6 = r4[$i4];

        $i5 = $r6[0];

        $d1 = (double) $i5;

        $r6 = r4[$i4];

        $i5 = $r6[1];

        $i5 = $i5 + $i0;

        $d2 = $r1[$i5];

        $d1 = $d1 * $d2;

        $r6 = r4[$i4];

        $i5 = $r6[2];

        $i5 = $i5 + $i1;

        $d2 = $r2[$i5];

        $d1 = $d1 * $d2;

        d0 = d0 + $d1;

        $i4 = $i4 + 1;

        goto label2;

     label3:
        $i4 = $i2 + i3;

        $r3[$i4] = d0;

        i3 = i3 + 1;

        goto label1;

     label4:
        return;
    }
    public void pow(double, double[], int, double[], int)
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        double $d0, $d1;
        double[] $r1, $r2, r3;
        int $i0, $i1, $i2, $i4;
        byte $b3;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        $d0 := @parameter0: double;

        $r1 := @parameter1: double[];

        $i0 := @parameter2: int;

        $r2 := @parameter3: double[];

        $i1 := @parameter4: int;

        $i2 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        $i2 = $i2 + 1;

        r3 = newarray (double)[$i2];

        $b3 = $d0 cmpl 0.0;

        if $b3 != 0 goto label4;

        $d0 = $r1[$i0];

        $b3 = $d0 cmpl 0.0;

        if $b3 != 0 goto label2;

        $d0 = (double) 4607182418800017408L;

        r3[0] = $d0;

        $d0 = #Infinity;

        $i2 = 1;

     label1:
        $i4 = lengthof r3;

        if $i2 >= $i4 goto label3;

        $d0 = neg $d0;

        r3[$i2] = $d0;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        $d0 = $r1[$i0];

        $b3 = $d0 cmpg 0.0;

        if $b3 >= 0 goto label3;

        staticinvoke <java.util.Arrays: void fill(double[],double)>(r3, #NaN);

     label3:
        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void compose(double[],int,double[],double[],int)>($r1, $i0, r3, $r2, $i1);

        return;

     label4:
        $d1 = $r1[$i0];

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,double)>($d0, $d1);

        r3[0] = $d1;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d0);

        $i2 = 1;

     label5:
        $i4 = lengthof r3;

        if $i2 >= $i4 goto label3;

        $i4 = $i2 + -1;

        $d1 = r3[$i4];

        $d1 = $d1 * $d0;

        r3[$i2] = $d1;

        $i2 = $i2 + 1;

        goto label5;
    }
    public void pow(double[], int, double, double[], int)
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        double[] $r1, $r2, r3;
        int $i0, $i1, $i2, $i3;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        $r1 := @parameter0: double[];

        $i0 := @parameter1: int;

        $d0 := @parameter2: double;

        $r2 := @parameter3: double[];

        $i1 := @parameter4: int;

        $i2 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        $i2 = $i2 + 1;

        r3 = newarray (double)[$i2];

        $d1 = $r1[$i0];

        $i2 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        $d2 = (double) $i2;

        $d2 = $d0 - $d2;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,double)>($d1, $d2);

        $i2 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

     label1:
        if $i2 <= 0 goto label2;

        r3[$i2] = $d1;

        $d2 = $r1[$i0];

        $d1 = $d1 * $d2;

        $i2 = $i2 + -1;

        goto label1;

     label2:
        r3[0] = $d1;

        $d1 = $d0;

        $i2 = 1;

     label3:
        $i3 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if $i2 > $i3 goto label4;

        $d2 = r3[$i2];

        $d2 = $d2 * $d1;

        r3[$i2] = $d2;

        $d2 = (double) $i2;

        $d2 = $d0 - $d2;

        $d1 = $d1 * $d2;

        $i2 = $i2 + 1;

        goto label3;

     label4:
        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void compose(double[],int,double[],double[],int)>($r1, $i0, r3, $r2, $i1);

        return;
    }
    public void pow(double[], int, int, double[], int)
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        double[] $r1, $r2, r3;
        int $i0, $i1, $i2, $i3, $i4;
        double d0, $d1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        $r1 := @parameter0: double[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: double[];

        $i2 := @parameter4: int;

        if $i1 != 0 goto label1;

        $r2[$i2] = 1.0;

        $i0 = $i2 + 1;

        $i1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int getSize()>();

        $i1 = $i1 + $i2;

        staticinvoke <java.util.Arrays: void fill(double[],int,int,double)>($r2, $i0, $i1, 0.0);

        return;

     label1:
        $i3 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        $i3 = $i3 + 1;

        r3 = newarray (double)[$i3];

        if $i1 <= 0 goto label6;

        $i3 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        $i3 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i3, $i1);

        d0 = $r1[$i0];

        $i4 = $i1 - $i3;

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,int)>(d0, $i4);

     label2:
        if $i3 <= 0 goto label3;

        r3[$i3] = d0;

        $d1 = $r1[$i0];

        d0 = d0 * $d1;

        $i3 = $i3 + -1;

        goto label2;

     label3:
        r3[0] = d0;

     label4:
        d0 = (double) $i1;

        $i3 = 1;

     label5:
        $i4 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if $i3 > $i4 goto label8;

        $d1 = r3[$i3];

        $d1 = $d1 * d0;

        r3[$i3] = $d1;

        $i4 = $i1 - $i3;

        $d1 = (double) $i4;

        d0 = d0 * $d1;

        $i3 = $i3 + 1;

        goto label5;

     label6:
        d0 = $r1[$i0];

        d0 = 1.0 / d0;

        $i3 = neg $i1;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,int)>(d0, $i3);

        $i3 = 0;

     label7:
        $i4 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if $i3 > $i4 goto label4;

        r3[$i3] = $d1;

        $d1 = $d1 * d0;

        $i3 = $i3 + 1;

        goto label7;

     label8:
        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void compose(double[],int,double[],double[],int)>($r1, $i0, r3, $r2, $i2);

        return;
    }
    public void pow(double[], int, double[], int, double[], int)
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        double[] $r1, $r2, $r3, r4;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        $r1 := @parameter0: double[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: double[];

        $i1 := @parameter3: int;

        $r3 := @parameter4: double[];

        $i2 := @parameter5: int;

        $i3 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int getSize()>();

        r4 = newarray (double)[$i3];

        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void log(double[],int,double[],int)>($r1, $i0, r4, 0);

        $i0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int getSize()>();

        $r1 = newarray (double)[$i0];

        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void multiply(double[],int,double[],int,double[],int)>(r4, 0, $r2, $i1, $r1, 0);

        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void exp(double[],int,double[],int)>($r1, 0, $r3, $i2);

        return;
    }
    public void remainder(double[], int, double[], int, double[], int)
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        double[] $r1, $r2, $r3;
        int $i0, $i1, $i2, i3, $i4, $i5;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        $r1 := @parameter0: double[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: double[];

        $i1 := @parameter3: int;

        $r3 := @parameter4: double[];

        $i2 := @parameter5: int;

        $d0 = $r1[$i0];

        $d1 = $r2[$i1];

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double IEEEremainder(double,double)>($d0, $d1);

        $d1 = $r1[$i0];

        $d1 = $d1 - $d0;

        $d2 = $r2[$i1];

        $d1 = $d1 / $d2;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double rint(double)>($d1);

        $r3[$i2] = $d0;

        i3 = 1;

     label1:
        $i4 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int getSize()>();

        if i3 >= $i4 goto label2;

        $i4 = $i2 + i3;

        $i5 = $i0 + i3;

        $d0 = $r1[$i5];

        $i5 = $i1 + i3;

        $d2 = $r2[$i5];

        $d2 = $d2 * $d1;

        $d0 = $d0 - $d2;

        $r3[$i4] = $d0;

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }
    public void rootN(double[], int, int, double[], int)
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        double[] $r1, $r2, r3;
        int $i0, $i1, $i2, $i3;
        double d0, d1, $d2, $d3;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        $r1 := @parameter0: double[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: double[];

        $i2 := @parameter4: int;

        $i3 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        $i3 = $i3 + 1;

        r3 = newarray (double)[$i3];

        if $i1 != 2 goto label3;

        $d2 = $r1[$i0];

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d2);

        r3[0] = $d2;

        $d2 = r3[0];

        $d2 = 0.5 / $d2;

     label1:
        d0 = (double) $i1;

        d0 = 1.0 / d0;

        d1 = $r1[$i0];

        d1 = 1.0 / d1;

        $i1 = 1;

     label2:
        $i3 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if $i1 > $i3 goto label5;

        r3[$i1] = $d2;

        $d3 = (double) $i1;

        $d3 = d0 - $d3;

        $d3 = $d3 * d1;

        $d2 = $d2 * $d3;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        if $i1 != 3 goto label4;

        $d2 = $r1[$i0];

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double cbrt(double)>($d2);

        r3[0] = $d2;

        $d2 = r3[0];

        $d2 = 3.0 * $d2;

        d0 = r3[0];

        $d2 = $d2 * d0;

        $d2 = 1.0 / $d2;

        goto label1;

     label4:
        $d2 = $r1[$i0];

        d0 = (double) $i1;

        d0 = 1.0 / d0;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,double)>($d2, d0);

        r3[0] = $d2;

        $d2 = (double) $i1;

        d0 = r3[0];

        $i3 = $i1 + -1;

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,int)>(d0, $i3);

        $d2 = $d2 * d0;

        $d2 = 1.0 / $d2;

        goto label1;

     label5:
        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void compose(double[],int,double[],double[],int)>($r1, $i0, r3, $r2, $i2);

        return;
    }
    public void sin(double[], int, double[], int)
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        double[] $r1, $r2, r3;
        int $i0, $i1, $i2, $i3;
        double $d0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        $r1 := @parameter0: double[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: double[];

        $i1 := @parameter3: int;

        $i2 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        $i2 = $i2 + 1;

        r3 = newarray (double)[$i2];

        $d0 = $r1[$i0];

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sin(double)>($d0);

        r3[0] = $d0;

        $i2 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if $i2 <= 0 goto label2;

        $d0 = $r1[$i0];

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double cos(double)>($d0);

        r3[1] = $d0;

        $i2 = 2;

     label1:
        $i3 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if $i2 > $i3 goto label2;

        $i3 = $i2 + -2;

        $d0 = r3[$i3];

        $d0 = neg $d0;

        r3[$i2] = $d0;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void compose(double[],int,double[],double[],int)>($r1, $i0, r3, $r2, $i1);

        return;
    }
    public void sinh(double[], int, double[], int)
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        double[] $r1, $r2, r3;
        int $i0, $i1, $i2, $i3;
        double $d0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        $r1 := @parameter0: double[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: double[];

        $i1 := @parameter3: int;

        $i2 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        $i2 = $i2 + 1;

        r3 = newarray (double)[$i2];

        $d0 = $r1[$i0];

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sinh(double)>($d0);

        r3[0] = $d0;

        $i2 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if $i2 <= 0 goto label2;

        $d0 = $r1[$i0];

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double cosh(double)>($d0);

        r3[1] = $d0;

        $i2 = 2;

     label1:
        $i3 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if $i2 > $i3 goto label2;

        $i3 = $i2 + -2;

        $d0 = r3[$i3];

        r3[$i2] = $d0;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void compose(double[],int,double[],double[],int)>($r1, $i0, r3, $r2, $i1);

        return;
    }
    public void subtract(double[], int, double[], int, double[], int)
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        double[] $r1, $r2, $r3;
        int $i0, $i1, $i2, $i3, i4, $i5;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        $r1 := @parameter0: double[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: double[];

        $i1 := @parameter3: int;

        $r3 := @parameter4: double[];

        $i2 := @parameter5: int;

        i4 = 0;

     label1:
        $i3 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int getSize()>();

        if i4 >= $i3 goto label2;

        $i3 = $i2 + i4;

        $i5 = $i0 + i4;

        $d0 = $r1[$i5];

        $i5 = $i1 + i4;

        $d1 = $r2[$i5];

        $d0 = $d0 - $d1;

        $r3[$i3] = $d0;

        i4 = i4 + 1;

        goto label1;

     label2:
        return;
    }
    public void tan(double[], int, double[], int)
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        double[] $r1, $r2, r3, r4;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        double d0, $d1, $d2, d3, $d4, $d5;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        $r1 := @parameter0: double[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: double[];

        $i1 := @parameter3: int;

        $i2 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        $i2 = $i2 + 1;

        r3 = newarray (double)[$i2];

        $d2 = $r1[$i0];

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double tan(double)>($d2);

        r3[0] = $d2;

        $i2 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if $i2 <= 0 goto label7;

        $i2 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        $i2 = $i2 + 2;

        r4 = newarray (double)[$i2];

        d0 = (double) 4607182418800017408L;

        r4[1] = d0;

        d0 = $d2 * $d2;

        $i2 = 1;

     label1:
        $i3 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if $i2 > $i3 goto label7;

        d3 = 0.0;

        $i3 = $i2 + 1;

        $d4 = (double) $i2;

        $d1 = r4[$i2];

        $d4 = $d4 * $d1;

        r4[$i3] = $d4;

        $i3 = $i2 + 1;

     label2:
        if $i3 < 0 goto label5;

        d3 = d3 * d0;

        $d4 = r4[$i3];

        d3 = d3 + $d4;

        if $i3 <= 2 goto label4;

        $i4 = $i3 + -2;

        $i5 = $i3 + -1;

        $d4 = (double) $i5;

        $i5 = $i3 + -1;

        $d1 = r4[$i5];

        $d4 = $d4 * $d1;

        $i5 = $i3 + -3;

        $d5 = (double) $i5;

        $i5 = $i3 + -3;

        $d1 = r4[$i5];

        $d1 = $d5 * $d1;

        $d4 = $d4 + $d1;

        r4[$i4] = $d4;

     label3:
        $i3 = $i3 + -2;

        goto label2;

     label4:
        if $i3 != 2 goto label3;

        $d4 = r4[1];

        r4[0] = $d4;

        goto label3;

     label5:
        $i3 = $i2 & 1;

        if $i3 != 0 goto label6;

        d3 = d3 * $d2;

     label6:
        r3[$i2] = d3;

        $i2 = $i2 + 1;

        goto label1;

     label7:
        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void compose(double[],int,double[],double[],int)>($r1, $i0, r3, $r2, $i1);

        return;
    }
    public void tanh(double[], int, double[], int)
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        double[] $r1, $r2, r3, r4;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        double d0, $d1, $d2, d3, $d4, $d5;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        $r1 := @parameter0: double[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: double[];

        $i1 := @parameter3: int;

        $i2 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        $i2 = $i2 + 1;

        r3 = newarray (double)[$i2];

        $d2 = $r1[$i0];

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double tanh(double)>($d2);

        r3[0] = $d2;

        $i2 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if $i2 <= 0 goto label7;

        $i2 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        $i2 = $i2 + 2;

        r4 = newarray (double)[$i2];

        d0 = (double) 4607182418800017408L;

        r4[1] = d0;

        d0 = $d2 * $d2;

        $i2 = 1;

     label1:
        $i3 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if $i2 > $i3 goto label7;

        d3 = 0.0;

        $i3 = $i2 + 1;

        $i4 = neg $i2;

        $d4 = (double) $i4;

        $d1 = r4[$i2];

        $d4 = $d4 * $d1;

        r4[$i3] = $d4;

        $i3 = $i2 + 1;

     label2:
        if $i3 < 0 goto label5;

        d3 = d3 * d0;

        $d4 = r4[$i3];

        d3 = d3 + $d4;

        if $i3 <= 2 goto label4;

        $i4 = $i3 + -2;

        $i5 = $i3 + -1;

        $d4 = (double) $i5;

        $i5 = $i3 + -1;

        $d1 = r4[$i5];

        $d4 = $d4 * $d1;

        $i5 = $i3 + -3;

        $d5 = (double) $i5;

        $i5 = $i3 + -3;

        $d1 = r4[$i5];

        $d1 = $d5 * $d1;

        $d4 = $d4 - $d1;

        r4[$i4] = $d4;

     label3:
        $i3 = $i3 + -2;

        goto label2;

     label4:
        if $i3 != 2 goto label3;

        $d4 = r4[1];

        r4[0] = $d4;

        goto label3;

     label5:
        $i3 = $i2 & 1;

        if $i3 != 0 goto label6;

        d3 = d3 * $d2;

     label6:
        r3[$i2] = d3;

        $i2 = $i2 + 1;

        goto label1;

     label7:
        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void compose(double[],int,double[],double[],int)>($r1, $i0, r3, $r2, $i1);

        return;
    }
    public transient double taylor(double[], int, double[]) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        double[] $r1, $r2;
        int $i0, $i1, $i2, $i3;
        org.apache.commons.math3.exception.NotPositiveException r3;
        double d0, d1, $d2, $d3;
        int[] $r4;
        long $l4;
        org.apache.commons.math3.exception.MathInternalError $r5;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        $r1 := @parameter0: double[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: double[];

        d0 = 0.0;

        $i1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int getSize()>();

        $i1 = $i1 + -1;

     label01:
        if $i1 < 0 goto label10;

        $r4 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[] getPartialDerivativeOrders(int)>($i1);

        $i2 = $i0 + $i1;

        d1 = $r1[$i2];

        $i2 = 0;

     label02:
        $i3 = lengthof $r4;

        if $i2 >= $i3 goto label09;

        $i3 = $r4[$i2];

        if $i3 <= 0 goto label07;

        $d2 = $r2[$i2];

        $i3 = $r4[$i2];

     label03:
        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,int)>($d2, $i3);

     label04:
        $i3 = $r4[$i2];

     label05:
        $l4 = staticinvoke <org.apache.commons.math3.util.CombinatoricsUtils: long factorial(int)>($i3);

     label06:
        $d3 = (double) $l4;

        $d2 = $d2 / $d3;

        d1 = d1 * $d2;

     label07:
        $i2 = $i2 + 1;

        goto label02;

     label08:
        r3 := @caughtexception;

        $r5 = new org.apache.commons.math3.exception.MathInternalError;

        specialinvoke $r5.<org.apache.commons.math3.exception.MathInternalError: void <init>(java.lang.Throwable)>(r3);

        throw $r5;

     label09:
        d0 = d0 + d1;

        $i1 = $i1 + -1;

        goto label01;

     label10:
        return d0;

        catch org.apache.commons.math3.exception.NotPositiveException from label03 to label04 with label08;
        catch org.apache.commons.math3.exception.NotPositiveException from label05 to label06 with label08;
    }
