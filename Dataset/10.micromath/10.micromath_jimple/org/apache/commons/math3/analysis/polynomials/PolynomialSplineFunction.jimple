org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction extends java.lang.Object implements org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction org.apache.commons.math3.analysis.DifferentiableUnivariateFunction
private final double[] knots
private final int n
private final org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] polynomials
    public void <init>(double[], org.apache.commons.math3.analysis.polynomials.PolynomialFunction[]) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NonMonotonicSequenceException
    {
        org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction r0;
        double[] $r1, $r9;
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] $r2, $r10;
        org.apache.commons.math3.exception.NullArgumentException $r3;
        int $i0, $i1;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r4;
        org.apache.commons.math3.exception.util.LocalizedFormats $r5;
        java.lang.Integer $r6, $r7;
        org.apache.commons.math3.exception.DimensionMismatchException $r8;

        r0 := @this: org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: org.apache.commons.math3.analysis.polynomials.PolynomialFunction[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if $r1 == null goto label1;

        if $r2 != null goto label2;

     label1:
        $r3 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r3.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r3;

     label2:
        $i0 = lengthof $r1;

        if $i0 >= 2 goto label3;

        $r4 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r5 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $i0 = lengthof $r1;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r4.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r5, $r6, $r7, 0);

        throw $r4;

     label3:
        $i0 = lengthof $r1;

        $i0 = $i0 + -1;

        $i1 = lengthof $r2;

        if $i0 == $i1 goto label4;

        $r8 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i0 = lengthof $r2;

        $i1 = lengthof $r1;

        specialinvoke $r8.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i0, $i1);

        throw $r8;

     label4:
        staticinvoke <org.apache.commons.math3.util.MathArrays: void checkOrder(double[])>($r1);

        $i0 = lengthof $r1;

        $i0 = $i0 + -1;

        r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: int n> = $i0;

        $i0 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: int n>;

        $i0 = $i0 + 1;

        $r9 = newarray (double)[$i0];

        r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: double[] knots> = $r9;

        $r9 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: double[] knots>;

        $i0 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: int n>;

        $i0 = $i0 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r9, 0, $i0);

        $i0 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: int n>;

        $r10 = newarray (org.apache.commons.math3.analysis.polynomials.PolynomialFunction)[$i0];

        r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] polynomials> = $r10;

        $r10 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] polynomials>;

        $i0 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: int n>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r10, 0, $i0);

        return;
    }
    public org.apache.commons.math3.analysis.UnivariateFunction derivative()
    {
        org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction r0;

        r0 := @this: org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction;

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction polynomialSplineDerivative()>();

        return r0;
    }
    public double[] getKnots()
    {
        org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction r0;
        double[] r1, $r2;
        int $i0;

        r0 := @this: org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction;

        $i0 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: int n>;

        $i0 = $i0 + 1;

        r1 = newarray (double)[$i0];

        $r2 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: double[] knots>;

        $i0 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: int n>;

        $i0 = $i0 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, 0, $i0);

        return r1;
    }
    public int getN()
    {
        org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction r0;
        int i0;

        r0 := @this: org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction;

        i0 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: int n>;

        return i0;
    }
    public org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] getPolynomials()
    {
        org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction r0;
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] r1, $r2;
        int $i0;

        r0 := @this: org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction;

        $i0 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: int n>;

        r1 = newarray (org.apache.commons.math3.analysis.polynomials.PolynomialFunction)[$i0];

        $r2 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] polynomials>;

        $i0 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: int n>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, 0, $i0);

        return r1;
    }
    public boolean isValidPoint(double)
    {
        org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction r0;
        double $d0, $d1;
        double[] $r1;
        byte $b0;
        int $i1;

        r0 := @this: org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction;

        $d0 := @parameter0: double;

        $r1 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: double[] knots>;

        $d1 = $r1[0];

        $b0 = $d0 cmpg $d1;

        if $b0 < 0 goto label2;

        $r1 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: double[] knots>;

        $i1 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: int n>;

        $d1 = $r1[$i1];

        $b0 = $d0 cmpl $d1;

        if $b0 <= 0 goto label1;

        return 0;

     label1:
        return 1;

     label2:
        return 0;
    }
    public org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction polynomialSplineDerivative()
    {
        org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction r0, $r5;
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] r1, $r4;
        double[] $r2;
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction $r3;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction;

        $i0 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: int n>;

        r1 = newarray (org.apache.commons.math3.analysis.polynomials.PolynomialFunction)[$i0];

        $i0 = 0;

     label1:
        $i1 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: int n>;

        if $i0 >= $i1 goto label2;

        $r4 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] polynomials>;

        $r3 = $r4[$i0];

        $r3 = virtualinvoke $r3.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: org.apache.commons.math3.analysis.polynomials.PolynomialFunction polynomialDerivative()>();

        r1[$i0] = $r3;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $r5 = new org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction;

        $r2 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: double[] knots>;

        specialinvoke $r5.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: void <init>(double[],org.apache.commons.math3.analysis.polynomials.PolynomialFunction[])>($r2, r1);

        return $r5;
    }
    public double value(double)
    {
        org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction r0;
        double $d0, $d1;
        int $i0, $i2;
        double[] $r1;
        byte $b1;
        org.apache.commons.math3.exception.OutOfRangeException $r2;
        java.lang.Double $r3, $r4, $r5;
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] $r6;
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction $r7;

        r0 := @this: org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction;

        $d0 := @parameter0: double;

        $r1 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: double[] knots>;

        $d1 = $r1[0];

        $b1 = $d0 cmpg $d1;

        if $b1 < 0 goto label1;

        $r1 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: double[] knots>;

        $i0 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: int n>;

        $d1 = $r1[$i0];

        $b1 = $d0 cmpl $d1;

        if $b1 <= 0 goto label2;

     label1:
        $r2 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r1 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: double[] knots>;

        $d0 = $r1[0];

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r1 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: double[] knots>;

        $i0 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: int n>;

        $d0 = $r1[$i0];

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        specialinvoke $r2.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r3, $r4, $r5);

        throw $r2;

     label2:
        $r1 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: double[] knots>;

        $i2 = staticinvoke <java.util.Arrays: int binarySearch(double[],double)>($r1, $d0);

        $i0 = $i2;

        if $i2 >= 0 goto label3;

        $i0 = neg $i2;

        $i0 = $i0 + -2;

     label3:
        $r6 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] polynomials>;

        $i2 = lengthof $r6;

        if $i0 < $i2 goto label4;

        $i0 = $i0 + -1;

     label4:
        $r6 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] polynomials>;

        $r7 = $r6[$i0];

        $r1 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: double[] knots>;

        $d1 = $r1[$i0];

        $d0 = $d0 - $d1;

        $d0 = virtualinvoke $r7.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: double value(double)>($d0);

        return $d0;
    }
    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)
    {
        org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction r0;
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure $r1;
        int $i0, $i2;
        double $d0, $d1;
        double[] $r2;
        byte $b1;
        org.apache.commons.math3.exception.OutOfRangeException $r3;
        java.lang.Double $r4, $r5, $r6;
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] $r7;
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction $r8;

        r0 := @this: org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction;

        $r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $d0 = virtualinvoke $r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getValue()>();

        $r2 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: double[] knots>;

        $d1 = $r2[0];

        $b1 = $d0 cmpg $d1;

        if $b1 < 0 goto label1;

        $r2 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: double[] knots>;

        $i0 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: int n>;

        $d1 = $r2[$i0];

        $b1 = $d0 cmpl $d1;

        if $b1 <= 0 goto label2;

     label1:
        $r3 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r2 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: double[] knots>;

        $d0 = $r2[0];

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r2 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: double[] knots>;

        $i0 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: int n>;

        $d0 = $r2[$i0];

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        specialinvoke $r3.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r4, $r5, $r6);

        throw $r3;

     label2:
        $r2 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: double[] knots>;

        $i2 = staticinvoke <java.util.Arrays: int binarySearch(double[],double)>($r2, $d0);

        $i0 = $i2;

        if $i2 >= 0 goto label3;

        $i0 = neg $i2;

        $i0 = $i0 + -2;

     label3:
        $r7 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] polynomials>;

        $i2 = lengthof $r7;

        if $i0 < $i2 goto label4;

        $i0 = $i0 + -1;

     label4:
        $r7 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] polynomials>;

        $r8 = $r7[$i0];

        $r2 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: double[] knots>;

        $d0 = $r2[$i0];

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure subtract(double)>($d0);

        $r1 = virtualinvoke $r8.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)>($r1);

        return $r1;
    }
