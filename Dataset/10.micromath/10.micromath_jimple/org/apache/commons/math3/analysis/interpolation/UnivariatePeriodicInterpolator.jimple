org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator extends java.lang.Object implements org.apache.commons.math3.analysis.interpolation.UnivariateInterpolator
public static final int DEFAULT_EXTEND
private final int extend
private final org.apache.commons.math3.analysis.interpolation.UnivariateInterpolator interpolator
private final double period
    public void <init>(org.apache.commons.math3.analysis.interpolation.UnivariateInterpolator, double)
    {
        org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator r0;
        org.apache.commons.math3.analysis.interpolation.UnivariateInterpolator $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator;

        $r1 := @parameter0: org.apache.commons.math3.analysis.interpolation.UnivariateInterpolator;

        $d0 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator: void <init>(org.apache.commons.math3.analysis.interpolation.UnivariateInterpolator,double,int)>($r1, $d0, 5);

        return;
    }
    public void <init>(org.apache.commons.math3.analysis.interpolation.UnivariateInterpolator, double, int)
    {
        org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator r0;
        org.apache.commons.math3.analysis.interpolation.UnivariateInterpolator $r1;
        double $d0;
        int $i0;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator;

        $r1 := @parameter0: org.apache.commons.math3.analysis.interpolation.UnivariateInterpolator;

        $d0 := @parameter1: double;

        $i0 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator: org.apache.commons.math3.analysis.interpolation.UnivariateInterpolator interpolator> = $r1;

        r0.<org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator: double period> = $d0;

        r0.<org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator: int extend> = $i0;

        return;
    }
    static double access$000(org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator)
    {
        org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator $r0;
        double d0;

        $r0 := @parameter0: org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator;

        d0 = $r0.<org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator: double period>;

        return d0;
    }
    public org.apache.commons.math3.analysis.UnivariateFunction interpolate(double[], double[]) throws org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.NonMonotonicSequenceException
    {
        org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator r0;
        double[] $r1, $r2, r3, r4;
        double d0, $d1, $d2;
        int i0, $i1, $i2, $i3;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r5;
        java.lang.Integer $r6, $r7;
        double[][] $r8;
        org.apache.commons.math3.analysis.interpolation.UnivariateInterpolator $r9;
        org.apache.commons.math3.analysis.UnivariateFunction $r10;
        org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator$1 $r11;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[];

        i0 = lengthof $r1;

        $i1 = r0.<org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator: int extend>;

        if i0 >= $i1 goto label1;

        $r5 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        i0 = lengthof $r1;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        i0 = r0.<org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator: int extend>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r5.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r6, $r7, 1);

        throw $r5;

     label1:
        staticinvoke <org.apache.commons.math3.util.MathArrays: void checkOrder(double[])>($r1);

        d0 = $r1[0];

        i0 = lengthof $r1;

        $i1 = r0.<org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator: int extend>;

        $i1 = $i1 * 2;

        i0 = i0 + $i1;

        r3 = newarray (double)[i0];

        r4 = newarray (double)[i0];

        $i1 = 0;

     label2:
        $i2 = lengthof $r1;

        if $i1 >= $i2 goto label3;

        $i2 = r0.<org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator: int extend>;

        $i2 = $i1 + $i2;

        $d1 = $r1[$i1];

        $d2 = r0.<org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator: double period>;

        $d1 = staticinvoke <org.apache.commons.math3.util.MathUtils: double reduce(double,double,double)>($d1, $d2, d0);

        r3[$i2] = $d1;

        $d1 = $r2[$i1];

        r4[$i2] = $d1;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $i1 = 0;

     label4:
        $i2 = r0.<org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator: int extend>;

        if $i1 >= $i2 goto label5;

        $i2 = lengthof $r1;

        $i3 = r0.<org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator: int extend>;

        $i2 = $i2 - $i3;

        $i2 = $i2 + $i1;

        $d1 = $r1[$i2];

        $d2 = r0.<org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator: double period>;

        $d1 = staticinvoke <org.apache.commons.math3.util.MathUtils: double reduce(double,double,double)>($d1, $d2, d0);

        $d2 = r0.<org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator: double period>;

        $d1 = $d1 - $d2;

        r3[$i1] = $d1;

        $d1 = $r2[$i2];

        r4[$i1] = $d1;

        $i2 = r0.<org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator: int extend>;

        $i2 = i0 - $i2;

        $i2 = $i2 + $i1;

        $d1 = $r1[$i1];

        $d2 = r0.<org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator: double period>;

        $d1 = staticinvoke <org.apache.commons.math3.util.MathUtils: double reduce(double,double,double)>($d1, $d2, d0);

        $d2 = r0.<org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator: double period>;

        $d1 = $d1 + $d2;

        r3[$i2] = $d1;

        $d1 = $r2[$i1];

        r4[$i2] = $d1;

        $i1 = $i1 + 1;

        goto label4;

     label5:
        $r8 = newarray (double[])[1];

        $r8[0] = r4;

        staticinvoke <org.apache.commons.math3.util.MathArrays: void sortInPlace(double[],double[][])>(r3, $r8);

        $r9 = r0.<org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator: org.apache.commons.math3.analysis.interpolation.UnivariateInterpolator interpolator>;

        $r10 = interfaceinvoke $r9.<org.apache.commons.math3.analysis.interpolation.UnivariateInterpolator: org.apache.commons.math3.analysis.UnivariateFunction interpolate(double[],double[])>(r3, r4);

        $r11 = new org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator$1;

        specialinvoke $r11.<org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator$1: void <init>(org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator,org.apache.commons.math3.analysis.UnivariateFunction,double)>(r0, $r10, d0);

        return $r11;
    }
