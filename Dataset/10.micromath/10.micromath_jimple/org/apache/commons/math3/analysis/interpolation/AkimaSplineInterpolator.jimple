org.apache.commons.math3.analysis.interpolation.AkimaSplineInterpolator extends java.lang.Object implements org.apache.commons.math3.analysis.interpolation.UnivariateInterpolator
private static final int MINIMUM_NUMBER_POINTS
    public void <init>()
    {
        org.apache.commons.math3.analysis.interpolation.AkimaSplineInterpolator r0;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.AkimaSplineInterpolator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    private double differentiateThreePoint(double[], double[], int, int, int, int)
    {
        org.apache.commons.math3.analysis.interpolation.AkimaSplineInterpolator r0;
        double[] $r1, $r2;
        int $i0, $i1, $i2, $i3;
        double d0, d1, d2, d3, d4, d5, $d6, $d7;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.AkimaSplineInterpolator;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[];

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        $i3 := @parameter5: int;

        d3 = $r2[$i1];

        d4 = $r2[$i2];

        d5 = $r2[$i3];

        d2 = $r1[$i0];

        d1 = $r1[$i1];

        d2 = d2 - d1;

        d1 = $r1[$i2];

        d0 = $r1[$i1];

        d1 = d1 - d0;

        d0 = $r1[$i3];

        $d6 = $r1[$i1];

        d0 = d0 - $d6;

        d5 = d5 - d3;

        $d6 = d0 / d1;

        $d7 = d4 - d3;

        $d6 = $d6 * $d7;

        d5 = d5 - $d6;

        $d6 = d0 * d0;

        d0 = d1 * d0;

        d0 = $d6 - d0;

        d0 = d5 / d0;

        d3 = d4 - d3;

        d4 = d0 * d1;

        d4 = d4 * d1;

        d3 = d3 - d4;

        d1 = d3 / d1;

        d3 = 2.0 * d0;

        d2 = d3 * d2;

        d2 = d2 + d1;

        return d2;
    }
    private org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction interpolateHermiteSorted(double[], double[], double[])
    {
        org.apache.commons.math3.analysis.interpolation.AkimaSplineInterpolator r0;
        double[] $r1, $r2, $r3, r4;
        double d0, d1, d2, d3, d4, d5, $d6, $d7;
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] r5;
        int i0, $i1;
        org.apache.commons.math3.exception.DimensionMismatchException $r6;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r7;
        org.apache.commons.math3.exception.util.LocalizedFormats $r8;
        java.lang.Integer $r9, $r10;
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction $r11;
        org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction $r12;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.AkimaSplineInterpolator;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[];

        $r3 := @parameter2: double[];

        i0 = lengthof $r1;

        $i1 = lengthof $r2;

        if i0 == $i1 goto label1;

        $r6 = new org.apache.commons.math3.exception.DimensionMismatchException;

        i0 = lengthof $r1;

        $i1 = lengthof $r2;

        specialinvoke $r6.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>(i0, $i1);

        throw $r6;

     label1:
        i0 = lengthof $r1;

        $i1 = lengthof $r3;

        if i0 == $i1 goto label2;

        $r6 = new org.apache.commons.math3.exception.DimensionMismatchException;

        i0 = lengthof $r1;

        $i1 = lengthof $r3;

        specialinvoke $r6.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>(i0, $i1);

        throw $r6;

     label2:
        i0 = lengthof $r1;

        if i0 >= 2 goto label3;

        $r7 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r8 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NUMBER_OF_POINTS>;

        i0 = lengthof $r1;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        specialinvoke $r7.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r8, $r9, $r10, 1);

        throw $r7;

     label3:
        i0 = lengthof $r1;

        i0 = i0 + -1;

        r5 = newarray (org.apache.commons.math3.analysis.polynomials.PolynomialFunction)[i0];

        r4 = newarray (double)[4];

        i0 = 0;

     label4:
        $i1 = lengthof r5;

        if i0 >= $i1 goto label5;

        $i1 = i0 + 1;

        d3 = $r1[$i1];

        d1 = $r1[i0];

        d2 = d3 - d1;

        d3 = d2 * d2;

        d4 = $r2[i0];

        $i1 = i0 + 1;

        d5 = $r2[$i1];

        d0 = $r3[i0];

        $i1 = i0 + 1;

        d1 = $r3[$i1];

        r4[0] = d4;

        $d6 = $r3[i0];

        r4[1] = $d6;

        $d6 = d5 - d4;

        $d6 = 3.0 * $d6;

        $d6 = $d6 / d2;

        $d7 = 2.0 * d0;

        $d6 = $d6 - $d7;

        $d6 = $d6 - d1;

        $d6 = $d6 / d2;

        r4[2] = $d6;

        d4 = d4 - d5;

        d4 = 2.0 * d4;

        d2 = d4 / d2;

        d0 = d2 + d0;

        d1 = d0 + d1;

        d3 = d1 / d3;

        r4[3] = d3;

        $r11 = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction;

        specialinvoke $r11.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: void <init>(double[])>(r4);

        r5[i0] = $r11;

        i0 = i0 + 1;

        goto label4;

     label5:
        $r12 = new org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction;

        specialinvoke $r12.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: void <init>(double[],org.apache.commons.math3.analysis.polynomials.PolynomialFunction[])>($r1, r5);

        return $r12;
    }
    public volatile org.apache.commons.math3.analysis.UnivariateFunction interpolate(double[], double[]) throws org.apache.commons.math3.exception.MathIllegalArgumentException, org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.analysis.interpolation.AkimaSplineInterpolator r0;
        double[] $r1, $r2;
        org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction $r3;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.AkimaSplineInterpolator;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[];

        $r3 = virtualinvoke r0.<org.apache.commons.math3.analysis.interpolation.AkimaSplineInterpolator: org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction interpolate(double[],double[])>($r1, $r2);

        return $r3;
    }
    public org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction interpolate(double[], double[]) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.NonMonotonicSequenceException
    {
        org.apache.commons.math3.analysis.interpolation.AkimaSplineInterpolator r0;
        double[] $r1, $r2, r3, r4, r5;
        int i0, $i1, $i2, $i3, $i4;
        double d0, d1, d2, $d3, $d4;
        org.apache.commons.math3.exception.NullArgumentException $r6;
        org.apache.commons.math3.exception.DimensionMismatchException $r7;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r8;
        org.apache.commons.math3.exception.util.LocalizedFormats $r9;
        java.lang.Integer $r10, $r11;
        boolean $z0;
        org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction $r12;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.AkimaSplineInterpolator;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[];

        if $r1 == null goto label01;

        if $r2 != null goto label02;

     label01:
        $r6 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r6.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r6;

     label02:
        i0 = lengthof $r1;

        $i1 = lengthof $r2;

        if i0 == $i1 goto label03;

        $r7 = new org.apache.commons.math3.exception.DimensionMismatchException;

        i0 = lengthof $r1;

        $i1 = lengthof $r2;

        specialinvoke $r7.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>(i0, $i1);

        throw $r7;

     label03:
        i0 = lengthof $r1;

        if i0 >= 5 goto label04;

        $r8 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r9 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NUMBER_OF_POINTS>;

        i0 = lengthof $r1;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        specialinvoke $r8.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r9, $r10, $r11, 1);

        throw $r8;

     label04:
        staticinvoke <org.apache.commons.math3.util.MathArrays: void checkOrder(double[])>($r1);

        i0 = lengthof $r1;

        i0 = i0 + -1;

        r3 = newarray (double)[i0];

        r5 = newarray (double)[i0];

        i0 = 0;

     label05:
        $i1 = lengthof r3;

        if i0 >= $i1 goto label06;

        $i1 = i0 + 1;

        d0 = $r2[$i1];

        d1 = $r2[i0];

        d0 = d0 - d1;

        $i1 = i0 + 1;

        d1 = $r1[$i1];

        $d3 = $r1[i0];

        d1 = d1 - $d3;

        d0 = d0 / d1;

        r3[i0] = d0;

        i0 = i0 + 1;

        goto label05;

     label06:
        i0 = 1;

     label07:
        $i1 = lengthof r5;

        if i0 >= $i1 goto label08;

        d0 = r3[i0];

        $i1 = i0 + -1;

        d1 = r3[$i1];

        d0 = d0 - d1;

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d0);

        r5[i0] = d0;

        i0 = i0 + 1;

        goto label07;

     label08:
        i0 = lengthof $r1;

        r4 = newarray (double)[i0];

        i0 = 2;

     label09:
        $i1 = lengthof r4;

        $i1 = $i1 + -2;

        if i0 >= $i1 goto label12;

        $i1 = i0 + 1;

        d1 = r5[$i1];

        $i1 = i0 + -1;

        d0 = r5[$i1];

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double)>(d1, 0.0);

        if $z0 == 0 goto label11;

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double)>(d0, 0.0);

        if $z0 == 0 goto label11;

        d2 = $r1[i0];

        $i1 = i0 + 1;

        d1 = $r1[$i1];

        $i1 = i0 + -1;

        d0 = $r1[$i1];

        $d3 = d1 - d2;

        $i1 = i0 + -1;

        $d4 = r3[$i1];

        $d3 = $d3 * $d4;

        d2 = d2 - d0;

        $d4 = r3[i0];

        d2 = d2 * $d4;

        $d3 = $d3 + d2;

        d0 = d1 - d0;

        d0 = $d3 / d0;

        r4[i0] = d0;

     label10:
        i0 = i0 + 1;

        goto label09;

     label11:
        $i1 = i0 + -1;

        $d3 = r3[$i1];

        $d3 = $d3 * d1;

        d2 = r3[i0];

        d2 = d2 * d0;

        $d3 = $d3 + d2;

        d0 = d1 + d0;

        d0 = $d3 / d0;

        r4[i0] = d0;

        goto label10;

     label12:
        d0 = specialinvoke r0.<org.apache.commons.math3.analysis.interpolation.AkimaSplineInterpolator: double differentiateThreePoint(double[],double[],int,int,int,int)>($r1, $r2, 0, 0, 1, 2);

        r4[0] = d0;

        d0 = specialinvoke r0.<org.apache.commons.math3.analysis.interpolation.AkimaSplineInterpolator: double differentiateThreePoint(double[],double[],int,int,int,int)>($r1, $r2, 1, 0, 1, 2);

        r4[1] = d0;

        i0 = lengthof $r1;

        i0 = i0 + -2;

        $i1 = lengthof $r1;

        $i1 = $i1 + -2;

        $i2 = lengthof $r1;

        $i2 = $i2 + -3;

        $i3 = lengthof $r1;

        $i3 = $i3 + -2;

        $i4 = lengthof $r1;

        $i4 = $i4 + -1;

        d0 = specialinvoke r0.<org.apache.commons.math3.analysis.interpolation.AkimaSplineInterpolator: double differentiateThreePoint(double[],double[],int,int,int,int)>($r1, $r2, $i1, $i2, $i3, $i4);

        r4[i0] = d0;

        i0 = lengthof $r1;

        i0 = i0 + -1;

        $i1 = lengthof $r1;

        $i1 = $i1 + -1;

        $i2 = lengthof $r1;

        $i2 = $i2 + -3;

        $i3 = lengthof $r1;

        $i3 = $i3 + -2;

        $i4 = lengthof $r1;

        $i4 = $i4 + -1;

        d0 = specialinvoke r0.<org.apache.commons.math3.analysis.interpolation.AkimaSplineInterpolator: double differentiateThreePoint(double[],double[],int,int,int,int)>($r1, $r2, $i1, $i2, $i3, $i4);

        r4[i0] = d0;

        $r12 = specialinvoke r0.<org.apache.commons.math3.analysis.interpolation.AkimaSplineInterpolator: org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction interpolateHermiteSorted(double[],double[],double[])>($r1, $r2, r4);

        return $r12;
    }
