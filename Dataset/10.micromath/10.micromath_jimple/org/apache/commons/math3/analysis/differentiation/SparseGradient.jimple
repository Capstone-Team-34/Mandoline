org.apache.commons.math3.analysis.differentiation.SparseGradient extends java.lang.Object implements org.apache.commons.math3.RealFieldElement java.io.Serializable
private static final long serialVersionUID
private final java.util.Map derivatives
private double value
    private void <init>(double, double, java.util.Map)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0;
        double $d0, $d1;
        java.util.Map r1;
        java.util.HashMap $r2;
        java.util.Set $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5, $r7;
        java.util.Map$Entry r6;
        java.lang.Double $r8;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        r1 := @parameter2: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value> = $d0;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives> = $r2;

        if r1 == null goto label2;

        $r3 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r5;

        r1 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r5 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r8 = (java.lang.Double) $r7;

        $d0 = virtualinvoke $r8.<java.lang.Double: double doubleValue()>();

        $d0 = $d0 * $d1;

        $r8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r8);

        goto label1;

     label2:
        return;
    }
    private void <init>(double, java.util.Map)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0;
        double $d0;
        java.util.Map r1, $r3;
        java.util.HashMap $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 := @parameter0: double;

        r1 := @parameter1: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value> = $d0;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives> = $r2;

        if r1 == null goto label1;

        $r3 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        interfaceinvoke $r3.<java.util.Map: void putAll(java.util.Map)>(r1);

     label1:
        return;
    }
    public static org.apache.commons.math3.analysis.differentiation.SparseGradient atan2(org.apache.commons.math3.analysis.differentiation.SparseGradient, org.apache.commons.math3.analysis.differentiation.SparseGradient)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient $r0, $r1;

        $r0 := @parameter0: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 := @parameter1: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r0 = virtualinvoke $r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient atan2(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r1);

        return $r0;
    }
    public static org.apache.commons.math3.analysis.differentiation.SparseGradient createConstant(double)
    {
        double $d0;
        org.apache.commons.math3.analysis.differentiation.SparseGradient $r0;
        java.util.Map $r1;

        $d0 := @parameter0: double;

        $r0 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        specialinvoke $r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,java.util.Map)>($d0, $r1);

        return $r0;
    }
    public static org.apache.commons.math3.analysis.differentiation.SparseGradient createVariable(int, double)
    {
        int $i0;
        double $d0;
        org.apache.commons.math3.analysis.differentiation.SparseGradient $r0;
        java.lang.Integer $r1;
        java.lang.Double $r2;
        java.util.Map $r3;

        $i0 := @parameter0: int;

        $d0 := @parameter1: double;

        $r0 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        $r3 = staticinvoke <java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>($r1, $r2);

        specialinvoke $r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,java.util.Map)>($d0, $r3);

        return $r0;
    }
    public static org.apache.commons.math3.analysis.differentiation.SparseGradient hypot(org.apache.commons.math3.analysis.differentiation.SparseGradient, org.apache.commons.math3.analysis.differentiation.SparseGradient)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient $r0, $r1;

        $r0 := @parameter0: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 := @parameter1: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r0 = virtualinvoke $r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient hypot(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r1);

        return $r0;
    }
    public static org.apache.commons.math3.analysis.differentiation.SparseGradient pow(double, org.apache.commons.math3.analysis.differentiation.SparseGradient)
    {
        double $d0, $d1;
        org.apache.commons.math3.analysis.differentiation.SparseGradient $r0, $r1;
        byte $b0;
        org.apache.commons.math3.Field $r2;
        java.lang.Object $r3;
        java.util.Map $r4;

        $d0 := @parameter0: double;

        $r0 := @parameter1: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $b0 = $d0 cmpl 0.0;

        if $b0 != 0 goto label3;

        $d0 = $r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $b0 = $d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        $r0 = virtualinvoke $r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient compose(double,double)>(1.0, #-Infinity);

        return $r0;

     label1:
        $d0 = $r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $b0 = $d0 cmpg 0.0;

        if $b0 >= 0 goto label2;

        $r0 = virtualinvoke $r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient compose(double,double)>(#NaN, #NaN);

        return $r0;

     label2:
        $r2 = virtualinvoke $r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.Field getField()>();

        $r3 = interfaceinvoke $r2.<org.apache.commons.math3.Field: java.lang.Object getZero()>();

        $r0 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) $r3;

        return $r0;

     label3:
        $d1 = $r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,double)>($d0, $d1);

        $r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d0);

        $d0 = $d0 * $d1;

        $r4 = $r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,double,java.util.Map)>($d1, $d0, $r4);

        return $r1;
    }
    public volatile java.lang.Object abs()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient abs()>();

        return r0;
    }
    public org.apache.commons.math3.analysis.differentiation.SparseGradient abs()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0;
        double $d0;
        long $l0;
        byte $b1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $l0 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $b1 = $l0 cmp 0L;

        if $b1 >= 0 goto label1;

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient negate()>();

     label1:
        return r0;
    }
    public volatile java.lang.Object acos()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient acos()>();

        return r0;
    }
    public org.apache.commons.math3.analysis.differentiation.SparseGradient acos()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        double $d0, $d1, $d2;
        java.util.Map $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d1 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double acos(double)>($d1);

        $d2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d0 = $d2 * $d0;

        $d0 = 1.0 - $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d0);

        $d0 = -1.0 / $d0;

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,double,java.util.Map)>($d1, $d0, $r2);

        return $r1;
    }
    public volatile java.lang.Object acosh()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient acosh()>();

        return r0;
    }
    public org.apache.commons.math3.analysis.differentiation.SparseGradient acosh()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        double $d0, $d1, $d2;
        java.util.Map $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double acosh(double)>($d0);

        $d1 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d1 = $d1 * $d2;

        $d1 = $d1 - 1.0;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d1);

        $d1 = 1.0 / $d1;

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,double,java.util.Map)>($d0, $d1, $r2);

        return $r1;
    }
    public volatile java.lang.Object add(double)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 := @parameter0: double;

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient add(double)>($d0);

        return r0;
    }
    public volatile java.lang.Object add(java.lang.Object) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r2;
        java.lang.Object $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) $r1;

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient add(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r2);

        return r0;
    }
    public org.apache.commons.math3.analysis.differentiation.SparseGradient add(double)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, r1;
        double $d0, $d1;
        java.util.Map $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 := @parameter0: double;

        r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d1 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d0 = $d1 + $d0;

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,java.util.Map)>($d0, $r2);

        return r1;
    }
    public org.apache.commons.math3.analysis.differentiation.SparseGradient add(org.apache.commons.math3.analysis.differentiation.SparseGradient)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1, r2;
        double $d0, $d1;
        java.util.Map $r3;
        java.util.Set $r4;
        java.util.Iterator $r5;
        boolean $z0;
        java.lang.Object $r6;
        java.util.Map$Entry r7;
        java.lang.Integer $r8;
        int $i0;
        java.lang.Double r9;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r2 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d1 = $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d0 = $d0 + $d1;

        $r3 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke r2.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,java.util.Map)>($d0, $r3);

        $r3 = $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r6;

        $r6 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = (java.lang.Integer) $r6;

        $i0 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        $r3 = r2.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r6 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8);

        r9 = (java.lang.Double) $r6;

        if r9 != null goto label2;

        $r3 = r2.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r6 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r6);

        goto label1;

     label2:
        $r3 = r2.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $d0 = virtualinvoke r9.<java.lang.Double: double doubleValue()>();

        $r6 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        r9 = (java.lang.Double) $r6;

        $d1 = virtualinvoke r9.<java.lang.Double: double doubleValue()>();

        $d0 = $d0 + $d1;

        r9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, r9);

        goto label1;

     label3:
        return r2;
    }
    public void addInPlace(org.apache.commons.math3.analysis.differentiation.SparseGradient)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        double $d0, $d1;
        java.util.Map $r2;
        java.util.Set $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        java.util.Map$Entry r6;
        java.lang.Integer $r7;
        int $i0;
        java.lang.Double r8;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d1 = $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d0 = $d0 + $d1;

        r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value> = $d0;

        $r2 = $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r5;

        $r5 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = (java.lang.Integer) $r5;

        $i0 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r5 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7);

        r8 = (java.lang.Double) $r5;

        if r8 != null goto label2;

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r5 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r5);

        goto label1;

     label2:
        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $d0 = virtualinvoke r8.<java.lang.Double: double doubleValue()>();

        $r5 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        r8 = (java.lang.Double) $r5;

        $d1 = virtualinvoke r8.<java.lang.Double: double doubleValue()>();

        $d0 = $d0 + $d1;

        r8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, r8);

        goto label1;

     label3:
        return;
    }
    public volatile java.lang.Object asin()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient asin()>();

        return r0;
    }
    public org.apache.commons.math3.analysis.differentiation.SparseGradient asin()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        double $d0, $d1, $d2;
        java.util.Map $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double asin(double)>($d0);

        $d1 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d1 = $d1 * $d2;

        $d1 = 1.0 - $d1;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d1);

        $d1 = 1.0 / $d1;

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,double,java.util.Map)>($d0, $d1, $r2);

        return $r1;
    }
    public volatile java.lang.Object asinh()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient asinh()>();

        return r0;
    }
    public org.apache.commons.math3.analysis.differentiation.SparseGradient asinh()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        double $d0, $d1, $d2;
        java.util.Map $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double asinh(double)>($d0);

        $d1 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d1 = $d1 * $d2;

        $d1 = $d1 + 1.0;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d1);

        $d1 = 1.0 / $d1;

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,double,java.util.Map)>($d0, $d1, $r2);

        return $r1;
    }
    public volatile java.lang.Object atan()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient atan()>();

        return r0;
    }
    public org.apache.commons.math3.analysis.differentiation.SparseGradient atan()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        double $d0, $d1, $d2;
        java.util.Map $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan(double)>($d0);

        $d1 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d1 = $d1 * $d2;

        $d1 = $d1 + 1.0;

        $d1 = 1.0 / $d1;

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,double,java.util.Map)>($d0, $d1, $r2);

        return $r1;
    }
    public volatile java.lang.Object atan2(java.lang.Object) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r2;
        java.lang.Object $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) $r1;

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient atan2(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r2);

        return r0;
    }
    public org.apache.commons.math3.analysis.differentiation.SparseGradient atan2(org.apache.commons.math3.analysis.differentiation.SparseGradient)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1, $r2, $r3;
        double $d0, $d1;
        byte $b0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(org.apache.commons.math3.analysis.differentiation.SparseGradient)>(r0);

        $r3 = virtualinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r1);

        $r2 = virtualinvoke $r2.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient add(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r3);

        $r2 = virtualinvoke $r2.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient sqrt()>();

        $d0 = $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $b0 = $d0 cmpl 0.0;

        if $b0 < 0 goto label2;

        $r2 = virtualinvoke $r2.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient add(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r1);

        $r2 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient divide(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r2);

        $r2 = virtualinvoke $r2.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient atan()>();

        $r2 = virtualinvoke $r2.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(int)>(2);

     label1:
        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d1 = $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d0, $d1);

        $r2.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value> = $d0;

        return $r2;

     label2:
        $r2 = virtualinvoke $r2.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient subtract(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r1);

        $r2 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient divide(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r2);

        $r2 = virtualinvoke $r2.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient atan()>();

        $r2 = virtualinvoke $r2.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(int)>(-2);

        $d0 = $r2.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $b0 = $d0 cmpg 0.0;

        if $b0 > 0 goto label4;

        $d0 = -3.141592653589793;

     label3:
        $r2 = virtualinvoke $r2.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient add(double)>($d0);

        goto label1;

     label4:
        $d0 = 3.141592653589793;

        goto label3;
    }
    public volatile java.lang.Object atanh()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient atanh()>();

        return r0;
    }
    public org.apache.commons.math3.analysis.differentiation.SparseGradient atanh()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        double $d0, $d1, $d2;
        java.util.Map $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double atanh(double)>($d0);

        $d1 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d1 = $d1 * $d2;

        $d1 = 1.0 - $d1;

        $d1 = 1.0 / $d1;

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,double,java.util.Map)>($d0, $d1, $r2);

        return $r1;
    }
    public volatile java.lang.Object cbrt()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient cbrt()>();

        return r0;
    }
    public org.apache.commons.math3.analysis.differentiation.SparseGradient cbrt()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        double $d0, $d1;
        java.util.Map $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double cbrt(double)>($d0);

        $r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d1 = 3.0 * $d0;

        $d1 = $d1 * $d0;

        $d1 = 1.0 / $d1;

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,double,java.util.Map)>($d0, $d1, $r2);

        return $r1;
    }
    public volatile java.lang.Object ceil()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient ceil()>();

        return r0;
    }
    public org.apache.commons.math3.analysis.differentiation.SparseGradient ceil()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double ceil(double)>($d0);

        r0 = staticinvoke <org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient createConstant(double)>($d0);

        return r0;
    }
    public org.apache.commons.math3.analysis.differentiation.SparseGradient compose(double, double)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        double $d0, $d1;
        java.util.Map $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,double,java.util.Map)>($d0, $d1, $r2);

        return $r1;
    }
    public volatile java.lang.Object copySign(double)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 := @parameter0: double;

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient copySign(double)>($d0);

        return r0;
    }
    public volatile java.lang.Object copySign(java.lang.Object)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r2;
        java.lang.Object $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) $r1;

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient copySign(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r2);

        return r0;
    }
    public org.apache.commons.math3.analysis.differentiation.SparseGradient copySign(double)
    {
        double $d0, $d1;
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0;
        long $l0, $l1;
        byte $b2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 := @parameter0: double;

        $d1 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $l0 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d1);

        $l1 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $b2 = $l0 cmp 0L;

        if $b2 < 0 goto label1;

        $b2 = $l1 cmp 0L;

        if $b2 >= 0 goto label3;

     label1:
        $b2 = $l0 cmp 0L;

        if $b2 >= 0 goto label2;

        $b2 = $l1 cmp 0L;

        if $b2 >= 0 goto label2;

        return r0;

     label2:
        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient negate()>();

     label3:
        return r0;
    }
    public org.apache.commons.math3.analysis.differentiation.SparseGradient copySign(org.apache.commons.math3.analysis.differentiation.SparseGradient)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient $r0, r1;
        double $d0;
        long $l0, $l1;
        byte $b2;

        r1 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r0 := @parameter0: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 = r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $l0 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $d0 = $r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $l1 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $b2 = $l0 cmp 0L;

        if $b2 < 0 goto label1;

        $b2 = $l1 cmp 0L;

        if $b2 >= 0 goto label3;

     label1:
        $b2 = $l0 cmp 0L;

        if $b2 >= 0 goto label2;

        $b2 = $l1 cmp 0L;

        if $b2 >= 0 goto label2;

        return r1;

     label2:
        r1 = virtualinvoke r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient negate()>();

     label3:
        return r1;
    }
    public volatile java.lang.Object cos()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient cos()>();

        return r0;
    }
    public org.apache.commons.math3.analysis.differentiation.SparseGradient cos()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        java.util.Map $r2;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double cos(double)>($d0);

        $d1 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sin(double)>($d1);

        $d1 = neg $d1;

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,double,java.util.Map)>($d0, $d1, $r2);

        return $r1;
    }
    public volatile java.lang.Object cosh()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient cosh()>();

        return r0;
    }
    public org.apache.commons.math3.analysis.differentiation.SparseGradient cosh()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        java.util.Map $r2;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double cosh(double)>($d0);

        $d1 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sinh(double)>($d1);

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,double,java.util.Map)>($d0, $d1, $r2);

        return $r1;
    }
    public volatile java.lang.Object divide(double)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 := @parameter0: double;

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient divide(double)>($d0);

        return r0;
    }
    public volatile java.lang.Object divide(java.lang.Object) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r2;
        java.lang.Object $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) $r1;

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient divide(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r2);

        return r0;
    }
    public org.apache.commons.math3.analysis.differentiation.SparseGradient divide(double)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        double $d0, $d1;
        java.util.Map $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 := @parameter0: double;

        $r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d1 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d1 = $d1 / $d0;

        $d0 = 1.0 / $d0;

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,double,java.util.Map)>($d1, $d0, $r2);

        return $r1;
    }
    public org.apache.commons.math3.analysis.differentiation.SparseGradient divide(org.apache.commons.math3.analysis.differentiation.SparseGradient)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1, r2;
        double $d0, $d1, $d2;
        java.util.Map $r3;
        java.util.Set $r4;
        java.util.Iterator $r5;
        boolean $z0;
        java.lang.Object $r6, $r8;
        java.util.Map$Entry r7;
        java.lang.Double $r9;
        java.lang.Integer $r10;
        int $i0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r2 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d1 = $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d0 = $d0 / $d1;

        $r3 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        specialinvoke r2.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,java.util.Map)>($d0, $r3);

        $r3 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r6;

        $r3 = r2.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r6 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r9 = (java.lang.Double) $r8;

        $d0 = virtualinvoke $r9.<java.lang.Double: double doubleValue()>();

        $d1 = $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d0 = $d0 / $d1;

        $r9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r9);

        goto label1;

     label2:
        $r3 = $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r6;

        $r6 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r10 = (java.lang.Integer) $r6;

        $i0 = virtualinvoke $r10.<java.lang.Integer: int intValue()>();

        $r3 = r2.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r6 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r10);

        $r9 = (java.lang.Double) $r6;

        if $r9 != null goto label4;

        $r3 = r2.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $d0 = r2.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d0 = neg $d0;

        $d1 = $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d0 = $d0 / $d1;

        $r6 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r9 = (java.lang.Double) $r6;

        $d1 = virtualinvoke $r9.<java.lang.Double: double doubleValue()>();

        $d0 = $d0 * $d1;

        $r9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r9);

        goto label3;

     label4:
        $r3 = r2.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $d0 = virtualinvoke $r9.<java.lang.Double: double doubleValue()>();

        $d1 = r2.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d2 = $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d1 = $d1 / $d2;

        $r6 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r9 = (java.lang.Double) $r6;

        $d2 = virtualinvoke $r9.<java.lang.Double: double doubleValue()>();

        $d1 = $d1 * $d2;

        $d0 = $d0 - $d1;

        $r9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r9);

        goto label3;

     label5:
        return r2;
    }
    public boolean equals(java.lang.Object)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, r2;
        java.lang.Object $r1;
        boolean $z0;
        double $d0, $d1;
        java.util.Map $r3;
        int $i0, $i1;
        java.util.Set $r4;
        java.util.Iterator $r5;
        java.util.Map$Entry r6;
        java.lang.Double $r7;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 := @parameter0: java.lang.Object;

        if r0 != $r1 goto label1;

        return 1;

     label1:
        $z0 = $r1 instanceof org.apache.commons.math3.analysis.differentiation.SparseGradient;

        if $z0 == 0 goto label7;

        r2 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) $r1;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d1 = r2.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,int)>($d0, $d1, 1);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $r3 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $i0 = interfaceinvoke $r3.<java.util.Map: int size()>();

        $r3 = r2.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $i1 = interfaceinvoke $r3.<java.util.Map: int size()>();

        if $i0 == $i1 goto label3;

        return 0;

     label3:
        $r3 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r1 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r1;

        $r3 = r2.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r1 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        if $z0 != 0 goto label5;

        return 0;

     label5:
        $r1 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r7 = (java.lang.Double) $r1;

        $d0 = virtualinvoke $r7.<java.lang.Double: double doubleValue()>();

        $r3 = r2.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r1 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r1 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r7 = (java.lang.Double) $r1;

        $d1 = virtualinvoke $r7.<java.lang.Double: double doubleValue()>();

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,int)>($d0, $d1, 1);

        if $z0 != 0 goto label4;

        return 0;

     label6:
        return 1;

     label7:
        return 0;
    }
    public volatile java.lang.Object exp()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient exp()>();

        return r0;
    }
    public org.apache.commons.math3.analysis.differentiation.SparseGradient exp()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        double $d0;
        java.util.Map $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d0);

        $r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,double,java.util.Map)>($d0, $d0, $r2);

        return $r1;
    }
    public volatile java.lang.Object expm1()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient expm1()>();

        return r0;
    }
    public org.apache.commons.math3.analysis.differentiation.SparseGradient expm1()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        java.util.Map $r2;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double expm1(double)>($d0);

        $d1 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d1);

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,double,java.util.Map)>($d0, $d1, $r2);

        return $r1;
    }
    public volatile java.lang.Object floor()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient floor()>();

        return r0;
    }
    public org.apache.commons.math3.analysis.differentiation.SparseGradient floor()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double floor(double)>($d0);

        r0 = staticinvoke <org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient createConstant(double)>($d0);

        return r0;
    }
    public double getDerivative(int)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0;
        int $i0;
        java.util.Map $r1;
        java.lang.Integer $r2;
        java.lang.Object $r3;
        java.lang.Double r4;
        double $d0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        r4 = (java.lang.Double) $r3;

        if r4 != null goto label1;

        return 0.0;

     label1:
        $d0 = virtualinvoke r4.<java.lang.Double: double doubleValue()>();

        return $d0;
    }
    public org.apache.commons.math3.Field getField()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0;
        org.apache.commons.math3.analysis.differentiation.SparseGradient$1 $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient$1;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient$1: void <init>(org.apache.commons.math3.analysis.differentiation.SparseGradient)>(r0);

        return $r1;
    }
    public double getReal()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0;
        double d0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        return d0;
    }
    public double getValue()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0;
        double d0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        return d0;
    }
    public int hashCode()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0;
        double $d0;
        int $i0, $i1;
        java.util.Map $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $i0 = staticinvoke <org.apache.commons.math3.util.MathUtils: int hash(double)>($d0);

        $i0 = $i0 * 809;

        $i0 = $i0 + 743;

        $r1 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $i1 = interfaceinvoke $r1.<java.util.Map: int hashCode()>();

        $i1 = $i1 * 167;

        $i0 = $i0 + $i1;

        return $i0;
    }
    public volatile java.lang.Object hypot(java.lang.Object) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r2;
        java.lang.Object $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) $r1;

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient hypot(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r2);

        return r0;
    }
    public org.apache.commons.math3.analysis.differentiation.SparseGradient hypot(org.apache.commons.math3.analysis.differentiation.SparseGradient)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        int i0, $i1, $i2;
        double $d0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d0);

        if $z0 != 0 goto label1;

        $d0 = $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d0);

        if $z0 == 0 goto label2;

     label1:
        r0 = staticinvoke <org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient createConstant(double)>(#Infinity);

        return r0;

     label2:
        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 != 0 goto label3;

        $d0 = $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 == 0 goto label4;

     label3:
        r0 = staticinvoke <org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient createConstant(double)>(#NaN);

        return r0;

     label4:
        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        i0 = staticinvoke <org.apache.commons.math3.util.FastMath: int getExponent(double)>($d0);

        $d0 = $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $i1 = staticinvoke <org.apache.commons.math3.util.FastMath: int getExponent(double)>($d0);

        $i2 = $i1 + 27;

        if i0 <= $i2 goto label5;

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient abs()>();

        return r0;

     label5:
        $i2 = i0 + 27;

        if $i1 <= $i2 goto label6;

        r0 = virtualinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient abs()>();

        return r0;

     label6:
        i0 = i0 + $i1;

        i0 = i0 / 2;

        $i1 = neg i0;

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient scalb(int)>($i1);

        $i1 = neg i0;

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient scalb(int)>($i1);

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(org.apache.commons.math3.analysis.differentiation.SparseGradient)>(r0);

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r1);

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient add(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r1);

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient sqrt()>();

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient scalb(int)>(i0);

        return r0;
    }
    public volatile java.lang.Object linearCombination(double, java.lang.Object, double, java.lang.Object)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r3, $r4;
        double $d0, $d1;
        java.lang.Object $r1, $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 := @parameter0: double;

        $r1 := @parameter1: java.lang.Object;

        $d1 := @parameter2: double;

        $r2 := @parameter3: java.lang.Object;

        $r3 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) $r1;

        $r4 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) $r2;

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient linearCombination(double,org.apache.commons.math3.analysis.differentiation.SparseGradient,double,org.apache.commons.math3.analysis.differentiation.SparseGradient)>($d0, $r3, $d1, $r4);

        return r0;
    }
    public volatile java.lang.Object linearCombination(double, java.lang.Object, double, java.lang.Object, double, java.lang.Object)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r4, $r5, $r6;
        double $d0, $d1, $d2;
        java.lang.Object $r1, $r2, $r3;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 := @parameter0: double;

        $r1 := @parameter1: java.lang.Object;

        $d1 := @parameter2: double;

        $r2 := @parameter3: java.lang.Object;

        $d2 := @parameter4: double;

        $r3 := @parameter5: java.lang.Object;

        $r4 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) $r1;

        $r5 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) $r2;

        $r6 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) $r3;

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient linearCombination(double,org.apache.commons.math3.analysis.differentiation.SparseGradient,double,org.apache.commons.math3.analysis.differentiation.SparseGradient,double,org.apache.commons.math3.analysis.differentiation.SparseGradient)>($d0, $r4, $d1, $r5, $d2, $r6);

        return r0;
    }
    public volatile java.lang.Object linearCombination(double, java.lang.Object, double, java.lang.Object, double, java.lang.Object, double, java.lang.Object)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r5, $r6, $r7, $r8;
        double $d0, $d1, $d2, $d3;
        java.lang.Object $r1, $r2, $r3, $r4;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 := @parameter0: double;

        $r1 := @parameter1: java.lang.Object;

        $d1 := @parameter2: double;

        $r2 := @parameter3: java.lang.Object;

        $d2 := @parameter4: double;

        $r3 := @parameter5: java.lang.Object;

        $d3 := @parameter6: double;

        $r4 := @parameter7: java.lang.Object;

        $r5 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) $r1;

        $r6 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) $r2;

        $r7 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) $r3;

        $r8 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) $r4;

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient linearCombination(double,org.apache.commons.math3.analysis.differentiation.SparseGradient,double,org.apache.commons.math3.analysis.differentiation.SparseGradient,double,org.apache.commons.math3.analysis.differentiation.SparseGradient,double,org.apache.commons.math3.analysis.differentiation.SparseGradient)>($d0, $r5, $d1, $r6, $d2, $r7, $d3, $r8);

        return r0;
    }
    public volatile java.lang.Object linearCombination(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r5, $r6, $r7, $r8;
        java.lang.Object $r1, $r2, $r3, $r4;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 := @parameter2: java.lang.Object;

        $r4 := @parameter3: java.lang.Object;

        $r5 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) $r1;

        $r6 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) $r2;

        $r7 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) $r3;

        $r8 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) $r4;

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient linearCombination(org.apache.commons.math3.analysis.differentiation.SparseGradient,org.apache.commons.math3.analysis.differentiation.SparseGradient,org.apache.commons.math3.analysis.differentiation.SparseGradient,org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r5, $r6, $r7, $r8);

        return r0;
    }
    public volatile java.lang.Object linearCombination(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r7, $r8, $r9, $r10, $r11, $r12;
        java.lang.Object $r1, $r2, $r3, $r4, $r5, $r6;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 := @parameter2: java.lang.Object;

        $r4 := @parameter3: java.lang.Object;

        $r5 := @parameter4: java.lang.Object;

        $r6 := @parameter5: java.lang.Object;

        $r7 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) $r1;

        $r8 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) $r2;

        $r9 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) $r3;

        $r10 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) $r4;

        $r11 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) $r5;

        $r12 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) $r6;

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient linearCombination(org.apache.commons.math3.analysis.differentiation.SparseGradient,org.apache.commons.math3.analysis.differentiation.SparseGradient,org.apache.commons.math3.analysis.differentiation.SparseGradient,org.apache.commons.math3.analysis.differentiation.SparseGradient,org.apache.commons.math3.analysis.differentiation.SparseGradient,org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r7, $r8, $r9, $r10, $r11, $r12);

        return r0;
    }
    public volatile java.lang.Object linearCombination(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16;
        java.lang.Object $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 := @parameter2: java.lang.Object;

        $r4 := @parameter3: java.lang.Object;

        $r5 := @parameter4: java.lang.Object;

        $r6 := @parameter5: java.lang.Object;

        $r7 := @parameter6: java.lang.Object;

        $r8 := @parameter7: java.lang.Object;

        $r9 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) $r1;

        $r10 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) $r2;

        $r11 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) $r3;

        $r12 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) $r4;

        $r13 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) $r5;

        $r14 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) $r6;

        $r15 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) $r7;

        $r16 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) $r8;

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient linearCombination(org.apache.commons.math3.analysis.differentiation.SparseGradient,org.apache.commons.math3.analysis.differentiation.SparseGradient,org.apache.commons.math3.analysis.differentiation.SparseGradient,org.apache.commons.math3.analysis.differentiation.SparseGradient,org.apache.commons.math3.analysis.differentiation.SparseGradient,org.apache.commons.math3.analysis.differentiation.SparseGradient,org.apache.commons.math3.analysis.differentiation.SparseGradient,org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16);

        return r0;
    }
    public volatile java.lang.Object linearCombination(double[], java.lang.Object[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0;
        double[] $r1;
        java.lang.Object[] $r2;
        org.apache.commons.math3.analysis.differentiation.SparseGradient[] $r3;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: java.lang.Object[];

        $r3 = (org.apache.commons.math3.analysis.differentiation.SparseGradient[]) $r2;

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient linearCombination(double[],org.apache.commons.math3.analysis.differentiation.SparseGradient[])>($r1, $r3);

        return r0;
    }
    public volatile java.lang.Object linearCombination(java.lang.Object[], java.lang.Object[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0;
        java.lang.Object[] $r1, $r2;
        org.apache.commons.math3.analysis.differentiation.SparseGradient[] $r3, $r4;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 := @parameter0: java.lang.Object[];

        $r2 := @parameter1: java.lang.Object[];

        $r3 = (org.apache.commons.math3.analysis.differentiation.SparseGradient[]) $r1;

        $r4 = (org.apache.commons.math3.analysis.differentiation.SparseGradient[]) $r2;

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient linearCombination(org.apache.commons.math3.analysis.differentiation.SparseGradient[],org.apache.commons.math3.analysis.differentiation.SparseGradient[])>($r3, $r4);

        return r0;
    }
    public org.apache.commons.math3.analysis.differentiation.SparseGradient linearCombination(double, org.apache.commons.math3.analysis.differentiation.SparseGradient, double, org.apache.commons.math3.analysis.differentiation.SparseGradient)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1, $r2, $r3;
        double $d0, $d1, $d2, $d3;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 := @parameter0: double;

        $r1 := @parameter1: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d1 := @parameter2: double;

        $r2 := @parameter3: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r0 = virtualinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(double)>($d0);

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(double)>($d1);

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient add(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r3);

        $d2 = $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d3 = $r2.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d0 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double)>($d0, $d2, $d1, $d3);

        r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value> = $d0;

        return r0;
    }
    public org.apache.commons.math3.analysis.differentiation.SparseGradient linearCombination(double, org.apache.commons.math3.analysis.differentiation.SparseGradient, double, org.apache.commons.math3.analysis.differentiation.SparseGradient, double, org.apache.commons.math3.analysis.differentiation.SparseGradient)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1, $r2, $r3, $r4;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 := @parameter0: double;

        $r1 := @parameter1: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d1 := @parameter2: double;

        $r2 := @parameter3: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d2 := @parameter4: double;

        $r3 := @parameter5: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r0 = virtualinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(double)>($d0);

        $r4 = virtualinvoke $r2.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(double)>($d1);

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient add(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r4);

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(double)>($d2);

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient add(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r4);

        $d3 = $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d4 = $r2.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d5 = $r3.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d0 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double,double,double)>($d0, $d3, $d1, $d4, $d2, $d5);

        r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value> = $d0;

        return r0;
    }
    public org.apache.commons.math3.analysis.differentiation.SparseGradient linearCombination(double, org.apache.commons.math3.analysis.differentiation.SparseGradient, double, org.apache.commons.math3.analysis.differentiation.SparseGradient, double, org.apache.commons.math3.analysis.differentiation.SparseGradient, double, org.apache.commons.math3.analysis.differentiation.SparseGradient)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1, $r2, $r3, $r4, $r5;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 := @parameter0: double;

        $r1 := @parameter1: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d1 := @parameter2: double;

        $r2 := @parameter3: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d2 := @parameter4: double;

        $r3 := @parameter5: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d3 := @parameter6: double;

        $r4 := @parameter7: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r0 = virtualinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(double)>($d0);

        $r5 = virtualinvoke $r2.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(double)>($d1);

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient add(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r5);

        $r5 = virtualinvoke $r3.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(double)>($d2);

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient add(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r5);

        $r5 = virtualinvoke $r4.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(double)>($d3);

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient add(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r5);

        $d4 = $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d5 = $r2.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d6 = $r3.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d7 = $r4.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d0 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double,double,double,double,double)>($d0, $d4, $d1, $d5, $d2, $d6, $d3, $d7);

        r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value> = $d0;

        return r0;
    }
    public org.apache.commons.math3.analysis.differentiation.SparseGradient linearCombination(org.apache.commons.math3.analysis.differentiation.SparseGradient, org.apache.commons.math3.analysis.differentiation.SparseGradient, org.apache.commons.math3.analysis.differentiation.SparseGradient, org.apache.commons.math3.analysis.differentiation.SparseGradient)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1, $r2, $r3, $r4, $r5;
        double $d0, $d1, $d2, $d3;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r2 := @parameter1: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r3 := @parameter2: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r4 := @parameter3: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r0 = virtualinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r2);

        $r5 = virtualinvoke $r3.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r4);

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient add(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r5);

        $d3 = $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d0 = $r2.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d1 = $r3.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d2 = $r4.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d0 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double)>($d3, $d0, $d1, $d2);

        r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value> = $d0;

        return r0;
    }
    public org.apache.commons.math3.analysis.differentiation.SparseGradient linearCombination(org.apache.commons.math3.analysis.differentiation.SparseGradient, org.apache.commons.math3.analysis.differentiation.SparseGradient, org.apache.commons.math3.analysis.differentiation.SparseGradient, org.apache.commons.math3.analysis.differentiation.SparseGradient, org.apache.commons.math3.analysis.differentiation.SparseGradient, org.apache.commons.math3.analysis.differentiation.SparseGradient)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r2 := @parameter1: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r3 := @parameter2: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r4 := @parameter3: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r5 := @parameter4: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r6 := @parameter5: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r0 = virtualinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r2);

        $r7 = virtualinvoke $r3.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r4);

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient add(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r7);

        $r7 = virtualinvoke $r5.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r6);

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient add(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r7);

        $d5 = $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d0 = $r2.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d1 = $r3.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d2 = $r4.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d3 = $r5.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d4 = $r6.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d0 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double,double,double)>($d5, $d0, $d1, $d2, $d3, $d4);

        r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value> = $d0;

        return r0;
    }
    public org.apache.commons.math3.analysis.differentiation.SparseGradient linearCombination(org.apache.commons.math3.analysis.differentiation.SparseGradient, org.apache.commons.math3.analysis.differentiation.SparseGradient, org.apache.commons.math3.analysis.differentiation.SparseGradient, org.apache.commons.math3.analysis.differentiation.SparseGradient, org.apache.commons.math3.analysis.differentiation.SparseGradient, org.apache.commons.math3.analysis.differentiation.SparseGradient, org.apache.commons.math3.analysis.differentiation.SparseGradient, org.apache.commons.math3.analysis.differentiation.SparseGradient)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r2 := @parameter1: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r3 := @parameter2: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r4 := @parameter3: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r5 := @parameter4: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r6 := @parameter5: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r7 := @parameter6: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r8 := @parameter7: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r0 = virtualinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r2);

        $r9 = virtualinvoke $r3.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r4);

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient add(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r9);

        $r9 = virtualinvoke $r5.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r6);

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient add(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r9);

        $r9 = virtualinvoke $r7.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r8);

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient add(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r9);

        $d6 = $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d0 = $r2.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d1 = $r3.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d2 = $r4.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d3 = $r5.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d4 = $r6.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d5 = $r7.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d7 = $r8.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d0 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double,double,double,double,double)>($d6, $d0, $d1, $d2, $d3, $d4, $d5, $d7);

        r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value> = $d0;

        return r0;
    }
    public org.apache.commons.math3.analysis.differentiation.SparseGradient linearCombination(double[], org.apache.commons.math3.analysis.differentiation.SparseGradient[])
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r6;
        double[] $r1, r3;
        org.apache.commons.math3.analysis.differentiation.SparseGradient[] $r2;
        org.apache.commons.math3.Field $r4;
        java.lang.Object $r5;
        int i0, $i1;
        double $d0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: org.apache.commons.math3.analysis.differentiation.SparseGradient[];

        r0 = $r2[0];

        $r4 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.Field getField()>();

        $r5 = interfaceinvoke $r4.<org.apache.commons.math3.Field: java.lang.Object getZero()>();

        r0 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) $r5;

        i0 = 0;

     label1:
        $i1 = lengthof $r1;

        if i0 >= $i1 goto label2;

        $r6 = $r2[i0];

        $d0 = $r1[i0];

        $r6 = virtualinvoke $r6.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(double)>($d0);

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient add(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r6);

        i0 = i0 + 1;

        goto label1;

     label2:
        i0 = lengthof $r2;

        r3 = newarray (double)[i0];

        i0 = 0;

     label3:
        $i1 = lengthof $r2;

        if i0 >= $i1 goto label4;

        $r6 = $r2[i0];

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double getValue()>();

        r3[i0] = $d0;

        i0 = i0 + 1;

        goto label3;

     label4:
        $d0 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double[],double[])>($r1, r3);

        r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value> = $d0;

        return r0;
    }
    public org.apache.commons.math3.analysis.differentiation.SparseGradient linearCombination(org.apache.commons.math3.analysis.differentiation.SparseGradient[], org.apache.commons.math3.analysis.differentiation.SparseGradient[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r5, $r8;
        org.apache.commons.math3.analysis.differentiation.SparseGradient[] $r1, $r2;
        double[] r3, r4;
        org.apache.commons.math3.Field $r6;
        java.lang.Object $r7;
        int i0, $i1;
        double $d0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.SparseGradient[];

        $r2 := @parameter1: org.apache.commons.math3.analysis.differentiation.SparseGradient[];

        r0 = $r1[0];

        $r6 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.Field getField()>();

        $r7 = interfaceinvoke $r6.<org.apache.commons.math3.Field: java.lang.Object getZero()>();

        r0 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) $r7;

        i0 = 0;

     label1:
        $i1 = lengthof $r1;

        if i0 >= $i1 goto label2;

        $r8 = $r1[i0];

        $r5 = $r2[i0];

        $r5 = virtualinvoke $r8.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r5);

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient add(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r5);

        i0 = i0 + 1;

        goto label1;

     label2:
        i0 = lengthof $r1;

        r3 = newarray (double)[i0];

        i0 = 0;

     label3:
        $i1 = lengthof $r1;

        if i0 >= $i1 goto label4;

        $r5 = $r1[i0];

        $d0 = virtualinvoke $r5.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double getValue()>();

        r3[i0] = $d0;

        i0 = i0 + 1;

        goto label3;

     label4:
        i0 = lengthof $r2;

        r4 = newarray (double)[i0];

        i0 = 0;

     label5:
        $i1 = lengthof $r2;

        if i0 >= $i1 goto label6;

        $r5 = $r2[i0];

        $d0 = virtualinvoke $r5.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double getValue()>();

        r4[i0] = $d0;

        i0 = i0 + 1;

        goto label5;

     label6:
        $d0 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double[],double[])>(r3, r4);

        r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value> = $d0;

        return r0;
    }
    public volatile java.lang.Object log()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient log()>();

        return r0;
    }
    public org.apache.commons.math3.analysis.differentiation.SparseGradient log()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        double $d0, $d1;
        java.util.Map $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d0);

        $d1 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d1 = 1.0 / $d1;

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,double,java.util.Map)>($d0, $d1, $r2);

        return $r1;
    }
    public org.apache.commons.math3.analysis.differentiation.SparseGradient log10()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        double $d0, $d1, $d2;
        java.util.Map $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d1 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double log10(double)>($d1);

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(10.0);

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d0 = $d2 * $d0;

        $d0 = 1.0 / $d0;

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,double,java.util.Map)>($d1, $d0, $r2);

        return $r1;
    }
    public volatile java.lang.Object log1p()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient log1p()>();

        return r0;
    }
    public org.apache.commons.math3.analysis.differentiation.SparseGradient log1p()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        double $d0, $d1;
        java.util.Map $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double log1p(double)>($d0);

        $d1 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d1 = $d1 + 1.0;

        $d1 = 1.0 / $d1;

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,double,java.util.Map)>($d0, $d1, $r2);

        return $r1;
    }
    public volatile java.lang.Object multiply(double)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 := @parameter0: double;

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(double)>($d0);

        return r0;
    }
    public volatile java.lang.Object multiply(int)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $i0 := @parameter0: int;

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(int)>($i0);

        return r0;
    }
    public volatile java.lang.Object multiply(java.lang.Object) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r2;
        java.lang.Object $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) $r1;

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r2);

        return r0;
    }
    public org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(double)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        double $d0, $d1;
        java.util.Map $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 := @parameter0: double;

        $r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d1 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d1 = $d1 * $d0;

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,double,java.util.Map)>($d1, $d0, $r2);

        return $r1;
    }
    public org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(int)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        int $i0;
        java.util.Map $r2;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $i0 := @parameter0: int;

        $r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d1 = (double) $i0;

        $d0 = $d0 * $d1;

        $d1 = (double) $i0;

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,double,java.util.Map)>($d0, $d1, $r2);

        return $r1;
    }
    public org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(org.apache.commons.math3.analysis.differentiation.SparseGradient)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1, r2;
        double $d0, $d1, $d2;
        java.util.Map $r3;
        java.util.Set $r4;
        java.util.Iterator $r5;
        boolean $z0;
        java.lang.Object $r6, $r8;
        java.util.Map$Entry r7;
        java.lang.Double $r9;
        java.lang.Integer $r10;
        int $i0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r2 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d1 = $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d0 = $d0 * $d1;

        $r3 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        specialinvoke r2.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,java.util.Map)>($d0, $r3);

        $r3 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r6;

        $r3 = r2.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r6 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        $d0 = $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $r8 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r9 = (java.lang.Double) $r8;

        $d1 = virtualinvoke $r9.<java.lang.Double: double doubleValue()>();

        $d0 = $d0 * $d1;

        $r9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r9);

        goto label1;

     label2:
        $r3 = $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r6;

        $r6 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r10 = (java.lang.Integer) $r6;

        $i0 = virtualinvoke $r10.<java.lang.Integer: int intValue()>();

        $r3 = r2.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r6 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r10);

        $r9 = (java.lang.Double) $r6;

        if $r9 != null goto label4;

        $r3 = r2.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $r6 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r9 = (java.lang.Double) $r6;

        $d1 = virtualinvoke $r9.<java.lang.Double: double doubleValue()>();

        $d0 = $d0 * $d1;

        $r9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r9);

        goto label3;

     label4:
        $r3 = r2.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $d0 = virtualinvoke $r9.<java.lang.Double: double doubleValue()>();

        $d1 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $r6 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r9 = (java.lang.Double) $r6;

        $d2 = virtualinvoke $r9.<java.lang.Double: double doubleValue()>();

        $d1 = $d1 * $d2;

        $d0 = $d0 + $d1;

        $r9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r9);

        goto label3;

     label5:
        return r2;
    }
    public void multiplyInPlace(org.apache.commons.math3.analysis.differentiation.SparseGradient)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        java.util.Map $r2;
        java.util.Set $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5, $r7;
        java.util.Map$Entry r6;
        double $d0, $d1, $d2;
        java.lang.Double $r8;
        java.lang.Integer $r9;
        int $i0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r5;

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r5 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $d0 = $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $r7 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r8 = (java.lang.Double) $r7;

        $d1 = virtualinvoke $r8.<java.lang.Double: double doubleValue()>();

        $d0 = $d0 * $d1;

        $r8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r8);

        goto label1;

     label2:
        $r2 = $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r5;

        $r5 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = (java.lang.Integer) $r5;

        $i0 = virtualinvoke $r9.<java.lang.Integer: int intValue()>();

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r5 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r9);

        $r8 = (java.lang.Double) $r5;

        if $r8 != null goto label4;

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $r5 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r8 = (java.lang.Double) $r5;

        $d1 = virtualinvoke $r8.<java.lang.Double: double doubleValue()>();

        $d0 = $d0 * $d1;

        $r8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r8);

        goto label3;

     label4:
        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $d0 = virtualinvoke $r8.<java.lang.Double: double doubleValue()>();

        $d1 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $r5 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r8 = (java.lang.Double) $r5;

        $d2 = virtualinvoke $r8.<java.lang.Double: double doubleValue()>();

        $d1 = $d1 * $d2;

        $d0 = $d0 + $d1;

        $r8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r8);

        goto label3;

     label5:
        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d1 = $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d0 = $d0 * $d1;

        r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value> = $d0;

        return;
    }
    public volatile java.lang.Object negate()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient negate()>();

        return r0;
    }
    public org.apache.commons.math3.analysis.differentiation.SparseGradient negate()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        java.util.Map $r2;
        double $d0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d0 = neg $d0;

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,double,java.util.Map)>($d0, -1.0, $r2);

        return $r1;
    }
    public int numVars()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0;
        int $i0;
        java.util.Map $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        return $i0;
    }
    public volatile java.lang.Object pow(double)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 := @parameter0: double;

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient pow(double)>($d0);

        return r0;
    }
    public volatile java.lang.Object pow(int)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $i0 := @parameter0: int;

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient pow(int)>($i0);

        return r0;
    }
    public volatile java.lang.Object pow(java.lang.Object) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r2;
        java.lang.Object $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) $r1;

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient pow(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r2);

        return r0;
    }
    public org.apache.commons.math3.analysis.differentiation.SparseGradient pow(double)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        double $d0, $d1, $d2, $d3;
        java.util.Map $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 := @parameter0: double;

        $r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d1 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,double)>($d1, $d0);

        $d2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d3 = $d0 - 1.0;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,double)>($d2, $d3);

        $d0 = $d2 * $d0;

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,double,java.util.Map)>($d1, $d0, $r2);

        return $r1;
    }
    public org.apache.commons.math3.analysis.differentiation.SparseGradient pow(int)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        int $i0, $i1;
        java.util.Map $r2;
        org.apache.commons.math3.Field $r3;
        java.lang.Object $r4;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $i0 := @parameter0: int;

        if $i0 != 0 goto label1;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.Field getField()>();

        $r4 = interfaceinvoke $r3.<org.apache.commons.math3.Field: java.lang.Object getOne()>();

        r0 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) $r4;

        return r0;

     label1:
        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $i1 = $i0 + -1;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,int)>($d0, $i1);

        $r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d1 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d1 = $d1 * $d0;

        $d2 = (double) $i0;

        $d0 = $d2 * $d0;

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,double,java.util.Map)>($d1, $d0, $r2);

        return $r1;
    }
    public org.apache.commons.math3.analysis.differentiation.SparseGradient pow(org.apache.commons.math3.analysis.differentiation.SparseGradient)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient log()>();

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r1);

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient exp()>();

        return r0;
    }
    public volatile java.lang.Object reciprocal()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient reciprocal()>();

        return r0;
    }
    public org.apache.commons.math3.analysis.differentiation.SparseGradient reciprocal()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        double $d0, $d1, $d2;
        java.util.Map $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d1 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d1 = 1.0 / $d1;

        $d2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d0 = $d2 * $d0;

        $d0 = -1.0 / $d0;

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,double,java.util.Map)>($d1, $d0, $r2);

        return $r1;
    }
    public volatile java.lang.Object remainder(double)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 := @parameter0: double;

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient remainder(double)>($d0);

        return r0;
    }
    public volatile java.lang.Object remainder(java.lang.Object) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r2;
        java.lang.Object $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) $r1;

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient remainder(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r2);

        return r0;
    }
    public org.apache.commons.math3.analysis.differentiation.SparseGradient remainder(double)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        double $d0, $d1;
        java.util.Map $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 := @parameter0: double;

        $r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d1 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double IEEEremainder(double,double)>($d1, $d0);

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,java.util.Map)>($d0, $r2);

        return $r1;
    }
    public org.apache.commons.math3.analysis.differentiation.SparseGradient remainder(org.apache.commons.math3.analysis.differentiation.SparseGradient)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d1 = $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double IEEEremainder(double,double)>($d0, $d1);

        $d1 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d0 = $d1 - $d0;

        $d1 = $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d0 = $d0 / $d1;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double rint(double)>($d0);

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(double)>($d0);

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient subtract(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r1);

        return r0;
    }
    public volatile java.lang.Object rint()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient rint()>();

        return r0;
    }
    public org.apache.commons.math3.analysis.differentiation.SparseGradient rint()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double rint(double)>($d0);

        r0 = staticinvoke <org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient createConstant(double)>($d0);

        return r0;
    }
    public volatile java.lang.Object rootN(int)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $i0 := @parameter0: int;

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient rootN(int)>($i0);

        return r0;
    }
    public org.apache.commons.math3.analysis.differentiation.SparseGradient rootN(int)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        int $i0;
        double $d0, $d1, $d2;
        java.util.Map $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $i0 := @parameter0: int;

        if $i0 != 2 goto label1;

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient sqrt()>();

        return r0;

     label1:
        if $i0 != 3 goto label2;

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient cbrt()>();

        return r0;

     label2:
        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d1 = (double) $i0;

        $d1 = 1.0 / $d1;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,double)>($d0, $d1);

        $r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d1 = (double) $i0;

        $i0 = $i0 + -1;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,int)>($d0, $i0);

        $d1 = $d1 * $d2;

        $d1 = 1.0 / $d1;

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,double,java.util.Map)>($d0, $d1, $r2);

        return $r1;
    }
    public long round()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0;
        long $l0;
        double $d0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $l0 = staticinvoke <org.apache.commons.math3.util.FastMath: long round(double)>($d0);

        return $l0;
    }
    public volatile java.lang.Object scalb(int)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $i0 := @parameter0: int;

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient scalb(int)>($i0);

        return r0;
    }
    public org.apache.commons.math3.analysis.differentiation.SparseGradient scalb(int)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, r1;
        int $i0;
        double $d0;
        java.util.Map $r2;
        java.util.Set $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5, $r7;
        java.util.Map$Entry r6;
        java.lang.Double $r8;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $i0 := @parameter0: int;

        r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double scalb(double,int)>($d0, $i0);

        $r2 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        specialinvoke r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,java.util.Map)>($d0, $r2);

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r5;

        $r2 = r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r5 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r8 = (java.lang.Double) $r7;

        $d0 = virtualinvoke $r8.<java.lang.Double: double doubleValue()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double scalb(double,int)>($d0, $i0);

        $r8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r8);

        goto label1;

     label2:
        return r1;
    }
    public volatile java.lang.Object signum()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient signum()>();

        return r0;
    }
    public org.apache.commons.math3.analysis.differentiation.SparseGradient signum()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double signum(double)>($d0);

        r0 = staticinvoke <org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient createConstant(double)>($d0);

        return r0;
    }
    public volatile java.lang.Object sin()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient sin()>();

        return r0;
    }
    public org.apache.commons.math3.analysis.differentiation.SparseGradient sin()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        java.util.Map $r2;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sin(double)>($d0);

        $d1 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double cos(double)>($d1);

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,double,java.util.Map)>($d0, $d1, $r2);

        return $r1;
    }
    public volatile java.lang.Object sinh()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient sinh()>();

        return r0;
    }
    public org.apache.commons.math3.analysis.differentiation.SparseGradient sinh()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        java.util.Map $r2;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sinh(double)>($d0);

        $d1 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double cosh(double)>($d1);

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,double,java.util.Map)>($d0, $d1, $r2);

        return $r1;
    }
    public volatile java.lang.Object sqrt()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient sqrt()>();

        return r0;
    }
    public org.apache.commons.math3.analysis.differentiation.SparseGradient sqrt()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        double $d0, $d1;
        java.util.Map $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d0);

        $r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d1 = 0.5 / $d0;

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,double,java.util.Map)>($d0, $d1, $r2);

        return $r1;
    }
    public volatile java.lang.Object subtract(double)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 := @parameter0: double;

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient subtract(double)>($d0);

        return r0;
    }
    public volatile java.lang.Object subtract(java.lang.Object) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r2;
        java.lang.Object $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) $r1;

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient subtract(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r2);

        return r0;
    }
    public org.apache.commons.math3.analysis.differentiation.SparseGradient subtract(double)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        double $d0, $d1;
        java.util.Map $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 := @parameter0: double;

        $r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d1 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d0 = $d1 - $d0;

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,java.util.Map)>($d0, $r2);

        return $r1;
    }
    public org.apache.commons.math3.analysis.differentiation.SparseGradient subtract(org.apache.commons.math3.analysis.differentiation.SparseGradient)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1, r2;
        double $d0, $d1;
        java.util.Map $r3;
        java.util.Set $r4;
        java.util.Iterator $r5;
        boolean $z0;
        java.lang.Object $r6;
        java.util.Map$Entry r7;
        java.lang.Integer $r8;
        int $i0;
        java.lang.Double r9;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r2 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d1 = $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d0 = $d0 - $d1;

        $r3 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke r2.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,java.util.Map)>($d0, $r3);

        $r3 = $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r6;

        $r6 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = (java.lang.Integer) $r6;

        $i0 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        $r3 = r2.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r6 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8);

        r9 = (java.lang.Double) $r6;

        if r9 != null goto label2;

        $r3 = r2.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r6 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        r9 = (java.lang.Double) $r6;

        $d0 = virtualinvoke r9.<java.lang.Double: double doubleValue()>();

        $d0 = neg $d0;

        r9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, r9);

        goto label1;

     label2:
        $r3 = r2.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $d0 = virtualinvoke r9.<java.lang.Double: double doubleValue()>();

        $r6 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        r9 = (java.lang.Double) $r6;

        $d1 = virtualinvoke r9.<java.lang.Double: double doubleValue()>();

        $d0 = $d0 - $d1;

        r9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, r9);

        goto label1;

     label3:
        return r2;
    }
    public volatile java.lang.Object tan()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient tan()>();

        return r0;
    }
    public org.apache.commons.math3.analysis.differentiation.SparseGradient tan()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        double $d0, $d1;
        java.util.Map $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double tan(double)>($d0);

        $r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d1 = $d0 * $d0;

        $d1 = 1.0 + $d1;

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,double,java.util.Map)>($d0, $d1, $r2);

        return $r1;
    }
    public volatile java.lang.Object tanh()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient tanh()>();

        return r0;
    }
    public org.apache.commons.math3.analysis.differentiation.SparseGradient tanh()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        double $d0, $d1;
        java.util.Map $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double tanh(double)>($d0);

        $r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d1 = $d0 * $d0;

        $d1 = 1.0 - $d1;

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,double,java.util.Map)>($d0, $d1, $r2);

        return $r1;
    }
    public transient double taylor(double[])
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0;
        double[] $r1;
        int $i0, i1;
        double $d0, d1, $d2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 := @parameter0: double[];

        d1 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        i1 = 0;

     label1:
        $i0 = lengthof $r1;

        if i1 >= $i0 goto label2;

        $d2 = $r1[i1];

        $d0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double getDerivative(int)>(i1);

        $d0 = $d2 * $d0;

        d1 = d1 + $d0;

        i1 = i1 + 1;

        goto label1;

     label2:
        return d1;
    }
    public org.apache.commons.math3.analysis.differentiation.SparseGradient toDegrees()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        java.util.Map $r2;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double toDegrees(double)>($d0);

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double toDegrees(double)>(1.0);

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,double,java.util.Map)>($d0, $d1, $r2);

        return $r1;
    }
    public org.apache.commons.math3.analysis.differentiation.SparseGradient toRadians()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        java.util.Map $r2;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double toRadians(double)>($d0);

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double toRadians(double)>(1.0);

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,double,java.util.Map)>($d0, $d1, $r2);

        return $r1;
    }
