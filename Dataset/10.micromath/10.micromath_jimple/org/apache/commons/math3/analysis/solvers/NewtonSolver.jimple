org.apache.commons.math3.analysis.solvers.NewtonSolver extends org.apache.commons.math3.analysis.solvers.AbstractDifferentiableUnivariateSolver
private static final double DEFAULT_ABSOLUTE_ACCURACY
    public void <init>()
    {
        org.apache.commons.math3.analysis.solvers.NewtonSolver r0;

        r0 := @this: org.apache.commons.math3.analysis.solvers.NewtonSolver;

        specialinvoke r0.<org.apache.commons.math3.analysis.solvers.NewtonSolver: void <init>(double)>(1.0E-6);

        return;
    }
    public void <init>(double)
    {
        org.apache.commons.math3.analysis.solvers.NewtonSolver r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.analysis.solvers.NewtonSolver;

        $d0 := @parameter0: double;

        specialinvoke r0.<org.apache.commons.math3.analysis.solvers.AbstractDifferentiableUnivariateSolver: void <init>(double)>($d0);

        return;
    }
    protected double doSolve() throws org.apache.commons.math3.exception.TooManyEvaluationsException
    {
        org.apache.commons.math3.analysis.solvers.NewtonSolver r0;
        double d0, $d1, $d2, $d3;
        byte $b0;

        r0 := @this: org.apache.commons.math3.analysis.solvers.NewtonSolver;

        $d1 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.NewtonSolver: double getStartValue()>();

        $d2 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.NewtonSolver: double getAbsoluteAccuracy()>();

     label1:
        d0 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.NewtonSolver: double computeObjectiveValue(double)>($d1);

        $d3 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.NewtonSolver: double computeDerivativeObjectiveValue(double)>($d1);

        d0 = d0 / $d3;

        d0 = $d1 - d0;

        $d1 = d0 - $d1;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d1);

        $b0 = $d1 cmpg $d2;

        if $b0 > 0 goto label2;

        return d0;

     label2:
        $d1 = d0;

        goto label1;
    }
    public double solve(int, org.apache.commons.math3.analysis.DifferentiableUnivariateFunction, double, double) throws org.apache.commons.math3.exception.TooManyEvaluationsException
    {
        org.apache.commons.math3.analysis.solvers.NewtonSolver r0;
        int $i0;
        org.apache.commons.math3.analysis.DifferentiableUnivariateFunction $r1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.analysis.solvers.NewtonSolver;

        $i0 := @parameter0: int;

        $r1 := @parameter1: org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;

        $d0 := @parameter2: double;

        $d1 := @parameter3: double;

        $d0 = staticinvoke <org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils: double midpoint(double,double)>($d0, $d1);

        $d0 = specialinvoke r0.<org.apache.commons.math3.analysis.solvers.AbstractDifferentiableUnivariateSolver: double solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double)>($i0, $r1, $d0);

        return $d0;
    }
    public volatile double solve(int, org.apache.commons.math3.analysis.UnivariateFunction, double, double) throws org.apache.commons.math3.exception.MathIllegalArgumentException, org.apache.commons.math3.exception.TooManyEvaluationsException
    {
        org.apache.commons.math3.analysis.solvers.NewtonSolver r0;
        int $i0;
        org.apache.commons.math3.analysis.UnivariateFunction $r1;
        double $d0, $d1;
        org.apache.commons.math3.analysis.DifferentiableUnivariateFunction $r2;

        r0 := @this: org.apache.commons.math3.analysis.solvers.NewtonSolver;

        $i0 := @parameter0: int;

        $r1 := @parameter1: org.apache.commons.math3.analysis.UnivariateFunction;

        $d0 := @parameter2: double;

        $d1 := @parameter3: double;

        $r2 = (org.apache.commons.math3.analysis.DifferentiableUnivariateFunction) $r1;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.NewtonSolver: double solve(int,org.apache.commons.math3.analysis.DifferentiableUnivariateFunction,double,double)>($i0, $r2, $d0, $d1);

        return $d0;
    }
