org.apache.commons.math3.analysis.function.Logit extends java.lang.Object implements org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction org.apache.commons.math3.analysis.DifferentiableUnivariateFunction
private final double hi
private final double lo
    public void <init>()
    {
        org.apache.commons.math3.analysis.function.Logit r0;

        r0 := @this: org.apache.commons.math3.analysis.function.Logit;

        specialinvoke r0.<org.apache.commons.math3.analysis.function.Logit: void <init>(double,double)>(0.0, 1.0);

        return;
    }
    public void <init>(double, double)
    {
        org.apache.commons.math3.analysis.function.Logit r0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.analysis.function.Logit;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.analysis.function.Logit: double lo> = $d0;

        r0.<org.apache.commons.math3.analysis.function.Logit: double hi> = $d1;

        return;
    }
    static double access$000(double, double, double) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        double $d0, $d1, $d2;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $d0 = staticinvoke <org.apache.commons.math3.analysis.function.Logit: double value(double,double,double)>($d0, $d1, $d2);

        return $d0;
    }
    private static double value(double, double, double) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        double $d0, $d1, $d2;
        byte $b0;
        org.apache.commons.math3.exception.OutOfRangeException $r0;
        java.lang.Double $r1, $r2, $r3;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $b0 = $d0 cmpg $d1;

        if $b0 < 0 goto label1;

        $b0 = $d0 cmpl $d2;

        if $b0 <= 0 goto label2;

     label1:
        $r0 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d2);

        specialinvoke $r0.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r1, $r2, $r3);

        throw $r0;

     label2:
        $d1 = $d0 - $d1;

        $d0 = $d2 - $d0;

        $d0 = $d1 / $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d0);

        return $d0;
    }
    public org.apache.commons.math3.analysis.UnivariateFunction derivative()
    {
        org.apache.commons.math3.analysis.function.Logit r0;
        org.apache.commons.math3.analysis.DifferentiableUnivariateFunction $r1;
        org.apache.commons.math3.analysis.UnivariateFunction $r2;

        r0 := @this: org.apache.commons.math3.analysis.function.Logit;

        $r1 = staticinvoke <org.apache.commons.math3.analysis.FunctionUtils: org.apache.commons.math3.analysis.DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction)>(r0);

        $r2 = interfaceinvoke $r1.<org.apache.commons.math3.analysis.DifferentiableUnivariateFunction: org.apache.commons.math3.analysis.UnivariateFunction derivative()>();

        return $r2;
    }
    public double value(double) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.analysis.function.Logit r0;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.analysis.function.Logit;

        $d0 := @parameter0: double;

        $d1 = r0.<org.apache.commons.math3.analysis.function.Logit: double lo>;

        $d2 = r0.<org.apache.commons.math3.analysis.function.Logit: double hi>;

        $d0 = staticinvoke <org.apache.commons.math3.analysis.function.Logit: double value(double,double,double)>($d0, $d1, $d2);

        return $d0;
    }
    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.analysis.function.Logit r0;
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure $r1;
        double[] r2;
        double d0, d1, $d2, $d3, $d4;
        byte $b0;
        java.lang.Double $r3, $r4, $r5;
        int $i1, $i2;
        boolean $z0;
        org.apache.commons.math3.exception.OutOfRangeException $r6;

        r0 := @this: org.apache.commons.math3.analysis.function.Logit;

        $r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        d0 = virtualinvoke $r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getValue()>();

        d1 = r0.<org.apache.commons.math3.analysis.function.Logit: double lo>;

        $b0 = d0 cmpg d1;

        if $b0 < 0 goto label1;

        d1 = r0.<org.apache.commons.math3.analysis.function.Logit: double hi>;

        $b0 = d0 cmpl d1;

        if $b0 <= 0 goto label2;

     label1:
        $r6 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        d0 = r0.<org.apache.commons.math3.analysis.function.Logit: double lo>;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        d0 = r0.<org.apache.commons.math3.analysis.function.Logit: double hi>;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        specialinvoke $r6.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r3, $r4, $r5);

        throw $r6;

     label2:
        $i1 = virtualinvoke $r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getOrder()>();

        $i1 = $i1 + 1;

        r2 = newarray (double)[$i1];

        d1 = r0.<org.apache.commons.math3.analysis.function.Logit: double lo>;

        d1 = d0 - d1;

        $d2 = r0.<org.apache.commons.math3.analysis.function.Logit: double hi>;

        $d2 = $d2 - d0;

        d1 = d1 / $d2;

        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(d1);

        r2[0] = d1;

        d1 = r2[0];

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d1);

        if $z0 == 0 goto label5;

        $i1 = lengthof r2;

        if $i1 <= 1 goto label3;

        d0 = (double) 9218868437227405312L;

        r2[1] = d0;

     label3:
        $i1 = 2;

     label4:
        $i2 = lengthof r2;

        if $i1 >= $i2 goto label7;

        $i2 = $i1 + -2;

        d0 = r2[$i2];

        r2[$i1] = d0;

        $i1 = $i1 + 1;

        goto label4;

     label5:
        d1 = r0.<org.apache.commons.math3.analysis.function.Logit: double lo>;

        d1 = d0 - d1;

        d1 = 1.0 / d1;

        $d2 = d1;

        $d3 = r0.<org.apache.commons.math3.analysis.function.Logit: double hi>;

        d0 = $d3 - d0;

        d0 = 1.0 / d0;

        $d3 = d0;

        $i1 = 1;

     label6:
        $i2 = lengthof r2;

        if $i1 >= $i2 goto label7;

        $d4 = $d2 + $d3;

        r2[$i1] = $d4;

        $i2 = neg $i1;

        $d4 = (double) $i2;

        $d4 = $d4 * d1;

        $d2 = $d2 * $d4;

        $d4 = (double) $i1;

        $d4 = $d4 * d0;

        $d3 = $d3 * $d4;

        $i1 = $i1 + 1;

        goto label6;

     label7:
        $r1 = virtualinvoke $r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure compose(double[])>(r2);

        return $r1;
    }
