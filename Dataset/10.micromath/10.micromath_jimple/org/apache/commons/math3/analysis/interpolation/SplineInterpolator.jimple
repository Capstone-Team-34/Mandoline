org.apache.commons.math3.analysis.interpolation.SplineInterpolator extends java.lang.Object implements org.apache.commons.math3.analysis.interpolation.UnivariateInterpolator
    public void <init>()
    {
        org.apache.commons.math3.analysis.interpolation.SplineInterpolator r0;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.SplineInterpolator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public volatile org.apache.commons.math3.analysis.UnivariateFunction interpolate(double[], double[]) throws org.apache.commons.math3.exception.MathIllegalArgumentException, org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.analysis.interpolation.SplineInterpolator r0;
        double[] $r1, $r2;
        org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction $r3;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.SplineInterpolator;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[];

        $r3 = virtualinvoke r0.<org.apache.commons.math3.analysis.interpolation.SplineInterpolator: org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction interpolate(double[],double[])>($r1, $r2);

        return $r3;
    }
    public org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction interpolate(double[], double[]) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.NonMonotonicSequenceException
    {
        org.apache.commons.math3.analysis.interpolation.SplineInterpolator r0;
        double[] $r1, $r2, r3, r4, r5, r6, r7, r9;
        int i0, $i1, $i2;
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] r8;
        org.apache.commons.math3.exception.util.LocalizedFormats $r10;
        java.lang.Integer $r11, $r12;
        double $d0, $d1, $d2, $d3, $d4;
        org.apache.commons.math3.exception.DimensionMismatchException $r13;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r14;
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction $r15;
        org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction $r16;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.SplineInterpolator;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[];

        i0 = lengthof $r1;

        $i1 = lengthof $r2;

        if i0 == $i1 goto label01;

        $r13 = new org.apache.commons.math3.exception.DimensionMismatchException;

        i0 = lengthof $r1;

        $i1 = lengthof $r2;

        specialinvoke $r13.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>(i0, $i1);

        throw $r13;

     label01:
        i0 = lengthof $r1;

        if i0 >= 3 goto label02;

        $r14 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r10 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NUMBER_OF_POINTS>;

        i0 = lengthof $r1;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        specialinvoke $r14.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r10, $r11, $r12, 1);

        throw $r14;

     label02:
        i0 = lengthof $r1;

        i0 = i0 + -1;

        staticinvoke <org.apache.commons.math3.util.MathArrays: void checkOrder(double[])>($r1);

        r5 = newarray (double)[i0];

        $i1 = 0;

     label03:
        if $i1 >= i0 goto label04;

        $i2 = $i1 + 1;

        $d0 = $r1[$i2];

        $d1 = $r1[$i1];

        $d0 = $d0 - $d1;

        r5[$i1] = $d0;

        $i1 = $i1 + 1;

        goto label03;

     label04:
        r7 = newarray (double)[i0];

        $i1 = i0 + 1;

        r9 = newarray (double)[$i1];

        $d0 = (double) 0L;

        r7[0] = $d0;

        $d0 = (double) 0L;

        r9[0] = $d0;

        $i1 = 1;

     label05:
        if $i1 >= i0 goto label06;

        $i2 = $i1 + 1;

        $d0 = $r1[$i2];

        $i2 = $i1 + -1;

        $d1 = $r1[$i2];

        $d0 = $d0 - $d1;

        $d0 = 2.0 * $d0;

        $i2 = $i1 + -1;

        $d1 = r5[$i2];

        $i2 = $i1 + -1;

        $d2 = r7[$i2];

        $d1 = $d1 * $d2;

        $d0 = $d0 - $d1;

        $d1 = r5[$i1];

        $d1 = $d1 / $d0;

        r7[$i1] = $d1;

        $i2 = $i1 + 1;

        $d1 = $r2[$i2];

        $i2 = $i1 + -1;

        $d2 = r5[$i2];

        $d1 = $d1 * $d2;

        $d2 = $r2[$i1];

        $i2 = $i1 + 1;

        $d3 = $r1[$i2];

        $i2 = $i1 + -1;

        $d4 = $r1[$i2];

        $d3 = $d3 - $d4;

        $d2 = $d2 * $d3;

        $d1 = $d1 - $d2;

        $i2 = $i1 + -1;

        $d2 = $r2[$i2];

        $d3 = r5[$i1];

        $d2 = $d2 * $d3;

        $d1 = $d1 + $d2;

        $d1 = 3.0 * $d1;

        $i2 = $i1 + -1;

        $d2 = r5[$i2];

        $d3 = r5[$i1];

        $d2 = $d2 * $d3;

        $d1 = $d1 / $d2;

        $i2 = $i1 + -1;

        $d2 = r5[$i2];

        $i2 = $i1 + -1;

        $d3 = r9[$i2];

        $d2 = $d2 * $d3;

        $d1 = $d1 - $d2;

        $d0 = $d1 / $d0;

        r9[$i1] = $d0;

        $i1 = $i1 + 1;

        goto label05;

     label06:
        r3 = newarray (double)[i0];

        $i1 = i0 + 1;

        r4 = newarray (double)[$i1];

        r6 = newarray (double)[i0];

        r9[i0] = 0.0;

        r4[i0] = 0.0;

        $i1 = i0 + -1;

     label07:
        if $i1 < 0 goto label08;

        $d0 = r9[$i1];

        $d1 = r7[$i1];

        $i2 = $i1 + 1;

        $d2 = r4[$i2];

        $d1 = $d1 * $d2;

        $d0 = $d0 - $d1;

        r4[$i1] = $d0;

        $i2 = $i1 + 1;

        $d0 = $r2[$i2];

        $d1 = $r2[$i1];

        $d0 = $d0 - $d1;

        $d1 = r5[$i1];

        $d0 = $d0 / $d1;

        $d1 = r5[$i1];

        $i2 = $i1 + 1;

        $d2 = r4[$i2];

        $d3 = r4[$i1];

        $d3 = 2.0 * $d3;

        $d2 = $d2 + $d3;

        $d1 = $d1 * $d2;

        $d1 = $d1 / 3.0;

        $d0 = $d0 - $d1;

        r3[$i1] = $d0;

        $i2 = $i1 + 1;

        $d0 = r4[$i2];

        $d1 = r4[$i1];

        $d0 = $d0 - $d1;

        $d1 = r5[$i1];

        $d1 = 3.0 * $d1;

        $d0 = $d0 / $d1;

        r6[$i1] = $d0;

        $i1 = $i1 + -1;

        goto label07;

     label08:
        r8 = newarray (org.apache.commons.math3.analysis.polynomials.PolynomialFunction)[i0];

        r5 = newarray (double)[4];

        $i1 = 0;

     label09:
        if $i1 >= i0 goto label10;

        $d0 = $r2[$i1];

        r5[0] = $d0;

        $d0 = r3[$i1];

        r5[1] = $d0;

        $d0 = r4[$i1];

        r5[2] = $d0;

        $d0 = r6[$i1];

        r5[3] = $d0;

        $r15 = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction;

        specialinvoke $r15.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: void <init>(double[])>(r5);

        r8[$i1] = $r15;

        $i1 = $i1 + 1;

        goto label09;

     label10:
        $r16 = new org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction;

        specialinvoke $r16.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: void <init>(double[],org.apache.commons.math3.analysis.polynomials.PolynomialFunction[])>($r1, r8);

        return $r16;
    }
