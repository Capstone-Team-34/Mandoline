org.apache.commons.math3.analysis.solvers.RiddersSolver extends org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver
private static final double DEFAULT_ABSOLUTE_ACCURACY
    public void <init>()
    {
        org.apache.commons.math3.analysis.solvers.RiddersSolver r0;

        r0 := @this: org.apache.commons.math3.analysis.solvers.RiddersSolver;

        specialinvoke r0.<org.apache.commons.math3.analysis.solvers.RiddersSolver: void <init>(double)>(1.0E-6);

        return;
    }
    public void <init>(double)
    {
        org.apache.commons.math3.analysis.solvers.RiddersSolver r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.analysis.solvers.RiddersSolver;

        $d0 := @parameter0: double;

        specialinvoke r0.<org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver: void <init>(double)>($d0);

        return;
    }
    public void <init>(double, double)
    {
        org.apache.commons.math3.analysis.solvers.RiddersSolver r0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.analysis.solvers.RiddersSolver;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver: void <init>(double,double)>($d0, $d1);

        return;
    }
    protected double doSolve() throws org.apache.commons.math3.exception.TooManyEvaluationsException, org.apache.commons.math3.exception.NoBracketingException
    {
        org.apache.commons.math3.analysis.solvers.RiddersSolver r0;
        double d0, d1, d2, $d3, $d4, d5, $d6, d7, d8, d9, d10, $d11, $d12, $d13;
        byte $b0;

        r0 := @this: org.apache.commons.math3.analysis.solvers.RiddersSolver;

        $d3 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.RiddersSolver: double getMin()>();

        $d4 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.RiddersSolver: double getMax()>();

        d5 = $d3;

        $d6 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.RiddersSolver: double computeObjectiveValue(double)>($d3);

        d7 = $d6;

        d8 = $d4;

        d2 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.RiddersSolver: double computeObjectiveValue(double)>($d4);

        d9 = d2;

        $b0 = $d6 cmpl 0.0;

        if $b0 != 0 goto label1;

        return $d3;

     label1:
        $b0 = d2 cmpl 0.0;

        if $b0 != 0 goto label2;

        return $d4;

     label2:
        virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.RiddersSolver: void verifyBracketing(double,double)>($d3, $d4);

        $d3 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.RiddersSolver: double getAbsoluteAccuracy()>();

        $d4 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.RiddersSolver: double getFunctionValueAccuracy()>();

        $d6 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.RiddersSolver: double getRelativeAccuracy()>();

        d10 = #Infinity;

     label3:
        d2 = d5 + d8;

        d2 = 0.5 * d2;

        $d11 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.RiddersSolver: double computeObjectiveValue(double)>(d2);

        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d11);

        $b0 = d1 cmpg $d4;

        if $b0 > 0 goto label4;

        return d2;

     label4:
        $d12 = d7 * d9;

        d1 = $d11 * $d11;

        d1 = $d12 / d1;

        d1 = 1.0 - d1;

        $d12 = staticinvoke <org.apache.commons.math3.util.FastMath: double signum(double)>(d9);

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double signum(double)>($d11);

        $d12 = $d12 * d0;

        d0 = d2 - d5;

        $d12 = $d12 * d0;

        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d1);

        d0 = $d12 / d1;

        d1 = d2 - d0;

        $d12 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.RiddersSolver: double computeObjectiveValue(double)>(d1);

        $d13 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d1);

        $d13 = $d13 * $d6;

        $d13 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>($d13, $d3);

        d10 = d1 - d10;

        d10 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d10);

        $b0 = d10 cmpg $d13;

        if $b0 <= 0 goto label9;

        d10 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d12);

        $b0 = d10 cmpg $d4;

        if $b0 <= 0 goto label9;

        $b0 = d0 cmpl 0.0;

        if $b0 <= 0 goto label7;

        d8 = staticinvoke <org.apache.commons.math3.util.FastMath: double signum(double)>(d7);

        d9 = staticinvoke <org.apache.commons.math3.util.FastMath: double signum(double)>($d12);

        d8 = d8 + d9;

        $b0 = d8 cmpl 0.0;

        if $b0 != 0 goto label6;

        d8 = d1;

        d9 = $d12;

     label5:
        d10 = d1;

        goto label3;

     label6:
        d5 = d1;

        d8 = d2;

        d7 = $d12;

        d9 = $d11;

        goto label5;

     label7:
        d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double signum(double)>(d9);

        d7 = staticinvoke <org.apache.commons.math3.util.FastMath: double signum(double)>($d12);

        d5 = d5 + d7;

        $b0 = d5 cmpl 0.0;

        if $b0 != 0 goto label8;

        d5 = d1;

        d7 = $d12;

        goto label5;

     label8:
        d5 = d2;

        d8 = d1;

        d7 = $d11;

        d9 = $d12;

        goto label5;

     label9:
        return d1;
    }
