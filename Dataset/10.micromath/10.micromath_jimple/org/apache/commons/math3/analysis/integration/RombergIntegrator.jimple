org.apache.commons.math3.analysis.integration.RombergIntegrator extends org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator
public static final int ROMBERG_MAX_ITERATIONS_COUNT
    public void <init>()
    {
        org.apache.commons.math3.analysis.integration.RombergIntegrator r0;

        r0 := @this: org.apache.commons.math3.analysis.integration.RombergIntegrator;

        specialinvoke r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: void <init>(int,int)>(3, 32);

        return;
    }
    public void <init>(double, double, int, int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.analysis.integration.RombergIntegrator r0;
        double $d0, $d1;
        int $i0, $i1;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r1;
        java.lang.Integer $r2, $r3;

        r0 := @this: org.apache.commons.math3.analysis.integration.RombergIntegrator;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        specialinvoke r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: void <init>(double,double,int,int)>($d0, $d1, $i0, $i1);

        if $i1 <= 32 goto label1;

        $r1 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(32);

        specialinvoke $r1.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r2, $r3, 0);

        throw $r1;

     label1:
        return;
    }
    public void <init>(int, int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.analysis.integration.RombergIntegrator r0;
        int $i0, $i1;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r1;
        java.lang.Integer $r2, $r3;

        r0 := @this: org.apache.commons.math3.analysis.integration.RombergIntegrator;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        specialinvoke r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: void <init>(int,int)>($i0, $i1);

        if $i1 <= 32 goto label1;

        $r1 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(32);

        specialinvoke $r1.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r2, $r3, 0);

        throw $r1;

     label1:
        return;
    }
    protected double doIntegrate() throws org.apache.commons.math3.exception.TooManyEvaluationsException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.analysis.integration.RombergIntegrator r0;
        int i0, i1, $i2;
        org.apache.commons.math3.analysis.integration.TrapezoidIntegrator r1;
        double d0, d1, d2, $d3, $d4;
        double[] r2, r3, r4;
        long $l3;
        byte $b4;

        r0 := @this: org.apache.commons.math3.analysis.integration.RombergIntegrator;

        i0 = virtualinvoke r0.<org.apache.commons.math3.analysis.integration.RombergIntegrator: int getMaximalIterationCount()>();

        i0 = i0 + 1;

        r3 = newarray (double)[i0];

        r4 = newarray (double)[i0];

        r1 = new org.apache.commons.math3.analysis.integration.TrapezoidIntegrator;

        specialinvoke r1.<org.apache.commons.math3.analysis.integration.TrapezoidIntegrator: void <init>()>();

        d1 = virtualinvoke r1.<org.apache.commons.math3.analysis.integration.TrapezoidIntegrator: double stage(org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator,int)>(r0, 0);

        r4[0] = d1;

        virtualinvoke r0.<org.apache.commons.math3.analysis.integration.RombergIntegrator: void incrementCount()>();

        d1 = r4[0];

     label1:
        i0 = virtualinvoke r0.<org.apache.commons.math3.analysis.integration.RombergIntegrator: int getIterations()>();

        r2 = r3;

        r3 = r4;

        r4 = r2;

        d2 = virtualinvoke r1.<org.apache.commons.math3.analysis.integration.TrapezoidIntegrator: double stage(org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator,int)>(r0, i0);

        r2[0] = d2;

        virtualinvoke r0.<org.apache.commons.math3.analysis.integration.RombergIntegrator: void incrementCount()>();

        i1 = 1;

     label2:
        if i1 > i0 goto label3;

        $i2 = i1 * 2;

        $l3 = 1L << $i2;

        $l3 = $l3 - 1L;

        d0 = (double) $l3;

        $i2 = i1 + -1;

        d2 = r2[$i2];

        $i2 = i1 + -1;

        $d3 = r3[$i2];

        $d3 = d2 - $d3;

        d0 = $d3 / d0;

        d2 = d0 + d2;

        r2[i1] = d2;

        i1 = i1 + 1;

        goto label2;

     label3:
        d2 = r2[i0];

        i1 = virtualinvoke r0.<org.apache.commons.math3.analysis.integration.RombergIntegrator: int getMinimalIterationCount()>();

        if i0 < i1 goto label4;

        d0 = d2 - d1;

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d0);

        $d3 = virtualinvoke r0.<org.apache.commons.math3.analysis.integration.RombergIntegrator: double getRelativeAccuracy()>();

        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d1);

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d2);

        d1 = d1 + $d4;

        d1 = $d3 * d1;

        d1 = d1 * 0.5;

        $b4 = d0 cmpg d1;

        if $b4 <= 0 goto label5;

        d1 = virtualinvoke r0.<org.apache.commons.math3.analysis.integration.RombergIntegrator: double getAbsoluteAccuracy()>();

        $b4 = d0 cmpg d1;

        if $b4 > 0 goto label4;

        return d2;

     label4:
        d1 = d2;

        goto label1;

     label5:
        return d2;
    }
