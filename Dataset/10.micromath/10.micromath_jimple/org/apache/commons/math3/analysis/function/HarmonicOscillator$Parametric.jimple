org.apache.commons.math3.analysis.function.HarmonicOscillator$Parametric extends java.lang.Object implements org.apache.commons.math3.analysis.ParametricUnivariateFunction
    public void <init>()
    {
        org.apache.commons.math3.analysis.function.HarmonicOscillator$Parametric r0;

        r0 := @this: org.apache.commons.math3.analysis.function.HarmonicOscillator$Parametric;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    private void validateParameters(double[]) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.analysis.function.HarmonicOscillator$Parametric r0;
        double[] $r1;
        int $i0;
        org.apache.commons.math3.exception.NullArgumentException $r2;
        org.apache.commons.math3.exception.DimensionMismatchException $r3;

        r0 := @this: org.apache.commons.math3.analysis.function.HarmonicOscillator$Parametric;

        $r1 := @parameter0: double[];

        if $r1 != null goto label1;

        $r2 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r2.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r2;

     label1:
        $i0 = lengthof $r1;

        if $i0 == 3 goto label2;

        $r3 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i0 = lengthof $r1;

        specialinvoke $r3.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i0, 3);

        throw $r3;

     label2:
        return;
    }
    public transient double[] gradient(double, double[]) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.analysis.function.HarmonicOscillator$Parametric r0;
        double $d0, d1, d2, d3;
        double[] $r1;

        r0 := @this: org.apache.commons.math3.analysis.function.HarmonicOscillator$Parametric;

        $d0 := @parameter0: double;

        $r1 := @parameter1: double[];

        specialinvoke r0.<org.apache.commons.math3.analysis.function.HarmonicOscillator$Parametric: void validateParameters(double[])>($r1);

        d1 = $r1[0];

        d2 = $r1[1];

        d3 = $r1[2];

        d2 = d2 * $d0;

        d2 = d2 + d3;

        d3 = staticinvoke <org.apache.commons.math3.analysis.function.HarmonicOscillator: double access$000(double,double)>(d2, 1.0);

        d1 = neg d1;

        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double sin(double)>(d2);

        d1 = d1 * d2;

        $d0 = d1 * $d0;

        $r1 = newarray (double)[3];

        $r1[0] = d3;

        $r1[1] = $d0;

        $r1[2] = d1;

        return $r1;
    }
    public transient double value(double, double[]) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.analysis.function.HarmonicOscillator$Parametric r0;
        double $d0, $d1;
        double[] $r1;

        r0 := @this: org.apache.commons.math3.analysis.function.HarmonicOscillator$Parametric;

        $d0 := @parameter0: double;

        $r1 := @parameter1: double[];

        specialinvoke r0.<org.apache.commons.math3.analysis.function.HarmonicOscillator$Parametric: void validateParameters(double[])>($r1);

        $d1 = $r1[1];

        $d0 = $d1 * $d0;

        $d1 = $r1[2];

        $d0 = $d0 + $d1;

        $d1 = $r1[0];

        $d0 = staticinvoke <org.apache.commons.math3.analysis.function.HarmonicOscillator: double access$000(double,double)>($d0, $d1);

        return $d0;
    }
