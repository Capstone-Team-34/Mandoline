org.apache.commons.math3.analysis.function.Gaussian extends java.lang.Object implements org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction org.apache.commons.math3.analysis.DifferentiableUnivariateFunction
private final double i2s2
private final double is
private final double mean
private final double norm
    public void <init>()
    {
        org.apache.commons.math3.analysis.function.Gaussian r0;

        r0 := @this: org.apache.commons.math3.analysis.function.Gaussian;

        specialinvoke r0.<org.apache.commons.math3.analysis.function.Gaussian: void <init>(double,double)>(0.0, 1.0);

        return;
    }
    public void <init>(double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.analysis.function.Gaussian r0;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.analysis.function.Gaussian;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(6.283185307179586);

        $d2 = $d2 * $d1;

        $d2 = 1.0 / $d2;

        specialinvoke r0.<org.apache.commons.math3.analysis.function.Gaussian: void <init>(double,double,double)>($d2, $d0, $d1);

        return;
    }
    public void <init>(double, double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.analysis.function.Gaussian r0;
        double $d0, $d1, $d2;
        java.lang.Double $r1;
        byte $b0;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r2;

        r0 := @this: org.apache.commons.math3.analysis.function.Gaussian;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $b0 = $d2 cmpg 0.0;

        if $b0 > 0 goto label1;

        $r2 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d2);

        specialinvoke $r2.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(java.lang.Number)>($r1);

        throw $r2;

     label1:
        r0.<org.apache.commons.math3.analysis.function.Gaussian: double norm> = $d0;

        r0.<org.apache.commons.math3.analysis.function.Gaussian: double mean> = $d1;

        $d0 = 1.0 / $d2;

        r0.<org.apache.commons.math3.analysis.function.Gaussian: double is> = $d0;

        $d0 = r0.<org.apache.commons.math3.analysis.function.Gaussian: double is>;

        $d0 = 0.5 * $d0;

        $d1 = r0.<org.apache.commons.math3.analysis.function.Gaussian: double is>;

        $d0 = $d0 * $d1;

        r0.<org.apache.commons.math3.analysis.function.Gaussian: double i2s2> = $d0;

        return;
    }
    static double access$000(double, double, double)
    {
        double $d0, $d1, $d2;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $d0 = staticinvoke <org.apache.commons.math3.analysis.function.Gaussian: double value(double,double,double)>($d0, $d1, $d2);

        return $d0;
    }
    private static double value(double, double, double)
    {
        double $d0, $d1, $d2, $d3;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $d3 = neg $d0;

        $d0 = $d3 * $d0;

        $d0 = $d0 * $d2;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d0);

        $d0 = $d0 * $d1;

        return $d0;
    }
    public org.apache.commons.math3.analysis.UnivariateFunction derivative()
    {
        org.apache.commons.math3.analysis.function.Gaussian r0;
        org.apache.commons.math3.analysis.DifferentiableUnivariateFunction $r1;
        org.apache.commons.math3.analysis.UnivariateFunction $r2;

        r0 := @this: org.apache.commons.math3.analysis.function.Gaussian;

        $r1 = staticinvoke <org.apache.commons.math3.analysis.FunctionUtils: org.apache.commons.math3.analysis.DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction)>(r0);

        $r2 = interfaceinvoke $r1.<org.apache.commons.math3.analysis.DifferentiableUnivariateFunction: org.apache.commons.math3.analysis.UnivariateFunction derivative()>();

        return $r2;
    }
    public double value(double)
    {
        org.apache.commons.math3.analysis.function.Gaussian r0;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.analysis.function.Gaussian;

        $d0 := @parameter0: double;

        $d1 = r0.<org.apache.commons.math3.analysis.function.Gaussian: double mean>;

        $d2 = $d0 - $d1;

        $d0 = r0.<org.apache.commons.math3.analysis.function.Gaussian: double norm>;

        $d1 = r0.<org.apache.commons.math3.analysis.function.Gaussian: double i2s2>;

        $d0 = staticinvoke <org.apache.commons.math3.analysis.function.Gaussian: double value(double,double,double)>($d2, $d0, $d1);

        return $d0;
    }
    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.analysis.function.Gaussian r0;
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure $r1;
        double[] r2, r3;
        double d0, d1, $d2, $d3, $d4, $d5;
        int $i0, $i2, $i3, $i4;
        byte $b1;

        r0 := @this: org.apache.commons.math3.analysis.function.Gaussian;

        $r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        d0 = r0.<org.apache.commons.math3.analysis.function.Gaussian: double is>;

        d1 = virtualinvoke $r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getValue()>();

        $d2 = r0.<org.apache.commons.math3.analysis.function.Gaussian: double mean>;

        d1 = d1 - $d2;

        d0 = d0 * d1;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getOrder()>();

        $i0 = $i0 + 1;

        r2 = newarray (double)[$i0];

        $i0 = lengthof r2;

        r3 = newarray (double)[$i0];

        d1 = (double) 4607182418800017408L;

        r3[0] = d1;

        d1 = d0 * d0;

        $d2 = r0.<org.apache.commons.math3.analysis.function.Gaussian: double norm>;

        $d3 = -0.5 * d1;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d3);

        $d2 = $d2 * $d3;

        $d3 = <org.apache.commons.math3.util.Precision: double SAFE_MIN>;

        $b1 = $d2 cmpg $d3;

        if $b1 > 0 goto label2;

        staticinvoke <java.util.Arrays: void fill(double[],double)>(r2, 0.0);

     label1:
        $r1 = virtualinvoke $r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure compose(double[])>(r2);

        return $r1;

     label2:
        r2[0] = $d2;

        $i0 = 1;

     label3:
        $i2 = lengthof r2;

        if $i0 >= $i2 goto label1;

        $d3 = 0.0;

        $i2 = $i0 + -1;

        $d4 = r3[$i2];

        $d4 = neg $d4;

        r3[$i0] = $d4;

        $i2 = $i0;

     label4:
        if $i2 < 0 goto label7;

        $d3 = $d3 * d1;

        $d4 = r3[$i2];

        $d3 = $d3 + $d4;

        if $i2 <= 2 goto label6;

        $i3 = $i2 + -2;

        $i4 = $i2 + -1;

        $d4 = (double) $i4;

        $i4 = $i2 + -1;

        $d5 = r3[$i4];

        $d4 = $d4 * $d5;

        $i4 = $i2 + -3;

        $d5 = r3[$i4];

        $d4 = $d4 - $d5;

        r3[$i3] = $d4;

     label5:
        $i2 = $i2 + -2;

        goto label4;

     label6:
        if $i2 != 2 goto label5;

        $d4 = r3[1];

        r3[0] = $d4;

        goto label5;

     label7:
        $i2 = $i0 & 1;

        if $i2 != 1 goto label8;

        $d3 = $d3 * d0;

     label8:
        $d4 = r0.<org.apache.commons.math3.analysis.function.Gaussian: double is>;

        $d2 = $d2 * $d4;

        $d3 = $d2 * $d3;

        r2[$i0] = $d3;

        $i0 = $i0 + 1;

        goto label3;
    }
