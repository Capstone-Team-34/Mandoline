org.apache.commons.math3.analysis.differentiation.JacobianFunction extends java.lang.Object implements org.apache.commons.math3.analysis.MultivariateMatrixFunction
private final org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction f
    public void <init>(org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction)
    {
        org.apache.commons.math3.analysis.differentiation.JacobianFunction r0;
        org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.JacobianFunction;

        $r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.analysis.differentiation.JacobianFunction: org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction f> = $r1;

        return;
    }
    public double[][] value(double[])
    {
        org.apache.commons.math3.analysis.differentiation.JacobianFunction r0;
        double[] $r1, $r9;
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] r2;
        int[] r3;
        int $i0, $i1, $i2;
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure $r4;
        double $d0;
        org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction $r5;
        java.lang.Class $r6;
        java.lang.Object $r7;
        double[][] r8;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.JacobianFunction;

        $r1 := @parameter0: double[];

        $i0 = lengthof $r1;

        r2 = newarray (org.apache.commons.math3.analysis.differentiation.DerivativeStructure)[$i0];

        $i0 = 0;

     label1:
        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label2;

        $r4 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $i1 = lengthof $r1;

        $d0 = $r1[$i0];

        specialinvoke $r4.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(int,int,int,double)>($i1, 1, $i0, $d0);

        r2[$i0] = $r4;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $r5 = r0.<org.apache.commons.math3.analysis.differentiation.JacobianFunction: org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction f>;

        r2 = interfaceinvoke $r5.<org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction: org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure[])>(r2);

        $i0 = lengthof r2;

        $i1 = lengthof $r1;

        r3 = newarray (int)[2];

        r3[0] = $i0;

        r3[1] = $i1;

        $r6 = <java.lang.Double: java.lang.Class TYPE>;

        $r7 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r6, r3);

        r8 = (double[][]) $r7;

        $i0 = lengthof $r1;

        r3 = newarray (int)[$i0];

        $i0 = 0;

     label3:
        $i1 = lengthof r2;

        if $i0 >= $i1 goto label6;

        $i1 = 0;

     label4:
        $i2 = lengthof $r1;

        if $i1 >= $i2 goto label5;

        r3[$i1] = 1;

        $r9 = r8[$i0];

        $r4 = r2[$i0];

        $d0 = virtualinvoke $r4.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getPartialDerivative(int[])>(r3);

        $r9[$i1] = $d0;

        r3[$i1] = 0;

        $i1 = $i1 + 1;

        goto label4;

     label5:
        $i0 = $i0 + 1;

        goto label3;

     label6:
        return r8;
    }
