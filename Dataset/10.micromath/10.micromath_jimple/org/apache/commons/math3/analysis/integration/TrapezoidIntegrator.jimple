org.apache.commons.math3.analysis.integration.TrapezoidIntegrator extends org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator
public static final int TRAPEZOID_MAX_ITERATIONS_COUNT
private double s
    public void <init>()
    {
        org.apache.commons.math3.analysis.integration.TrapezoidIntegrator r0;

        r0 := @this: org.apache.commons.math3.analysis.integration.TrapezoidIntegrator;

        specialinvoke r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: void <init>(int,int)>(3, 64);

        return;
    }
    public void <init>(double, double, int, int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.analysis.integration.TrapezoidIntegrator r0;
        double $d0, $d1;
        int $i0, $i1;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r1;
        java.lang.Integer $r2, $r3;

        r0 := @this: org.apache.commons.math3.analysis.integration.TrapezoidIntegrator;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        specialinvoke r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: void <init>(double,double,int,int)>($d0, $d1, $i0, $i1);

        if $i1 <= 64 goto label1;

        $r1 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(64);

        specialinvoke $r1.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r2, $r3, 0);

        throw $r1;

     label1:
        return;
    }
    public void <init>(int, int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.analysis.integration.TrapezoidIntegrator r0;
        int $i0, $i1;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r1;
        java.lang.Integer $r2, $r3;

        r0 := @this: org.apache.commons.math3.analysis.integration.TrapezoidIntegrator;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        specialinvoke r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: void <init>(int,int)>($i0, $i1);

        if $i1 <= 64 goto label1;

        $r1 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(64);

        specialinvoke $r1.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r2, $r3, 0);

        throw $r1;

     label1:
        return;
    }
    protected double doIntegrate() throws org.apache.commons.math3.exception.MathIllegalArgumentException, org.apache.commons.math3.exception.TooManyEvaluationsException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.analysis.integration.TrapezoidIntegrator r0;
        double d0, $d1, d2, $d3, $d4;
        int $i0, $i1;
        byte $b2;

        r0 := @this: org.apache.commons.math3.analysis.integration.TrapezoidIntegrator;

        d2 = virtualinvoke r0.<org.apache.commons.math3.analysis.integration.TrapezoidIntegrator: double stage(org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator,int)>(r0, 0);

        virtualinvoke r0.<org.apache.commons.math3.analysis.integration.TrapezoidIntegrator: void incrementCount()>();

     label1:
        $i0 = virtualinvoke r0.<org.apache.commons.math3.analysis.integration.TrapezoidIntegrator: int getIterations()>();

        $d1 = virtualinvoke r0.<org.apache.commons.math3.analysis.integration.TrapezoidIntegrator: double stage(org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator,int)>(r0, $i0);

        $i1 = virtualinvoke r0.<org.apache.commons.math3.analysis.integration.TrapezoidIntegrator: int getMinimalIterationCount()>();

        if $i0 < $i1 goto label2;

        $d3 = $d1 - d2;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d3);

        d0 = virtualinvoke r0.<org.apache.commons.math3.analysis.integration.TrapezoidIntegrator: double getRelativeAccuracy()>();

        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d2);

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d1);

        d2 = d2 + $d4;

        d0 = d0 * d2;

        d0 = d0 * 0.5;

        $b2 = $d3 cmpg d0;

        if $b2 <= 0 goto label3;

        d0 = virtualinvoke r0.<org.apache.commons.math3.analysis.integration.TrapezoidIntegrator: double getAbsoluteAccuracy()>();

        $b2 = $d3 cmpg d0;

        if $b2 > 0 goto label2;

        return $d1;

     label2:
        d2 = $d1;

        virtualinvoke r0.<org.apache.commons.math3.analysis.integration.TrapezoidIntegrator: void incrementCount()>();

        goto label1;

     label3:
        return $d1;
    }
    double stage(org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator, int) throws org.apache.commons.math3.exception.TooManyEvaluationsException
    {
        org.apache.commons.math3.analysis.integration.TrapezoidIntegrator r0;
        org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator $r1;
        int $i0;
        long l1, l2;
        double d0, $d1, $d2, $d3;
        byte $b3;

        r0 := @this: org.apache.commons.math3.analysis.integration.TrapezoidIntegrator;

        $r1 := @parameter0: org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator;

        $i0 := @parameter1: int;

        if $i0 != 0 goto label1;

        d0 = virtualinvoke $r1.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: double getMax()>();

        $d1 = virtualinvoke $r1.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: double getMin()>();

        $d2 = d0 - $d1;

        $d2 = 0.5 * $d2;

        $d1 = virtualinvoke $r1.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: double computeObjectiveValue(double)>($d1);

        d0 = virtualinvoke $r1.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: double computeObjectiveValue(double)>(d0);

        d0 = $d1 + d0;

        $d2 = $d2 * d0;

        r0.<org.apache.commons.math3.analysis.integration.TrapezoidIntegrator: double s> = $d2;

        $d2 = r0.<org.apache.commons.math3.analysis.integration.TrapezoidIntegrator: double s>;

        return $d2;

     label1:
        $i0 = $i0 + -1;

        l1 = 1L << $i0;

        $d2 = 0.0;

        d0 = virtualinvoke $r1.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: double getMax()>();

        $d1 = virtualinvoke $r1.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: double getMin()>();

        d0 = d0 - $d1;

        $d3 = (double) l1;

        d0 = d0 / $d3;

        $d3 = 0.5 * d0;

        $d1 = $d1 + $d3;

        l2 = 0L;

     label2:
        $b3 = l2 cmp l1;

        if $b3 >= 0 goto label3;

        $d3 = virtualinvoke $r1.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: double computeObjectiveValue(double)>($d1);

        $d2 = $d2 + $d3;

        $d1 = $d1 + d0;

        l2 = l2 + 1L;

        goto label2;

     label3:
        $d1 = r0.<org.apache.commons.math3.analysis.integration.TrapezoidIntegrator: double s>;

        $d2 = $d2 * d0;

        $d2 = $d1 + $d2;

        $d2 = 0.5 * $d2;

        r0.<org.apache.commons.math3.analysis.integration.TrapezoidIntegrator: double s> = $d2;

        $d2 = r0.<org.apache.commons.math3.analysis.integration.TrapezoidIntegrator: double s>;

        return $d2;
    }
