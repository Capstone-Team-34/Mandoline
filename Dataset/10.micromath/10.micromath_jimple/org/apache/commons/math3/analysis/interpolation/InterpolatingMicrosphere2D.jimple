org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere2D extends org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere
private static final int DIMENSION
    public void <init>(int, double, double, double)
    {
        org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere2D r0;
        int $i0, i1;
        double $d0, $d1, $d2;
        double[] $r1;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere2D;

        $i0 := @parameter0: int;

        $d0 := @parameter1: double;

        $d1 := @parameter2: double;

        $d2 := @parameter3: double;

        specialinvoke r0.<org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere: void <init>(int,int,double,double,double)>(2, $i0, $d0, $d1, $d2);

        i1 = 0;

     label1:
        if i1 >= $i0 goto label2;

        $d0 = (double) i1;

        $d0 = $d0 * 6.283185307179586;

        $d1 = (double) $i0;

        $d0 = $d0 / $d1;

        $r1 = newarray (double)[2];

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double cos(double)>($d0);

        $r1[0] = $d1;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sin(double)>($d0);

        $r1[1] = $d0;

        virtualinvoke r0.<org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere2D: void add(double[],boolean)>($r1, 0);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
    protected void <init>(org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere2D)
    {
        org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere2D r0, $r1;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere2D;

        $r1 := @parameter0: org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere2D;

        specialinvoke r0.<org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere: void <init>(org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere)>($r1);

        return;
    }
    public org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere2D copy()
    {
        org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere2D r0, $r1;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere2D;

        $r1 = new org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere2D;

        specialinvoke $r1.<org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere2D: void <init>(org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere2D)>(r0);

        return $r1;
    }
    public volatile org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere copy()
    {
        org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere2D r0;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere2D;

        r0 = virtualinvoke r0.<org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere2D: org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere2D copy()>();

        return r0;
    }
