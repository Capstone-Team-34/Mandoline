org.apache.commons.math3.analysis.solvers.MullerSolver extends org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver
private static final double DEFAULT_ABSOLUTE_ACCURACY
    public void <init>()
    {
        org.apache.commons.math3.analysis.solvers.MullerSolver r0;

        r0 := @this: org.apache.commons.math3.analysis.solvers.MullerSolver;

        specialinvoke r0.<org.apache.commons.math3.analysis.solvers.MullerSolver: void <init>(double)>(1.0E-6);

        return;
    }
    public void <init>(double)
    {
        org.apache.commons.math3.analysis.solvers.MullerSolver r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.analysis.solvers.MullerSolver;

        $d0 := @parameter0: double;

        specialinvoke r0.<org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver: void <init>(double)>($d0);

        return;
    }
    public void <init>(double, double)
    {
        org.apache.commons.math3.analysis.solvers.MullerSolver r0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.analysis.solvers.MullerSolver;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver: void <init>(double,double)>($d0, $d1);

        return;
    }
    private double solve(double, double, double, double) throws org.apache.commons.math3.exception.TooManyEvaluationsException
    {
        org.apache.commons.math3.analysis.solvers.MullerSolver r0;
        double $d0, $d1, $d2, $d3, d4, d5, d6, $d7, $d8, $d9, d10, d11, d12, $d13;
        boolean $z0;
        byte $b0;

        r0 := @this: org.apache.commons.math3.analysis.solvers.MullerSolver;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $d3 := @parameter3: double;

        $d7 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.MullerSolver: double getRelativeAccuracy()>();

        $d8 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.MullerSolver: double getAbsoluteAccuracy()>();

        $d9 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.MullerSolver: double getFunctionValueAccuracy()>();

        d10 = $d0;

        d11 = $d1;

        $d0 = $d0 + $d1;

        $d0 = 0.5 * $d0;

        $d1 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.MullerSolver: double computeObjectiveValue(double)>($d0);

        d12 = #Infinity;

     label01:
        d5 = $d1 - $d2;

        d4 = $d0 - d10;

        d5 = d5 / d4;

        d4 = $d3 - $d1;

        d6 = d11 - $d0;

        d4 = d4 / d6;

        d4 = d4 - d5;

        d6 = d11 - d10;

        d4 = d4 / d6;

        d6 = $d0 - d10;

        d6 = d6 * d4;

        d5 = d5 + d6;

        d6 = d5 * d5;

        $d13 = 4.0 * $d1;

        d4 = $d13 * d4;

        d6 = d6 - d4;

        d4 = -2.0 * $d1;

        $d13 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d6);

        $d13 = $d13 + d5;

        d4 = d4 / $d13;

        d4 = $d0 + d4;

        $d13 = -2.0 * $d1;

        d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d6);

        d5 = d5 - d6;

        d5 = $d13 / d5;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.MullerSolver: boolean isSequence(double,double,double)>(d10, d4, d11);

        if $z0 == 0 goto label03;

        d5 = d4;

     label02:
        d4 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.MullerSolver: double computeObjectiveValue(double)>(d5);

        d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d5);

        d6 = d6 * $d7;

        d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>(d6, $d8);

        d12 = d5 - d12;

        d12 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d12);

        $b0 = d12 cmpg d6;

        if $b0 <= 0 goto label21;

        d12 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d4);

        $b0 = d12 cmpg $d9;

        if $b0 > 0 goto label04;

        return d5;

     label03:
        d5 = $d0 + d5;

        goto label02;

     label04:
        $b0 = d5 cmpg $d0;

        if $b0 >= 0 goto label05;

        d12 = $d0 - d10;

        d6 = d11 - d10;

        d6 = 0.95 * d6;

        $b0 = d12 cmpl d6;

        if $b0 > 0 goto label07;

     label05:
        $b0 = d5 cmpl $d0;

        if $b0 <= 0 goto label06;

        d12 = d11 - $d0;

        d6 = d11 - d10;

        d6 = 0.95 * d6;

        $b0 = d12 cmpl d6;

        if $b0 > 0 goto label07;

     label06:
        $b0 = d5 cmpl $d0;

        if $b0 != 0 goto label13;

     label07:
        $z0 = 1;

     label08:
        if $z0 != 0 goto label18;

        $b0 = d5 cmpg $d0;

        if $b0 >= 0 goto label14;

     label09:
        $b0 = d5 cmpg $d0;

        if $b0 >= 0 goto label15;

     label10:
        $b0 = d5 cmpl $d0;

        if $b0 <= 0 goto label16;

     label11:
        $b0 = d5 cmpl $d0;

        if $b0 <= 0 goto label17;

     label12:
        $d0 = d5;

        $d1 = d4;

        d12 = d5;

        goto label01;

     label13:
        $z0 = 0;

        goto label08;

     label14:
        d10 = $d0;

        goto label09;

     label15:
        $d2 = $d1;

        goto label10;

     label16:
        d11 = $d0;

        goto label11;

     label17:
        $d3 = $d1;

        goto label12;

     label18:
        $d0 = d10 + d11;

        $d0 = 0.5 * $d0;

        $d1 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.MullerSolver: double computeObjectiveValue(double)>($d0);

        d12 = staticinvoke <org.apache.commons.math3.util.FastMath: double signum(double)>($d2);

        d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double signum(double)>($d1);

        d12 = d12 + d5;

        $b0 = d12 cmpl 0.0;

        if $b0 != 0 goto label20;

        d11 = $d0;

        $d3 = $d1;

     label19:
        $d0 = d10 + d11;

        $d0 = 0.5 * $d0;

        $d1 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.MullerSolver: double computeObjectiveValue(double)>($d0);

        d12 = #Infinity;

        goto label01;

     label20:
        d10 = $d0;

        $d2 = $d1;

        goto label19;

     label21:
        return d5;
    }
    protected double doSolve() throws org.apache.commons.math3.exception.TooManyEvaluationsException, org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.exception.NoBracketingException
    {
        org.apache.commons.math3.analysis.solvers.MullerSolver r0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        byte $b0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.analysis.solvers.MullerSolver;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.MullerSolver: double getMin()>();

        $d1 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.MullerSolver: double getMax()>();

        $d2 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.MullerSolver: double getStartValue()>();

        $d3 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.MullerSolver: double getFunctionValueAccuracy()>();

        virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.MullerSolver: void verifySequence(double,double,double)>($d0, $d2, $d1);

        $d4 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.MullerSolver: double computeObjectiveValue(double)>($d0);

        $d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d4);

        $b0 = $d5 cmpg $d3;

        if $b0 >= 0 goto label1;

        return $d0;

     label1:
        $d5 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.MullerSolver: double computeObjectiveValue(double)>($d1);

        $d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d5);

        $b0 = $d6 cmpg $d3;

        if $b0 >= 0 goto label2;

        return $d1;

     label2:
        $d6 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.MullerSolver: double computeObjectiveValue(double)>($d2);

        $d7 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d6);

        $b0 = $d7 cmpg $d3;

        if $b0 >= 0 goto label3;

        return $d2;

     label3:
        virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.MullerSolver: void verifyBracketing(double,double)>($d0, $d1);

        $z0 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.MullerSolver: boolean isBracketing(double,double)>($d0, $d2);

        if $z0 == 0 goto label4;

        $d0 = specialinvoke r0.<org.apache.commons.math3.analysis.solvers.MullerSolver: double solve(double,double,double,double)>($d0, $d2, $d4, $d6);

        return $d0;

     label4:
        $d0 = specialinvoke r0.<org.apache.commons.math3.analysis.solvers.MullerSolver: double solve(double,double,double,double)>($d2, $d1, $d6, $d5);

        return $d0;
    }
