org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolator extends java.lang.Object implements org.apache.commons.math3.analysis.interpolation.UnivariateInterpolator java.io.Serializable
private static final long serialVersionUID
    public void <init>()
    {
        org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolator r0;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    protected static double[] computeDividedDifference(double[], double[]) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.NonMonotonicSequenceException
    {
        double[] $r0, $r1, r3;
        double d0, $d1, $d2;
        int i0, i1, i2, $i3;
        java.lang.Object $r2;

        $r0 := @parameter0: double[];

        $r1 := @parameter1: double[];

        staticinvoke <org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: boolean verifyInterpolationArray(double[],double[],boolean)>($r0, $r1, 1);

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        r3 = (double[]) $r2;

        i0 = lengthof $r0;

        $r1 = newarray (double)[i0];

        d0 = r3[0];

        $r1[0] = d0;

        i1 = 1;

     label1:
        if i1 >= i0 goto label4;

        i2 = 0;

     label2:
        $i3 = i0 - i1;

        if i2 >= $i3 goto label3;

        $i3 = i2 + i1;

        d0 = $r0[$i3];

        $d1 = $r0[i2];

        d0 = d0 - $d1;

        $i3 = i2 + 1;

        $d1 = r3[$i3];

        $d2 = r3[i2];

        $d1 = $d1 - $d2;

        d0 = $d1 / d0;

        r3[i2] = d0;

        i2 = i2 + 1;

        goto label2;

     label3:
        d0 = r3[0];

        $r1[i1] = d0;

        i1 = i1 + 1;

        goto label1;

     label4:
        return $r1;
    }
    public volatile org.apache.commons.math3.analysis.UnivariateFunction interpolate(double[], double[]) throws org.apache.commons.math3.exception.MathIllegalArgumentException, org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolator r0;
        double[] $r1, $r2;
        org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm $r3;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolator;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[];

        $r3 = virtualinvoke r0.<org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolator: org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm interpolate(double[],double[])>($r1, $r2);

        return $r3;
    }
    public org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm interpolate(double[], double[]) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.NonMonotonicSequenceException
    {
        org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolator r0;
        double[] $r1, $r2, r3;
        int $i0;
        org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm $r4;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolator;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[];

        staticinvoke <org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: boolean verifyInterpolationArray(double[],double[],boolean)>($r1, $r2, 1);

        $i0 = lengthof $r1;

        $i0 = $i0 + -1;

        r3 = newarray (double)[$i0];

        $i0 = lengthof r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, r3, 0, $i0);

        $r1 = staticinvoke <org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolator: double[] computeDividedDifference(double[],double[])>($r1, $r2);

        $r4 = new org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm;

        specialinvoke $r4.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm: void <init>(double[],double[])>($r1, r3);

        return $r4;
    }
