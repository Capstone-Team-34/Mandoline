org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator extends java.lang.Object implements org.apache.commons.math3.analysis.integration.UnivariateIntegrator
public static final double DEFAULT_ABSOLUTE_ACCURACY
public static final int DEFAULT_MAX_ITERATIONS_COUNT
public static final int DEFAULT_MIN_ITERATIONS_COUNT
public static final double DEFAULT_RELATIVE_ACCURACY
private final double absoluteAccuracy
private org.apache.commons.math3.util.IntegerSequence$Incrementor count
private org.apache.commons.math3.util.IntegerSequence$Incrementor evaluations
private org.apache.commons.math3.analysis.UnivariateFunction function
protected org.apache.commons.math3.util.Incrementor iterations
private double max
private double min
private final int minimalIterationCount
private final double relativeAccuracy
    protected void <init>(double, double)
    {
        org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator r0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: void <init>(double,double,int,int)>($d0, $d1, 3, 2147483647);

        return;
    }
    protected void <init>(double, double, int, int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator r0;
        double $d0, $d1;
        int $i0, $i1;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r1;
        java.lang.Integer $r2, $r4;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r3;
        org.apache.commons.math3.util.IntegerSequence$Incrementor $r5;
        org.apache.commons.math3.util.Incrementor $r6;

        r0 := @this: org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: double relativeAccuracy> = $d0;

        r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: double absoluteAccuracy> = $d1;

        if $i0 > 0 goto label1;

        $r1 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r1.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(java.lang.Number)>($r2);

        throw $r1;

     label1:
        if $i1 > $i0 goto label2;

        $r3 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r3.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r2, $r4, 0);

        throw $r3;

     label2:
        r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: int minimalIterationCount> = $i0;

        $r5 = staticinvoke <org.apache.commons.math3.util.IntegerSequence$Incrementor: org.apache.commons.math3.util.IntegerSequence$Incrementor create()>();

        $r5 = virtualinvoke $r5.<org.apache.commons.math3.util.IntegerSequence$Incrementor: org.apache.commons.math3.util.IntegerSequence$Incrementor withMaximalCount(int)>($i1);

        r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: org.apache.commons.math3.util.IntegerSequence$Incrementor count> = $r5;

        $r5 = r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: org.apache.commons.math3.util.IntegerSequence$Incrementor count>;

        $r6 = staticinvoke <org.apache.commons.math3.util.Incrementor: org.apache.commons.math3.util.Incrementor wrap(org.apache.commons.math3.util.IntegerSequence$Incrementor)>($r5);

        r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: org.apache.commons.math3.util.Incrementor iterations> = $r6;

        $r5 = staticinvoke <org.apache.commons.math3.util.IntegerSequence$Incrementor: org.apache.commons.math3.util.IntegerSequence$Incrementor create()>();

        r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: org.apache.commons.math3.util.IntegerSequence$Incrementor evaluations> = $r5;

        return;
    }
    protected void <init>(int, int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator r0;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        specialinvoke r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: void <init>(double,double,int,int)>(1.0E-6, 1.0E-15, $i0, $i1);

        return;
    }
    protected double computeObjectiveValue(double) throws org.apache.commons.math3.exception.TooManyEvaluationsException
    {
        org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator r0;
        double $d0;
        org.apache.commons.math3.exception.MaxCountExceededException r1;
        org.apache.commons.math3.util.IntegerSequence$Incrementor $r2;
        org.apache.commons.math3.analysis.UnivariateFunction $r3;
        org.apache.commons.math3.exception.TooManyEvaluationsException $r4;
        java.lang.Number $r5;

        r0 := @this: org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator;

        $d0 := @parameter0: double;

        $r2 = r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: org.apache.commons.math3.util.IntegerSequence$Incrementor evaluations>;

     label1:
        virtualinvoke $r2.<org.apache.commons.math3.util.IntegerSequence$Incrementor: void increment()>();

     label2:
        $r3 = r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: org.apache.commons.math3.analysis.UnivariateFunction function>;

        $d0 = interfaceinvoke $r3.<org.apache.commons.math3.analysis.UnivariateFunction: double value(double)>($d0);

        return $d0;

     label3:
        r1 := @caughtexception;

        $r4 = new org.apache.commons.math3.exception.TooManyEvaluationsException;

        $r5 = virtualinvoke r1.<org.apache.commons.math3.exception.MaxCountExceededException: java.lang.Number getMax()>();

        specialinvoke $r4.<org.apache.commons.math3.exception.TooManyEvaluationsException: void <init>(java.lang.Number)>($r5);

        throw $r4;

        catch org.apache.commons.math3.exception.MaxCountExceededException from label1 to label2 with label3;
    }
protected abstract double doIntegrate() throws org.apache.commons.math3.exception.TooManyEvaluationsException, org.apache.commons.math3.exception.MaxCountExceededException { 
// no body
} 
    public double getAbsoluteAccuracy()
    {
        org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator r0;
        double d0;

        r0 := @this: org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator;

        d0 = r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: double absoluteAccuracy>;

        return d0;
    }
    public int getEvaluations()
    {
        org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator r0;
        int $i0;
        org.apache.commons.math3.util.IntegerSequence$Incrementor $r1;

        r0 := @this: org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator;

        $r1 = r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: org.apache.commons.math3.util.IntegerSequence$Incrementor evaluations>;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.util.IntegerSequence$Incrementor: int getCount()>();

        return $i0;
    }
    public int getIterations()
    {
        org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator r0;
        int $i0;
        org.apache.commons.math3.util.IntegerSequence$Incrementor $r1;

        r0 := @this: org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator;

        $r1 = r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: org.apache.commons.math3.util.IntegerSequence$Incrementor count>;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.util.IntegerSequence$Incrementor: int getCount()>();

        return $i0;
    }
    protected double getMax()
    {
        org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator r0;
        double d0;

        r0 := @this: org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator;

        d0 = r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: double max>;

        return d0;
    }
    public int getMaximalIterationCount()
    {
        org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator r0;
        int $i0;
        org.apache.commons.math3.util.IntegerSequence$Incrementor $r1;

        r0 := @this: org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator;

        $r1 = r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: org.apache.commons.math3.util.IntegerSequence$Incrementor count>;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.util.IntegerSequence$Incrementor: int getMaximalCount()>();

        return $i0;
    }
    protected double getMin()
    {
        org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator r0;
        double d0;

        r0 := @this: org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator;

        d0 = r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: double min>;

        return d0;
    }
    public int getMinimalIterationCount()
    {
        org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator r0;
        int i0;

        r0 := @this: org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator;

        i0 = r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: int minimalIterationCount>;

        return i0;
    }
    public double getRelativeAccuracy()
    {
        org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator r0;
        double d0;

        r0 := @this: org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator;

        d0 = r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: double relativeAccuracy>;

        return d0;
    }
    protected void incrementCount() throws org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator r0;
        org.apache.commons.math3.util.IntegerSequence$Incrementor $r1;

        r0 := @this: org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator;

        $r1 = r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: org.apache.commons.math3.util.IntegerSequence$Incrementor count>;

        virtualinvoke $r1.<org.apache.commons.math3.util.IntegerSequence$Incrementor: void increment()>();

        return;
    }
    public double integrate(int, org.apache.commons.math3.analysis.UnivariateFunction, double, double) throws org.apache.commons.math3.exception.TooManyEvaluationsException, org.apache.commons.math3.exception.MaxCountExceededException, org.apache.commons.math3.exception.MathIllegalArgumentException, org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator r0;
        int $i0;
        org.apache.commons.math3.analysis.UnivariateFunction $r1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator;

        $i0 := @parameter0: int;

        $r1 := @parameter1: org.apache.commons.math3.analysis.UnivariateFunction;

        $d0 := @parameter2: double;

        $d1 := @parameter3: double;

        virtualinvoke r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: void setup(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)>($i0, $r1, $d0, $d1);

        $d0 = virtualinvoke r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: double doIntegrate()>();

        return $d0;
    }
    protected void setup(int, org.apache.commons.math3.analysis.UnivariateFunction, double, double) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator r0;
        int $i0;
        org.apache.commons.math3.analysis.UnivariateFunction $r1;
        double $d0, $d1;
        org.apache.commons.math3.util.IntegerSequence$Incrementor $r2;

        r0 := @this: org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator;

        $i0 := @parameter0: int;

        $r1 := @parameter1: org.apache.commons.math3.analysis.UnivariateFunction;

        $d0 := @parameter2: double;

        $d1 := @parameter3: double;

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>($r1);

        staticinvoke <org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils: void verifyInterval(double,double)>($d0, $d1);

        r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: double min> = $d0;

        r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: double max> = $d1;

        r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: org.apache.commons.math3.analysis.UnivariateFunction function> = $r1;

        $r2 = r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: org.apache.commons.math3.util.IntegerSequence$Incrementor evaluations>;

        $r2 = virtualinvoke $r2.<org.apache.commons.math3.util.IntegerSequence$Incrementor: org.apache.commons.math3.util.IntegerSequence$Incrementor withMaximalCount(int)>($i0);

        $r2 = virtualinvoke $r2.<org.apache.commons.math3.util.IntegerSequence$Incrementor: org.apache.commons.math3.util.IntegerSequence$Incrementor withStart(int)>(0);

        r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: org.apache.commons.math3.util.IntegerSequence$Incrementor evaluations> = $r2;

        $r2 = r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: org.apache.commons.math3.util.IntegerSequence$Incrementor count>;

        $r2 = virtualinvoke $r2.<org.apache.commons.math3.util.IntegerSequence$Incrementor: org.apache.commons.math3.util.IntegerSequence$Incrementor withStart(int)>(0);

        r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: org.apache.commons.math3.util.IntegerSequence$Incrementor count> = $r2;

        return;
    }
