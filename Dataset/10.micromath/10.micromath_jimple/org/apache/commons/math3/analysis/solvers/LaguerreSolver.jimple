org.apache.commons.math3.analysis.solvers.LaguerreSolver extends org.apache.commons.math3.analysis.solvers.AbstractPolynomialSolver
private static final double DEFAULT_ABSOLUTE_ACCURACY
private final org.apache.commons.math3.analysis.solvers.LaguerreSolver$ComplexSolver complexSolver
    public void <init>()
    {
        org.apache.commons.math3.analysis.solvers.LaguerreSolver r0;

        r0 := @this: org.apache.commons.math3.analysis.solvers.LaguerreSolver;

        specialinvoke r0.<org.apache.commons.math3.analysis.solvers.LaguerreSolver: void <init>(double)>(1.0E-6);

        return;
    }
    public void <init>(double)
    {
        org.apache.commons.math3.analysis.solvers.LaguerreSolver r0;
        double $d0;
        org.apache.commons.math3.analysis.solvers.LaguerreSolver$ComplexSolver $r1;

        r0 := @this: org.apache.commons.math3.analysis.solvers.LaguerreSolver;

        $d0 := @parameter0: double;

        specialinvoke r0.<org.apache.commons.math3.analysis.solvers.AbstractPolynomialSolver: void <init>(double)>($d0);

        $r1 = new org.apache.commons.math3.analysis.solvers.LaguerreSolver$ComplexSolver;

        specialinvoke $r1.<org.apache.commons.math3.analysis.solvers.LaguerreSolver$ComplexSolver: void <init>(org.apache.commons.math3.analysis.solvers.LaguerreSolver,org.apache.commons.math3.analysis.solvers.LaguerreSolver$1)>(r0, null);

        r0.<org.apache.commons.math3.analysis.solvers.LaguerreSolver: org.apache.commons.math3.analysis.solvers.LaguerreSolver$ComplexSolver complexSolver> = $r1;

        return;
    }
    public void <init>(double, double)
    {
        org.apache.commons.math3.analysis.solvers.LaguerreSolver r0;
        double $d0, $d1;
        org.apache.commons.math3.analysis.solvers.LaguerreSolver$ComplexSolver $r1;

        r0 := @this: org.apache.commons.math3.analysis.solvers.LaguerreSolver;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.analysis.solvers.AbstractPolynomialSolver: void <init>(double,double)>($d0, $d1);

        $r1 = new org.apache.commons.math3.analysis.solvers.LaguerreSolver$ComplexSolver;

        specialinvoke $r1.<org.apache.commons.math3.analysis.solvers.LaguerreSolver$ComplexSolver: void <init>(org.apache.commons.math3.analysis.solvers.LaguerreSolver,org.apache.commons.math3.analysis.solvers.LaguerreSolver$1)>(r0, null);

        r0.<org.apache.commons.math3.analysis.solvers.LaguerreSolver: org.apache.commons.math3.analysis.solvers.LaguerreSolver$ComplexSolver complexSolver> = $r1;

        return;
    }
    public void <init>(double, double, double)
    {
        org.apache.commons.math3.analysis.solvers.LaguerreSolver r0;
        double $d0, $d1, $d2;
        org.apache.commons.math3.analysis.solvers.LaguerreSolver$ComplexSolver $r1;

        r0 := @this: org.apache.commons.math3.analysis.solvers.LaguerreSolver;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        specialinvoke r0.<org.apache.commons.math3.analysis.solvers.AbstractPolynomialSolver: void <init>(double,double,double)>($d0, $d1, $d2);

        $r1 = new org.apache.commons.math3.analysis.solvers.LaguerreSolver$ComplexSolver;

        specialinvoke $r1.<org.apache.commons.math3.analysis.solvers.LaguerreSolver$ComplexSolver: void <init>(org.apache.commons.math3.analysis.solvers.LaguerreSolver,org.apache.commons.math3.analysis.solvers.LaguerreSolver$1)>(r0, null);

        r0.<org.apache.commons.math3.analysis.solvers.LaguerreSolver: org.apache.commons.math3.analysis.solvers.LaguerreSolver$ComplexSolver complexSolver> = $r1;

        return;
    }
    public double doSolve() throws org.apache.commons.math3.exception.TooManyEvaluationsException, org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.exception.NoBracketingException
    {
        org.apache.commons.math3.analysis.solvers.LaguerreSolver r0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        byte $b0;
        org.apache.commons.math3.exception.NoBracketingException $r1;

        r0 := @this: org.apache.commons.math3.analysis.solvers.LaguerreSolver;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.LaguerreSolver: double getMin()>();

        $d1 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.LaguerreSolver: double getMax()>();

        $d2 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.LaguerreSolver: double getStartValue()>();

        $d3 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.LaguerreSolver: double getFunctionValueAccuracy()>();

        virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.LaguerreSolver: void verifySequence(double,double,double)>($d0, $d2, $d1);

        $d4 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.LaguerreSolver: double computeObjectiveValue(double)>($d2);

        $d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d4);

        $b0 = $d5 cmpg $d3;

        if $b0 > 0 goto label1;

        return $d2;

     label1:
        $d5 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.LaguerreSolver: double computeObjectiveValue(double)>($d0);

        $d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d5);

        $b0 = $d6 cmpg $d3;

        if $b0 > 0 goto label2;

        return $d0;

     label2:
        $d6 = $d4 * $d5;

        $b0 = $d6 cmpg 0.0;

        if $b0 >= 0 goto label3;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.LaguerreSolver: double laguerre(double,double,double,double)>($d0, $d2, $d5, $d4);

        return $d0;

     label3:
        $d6 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.LaguerreSolver: double computeObjectiveValue(double)>($d1);

        $d7 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d6);

        $b0 = $d7 cmpg $d3;

        if $b0 > 0 goto label4;

        return $d1;

     label4:
        $d3 = $d4 * $d6;

        $b0 = $d3 cmpg 0.0;

        if $b0 >= 0 goto label5;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.LaguerreSolver: double laguerre(double,double,double,double)>($d2, $d1, $d4, $d6);

        return $d0;

     label5:
        $r1 = new org.apache.commons.math3.exception.NoBracketingException;

        specialinvoke $r1.<org.apache.commons.math3.exception.NoBracketingException: void <init>(double,double,double,double)>($d0, $d1, $d5, $d6);

        throw $r1;
    }
    public double laguerre(double, double, double, double)
    {
        org.apache.commons.math3.analysis.solvers.LaguerreSolver r0;
        double $d0, $d1, $d2, $d3;
        org.apache.commons.math3.analysis.solvers.LaguerreSolver$ComplexSolver $r1;
        org.apache.commons.math3.complex.Complex $r2, $r5;
        double[] $r3;
        org.apache.commons.math3.complex.Complex[] $r4;
        boolean $z0;
        int i0, $i1;

        r0 := @this: org.apache.commons.math3.analysis.solvers.LaguerreSolver;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $d3 := @parameter3: double;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.LaguerreSolver: double[] getCoefficients()>();

        $r4 = staticinvoke <org.apache.commons.math3.complex.ComplexUtils: org.apache.commons.math3.complex.Complex[] convertToComplex(double[])>($r3);

        $r2 = new org.apache.commons.math3.complex.Complex;

        $d2 = $d0 + $d1;

        $d2 = 0.5 * $d2;

        specialinvoke $r2.<org.apache.commons.math3.complex.Complex: void <init>(double,double)>($d2, 0.0);

        $r1 = r0.<org.apache.commons.math3.analysis.solvers.LaguerreSolver: org.apache.commons.math3.analysis.solvers.LaguerreSolver$ComplexSolver complexSolver>;

        $r5 = virtualinvoke $r1.<org.apache.commons.math3.analysis.solvers.LaguerreSolver$ComplexSolver: org.apache.commons.math3.complex.Complex solve(org.apache.commons.math3.complex.Complex[],org.apache.commons.math3.complex.Complex)>($r4, $r2);

        $r1 = r0.<org.apache.commons.math3.analysis.solvers.LaguerreSolver: org.apache.commons.math3.analysis.solvers.LaguerreSolver$ComplexSolver complexSolver>;

        $z0 = virtualinvoke $r1.<org.apache.commons.math3.analysis.solvers.LaguerreSolver$ComplexSolver: boolean isRoot(double,double,org.apache.commons.math3.complex.Complex)>($d0, $d1, $r5);

        if $z0 == 0 goto label1;

        $d0 = virtualinvoke $r5.<org.apache.commons.math3.complex.Complex: double getReal()>();

        return $d0;

     label1:
        $r1 = r0.<org.apache.commons.math3.analysis.solvers.LaguerreSolver: org.apache.commons.math3.analysis.solvers.LaguerreSolver$ComplexSolver complexSolver>;

        $r4 = virtualinvoke $r1.<org.apache.commons.math3.analysis.solvers.LaguerreSolver$ComplexSolver: org.apache.commons.math3.complex.Complex[] solveAll(org.apache.commons.math3.complex.Complex[],org.apache.commons.math3.complex.Complex)>($r4, $r2);

        i0 = 0;

     label2:
        $i1 = lengthof $r4;

        if i0 >= $i1 goto label4;

        $r1 = r0.<org.apache.commons.math3.analysis.solvers.LaguerreSolver: org.apache.commons.math3.analysis.solvers.LaguerreSolver$ComplexSolver complexSolver>;

        $r2 = $r4[i0];

        $z0 = virtualinvoke $r1.<org.apache.commons.math3.analysis.solvers.LaguerreSolver$ComplexSolver: boolean isRoot(double,double,org.apache.commons.math3.complex.Complex)>($d0, $d1, $r2);

        if $z0 == 0 goto label3;

        $r2 = $r4[i0];

        $d0 = virtualinvoke $r2.<org.apache.commons.math3.complex.Complex: double getReal()>();

        return $d0;

     label3:
        i0 = i0 + 1;

        goto label2;

     label4:
        return #NaN;
    }
    public org.apache.commons.math3.complex.Complex[] solveAllComplex(double[], double) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.TooManyEvaluationsException
    {
        org.apache.commons.math3.analysis.solvers.LaguerreSolver r0;
        double[] $r1;
        double $d0;
        org.apache.commons.math3.complex.Complex[] $r2;

        r0 := @this: org.apache.commons.math3.analysis.solvers.LaguerreSolver;

        $r1 := @parameter0: double[];

        $d0 := @parameter1: double;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.LaguerreSolver: org.apache.commons.math3.complex.Complex[] solveAllComplex(double[],double,int)>($r1, $d0, 2147483647);

        return $r2;
    }
    public org.apache.commons.math3.complex.Complex[] solveAllComplex(double[], double, int) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.TooManyEvaluationsException
    {
        org.apache.commons.math3.analysis.solvers.LaguerreSolver r0;
        double[] $r1;
        double $d0;
        int $i0;
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction $r2;
        org.apache.commons.math3.analysis.solvers.LaguerreSolver$ComplexSolver $r3;
        org.apache.commons.math3.complex.Complex[] $r4;
        org.apache.commons.math3.complex.Complex $r5;

        r0 := @this: org.apache.commons.math3.analysis.solvers.LaguerreSolver;

        $r1 := @parameter0: double[];

        $d0 := @parameter1: double;

        $i0 := @parameter2: int;

        $r2 = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction;

        specialinvoke $r2.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: void <init>(double[])>($r1);

        virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.LaguerreSolver: void setup(int,org.apache.commons.math3.analysis.polynomials.PolynomialFunction,double,double,double)>($i0, $r2, #-Infinity, #Infinity, $d0);

        $r3 = r0.<org.apache.commons.math3.analysis.solvers.LaguerreSolver: org.apache.commons.math3.analysis.solvers.LaguerreSolver$ComplexSolver complexSolver>;

        $r4 = staticinvoke <org.apache.commons.math3.complex.ComplexUtils: org.apache.commons.math3.complex.Complex[] convertToComplex(double[])>($r1);

        $r5 = new org.apache.commons.math3.complex.Complex;

        specialinvoke $r5.<org.apache.commons.math3.complex.Complex: void <init>(double,double)>($d0, 0.0);

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.analysis.solvers.LaguerreSolver$ComplexSolver: org.apache.commons.math3.complex.Complex[] solveAll(org.apache.commons.math3.complex.Complex[],org.apache.commons.math3.complex.Complex)>($r4, $r5);

        return $r4;
    }
    public org.apache.commons.math3.complex.Complex solveComplex(double[], double) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.TooManyEvaluationsException
    {
        org.apache.commons.math3.analysis.solvers.LaguerreSolver r0;
        double[] $r1;
        double $d0;
        org.apache.commons.math3.complex.Complex $r2;

        r0 := @this: org.apache.commons.math3.analysis.solvers.LaguerreSolver;

        $r1 := @parameter0: double[];

        $d0 := @parameter1: double;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.LaguerreSolver: org.apache.commons.math3.complex.Complex solveComplex(double[],double,int)>($r1, $d0, 2147483647);

        return $r2;
    }
    public org.apache.commons.math3.complex.Complex solveComplex(double[], double, int) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.TooManyEvaluationsException
    {
        org.apache.commons.math3.analysis.solvers.LaguerreSolver r0;
        double[] $r1;
        double $d0;
        int $i0;
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction $r2;
        org.apache.commons.math3.analysis.solvers.LaguerreSolver$ComplexSolver $r3;
        org.apache.commons.math3.complex.Complex[] $r4;
        org.apache.commons.math3.complex.Complex $r5;

        r0 := @this: org.apache.commons.math3.analysis.solvers.LaguerreSolver;

        $r1 := @parameter0: double[];

        $d0 := @parameter1: double;

        $i0 := @parameter2: int;

        $r2 = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction;

        specialinvoke $r2.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: void <init>(double[])>($r1);

        virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.LaguerreSolver: void setup(int,org.apache.commons.math3.analysis.polynomials.PolynomialFunction,double,double,double)>($i0, $r2, #-Infinity, #Infinity, $d0);

        $r3 = r0.<org.apache.commons.math3.analysis.solvers.LaguerreSolver: org.apache.commons.math3.analysis.solvers.LaguerreSolver$ComplexSolver complexSolver>;

        $r4 = staticinvoke <org.apache.commons.math3.complex.ComplexUtils: org.apache.commons.math3.complex.Complex[] convertToComplex(double[])>($r1);

        $r5 = new org.apache.commons.math3.complex.Complex;

        specialinvoke $r5.<org.apache.commons.math3.complex.Complex: void <init>(double,double)>($d0, 0.0);

        $r5 = virtualinvoke $r3.<org.apache.commons.math3.analysis.solvers.LaguerreSolver$ComplexSolver: org.apache.commons.math3.complex.Complex solve(org.apache.commons.math3.complex.Complex[],org.apache.commons.math3.complex.Complex)>($r4, $r5);

        return $r5;
    }
