org.apache.commons.math3.analysis.FunctionUtils$16$2 extends java.lang.Object implements org.apache.commons.math3.analysis.MultivariateVectorFunction
final org.apache.commons.math3.analysis.FunctionUtils$16 this$0
    void <init>(org.apache.commons.math3.analysis.FunctionUtils$16)
    {
        org.apache.commons.math3.analysis.FunctionUtils$16$2 r0;
        org.apache.commons.math3.analysis.FunctionUtils$16 $r1;

        r0 := @this: org.apache.commons.math3.analysis.FunctionUtils$16$2;

        $r1 := @parameter0: org.apache.commons.math3.analysis.FunctionUtils$16;

        r0.<org.apache.commons.math3.analysis.FunctionUtils$16$2: org.apache.commons.math3.analysis.FunctionUtils$16 this$0> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public double[] value(double[])
    {
        org.apache.commons.math3.analysis.FunctionUtils$16$2 r0;
        double[] $r1;
        int i0, i1;
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] r2;
        int[] r3;
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure $r4;
        double $d0;
        org.apache.commons.math3.analysis.FunctionUtils$16 $r5;
        org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableFunction $r6;

        r0 := @this: org.apache.commons.math3.analysis.FunctionUtils$16$2;

        $r1 := @parameter0: double[];

        i0 = lengthof $r1;

        r2 = newarray (org.apache.commons.math3.analysis.differentiation.DerivativeStructure)[i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r4 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $d0 = $r1[i1];

        specialinvoke $r4.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(int,int,int,double)>(i0, 1, i1, $d0);

        r2[i1] = $r4;

        i1 = i1 + 1;

        goto label1;

     label2:
        $r5 = r0.<org.apache.commons.math3.analysis.FunctionUtils$16$2: org.apache.commons.math3.analysis.FunctionUtils$16 this$0>;

        $r6 = $r5.<org.apache.commons.math3.analysis.FunctionUtils$16: org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableFunction val$f>;

        $r4 = interfaceinvoke $r6.<org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableFunction: org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure[])>(r2);

        $r1 = newarray (double)[i0];

        r3 = newarray (int)[i0];

        i1 = 0;

     label3:
        if i1 >= i0 goto label4;

        r3[i1] = 1;

        $d0 = virtualinvoke $r4.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getPartialDerivative(int[])>(r3);

        $r1[i1] = $d0;

        r3[i1] = 0;

        i1 = i1 + 1;

        goto label3;

     label4:
        return $r1;
    }
