org.apache.commons.math3.analysis.differentiation.GradientFunction extends java.lang.Object implements org.apache.commons.math3.analysis.MultivariateVectorFunction
private final org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableFunction f
    public void <init>(org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableFunction)
    {
        org.apache.commons.math3.analysis.differentiation.GradientFunction r0;
        org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableFunction $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.GradientFunction;

        $r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableFunction;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.analysis.differentiation.GradientFunction: org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableFunction f> = $r1;

        return;
    }
    public double[] value(double[])
    {
        org.apache.commons.math3.analysis.differentiation.GradientFunction r0;
        double[] $r1, r4;
        int $i0, $i1;
        double $d0;
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] r2;
        int[] r3;
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure $r5;
        org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableFunction $r6;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.GradientFunction;

        $r1 := @parameter0: double[];

        $i1 = lengthof $r1;

        r2 = newarray (org.apache.commons.math3.analysis.differentiation.DerivativeStructure)[$i1];

        $i1 = 0;

     label1:
        $i0 = lengthof $r1;

        if $i1 >= $i0 goto label2;

        $r5 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $i0 = lengthof $r1;

        $d0 = $r1[$i1];

        specialinvoke $r5.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(int,int,int,double)>($i0, 1, $i1, $d0);

        r2[$i1] = $r5;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        $r6 = r0.<org.apache.commons.math3.analysis.differentiation.GradientFunction: org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableFunction f>;

        $r5 = interfaceinvoke $r6.<org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableFunction: org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure[])>(r2);

        $i1 = lengthof $r1;

        r4 = newarray (double)[$i1];

        $i1 = lengthof $r1;

        r3 = newarray (int)[$i1];

        $i1 = 0;

     label3:
        $i0 = lengthof $r1;

        if $i1 >= $i0 goto label4;

        r3[$i1] = 1;

        $d0 = virtualinvoke $r5.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getPartialDerivative(int[])>(r3);

        r4[$i1] = $d0;

        r3[$i1] = 0;

        $i1 = $i1 + 1;

        goto label3;

     label4:
        return r4;
    }
