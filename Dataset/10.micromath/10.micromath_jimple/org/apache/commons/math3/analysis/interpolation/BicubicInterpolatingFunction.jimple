org.apache.commons.math3.analysis.interpolation.BicubicInterpolatingFunction extends java.lang.Object implements org.apache.commons.math3.analysis.BivariateFunction
private static final double[][] AINV
private static final int NUM_COEFF
private final org.apache.commons.math3.analysis.interpolation.BicubicFunction[][] splines
private final double[] xval
private final double[] yval
    static void <clinit>()
    {
        double[][] $r0;
        double[] $r1;

        $r0 = newarray (double[])[16];

        $r1 = newarray (double)[16];

        $r1[0] = 1.0;

        $r1[1] = 0.0;

        $r1[2] = 0.0;

        $r1[3] = 0.0;

        $r1[4] = 0.0;

        $r1[5] = 0.0;

        $r1[6] = 0.0;

        $r1[7] = 0.0;

        $r1[8] = 0.0;

        $r1[9] = 0.0;

        $r1[10] = 0.0;

        $r1[11] = 0.0;

        $r1[12] = 0.0;

        $r1[13] = 0.0;

        $r1[14] = 0.0;

        $r1[15] = 0.0;

        $r0[0] = $r1;

        $r1 = newarray (double)[16];

        $r1[0] = 0.0;

        $r1[1] = 0.0;

        $r1[2] = 0.0;

        $r1[3] = 0.0;

        $r1[4] = 1.0;

        $r1[5] = 0.0;

        $r1[6] = 0.0;

        $r1[7] = 0.0;

        $r1[8] = 0.0;

        $r1[9] = 0.0;

        $r1[10] = 0.0;

        $r1[11] = 0.0;

        $r1[12] = 0.0;

        $r1[13] = 0.0;

        $r1[14] = 0.0;

        $r1[15] = 0.0;

        $r0[1] = $r1;

        $r1 = newarray (double)[16];

        $r1[0] = -3.0;

        $r1[1] = 3.0;

        $r1[2] = 0.0;

        $r1[3] = 0.0;

        $r1[4] = -2.0;

        $r1[5] = -1.0;

        $r1[6] = 0.0;

        $r1[7] = 0.0;

        $r1[8] = 0.0;

        $r1[9] = 0.0;

        $r1[10] = 0.0;

        $r1[11] = 0.0;

        $r1[12] = 0.0;

        $r1[13] = 0.0;

        $r1[14] = 0.0;

        $r1[15] = 0.0;

        $r0[2] = $r1;

        $r1 = newarray (double)[16];

        $r1[0] = 2.0;

        $r1[1] = -2.0;

        $r1[2] = 0.0;

        $r1[3] = 0.0;

        $r1[4] = 1.0;

        $r1[5] = 1.0;

        $r1[6] = 0.0;

        $r1[7] = 0.0;

        $r1[8] = 0.0;

        $r1[9] = 0.0;

        $r1[10] = 0.0;

        $r1[11] = 0.0;

        $r1[12] = 0.0;

        $r1[13] = 0.0;

        $r1[14] = 0.0;

        $r1[15] = 0.0;

        $r0[3] = $r1;

        $r1 = newarray (double)[16];

        $r1[0] = 0.0;

        $r1[1] = 0.0;

        $r1[2] = 0.0;

        $r1[3] = 0.0;

        $r1[4] = 0.0;

        $r1[5] = 0.0;

        $r1[6] = 0.0;

        $r1[7] = 0.0;

        $r1[8] = 1.0;

        $r1[9] = 0.0;

        $r1[10] = 0.0;

        $r1[11] = 0.0;

        $r1[12] = 0.0;

        $r1[13] = 0.0;

        $r1[14] = 0.0;

        $r1[15] = 0.0;

        $r0[4] = $r1;

        $r1 = newarray (double)[16];

        $r1[0] = 0.0;

        $r1[1] = 0.0;

        $r1[2] = 0.0;

        $r1[3] = 0.0;

        $r1[4] = 0.0;

        $r1[5] = 0.0;

        $r1[6] = 0.0;

        $r1[7] = 0.0;

        $r1[8] = 0.0;

        $r1[9] = 0.0;

        $r1[10] = 0.0;

        $r1[11] = 0.0;

        $r1[12] = 1.0;

        $r1[13] = 0.0;

        $r1[14] = 0.0;

        $r1[15] = 0.0;

        $r0[5] = $r1;

        $r1 = newarray (double)[16];

        $r1[0] = 0.0;

        $r1[1] = 0.0;

        $r1[2] = 0.0;

        $r1[3] = 0.0;

        $r1[4] = 0.0;

        $r1[5] = 0.0;

        $r1[6] = 0.0;

        $r1[7] = 0.0;

        $r1[8] = -3.0;

        $r1[9] = 3.0;

        $r1[10] = 0.0;

        $r1[11] = 0.0;

        $r1[12] = -2.0;

        $r1[13] = -1.0;

        $r1[14] = 0.0;

        $r1[15] = 0.0;

        $r0[6] = $r1;

        $r1 = newarray (double)[16];

        $r1[0] = 0.0;

        $r1[1] = 0.0;

        $r1[2] = 0.0;

        $r1[3] = 0.0;

        $r1[4] = 0.0;

        $r1[5] = 0.0;

        $r1[6] = 0.0;

        $r1[7] = 0.0;

        $r1[8] = 2.0;

        $r1[9] = -2.0;

        $r1[10] = 0.0;

        $r1[11] = 0.0;

        $r1[12] = 1.0;

        $r1[13] = 1.0;

        $r1[14] = 0.0;

        $r1[15] = 0.0;

        $r0[7] = $r1;

        $r1 = newarray (double)[16];

        $r1[0] = -3.0;

        $r1[1] = 0.0;

        $r1[2] = 3.0;

        $r1[3] = 0.0;

        $r1[4] = 0.0;

        $r1[5] = 0.0;

        $r1[6] = 0.0;

        $r1[7] = 0.0;

        $r1[8] = -2.0;

        $r1[9] = 0.0;

        $r1[10] = -1.0;

        $r1[11] = 0.0;

        $r1[12] = 0.0;

        $r1[13] = 0.0;

        $r1[14] = 0.0;

        $r1[15] = 0.0;

        $r0[8] = $r1;

        $r1 = newarray (double)[16];

        $r1[0] = 0.0;

        $r1[1] = 0.0;

        $r1[2] = 0.0;

        $r1[3] = 0.0;

        $r1[4] = -3.0;

        $r1[5] = 0.0;

        $r1[6] = 3.0;

        $r1[7] = 0.0;

        $r1[8] = 0.0;

        $r1[9] = 0.0;

        $r1[10] = 0.0;

        $r1[11] = 0.0;

        $r1[12] = -2.0;

        $r1[13] = 0.0;

        $r1[14] = -1.0;

        $r1[15] = 0.0;

        $r0[9] = $r1;

        $r1 = newarray (double)[16];

        $r1[0] = 9.0;

        $r1[1] = -9.0;

        $r1[2] = -9.0;

        $r1[3] = 9.0;

        $r1[4] = 6.0;

        $r1[5] = 3.0;

        $r1[6] = -6.0;

        $r1[7] = -3.0;

        $r1[8] = 6.0;

        $r1[9] = -6.0;

        $r1[10] = 3.0;

        $r1[11] = -3.0;

        $r1[12] = 4.0;

        $r1[13] = 2.0;

        $r1[14] = 2.0;

        $r1[15] = 1.0;

        $r0[10] = $r1;

        $r1 = newarray (double)[16];

        $r1[0] = -6.0;

        $r1[1] = 6.0;

        $r1[2] = 6.0;

        $r1[3] = -6.0;

        $r1[4] = -3.0;

        $r1[5] = -3.0;

        $r1[6] = 3.0;

        $r1[7] = 3.0;

        $r1[8] = -4.0;

        $r1[9] = 4.0;

        $r1[10] = -2.0;

        $r1[11] = 2.0;

        $r1[12] = -2.0;

        $r1[13] = -2.0;

        $r1[14] = -1.0;

        $r1[15] = -1.0;

        $r0[11] = $r1;

        $r1 = newarray (double)[16];

        $r1[0] = 2.0;

        $r1[1] = 0.0;

        $r1[2] = -2.0;

        $r1[3] = 0.0;

        $r1[4] = 0.0;

        $r1[5] = 0.0;

        $r1[6] = 0.0;

        $r1[7] = 0.0;

        $r1[8] = 1.0;

        $r1[9] = 0.0;

        $r1[10] = 1.0;

        $r1[11] = 0.0;

        $r1[12] = 0.0;

        $r1[13] = 0.0;

        $r1[14] = 0.0;

        $r1[15] = 0.0;

        $r0[12] = $r1;

        $r1 = newarray (double)[16];

        $r1[0] = 0.0;

        $r1[1] = 0.0;

        $r1[2] = 0.0;

        $r1[3] = 0.0;

        $r1[4] = 2.0;

        $r1[5] = 0.0;

        $r1[6] = -2.0;

        $r1[7] = 0.0;

        $r1[8] = 0.0;

        $r1[9] = 0.0;

        $r1[10] = 0.0;

        $r1[11] = 0.0;

        $r1[12] = 1.0;

        $r1[13] = 0.0;

        $r1[14] = 1.0;

        $r1[15] = 0.0;

        $r0[13] = $r1;

        $r1 = newarray (double)[16];

        $r1[0] = -6.0;

        $r1[1] = 6.0;

        $r1[2] = 6.0;

        $r1[3] = -6.0;

        $r1[4] = -4.0;

        $r1[5] = -2.0;

        $r1[6] = 4.0;

        $r1[7] = 2.0;

        $r1[8] = -3.0;

        $r1[9] = 3.0;

        $r1[10] = -3.0;

        $r1[11] = 3.0;

        $r1[12] = -2.0;

        $r1[13] = -1.0;

        $r1[14] = -2.0;

        $r1[15] = -1.0;

        $r0[14] = $r1;

        $r1 = newarray (double)[16];

        $r1[0] = 4.0;

        $r1[1] = -4.0;

        $r1[2] = -4.0;

        $r1[3] = 4.0;

        $r1[4] = 2.0;

        $r1[5] = 2.0;

        $r1[6] = -2.0;

        $r1[7] = -2.0;

        $r1[8] = 2.0;

        $r1[9] = -2.0;

        $r1[10] = 2.0;

        $r1[11] = -2.0;

        $r1[12] = 1.0;

        $r1[13] = 1.0;

        $r1[14] = 1.0;

        $r1[15] = 1.0;

        $r0[15] = $r1;

        <org.apache.commons.math3.analysis.interpolation.BicubicInterpolatingFunction: double[][] AINV> = $r0;

        return;
    }
    public void <init>(double[], double[], double[][], double[][], double[][], double[][]) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.NonMonotonicSequenceException
    {
        org.apache.commons.math3.analysis.interpolation.BicubicInterpolatingFunction r0;
        double[] $r1, $r2, $r7;
        double[][] $r3, $r4, $r5, $r6;
        int i0, i1, i2, i3, i4, i5, i6;
        double d0, d1, d2, $d3;
        org.apache.commons.math3.exception.NoDataException $r8;
        org.apache.commons.math3.exception.DimensionMismatchException $r9;
        java.lang.Object $r10;
        int[] $r11;
        org.apache.commons.math3.analysis.interpolation.BicubicFunction[][] $r12;
        org.apache.commons.math3.analysis.interpolation.BicubicFunction[] $r13;
        org.apache.commons.math3.analysis.interpolation.BicubicFunction $r14;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.BicubicInterpolatingFunction;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[];

        $r3 := @parameter2: double[][];

        $r4 := @parameter3: double[][];

        $r5 := @parameter4: double[][];

        $r6 := @parameter5: double[][];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        i2 = lengthof $r1;

        i4 = lengthof $r2;

        if i2 == 0 goto label01;

        if i4 == 0 goto label01;

        i3 = lengthof $r3;

        if i3 == 0 goto label01;

        $r7 = $r3[0];

        i3 = lengthof $r7;

        if i3 != 0 goto label02;

     label01:
        $r8 = new org.apache.commons.math3.exception.NoDataException;

        specialinvoke $r8.<org.apache.commons.math3.exception.NoDataException: void <init>()>();

        throw $r8;

     label02:
        i3 = lengthof $r3;

        if i2 == i3 goto label03;

        $r9 = new org.apache.commons.math3.exception.DimensionMismatchException;

        i4 = lengthof $r3;

        specialinvoke $r9.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>(i2, i4);

        throw $r9;

     label03:
        i3 = lengthof $r4;

        if i2 == i3 goto label04;

        $r9 = new org.apache.commons.math3.exception.DimensionMismatchException;

        i4 = lengthof $r4;

        specialinvoke $r9.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>(i2, i4);

        throw $r9;

     label04:
        i3 = lengthof $r5;

        if i2 == i3 goto label05;

        $r9 = new org.apache.commons.math3.exception.DimensionMismatchException;

        i4 = lengthof $r5;

        specialinvoke $r9.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>(i2, i4);

        throw $r9;

     label05:
        i3 = lengthof $r6;

        if i2 == i3 goto label06;

        $r9 = new org.apache.commons.math3.exception.DimensionMismatchException;

        i4 = lengthof $r6;

        specialinvoke $r9.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>(i2, i4);

        throw $r9;

     label06:
        staticinvoke <org.apache.commons.math3.util.MathArrays: void checkOrder(double[])>($r1);

        staticinvoke <org.apache.commons.math3.util.MathArrays: void checkOrder(double[])>($r2);

        $r10 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r1 = (double[]) $r10;

        r0.<org.apache.commons.math3.analysis.interpolation.BicubicInterpolatingFunction: double[] xval> = $r1;

        $r10 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r1 = (double[]) $r10;

        r0.<org.apache.commons.math3.analysis.interpolation.BicubicInterpolatingFunction: double[] yval> = $r1;

        i2 = i2 + -1;

        i3 = i4 + -1;

        $r11 = newarray (int)[2];

        $r11[0] = i2;

        $r11[1] = i3;

        $r10 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>(class "Lorg/apache/commons/math3/analysis/interpolation/BicubicFunction;", $r11);

        $r12 = (org.apache.commons.math3.analysis.interpolation.BicubicFunction[][]) $r10;

        r0.<org.apache.commons.math3.analysis.interpolation.BicubicInterpolatingFunction: org.apache.commons.math3.analysis.interpolation.BicubicFunction[][] splines> = $r12;

        i5 = 0;

     label07:
        if i5 >= i2 goto label14;

        $r1 = $r3[i5];

        i0 = lengthof $r1;

        if i0 == i4 goto label08;

        $r9 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $r1 = $r3[i5];

        i2 = lengthof $r1;

        specialinvoke $r9.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>(i2, i4);

        throw $r9;

     label08:
        $r1 = $r4[i5];

        i0 = lengthof $r1;

        if i0 == i4 goto label09;

        $r9 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $r1 = $r4[i5];

        i2 = lengthof $r1;

        specialinvoke $r9.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>(i2, i4);

        throw $r9;

     label09:
        $r1 = $r5[i5];

        i0 = lengthof $r1;

        if i0 == i4 goto label10;

        $r9 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $r1 = $r5[i5];

        i2 = lengthof $r1;

        specialinvoke $r9.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>(i2, i4);

        throw $r9;

     label10:
        $r1 = $r6[i5];

        i0 = lengthof $r1;

        if i0 == i4 goto label11;

        $r9 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $r1 = $r6[i5];

        i2 = lengthof $r1;

        specialinvoke $r9.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>(i2, i4);

        throw $r9;

     label11:
        i0 = i5 + 1;

        $r1 = r0.<org.apache.commons.math3.analysis.interpolation.BicubicInterpolatingFunction: double[] xval>;

        d0 = $r1[i0];

        $r1 = r0.<org.apache.commons.math3.analysis.interpolation.BicubicInterpolatingFunction: double[] xval>;

        d1 = $r1[i5];

        d0 = d0 - d1;

        i6 = 0;

     label12:
        if i6 >= i3 goto label13;

        i1 = i6 + 1;

        $r1 = r0.<org.apache.commons.math3.analysis.interpolation.BicubicInterpolatingFunction: double[] yval>;

        d1 = $r1[i1];

        $r1 = r0.<org.apache.commons.math3.analysis.interpolation.BicubicInterpolatingFunction: double[] yval>;

        d2 = $r1[i6];

        d2 = d1 - d2;

        d1 = d0 * d2;

        $r1 = newarray (double)[16];

        $r2 = $r3[i5];

        $d3 = $r2[i6];

        $r1[0] = $d3;

        $r2 = $r3[i0];

        $d3 = $r2[i6];

        $r1[1] = $d3;

        $r2 = $r3[i5];

        $d3 = $r2[i1];

        $r1[2] = $d3;

        $r2 = $r3[i0];

        $d3 = $r2[i1];

        $r1[3] = $d3;

        $r2 = $r4[i5];

        $d3 = $r2[i6];

        $d3 = $d3 * d0;

        $r1[4] = $d3;

        $r2 = $r4[i0];

        $d3 = $r2[i6];

        $d3 = $d3 * d0;

        $r1[5] = $d3;

        $r2 = $r4[i5];

        $d3 = $r2[i1];

        $d3 = $d3 * d0;

        $r1[6] = $d3;

        $r2 = $r4[i0];

        $d3 = $r2[i1];

        $d3 = $d3 * d0;

        $r1[7] = $d3;

        $r2 = $r5[i5];

        $d3 = $r2[i6];

        $d3 = $d3 * d2;

        $r1[8] = $d3;

        $r2 = $r5[i0];

        $d3 = $r2[i6];

        $d3 = $d3 * d2;

        $r1[9] = $d3;

        $r2 = $r5[i5];

        $d3 = $r2[i1];

        $d3 = $d3 * d2;

        $r1[10] = $d3;

        $r2 = $r5[i0];

        $d3 = $r2[i1];

        d2 = $d3 * d2;

        $r1[11] = d2;

        $r2 = $r6[i5];

        d2 = $r2[i6];

        d2 = d2 * d1;

        $r1[12] = d2;

        $r2 = $r6[i0];

        d2 = $r2[i6];

        d2 = d2 * d1;

        $r1[13] = d2;

        $r2 = $r6[i5];

        d2 = $r2[i1];

        d2 = d2 * d1;

        $r1[14] = d2;

        $r2 = $r6[i0];

        d2 = $r2[i1];

        d1 = d2 * d1;

        $r1[15] = d1;

        $r12 = r0.<org.apache.commons.math3.analysis.interpolation.BicubicInterpolatingFunction: org.apache.commons.math3.analysis.interpolation.BicubicFunction[][] splines>;

        $r13 = $r12[i5];

        $r14 = new org.apache.commons.math3.analysis.interpolation.BicubicFunction;

        $r1 = specialinvoke r0.<org.apache.commons.math3.analysis.interpolation.BicubicInterpolatingFunction: double[] computeSplineCoefficients(double[])>($r1);

        specialinvoke $r14.<org.apache.commons.math3.analysis.interpolation.BicubicFunction: void <init>(double[])>($r1);

        $r13[i6] = $r14;

        i6 = i6 + 1;

        goto label12;

     label13:
        i5 = i5 + 1;

        goto label07;

     label14:
        return;
    }
    private double[] computeSplineCoefficients(double[])
    {
        org.apache.commons.math3.analysis.interpolation.BicubicInterpolatingFunction r0;
        double[] $r1, r2, r3;
        double $d0, d1, $d2;
        int i0, i1;
        double[][] $r4;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.BicubicInterpolatingFunction;

        $r1 := @parameter0: double[];

        r2 = newarray (double)[16];

        i0 = 0;

     label1:
        if i0 >= 16 goto label4;

        d1 = 0.0;

        $r4 = <org.apache.commons.math3.analysis.interpolation.BicubicInterpolatingFunction: double[][] AINV>;

        r3 = $r4[i0];

        i1 = 0;

     label2:
        if i1 >= 16 goto label3;

        $d2 = r3[i1];

        $d0 = $r1[i1];

        $d0 = $d2 * $d0;

        d1 = d1 + $d0;

        i1 = i1 + 1;

        goto label2;

     label3:
        r2[i0] = d1;

        i0 = i0 + 1;

        goto label1;

     label4:
        return r2;
    }
    private int searchIndex(double, double[])
    {
        org.apache.commons.math3.analysis.interpolation.BicubicInterpolatingFunction r0;
        double $d0;
        double[] $r1;
        int i0, $i1;
        org.apache.commons.math3.exception.OutOfRangeException $r2;
        java.lang.Double $r3, $r4, $r5;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.BicubicInterpolatingFunction;

        $d0 := @parameter0: double;

        $r1 := @parameter1: double[];

        $i1 = staticinvoke <java.util.Arrays: int binarySearch(double[],double)>($r1, $d0);

        if $i1 == -1 goto label1;

        i0 = lengthof $r1;

        i0 = neg i0;

        i0 = i0 + -1;

        if $i1 != i0 goto label2;

     label1:
        $r2 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $d0 = $r1[0];

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $i1 = lengthof $r1;

        $i1 = $i1 + -1;

        $d0 = $r1[$i1];

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        specialinvoke $r2.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r3, $r4, $r5);

        throw $r2;

     label2:
        if $i1 >= 0 goto label3;

        $i1 = neg $i1;

        $i1 = $i1 + -2;

        return $i1;

     label3:
        i0 = lengthof $r1;

        i0 = i0 + -1;

        if $i1 != i0 goto label4;

        $i1 = i0 + -1;

     label4:
        return $i1;
    }
    public boolean isValidPoint(double, double)
    {
        org.apache.commons.math3.analysis.interpolation.BicubicInterpolatingFunction r0;
        double $d0, $d1, $d2;
        double[] $r1, $r2;
        byte $b0;
        int $i1;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.BicubicInterpolatingFunction;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $r1 = r0.<org.apache.commons.math3.analysis.interpolation.BicubicInterpolatingFunction: double[] xval>;

        $d2 = $r1[0];

        $b0 = $d0 cmpg $d2;

        if $b0 < 0 goto label2;

        $r1 = r0.<org.apache.commons.math3.analysis.interpolation.BicubicInterpolatingFunction: double[] xval>;

        $r2 = r0.<org.apache.commons.math3.analysis.interpolation.BicubicInterpolatingFunction: double[] xval>;

        $i1 = lengthof $r2;

        $i1 = $i1 + -1;

        $d2 = $r1[$i1];

        $b0 = $d0 cmpl $d2;

        if $b0 > 0 goto label2;

        $r1 = r0.<org.apache.commons.math3.analysis.interpolation.BicubicInterpolatingFunction: double[] yval>;

        $d0 = $r1[0];

        $b0 = $d1 cmpg $d0;

        if $b0 < 0 goto label2;

        $r1 = r0.<org.apache.commons.math3.analysis.interpolation.BicubicInterpolatingFunction: double[] yval>;

        $r2 = r0.<org.apache.commons.math3.analysis.interpolation.BicubicInterpolatingFunction: double[] yval>;

        $i1 = lengthof $r2;

        $i1 = $i1 + -1;

        $d0 = $r1[$i1];

        $b0 = $d1 cmpl $d0;

        if $b0 <= 0 goto label1;

        return 0;

     label1:
        return 1;

     label2:
        return 0;
    }
    public double value(double, double) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.analysis.interpolation.BicubicInterpolatingFunction r0;
        double $d0, $d1, $d2, $d3;
        double[] $r1;
        int $i0, $i1, $i2;
        org.apache.commons.math3.analysis.interpolation.BicubicFunction[][] $r2;
        org.apache.commons.math3.analysis.interpolation.BicubicFunction[] $r3;
        org.apache.commons.math3.analysis.interpolation.BicubicFunction $r4;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.BicubicInterpolatingFunction;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $r1 = r0.<org.apache.commons.math3.analysis.interpolation.BicubicInterpolatingFunction: double[] xval>;

        $i0 = specialinvoke r0.<org.apache.commons.math3.analysis.interpolation.BicubicInterpolatingFunction: int searchIndex(double,double[])>($d0, $r1);

        $r1 = r0.<org.apache.commons.math3.analysis.interpolation.BicubicInterpolatingFunction: double[] yval>;

        $i1 = specialinvoke r0.<org.apache.commons.math3.analysis.interpolation.BicubicInterpolatingFunction: int searchIndex(double,double[])>($d1, $r1);

        $r1 = r0.<org.apache.commons.math3.analysis.interpolation.BicubicInterpolatingFunction: double[] xval>;

        $d2 = $r1[$i0];

        $d0 = $d0 - $d2;

        $r1 = r0.<org.apache.commons.math3.analysis.interpolation.BicubicInterpolatingFunction: double[] xval>;

        $i2 = $i0 + 1;

        $d2 = $r1[$i2];

        $r1 = r0.<org.apache.commons.math3.analysis.interpolation.BicubicInterpolatingFunction: double[] xval>;

        $d3 = $r1[$i0];

        $d2 = $d2 - $d3;

        $d0 = $d0 / $d2;

        $r1 = r0.<org.apache.commons.math3.analysis.interpolation.BicubicInterpolatingFunction: double[] yval>;

        $d2 = $r1[$i1];

        $d1 = $d1 - $d2;

        $r1 = r0.<org.apache.commons.math3.analysis.interpolation.BicubicInterpolatingFunction: double[] yval>;

        $i2 = $i1 + 1;

        $d2 = $r1[$i2];

        $r1 = r0.<org.apache.commons.math3.analysis.interpolation.BicubicInterpolatingFunction: double[] yval>;

        $d3 = $r1[$i1];

        $d2 = $d2 - $d3;

        $d1 = $d1 / $d2;

        $r2 = r0.<org.apache.commons.math3.analysis.interpolation.BicubicInterpolatingFunction: org.apache.commons.math3.analysis.interpolation.BicubicFunction[][] splines>;

        $r3 = $r2[$i0];

        $r4 = $r3[$i1];

        $d0 = virtualinvoke $r4.<org.apache.commons.math3.analysis.interpolation.BicubicFunction: double value(double,double)>($d0, $d1);

        return $d0;
    }
