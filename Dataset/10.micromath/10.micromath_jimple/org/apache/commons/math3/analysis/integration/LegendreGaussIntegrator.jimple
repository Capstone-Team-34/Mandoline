org.apache.commons.math3.analysis.integration.LegendreGaussIntegrator extends org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator
private static final double[] ABSCISSAS_2
private static final double[] ABSCISSAS_3
private static final double[] ABSCISSAS_4
private static final double[] ABSCISSAS_5
private static final double[] WEIGHTS_2
private static final double[] WEIGHTS_3
private static final double[] WEIGHTS_4
private static final double[] WEIGHTS_5
private final double[] abscissas
private final double[] weights
    static void <clinit>()
    {
        double[] $r0;
        double $d0;

        $r0 = newarray (double)[2];

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(3.0);

        $d0 = -1.0 / $d0;

        $r0[0] = $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(3.0);

        $d0 = 1.0 / $d0;

        $r0[1] = $d0;

        <org.apache.commons.math3.analysis.integration.LegendreGaussIntegrator: double[] ABSCISSAS_2> = $r0;

        $r0 = newarray (double)[2];

        $r0[0] = 1.0;

        $r0[1] = 1.0;

        <org.apache.commons.math3.analysis.integration.LegendreGaussIntegrator: double[] WEIGHTS_2> = $r0;

        $r0 = newarray (double)[3];

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(0.6);

        $d0 = neg $d0;

        $r0[0] = $d0;

        $d0 = (double) 0L;

        $r0[1] = $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(0.6);

        $r0[2] = $d0;

        <org.apache.commons.math3.analysis.integration.LegendreGaussIntegrator: double[] ABSCISSAS_3> = $r0;

        $r0 = newarray (double)[3];

        $r0[0] = 0.5555555555555556;

        $r0[1] = 0.8888888888888888;

        $r0[2] = 0.5555555555555556;

        <org.apache.commons.math3.analysis.integration.LegendreGaussIntegrator: double[] WEIGHTS_3> = $r0;

        $r0 = newarray (double)[4];

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(30.0);

        $d0 = 2.0 * $d0;

        $d0 = 15.0 + $d0;

        $d0 = $d0 / 35.0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d0);

        $d0 = neg $d0;

        $r0[0] = $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(30.0);

        $d0 = 2.0 * $d0;

        $d0 = 15.0 - $d0;

        $d0 = $d0 / 35.0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d0);

        $d0 = neg $d0;

        $r0[1] = $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(30.0);

        $d0 = 2.0 * $d0;

        $d0 = 15.0 - $d0;

        $d0 = $d0 / 35.0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d0);

        $r0[2] = $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(30.0);

        $d0 = 2.0 * $d0;

        $d0 = 15.0 + $d0;

        $d0 = $d0 / 35.0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d0);

        $r0[3] = $d0;

        <org.apache.commons.math3.analysis.integration.LegendreGaussIntegrator: double[] ABSCISSAS_4> = $r0;

        $r0 = newarray (double)[4];

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(30.0);

        $d0 = 5.0 * $d0;

        $d0 = 90.0 - $d0;

        $d0 = $d0 / 180.0;

        $r0[0] = $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(30.0);

        $d0 = 5.0 * $d0;

        $d0 = 90.0 + $d0;

        $d0 = $d0 / 180.0;

        $r0[1] = $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(30.0);

        $d0 = 5.0 * $d0;

        $d0 = 90.0 + $d0;

        $d0 = $d0 / 180.0;

        $r0[2] = $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(30.0);

        $d0 = 5.0 * $d0;

        $d0 = 90.0 - $d0;

        $d0 = $d0 / 180.0;

        $r0[3] = $d0;

        <org.apache.commons.math3.analysis.integration.LegendreGaussIntegrator: double[] WEIGHTS_4> = $r0;

        $r0 = newarray (double)[5];

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(70.0);

        $d0 = 2.0 * $d0;

        $d0 = 35.0 + $d0;

        $d0 = $d0 / 63.0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d0);

        $d0 = neg $d0;

        $r0[0] = $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(70.0);

        $d0 = 2.0 * $d0;

        $d0 = 35.0 - $d0;

        $d0 = $d0 / 63.0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d0);

        $d0 = neg $d0;

        $r0[1] = $d0;

        $d0 = (double) 0L;

        $r0[2] = $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(70.0);

        $d0 = 2.0 * $d0;

        $d0 = 35.0 - $d0;

        $d0 = $d0 / 63.0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d0);

        $r0[3] = $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(70.0);

        $d0 = 2.0 * $d0;

        $d0 = 35.0 + $d0;

        $d0 = $d0 / 63.0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d0);

        $r0[4] = $d0;

        <org.apache.commons.math3.analysis.integration.LegendreGaussIntegrator: double[] ABSCISSAS_5> = $r0;

        $r0 = newarray (double)[5];

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(70.0);

        $d0 = 13.0 * $d0;

        $d0 = 322.0 - $d0;

        $d0 = $d0 / 900.0;

        $r0[0] = $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(70.0);

        $d0 = 13.0 * $d0;

        $d0 = 322.0 + $d0;

        $d0 = $d0 / 900.0;

        $r0[1] = $d0;

        $d0 = (double) 4603299315121306847L;

        $r0[2] = $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(70.0);

        $d0 = 13.0 * $d0;

        $d0 = 322.0 + $d0;

        $d0 = $d0 / 900.0;

        $r0[3] = $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(70.0);

        $d0 = 13.0 * $d0;

        $d0 = 322.0 - $d0;

        $d0 = $d0 / 900.0;

        $r0[4] = $d0;

        <org.apache.commons.math3.analysis.integration.LegendreGaussIntegrator: double[] WEIGHTS_5> = $r0;

        return;
    }
    public void <init>(int, double, double) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.analysis.integration.LegendreGaussIntegrator r0;
        int $i0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.analysis.integration.LegendreGaussIntegrator;

        $i0 := @parameter0: int;

        $d0 := @parameter1: double;

        $d1 := @parameter2: double;

        specialinvoke r0.<org.apache.commons.math3.analysis.integration.LegendreGaussIntegrator: void <init>(int,double,double,int,int)>($i0, $d0, $d1, 3, 2147483647);

        return;
    }
    public void <init>(int, double, double, int, int) throws org.apache.commons.math3.exception.MathIllegalArgumentException, org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.analysis.integration.LegendreGaussIntegrator r0;
        int $i0, $i1, $i2;
        double $d0, $d1;
        org.apache.commons.math3.exception.MathIllegalArgumentException $r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        java.lang.Object[] $r3;
        java.lang.Integer $r4;
        double[] $r5;

        r0 := @this: org.apache.commons.math3.analysis.integration.LegendreGaussIntegrator;

        $i0 := @parameter0: int;

        $d0 := @parameter1: double;

        $d1 := @parameter2: double;

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        specialinvoke r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: void <init>(double,double,int,int)>($d0, $d1, $i1, $i2);

        lookupswitch($i0)
        {
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            case 5: goto label5;
            default: goto label1;
        };

     label1:
        $r1 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED>;

        $r3 = newarray (java.lang.Object)[3];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3[0] = $r4;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r3[1] = $r4;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r3[2] = $r4;

        specialinvoke $r1.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r2, $r3);

        throw $r1;

     label2:
        $r5 = <org.apache.commons.math3.analysis.integration.LegendreGaussIntegrator: double[] ABSCISSAS_2>;

        r0.<org.apache.commons.math3.analysis.integration.LegendreGaussIntegrator: double[] abscissas> = $r5;

        $r5 = <org.apache.commons.math3.analysis.integration.LegendreGaussIntegrator: double[] WEIGHTS_2>;

        r0.<org.apache.commons.math3.analysis.integration.LegendreGaussIntegrator: double[] weights> = $r5;

        return;

     label3:
        $r5 = <org.apache.commons.math3.analysis.integration.LegendreGaussIntegrator: double[] ABSCISSAS_3>;

        r0.<org.apache.commons.math3.analysis.integration.LegendreGaussIntegrator: double[] abscissas> = $r5;

        $r5 = <org.apache.commons.math3.analysis.integration.LegendreGaussIntegrator: double[] WEIGHTS_3>;

        r0.<org.apache.commons.math3.analysis.integration.LegendreGaussIntegrator: double[] weights> = $r5;

        return;

     label4:
        $r5 = <org.apache.commons.math3.analysis.integration.LegendreGaussIntegrator: double[] ABSCISSAS_4>;

        r0.<org.apache.commons.math3.analysis.integration.LegendreGaussIntegrator: double[] abscissas> = $r5;

        $r5 = <org.apache.commons.math3.analysis.integration.LegendreGaussIntegrator: double[] WEIGHTS_4>;

        r0.<org.apache.commons.math3.analysis.integration.LegendreGaussIntegrator: double[] weights> = $r5;

        return;

     label5:
        $r5 = <org.apache.commons.math3.analysis.integration.LegendreGaussIntegrator: double[] ABSCISSAS_5>;

        r0.<org.apache.commons.math3.analysis.integration.LegendreGaussIntegrator: double[] abscissas> = $r5;

        $r5 = <org.apache.commons.math3.analysis.integration.LegendreGaussIntegrator: double[] WEIGHTS_5>;

        r0.<org.apache.commons.math3.analysis.integration.LegendreGaussIntegrator: double[] weights> = $r5;

        return;
    }
    public void <init>(int, int, int) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.analysis.integration.LegendreGaussIntegrator r0;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.commons.math3.analysis.integration.LegendreGaussIntegrator;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        specialinvoke r0.<org.apache.commons.math3.analysis.integration.LegendreGaussIntegrator: void <init>(int,double,double,int,int)>($i0, 1.0E-6, 1.0E-15, $i1, $i2);

        return;
    }
    private double stage(int) throws org.apache.commons.math3.exception.TooManyEvaluationsException
    {
        org.apache.commons.math3.analysis.integration.LegendreGaussIntegrator r0;
        int $i0, i1, i2, $i3;
        double d0, d1, $d2, d3, $d4, $d5;
        double[] $r1;

        r0 := @this: org.apache.commons.math3.analysis.integration.LegendreGaussIntegrator;

        $i0 := @parameter0: int;

        d0 = virtualinvoke r0.<org.apache.commons.math3.analysis.integration.LegendreGaussIntegrator: double getMax()>();

        d1 = virtualinvoke r0.<org.apache.commons.math3.analysis.integration.LegendreGaussIntegrator: double getMin()>();

        d0 = d0 - d1;

        d1 = (double) $i0;

        d1 = d0 / d1;

        d0 = d1 / 2.0;

        $d2 = virtualinvoke r0.<org.apache.commons.math3.analysis.integration.LegendreGaussIntegrator: double getMin()>();

        $d2 = $d2 + d0;

        d3 = 0.0;

        i1 = 0;

     label1:
        if i1 >= $i0 goto label4;

        i2 = 0;

     label2:
        $r1 = r0.<org.apache.commons.math3.analysis.integration.LegendreGaussIntegrator: double[] abscissas>;

        $i3 = lengthof $r1;

        if i2 >= $i3 goto label3;

        $r1 = r0.<org.apache.commons.math3.analysis.integration.LegendreGaussIntegrator: double[] weights>;

        $d4 = $r1[i2];

        $r1 = r0.<org.apache.commons.math3.analysis.integration.LegendreGaussIntegrator: double[] abscissas>;

        $d5 = $r1[i2];

        $d5 = $d5 * d0;

        $d5 = $d5 + $d2;

        $d5 = virtualinvoke r0.<org.apache.commons.math3.analysis.integration.LegendreGaussIntegrator: double computeObjectiveValue(double)>($d5);

        $d4 = $d4 * $d5;

        d3 = d3 + $d4;

        i2 = i2 + 1;

        goto label2;

     label3:
        $d2 = $d2 + d1;

        i1 = i1 + 1;

        goto label1;

     label4:
        d0 = d0 * d3;

        return d0;
    }
    protected double doIntegrate() throws org.apache.commons.math3.exception.MathIllegalArgumentException, org.apache.commons.math3.exception.TooManyEvaluationsException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.analysis.integration.LegendreGaussIntegrator r0;
        double $d0, d1, $d2, $d3, $d4, $d5;
        int i0, $i1, $i2;
        byte $b3;
        double[] $r1;

        r0 := @this: org.apache.commons.math3.analysis.integration.LegendreGaussIntegrator;

        d1 = specialinvoke r0.<org.apache.commons.math3.analysis.integration.LegendreGaussIntegrator: double stage(int)>(1);

        i0 = 2;

     label1:
        $d0 = specialinvoke r0.<org.apache.commons.math3.analysis.integration.LegendreGaussIntegrator: double stage(int)>(i0);

        $d2 = $d0 - d1;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d2);

        $d3 = virtualinvoke r0.<org.apache.commons.math3.analysis.integration.LegendreGaussIntegrator: double getAbsoluteAccuracy()>();

        $d4 = virtualinvoke r0.<org.apache.commons.math3.analysis.integration.LegendreGaussIntegrator: double getRelativeAccuracy()>();

        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d1);

        $d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        d1 = d1 + $d5;

        $d4 = $d4 * d1;

        $d4 = $d4 * 0.5;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>($d3, $d4);

        $i1 = virtualinvoke r0.<org.apache.commons.math3.analysis.integration.LegendreGaussIntegrator: int getIterations()>();

        $i1 = $i1 + 1;

        $i2 = virtualinvoke r0.<org.apache.commons.math3.analysis.integration.LegendreGaussIntegrator: int getMinimalIterationCount()>();

        if $i1 < $i2 goto label2;

        $b3 = $d2 cmpg $d3;

        if $b3 > 0 goto label2;

        return $d0;

     label2:
        $d2 = $d2 / $d3;

        $r1 = r0.<org.apache.commons.math3.analysis.integration.LegendreGaussIntegrator: double[] abscissas>;

        $i1 = lengthof $r1;

        $d3 = (double) $i1;

        $d3 = 0.5 / $d3;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,double)>($d2, $d3);

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double min(double,double)>(4.0, $d2);

        $d3 = (double) i0;

        $d2 = $d3 * $d2;

        $i1 = (int) $d2;

        i0 = i0 + 1;

        i0 = staticinvoke <org.apache.commons.math3.util.FastMath: int max(int,int)>($i1, i0);

        d1 = $d0;

        virtualinvoke r0.<org.apache.commons.math3.analysis.integration.LegendreGaussIntegrator: void incrementCount()>();

        goto label1;
    }
