org.apache.commons.math3.primes.PollardRho extends java.lang.Object
    private void <init>()
    {
        org.apache.commons.math3.primes.PollardRho r0;

        r0 := @this: org.apache.commons.math3.primes.PollardRho;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    static int gcdPositive(int, int)
    {
        int i0, i1, $i2, i3, $i4;

        i1 := @parameter0: int;

        $i2 := @parameter1: int;

        if i1 != 0 goto label1;

        return $i2;

     label1:
        if $i2 == 0 goto label4;

        i0 = staticinvoke <java.lang.Integer: int numberOfTrailingZeros(int)>(i1);

        i3 = i1 >> i0;

        $i4 = staticinvoke <java.lang.Integer: int numberOfTrailingZeros(int)>($i2);

        i1 = $i2 >> $i4;

        $i2 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>(i0, $i4);

     label2:
        if i3 == i1 goto label3;

        i0 = i3 - i1;

        i1 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>(i3, i1);

        i3 = staticinvoke <org.apache.commons.math3.util.FastMath: int abs(int)>(i0);

        i0 = staticinvoke <java.lang.Integer: int numberOfTrailingZeros(int)>(i3);

        i3 = i3 >> i0;

        goto label2;

     label3:
        i1 = i3 << $i2;

     label4:
        return i1;
    }
    public static java.util.List primeFactors(int)
    {
        java.util.ArrayList r0;
        int $i0, $i1;
        boolean $z0;
        java.lang.Integer $r1;

        $i0 := @parameter0: int;

        r0 = new java.util.ArrayList;

        specialinvoke r0.<java.util.ArrayList: void <init>()>();

        $i0 = staticinvoke <org.apache.commons.math3.primes.SmallPrimes: int smallTrialDivision(int,java.util.List)>($i0, r0);

        if 1 != $i0 goto label1;

        return r0;

     label1:
        $z0 = staticinvoke <org.apache.commons.math3.primes.SmallPrimes: boolean millerRabinPrimeTest(int)>($i0);

        if $z0 == 0 goto label2;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>($r1);

        return r0;

     label2:
        $i1 = staticinvoke <org.apache.commons.math3.primes.PollardRho: int rhoBrent(int)>($i0);

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>($r1);

        $i0 = $i0 / $i1;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>($r1);

        return r0;
    }
    static int rhoBrent(int)
    {
        int $i0, i3, i4, i5, i6, i7, $i8, $i9, i10, $i11;
        long l1, l2, $l13;
        byte $b12;

        $i0 := @parameter0: int;

        i4 = <org.apache.commons.math3.primes.SmallPrimes: int PRIMES_LAST>;

        i5 = 2;

        i6 = 1;

     label1:
        i3 = i5;

        i7 = 0;

     label2:
        if i7 >= i6 goto label3;

        l1 = (long) i5;

        l2 = (long) i5;

        l1 = l1 * l2;

        l2 = (long) i4;

        l1 = l2 + l1;

        l2 = (long) $i0;

        l1 = l1 % l2;

        i5 = (int) l1;

        i7 = i7 + 1;

        goto label2;

     label3:
        i7 = 0;

     label4:
        $i8 = i6 - i7;

        $i9 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>(25, $i8);

        $i8 = 1;

        i10 = -3;

     label5:
        if i10 >= $i9 goto label6;

        l1 = (long) i5;

        l2 = (long) i5;

        l1 = l1 * l2;

        l2 = (long) i4;

        l1 = l2 + l1;

        l2 = (long) $i0;

        l1 = l1 % l2;

        $i11 = (int) l1;

        i5 = $i11;

        $i11 = i3 - $i11;

        $i11 = staticinvoke <org.apache.commons.math3.util.FastMath: int abs(int)>($i11);

        l1 = (long) $i11;

        $b12 = 0L cmp l1;

        if $b12 != 0 goto label7;

        i6 = <org.apache.commons.math3.primes.SmallPrimes: int PRIMES_LAST>;

        i4 = i4 + i6;

        i7 = -25;

        i5 = 2;

        i6 = 1;

     label6:
        $i8 = staticinvoke <org.apache.commons.math3.util.FastMath: int abs(int)>($i8);

        $i8 = staticinvoke <org.apache.commons.math3.primes.PollardRho: int gcdPositive(int,int)>($i8, $i0);

        if 1 == $i8 goto label9;

        return $i8;

     label7:
        l2 = (long) $i8;

        l2 = l1 * l2;

        $l13 = (long) $i0;

        l2 = l2 % $l13;

        $i8 = (int) l2;

        if $i8 != 0 goto label8;

        i3 = (int) l1;

        i3 = staticinvoke <org.apache.commons.math3.util.FastMath: int abs(int)>(i3);

        $i0 = staticinvoke <org.apache.commons.math3.primes.PollardRho: int gcdPositive(int,int)>(i3, $i0);

        return $i0;

     label8:
        i10 = i10 + 1;

        goto label5;

     label9:
        i7 = i7 + 25;

        if i7 < i6 goto label4;

        i6 = i6 * 2;

        goto label1;
    }
