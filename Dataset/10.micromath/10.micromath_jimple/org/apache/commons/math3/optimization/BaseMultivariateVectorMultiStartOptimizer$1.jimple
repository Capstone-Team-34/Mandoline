org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer$1 extends java.lang.Object implements java.util.Comparator
final org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer this$0
final double[] val$target
final double[] val$weights
    void <init>(org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer, double[], double[])
    {
        org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer$1 r0;
        org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer $r1;
        double[] $r2, $r3;

        r0 := @this: org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer$1;

        $r1 := @parameter0: org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer;

        $r2 := @parameter1: double[];

        $r3 := @parameter2: double[];

        r0.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer$1: org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer this$0> = $r1;

        r0.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer$1: double[] val$target> = $r2;

        r0.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer$1: double[] val$weights> = $r3;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    private double weightedResidual(org.apache.commons.math3.optimization.PointVectorValuePair)
    {
        org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer$1 r0;
        org.apache.commons.math3.optimization.PointVectorValuePair $r1;
        double d0, d1, $d2;
        double[] $r2, $r3;
        int i0, $i1;

        r0 := @this: org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer$1;

        $r1 := @parameter0: org.apache.commons.math3.optimization.PointVectorValuePair;

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.optimization.PointVectorValuePair: double[] getValueRef()>();

        d1 = 0.0;

        i0 = 0;

     label1:
        $i1 = lengthof $r2;

        if i0 >= $i1 goto label2;

        d0 = $r2[i0];

        $r3 = r0.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer$1: double[] val$target>;

        $d2 = $r3[i0];

        d0 = d0 - $d2;

        $r3 = r0.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer$1: double[] val$weights>;

        $d2 = $r3[i0];

        $d2 = $d2 * d0;

        d0 = $d2 * d0;

        d1 = d1 + d0;

        i0 = i0 + 1;

        goto label1;

     label2:
        return d1;
    }
    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer$1 r0;
        int $i0;
        java.lang.Object $r1, $r2;
        org.apache.commons.math3.optimization.PointVectorValuePair $r3, $r4;

        r0 := @this: org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer$1;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = (org.apache.commons.math3.optimization.PointVectorValuePair) $r1;

        $r4 = (org.apache.commons.math3.optimization.PointVectorValuePair) $r2;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer$1: int compare(org.apache.commons.math3.optimization.PointVectorValuePair,org.apache.commons.math3.optimization.PointVectorValuePair)>($r3, $r4);

        return $i0;
    }
    public int compare(org.apache.commons.math3.optimization.PointVectorValuePair, org.apache.commons.math3.optimization.PointVectorValuePair)
    {
        org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer$1 r0;
        org.apache.commons.math3.optimization.PointVectorValuePair $r1, $r2;
        double $d0, $d1;
        int $i0;

        r0 := @this: org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer$1;

        $r1 := @parameter0: org.apache.commons.math3.optimization.PointVectorValuePair;

        $r2 := @parameter1: org.apache.commons.math3.optimization.PointVectorValuePair;

        if $r1 != null goto label2;

        if $r2 != null goto label1;

        return 0;

     label1:
        return 1;

     label2:
        if $r2 != null goto label3;

        return -1;

     label3:
        $d0 = specialinvoke r0.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer$1: double weightedResidual(org.apache.commons.math3.optimization.PointVectorValuePair)>($r1);

        $d1 = specialinvoke r0.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer$1: double weightedResidual(org.apache.commons.math3.optimization.PointVectorValuePair)>($r2);

        $i0 = staticinvoke <java.lang.Double: int compare(double,double)>($d0, $d1);

        return $i0;
    }
