org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer extends java.lang.Object implements org.apache.commons.math3.optimization.BaseMultivariateOptimizer
private org.apache.commons.math3.optimization.ConvergenceChecker checker
protected final org.apache.commons.math3.util.Incrementor evaluations
private org.apache.commons.math3.analysis.MultivariateFunction function
private org.apache.commons.math3.optimization.GoalType goal
private double[] lowerBound
private double[] start
private double[] upperBound
    protected void <init>()
    {
        org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer r0;
        org.apache.commons.math3.optimization.SimpleValueChecker $r1;

        r0 := @this: org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer;

        $r1 = new org.apache.commons.math3.optimization.SimpleValueChecker;

        specialinvoke $r1.<org.apache.commons.math3.optimization.SimpleValueChecker: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: void <init>(org.apache.commons.math3.optimization.ConvergenceChecker)>($r1);

        return;
    }
    protected void <init>(org.apache.commons.math3.optimization.ConvergenceChecker)
    {
        org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer r0;
        org.apache.commons.math3.optimization.ConvergenceChecker r1;
        org.apache.commons.math3.util.Incrementor $r2;

        r0 := @this: org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer;

        r1 := @parameter0: org.apache.commons.math3.optimization.ConvergenceChecker;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new org.apache.commons.math3.util.Incrementor;

        specialinvoke $r2.<org.apache.commons.math3.util.Incrementor: void <init>()>();

        r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: org.apache.commons.math3.util.Incrementor evaluations> = $r2;

        r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: org.apache.commons.math3.optimization.ConvergenceChecker checker> = r1;

        return;
    }
    private void checkParameters()
    {
        org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer r0;
        int i0, $i1;
        double d0, d1;
        double[] $r1;
        org.apache.commons.math3.exception.DimensionMismatchException $r2;
        byte $b2;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r3;
        java.lang.Double $r4, $r5;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r6;

        r0 := @this: org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer;

        $r1 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: double[] start>;

        if $r1 == null goto label12;

        $r1 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: double[] start>;

        i0 = lengthof $r1;

        $r1 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: double[] lowerBound>;

        if $r1 == null goto label04;

        $r1 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: double[] lowerBound>;

        $i1 = lengthof $r1;

        if $i1 == i0 goto label01;

        $r2 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $r1 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: double[] lowerBound>;

        $i1 = lengthof $r1;

        specialinvoke $r2.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i1, i0);

        throw $r2;

     label01:
        $i1 = 0;

     label02:
        if $i1 >= i0 goto label04;

        $r1 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: double[] start>;

        d1 = $r1[$i1];

        $r1 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: double[] lowerBound>;

        d0 = $r1[$i1];

        $b2 = d1 cmpg d0;

        if $b2 >= 0 goto label03;

        $r3 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        specialinvoke $r3.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r4, $r5, 1);

        throw $r3;

     label03:
        $i1 = $i1 + 1;

        goto label02;

     label04:
        $r1 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: double[] upperBound>;

        if $r1 == null goto label08;

        $r1 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: double[] upperBound>;

        $i1 = lengthof $r1;

        if $i1 == i0 goto label05;

        $r2 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $r1 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: double[] upperBound>;

        $i1 = lengthof $r1;

        specialinvoke $r2.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i1, i0);

        throw $r2;

     label05:
        $i1 = 0;

     label06:
        if $i1 >= i0 goto label08;

        $r1 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: double[] start>;

        d1 = $r1[$i1];

        $r1 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: double[] upperBound>;

        d0 = $r1[$i1];

        $b2 = d1 cmpl d0;

        if $b2 <= 0 goto label07;

        $r6 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        specialinvoke $r6.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r4, $r5, 1);

        throw $r6;

     label07:
        $i1 = $i1 + 1;

        goto label06;

     label08:
        $r1 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: double[] lowerBound>;

        if $r1 != null goto label10;

        $r1 = newarray (double)[i0];

        r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: double[] lowerBound> = $r1;

        $i1 = 0;

     label09:
        if $i1 >= i0 goto label10;

        $r1 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: double[] lowerBound>;

        $r1[$i1] = #-Infinity;

        $i1 = $i1 + 1;

        goto label09;

     label10:
        $r1 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: double[] upperBound>;

        if $r1 != null goto label12;

        $r1 = newarray (double)[i0];

        r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: double[] upperBound> = $r1;

        $i1 = 0;

     label11:
        if $i1 >= i0 goto label12;

        $r1 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: double[] upperBound>;

        $r1[$i1] = #Infinity;

        $i1 = $i1 + 1;

        goto label11;

     label12:
        return;
    }
    private transient void parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])
    {
        org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer r0;
        org.apache.commons.math3.optimization.OptimizationData[] $r1;
        int i0, i1;
        org.apache.commons.math3.optimization.OptimizationData r2;
        boolean $z0;
        org.apache.commons.math3.optimization.InitialGuess r3;
        double[] $r4;
        org.apache.commons.math3.optimization.SimpleBounds r5;

        r0 := @this: org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer;

        $r1 := @parameter0: org.apache.commons.math3.optimization.OptimizationData[];

        i0 = lengthof $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        r2 = $r1[i1];

        $z0 = r2 instanceof org.apache.commons.math3.optimization.InitialGuess;

        if $z0 == 0 goto label3;

        r3 = (org.apache.commons.math3.optimization.InitialGuess) r2;

        $r4 = virtualinvoke r3.<org.apache.commons.math3.optimization.InitialGuess: double[] getInitialGuess()>();

        r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: double[] start> = $r4;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $z0 = r2 instanceof org.apache.commons.math3.optimization.SimpleBounds;

        if $z0 == 0 goto label2;

        r5 = (org.apache.commons.math3.optimization.SimpleBounds) r2;

        $r4 = virtualinvoke r5.<org.apache.commons.math3.optimization.SimpleBounds: double[] getLower()>();

        r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: double[] lowerBound> = $r4;

        $r4 = virtualinvoke r5.<org.apache.commons.math3.optimization.SimpleBounds: double[] getUpper()>();

        r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: double[] upperBound> = $r4;

        goto label2;

     label4:
        return;
    }
    protected double computeObjectiveValue(double[])
    {
        org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer r0;
        double[] $r1;
        org.apache.commons.math3.exception.MaxCountExceededException r2;
        org.apache.commons.math3.util.Incrementor $r3;
        org.apache.commons.math3.analysis.MultivariateFunction $r4;
        double $d0;
        org.apache.commons.math3.exception.TooManyEvaluationsException $r5;
        java.lang.Number $r6;

        r0 := @this: org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer;

        $r1 := @parameter0: double[];

        $r3 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: org.apache.commons.math3.util.Incrementor evaluations>;

     label1:
        virtualinvoke $r3.<org.apache.commons.math3.util.Incrementor: void incrementCount()>();

     label2:
        $r4 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: org.apache.commons.math3.analysis.MultivariateFunction function>;

        $d0 = interfaceinvoke $r4.<org.apache.commons.math3.analysis.MultivariateFunction: double value(double[])>($r1);

        return $d0;

     label3:
        r2 := @caughtexception;

        $r5 = new org.apache.commons.math3.exception.TooManyEvaluationsException;

        $r6 = virtualinvoke r2.<org.apache.commons.math3.exception.MaxCountExceededException: java.lang.Number getMax()>();

        specialinvoke $r5.<org.apache.commons.math3.exception.TooManyEvaluationsException: void <init>(java.lang.Number)>($r6);

        throw $r5;

        catch org.apache.commons.math3.exception.MaxCountExceededException from label1 to label2 with label3;
    }
protected abstract org.apache.commons.math3.optimization.PointValuePair doOptimize() { 
// no body
} 
    public org.apache.commons.math3.optimization.ConvergenceChecker getConvergenceChecker()
    {
        org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer r0;
        org.apache.commons.math3.optimization.ConvergenceChecker r1;

        r0 := @this: org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer;

        r1 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: org.apache.commons.math3.optimization.ConvergenceChecker checker>;

        return r1;
    }
    public int getEvaluations()
    {
        org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer r0;
        int $i0;
        org.apache.commons.math3.util.Incrementor $r1;

        r0 := @this: org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer;

        $r1 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: org.apache.commons.math3.util.Incrementor evaluations>;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.util.Incrementor: int getCount()>();

        return $i0;
    }
    public org.apache.commons.math3.optimization.GoalType getGoalType()
    {
        org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer r0;
        org.apache.commons.math3.optimization.GoalType r1;

        r0 := @this: org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer;

        r1 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: org.apache.commons.math3.optimization.GoalType goal>;

        return r1;
    }
    public double[] getLowerBound()
    {
        org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer r0;
        java.lang.Object $r1;
        double[] $r2;

        r0 := @this: org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer;

        $r2 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: double[] lowerBound>;

        if $r2 != null goto label1;

        return null;

     label1:
        $r2 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: double[] lowerBound>;

        $r1 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (double[]) $r1;

        return $r2;
    }
    public int getMaxEvaluations()
    {
        org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer r0;
        int $i0;
        org.apache.commons.math3.util.Incrementor $r1;

        r0 := @this: org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer;

        $r1 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: org.apache.commons.math3.util.Incrementor evaluations>;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.util.Incrementor: int getMaximalCount()>();

        return $i0;
    }
    public double[] getStartPoint()
    {
        org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer r0;
        java.lang.Object $r1;
        double[] $r2;

        r0 := @this: org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer;

        $r2 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: double[] start>;

        if $r2 != null goto label1;

        return null;

     label1:
        $r2 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: double[] start>;

        $r1 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (double[]) $r1;

        return $r2;
    }
    public double[] getUpperBound()
    {
        org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer r0;
        java.lang.Object $r1;
        double[] $r2;

        r0 := @this: org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer;

        $r2 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: double[] upperBound>;

        if $r2 != null goto label1;

        return null;

     label1:
        $r2 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: double[] upperBound>;

        $r1 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (double[]) $r1;

        return $r2;
    }
    public org.apache.commons.math3.optimization.PointValuePair optimize(int, org.apache.commons.math3.analysis.MultivariateFunction, org.apache.commons.math3.optimization.GoalType, double[])
    {
        org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer r0;
        int $i0;
        org.apache.commons.math3.analysis.MultivariateFunction r1;
        org.apache.commons.math3.optimization.GoalType $r2;
        double[] $r3;
        org.apache.commons.math3.optimization.InitialGuess $r4;
        org.apache.commons.math3.optimization.PointValuePair $r5;
        org.apache.commons.math3.optimization.OptimizationData[] $r6;

        r0 := @this: org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer;

        $i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.analysis.MultivariateFunction;

        $r2 := @parameter2: org.apache.commons.math3.optimization.GoalType;

        $r3 := @parameter3: double[];

        $r6 = newarray (org.apache.commons.math3.optimization.OptimizationData)[1];

        $r4 = new org.apache.commons.math3.optimization.InitialGuess;

        specialinvoke $r4.<org.apache.commons.math3.optimization.InitialGuess: void <init>(double[])>($r3);

        $r6[0] = $r4;

        $r5 = virtualinvoke r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: org.apache.commons.math3.optimization.PointValuePair optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateFunction,org.apache.commons.math3.optimization.GoalType,org.apache.commons.math3.optimization.OptimizationData[])>($i0, r1, $r2, $r6);

        return $r5;
    }
    public transient org.apache.commons.math3.optimization.PointValuePair optimize(int, org.apache.commons.math3.analysis.MultivariateFunction, org.apache.commons.math3.optimization.GoalType, org.apache.commons.math3.optimization.OptimizationData[])
    {
        org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer r0;
        int $i0;
        org.apache.commons.math3.analysis.MultivariateFunction r1;
        org.apache.commons.math3.optimization.GoalType $r2;
        org.apache.commons.math3.optimization.OptimizationData[] $r3;
        org.apache.commons.math3.optimization.PointValuePair $r4;

        r0 := @this: org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer;

        $i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.analysis.MultivariateFunction;

        $r2 := @parameter2: org.apache.commons.math3.optimization.GoalType;

        $r3 := @parameter3: org.apache.commons.math3.optimization.OptimizationData[];

        $r4 = virtualinvoke r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: org.apache.commons.math3.optimization.PointValuePair optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateFunction,org.apache.commons.math3.optimization.GoalType,org.apache.commons.math3.optimization.OptimizationData[])>($i0, r1, $r2, $r3);

        return $r4;
    }
    protected org.apache.commons.math3.optimization.PointValuePair optimizeInternal(int, org.apache.commons.math3.analysis.MultivariateFunction, org.apache.commons.math3.optimization.GoalType, double[])
    {
        org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer r0;
        int $i0;
        org.apache.commons.math3.analysis.MultivariateFunction r1;
        org.apache.commons.math3.optimization.GoalType $r2;
        double[] $r3;
        org.apache.commons.math3.optimization.InitialGuess $r4;
        org.apache.commons.math3.optimization.PointValuePair $r5;
        org.apache.commons.math3.optimization.OptimizationData[] $r6;

        r0 := @this: org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer;

        $i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.analysis.MultivariateFunction;

        $r2 := @parameter2: org.apache.commons.math3.optimization.GoalType;

        $r3 := @parameter3: double[];

        $r6 = newarray (org.apache.commons.math3.optimization.OptimizationData)[1];

        $r4 = new org.apache.commons.math3.optimization.InitialGuess;

        specialinvoke $r4.<org.apache.commons.math3.optimization.InitialGuess: void <init>(double[])>($r3);

        $r6[0] = $r4;

        $r5 = virtualinvoke r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: org.apache.commons.math3.optimization.PointValuePair optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateFunction,org.apache.commons.math3.optimization.GoalType,org.apache.commons.math3.optimization.OptimizationData[])>($i0, r1, $r2, $r6);

        return $r5;
    }
    protected transient org.apache.commons.math3.optimization.PointValuePair optimizeInternal(int, org.apache.commons.math3.analysis.MultivariateFunction, org.apache.commons.math3.optimization.GoalType, org.apache.commons.math3.optimization.OptimizationData[]) throws org.apache.commons.math3.exception.TooManyEvaluationsException
    {
        org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer r0;
        int $i0;
        org.apache.commons.math3.analysis.MultivariateFunction r1;
        org.apache.commons.math3.optimization.GoalType $r2;
        org.apache.commons.math3.optimization.OptimizationData[] $r3;
        org.apache.commons.math3.optimization.PointValuePair $r4;
        org.apache.commons.math3.util.Incrementor $r5;

        r0 := @this: org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer;

        $i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.analysis.MultivariateFunction;

        $r2 := @parameter2: org.apache.commons.math3.optimization.GoalType;

        $r3 := @parameter3: org.apache.commons.math3.optimization.OptimizationData[];

        $r5 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: org.apache.commons.math3.util.Incrementor evaluations>;

        virtualinvoke $r5.<org.apache.commons.math3.util.Incrementor: void setMaximalCount(int)>($i0);

        $r5 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: org.apache.commons.math3.util.Incrementor evaluations>;

        virtualinvoke $r5.<org.apache.commons.math3.util.Incrementor: void resetCount()>();

        r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: org.apache.commons.math3.analysis.MultivariateFunction function> = r1;

        r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: org.apache.commons.math3.optimization.GoalType goal> = $r2;

        specialinvoke r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: void parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])>($r3);

        specialinvoke r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: void checkParameters()>();

        $r4 = virtualinvoke r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: org.apache.commons.math3.optimization.PointValuePair doOptimize()>();

        return $r4;
    }
