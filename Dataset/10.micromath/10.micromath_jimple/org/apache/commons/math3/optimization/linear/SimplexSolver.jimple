org.apache.commons.math3.optimization.linear.SimplexSolver extends org.apache.commons.math3.optimization.linear.AbstractLinearOptimizer
private static final double DEFAULT_EPSILON
private static final int DEFAULT_ULPS
private final double epsilon
private final int maxUlps
    public void <init>()
    {
        org.apache.commons.math3.optimization.linear.SimplexSolver r0;

        r0 := @this: org.apache.commons.math3.optimization.linear.SimplexSolver;

        specialinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexSolver: void <init>(double,int)>(1.0E-6, 10);

        return;
    }
    public void <init>(double, int)
    {
        org.apache.commons.math3.optimization.linear.SimplexSolver r0;
        double $d0;
        int $i0;

        r0 := @this: org.apache.commons.math3.optimization.linear.SimplexSolver;

        $d0 := @parameter0: double;

        $i0 := @parameter1: int;

        specialinvoke r0.<org.apache.commons.math3.optimization.linear.AbstractLinearOptimizer: void <init>()>();

        r0.<org.apache.commons.math3.optimization.linear.SimplexSolver: double epsilon> = $d0;

        r0.<org.apache.commons.math3.optimization.linear.SimplexSolver: int maxUlps> = $i0;

        return;
    }
    private java.lang.Integer getPivotColumn(org.apache.commons.math3.optimization.linear.SimplexTableau)
    {
        org.apache.commons.math3.optimization.linear.SimplexSolver r0;
        org.apache.commons.math3.optimization.linear.SimplexTableau $r1;
        double d0, $d1;
        java.lang.Integer r2;
        int $i0, $i1;
        byte $b2;

        r0 := @this: org.apache.commons.math3.optimization.linear.SimplexSolver;

        $r1 := @parameter0: org.apache.commons.math3.optimization.linear.SimplexTableau;

        d0 = 0.0;

        r2 = null;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.optimization.linear.SimplexTableau: int getNumObjectiveFunctions()>();

     label1:
        $i1 = virtualinvoke $r1.<org.apache.commons.math3.optimization.linear.SimplexTableau: int getWidth()>();

        $i1 = $i1 + -1;

        if $i0 >= $i1 goto label3;

        $d1 = virtualinvoke $r1.<org.apache.commons.math3.optimization.linear.SimplexTableau: double getEntry(int,int)>(0, $i0);

        $b2 = $d1 cmpg d0;

        if $b2 >= 0 goto label2;

        d0 = $d1;

        r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        return r2;
    }
    private java.lang.Integer getPivotRow(org.apache.commons.math3.optimization.linear.SimplexTableau, int)
    {
        org.apache.commons.math3.optimization.linear.SimplexSolver r0;
        org.apache.commons.math3.optimization.linear.SimplexTableau $r1;
        int $i0, i1, i2, i3;
        double d0, d1, $d2;
        java.util.ArrayList r2;
        java.lang.Integer $r3, $r6, $r7;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;

        r0 := @this: org.apache.commons.math3.optimization.linear.SimplexSolver;

        $r1 := @parameter0: org.apache.commons.math3.optimization.linear.SimplexTableau;

        $i0 := @parameter1: int;

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        d1 = 1.7976931348623157E308;

        i1 = virtualinvoke $r1.<org.apache.commons.math3.optimization.linear.SimplexTableau: int getNumObjectiveFunctions()>();

     label01:
        i2 = virtualinvoke $r1.<org.apache.commons.math3.optimization.linear.SimplexTableau: int getHeight()>();

        if i1 >= i2 goto label04;

        i2 = virtualinvoke $r1.<org.apache.commons.math3.optimization.linear.SimplexTableau: int getWidth()>();

        i2 = i2 + -1;

        d0 = virtualinvoke $r1.<org.apache.commons.math3.optimization.linear.SimplexTableau: double getEntry(int,int)>(i1, i2);

        $d2 = virtualinvoke $r1.<org.apache.commons.math3.optimization.linear.SimplexTableau: double getEntry(int,int)>(i1, $i0);

        i2 = r0.<org.apache.commons.math3.optimization.linear.SimplexSolver: int maxUlps>;

        i2 = staticinvoke <org.apache.commons.math3.util.Precision: int compareTo(double,double,int)>($d2, 0.0, i2);

        if i2 <= 0 goto label02;

        d0 = d0 / $d2;

        i2 = staticinvoke <java.lang.Double: int compare(double,double)>(d0, d1);

        if i2 != 0 goto label03;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r3);

     label02:
        i1 = i1 + 1;

        goto label01;

     label03:
        if i2 >= 0 goto label02;

        d1 = d0;

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r3);

        goto label02;

     label04:
        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        if $i0 != 0 goto label05;

        return null;

     label05:
        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        if $i0 <= 1 goto label14;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.optimization.linear.SimplexTableau: int getNumArtificialVariables()>();

        if $i0 <= 0 goto label09;

        $r4 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label06:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label09;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (java.lang.Integer) $r5;

        $i0 = 0;

     label07:
        i1 = virtualinvoke $r1.<org.apache.commons.math3.optimization.linear.SimplexTableau: int getNumArtificialVariables()>();

        if $i0 >= i1 goto label06;

        i1 = virtualinvoke $r1.<org.apache.commons.math3.optimization.linear.SimplexTableau: int getArtificialVariableOffset()>();

        i1 = $i0 + i1;

        i2 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        d1 = virtualinvoke $r1.<org.apache.commons.math3.optimization.linear.SimplexTableau: double getEntry(int,int)>(i2, i1);

        i2 = r0.<org.apache.commons.math3.optimization.linear.SimplexSolver: int maxUlps>;

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,int)>(d1, 1.0, i2);

        if $z0 == 0 goto label08;

        $r6 = virtualinvoke $r1.<org.apache.commons.math3.optimization.linear.SimplexTableau: java.lang.Integer getBasicRow(int)>(i1);

        $z0 = virtualinvoke $r3.<java.lang.Integer: boolean equals(java.lang.Object)>($r6);

        if $z0 != 0 goto label15;

     label08:
        $i0 = $i0 + 1;

        goto label07;

     label09:
        $i0 = virtualinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexSolver: int getIterations()>();

        i1 = virtualinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexSolver: int getMaxIterations()>();

        i1 = i1 / 2;

        if $i0 >= i1 goto label14;

        $r3 = null;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.optimization.linear.SimplexTableau: int getWidth()>();

        i1 = virtualinvoke $r1.<org.apache.commons.math3.optimization.linear.SimplexTableau: int getNumObjectiveFunctions()>();

        i2 = virtualinvoke $r1.<org.apache.commons.math3.optimization.linear.SimplexTableau: int getWidth()>();

        i2 = i2 + -1;

        $r4 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label10:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label13;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.lang.Integer) $r5;

        i3 = i1;

     label11:
        if i3 >= i2 goto label10;

        $z0 = virtualinvoke $r6.<java.lang.Integer: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label10;

        $r7 = virtualinvoke $r1.<org.apache.commons.math3.optimization.linear.SimplexTableau: java.lang.Integer getBasicRow(int)>(i3);

        if $r7 == null goto label12;

        $z0 = virtualinvoke $r7.<java.lang.Integer: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label12;

        if i3 >= $i0 goto label12;

        $i0 = i3;

        $r3 = $r6;

     label12:
        i3 = i3 + 1;

        goto label11;

     label13:
        return $r3;

     label14:
        $r5 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = (java.lang.Integer) $r5;

     label15:
        return $r3;
    }
    protected void doIteration(org.apache.commons.math3.optimization.linear.SimplexTableau) throws org.apache.commons.math3.exception.MaxCountExceededException, org.apache.commons.math3.optimization.linear.UnboundedSolutionException
    {
        org.apache.commons.math3.optimization.linear.SimplexSolver r0;
        org.apache.commons.math3.optimization.linear.SimplexTableau $r1;
        java.lang.Integer $r2, $r3;
        int $i0, $i1;
        org.apache.commons.math3.optimization.linear.UnboundedSolutionException $r4;
        double $d0;

        r0 := @this: org.apache.commons.math3.optimization.linear.SimplexSolver;

        $r1 := @parameter0: org.apache.commons.math3.optimization.linear.SimplexTableau;

        virtualinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexSolver: void incrementIterationsCounter()>();

        $r2 = specialinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexSolver: java.lang.Integer getPivotColumn(org.apache.commons.math3.optimization.linear.SimplexTableau)>($r1);

        $i0 = virtualinvoke $r2.<java.lang.Integer: int intValue()>();

        $r3 = specialinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexSolver: java.lang.Integer getPivotRow(org.apache.commons.math3.optimization.linear.SimplexTableau,int)>($r1, $i0);

        if $r3 != null goto label1;

        $r4 = new org.apache.commons.math3.optimization.linear.UnboundedSolutionException;

        specialinvoke $r4.<org.apache.commons.math3.optimization.linear.UnboundedSolutionException: void <init>()>();

        throw $r4;

     label1:
        $i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        $i1 = virtualinvoke $r2.<java.lang.Integer: int intValue()>();

        $d0 = virtualinvoke $r1.<org.apache.commons.math3.optimization.linear.SimplexTableau: double getEntry(int,int)>($i0, $i1);

        $i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        virtualinvoke $r1.<org.apache.commons.math3.optimization.linear.SimplexTableau: void divideRow(int,double)>($i0, $d0);

        $i0 = 0;

     label2:
        $i1 = virtualinvoke $r1.<org.apache.commons.math3.optimization.linear.SimplexTableau: int getHeight()>();

        if $i0 >= $i1 goto label4;

        $i1 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        if $i0 == $i1 goto label3;

        $i1 = virtualinvoke $r2.<java.lang.Integer: int intValue()>();

        $d0 = virtualinvoke $r1.<org.apache.commons.math3.optimization.linear.SimplexTableau: double getEntry(int,int)>($i0, $i1);

        $i1 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        virtualinvoke $r1.<org.apache.commons.math3.optimization.linear.SimplexTableau: void subtractRow(int,int,double)>($i0, $i1, $d0);

     label3:
        $i0 = $i0 + 1;

        goto label2;

     label4:
        return;
    }
    public org.apache.commons.math3.optimization.PointValuePair doOptimize() throws org.apache.commons.math3.exception.MaxCountExceededException, org.apache.commons.math3.optimization.linear.UnboundedSolutionException, org.apache.commons.math3.optimization.linear.NoFeasibleSolutionException
    {
        org.apache.commons.math3.optimization.linear.SimplexSolver r0;
        org.apache.commons.math3.optimization.linear.SimplexTableau r1;
        double $d0;
        int $i0;
        org.apache.commons.math3.optimization.linear.LinearObjectiveFunction $r2;
        java.util.Collection $r3;
        org.apache.commons.math3.optimization.GoalType $r4;
        boolean $z0;
        org.apache.commons.math3.optimization.PointValuePair $r5;

        r0 := @this: org.apache.commons.math3.optimization.linear.SimplexSolver;

        r1 = new org.apache.commons.math3.optimization.linear.SimplexTableau;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexSolver: org.apache.commons.math3.optimization.linear.LinearObjectiveFunction getFunction()>();

        $r3 = virtualinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexSolver: java.util.Collection getConstraints()>();

        $r4 = virtualinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexSolver: org.apache.commons.math3.optimization.GoalType getGoalType()>();

        $z0 = virtualinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexSolver: boolean restrictToNonNegative()>();

        $d0 = r0.<org.apache.commons.math3.optimization.linear.SimplexSolver: double epsilon>;

        $i0 = r0.<org.apache.commons.math3.optimization.linear.SimplexSolver: int maxUlps>;

        specialinvoke r1.<org.apache.commons.math3.optimization.linear.SimplexTableau: void <init>(org.apache.commons.math3.optimization.linear.LinearObjectiveFunction,java.util.Collection,org.apache.commons.math3.optimization.GoalType,boolean,double,int)>($r2, $r3, $r4, $z0, $d0, $i0);

        virtualinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexSolver: void solvePhase1(org.apache.commons.math3.optimization.linear.SimplexTableau)>(r1);

        virtualinvoke r1.<org.apache.commons.math3.optimization.linear.SimplexTableau: void dropPhase1Objective()>();

     label1:
        $z0 = virtualinvoke r1.<org.apache.commons.math3.optimization.linear.SimplexTableau: boolean isOptimal()>();

        if $z0 != 0 goto label2;

        virtualinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexSolver: void doIteration(org.apache.commons.math3.optimization.linear.SimplexTableau)>(r1);

        goto label1;

     label2:
        $r5 = virtualinvoke r1.<org.apache.commons.math3.optimization.linear.SimplexTableau: org.apache.commons.math3.optimization.PointValuePair getSolution()>();

        return $r5;
    }
    protected void solvePhase1(org.apache.commons.math3.optimization.linear.SimplexTableau) throws org.apache.commons.math3.exception.MaxCountExceededException, org.apache.commons.math3.optimization.linear.UnboundedSolutionException, org.apache.commons.math3.optimization.linear.NoFeasibleSolutionException
    {
        org.apache.commons.math3.optimization.linear.SimplexSolver r0;
        org.apache.commons.math3.optimization.linear.SimplexTableau $r1;
        double $d0, $d1;
        int $i0;
        boolean $z0;
        org.apache.commons.math3.optimization.linear.NoFeasibleSolutionException $r2;

        r0 := @this: org.apache.commons.math3.optimization.linear.SimplexSolver;

        $r1 := @parameter0: org.apache.commons.math3.optimization.linear.SimplexTableau;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.optimization.linear.SimplexTableau: int getNumArtificialVariables()>();

        if $i0 != 0 goto label1;

        return;

     label1:
        $z0 = virtualinvoke $r1.<org.apache.commons.math3.optimization.linear.SimplexTableau: boolean isOptimal()>();

        if $z0 != 0 goto label2;

        virtualinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexSolver: void doIteration(org.apache.commons.math3.optimization.linear.SimplexTableau)>($r1);

        goto label1;

     label2:
        $i0 = virtualinvoke $r1.<org.apache.commons.math3.optimization.linear.SimplexTableau: int getRhsOffset()>();

        $d1 = virtualinvoke $r1.<org.apache.commons.math3.optimization.linear.SimplexTableau: double getEntry(int,int)>(0, $i0);

        $d0 = r0.<org.apache.commons.math3.optimization.linear.SimplexSolver: double epsilon>;

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,double)>($d1, 0.0, $d0);

        if $z0 != 0 goto label3;

        $r2 = new org.apache.commons.math3.optimization.linear.NoFeasibleSolutionException;

        specialinvoke $r2.<org.apache.commons.math3.optimization.linear.NoFeasibleSolutionException: void <init>()>();

        throw $r2;

     label3:
        return;
    }
