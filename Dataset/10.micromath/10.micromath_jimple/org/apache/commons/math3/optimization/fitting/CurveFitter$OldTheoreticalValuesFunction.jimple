org.apache.commons.math3.optimization.fitting.CurveFitter$OldTheoreticalValuesFunction extends java.lang.Object implements org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction
private final org.apache.commons.math3.analysis.ParametricUnivariateFunction f
final org.apache.commons.math3.optimization.fitting.CurveFitter this$0
    void <init>(org.apache.commons.math3.optimization.fitting.CurveFitter, org.apache.commons.math3.analysis.ParametricUnivariateFunction)
    {
        org.apache.commons.math3.optimization.fitting.CurveFitter$OldTheoreticalValuesFunction r0;
        org.apache.commons.math3.optimization.fitting.CurveFitter $r1;
        org.apache.commons.math3.analysis.ParametricUnivariateFunction $r2;

        r0 := @this: org.apache.commons.math3.optimization.fitting.CurveFitter$OldTheoreticalValuesFunction;

        $r1 := @parameter0: org.apache.commons.math3.optimization.fitting.CurveFitter;

        $r2 := @parameter1: org.apache.commons.math3.analysis.ParametricUnivariateFunction;

        r0.<org.apache.commons.math3.optimization.fitting.CurveFitter$OldTheoreticalValuesFunction: org.apache.commons.math3.optimization.fitting.CurveFitter this$0> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.optimization.fitting.CurveFitter$OldTheoreticalValuesFunction: org.apache.commons.math3.analysis.ParametricUnivariateFunction f> = $r2;

        return;
    }
    static org.apache.commons.math3.analysis.ParametricUnivariateFunction access$100(org.apache.commons.math3.optimization.fitting.CurveFitter$OldTheoreticalValuesFunction)
    {
        org.apache.commons.math3.optimization.fitting.CurveFitter$OldTheoreticalValuesFunction $r0;
        org.apache.commons.math3.analysis.ParametricUnivariateFunction r1;

        $r0 := @parameter0: org.apache.commons.math3.optimization.fitting.CurveFitter$OldTheoreticalValuesFunction;

        r1 = $r0.<org.apache.commons.math3.optimization.fitting.CurveFitter$OldTheoreticalValuesFunction: org.apache.commons.math3.analysis.ParametricUnivariateFunction f>;

        return r1;
    }
    public org.apache.commons.math3.analysis.MultivariateMatrixFunction jacobian()
    {
        org.apache.commons.math3.optimization.fitting.CurveFitter$OldTheoreticalValuesFunction r0;
        org.apache.commons.math3.optimization.fitting.CurveFitter$OldTheoreticalValuesFunction$1 $r1;

        r0 := @this: org.apache.commons.math3.optimization.fitting.CurveFitter$OldTheoreticalValuesFunction;

        $r1 = new org.apache.commons.math3.optimization.fitting.CurveFitter$OldTheoreticalValuesFunction$1;

        specialinvoke $r1.<org.apache.commons.math3.optimization.fitting.CurveFitter$OldTheoreticalValuesFunction$1: void <init>(org.apache.commons.math3.optimization.fitting.CurveFitter$OldTheoreticalValuesFunction)>(r0);

        return $r1;
    }
    public double[] value(double[])
    {
        org.apache.commons.math3.optimization.fitting.CurveFitter$OldTheoreticalValuesFunction r0;
        double[] $r1, r2;
        int i0, i1;
        org.apache.commons.math3.optimization.fitting.CurveFitter $r3;
        java.util.List $r4;
        java.util.Iterator $r5;
        boolean $z0;
        java.lang.Object $r6;
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint r7;
        org.apache.commons.math3.analysis.ParametricUnivariateFunction $r8;
        double $d0;

        r0 := @this: org.apache.commons.math3.optimization.fitting.CurveFitter$OldTheoreticalValuesFunction;

        $r1 := @parameter0: double[];

        $r3 = r0.<org.apache.commons.math3.optimization.fitting.CurveFitter$OldTheoreticalValuesFunction: org.apache.commons.math3.optimization.fitting.CurveFitter this$0>;

        $r4 = staticinvoke <org.apache.commons.math3.optimization.fitting.CurveFitter: java.util.List access$000(org.apache.commons.math3.optimization.fitting.CurveFitter)>($r3);

        i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        r2 = newarray (double)[i0];

        i1 = 0;

        $r3 = r0.<org.apache.commons.math3.optimization.fitting.CurveFitter$OldTheoreticalValuesFunction: org.apache.commons.math3.optimization.fitting.CurveFitter this$0>;

        $r4 = staticinvoke <org.apache.commons.math3.optimization.fitting.CurveFitter: java.util.List access$000(org.apache.commons.math3.optimization.fitting.CurveFitter)>($r3);

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.commons.math3.optimization.fitting.WeightedObservedPoint) $r6;

        $r8 = r0.<org.apache.commons.math3.optimization.fitting.CurveFitter$OldTheoreticalValuesFunction: org.apache.commons.math3.analysis.ParametricUnivariateFunction f>;

        $d0 = virtualinvoke r7.<org.apache.commons.math3.optimization.fitting.WeightedObservedPoint: double getX()>();

        $d0 = interfaceinvoke $r8.<org.apache.commons.math3.analysis.ParametricUnivariateFunction: double value(double,double[])>($d0, $r1);

        r2[i1] = $d0;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r2;
    }
