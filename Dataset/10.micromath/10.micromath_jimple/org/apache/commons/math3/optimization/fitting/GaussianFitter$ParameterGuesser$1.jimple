org.apache.commons.math3.optimization.fitting.GaussianFitter$ParameterGuesser$1 extends java.lang.Object implements java.util.Comparator
final org.apache.commons.math3.optimization.fitting.GaussianFitter$ParameterGuesser this$0
    void <init>(org.apache.commons.math3.optimization.fitting.GaussianFitter$ParameterGuesser)
    {
        org.apache.commons.math3.optimization.fitting.GaussianFitter$ParameterGuesser$1 r0;
        org.apache.commons.math3.optimization.fitting.GaussianFitter$ParameterGuesser $r1;

        r0 := @this: org.apache.commons.math3.optimization.fitting.GaussianFitter$ParameterGuesser$1;

        $r1 := @parameter0: org.apache.commons.math3.optimization.fitting.GaussianFitter$ParameterGuesser;

        r0.<org.apache.commons.math3.optimization.fitting.GaussianFitter$ParameterGuesser$1: org.apache.commons.math3.optimization.fitting.GaussianFitter$ParameterGuesser this$0> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        org.apache.commons.math3.optimization.fitting.GaussianFitter$ParameterGuesser$1 r0;
        int $i0;
        java.lang.Object $r1, $r2;
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint $r3, $r4;

        r0 := @this: org.apache.commons.math3.optimization.fitting.GaussianFitter$ParameterGuesser$1;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = (org.apache.commons.math3.optimization.fitting.WeightedObservedPoint) $r1;

        $r4 = (org.apache.commons.math3.optimization.fitting.WeightedObservedPoint) $r2;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.optimization.fitting.GaussianFitter$ParameterGuesser$1: int compare(org.apache.commons.math3.optimization.fitting.WeightedObservedPoint,org.apache.commons.math3.optimization.fitting.WeightedObservedPoint)>($r3, $r4);

        return $i0;
    }
    public int compare(org.apache.commons.math3.optimization.fitting.WeightedObservedPoint, org.apache.commons.math3.optimization.fitting.WeightedObservedPoint)
    {
        org.apache.commons.math3.optimization.fitting.GaussianFitter$ParameterGuesser$1 r0;
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint $r1, $r2;
        double $d0, $d1;
        int $i0;

        r0 := @this: org.apache.commons.math3.optimization.fitting.GaussianFitter$ParameterGuesser$1;

        $r1 := @parameter0: org.apache.commons.math3.optimization.fitting.WeightedObservedPoint;

        $r2 := @parameter1: org.apache.commons.math3.optimization.fitting.WeightedObservedPoint;

        if $r1 != null goto label1;

        if $r2 != null goto label1;

        return 0;

     label1:
        if $r1 != null goto label2;

        return -1;

     label2:
        if $r2 != null goto label3;

        return 1;

     label3:
        $d0 = virtualinvoke $r1.<org.apache.commons.math3.optimization.fitting.WeightedObservedPoint: double getX()>();

        $d1 = virtualinvoke $r2.<org.apache.commons.math3.optimization.fitting.WeightedObservedPoint: double getX()>();

        $i0 = staticinvoke <java.lang.Double: int compare(double,double)>($d0, $d1);

        if $i0 >= 0 goto label4;

        return -1;

     label4:
        if $i0 <= 0 goto label5;

        return 1;

     label5:
        $d0 = virtualinvoke $r1.<org.apache.commons.math3.optimization.fitting.WeightedObservedPoint: double getY()>();

        $d1 = virtualinvoke $r2.<org.apache.commons.math3.optimization.fitting.WeightedObservedPoint: double getY()>();

        $i0 = staticinvoke <java.lang.Double: int compare(double,double)>($d0, $d1);

        if $i0 >= 0 goto label6;

        return -1;

     label6:
        if $i0 <= 0 goto label7;

        return 1;

     label7:
        $d0 = virtualinvoke $r1.<org.apache.commons.math3.optimization.fitting.WeightedObservedPoint: double getWeight()>();

        $d1 = virtualinvoke $r2.<org.apache.commons.math3.optimization.fitting.WeightedObservedPoint: double getWeight()>();

        $i0 = staticinvoke <java.lang.Double: int compare(double,double)>($d0, $d1);

        if $i0 >= 0 goto label8;

        return -1;

     label8:
        if $i0 <= 0 goto label9;

        return 1;

     label9:
        return 0;
    }
