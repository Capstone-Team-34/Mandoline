org.apache.commons.math3.optimization.direct.CMAESOptimizer extends org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateSimpleBoundsOptimizer implements org.apache.commons.math3.optimization.MultivariateOptimizer
public static final int DEFAULT_CHECKFEASABLECOUNT
public static final int DEFAULT_DIAGONALONLY
public static final boolean DEFAULT_ISACTIVECMA
public static final int DEFAULT_MAXITERATIONS
public static final org.apache.commons.math3.random.RandomGenerator DEFAULT_RANDOMGENERATOR
public static final double DEFAULT_STOPFITNESS
private org.apache.commons.math3.linear.RealMatrix B
private org.apache.commons.math3.linear.RealMatrix BD
private org.apache.commons.math3.linear.RealMatrix C
private org.apache.commons.math3.linear.RealMatrix D
private double cc
private double ccov1
private double ccov1Sep
private double ccovmu
private double ccovmuSep
private int checkFeasableCount
private double chiN
private double cs
private double damps
private org.apache.commons.math3.linear.RealMatrix diagC
private org.apache.commons.math3.linear.RealMatrix diagD
private int diagonalOnly
private int dimension
private double[] fitnessHistory
private boolean generateStatistics
private int historySize
private double[] inputSigma
private boolean isActiveCMA
private boolean isMinimize
private int iterations
private int lambda
private double logMu2
private int maxIterations
private int mu
private double mueff
private double normps
private org.apache.commons.math3.linear.RealMatrix pc
private org.apache.commons.math3.linear.RealMatrix ps
private org.apache.commons.math3.random.RandomGenerator random
private double sigma
private java.util.List statisticsDHistory
private java.util.List statisticsFitnessHistory
private java.util.List statisticsMeanHistory
private java.util.List statisticsSigmaHistory
private double stopFitness
private double stopTolFun
private double stopTolHistFun
private double stopTolUpX
private double stopTolX
private org.apache.commons.math3.linear.RealMatrix weights
private org.apache.commons.math3.linear.RealMatrix xmean
    static void <clinit>()
    {
        org.apache.commons.math3.random.MersenneTwister $r0;

        $r0 = new org.apache.commons.math3.random.MersenneTwister;

        specialinvoke $r0.<org.apache.commons.math3.random.MersenneTwister: void <init>()>();

        <org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.random.RandomGenerator DEFAULT_RANDOMGENERATOR> = $r0;

        return;
    }
    public void <init>()
    {
        org.apache.commons.math3.optimization.direct.CMAESOptimizer r0;

        r0 := @this: org.apache.commons.math3.optimization.direct.CMAESOptimizer;

        specialinvoke r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: void <init>(int)>(0);

        return;
    }
    public void <init>(int)
    {
        org.apache.commons.math3.optimization.direct.CMAESOptimizer r0;
        int $i0;
        org.apache.commons.math3.random.RandomGenerator $r1;

        r0 := @this: org.apache.commons.math3.optimization.direct.CMAESOptimizer;

        $i0 := @parameter0: int;

        $r1 = <org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.random.RandomGenerator DEFAULT_RANDOMGENERATOR>;

        specialinvoke r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: void <init>(int,double[],int,double,boolean,int,int,org.apache.commons.math3.random.RandomGenerator,boolean,org.apache.commons.math3.optimization.ConvergenceChecker)>($i0, null, 30000, 0.0, 1, 0, 0, $r1, 0, null);

        return;
    }
    public void <init>(int, double, boolean, int, int, org.apache.commons.math3.random.RandomGenerator, boolean, org.apache.commons.math3.optimization.ConvergenceChecker)
    {
        org.apache.commons.math3.optimization.direct.CMAESOptimizer r0;
        int $i0, $i1, $i2;
        double $d0;
        boolean $z0, $z1;
        org.apache.commons.math3.random.RandomGenerator $r1;
        org.apache.commons.math3.optimization.ConvergenceChecker r2;
        java.util.ArrayList $r3;

        r0 := @this: org.apache.commons.math3.optimization.direct.CMAESOptimizer;

        $i0 := @parameter0: int;

        $d0 := @parameter1: double;

        $z0 := @parameter2: boolean;

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        $r1 := @parameter5: org.apache.commons.math3.random.RandomGenerator;

        $z1 := @parameter6: boolean;

        r2 := @parameter7: org.apache.commons.math3.optimization.ConvergenceChecker;

        specialinvoke r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateSimpleBoundsOptimizer: void <init>(org.apache.commons.math3.optimization.ConvergenceChecker)>(r2);

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int diagonalOnly> = 0;

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: boolean isMinimize> = 1;

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: boolean generateStatistics> = 0;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: java.util.List statisticsSigmaHistory> = $r3;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: java.util.List statisticsMeanHistory> = $r3;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: java.util.List statisticsFitnessHistory> = $r3;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: java.util.List statisticsDHistory> = $r3;

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int maxIterations> = $i0;

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double stopFitness> = $d0;

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: boolean isActiveCMA> = $z0;

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int diagonalOnly> = $i1;

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int checkFeasableCount> = $i2;

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.random.RandomGenerator random> = $r1;

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: boolean generateStatistics> = $z1;

        return;
    }
    public void <init>(int, double[])
    {
        org.apache.commons.math3.optimization.direct.CMAESOptimizer r0;
        int $i0;
        double[] $r1;
        org.apache.commons.math3.random.RandomGenerator $r2;

        r0 := @this: org.apache.commons.math3.optimization.direct.CMAESOptimizer;

        $i0 := @parameter0: int;

        $r1 := @parameter1: double[];

        $r2 = <org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.random.RandomGenerator DEFAULT_RANDOMGENERATOR>;

        specialinvoke r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: void <init>(int,double[],int,double,boolean,int,int,org.apache.commons.math3.random.RandomGenerator,boolean)>($i0, $r1, 30000, 0.0, 1, 0, 0, $r2, 0);

        return;
    }
    public void <init>(int, double[], int, double, boolean, int, int, org.apache.commons.math3.random.RandomGenerator, boolean)
    {
        org.apache.commons.math3.optimization.direct.CMAESOptimizer r0;
        int $i0, $i1, $i2, $i3;
        double[] $r1;
        double $d0;
        boolean $z0, $z1;
        org.apache.commons.math3.random.RandomGenerator $r2;
        org.apache.commons.math3.optimization.SimpleValueChecker $r3;

        r0 := @this: org.apache.commons.math3.optimization.direct.CMAESOptimizer;

        $i0 := @parameter0: int;

        $r1 := @parameter1: double[];

        $i1 := @parameter2: int;

        $d0 := @parameter3: double;

        $z0 := @parameter4: boolean;

        $i2 := @parameter5: int;

        $i3 := @parameter6: int;

        $r2 := @parameter7: org.apache.commons.math3.random.RandomGenerator;

        $z1 := @parameter8: boolean;

        $r3 = new org.apache.commons.math3.optimization.SimpleValueChecker;

        specialinvoke $r3.<org.apache.commons.math3.optimization.SimpleValueChecker: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: void <init>(int,double[],int,double,boolean,int,int,org.apache.commons.math3.random.RandomGenerator,boolean,org.apache.commons.math3.optimization.ConvergenceChecker)>($i0, $r1, $i1, $d0, $z0, $i2, $i3, $r2, $z1, $r3);

        return;
    }
    public void <init>(int, double[], int, double, boolean, int, int, org.apache.commons.math3.random.RandomGenerator, boolean, org.apache.commons.math3.optimization.ConvergenceChecker)
    {
        org.apache.commons.math3.optimization.direct.CMAESOptimizer r0;
        int $i0, $i1, $i2, $i3;
        double[] $r1;
        double $d0;
        boolean $z0, $z1;
        org.apache.commons.math3.random.RandomGenerator $r2;
        org.apache.commons.math3.optimization.ConvergenceChecker r3;
        java.lang.Object $r4;
        java.util.ArrayList $r5;

        r0 := @this: org.apache.commons.math3.optimization.direct.CMAESOptimizer;

        $i0 := @parameter0: int;

        $r1 := @parameter1: double[];

        $i1 := @parameter2: int;

        $d0 := @parameter3: double;

        $z0 := @parameter4: boolean;

        $i2 := @parameter5: int;

        $i3 := @parameter6: int;

        $r2 := @parameter7: org.apache.commons.math3.random.RandomGenerator;

        $z1 := @parameter8: boolean;

        r3 := @parameter9: org.apache.commons.math3.optimization.ConvergenceChecker;

        specialinvoke r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateSimpleBoundsOptimizer: void <init>(org.apache.commons.math3.optimization.ConvergenceChecker)>(r3);

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int diagonalOnly> = 0;

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: boolean isMinimize> = 1;

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: boolean generateStatistics> = 0;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: java.util.List statisticsSigmaHistory> = $r5;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: java.util.List statisticsMeanHistory> = $r5;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: java.util.List statisticsFitnessHistory> = $r5;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: java.util.List statisticsDHistory> = $r5;

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int lambda> = $i0;

        if $r1 != null goto label2;

        $r1 = null;

     label1:
        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double[] inputSigma> = $r1;

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int maxIterations> = $i1;

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double stopFitness> = $d0;

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: boolean isActiveCMA> = $z0;

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int diagonalOnly> = $i2;

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int checkFeasableCount> = $i3;

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.random.RandomGenerator random> = $r2;

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: boolean generateStatistics> = $z1;

        return;

     label2:
        $r4 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r1 = (double[]) $r4;

        goto label1;
    }
    static boolean access$200(org.apache.commons.math3.optimization.direct.CMAESOptimizer)
    {
        org.apache.commons.math3.optimization.direct.CMAESOptimizer $r0;
        boolean z0;

        $r0 := @parameter0: org.apache.commons.math3.optimization.direct.CMAESOptimizer;

        z0 = $r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: boolean isMinimize>;

        return z0;
    }
    private void checkParameters()
    {
        org.apache.commons.math3.optimization.direct.CMAESOptimizer r0;
        double $d0, $d1, $d2;
        double[] $r1, $r2, $r3, $r4;
        int $i0, $i1;
        org.apache.commons.math3.exception.DimensionMismatchException $r5;
        byte $b2;
        org.apache.commons.math3.exception.NotPositiveException $r6;
        java.lang.Double $r7, $r10;
        org.apache.commons.math3.exception.OutOfRangeException $r8;
        java.lang.Integer $r9;

        r0 := @this: org.apache.commons.math3.optimization.direct.CMAESOptimizer;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double[] getStartPoint()>();

        $r2 = virtualinvoke r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double[] getLowerBound()>();

        $r3 = virtualinvoke r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double[] getUpperBound()>();

        $r4 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double[] inputSigma>;

        if $r4 == null goto label5;

        $r4 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double[] inputSigma>;

        $i0 = lengthof $r4;

        $i1 = lengthof $r1;

        if $i0 == $i1 goto label1;

        $r5 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $r2 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double[] inputSigma>;

        $i0 = lengthof $r2;

        $i1 = lengthof $r1;

        specialinvoke $r5.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i0, $i1);

        throw $r5;

     label1:
        $i0 = 0;

     label2:
        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label5;

        $r4 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double[] inputSigma>;

        $d0 = $r4[$i0];

        $b2 = $d0 cmpg 0.0;

        if $b2 >= 0 goto label3;

        $r6 = new org.apache.commons.math3.exception.NotPositiveException;

        $r1 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double[] inputSigma>;

        $d0 = $r1[$i0];

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        specialinvoke $r6.<org.apache.commons.math3.exception.NotPositiveException: void <init>(java.lang.Number)>($r7);

        throw $r6;

     label3:
        $r4 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double[] inputSigma>;

        $d0 = $r4[$i0];

        $d1 = $r3[$i0];

        $d2 = $r2[$i0];

        $d1 = $d1 - $d2;

        $b2 = $d0 cmpl $d1;

        if $b2 <= 0 goto label4;

        $r8 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r1 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double[] inputSigma>;

        $d0 = $r1[$i0];

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $d1 = $r3[$i0];

        $d0 = $r2[$i0];

        $d0 = $d1 - $d0;

        $r10 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        specialinvoke $r8.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r7, $r9, $r10);

        throw $r8;

     label4:
        $i0 = $i0 + 1;

        goto label2;

     label5:
        return;
    }
    private static void copyColumn(org.apache.commons.math3.linear.RealMatrix, int, org.apache.commons.math3.linear.RealMatrix, int)
    {
        org.apache.commons.math3.linear.RealMatrix $r0, $r1;
        int $i0, $i1, i2, $i3;
        double $d0;

        $r0 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        $i0 := @parameter1: int;

        $r1 := @parameter2: org.apache.commons.math3.linear.RealMatrix;

        $i1 := @parameter3: int;

        i2 = 0;

     label1:
        $i3 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        if i2 >= $i3 goto label2;

        $d0 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>(i2, $i0);

        interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: void setEntry(int,int,double)>(i2, $i1, $d0);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }
    private static org.apache.commons.math3.linear.RealMatrix diag(org.apache.commons.math3.linear.RealMatrix)
    {
        org.apache.commons.math3.linear.RealMatrix $r0;
        int $i0, $i1;
        int[] $r1;
        java.lang.Class $r2;
        java.lang.Object $r3;
        double[][] r4;
        double[] $r5;
        double $d0;
        org.apache.commons.math3.linear.Array2DRowRealMatrix $r6;

        $r0 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        $i0 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        if $i0 != 1 goto label3;

        $i0 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $i1 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $r1 = newarray (int)[2];

        $r1[0] = $i0;

        $r1[1] = $i1;

        $r2 = <java.lang.Double: java.lang.Class TYPE>;

        $r3 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r2, $r1);

        r4 = (double[][]) $r3;

        $i0 = 0;

     label1:
        $i1 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        if $i0 >= $i1 goto label2;

        $r5 = r4[$i0];

        $d0 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>($i0, 0);

        $r5[$i0] = $d0;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $r6 = new org.apache.commons.math3.linear.Array2DRowRealMatrix;

        specialinvoke $r6.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void <init>(double[][],boolean)>(r4, 0);

        return $r6;

     label3:
        $i0 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $r1 = newarray (int)[2];

        $r1[0] = $i0;

        $r1[1] = 1;

        $r2 = <java.lang.Double: java.lang.Class TYPE>;

        $r3 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r2, $r1);

        r4 = (double[][]) $r3;

        $i0 = 0;

     label4:
        $i1 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        if $i0 >= $i1 goto label5;

        $r5 = r4[$i0];

        $d0 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>($i0, $i0);

        $r5[0] = $d0;

        $i0 = $i0 + 1;

        goto label4;

     label5:
        $r6 = new org.apache.commons.math3.linear.Array2DRowRealMatrix;

        specialinvoke $r6.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void <init>(double[][],boolean)>(r4, 0);

        return $r6;
    }
    private static org.apache.commons.math3.linear.RealMatrix divide(org.apache.commons.math3.linear.RealMatrix, org.apache.commons.math3.linear.RealMatrix)
    {
        org.apache.commons.math3.linear.RealMatrix $r0, $r1;
        int $i0, $i1, $i2;
        int[] $r2;
        java.lang.Class $r3;
        java.lang.Object $r4;
        double[][] r5;
        double[] $r6;
        double $d0, $d1;
        org.apache.commons.math3.linear.Array2DRowRealMatrix $r7;

        $r0 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        $r1 := @parameter1: org.apache.commons.math3.linear.RealMatrix;

        $i0 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $i1 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        $r2 = newarray (int)[2];

        $r2[0] = $i0;

        $r2[1] = $i1;

        $r3 = <java.lang.Double: java.lang.Class TYPE>;

        $r4 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r3, $r2);

        r5 = (double[][]) $r4;

        $i0 = 0;

     label1:
        $i1 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        if $i0 >= $i1 goto label4;

        $i1 = 0;

     label2:
        $i2 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        if $i1 >= $i2 goto label3;

        $r6 = r5[$i0];

        $d0 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>($i0, $i1);

        $d1 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>($i0, $i1);

        $d0 = $d0 / $d1;

        $r6[$i1] = $d0;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $i0 = $i0 + 1;

        goto label1;

     label4:
        $r7 = new org.apache.commons.math3.linear.Array2DRowRealMatrix;

        specialinvoke $r7.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void <init>(double[][],boolean)>(r5, 0);

        return $r7;
    }
    private static org.apache.commons.math3.linear.RealMatrix eye(int, int)
    {
        int $i0, $i1, i2;
        int[] $r0;
        java.lang.Class $r1;
        java.lang.Object $r2;
        double[][] r3;
        double[] $r4;
        org.apache.commons.math3.linear.Array2DRowRealMatrix $r5;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r0 = newarray (int)[2];

        $r0[0] = $i0;

        $r0[1] = $i1;

        $r1 = <java.lang.Double: java.lang.Class TYPE>;

        $r2 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r1, $r0);

        r3 = (double[][]) $r2;

        i2 = 0;

     label1:
        if i2 >= $i0 goto label3;

        if i2 >= $i1 goto label2;

        $r4 = r3[i2];

        $r4[i2] = 1.0;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        $r5 = new org.apache.commons.math3.linear.Array2DRowRealMatrix;

        specialinvoke $r5.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void <init>(double[][],boolean)>(r3, 0);

        return $r5;
    }
    private void initializeCMA(double[])
    {
        org.apache.commons.math3.optimization.direct.CMAESOptimizer r0;
        double[] $r1, $r7, $r8;
        org.apache.commons.math3.linear.Array2DRowRealMatrix r2;
        int $i0, $i1;
        double $d0, d1, $d2, $d3;
        int[] $r3;
        java.lang.Class $r4;
        java.lang.Object $r5;
        double[][] r6;
        org.apache.commons.math3.linear.RealMatrix $r9, $r10, $r11;

        r0 := @this: org.apache.commons.math3.optimization.direct.CMAESOptimizer;

        $r1 := @parameter0: double[];

        $i0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int lambda>;

        if $i0 > 0 goto label1;

        $i0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int dimension>;

        $d0 = (double) $i0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d0);

        $d0 = 3.0 * $d0;

        $i0 = (int) $d0;

        $i0 = $i0 + 4;

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int lambda> = $i0;

     label1:
        $i0 = lengthof $r1;

        $r3 = newarray (int)[2];

        $r3[0] = $i0;

        $r3[1] = 1;

        $r4 = <java.lang.Double: java.lang.Class TYPE>;

        $r5 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r4, $r3);

        r6 = (double[][]) $r5;

        $i0 = 0;

     label2:
        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label5;

        $r7 = r6[$i0];

        $r8 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double[] inputSigma>;

        if $r8 != null goto label4;

        $d0 = 0.3;

     label3:
        $r7[0] = $d0;

        $i0 = $i0 + 1;

        goto label2;

     label4:
        $r8 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double[] inputSigma>;

        $d0 = $r8[$i0];

        goto label3;

     label5:
        r2 = new org.apache.commons.math3.linear.Array2DRowRealMatrix;

        specialinvoke r2.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void <init>(double[][],boolean)>(r6, 0);

        $d0 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: double max(org.apache.commons.math3.linear.RealMatrix)>(r2);

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double sigma> = $d0;

        $d0 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: double max(org.apache.commons.math3.linear.RealMatrix)>(r2);

        $d0 = 1000.0 * $d0;

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double stopTolUpX> = $d0;

        $d0 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: double max(org.apache.commons.math3.linear.RealMatrix)>(r2);

        $d0 = 1.0E-11 * $d0;

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double stopTolX> = $d0;

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double stopTolFun> = 1.0E-12;

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double stopTolHistFun> = 1.0E-13;

        $i0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int lambda>;

        $i0 = $i0 / 2;

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int mu> = $i0;

        $i0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int mu>;

        $d0 = (double) $i0;

        $d0 = $d0 + 0.5;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d0);

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double logMu2> = $d0;

        $i0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int mu>;

        $d0 = (double) $i0;

        $r9 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix sequence(double,double,double)>(1.0, $d0, 1.0);

        $r9 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix log(org.apache.commons.math3.linear.RealMatrix)>($r9);

        $r9 = interfaceinvoke $r9.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix scalarMultiply(double)>(-1.0);

        $d0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double logMu2>;

        $r9 = interfaceinvoke $r9.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix scalarAdd(double)>($d0);

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix weights> = $r9;

        d1 = 0.0;

        $d0 = 0.0;

        $i0 = 0;

     label6:
        $i1 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int mu>;

        if $i0 >= $i1 goto label7;

        $r9 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix weights>;

        $d2 = interfaceinvoke $r9.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>($i0, 0);

        d1 = d1 + $d2;

        $d2 = $d2 * $d2;

        $d0 = $d0 + $d2;

        $i0 = $i0 + 1;

        goto label6;

     label7:
        $r9 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix weights>;

        $d2 = 1.0 / d1;

        $r9 = interfaceinvoke $r9.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix scalarMultiply(double)>($d2);

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix weights> = $r9;

        d1 = d1 * d1;

        $d0 = d1 / $d0;

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double mueff> = $d0;

        $d0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double mueff>;

        $i0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int dimension>;

        d1 = (double) $i0;

        $d0 = $d0 / d1;

        $d0 = 4.0 + $d0;

        $i0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int dimension>;

        $i0 = $i0 + 4;

        d1 = (double) $i0;

        $d2 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double mueff>;

        $d2 = 2.0 * $d2;

        $i0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int dimension>;

        $d3 = (double) $i0;

        $d2 = $d2 / $d3;

        d1 = d1 + $d2;

        $d0 = $d0 / d1;

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double cc> = $d0;

        $d0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double mueff>;

        $d0 = $d0 + 2.0;

        $i0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int dimension>;

        d1 = (double) $i0;

        $d2 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double mueff>;

        d1 = d1 + $d2;

        d1 = d1 + 3.0;

        $d0 = $d0 / d1;

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double cs> = $d0;

        $d0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double mueff>;

        $d0 = $d0 - 1.0;

        $i0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int dimension>;

        $i0 = $i0 + 1;

        d1 = (double) $i0;

        $d0 = $d0 / d1;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d0);

        $d0 = $d0 - 1.0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>(0.0, $d0);

        $d0 = 2.0 * $d0;

        $d0 = 1.0 + $d0;

        $i0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int dimension>;

        d1 = (double) $i0;

        $i0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int maxIterations>;

        $d2 = (double) $i0;

        $d2 = 1.0E-6 + $d2;

        d1 = d1 / $d2;

        d1 = 1.0 - d1;

        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>(0.3, d1);

        $d0 = $d0 * d1;

        d1 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double cs>;

        $d0 = $d0 + d1;

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double damps> = $d0;

        $i0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int dimension>;

        $d0 = (double) $i0;

        $d0 = $d0 + 1.3;

        $i0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int dimension>;

        d1 = (double) $i0;

        d1 = d1 + 1.3;

        $d0 = $d0 * d1;

        d1 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double mueff>;

        $d0 = $d0 + d1;

        $d0 = 2.0 / $d0;

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double ccov1> = $d0;

        $d0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double ccov1>;

        $d0 = 1.0 - $d0;

        d1 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double mueff>;

        d1 = d1 - 2.0;

        $d2 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double mueff>;

        $d2 = 1.0 / $d2;

        d1 = d1 + $d2;

        d1 = 2.0 * d1;

        $i0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int dimension>;

        $i0 = $i0 + 2;

        $i1 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int dimension>;

        $i1 = $i1 + 2;

        $i0 = $i0 * $i1;

        $d2 = (double) $i0;

        $d3 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double mueff>;

        $d2 = $d2 + $d3;

        d1 = d1 / $d2;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double min(double,double)>($d0, d1);

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double ccovmu> = $d0;

        $d0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double ccov1>;

        $i0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int dimension>;

        d1 = (double) $i0;

        d1 = d1 + 1.5;

        $d0 = $d0 * d1;

        $d0 = $d0 / 3.0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double min(double,double)>(1.0, $d0);

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double ccov1Sep> = $d0;

        $d0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double ccov1>;

        $d0 = 1.0 - $d0;

        d1 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double ccovmu>;

        $i0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int dimension>;

        $d2 = (double) $i0;

        $d2 = $d2 + 1.5;

        d1 = d1 * $d2;

        d1 = d1 / 3.0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double min(double,double)>($d0, d1);

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double ccovmuSep> = $d0;

        $i0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int dimension>;

        $d0 = (double) $i0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d0);

        $i0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int dimension>;

        d1 = (double) $i0;

        d1 = 4.0 * d1;

        d1 = 1.0 / d1;

        d1 = 1.0 - d1;

        $i0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int dimension>;

        $d2 = (double) $i0;

        $d2 = 21.0 * $d2;

        $i0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int dimension>;

        $d3 = (double) $i0;

        $d2 = $d2 * $d3;

        $d2 = 1.0 / $d2;

        d1 = d1 + $d2;

        $d0 = $d0 * d1;

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double chiN> = $d0;

        $r9 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix createColumnRealMatrix(double[])>($r1);

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix xmean> = $r9;

        $d0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double sigma>;

        $d0 = 1.0 / $d0;

        $r9 = interfaceinvoke r2.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix scalarMultiply(double)>($d0);

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix diagD> = $r9;

        $r9 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix diagD>;

        $r9 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix square(org.apache.commons.math3.linear.RealMatrix)>($r9);

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix diagC> = $r9;

        $i0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int dimension>;

        $r9 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix zeros(int,int)>($i0, 1);

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix pc> = $r9;

        $i0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int dimension>;

        $r9 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix zeros(int,int)>($i0, 1);

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix ps> = $r9;

        $r9 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix ps>;

        $d0 = interfaceinvoke $r9.<org.apache.commons.math3.linear.RealMatrix: double getFrobeniusNorm()>();

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double normps> = $d0;

        $i0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int dimension>;

        $i1 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int dimension>;

        $r9 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix eye(int,int)>($i0, $i1);

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix B> = $r9;

        $i0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int dimension>;

        $r9 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix ones(int,int)>($i0, 1);

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix D> = $r9;

        $r9 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix B>;

        $r10 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix diagD>;

        $r10 = interfaceinvoke $r10.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix transpose()>();

        $i0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int dimension>;

        $r10 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix repmat(org.apache.commons.math3.linear.RealMatrix,int,int)>($r10, $i0, 1);

        $r9 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix times(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealMatrix)>($r9, $r10);

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix BD> = $r9;

        $r9 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix B>;

        $r10 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix D>;

        $r10 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix square(org.apache.commons.math3.linear.RealMatrix)>($r10);

        $r10 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix diag(org.apache.commons.math3.linear.RealMatrix)>($r10);

        $r11 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix B>;

        $r11 = interfaceinvoke $r11.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix transpose()>();

        $r10 = interfaceinvoke $r10.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>($r11);

        $r9 = interfaceinvoke $r9.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>($r10);

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix C> = $r9;

        $i0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int dimension>;

        $i0 = $i0 * 30;

        $d0 = (double) $i0;

        $i0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int lambda>;

        d1 = (double) $i0;

        $d0 = $d0 / d1;

        $i0 = (int) $d0;

        $i0 = $i0 + 10;

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int historySize> = $i0;

        $i0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int historySize>;

        $r1 = newarray (double)[$i0];

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double[] fitnessHistory> = $r1;

        $i0 = 0;

     label8:
        $i1 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int historySize>;

        if $i0 >= $i1 goto label9;

        $r1 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double[] fitnessHistory>;

        $r1[$i0] = 1.7976931348623157E308;

        $i0 = $i0 + 1;

        goto label8;

     label9:
        return;
    }
    private static int[] inverse(int[])
    {
        int[] $r0, r1;
        int $i0, $i1;

        $r0 := @parameter0: int[];

        $i0 = lengthof $r0;

        r1 = newarray (int)[$i0];

        $i0 = 0;

     label1:
        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label2;

        $i1 = $r0[$i0];

        r1[$i1] = $i0;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return r1;
    }
    private static org.apache.commons.math3.linear.RealMatrix log(org.apache.commons.math3.linear.RealMatrix)
    {
        org.apache.commons.math3.linear.RealMatrix $r0;
        int $i0, $i1, $i2;
        int[] $r1;
        java.lang.Class $r2;
        java.lang.Object $r3;
        double[][] r4;
        double[] $r5;
        double $d0;
        org.apache.commons.math3.linear.Array2DRowRealMatrix $r6;

        $r0 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        $i0 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $i1 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        $r1 = newarray (int)[2];

        $r1[0] = $i0;

        $r1[1] = $i1;

        $r2 = <java.lang.Double: java.lang.Class TYPE>;

        $r3 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r2, $r1);

        r4 = (double[][]) $r3;

        $i0 = 0;

     label1:
        $i1 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        if $i0 >= $i1 goto label4;

        $i1 = 0;

     label2:
        $i2 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        if $i1 >= $i2 goto label3;

        $r5 = r4[$i0];

        $d0 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>($i0, $i1);

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d0);

        $r5[$i1] = $d0;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $i0 = $i0 + 1;

        goto label1;

     label4:
        $r6 = new org.apache.commons.math3.linear.Array2DRowRealMatrix;

        specialinvoke $r6.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void <init>(double[][],boolean)>(r4, 0);

        return $r6;
    }
    private static double max(org.apache.commons.math3.linear.RealMatrix)
    {
        org.apache.commons.math3.linear.RealMatrix $r0;
        double d0, $d1;
        int i0, $i1, $i2;
        byte $b3;

        $r0 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        d0 = -1.7976931348623157E308;

        i0 = 0;

     label1:
        $i1 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        if i0 >= $i1 goto label5;

        $i1 = 0;

     label2:
        $i2 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        if $i1 >= $i2 goto label4;

        $d1 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>(i0, $i1);

        $b3 = d0 cmpg $d1;

        if $b3 >= 0 goto label3;

        d0 = $d1;

     label3:
        $i1 = $i1 + 1;

        goto label2;

     label4:
        i0 = i0 + 1;

        goto label1;

     label5:
        return d0;
    }
    private static double max(double[])
    {
        double[] $r0;
        double $d0, d1;
        int i0, $i1;
        byte $b2;

        $r0 := @parameter0: double[];

        d1 = -1.7976931348623157E308;

        i0 = 0;

     label1:
        $i1 = lengthof $r0;

        if i0 >= $i1 goto label3;

        $d0 = $r0[i0];

        $b2 = d1 cmpg $d0;

        if $b2 >= 0 goto label2;

        d1 = $r0[i0];

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return d1;
    }
    private static double min(org.apache.commons.math3.linear.RealMatrix)
    {
        org.apache.commons.math3.linear.RealMatrix $r0;
        double d0, $d1;
        int i0, $i1, $i2;
        byte $b3;

        $r0 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        d0 = 1.7976931348623157E308;

        i0 = 0;

     label1:
        $i1 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        if i0 >= $i1 goto label5;

        $i1 = 0;

     label2:
        $i2 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        if $i1 >= $i2 goto label4;

        $d1 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>(i0, $i1);

        $b3 = d0 cmpl $d1;

        if $b3 <= 0 goto label3;

        d0 = $d1;

     label3:
        $i1 = $i1 + 1;

        goto label2;

     label4:
        i0 = i0 + 1;

        goto label1;

     label5:
        return d0;
    }
    private static double min(double[])
    {
        double[] $r0;
        double $d0, d1;
        int i0, $i1;
        byte $b2;

        $r0 := @parameter0: double[];

        d1 = 1.7976931348623157E308;

        i0 = 0;

     label1:
        $i1 = lengthof $r0;

        if i0 >= $i1 goto label3;

        $d0 = $r0[i0];

        $b2 = d1 cmpl $d0;

        if $b2 <= 0 goto label2;

        d1 = $r0[i0];

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return d1;
    }
    private static org.apache.commons.math3.linear.RealMatrix ones(int, int)
    {
        int $i0, $i1;
        int[] $r0;
        java.lang.Class $r1;
        java.lang.Object $r2;
        double[][] r3;
        double[] $r4;
        org.apache.commons.math3.linear.Array2DRowRealMatrix $r5;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r0 = newarray (int)[2];

        $r0[0] = $i0;

        $r0[1] = $i1;

        $r1 = <java.lang.Double: java.lang.Class TYPE>;

        $r2 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r1, $r0);

        r3 = (double[][]) $r2;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $r4 = r3[$i1];

        staticinvoke <java.util.Arrays: void fill(double[],double)>($r4, 1.0);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        $r5 = new org.apache.commons.math3.linear.Array2DRowRealMatrix;

        specialinvoke $r5.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void <init>(double[][],boolean)>(r3, 0);

        return $r5;
    }
    private transient void parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])
    {
        org.apache.commons.math3.optimization.direct.CMAESOptimizer r0;
        org.apache.commons.math3.optimization.OptimizationData[] $r1;
        int i0, i1, $i2;
        org.apache.commons.math3.optimization.OptimizationData r2;
        boolean $z0;
        org.apache.commons.math3.optimization.direct.CMAESOptimizer$Sigma r3;
        double[] $r4;
        org.apache.commons.math3.optimization.direct.CMAESOptimizer$PopulationSize r5;

        r0 := @this: org.apache.commons.math3.optimization.direct.CMAESOptimizer;

        $r1 := @parameter0: org.apache.commons.math3.optimization.OptimizationData[];

        i0 = lengthof $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        r2 = $r1[i1];

        $z0 = r2 instanceof org.apache.commons.math3.optimization.direct.CMAESOptimizer$Sigma;

        if $z0 == 0 goto label3;

        r3 = (org.apache.commons.math3.optimization.direct.CMAESOptimizer$Sigma) r2;

        $r4 = virtualinvoke r3.<org.apache.commons.math3.optimization.direct.CMAESOptimizer$Sigma: double[] getSigma()>();

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double[] inputSigma> = $r4;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $z0 = r2 instanceof org.apache.commons.math3.optimization.direct.CMAESOptimizer$PopulationSize;

        if $z0 == 0 goto label2;

        r5 = (org.apache.commons.math3.optimization.direct.CMAESOptimizer$PopulationSize) r2;

        $i2 = virtualinvoke r5.<org.apache.commons.math3.optimization.direct.CMAESOptimizer$PopulationSize: int getPopulationSize()>();

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int lambda> = $i2;

        goto label2;

     label4:
        return;
    }
    private static void push(double[], double)
    {
        double[] $r0;
        double $d0, $d1;
        int $i0, $i1;

        $r0 := @parameter0: double[];

        $d0 := @parameter1: double;

        $i0 = lengthof $r0;

        $i0 = $i0 + -1;

     label1:
        if $i0 <= 0 goto label2;

        $i1 = $i0 + -1;

        $d1 = $r0[$i1];

        $r0[$i0] = $d1;

        $i0 = $i0 + -1;

        goto label1;

     label2:
        $r0[0] = $d0;

        return;
    }
    private double[] randn(int)
    {
        org.apache.commons.math3.optimization.direct.CMAESOptimizer r0;
        int $i0, i1;
        double[] r1;
        double $d0;
        org.apache.commons.math3.random.RandomGenerator $r2;

        r0 := @this: org.apache.commons.math3.optimization.direct.CMAESOptimizer;

        $i0 := @parameter0: int;

        r1 = newarray (double)[$i0];

        i1 = 0;

     label1:
        if i1 >= $i0 goto label2;

        $r2 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.random.RandomGenerator random>;

        $d0 = interfaceinvoke $r2.<org.apache.commons.math3.random.RandomGenerator: double nextGaussian()>();

        r1[i1] = $d0;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r1;
    }
    private org.apache.commons.math3.linear.RealMatrix randn1(int, int)
    {
        org.apache.commons.math3.optimization.direct.CMAESOptimizer r0;
        int $i0, $i1, i2, i3;
        int[] $r1;
        java.lang.Class $r2;
        java.lang.Object $r3;
        double[][] r4;
        double[] $r5;
        org.apache.commons.math3.random.RandomGenerator $r6;
        double $d0;
        org.apache.commons.math3.linear.Array2DRowRealMatrix $r7;

        r0 := @this: org.apache.commons.math3.optimization.direct.CMAESOptimizer;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = newarray (int)[2];

        $r1[0] = $i0;

        $r1[1] = $i1;

        $r2 = <java.lang.Double: java.lang.Class TYPE>;

        $r3 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r2, $r1);

        r4 = (double[][]) $r3;

        i2 = 0;

     label1:
        if i2 >= $i0 goto label4;

        i3 = 0;

     label2:
        if i3 >= $i1 goto label3;

        $r5 = r4[i2];

        $r6 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.random.RandomGenerator random>;

        $d0 = interfaceinvoke $r6.<org.apache.commons.math3.random.RandomGenerator: double nextGaussian()>();

        $r5[i3] = $d0;

        i3 = i3 + 1;

        goto label2;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        $r7 = new org.apache.commons.math3.linear.Array2DRowRealMatrix;

        specialinvoke $r7.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void <init>(double[][],boolean)>(r4, 0);

        return $r7;
    }
    private static org.apache.commons.math3.linear.RealMatrix repmat(org.apache.commons.math3.linear.RealMatrix, int, int)
    {
        org.apache.commons.math3.linear.RealMatrix $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        int[] $r1;
        java.lang.Class $r2;
        java.lang.Object $r3;
        double[][] r4;
        double[] $r5;
        double $d0;
        org.apache.commons.math3.linear.Array2DRowRealMatrix $r6;

        $r0 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i3 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $i4 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        $i5 = $i0 * $i3;

        $i6 = $i1 * $i4;

        $r1 = newarray (int)[2];

        $r1[0] = $i5;

        $r1[1] = $i6;

        $r2 = <java.lang.Double: java.lang.Class TYPE>;

        $r3 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r2, $r1);

        r4 = (double[][]) $r3;

        $i5 = 0;

     label1:
        $i6 = $i0 * $i3;

        if $i5 >= $i6 goto label4;

        $i6 = 0;

     label2:
        $i2 = $i1 * $i4;

        if $i6 >= $i2 goto label3;

        $r5 = r4[$i5];

        $i7 = $i5 % $i3;

        $i2 = $i6 % $i4;

        $d0 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>($i7, $i2);

        $r5[$i6] = $d0;

        $i6 = $i6 + 1;

        goto label2;

     label3:
        $i5 = $i5 + 1;

        goto label1;

     label4:
        $r6 = new org.apache.commons.math3.linear.Array2DRowRealMatrix;

        specialinvoke $r6.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void <init>(double[][],boolean)>(r4, 0);

        return $r6;
    }
    private static int[] reverse(int[])
    {
        int[] $r0, r1;
        int $i0, $i1;

        $r0 := @parameter0: int[];

        $i0 = lengthof $r0;

        r1 = newarray (int)[$i0];

        $i0 = 0;

     label1:
        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label2;

        $i1 = lengthof $r0;

        $i1 = $i1 - $i0;

        $i1 = $i1 + -1;

        $i1 = $r0[$i1];

        r1[$i0] = $i1;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return r1;
    }
    private static org.apache.commons.math3.linear.RealMatrix selectColumns(org.apache.commons.math3.linear.RealMatrix, int[])
    {
        org.apache.commons.math3.linear.RealMatrix $r0;
        int[] $r1, $r2;
        int $i0, $i1, $i2;
        java.lang.Class $r3;
        java.lang.Object $r4;
        double[][] r5;
        double[] $r6;
        double $d0;
        org.apache.commons.math3.linear.Array2DRowRealMatrix $r7;

        $r0 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        $r1 := @parameter1: int[];

        $i0 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $i1 = lengthof $r1;

        $r2 = newarray (int)[2];

        $r2[0] = $i0;

        $r2[1] = $i1;

        $r3 = <java.lang.Double: java.lang.Class TYPE>;

        $r4 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r3, $r2);

        r5 = (double[][]) $r4;

        $i0 = 0;

     label1:
        $i1 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        if $i0 >= $i1 goto label4;

        $i1 = 0;

     label2:
        $i2 = lengthof $r1;

        if $i1 >= $i2 goto label3;

        $r6 = r5[$i0];

        $i2 = $r1[$i1];

        $d0 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>($i0, $i2);

        $r6[$i1] = $d0;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $i0 = $i0 + 1;

        goto label1;

     label4:
        $r7 = new org.apache.commons.math3.linear.Array2DRowRealMatrix;

        specialinvoke $r7.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void <init>(double[][],boolean)>(r5, 0);

        return $r7;
    }
    private static org.apache.commons.math3.linear.RealMatrix sequence(double, double, double)
    {
        double $d0, $d1, $d2;
        int i0, i1;
        int[] $r0;
        java.lang.Class $r1;
        java.lang.Object $r2;
        double[][] r3;
        double[] $r4;
        org.apache.commons.math3.linear.Array2DRowRealMatrix $r5;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $d1 = $d1 - $d0;

        $d1 = $d1 / $d2;

        $d1 = $d1 + 1.0;

        i0 = (int) $d1;

        $r0 = newarray (int)[2];

        $r0[0] = i0;

        $r0[1] = 1;

        $r1 = <java.lang.Double: java.lang.Class TYPE>;

        $r2 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r1, $r0);

        r3 = (double[][]) $r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r4 = r3[i1];

        $r4[0] = $d0;

        $d0 = $d0 + $d2;

        i1 = i1 + 1;

        goto label1;

     label2:
        $r5 = new org.apache.commons.math3.linear.Array2DRowRealMatrix;

        specialinvoke $r5.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void <init>(double[][],boolean)>(r3, 0);

        return $r5;
    }
    private int[] sortedIndices(double[])
    {
        org.apache.commons.math3.optimization.direct.CMAESOptimizer r0;
        double[] $r1;
        org.apache.commons.math3.optimization.direct.CMAESOptimizer$DoubleIndex[] r2;
        int[] r3;
        double $d0;
        int $i0, $i1;
        org.apache.commons.math3.optimization.direct.CMAESOptimizer$DoubleIndex $r4;

        r0 := @this: org.apache.commons.math3.optimization.direct.CMAESOptimizer;

        $r1 := @parameter0: double[];

        $i1 = lengthof $r1;

        r2 = newarray (org.apache.commons.math3.optimization.direct.CMAESOptimizer$DoubleIndex)[$i1];

        $i1 = 0;

     label1:
        $i0 = lengthof $r1;

        if $i1 >= $i0 goto label2;

        $r4 = new org.apache.commons.math3.optimization.direct.CMAESOptimizer$DoubleIndex;

        $d0 = $r1[$i1];

        specialinvoke $r4.<org.apache.commons.math3.optimization.direct.CMAESOptimizer$DoubleIndex: void <init>(double,int)>($d0, $i1);

        r2[$i1] = $r4;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        staticinvoke <java.util.Arrays: void sort(java.lang.Object[])>(r2);

        $i1 = lengthof $r1;

        r3 = newarray (int)[$i1];

        $i1 = 0;

     label3:
        $i0 = lengthof $r1;

        if $i1 >= $i0 goto label4;

        $r4 = r2[$i1];

        $i0 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer$DoubleIndex: int access$100(org.apache.commons.math3.optimization.direct.CMAESOptimizer$DoubleIndex)>($r4);

        r3[$i1] = $i0;

        $i1 = $i1 + 1;

        goto label3;

     label4:
        return r3;
    }
    private static org.apache.commons.math3.linear.RealMatrix sqrt(org.apache.commons.math3.linear.RealMatrix)
    {
        org.apache.commons.math3.linear.RealMatrix $r0;
        int $i0, $i1, $i2;
        int[] $r1;
        java.lang.Class $r2;
        java.lang.Object $r3;
        double[][] r4;
        double[] $r5;
        double $d0;
        org.apache.commons.math3.linear.Array2DRowRealMatrix $r6;

        $r0 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        $i0 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $i1 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        $r1 = newarray (int)[2];

        $r1[0] = $i0;

        $r1[1] = $i1;

        $r2 = <java.lang.Double: java.lang.Class TYPE>;

        $r3 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r2, $r1);

        r4 = (double[][]) $r3;

        $i0 = 0;

     label1:
        $i1 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        if $i0 >= $i1 goto label4;

        $i1 = 0;

     label2:
        $i2 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        if $i1 >= $i2 goto label3;

        $r5 = r4[$i0];

        $d0 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>($i0, $i1);

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d0);

        $r5[$i1] = $d0;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $i0 = $i0 + 1;

        goto label1;

     label4:
        $r6 = new org.apache.commons.math3.linear.Array2DRowRealMatrix;

        specialinvoke $r6.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void <init>(double[][],boolean)>(r4, 0);

        return $r6;
    }
    private static org.apache.commons.math3.linear.RealMatrix square(org.apache.commons.math3.linear.RealMatrix)
    {
        org.apache.commons.math3.linear.RealMatrix $r0;
        int $i0, $i1, $i2;
        int[] $r1;
        java.lang.Class $r2;
        java.lang.Object $r3;
        double[][] r4;
        double $d0;
        double[] $r5;
        org.apache.commons.math3.linear.Array2DRowRealMatrix $r6;

        $r0 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        $i0 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $i1 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        $r1 = newarray (int)[2];

        $r1[0] = $i0;

        $r1[1] = $i1;

        $r2 = <java.lang.Double: java.lang.Class TYPE>;

        $r3 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r2, $r1);

        r4 = (double[][]) $r3;

        $i0 = 0;

     label1:
        $i1 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        if $i0 >= $i1 goto label4;

        $i1 = 0;

     label2:
        $i2 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        if $i1 >= $i2 goto label3;

        $d0 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>($i0, $i1);

        $r5 = r4[$i0];

        $d0 = $d0 * $d0;

        $r5[$i1] = $d0;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $i0 = $i0 + 1;

        goto label1;

     label4:
        $r6 = new org.apache.commons.math3.linear.Array2DRowRealMatrix;

        specialinvoke $r6.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void <init>(double[][],boolean)>(r4, 0);

        return $r6;
    }
    private static org.apache.commons.math3.linear.RealMatrix sumRows(org.apache.commons.math3.linear.RealMatrix)
    {
        org.apache.commons.math3.linear.RealMatrix $r0;
        int $i0, $i1, $i2;
        int[] $r1;
        java.lang.Class $r2;
        java.lang.Object $r3;
        double[][] r4;
        double d0, $d1;
        double[] $r5;
        org.apache.commons.math3.linear.Array2DRowRealMatrix $r6;

        $r0 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        $i0 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        $r1 = newarray (int)[2];

        $r1[0] = 1;

        $r1[1] = $i0;

        $r2 = <java.lang.Double: java.lang.Class TYPE>;

        $r3 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r2, $r1);

        r4 = (double[][]) $r3;

        $i0 = 0;

     label1:
        $i1 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        if $i0 >= $i1 goto label4;

        d0 = 0.0;

        $i1 = 0;

     label2:
        $i2 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        if $i1 >= $i2 goto label3;

        $d1 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>($i1, $i0);

        d0 = d0 + $d1;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $r5 = r4[0];

        $r5[$i0] = d0;

        $i0 = $i0 + 1;

        goto label1;

     label4:
        $r6 = new org.apache.commons.math3.linear.Array2DRowRealMatrix;

        specialinvoke $r6.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void <init>(double[][],boolean)>(r4, 0);

        return $r6;
    }
    private static org.apache.commons.math3.linear.RealMatrix times(org.apache.commons.math3.linear.RealMatrix, org.apache.commons.math3.linear.RealMatrix)
    {
        org.apache.commons.math3.linear.RealMatrix $r0, $r1;
        int $i0, $i1, $i2;
        int[] $r2;
        java.lang.Class $r3;
        java.lang.Object $r4;
        double[][] r5;
        double[] $r6;
        double $d0, $d1;
        org.apache.commons.math3.linear.Array2DRowRealMatrix $r7;

        $r0 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        $r1 := @parameter1: org.apache.commons.math3.linear.RealMatrix;

        $i0 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $i1 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        $r2 = newarray (int)[2];

        $r2[0] = $i0;

        $r2[1] = $i1;

        $r3 = <java.lang.Double: java.lang.Class TYPE>;

        $r4 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r3, $r2);

        r5 = (double[][]) $r4;

        $i0 = 0;

     label1:
        $i1 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        if $i0 >= $i1 goto label4;

        $i1 = 0;

     label2:
        $i2 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        if $i1 >= $i2 goto label3;

        $r6 = r5[$i0];

        $d0 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>($i0, $i1);

        $d1 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>($i0, $i1);

        $d0 = $d0 * $d1;

        $r6[$i1] = $d0;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $i0 = $i0 + 1;

        goto label1;

     label4:
        $r7 = new org.apache.commons.math3.linear.Array2DRowRealMatrix;

        specialinvoke $r7.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void <init>(double[][],boolean)>(r5, 0);

        return $r7;
    }
    private static org.apache.commons.math3.linear.RealMatrix triu(org.apache.commons.math3.linear.RealMatrix, int)
    {
        org.apache.commons.math3.linear.RealMatrix $r0;
        int $i0, $i1, $i2, $i3;
        int[] $r1;
        java.lang.Class $r2;
        java.lang.Object $r3;
        double[][] r4;
        double[] $r5;
        double $d0;
        org.apache.commons.math3.linear.Array2DRowRealMatrix $r6;

        $r0 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        $i0 := @parameter1: int;

        $i1 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $i2 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        $r1 = newarray (int)[2];

        $r1[0] = $i1;

        $r1[1] = $i2;

        $r2 = <java.lang.Double: java.lang.Class TYPE>;

        $r3 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r2, $r1);

        r4 = (double[][]) $r3;

        $i1 = 0;

     label1:
        $i2 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        if $i1 >= $i2 goto label6;

        $i2 = 0;

     label2:
        $i3 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        if $i2 >= $i3 goto label5;

        $r5 = r4[$i1];

        $i3 = $i2 - $i0;

        if $i1 > $i3 goto label4;

        $d0 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>($i1, $i2);

     label3:
        $r5[$i2] = $d0;

        $i2 = $i2 + 1;

        goto label2;

     label4:
        $d0 = 0.0;

        goto label3;

     label5:
        $i1 = $i1 + 1;

        goto label1;

     label6:
        $r6 = new org.apache.commons.math3.linear.Array2DRowRealMatrix;

        specialinvoke $r6.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void <init>(double[][],boolean)>(r4, 0);

        return $r6;
    }
    private void updateBD(double)
    {
        org.apache.commons.math3.optimization.direct.CMAESOptimizer r0;
        double $d0, $d1, $d2, $d3;
        org.apache.commons.math3.linear.EigenDecomposition r1;
        byte $b0;
        int $i1, $i2;
        org.apache.commons.math3.linear.RealMatrix $r2, $r3;

        r0 := @this: org.apache.commons.math3.optimization.direct.CMAESOptimizer;

        $d0 := @parameter0: double;

        $d1 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double ccov1>;

        $d2 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double ccovmu>;

        $d1 = $d1 + $d2;

        $d1 = $d1 + $d0;

        $b0 = $d1 cmpl 0.0;

        if $b0 <= 0 goto label6;

        $i1 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int iterations>;

        $d1 = (double) $i1;

        $d1 = $d1 % 1.0;

        $d2 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double ccov1>;

        $d3 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double ccovmu>;

        $d2 = $d2 + $d3;

        $d0 = $d2 + $d0;

        $d0 = $d1 / $d0;

        $i1 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int dimension>;

        $d1 = (double) $i1;

        $d0 = $d0 / $d1;

        $d0 = $d0 / 10.0;

        $b0 = $d0 cmpg 1.0;

        if $b0 >= 0 goto label6;

        $r2 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix C>;

        $r2 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix triu(org.apache.commons.math3.linear.RealMatrix,int)>($r2, 0);

        $r3 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix C>;

        $r3 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix triu(org.apache.commons.math3.linear.RealMatrix,int)>($r3, 1);

        $r3 = interfaceinvoke $r3.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix transpose()>();

        $r2 = interfaceinvoke $r2.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix add(org.apache.commons.math3.linear.RealMatrix)>($r3);

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix C> = $r2;

        r1 = new org.apache.commons.math3.linear.EigenDecomposition;

        $r2 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix C>;

        specialinvoke r1.<org.apache.commons.math3.linear.EigenDecomposition: void <init>(org.apache.commons.math3.linear.RealMatrix)>($r2);

        $r2 = virtualinvoke r1.<org.apache.commons.math3.linear.EigenDecomposition: org.apache.commons.math3.linear.RealMatrix getV()>();

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix B> = $r2;

        $r2 = virtualinvoke r1.<org.apache.commons.math3.linear.EigenDecomposition: org.apache.commons.math3.linear.RealMatrix getD()>();

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix D> = $r2;

        $r2 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix D>;

        $r2 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix diag(org.apache.commons.math3.linear.RealMatrix)>($r2);

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix diagD> = $r2;

        $r2 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix diagD>;

        $d0 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: double min(org.apache.commons.math3.linear.RealMatrix)>($r2);

        $b0 = $d0 cmpg 0.0;

        if $b0 > 0 goto label4;

        $i1 = 0;

     label1:
        $i2 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int dimension>;

        if $i1 >= $i2 goto label3;

        $r2 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix diagD>;

        $d0 = interfaceinvoke $r2.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>($i1, 0);

        $b0 = $d0 cmpg 0.0;

        if $b0 >= 0 goto label2;

        $r2 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix diagD>;

        interfaceinvoke $r2.<org.apache.commons.math3.linear.RealMatrix: void setEntry(int,int,double)>($i1, 0, 0.0);

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        $r2 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix diagD>;

        $d0 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: double max(org.apache.commons.math3.linear.RealMatrix)>($r2);

        $d0 = $d0 / 1.0E14;

        $r2 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix C>;

        $i1 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int dimension>;

        $i2 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int dimension>;

        $r3 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix eye(int,int)>($i1, $i2);

        $r3 = interfaceinvoke $r3.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix scalarMultiply(double)>($d0);

        $r2 = interfaceinvoke $r2.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix add(org.apache.commons.math3.linear.RealMatrix)>($r3);

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix C> = $r2;

        $r2 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix diagD>;

        $i1 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int dimension>;

        $r3 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix ones(int,int)>($i1, 1);

        $r3 = interfaceinvoke $r3.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix scalarMultiply(double)>($d0);

        $r2 = interfaceinvoke $r2.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix add(org.apache.commons.math3.linear.RealMatrix)>($r3);

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix diagD> = $r2;

     label4:
        $r2 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix diagD>;

        $d0 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: double max(org.apache.commons.math3.linear.RealMatrix)>($r2);

        $r2 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix diagD>;

        $d1 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: double min(org.apache.commons.math3.linear.RealMatrix)>($r2);

        $d1 = 1.0E14 * $d1;

        $b0 = $d0 cmpl $d1;

        if $b0 <= 0 goto label5;

        $r2 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix diagD>;

        $d0 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: double max(org.apache.commons.math3.linear.RealMatrix)>($r2);

        $d0 = $d0 / 1.0E14;

        $r2 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix diagD>;

        $d1 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: double min(org.apache.commons.math3.linear.RealMatrix)>($r2);

        $d0 = $d0 - $d1;

        $r2 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix C>;

        $i1 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int dimension>;

        $i2 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int dimension>;

        $r3 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix eye(int,int)>($i1, $i2);

        $r3 = interfaceinvoke $r3.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix scalarMultiply(double)>($d0);

        $r2 = interfaceinvoke $r2.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix add(org.apache.commons.math3.linear.RealMatrix)>($r3);

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix C> = $r2;

        $r2 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix diagD>;

        $i1 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int dimension>;

        $r3 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix ones(int,int)>($i1, 1);

        $r3 = interfaceinvoke $r3.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix scalarMultiply(double)>($d0);

        $r2 = interfaceinvoke $r2.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix add(org.apache.commons.math3.linear.RealMatrix)>($r3);

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix diagD> = $r2;

     label5:
        $r2 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix C>;

        $r2 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix diag(org.apache.commons.math3.linear.RealMatrix)>($r2);

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix diagC> = $r2;

        $r2 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix diagD>;

        $r2 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix sqrt(org.apache.commons.math3.linear.RealMatrix)>($r2);

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix diagD> = $r2;

        $r2 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix B>;

        $r3 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix diagD>;

        $r3 = interfaceinvoke $r3.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix transpose()>();

        $i1 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int dimension>;

        $r3 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix repmat(org.apache.commons.math3.linear.RealMatrix,int,int)>($r3, $i1, 1);

        $r2 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix times(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealMatrix)>($r2, $r3);

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix BD> = $r2;

     label6:
        return;
    }
    private void updateCovariance(boolean, org.apache.commons.math3.linear.RealMatrix, org.apache.commons.math3.linear.RealMatrix, int[], org.apache.commons.math3.linear.RealMatrix)
    {
        org.apache.commons.math3.optimization.direct.CMAESOptimizer r0;
        boolean $z0;
        org.apache.commons.math3.linear.RealMatrix $r1, $r2, $r4, $r5, $r6, $r9;
        int[] $r3, $r8;
        double d0, d1, $d2, $d3;
        byte $b0;
        int $i1;
        double[] $r7;

        r0 := @this: org.apache.commons.math3.optimization.direct.CMAESOptimizer;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: org.apache.commons.math3.linear.RealMatrix;

        $r2 := @parameter2: org.apache.commons.math3.linear.RealMatrix;

        $r3 := @parameter3: int[];

        $r4 := @parameter4: org.apache.commons.math3.linear.RealMatrix;

        d1 = 0.0;

        $d2 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double ccov1>;

        d0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double ccovmu>;

        $d2 = $d2 + d0;

        $b0 = $d2 cmpl 0.0;

        if $b0 <= 0 goto label3;

        $i1 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int mu>;

        $r4 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix repmat(org.apache.commons.math3.linear.RealMatrix,int,int)>($r4, 1, $i1);

        $r1 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix subtract(org.apache.commons.math3.linear.RealMatrix)>($r4);

        $d2 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double sigma>;

        $d2 = 1.0 / $d2;

        $r1 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix scalarMultiply(double)>($d2);

        $r4 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix pc>;

        $r5 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix pc>;

        $r5 = interfaceinvoke $r5.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix transpose()>();

        $r4 = interfaceinvoke $r4.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>($r5);

        $d2 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double ccov1>;

        $r4 = interfaceinvoke $r4.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix scalarMultiply(double)>($d2);

        if $z0 == 0 goto label4;

        $d2 = 0.0;

     label1:
        d0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double ccov1>;

        d0 = 1.0 - d0;

        $d3 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double ccovmu>;

        d0 = d0 - $d3;

        $d2 = $d2 + d0;

        $z0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: boolean isActiveCMA>;

        if $z0 == 0 goto label5;

        d1 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double ccovmu>;

        d1 = 1.0 - d1;

        d1 = d1 * 0.25;

        d0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double mueff>;

        d1 = d1 * d0;

        $i1 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int dimension>;

        $i1 = $i1 + 2;

        d0 = (double) $i1;

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,double)>(d0, 1.5);

        $d3 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double mueff>;

        $d3 = 2.0 * $d3;

        d0 = d0 + $d3;

        d1 = d1 / d0;

        $r3 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: int[] reverse(int[])>($r3);

        $i1 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int mu>;

        $r3 = staticinvoke <org.apache.commons.math3.util.MathArrays: int[] copyOf(int[],int)>($r3, $i1);

        $r2 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix selectColumns(org.apache.commons.math3.linear.RealMatrix,int[])>($r2, $r3);

        $r5 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix square(org.apache.commons.math3.linear.RealMatrix)>($r2);

        $r5 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix sumRows(org.apache.commons.math3.linear.RealMatrix)>($r5);

        $r6 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix sqrt(org.apache.commons.math3.linear.RealMatrix)>($r5);

        $r7 = interfaceinvoke $r6.<org.apache.commons.math3.linear.RealMatrix: double[] getRow(int)>(0);

        $r3 = specialinvoke r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int[] sortedIndices(double[])>($r7);

        $r5 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix selectColumns(org.apache.commons.math3.linear.RealMatrix,int[])>($r6, $r3);

        $r8 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: int[] reverse(int[])>($r3);

        $r6 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix selectColumns(org.apache.commons.math3.linear.RealMatrix,int[])>($r6, $r8);

        $r5 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix divide(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealMatrix)>($r6, $r5);

        $r3 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: int[] inverse(int[])>($r3);

        $r5 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix selectColumns(org.apache.commons.math3.linear.RealMatrix,int[])>($r5, $r3);

        $r6 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix square(org.apache.commons.math3.linear.RealMatrix)>($r5);

        $r9 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix weights>;

        $r6 = interfaceinvoke $r6.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>($r9);

        d0 = interfaceinvoke $r6.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>(0, 0);

        d0 = 0.33999999999999997 / d0;

        $b0 = d1 cmpl d0;

        if $b0 <= 0 goto label2;

        d1 = d0;

     label2:
        $i1 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int dimension>;

        $r5 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix repmat(org.apache.commons.math3.linear.RealMatrix,int,int)>($r5, $i1, 1);

        $r2 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix times(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealMatrix)>($r2, $r5);

        $r5 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix BD>;

        $r2 = interfaceinvoke $r5.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>($r2);

        $r5 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix weights>;

        $r5 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix diag(org.apache.commons.math3.linear.RealMatrix)>($r5);

        $r5 = interfaceinvoke $r2.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>($r5);

        $r2 = interfaceinvoke $r2.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix transpose()>();

        $r2 = interfaceinvoke $r5.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>($r2);

        d0 = 0.5 * d1;

        $d2 = $d2 + d0;

        $r5 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix C>;

        $r5 = interfaceinvoke $r5.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix scalarMultiply(double)>($d2);

        $r4 = interfaceinvoke $r5.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix add(org.apache.commons.math3.linear.RealMatrix)>($r4);

        $d2 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double ccovmu>;

        d0 = 0.5 * d1;

        $d2 = $d2 + d0;

        $r5 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix scalarMultiply(double)>($d2);

        $r6 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix weights>;

        $i1 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int dimension>;

        $r6 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix repmat(org.apache.commons.math3.linear.RealMatrix,int,int)>($r6, 1, $i1);

        $r1 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix transpose()>();

        $r1 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix times(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealMatrix)>($r6, $r1);

        $r1 = interfaceinvoke $r5.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>($r1);

        $r1 = interfaceinvoke $r4.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix add(org.apache.commons.math3.linear.RealMatrix)>($r1);

        $r2 = interfaceinvoke $r2.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix scalarMultiply(double)>(d1);

        $r1 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix subtract(org.apache.commons.math3.linear.RealMatrix)>($r2);

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix C> = $r1;

     label3:
        specialinvoke r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: void updateBD(double)>(d1);

        return;

     label4:
        $d2 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double ccov1>;

        d0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double cc>;

        $d2 = $d2 * d0;

        d0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double cc>;

        d0 = 2.0 - d0;

        $d2 = $d2 * d0;

        goto label1;

     label5:
        $r2 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix C>;

        $r2 = interfaceinvoke $r2.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix scalarMultiply(double)>($d2);

        $r2 = interfaceinvoke $r2.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix add(org.apache.commons.math3.linear.RealMatrix)>($r4);

        $d2 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double ccovmu>;

        $r4 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix scalarMultiply(double)>($d2);

        $r5 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix weights>;

        $i1 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int dimension>;

        $r5 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix repmat(org.apache.commons.math3.linear.RealMatrix,int,int)>($r5, 1, $i1);

        $r1 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix transpose()>();

        $r1 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix times(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealMatrix)>($r5, $r1);

        $r1 = interfaceinvoke $r4.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>($r1);

        $r1 = interfaceinvoke $r2.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix add(org.apache.commons.math3.linear.RealMatrix)>($r1);

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix C> = $r1;

        goto label3;
    }
    private void updateCovarianceDiagonalOnly(boolean, org.apache.commons.math3.linear.RealMatrix)
    {
        org.apache.commons.math3.optimization.direct.CMAESOptimizer r0;
        boolean $z0;
        org.apache.commons.math3.linear.RealMatrix $r1, $r2, $r3, $r4;
        double $d0, d1, $d2;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.optimization.direct.CMAESOptimizer;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: org.apache.commons.math3.linear.RealMatrix;

        if $z0 == 0 goto label2;

        d1 = 0.0;

     label1:
        $d0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double ccov1Sep>;

        $d0 = 1.0 - $d0;

        $d2 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double ccovmuSep>;

        $d0 = $d0 - $d2;

        d1 = d1 + $d0;

        $r2 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix diagC>;

        $r2 = interfaceinvoke $r2.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix scalarMultiply(double)>(d1);

        $r3 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix pc>;

        $r3 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix square(org.apache.commons.math3.linear.RealMatrix)>($r3);

        d1 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double ccov1Sep>;

        $r3 = interfaceinvoke $r3.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix scalarMultiply(double)>(d1);

        $r2 = interfaceinvoke $r2.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix add(org.apache.commons.math3.linear.RealMatrix)>($r3);

        $r3 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix diagC>;

        $r4 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix square(org.apache.commons.math3.linear.RealMatrix)>($r1);

        $r1 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix weights>;

        $r1 = interfaceinvoke $r4.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>($r1);

        $r1 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix times(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealMatrix)>($r3, $r1);

        d1 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double ccovmuSep>;

        $r1 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix scalarMultiply(double)>(d1);

        $r1 = interfaceinvoke $r2.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix add(org.apache.commons.math3.linear.RealMatrix)>($r1);

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix diagC> = $r1;

        $r1 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix diagC>;

        $r1 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix sqrt(org.apache.commons.math3.linear.RealMatrix)>($r1);

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix diagD> = $r1;

        $i0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int diagonalOnly>;

        if $i0 <= 1 goto label3;

        $i0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int iterations>;

        $i1 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int diagonalOnly>;

        if $i0 <= $i1 goto label3;

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int diagonalOnly> = 0;

        $i0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int dimension>;

        $i1 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int dimension>;

        $r1 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix eye(int,int)>($i0, $i1);

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix B> = $r1;

        $r1 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix diagD>;

        $r1 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix diag(org.apache.commons.math3.linear.RealMatrix)>($r1);

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix BD> = $r1;

        $r1 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix diagC>;

        $r1 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix diag(org.apache.commons.math3.linear.RealMatrix)>($r1);

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix C> = $r1;

        return;

     label2:
        d1 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double ccov1Sep>;

        $d0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double cc>;

        d1 = d1 * $d0;

        $d0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double cc>;

        $d0 = 2.0 - $d0;

        d1 = d1 * $d0;

        goto label1;

     label3:
        return;
    }
    private boolean updateEvolutionPaths(org.apache.commons.math3.linear.RealMatrix, org.apache.commons.math3.linear.RealMatrix)
    {
        org.apache.commons.math3.optimization.direct.CMAESOptimizer r0;
        org.apache.commons.math3.linear.RealMatrix $r1, $r2, $r3, $r4;
        double $d0, $d1;
        int $i0;
        byte $b1;
        boolean z0;

        r0 := @this: org.apache.commons.math3.optimization.direct.CMAESOptimizer;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        $r2 := @parameter1: org.apache.commons.math3.linear.RealMatrix;

        $r3 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix ps>;

        $d0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double cs>;

        $d0 = 1.0 - $d0;

        $r3 = interfaceinvoke $r3.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix scalarMultiply(double)>($d0);

        $r4 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix B>;

        $r1 = interfaceinvoke $r4.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>($r1);

        $d0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double cs>;

        $d1 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double cs>;

        $d1 = 2.0 - $d1;

        $d0 = $d0 * $d1;

        $d1 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double mueff>;

        $d0 = $d0 * $d1;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d0);

        $r1 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix scalarMultiply(double)>($d0);

        $r1 = interfaceinvoke $r3.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix add(org.apache.commons.math3.linear.RealMatrix)>($r1);

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix ps> = $r1;

        $r1 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix ps>;

        $d0 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: double getFrobeniusNorm()>();

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double normps> = $d0;

        $d0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double normps>;

        $d1 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double cs>;

        $d1 = 1.0 - $d1;

        $i0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int iterations>;

        $i0 = $i0 * 2;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,int)>($d1, $i0);

        $d1 = 1.0 - $d1;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d1);

        $d0 = $d0 / $d1;

        $d1 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double chiN>;

        $d0 = $d0 / $d1;

        $i0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int dimension>;

        $d1 = (double) $i0;

        $d1 = $d1 + 1.0;

        $d1 = 2.0 / $d1;

        $d1 = 1.4 + $d1;

        $b1 = $d0 cmpg $d1;

        if $b1 >= 0 goto label2;

        z0 = 1;

     label1:
        $r1 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix pc>;

        $d0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double cc>;

        $d0 = 1.0 - $d0;

        $r1 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix scalarMultiply(double)>($d0);

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix pc> = $r1;

        if z0 == 0 goto label3;

        $r1 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix pc>;

        $r3 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix xmean>;

        $r2 = interfaceinvoke $r3.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix subtract(org.apache.commons.math3.linear.RealMatrix)>($r2);

        $d0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double cc>;

        $d1 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double cc>;

        $d1 = 2.0 - $d1;

        $d0 = $d0 * $d1;

        $d1 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double mueff>;

        $d0 = $d0 * $d1;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d0);

        $d1 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double sigma>;

        $d0 = $d0 / $d1;

        $r2 = interfaceinvoke $r2.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix scalarMultiply(double)>($d0);

        $r1 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix add(org.apache.commons.math3.linear.RealMatrix)>($r2);

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix pc> = $r1;

        return z0;

     label2:
        z0 = 0;

        goto label1;

     label3:
        return z0;
    }
    private static org.apache.commons.math3.linear.RealMatrix zeros(int, int)
    {
        int $i0, $i1;
        org.apache.commons.math3.linear.Array2DRowRealMatrix $r0;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r0 = new org.apache.commons.math3.linear.Array2DRowRealMatrix;

        specialinvoke $r0.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void <init>(int,int)>($i0, $i1);

        return $r0;
    }
    protected org.apache.commons.math3.optimization.PointValuePair doOptimize()
    {
        org.apache.commons.math3.optimization.direct.CMAESOptimizer r0;
        org.apache.commons.math3.linear.RealMatrix r1, $r10, $r11, $r12, $r13;
        org.apache.commons.math3.optimization.PointValuePair r2, r8, r9;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7;
        org.apache.commons.math3.exception.TooManyEvaluationsException $r3;
        org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction r4;
        org.apache.commons.math3.optimization.GoalType $r5, $r6;
        boolean $z0;
        double[] $r7, $r14, $r18;
        int $i0, $i1, $i2;
        int[] $r15, $r16;
        byte $b3;
        org.apache.commons.math3.optimization.ConvergenceChecker $r17;
        java.util.List $r19;
        java.lang.Double $r20;

        r0 := @this: org.apache.commons.math3.optimization.direct.CMAESOptimizer;

        specialinvoke r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: void checkParameters()>();

        $r5 = virtualinvoke r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.optimization.GoalType getGoalType()>();

        $r6 = <org.apache.commons.math3.optimization.GoalType: org.apache.commons.math3.optimization.GoalType MINIMIZE>;

        $z0 = virtualinvoke $r5.<org.apache.commons.math3.optimization.GoalType: boolean equals(java.lang.Object)>($r6);

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: boolean isMinimize> = $z0;

        r4 = new org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction;

        specialinvoke r4.<org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction: void <init>(org.apache.commons.math3.optimization.direct.CMAESOptimizer)>(r0);

        $r7 = virtualinvoke r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double[] getStartPoint()>();

        $i0 = lengthof $r7;

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int dimension> = $i0;

        specialinvoke r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: void initializeCMA(double[])>($r7);

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int iterations> = 0;

        d0 = virtualinvoke r4.<org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction: double value(double[])>($r7);

        d2 = d0;

        $r7 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double[] fitnessHistory>;

        staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: void push(double[],double)>($r7, d0);

        r8 = new org.apache.commons.math3.optimization.PointValuePair;

        $r7 = virtualinvoke r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double[] getStartPoint()>();

        $z0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: boolean isMinimize>;

        if $z0 == 0 goto label09;

     label01:
        specialinvoke r8.<org.apache.commons.math3.optimization.PointValuePair: void <init>(double[],double)>($r7, d0);

        r9 = null;

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int iterations> = 1;

     label02:
        $i0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int iterations>;

        $i1 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int maxIterations>;

        if $i0 > $i1 goto label36;

        $i0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int dimension>;

        $i1 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int lambda>;

        $r10 = specialinvoke r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix randn1(int,int)>($i0, $i1);

        $i0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int dimension>;

        $i1 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int lambda>;

        $r11 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix zeros(int,int)>($i0, $i1);

        $i0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int lambda>;

        $r7 = newarray (double)[$i0];

        $i0 = 0;

     label03:
        $i1 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int lambda>;

        if $i0 >= $i1 goto label13;

        r1 = null;

        $i1 = 0;

     label04:
        $i2 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int checkFeasableCount>;

        $i2 = $i2 + 1;

        if $i1 >= $i2 goto label06;

        $i2 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int diagonalOnly>;

        if $i2 > 0 goto label10;

        r1 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix xmean>;

        $r12 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix BD>;

        $r13 = interfaceinvoke $r10.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix getColumnMatrix(int)>($i0);

        $r12 = interfaceinvoke $r12.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>($r13);

        d0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double sigma>;

        $r12 = interfaceinvoke $r12.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix scalarMultiply(double)>(d0);

        r1 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix add(org.apache.commons.math3.linear.RealMatrix)>($r12);

     label05:
        $i2 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int checkFeasableCount>;

        if $i1 >= $i2 goto label06;

        $r14 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: double[] getColumn(int)>(0);

        $z0 = virtualinvoke r4.<org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction: boolean isFeasible(double[])>($r14);

        if $z0 == 0 goto label11;

     label06:
        staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: void copyColumn(org.apache.commons.math3.linear.RealMatrix,int,org.apache.commons.math3.linear.RealMatrix,int)>(r1, 0, $r11, $i0);

     label07:
        $r14 = interfaceinvoke $r11.<org.apache.commons.math3.linear.RealMatrix: double[] getColumn(int)>($i0);

        d0 = virtualinvoke r4.<org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction: double value(double[])>($r14);

     label08:
        $r7[$i0] = d0;

        $i0 = $i0 + 1;

        goto label03;

     label09:
        d0 = neg d0;

        goto label01;

     label10:
        r1 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix xmean>;

        $r12 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix diagD>;

        $r13 = interfaceinvoke $r10.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix getColumnMatrix(int)>($i0);

        $r12 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix times(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealMatrix)>($r12, $r13);

        d0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double sigma>;

        $r12 = interfaceinvoke $r12.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix scalarMultiply(double)>(d0);

        r1 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix add(org.apache.commons.math3.linear.RealMatrix)>($r12);

        goto label05;

     label11:
        $i2 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int dimension>;

        $r14 = specialinvoke r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double[] randn(int)>($i2);

        interfaceinvoke $r10.<org.apache.commons.math3.linear.RealMatrix: void setColumn(int,double[])>($i0, $r14);

        $i1 = $i1 + 1;

        goto label04;

     label12:
        $r3 := @caughtexception;

        return r8;

     label13:
        $r15 = specialinvoke r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int[] sortedIndices(double[])>($r7);

        r1 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix xmean>;

        $i0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int mu>;

        $r16 = staticinvoke <org.apache.commons.math3.util.MathArrays: int[] copyOf(int[],int)>($r15, $i0);

        $r11 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix selectColumns(org.apache.commons.math3.linear.RealMatrix,int[])>($r11, $r16);

        $r12 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix weights>;

        $r12 = interfaceinvoke $r11.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>($r12);

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix xmean> = $r12;

        $i0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int mu>;

        $r16 = staticinvoke <org.apache.commons.math3.util.MathArrays: int[] copyOf(int[],int)>($r15, $i0);

        $r12 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix selectColumns(org.apache.commons.math3.linear.RealMatrix,int[])>($r10, $r16);

        $r13 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix weights>;

        $r13 = interfaceinvoke $r12.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>($r13);

        $z0 = specialinvoke r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: boolean updateEvolutionPaths(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealMatrix)>($r13, r1);

        $i0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int diagonalOnly>;

        if $i0 > 0 goto label22;

        specialinvoke r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: void updateCovariance(boolean,org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealMatrix,int[],org.apache.commons.math3.linear.RealMatrix)>($z0, $r11, $r10, $r15, r1);

     label14:
        d0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double sigma>;

        d1 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double normps>;

        $d3 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double chiN>;

        d1 = d1 / $d3;

        d1 = d1 - 1.0;

        $d3 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double cs>;

        d1 = d1 * $d3;

        $d3 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double damps>;

        d1 = d1 / $d3;

        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double min(double,double)>(1.0, d1);

        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>(d1);

        d0 = d0 * d1;

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double sigma> = d0;

        $i0 = $r15[0];

        d0 = $r7[$i0];

        $i0 = lengthof $r15;

        $i0 = $i0 + -1;

        $i0 = $r15[$i0];

        d1 = $r7[$i0];

        $b3 = d2 cmpl d0;

        if $b3 <= 0 goto label16;

        d2 = d0;

        r9 = r8;

        r8 = new org.apache.commons.math3.optimization.PointValuePair;

        $r14 = interfaceinvoke $r11.<org.apache.commons.math3.linear.RealMatrix: double[] getColumn(int)>(0);

        $r14 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction: double[] access$000(org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction,double[])>(r4, $r14);

        $z0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: boolean isMinimize>;

        if $z0 == 0 goto label23;

        $d3 = d0;

     label15:
        specialinvoke r8.<org.apache.commons.math3.optimization.PointValuePair: void <init>(double[],double)>($r14, $d3);

        $r17 = virtualinvoke r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.optimization.ConvergenceChecker getConvergenceChecker()>();

        if $r17 == null goto label16;

        if r9 == null goto label16;

        $r17 = virtualinvoke r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.optimization.ConvergenceChecker getConvergenceChecker()>();

        $i0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int iterations>;

        $z0 = interfaceinvoke $r17.<org.apache.commons.math3.optimization.ConvergenceChecker: boolean converged(int,java.lang.Object,java.lang.Object)>($i0, r8, r9);

        if $z0 != 0 goto label36;

     label16:
        $d3 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double stopFitness>;

        $b3 = $d3 cmpl 0.0;

        if $b3 == 0 goto label18;

        $z0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: boolean isMinimize>;

        if $z0 == 0 goto label24;

        $d3 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double stopFitness>;

     label17:
        $b3 = d0 cmpg $d3;

        if $b3 < 0 goto label36;

     label18:
        $r10 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix diagC>;

        $r10 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix sqrt(org.apache.commons.math3.linear.RealMatrix)>($r10);

        $r14 = interfaceinvoke $r10.<org.apache.commons.math3.linear.RealMatrix: double[] getColumn(int)>(0);

        $r10 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix pc>;

        $r18 = interfaceinvoke $r10.<org.apache.commons.math3.linear.RealMatrix: double[] getColumn(int)>(0);

        $i0 = 0;

     label19:
        $i1 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int dimension>;

        if $i0 >= $i1 goto label20;

        $d3 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double sigma>;

        $d4 = $r18[$i0];

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d4);

        $d5 = $r14[$i0];

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>($d4, $d5);

        $d3 = $d3 * $d4;

        $d4 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double stopTolX>;

        $b3 = $d3 cmpl $d4;

        if $b3 <= 0 goto label25;

     label20:
        $i0 = 0;

     label21:
        $i1 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int dimension>;

        if $i0 >= $i1 goto label26;

        $d3 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double sigma>;

        $d4 = $r14[$i0];

        $d3 = $d3 * $d4;

        $d4 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double stopTolUpX>;

        $b3 = $d3 cmpl $d4;

        if $b3 > 0 goto label36;

        $i0 = $i0 + 1;

        goto label21;

     label22:
        specialinvoke r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: void updateCovarianceDiagonalOnly(boolean,org.apache.commons.math3.linear.RealMatrix)>($z0, $r12);

        goto label14;

     label23:
        $d3 = neg d0;

        goto label15;

     label24:
        $d3 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double stopFitness>;

        $d3 = neg $d3;

        goto label17;

     label25:
        $i1 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int dimension>;

        $i1 = $i1 + -1;

        if $i0 >= $i1 goto label36;

        $i0 = $i0 + 1;

        goto label19;

     label26:
        $r14 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double[] fitnessHistory>;

        $d3 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: double min(double[])>($r14);

        $r14 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double[] fitnessHistory>;

        $d4 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: double max(double[])>($r14);

        $i0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int iterations>;

        if $i0 <= 2 goto label27;

        $d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>($d4, d1);

        $d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double min(double,double)>($d3, d0);

        $d5 = $d5 - $d6;

        $d6 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double stopTolFun>;

        $b3 = $d5 cmpg $d6;

        if $b3 < 0 goto label36;

     label27:
        $i0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int iterations>;

        $r14 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double[] fitnessHistory>;

        $i1 = lengthof $r14;

        if $i0 <= $i1 goto label28;

        $d5 = $d4 - $d3;

        $d6 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double stopTolHistFun>;

        $b3 = $d5 cmpg $d6;

        if $b3 < 0 goto label36;

     label28:
        $r10 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix diagD>;

        $d5 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: double max(org.apache.commons.math3.linear.RealMatrix)>($r10);

        $r10 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix diagD>;

        $d6 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: double min(org.apache.commons.math3.linear.RealMatrix)>($r10);

        $d5 = $d5 / $d6;

        $b3 = $d5 cmpl 1.0E7;

        if $b3 > 0 goto label36;

        $r17 = virtualinvoke r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.optimization.ConvergenceChecker getConvergenceChecker()>();

        if $r17 == null goto label31;

        r2 = new org.apache.commons.math3.optimization.PointValuePair;

        $r14 = interfaceinvoke $r11.<org.apache.commons.math3.linear.RealMatrix: double[] getColumn(int)>(0);

        $z0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: boolean isMinimize>;

        if $z0 == 0 goto label35;

        $d5 = d0;

     label29:
        specialinvoke r2.<org.apache.commons.math3.optimization.PointValuePair: void <init>(double[],double)>($r14, $d5);

        if r9 == null goto label30;

        $r17 = virtualinvoke r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.optimization.ConvergenceChecker getConvergenceChecker()>();

        $i0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int iterations>;

        $z0 = interfaceinvoke $r17.<org.apache.commons.math3.optimization.ConvergenceChecker: boolean converged(int,java.lang.Object,java.lang.Object)>($i0, r2, r9);

        if $z0 != 0 goto label36;

     label30:
        r9 = r2;

     label31:
        $i0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int lambda>;

        $d5 = (double) $i0;

        $d5 = $d5 / 4.0;

        $d5 = 0.1 + $d5;

        $i0 = (int) $d5;

        $i0 = $r15[$i0];

        $d5 = $r7[$i0];

        $b3 = d2 cmpl $d5;

        if $b3 != 0 goto label32;

        $d5 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double sigma>;

        $d6 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double cs>;

        $d7 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double damps>;

        $d6 = $d6 / $d7;

        $d6 = 0.2 + $d6;

        $d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d6);

        $d5 = $d5 * $d6;

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double sigma> = $d5;

     label32:
        $i0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int iterations>;

        if $i0 <= 2 goto label33;

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>($d4, d0);

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double min(double,double)>($d3, d0);

        $d3 = $d4 - $d3;

        $b3 = $d3 cmpl 0.0;

        if $b3 != 0 goto label33;

        $d3 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double sigma>;

        $d4 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double cs>;

        $d5 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double damps>;

        $d4 = $d4 / $d5;

        $d4 = 0.2 + $d4;

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d4);

        $d3 = $d3 * $d4;

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double sigma> = $d3;

     label33:
        $r7 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double[] fitnessHistory>;

        staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: void push(double[],double)>($r7, d0);

        d1 = d1 - d0;

        virtualinvoke r4.<org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction: void setValueRange(double)>(d1);

        $z0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: boolean generateStatistics>;

        if $z0 == 0 goto label34;

        $r19 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: java.util.List statisticsSigmaHistory>;

        d1 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double sigma>;

        $r20 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        interfaceinvoke $r19.<java.util.List: boolean add(java.lang.Object)>($r20);

        $r19 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: java.util.List statisticsFitnessHistory>;

        $r20 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        interfaceinvoke $r19.<java.util.List: boolean add(java.lang.Object)>($r20);

        $r19 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: java.util.List statisticsMeanHistory>;

        $r10 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix xmean>;

        $r10 = interfaceinvoke $r10.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix transpose()>();

        interfaceinvoke $r19.<java.util.List: boolean add(java.lang.Object)>($r10);

        $r19 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: java.util.List statisticsDHistory>;

        $r10 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: org.apache.commons.math3.linear.RealMatrix diagD>;

        $r10 = interfaceinvoke $r10.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix transpose()>();

        $r10 = interfaceinvoke $r10.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix scalarMultiply(double)>(100000.0);

        interfaceinvoke $r19.<java.util.List: boolean add(java.lang.Object)>($r10);

     label34:
        $i0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int iterations>;

        $i0 = $i0 + 1;

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: int iterations> = $i0;

        goto label02;

     label35:
        $d5 = neg d0;

        goto label29;

     label36:
        return r8;

        catch org.apache.commons.math3.exception.TooManyEvaluationsException from label07 to label08 with label12;
    }
    public java.util.List getStatisticsDHistory()
    {
        org.apache.commons.math3.optimization.direct.CMAESOptimizer r0;
        java.util.List r1;

        r0 := @this: org.apache.commons.math3.optimization.direct.CMAESOptimizer;

        r1 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: java.util.List statisticsDHistory>;

        return r1;
    }
    public java.util.List getStatisticsFitnessHistory()
    {
        org.apache.commons.math3.optimization.direct.CMAESOptimizer r0;
        java.util.List r1;

        r0 := @this: org.apache.commons.math3.optimization.direct.CMAESOptimizer;

        r1 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: java.util.List statisticsFitnessHistory>;

        return r1;
    }
    public java.util.List getStatisticsMeanHistory()
    {
        org.apache.commons.math3.optimization.direct.CMAESOptimizer r0;
        java.util.List r1;

        r0 := @this: org.apache.commons.math3.optimization.direct.CMAESOptimizer;

        r1 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: java.util.List statisticsMeanHistory>;

        return r1;
    }
    public java.util.List getStatisticsSigmaHistory()
    {
        org.apache.commons.math3.optimization.direct.CMAESOptimizer r0;
        java.util.List r1;

        r0 := @this: org.apache.commons.math3.optimization.direct.CMAESOptimizer;

        r1 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: java.util.List statisticsSigmaHistory>;

        return r1;
    }
    protected transient org.apache.commons.math3.optimization.PointValuePair optimizeInternal(int, org.apache.commons.math3.analysis.MultivariateFunction, org.apache.commons.math3.optimization.GoalType, org.apache.commons.math3.optimization.OptimizationData[])
    {
        org.apache.commons.math3.optimization.direct.CMAESOptimizer r0;
        int $i0;
        org.apache.commons.math3.analysis.MultivariateFunction $r1;
        org.apache.commons.math3.optimization.GoalType $r2;
        org.apache.commons.math3.optimization.OptimizationData[] $r3;
        org.apache.commons.math3.optimization.PointValuePair $r4;

        r0 := @this: org.apache.commons.math3.optimization.direct.CMAESOptimizer;

        $i0 := @parameter0: int;

        $r1 := @parameter1: org.apache.commons.math3.analysis.MultivariateFunction;

        $r2 := @parameter2: org.apache.commons.math3.optimization.GoalType;

        $r3 := @parameter3: org.apache.commons.math3.optimization.OptimizationData[];

        specialinvoke r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: void parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])>($r3);

        $r4 = specialinvoke r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateSimpleBoundsOptimizer: org.apache.commons.math3.optimization.PointValuePair optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateFunction,org.apache.commons.math3.optimization.GoalType,org.apache.commons.math3.optimization.OptimizationData[])>($i0, $r1, $r2, $r3);

        return $r4;
    }
