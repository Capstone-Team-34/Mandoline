org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter extends java.lang.Object implements org.apache.commons.math3.analysis.MultivariateFunction
private final org.apache.commons.math3.analysis.MultivariateFunction bounded
private final org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter$Mapper[] mappers
    public void <init>(org.apache.commons.math3.analysis.MultivariateFunction, double[], double[])
    {
        org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter r0;
        org.apache.commons.math3.analysis.MultivariateFunction $r1;
        double[] $r2, $r3;
        double $d0, $d1;
        int $i0, $i1;
        org.apache.commons.math3.exception.DimensionMismatchException $r4;
        byte $b2;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r5;
        java.lang.Double $r6, $r7;
        org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter$Mapper[] $r8;
        boolean $z0;
        org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter$NoBoundsMapper $r9;
        org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter$UpperBoundMapper $r10;
        org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter$LowerBoundMapper $r11;
        org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter$LowerUpperBoundMapper $r12;

        r0 := @this: org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter;

        $r1 := @parameter0: org.apache.commons.math3.analysis.MultivariateFunction;

        $r2 := @parameter1: double[];

        $r3 := @parameter2: double[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>($r2);

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>($r3);

        $i0 = lengthof $r2;

        $i1 = lengthof $r3;

        if $i0 == $i1 goto label01;

        $r4 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i0 = lengthof $r2;

        $i1 = lengthof $r3;

        specialinvoke $r4.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i0, $i1);

        throw $r4;

     label01:
        $i0 = 0;

     label02:
        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label04;

        $d0 = $r3[$i0];

        $d1 = $r2[$i0];

        $b2 = $d0 cmpl $d1;

        if $b2 >= 0 goto label03;

        $r5 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $d0 = $r3[$i0];

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $d0 = $r2[$i0];

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        specialinvoke $r5.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r6, $r7, 1);

        throw $r5;

     label03:
        $i0 = $i0 + 1;

        goto label02;

     label04:
        r0.<org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter: org.apache.commons.math3.analysis.MultivariateFunction bounded> = $r1;

        $i0 = lengthof $r2;

        $r8 = newarray (org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter$Mapper)[$i0];

        r0.<org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter: org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter$Mapper[] mappers> = $r8;

        $i0 = 0;

     label05:
        $r8 = r0.<org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter: org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter$Mapper[] mappers>;

        $i1 = lengthof $r8;

        if $i0 >= $i1 goto label10;

        $d0 = $r2[$i0];

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d0);

        if $z0 == 0 goto label08;

        $d0 = $r3[$i0];

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d0);

        if $z0 == 0 goto label07;

        $r8 = r0.<org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter: org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter$Mapper[] mappers>;

        $r9 = new org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter$NoBoundsMapper;

        specialinvoke $r9.<org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter$NoBoundsMapper: void <init>()>();

        $r8[$i0] = $r9;

     label06:
        $i0 = $i0 + 1;

        goto label05;

     label07:
        $r8 = r0.<org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter: org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter$Mapper[] mappers>;

        $r10 = new org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter$UpperBoundMapper;

        $d0 = $r3[$i0];

        specialinvoke $r10.<org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter$UpperBoundMapper: void <init>(double)>($d0);

        $r8[$i0] = $r10;

        goto label06;

     label08:
        $d0 = $r3[$i0];

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d0);

        if $z0 == 0 goto label09;

        $r8 = r0.<org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter: org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter$Mapper[] mappers>;

        $r11 = new org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter$LowerBoundMapper;

        $d0 = $r2[$i0];

        specialinvoke $r11.<org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter$LowerBoundMapper: void <init>(double)>($d0);

        $r8[$i0] = $r11;

        goto label06;

     label09:
        $r8 = r0.<org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter: org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter$Mapper[] mappers>;

        $r12 = new org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter$LowerUpperBoundMapper;

        $d1 = $r2[$i0];

        $d0 = $r3[$i0];

        specialinvoke $r12.<org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter$LowerUpperBoundMapper: void <init>(double,double)>($d1, $d0);

        $r8[$i0] = $r12;

        goto label06;

     label10:
        return;
    }
    public double[] boundedToUnbounded(double[])
    {
        org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter r0;
        double[] $r1, r2;
        double $d0;
        org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter$Mapper[] $r3;
        int $i0, $i1;
        org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter$Mapper $r4;

        r0 := @this: org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter;

        $r1 := @parameter0: double[];

        $r3 = r0.<org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter: org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter$Mapper[] mappers>;

        $i0 = lengthof $r3;

        r2 = newarray (double)[$i0];

        $i0 = 0;

     label1:
        $r3 = r0.<org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter: org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter$Mapper[] mappers>;

        $i1 = lengthof $r3;

        if $i0 >= $i1 goto label2;

        $r3 = r0.<org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter: org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter$Mapper[] mappers>;

        $r4 = $r3[$i0];

        $d0 = $r1[$i0];

        $d0 = interfaceinvoke $r4.<org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter$Mapper: double boundedToUnbounded(double)>($d0);

        r2[$i0] = $d0;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return r2;
    }
    public double[] unboundedToBounded(double[])
    {
        org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter r0;
        double[] $r1, r2;
        double $d0;
        org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter$Mapper[] $r3;
        int $i0, $i1;
        org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter$Mapper $r4;

        r0 := @this: org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter;

        $r1 := @parameter0: double[];

        $r3 = r0.<org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter: org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter$Mapper[] mappers>;

        $i0 = lengthof $r3;

        r2 = newarray (double)[$i0];

        $i0 = 0;

     label1:
        $r3 = r0.<org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter: org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter$Mapper[] mappers>;

        $i1 = lengthof $r3;

        if $i0 >= $i1 goto label2;

        $r3 = r0.<org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter: org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter$Mapper[] mappers>;

        $r4 = $r3[$i0];

        $d0 = $r1[$i0];

        $d0 = interfaceinvoke $r4.<org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter$Mapper: double unboundedToBounded(double)>($d0);

        r2[$i0] = $d0;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return r2;
    }
    public double value(double[])
    {
        org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter r0;
        double[] $r1;
        org.apache.commons.math3.analysis.MultivariateFunction $r2;
        double $d0;

        r0 := @this: org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter;

        $r1 := @parameter0: double[];

        $r2 = r0.<org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter: org.apache.commons.math3.analysis.MultivariateFunction bounded>;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter: double[] unboundedToBounded(double[])>($r1);

        $d0 = interfaceinvoke $r2.<org.apache.commons.math3.analysis.MultivariateFunction: double value(double[])>($r1);

        return $d0;
    }
