org.apache.commons.math3.optimization.direct.SimplexOptimizer extends org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer implements org.apache.commons.math3.optimization.MultivariateOptimizer
private org.apache.commons.math3.optimization.direct.AbstractSimplex simplex
    public void <init>()
    {
        org.apache.commons.math3.optimization.direct.SimplexOptimizer r0;
        org.apache.commons.math3.optimization.SimpleValueChecker $r1;

        r0 := @this: org.apache.commons.math3.optimization.direct.SimplexOptimizer;

        $r1 = new org.apache.commons.math3.optimization.SimpleValueChecker;

        specialinvoke $r1.<org.apache.commons.math3.optimization.SimpleValueChecker: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.optimization.direct.SimplexOptimizer: void <init>(org.apache.commons.math3.optimization.ConvergenceChecker)>($r1);

        return;
    }
    public void <init>(double, double)
    {
        org.apache.commons.math3.optimization.direct.SimplexOptimizer r0;
        double $d0, $d1;
        org.apache.commons.math3.optimization.SimpleValueChecker $r1;

        r0 := @this: org.apache.commons.math3.optimization.direct.SimplexOptimizer;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $r1 = new org.apache.commons.math3.optimization.SimpleValueChecker;

        specialinvoke $r1.<org.apache.commons.math3.optimization.SimpleValueChecker: void <init>(double,double)>($d0, $d1);

        specialinvoke r0.<org.apache.commons.math3.optimization.direct.SimplexOptimizer: void <init>(org.apache.commons.math3.optimization.ConvergenceChecker)>($r1);

        return;
    }
    public void <init>(org.apache.commons.math3.optimization.ConvergenceChecker)
    {
        org.apache.commons.math3.optimization.direct.SimplexOptimizer r0;
        org.apache.commons.math3.optimization.ConvergenceChecker r1;

        r0 := @this: org.apache.commons.math3.optimization.direct.SimplexOptimizer;

        r1 := @parameter0: org.apache.commons.math3.optimization.ConvergenceChecker;

        specialinvoke r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: void <init>(org.apache.commons.math3.optimization.ConvergenceChecker)>(r1);

        return;
    }
    private transient void parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])
    {
        org.apache.commons.math3.optimization.direct.SimplexOptimizer r0;
        org.apache.commons.math3.optimization.OptimizationData[] $r1;
        int i0, i1;
        boolean $z0;
        org.apache.commons.math3.optimization.OptimizationData r2;
        org.apache.commons.math3.optimization.direct.AbstractSimplex r3;

        r0 := @this: org.apache.commons.math3.optimization.direct.SimplexOptimizer;

        $r1 := @parameter0: org.apache.commons.math3.optimization.OptimizationData[];

        i0 = lengthof $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r2 = $r1[i1];

        $z0 = r2 instanceof org.apache.commons.math3.optimization.direct.AbstractSimplex;

        if $z0 == 0 goto label2;

        r3 = (org.apache.commons.math3.optimization.direct.AbstractSimplex) r2;

        r0.<org.apache.commons.math3.optimization.direct.SimplexOptimizer: org.apache.commons.math3.optimization.direct.AbstractSimplex simplex> = r3;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }
    protected org.apache.commons.math3.optimization.PointValuePair doOptimize()
    {
        org.apache.commons.math3.optimization.direct.SimplexOptimizer r0;
        org.apache.commons.math3.optimization.direct.SimplexOptimizer$2 r1;
        org.apache.commons.math3.optimization.direct.SimplexOptimizer$1 r2;
        org.apache.commons.math3.optimization.PointValuePair r3, $r11;
        org.apache.commons.math3.optimization.direct.AbstractSimplex $r4;
        org.apache.commons.math3.exception.NullArgumentException $r5;
        org.apache.commons.math3.optimization.GoalType $r6, $r7;
        boolean z0;
        double[] $r8;
        org.apache.commons.math3.optimization.PointValuePair[] r9;
        int i0, i1, $i2;
        org.apache.commons.math3.optimization.ConvergenceChecker $r10;

        r0 := @this: org.apache.commons.math3.optimization.direct.SimplexOptimizer;

        $r4 = r0.<org.apache.commons.math3.optimization.direct.SimplexOptimizer: org.apache.commons.math3.optimization.direct.AbstractSimplex simplex>;

        if $r4 != null goto label1;

        $r5 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r5.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r5;

     label1:
        r2 = new org.apache.commons.math3.optimization.direct.SimplexOptimizer$1;

        specialinvoke r2.<org.apache.commons.math3.optimization.direct.SimplexOptimizer$1: void <init>(org.apache.commons.math3.optimization.direct.SimplexOptimizer)>(r0);

        $r6 = virtualinvoke r0.<org.apache.commons.math3.optimization.direct.SimplexOptimizer: org.apache.commons.math3.optimization.GoalType getGoalType()>();

        $r7 = <org.apache.commons.math3.optimization.GoalType: org.apache.commons.math3.optimization.GoalType MINIMIZE>;

        if $r6 != $r7 goto label6;

        z0 = 1;

     label2:
        r1 = new org.apache.commons.math3.optimization.direct.SimplexOptimizer$2;

        specialinvoke r1.<org.apache.commons.math3.optimization.direct.SimplexOptimizer$2: void <init>(org.apache.commons.math3.optimization.direct.SimplexOptimizer,boolean)>(r0, z0);

        $r4 = r0.<org.apache.commons.math3.optimization.direct.SimplexOptimizer: org.apache.commons.math3.optimization.direct.AbstractSimplex simplex>;

        $r8 = virtualinvoke r0.<org.apache.commons.math3.optimization.direct.SimplexOptimizer: double[] getStartPoint()>();

        virtualinvoke $r4.<org.apache.commons.math3.optimization.direct.AbstractSimplex: void build(double[])>($r8);

        $r4 = r0.<org.apache.commons.math3.optimization.direct.SimplexOptimizer: org.apache.commons.math3.optimization.direct.AbstractSimplex simplex>;

        virtualinvoke $r4.<org.apache.commons.math3.optimization.direct.AbstractSimplex: void evaluate(org.apache.commons.math3.analysis.MultivariateFunction,java.util.Comparator)>(r2, r1);

        r9 = null;

        i0 = 0;

        $r10 = virtualinvoke r0.<org.apache.commons.math3.optimization.direct.SimplexOptimizer: org.apache.commons.math3.optimization.ConvergenceChecker getConvergenceChecker()>();

     label3:
        if i0 <= 0 goto label9;

        z0 = 1;

        i1 = 0;

     label4:
        $r4 = r0.<org.apache.commons.math3.optimization.direct.SimplexOptimizer: org.apache.commons.math3.optimization.direct.AbstractSimplex simplex>;

        $i2 = virtualinvoke $r4.<org.apache.commons.math3.optimization.direct.AbstractSimplex: int getSize()>();

        if i1 >= $i2 goto label8;

        r3 = r9[i1];

        if z0 == 0 goto label7;

        $r4 = r0.<org.apache.commons.math3.optimization.direct.SimplexOptimizer: org.apache.commons.math3.optimization.direct.AbstractSimplex simplex>;

        $r11 = virtualinvoke $r4.<org.apache.commons.math3.optimization.direct.AbstractSimplex: org.apache.commons.math3.optimization.PointValuePair getPoint(int)>(i1);

        z0 = interfaceinvoke $r10.<org.apache.commons.math3.optimization.ConvergenceChecker: boolean converged(int,java.lang.Object,java.lang.Object)>(i0, r3, $r11);

        if z0 == 0 goto label7;

        z0 = 1;

     label5:
        i1 = i1 + 1;

        goto label4;

     label6:
        z0 = 0;

        goto label2;

     label7:
        z0 = 0;

        goto label5;

     label8:
        if z0 == 0 goto label9;

        $r4 = r0.<org.apache.commons.math3.optimization.direct.SimplexOptimizer: org.apache.commons.math3.optimization.direct.AbstractSimplex simplex>;

        r3 = virtualinvoke $r4.<org.apache.commons.math3.optimization.direct.AbstractSimplex: org.apache.commons.math3.optimization.PointValuePair getPoint(int)>(0);

        return r3;

     label9:
        $r4 = r0.<org.apache.commons.math3.optimization.direct.SimplexOptimizer: org.apache.commons.math3.optimization.direct.AbstractSimplex simplex>;

        r9 = virtualinvoke $r4.<org.apache.commons.math3.optimization.direct.AbstractSimplex: org.apache.commons.math3.optimization.PointValuePair[] getPoints()>();

        $r4 = r0.<org.apache.commons.math3.optimization.direct.SimplexOptimizer: org.apache.commons.math3.optimization.direct.AbstractSimplex simplex>;

        virtualinvoke $r4.<org.apache.commons.math3.optimization.direct.AbstractSimplex: void iterate(org.apache.commons.math3.analysis.MultivariateFunction,java.util.Comparator)>(r2, r1);

        i0 = i0 + 1;

        goto label3;
    }
    protected transient org.apache.commons.math3.optimization.PointValuePair optimizeInternal(int, org.apache.commons.math3.analysis.MultivariateFunction, org.apache.commons.math3.optimization.GoalType, org.apache.commons.math3.optimization.OptimizationData[])
    {
        org.apache.commons.math3.optimization.direct.SimplexOptimizer r0;
        int $i0;
        org.apache.commons.math3.analysis.MultivariateFunction $r1;
        org.apache.commons.math3.optimization.GoalType $r2;
        org.apache.commons.math3.optimization.OptimizationData[] $r3;
        org.apache.commons.math3.optimization.PointValuePair $r4;

        r0 := @this: org.apache.commons.math3.optimization.direct.SimplexOptimizer;

        $i0 := @parameter0: int;

        $r1 := @parameter1: org.apache.commons.math3.analysis.MultivariateFunction;

        $r2 := @parameter2: org.apache.commons.math3.optimization.GoalType;

        $r3 := @parameter3: org.apache.commons.math3.optimization.OptimizationData[];

        specialinvoke r0.<org.apache.commons.math3.optimization.direct.SimplexOptimizer: void parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])>($r3);

        $r4 = specialinvoke r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: org.apache.commons.math3.optimization.PointValuePair optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateFunction,org.apache.commons.math3.optimization.GoalType,org.apache.commons.math3.optimization.OptimizationData[])>($i0, $r1, $r2, $r3);

        return $r4;
    }
    public void setSimplex(org.apache.commons.math3.optimization.direct.AbstractSimplex)
    {
        org.apache.commons.math3.optimization.direct.SimplexOptimizer r0;
        org.apache.commons.math3.optimization.direct.AbstractSimplex $r1;
        org.apache.commons.math3.optimization.OptimizationData[] $r2;

        r0 := @this: org.apache.commons.math3.optimization.direct.SimplexOptimizer;

        $r1 := @parameter0: org.apache.commons.math3.optimization.direct.AbstractSimplex;

        $r2 = newarray (org.apache.commons.math3.optimization.OptimizationData)[1];

        $r2[0] = $r1;

        specialinvoke r0.<org.apache.commons.math3.optimization.direct.SimplexOptimizer: void parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])>($r2);

        return;
    }
