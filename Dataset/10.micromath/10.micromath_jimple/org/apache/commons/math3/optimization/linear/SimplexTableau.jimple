org.apache.commons.math3.optimization.linear.SimplexTableau extends java.lang.Object implements java.io.Serializable
private static final double CUTOFF_THRESHOLD
private static final int DEFAULT_ULPS
private static final java.lang.String NEGATIVE_VAR_COLUMN_LABEL
private static final long serialVersionUID
private final java.util.List columnLabels
private final java.util.List constraints
private final double epsilon
private final org.apache.commons.math3.optimization.linear.LinearObjectiveFunction f
private final int maxUlps
private int numArtificialVariables
private final int numDecisionVariables
private final int numSlackVariables
private final boolean restrictToNonNegative
private transient org.apache.commons.math3.linear.RealMatrix tableau
    void <init>(org.apache.commons.math3.optimization.linear.LinearObjectiveFunction, java.util.Collection, org.apache.commons.math3.optimization.GoalType, boolean, double)
    {
        org.apache.commons.math3.optimization.linear.SimplexTableau r0;
        org.apache.commons.math3.optimization.linear.LinearObjectiveFunction $r1;
        java.util.Collection r2;
        org.apache.commons.math3.optimization.GoalType $r3;
        boolean $z0;
        double $d0;

        r0 := @this: org.apache.commons.math3.optimization.linear.SimplexTableau;

        $r1 := @parameter0: org.apache.commons.math3.optimization.linear.LinearObjectiveFunction;

        r2 := @parameter1: java.util.Collection;

        $r3 := @parameter2: org.apache.commons.math3.optimization.GoalType;

        $z0 := @parameter3: boolean;

        $d0 := @parameter4: double;

        specialinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: void <init>(org.apache.commons.math3.optimization.linear.LinearObjectiveFunction,java.util.Collection,org.apache.commons.math3.optimization.GoalType,boolean,double,int)>($r1, r2, $r3, $z0, $d0, 10);

        return;
    }
    void <init>(org.apache.commons.math3.optimization.linear.LinearObjectiveFunction, java.util.Collection, org.apache.commons.math3.optimization.GoalType, boolean, double, int)
    {
        org.apache.commons.math3.optimization.linear.SimplexTableau r0;
        org.apache.commons.math3.optimization.linear.LinearObjectiveFunction $r1;
        java.util.Collection r2;
        org.apache.commons.math3.optimization.GoalType $r3, $r8;
        boolean $z0, $z1;
        double $d0;
        int $i0, $i2;
        java.util.ArrayList $r4;
        java.util.List $r5;
        org.apache.commons.math3.linear.RealVector $r6;
        byte $b1;
        org.apache.commons.math3.optimization.linear.Relationship $r7;
        org.apache.commons.math3.linear.RealMatrix $r9;

        r0 := @this: org.apache.commons.math3.optimization.linear.SimplexTableau;

        $r1 := @parameter0: org.apache.commons.math3.optimization.linear.LinearObjectiveFunction;

        r2 := @parameter1: java.util.Collection;

        $r3 := @parameter2: org.apache.commons.math3.optimization.GoalType;

        $z0 := @parameter3: boolean;

        $d0 := @parameter4: double;

        $i0 := @parameter5: int;

        $z1 = 1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: java.util.List columnLabels> = $r4;

        r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: org.apache.commons.math3.optimization.linear.LinearObjectiveFunction f> = $r1;

        $r5 = virtualinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: java.util.List normalizeConstraints(java.util.Collection)>(r2);

        r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: java.util.List constraints> = $r5;

        r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: boolean restrictToNonNegative> = $z0;

        r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: double epsilon> = $d0;

        r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: int maxUlps> = $i0;

        $r6 = virtualinvoke $r1.<org.apache.commons.math3.optimization.linear.LinearObjectiveFunction: org.apache.commons.math3.linear.RealVector getCoefficients()>();

        $i0 = virtualinvoke $r6.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        if $z0 == 0 goto label3;

        $b1 = 0;

     label1:
        $i0 = $b1 + $i0;

        r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: int numDecisionVariables> = $i0;

        $r7 = <org.apache.commons.math3.optimization.linear.Relationship: org.apache.commons.math3.optimization.linear.Relationship LEQ>;

        $i0 = specialinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: int getConstraintTypeCounts(org.apache.commons.math3.optimization.linear.Relationship)>($r7);

        $r7 = <org.apache.commons.math3.optimization.linear.Relationship: org.apache.commons.math3.optimization.linear.Relationship GEQ>;

        $i2 = specialinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: int getConstraintTypeCounts(org.apache.commons.math3.optimization.linear.Relationship)>($r7);

        $i0 = $i0 + $i2;

        r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: int numSlackVariables> = $i0;

        $r7 = <org.apache.commons.math3.optimization.linear.Relationship: org.apache.commons.math3.optimization.linear.Relationship EQ>;

        $i0 = specialinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: int getConstraintTypeCounts(org.apache.commons.math3.optimization.linear.Relationship)>($r7);

        $r7 = <org.apache.commons.math3.optimization.linear.Relationship: org.apache.commons.math3.optimization.linear.Relationship GEQ>;

        $i2 = specialinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: int getConstraintTypeCounts(org.apache.commons.math3.optimization.linear.Relationship)>($r7);

        $i0 = $i0 + $i2;

        r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: int numArtificialVariables> = $i0;

        $r8 = <org.apache.commons.math3.optimization.GoalType: org.apache.commons.math3.optimization.GoalType MAXIMIZE>;

        if $r3 != $r8 goto label4;

     label2:
        $r9 = virtualinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: org.apache.commons.math3.linear.RealMatrix createTableau(boolean)>($z1);

        r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: org.apache.commons.math3.linear.RealMatrix tableau> = $r9;

        virtualinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: void initializeColumnLabels()>();

        return;

     label3:
        $b1 = 1;

        goto label1;

     label4:
        $z1 = 0;

        goto label2;
    }
    private void copyArray(double[], double[])
    {
        org.apache.commons.math3.optimization.linear.SimplexTableau r0;
        double[] $r1, $r2;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.optimization.linear.SimplexTableau;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[];

        $i1 = virtualinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: int getNumObjectiveFunctions()>();

        $i0 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r2, $i1, $i0);

        return;
    }
    private int getConstraintTypeCounts(org.apache.commons.math3.optimization.linear.Relationship)
    {
        org.apache.commons.math3.optimization.linear.SimplexTableau r0;
        org.apache.commons.math3.optimization.linear.Relationship $r1, $r6;
        int i0;
        java.util.List $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        org.apache.commons.math3.optimization.linear.LinearConstraint r5;

        r0 := @this: org.apache.commons.math3.optimization.linear.SimplexTableau;

        $r1 := @parameter0: org.apache.commons.math3.optimization.linear.Relationship;

        i0 = 0;

        $r2 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: java.util.List constraints>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.commons.math3.optimization.linear.LinearConstraint) $r4;

        $r6 = virtualinvoke r5.<org.apache.commons.math3.optimization.linear.LinearConstraint: org.apache.commons.math3.optimization.linear.Relationship getRelationship()>();

        if $r6 != $r1 goto label1;

        i0 = i0 + 1;

        goto label1;

     label2:
        return i0;
    }
    protected static double getInvertedCoefficientSum(org.apache.commons.math3.linear.RealVector)
    {
        org.apache.commons.math3.linear.RealVector $r0;
        double d0, d1;
        int i0, i1;
        double[] $r1;

        $r0 := @parameter0: org.apache.commons.math3.linear.RealVector;

        d1 = 0.0;

        $r1 = virtualinvoke $r0.<org.apache.commons.math3.linear.RealVector: double[] toArray()>();

        i0 = lengthof $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        d0 = $r1[i1];

        d1 = d1 - d0;

        i1 = i1 + 1;

        goto label1;

     label2:
        return d1;
    }
    private org.apache.commons.math3.optimization.linear.LinearConstraint normalize(org.apache.commons.math3.optimization.linear.LinearConstraint)
    {
        org.apache.commons.math3.optimization.linear.SimplexTableau r0;
        org.apache.commons.math3.optimization.linear.LinearConstraint $r1, $r2;
        double $d0;
        byte $b0;
        org.apache.commons.math3.linear.RealVector $r3;
        org.apache.commons.math3.optimization.linear.Relationship $r4;

        r0 := @this: org.apache.commons.math3.optimization.linear.SimplexTableau;

        $r1 := @parameter0: org.apache.commons.math3.optimization.linear.LinearConstraint;

        $d0 = virtualinvoke $r1.<org.apache.commons.math3.optimization.linear.LinearConstraint: double getValue()>();

        $b0 = $d0 cmpg 0.0;

        if $b0 >= 0 goto label1;

        $r2 = new org.apache.commons.math3.optimization.linear.LinearConstraint;

        $r3 = virtualinvoke $r1.<org.apache.commons.math3.optimization.linear.LinearConstraint: org.apache.commons.math3.linear.RealVector getCoefficients()>();

        $r3 = virtualinvoke $r3.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector mapMultiply(double)>(-1.0);

        $r4 = virtualinvoke $r1.<org.apache.commons.math3.optimization.linear.LinearConstraint: org.apache.commons.math3.optimization.linear.Relationship getRelationship()>();

        $r4 = virtualinvoke $r4.<org.apache.commons.math3.optimization.linear.Relationship: org.apache.commons.math3.optimization.linear.Relationship oppositeRelationship()>();

        $d0 = virtualinvoke $r1.<org.apache.commons.math3.optimization.linear.LinearConstraint: double getValue()>();

        $d0 = $d0 * -1.0;

        specialinvoke $r2.<org.apache.commons.math3.optimization.linear.LinearConstraint: void <init>(org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.optimization.linear.Relationship,double)>($r3, $r4, $d0);

        return $r2;

     label1:
        $r2 = new org.apache.commons.math3.optimization.linear.LinearConstraint;

        $r3 = virtualinvoke $r1.<org.apache.commons.math3.optimization.linear.LinearConstraint: org.apache.commons.math3.linear.RealVector getCoefficients()>();

        $r4 = virtualinvoke $r1.<org.apache.commons.math3.optimization.linear.LinearConstraint: org.apache.commons.math3.optimization.linear.Relationship getRelationship()>();

        $d0 = virtualinvoke $r1.<org.apache.commons.math3.optimization.linear.LinearConstraint: double getValue()>();

        specialinvoke $r2.<org.apache.commons.math3.optimization.linear.LinearConstraint: void <init>(org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.optimization.linear.Relationship,double)>($r3, $r4, $d0);

        return $r2;
    }
    private void readObject(java.io.ObjectInputStream) throws java.lang.ClassNotFoundException, java.io.IOException
    {
        org.apache.commons.math3.optimization.linear.SimplexTableau r0;
        java.io.ObjectInputStream $r1;

        r0 := @this: org.apache.commons.math3.optimization.linear.SimplexTableau;

        $r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke $r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)>(r0, "tableau", $r1);

        return;
    }
    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        org.apache.commons.math3.optimization.linear.SimplexTableau r0;
        java.io.ObjectOutputStream $r1;
        org.apache.commons.math3.linear.RealMatrix $r2;

        r0 := @this: org.apache.commons.math3.optimization.linear.SimplexTableau;

        $r1 := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke $r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $r2 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: org.apache.commons.math3.linear.RealMatrix tableau>;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void serializeRealMatrix(org.apache.commons.math3.linear.RealMatrix,java.io.ObjectOutputStream)>($r2, $r1);

        return;
    }
    protected org.apache.commons.math3.linear.RealMatrix createTableau(boolean)
    {
        org.apache.commons.math3.optimization.linear.SimplexTableau r0;
        boolean $z0;
        int i0, i1, i2, i3, $i4, i6, $i7;
        org.apache.commons.math3.linear.Array2DRowRealMatrix r1;
        java.util.List $r2;
        byte b5;
        double $d0;
        org.apache.commons.math3.optimization.linear.LinearObjectiveFunction $r3;
        org.apache.commons.math3.linear.RealVector $r4, $r12;
        double[] $r5, $r7;
        double[][] $r6;
        java.lang.Object $r8;
        org.apache.commons.math3.optimization.linear.LinearConstraint r9;
        org.apache.commons.math3.optimization.linear.Relationship $r10, $r11;

        r0 := @this: org.apache.commons.math3.optimization.linear.SimplexTableau;

        $z0 := @parameter0: boolean;

        i3 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: int numDecisionVariables>;

        i1 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: int numSlackVariables>;

        i3 = i3 + i1;

        i1 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: int numArtificialVariables>;

        i3 = i3 + i1;

        i1 = virtualinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: int getNumObjectiveFunctions()>();

        i3 = i3 + i1;

        i3 = i3 + 1;

        $r2 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: java.util.List constraints>;

        i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i4 = virtualinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: int getNumObjectiveFunctions()>();

        i1 = i1 + $i4;

        r1 = new org.apache.commons.math3.linear.Array2DRowRealMatrix;

        specialinvoke r1.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void <init>(int,int)>(i1, i3);

        i1 = virtualinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: int getNumObjectiveFunctions()>();

        if i1 != 2 goto label01;

        virtualinvoke r1.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void setEntry(int,int,double)>(0, 0, -1.0);

     label01:
        i1 = virtualinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: int getNumObjectiveFunctions()>();

        if i1 != 1 goto label12;

        b5 = 0;

     label02:
        if $z0 == 0 goto label13;

        $d0 = 1.0;

     label03:
        virtualinvoke r1.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void setEntry(int,int,double)>(b5, b5, $d0);

        if $z0 == 0 goto label14;

        $r3 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: org.apache.commons.math3.optimization.linear.LinearObjectiveFunction f>;

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.optimization.linear.LinearObjectiveFunction: org.apache.commons.math3.linear.RealVector getCoefficients()>();

        $r4 = virtualinvoke $r4.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector mapMultiply(double)>(-1.0);

     label04:
        $r5 = virtualinvoke $r4.<org.apache.commons.math3.linear.RealVector: double[] toArray()>();

        $r6 = virtualinvoke r1.<org.apache.commons.math3.linear.Array2DRowRealMatrix: double[][] getDataRef()>();

        $r7 = $r6[b5];

        specialinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: void copyArray(double[],double[])>($r5, $r7);

        i1 = i3 + -1;

        if $z0 == 0 goto label15;

        $r3 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: org.apache.commons.math3.optimization.linear.LinearObjectiveFunction f>;

        $d0 = virtualinvoke $r3.<org.apache.commons.math3.optimization.linear.LinearObjectiveFunction: double getConstantTerm()>();

     label05:
        virtualinvoke r1.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void setEntry(int,int,double)>(b5, i1, $d0);

        $z0 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: boolean restrictToNonNegative>;

        if $z0 != 0 goto label06;

        i1 = virtualinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: int getSlackVariableOffset()>();

        i1 = i1 + -1;

        $d0 = staticinvoke <org.apache.commons.math3.optimization.linear.SimplexTableau: double getInvertedCoefficientSum(org.apache.commons.math3.linear.RealVector)>($r4);

        virtualinvoke r1.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void setEntry(int,int,double)>(b5, i1, $d0);

     label06:
        i6 = 0;

        $i4 = 0;

        i1 = 0;

     label07:
        $r2 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: java.util.List constraints>;

        i2 = interfaceinvoke $r2.<java.util.List: int size()>();

        if i1 >= i2 goto label17;

        $r2 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: java.util.List constraints>;

        $r8 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i1);

        r9 = (org.apache.commons.math3.optimization.linear.LinearConstraint) $r8;

        i2 = virtualinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: int getNumObjectiveFunctions()>();

        i2 = i2 + i1;

        $r4 = virtualinvoke r9.<org.apache.commons.math3.optimization.linear.LinearConstraint: org.apache.commons.math3.linear.RealVector getCoefficients()>();

        $r5 = virtualinvoke $r4.<org.apache.commons.math3.linear.RealVector: double[] toArray()>();

        $r6 = virtualinvoke r1.<org.apache.commons.math3.linear.Array2DRowRealMatrix: double[][] getDataRef()>();

        $r7 = $r6[i2];

        specialinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: void copyArray(double[],double[])>($r5, $r7);

        $z0 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: boolean restrictToNonNegative>;

        if $z0 != 0 goto label08;

        i0 = virtualinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: int getSlackVariableOffset()>();

        i0 = i0 + -1;

        $r4 = virtualinvoke r9.<org.apache.commons.math3.optimization.linear.LinearConstraint: org.apache.commons.math3.linear.RealVector getCoefficients()>();

        $d0 = staticinvoke <org.apache.commons.math3.optimization.linear.SimplexTableau: double getInvertedCoefficientSum(org.apache.commons.math3.linear.RealVector)>($r4);

        virtualinvoke r1.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void setEntry(int,int,double)>(i2, i0, $d0);

     label08:
        i0 = i3 + -1;

        $d0 = virtualinvoke r9.<org.apache.commons.math3.optimization.linear.LinearConstraint: double getValue()>();

        virtualinvoke r1.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void setEntry(int,int,double)>(i2, i0, $d0);

        $r10 = virtualinvoke r9.<org.apache.commons.math3.optimization.linear.LinearConstraint: org.apache.commons.math3.optimization.linear.Relationship getRelationship()>();

        $r11 = <org.apache.commons.math3.optimization.linear.Relationship: org.apache.commons.math3.optimization.linear.Relationship LEQ>;

        if $r10 != $r11 goto label16;

        $i7 = virtualinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: int getSlackVariableOffset()>();

        i0 = i6 + 1;

        i6 = $i7 + i6;

        virtualinvoke r1.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void setEntry(int,int,double)>(i2, i6, 1.0);

        i6 = i0;

     label09:
        $r10 = virtualinvoke r9.<org.apache.commons.math3.optimization.linear.LinearConstraint: org.apache.commons.math3.optimization.linear.Relationship getRelationship()>();

        $r11 = <org.apache.commons.math3.optimization.linear.Relationship: org.apache.commons.math3.optimization.linear.Relationship EQ>;

        if $r10 == $r11 goto label10;

        $r10 = virtualinvoke r9.<org.apache.commons.math3.optimization.linear.LinearConstraint: org.apache.commons.math3.optimization.linear.Relationship getRelationship()>();

        $r11 = <org.apache.commons.math3.optimization.linear.Relationship: org.apache.commons.math3.optimization.linear.Relationship GEQ>;

        if $r10 != $r11 goto label11;

     label10:
        i0 = virtualinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: int getArtificialVariableOffset()>();

        i0 = i0 + $i4;

        virtualinvoke r1.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void setEntry(int,int,double)>(0, i0, 1.0);

        $i7 = virtualinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: int getArtificialVariableOffset()>();

        i0 = $i4 + 1;

        $i4 = $i7 + $i4;

        virtualinvoke r1.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void setEntry(int,int,double)>(i2, $i4, 1.0);

        $r4 = virtualinvoke r1.<org.apache.commons.math3.linear.Array2DRowRealMatrix: org.apache.commons.math3.linear.RealVector getRowVector(int)>(0);

        $r12 = virtualinvoke r1.<org.apache.commons.math3.linear.Array2DRowRealMatrix: org.apache.commons.math3.linear.RealVector getRowVector(int)>(i2);

        $r4 = virtualinvoke $r4.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector subtract(org.apache.commons.math3.linear.RealVector)>($r12);

        virtualinvoke r1.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void setRowVector(int,org.apache.commons.math3.linear.RealVector)>(0, $r4);

        $i4 = i0;

     label11:
        i1 = i1 + 1;

        goto label07;

     label12:
        b5 = 1;

        goto label02;

     label13:
        $d0 = -1.0;

        goto label03;

     label14:
        $r3 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: org.apache.commons.math3.optimization.linear.LinearObjectiveFunction f>;

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.optimization.linear.LinearObjectiveFunction: org.apache.commons.math3.linear.RealVector getCoefficients()>();

        goto label04;

     label15:
        $r3 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: org.apache.commons.math3.optimization.linear.LinearObjectiveFunction f>;

        $d0 = virtualinvoke $r3.<org.apache.commons.math3.optimization.linear.LinearObjectiveFunction: double getConstantTerm()>();

        $d0 = -1.0 * $d0;

        goto label05;

     label16:
        $r10 = virtualinvoke r9.<org.apache.commons.math3.optimization.linear.LinearConstraint: org.apache.commons.math3.optimization.linear.Relationship getRelationship()>();

        $r11 = <org.apache.commons.math3.optimization.linear.Relationship: org.apache.commons.math3.optimization.linear.Relationship GEQ>;

        if $r10 != $r11 goto label09;

        $i7 = virtualinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: int getSlackVariableOffset()>();

        i0 = i6 + 1;

        i6 = $i7 + i6;

        virtualinvoke r1.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void setEntry(int,int,double)>(i2, i6, -1.0);

        i6 = i0;

        goto label09;

     label17:
        return r1;
    }
    protected void divideRow(int, double)
    {
        org.apache.commons.math3.optimization.linear.SimplexTableau r0;
        int $i0, i1, $i2;
        double $d0, $d1;
        org.apache.commons.math3.linear.RealMatrix $r1, $r2;

        r0 := @this: org.apache.commons.math3.optimization.linear.SimplexTableau;

        $i0 := @parameter0: int;

        $d0 := @parameter1: double;

        i1 = 0;

     label1:
        $i2 = virtualinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: int getWidth()>();

        if i1 >= $i2 goto label2;

        $r1 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: org.apache.commons.math3.linear.RealMatrix tableau>;

        $r2 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: org.apache.commons.math3.linear.RealMatrix tableau>;

        $d1 = interfaceinvoke $r2.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>($i0, i1);

        $d1 = $d1 / $d0;

        interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: void setEntry(int,int,double)>($i0, i1, $d1);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
    protected void dropPhase1Objective()
    {
        org.apache.commons.math3.optimization.linear.SimplexTableau r0;
        int i0, $i1, $i2, $i3;
        java.util.TreeSet r1;
        java.lang.Integer $r2;
        org.apache.commons.math3.linear.RealMatrix $r3;
        double $d0, $d1;
        int[] $r4;
        java.lang.Class $r5;
        java.lang.Object $r6;
        double[][] r7;
        boolean $z0;
        double[] $r8;
        java.lang.Integer[] $r9;
        java.lang.Object[] $r10;
        java.util.List $r11;
        org.apache.commons.math3.linear.Array2DRowRealMatrix $r12;

        r0 := @this: org.apache.commons.math3.optimization.linear.SimplexTableau;

        $i1 = virtualinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: int getNumObjectiveFunctions()>();

        if $i1 != 1 goto label01;

        return;

     label01:
        r1 = new java.util.TreeSet;

        specialinvoke r1.<java.util.TreeSet: void <init>()>();

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>($r2);

        $i1 = virtualinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: int getNumObjectiveFunctions()>();

     label02:
        $i2 = virtualinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: int getArtificialVariableOffset()>();

        if $i1 >= $i2 goto label04;

        $r3 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: org.apache.commons.math3.linear.RealMatrix tableau>;

        $d0 = interfaceinvoke $r3.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>(0, $i1);

        $d1 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: double epsilon>;

        $i2 = staticinvoke <org.apache.commons.math3.util.Precision: int compareTo(double,double,double)>($d0, 0.0, $d1);

        if $i2 <= 0 goto label03;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>($r2);

     label03:
        $i1 = $i1 + 1;

        goto label02;

     label04:
        $i1 = 0;

     label05:
        $i2 = virtualinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: int getNumArtificialVariables()>();

        if $i1 >= $i2 goto label07;

        $i2 = virtualinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: int getArtificialVariableOffset()>();

        $i2 = $i1 + $i2;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: java.lang.Integer getBasicRow(int)>($i2);

        if $r2 != null goto label06;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>($r2);

     label06:
        $i1 = $i1 + 1;

        goto label05;

     label07:
        $i1 = virtualinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: int getHeight()>();

        $i1 = $i1 + -1;

        $i2 = virtualinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: int getWidth()>();

        $i3 = interfaceinvoke r1.<java.util.Set: int size()>();

        $i2 = $i2 - $i3;

        $r4 = newarray (int)[2];

        $r4[0] = $i1;

        $r4[1] = $i2;

        $r5 = <java.lang.Double: java.lang.Class TYPE>;

        $r6 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r5, $r4);

        r7 = (double[][]) $r6;

        $i1 = 1;

     label08:
        $i2 = virtualinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: int getHeight()>();

        if $i1 >= $i2 goto label12;

        $i2 = 0;

        $i3 = 0;

     label09:
        i0 = virtualinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: int getWidth()>();

        if $i3 >= i0 goto label11;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $z0 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>($r2);

        if $z0 != 0 goto label10;

        i0 = $i1 + -1;

        $r8 = r7[i0];

        $r3 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: org.apache.commons.math3.linear.RealMatrix tableau>;

        $d0 = interfaceinvoke $r3.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>($i1, $i3);

        $r8[$i2] = $d0;

        $i2 = $i2 + 1;

     label10:
        $i3 = $i3 + 1;

        goto label09;

     label11:
        $i1 = $i1 + 1;

        goto label08;

     label12:
        $i1 = interfaceinvoke r1.<java.util.Set: int size()>();

        $r9 = newarray (java.lang.Integer)[$i1];

        $r10 = interfaceinvoke r1.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r9);

        $r9 = (java.lang.Integer[]) $r10;

        $i1 = lengthof $r9;

        $i1 = $i1 + -1;

     label13:
        if $i1 < 0 goto label14;

        $r11 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: java.util.List columnLabels>;

        $r2 = $r9[$i1];

        $i2 = virtualinvoke $r2.<java.lang.Integer: int intValue()>();

        interfaceinvoke $r11.<java.util.List: java.lang.Object remove(int)>($i2);

        $i1 = $i1 + -1;

        goto label13;

     label14:
        $r12 = new org.apache.commons.math3.linear.Array2DRowRealMatrix;

        specialinvoke $r12.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void <init>(double[][])>(r7);

        r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: org.apache.commons.math3.linear.RealMatrix tableau> = $r12;

        r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: int numArtificialVariables> = 0;

        return;
    }
    public boolean equals(java.lang.Object)
    {
        org.apache.commons.math3.optimization.linear.SimplexTableau r0, r2;
        java.lang.Object $r1;
        double $d0, $d1;
        boolean $z0, $z1;
        int $i0, $i1;
        byte $b2;
        org.apache.commons.math3.optimization.linear.LinearObjectiveFunction $r3, $r4;
        java.util.List $r5, $r6;
        org.apache.commons.math3.linear.RealMatrix $r7, $r8;

        r0 := @this: org.apache.commons.math3.optimization.linear.SimplexTableau;

        $r1 := @parameter0: java.lang.Object;

        if r0 != $r1 goto label1;

        return 1;

     label1:
        $z0 = $r1 instanceof org.apache.commons.math3.optimization.linear.SimplexTableau;

        if $z0 == 0 goto label2;

        r2 = (org.apache.commons.math3.optimization.linear.SimplexTableau) $r1;

        $z0 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: boolean restrictToNonNegative>;

        $z1 = r2.<org.apache.commons.math3.optimization.linear.SimplexTableau: boolean restrictToNonNegative>;

        if $z0 != $z1 goto label2;

        $i0 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: int numDecisionVariables>;

        $i1 = r2.<org.apache.commons.math3.optimization.linear.SimplexTableau: int numDecisionVariables>;

        if $i0 != $i1 goto label2;

        $i0 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: int numSlackVariables>;

        $i1 = r2.<org.apache.commons.math3.optimization.linear.SimplexTableau: int numSlackVariables>;

        if $i0 != $i1 goto label2;

        $i0 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: int numArtificialVariables>;

        $i1 = r2.<org.apache.commons.math3.optimization.linear.SimplexTableau: int numArtificialVariables>;

        if $i0 != $i1 goto label2;

        $d1 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: double epsilon>;

        $d0 = r2.<org.apache.commons.math3.optimization.linear.SimplexTableau: double epsilon>;

        $b2 = $d1 cmpl $d0;

        if $b2 != 0 goto label2;

        $i0 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: int maxUlps>;

        $i1 = r2.<org.apache.commons.math3.optimization.linear.SimplexTableau: int maxUlps>;

        if $i0 != $i1 goto label2;

        $r3 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: org.apache.commons.math3.optimization.linear.LinearObjectiveFunction f>;

        $r4 = r2.<org.apache.commons.math3.optimization.linear.SimplexTableau: org.apache.commons.math3.optimization.linear.LinearObjectiveFunction f>;

        $z0 = virtualinvoke $r3.<org.apache.commons.math3.optimization.linear.LinearObjectiveFunction: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        $r5 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: java.util.List constraints>;

        $r6 = r2.<org.apache.commons.math3.optimization.linear.SimplexTableau: java.util.List constraints>;

        $z0 = interfaceinvoke $r5.<java.util.List: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label2;

        $r7 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: org.apache.commons.math3.linear.RealMatrix tableau>;

        $r8 = r2.<org.apache.commons.math3.optimization.linear.SimplexTableau: org.apache.commons.math3.linear.RealMatrix tableau>;

        $z0 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>($r8);

        if $z0 != 0 goto label3;

     label2:
        return 0;

     label3:
        return 1;
    }
    protected final int getArtificialVariableOffset()
    {
        org.apache.commons.math3.optimization.linear.SimplexTableau r0;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.optimization.linear.SimplexTableau;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: int getNumObjectiveFunctions()>();

        $i1 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: int numDecisionVariables>;

        $i0 = $i0 + $i1;

        $i1 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: int numSlackVariables>;

        $i0 = $i0 + $i1;

        return $i0;
    }
    protected java.lang.Integer getBasicRow(int)
    {
        org.apache.commons.math3.optimization.linear.SimplexTableau r0;
        int $i0, i1, $i2;
        java.lang.Integer r1;
        double $d0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.optimization.linear.SimplexTableau;

        $i0 := @parameter0: int;

        r1 = null;

        i1 = 0;

     label1:
        $i2 = virtualinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: int getHeight()>();

        if i1 >= $i2 goto label4;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: double getEntry(int,int)>(i1, $i0);

        $i2 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: int maxUlps>;

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,int)>($d0, 1.0, $i2);

        if $z0 == 0 goto label3;

        if r1 != null goto label3;

        r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $i2 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: int maxUlps>;

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,int)>($d0, 0.0, $i2);

        if $z0 != 0 goto label2;

        return null;

     label4:
        return r1;
    }
    protected final double[][] getData()
    {
        org.apache.commons.math3.optimization.linear.SimplexTableau r0;
        double[][] $r1;
        org.apache.commons.math3.linear.RealMatrix $r2;

        r0 := @this: org.apache.commons.math3.optimization.linear.SimplexTableau;

        $r2 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: org.apache.commons.math3.linear.RealMatrix tableau>;

        $r1 = interfaceinvoke $r2.<org.apache.commons.math3.linear.RealMatrix: double[][] getData()>();

        return $r1;
    }
    protected final double getEntry(int, int)
    {
        org.apache.commons.math3.optimization.linear.SimplexTableau r0;
        int $i0, $i1;
        double $d0;
        org.apache.commons.math3.linear.RealMatrix $r1;

        r0 := @this: org.apache.commons.math3.optimization.linear.SimplexTableau;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: org.apache.commons.math3.linear.RealMatrix tableau>;

        $d0 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>($i0, $i1);

        return $d0;
    }
    protected final int getHeight()
    {
        org.apache.commons.math3.optimization.linear.SimplexTableau r0;
        int $i0;
        org.apache.commons.math3.linear.RealMatrix $r1;

        r0 := @this: org.apache.commons.math3.optimization.linear.SimplexTableau;

        $r1 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: org.apache.commons.math3.linear.RealMatrix tableau>;

        $i0 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        return $i0;
    }
    protected final int getNumArtificialVariables()
    {
        org.apache.commons.math3.optimization.linear.SimplexTableau r0;
        int i0;

        r0 := @this: org.apache.commons.math3.optimization.linear.SimplexTableau;

        i0 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: int numArtificialVariables>;

        return i0;
    }
    protected final int getNumDecisionVariables()
    {
        org.apache.commons.math3.optimization.linear.SimplexTableau r0;
        int i0;

        r0 := @this: org.apache.commons.math3.optimization.linear.SimplexTableau;

        i0 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: int numDecisionVariables>;

        return i0;
    }
    protected final int getNumObjectiveFunctions()
    {
        org.apache.commons.math3.optimization.linear.SimplexTableau r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.optimization.linear.SimplexTableau;

        $i0 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: int numArtificialVariables>;

        if $i0 <= 0 goto label1;

        return 2;

     label1:
        return 1;
    }
    protected final int getNumSlackVariables()
    {
        org.apache.commons.math3.optimization.linear.SimplexTableau r0;
        int i0;

        r0 := @this: org.apache.commons.math3.optimization.linear.SimplexTableau;

        i0 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: int numSlackVariables>;

        return i0;
    }
    protected final int getOriginalNumDecisionVariables()
    {
        org.apache.commons.math3.optimization.linear.SimplexTableau r0;
        org.apache.commons.math3.optimization.linear.LinearObjectiveFunction $r1;
        org.apache.commons.math3.linear.RealVector $r2;
        int $i0;

        r0 := @this: org.apache.commons.math3.optimization.linear.SimplexTableau;

        $r1 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: org.apache.commons.math3.optimization.linear.LinearObjectiveFunction f>;

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.optimization.linear.LinearObjectiveFunction: org.apache.commons.math3.linear.RealVector getCoefficients()>();

        $i0 = virtualinvoke $r2.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        return $i0;
    }
    protected final int getRhsOffset()
    {
        org.apache.commons.math3.optimization.linear.SimplexTableau r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.optimization.linear.SimplexTableau;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: int getWidth()>();

        $i0 = $i0 + -1;

        return $i0;
    }
    protected final int getSlackVariableOffset()
    {
        org.apache.commons.math3.optimization.linear.SimplexTableau r0;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.optimization.linear.SimplexTableau;

        $i1 = virtualinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: int getNumObjectiveFunctions()>();

        $i0 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: int numDecisionVariables>;

        $i0 = $i1 + $i0;

        return $i0;
    }
    protected org.apache.commons.math3.optimization.PointValuePair getSolution()
    {
        org.apache.commons.math3.optimization.linear.SimplexTableau r0;
        java.util.HashSet r1;
        double[] r2;
        java.util.List $r3;
        int $i0, $i1, $i2;
        java.lang.Integer $r4;
        double d0, $d1, $d2;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;
        boolean $z0;
        org.apache.commons.math3.optimization.PointValuePair $r7;
        org.apache.commons.math3.optimization.linear.LinearObjectiveFunction $r8;

        r0 := @this: org.apache.commons.math3.optimization.linear.SimplexTableau;

        $r3 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: java.util.List columnLabels>;

        $i0 = interfaceinvoke $r3.<java.util.List: int indexOf(java.lang.Object)>("x-");

        if $i0 <= 0 goto label05;

        $r4 = virtualinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: java.lang.Integer getBasicRow(int)>($i0);

     label01:
        if $r4 != null goto label06;

        d0 = 0.0;

     label02:
        r1 = new java.util.HashSet;

        specialinvoke r1.<java.util.HashSet: void <init>()>();

        $i0 = virtualinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: int getOriginalNumDecisionVariables()>();

        r2 = newarray (double)[$i0];

        $i0 = 0;

     label03:
        $i1 = lengthof r2;

        if $i0 >= $i1 goto label16;

        $r3 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: java.util.List columnLabels>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("x");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $i1 = interfaceinvoke $r3.<java.util.List: int indexOf(java.lang.Object)>($r6);

        if $i1 >= 0 goto label07;

        r2[$i0] = 0.0;

     label04:
        $i0 = $i0 + 1;

        goto label03;

     label05:
        $r4 = null;

        goto label01;

     label06:
        $i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        $i1 = virtualinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: int getRhsOffset()>();

        d0 = virtualinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: double getEntry(int,int)>($i0, $i1);

        goto label02;

     label07:
        $r4 = virtualinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: java.lang.Integer getBasicRow(int)>($i1);

        if $r4 == null goto label08;

        $i1 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        if $i1 != 0 goto label08;

        r2[$i0] = 0.0;

        goto label04;

     label08:
        $z0 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>($r4);

        if $z0 == 0 goto label11;

        $z0 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: boolean restrictToNonNegative>;

        if $z0 == 0 goto label10;

        $d1 = 0.0;

     label09:
        $d1 = 0.0 - $d1;

        r2[$i0] = $d1;

        goto label04;

     label10:
        $d1 = d0;

        goto label09;

     label11:
        interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>($r4);

        if $r4 != null goto label14;

        $d1 = 0.0;

     label12:
        $z0 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: boolean restrictToNonNegative>;

        if $z0 == 0 goto label15;

        $d2 = 0.0;

     label13:
        $d1 = $d1 - $d2;

        r2[$i0] = $d1;

        goto label04;

     label14:
        $i1 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        $i2 = virtualinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: int getRhsOffset()>();

        $d1 = virtualinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: double getEntry(int,int)>($i1, $i2);

        goto label12;

     label15:
        $d2 = d0;

        goto label13;

     label16:
        $r7 = new org.apache.commons.math3.optimization.PointValuePair;

        $r8 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: org.apache.commons.math3.optimization.linear.LinearObjectiveFunction f>;

        d0 = virtualinvoke $r8.<org.apache.commons.math3.optimization.linear.LinearObjectiveFunction: double getValue(double[])>(r2);

        specialinvoke $r7.<org.apache.commons.math3.optimization.PointValuePair: void <init>(double[],double)>(r2, d0);

        return $r7;
    }
    protected final int getWidth()
    {
        org.apache.commons.math3.optimization.linear.SimplexTableau r0;
        int $i0;
        org.apache.commons.math3.linear.RealMatrix $r1;

        r0 := @this: org.apache.commons.math3.optimization.linear.SimplexTableau;

        $r1 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: org.apache.commons.math3.linear.RealMatrix tableau>;

        $i0 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        return $i0;
    }
    public int hashCode()
    {
        org.apache.commons.math3.optimization.linear.SimplexTableau r0;
        double $d0;
        boolean $z0;
        java.lang.Boolean $r1;
        int $i0, $i1;
        java.lang.Double $r2;
        org.apache.commons.math3.optimization.linear.LinearObjectiveFunction $r3;
        java.util.List $r4;
        org.apache.commons.math3.linear.RealMatrix $r5;

        r0 := @this: org.apache.commons.math3.optimization.linear.SimplexTableau;

        $z0 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: boolean restrictToNonNegative>;

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $i0 = virtualinvoke $r1.<java.lang.Boolean: int hashCode()>();

        $i1 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: int numDecisionVariables>;

        $i0 = $i0 ^ $i1;

        $i1 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: int numSlackVariables>;

        $i0 = $i0 ^ $i1;

        $i1 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: int numArtificialVariables>;

        $i0 = $i0 ^ $i1;

        $d0 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: double epsilon>;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $i1 = virtualinvoke $r2.<java.lang.Double: int hashCode()>();

        $i0 = $i0 ^ $i1;

        $i1 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: int maxUlps>;

        $i0 = $i0 ^ $i1;

        $r3 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: org.apache.commons.math3.optimization.linear.LinearObjectiveFunction f>;

        $i1 = virtualinvoke $r3.<org.apache.commons.math3.optimization.linear.LinearObjectiveFunction: int hashCode()>();

        $i0 = $i0 ^ $i1;

        $r4 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: java.util.List constraints>;

        $i1 = interfaceinvoke $r4.<java.util.List: int hashCode()>();

        $i0 = $i0 ^ $i1;

        $r5 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: org.apache.commons.math3.linear.RealMatrix tableau>;

        $i1 = virtualinvoke $r5.<java.lang.Object: int hashCode()>();

        $i0 = $i0 ^ $i1;

        return $i0;
    }
    protected void initializeColumnLabels()
    {
        org.apache.commons.math3.optimization.linear.SimplexTableau r0;
        int $i0, $i1;
        java.util.List $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.optimization.linear.SimplexTableau;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: int getNumObjectiveFunctions()>();

        if $i0 != 2 goto label1;

        $r1 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: java.util.List columnLabels>;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>("W");

     label1:
        $r1 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: java.util.List columnLabels>;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>("Z");

        $i0 = 0;

     label2:
        $i1 = virtualinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: int getOriginalNumDecisionVariables()>();

        if $i0 >= $i1 goto label3;

        $r1 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: java.util.List columnLabels>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("x");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r3);

        $i0 = $i0 + 1;

        goto label2;

     label3:
        $z0 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: boolean restrictToNonNegative>;

        if $z0 != 0 goto label4;

        $r1 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: java.util.List columnLabels>;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>("x-");

     label4:
        $i0 = 0;

     label5:
        $i1 = virtualinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: int getNumSlackVariables()>();

        if $i0 >= $i1 goto label6;

        $r1 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: java.util.List columnLabels>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r3);

        $i0 = $i0 + 1;

        goto label5;

     label6:
        $i0 = 0;

     label7:
        $i1 = virtualinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: int getNumArtificialVariables()>();

        if $i0 >= $i1 goto label8;

        $r1 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: java.util.List columnLabels>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("a");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r3);

        $i0 = $i0 + 1;

        goto label7;

     label8:
        $r1 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: java.util.List columnLabels>;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>("RHS");

        return;
    }
    boolean isOptimal()
    {
        org.apache.commons.math3.optimization.linear.SimplexTableau r0;
        double $d0, $d1;
        int $i0, $i1;
        org.apache.commons.math3.linear.RealMatrix $r1;

        r0 := @this: org.apache.commons.math3.optimization.linear.SimplexTableau;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: int getNumObjectiveFunctions()>();

     label1:
        $i1 = virtualinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: int getWidth()>();

        $i1 = $i1 + -1;

        if $i0 >= $i1 goto label3;

        $r1 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: org.apache.commons.math3.linear.RealMatrix tableau>;

        $d1 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>(0, $i0);

        $d0 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: double epsilon>;

        $i1 = staticinvoke <org.apache.commons.math3.util.Precision: int compareTo(double,double,double)>($d1, 0.0, $d0);

        if $i1 >= 0 goto label2;

        return 0;

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        return 1;
    }
    public java.util.List normalizeConstraints(java.util.Collection)
    {
        org.apache.commons.math3.optimization.linear.SimplexTableau r0;
        java.util.Collection r1;
        java.util.ArrayList r2;
        int $i0;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        org.apache.commons.math3.optimization.linear.LinearConstraint r5;

        r0 := @this: org.apache.commons.math3.optimization.linear.SimplexTableau;

        r1 := @parameter0: java.util.Collection;

        r2 = new java.util.ArrayList;

        $i0 = interfaceinvoke r1.<java.util.Collection: int size()>();

        specialinvoke r2.<java.util.ArrayList: void <init>(int)>($i0);

        $r3 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.commons.math3.optimization.linear.LinearConstraint) $r4;

        r5 = specialinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: org.apache.commons.math3.optimization.linear.LinearConstraint normalize(org.apache.commons.math3.optimization.linear.LinearConstraint)>(r5);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r5);

        goto label1;

     label2:
        return r2;
    }
    protected final void setEntry(int, int, double)
    {
        org.apache.commons.math3.optimization.linear.SimplexTableau r0;
        int $i0, $i1;
        double $d0;
        org.apache.commons.math3.linear.RealMatrix $r1;

        r0 := @this: org.apache.commons.math3.optimization.linear.SimplexTableau;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $d0 := @parameter2: double;

        $r1 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: org.apache.commons.math3.linear.RealMatrix tableau>;

        interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: void setEntry(int,int,double)>($i0, $i1, $d0);

        return;
    }
    protected void subtractRow(int, int, double)
    {
        org.apache.commons.math3.optimization.linear.SimplexTableau r0;
        int $i0, $i1, i2, $i3;
        double $d0, $d1, $d2;
        org.apache.commons.math3.linear.RealMatrix $r1;
        byte $b4;

        r0 := @this: org.apache.commons.math3.optimization.linear.SimplexTableau;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $d0 := @parameter2: double;

        i2 = 0;

     label1:
        $i3 = virtualinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: int getWidth()>();

        if i2 >= $i3 goto label3;

        $r1 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: org.apache.commons.math3.linear.RealMatrix tableau>;

        $d1 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>($i0, i2);

        $r1 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: org.apache.commons.math3.linear.RealMatrix tableau>;

        $d2 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>($i1, i2);

        $d2 = $d2 * $d0;

        $d1 = $d1 - $d2;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d1);

        $b4 = $d2 cmpg 1.0E-12;

        if $b4 >= 0 goto label2;

        $d1 = 0.0;

     label2:
        $r1 = r0.<org.apache.commons.math3.optimization.linear.SimplexTableau: org.apache.commons.math3.linear.RealMatrix tableau>;

        interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: void setEntry(int,int,double)>($i0, i2, $d1);

        i2 = i2 + 1;

        goto label1;

     label3:
        return;
    }
