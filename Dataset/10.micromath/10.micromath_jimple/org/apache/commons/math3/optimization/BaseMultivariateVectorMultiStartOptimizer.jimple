org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer extends java.lang.Object implements org.apache.commons.math3.optimization.BaseMultivariateVectorOptimizer
private org.apache.commons.math3.random.RandomVectorGenerator generator
private int maxEvaluations
private org.apache.commons.math3.optimization.PointVectorValuePair[] optima
private final org.apache.commons.math3.optimization.BaseMultivariateVectorOptimizer optimizer
private int starts
private int totalEvaluations
    protected void <init>(org.apache.commons.math3.optimization.BaseMultivariateVectorOptimizer, int, org.apache.commons.math3.random.RandomVectorGenerator)
    {
        org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer r0;
        org.apache.commons.math3.optimization.BaseMultivariateVectorOptimizer r1;
        int $i0;
        org.apache.commons.math3.random.RandomVectorGenerator $r2;
        java.lang.Integer $r3;
        org.apache.commons.math3.exception.NullArgumentException $r4;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r5;

        r0 := @this: org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer;

        r1 := @parameter0: org.apache.commons.math3.optimization.BaseMultivariateVectorOptimizer;

        $i0 := @parameter1: int;

        $r2 := @parameter2: org.apache.commons.math3.random.RandomVectorGenerator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 == null goto label1;

        if $r2 != null goto label2;

     label1:
        $r4 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r4.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r4;

     label2:
        if $i0 >= 1 goto label3;

        $r5 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r5.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(java.lang.Number)>($r3);

        throw $r5;

     label3:
        r0.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer: org.apache.commons.math3.optimization.BaseMultivariateVectorOptimizer optimizer> = r1;

        r0.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer: int starts> = $i0;

        r0.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer: org.apache.commons.math3.random.RandomVectorGenerator generator> = $r2;

        return;
    }
    private void sortPairs(double[], double[])
    {
        org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer r0;
        double[] $r1, $r2;
        org.apache.commons.math3.optimization.PointVectorValuePair[] $r3;
        org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer$1 $r4;

        r0 := @this: org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[];

        $r3 = r0.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer: org.apache.commons.math3.optimization.PointVectorValuePair[] optima>;

        $r4 = new org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer$1;

        specialinvoke $r4.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer$1: void <init>(org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer,double[],double[])>(r0, $r1, $r2);

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>($r3, $r4);

        return;
    }
    public org.apache.commons.math3.optimization.ConvergenceChecker getConvergenceChecker()
    {
        org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer r0;
        org.apache.commons.math3.optimization.ConvergenceChecker $r1;
        org.apache.commons.math3.optimization.BaseMultivariateVectorOptimizer $r2;

        r0 := @this: org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer;

        $r2 = r0.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer: org.apache.commons.math3.optimization.BaseMultivariateVectorOptimizer optimizer>;

        $r1 = interfaceinvoke $r2.<org.apache.commons.math3.optimization.BaseMultivariateVectorOptimizer: org.apache.commons.math3.optimization.ConvergenceChecker getConvergenceChecker()>();

        return $r1;
    }
    public int getEvaluations()
    {
        org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer r0;
        int i0;

        r0 := @this: org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer;

        i0 = r0.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer: int totalEvaluations>;

        return i0;
    }
    public int getMaxEvaluations()
    {
        org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer r0;
        int i0;

        r0 := @this: org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer;

        i0 = r0.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer: int maxEvaluations>;

        return i0;
    }
    public org.apache.commons.math3.optimization.PointVectorValuePair[] getOptima()
    {
        org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer r0;
        org.apache.commons.math3.exception.util.LocalizedFormats $r1;
        java.lang.Object $r2;
        org.apache.commons.math3.optimization.PointVectorValuePair[] $r3;
        org.apache.commons.math3.exception.MathIllegalStateException $r4;
        java.lang.Object[] $r5;

        r0 := @this: org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer;

        $r3 = r0.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer: org.apache.commons.math3.optimization.PointVectorValuePair[] optima>;

        if $r3 != null goto label1;

        $r4 = new org.apache.commons.math3.exception.MathIllegalStateException;

        $r1 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NO_OPTIMUM_COMPUTED_YET>;

        $r5 = newarray (java.lang.Object)[0];

        specialinvoke $r4.<org.apache.commons.math3.exception.MathIllegalStateException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r1, $r5);

        throw $r4;

     label1:
        $r3 = r0.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer: org.apache.commons.math3.optimization.PointVectorValuePair[] optima>;

        $r2 = virtualinvoke $r3.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (org.apache.commons.math3.optimization.PointVectorValuePair[]) $r2;

        return $r3;
    }
    public org.apache.commons.math3.optimization.PointVectorValuePair optimize(int, org.apache.commons.math3.analysis.MultivariateVectorFunction, double[], double[], double[])
    {
        org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer r0;
        int $i0, $i1, $i2, $i3;
        org.apache.commons.math3.analysis.MultivariateVectorFunction r1;
        double[] $r2, $r3, $r4, $r9;
        java.lang.RuntimeException r5;
        org.apache.commons.math3.exception.ConvergenceException r6;
        org.apache.commons.math3.optimization.PointVectorValuePair[] $r7;
        org.apache.commons.math3.optimization.BaseMultivariateVectorOptimizer $r8;
        org.apache.commons.math3.optimization.PointVectorValuePair $r10;
        org.apache.commons.math3.random.RandomVectorGenerator $r11;

        r0 := @this: org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer;

        $i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.analysis.MultivariateVectorFunction;

        $r2 := @parameter2: double[];

        $r3 := @parameter3: double[];

        $r4 := @parameter4: double[];

        r0.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer: int maxEvaluations> = $i0;

        r5 = null;

        $i1 = r0.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer: int starts>;

        $r7 = newarray (org.apache.commons.math3.optimization.PointVectorValuePair)[$i1];

        r0.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer: org.apache.commons.math3.optimization.PointVectorValuePair[] optima> = $r7;

        r0.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer: int totalEvaluations> = 0;

        $i1 = 0;

     label01:
        $i2 = r0.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer: int starts>;

        if $i1 >= $i2 goto label12;

     label02:
        $r7 = r0.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer: org.apache.commons.math3.optimization.PointVectorValuePair[] optima>;

        $r8 = r0.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer: org.apache.commons.math3.optimization.BaseMultivariateVectorOptimizer optimizer>;

        $i2 = r0.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer: int totalEvaluations>;

     label03:
        $i2 = $i0 - $i2;

        if $i1 != 0 goto label07;

        $r9 = $r4;

     label04:
        $r10 = interfaceinvoke $r8.<org.apache.commons.math3.optimization.BaseMultivariateVectorOptimizer: org.apache.commons.math3.optimization.PointVectorValuePair optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])>($i2, r1, $r2, $r3, $r9);

     label05:
        $r7[$i1] = $r10;

     label06:
        $i2 = r0.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer: int totalEvaluations>;

        $r8 = r0.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer: org.apache.commons.math3.optimization.BaseMultivariateVectorOptimizer optimizer>;

        $i3 = interfaceinvoke $r8.<org.apache.commons.math3.optimization.BaseMultivariateVectorOptimizer: int getEvaluations()>();

        $i2 = $i2 + $i3;

        r0.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer: int totalEvaluations> = $i2;

        $i1 = $i1 + 1;

        goto label01;

     label07:
        $r11 = r0.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer: org.apache.commons.math3.random.RandomVectorGenerator generator>;

     label08:
        $r9 = interfaceinvoke $r11.<org.apache.commons.math3.random.RandomVectorGenerator: double[] nextVector()>();

     label09:
        goto label04;

     label10:
        r6 := @caughtexception;

        $r7 = r0.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer: org.apache.commons.math3.optimization.PointVectorValuePair[] optima>;

        $r7[$i1] = null;

        goto label06;

     label11:
        r5 := @caughtexception;

        $r7 = r0.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer: org.apache.commons.math3.optimization.PointVectorValuePair[] optima>;

        $r7[$i1] = null;

        goto label06;

     label12:
        specialinvoke r0.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer: void sortPairs(double[],double[])>($r2, $r3);

        $r7 = r0.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer: org.apache.commons.math3.optimization.PointVectorValuePair[] optima>;

        $r10 = $r7[0];

        if $r10 != null goto label13;

        throw r5;

     label13:
        $r7 = r0.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer: org.apache.commons.math3.optimization.PointVectorValuePair[] optima>;

        $r10 = $r7[0];

        return $r10;

        catch org.apache.commons.math3.exception.ConvergenceException from label04 to label05 with label10;
        catch java.lang.RuntimeException from label02 to label03 with label11;
        catch java.lang.RuntimeException from label04 to label06 with label11;
        catch org.apache.commons.math3.exception.ConvergenceException from label08 to label09 with label10;
        catch java.lang.RuntimeException from label07 to label09 with label11;
    }
