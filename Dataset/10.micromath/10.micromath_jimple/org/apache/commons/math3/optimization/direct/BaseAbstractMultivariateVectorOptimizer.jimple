org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer extends java.lang.Object implements org.apache.commons.math3.optimization.BaseMultivariateVectorOptimizer
private org.apache.commons.math3.optimization.ConvergenceChecker checker
protected final org.apache.commons.math3.util.Incrementor evaluations
private org.apache.commons.math3.analysis.MultivariateVectorFunction function
private double[] start
private double[] target
private double[] weight
private org.apache.commons.math3.linear.RealMatrix weightMatrix
    protected void <init>()
    {
        org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer r0;
        org.apache.commons.math3.optimization.SimpleVectorValueChecker $r1;

        r0 := @this: org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer;

        $r1 = new org.apache.commons.math3.optimization.SimpleVectorValueChecker;

        specialinvoke $r1.<org.apache.commons.math3.optimization.SimpleVectorValueChecker: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer: void <init>(org.apache.commons.math3.optimization.ConvergenceChecker)>($r1);

        return;
    }
    protected void <init>(org.apache.commons.math3.optimization.ConvergenceChecker)
    {
        org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer r0;
        org.apache.commons.math3.optimization.ConvergenceChecker r1;
        org.apache.commons.math3.util.Incrementor $r2;

        r0 := @this: org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer;

        r1 := @parameter0: org.apache.commons.math3.optimization.ConvergenceChecker;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new org.apache.commons.math3.util.Incrementor;

        specialinvoke $r2.<org.apache.commons.math3.util.Incrementor: void <init>()>();

        r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer: org.apache.commons.math3.util.Incrementor evaluations> = $r2;

        r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer: org.apache.commons.math3.optimization.ConvergenceChecker checker> = r1;

        return;
    }
    private void checkParameters()
    {
        org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer r0;
        double[] $r1;
        int $i0, $i1;
        org.apache.commons.math3.linear.RealMatrix $r2;
        org.apache.commons.math3.exception.DimensionMismatchException $r3;

        r0 := @this: org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer;

        $r1 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer: double[] target>;

        $i0 = lengthof $r1;

        $r2 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer: org.apache.commons.math3.linear.RealMatrix weightMatrix>;

        $i1 = interfaceinvoke $r2.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        if $i0 == $i1 goto label1;

        $r3 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $r1 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer: double[] target>;

        $i0 = lengthof $r1;

        $r2 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer: org.apache.commons.math3.linear.RealMatrix weightMatrix>;

        $i1 = interfaceinvoke $r2.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        specialinvoke $r3.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i0, $i1);

        throw $r3;

     label1:
        return;
    }
    private transient void parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])
    {
        org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer r0;
        org.apache.commons.math3.optimization.OptimizationData[] $r1;
        int i0, i1;
        org.apache.commons.math3.optimization.OptimizationData r2;
        boolean $z0;
        org.apache.commons.math3.optimization.Target r3;
        double[] $r4;
        org.apache.commons.math3.optimization.Weight r5;
        org.apache.commons.math3.linear.RealMatrix $r6;
        org.apache.commons.math3.optimization.InitialGuess r7;

        r0 := @this: org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer;

        $r1 := @parameter0: org.apache.commons.math3.optimization.OptimizationData[];

        i0 = lengthof $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label5;

        r2 = $r1[i1];

        $z0 = r2 instanceof org.apache.commons.math3.optimization.Target;

        if $z0 == 0 goto label3;

        r3 = (org.apache.commons.math3.optimization.Target) r2;

        $r4 = virtualinvoke r3.<org.apache.commons.math3.optimization.Target: double[] getTarget()>();

        r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer: double[] target> = $r4;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $z0 = r2 instanceof org.apache.commons.math3.optimization.Weight;

        if $z0 == 0 goto label4;

        r5 = (org.apache.commons.math3.optimization.Weight) r2;

        $r6 = virtualinvoke r5.<org.apache.commons.math3.optimization.Weight: org.apache.commons.math3.linear.RealMatrix getWeight()>();

        r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer: org.apache.commons.math3.linear.RealMatrix weightMatrix> = $r6;

        goto label2;

     label4:
        $z0 = r2 instanceof org.apache.commons.math3.optimization.InitialGuess;

        if $z0 == 0 goto label2;

        r7 = (org.apache.commons.math3.optimization.InitialGuess) r2;

        $r4 = virtualinvoke r7.<org.apache.commons.math3.optimization.InitialGuess: double[] getInitialGuess()>();

        r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer: double[] start> = $r4;

        goto label2;

     label5:
        return;
    }
    protected double[] computeObjectiveValue(double[])
    {
        org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer r0;
        double[] $r1;
        org.apache.commons.math3.exception.MaxCountExceededException r2;
        org.apache.commons.math3.util.Incrementor $r3;
        org.apache.commons.math3.analysis.MultivariateVectorFunction $r4;
        org.apache.commons.math3.exception.TooManyEvaluationsException $r5;
        java.lang.Number $r6;

        r0 := @this: org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer;

        $r1 := @parameter0: double[];

        $r3 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer: org.apache.commons.math3.util.Incrementor evaluations>;

     label1:
        virtualinvoke $r3.<org.apache.commons.math3.util.Incrementor: void incrementCount()>();

     label2:
        $r4 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer: org.apache.commons.math3.analysis.MultivariateVectorFunction function>;

        $r1 = interfaceinvoke $r4.<org.apache.commons.math3.analysis.MultivariateVectorFunction: double[] value(double[])>($r1);

        return $r1;

     label3:
        r2 := @caughtexception;

        $r5 = new org.apache.commons.math3.exception.TooManyEvaluationsException;

        $r6 = virtualinvoke r2.<org.apache.commons.math3.exception.MaxCountExceededException: java.lang.Number getMax()>();

        specialinvoke $r5.<org.apache.commons.math3.exception.TooManyEvaluationsException: void <init>(java.lang.Number)>($r6);

        throw $r5;

        catch org.apache.commons.math3.exception.MaxCountExceededException from label1 to label2 with label3;
    }
protected abstract org.apache.commons.math3.optimization.PointVectorValuePair doOptimize() { 
// no body
} 
    public org.apache.commons.math3.optimization.ConvergenceChecker getConvergenceChecker()
    {
        org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer r0;
        org.apache.commons.math3.optimization.ConvergenceChecker r1;

        r0 := @this: org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer;

        r1 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer: org.apache.commons.math3.optimization.ConvergenceChecker checker>;

        return r1;
    }
    public int getEvaluations()
    {
        org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer r0;
        int $i0;
        org.apache.commons.math3.util.Incrementor $r1;

        r0 := @this: org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer;

        $r1 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer: org.apache.commons.math3.util.Incrementor evaluations>;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.util.Incrementor: int getCount()>();

        return $i0;
    }
    public int getMaxEvaluations()
    {
        org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer r0;
        int $i0;
        org.apache.commons.math3.util.Incrementor $r1;

        r0 := @this: org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer;

        $r1 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer: org.apache.commons.math3.util.Incrementor evaluations>;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.util.Incrementor: int getMaximalCount()>();

        return $i0;
    }
    protected org.apache.commons.math3.analysis.MultivariateVectorFunction getObjectiveFunction()
    {
        org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer r0;
        org.apache.commons.math3.analysis.MultivariateVectorFunction r1;

        r0 := @this: org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer;

        r1 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer: org.apache.commons.math3.analysis.MultivariateVectorFunction function>;

        return r1;
    }
    public double[] getStartPoint()
    {
        org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer r0;
        java.lang.Object $r1;
        double[] $r2;

        r0 := @this: org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer;

        $r2 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer: double[] start>;

        $r1 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (double[]) $r1;

        return $r2;
    }
    public double[] getTarget()
    {
        org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer r0;
        java.lang.Object $r1;
        double[] $r2;

        r0 := @this: org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer;

        $r2 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer: double[] target>;

        $r1 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (double[]) $r1;

        return $r2;
    }
    protected double[] getTargetRef()
    {
        org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer r0;
        double[] r1;

        r0 := @this: org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer;

        r1 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer: double[] target>;

        return r1;
    }
    public org.apache.commons.math3.linear.RealMatrix getWeight()
    {
        org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer r0;
        org.apache.commons.math3.linear.RealMatrix $r1;

        r0 := @this: org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer;

        $r1 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer: org.apache.commons.math3.linear.RealMatrix weightMatrix>;

        $r1 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix copy()>();

        return $r1;
    }
    protected double[] getWeightRef()
    {
        org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer r0;
        double[] r1;

        r0 := @this: org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer;

        r1 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer: double[] weight>;

        return r1;
    }
    public org.apache.commons.math3.optimization.PointVectorValuePair optimize(int, org.apache.commons.math3.analysis.MultivariateVectorFunction, double[], double[], double[])
    {
        org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer r0;
        int $i0;
        org.apache.commons.math3.analysis.MultivariateVectorFunction r1;
        double[] $r2, $r3, $r4;
        org.apache.commons.math3.optimization.PointVectorValuePair $r5;

        r0 := @this: org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer;

        $i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.analysis.MultivariateVectorFunction;

        $r2 := @parameter2: double[];

        $r3 := @parameter3: double[];

        $r4 := @parameter4: double[];

        $r5 = virtualinvoke r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer: org.apache.commons.math3.optimization.PointVectorValuePair optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])>($i0, r1, $r2, $r3, $r4);

        return $r5;
    }
    protected transient org.apache.commons.math3.optimization.PointVectorValuePair optimize(int, org.apache.commons.math3.analysis.MultivariateVectorFunction, org.apache.commons.math3.optimization.OptimizationData[]) throws org.apache.commons.math3.exception.TooManyEvaluationsException, org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer r0;
        int $i0;
        org.apache.commons.math3.analysis.MultivariateVectorFunction r1;
        org.apache.commons.math3.optimization.OptimizationData[] $r2;
        org.apache.commons.math3.optimization.PointVectorValuePair $r3;

        r0 := @this: org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer;

        $i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.analysis.MultivariateVectorFunction;

        $r2 := @parameter2: org.apache.commons.math3.optimization.OptimizationData[];

        $r3 = virtualinvoke r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer: org.apache.commons.math3.optimization.PointVectorValuePair optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])>($i0, r1, $r2);

        return $r3;
    }
    protected org.apache.commons.math3.optimization.PointVectorValuePair optimizeInternal(int, org.apache.commons.math3.analysis.MultivariateVectorFunction, double[], double[], double[])
    {
        org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer r0;
        int $i0, $i1, $i2;
        org.apache.commons.math3.analysis.MultivariateVectorFunction r1;
        double[] $r2, $r3, $r4;
        org.apache.commons.math3.optimization.PointVectorValuePair $r5;
        org.apache.commons.math3.exception.NullArgumentException $r6;
        org.apache.commons.math3.exception.DimensionMismatchException $r7;
        org.apache.commons.math3.optimization.OptimizationData[] $r8;
        org.apache.commons.math3.optimization.Target $r9;
        org.apache.commons.math3.optimization.Weight $r10;
        org.apache.commons.math3.optimization.InitialGuess $r11;

        r0 := @this: org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer;

        $i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.analysis.MultivariateVectorFunction;

        $r2 := @parameter2: double[];

        $r3 := @parameter3: double[];

        $r4 := @parameter4: double[];

        if r1 != null goto label1;

        $r6 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r6.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r6;

     label1:
        if $r2 != null goto label2;

        $r6 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r6.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r6;

     label2:
        if $r3 != null goto label3;

        $r6 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r6.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r6;

     label3:
        if $r4 != null goto label4;

        $r6 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r6.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r6;

     label4:
        $i1 = lengthof $r2;

        $i2 = lengthof $r3;

        if $i1 == $i2 goto label5;

        $r7 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i0 = lengthof $r2;

        $i1 = lengthof $r3;

        specialinvoke $r7.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i0, $i1);

        throw $r7;

     label5:
        $r8 = newarray (org.apache.commons.math3.optimization.OptimizationData)[3];

        $r9 = new org.apache.commons.math3.optimization.Target;

        specialinvoke $r9.<org.apache.commons.math3.optimization.Target: void <init>(double[])>($r2);

        $r8[0] = $r9;

        $r10 = new org.apache.commons.math3.optimization.Weight;

        specialinvoke $r10.<org.apache.commons.math3.optimization.Weight: void <init>(double[])>($r3);

        $r8[1] = $r10;

        $r11 = new org.apache.commons.math3.optimization.InitialGuess;

        specialinvoke $r11.<org.apache.commons.math3.optimization.InitialGuess: void <init>(double[])>($r4);

        $r8[2] = $r11;

        $r5 = virtualinvoke r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer: org.apache.commons.math3.optimization.PointVectorValuePair optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])>($i0, r1, $r8);

        return $r5;
    }
    protected transient org.apache.commons.math3.optimization.PointVectorValuePair optimizeInternal(int, org.apache.commons.math3.analysis.MultivariateVectorFunction, org.apache.commons.math3.optimization.OptimizationData[]) throws org.apache.commons.math3.exception.TooManyEvaluationsException, org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer r0;
        int $i0;
        org.apache.commons.math3.analysis.MultivariateVectorFunction r1;
        org.apache.commons.math3.optimization.OptimizationData[] $r2;
        org.apache.commons.math3.optimization.PointVectorValuePair $r3;
        org.apache.commons.math3.util.Incrementor $r4;

        r0 := @this: org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer;

        $i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.analysis.MultivariateVectorFunction;

        $r2 := @parameter2: org.apache.commons.math3.optimization.OptimizationData[];

        $r4 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer: org.apache.commons.math3.util.Incrementor evaluations>;

        virtualinvoke $r4.<org.apache.commons.math3.util.Incrementor: void setMaximalCount(int)>($i0);

        $r4 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer: org.apache.commons.math3.util.Incrementor evaluations>;

        virtualinvoke $r4.<org.apache.commons.math3.util.Incrementor: void resetCount()>();

        r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer: org.apache.commons.math3.analysis.MultivariateVectorFunction function> = r1;

        specialinvoke r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer: void parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])>($r2);

        specialinvoke r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer: void checkParameters()>();

        virtualinvoke r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer: void setUp()>();

        $r3 = virtualinvoke r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer: org.apache.commons.math3.optimization.PointVectorValuePair doOptimize()>();

        return $r3;
    }
    protected void setUp()
    {
        org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer r0;
        int i0, i1;
        org.apache.commons.math3.linear.RealMatrix $r1;
        double $d0;
        double[] $r2;

        r0 := @this: org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer;

        $r2 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer: double[] target>;

        i0 = lengthof $r2;

        $r2 = newarray (double)[i0];

        r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer: double[] weight> = $r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r2 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer: double[] weight>;

        $r1 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer: org.apache.commons.math3.linear.RealMatrix weightMatrix>;

        $d0 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>(i1, i1);

        $r2[i1] = $d0;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
