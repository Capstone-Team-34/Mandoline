org.apache.commons.math3.optimization.LeastSquaresConverter extends java.lang.Object implements org.apache.commons.math3.analysis.MultivariateFunction
private final org.apache.commons.math3.analysis.MultivariateVectorFunction function
private final double[] observations
private final org.apache.commons.math3.linear.RealMatrix scale
private final double[] weights
    public void <init>(org.apache.commons.math3.analysis.MultivariateVectorFunction, double[])
    {
        org.apache.commons.math3.optimization.LeastSquaresConverter r0;
        org.apache.commons.math3.analysis.MultivariateVectorFunction $r1;
        double[] $r2;
        java.lang.Object $r3;

        r0 := @this: org.apache.commons.math3.optimization.LeastSquaresConverter;

        $r1 := @parameter0: org.apache.commons.math3.analysis.MultivariateVectorFunction;

        $r2 := @parameter1: double[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.optimization.LeastSquaresConverter: org.apache.commons.math3.analysis.MultivariateVectorFunction function> = $r1;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (double[]) $r3;

        r0.<org.apache.commons.math3.optimization.LeastSquaresConverter: double[] observations> = $r2;

        r0.<org.apache.commons.math3.optimization.LeastSquaresConverter: double[] weights> = null;

        r0.<org.apache.commons.math3.optimization.LeastSquaresConverter: org.apache.commons.math3.linear.RealMatrix scale> = null;

        return;
    }
    public void <init>(org.apache.commons.math3.analysis.MultivariateVectorFunction, double[], org.apache.commons.math3.linear.RealMatrix)
    {
        org.apache.commons.math3.optimization.LeastSquaresConverter r0;
        org.apache.commons.math3.analysis.MultivariateVectorFunction $r1;
        double[] $r2;
        org.apache.commons.math3.linear.RealMatrix $r3;
        int $i0, $i1;
        org.apache.commons.math3.exception.DimensionMismatchException $r4;
        java.lang.Object $r5;

        r0 := @this: org.apache.commons.math3.optimization.LeastSquaresConverter;

        $r1 := @parameter0: org.apache.commons.math3.analysis.MultivariateVectorFunction;

        $r2 := @parameter1: double[];

        $r3 := @parameter2: org.apache.commons.math3.linear.RealMatrix;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = lengthof $r2;

        $i1 = interfaceinvoke $r3.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        if $i0 == $i1 goto label1;

        $r4 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i0 = lengthof $r2;

        $i1 = interfaceinvoke $r3.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        specialinvoke $r4.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i0, $i1);

        throw $r4;

     label1:
        r0.<org.apache.commons.math3.optimization.LeastSquaresConverter: org.apache.commons.math3.analysis.MultivariateVectorFunction function> = $r1;

        $r5 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (double[]) $r5;

        r0.<org.apache.commons.math3.optimization.LeastSquaresConverter: double[] observations> = $r2;

        r0.<org.apache.commons.math3.optimization.LeastSquaresConverter: double[] weights> = null;

        $r3 = interfaceinvoke $r3.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix copy()>();

        r0.<org.apache.commons.math3.optimization.LeastSquaresConverter: org.apache.commons.math3.linear.RealMatrix scale> = $r3;

        return;
    }
    public void <init>(org.apache.commons.math3.analysis.MultivariateVectorFunction, double[], double[])
    {
        org.apache.commons.math3.optimization.LeastSquaresConverter r0;
        org.apache.commons.math3.analysis.MultivariateVectorFunction $r1;
        double[] $r2, $r3;
        int $i0, $i1;
        org.apache.commons.math3.exception.DimensionMismatchException $r4;
        java.lang.Object $r5;

        r0 := @this: org.apache.commons.math3.optimization.LeastSquaresConverter;

        $r1 := @parameter0: org.apache.commons.math3.analysis.MultivariateVectorFunction;

        $r2 := @parameter1: double[];

        $r3 := @parameter2: double[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = lengthof $r2;

        $i1 = lengthof $r3;

        if $i0 == $i1 goto label1;

        $r4 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i1 = lengthof $r2;

        $i0 = lengthof $r3;

        specialinvoke $r4.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i1, $i0);

        throw $r4;

     label1:
        r0.<org.apache.commons.math3.optimization.LeastSquaresConverter: org.apache.commons.math3.analysis.MultivariateVectorFunction function> = $r1;

        $r5 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (double[]) $r5;

        r0.<org.apache.commons.math3.optimization.LeastSquaresConverter: double[] observations> = $r2;

        $r5 = virtualinvoke $r3.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (double[]) $r5;

        r0.<org.apache.commons.math3.optimization.LeastSquaresConverter: double[] weights> = $r2;

        r0.<org.apache.commons.math3.optimization.LeastSquaresConverter: org.apache.commons.math3.linear.RealMatrix scale> = null;

        return;
    }
    public double value(double[])
    {
        org.apache.commons.math3.optimization.LeastSquaresConverter r0;
        double[] $r1, $r3;
        double d0, $d1, $d2;
        org.apache.commons.math3.analysis.MultivariateVectorFunction $r2;
        int $i0, $i1;
        org.apache.commons.math3.exception.DimensionMismatchException $r4;
        org.apache.commons.math3.linear.RealMatrix $r5;

        r0 := @this: org.apache.commons.math3.optimization.LeastSquaresConverter;

        $r1 := @parameter0: double[];

        $r2 = r0.<org.apache.commons.math3.optimization.LeastSquaresConverter: org.apache.commons.math3.analysis.MultivariateVectorFunction function>;

        $r1 = interfaceinvoke $r2.<org.apache.commons.math3.analysis.MultivariateVectorFunction: double[] value(double[])>($r1);

        $i0 = lengthof $r1;

        $r3 = r0.<org.apache.commons.math3.optimization.LeastSquaresConverter: double[] observations>;

        $i1 = lengthof $r3;

        if $i0 == $i1 goto label1;

        $r4 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i0 = lengthof $r1;

        $r1 = r0.<org.apache.commons.math3.optimization.LeastSquaresConverter: double[] observations>;

        $i1 = lengthof $r1;

        specialinvoke $r4.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i0, $i1);

        throw $r4;

     label1:
        $i0 = 0;

     label2:
        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label3;

        d0 = $r1[$i0];

        $r3 = r0.<org.apache.commons.math3.optimization.LeastSquaresConverter: double[] observations>;

        $d1 = $r3[$i0];

        $d1 = d0 - $d1;

        $r1[$i0] = $d1;

        $i0 = $i0 + 1;

        goto label2;

     label3:
        $d1 = 0.0;

        $r3 = r0.<org.apache.commons.math3.optimization.LeastSquaresConverter: double[] weights>;

        if $r3 == null goto label5;

        $i0 = 0;

     label4:
        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label9;

        d0 = $r1[$i0];

        $r3 = r0.<org.apache.commons.math3.optimization.LeastSquaresConverter: double[] weights>;

        $d2 = $r3[$i0];

        $d2 = $d2 * d0;

        d0 = $d2 * d0;

        $d1 = $d1 + d0;

        $i0 = $i0 + 1;

        goto label4;

     label5:
        $r5 = r0.<org.apache.commons.math3.optimization.LeastSquaresConverter: org.apache.commons.math3.linear.RealMatrix scale>;

        if $r5 == null goto label7;

        $r5 = r0.<org.apache.commons.math3.optimization.LeastSquaresConverter: org.apache.commons.math3.linear.RealMatrix scale>;

        $r1 = interfaceinvoke $r5.<org.apache.commons.math3.linear.RealMatrix: double[] operate(double[])>($r1);

        $i0 = lengthof $r1;

        $i1 = 0;

     label6:
        if $i1 >= $i0 goto label9;

        d0 = $r1[$i1];

        d0 = d0 * d0;

        $d1 = $d1 + d0;

        $i1 = $i1 + 1;

        goto label6;

     label7:
        $i0 = lengthof $r1;

        $i1 = 0;

     label8:
        if $i1 >= $i0 goto label9;

        d0 = $r1[$i1];

        d0 = d0 * d0;

        $d1 = $d1 + d0;

        $i1 = $i1 + 1;

        goto label8;

     label9:
        return $d1;
    }
