org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer extends org.apache.commons.math3.optimization.general.AbstractScalarDifferentiableOptimizer
private double initialStep
private double[] point
private final org.apache.commons.math3.optimization.general.Preconditioner preconditioner
private final org.apache.commons.math3.analysis.solvers.UnivariateSolver solver
private final org.apache.commons.math3.optimization.general.ConjugateGradientFormula updateFormula
    public void <init>(org.apache.commons.math3.optimization.general.ConjugateGradientFormula)
    {
        org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer r0;
        org.apache.commons.math3.optimization.general.ConjugateGradientFormula $r1;
        org.apache.commons.math3.optimization.SimpleValueChecker $r2;

        r0 := @this: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer;

        $r1 := @parameter0: org.apache.commons.math3.optimization.general.ConjugateGradientFormula;

        $r2 = new org.apache.commons.math3.optimization.SimpleValueChecker;

        specialinvoke $r2.<org.apache.commons.math3.optimization.SimpleValueChecker: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer: void <init>(org.apache.commons.math3.optimization.general.ConjugateGradientFormula,org.apache.commons.math3.optimization.ConvergenceChecker)>($r1, $r2);

        return;
    }
    public void <init>(org.apache.commons.math3.optimization.general.ConjugateGradientFormula, org.apache.commons.math3.optimization.ConvergenceChecker)
    {
        org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer r0;
        org.apache.commons.math3.optimization.general.ConjugateGradientFormula $r1;
        org.apache.commons.math3.optimization.ConvergenceChecker r2;
        org.apache.commons.math3.analysis.solvers.BrentSolver $r3;
        org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer$IdentityPreconditioner $r4;

        r0 := @this: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer;

        $r1 := @parameter0: org.apache.commons.math3.optimization.general.ConjugateGradientFormula;

        r2 := @parameter1: org.apache.commons.math3.optimization.ConvergenceChecker;

        $r3 = new org.apache.commons.math3.analysis.solvers.BrentSolver;

        specialinvoke $r3.<org.apache.commons.math3.analysis.solvers.BrentSolver: void <init>()>();

        $r4 = new org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer$IdentityPreconditioner;

        specialinvoke $r4.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer$IdentityPreconditioner: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer: void <init>(org.apache.commons.math3.optimization.general.ConjugateGradientFormula,org.apache.commons.math3.optimization.ConvergenceChecker,org.apache.commons.math3.analysis.solvers.UnivariateSolver,org.apache.commons.math3.optimization.general.Preconditioner)>($r1, r2, $r3, $r4);

        return;
    }
    public void <init>(org.apache.commons.math3.optimization.general.ConjugateGradientFormula, org.apache.commons.math3.optimization.ConvergenceChecker, org.apache.commons.math3.analysis.solvers.UnivariateSolver)
    {
        org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer r0;
        org.apache.commons.math3.optimization.general.ConjugateGradientFormula $r1;
        org.apache.commons.math3.optimization.ConvergenceChecker r2;
        org.apache.commons.math3.analysis.solvers.UnivariateSolver $r3;
        org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer$IdentityPreconditioner $r4;

        r0 := @this: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer;

        $r1 := @parameter0: org.apache.commons.math3.optimization.general.ConjugateGradientFormula;

        r2 := @parameter1: org.apache.commons.math3.optimization.ConvergenceChecker;

        $r3 := @parameter2: org.apache.commons.math3.analysis.solvers.UnivariateSolver;

        $r4 = new org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer$IdentityPreconditioner;

        specialinvoke $r4.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer$IdentityPreconditioner: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer: void <init>(org.apache.commons.math3.optimization.general.ConjugateGradientFormula,org.apache.commons.math3.optimization.ConvergenceChecker,org.apache.commons.math3.analysis.solvers.UnivariateSolver,org.apache.commons.math3.optimization.general.Preconditioner)>($r1, r2, $r3, $r4);

        return;
    }
    public void <init>(org.apache.commons.math3.optimization.general.ConjugateGradientFormula, org.apache.commons.math3.optimization.ConvergenceChecker, org.apache.commons.math3.analysis.solvers.UnivariateSolver, org.apache.commons.math3.optimization.general.Preconditioner)
    {
        org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer r0;
        org.apache.commons.math3.optimization.general.ConjugateGradientFormula $r1;
        org.apache.commons.math3.optimization.ConvergenceChecker r2;
        org.apache.commons.math3.analysis.solvers.UnivariateSolver $r3;
        org.apache.commons.math3.optimization.general.Preconditioner $r4;

        r0 := @this: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer;

        $r1 := @parameter0: org.apache.commons.math3.optimization.general.ConjugateGradientFormula;

        r2 := @parameter1: org.apache.commons.math3.optimization.ConvergenceChecker;

        $r3 := @parameter2: org.apache.commons.math3.analysis.solvers.UnivariateSolver;

        $r4 := @parameter3: org.apache.commons.math3.optimization.general.Preconditioner;

        specialinvoke r0.<org.apache.commons.math3.optimization.general.AbstractScalarDifferentiableOptimizer: void <init>(org.apache.commons.math3.optimization.ConvergenceChecker)>(r2);

        r0.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer: org.apache.commons.math3.optimization.general.ConjugateGradientFormula updateFormula> = $r1;

        r0.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer: org.apache.commons.math3.analysis.solvers.UnivariateSolver solver> = $r3;

        r0.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer: org.apache.commons.math3.optimization.general.Preconditioner preconditioner> = $r4;

        r0.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer: double initialStep> = 1.0;

        return;
    }
    static double[] access$000(org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer)
    {
        org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer $r0;
        double[] r1;

        $r0 := @parameter0: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer;

        r1 = $r0.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer: double[] point>;

        return r1;
    }
    private double findUpperBound(org.apache.commons.math3.analysis.UnivariateFunction, double, double)
    {
        org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer r0;
        org.apache.commons.math3.analysis.UnivariateFunction $r1;
        double $d0, $d1, d2, $d3, $d4, $d5;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        byte $b0;
        org.apache.commons.math3.exception.MathIllegalStateException $r3;
        java.lang.Object[] $r4;

        r0 := @this: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer;

        $r1 := @parameter0: org.apache.commons.math3.analysis.UnivariateFunction;

        $d0 := @parameter1: double;

        $d1 := @parameter2: double;

        $d3 = interfaceinvoke $r1.<org.apache.commons.math3.analysis.UnivariateFunction: double value(double)>($d0);

     label1:
        $b0 = $d1 cmpg 1.7976931348623157E308;

        if $b0 >= 0 goto label3;

        d2 = $d0 + $d1;

        $d4 = interfaceinvoke $r1.<org.apache.commons.math3.analysis.UnivariateFunction: double value(double)>(d2);

        $d5 = $d3 * $d4;

        $b0 = $d5 cmpg 0.0;

        if $b0 > 0 goto label2;

        return d2;

     label2:
        d2 = $d3 / $d4;

        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>(2.0, d2);

        $d1 = $d1 * d2;

        goto label1;

     label3:
        $r3 = new org.apache.commons.math3.exception.MathIllegalStateException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH>;

        $r4 = newarray (java.lang.Object)[0];

        specialinvoke $r3.<org.apache.commons.math3.exception.MathIllegalStateException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r2, $r4);

        throw $r3;
    }
    protected org.apache.commons.math3.optimization.PointValuePair doOptimize()
    {
        org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer r0;
        org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer$LineSearchFunction r1;
        org.apache.commons.math3.analysis.solvers.UnivariateSolver $r2;
        double d0, $d1, $d2, $d3, $d4;
        org.apache.commons.math3.optimization.PointValuePair r3, r12;
        org.apache.commons.math3.optimization.ConvergenceChecker $r4;
        double[] $r5, $r7, $r10, $r13;
        org.apache.commons.math3.optimization.GoalType $r6, $r8;
        int $i0, i1, $i2, $i3, $i4;
        org.apache.commons.math3.optimization.general.Preconditioner $r9;
        java.lang.Object $r11;
        boolean $z0;
        org.apache.commons.math3.optimization.general.ConjugateGradientFormula $r14, $r15;
        byte $b5;

        r0 := @this: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer;

        $r4 = virtualinvoke r0.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer: org.apache.commons.math3.optimization.ConvergenceChecker getConvergenceChecker()>();

        $r5 = virtualinvoke r0.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer: double[] getStartPoint()>();

        r0.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer: double[] point> = $r5;

        $r6 = virtualinvoke r0.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer: org.apache.commons.math3.optimization.GoalType getGoalType()>();

        $r5 = r0.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer: double[] point>;

        $i0 = lengthof $r5;

        $r5 = r0.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer: double[] point>;

        $r7 = virtualinvoke r0.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer: double[] computeObjectiveGradient(double[])>($r5);

        $r8 = <org.apache.commons.math3.optimization.GoalType: org.apache.commons.math3.optimization.GoalType MINIMIZE>;

        if $r6 != $r8 goto label02;

        i1 = 0;

     label01:
        if i1 >= $i0 goto label02;

        $d1 = $r7[i1];

        $d1 = neg $d1;

        $r7[i1] = $d1;

        i1 = i1 + 1;

        goto label01;

     label02:
        $r9 = r0.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer: org.apache.commons.math3.optimization.general.Preconditioner preconditioner>;

        $r5 = r0.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer: double[] point>;

        $r10 = interfaceinvoke $r9.<org.apache.commons.math3.optimization.general.Preconditioner: double[] precondition(double[],double[])>($r5, $r7);

        $r5 = $r10;

        $r11 = virtualinvoke $r10.<java.lang.Object: java.lang.Object clone()>();

        $r10 = (double[]) $r11;

        $d1 = 0.0;

        i1 = 0;

     label03:
        if i1 >= $i0 goto label04;

        d0 = $r7[i1];

        $d2 = $r10[i1];

        d0 = d0 * $d2;

        $d1 = $d1 + d0;

        i1 = i1 + 1;

        goto label03;

     label04:
        r12 = null;

        i1 = 0;

        $i2 = virtualinvoke r0.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer: int getMaxEvaluations()>();

     label05:
        i1 = i1 + 1;

        $r7 = r0.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer: double[] point>;

        d0 = virtualinvoke r0.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer: double computeObjectiveValue(double[])>($r7);

        r3 = r12;

        r12 = new org.apache.commons.math3.optimization.PointValuePair;

        $r7 = r0.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer: double[] point>;

        specialinvoke r12.<org.apache.commons.math3.optimization.PointValuePair: void <init>(double[],double)>($r7, d0);

        if r3 == null goto label06;

        $z0 = interfaceinvoke $r4.<org.apache.commons.math3.optimization.ConvergenceChecker: boolean converged(int,java.lang.Object,java.lang.Object)>(i1, r3, r12);

        if $z0 == 0 goto label06;

        return r12;

     label06:
        r1 = new org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer$LineSearchFunction;

        specialinvoke r1.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer$LineSearchFunction: void <init>(org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer,double[])>(r0, $r10);

        d0 = r0.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer: double initialStep>;

        d0 = specialinvoke r0.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer: double findUpperBound(org.apache.commons.math3.analysis.UnivariateFunction,double,double)>(r1, 0.0, d0);

        $r2 = r0.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer: org.apache.commons.math3.analysis.solvers.UnivariateSolver solver>;

        d0 = interfaceinvoke $r2.<org.apache.commons.math3.analysis.solvers.UnivariateSolver: double solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)>($i2, r1, 0.0, d0, 1.0E-15);

        $r2 = r0.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer: org.apache.commons.math3.analysis.solvers.UnivariateSolver solver>;

        $i3 = interfaceinvoke $r2.<org.apache.commons.math3.analysis.solvers.UnivariateSolver: int getEvaluations()>();

        $i2 = $i2 - $i3;

        $i3 = 0;

     label07:
        $r7 = r0.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer: double[] point>;

        $i4 = lengthof $r7;

        if $i3 >= $i4 goto label08;

        $r7 = r0.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer: double[] point>;

        $d2 = $r7[$i3];

        $d3 = $r10[$i3];

        $d3 = $d3 * d0;

        $d2 = $d2 + $d3;

        $r7[$i3] = $d2;

        $i3 = $i3 + 1;

        goto label07;

     label08:
        $r7 = r0.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer: double[] point>;

        $r7 = virtualinvoke r0.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer: double[] computeObjectiveGradient(double[])>($r7);

        $r8 = <org.apache.commons.math3.optimization.GoalType: org.apache.commons.math3.optimization.GoalType MINIMIZE>;

        if $r6 != $r8 goto label10;

        $i3 = 0;

     label09:
        if $i3 >= $i0 goto label10;

        d0 = $r7[$i3];

        d0 = neg d0;

        $r7[$i3] = d0;

        $i3 = $i3 + 1;

        goto label09;

     label10:
        d0 = $d1;

        $r9 = r0.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer: org.apache.commons.math3.optimization.general.Preconditioner preconditioner>;

        $r13 = r0.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer: double[] point>;

        $r13 = interfaceinvoke $r9.<org.apache.commons.math3.optimization.general.Preconditioner: double[] precondition(double[],double[])>($r13, $r7);

        $d1 = 0.0;

        $i3 = 0;

     label11:
        if $i3 >= $i0 goto label12;

        $d2 = $r7[$i3];

        $d3 = $r13[$i3];

        $d2 = $d2 * $d3;

        $d1 = $d1 + $d2;

        $i3 = $i3 + 1;

        goto label11;

     label12:
        $r14 = r0.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer: org.apache.commons.math3.optimization.general.ConjugateGradientFormula updateFormula>;

        $r15 = <org.apache.commons.math3.optimization.general.ConjugateGradientFormula: org.apache.commons.math3.optimization.general.ConjugateGradientFormula FLETCHER_REEVES>;

        if $r14 != $r15 goto label15;

        d0 = $d1 / d0;

     label13:
        $r5 = $r13;

        $i3 = i1 % $i0;

        if $i3 == 0 goto label14;

        $b5 = d0 cmpg 0.0;

        if $b5 >= 0 goto label18;

     label14:
        $r11 = virtualinvoke $r13.<java.lang.Object: java.lang.Object clone()>();

        $r10 = (double[]) $r11;

        goto label05;

     label15:
        $d2 = 0.0;

        $i3 = 0;

     label16:
        $i4 = lengthof $r7;

        if $i3 >= $i4 goto label17;

        $d3 = $r7[$i3];

        $d4 = $r5[$i3];

        $d3 = $d3 * $d4;

        $d2 = $d2 + $d3;

        $i3 = $i3 + 1;

        goto label16;

     label17:
        $d2 = $d1 - $d2;

        d0 = $d2 / d0;

        goto label13;

     label18:
        $i3 = 0;

     label19:
        if $i3 >= $i0 goto label05;

        $d2 = $r13[$i3];

        $d3 = $r10[$i3];

        $d3 = $d3 * d0;

        $d2 = $d2 + $d3;

        $r10[$i3] = $d2;

        $i3 = $i3 + 1;

        goto label19;
    }
    public void setInitialStep(double)
    {
        org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer r0;
        double $d0;
        byte $b0;

        r0 := @this: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer;

        $d0 := @parameter0: double;

        $b0 = $d0 cmpg 0.0;

        if $b0 > 0 goto label1;

        r0.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer: double initialStep> = 1.0;

        return;

     label1:
        r0.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer: double initialStep> = $d0;

        return;
    }
