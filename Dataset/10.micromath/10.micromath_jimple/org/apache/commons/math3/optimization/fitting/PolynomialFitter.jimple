org.apache.commons.math3.optimization.fitting.PolynomialFitter extends org.apache.commons.math3.optimization.fitting.CurveFitter
private final int degree
    public void <init>(int, org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer)
    {
        org.apache.commons.math3.optimization.fitting.PolynomialFitter r0;
        int $i0;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer $r1;

        r0 := @this: org.apache.commons.math3.optimization.fitting.PolynomialFitter;

        $i0 := @parameter0: int;

        $r1 := @parameter1: org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer;

        specialinvoke r0.<org.apache.commons.math3.optimization.fitting.CurveFitter: void <init>(org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer)>($r1);

        r0.<org.apache.commons.math3.optimization.fitting.PolynomialFitter: int degree> = $i0;

        return;
    }
    public void <init>(org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer)
    {
        org.apache.commons.math3.optimization.fitting.PolynomialFitter r0;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer $r1;

        r0 := @this: org.apache.commons.math3.optimization.fitting.PolynomialFitter;

        $r1 := @parameter0: org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer;

        specialinvoke r0.<org.apache.commons.math3.optimization.fitting.CurveFitter: void <init>(org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer)>($r1);

        r0.<org.apache.commons.math3.optimization.fitting.PolynomialFitter: int degree> = -1;

        return;
    }
    public double[] fit()
    {
        org.apache.commons.math3.optimization.fitting.PolynomialFitter r0;
        double[] $r1;
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction$Parametric $r2;
        int $i0;

        r0 := @this: org.apache.commons.math3.optimization.fitting.PolynomialFitter;

        $r2 = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction$Parametric;

        specialinvoke $r2.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction$Parametric: void <init>()>();

        $i0 = r0.<org.apache.commons.math3.optimization.fitting.PolynomialFitter: int degree>;

        $i0 = $i0 + 1;

        $r1 = newarray (double)[$i0];

        $r1 = virtualinvoke r0.<org.apache.commons.math3.optimization.fitting.PolynomialFitter: double[] fit(org.apache.commons.math3.analysis.ParametricUnivariateFunction,double[])>($r2, $r1);

        return $r1;
    }
    public double[] fit(int, double[])
    {
        org.apache.commons.math3.optimization.fitting.PolynomialFitter r0;
        int $i0;
        double[] $r1;
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction$Parametric $r2;

        r0 := @this: org.apache.commons.math3.optimization.fitting.PolynomialFitter;

        $i0 := @parameter0: int;

        $r1 := @parameter1: double[];

        $r2 = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction$Parametric;

        specialinvoke $r2.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction$Parametric: void <init>()>();

        $r1 = virtualinvoke r0.<org.apache.commons.math3.optimization.fitting.PolynomialFitter: double[] fit(int,org.apache.commons.math3.analysis.ParametricUnivariateFunction,double[])>($i0, $r2, $r1);

        return $r1;
    }
    public double[] fit(double[])
    {
        org.apache.commons.math3.optimization.fitting.PolynomialFitter r0;
        double[] $r1;
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction$Parametric $r2;

        r0 := @this: org.apache.commons.math3.optimization.fitting.PolynomialFitter;

        $r1 := @parameter0: double[];

        $r2 = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction$Parametric;

        specialinvoke $r2.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction$Parametric: void <init>()>();

        $r1 = virtualinvoke r0.<org.apache.commons.math3.optimization.fitting.PolynomialFitter: double[] fit(org.apache.commons.math3.analysis.ParametricUnivariateFunction,double[])>($r2, $r1);

        return $r1;
    }
