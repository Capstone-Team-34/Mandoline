org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer$1 extends java.lang.Object implements java.util.Comparator
final org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer this$0
final org.apache.commons.math3.optimization.GoalType val$goal
    void <init>(org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer, org.apache.commons.math3.optimization.GoalType)
    {
        org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer$1 r0;
        org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer $r1;
        org.apache.commons.math3.optimization.GoalType $r2;

        r0 := @this: org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer$1;

        $r1 := @parameter0: org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer;

        $r2 := @parameter1: org.apache.commons.math3.optimization.GoalType;

        r0.<org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer$1: org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer this$0> = $r1;

        r0.<org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer$1: org.apache.commons.math3.optimization.GoalType val$goal> = $r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer$1 r0;
        int $i0;
        java.lang.Object $r1, $r2;
        org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair $r3, $r4;

        r0 := @this: org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer$1;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = (org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair) $r1;

        $r4 = (org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair) $r2;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer$1: int compare(org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair,org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair)>($r3, $r4);

        return $i0;
    }
    public int compare(org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair)
    {
        org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer$1 r0;
        org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair $r1, $r2;
        org.apache.commons.math3.optimization.GoalType $r3, $r4;
        double $d0, $d1;
        int $i0;

        r0 := @this: org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer$1;

        $r1 := @parameter0: org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair;

        $r2 := @parameter1: org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair;

        if $r1 != null goto label2;

        if $r2 != null goto label1;

        return 0;

     label1:
        return 1;

     label2:
        if $r2 != null goto label3;

        return -1;

     label3:
        $d0 = virtualinvoke $r1.<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair: double getValue()>();

        $d1 = virtualinvoke $r2.<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair: double getValue()>();

        $r4 = r0.<org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer$1: org.apache.commons.math3.optimization.GoalType val$goal>;

        $r3 = <org.apache.commons.math3.optimization.GoalType: org.apache.commons.math3.optimization.GoalType MINIMIZE>;

        if $r4 != $r3 goto label4;

        $i0 = staticinvoke <java.lang.Double: int compare(double,double)>($d0, $d1);

        return $i0;

     label4:
        $i0 = staticinvoke <java.lang.Double: int compare(double,double)>($d1, $d0);

        return $i0;
    }
