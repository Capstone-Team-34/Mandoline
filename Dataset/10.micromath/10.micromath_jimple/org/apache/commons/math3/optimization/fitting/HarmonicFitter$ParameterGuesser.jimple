org.apache.commons.math3.optimization.fitting.HarmonicFitter$ParameterGuesser extends java.lang.Object
private final double a
private final double omega
private final double phi
    public void <init>(org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[])
    {
        org.apache.commons.math3.optimization.fitting.HarmonicFitter$ParameterGuesser r0;
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] $r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        int $i0;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r3;
        java.lang.Integer $r4, $r5;
        double[] $r6;
        double $d0;

        r0 := @this: org.apache.commons.math3.optimization.fitting.HarmonicFitter$ParameterGuesser;

        $r1 := @parameter0: org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = lengthof $r1;

        if $i0 >= 4 goto label1;

        $r3 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE>;

        $i0 = lengthof $r1;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        specialinvoke $r3.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r2, $r4, $r5, 1);

        throw $r3;

     label1:
        $r1 = specialinvoke r0.<org.apache.commons.math3.optimization.fitting.HarmonicFitter$ParameterGuesser: org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] sortObservations(org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[])>($r1);

        $r6 = specialinvoke r0.<org.apache.commons.math3.optimization.fitting.HarmonicFitter$ParameterGuesser: double[] guessAOmega(org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[])>($r1);

        $d0 = $r6[0];

        r0.<org.apache.commons.math3.optimization.fitting.HarmonicFitter$ParameterGuesser: double a> = $d0;

        $d0 = $r6[1];

        r0.<org.apache.commons.math3.optimization.fitting.HarmonicFitter$ParameterGuesser: double omega> = $d0;

        $d0 = specialinvoke r0.<org.apache.commons.math3.optimization.fitting.HarmonicFitter$ParameterGuesser: double guessPhi(org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[])>($r1);

        r0.<org.apache.commons.math3.optimization.fitting.HarmonicFitter$ParameterGuesser: double phi> = $d0;

        return;
    }
    private double[] guessAOmega(org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[])
    {
        org.apache.commons.math3.optimization.fitting.HarmonicFitter$ParameterGuesser r0;
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] $r1;
        double[] r2;
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, $d12, d13, d14, $d15;
        int i0, $i1;
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint $r3;
        byte $b2;
        org.apache.commons.math3.exception.ZeroException $r4;
        org.apache.commons.math3.exception.MathIllegalStateException $r5;
        org.apache.commons.math3.exception.util.LocalizedFormats $r6;
        java.lang.Object[] $r7;

        r0 := @this: org.apache.commons.math3.optimization.fitting.HarmonicFitter$ParameterGuesser;

        $r1 := @parameter0: org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[];

        r2 = newarray (double)[2];

        d8 = 0.0;

        d9 = 0.0;

        d2 = 0.0;

        d10 = 0.0;

        d1 = 0.0;

        $r3 = $r1[0];

        d0 = virtualinvoke $r3.<org.apache.commons.math3.optimization.fitting.WeightedObservedPoint: double getX()>();

        d11 = d0;

        $r3 = $r1[0];

        $d12 = virtualinvoke $r3.<org.apache.commons.math3.optimization.fitting.WeightedObservedPoint: double getY()>();

        d13 = 0.0;

        d14 = 0.0;

        i0 = 1;

     label01:
        $i1 = lengthof $r1;

        if i0 >= $i1 goto label02;

        d3 = d11;

        d6 = $d12;

        $r3 = $r1[i0];

        d7 = virtualinvoke $r3.<org.apache.commons.math3.optimization.fitting.WeightedObservedPoint: double getX()>();

        d11 = d7;

        $r3 = $r1[i0];

        d5 = virtualinvoke $r3.<org.apache.commons.math3.optimization.fitting.WeightedObservedPoint: double getY()>();

        $d12 = d5;

        d3 = d7 - d3;

        d4 = d5 - d6;

        $d15 = d6 * d6;

        d6 = d6 * d5;

        d6 = $d15 + d6;

        d5 = d5 * d5;

        d5 = d6 + d5;

        d5 = d5 * d3;

        d5 = d5 / 3.0;

        d4 = d4 * d4;

        d3 = d4 / d3;

        d7 = d7 - d0;

        d13 = d13 + d5;

        d14 = d14 + d3;

        d3 = d7 * d7;

        d8 = d8 + d3;

        d3 = d13 * d13;

        d9 = d9 + d3;

        d3 = d7 * d13;

        d2 = d2 + d3;

        d7 = d7 * d14;

        d10 = d10 + d7;

        d7 = d13 * d14;

        d1 = d1 + d7;

        i0 = i0 + 1;

        goto label01;

     label02:
        d0 = d9 * d10;

        d11 = d2 * d1;

        d0 = d0 - d11;

        d10 = d2 * d10;

        d1 = d8 * d1;

        d1 = d10 - d1;

        d8 = d8 * d9;

        d2 = d2 * d2;

        d2 = d8 - d2;

        d8 = d0 / d1;

        $b2 = d8 cmpg 0.0;

        if $b2 < 0 goto label03;

        d8 = d1 / d2;

        $b2 = d8 cmpg 0.0;

        if $b2 >= 0 goto label09;

     label03:
        i0 = lengthof $r1;

        i0 = i0 + -1;

        $r3 = $r1[i0];

        d2 = virtualinvoke $r3.<org.apache.commons.math3.optimization.fitting.WeightedObservedPoint: double getX()>();

        $r3 = $r1[0];

        d8 = virtualinvoke $r3.<org.apache.commons.math3.optimization.fitting.WeightedObservedPoint: double getX()>();

        d2 = d2 - d8;

        $b2 = d2 cmpl 0.0;

        if $b2 != 0 goto label04;

        $r4 = new org.apache.commons.math3.exception.ZeroException;

        specialinvoke $r4.<org.apache.commons.math3.exception.ZeroException: void <init>()>();

        throw $r4;

     label04:
        d2 = 6.283185307179586 / d2;

        r2[1] = d2;

        d2 = #Infinity;

        d8 = #-Infinity;

        i0 = 1;

     label05:
        $i1 = lengthof $r1;

        if i0 >= $i1 goto label08;

        $r3 = $r1[i0];

        d9 = virtualinvoke $r3.<org.apache.commons.math3.optimization.fitting.WeightedObservedPoint: double getY()>();

        $b2 = d9 cmpg d2;

        if $b2 >= 0 goto label06;

        d2 = d9;

     label06:
        $b2 = d9 cmpl d8;

        if $b2 <= 0 goto label07;

        d8 = d9;

     label07:
        i0 = i0 + 1;

        goto label05;

     label08:
        d2 = d8 - d2;

        d2 = 0.5 * d2;

        r2[0] = d2;

        return r2;

     label09:
        $b2 = d1 cmpl 0.0;

        if $b2 != 0 goto label10;

        $r5 = new org.apache.commons.math3.exception.MathIllegalStateException;

        $r6 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats ZERO_DENOMINATOR>;

        $r7 = newarray (java.lang.Object)[0];

        specialinvoke $r5.<org.apache.commons.math3.exception.MathIllegalStateException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r6, $r7);

        throw $r5;

     label10:
        d8 = d0 / d1;

        d8 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d8);

        r2[0] = d8;

        d2 = d1 / d2;

        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d2);

        r2[1] = d2;

        return r2;
    }
    private double guessPhi(org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[])
    {
        org.apache.commons.math3.optimization.fitting.HarmonicFitter$ParameterGuesser r0;
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] $r1;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9;
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint $r2;
        int i0, $i1;

        r0 := @this: org.apache.commons.math3.optimization.fitting.HarmonicFitter$ParameterGuesser;

        $r1 := @parameter0: org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[];

        d2 = 0.0;

        d3 = 0.0;

        $r2 = $r1[0];

        $d4 = virtualinvoke $r2.<org.apache.commons.math3.optimization.fitting.WeightedObservedPoint: double getX()>();

        $r2 = $r1[0];

        $d5 = virtualinvoke $r2.<org.apache.commons.math3.optimization.fitting.WeightedObservedPoint: double getY()>();

        i0 = 1;

     label1:
        $i1 = lengthof $r1;

        if i0 >= $i1 goto label2;

        d0 = $d4;

        d1 = $d5;

        $r2 = $r1[i0];

        $d6 = virtualinvoke $r2.<org.apache.commons.math3.optimization.fitting.WeightedObservedPoint: double getX()>();

        $d4 = $d6;

        $r2 = $r1[i0];

        $d7 = virtualinvoke $r2.<org.apache.commons.math3.optimization.fitting.WeightedObservedPoint: double getY()>();

        $d5 = $d7;

        d1 = $d7 - d1;

        d0 = $d6 - d0;

        d0 = d1 / d0;

        d1 = r0.<org.apache.commons.math3.optimization.fitting.HarmonicFitter$ParameterGuesser: double omega>;

        d1 = d1 * $d6;

        $d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double cos(double)>(d1);

        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sin(double)>(d1);

        $d8 = r0.<org.apache.commons.math3.optimization.fitting.HarmonicFitter$ParameterGuesser: double omega>;

        $d8 = $d8 * $d7;

        $d8 = $d8 * $d6;

        $d9 = d0 * d1;

        $d8 = $d8 - $d9;

        d2 = d2 + $d8;

        $d8 = r0.<org.apache.commons.math3.optimization.fitting.HarmonicFitter$ParameterGuesser: double omega>;

        $d7 = $d8 * $d7;

        $d7 = $d7 * d1;

        d0 = d0 * $d6;

        $d7 = $d7 + d0;

        d3 = d3 + $d7;

        i0 = i0 + 1;

        goto label1;

     label2:
        d3 = neg d3;

        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>(d3, d2);

        return d2;
    }
    private org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] sortObservations(org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[])
    {
        org.apache.commons.math3.optimization.fitting.HarmonicFitter$ParameterGuesser r0;
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] $r1;
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint r2, r4;
        java.lang.Object $r3;
        int i0, $i1, $i3;
        double $d0, $d1;
        byte $b2;

        r0 := @this: org.apache.commons.math3.optimization.fitting.HarmonicFitter$ParameterGuesser;

        $r1 := @parameter0: org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[];

        $r3 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r1 = (org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[]) $r3;

        r4 = $r1[0];

        i0 = 1;

     label1:
        $i1 = lengthof $r1;

        if i0 >= $i1 goto label5;

        r2 = r4;

        r4 = $r1[i0];

        $d0 = virtualinvoke r4.<org.apache.commons.math3.optimization.fitting.WeightedObservedPoint: double getX()>();

        $d1 = virtualinvoke r2.<org.apache.commons.math3.optimization.fitting.WeightedObservedPoint: double getX()>();

        $b2 = $d0 cmpg $d1;

        if $b2 >= 0 goto label4;

        $i1 = i0 + -1;

        r2 = $r1[$i1];

     label2:
        if $i1 < 0 goto label3;

        $d0 = virtualinvoke r4.<org.apache.commons.math3.optimization.fitting.WeightedObservedPoint: double getX()>();

        $d1 = virtualinvoke r2.<org.apache.commons.math3.optimization.fitting.WeightedObservedPoint: double getX()>();

        $b2 = $d0 cmpg $d1;

        if $b2 >= 0 goto label3;

        $i3 = $i1 + 1;

        $r1[$i3] = r2;

        $i3 = $i1 + -1;

        if $i1 == 0 goto label6;

        r2 = $r1[$i3];

        $i1 = $i3;

        goto label2;

     label3:
        $i1 = $i1 + 1;

        $r1[$i1] = r4;

        r4 = $r1[i0];

     label4:
        i0 = i0 + 1;

        goto label1;

     label5:
        return $r1;

     label6:
        $i1 = $i3;

        goto label2;
    }
    public double[] guess()
    {
        org.apache.commons.math3.optimization.fitting.HarmonicFitter$ParameterGuesser r0;
        double[] $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.optimization.fitting.HarmonicFitter$ParameterGuesser;

        $r1 = newarray (double)[3];

        $d0 = r0.<org.apache.commons.math3.optimization.fitting.HarmonicFitter$ParameterGuesser: double a>;

        $r1[0] = $d0;

        $d0 = r0.<org.apache.commons.math3.optimization.fitting.HarmonicFitter$ParameterGuesser: double omega>;

        $r1[1] = $d0;

        $d0 = r0.<org.apache.commons.math3.optimization.fitting.HarmonicFitter$ParameterGuesser: double phi>;

        $r1[2] = $d0;

        return $r1;
    }
