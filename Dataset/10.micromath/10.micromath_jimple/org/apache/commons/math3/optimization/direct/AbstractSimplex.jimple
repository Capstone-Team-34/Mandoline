org.apache.commons.math3.optimization.direct.AbstractSimplex extends java.lang.Object implements org.apache.commons.math3.optimization.OptimizationData
private final int dimension
private org.apache.commons.math3.optimization.PointValuePair[] simplex
private double[][] startConfiguration
    protected void <init>(int)
    {
        org.apache.commons.math3.optimization.direct.AbstractSimplex r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.optimization.direct.AbstractSimplex;

        $i0 := @parameter0: int;

        specialinvoke r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: void <init>(int,double)>($i0, 1.0);

        return;
    }
    protected void <init>(int, double)
    {
        org.apache.commons.math3.optimization.direct.AbstractSimplex r0;
        int $i0;
        double $d0;
        double[] $r1;

        r0 := @this: org.apache.commons.math3.optimization.direct.AbstractSimplex;

        $i0 := @parameter0: int;

        $d0 := @parameter1: double;

        $r1 = staticinvoke <org.apache.commons.math3.optimization.direct.AbstractSimplex: double[] createHypercubeSteps(int,double)>($i0, $d0);

        specialinvoke r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: void <init>(double[])>($r1);

        return;
    }
    protected void <init>(double[])
    {
        org.apache.commons.math3.optimization.direct.AbstractSimplex r0;
        double[] $r1, r2;
        java.lang.Object[] $r3;
        org.apache.commons.math3.exception.NullArgumentException $r4;
        int $i0, $i1, $i2;
        org.apache.commons.math3.exception.ZeroException $r5;
        int[] $r6;
        java.lang.Class $r7;
        java.lang.Object $r8;
        double[][] $r9;
        double $d0;
        byte $b3;
        org.apache.commons.math3.exception.util.LocalizedFormats $r10;

        r0 := @this: org.apache.commons.math3.optimization.direct.AbstractSimplex;

        $r1 := @parameter0: double[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if $r1 != null goto label1;

        $r4 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r4.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r4;

     label1:
        $i0 = lengthof $r1;

        if $i0 != 0 goto label2;

        $r5 = new org.apache.commons.math3.exception.ZeroException;

        specialinvoke $r5.<org.apache.commons.math3.exception.ZeroException: void <init>()>();

        throw $r5;

     label2:
        $i0 = lengthof $r1;

        r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: int dimension> = $i0;

        $i0 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: int dimension>;

        $i1 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: int dimension>;

        $r6 = newarray (int)[2];

        $r6[0] = $i0;

        $r6[1] = $i1;

        $r7 = <java.lang.Double: java.lang.Class TYPE>;

        $r8 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r7, $r6);

        $r9 = (double[][]) $r8;

        r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: double[][] startConfiguration> = $r9;

        $i0 = 0;

     label3:
        $i1 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: int dimension>;

        if $i0 >= $i1 goto label7;

        $r9 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: double[][] startConfiguration>;

        r2 = $r9[$i0];

        $i1 = 0;

     label4:
        $i2 = $i0 + 1;

        if $i1 >= $i2 goto label6;

        $d0 = $r1[$i1];

        $b3 = $d0 cmpl 0.0;

        if $b3 != 0 goto label5;

        $r5 = new org.apache.commons.math3.exception.ZeroException;

        $r10 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats EQUAL_VERTICES_IN_SIMPLEX>;

        $r3 = newarray (java.lang.Object)[0];

        specialinvoke $r5.<org.apache.commons.math3.exception.ZeroException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r10, $r3);

        throw $r5;

     label5:
        $i2 = $i1 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, r2, 0, $i2);

        $i1 = $i1 + 1;

        goto label4;

     label6:
        $i0 = $i0 + 1;

        goto label3;

     label7:
        return;
    }
    protected void <init>(double[][])
    {
        org.apache.commons.math3.optimization.direct.AbstractSimplex r0;
        double[][] $r1, $r11;
        double[] r2, r3, r4;
        int $i0, $i1, $i2, $i3;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r5;
        org.apache.commons.math3.exception.util.LocalizedFormats $r6;
        java.lang.Integer $r7;
        int[] $r8;
        java.lang.Class $r9;
        java.lang.Object $r10;
        org.apache.commons.math3.exception.DimensionMismatchException $r12;
        boolean z0;
        double $d0, $d1;
        byte $b4;
        org.apache.commons.math3.exception.MathIllegalArgumentException $r13;
        java.lang.Object[] $r14;

        r0 := @this: org.apache.commons.math3.optimization.direct.AbstractSimplex;

        $r1 := @parameter0: double[][];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = lengthof $r1;

        if $i0 > 0 goto label01;

        $r5 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r6 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats SIMPLEX_NEED_ONE_POINT>;

        $i0 = lengthof $r1;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r5.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r6, $r7);

        throw $r5;

     label01:
        $i0 = lengthof $r1;

        $i0 = $i0 + -1;

        r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: int dimension> = $i0;

        $i0 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: int dimension>;

        $i1 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: int dimension>;

        $r8 = newarray (int)[2];

        $r8[0] = $i0;

        $r8[1] = $i1;

        $r9 = <java.lang.Double: java.lang.Class TYPE>;

        $r10 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r9, $r8);

        $r11 = (double[][]) $r10;

        r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: double[][] startConfiguration> = $r11;

        r3 = $r1[0];

        $i0 = 0;

     label02:
        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label12;

        r4 = $r1[$i0];

        $i1 = lengthof r4;

        $i2 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: int dimension>;

        if $i1 == $i2 goto label03;

        $r12 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i0 = lengthof r4;

        $i1 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: int dimension>;

        specialinvoke $r12.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i0, $i1);

        throw $r12;

     label03:
        $i1 = 0;

     label04:
        if $i1 >= $i0 goto label09;

        r2 = $r1[$i1];

        z0 = 1;

        $i2 = 0;

     label05:
        $i3 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: int dimension>;

        if $i2 >= $i3 goto label06;

        $d0 = r4[$i2];

        $d1 = r2[$i2];

        $b4 = $d0 cmpl $d1;

        if $b4 == 0 goto label07;

        z0 = 0;

     label06:
        if z0 == 0 goto label08;

        $r13 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r6 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats EQUAL_VERTICES_IN_SIMPLEX>;

        $r14 = newarray (java.lang.Object)[2];

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r14[0] = $r7;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r14[1] = $r7;

        specialinvoke $r13.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r6, $r14);

        throw $r13;

     label07:
        $i2 = $i2 + 1;

        goto label05;

     label08:
        $i1 = $i1 + 1;

        goto label04;

     label09:
        if $i0 <= 0 goto label11;

        $r11 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: double[][] startConfiguration>;

        $i1 = $i0 + -1;

        r2 = $r11[$i1];

        $i1 = 0;

     label10:
        $i2 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: int dimension>;

        if $i1 >= $i2 goto label11;

        $d0 = r4[$i1];

        $d1 = r3[$i1];

        $d0 = $d0 - $d1;

        r2[$i1] = $d0;

        $i1 = $i1 + 1;

        goto label10;

     label11:
        $i0 = $i0 + 1;

        goto label02;

     label12:
        return;
    }
    private static double[] createHypercubeSteps(int, double)
    {
        int $i0, i1;
        double $d0;
        double[] r0;

        $i0 := @parameter0: int;

        $d0 := @parameter1: double;

        r0 = newarray (double)[$i0];

        i1 = 0;

     label1:
        if i1 >= $i0 goto label2;

        r0[i1] = $d0;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r0;
    }
    public void build(double[])
    {
        org.apache.commons.math3.optimization.direct.AbstractSimplex r0;
        double[] $r1, r2, r3;
        int $i0, $i1, $i2;
        org.apache.commons.math3.exception.DimensionMismatchException $r4;
        org.apache.commons.math3.optimization.PointValuePair[] $r5;
        org.apache.commons.math3.optimization.PointValuePair $r6;
        double[][] $r7;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.optimization.direct.AbstractSimplex;

        $r1 := @parameter0: double[];

        $i0 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: int dimension>;

        $i1 = lengthof $r1;

        if $i0 == $i1 goto label1;

        $r4 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i0 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: int dimension>;

        $i1 = lengthof $r1;

        specialinvoke $r4.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i0, $i1);

        throw $r4;

     label1:
        $i0 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: int dimension>;

        $i0 = $i0 + 1;

        $r5 = newarray (org.apache.commons.math3.optimization.PointValuePair)[$i0];

        r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: org.apache.commons.math3.optimization.PointValuePair[] simplex> = $r5;

        $r5 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: org.apache.commons.math3.optimization.PointValuePair[] simplex>;

        $r6 = new org.apache.commons.math3.optimization.PointValuePair;

        specialinvoke $r6.<org.apache.commons.math3.optimization.PointValuePair: void <init>(double[],double)>($r1, #NaN);

        $r5[0] = $r6;

        $i0 = 0;

     label2:
        $i1 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: int dimension>;

        if $i0 >= $i1 goto label5;

        $r7 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: double[][] startConfiguration>;

        r2 = $r7[$i0];

        $i1 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: int dimension>;

        r3 = newarray (double)[$i1];

        $i1 = 0;

     label3:
        $i2 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: int dimension>;

        if $i1 >= $i2 goto label4;

        $d0 = $r1[$i1];

        $d1 = r2[$i1];

        $d0 = $d0 + $d1;

        r3[$i1] = $d0;

        $i1 = $i1 + 1;

        goto label3;

     label4:
        $r5 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: org.apache.commons.math3.optimization.PointValuePair[] simplex>;

        $i1 = $i0 + 1;

        $r6 = new org.apache.commons.math3.optimization.PointValuePair;

        specialinvoke $r6.<org.apache.commons.math3.optimization.PointValuePair: void <init>(double[],double)>(r3, #NaN);

        $r5[$i1] = $r6;

        $i0 = $i0 + 1;

        goto label2;

     label5:
        return;
    }
    public void evaluate(org.apache.commons.math3.analysis.MultivariateFunction, java.util.Comparator)
    {
        org.apache.commons.math3.optimization.direct.AbstractSimplex r0;
        org.apache.commons.math3.analysis.MultivariateFunction $r1;
        java.util.Comparator r2;
        org.apache.commons.math3.optimization.PointValuePair r3;
        int i0, $i1;
        org.apache.commons.math3.optimization.PointValuePair[] $r4;
        double[] $r5;
        java.lang.Object $r6;
        java.lang.Double $r7;
        double $d0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.optimization.direct.AbstractSimplex;

        $r1 := @parameter0: org.apache.commons.math3.analysis.MultivariateFunction;

        r2 := @parameter1: java.util.Comparator;

        i0 = 0;

     label1:
        $r4 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: org.apache.commons.math3.optimization.PointValuePair[] simplex>;

        $i1 = lengthof $r4;

        if i0 >= $i1 goto label3;

        $r4 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: org.apache.commons.math3.optimization.PointValuePair[] simplex>;

        r3 = $r4[i0];

        $r5 = virtualinvoke r3.<org.apache.commons.math3.optimization.PointValuePair: double[] getPointRef()>();

        $r6 = virtualinvoke r3.<org.apache.commons.math3.optimization.PointValuePair: java.lang.Object getValue()>();

        $r7 = (java.lang.Double) $r6;

        $d0 = virtualinvoke $r7.<java.lang.Double: double doubleValue()>();

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 == 0 goto label2;

        $r4 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: org.apache.commons.math3.optimization.PointValuePair[] simplex>;

        r3 = new org.apache.commons.math3.optimization.PointValuePair;

        $d0 = interfaceinvoke $r1.<org.apache.commons.math3.analysis.MultivariateFunction: double value(double[])>($r5);

        specialinvoke r3.<org.apache.commons.math3.optimization.PointValuePair: void <init>(double[],double,boolean)>($r5, $d0, 0);

        $r4[i0] = r3;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        $r4 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: org.apache.commons.math3.optimization.PointValuePair[] simplex>;

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>($r4, r2);

        return;
    }
    public int getDimension()
    {
        org.apache.commons.math3.optimization.direct.AbstractSimplex r0;
        int i0;

        r0 := @this: org.apache.commons.math3.optimization.direct.AbstractSimplex;

        i0 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: int dimension>;

        return i0;
    }
    public org.apache.commons.math3.optimization.PointValuePair getPoint(int)
    {
        org.apache.commons.math3.optimization.direct.AbstractSimplex r0;
        int $i0, $i1;
        org.apache.commons.math3.optimization.PointValuePair[] $r1;
        org.apache.commons.math3.exception.OutOfRangeException $r2;
        java.lang.Integer $r3, $r4, $r5;
        org.apache.commons.math3.optimization.PointValuePair $r6;

        r0 := @this: org.apache.commons.math3.optimization.direct.AbstractSimplex;

        $i0 := @parameter0: int;

        if $i0 < 0 goto label1;

        $r1 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: org.apache.commons.math3.optimization.PointValuePair[] simplex>;

        $i1 = lengthof $r1;

        if $i0 < $i1 goto label2;

     label1:
        $r2 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r1 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: org.apache.commons.math3.optimization.PointValuePair[] simplex>;

        $i0 = lengthof $r1;

        $i0 = $i0 + -1;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r2.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r3, $r4, $r5);

        throw $r2;

     label2:
        $r1 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: org.apache.commons.math3.optimization.PointValuePair[] simplex>;

        $r6 = $r1[$i0];

        return $r6;
    }
    public org.apache.commons.math3.optimization.PointValuePair[] getPoints()
    {
        org.apache.commons.math3.optimization.direct.AbstractSimplex r0;
        org.apache.commons.math3.optimization.PointValuePair[] r1, $r2, $r3;
        int $i0;

        r0 := @this: org.apache.commons.math3.optimization.direct.AbstractSimplex;

        r1 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: org.apache.commons.math3.optimization.PointValuePair[] simplex>;

        $i0 = lengthof r1;

        r1 = newarray (org.apache.commons.math3.optimization.PointValuePair)[$i0];

        $r2 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: org.apache.commons.math3.optimization.PointValuePair[] simplex>;

        $r3 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: org.apache.commons.math3.optimization.PointValuePair[] simplex>;

        $i0 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, 0, $i0);

        return r1;
    }
    public int getSize()
    {
        org.apache.commons.math3.optimization.direct.AbstractSimplex r0;
        org.apache.commons.math3.optimization.PointValuePair[] $r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.optimization.direct.AbstractSimplex;

        $r1 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: org.apache.commons.math3.optimization.PointValuePair[] simplex>;

        $i0 = lengthof $r1;

        return $i0;
    }
public abstract void iterate(org.apache.commons.math3.analysis.MultivariateFunction, java.util.Comparator) { 
// no body
} 
    protected void replaceWorstPoint(org.apache.commons.math3.optimization.PointValuePair, java.util.Comparator)
    {
        org.apache.commons.math3.optimization.direct.AbstractSimplex r0;
        java.util.Comparator r1;
        org.apache.commons.math3.optimization.PointValuePair r2, $r3;
        int $i0, $i1;
        org.apache.commons.math3.optimization.PointValuePair[] $r4;

        r0 := @this: org.apache.commons.math3.optimization.direct.AbstractSimplex;

        $r3 := @parameter0: org.apache.commons.math3.optimization.PointValuePair;

        r1 := @parameter1: java.util.Comparator;

        $i0 = 0;

     label1:
        $i1 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: int dimension>;

        if $i0 >= $i1 goto label3;

        $r4 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: org.apache.commons.math3.optimization.PointValuePair[] simplex>;

        r2 = $r4[$i0];

        $i1 = interfaceinvoke r1.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r2, $r3);

        if $i1 <= 0 goto label2;

        $r4 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: org.apache.commons.math3.optimization.PointValuePair[] simplex>;

        r2 = $r4[$i0];

        $r4 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: org.apache.commons.math3.optimization.PointValuePair[] simplex>;

        $r4[$i0] = $r3;

        $r3 = r2;

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        $r4 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: org.apache.commons.math3.optimization.PointValuePair[] simplex>;

        $i0 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: int dimension>;

        $r4[$i0] = $r3;

        return;
    }
    protected void setPoint(int, org.apache.commons.math3.optimization.PointValuePair)
    {
        org.apache.commons.math3.optimization.direct.AbstractSimplex r0;
        int $i0, $i1;
        org.apache.commons.math3.optimization.PointValuePair $r1;
        org.apache.commons.math3.optimization.PointValuePair[] $r2;
        org.apache.commons.math3.exception.OutOfRangeException $r3;
        java.lang.Integer $r4, $r5, $r6;

        r0 := @this: org.apache.commons.math3.optimization.direct.AbstractSimplex;

        $i0 := @parameter0: int;

        $r1 := @parameter1: org.apache.commons.math3.optimization.PointValuePair;

        if $i0 < 0 goto label1;

        $r2 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: org.apache.commons.math3.optimization.PointValuePair[] simplex>;

        $i1 = lengthof $r2;

        if $i0 < $i1 goto label2;

     label1:
        $r3 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r2 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: org.apache.commons.math3.optimization.PointValuePair[] simplex>;

        $i0 = lengthof $r2;

        $i0 = $i0 + -1;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r3.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r4, $r5, $r6);

        throw $r3;

     label2:
        $r2 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: org.apache.commons.math3.optimization.PointValuePair[] simplex>;

        $r2[$i0] = $r1;

        return;
    }
    protected void setPoints(org.apache.commons.math3.optimization.PointValuePair[])
    {
        org.apache.commons.math3.optimization.direct.AbstractSimplex r0;
        org.apache.commons.math3.optimization.PointValuePair[] $r1, $r2;
        int $i0, $i1;
        org.apache.commons.math3.exception.DimensionMismatchException $r3;

        r0 := @this: org.apache.commons.math3.optimization.direct.AbstractSimplex;

        $r1 := @parameter0: org.apache.commons.math3.optimization.PointValuePair[];

        $i0 = lengthof $r1;

        $r2 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: org.apache.commons.math3.optimization.PointValuePair[] simplex>;

        $i1 = lengthof $r2;

        if $i0 == $i1 goto label1;

        $r3 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i0 = lengthof $r1;

        $r1 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: org.apache.commons.math3.optimization.PointValuePair[] simplex>;

        $i1 = lengthof $r1;

        specialinvoke $r3.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i0, $i1);

        throw $r3;

     label1:
        r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: org.apache.commons.math3.optimization.PointValuePair[] simplex> = $r1;

        return;
    }
