org.apache.commons.math3.optimization.univariate.BrentOptimizer extends org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer
private static final double GOLDEN_SECTION
private static final double MIN_RELATIVE_TOLERANCE
private final double absoluteThreshold
private final double relativeThreshold
    static void <clinit>()
    {
        double $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(5.0);

        $d0 = 3.0 - $d0;

        $d0 = 0.5 * $d0;

        <org.apache.commons.math3.optimization.univariate.BrentOptimizer: double GOLDEN_SECTION> = $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double ulp(double)>(1.0);

        $d0 = 2.0 * $d0;

        <org.apache.commons.math3.optimization.univariate.BrentOptimizer: double MIN_RELATIVE_TOLERANCE> = $d0;

        return;
    }
    public void <init>(double, double)
    {
        org.apache.commons.math3.optimization.univariate.BrentOptimizer r0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.optimization.univariate.BrentOptimizer;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.optimization.univariate.BrentOptimizer: void <init>(double,double,org.apache.commons.math3.optimization.ConvergenceChecker)>($d0, $d1, null);

        return;
    }
    public void <init>(double, double, org.apache.commons.math3.optimization.ConvergenceChecker)
    {
        org.apache.commons.math3.optimization.univariate.BrentOptimizer r0;
        double $d0, $d1, $d2;
        org.apache.commons.math3.optimization.ConvergenceChecker r1;
        byte $b0;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r2;
        java.lang.Double $r3, $r4;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r5;

        r0 := @this: org.apache.commons.math3.optimization.univariate.BrentOptimizer;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        r1 := @parameter2: org.apache.commons.math3.optimization.ConvergenceChecker;

        specialinvoke r0.<org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer: void <init>(org.apache.commons.math3.optimization.ConvergenceChecker)>(r1);

        $d2 = <org.apache.commons.math3.optimization.univariate.BrentOptimizer: double MIN_RELATIVE_TOLERANCE>;

        $b0 = $d0 cmpg $d2;

        if $b0 >= 0 goto label1;

        $r2 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $d0 = <org.apache.commons.math3.optimization.univariate.BrentOptimizer: double MIN_RELATIVE_TOLERANCE>;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        specialinvoke $r2.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r3, $r4, 1);

        throw $r2;

     label1:
        $b0 = $d1 cmpg 0.0;

        if $b0 > 0 goto label2;

        $r5 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        specialinvoke $r5.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(java.lang.Number)>($r3);

        throw $r5;

     label2:
        r0.<org.apache.commons.math3.optimization.univariate.BrentOptimizer: double relativeThreshold> = $d0;

        r0.<org.apache.commons.math3.optimization.univariate.BrentOptimizer: double absoluteThreshold> = $d1;

        return;
    }
    private org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair best(org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, boolean)
    {
        org.apache.commons.math3.optimization.univariate.BrentOptimizer r0;
        org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair $r1, r2;
        boolean $z0;
        double $d0, $d1;
        byte $b0;

        r0 := @this: org.apache.commons.math3.optimization.univariate.BrentOptimizer;

        r2 := @parameter0: org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair;

        $r1 := @parameter1: org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair;

        $z0 := @parameter2: boolean;

        if r2 != null goto label1;

        return $r1;

     label1:
        if $r1 == null goto label3;

        if $z0 == 0 goto label2;

        $d0 = virtualinvoke r2.<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair: double getValue()>();

        $d1 = virtualinvoke $r1.<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair: double getValue()>();

        $b0 = $d0 cmpg $d1;

        if $b0 <= 0 goto label3;

        return $r1;

     label2:
        $d0 = virtualinvoke r2.<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair: double getValue()>();

        $d1 = virtualinvoke $r1.<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair: double getValue()>();

        $b0 = $d0 cmpl $d1;

        if $b0 >= 0 goto label3;

        return $r1;

     label3:
        return r2;
    }
    protected org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair doOptimize()
    {
        org.apache.commons.math3.optimization.univariate.BrentOptimizer r0;
        double d0, d1, d2, $d3, $d4, $d5, d6, d7, d8, d9, d10, $d11, d12, d13, $d14, $d15, $d16;
        org.apache.commons.math3.optimization.GoalType $r1, $r2;
        boolean z0, z1;
        org.apache.commons.math3.optimization.ConvergenceChecker $r3;
        byte $b0;
        org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair r4, r5, r6, $r7;
        int i1;

        r0 := @this: org.apache.commons.math3.optimization.univariate.BrentOptimizer;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.optimization.univariate.BrentOptimizer: org.apache.commons.math3.optimization.GoalType getGoalType()>();

        $r2 = <org.apache.commons.math3.optimization.GoalType: org.apache.commons.math3.optimization.GoalType MINIMIZE>;

        if $r1 != $r2 goto label13;

        z0 = 1;

     label01:
        $d4 = virtualinvoke r0.<org.apache.commons.math3.optimization.univariate.BrentOptimizer: double getMin()>();

        d0 = virtualinvoke r0.<org.apache.commons.math3.optimization.univariate.BrentOptimizer: double getStartValue()>();

        $d5 = virtualinvoke r0.<org.apache.commons.math3.optimization.univariate.BrentOptimizer: double getMax()>();

        $r3 = virtualinvoke r0.<org.apache.commons.math3.optimization.univariate.BrentOptimizer: org.apache.commons.math3.optimization.ConvergenceChecker getConvergenceChecker()>();

        $b0 = $d4 cmpg $d5;

        if $b0 >= 0 goto label14;

        d6 = $d4;

        $d4 = $d5;

     label02:
        $d5 = d0;

        d7 = d0;

        d8 = d0;

        d9 = 0.0;

        d10 = 0.0;

        $d11 = virtualinvoke r0.<org.apache.commons.math3.optimization.univariate.BrentOptimizer: double computeObjectiveValue(double)>(d0);

        d12 = $d11;

        if z0 != 0 goto label03;

        d12 = neg $d11;

     label03:
        $d11 = d12;

        d13 = d12;

        r4 = null;

        r5 = new org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair;

        if z0 == 0 goto label15;

        d1 = d12;

     label04:
        specialinvoke r5.<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair: void <init>(double,double)>(d0, d1);

        r6 = r5;

        i1 = 0;

     label05:
        d0 = d6 + $d4;

        d0 = 0.5 * d0;

        d1 = r0.<org.apache.commons.math3.optimization.univariate.BrentOptimizer: double relativeThreshold>;

        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d5);

        d1 = d1 * d2;

        d2 = r0.<org.apache.commons.math3.optimization.univariate.BrentOptimizer: double absoluteThreshold>;

        d1 = d1 + d2;

        d2 = 2.0 * d1;

        $d14 = $d5 - d0;

        $d14 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d14);

        $d3 = $d4 - d6;

        $d3 = 0.5 * $d3;

        $d3 = d2 - $d3;

        $b0 = $d14 cmpg $d3;

        if $b0 > 0 goto label16;

        z1 = 1;

     label06:
        if z1 != 0 goto label38;

        $d14 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d10);

        $b0 = $d14 cmpl d1;

        if $b0 <= 0 goto label22;

        $d14 = $d5 - d8;

        $d3 = d12 - $d11;

        $d3 = $d14 * $d3;

        $d14 = $d5 - d7;

        $d15 = d12 - d13;

        $d15 = $d14 * $d15;

        $d14 = $d5 - d7;

        $d14 = $d14 * $d15;

        $d16 = $d5 - d8;

        $d16 = $d16 * $d3;

        $d14 = $d14 - $d16;

        $d3 = $d15 - $d3;

        $d3 = 2.0 * $d3;

        $b0 = $d3 cmpl 0.0;

        if $b0 <= 0 goto label17;

        $d14 = neg $d14;

     label07:
        $d15 = d10;

        d10 = d9;

        d9 = d6 - $d5;

        d9 = d9 * $d3;

        $b0 = $d14 cmpl d9;

        if $b0 <= 0 goto label19;

        d9 = $d4 - $d5;

        d9 = d9 * $d3;

        $b0 = $d14 cmpg d9;

        if $b0 >= 0 goto label19;

        d9 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d14);

        $d16 = 0.5 * $d3;

        $d15 = $d16 * $d15;

        $d15 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d15);

        $b0 = d9 cmpg $d15;

        if $b0 >= 0 goto label19;

        d9 = $d14 / $d3;

        $d14 = $d5 + d9;

        $d3 = $d14 - d6;

        $b0 = $d3 cmpg d2;

        if $b0 < 0 goto label08;

        $d14 = $d4 - $d14;

        $b0 = $d14 cmpg d2;

        if $b0 >= 0 goto label09;

     label08:
        $b0 = $d5 cmpg d0;

        if $b0 > 0 goto label18;

        d9 = d1;

     label09:
        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d9);

        $b0 = d0 cmpg d1;

        if $b0 >= 0 goto label26;

        $b0 = d9 cmpl 0.0;

        if $b0 < 0 goto label25;

        d0 = $d5 + d1;

     label10:
        d2 = virtualinvoke r0.<org.apache.commons.math3.optimization.univariate.BrentOptimizer: double computeObjectiveValue(double)>(d0);

        d1 = d2;

        if z0 != 0 goto label11;

        d1 = neg d2;

     label11:
        r4 = r5;

        r5 = new org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair;

        if z0 == 0 goto label27;

        d2 = d1;

     label12:
        specialinvoke r5.<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair: void <init>(double,double)>(d0, d2);

        $r7 = specialinvoke r0.<org.apache.commons.math3.optimization.univariate.BrentOptimizer: org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair best(org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair,org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair,boolean)>(r4, r5, z0);

        $r7 = specialinvoke r0.<org.apache.commons.math3.optimization.univariate.BrentOptimizer: org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair best(org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair,org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair,boolean)>(r6, $r7, z0);

        r6 = $r7;

        if $r3 == null goto label28;

        z1 = interfaceinvoke $r3.<org.apache.commons.math3.optimization.ConvergenceChecker: boolean converged(int,java.lang.Object,java.lang.Object)>(i1, r4, r5);

        if z1 == 0 goto label28;

        return $r7;

     label13:
        z0 = 0;

        goto label01;

     label14:
        d6 = $d5;

        goto label02;

     label15:
        d1 = neg d12;

        goto label04;

     label16:
        z1 = 0;

        goto label06;

     label17:
        $d3 = neg $d3;

        goto label07;

     label18:
        d9 = neg d1;

        goto label09;

     label19:
        $b0 = $d5 cmpg d0;

        if $b0 >= 0 goto label21;

        d10 = $d4 - $d5;

     label20:
        d9 = <org.apache.commons.math3.optimization.univariate.BrentOptimizer: double GOLDEN_SECTION>;

        d9 = d9 * d10;

        goto label09;

     label21:
        d10 = d6 - $d5;

        goto label20;

     label22:
        $b0 = $d5 cmpg d0;

        if $b0 >= 0 goto label24;

        d10 = $d4 - $d5;

     label23:
        d9 = <org.apache.commons.math3.optimization.univariate.BrentOptimizer: double GOLDEN_SECTION>;

        d9 = d9 * d10;

        goto label09;

     label24:
        d10 = d6 - $d5;

        goto label23;

     label25:
        d0 = $d5 - d1;

        goto label10;

     label26:
        d0 = $d5 + d9;

        goto label10;

     label27:
        d2 = neg d1;

        goto label12;

     label28:
        $b0 = d1 cmpg d12;

        if $b0 > 0 goto label32;

        $b0 = d0 cmpg $d5;

        if $b0 >= 0 goto label31;

        $d4 = $d5;

     label29:
        d7 = d8;

        $d11 = d13;

        d8 = $d5;

        d13 = d12;

        $d5 = d0;

        d12 = d1;

     label30:
        i1 = i1 + 1;

        goto label05;

     label31:
        d6 = $d5;

        goto label29;

     label32:
        $b0 = d0 cmpg $d5;

        if $b0 >= 0 goto label35;

        d6 = d0;

     label33:
        $b0 = d1 cmpg d13;

        if $b0 <= 0 goto label34;

        z1 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double)>(d8, $d5);

        if z1 == 0 goto label36;

     label34:
        d7 = d8;

        $d11 = d13;

        d8 = d0;

        d13 = d1;

        goto label30;

     label35:
        $d4 = d0;

        goto label33;

     label36:
        $b0 = d1 cmpg $d11;

        if $b0 <= 0 goto label37;

        z1 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double)>(d7, $d5);

        if z1 != 0 goto label37;

        z1 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double)>(d7, d8);

        if z1 == 0 goto label30;

     label37:
        d7 = d0;

        $d11 = d1;

        goto label30;

     label38:
        r4 = specialinvoke r0.<org.apache.commons.math3.optimization.univariate.BrentOptimizer: org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair best(org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair,org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair,boolean)>(r4, r5, z0);

        r6 = specialinvoke r0.<org.apache.commons.math3.optimization.univariate.BrentOptimizer: org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair best(org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair,org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair,boolean)>(r6, r4, z0);

        return r6;
    }
