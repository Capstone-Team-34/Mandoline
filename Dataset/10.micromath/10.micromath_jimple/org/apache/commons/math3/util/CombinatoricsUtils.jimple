org.apache.commons.math3.util.CombinatoricsUtils extends java.lang.Object
static final long[] FACTORIALS
static final java.util.concurrent.atomic.AtomicReference STIRLING_S2
    static void <clinit>()
    {
        long[] $r0;
        java.util.concurrent.atomic.AtomicReference $r1;

        $r0 = newarray (long)[21];

        $r0[0] = 1L;

        $r0[1] = 1L;

        $r0[2] = 2L;

        $r0[3] = 6L;

        $r0[4] = 24L;

        $r0[5] = 120L;

        $r0[6] = 720L;

        $r0[7] = 5040L;

        $r0[8] = 40320L;

        $r0[9] = 362880L;

        $r0[10] = 3628800L;

        $r0[11] = 39916800L;

        $r0[12] = 479001600L;

        $r0[13] = 6227020800L;

        $r0[14] = 87178291200L;

        $r0[15] = 1307674368000L;

        $r0[16] = 20922789888000L;

        $r0[17] = 355687428096000L;

        $r0[18] = 6402373705728000L;

        $r0[19] = 121645100408832000L;

        $r0[20] = 2432902008176640000L;

        <org.apache.commons.math3.util.CombinatoricsUtils: long[] FACTORIALS> = $r0;

        $r1 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>(null);

        <org.apache.commons.math3.util.CombinatoricsUtils: java.util.concurrent.atomic.AtomicReference STIRLING_S2> = $r1;

        return;
    }
    private void <init>()
    {
        org.apache.commons.math3.util.CombinatoricsUtils r0;

        r0 := @this: org.apache.commons.math3.util.CombinatoricsUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static long binomialCoefficient(int, int) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.exception.MathArithmeticException
    {
        int $i0, $i1, $i2, $i5;
        long l3, $l4, $l6;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        staticinvoke <org.apache.commons.math3.util.CombinatoricsUtils: void checkBinomial(int,int)>($i0, $i1);

        if $i0 == $i1 goto label01;

        if $i1 != 0 goto label02;

     label01:
        return 1L;

     label02:
        if $i1 == 1 goto label03;

        $i2 = $i0 + -1;

        if $i1 != $i2 goto label04;

     label03:
        l3 = (long) $i0;

        return l3;

     label04:
        $i2 = $i0 / 2;

        if $i1 <= $i2 goto label05;

        $i1 = $i0 - $i1;

        l3 = staticinvoke <org.apache.commons.math3.util.CombinatoricsUtils: long binomialCoefficient(int,int)>($i0, $i1);

        return l3;

     label05:
        l3 = 1L;

        if $i0 > 61 goto label07;

        $i0 = $i0 - $i1;

        $i0 = $i0 + 1;

        $i2 = 1;

     label06:
        if $i2 > $i1 goto label11;

        $l4 = (long) $i0;

        l3 = $l4 * l3;

        $l4 = (long) $i2;

        l3 = l3 / $l4;

        $i0 = $i0 + 1;

        $i2 = $i2 + 1;

        goto label06;

     label07:
        if $i0 > 66 goto label09;

        $i0 = $i0 - $i1;

        $i0 = $i0 + 1;

        $i2 = 1;

     label08:
        if $i2 > $i1 goto label11;

        $i5 = staticinvoke <org.apache.commons.math3.util.ArithmeticUtils: int gcd(int,int)>($i0, $i2);

        $l4 = (long) $i5;

        $l6 = (long) $i2;

        $l6 = $l6 / $l4;

        l3 = l3 / $l6;

        $l6 = (long) $i0;

        $l4 = $l6 / $l4;

        l3 = l3 * $l4;

        $i0 = $i0 + 1;

        $i2 = $i2 + 1;

        goto label08;

     label09:
        $i0 = $i0 - $i1;

        $i0 = $i0 + 1;

        $i2 = 1;

     label10:
        if $i2 > $i1 goto label11;

        $i5 = staticinvoke <org.apache.commons.math3.util.ArithmeticUtils: int gcd(int,int)>($i0, $i2);

        $l4 = (long) $i5;

        $l6 = (long) $i2;

        $l6 = $l6 / $l4;

        l3 = l3 / $l6;

        $l6 = (long) $i0;

        $l4 = $l6 / $l4;

        l3 = staticinvoke <org.apache.commons.math3.util.ArithmeticUtils: long mulAndCheck(long,long)>(l3, $l4);

        $i0 = $i0 + 1;

        $i2 = $i2 + 1;

        goto label10;

     label11:
        return l3;
    }
    public static double binomialCoefficientDouble(int, int) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.exception.MathArithmeticException
    {
        int $i0, $i1, $i2, $i4;
        double $d0, $d1, $d2;
        long $l3;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        staticinvoke <org.apache.commons.math3.util.CombinatoricsUtils: void checkBinomial(int,int)>($i0, $i1);

        if $i0 == $i1 goto label1;

        if $i1 != 0 goto label2;

     label1:
        return 1.0;

     label2:
        if $i1 == 1 goto label3;

        $i2 = $i0 + -1;

        if $i1 != $i2 goto label4;

     label3:
        $d1 = (double) $i0;

        return $d1;

     label4:
        $i2 = $i0 / 2;

        if $i1 <= $i2 goto label5;

        $i1 = $i0 - $i1;

        $d1 = staticinvoke <org.apache.commons.math3.util.CombinatoricsUtils: double binomialCoefficientDouble(int,int)>($i0, $i1);

        return $d1;

     label5:
        if $i0 >= 67 goto label6;

        $l3 = staticinvoke <org.apache.commons.math3.util.CombinatoricsUtils: long binomialCoefficient(int,int)>($i0, $i1);

        $d1 = (double) $l3;

        return $d1;

     label6:
        $d1 = 1.0;

        $i2 = 1;

     label7:
        if $i2 > $i1 goto label8;

        $i4 = $i0 - $i1;

        $i4 = $i4 + $i2;

        $d2 = (double) $i4;

        $d0 = (double) $i2;

        $d0 = $d2 / $d0;

        $d1 = $d1 * $d0;

        $i2 = $i2 + 1;

        goto label7;

     label8:
        $d1 = 0.5 + $d1;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double floor(double)>($d1);

        return $d1;
    }
    public static double binomialCoefficientLog(int, int) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.exception.MathArithmeticException
    {
        int $i0, $i1, $i2;
        double $d0, $d1;
        long $l3;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        staticinvoke <org.apache.commons.math3.util.CombinatoricsUtils: void checkBinomial(int,int)>($i0, $i1);

        if $i0 == $i1 goto label01;

        if $i1 != 0 goto label02;

     label01:
        return 0.0;

     label02:
        if $i1 == 1 goto label03;

        $i2 = $i0 + -1;

        if $i1 != $i2 goto label04;

     label03:
        $d0 = (double) $i0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d0);

        return $d0;

     label04:
        if $i0 >= 67 goto label05;

        $l3 = staticinvoke <org.apache.commons.math3.util.CombinatoricsUtils: long binomialCoefficient(int,int)>($i0, $i1);

        $d0 = (double) $l3;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d0);

        return $d0;

     label05:
        if $i0 >= 1030 goto label06;

        $d0 = staticinvoke <org.apache.commons.math3.util.CombinatoricsUtils: double binomialCoefficientDouble(int,int)>($i0, $i1);

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d0);

        return $d0;

     label06:
        $i2 = $i0 / 2;

        if $i1 <= $i2 goto label07;

        $i1 = $i0 - $i1;

        $d0 = staticinvoke <org.apache.commons.math3.util.CombinatoricsUtils: double binomialCoefficientLog(int,int)>($i0, $i1);

        return $d0;

     label07:
        $d0 = 0.0;

        $i2 = $i0 - $i1;

        $i2 = $i2 + 1;

     label08:
        if $i2 > $i0 goto label09;

        $d1 = (double) $i2;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d1);

        $d0 = $d0 + $d1;

        $i2 = $i2 + 1;

        goto label08;

     label09:
        $i0 = 2;

     label10:
        if $i0 > $i1 goto label11;

        $d1 = (double) $i0;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d1);

        $d0 = $d0 - $d1;

        $i0 = $i0 + 1;

        goto label10;

     label11:
        return $d0;
    }
    public static void checkBinomial(int, int) throws org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.exception.NotPositiveException
    {
        int $i0, $i1;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r0;
        org.apache.commons.math3.exception.util.LocalizedFormats $r1;
        java.lang.Integer $r2, $r3;
        org.apache.commons.math3.exception.NotPositiveException $r4;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        if $i0 >= $i1 goto label1;

        $r0 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r1 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats BINOMIAL_INVALID_PARAMETERS_ORDER>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r0.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r1, $r2, $r3, 1);

        throw $r0;

     label1:
        if $i0 >= 0 goto label2;

        $r4 = new org.apache.commons.math3.exception.NotPositiveException;

        $r1 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats BINOMIAL_NEGATIVE_PARAMETER>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r4.<org.apache.commons.math3.exception.NotPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r1, $r2);

        throw $r4;

     label2:
        return;
    }
    public static java.util.Iterator combinationsIterator(int, int)
    {
        int $i0, $i1;
        java.util.Iterator $r0;
        org.apache.commons.math3.util.Combinations $r1;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = new org.apache.commons.math3.util.Combinations;

        specialinvoke $r1.<org.apache.commons.math3.util.Combinations: void <init>(int,int)>($i0, $i1);

        $r0 = virtualinvoke $r1.<org.apache.commons.math3.util.Combinations: java.util.Iterator iterator()>();

        return $r0;
    }
    public static long factorial(int) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.MathArithmeticException
    {
        int $i0;
        org.apache.commons.math3.exception.util.LocalizedFormats $r0;
        java.lang.Integer $r1;
        org.apache.commons.math3.exception.NotPositiveException $r2;
        org.apache.commons.math3.exception.MathArithmeticException $r3;
        long[] $r4;
        long $l1;

        $i0 := @parameter0: int;

        if $i0 >= 0 goto label1;

        $r2 = new org.apache.commons.math3.exception.NotPositiveException;

        $r0 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats FACTORIAL_NEGATIVE_PARAMETER>;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r2.<org.apache.commons.math3.exception.NotPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r0, $r1);

        throw $r2;

     label1:
        if $i0 <= 20 goto label2;

        $r3 = new org.apache.commons.math3.exception.MathArithmeticException;

        specialinvoke $r3.<org.apache.commons.math3.exception.MathArithmeticException: void <init>()>();

        throw $r3;

     label2:
        $r4 = <org.apache.commons.math3.util.CombinatoricsUtils: long[] FACTORIALS>;

        $l1 = $r4[$i0];

        return $l1;
    }
    public static double factorialDouble(int) throws org.apache.commons.math3.exception.NotPositiveException
    {
        int $i0;
        org.apache.commons.math3.exception.util.LocalizedFormats $r0;
        org.apache.commons.math3.exception.NotPositiveException $r1;
        java.lang.Integer $r2;
        long[] $r3;
        long $l1;
        double $d0;

        $i0 := @parameter0: int;

        if $i0 >= 0 goto label1;

        $r1 = new org.apache.commons.math3.exception.NotPositiveException;

        $r0 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats FACTORIAL_NEGATIVE_PARAMETER>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r1.<org.apache.commons.math3.exception.NotPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r0, $r2);

        throw $r1;

     label1:
        if $i0 >= 21 goto label2;

        $r3 = <org.apache.commons.math3.util.CombinatoricsUtils: long[] FACTORIALS>;

        $l1 = $r3[$i0];

        $d0 = (double) $l1;

        return $d0;

     label2:
        $d0 = staticinvoke <org.apache.commons.math3.util.CombinatoricsUtils: double factorialLog(int)>($i0);

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d0);

        $d0 = $d0 + 0.5;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double floor(double)>($d0);

        return $d0;
    }
    public static double factorialLog(int) throws org.apache.commons.math3.exception.NotPositiveException
    {
        int $i0, i2;
        org.apache.commons.math3.exception.NotPositiveException $r0;
        org.apache.commons.math3.exception.util.LocalizedFormats $r1;
        java.lang.Integer $r2;
        long[] $r3;
        long $l1;
        double $d0, $d1;

        $i0 := @parameter0: int;

        if $i0 >= 0 goto label1;

        $r0 = new org.apache.commons.math3.exception.NotPositiveException;

        $r1 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats FACTORIAL_NEGATIVE_PARAMETER>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r0.<org.apache.commons.math3.exception.NotPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r1, $r2);

        throw $r0;

     label1:
        if $i0 >= 21 goto label2;

        $r3 = <org.apache.commons.math3.util.CombinatoricsUtils: long[] FACTORIALS>;

        $l1 = $r3[$i0];

        $d0 = (double) $l1;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d0);

        return $d0;

     label2:
        $d0 = 0.0;

        i2 = 2;

     label3:
        if i2 > $i0 goto label4;

        $d1 = (double) i2;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d1);

        $d0 = $d0 + $d1;

        i2 = i2 + 1;

        goto label3;

     label4:
        return $d0;
    }
    public static long stirlingS2(int, int) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.exception.MathArithmeticException
    {
        int $i0, $i1, i2, $i3, $i5;
        org.apache.commons.math3.exception.NotPositiveException $r0;
        java.lang.Integer $r1, $r3;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r2;
        java.util.concurrent.atomic.AtomicReference $r4;
        java.lang.Object $r5;
        long[][] r6;
        long[] $r7, $r8;
        long $l4, $l6, $l7, $l8;
        byte $b9;
        org.apache.commons.math3.exception.MathArithmeticException $r9;
        org.apache.commons.math3.exception.util.LocalizedFormats $r10;
        java.lang.Object[] $r11;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        if $i1 >= 0 goto label01;

        $r0 = new org.apache.commons.math3.exception.NotPositiveException;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        specialinvoke $r0.<org.apache.commons.math3.exception.NotPositiveException: void <init>(java.lang.Number)>($r1);

        throw $r0;

     label01:
        if $i1 <= $i0 goto label02;

        $r2 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r2.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r1, $r3, 1);

        throw $r2;

     label02:
        $r4 = <org.apache.commons.math3.util.CombinatoricsUtils: java.util.concurrent.atomic.AtomicReference STIRLING_S2>;

        $r5 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r6 = (long[][]) $r5;

        if r6 != null goto label07;

        r6 = newarray (long[])[26];

        $r7 = newarray (long)[1];

        $r7[0] = 1L;

        r6[0] = $r7;

        i2 = 1;

     label03:
        $i3 = lengthof r6;

        if i2 >= $i3 goto label06;

        $i3 = i2 + 1;

        $r7 = newarray (long)[$i3];

        r6[i2] = $r7;

        $r7 = r6[i2];

        $r7[0] = 0L;

        $r7 = r6[i2];

        $r7[1] = 1L;

        $r7 = r6[i2];

        $r7[i2] = 1L;

        $i3 = 2;

     label04:
        if $i3 >= i2 goto label05;

        $r7 = r6[i2];

        $l4 = (long) $i3;

        $i5 = i2 + -1;

        $r8 = r6[$i5];

        $l6 = $r8[$i3];

        $l4 = $l4 * $l6;

        $i5 = i2 + -1;

        $r8 = r6[$i5];

        $i5 = $i3 + -1;

        $l6 = $r8[$i5];

        $l4 = $l4 + $l6;

        $r7[$i3] = $l4;

        $i3 = $i3 + 1;

        goto label04;

     label05:
        i2 = i2 + 1;

        goto label03;

     label06:
        $r4 = <org.apache.commons.math3.util.CombinatoricsUtils: java.util.concurrent.atomic.AtomicReference STIRLING_S2>;

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(null, r6);

     label07:
        i2 = lengthof r6;

        if $i0 >= i2 goto label08;

        $r7 = r6[$i0];

        $l4 = $r7[$i1];

        return $l4;

     label08:
        if $i1 != 0 goto label09;

        return 0L;

     label09:
        if $i1 == 1 goto label10;

        if $i1 != $i0 goto label11;

     label10:
        return 1L;

     label11:
        if $i1 != 2 goto label12;

        $i0 = $i0 + -1;

        $l4 = 1L << $i0;

        $l4 = $l4 - 1L;

        return $l4;

     label12:
        i2 = $i0 + -1;

        if $i1 != i2 goto label13;

        $l4 = staticinvoke <org.apache.commons.math3.util.CombinatoricsUtils: long binomialCoefficient(int,int)>($i0, 2);

        return $l4;

     label13:
        $l4 = 0L;

        i2 = $i1 & 1;

        if i2 != 0 goto label16;

        $l6 = 1L;

     label14:
        i2 = 1;

     label15:
        if i2 > $i1 goto label18;

        $l6 = neg $l6;

        $l7 = staticinvoke <org.apache.commons.math3.util.CombinatoricsUtils: long binomialCoefficient(int,int)>($i1, i2);

        $l7 = $l7 * $l6;

        $i3 = staticinvoke <org.apache.commons.math3.util.ArithmeticUtils: int pow(int,int)>(i2, $i0);

        $l8 = (long) $i3;

        $l7 = $l7 * $l8;

        $l4 = $l4 + $l7;

        $b9 = $l4 cmp 0L;

        if $b9 >= 0 goto label17;

        $r9 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r10 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats ARGUMENT_OUTSIDE_DOMAIN>;

        $r11 = newarray (java.lang.Object)[3];

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r11[0] = $r1;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r11[1] = $r1;

        $i0 = lengthof r6;

        $i0 = $i0 + -1;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r11[2] = $r1;

        specialinvoke $r9.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r10, $r11);

        throw $r9;

     label16:
        $l6 = -1L;

        goto label14;

     label17:
        i2 = i2 + 1;

        goto label15;

     label18:
        $l6 = staticinvoke <org.apache.commons.math3.util.CombinatoricsUtils: long factorial(int)>($i1);

        $l4 = $l4 / $l6;

        return $l4;
    }
