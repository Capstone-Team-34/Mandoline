org.apache.commons.math3.util.Precision extends java.lang.Object
public static final double EPSILON
private static final long EXPONENT_OFFSET
private static final long NEGATIVE_ZERO_DOUBLE_BITS
private static final int NEGATIVE_ZERO_FLOAT_BITS
private static final double POSITIVE_ZERO
private static final long POSITIVE_ZERO_DOUBLE_BITS
private static final int POSITIVE_ZERO_FLOAT_BITS
public static final double SAFE_MIN
private static final long SGN_MASK
private static final int SGN_MASK_FLOAT
    static void <clinit>()
    {
        long $l0;
        int $i1;
        double $d0;

        $l0 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(0.0);

        <org.apache.commons.math3.util.Precision: long POSITIVE_ZERO_DOUBLE_BITS> = $l0;

        $l0 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(-0.0);

        <org.apache.commons.math3.util.Precision: long NEGATIVE_ZERO_DOUBLE_BITS> = $l0;

        $i1 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(0.0F);

        <org.apache.commons.math3.util.Precision: int POSITIVE_ZERO_FLOAT_BITS> = $i1;

        $i1 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(-0.0F);

        <org.apache.commons.math3.util.Precision: int NEGATIVE_ZERO_FLOAT_BITS> = $i1;

        $d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>(4368491638549381120L);

        <org.apache.commons.math3.util.Precision: double EPSILON> = $d0;

        $d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>(4503599627370496L);

        <org.apache.commons.math3.util.Precision: double SAFE_MIN> = $d0;

        return;
    }
    private void <init>()
    {
        org.apache.commons.math3.util.Precision r0;

        r0 := @this: org.apache.commons.math3.util.Precision;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static int compareTo(double, double, double)
    {
        double $d0, $d1, $d2;
        boolean $z0;
        byte $b0;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,double)>($d0, $d1, $d2);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $b0 = $d0 cmpg $d1;

        if $b0 >= 0 goto label2;

        return -1;

     label2:
        return 1;
    }
    public static int compareTo(double, double, int)
    {
        double $d0, $d1;
        int $i0;
        boolean $z0;
        byte $b1;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $i0 := @parameter2: int;

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,int)>($d0, $d1, $i0);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $b1 = $d0 cmpg $d1;

        if $b1 >= 0 goto label2;

        return -1;

     label2:
        return 1;
    }
    public static boolean equals(double, double)
    {
        double $d0, $d1;
        boolean $z0;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,int)>($d0, $d1, 1);

        return $z0;
    }
    public static boolean equals(double, double, double)
    {
        double $d0, $d1, $d2;
        boolean $z0;
        byte $b0;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,int)>($d0, $d1, 1);

        if $z0 != 0 goto label2;

        $d0 = $d1 - $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        $b0 = $d0 cmpg $d2;

        if $b0 > 0 goto label1;

        return 1;

     label1:
        return 0;

     label2:
        return 1;
    }
    public static boolean equals(double, double, int)
    {
        double $d0, $d1;
        int $i0;
        long $l1, $l2, $l3;
        byte $b4;
        boolean z0;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $i0 := @parameter2: int;

        $l1 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>($d0);

        $l2 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>($d1);

        $l3 = $l1 ^ $l2;

        $l3 = $l3 & -9223372036854775808L;

        $b4 = $l3 cmp 0L;

        if $b4 != 0 goto label3;

        $l1 = $l1 - $l2;

        $l1 = staticinvoke <org.apache.commons.math3.util.FastMath: long abs(long)>($l1);

        $l2 = (long) $i0;

        $b4 = $l1 cmp $l2;

        if $b4 > 0 goto label2;

        z0 = 1;

     label1:
        if z0 == 0 goto label8;

        z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if z0 != 0 goto label8;

        z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d1);

        if z0 != 0 goto label8;

        return 1;

     label2:
        z0 = 0;

        goto label1;

     label3:
        $b4 = $l1 cmp $l2;

        if $b4 >= 0 goto label5;

        $l3 = <org.apache.commons.math3.util.Precision: long POSITIVE_ZERO_DOUBLE_BITS>;

        $l3 = $l2 - $l3;

        $l2 = <org.apache.commons.math3.util.Precision: long NEGATIVE_ZERO_DOUBLE_BITS>;

        $l1 = $l1 - $l2;

     label4:
        $l2 = (long) $i0;

        $b4 = $l3 cmp $l2;

        if $b4 <= 0 goto label6;

        z0 = 0;

        goto label1;

     label5:
        $l3 = <org.apache.commons.math3.util.Precision: long POSITIVE_ZERO_DOUBLE_BITS>;

        $l3 = $l1 - $l3;

        $l1 = <org.apache.commons.math3.util.Precision: long NEGATIVE_ZERO_DOUBLE_BITS>;

        $l1 = $l2 - $l1;

        goto label4;

     label6:
        $l2 = (long) $i0;

        $l2 = $l2 - $l3;

        $b4 = $l1 cmp $l2;

        if $b4 > 0 goto label7;

        z0 = 1;

        goto label1;

     label7:
        z0 = 0;

        goto label1;

     label8:
        return 0;
    }
    public static boolean equals(float, float)
    {
        float $f0, $f1;
        boolean $z0;

        $f0 := @parameter0: float;

        $f1 := @parameter1: float;

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(float,float,int)>($f0, $f1, 1);

        return $z0;
    }
    public static boolean equals(float, float, float)
    {
        float $f0, $f1, $f2;
        boolean $z0;
        byte $b0;

        $f0 := @parameter0: float;

        $f1 := @parameter1: float;

        $f2 := @parameter2: float;

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(float,float,int)>($f0, $f1, 1);

        if $z0 != 0 goto label2;

        $f0 = $f1 - $f0;

        $f0 = staticinvoke <org.apache.commons.math3.util.FastMath: float abs(float)>($f0);

        $b0 = $f0 cmpg $f2;

        if $b0 > 0 goto label1;

        return 1;

     label1:
        return 0;

     label2:
        return 1;
    }
    public static boolean equals(float, float, int)
    {
        float $f0, $f1;
        int $i0, $i1, $i2, $i3;
        boolean z0;

        $f0 := @parameter0: float;

        $f1 := @parameter1: float;

        $i0 := @parameter2: int;

        $i1 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>($f0);

        $i2 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>($f1);

        $i3 = $i1 ^ $i2;

        $i3 = $i3 & -2147483648;

        if $i3 != 0 goto label3;

        $i1 = $i1 - $i2;

        $i1 = staticinvoke <org.apache.commons.math3.util.FastMath: int abs(int)>($i1);

        if $i1 > $i0 goto label2;

        z0 = 1;

     label1:
        if z0 == 0 goto label8;

        z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>($f0);

        if z0 != 0 goto label8;

        z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>($f1);

        if z0 != 0 goto label8;

        return 1;

     label2:
        z0 = 0;

        goto label1;

     label3:
        if $i1 >= $i2 goto label5;

        $i3 = <org.apache.commons.math3.util.Precision: int POSITIVE_ZERO_FLOAT_BITS>;

        $i3 = $i2 - $i3;

        $i2 = <org.apache.commons.math3.util.Precision: int NEGATIVE_ZERO_FLOAT_BITS>;

        $i1 = $i1 - $i2;

     label4:
        if $i3 <= $i0 goto label6;

        z0 = 0;

        goto label1;

     label5:
        $i3 = <org.apache.commons.math3.util.Precision: int POSITIVE_ZERO_FLOAT_BITS>;

        $i3 = $i1 - $i3;

        $i1 = <org.apache.commons.math3.util.Precision: int NEGATIVE_ZERO_FLOAT_BITS>;

        $i1 = $i2 - $i1;

        goto label4;

     label6:
        $i0 = $i0 - $i3;

        if $i1 > $i0 goto label7;

        z0 = 1;

        goto label1;

     label7:
        z0 = 0;

        goto label1;

     label8:
        return 0;
    }
    public static boolean equalsIncludingNaN(double, double)
    {
        double $d0, $d1;
        boolean $z0;
        byte $b0, $b1;
        int $i2;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $b0 = $d0 cmpl $d0;

        if $b0 != 0 goto label1;

        $b0 = $d1 cmpl $d1;

        if $b0 == 0 goto label7;

     label1:
        $b0 = $d0 cmpl $d0;

        if $b0 == 0 goto label4;

        $b0 = 1;

     label2:
        $b1 = $d1 cmpl $d1;

        if $b1 == 0 goto label5;

        $b1 = 1;

     label3:
        $i2 = $b1 ^ $b0;

        if $i2 != 0 goto label6;

        return 1;

     label4:
        $b0 = 0;

        goto label2;

     label5:
        $b1 = 0;

        goto label3;

     label6:
        return 0;

     label7:
        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,int)>($d0, $d1, 1);

        return $z0;
    }
    public static boolean equalsIncludingNaN(double, double, double)
    {
        double $d0, $d1, $d2;
        boolean $z0;
        byte $b0;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equalsIncludingNaN(double,double)>($d0, $d1);

        if $z0 != 0 goto label1;

        $d0 = $d1 - $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        $b0 = $d0 cmpg $d2;

        if $b0 > 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    public static boolean equalsIncludingNaN(double, double, int)
    {
        double $d0, $d1;
        int $i0;
        boolean $z0;
        byte $b1, $b2;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $i0 := @parameter2: int;

        $b1 = $d0 cmpl $d0;

        if $b1 != 0 goto label1;

        $b1 = $d1 cmpl $d1;

        if $b1 == 0 goto label7;

     label1:
        $b1 = $d0 cmpl $d0;

        if $b1 == 0 goto label4;

        $b1 = 1;

     label2:
        $b2 = $d1 cmpl $d1;

        if $b2 == 0 goto label5;

        $b2 = 1;

     label3:
        $i0 = $b2 ^ $b1;

        if $i0 != 0 goto label6;

        return 1;

     label4:
        $b1 = 0;

        goto label2;

     label5:
        $b2 = 0;

        goto label3;

     label6:
        return 0;

     label7:
        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,int)>($d0, $d1, $i0);

        return $z0;
    }
    public static boolean equalsIncludingNaN(float, float)
    {
        float $f0, $f1;
        boolean $z0;
        byte $b0, $b1;
        int $i2;

        $f0 := @parameter0: float;

        $f1 := @parameter1: float;

        $b0 = $f0 cmpl $f0;

        if $b0 != 0 goto label1;

        $b0 = $f1 cmpl $f1;

        if $b0 == 0 goto label7;

     label1:
        $b0 = $f0 cmpl $f0;

        if $b0 == 0 goto label4;

        $b0 = 1;

     label2:
        $b1 = $f1 cmpl $f1;

        if $b1 == 0 goto label5;

        $b1 = 1;

     label3:
        $i2 = $b1 ^ $b0;

        if $i2 != 0 goto label6;

        return 1;

     label4:
        $b0 = 0;

        goto label2;

     label5:
        $b1 = 0;

        goto label3;

     label6:
        return 0;

     label7:
        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(float,float,int)>($f0, $f1, 1);

        return $z0;
    }
    public static boolean equalsIncludingNaN(float, float, float)
    {
        float $f0, $f1, $f2;
        boolean $z0;
        byte $b0;

        $f0 := @parameter0: float;

        $f1 := @parameter1: float;

        $f2 := @parameter2: float;

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equalsIncludingNaN(float,float)>($f0, $f1);

        if $z0 != 0 goto label1;

        $f0 = $f1 - $f0;

        $f0 = staticinvoke <org.apache.commons.math3.util.FastMath: float abs(float)>($f0);

        $b0 = $f0 cmpg $f2;

        if $b0 > 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    public static boolean equalsIncludingNaN(float, float, int)
    {
        float $f0, $f1;
        int $i0;
        boolean $z0;
        byte $b1, $b2;

        $f0 := @parameter0: float;

        $f1 := @parameter1: float;

        $i0 := @parameter2: int;

        $b1 = $f0 cmpl $f0;

        if $b1 != 0 goto label1;

        $b1 = $f1 cmpl $f1;

        if $b1 == 0 goto label7;

     label1:
        $b1 = $f0 cmpl $f0;

        if $b1 == 0 goto label4;

        $b1 = 1;

     label2:
        $b2 = $f1 cmpl $f1;

        if $b2 == 0 goto label5;

        $b2 = 1;

     label3:
        $i0 = $b2 ^ $b1;

        if $i0 != 0 goto label6;

        return 1;

     label4:
        $b1 = 0;

        goto label2;

     label5:
        $b2 = 0;

        goto label3;

     label6:
        return 0;

     label7:
        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(float,float,int)>($f0, $f1, $i0);

        return $z0;
    }
    public static boolean equalsWithRelativeTolerance(double, double, double)
    {
        double $d0, $d1, $d2, $d3, $d4;
        boolean $z0;
        byte $b0;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,int)>($d0, $d1, 1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d1);

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>($d3, $d4);

        $d0 = $d0 - $d1;

        $d0 = $d0 / $d3;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        $b0 = $d0 cmpg $d2;

        if $b0 <= 0 goto label2;

        return 0;

     label2:
        return 1;
    }
    public static double representableDelta(double, double)
    {
        double $d0, $d1;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d1 = $d0 + $d1;

        $d0 = $d1 - $d0;

        return $d0;
    }
    public static double round(double, int)
    {
        double $d0;
        int $i0;

        $d0 := @parameter0: double;

        $i0 := @parameter1: int;

        $d0 = staticinvoke <org.apache.commons.math3.util.Precision: double round(double,int,int)>($d0, $i0, 4);

        return $d0;
    }
    public static double round(double, int, int)
    {
        double $d0, $d1;
        int $i0, $i1;
        java.lang.NumberFormatException r0;
        java.math.BigDecimal $r1;
        java.lang.String $r2;
        byte $b2;
        boolean $z0;

        $d0 := @parameter0: double;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r1 = new java.math.BigDecimal;

     label1:
        $r2 = staticinvoke <java.lang.Double: java.lang.String toString(double)>($d0);

        specialinvoke $r1.<java.math.BigDecimal: void <init>(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.math.BigDecimal: java.math.BigDecimal setScale(int,int)>($i0, $i1);

        $d1 = virtualinvoke $r1.<java.math.BigDecimal: double doubleValue()>();

     label2:
        $b2 = $d1 cmpl 0.0;

        if $b2 != 0 goto label5;

        $d0 = 0.0 * $d0;

        return $d0;

     label3:
        r0 := @caughtexception;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d0);

        if $z0 == 0 goto label4;

        return $d0;

     label4:
        return #NaN;

     label5:
        return $d1;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }
    public static float round(float, int)
    {
        float $f0;
        int $i0;

        $f0 := @parameter0: float;

        $i0 := @parameter1: int;

        $f0 = staticinvoke <org.apache.commons.math3.util.Precision: float round(float,int,int)>($f0, $i0, 4);

        return $f0;
    }
    public static float round(float, int, int) throws org.apache.commons.math3.exception.MathArithmeticException, org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        float $f0, f1, $f2;
        int $i0, $i1;
        double $d0, $d1;

        $f0 := @parameter0: float;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $f2 = staticinvoke <org.apache.commons.math3.util.FastMath: float copySign(float,float)>(1.0F, $f0);

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,int)>(10.0, $i0);

        f1 = (float) $d0;

        f1 = f1 * $f2;

        $f0 = $f0 * f1;

        $d1 = (double) $f0;

        $d0 = (double) $f2;

        $d0 = staticinvoke <org.apache.commons.math3.util.Precision: double roundUnscaled(double,double,int)>($d1, $d0, $i1);

        $f0 = (float) $d0;

        $f0 = $f0 / f1;

        return $f0;
    }
    private static double roundUnscaled(double, double, int) throws org.apache.commons.math3.exception.MathArithmeticException, org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        double $d0, $d1, $d2;
        int $i0;
        org.apache.commons.math3.exception.util.LocalizedFormats $r0;
        org.apache.commons.math3.exception.MathIllegalArgumentException $r1;
        java.lang.Object[] $r2;
        java.lang.Integer $r3;
        byte $b1;
        org.apache.commons.math3.exception.MathArithmeticException $r4;

        $d1 := @parameter0: double;

        $d0 := @parameter1: double;

        $i0 := @parameter2: int;

        lookupswitch($i0)
        {
            case 0: goto label16;
            case 1: goto label04;
            case 2: goto label02;
            case 3: goto label05;
            case 4: goto label13;
            case 5: goto label07;
            case 6: goto label09;
            case 7: goto label15;
            default: goto label01;
        };

     label01:
        $r1 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r0 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INVALID_ROUNDING_METHOD>;

        $r2 = newarray (java.lang.Object)[17];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r2[0] = $r3;

        $r2[1] = "ROUND_CEILING";

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r2[2] = $r3;

        $r2[3] = "ROUND_DOWN";

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r2[4] = $r3;

        $r2[5] = "ROUND_FLOOR";

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r2[6] = $r3;

        $r2[7] = "ROUND_HALF_DOWN";

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r2[8] = $r3;

        $r2[9] = "ROUND_HALF_EVEN";

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6);

        $r2[10] = $r3;

        $r2[11] = "ROUND_HALF_UP";

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r2[12] = $r3;

        $r2[13] = "ROUND_UNNECESSARY";

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(7);

        $r2[14] = $r3;

        $r2[15] = "ROUND_UP";

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r2[16] = $r3;

        specialinvoke $r1.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r0, $r2);

        throw $r1;

     label02:
        $b1 = $d0 cmpl -1.0;

        if $b1 != 0 goto label03;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double nextAfter(double,double)>($d1, #-Infinity);

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double floor(double)>($d1);

        return $d1;

     label03:
        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double nextAfter(double,double)>($d1, #Infinity);

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double ceil(double)>($d1);

        return $d1;

     label04:
        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double nextAfter(double,double)>($d1, #-Infinity);

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double floor(double)>($d1);

        return $d1;

     label05:
        $b1 = $d0 cmpl -1.0;

        if $b1 != 0 goto label06;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double nextAfter(double,double)>($d1, #Infinity);

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double ceil(double)>($d1);

        return $d1;

     label06:
        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double nextAfter(double,double)>($d1, #-Infinity);

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double floor(double)>($d1);

        return $d1;

     label07:
        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double nextAfter(double,double)>($d1, #-Infinity);

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double floor(double)>($d1);

        $d0 = $d1 - $d0;

        $b1 = $d0 cmpl 0.5;

        if $b1 <= 0 goto label08;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double ceil(double)>($d1);

        return $d1;

     label08:
        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double floor(double)>($d1);

        return $d1;

     label09:
        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double floor(double)>($d1);

        $d0 = $d1 - $d0;

        $b1 = $d0 cmpl 0.5;

        if $b1 <= 0 goto label10;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double ceil(double)>($d1);

        return $d1;

     label10:
        $b1 = $d0 cmpg 0.5;

        if $b1 >= 0 goto label11;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double floor(double)>($d1);

        return $d1;

     label11:
        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double floor(double)>($d1);

        $d0 = $d0 / 2.0;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double floor(double)>($d1);

        $d2 = $d2 / 2.0;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double floor(double)>($d2);

        $b1 = $d0 cmpl $d2;

        if $b1 != 0 goto label12;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double floor(double)>($d1);

        return $d1;

     label12:
        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double ceil(double)>($d1);

        return $d1;

     label13:
        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double nextAfter(double,double)>($d1, #Infinity);

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double floor(double)>($d1);

        $d0 = $d1 - $d0;

        $b1 = $d0 cmpl 0.5;

        if $b1 < 0 goto label14;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double ceil(double)>($d1);

        return $d1;

     label14:
        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double floor(double)>($d1);

        return $d1;

     label15:
        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double floor(double)>($d1);

        $b1 = $d1 cmpl $d0;

        if $b1 == 0 goto label17;

        $r4 = new org.apache.commons.math3.exception.MathArithmeticException;

        specialinvoke $r4.<org.apache.commons.math3.exception.MathArithmeticException: void <init>()>();

        throw $r4;

     label16:
        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double floor(double)>($d1);

        $b1 = $d1 cmpl $d0;

        if $b1 == 0 goto label17;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double nextAfter(double,double)>($d1, #Infinity);

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double ceil(double)>($d1);

     label17:
        return $d1;
    }
