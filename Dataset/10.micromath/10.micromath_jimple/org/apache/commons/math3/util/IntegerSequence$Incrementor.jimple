org.apache.commons.math3.util.IntegerSequence$Incrementor extends java.lang.Object implements java.util.Iterator
private static final org.apache.commons.math3.util.IntegerSequence$Incrementor$MaxCountExceededCallback CALLBACK
private int count
private final int increment
private final int init
private final org.apache.commons.math3.util.IntegerSequence$Incrementor$MaxCountExceededCallback maxCountCallback
private final int maximalCount
    static void <clinit>()
    {
        org.apache.commons.math3.util.IntegerSequence$Incrementor$1 $r0;

        $r0 = new org.apache.commons.math3.util.IntegerSequence$Incrementor$1;

        specialinvoke $r0.<org.apache.commons.math3.util.IntegerSequence$Incrementor$1: void <init>()>();

        <org.apache.commons.math3.util.IntegerSequence$Incrementor: org.apache.commons.math3.util.IntegerSequence$Incrementor$MaxCountExceededCallback CALLBACK> = $r0;

        return;
    }
    private void <init>(int, int, int, org.apache.commons.math3.util.IntegerSequence$Incrementor$MaxCountExceededCallback) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.util.IntegerSequence$Incrementor r0;
        int $i0, $i1, $i2;
        org.apache.commons.math3.util.IntegerSequence$Incrementor$MaxCountExceededCallback $r1;
        org.apache.commons.math3.exception.NullArgumentException $r2;

        r0 := @this: org.apache.commons.math3.util.IntegerSequence$Incrementor;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $r1 := @parameter3: org.apache.commons.math3.util.IntegerSequence$Incrementor$MaxCountExceededCallback;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.util.IntegerSequence$Incrementor: int count> = 0;

        if $r1 != null goto label1;

        $r2 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r2.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r2;

     label1:
        r0.<org.apache.commons.math3.util.IntegerSequence$Incrementor: int init> = $i0;

        r0.<org.apache.commons.math3.util.IntegerSequence$Incrementor: int maximalCount> = $i1;

        r0.<org.apache.commons.math3.util.IntegerSequence$Incrementor: int increment> = $i2;

        r0.<org.apache.commons.math3.util.IntegerSequence$Incrementor: org.apache.commons.math3.util.IntegerSequence$Incrementor$MaxCountExceededCallback maxCountCallback> = $r1;

        r0.<org.apache.commons.math3.util.IntegerSequence$Incrementor: int count> = $i0;

        return;
    }
    public static org.apache.commons.math3.util.IntegerSequence$Incrementor create()
    {
        org.apache.commons.math3.util.IntegerSequence$Incrementor $r0;
        org.apache.commons.math3.util.IntegerSequence$Incrementor$MaxCountExceededCallback $r1;

        $r0 = new org.apache.commons.math3.util.IntegerSequence$Incrementor;

        $r1 = <org.apache.commons.math3.util.IntegerSequence$Incrementor: org.apache.commons.math3.util.IntegerSequence$Incrementor$MaxCountExceededCallback CALLBACK>;

        specialinvoke $r0.<org.apache.commons.math3.util.IntegerSequence$Incrementor: void <init>(int,int,int,org.apache.commons.math3.util.IntegerSequence$Incrementor$MaxCountExceededCallback)>(0, 0, 1, $r1);

        return $r0;
    }
    public boolean canIncrement()
    {
        org.apache.commons.math3.util.IntegerSequence$Incrementor r0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.util.IntegerSequence$Incrementor;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.util.IntegerSequence$Incrementor: boolean canIncrement(int)>(1);

        return $z0;
    }
    public boolean canIncrement(int)
    {
        org.apache.commons.math3.util.IntegerSequence$Incrementor r0;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.commons.math3.util.IntegerSequence$Incrementor;

        $i0 := @parameter0: int;

        $i1 = r0.<org.apache.commons.math3.util.IntegerSequence$Incrementor: int count>;

        $i2 = r0.<org.apache.commons.math3.util.IntegerSequence$Incrementor: int increment>;

        $i0 = $i2 * $i0;

        $i0 = $i1 + $i0;

        $i1 = r0.<org.apache.commons.math3.util.IntegerSequence$Incrementor: int increment>;

        if $i1 >= 0 goto label2;

        $i1 = r0.<org.apache.commons.math3.util.IntegerSequence$Incrementor: int maximalCount>;

        if $i0 <= $i1 goto label1;

        return 1;

     label1:
        return 0;

     label2:
        $i1 = r0.<org.apache.commons.math3.util.IntegerSequence$Incrementor: int maximalCount>;

        if $i0 < $i1 goto label3;

        return 0;

     label3:
        return 1;
    }
    public int getCount()
    {
        org.apache.commons.math3.util.IntegerSequence$Incrementor r0;
        int i0;

        r0 := @this: org.apache.commons.math3.util.IntegerSequence$Incrementor;

        i0 = r0.<org.apache.commons.math3.util.IntegerSequence$Incrementor: int count>;

        return i0;
    }
    public int getMaximalCount()
    {
        org.apache.commons.math3.util.IntegerSequence$Incrementor r0;
        int i0;

        r0 := @this: org.apache.commons.math3.util.IntegerSequence$Incrementor;

        i0 = r0.<org.apache.commons.math3.util.IntegerSequence$Incrementor: int maximalCount>;

        return i0;
    }
    public boolean hasNext()
    {
        org.apache.commons.math3.util.IntegerSequence$Incrementor r0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.util.IntegerSequence$Incrementor;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.util.IntegerSequence$Incrementor: boolean canIncrement(int)>(0);

        return $z0;
    }
    public void increment() throws org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.util.IntegerSequence$Incrementor r0;

        r0 := @this: org.apache.commons.math3.util.IntegerSequence$Incrementor;

        virtualinvoke r0.<org.apache.commons.math3.util.IntegerSequence$Incrementor: void increment(int)>(1);

        return;
    }
    public void increment(int) throws org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.util.IntegerSequence$Incrementor r0;
        int $i0, $i1, $i2;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r1;
        java.lang.Integer $r2;
        boolean $z0;
        org.apache.commons.math3.util.IntegerSequence$Incrementor$MaxCountExceededCallback $r3;

        r0 := @this: org.apache.commons.math3.util.IntegerSequence$Incrementor;

        $i0 := @parameter0: int;

        if $i0 > 0 goto label1;

        $r1 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r1.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(java.lang.Number)>($r2);

        throw $r1;

     label1:
        $z0 = virtualinvoke r0.<org.apache.commons.math3.util.IntegerSequence$Incrementor: boolean canIncrement(int)>(0);

        if $z0 != 0 goto label2;

        $r3 = r0.<org.apache.commons.math3.util.IntegerSequence$Incrementor: org.apache.commons.math3.util.IntegerSequence$Incrementor$MaxCountExceededCallback maxCountCallback>;

        $i1 = r0.<org.apache.commons.math3.util.IntegerSequence$Incrementor: int maximalCount>;

        interfaceinvoke $r3.<org.apache.commons.math3.util.IntegerSequence$Incrementor$MaxCountExceededCallback: void trigger(int)>($i1);

     label2:
        $i1 = r0.<org.apache.commons.math3.util.IntegerSequence$Incrementor: int count>;

        $i2 = r0.<org.apache.commons.math3.util.IntegerSequence$Incrementor: int increment>;

        $i0 = $i2 * $i0;

        $i0 = $i1 + $i0;

        r0.<org.apache.commons.math3.util.IntegerSequence$Incrementor: int count> = $i0;

        return;
    }
    public java.lang.Integer next()
    {
        org.apache.commons.math3.util.IntegerSequence$Incrementor r0;
        int i0;
        java.lang.Integer $r1;

        r0 := @this: org.apache.commons.math3.util.IntegerSequence$Incrementor;

        i0 = r0.<org.apache.commons.math3.util.IntegerSequence$Incrementor: int count>;

        virtualinvoke r0.<org.apache.commons.math3.util.IntegerSequence$Incrementor: void increment()>();

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        return $r1;
    }
    public volatile java.lang.Object next()
    {
        org.apache.commons.math3.util.IntegerSequence$Incrementor r0;
        java.lang.Integer $r1;

        r0 := @this: org.apache.commons.math3.util.IntegerSequence$Incrementor;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.util.IntegerSequence$Incrementor: java.lang.Integer next()>();

        return $r1;
    }
    public void remove()
    {
        org.apache.commons.math3.util.IntegerSequence$Incrementor r0;
        org.apache.commons.math3.exception.MathUnsupportedOperationException $r1;

        r0 := @this: org.apache.commons.math3.util.IntegerSequence$Incrementor;

        $r1 = new org.apache.commons.math3.exception.MathUnsupportedOperationException;

        specialinvoke $r1.<org.apache.commons.math3.exception.MathUnsupportedOperationException: void <init>()>();

        throw $r1;
    }
    public org.apache.commons.math3.util.IntegerSequence$Incrementor withCallback(org.apache.commons.math3.util.IntegerSequence$Incrementor$MaxCountExceededCallback)
    {
        org.apache.commons.math3.util.IntegerSequence$Incrementor r0, $r2;
        org.apache.commons.math3.util.IntegerSequence$Incrementor$MaxCountExceededCallback $r1;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.commons.math3.util.IntegerSequence$Incrementor;

        $r1 := @parameter0: org.apache.commons.math3.util.IntegerSequence$Incrementor$MaxCountExceededCallback;

        $r2 = new org.apache.commons.math3.util.IntegerSequence$Incrementor;

        $i0 = r0.<org.apache.commons.math3.util.IntegerSequence$Incrementor: int init>;

        $i1 = r0.<org.apache.commons.math3.util.IntegerSequence$Incrementor: int maximalCount>;

        $i2 = r0.<org.apache.commons.math3.util.IntegerSequence$Incrementor: int increment>;

        specialinvoke $r2.<org.apache.commons.math3.util.IntegerSequence$Incrementor: void <init>(int,int,int,org.apache.commons.math3.util.IntegerSequence$Incrementor$MaxCountExceededCallback)>($i0, $i1, $i2, $r1);

        return $r2;
    }
    public org.apache.commons.math3.util.IntegerSequence$Incrementor withIncrement(int)
    {
        org.apache.commons.math3.util.IntegerSequence$Incrementor r0, $r3;
        int $i0, $i1, $i2;
        org.apache.commons.math3.util.IntegerSequence$Incrementor$MaxCountExceededCallback $r1;
        org.apache.commons.math3.exception.ZeroException $r2;

        r0 := @this: org.apache.commons.math3.util.IntegerSequence$Incrementor;

        $i0 := @parameter0: int;

        if $i0 != 0 goto label1;

        $r2 = new org.apache.commons.math3.exception.ZeroException;

        specialinvoke $r2.<org.apache.commons.math3.exception.ZeroException: void <init>()>();

        throw $r2;

     label1:
        $r3 = new org.apache.commons.math3.util.IntegerSequence$Incrementor;

        $i1 = r0.<org.apache.commons.math3.util.IntegerSequence$Incrementor: int init>;

        $i2 = r0.<org.apache.commons.math3.util.IntegerSequence$Incrementor: int maximalCount>;

        $r1 = r0.<org.apache.commons.math3.util.IntegerSequence$Incrementor: org.apache.commons.math3.util.IntegerSequence$Incrementor$MaxCountExceededCallback maxCountCallback>;

        specialinvoke $r3.<org.apache.commons.math3.util.IntegerSequence$Incrementor: void <init>(int,int,int,org.apache.commons.math3.util.IntegerSequence$Incrementor$MaxCountExceededCallback)>($i1, $i2, $i0, $r1);

        return $r3;
    }
    public org.apache.commons.math3.util.IntegerSequence$Incrementor withMaximalCount(int)
    {
        org.apache.commons.math3.util.IntegerSequence$Incrementor r0, $r1;
        int $i0, $i1, $i2;
        org.apache.commons.math3.util.IntegerSequence$Incrementor$MaxCountExceededCallback $r2;

        r0 := @this: org.apache.commons.math3.util.IntegerSequence$Incrementor;

        $i0 := @parameter0: int;

        $r1 = new org.apache.commons.math3.util.IntegerSequence$Incrementor;

        $i1 = r0.<org.apache.commons.math3.util.IntegerSequence$Incrementor: int init>;

        $i2 = r0.<org.apache.commons.math3.util.IntegerSequence$Incrementor: int increment>;

        $r2 = r0.<org.apache.commons.math3.util.IntegerSequence$Incrementor: org.apache.commons.math3.util.IntegerSequence$Incrementor$MaxCountExceededCallback maxCountCallback>;

        specialinvoke $r1.<org.apache.commons.math3.util.IntegerSequence$Incrementor: void <init>(int,int,int,org.apache.commons.math3.util.IntegerSequence$Incrementor$MaxCountExceededCallback)>($i1, $i0, $i2, $r2);

        return $r1;
    }
    public org.apache.commons.math3.util.IntegerSequence$Incrementor withStart(int)
    {
        org.apache.commons.math3.util.IntegerSequence$Incrementor r0, $r1;
        int $i0, $i1, $i2;
        org.apache.commons.math3.util.IntegerSequence$Incrementor$MaxCountExceededCallback $r2;

        r0 := @this: org.apache.commons.math3.util.IntegerSequence$Incrementor;

        $i0 := @parameter0: int;

        $r1 = new org.apache.commons.math3.util.IntegerSequence$Incrementor;

        $i1 = r0.<org.apache.commons.math3.util.IntegerSequence$Incrementor: int maximalCount>;

        $i2 = r0.<org.apache.commons.math3.util.IntegerSequence$Incrementor: int increment>;

        $r2 = r0.<org.apache.commons.math3.util.IntegerSequence$Incrementor: org.apache.commons.math3.util.IntegerSequence$Incrementor$MaxCountExceededCallback maxCountCallback>;

        specialinvoke $r1.<org.apache.commons.math3.util.IntegerSequence$Incrementor: void <init>(int,int,int,org.apache.commons.math3.util.IntegerSequence$Incrementor$MaxCountExceededCallback)>($i0, $i1, $i2, $r2);

        return $r1;
    }
