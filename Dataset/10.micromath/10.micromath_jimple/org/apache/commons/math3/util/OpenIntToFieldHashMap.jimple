org.apache.commons.math3.util.OpenIntToFieldHashMap extends java.lang.Object implements java.io.Serializable
private static final int DEFAULT_EXPECTED_SIZE
protected static final byte FREE
protected static final byte FULL
private static final float LOAD_FACTOR
private static final int PERTURB_SHIFT
protected static final byte REMOVED
private static final int RESIZE_MULTIPLIER
private static final long serialVersionUID
private transient int count
private final org.apache.commons.math3.Field field
private int[] keys
private int mask
private final org.apache.commons.math3.FieldElement missingEntries
private int size
private byte[] states
private org.apache.commons.math3.FieldElement[] values
    public void <init>(org.apache.commons.math3.Field)
    {
        org.apache.commons.math3.util.OpenIntToFieldHashMap r0;
        org.apache.commons.math3.Field r1;
        java.lang.Object $r2;
        org.apache.commons.math3.FieldElement $r3;

        r0 := @this: org.apache.commons.math3.util.OpenIntToFieldHashMap;

        r1 := @parameter0: org.apache.commons.math3.Field;

        $r2 = interfaceinvoke r1.<org.apache.commons.math3.Field: java.lang.Object getZero()>();

        $r3 = (org.apache.commons.math3.FieldElement) $r2;

        specialinvoke r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: void <init>(org.apache.commons.math3.Field,int,org.apache.commons.math3.FieldElement)>(r1, 16, $r3);

        return;
    }
    public void <init>(org.apache.commons.math3.Field, int)
    {
        org.apache.commons.math3.util.OpenIntToFieldHashMap r0;
        org.apache.commons.math3.Field r1;
        int $i0;
        java.lang.Object $r2;
        org.apache.commons.math3.FieldElement $r3;

        r0 := @this: org.apache.commons.math3.util.OpenIntToFieldHashMap;

        r1 := @parameter0: org.apache.commons.math3.Field;

        $i0 := @parameter1: int;

        $r2 = interfaceinvoke r1.<org.apache.commons.math3.Field: java.lang.Object getZero()>();

        $r3 = (org.apache.commons.math3.FieldElement) $r2;

        specialinvoke r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: void <init>(org.apache.commons.math3.Field,int,org.apache.commons.math3.FieldElement)>(r1, $i0, $r3);

        return;
    }
    public void <init>(org.apache.commons.math3.Field, int, org.apache.commons.math3.FieldElement)
    {
        org.apache.commons.math3.util.OpenIntToFieldHashMap r0;
        org.apache.commons.math3.Field r1;
        int $i0;
        org.apache.commons.math3.FieldElement r2;
        int[] $r3;
        org.apache.commons.math3.FieldElement[] $r4;
        byte[] $r5;

        r0 := @this: org.apache.commons.math3.util.OpenIntToFieldHashMap;

        r1 := @parameter0: org.apache.commons.math3.Field;

        $i0 := @parameter1: int;

        r2 := @parameter2: org.apache.commons.math3.FieldElement;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: org.apache.commons.math3.Field field> = r1;

        $i0 = staticinvoke <org.apache.commons.math3.util.OpenIntToFieldHashMap: int computeCapacity(int)>($i0);

        $r3 = newarray (int)[$i0];

        r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: int[] keys> = $r3;

        $r4 = specialinvoke r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: org.apache.commons.math3.FieldElement[] buildArray(int)>($i0);

        r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: org.apache.commons.math3.FieldElement[] values> = $r4;

        $r5 = newarray (byte)[$i0];

        r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: byte[] states> = $r5;

        r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: org.apache.commons.math3.FieldElement missingEntries> = r2;

        $i0 = $i0 + -1;

        r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: int mask> = $i0;

        return;
    }
    public void <init>(org.apache.commons.math3.Field, org.apache.commons.math3.FieldElement)
    {
        org.apache.commons.math3.util.OpenIntToFieldHashMap r0;
        org.apache.commons.math3.Field r1;
        org.apache.commons.math3.FieldElement r2;

        r0 := @this: org.apache.commons.math3.util.OpenIntToFieldHashMap;

        r1 := @parameter0: org.apache.commons.math3.Field;

        r2 := @parameter1: org.apache.commons.math3.FieldElement;

        specialinvoke r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: void <init>(org.apache.commons.math3.Field,int,org.apache.commons.math3.FieldElement)>(r1, 16, r2);

        return;
    }
    public void <init>(org.apache.commons.math3.util.OpenIntToFieldHashMap)
    {
        org.apache.commons.math3.util.OpenIntToFieldHashMap r0, r1;
        int i0;
        org.apache.commons.math3.FieldElement[] $r2, $r6;
        org.apache.commons.math3.Field $r3;
        int[] $r4, $r5;
        byte[] $r7, $r8;
        org.apache.commons.math3.FieldElement $r9;

        r0 := @this: org.apache.commons.math3.util.OpenIntToFieldHashMap;

        r1 := @parameter0: org.apache.commons.math3.util.OpenIntToFieldHashMap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = r1.<org.apache.commons.math3.util.OpenIntToFieldHashMap: org.apache.commons.math3.Field field>;

        r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: org.apache.commons.math3.Field field> = $r3;

        $r4 = r1.<org.apache.commons.math3.util.OpenIntToFieldHashMap: int[] keys>;

        i0 = lengthof $r4;

        $r4 = newarray (int)[i0];

        r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: int[] keys> = $r4;

        $r4 = r1.<org.apache.commons.math3.util.OpenIntToFieldHashMap: int[] keys>;

        $r5 = r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: int[] keys>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r5, 0, i0);

        $r2 = specialinvoke r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: org.apache.commons.math3.FieldElement[] buildArray(int)>(i0);

        r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: org.apache.commons.math3.FieldElement[] values> = $r2;

        $r2 = r1.<org.apache.commons.math3.util.OpenIntToFieldHashMap: org.apache.commons.math3.FieldElement[] values>;

        $r6 = r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: org.apache.commons.math3.FieldElement[] values>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r6, 0, i0);

        $r7 = newarray (byte)[i0];

        r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: byte[] states> = $r7;

        $r7 = r1.<org.apache.commons.math3.util.OpenIntToFieldHashMap: byte[] states>;

        $r8 = r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: byte[] states>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, $r8, 0, i0);

        $r9 = r1.<org.apache.commons.math3.util.OpenIntToFieldHashMap: org.apache.commons.math3.FieldElement missingEntries>;

        r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: org.apache.commons.math3.FieldElement missingEntries> = $r9;

        i0 = r1.<org.apache.commons.math3.util.OpenIntToFieldHashMap: int size>;

        r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: int size> = i0;

        i0 = r1.<org.apache.commons.math3.util.OpenIntToFieldHashMap: int mask>;

        r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: int mask> = i0;

        i0 = r1.<org.apache.commons.math3.util.OpenIntToFieldHashMap: int count>;

        r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: int count> = i0;

        return;
    }
    static int access$100(org.apache.commons.math3.util.OpenIntToFieldHashMap)
    {
        org.apache.commons.math3.util.OpenIntToFieldHashMap $r0;
        int i0;

        $r0 := @parameter0: org.apache.commons.math3.util.OpenIntToFieldHashMap;

        i0 = $r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: int count>;

        return i0;
    }
    static int[] access$200(org.apache.commons.math3.util.OpenIntToFieldHashMap)
    {
        org.apache.commons.math3.util.OpenIntToFieldHashMap $r0;
        int[] r1;

        $r0 := @parameter0: org.apache.commons.math3.util.OpenIntToFieldHashMap;

        r1 = $r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: int[] keys>;

        return r1;
    }
    static org.apache.commons.math3.FieldElement[] access$300(org.apache.commons.math3.util.OpenIntToFieldHashMap)
    {
        org.apache.commons.math3.util.OpenIntToFieldHashMap $r0;
        org.apache.commons.math3.FieldElement[] r1;

        $r0 := @parameter0: org.apache.commons.math3.util.OpenIntToFieldHashMap;

        r1 = $r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: org.apache.commons.math3.FieldElement[] values>;

        return r1;
    }
    static byte[] access$400(org.apache.commons.math3.util.OpenIntToFieldHashMap)
    {
        org.apache.commons.math3.util.OpenIntToFieldHashMap $r0;
        byte[] r1;

        $r0 := @parameter0: org.apache.commons.math3.util.OpenIntToFieldHashMap;

        r1 = $r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: byte[] states>;

        return r1;
    }
    private org.apache.commons.math3.FieldElement[] buildArray(int)
    {
        org.apache.commons.math3.util.OpenIntToFieldHashMap r0;
        int $i0;
        org.apache.commons.math3.Field $r1;
        java.lang.Class $r2;
        java.lang.Object $r3;
        org.apache.commons.math3.FieldElement[] $r4;

        r0 := @this: org.apache.commons.math3.util.OpenIntToFieldHashMap;

        $i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: org.apache.commons.math3.Field field>;

        $r2 = interfaceinvoke $r1.<org.apache.commons.math3.Field: java.lang.Class getRuntimeClass()>();

        $r3 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r2, $i0);

        $r4 = (org.apache.commons.math3.FieldElement[]) $r3;

        return $r4;
    }
    private static int changeIndexSign(int)
    {
        int $i0;

        $i0 := @parameter0: int;

        $i0 = neg $i0;

        $i0 = $i0 + -1;

        return $i0;
    }
    private static int computeCapacity(int)
    {
        int $i0, $i1;
        float $f0;
        double $d0;

        $i0 := @parameter0: int;

        if $i0 != 0 goto label1;

        return 1;

     label1:
        $f0 = (float) $i0;

        $f0 = $f0 / 0.5F;

        $d0 = (double) $f0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double ceil(double)>($d0);

        $i0 = (int) $d0;

        $i1 = staticinvoke <java.lang.Integer: int highestOneBit(int)>($i0);

        if $i1 == $i0 goto label2;

        $i0 = staticinvoke <org.apache.commons.math3.util.OpenIntToFieldHashMap: int nextPowerOfTwo(int)>($i0);

     label2:
        return $i0;
    }
    private boolean containsKey(int, int)
    {
        org.apache.commons.math3.util.OpenIntToFieldHashMap r0;
        int $i0, $i1;
        byte[] $r1;
        byte $b2;
        int[] $r2;

        r0 := @this: org.apache.commons.math3.util.OpenIntToFieldHashMap;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        if $i0 != 0 goto label1;

        $r1 = r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: byte[] states>;

        $b2 = $r1[$i1];

        if $b2 != 1 goto label2;

     label1:
        $r2 = r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: int[] keys>;

        $i1 = $r2[$i1];

        if $i1 != $i0 goto label2;

        return 1;

     label2:
        return 0;
    }
    private org.apache.commons.math3.FieldElement doRemove(int)
    {
        org.apache.commons.math3.util.OpenIntToFieldHashMap r0;
        int $i0;
        org.apache.commons.math3.FieldElement r1, $r5;
        int[] $r2;
        byte[] $r3;
        org.apache.commons.math3.FieldElement[] $r4;

        r0 := @this: org.apache.commons.math3.util.OpenIntToFieldHashMap;

        $i0 := @parameter0: int;

        $r2 = r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: int[] keys>;

        $r2[$i0] = 0;

        $r3 = r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: byte[] states>;

        $r3[$i0] = 2;

        $r4 = r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: org.apache.commons.math3.FieldElement[] values>;

        r1 = $r4[$i0];

        $r4 = r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: org.apache.commons.math3.FieldElement[] values>;

        $r5 = r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: org.apache.commons.math3.FieldElement missingEntries>;

        $r4[$i0] = $r5;

        $i0 = r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: int size>;

        $i0 = $i0 + -1;

        r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: int size> = $i0;

        $i0 = r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: int count>;

        $i0 = $i0 + 1;

        r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: int count> = $i0;

        return r1;
    }
    private int findInsertionIndex(int)
    {
        org.apache.commons.math3.util.OpenIntToFieldHashMap r0;
        int $i0, $i1;
        byte[] $r1;
        int[] $r2;

        r0 := @this: org.apache.commons.math3.util.OpenIntToFieldHashMap;

        $i0 := @parameter0: int;

        $r2 = r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: int[] keys>;

        $r1 = r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: byte[] states>;

        $i1 = r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: int mask>;

        $i0 = staticinvoke <org.apache.commons.math3.util.OpenIntToFieldHashMap: int findInsertionIndex(int[],byte[],int,int)>($r2, $r1, $i0, $i1);

        return $i0;
    }
    private static int findInsertionIndex(int[], byte[], int, int)
    {
        int[] $r0;
        byte[] $r1;
        int $i0, $i1, $i2, i3, $i5, $i6, $i7;
        byte $b4;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: byte[];

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $i2 = staticinvoke <org.apache.commons.math3.util.OpenIntToFieldHashMap: int hashOf(int)>($i0);

        i3 = $i2 & $i1;

        $b4 = $r1[i3];

        if $b4 != 0 goto label1;

        return i3;

     label1:
        $b4 = $r1[i3];

        if $b4 != 1 goto label2;

        $i5 = $r0[i3];

        if $i5 != $i0 goto label2;

        $i0 = staticinvoke <org.apache.commons.math3.util.OpenIntToFieldHashMap: int changeIndexSign(int)>(i3);

        return $i0;

     label2:
        $i2 = staticinvoke <org.apache.commons.math3.util.OpenIntToFieldHashMap: int perturb(int)>($i2);

        $i5 = i3;

        $b4 = $r1[i3];

        if $b4 != 1 goto label4;

     label3:
        i3 = staticinvoke <org.apache.commons.math3.util.OpenIntToFieldHashMap: int probe(int,int)>($i2, $i5);

        $i5 = i3;

        i3 = i3 & $i1;

        $i2 = $i2 >> 5;

        $b4 = $r1[i3];

        if $b4 != 1 goto label4;

        $i6 = $r0[i3];

        if $i6 != $i0 goto label3;

     label4:
        $b4 = $r1[i3];

        if $b4 != 0 goto label5;

        return i3;

     label5:
        $b4 = $r1[i3];

        if $b4 != 1 goto label6;

        $i0 = staticinvoke <org.apache.commons.math3.util.OpenIntToFieldHashMap: int changeIndexSign(int)>(i3);

        return $i0;

     label6:
        $i6 = staticinvoke <org.apache.commons.math3.util.OpenIntToFieldHashMap: int probe(int,int)>($i2, $i5);

        $i5 = $i6;

        $i6 = $i6 & $i1;

        $b4 = $r1[$i6];

        if $b4 == 0 goto label8;

        $b4 = $r1[$i6];

        if $b4 != 1 goto label7;

        $i7 = $r0[$i6];

        if $i7 != $i0 goto label7;

        $i0 = staticinvoke <org.apache.commons.math3.util.OpenIntToFieldHashMap: int changeIndexSign(int)>($i6);

        return $i0;

     label7:
        $i2 = $i2 >> 5;

        goto label6;

     label8:
        return i3;
    }
    private void growTable()
    {
        org.apache.commons.math3.util.OpenIntToFieldHashMap r0;
        int i0, i1, i2, i3, $i5;
        int[] r1, r3;
        byte[] r2, r4;
        org.apache.commons.math3.FieldElement[] r5, $r6;
        byte $b4;
        org.apache.commons.math3.FieldElement $r7;

        r0 := @this: org.apache.commons.math3.util.OpenIntToFieldHashMap;

        r2 = r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: byte[] states>;

        i2 = lengthof r2;

        r3 = r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: int[] keys>;

        r5 = r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: org.apache.commons.math3.FieldElement[] values>;

        r4 = r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: byte[] states>;

        i0 = i2 * 2;

        r1 = newarray (int)[i0];

        $r6 = specialinvoke r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: org.apache.commons.math3.FieldElement[] buildArray(int)>(i0);

        r2 = newarray (byte)[i0];

        i1 = i0 + -1;

        i3 = 0;

     label1:
        if i3 >= i2 goto label3;

        $b4 = r4[i3];

        if $b4 != 1 goto label2;

        i0 = r3[i3];

        $i5 = staticinvoke <org.apache.commons.math3.util.OpenIntToFieldHashMap: int findInsertionIndex(int[],byte[],int,int)>(r1, r2, i0, i1);

        r1[$i5] = i0;

        $r7 = r5[i3];

        $r6[$i5] = $r7;

        r2[$i5] = 1;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: int mask> = i1;

        r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: int[] keys> = r1;

        r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: org.apache.commons.math3.FieldElement[] values> = $r6;

        r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: byte[] states> = r2;

        return;
    }
    private static int hashOf(int)
    {
        int $i0, $i1, $i2;

        $i0 := @parameter0: int;

        $i1 = $i0 >>> 20;

        $i2 = $i0 >>> 12;

        $i1 = $i1 ^ $i2;

        $i0 = $i0 ^ $i1;

        $i1 = $i0 >>> 7;

        $i1 = $i1 ^ $i0;

        $i0 = $i0 >>> 4;

        $i0 = $i1 ^ $i0;

        return $i0;
    }
    private static int nextPowerOfTwo(int)
    {
        int $i0;

        $i0 := @parameter0: int;

        $i0 = staticinvoke <java.lang.Integer: int highestOneBit(int)>($i0);

        $i0 = $i0 << 1;

        return $i0;
    }
    private static int perturb(int)
    {
        int $i0;

        $i0 := @parameter0: int;

        $i0 = 2147483647 & $i0;

        return $i0;
    }
    private static int probe(int, int)
    {
        int $i0, $i1, $i2;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 = $i1 << 2;

        $i1 = $i2 + $i1;

        $i0 = $i1 + $i0;

        $i0 = $i0 + 1;

        return $i0;
    }
    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.apache.commons.math3.util.OpenIntToFieldHashMap r0;
        java.io.ObjectInputStream $r1;

        r0 := @this: org.apache.commons.math3.util.OpenIntToFieldHashMap;

        $r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke $r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: int count> = 0;

        return;
    }
    private boolean shouldGrowTable()
    {
        org.apache.commons.math3.util.OpenIntToFieldHashMap r0;
        int $i0;
        float $f0, $f1;
        byte $b1;

        r0 := @this: org.apache.commons.math3.util.OpenIntToFieldHashMap;

        $i0 = r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: int size>;

        $f0 = (float) $i0;

        $i0 = r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: int mask>;

        $i0 = $i0 + 1;

        $f1 = (float) $i0;

        $f1 = $f1 * 0.5F;

        $b1 = $f0 cmpl $f1;

        if $b1 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean containsKey(int)
    {
        org.apache.commons.math3.util.OpenIntToFieldHashMap r0;
        int $i0, $i1, $i2, i3, $i5;
        boolean $z0;
        byte[] $r1;
        byte $b4;

        r0 := @this: org.apache.commons.math3.util.OpenIntToFieldHashMap;

        $i0 := @parameter0: int;

        $i1 = staticinvoke <org.apache.commons.math3.util.OpenIntToFieldHashMap: int hashOf(int)>($i0);

        $i2 = r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: int mask>;

        i3 = $i1 & $i2;

        $z0 = specialinvoke r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: boolean containsKey(int,int)>($i0, i3);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r1 = r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: byte[] states>;

        $b4 = $r1[i3];

        if $b4 != 0 goto label2;

        return 0;

     label2:
        $i2 = i3;

        $i1 = staticinvoke <org.apache.commons.math3.util.OpenIntToFieldHashMap: int perturb(int)>($i1);

     label3:
        $r1 = r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: byte[] states>;

        $b4 = $r1[i3];

        if $b4 == 0 goto label4;

        i3 = staticinvoke <org.apache.commons.math3.util.OpenIntToFieldHashMap: int probe(int,int)>($i1, $i2);

        $i2 = i3;

        $i5 = r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: int mask>;

        i3 = i3 & $i5;

        $z0 = specialinvoke r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: boolean containsKey(int,int)>($i0, i3);

        if $z0 != 0 goto label5;

        $i1 = $i1 >> 5;

        goto label3;

     label4:
        return 0;

     label5:
        return 1;
    }
    public org.apache.commons.math3.FieldElement get(int)
    {
        org.apache.commons.math3.util.OpenIntToFieldHashMap r0;
        int $i0, $i1, $i2, i3, $i5;
        boolean $z0;
        org.apache.commons.math3.FieldElement[] $r1;
        org.apache.commons.math3.FieldElement $r2;
        byte[] $r3;
        byte $b4;

        r0 := @this: org.apache.commons.math3.util.OpenIntToFieldHashMap;

        $i0 := @parameter0: int;

        $i1 = staticinvoke <org.apache.commons.math3.util.OpenIntToFieldHashMap: int hashOf(int)>($i0);

        $i2 = r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: int mask>;

        i3 = $i1 & $i2;

        $z0 = specialinvoke r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: boolean containsKey(int,int)>($i0, i3);

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: org.apache.commons.math3.FieldElement[] values>;

        $r2 = $r1[i3];

        return $r2;

     label1:
        $r3 = r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: byte[] states>;

        $b4 = $r3[i3];

        if $b4 != 0 goto label2;

        $r2 = r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: org.apache.commons.math3.FieldElement missingEntries>;

        return $r2;

     label2:
        $i2 = i3;

        $i1 = staticinvoke <org.apache.commons.math3.util.OpenIntToFieldHashMap: int perturb(int)>($i1);

     label3:
        $r3 = r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: byte[] states>;

        $b4 = $r3[i3];

        if $b4 == 0 goto label5;

        i3 = staticinvoke <org.apache.commons.math3.util.OpenIntToFieldHashMap: int probe(int,int)>($i1, $i2);

        $i2 = i3;

        $i5 = r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: int mask>;

        i3 = i3 & $i5;

        $z0 = specialinvoke r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: boolean containsKey(int,int)>($i0, i3);

        if $z0 == 0 goto label4;

        $r1 = r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: org.apache.commons.math3.FieldElement[] values>;

        $r2 = $r1[i3];

        return $r2;

     label4:
        $i1 = $i1 >> 5;

        goto label3;

     label5:
        $r2 = r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: org.apache.commons.math3.FieldElement missingEntries>;

        return $r2;
    }
    public org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator iterator()
    {
        org.apache.commons.math3.util.OpenIntToFieldHashMap r0;
        org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator $r1;

        r0 := @this: org.apache.commons.math3.util.OpenIntToFieldHashMap;

        $r1 = new org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator;

        specialinvoke $r1.<org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator: void <init>(org.apache.commons.math3.util.OpenIntToFieldHashMap,org.apache.commons.math3.util.OpenIntToFieldHashMap$1)>(r0, null);

        return $r1;
    }
    public org.apache.commons.math3.FieldElement put(int, org.apache.commons.math3.FieldElement)
    {
        org.apache.commons.math3.util.OpenIntToFieldHashMap r0;
        int $i0, $i1, i2;
        org.apache.commons.math3.FieldElement r1, r2;
        boolean z0;
        org.apache.commons.math3.FieldElement[] $r3;
        int[] $r4;
        byte[] $r5;

        r0 := @this: org.apache.commons.math3.util.OpenIntToFieldHashMap;

        $i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.FieldElement;

        $i1 = specialinvoke r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: int findInsertionIndex(int)>($i0);

        i2 = $i1;

        r2 = r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: org.apache.commons.math3.FieldElement missingEntries>;

        z0 = 1;

        if $i1 >= 0 goto label1;

        $i1 = staticinvoke <org.apache.commons.math3.util.OpenIntToFieldHashMap: int changeIndexSign(int)>($i1);

        i2 = $i1;

        $r3 = r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: org.apache.commons.math3.FieldElement[] values>;

        r2 = $r3[$i1];

        z0 = 0;

     label1:
        $r4 = r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: int[] keys>;

        $r4[i2] = $i0;

        $r5 = r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: byte[] states>;

        $r5[i2] = 1;

        $r3 = r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: org.apache.commons.math3.FieldElement[] values>;

        $r3[i2] = r1;

        if z0 == 0 goto label3;

        $i0 = r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: int size>;

        $i0 = $i0 + 1;

        r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: int size> = $i0;

        z0 = specialinvoke r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: boolean shouldGrowTable()>();

        if z0 == 0 goto label2;

        specialinvoke r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: void growTable()>();

     label2:
        $i0 = r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: int count>;

        $i0 = $i0 + 1;

        r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: int count> = $i0;

     label3:
        return r2;
    }
    public org.apache.commons.math3.FieldElement remove(int)
    {
        org.apache.commons.math3.util.OpenIntToFieldHashMap r0;
        int $i0, $i1, $i2, i3, $i5;
        boolean $z0;
        org.apache.commons.math3.FieldElement $r1;
        byte[] $r2;
        byte $b4;

        r0 := @this: org.apache.commons.math3.util.OpenIntToFieldHashMap;

        $i0 := @parameter0: int;

        $i1 = staticinvoke <org.apache.commons.math3.util.OpenIntToFieldHashMap: int hashOf(int)>($i0);

        $i2 = r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: int mask>;

        i3 = $i1 & $i2;

        $z0 = specialinvoke r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: boolean containsKey(int,int)>($i0, i3);

        if $z0 == 0 goto label1;

        $r1 = specialinvoke r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: org.apache.commons.math3.FieldElement doRemove(int)>(i3);

        return $r1;

     label1:
        $r2 = r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: byte[] states>;

        $b4 = $r2[i3];

        if $b4 != 0 goto label2;

        $r1 = r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: org.apache.commons.math3.FieldElement missingEntries>;

        return $r1;

     label2:
        $i2 = i3;

        $i1 = staticinvoke <org.apache.commons.math3.util.OpenIntToFieldHashMap: int perturb(int)>($i1);

     label3:
        $r2 = r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: byte[] states>;

        $b4 = $r2[i3];

        if $b4 == 0 goto label5;

        i3 = staticinvoke <org.apache.commons.math3.util.OpenIntToFieldHashMap: int probe(int,int)>($i1, $i2);

        $i2 = i3;

        $i5 = r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: int mask>;

        i3 = i3 & $i5;

        $z0 = specialinvoke r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: boolean containsKey(int,int)>($i0, i3);

        if $z0 == 0 goto label4;

        $r1 = specialinvoke r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: org.apache.commons.math3.FieldElement doRemove(int)>(i3);

        return $r1;

     label4:
        $i1 = $i1 >> 5;

        goto label3;

     label5:
        $r1 = r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: org.apache.commons.math3.FieldElement missingEntries>;

        return $r1;
    }
    public int size()
    {
        org.apache.commons.math3.util.OpenIntToFieldHashMap r0;
        int i0;

        r0 := @this: org.apache.commons.math3.util.OpenIntToFieldHashMap;

        i0 = r0.<org.apache.commons.math3.util.OpenIntToFieldHashMap: int size>;

        return i0;
    }
