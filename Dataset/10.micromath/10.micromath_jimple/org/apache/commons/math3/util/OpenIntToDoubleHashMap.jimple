org.apache.commons.math3.util.OpenIntToDoubleHashMap extends java.lang.Object implements java.io.Serializable
private static final int DEFAULT_EXPECTED_SIZE
protected static final byte FREE
protected static final byte FULL
private static final float LOAD_FACTOR
private static final int PERTURB_SHIFT
protected static final byte REMOVED
private static final int RESIZE_MULTIPLIER
private static final long serialVersionUID
private transient int count
private int[] keys
private int mask
private final double missingEntries
private int size
private byte[] states
private double[] values
    public void <init>()
    {
        org.apache.commons.math3.util.OpenIntToDoubleHashMap r0;

        r0 := @this: org.apache.commons.math3.util.OpenIntToDoubleHashMap;

        specialinvoke r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: void <init>(int,double)>(16, #NaN);

        return;
    }
    public void <init>(double)
    {
        org.apache.commons.math3.util.OpenIntToDoubleHashMap r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.util.OpenIntToDoubleHashMap;

        $d0 := @parameter0: double;

        specialinvoke r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: void <init>(int,double)>(16, $d0);

        return;
    }
    public void <init>(int)
    {
        org.apache.commons.math3.util.OpenIntToDoubleHashMap r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.util.OpenIntToDoubleHashMap;

        $i0 := @parameter0: int;

        specialinvoke r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: void <init>(int,double)>($i0, #NaN);

        return;
    }
    public void <init>(int, double)
    {
        org.apache.commons.math3.util.OpenIntToDoubleHashMap r0;
        int $i0;
        double $d0;
        int[] $r1;
        double[] $r2;
        byte[] $r3;

        r0 := @this: org.apache.commons.math3.util.OpenIntToDoubleHashMap;

        $i0 := @parameter0: int;

        $d0 := @parameter1: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = staticinvoke <org.apache.commons.math3.util.OpenIntToDoubleHashMap: int computeCapacity(int)>($i0);

        $r1 = newarray (int)[$i0];

        r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: int[] keys> = $r1;

        $r2 = newarray (double)[$i0];

        r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: double[] values> = $r2;

        $r3 = newarray (byte)[$i0];

        r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: byte[] states> = $r3;

        r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: double missingEntries> = $d0;

        $i0 = $i0 + -1;

        r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: int mask> = $i0;

        return;
    }
    public void <init>(org.apache.commons.math3.util.OpenIntToDoubleHashMap)
    {
        org.apache.commons.math3.util.OpenIntToDoubleHashMap r0, $r1;
        int i0;
        int[] $r2, $r3;
        double[] $r4, $r5;
        byte[] $r6, $r7;
        double $d0;

        r0 := @this: org.apache.commons.math3.util.OpenIntToDoubleHashMap;

        $r1 := @parameter0: org.apache.commons.math3.util.OpenIntToDoubleHashMap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = $r1.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: int[] keys>;

        i0 = lengthof $r2;

        $r2 = newarray (int)[i0];

        r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: int[] keys> = $r2;

        $r2 = $r1.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: int[] keys>;

        $r3 = r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: int[] keys>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r3, 0, i0);

        $r4 = newarray (double)[i0];

        r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: double[] values> = $r4;

        $r4 = $r1.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: double[] values>;

        $r5 = r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: double[] values>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r5, 0, i0);

        $r6 = newarray (byte)[i0];

        r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: byte[] states> = $r6;

        $r6 = $r1.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: byte[] states>;

        $r7 = r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: byte[] states>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, $r7, 0, i0);

        $d0 = $r1.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: double missingEntries>;

        r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: double missingEntries> = $d0;

        i0 = $r1.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: int size>;

        r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: int size> = i0;

        i0 = $r1.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: int mask>;

        r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: int mask> = i0;

        i0 = $r1.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: int count>;

        r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: int count> = i0;

        return;
    }
    static int access$100(org.apache.commons.math3.util.OpenIntToDoubleHashMap)
    {
        org.apache.commons.math3.util.OpenIntToDoubleHashMap $r0;
        int i0;

        $r0 := @parameter0: org.apache.commons.math3.util.OpenIntToDoubleHashMap;

        i0 = $r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: int count>;

        return i0;
    }
    static int[] access$200(org.apache.commons.math3.util.OpenIntToDoubleHashMap)
    {
        org.apache.commons.math3.util.OpenIntToDoubleHashMap $r0;
        int[] r1;

        $r0 := @parameter0: org.apache.commons.math3.util.OpenIntToDoubleHashMap;

        r1 = $r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: int[] keys>;

        return r1;
    }
    static double[] access$300(org.apache.commons.math3.util.OpenIntToDoubleHashMap)
    {
        org.apache.commons.math3.util.OpenIntToDoubleHashMap $r0;
        double[] r1;

        $r0 := @parameter0: org.apache.commons.math3.util.OpenIntToDoubleHashMap;

        r1 = $r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: double[] values>;

        return r1;
    }
    static byte[] access$400(org.apache.commons.math3.util.OpenIntToDoubleHashMap)
    {
        org.apache.commons.math3.util.OpenIntToDoubleHashMap $r0;
        byte[] r1;

        $r0 := @parameter0: org.apache.commons.math3.util.OpenIntToDoubleHashMap;

        r1 = $r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: byte[] states>;

        return r1;
    }
    private static int changeIndexSign(int)
    {
        int $i0;

        $i0 := @parameter0: int;

        $i0 = neg $i0;

        $i0 = $i0 + -1;

        return $i0;
    }
    private static int computeCapacity(int)
    {
        int $i0, $i1;
        float $f0;
        double $d0;

        $i0 := @parameter0: int;

        if $i0 != 0 goto label1;

        return 1;

     label1:
        $f0 = (float) $i0;

        $f0 = $f0 / 0.5F;

        $d0 = (double) $f0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double ceil(double)>($d0);

        $i0 = (int) $d0;

        $i1 = staticinvoke <java.lang.Integer: int highestOneBit(int)>($i0);

        if $i1 == $i0 goto label2;

        $i0 = staticinvoke <org.apache.commons.math3.util.OpenIntToDoubleHashMap: int nextPowerOfTwo(int)>($i0);

     label2:
        return $i0;
    }
    private boolean containsKey(int, int)
    {
        org.apache.commons.math3.util.OpenIntToDoubleHashMap r0;
        int $i0, $i1;
        byte[] $r1;
        byte $b2;
        int[] $r2;

        r0 := @this: org.apache.commons.math3.util.OpenIntToDoubleHashMap;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        if $i0 != 0 goto label1;

        $r1 = r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: byte[] states>;

        $b2 = $r1[$i1];

        if $b2 != 1 goto label2;

     label1:
        $r2 = r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: int[] keys>;

        $i1 = $r2[$i1];

        if $i1 != $i0 goto label2;

        return 1;

     label2:
        return 0;
    }
    private double doRemove(int)
    {
        org.apache.commons.math3.util.OpenIntToDoubleHashMap r0;
        int $i0;
        double d0, $d1;
        int[] $r1;
        byte[] $r2;
        double[] $r3;

        r0 := @this: org.apache.commons.math3.util.OpenIntToDoubleHashMap;

        $i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: int[] keys>;

        $r1[$i0] = 0;

        $r2 = r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: byte[] states>;

        $r2[$i0] = 2;

        $r3 = r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: double[] values>;

        d0 = $r3[$i0];

        $r3 = r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: double[] values>;

        $d1 = r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: double missingEntries>;

        $r3[$i0] = $d1;

        $i0 = r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: int size>;

        $i0 = $i0 + -1;

        r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: int size> = $i0;

        $i0 = r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: int count>;

        $i0 = $i0 + 1;

        r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: int count> = $i0;

        return d0;
    }
    private int findInsertionIndex(int)
    {
        org.apache.commons.math3.util.OpenIntToDoubleHashMap r0;
        int $i0, $i1;
        byte[] $r1;
        int[] $r2;

        r0 := @this: org.apache.commons.math3.util.OpenIntToDoubleHashMap;

        $i0 := @parameter0: int;

        $r2 = r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: int[] keys>;

        $r1 = r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: byte[] states>;

        $i1 = r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: int mask>;

        $i0 = staticinvoke <org.apache.commons.math3.util.OpenIntToDoubleHashMap: int findInsertionIndex(int[],byte[],int,int)>($r2, $r1, $i0, $i1);

        return $i0;
    }
    private static int findInsertionIndex(int[], byte[], int, int)
    {
        int[] $r0;
        byte[] $r1;
        int $i0, $i1, $i2, i3, $i5, $i6, $i7;
        byte $b4;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: byte[];

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $i2 = staticinvoke <org.apache.commons.math3.util.OpenIntToDoubleHashMap: int hashOf(int)>($i0);

        i3 = $i2 & $i1;

        $b4 = $r1[i3];

        if $b4 != 0 goto label1;

        return i3;

     label1:
        $b4 = $r1[i3];

        if $b4 != 1 goto label2;

        $i5 = $r0[i3];

        if $i5 != $i0 goto label2;

        $i0 = staticinvoke <org.apache.commons.math3.util.OpenIntToDoubleHashMap: int changeIndexSign(int)>(i3);

        return $i0;

     label2:
        $i2 = staticinvoke <org.apache.commons.math3.util.OpenIntToDoubleHashMap: int perturb(int)>($i2);

        $i5 = i3;

        $b4 = $r1[i3];

        if $b4 != 1 goto label4;

     label3:
        i3 = staticinvoke <org.apache.commons.math3.util.OpenIntToDoubleHashMap: int probe(int,int)>($i2, $i5);

        $i5 = i3;

        i3 = i3 & $i1;

        $i2 = $i2 >> 5;

        $b4 = $r1[i3];

        if $b4 != 1 goto label4;

        $i6 = $r0[i3];

        if $i6 != $i0 goto label3;

     label4:
        $b4 = $r1[i3];

        if $b4 != 0 goto label5;

        return i3;

     label5:
        $b4 = $r1[i3];

        if $b4 != 1 goto label6;

        $i0 = staticinvoke <org.apache.commons.math3.util.OpenIntToDoubleHashMap: int changeIndexSign(int)>(i3);

        return $i0;

     label6:
        $i6 = staticinvoke <org.apache.commons.math3.util.OpenIntToDoubleHashMap: int probe(int,int)>($i2, $i5);

        $i5 = $i6;

        $i6 = $i6 & $i1;

        $b4 = $r1[$i6];

        if $b4 == 0 goto label8;

        $b4 = $r1[$i6];

        if $b4 != 1 goto label7;

        $i7 = $r0[$i6];

        if $i7 != $i0 goto label7;

        $i0 = staticinvoke <org.apache.commons.math3.util.OpenIntToDoubleHashMap: int changeIndexSign(int)>($i6);

        return $i0;

     label7:
        $i2 = $i2 >> 5;

        goto label6;

     label8:
        return i3;
    }
    private void growTable()
    {
        org.apache.commons.math3.util.OpenIntToDoubleHashMap r0;
        int i0, i1, i2, $i3, i4;
        int[] r1, r4;
        byte[] r2, r5;
        double[] r3, r6;
        byte $b5;
        double $d0;

        r0 := @this: org.apache.commons.math3.util.OpenIntToDoubleHashMap;

        r2 = r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: byte[] states>;

        i2 = lengthof r2;

        r4 = r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: int[] keys>;

        r6 = r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: double[] values>;

        r5 = r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: byte[] states>;

        i0 = i2 * 2;

        r1 = newarray (int)[i0];

        r3 = newarray (double)[i0];

        r2 = newarray (byte)[i0];

        i1 = i0 + -1;

        i4 = 0;

     label1:
        if i4 >= i2 goto label3;

        $b5 = r5[i4];

        if $b5 != 1 goto label2;

        i0 = r4[i4];

        $i3 = staticinvoke <org.apache.commons.math3.util.OpenIntToDoubleHashMap: int findInsertionIndex(int[],byte[],int,int)>(r1, r2, i0, i1);

        r1[$i3] = i0;

        $d0 = r6[i4];

        r3[$i3] = $d0;

        r2[$i3] = 1;

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: int mask> = i1;

        r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: int[] keys> = r1;

        r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: double[] values> = r3;

        r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: byte[] states> = r2;

        return;
    }
    private static int hashOf(int)
    {
        int $i0, $i1, $i2;

        $i0 := @parameter0: int;

        $i1 = $i0 >>> 20;

        $i2 = $i0 >>> 12;

        $i1 = $i1 ^ $i2;

        $i0 = $i0 ^ $i1;

        $i1 = $i0 >>> 7;

        $i1 = $i1 ^ $i0;

        $i0 = $i0 >>> 4;

        $i0 = $i1 ^ $i0;

        return $i0;
    }
    private static int nextPowerOfTwo(int)
    {
        int $i0;

        $i0 := @parameter0: int;

        $i0 = staticinvoke <java.lang.Integer: int highestOneBit(int)>($i0);

        $i0 = $i0 << 1;

        return $i0;
    }
    private static int perturb(int)
    {
        int $i0;

        $i0 := @parameter0: int;

        $i0 = 2147483647 & $i0;

        return $i0;
    }
    private static int probe(int, int)
    {
        int $i0, $i1, $i2;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 = $i1 << 2;

        $i1 = $i2 + $i1;

        $i0 = $i1 + $i0;

        $i0 = $i0 + 1;

        return $i0;
    }
    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.apache.commons.math3.util.OpenIntToDoubleHashMap r0;
        java.io.ObjectInputStream $r1;

        r0 := @this: org.apache.commons.math3.util.OpenIntToDoubleHashMap;

        $r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke $r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: int count> = 0;

        return;
    }
    private boolean shouldGrowTable()
    {
        org.apache.commons.math3.util.OpenIntToDoubleHashMap r0;
        int $i0;
        float $f0, $f1;
        byte $b1;

        r0 := @this: org.apache.commons.math3.util.OpenIntToDoubleHashMap;

        $i0 = r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: int size>;

        $f0 = (float) $i0;

        $i0 = r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: int mask>;

        $i0 = $i0 + 1;

        $f1 = (float) $i0;

        $f1 = $f1 * 0.5F;

        $b1 = $f0 cmpl $f1;

        if $b1 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean containsKey(int)
    {
        org.apache.commons.math3.util.OpenIntToDoubleHashMap r0;
        int $i0, $i1, $i2, i3, $i5;
        boolean $z0;
        byte[] $r1;
        byte $b4;

        r0 := @this: org.apache.commons.math3.util.OpenIntToDoubleHashMap;

        $i0 := @parameter0: int;

        $i1 = staticinvoke <org.apache.commons.math3.util.OpenIntToDoubleHashMap: int hashOf(int)>($i0);

        $i2 = r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: int mask>;

        i3 = $i1 & $i2;

        $z0 = specialinvoke r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: boolean containsKey(int,int)>($i0, i3);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r1 = r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: byte[] states>;

        $b4 = $r1[i3];

        if $b4 != 0 goto label2;

        return 0;

     label2:
        $i2 = i3;

        $i1 = staticinvoke <org.apache.commons.math3.util.OpenIntToDoubleHashMap: int perturb(int)>($i1);

     label3:
        $r1 = r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: byte[] states>;

        $b4 = $r1[i3];

        if $b4 == 0 goto label4;

        i3 = staticinvoke <org.apache.commons.math3.util.OpenIntToDoubleHashMap: int probe(int,int)>($i1, $i2);

        $i2 = i3;

        $i5 = r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: int mask>;

        i3 = i3 & $i5;

        $z0 = specialinvoke r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: boolean containsKey(int,int)>($i0, i3);

        if $z0 != 0 goto label5;

        $i1 = $i1 >> 5;

        goto label3;

     label4:
        return 0;

     label5:
        return 1;
    }
    public double get(int)
    {
        org.apache.commons.math3.util.OpenIntToDoubleHashMap r0;
        int $i0, $i1, $i2, i3, $i5;
        boolean $z0;
        double[] $r1;
        double $d0;
        byte[] $r2;
        byte $b4;

        r0 := @this: org.apache.commons.math3.util.OpenIntToDoubleHashMap;

        $i0 := @parameter0: int;

        $i1 = staticinvoke <org.apache.commons.math3.util.OpenIntToDoubleHashMap: int hashOf(int)>($i0);

        $i2 = r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: int mask>;

        i3 = $i1 & $i2;

        $z0 = specialinvoke r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: boolean containsKey(int,int)>($i0, i3);

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: double[] values>;

        $d0 = $r1[i3];

        return $d0;

     label1:
        $r2 = r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: byte[] states>;

        $b4 = $r2[i3];

        if $b4 != 0 goto label2;

        $d0 = r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: double missingEntries>;

        return $d0;

     label2:
        $i2 = i3;

        $i1 = staticinvoke <org.apache.commons.math3.util.OpenIntToDoubleHashMap: int perturb(int)>($i1);

     label3:
        $r2 = r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: byte[] states>;

        $b4 = $r2[i3];

        if $b4 == 0 goto label5;

        i3 = staticinvoke <org.apache.commons.math3.util.OpenIntToDoubleHashMap: int probe(int,int)>($i1, $i2);

        $i2 = i3;

        $i5 = r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: int mask>;

        i3 = i3 & $i5;

        $z0 = specialinvoke r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: boolean containsKey(int,int)>($i0, i3);

        if $z0 == 0 goto label4;

        $r1 = r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: double[] values>;

        $d0 = $r1[i3];

        return $d0;

     label4:
        $i1 = $i1 >> 5;

        goto label3;

     label5:
        $d0 = r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: double missingEntries>;

        return $d0;
    }
    public org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator iterator()
    {
        org.apache.commons.math3.util.OpenIntToDoubleHashMap r0;
        org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator $r1;

        r0 := @this: org.apache.commons.math3.util.OpenIntToDoubleHashMap;

        $r1 = new org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator;

        specialinvoke $r1.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: void <init>(org.apache.commons.math3.util.OpenIntToDoubleHashMap,org.apache.commons.math3.util.OpenIntToDoubleHashMap$1)>(r0, null);

        return $r1;
    }
    public double put(int, double)
    {
        org.apache.commons.math3.util.OpenIntToDoubleHashMap r0;
        int $i0, $i1, i2;
        double $d0, d1;
        boolean z0;
        double[] $r1;
        int[] $r2;
        byte[] $r3;

        r0 := @this: org.apache.commons.math3.util.OpenIntToDoubleHashMap;

        $i0 := @parameter0: int;

        $d0 := @parameter1: double;

        $i1 = specialinvoke r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: int findInsertionIndex(int)>($i0);

        i2 = $i1;

        d1 = r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: double missingEntries>;

        z0 = 1;

        if $i1 >= 0 goto label1;

        $i1 = staticinvoke <org.apache.commons.math3.util.OpenIntToDoubleHashMap: int changeIndexSign(int)>($i1);

        i2 = $i1;

        $r1 = r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: double[] values>;

        d1 = $r1[$i1];

        z0 = 0;

     label1:
        $r2 = r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: int[] keys>;

        $r2[i2] = $i0;

        $r3 = r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: byte[] states>;

        $r3[i2] = 1;

        $r1 = r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: double[] values>;

        $r1[i2] = $d0;

        if z0 == 0 goto label3;

        $i0 = r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: int size>;

        $i0 = $i0 + 1;

        r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: int size> = $i0;

        z0 = specialinvoke r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: boolean shouldGrowTable()>();

        if z0 == 0 goto label2;

        specialinvoke r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: void growTable()>();

     label2:
        $i0 = r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: int count>;

        $i0 = $i0 + 1;

        r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: int count> = $i0;

     label3:
        return d1;
    }
    public double remove(int)
    {
        org.apache.commons.math3.util.OpenIntToDoubleHashMap r0;
        int $i0, $i1, $i2, i3, $i5;
        boolean $z0;
        double $d0;
        byte[] $r1;
        byte $b4;

        r0 := @this: org.apache.commons.math3.util.OpenIntToDoubleHashMap;

        $i0 := @parameter0: int;

        $i1 = staticinvoke <org.apache.commons.math3.util.OpenIntToDoubleHashMap: int hashOf(int)>($i0);

        $i2 = r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: int mask>;

        i3 = $i1 & $i2;

        $z0 = specialinvoke r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: boolean containsKey(int,int)>($i0, i3);

        if $z0 == 0 goto label1;

        $d0 = specialinvoke r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: double doRemove(int)>(i3);

        return $d0;

     label1:
        $r1 = r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: byte[] states>;

        $b4 = $r1[i3];

        if $b4 != 0 goto label2;

        $d0 = r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: double missingEntries>;

        return $d0;

     label2:
        $i2 = i3;

        $i1 = staticinvoke <org.apache.commons.math3.util.OpenIntToDoubleHashMap: int perturb(int)>($i1);

     label3:
        $r1 = r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: byte[] states>;

        $b4 = $r1[i3];

        if $b4 == 0 goto label5;

        i3 = staticinvoke <org.apache.commons.math3.util.OpenIntToDoubleHashMap: int probe(int,int)>($i1, $i2);

        $i2 = i3;

        $i5 = r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: int mask>;

        i3 = i3 & $i5;

        $z0 = specialinvoke r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: boolean containsKey(int,int)>($i0, i3);

        if $z0 == 0 goto label4;

        $d0 = specialinvoke r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: double doRemove(int)>(i3);

        return $d0;

     label4:
        $i1 = $i1 >> 5;

        goto label3;

     label5:
        $d0 = r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: double missingEntries>;

        return $d0;
    }
    public int size()
    {
        org.apache.commons.math3.util.OpenIntToDoubleHashMap r0;
        int i0;

        r0 := @this: org.apache.commons.math3.util.OpenIntToDoubleHashMap;

        i0 = r0.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: int size>;

        return i0;
    }
