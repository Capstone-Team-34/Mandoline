org.apache.commons.math3.util.ContinuedFraction extends java.lang.Object
private static final double DEFAULT_EPSILON
    protected void <init>()
    {
        org.apache.commons.math3.util.ContinuedFraction r0;

        r0 := @this: org.apache.commons.math3.util.ContinuedFraction;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public double evaluate(double) throws org.apache.commons.math3.exception.ConvergenceException
    {
        org.apache.commons.math3.util.ContinuedFraction r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.util.ContinuedFraction;

        $d0 := @parameter0: double;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.util.ContinuedFraction: double evaluate(double,double,int)>($d0, 1.0E-8, 2147483647);

        return $d0;
    }
    public double evaluate(double, double) throws org.apache.commons.math3.exception.ConvergenceException
    {
        org.apache.commons.math3.util.ContinuedFraction r0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.util.ContinuedFraction;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.util.ContinuedFraction: double evaluate(double,double,int)>($d0, $d1, 2147483647);

        return $d0;
    }
    public double evaluate(double, double, int) throws org.apache.commons.math3.exception.ConvergenceException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.util.ContinuedFraction r0;
        double $d0, $d1, d2, $d3, d4, d5, d6;
        int $i0, i1;
        boolean $z0;
        org.apache.commons.math3.exception.ConvergenceException $r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        java.lang.Object[] $r3;
        java.lang.Double $r4;
        byte $b2;
        org.apache.commons.math3.exception.MaxCountExceededException $r5;
        java.lang.Integer $r6;

        r0 := @this: org.apache.commons.math3.util.ContinuedFraction;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $i0 := @parameter2: int;

        $d3 = virtualinvoke r0.<org.apache.commons.math3.util.ContinuedFraction: double getA(int,double)>(0, $d0);

        d4 = $d3;

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,double)>($d3, 0.0, 1.0E-50);

        if $z0 == 0 goto label1;

        d4 = 1.0E-50;

     label1:
        i1 = 1;

        d5 = 0.0;

        d6 = d4;

        $d3 = d4;

     label2:
        if i1 >= $i0 goto label7;

        $d3 = virtualinvoke r0.<org.apache.commons.math3.util.ContinuedFraction: double getA(int,double)>(i1, $d0);

        d2 = virtualinvoke r0.<org.apache.commons.math3.util.ContinuedFraction: double getB(int,double)>(i1, $d0);

        d5 = d2 * d5;

        d5 = $d3 + d5;

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,double)>(d5, 0.0, 1.0E-50);

        if $z0 == 0 goto label3;

        d5 = 1.0E-50;

     label3:
        d6 = d2 / d6;

        d6 = $d3 + d6;

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,double)>(d6, 0.0, 1.0E-50);

        if $z0 == 0 goto label4;

        d6 = 1.0E-50;

     label4:
        d5 = 1.0 / d5;

        d2 = d6 * d5;

        $d3 = d4 * d2;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d3);

        if $z0 == 0 goto label5;

        $r1 = new org.apache.commons.math3.exception.ConvergenceException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats CONTINUED_FRACTION_INFINITY_DIVERGENCE>;

        $r3 = newarray (java.lang.Object)[1];

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r3[0] = $r4;

        specialinvoke $r1.<org.apache.commons.math3.exception.ConvergenceException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r2, $r3);

        throw $r1;

     label5:
        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d3);

        if $z0 == 0 goto label6;

        $r1 = new org.apache.commons.math3.exception.ConvergenceException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats CONTINUED_FRACTION_NAN_DIVERGENCE>;

        $r3 = newarray (java.lang.Object)[1];

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r3[0] = $r4;

        specialinvoke $r1.<org.apache.commons.math3.exception.ConvergenceException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r2, $r3);

        throw $r1;

     label6:
        d4 = d2 - 1.0;

        d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d4);

        $b2 = d4 cmpg $d1;

        if $b2 >= 0 goto label8;

     label7:
        if i1 < $i0 goto label9;

        $r5 = new org.apache.commons.math3.exception.MaxCountExceededException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NON_CONVERGENT_CONTINUED_FRACTION>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3 = newarray (java.lang.Object)[1];

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r3[0] = $r4;

        specialinvoke $r5.<org.apache.commons.math3.exception.MaxCountExceededException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])>($r2, $r6, $r3);

        throw $r5;

     label8:
        d4 = $d3;

        i1 = i1 + 1;

        goto label2;

     label9:
        return $d3;
    }
    public double evaluate(double, int) throws org.apache.commons.math3.exception.ConvergenceException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.util.ContinuedFraction r0;
        double $d0;
        int $i0;

        r0 := @this: org.apache.commons.math3.util.ContinuedFraction;

        $d0 := @parameter0: double;

        $i0 := @parameter1: int;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.util.ContinuedFraction: double evaluate(double,double,int)>($d0, 1.0E-8, $i0);

        return $d0;
    }
protected abstract double getA(int, double) { 
// no body
} 
protected abstract double getB(int, double) { 
// no body
} 
