org.apache.commons.math3.util.MathArrays extends java.lang.Object
    private void <init>()
    {
        org.apache.commons.math3.util.MathArrays r0;

        r0 := @this: org.apache.commons.math3.util.MathArrays;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static java.lang.Object[] buildArray(org.apache.commons.math3.Field, int)
    {
        org.apache.commons.math3.Field r0;
        int $i0;
        java.lang.Class $r1;
        java.lang.Object $r2;
        java.lang.Object[] $r3;

        r0 := @parameter0: org.apache.commons.math3.Field;

        $i0 := @parameter1: int;

        $r1 = interfaceinvoke r0.<org.apache.commons.math3.Field: java.lang.Class getRuntimeClass()>();

        $r2 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r1, $i0);

        $r3 = (java.lang.Object[]) $r2;

        $r2 = interfaceinvoke r0.<org.apache.commons.math3.Field: java.lang.Object getZero()>();

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>($r3, $r2);

        return $r3;
    }
    public static java.lang.Object[][] buildArray(org.apache.commons.math3.Field, int, int)
    {
        org.apache.commons.math3.Field r0;
        int $i0, $i1;
        java.lang.Object[] $r1;
        java.lang.Class $r2;
        java.lang.Object $r3;
        java.lang.Object[][] $r4;
        int[] $r5;

        r0 := @parameter0: org.apache.commons.math3.Field;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if $i1 >= 0 goto label1;

        $r1 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[] buildArray(org.apache.commons.math3.Field,int)>(r0, 0);

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r2, $i0);

        $r4 = (java.lang.Object[][]) $r3;

        return $r4;

     label1:
        $r2 = interfaceinvoke r0.<org.apache.commons.math3.Field: java.lang.Class getRuntimeClass()>();

        $r5 = newarray (int)[2];

        $r5[0] = $i0;

        $r5[1] = $i1;

        $r3 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r2, $r5);

        $r4 = (java.lang.Object[][]) $r3;

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label3;

        $r1 = $r4[$i1];

        $r3 = interfaceinvoke r0.<org.apache.commons.math3.Field: java.lang.Object getZero()>();

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>($r1, $r3);

        $i1 = $i1 + 1;

        goto label2;

     label3:
        return $r4;
    }
    public static void checkEqualLength(double[], double[])
    {
        double[] $r0, $r1;

        $r0 := @parameter0: double[];

        $r1 := @parameter1: double[];

        staticinvoke <org.apache.commons.math3.util.MathArrays: boolean checkEqualLength(double[],double[],boolean)>($r0, $r1, 1);

        return;
    }
    public static void checkEqualLength(int[], int[])
    {
        int[] $r0, $r1;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        staticinvoke <org.apache.commons.math3.util.MathArrays: boolean checkEqualLength(int[],int[],boolean)>($r0, $r1, 1);

        return;
    }
    public static boolean checkEqualLength(double[], double[], boolean)
    {
        double[] $r0, $r1;
        boolean $z0;
        int $i0, $i1;
        org.apache.commons.math3.exception.DimensionMismatchException $r2;

        $r0 := @parameter0: double[];

        $r1 := @parameter1: double[];

        $z0 := @parameter2: boolean;

        $i0 = lengthof $r0;

        $i1 = lengthof $r1;

        if $i0 != $i1 goto label1;

        return 1;

     label1:
        if $z0 == 0 goto label2;

        $r2 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i1 = lengthof $r0;

        $i0 = lengthof $r1;

        specialinvoke $r2.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i1, $i0);

        throw $r2;

     label2:
        return 0;
    }
    public static boolean checkEqualLength(int[], int[], boolean)
    {
        int[] $r0, $r1;
        boolean $z0;
        int $i0, $i1;
        org.apache.commons.math3.exception.DimensionMismatchException $r2;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $z0 := @parameter2: boolean;

        $i0 = lengthof $r0;

        $i1 = lengthof $r1;

        if $i0 != $i1 goto label1;

        return 1;

     label1:
        if $z0 == 0 goto label2;

        $r2 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i1 = lengthof $r0;

        $i0 = lengthof $r1;

        specialinvoke $r2.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i1, $i0);

        throw $r2;

     label2:
        return 0;
    }
    public static void checkNonNegative(long[]) throws org.apache.commons.math3.exception.NotPositiveException
    {
        long[] $r0;
        java.lang.Long $r1;
        int i0, $i1;
        long $l2;
        byte $b3;
        org.apache.commons.math3.exception.NotPositiveException $r2;

        $r0 := @parameter0: long[];

        i0 = 0;

     label1:
        $i1 = lengthof $r0;

        if i0 >= $i1 goto label3;

        $l2 = $r0[i0];

        $b3 = $l2 cmp 0L;

        if $b3 >= 0 goto label2;

        $r2 = new org.apache.commons.math3.exception.NotPositiveException;

        $l2 = $r0[i0];

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        specialinvoke $r2.<org.apache.commons.math3.exception.NotPositiveException: void <init>(java.lang.Number)>($r1);

        throw $r2;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return;
    }
    public static void checkNonNegative(long[][]) throws org.apache.commons.math3.exception.NotPositiveException
    {
        long[][] $r0;
        java.lang.Long $r1;
        int i0, $i1, $i2;
        long[] $r2;
        long $l3;
        byte $b4;
        org.apache.commons.math3.exception.NotPositiveException $r3;

        $r0 := @parameter0: long[][];

        i0 = 0;

     label1:
        $i1 = lengthof $r0;

        if i0 >= $i1 goto label5;

        $i1 = 0;

     label2:
        $r2 = $r0[i0];

        $i2 = lengthof $r2;

        if $i1 >= $i2 goto label4;

        $r2 = $r0[i0];

        $l3 = $r2[$i1];

        $b4 = $l3 cmp 0L;

        if $b4 >= 0 goto label3;

        $r3 = new org.apache.commons.math3.exception.NotPositiveException;

        $r2 = $r0[i0];

        $l3 = $r2[$i1];

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);

        specialinvoke $r3.<org.apache.commons.math3.exception.NotPositiveException: void <init>(java.lang.Number)>($r1);

        throw $r3;

     label3:
        $i1 = $i1 + 1;

        goto label2;

     label4:
        i0 = i0 + 1;

        goto label1;

     label5:
        return;
    }
    public static void checkNotNaN(double[]) throws org.apache.commons.math3.exception.NotANumberException
    {
        double[] $r0;
        double $d0;
        boolean $z0;
        int i0, $i1;
        org.apache.commons.math3.exception.NotANumberException $r1;

        $r0 := @parameter0: double[];

        i0 = 0;

     label1:
        $i1 = lengthof $r0;

        if i0 >= $i1 goto label3;

        $d0 = $r0[i0];

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 == 0 goto label2;

        $r1 = new org.apache.commons.math3.exception.NotANumberException;

        specialinvoke $r1.<org.apache.commons.math3.exception.NotANumberException: void <init>()>();

        throw $r1;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return;
    }
    public static void checkOrder(double[]) throws org.apache.commons.math3.exception.NonMonotonicSequenceException
    {
        double[] $r0;
        org.apache.commons.math3.util.MathArrays$OrderDirection $r1;

        $r0 := @parameter0: double[];

        $r1 = <org.apache.commons.math3.util.MathArrays$OrderDirection: org.apache.commons.math3.util.MathArrays$OrderDirection INCREASING>;

        staticinvoke <org.apache.commons.math3.util.MathArrays: void checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)>($r0, $r1, 1);

        return;
    }
    public static void checkOrder(double[], org.apache.commons.math3.util.MathArrays$OrderDirection, boolean) throws org.apache.commons.math3.exception.NonMonotonicSequenceException
    {
        double[] $r0;
        org.apache.commons.math3.util.MathArrays$OrderDirection $r1;
        boolean $z0;

        $r0 := @parameter0: double[];

        $r1 := @parameter1: org.apache.commons.math3.util.MathArrays$OrderDirection;

        $z0 := @parameter2: boolean;

        staticinvoke <org.apache.commons.math3.util.MathArrays: boolean checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean,boolean)>($r0, $r1, $z0, 1);

        return;
    }
    public static boolean checkOrder(double[], org.apache.commons.math3.util.MathArrays$OrderDirection, boolean, boolean) throws org.apache.commons.math3.exception.NonMonotonicSequenceException
    {
        double[] $r0;
        org.apache.commons.math3.util.MathArrays$OrderDirection $r1;
        boolean $z0, $z1;
        int i0, i1, $i2;
        double d0, $d1;
        int[] $r2;
        org.apache.commons.math3.exception.MathInternalError $r3;
        byte $b3;
        org.apache.commons.math3.exception.NonMonotonicSequenceException $r4;
        java.lang.Double $r5, $r6;

        $r0 := @parameter0: double[];

        $r1 := @parameter1: org.apache.commons.math3.util.MathArrays$OrderDirection;

        $z0 := @parameter2: boolean;

        $z1 := @parameter3: boolean;

        d0 = $r0[0];

        i0 = lengthof $r0;

        i1 = 1;

     label01:
        if i1 >= i0 goto label04;

        $r2 = <org.apache.commons.math3.util.MathArrays$3: int[] $SwitchMap$org$apache$commons$math3$util$MathArrays$OrderDirection>;

        $i2 = virtualinvoke $r1.<org.apache.commons.math3.util.MathArrays$OrderDirection: int ordinal()>();

        $i2 = $r2[$i2];

        lookupswitch($i2)
        {
            case 1: goto label03;
            case 2: goto label07;
            default: goto label02;
        };

     label02:
        $r3 = new org.apache.commons.math3.exception.MathInternalError;

        specialinvoke $r3.<org.apache.commons.math3.exception.MathInternalError: void <init>()>();

        throw $r3;

     label03:
        if $z0 == 0 goto label05;

        $d1 = $r0[i1];

        $b3 = $d1 cmpg d0;

        if $b3 > 0 goto label06;

     label04:
        if i1 != i0 goto label09;

        return 1;

     label05:
        $d1 = $r0[i1];

        $b3 = $d1 cmpg d0;

        if $b3 < 0 goto label04;

     label06:
        d0 = $r0[i1];

        i1 = i1 + 1;

        goto label01;

     label07:
        if $z0 == 0 goto label08;

        $d1 = $r0[i1];

        $b3 = $d1 cmpl d0;

        if $b3 < 0 goto label06;

        goto label04;

     label08:
        $d1 = $r0[i1];

        $b3 = $d1 cmpl d0;

        if $b3 <= 0 goto label06;

        goto label04;

     label09:
        if $z1 == 0 goto label10;

        $r4 = new org.apache.commons.math3.exception.NonMonotonicSequenceException;

        $d1 = $r0[i1];

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        specialinvoke $r4.<org.apache.commons.math3.exception.NonMonotonicSequenceException: void <init>(java.lang.Number,java.lang.Number,int,org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)>($r5, $r6, i1, $r1, $z0);

        throw $r4;

     label10:
        return 0;
    }
    public static void checkPositive(double[]) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        double[] $r0;
        java.lang.Double $r1;
        int i0, $i1;
        double $d0;
        byte $b2;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r2;

        $r0 := @parameter0: double[];

        i0 = 0;

     label1:
        $i1 = lengthof $r0;

        if i0 >= $i1 goto label3;

        $d0 = $r0[i0];

        $b2 = $d0 cmpg 0.0;

        if $b2 > 0 goto label2;

        $r2 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $d0 = $r0[i0];

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        specialinvoke $r2.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(java.lang.Number)>($r1);

        throw $r2;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return;
    }
    public static void checkRectangular(long[][]) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.DimensionMismatchException
    {
        long[][] $r0;
        int i0, $i1, $i2;
        long[] $r1;
        org.apache.commons.math3.exception.DimensionMismatchException $r2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3;

        $r0 := @parameter0: long[][];

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>($r0);

        i0 = 1;

     label1:
        $i1 = lengthof $r0;

        if i0 >= $i1 goto label3;

        $r1 = $r0[i0];

        $i1 = lengthof $r1;

        $r1 = $r0[0];

        $i2 = lengthof $r1;

        if $i1 == $i2 goto label2;

        $r2 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats DIFFERENT_ROWS_LENGTHS>;

        $r1 = $r0[i0];

        i0 = lengthof $r1;

        $r1 = $r0[0];

        $i1 = lengthof $r1;

        specialinvoke $r2.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(org.apache.commons.math3.exception.util.Localizable,int,int)>($r3, i0, $i1);

        throw $r2;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return;
    }
    public static transient double[] concatenate(double[][])
    {
        double[][] $r0;
        double[] r1, $r2;
        int i0, i1, i2, $i3;

        $r0 := @parameter0: double[][];

        i1 = 0;

        i0 = lengthof $r0;

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        r1 = $r0[i2];

        $i3 = lengthof r1;

        i1 = i1 + $i3;

        i2 = i2 + 1;

        goto label1;

     label2:
        i0 = 0;

        r1 = newarray (double)[i1];

        i1 = 0;

     label3:
        i2 = lengthof $r0;

        if i1 >= i2 goto label4;

        $r2 = $r0[i1];

        i2 = lengthof $r2;

        $r2 = $r0[i1];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, i0, i2);

        i0 = i0 + i2;

        i1 = i1 + 1;

        goto label3;

     label4:
        return r1;
    }
    public static double[] convolve(double[], double[]) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NoDataException
    {
        double[] $r0, $r1, r2;
        int i0, i1, i2, $i3, i4, $i5;
        double $d0, d1, $d2;
        org.apache.commons.math3.exception.NoDataException $r3;

        $r0 := @parameter0: double[];

        $r1 := @parameter1: double[];

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>($r0);

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>($r1);

        i2 = lengthof $r0;

        i0 = lengthof $r1;

        if i2 == 0 goto label1;

        if i0 != 0 goto label2;

     label1:
        $r3 = new org.apache.commons.math3.exception.NoDataException;

        specialinvoke $r3.<org.apache.commons.math3.exception.NoDataException: void <init>()>();

        throw $r3;

     label2:
        i1 = i2 + i0;

        i1 = i1 + -1;

        r2 = newarray (double)[i1];

        i4 = 0;

     label3:
        if i4 >= i1 goto label6;

        d1 = 0.0;

        $i5 = i4 + 1;

        $i5 = $i5 - i2;

        $i3 = staticinvoke <org.apache.commons.math3.util.FastMath: int max(int,int)>(0, $i5);

        $i5 = i4 - $i3;

     label4:
        if $i3 >= i0 goto label5;

        if $i5 < 0 goto label5;

        $d2 = $r0[$i5];

        $d0 = $r1[$i3];

        $d0 = $d2 * $d0;

        d1 = d1 + $d0;

        $i5 = $i5 + -1;

        $i3 = $i3 + 1;

        goto label4;

     label5:
        r2[i4] = d1;

        i4 = i4 + 1;

        goto label3;

     label6:
        return r2;
    }
    public static double[] copyOf(double[])
    {
        double[] $r0;
        int $i0;

        $r0 := @parameter0: double[];

        $i0 = lengthof $r0;

        $r0 = staticinvoke <org.apache.commons.math3.util.MathArrays: double[] copyOf(double[],int)>($r0, $i0);

        return $r0;
    }
    public static double[] copyOf(double[], int)
    {
        double[] $r0, r1;
        int $i0, $i1;

        $r0 := @parameter0: double[];

        $i0 := @parameter1: int;

        r1 = newarray (double)[$i0];

        $i1 = lengthof $r0;

        $i0 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i0, $i1);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, r1, 0, $i0);

        return r1;
    }
    public static int[] copyOf(int[])
    {
        int[] $r0;
        int $i0;

        $r0 := @parameter0: int[];

        $i0 = lengthof $r0;

        $r0 = staticinvoke <org.apache.commons.math3.util.MathArrays: int[] copyOf(int[],int)>($r0, $i0);

        return $r0;
    }
    public static int[] copyOf(int[], int)
    {
        int[] $r0, r1;
        int $i0, $i1;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        r1 = newarray (int)[$i0];

        $i1 = lengthof $r0;

        $i0 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i0, $i1);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, r1, 0, $i0);

        return r1;
    }
    public static double[] copyOfRange(double[], int, int)
    {
        double[] $r0, r1;
        int $i0, $i1, $i2;

        $r0 := @parameter0: double[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i1 = $i1 - $i0;

        r1 = newarray (double)[$i1];

        $i2 = lengthof $r0;

        $i2 = $i2 - $i0;

        $i1 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i1, $i2);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, $i0, r1, 0, $i1);

        return r1;
    }
    public static double cosAngle(double[], double[])
    {
        double[] $r0, $r1;
        double $d0, $d1, $d2;

        $r0 := @parameter0: double[];

        $r1 := @parameter1: double[];

        $d0 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double[],double[])>($r0, $r1);

        $d1 = staticinvoke <org.apache.commons.math3.util.MathArrays: double safeNorm(double[])>($r0);

        $d2 = staticinvoke <org.apache.commons.math3.util.MathArrays: double safeNorm(double[])>($r1);

        $d1 = $d1 * $d2;

        $d0 = $d0 / $d1;

        return $d0;
    }
    public static double distance(double[], double[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        double[] $r0, $r1;
        double d0, $d1, $d2;
        int $i0, i1;

        $r0 := @parameter0: double[];

        $r1 := @parameter1: double[];

        staticinvoke <org.apache.commons.math3.util.MathArrays: void checkEqualLength(double[],double[])>($r0, $r1);

        $d1 = 0.0;

        i1 = 0;

     label1:
        $i0 = lengthof $r0;

        if i1 >= $i0 goto label2;

        $d2 = $r0[i1];

        d0 = $r1[i1];

        d0 = $d2 - d0;

        d0 = d0 * d0;

        $d1 = $d1 + d0;

        i1 = i1 + 1;

        goto label1;

     label2:
        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d1);

        return $d1;
    }
    public static double distance(int[], int[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        int[] $r0, $r1;
        double d0, $d1;
        int i0, $i1, $i2;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        staticinvoke <org.apache.commons.math3.util.MathArrays: void checkEqualLength(int[],int[])>($r0, $r1);

        $d1 = 0.0;

        i0 = 0;

     label1:
        $i1 = lengthof $r0;

        if i0 >= $i1 goto label2;

        $i1 = $r0[i0];

        $i2 = $r1[i0];

        $i1 = $i1 - $i2;

        d0 = (double) $i1;

        d0 = d0 * d0;

        $d1 = $d1 + d0;

        i0 = i0 + 1;

        goto label1;

     label2:
        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d1);

        return $d1;
    }
    public static double distance1(double[], double[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        double[] $r0, $r1;
        int $i0, i1;
        double $d0, d1, $d2;

        $r0 := @parameter0: double[];

        $r1 := @parameter1: double[];

        staticinvoke <org.apache.commons.math3.util.MathArrays: void checkEqualLength(double[],double[])>($r0, $r1);

        d1 = 0.0;

        i1 = 0;

     label1:
        $i0 = lengthof $r0;

        if i1 >= $i0 goto label2;

        $d2 = $r0[i1];

        $d0 = $r1[i1];

        $d0 = $d2 - $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        d1 = d1 + $d0;

        i1 = i1 + 1;

        goto label1;

     label2:
        return d1;
    }
    public static int distance1(int[], int[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        int[] $r0, $r1;
        int $i0, i1, i2, $i3;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        staticinvoke <org.apache.commons.math3.util.MathArrays: void checkEqualLength(int[],int[])>($r0, $r1);

        i1 = 0;

        i2 = 0;

     label1:
        $i0 = lengthof $r0;

        if i2 >= $i0 goto label2;

        $i3 = $r0[i2];

        $i0 = $r1[i2];

        $i0 = $i3 - $i0;

        $i0 = staticinvoke <org.apache.commons.math3.util.FastMath: int abs(int)>($i0);

        i1 = i1 + $i0;

        i2 = i2 + 1;

        goto label1;

     label2:
        return i1;
    }
    public static double distanceInf(double[], double[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        double[] $r0, $r1;
        int $i0, i1;
        double $d0, d1, $d2;

        $r0 := @parameter0: double[];

        $r1 := @parameter1: double[];

        staticinvoke <org.apache.commons.math3.util.MathArrays: void checkEqualLength(double[],double[])>($r0, $r1);

        d1 = 0.0;

        i1 = 0;

     label1:
        $i0 = lengthof $r0;

        if i1 >= $i0 goto label2;

        $d2 = $r0[i1];

        $d0 = $r1[i1];

        $d0 = $d2 - $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>(d1, $d0);

        i1 = i1 + 1;

        goto label1;

     label2:
        return d1;
    }
    public static int distanceInf(int[], int[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        int[] $r0, $r1;
        int $i0, i1, i2, $i3;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        staticinvoke <org.apache.commons.math3.util.MathArrays: void checkEqualLength(int[],int[])>($r0, $r1);

        i1 = 0;

        i2 = 0;

     label1:
        $i0 = lengthof $r0;

        if i2 >= $i0 goto label2;

        $i3 = $r0[i2];

        $i0 = $r1[i2];

        $i0 = $i3 - $i0;

        $i0 = staticinvoke <org.apache.commons.math3.util.FastMath: int abs(int)>($i0);

        i1 = staticinvoke <org.apache.commons.math3.util.FastMath: int max(int,int)>(i1, $i0);

        i2 = i2 + 1;

        goto label1;

     label2:
        return i1;
    }
    public static double[] ebeAdd(double[], double[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        double[] $r0, $r1, r3;
        double $d0, $d1;
        java.lang.Object $r2;
        int i0, $i1;

        $r0 := @parameter0: double[];

        $r1 := @parameter1: double[];

        staticinvoke <org.apache.commons.math3.util.MathArrays: void checkEqualLength(double[],double[])>($r0, $r1);

        $r2 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        r3 = (double[]) $r2;

        i0 = 0;

     label1:
        $i1 = lengthof $r0;

        if i0 >= $i1 goto label2;

        $d1 = r3[i0];

        $d0 = $r1[i0];

        $d0 = $d1 + $d0;

        r3[i0] = $d0;

        i0 = i0 + 1;

        goto label1;

     label2:
        return r3;
    }
    public static double[] ebeDivide(double[], double[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        double[] $r0, $r1, r3;
        double $d0, $d1;
        java.lang.Object $r2;
        int i0, $i1;

        $r0 := @parameter0: double[];

        $r1 := @parameter1: double[];

        staticinvoke <org.apache.commons.math3.util.MathArrays: void checkEqualLength(double[],double[])>($r0, $r1);

        $r2 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        r3 = (double[]) $r2;

        i0 = 0;

     label1:
        $i1 = lengthof $r0;

        if i0 >= $i1 goto label2;

        $d1 = r3[i0];

        $d0 = $r1[i0];

        $d0 = $d1 / $d0;

        r3[i0] = $d0;

        i0 = i0 + 1;

        goto label1;

     label2:
        return r3;
    }
    public static double[] ebeMultiply(double[], double[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        double[] $r0, $r1, r3;
        double $d0, $d1;
        java.lang.Object $r2;
        int i0, $i1;

        $r0 := @parameter0: double[];

        $r1 := @parameter1: double[];

        staticinvoke <org.apache.commons.math3.util.MathArrays: void checkEqualLength(double[],double[])>($r0, $r1);

        $r2 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        r3 = (double[]) $r2;

        i0 = 0;

     label1:
        $i1 = lengthof $r0;

        if i0 >= $i1 goto label2;

        $d1 = r3[i0];

        $d0 = $r1[i0];

        $d0 = $d1 * $d0;

        r3[i0] = $d0;

        i0 = i0 + 1;

        goto label1;

     label2:
        return r3;
    }
    public static double[] ebeSubtract(double[], double[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        double[] $r0, $r1, r3;
        double $d0, $d1;
        java.lang.Object $r2;
        int i0, $i1;

        $r0 := @parameter0: double[];

        $r1 := @parameter1: double[];

        staticinvoke <org.apache.commons.math3.util.MathArrays: void checkEqualLength(double[],double[])>($r0, $r1);

        $r2 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        r3 = (double[]) $r2;

        i0 = 0;

     label1:
        $i1 = lengthof $r0;

        if i0 >= $i1 goto label2;

        $d1 = r3[i0];

        $d0 = $r1[i0];

        $d0 = $d1 - $d0;

        r3[i0] = $d0;

        i0 = i0 + 1;

        goto label1;

     label2:
        return r3;
    }
    public static boolean equals(double[], double[])
    {
        double[] $r0, $r1;
        double $d0, $d1;
        boolean $z0;
        byte $b0, $b1;
        int $i2, $i3;

        $r0 := @parameter0: double[];

        $r1 := @parameter1: double[];

        $z0 = 1;

        if $r0 == null goto label01;

        if $r1 != null goto label08;

     label01:
        if $r0 != null goto label05;

        $b0 = 1;

     label02:
        if $r1 != null goto label06;

        $b1 = 1;

     label03:
        $i2 = $b1 ^ $b0;

        if $i2 != 0 goto label07;

     label04:
        return $z0;

     label05:
        $b0 = 0;

        goto label02;

     label06:
        $b1 = 0;

        goto label03;

     label07:
        $z0 = 0;

        goto label04;

     label08:
        $i2 = lengthof $r0;

        $i3 = lengthof $r1;

        if $i2 != $i3 goto label11;

        $i2 = 0;

     label09:
        $i3 = lengthof $r0;

        if $i2 >= $i3 goto label10;

        $d1 = $r0[$i2];

        $d0 = $r1[$i2];

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double)>($d1, $d0);

        if $z0 == 0 goto label11;

        $i2 = $i2 + 1;

        goto label09;

     label10:
        return 1;

     label11:
        return 0;
    }
    public static boolean equals(float[], float[])
    {
        float[] $r0, $r1;
        boolean $z0;
        byte $b0, $b1;
        int $i2, $i3;
        float $f0, $f1;

        $r0 := @parameter0: float[];

        $r1 := @parameter1: float[];

        $z0 = 1;

        if $r0 == null goto label01;

        if $r1 != null goto label08;

     label01:
        if $r0 != null goto label05;

        $b0 = 1;

     label02:
        if $r1 != null goto label06;

        $b1 = 1;

     label03:
        $i2 = $b1 ^ $b0;

        if $i2 != 0 goto label07;

     label04:
        return $z0;

     label05:
        $b0 = 0;

        goto label02;

     label06:
        $b1 = 0;

        goto label03;

     label07:
        $z0 = 0;

        goto label04;

     label08:
        $i2 = lengthof $r0;

        $i3 = lengthof $r1;

        if $i2 != $i3 goto label11;

        $i2 = 0;

     label09:
        $i3 = lengthof $r0;

        if $i2 >= $i3 goto label10;

        $f0 = $r0[$i2];

        $f1 = $r1[$i2];

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(float,float)>($f0, $f1);

        if $z0 == 0 goto label11;

        $i2 = $i2 + 1;

        goto label09;

     label10:
        return 1;

     label11:
        return 0;
    }
    public static boolean equalsIncludingNaN(double[], double[])
    {
        double[] $r0, $r1;
        double $d0, $d1;
        boolean $z0;
        byte $b0, $b1;
        int $i2, $i3;

        $r0 := @parameter0: double[];

        $r1 := @parameter1: double[];

        $z0 = 1;

        if $r0 == null goto label01;

        if $r1 != null goto label08;

     label01:
        if $r0 != null goto label05;

        $b0 = 1;

     label02:
        if $r1 != null goto label06;

        $b1 = 1;

     label03:
        $i2 = $b1 ^ $b0;

        if $i2 != 0 goto label07;

     label04:
        return $z0;

     label05:
        $b0 = 0;

        goto label02;

     label06:
        $b1 = 0;

        goto label03;

     label07:
        $z0 = 0;

        goto label04;

     label08:
        $i2 = lengthof $r0;

        $i3 = lengthof $r1;

        if $i2 != $i3 goto label11;

        $i2 = 0;

     label09:
        $i3 = lengthof $r0;

        if $i2 >= $i3 goto label10;

        $d1 = $r0[$i2];

        $d0 = $r1[$i2];

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equalsIncludingNaN(double,double)>($d1, $d0);

        if $z0 == 0 goto label11;

        $i2 = $i2 + 1;

        goto label09;

     label10:
        return 1;

     label11:
        return 0;
    }
    public static boolean equalsIncludingNaN(float[], float[])
    {
        float[] $r0, $r1;
        boolean $z0;
        byte $b0, $b1;
        int $i2, $i3;
        float $f0, $f1;

        $r0 := @parameter0: float[];

        $r1 := @parameter1: float[];

        $z0 = 1;

        if $r0 == null goto label01;

        if $r1 != null goto label08;

     label01:
        if $r0 != null goto label05;

        $b0 = 1;

     label02:
        if $r1 != null goto label06;

        $b1 = 1;

     label03:
        $i2 = $b1 ^ $b0;

        if $i2 != 0 goto label07;

     label04:
        return $z0;

     label05:
        $b0 = 0;

        goto label02;

     label06:
        $b1 = 0;

        goto label03;

     label07:
        $z0 = 0;

        goto label04;

     label08:
        $i2 = lengthof $r0;

        $i3 = lengthof $r1;

        if $i2 != $i3 goto label11;

        $i2 = 0;

     label09:
        $i3 = lengthof $r0;

        if $i2 >= $i3 goto label10;

        $f0 = $r0[$i2];

        $f1 = $r1[$i2];

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equalsIncludingNaN(float,float)>($f0, $f1);

        if $z0 == 0 goto label11;

        $i2 = $i2 + 1;

        goto label09;

     label10:
        return 1;

     label11:
        return 0;
    }
    public static boolean isMonotonic(double[], org.apache.commons.math3.util.MathArrays$OrderDirection, boolean)
    {
        double[] $r0;
        org.apache.commons.math3.util.MathArrays$OrderDirection $r1;
        boolean $z0;

        $r0 := @parameter0: double[];

        $r1 := @parameter1: org.apache.commons.math3.util.MathArrays$OrderDirection;

        $z0 := @parameter2: boolean;

        $z0 = staticinvoke <org.apache.commons.math3.util.MathArrays: boolean checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean,boolean)>($r0, $r1, $z0, 0);

        return $z0;
    }
    public static boolean isMonotonic(java.lang.Comparable[], org.apache.commons.math3.util.MathArrays$OrderDirection, boolean)
    {
        java.lang.Comparable[] r0;
        org.apache.commons.math3.util.MathArrays$OrderDirection $r1;
        boolean $z0;
        int i0, i1, $i2;
        java.lang.Comparable r2, $r5;
        int[] $r3;
        org.apache.commons.math3.exception.MathInternalError $r4;

        r0 := @parameter0: java.lang.Comparable[];

        $r1 := @parameter1: org.apache.commons.math3.util.MathArrays$OrderDirection;

        $z0 := @parameter2: boolean;

        r2 = r0[0];

        i0 = lengthof r0;

        i1 = 1;

     label1:
        if i1 >= i0 goto label8;

        $r3 = <org.apache.commons.math3.util.MathArrays$3: int[] $SwitchMap$org$apache$commons$math3$util$MathArrays$OrderDirection>;

        $i2 = virtualinvoke $r1.<org.apache.commons.math3.util.MathArrays$OrderDirection: int ordinal()>();

        $i2 = $r3[$i2];

        lookupswitch($i2)
        {
            case 1: goto label3;
            case 2: goto label6;
            default: goto label2;
        };

     label2:
        $r4 = new org.apache.commons.math3.exception.MathInternalError;

        specialinvoke $r4.<org.apache.commons.math3.exception.MathInternalError: void <init>()>();

        throw $r4;

     label3:
        $r5 = r0[i1];

        $i2 = interfaceinvoke r2.<java.lang.Comparable: int compareTo(java.lang.Object)>($r5);

        if $z0 == 0 goto label4;

        if $i2 < 0 goto label5;

        return 0;

     label4:
        if $i2 > 0 goto label9;

     label5:
        r2 = r0[i1];

        i1 = i1 + 1;

        goto label1;

     label6:
        $r5 = r0[i1];

        $i2 = interfaceinvoke $r5.<java.lang.Comparable: int compareTo(java.lang.Object)>(r2);

        if $z0 == 0 goto label7;

        if $i2 < 0 goto label5;

        return 0;

     label7:
        if $i2 <= 0 goto label5;

        return 0;

     label8:
        return 1;

     label9:
        return 0;
    }
    public static double linearCombination(double, double, double, double)
    {
        double $d0, $d1, $d2, $d3, d4, d5, d6, d7, d8, d9, d10, $d11, $d12;
        long $l0;
        boolean $z0;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $d3 := @parameter3: double;

        $l0 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>($d0);

        $l0 = $l0 & -134217728L;

        d9 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l0);

        d4 = $d0 - d9;

        $l0 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>($d1);

        $l0 = $l0 & -134217728L;

        d10 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l0);

        d6 = $d1 - d10;

        d7 = $d0 * $d1;

        d8 = d4 * d6;

        d5 = d9 * d10;

        d5 = d7 - d5;

        d4 = d4 * d10;

        d4 = d5 - d4;

        d6 = d9 * d6;

        d6 = d4 - d6;

        d8 = d8 - d6;

        $l0 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>($d2);

        $l0 = $l0 & -134217728L;

        d10 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l0);

        d5 = $d2 - d10;

        $l0 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>($d3);

        $l0 = $l0 & -134217728L;

        $d11 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l0);

        d4 = $d3 - $d11;

        d6 = $d2 * $d3;

        d9 = d5 * d4;

        $d12 = d10 * $d11;

        $d12 = d6 - $d12;

        d5 = d5 * $d11;

        d5 = $d12 - d5;

        d4 = d10 * d4;

        d4 = d5 - d4;

        d4 = d9 - d4;

        d9 = d7 + d6;

        d10 = d9 - d6;

        d5 = d9 - d10;

        d6 = d6 - d5;

        d7 = d7 - d10;

        d7 = d6 + d7;

        d8 = d8 + d4;

        d7 = d8 + d7;

        d7 = d9 + d7;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d7);

        if $z0 == 0 goto label1;

        $d0 = $d0 * $d1;

        $d1 = $d2 * $d3;

        $d0 = $d0 + $d1;

        return $d0;

     label1:
        return d7;
    }
    public static double linearCombination(double, double, double, double, double, double)
    {
        double $d0, $d1, $d2, $d3, $d4, $d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, $d15, $d16;
        long $l0;
        boolean $z0;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $d3 := @parameter3: double;

        $d4 := @parameter4: double;

        $d5 := @parameter5: double;

        $l0 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>($d0);

        $l0 = $l0 & -134217728L;

        d12 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l0);

        d6 = $d0 - d12;

        $l0 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>($d1);

        $l0 = $l0 & -134217728L;

        d13 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l0);

        d9 = $d1 - d13;

        d10 = $d0 * $d1;

        d11 = d6 * d9;

        d7 = d12 * d13;

        d7 = d10 - d7;

        d6 = d6 * d13;

        d6 = d7 - d6;

        d9 = d12 * d9;

        d9 = d6 - d9;

        d11 = d11 - d9;

        $l0 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>($d2);

        $l0 = $l0 & -134217728L;

        d13 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l0);

        d7 = $d2 - d13;

        $l0 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>($d3);

        $l0 = $l0 & -134217728L;

        d14 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l0);

        d6 = $d3 - d14;

        d9 = $d2 * $d3;

        d12 = d7 * d6;

        d8 = d13 * d14;

        d8 = d9 - d8;

        d7 = d7 * d14;

        d7 = d8 - d7;

        d6 = d13 * d6;

        d6 = d7 - d6;

        d12 = d12 - d6;

        $l0 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>($d4);

        $l0 = $l0 & -134217728L;

        d14 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l0);

        d8 = $d4 - d14;

        $l0 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>($d5);

        $l0 = $l0 & -134217728L;

        $d15 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l0);

        d7 = $d5 - $d15;

        d6 = $d4 * $d5;

        d13 = d8 * d7;

        $d16 = d14 * $d15;

        $d16 = d6 - $d16;

        d8 = d8 * $d15;

        d8 = $d16 - d8;

        d7 = d14 * d7;

        d7 = d8 - d7;

        d13 = d13 - d7;

        d7 = d10 + d9;

        d14 = d7 - d9;

        d8 = d7 - d14;

        d9 = d9 - d8;

        d10 = d10 - d14;

        d9 = d9 + d10;

        d10 = d7 + d6;

        d14 = d10 - d6;

        d8 = d10 - d14;

        d6 = d6 - d8;

        d7 = d7 - d14;

        d6 = d6 + d7;

        d11 = d11 + d12;

        d11 = d11 + d13;

        d11 = d11 + d9;

        d11 = d11 + d6;

        d10 = d10 + d11;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d10);

        if $z0 == 0 goto label1;

        $d0 = $d0 * $d1;

        $d1 = $d2 * $d3;

        $d0 = $d0 + $d1;

        $d1 = $d4 * $d5;

        $d0 = $d0 + $d1;

        return $d0;

     label1:
        return d10;
    }
    public static double linearCombination(double, double, double, double, double, double, double, double)
    {
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, $d19, $d20;
        long $l0;
        boolean $z0;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $d3 := @parameter3: double;

        $d4 := @parameter4: double;

        $d5 := @parameter5: double;

        $d6 := @parameter6: double;

        $d7 := @parameter7: double;

        $l0 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>($d0);

        $l0 = $l0 & -134217728L;

        d15 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l0);

        d8 = $d0 - d15;

        $l0 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>($d1);

        $l0 = $l0 & -134217728L;

        d16 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l0);

        d12 = $d1 - d16;

        d13 = $d0 * $d1;

        d14 = d8 * d12;

        d9 = d15 * d16;

        d9 = d13 - d9;

        d8 = d8 * d16;

        d8 = d9 - d8;

        d12 = d15 * d12;

        d12 = d8 - d12;

        d14 = d14 - d12;

        $l0 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>($d2);

        $l0 = $l0 & -134217728L;

        d16 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l0);

        d9 = $d2 - d16;

        $l0 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>($d3);

        $l0 = $l0 & -134217728L;

        d17 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l0);

        d8 = $d3 - d17;

        d15 = $d2 * $d3;

        d12 = d9 * d8;

        d10 = d16 * d17;

        d10 = d15 - d10;

        d9 = d9 * d17;

        d9 = d10 - d9;

        d8 = d16 * d8;

        d8 = d9 - d8;

        d12 = d12 - d8;

        $l0 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>($d4);

        $l0 = $l0 & -134217728L;

        d17 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l0);

        d10 = $d4 - d17;

        $l0 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>($d5);

        $l0 = $l0 & -134217728L;

        d18 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l0);

        d9 = $d5 - d18;

        d8 = $d4 * $d5;

        d16 = d10 * d9;

        d11 = d17 * d18;

        d11 = d8 - d11;

        d10 = d10 * d18;

        d10 = d11 - d10;

        d9 = d17 * d9;

        d9 = d10 - d9;

        d16 = d16 - d9;

        $l0 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>($d6);

        $l0 = $l0 & -134217728L;

        d18 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l0);

        d11 = $d6 - d18;

        $l0 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>($d7);

        $l0 = $l0 & -134217728L;

        $d19 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l0);

        d10 = $d7 - $d19;

        d9 = $d6 * $d7;

        d17 = d11 * d10;

        $d20 = d18 * $d19;

        $d20 = d9 - $d20;

        d11 = d11 * $d19;

        d11 = $d20 - d11;

        d10 = d18 * d10;

        d10 = d11 - d10;

        d17 = d17 - d10;

        d18 = d13 + d15;

        d10 = d18 - d15;

        d11 = d18 - d10;

        d15 = d15 - d11;

        d13 = d13 - d10;

        d13 = d15 + d13;

        d10 = d18 + d8;

        d15 = d10 - d8;

        d11 = d10 - d15;

        d8 = d8 - d11;

        d15 = d18 - d15;

        d8 = d8 + d15;

        d15 = d10 + d9;

        d18 = d15 - d9;

        d11 = d15 - d18;

        d9 = d9 - d11;

        d10 = d10 - d18;

        d9 = d9 + d10;

        d14 = d14 + d12;

        d14 = d14 + d16;

        d14 = d14 + d17;

        d14 = d14 + d13;

        d14 = d14 + d8;

        d14 = d14 + d9;

        d14 = d15 + d14;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d14);

        if $z0 == 0 goto label1;

        $d0 = $d0 * $d1;

        $d1 = $d2 * $d3;

        $d0 = $d0 + $d1;

        $d1 = $d4 * $d5;

        $d0 = $d0 + $d1;

        $d1 = $d6 * $d7;

        $d0 = $d0 + $d1;

        return $d0;

     label1:
        return d14;
    }
    public static double linearCombination(double[], double[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        double[] $r0, $r1, $r2;
        double d0, d1, d2, d3, d4, $d5, $d6, $d7;
        int i0, i1, i3, $i4;
        long $l2;
        boolean $z0;

        $r0 := @parameter0: double[];

        $r1 := @parameter1: double[];

        staticinvoke <org.apache.commons.math3.util.MathArrays: void checkEqualLength(double[],double[])>($r0, $r1);

        i0 = lengthof $r0;

        if i0 != 1 goto label1;

        $d5 = $r0[0];

        d2 = $r1[0];

        $d5 = $d5 * d2;

        return $d5;

     label1:
        $r2 = newarray (double)[i0];

        $d5 = 0.0;

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        d1 = $r0[i1];

        $l2 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d1);

        $l2 = $l2 & -134217728L;

        d4 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l2);

        d0 = d1 - d4;

        d3 = $r1[i1];

        $l2 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d3);

        $l2 = $l2 & -134217728L;

        $d6 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l2);

        d2 = d3 - $d6;

        d1 = d1 * d3;

        $r2[i1] = d1;

        d1 = d0 * d2;

        d3 = $r2[i1];

        $d7 = d4 * $d6;

        d3 = d3 - $d7;

        d0 = d0 * $d6;

        d0 = d3 - d0;

        d2 = d4 * d2;

        d2 = d0 - d2;

        d2 = d1 - d2;

        $d5 = $d5 + d2;

        i1 = i1 + 1;

        goto label2;

     label3:
        d4 = $r2[0];

        d0 = $r2[1];

        d2 = d4 + d0;

        d1 = d2 - d0;

        $d6 = d2 - d1;

        d0 = d0 - $d6;

        d4 = d4 - d1;

        d1 = d0 + d4;

        i1 = i0 + -1;

        i3 = 1;

     label4:
        if i3 >= i1 goto label5;

        $i4 = i3 + 1;

        $d6 = $r2[$i4];

        d4 = d2 + $d6;

        d0 = d4 - $d6;

        d3 = d4 - d0;

        $d6 = $d6 - d3;

        d2 = d2 - d0;

        d2 = $d6 + d2;

        d1 = d1 + d2;

        d2 = d4;

        i3 = i3 + 1;

        goto label4;

     label5:
        $d5 = $d5 + d1;

        $d5 = d2 + $d5;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d5);

        if $z0 == 0 goto label7;

        $d5 = 0.0;

        i1 = 0;

     label6:
        if i1 >= i0 goto label7;

        d2 = $r0[i1];

        d4 = $r1[i1];

        d2 = d2 * d4;

        $d5 = $d5 + d2;

        i1 = i1 + 1;

        goto label6;

     label7:
        return $d5;
    }
    public static int[] natural(int)
    {
        int $i0;
        int[] $r0;

        $i0 := @parameter0: int;

        $r0 = staticinvoke <org.apache.commons.math3.util.MathArrays: int[] sequence(int,int,int)>($i0, 0, 1);

        return $r0;
    }
    public static double[] normalizeArray(double[], double) throws org.apache.commons.math3.exception.MathIllegalArgumentException, org.apache.commons.math3.exception.MathArithmeticException
    {
        double[] $r0, r1;
        double $d0, d1, $d2;
        int i0, i1;
        boolean $z0;
        org.apache.commons.math3.exception.MathIllegalArgumentException $r2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3;
        java.lang.Object[] $r4;
        java.lang.Double $r5;
        java.lang.Integer $r6;
        byte $b2;
        org.apache.commons.math3.exception.MathArithmeticException $r7;

        $r0 := @parameter0: double[];

        $d0 := @parameter1: double;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d0);

        if $z0 == 0 goto label01;

        $r2 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NORMALIZE_INFINITE>;

        $r4 = newarray (java.lang.Object)[0];

        specialinvoke $r2.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r3, $r4);

        throw $r2;

     label01:
        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 == 0 goto label02;

        $r2 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NORMALIZE_NAN>;

        $r4 = newarray (java.lang.Object)[0];

        specialinvoke $r2.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r3, $r4);

        throw $r2;

     label02:
        d1 = 0.0;

        i0 = lengthof $r0;

        r1 = newarray (double)[i0];

        i1 = 0;

     label03:
        if i1 >= i0 goto label06;

        $d2 = $r0[i1];

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d2);

        if $z0 == 0 goto label04;

        $r2 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INFINITE_ARRAY_ELEMENT>;

        $r4 = newarray (java.lang.Object)[2];

        $d0 = $r0[i1];

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r4[0] = $r5;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r4[1] = $r6;

        specialinvoke $r2.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r3, $r4);

        throw $r2;

     label04:
        $d2 = $r0[i1];

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d2);

        if $z0 != 0 goto label05;

        $d2 = $r0[i1];

        d1 = d1 + $d2;

     label05:
        i1 = i1 + 1;

        goto label03;

     label06:
        $b2 = d1 cmpl 0.0;

        if $b2 != 0 goto label07;

        $r7 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats ARRAY_SUMS_TO_ZERO>;

        $r4 = newarray (java.lang.Object)[0];

        specialinvoke $r7.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r3, $r4);

        throw $r7;

     label07:
        i1 = 0;

     label08:
        if i1 >= i0 goto label11;

        $d2 = $r0[i1];

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d2);

        if $z0 == 0 goto label10;

        r1[i1] = #NaN;

     label09:
        i1 = i1 + 1;

        goto label08;

     label10:
        $d2 = $r0[i1];

        $d2 = $d2 * $d0;

        $d2 = $d2 / d1;

        r1[i1] = $d2;

        goto label09;

     label11:
        return r1;
    }
    public static double safeNorm(double[])
    {
        double[] $r0;
        double d0, $d1, d2, d3, d4, d5, $d6;
        int $i0, $i1;
        byte $b2;

        $r0 := @parameter0: double[];

        d2 = 0.0;

        d3 = 0.0;

        d4 = 0.0;

        d5 = 0.0;

        $d1 = 0.0;

        $i0 = lengthof $r0;

        d0 = (double) $i0;

        d0 = 1.304E19 / d0;

        $i0 = 0;

     label01:
        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label08;

        $d6 = $r0[$i0];

        $d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d6);

        $b2 = $d6 cmpg 3.834E-20;

        if $b2 < 0 goto label02;

        $b2 = $d6 cmpl d0;

        if $b2 <= 0 goto label07;

     label02:
        $b2 = $d6 cmpl 3.834E-20;

        if $b2 <= 0 goto label05;

        $b2 = $d6 cmpl d5;

        if $b2 <= 0 goto label04;

        d5 = d5 / $d6;

        d2 = d2 * d5;

        d5 = d2 * d5;

        d2 = 1.0 + d5;

        d5 = $d6;

     label03:
        $i0 = $i0 + 1;

        goto label01;

     label04:
        $d6 = $d6 / d5;

        $d6 = $d6 * $d6;

        d2 = d2 + $d6;

        goto label03;

     label05:
        $b2 = $d6 cmpl $d1;

        if $b2 <= 0 goto label06;

        $d1 = $d1 / $d6;

        d4 = d4 * $d1;

        $d1 = d4 * $d1;

        d4 = 1.0 + $d1;

        $d1 = $d6;

        goto label03;

     label06:
        $b2 = $d6 cmpl 0.0;

        if $b2 == 0 goto label03;

        $d6 = $d6 / $d1;

        $d6 = $d6 * $d6;

        d4 = d4 + $d6;

        goto label03;

     label07:
        $d6 = $d6 * $d6;

        d3 = d3 + $d6;

        goto label03;

     label08:
        $b2 = d2 cmpl 0.0;

        if $b2 == 0 goto label09;

        d3 = d3 / d5;

        d3 = d3 / d5;

        d3 = d3 + d2;

        d3 = staticinvoke <java.lang.Math: double sqrt(double)>(d3);

        d3 = d5 * d3;

        return d3;

     label09:
        $b2 = d3 cmpl 0.0;

        if $b2 != 0 goto label10;

        d3 = staticinvoke <java.lang.Math: double sqrt(double)>(d4);

        d3 = $d1 * d3;

        return d3;

     label10:
        $b2 = d3 cmpl $d1;

        if $b2 < 0 goto label11;

        d5 = $d1 / d3;

        $d1 = $d1 * d4;

        $d1 = d5 * $d1;

        $d1 = 1.0 + $d1;

        d3 = $d1 * d3;

        d3 = staticinvoke <java.lang.Math: double sqrt(double)>(d3);

        return d3;

     label11:
        d3 = d3 / $d1;

        d5 = $d1 * d4;

        d3 = d3 + d5;

        d3 = d3 * $d1;

        d3 = staticinvoke <java.lang.Math: double sqrt(double)>(d3);

        return d3;
    }
    public static double[] scale(double, double[])
    {
        double $d0, $d1;
        double[] $r0, r1;
        int $i0, $i1;

        $d0 := @parameter0: double;

        $r0 := @parameter1: double[];

        $i0 = lengthof $r0;

        r1 = newarray (double)[$i0];

        $i0 = 0;

     label1:
        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label2;

        $d1 = $r0[$i0];

        $d1 = $d1 * $d0;

        r1[$i0] = $d1;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return r1;
    }
    public static void scaleInPlace(double, double[])
    {
        double $d0, $d1;
        double[] $r0;
        int $i0, i1;

        $d0 := @parameter0: double;

        $r0 := @parameter1: double[];

        i1 = 0;

     label1:
        $i0 = lengthof $r0;

        if i1 >= $i0 goto label2;

        $d1 = $r0[i1];

        $d1 = $d1 * $d0;

        $r0[i1] = $d1;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
    public static int[] sequence(int, int, int)
    {
        int $i0, $i1, $i2, i3, $i4;
        int[] r0;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        r0 = newarray (int)[$i0];

        i3 = 0;

     label1:
        if i3 >= $i0 goto label2;

        $i4 = i3 * $i2;

        $i4 = $i4 + $i1;

        r0[i3] = $i4;

        i3 = i3 + 1;

        goto label1;

     label2:
        return r0;
    }
    public static void shuffle(int[])
    {
        int[] $r0;
        org.apache.commons.math3.random.Well19937c $r1;

        $r0 := @parameter0: int[];

        $r1 = new org.apache.commons.math3.random.Well19937c;

        specialinvoke $r1.<org.apache.commons.math3.random.Well19937c: void <init>()>();

        staticinvoke <org.apache.commons.math3.util.MathArrays: void shuffle(int[],org.apache.commons.math3.random.RandomGenerator)>($r0, $r1);

        return;
    }
    public static void shuffle(int[], int, org.apache.commons.math3.util.MathArrays$Position)
    {
        int[] $r0;
        int $i0;
        org.apache.commons.math3.util.MathArrays$Position $r1;
        org.apache.commons.math3.random.Well19937c $r2;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        $r1 := @parameter2: org.apache.commons.math3.util.MathArrays$Position;

        $r2 = new org.apache.commons.math3.random.Well19937c;

        specialinvoke $r2.<org.apache.commons.math3.random.Well19937c: void <init>()>();

        staticinvoke <org.apache.commons.math3.util.MathArrays: void shuffle(int[],int,org.apache.commons.math3.util.MathArrays$Position,org.apache.commons.math3.random.RandomGenerator)>($r0, $i0, $r1, $r2);

        return;
    }
    public static void shuffle(int[], int, org.apache.commons.math3.util.MathArrays$Position, org.apache.commons.math3.random.RandomGenerator)
    {
        int[] $r0, $r3;
        int $i0, $i1, i2, i3, $i4;
        org.apache.commons.math3.util.MathArrays$Position $r1;
        org.apache.commons.math3.random.RandomGenerator $r2;
        org.apache.commons.math3.exception.MathInternalError $r4;
        org.apache.commons.math3.distribution.UniformIntegerDistribution $r5;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        $r1 := @parameter2: org.apache.commons.math3.util.MathArrays$Position;

        $r2 := @parameter3: org.apache.commons.math3.random.RandomGenerator;

        $r3 = <org.apache.commons.math3.util.MathArrays$3: int[] $SwitchMap$org$apache$commons$math3$util$MathArrays$Position>;

        $i1 = virtualinvoke $r1.<org.apache.commons.math3.util.MathArrays$Position: int ordinal()>();

        $i1 = $r3[$i1];

        lookupswitch($i1)
        {
            case 1: goto label02;
            case 2: goto label06;
            default: goto label01;
        };

     label01:
        $r4 = new org.apache.commons.math3.exception.MathInternalError;

        specialinvoke $r4.<org.apache.commons.math3.exception.MathInternalError: void <init>()>();

        throw $r4;

     label02:
        $i1 = lengthof $r0;

        $i1 = $i1 + -1;

     label03:
        if $i1 < $i0 goto label10;

        if $i1 != $i0 goto label05;

        i2 = $i0;

     label04:
        i3 = $r0[i2];

        $i4 = $r0[$i1];

        $r0[i2] = $i4;

        $r0[$i1] = i3;

        $i1 = $i1 + -1;

        goto label03;

     label05:
        $r5 = new org.apache.commons.math3.distribution.UniformIntegerDistribution;

        specialinvoke $r5.<org.apache.commons.math3.distribution.UniformIntegerDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,int,int)>($r2, $i0, $i1);

        i2 = virtualinvoke $r5.<org.apache.commons.math3.distribution.UniformIntegerDistribution: int sample()>();

        goto label04;

     label06:
        $i1 = 0;

     label07:
        if $i1 > $i0 goto label10;

        if $i1 != $i0 goto label09;

        i2 = $i0;

     label08:
        i3 = $r0[i2];

        $i4 = $r0[$i1];

        $r0[i2] = $i4;

        $r0[$i1] = i3;

        $i1 = $i1 + 1;

        goto label07;

     label09:
        $r5 = new org.apache.commons.math3.distribution.UniformIntegerDistribution;

        specialinvoke $r5.<org.apache.commons.math3.distribution.UniformIntegerDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,int,int)>($r2, $i1, $i0);

        i2 = virtualinvoke $r5.<org.apache.commons.math3.distribution.UniformIntegerDistribution: int sample()>();

        goto label08;

     label10:
        return;
    }
    public static void shuffle(int[], org.apache.commons.math3.random.RandomGenerator)
    {
        int[] $r0;
        org.apache.commons.math3.random.RandomGenerator $r1;
        org.apache.commons.math3.util.MathArrays$Position $r2;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: org.apache.commons.math3.random.RandomGenerator;

        $r2 = <org.apache.commons.math3.util.MathArrays$Position: org.apache.commons.math3.util.MathArrays$Position TAIL>;

        staticinvoke <org.apache.commons.math3.util.MathArrays: void shuffle(int[],int,org.apache.commons.math3.util.MathArrays$Position,org.apache.commons.math3.random.RandomGenerator)>($r0, 0, $r2, $r1);

        return;
    }
    public static transient void sortInPlace(double[], org.apache.commons.math3.util.MathArrays$OrderDirection, double[][]) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.DimensionMismatchException
    {
        double[] $r0, r5;
        org.apache.commons.math3.util.MathArrays$OrderDirection $r1, $r7;
        double[][] $r2;
        int[] r3;
        int i0, i1, i2, $i3, $i4;
        org.apache.commons.math3.util.MathArrays$PairDoubleInteger $r6, $r13;
        double $d0;
        java.util.Comparator r8;
        java.lang.Object $r9;
        org.apache.commons.math3.exception.NullArgumentException $r10;
        org.apache.commons.math3.exception.DimensionMismatchException $r11;
        java.util.ArrayList $r12;
        org.apache.commons.math3.util.MathArrays$1 $r14;
        org.apache.commons.math3.util.MathArrays$2 $r15;

        $r0 := @parameter0: double[];

        $r1 := @parameter1: org.apache.commons.math3.util.MathArrays$OrderDirection;

        $r2 := @parameter2: double[][];

        if $r0 != null goto label01;

        $r10 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r10.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r10;

     label01:
        i1 = lengthof $r2;

        i0 = lengthof $r0;

        i2 = 0;

     label02:
        if i2 >= i1 goto label05;

        r5 = $r2[i2];

        if r5 != null goto label03;

        $r10 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r10.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r10;

     label03:
        $i3 = lengthof r5;

        if $i3 == i0 goto label04;

        $r11 = new org.apache.commons.math3.exception.DimensionMismatchException;

        i1 = lengthof r5;

        specialinvoke $r11.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>(i1, i0);

        throw $r11;

     label04:
        i2 = i2 + 1;

        goto label02;

     label05:
        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>(int)>(i0);

        i2 = 0;

     label06:
        if i2 >= i0 goto label07;

        $r13 = new org.apache.commons.math3.util.MathArrays$PairDoubleInteger;

        $d0 = $r0[i2];

        specialinvoke $r13.<org.apache.commons.math3.util.MathArrays$PairDoubleInteger: void <init>(double,int)>($d0, i2);

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r13);

        i2 = i2 + 1;

        goto label06;

     label07:
        $r7 = <org.apache.commons.math3.util.MathArrays$OrderDirection: org.apache.commons.math3.util.MathArrays$OrderDirection INCREASING>;

        if $r1 != $r7 goto label10;

        $r14 = new org.apache.commons.math3.util.MathArrays$1;

        r8 = $r14;

        specialinvoke $r14.<org.apache.commons.math3.util.MathArrays$1: void <init>()>();

     label08:
        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r12, r8);

        r3 = newarray (int)[i0];

        i2 = 0;

     label09:
        if i2 >= i0 goto label11;

        $r9 = interfaceinvoke $r12.<java.util.List: java.lang.Object get(int)>(i2);

        $r6 = (org.apache.commons.math3.util.MathArrays$PairDoubleInteger) $r9;

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.util.MathArrays$PairDoubleInteger: double getKey()>();

        $r0[i2] = $d0;

        $i3 = virtualinvoke $r6.<org.apache.commons.math3.util.MathArrays$PairDoubleInteger: int getValue()>();

        r3[i2] = $i3;

        i2 = i2 + 1;

        goto label09;

     label10:
        $r15 = new org.apache.commons.math3.util.MathArrays$2;

        r8 = $r15;

        specialinvoke $r15.<org.apache.commons.math3.util.MathArrays$2: void <init>()>();

        goto label08;

     label11:
        i2 = 0;

     label12:
        if i2 >= i1 goto label15;

        $r0 = $r2[i2];

        $r9 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        r5 = (double[]) $r9;

        $i3 = 0;

     label13:
        if $i3 >= i0 goto label14;

        $i4 = r3[$i3];

        $d0 = r5[$i4];

        $r0[$i3] = $d0;

        $i3 = $i3 + 1;

        goto label13;

     label14:
        i2 = i2 + 1;

        goto label12;

     label15:
        return;
    }
    public static transient void sortInPlace(double[], double[][]) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NullArgumentException
    {
        double[] $r0;
        double[][] $r1;
        org.apache.commons.math3.util.MathArrays$OrderDirection $r2;

        $r0 := @parameter0: double[];

        $r1 := @parameter1: double[][];

        $r2 = <org.apache.commons.math3.util.MathArrays$OrderDirection: org.apache.commons.math3.util.MathArrays$OrderDirection INCREASING>;

        staticinvoke <org.apache.commons.math3.util.MathArrays: void sortInPlace(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,double[][])>($r0, $r2, $r1);

        return;
    }
    public static double[] unique(double[])
    {
        double[] $r0;
        java.util.TreeSet r1;
        int i0, $i1, $i2;
        double $d0;
        java.lang.Double $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;

        $r0 := @parameter0: double[];

        r1 = new java.util.TreeSet;

        specialinvoke r1.<java.util.TreeSet: void <init>()>();

        i0 = 0;

     label1:
        $i1 = lengthof $r0;

        if i0 >= $i1 goto label2;

        $d0 = $r0[i0];

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        virtualinvoke r1.<java.util.TreeSet: boolean add(java.lang.Object)>($r2);

        i0 = i0 + 1;

        goto label1;

     label2:
        i0 = virtualinvoke r1.<java.util.TreeSet: int size()>();

        $r0 = newarray (double)[i0];

        $r3 = virtualinvoke r1.<java.util.TreeSet: java.util.Iterator iterator()>();

        $i1 = 0;

     label3:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $i1 = $i1 + 1;

        $i2 = i0 - $i1;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r2 = (java.lang.Double) $r4;

        $d0 = virtualinvoke $r2.<java.lang.Double: double doubleValue()>();

        $r0[$i2] = $d0;

        goto label3;

     label4:
        return $r0;
    }
    public static boolean verifyValues(double[], int, int) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        double[] $r0;
        int $i0, $i1;
        boolean $z0;

        $r0 := @parameter0: double[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $z0 = staticinvoke <org.apache.commons.math3.util.MathArrays: boolean verifyValues(double[],int,int,boolean)>($r0, $i0, $i1, 0);

        return $z0;
    }
    public static boolean verifyValues(double[], int, int, boolean) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        double[] $r0;
        int $i0, $i1, $i2, $i3;
        boolean $z0;
        org.apache.commons.math3.exception.NullArgumentException $r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        java.lang.Object[] $r3;
        org.apache.commons.math3.exception.NotPositiveException $r4;
        java.lang.Integer $r5, $r7;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r6;

        $r0 := @parameter0: double[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $z0 := @parameter3: boolean;

        if $r0 != null goto label1;

        $r1 = new org.apache.commons.math3.exception.NullArgumentException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INPUT_ARRAY>;

        $r3 = newarray (java.lang.Object)[0];

        specialinvoke $r1.<org.apache.commons.math3.exception.NullArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r2, $r3);

        throw $r1;

     label1:
        if $i0 >= 0 goto label2;

        $r4 = new org.apache.commons.math3.exception.NotPositiveException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats START_POSITION>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r4.<org.apache.commons.math3.exception.NotPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r2, $r5);

        throw $r4;

     label2:
        if $i1 >= 0 goto label3;

        $r4 = new org.apache.commons.math3.exception.NotPositiveException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats LENGTH>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        specialinvoke $r4.<org.apache.commons.math3.exception.NotPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r2, $r5);

        throw $r4;

     label3:
        $i2 = $i0 + $i1;

        $i3 = lengthof $r0;

        if $i2 <= $i3 goto label4;

        $r6 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats SUBARRAY_ENDS_AFTER_ARRAY_END>;

        $i0 = $i0 + $i1;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $i0 = lengthof $r0;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r6.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r2, $r5, $r7, 1);

        throw $r6;

     label4:
        if $i1 != 0 goto label5;

        if $z0 != 0 goto label5;

        return 0;

     label5:
        return 1;
    }
    public static boolean verifyValues(double[], double[], int, int) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        double[] $r0, $r1;
        int $i0, $i1;
        boolean $z0;

        $r0 := @parameter0: double[];

        $r1 := @parameter1: double[];

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $z0 = staticinvoke <org.apache.commons.math3.util.MathArrays: boolean verifyValues(double[],double[],int,int,boolean)>($r0, $r1, $i0, $i1, 0);

        return $z0;
    }
    public static boolean verifyValues(double[], double[], int, int, boolean) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        double[] $r0, $r1;
        int $i0, $i1, i2, $i3;
        boolean $z0, z1, $z2;
        double d0;
        org.apache.commons.math3.exception.NullArgumentException $r2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3;
        java.lang.Object[] $r4;
        org.apache.commons.math3.exception.MathIllegalArgumentException $r5;
        java.lang.Integer $r6;
        java.lang.Double $r7;
        byte $b4;

        $r0 := @parameter0: double[];

        $r1 := @parameter1: double[];

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $z0 := @parameter4: boolean;

        if $r1 == null goto label1;

        if $r0 != null goto label2;

     label1:
        $r2 = new org.apache.commons.math3.exception.NullArgumentException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INPUT_ARRAY>;

        $r4 = newarray (java.lang.Object)[0];

        specialinvoke $r2.<org.apache.commons.math3.exception.NullArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r3, $r4);

        throw $r2;

     label2:
        staticinvoke <org.apache.commons.math3.util.MathArrays: void checkEqualLength(double[],double[])>($r1, $r0);

        z1 = 0;

        i2 = $i0;

     label3:
        $i3 = $i0 + $i1;

        if i2 >= $i3 goto label8;

        d0 = $r1[i2];

        $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z2 == 0 goto label4;

        $r5 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NAN_ELEMENT_AT_INDEX>;

        $r4 = newarray (java.lang.Object)[1];

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r4[0] = $r6;

        specialinvoke $r5.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r3, $r4);

        throw $r5;

     label4:
        $z2 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d0);

        if $z2 == 0 goto label5;

        $r5 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INFINITE_ARRAY_ELEMENT>;

        $r4 = newarray (java.lang.Object)[2];

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r4[0] = $r7;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r4[1] = $r6;

        specialinvoke $r5.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r3, $r4);

        throw $r5;

     label5:
        $b4 = d0 cmpg 0.0;

        if $b4 >= 0 goto label6;

        $r5 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NEGATIVE_ELEMENT_AT_INDEX>;

        $r4 = newarray (java.lang.Object)[2];

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r4[0] = $r6;

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r4[1] = $r7;

        specialinvoke $r5.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r3, $r4);

        throw $r5;

     label6:
        if z1 != 0 goto label7;

        $b4 = d0 cmpl 0.0;

        if $b4 <= 0 goto label7;

        z1 = 1;

     label7:
        i2 = i2 + 1;

        goto label3;

     label8:
        if z1 != 0 goto label9;

        $r5 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats WEIGHT_AT_LEAST_ONE_NON_ZERO>;

        $r4 = newarray (java.lang.Object)[0];

        specialinvoke $r5.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r3, $r4);

        throw $r5;

     label9:
        $z0 = staticinvoke <org.apache.commons.math3.util.MathArrays: boolean verifyValues(double[],int,int,boolean)>($r0, $i0, $i1, $z0);

        return $z0;
    }
