org.apache.commons.math3.util.IterationManager extends java.lang.Object
private org.apache.commons.math3.util.IntegerSequence$Incrementor iterations
private final java.util.Collection listeners
    public void <init>(int)
    {
        org.apache.commons.math3.util.IterationManager r0;
        int $i0;
        org.apache.commons.math3.util.IntegerSequence$Incrementor $r1;
        java.util.concurrent.CopyOnWriteArrayList $r2;

        r0 := @this: org.apache.commons.math3.util.IterationManager;

        $i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.apache.commons.math3.util.IntegerSequence$Incrementor: org.apache.commons.math3.util.IntegerSequence$Incrementor create()>();

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.util.IntegerSequence$Incrementor: org.apache.commons.math3.util.IntegerSequence$Incrementor withMaximalCount(int)>($i0);

        r0.<org.apache.commons.math3.util.IterationManager: org.apache.commons.math3.util.IntegerSequence$Incrementor iterations> = $r1;

        $r2 = new java.util.concurrent.CopyOnWriteArrayList;

        specialinvoke $r2.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>();

        r0.<org.apache.commons.math3.util.IterationManager: java.util.Collection listeners> = $r2;

        return;
    }
    public void <init>(int, org.apache.commons.math3.util.Incrementor$MaxCountExceededCallback)
    {
        org.apache.commons.math3.util.IterationManager r0;
        int $i0;
        org.apache.commons.math3.util.Incrementor$MaxCountExceededCallback $r1;
        org.apache.commons.math3.util.IterationManager$1 $r2;

        r0 := @this: org.apache.commons.math3.util.IterationManager;

        $i0 := @parameter0: int;

        $r1 := @parameter1: org.apache.commons.math3.util.Incrementor$MaxCountExceededCallback;

        $r2 = new org.apache.commons.math3.util.IterationManager$1;

        specialinvoke $r2.<org.apache.commons.math3.util.IterationManager$1: void <init>(org.apache.commons.math3.util.Incrementor$MaxCountExceededCallback)>($r1);

        specialinvoke r0.<org.apache.commons.math3.util.IterationManager: void <init>(int,org.apache.commons.math3.util.IntegerSequence$Incrementor$MaxCountExceededCallback)>($i0, $r2);

        return;
    }
    public void <init>(int, org.apache.commons.math3.util.IntegerSequence$Incrementor$MaxCountExceededCallback)
    {
        org.apache.commons.math3.util.IterationManager r0;
        int $i0;
        org.apache.commons.math3.util.IntegerSequence$Incrementor$MaxCountExceededCallback $r1;
        org.apache.commons.math3.util.IntegerSequence$Incrementor $r2;
        java.util.concurrent.CopyOnWriteArrayList $r3;

        r0 := @this: org.apache.commons.math3.util.IterationManager;

        $i0 := @parameter0: int;

        $r1 := @parameter1: org.apache.commons.math3.util.IntegerSequence$Incrementor$MaxCountExceededCallback;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <org.apache.commons.math3.util.IntegerSequence$Incrementor: org.apache.commons.math3.util.IntegerSequence$Incrementor create()>();

        $r2 = virtualinvoke $r2.<org.apache.commons.math3.util.IntegerSequence$Incrementor: org.apache.commons.math3.util.IntegerSequence$Incrementor withMaximalCount(int)>($i0);

        $r2 = virtualinvoke $r2.<org.apache.commons.math3.util.IntegerSequence$Incrementor: org.apache.commons.math3.util.IntegerSequence$Incrementor withCallback(org.apache.commons.math3.util.IntegerSequence$Incrementor$MaxCountExceededCallback)>($r1);

        r0.<org.apache.commons.math3.util.IterationManager: org.apache.commons.math3.util.IntegerSequence$Incrementor iterations> = $r2;

        $r3 = new java.util.concurrent.CopyOnWriteArrayList;

        specialinvoke $r3.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>();

        r0.<org.apache.commons.math3.util.IterationManager: java.util.Collection listeners> = $r3;

        return;
    }
    public void addIterationListener(org.apache.commons.math3.util.IterationListener)
    {
        org.apache.commons.math3.util.IterationManager r0;
        org.apache.commons.math3.util.IterationListener $r1;
        java.util.Collection $r2;

        r0 := @this: org.apache.commons.math3.util.IterationManager;

        $r1 := @parameter0: org.apache.commons.math3.util.IterationListener;

        $r2 = r0.<org.apache.commons.math3.util.IterationManager: java.util.Collection listeners>;

        interfaceinvoke $r2.<java.util.Collection: boolean add(java.lang.Object)>($r1);

        return;
    }
    public void fireInitializationEvent(org.apache.commons.math3.util.IterationEvent)
    {
        org.apache.commons.math3.util.IterationManager r0;
        org.apache.commons.math3.util.IterationEvent $r1;
        java.util.Collection $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        org.apache.commons.math3.util.IterationListener r5;

        r0 := @this: org.apache.commons.math3.util.IterationManager;

        $r1 := @parameter0: org.apache.commons.math3.util.IterationEvent;

        $r2 = r0.<org.apache.commons.math3.util.IterationManager: java.util.Collection listeners>;

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.commons.math3.util.IterationListener) $r4;

        interfaceinvoke r5.<org.apache.commons.math3.util.IterationListener: void initializationPerformed(org.apache.commons.math3.util.IterationEvent)>($r1);

        goto label1;

     label2:
        return;
    }
    public void fireIterationPerformedEvent(org.apache.commons.math3.util.IterationEvent)
    {
        org.apache.commons.math3.util.IterationManager r0;
        org.apache.commons.math3.util.IterationEvent $r1;
        java.util.Collection $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        org.apache.commons.math3.util.IterationListener r5;

        r0 := @this: org.apache.commons.math3.util.IterationManager;

        $r1 := @parameter0: org.apache.commons.math3.util.IterationEvent;

        $r2 = r0.<org.apache.commons.math3.util.IterationManager: java.util.Collection listeners>;

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.commons.math3.util.IterationListener) $r4;

        interfaceinvoke r5.<org.apache.commons.math3.util.IterationListener: void iterationPerformed(org.apache.commons.math3.util.IterationEvent)>($r1);

        goto label1;

     label2:
        return;
    }
    public void fireIterationStartedEvent(org.apache.commons.math3.util.IterationEvent)
    {
        org.apache.commons.math3.util.IterationManager r0;
        org.apache.commons.math3.util.IterationEvent $r1;
        java.util.Collection $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        org.apache.commons.math3.util.IterationListener r5;

        r0 := @this: org.apache.commons.math3.util.IterationManager;

        $r1 := @parameter0: org.apache.commons.math3.util.IterationEvent;

        $r2 = r0.<org.apache.commons.math3.util.IterationManager: java.util.Collection listeners>;

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.commons.math3.util.IterationListener) $r4;

        interfaceinvoke r5.<org.apache.commons.math3.util.IterationListener: void iterationStarted(org.apache.commons.math3.util.IterationEvent)>($r1);

        goto label1;

     label2:
        return;
    }
    public void fireTerminationEvent(org.apache.commons.math3.util.IterationEvent)
    {
        org.apache.commons.math3.util.IterationManager r0;
        org.apache.commons.math3.util.IterationEvent $r1;
        java.util.Collection $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        org.apache.commons.math3.util.IterationListener r5;

        r0 := @this: org.apache.commons.math3.util.IterationManager;

        $r1 := @parameter0: org.apache.commons.math3.util.IterationEvent;

        $r2 = r0.<org.apache.commons.math3.util.IterationManager: java.util.Collection listeners>;

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.commons.math3.util.IterationListener) $r4;

        interfaceinvoke r5.<org.apache.commons.math3.util.IterationListener: void terminationPerformed(org.apache.commons.math3.util.IterationEvent)>($r1);

        goto label1;

     label2:
        return;
    }
    public int getIterations()
    {
        org.apache.commons.math3.util.IterationManager r0;
        int $i0;
        org.apache.commons.math3.util.IntegerSequence$Incrementor $r1;

        r0 := @this: org.apache.commons.math3.util.IterationManager;

        $r1 = r0.<org.apache.commons.math3.util.IterationManager: org.apache.commons.math3.util.IntegerSequence$Incrementor iterations>;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.util.IntegerSequence$Incrementor: int getCount()>();

        return $i0;
    }
    public int getMaxIterations()
    {
        org.apache.commons.math3.util.IterationManager r0;
        int $i0;
        org.apache.commons.math3.util.IntegerSequence$Incrementor $r1;

        r0 := @this: org.apache.commons.math3.util.IterationManager;

        $r1 = r0.<org.apache.commons.math3.util.IterationManager: org.apache.commons.math3.util.IntegerSequence$Incrementor iterations>;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.util.IntegerSequence$Incrementor: int getMaximalCount()>();

        return $i0;
    }
    public void incrementIterationCount() throws org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.util.IterationManager r0;
        org.apache.commons.math3.util.IntegerSequence$Incrementor $r1;

        r0 := @this: org.apache.commons.math3.util.IterationManager;

        $r1 = r0.<org.apache.commons.math3.util.IterationManager: org.apache.commons.math3.util.IntegerSequence$Incrementor iterations>;

        virtualinvoke $r1.<org.apache.commons.math3.util.IntegerSequence$Incrementor: void increment()>();

        return;
    }
    public void removeIterationListener(org.apache.commons.math3.util.IterationListener)
    {
        org.apache.commons.math3.util.IterationManager r0;
        org.apache.commons.math3.util.IterationListener $r1;
        java.util.Collection $r2;

        r0 := @this: org.apache.commons.math3.util.IterationManager;

        $r1 := @parameter0: org.apache.commons.math3.util.IterationListener;

        $r2 = r0.<org.apache.commons.math3.util.IterationManager: java.util.Collection listeners>;

        interfaceinvoke $r2.<java.util.Collection: boolean remove(java.lang.Object)>($r1);

        return;
    }
    public void resetIterationCount()
    {
        org.apache.commons.math3.util.IterationManager r0;
        org.apache.commons.math3.util.IntegerSequence$Incrementor $r1;

        r0 := @this: org.apache.commons.math3.util.IterationManager;

        $r1 = r0.<org.apache.commons.math3.util.IterationManager: org.apache.commons.math3.util.IntegerSequence$Incrementor iterations>;

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.util.IntegerSequence$Incrementor: org.apache.commons.math3.util.IntegerSequence$Incrementor withStart(int)>(0);

        r0.<org.apache.commons.math3.util.IterationManager: org.apache.commons.math3.util.IntegerSequence$Incrementor iterations> = $r1;

        return;
    }
