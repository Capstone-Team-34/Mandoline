org.apache.commons.math3.util.ArithmeticUtils extends java.lang.Object
    private void <init>()
    {
        org.apache.commons.math3.util.ArithmeticUtils r0;

        r0 := @this: org.apache.commons.math3.util.ArithmeticUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static int addAndCheck(int, int) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        int $i0, $i1;
        long l2, $l3;
        org.apache.commons.math3.exception.util.LocalizedFormats $r0;
        byte $b4;
        org.apache.commons.math3.exception.MathArithmeticException $r1;
        java.lang.Object[] $r2;
        java.lang.Integer $r3;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        l2 = (long) $i0;

        $l3 = (long) $i1;

        l2 = l2 + $l3;

        $b4 = l2 cmp -2147483648L;

        if $b4 < 0 goto label1;

        $b4 = l2 cmp 2147483647L;

        if $b4 <= 0 goto label2;

     label1:
        $r1 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r0 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OVERFLOW_IN_ADDITION>;

        $r2 = newarray (java.lang.Object)[2];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r2[0] = $r3;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r2[1] = $r3;

        specialinvoke $r1.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r0, $r2);

        throw $r1;

     label2:
        $i0 = (int) l2;

        return $i0;
    }
    public static long addAndCheck(long, long) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        long $l0, $l1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r0;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $r0 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OVERFLOW_IN_ADDITION>;

        $l0 = staticinvoke <org.apache.commons.math3.util.ArithmeticUtils: long addAndCheck(long,long,org.apache.commons.math3.exception.util.Localizable)>($l0, $l1, $r0);

        return $l0;
    }
    private static long addAndCheck(long, long, org.apache.commons.math3.exception.util.Localizable) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        long $l0, $l1, l2, $l3;
        org.apache.commons.math3.exception.util.Localizable $r0;
        byte $b4, $b5;
        int $i6;
        org.apache.commons.math3.exception.MathArithmeticException $r1;
        java.lang.Object[] $r2;
        java.lang.Long $r3;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $r0 := @parameter2: org.apache.commons.math3.exception.util.Localizable;

        l2 = $l0 + $l1;

        $l3 = $l0 ^ $l1;

        $b4 = $l3 cmp 0L;

        if $b4 >= 0 goto label3;

        $b4 = 1;

     label1:
        $l3 = $l0 ^ l2;

        $b5 = $l3 cmp 0L;

        if $b5 < 0 goto label4;

        $b5 = 1;

     label2:
        $i6 = $b5 | $b4;

        if $i6 != 0 goto label5;

        $r1 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r2 = newarray (java.lang.Object)[2];

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r2[0] = $r3;

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $r2[1] = $r3;

        specialinvoke $r1.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r0, $r2);

        throw $r1;

     label3:
        $b4 = 0;

        goto label1;

     label4:
        $b5 = 0;

        goto label2;

     label5:
        return l2;
    }
    public static long binomialCoefficient(int, int) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.exception.MathArithmeticException
    {
        int $i0, $i1;
        long $l2;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $l2 = staticinvoke <org.apache.commons.math3.util.CombinatoricsUtils: long binomialCoefficient(int,int)>($i0, $i1);

        return $l2;
    }
    public static double binomialCoefficientDouble(int, int) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.exception.MathArithmeticException
    {
        int $i0, $i1;
        double $d0;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $d0 = staticinvoke <org.apache.commons.math3.util.CombinatoricsUtils: double binomialCoefficientDouble(int,int)>($i0, $i1);

        return $d0;
    }
    public static double binomialCoefficientLog(int, int) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.exception.MathArithmeticException
    {
        int $i0, $i1;
        double $d0;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $d0 = staticinvoke <org.apache.commons.math3.util.CombinatoricsUtils: double binomialCoefficientLog(int,int)>($i0, $i1);

        return $d0;
    }
    public static long factorial(int) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.MathArithmeticException
    {
        int $i0;
        long $l1;

        $i0 := @parameter0: int;

        $l1 = staticinvoke <org.apache.commons.math3.util.CombinatoricsUtils: long factorial(int)>($i0);

        return $l1;
    }
    public static double factorialDouble(int) throws org.apache.commons.math3.exception.NotPositiveException
    {
        int $i0;
        double $d0;

        $i0 := @parameter0: int;

        $d0 = staticinvoke <org.apache.commons.math3.util.CombinatoricsUtils: double factorialDouble(int)>($i0);

        return $d0;
    }
    public static double factorialLog(int) throws org.apache.commons.math3.exception.NotPositiveException
    {
        int $i0;
        double $d0;

        $i0 := @parameter0: int;

        $d0 = staticinvoke <org.apache.commons.math3.util.CombinatoricsUtils: double factorialLog(int)>($i0);

        return $d0;
    }
    public static int gcd(int, int) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        int $i0, $i1, i2, i3;
        org.apache.commons.math3.exception.MathArithmeticException $r0;
        org.apache.commons.math3.exception.util.LocalizedFormats $r1;
        java.lang.Object[] $r2;
        java.lang.Integer $r3;
        long l4, l5;
        boolean z0;
        byte $b6;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        i2 = $i0;

        i3 = $i1;

        if $i0 == 0 goto label01;

        if $i1 != 0 goto label04;

     label01:
        if $i0 == -2147483648 goto label02;

        if $i1 != -2147483648 goto label03;

     label02:
        $r0 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r1 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats GCD_OVERFLOW_32_BITS>;

        $r2 = newarray (java.lang.Object)[2];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r2[0] = $r3;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r2[1] = $r3;

        specialinvoke $r0.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r1, $r2);

        throw $r0;

     label03:
        $i0 = $i0 + $i1;

        $i0 = staticinvoke <org.apache.commons.math3.util.FastMath: int abs(int)>($i0);

        return $i0;

     label04:
        l4 = (long) $i0;

        l5 = (long) $i1;

        z0 = 0;

        if $i0 >= 0 goto label06;

        if -2147483648 != $i0 goto label09;

        z0 = 1;

     label05:
        l4 = neg l4;

     label06:
        if $i1 >= 0 goto label08;

        if -2147483648 != $i1 goto label10;

        z0 = 1;

     label07:
        l5 = neg l5;

     label08:
        if z0 == 0 goto label14;

        $b6 = l4 cmp l5;

        if $b6 != 0 goto label11;

        $r0 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r1 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats GCD_OVERFLOW_32_BITS>;

        $r2 = newarray (java.lang.Object)[2];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r2[0] = $r3;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r2[1] = $r3;

        specialinvoke $r0.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r1, $r2);

        throw $r0;

     label09:
        i2 = neg $i0;

        goto label05;

     label10:
        i3 = neg $i1;

        goto label07;

     label11:
        l5 = l5 % l4;

        $b6 = l5 cmp 0L;

        if $b6 != 0 goto label13;

        $b6 = l4 cmp 2147483647L;

        if $b6 <= 0 goto label12;

        $r0 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r1 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats GCD_OVERFLOW_32_BITS>;

        $r2 = newarray (java.lang.Object)[2];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r2[0] = $r3;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r2[1] = $r3;

        specialinvoke $r0.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r1, $r2);

        throw $r0;

     label12:
        $i0 = (int) l4;

        return $i0;

     label13:
        i3 = (int) l5;

        l4 = l4 % l5;

        i2 = (int) l4;

     label14:
        $i0 = staticinvoke <org.apache.commons.math3.util.ArithmeticUtils: int gcdPositive(int,int)>(i2, i3);

        return $i0;
    }
    public static long gcd(long, long) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        long $l0, $l1, l2, l3, $l6;
        byte $b4;
        org.apache.commons.math3.exception.MathArithmeticException $r0;
        org.apache.commons.math3.exception.util.LocalizedFormats $r1;
        java.lang.Object[] $r2;
        java.lang.Long $r3;
        int i5;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        l2 = $l0;

        l3 = $l1;

        $b4 = $l0 cmp 0L;

        if $b4 == 0 goto label01;

        $b4 = $l1 cmp 0L;

        if $b4 != 0 goto label04;

     label01:
        $b4 = $l0 cmp -9223372036854775808L;

        if $b4 == 0 goto label02;

        $b4 = $l1 cmp -9223372036854775808L;

        if $b4 != 0 goto label03;

     label02:
        $r0 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r1 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats GCD_OVERFLOW_64_BITS>;

        $r2 = newarray (java.lang.Object)[2];

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r2[0] = $r3;

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $r2[1] = $r3;

        specialinvoke $r0.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r1, $r2);

        throw $r0;

     label03:
        $l0 = staticinvoke <org.apache.commons.math3.util.FastMath: long abs(long)>($l0);

        $l1 = staticinvoke <org.apache.commons.math3.util.FastMath: long abs(long)>($l1);

        $l0 = $l0 + $l1;

        return $l0;

     label04:
        $b4 = $l0 cmp 0L;

        if $b4 <= 0 goto label05;

        l2 = neg $l0;

     label05:
        $b4 = $l1 cmp 0L;

        if $b4 <= 0 goto label06;

        l3 = neg $l1;

     label06:
        i5 = 0;

     label07:
        $l6 = 1L & l2;

        $b4 = $l6 cmp 0L;

        if $b4 != 0 goto label08;

        $l6 = 1L & l3;

        $b4 = $l6 cmp 0L;

        if $b4 != 0 goto label08;

        if i5 >= 63 goto label08;

        l2 = l2 / 2L;

        l3 = l3 / 2L;

        i5 = i5 + 1;

        goto label07;

     label08:
        if i5 != 63 goto label09;

        $r0 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r1 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats GCD_OVERFLOW_64_BITS>;

        $r2 = newarray (java.lang.Object)[2];

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r2[0] = $r3;

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $r2[1] = $r3;

        specialinvoke $r0.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r1, $r2);

        throw $r0;

     label09:
        $l0 = 1L & l2;

        $b4 = $l0 cmp 1L;

        if $b4 != 0 goto label11;

        $l0 = l3;

     label10:
        $l1 = 1L & $l0;

        $b4 = $l1 cmp 0L;

        if $b4 != 0 goto label12;

        $l0 = $l0 / 2L;

        goto label10;

     label11:
        $l0 = l2 / 2L;

        $l0 = neg $l0;

        goto label10;

     label12:
        $b4 = $l0 cmp 0L;

        if $b4 <= 0 goto label14;

        l2 = neg $l0;

     label13:
        $l0 = l3 - l2;

        $l0 = $l0 / 2L;

        $b4 = $l0 cmp 0L;

        if $b4 != 0 goto label10;

        $l0 = neg l2;

        $l1 = 1L << i5;

        $l0 = $l0 * $l1;

        return $l0;

     label14:
        l3 = $l0;

        goto label13;
    }
    private static int gcdPositive(int, int)
    {
        int i0, i1, $i2, i3, $i4;

        i1 := @parameter0: int;

        $i2 := @parameter1: int;

        if i1 != 0 goto label1;

        return $i2;

     label1:
        if $i2 == 0 goto label4;

        i0 = staticinvoke <java.lang.Integer: int numberOfTrailingZeros(int)>(i1);

        i3 = i1 >> i0;

        $i4 = staticinvoke <java.lang.Integer: int numberOfTrailingZeros(int)>($i2);

        i1 = $i2 >> $i4;

        $i2 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>(i0, $i4);

     label2:
        if i3 == i1 goto label3;

        i0 = i3 - i1;

        i1 = staticinvoke <java.lang.Math: int min(int,int)>(i3, i1);

        i3 = staticinvoke <java.lang.Math: int abs(int)>(i0);

        i0 = staticinvoke <java.lang.Integer: int numberOfTrailingZeros(int)>(i3);

        i3 = i3 >> i0;

        goto label2;

     label3:
        i1 = i3 << $i2;

     label4:
        return i1;
    }
    public static boolean isPowerOfTwo(long)
    {
        long $l0, $l2;
        byte $b1;

        $l0 := @parameter0: long;

        $b1 = $l0 cmp 0L;

        if $b1 <= 0 goto label1;

        $l2 = $l0 - 1L;

        $l0 = $l2 & $l0;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public static int lcm(int, int) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        int $i0, $i1, $i2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r0;
        org.apache.commons.math3.exception.MathArithmeticException $r1;
        java.lang.Object[] $r2;
        java.lang.Integer $r3;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        if $i0 == 0 goto label1;

        if $i1 != 0 goto label2;

     label1:
        return 0;

     label2:
        $i2 = staticinvoke <org.apache.commons.math3.util.ArithmeticUtils: int gcd(int,int)>($i0, $i1);

        $i2 = $i0 / $i2;

        $i2 = staticinvoke <org.apache.commons.math3.util.ArithmeticUtils: int mulAndCheck(int,int)>($i2, $i1);

        $i2 = staticinvoke <org.apache.commons.math3.util.FastMath: int abs(int)>($i2);

        if $i2 != -2147483648 goto label3;

        $r1 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r0 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats LCM_OVERFLOW_32_BITS>;

        $r2 = newarray (java.lang.Object)[2];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r2[0] = $r3;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r2[1] = $r3;

        specialinvoke $r1.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r0, $r2);

        throw $r1;

     label3:
        return $i2;
    }
    public static long lcm(long, long) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        long $l0, $l1, $l3;
        org.apache.commons.math3.exception.util.LocalizedFormats $r0;
        byte $b2;
        org.apache.commons.math3.exception.MathArithmeticException $r1;
        java.lang.Object[] $r2;
        java.lang.Long $r3;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $b2 = $l0 cmp 0L;

        if $b2 == 0 goto label2;

        $b2 = $l1 cmp 0L;

        if $b2 != 0 goto label1;

        return 0L;

     label1:
        $l3 = staticinvoke <org.apache.commons.math3.util.ArithmeticUtils: long gcd(long,long)>($l0, $l1);

        $l3 = $l0 / $l3;

        $l3 = staticinvoke <org.apache.commons.math3.util.ArithmeticUtils: long mulAndCheck(long,long)>($l3, $l1);

        $l3 = staticinvoke <org.apache.commons.math3.util.FastMath: long abs(long)>($l3);

        $b2 = $l3 cmp -9223372036854775808L;

        if $b2 != 0 goto label3;

        $r1 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r0 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats LCM_OVERFLOW_64_BITS>;

        $r2 = newarray (java.lang.Object)[2];

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r2[0] = $r3;

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $r2[1] = $r3;

        specialinvoke $r1.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r0, $r2);

        throw $r1;

     label2:
        return 0L;

     label3:
        return $l3;
    }
    public static int mulAndCheck(int, int) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        int $i0, $i1;
        long l2, $l3;
        byte $b4;
        org.apache.commons.math3.exception.MathArithmeticException $r0;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $l3 = (long) $i0;

        l2 = (long) $i1;

        l2 = $l3 * l2;

        $b4 = l2 cmp -2147483648L;

        if $b4 < 0 goto label1;

        $b4 = l2 cmp 2147483647L;

        if $b4 <= 0 goto label2;

     label1:
        $r0 = new org.apache.commons.math3.exception.MathArithmeticException;

        specialinvoke $r0.<org.apache.commons.math3.exception.MathArithmeticException: void <init>()>();

        throw $r0;

     label2:
        $i0 = (int) l2;

        return $i0;
    }
    public static long mulAndCheck(long, long) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        long $l0, $l1, $l3;
        byte $b2;
        org.apache.commons.math3.exception.MathArithmeticException $r0;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $b2 = $l0 cmp $l1;

        if $b2 <= 0 goto label1;

        $l0 = staticinvoke <org.apache.commons.math3.util.ArithmeticUtils: long mulAndCheck(long,long)>($l1, $l0);

        return $l0;

     label1:
        $b2 = $l0 cmp 0L;

        if $b2 >= 0 goto label6;

        $b2 = $l1 cmp 0L;

        if $b2 >= 0 goto label3;

        $l3 = 9223372036854775807L / $l1;

        $b2 = $l0 cmp $l3;

        if $b2 < 0 goto label2;

        $l0 = $l0 * $l1;

        return $l0;

     label2:
        $r0 = new org.apache.commons.math3.exception.MathArithmeticException;

        specialinvoke $r0.<org.apache.commons.math3.exception.MathArithmeticException: void <init>()>();

        throw $r0;

     label3:
        $b2 = $l1 cmp 0L;

        if $b2 <= 0 goto label5;

        $l3 = -9223372036854775808L / $l1;

        $b2 = $l3 cmp $l0;

        if $b2 > 0 goto label4;

        $l0 = $l0 * $l1;

        return $l0;

     label4:
        $r0 = new org.apache.commons.math3.exception.MathArithmeticException;

        specialinvoke $r0.<org.apache.commons.math3.exception.MathArithmeticException: void <init>()>();

        throw $r0;

     label5:
        return 0L;

     label6:
        $b2 = $l0 cmp 0L;

        if $b2 <= 0 goto label8;

        $l3 = 9223372036854775807L / $l1;

        $b2 = $l0 cmp $l3;

        if $b2 > 0 goto label7;

        $l0 = $l0 * $l1;

        return $l0;

     label7:
        $r0 = new org.apache.commons.math3.exception.MathArithmeticException;

        specialinvoke $r0.<org.apache.commons.math3.exception.MathArithmeticException: void <init>()>();

        throw $r0;

     label8:
        return 0L;
    }
    public static int pow(int, int) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.MathArithmeticException
    {
        int $i0, $i1, i2, i3, i4, $i5;
        org.apache.commons.math3.exception.MathArithmeticException r0;
        org.apache.commons.math3.exception.NotPositiveException $r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        java.lang.Integer $r3;
        org.apache.commons.math3.exception.util.ExceptionContext $r4;
        java.lang.Object[] $r5;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        if $i1 >= 0 goto label1;

        $r1 = new org.apache.commons.math3.exception.NotPositiveException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats EXPONENT>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        specialinvoke $r1.<org.apache.commons.math3.exception.NotPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r2, $r3);

        throw $r1;

     label1:
        i2 = $i1;

        i3 = 1;

        i4 = $i0;

     label2:
        $i5 = i2 & 1;

        if $i5 == 0 goto label4;

     label3:
        i3 = staticinvoke <org.apache.commons.math3.util.ArithmeticUtils: int mulAndCheck(int,int)>(i3, i4);

     label4:
        i2 = i2 >> 1;

        if i2 != 0 goto label5;

        return i3;

     label5:
        i4 = staticinvoke <org.apache.commons.math3.util.ArithmeticUtils: int mulAndCheck(int,int)>(i4, i4);

     label6:
        goto label2;

     label7:
        r0 := @caughtexception;

        $r4 = virtualinvoke r0.<org.apache.commons.math3.exception.MathArithmeticException: org.apache.commons.math3.exception.util.ExceptionContext getContext()>();

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OVERFLOW>;

        $r5 = newarray (java.lang.Object)[0];

        virtualinvoke $r4.<org.apache.commons.math3.exception.util.ExceptionContext: void addMessage(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r2, $r5);

        $r4 = virtualinvoke r0.<org.apache.commons.math3.exception.MathArithmeticException: org.apache.commons.math3.exception.util.ExceptionContext getContext()>();

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats BASE>;

        $r5 = newarray (java.lang.Object)[1];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r5[0] = $r3;

        virtualinvoke $r4.<org.apache.commons.math3.exception.util.ExceptionContext: void addMessage(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r2, $r5);

        $r4 = virtualinvoke r0.<org.apache.commons.math3.exception.MathArithmeticException: org.apache.commons.math3.exception.util.ExceptionContext getContext()>();

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats EXPONENT>;

        $r5 = newarray (java.lang.Object)[1];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r5[0] = $r3;

        virtualinvoke $r4.<org.apache.commons.math3.exception.util.ExceptionContext: void addMessage(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r2, $r5);

        throw r0;

        catch org.apache.commons.math3.exception.MathArithmeticException from label3 to label4 with label7;
        catch org.apache.commons.math3.exception.MathArithmeticException from label5 to label6 with label7;
    }
    public static int pow(int, long) throws org.apache.commons.math3.exception.NotPositiveException
    {
        int $i0, i3;
        org.apache.commons.math3.exception.util.LocalizedFormats $r0;
        java.lang.Long $r1;
        long $l1, $l4;
        byte $b2;
        org.apache.commons.math3.exception.NotPositiveException $r2;

        $i0 := @parameter0: int;

        $l1 := @parameter1: long;

        $b2 = $l1 cmp 0L;

        if $b2 >= 0 goto label1;

        $r2 = new org.apache.commons.math3.exception.NotPositiveException;

        $r0 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats EXPONENT>;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        specialinvoke $r2.<org.apache.commons.math3.exception.NotPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r0, $r1);

        throw $r2;

     label1:
        i3 = 1;

     label2:
        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label4;

        $l4 = 1L & $l1;

        $b2 = $l4 cmp 0L;

        if $b2 == 0 goto label3;

        i3 = i3 * $i0;

     label3:
        $i0 = $i0 * $i0;

        $l1 = $l1 >> 1;

        goto label2;

     label4:
        return i3;
    }
    public static long pow(long, int) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.MathArithmeticException
    {
        long $l0, l3, l4;
        int $i1, i2, $i5;
        org.apache.commons.math3.exception.MathArithmeticException r0;
        org.apache.commons.math3.exception.NotPositiveException $r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        java.lang.Integer $r3;
        org.apache.commons.math3.exception.util.ExceptionContext $r4;
        java.lang.Object[] $r5;
        java.lang.Long $r6;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        if $i1 >= 0 goto label1;

        $r1 = new org.apache.commons.math3.exception.NotPositiveException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats EXPONENT>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        specialinvoke $r1.<org.apache.commons.math3.exception.NotPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r2, $r3);

        throw $r1;

     label1:
        i2 = $i1;

        l3 = 1L;

        l4 = $l0;

     label2:
        $i5 = i2 & 1;

        if $i5 == 0 goto label4;

     label3:
        l3 = staticinvoke <org.apache.commons.math3.util.ArithmeticUtils: long mulAndCheck(long,long)>(l3, l4);

     label4:
        i2 = i2 >> 1;

        if i2 != 0 goto label5;

        return l3;

     label5:
        l4 = staticinvoke <org.apache.commons.math3.util.ArithmeticUtils: long mulAndCheck(long,long)>(l4, l4);

     label6:
        goto label2;

     label7:
        r0 := @caughtexception;

        $r4 = virtualinvoke r0.<org.apache.commons.math3.exception.MathArithmeticException: org.apache.commons.math3.exception.util.ExceptionContext getContext()>();

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OVERFLOW>;

        $r5 = newarray (java.lang.Object)[0];

        virtualinvoke $r4.<org.apache.commons.math3.exception.util.ExceptionContext: void addMessage(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r2, $r5);

        $r4 = virtualinvoke r0.<org.apache.commons.math3.exception.MathArithmeticException: org.apache.commons.math3.exception.util.ExceptionContext getContext()>();

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats BASE>;

        $r5 = newarray (java.lang.Object)[1];

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r5[0] = $r6;

        virtualinvoke $r4.<org.apache.commons.math3.exception.util.ExceptionContext: void addMessage(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r2, $r5);

        $r4 = virtualinvoke r0.<org.apache.commons.math3.exception.MathArithmeticException: org.apache.commons.math3.exception.util.ExceptionContext getContext()>();

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats EXPONENT>;

        $r5 = newarray (java.lang.Object)[1];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r5[0] = $r3;

        virtualinvoke $r4.<org.apache.commons.math3.exception.util.ExceptionContext: void addMessage(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r2, $r5);

        throw r0;

        catch org.apache.commons.math3.exception.MathArithmeticException from label3 to label4 with label7;
        catch org.apache.commons.math3.exception.MathArithmeticException from label5 to label6 with label7;
    }
    public static long pow(long, long) throws org.apache.commons.math3.exception.NotPositiveException
    {
        long $l0, $l1, l3, $l4;
        org.apache.commons.math3.exception.util.LocalizedFormats $r0;
        java.lang.Long $r1;
        byte $b2;
        org.apache.commons.math3.exception.NotPositiveException $r2;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $b2 = $l1 cmp 0L;

        if $b2 >= 0 goto label1;

        $r2 = new org.apache.commons.math3.exception.NotPositiveException;

        $r0 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats EXPONENT>;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        specialinvoke $r2.<org.apache.commons.math3.exception.NotPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r0, $r1);

        throw $r2;

     label1:
        l3 = 1L;

     label2:
        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label4;

        $l4 = 1L & $l1;

        $b2 = $l4 cmp 0L;

        if $b2 == 0 goto label3;

        l3 = l3 * $l0;

     label3:
        $l0 = $l0 * $l0;

        $l1 = $l1 >> 1;

        goto label2;

     label4:
        return l3;
    }
    public static java.math.BigInteger pow(java.math.BigInteger, int) throws org.apache.commons.math3.exception.NotPositiveException
    {
        java.math.BigInteger $r0;
        int $i0;
        org.apache.commons.math3.exception.util.LocalizedFormats $r1;
        org.apache.commons.math3.exception.NotPositiveException $r2;
        java.lang.Integer $r3;

        $r0 := @parameter0: java.math.BigInteger;

        $i0 := @parameter1: int;

        if $i0 >= 0 goto label1;

        $r2 = new org.apache.commons.math3.exception.NotPositiveException;

        $r1 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats EXPONENT>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r2.<org.apache.commons.math3.exception.NotPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r1, $r3);

        throw $r2;

     label1:
        $r0 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger pow(int)>($i0);

        return $r0;
    }
    public static java.math.BigInteger pow(java.math.BigInteger, long) throws org.apache.commons.math3.exception.NotPositiveException
    {
        java.math.BigInteger $r0, r4;
        org.apache.commons.math3.exception.util.LocalizedFormats $r1;
        long $l0, $l2;
        byte $b1;
        org.apache.commons.math3.exception.NotPositiveException $r2;
        java.lang.Long $r3;

        $r0 := @parameter0: java.math.BigInteger;

        $l0 := @parameter1: long;

        $b1 = $l0 cmp 0L;

        if $b1 >= 0 goto label1;

        $r2 = new org.apache.commons.math3.exception.NotPositiveException;

        $r1 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats EXPONENT>;

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        specialinvoke $r2.<org.apache.commons.math3.exception.NotPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r1, $r3);

        throw $r2;

     label1:
        r4 = <java.math.BigInteger: java.math.BigInteger ONE>;

     label2:
        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label4;

        $l2 = 1L & $l0;

        $b1 = $l2 cmp 0L;

        if $b1 == 0 goto label3;

        r4 = virtualinvoke r4.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r0);

     label3:
        $r0 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r0);

        $l0 = $l0 >> 1;

        goto label2;

     label4:
        return r4;
    }
    public static java.math.BigInteger pow(java.math.BigInteger, java.math.BigInteger) throws org.apache.commons.math3.exception.NotPositiveException
    {
        java.math.BigInteger $r0, $r2, $r3, $r5;
        org.apache.commons.math3.exception.util.LocalizedFormats $r1;
        int $i0;
        org.apache.commons.math3.exception.NotPositiveException $r4;
        boolean $z0;

        $r0 := @parameter0: java.math.BigInteger;

        $r2 := @parameter1: java.math.BigInteger;

        $r3 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        $i0 = virtualinvoke $r2.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r3);

        if $i0 >= 0 goto label1;

        $r4 = new org.apache.commons.math3.exception.NotPositiveException;

        $r1 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats EXPONENT>;

        specialinvoke $r4.<org.apache.commons.math3.exception.NotPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r1, $r2);

        throw $r4;

     label1:
        $r3 = <java.math.BigInteger: java.math.BigInteger ONE>;

     label2:
        $r5 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        $z0 = virtualinvoke $r5.<java.math.BigInteger: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label4;

        $z0 = virtualinvoke $r2.<java.math.BigInteger: boolean testBit(int)>(0);

        if $z0 == 0 goto label3;

        $r3 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r0);

     label3:
        $r0 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r0);

        $r2 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>(1);

        goto label2;

     label4:
        return $r3;
    }
    public static long stirlingS2(int, int) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.exception.MathArithmeticException
    {
        int $i0, $i1;
        long $l2;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $l2 = staticinvoke <org.apache.commons.math3.util.CombinatoricsUtils: long stirlingS2(int,int)>($i0, $i1);

        return $l2;
    }
    public static int subAndCheck(int, int) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        int $i0, $i1;
        long l2, $l3;
        org.apache.commons.math3.exception.util.LocalizedFormats $r0;
        byte $b4;
        org.apache.commons.math3.exception.MathArithmeticException $r1;
        java.lang.Object[] $r2;
        java.lang.Integer $r3;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        l2 = (long) $i0;

        $l3 = (long) $i1;

        l2 = l2 - $l3;

        $b4 = l2 cmp -2147483648L;

        if $b4 < 0 goto label1;

        $b4 = l2 cmp 2147483647L;

        if $b4 <= 0 goto label2;

     label1:
        $r1 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r0 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OVERFLOW_IN_SUBTRACTION>;

        $r2 = newarray (java.lang.Object)[2];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r2[0] = $r3;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r2[1] = $r3;

        specialinvoke $r1.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r0, $r2);

        throw $r1;

     label2:
        $i0 = (int) l2;

        return $i0;
    }
    public static long subAndCheck(long, long) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        long $l0, $l1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r0;
        byte $b2;
        org.apache.commons.math3.exception.MathArithmeticException $r1;
        java.lang.Object[] $r2;
        java.lang.Long $r3;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $b2 = $l1 cmp -9223372036854775808L;

        if $b2 != 0 goto label2;

        $b2 = $l0 cmp 0L;

        if $b2 >= 0 goto label1;

        $l0 = $l0 - $l1;

        return $l0;

     label1:
        $r1 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r0 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OVERFLOW_IN_ADDITION>;

        $r2 = newarray (java.lang.Object)[2];

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r2[0] = $r3;

        $l0 = neg $l1;

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r2[1] = $r3;

        specialinvoke $r1.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r0, $r2);

        throw $r1;

     label2:
        $l1 = neg $l1;

        $r0 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OVERFLOW_IN_ADDITION>;

        $l0 = staticinvoke <org.apache.commons.math3.util.ArithmeticUtils: long addAndCheck(long,long,org.apache.commons.math3.exception.util.Localizable)>($l0, $l1, $r0);

        return $l0;
    }
