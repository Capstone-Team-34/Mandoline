org.apache.commons.math3.util.MultidimensionalCounter extends java.lang.Object implements java.lang.Iterable
private final int dimension
private final int last
private final int[] size
private final int totalSize
private final int[] uniCounterOffset
    public transient void <init>(int[]) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.util.MultidimensionalCounter r0;
        int[] $r1, $r2;
        int $i0, i1, $i2, i3, $i4;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r3;
        java.lang.Integer $r4;

        r0 := @this: org.apache.commons.math3.util.MultidimensionalCounter;

        $r1 := @parameter0: int[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = lengthof $r1;

        r0.<org.apache.commons.math3.util.MultidimensionalCounter: int dimension> = $i0;

        $r2 = staticinvoke <org.apache.commons.math3.util.MathArrays: int[] copyOf(int[])>($r1);

        r0.<org.apache.commons.math3.util.MultidimensionalCounter: int[] size> = $r2;

        $i0 = r0.<org.apache.commons.math3.util.MultidimensionalCounter: int dimension>;

        $r2 = newarray (int)[$i0];

        r0.<org.apache.commons.math3.util.MultidimensionalCounter: int[] uniCounterOffset> = $r2;

        $i0 = r0.<org.apache.commons.math3.util.MultidimensionalCounter: int dimension>;

        $i0 = $i0 + -1;

        r0.<org.apache.commons.math3.util.MultidimensionalCounter: int last> = $i0;

        $i0 = r0.<org.apache.commons.math3.util.MultidimensionalCounter: int last>;

        $i0 = $r1[$i0];

        i1 = 0;

     label1:
        $i2 = r0.<org.apache.commons.math3.util.MultidimensionalCounter: int last>;

        if i1 >= $i2 goto label4;

        $i2 = 1;

        i3 = i1 + 1;

     label2:
        $i4 = r0.<org.apache.commons.math3.util.MultidimensionalCounter: int dimension>;

        if i3 >= $i4 goto label3;

        $i4 = $r1[i3];

        $i2 = $i2 * $i4;

        i3 = i3 + 1;

        goto label2;

     label3:
        $r2 = r0.<org.apache.commons.math3.util.MultidimensionalCounter: int[] uniCounterOffset>;

        $r2[i1] = $i2;

        $i2 = $r1[i1];

        $i0 = $i0 * $i2;

        i1 = i1 + 1;

        goto label1;

     label4:
        $r1 = r0.<org.apache.commons.math3.util.MultidimensionalCounter: int[] uniCounterOffset>;

        i1 = r0.<org.apache.commons.math3.util.MultidimensionalCounter: int last>;

        $r1[i1] = 0;

        if $i0 > 0 goto label5;

        $r3 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r3.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(java.lang.Number)>($r4);

        throw $r3;

     label5:
        r0.<org.apache.commons.math3.util.MultidimensionalCounter: int totalSize> = $i0;

        return;
    }
    static int access$000(org.apache.commons.math3.util.MultidimensionalCounter)
    {
        org.apache.commons.math3.util.MultidimensionalCounter $r0;
        int i0;

        $r0 := @parameter0: org.apache.commons.math3.util.MultidimensionalCounter;

        i0 = $r0.<org.apache.commons.math3.util.MultidimensionalCounter: int dimension>;

        return i0;
    }
    static int access$100(org.apache.commons.math3.util.MultidimensionalCounter)
    {
        org.apache.commons.math3.util.MultidimensionalCounter $r0;
        int i0;

        $r0 := @parameter0: org.apache.commons.math3.util.MultidimensionalCounter;

        i0 = $r0.<org.apache.commons.math3.util.MultidimensionalCounter: int totalSize>;

        return i0;
    }
    static int access$200(org.apache.commons.math3.util.MultidimensionalCounter)
    {
        org.apache.commons.math3.util.MultidimensionalCounter $r0;
        int i0;

        $r0 := @parameter0: org.apache.commons.math3.util.MultidimensionalCounter;

        i0 = $r0.<org.apache.commons.math3.util.MultidimensionalCounter: int last>;

        return i0;
    }
    static int[] access$300(org.apache.commons.math3.util.MultidimensionalCounter)
    {
        org.apache.commons.math3.util.MultidimensionalCounter $r0;
        int[] r1;

        $r0 := @parameter0: org.apache.commons.math3.util.MultidimensionalCounter;

        r1 = $r0.<org.apache.commons.math3.util.MultidimensionalCounter: int[] size>;

        return r1;
    }
    public transient int getCount(int[]) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.util.MultidimensionalCounter r0;
        int[] $r1, $r3;
        int i0, $i1, $i2, $i3;
        org.apache.commons.math3.exception.DimensionMismatchException $r2;
        org.apache.commons.math3.exception.OutOfRangeException $r4;
        java.lang.Integer $r5, $r6, $r7;

        r0 := @this: org.apache.commons.math3.util.MultidimensionalCounter;

        $r1 := @parameter0: int[];

        $i1 = lengthof $r1;

        $i2 = r0.<org.apache.commons.math3.util.MultidimensionalCounter: int dimension>;

        if $i1 == $i2 goto label1;

        $r2 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i1 = lengthof $r1;

        $i2 = r0.<org.apache.commons.math3.util.MultidimensionalCounter: int dimension>;

        specialinvoke $r2.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i1, $i2);

        throw $r2;

     label1:
        $i1 = 0;

        $i2 = 0;

     label2:
        i0 = r0.<org.apache.commons.math3.util.MultidimensionalCounter: int dimension>;

        if $i2 >= i0 goto label5;

        i0 = $r1[$i2];

        if i0 < 0 goto label3;

        $r3 = r0.<org.apache.commons.math3.util.MultidimensionalCounter: int[] size>;

        $i3 = $r3[$i2];

        if i0 < $i3 goto label4;

     label3:
        $r4 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r1 = r0.<org.apache.commons.math3.util.MultidimensionalCounter: int[] size>;

        $i1 = $r1[$i2];

        $i1 = $i1 + -1;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        specialinvoke $r4.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r5, $r6, $r7);

        throw $r4;

     label4:
        $r3 = r0.<org.apache.commons.math3.util.MultidimensionalCounter: int[] uniCounterOffset>;

        i0 = $r3[$i2];

        $i3 = $r1[$i2];

        i0 = i0 * $i3;

        $i1 = $i1 + i0;

        $i2 = $i2 + 1;

        goto label2;

     label5:
        $i2 = r0.<org.apache.commons.math3.util.MultidimensionalCounter: int last>;

        $i2 = $r1[$i2];

        $i1 = $i2 + $i1;

        return $i1;
    }
    public int[] getCounts(int) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.util.MultidimensionalCounter r0;
        int $i0, i1, $i2, i3, i4;
        int[] r1, $r6;
        org.apache.commons.math3.exception.OutOfRangeException $r2;
        java.lang.Integer $r3, $r4, $r5;

        r0 := @this: org.apache.commons.math3.util.MultidimensionalCounter;

        $i0 := @parameter0: int;

        if $i0 < 0 goto label1;

        $i2 = r0.<org.apache.commons.math3.util.MultidimensionalCounter: int totalSize>;

        if $i0 < $i2 goto label2;

     label1:
        $r2 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $i0 = r0.<org.apache.commons.math3.util.MultidimensionalCounter: int totalSize>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r2.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r3, $r4, $r5);

        throw $r2;

     label2:
        $i2 = r0.<org.apache.commons.math3.util.MultidimensionalCounter: int dimension>;

        r1 = newarray (int)[$i2];

        $i2 = 0;

        i3 = 0;

     label3:
        i1 = r0.<org.apache.commons.math3.util.MultidimensionalCounter: int last>;

        if i3 >= i1 goto label6;

        i4 = 0;

        $r6 = r0.<org.apache.commons.math3.util.MultidimensionalCounter: int[] uniCounterOffset>;

        i1 = $r6[i3];

     label4:
        if $i2 > $i0 goto label5;

        $i2 = $i2 + i1;

        i4 = i4 + 1;

        goto label4;

     label5:
        i4 = i4 + -1;

        $i2 = $i2 - i1;

        r1[i3] = i4;

        i3 = i3 + 1;

        goto label3;

     label6:
        i3 = r0.<org.apache.commons.math3.util.MultidimensionalCounter: int last>;

        $i0 = $i0 - $i2;

        r1[i3] = $i0;

        return r1;
    }
    public int getDimension()
    {
        org.apache.commons.math3.util.MultidimensionalCounter r0;
        int i0;

        r0 := @this: org.apache.commons.math3.util.MultidimensionalCounter;

        i0 = r0.<org.apache.commons.math3.util.MultidimensionalCounter: int dimension>;

        return i0;
    }
    public int getSize()
    {
        org.apache.commons.math3.util.MultidimensionalCounter r0;
        int i0;

        r0 := @this: org.apache.commons.math3.util.MultidimensionalCounter;

        i0 = r0.<org.apache.commons.math3.util.MultidimensionalCounter: int totalSize>;

        return i0;
    }
    public int[] getSizes()
    {
        org.apache.commons.math3.util.MultidimensionalCounter r0;
        int[] $r1;

        r0 := @this: org.apache.commons.math3.util.MultidimensionalCounter;

        $r1 = r0.<org.apache.commons.math3.util.MultidimensionalCounter: int[] size>;

        $r1 = staticinvoke <org.apache.commons.math3.util.MathArrays: int[] copyOf(int[])>($r1);

        return $r1;
    }
    public volatile java.util.Iterator iterator()
    {
        org.apache.commons.math3.util.MultidimensionalCounter r0;
        org.apache.commons.math3.util.MultidimensionalCounter$Iterator $r1;

        r0 := @this: org.apache.commons.math3.util.MultidimensionalCounter;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.util.MultidimensionalCounter: org.apache.commons.math3.util.MultidimensionalCounter$Iterator iterator()>();

        return $r1;
    }
    public org.apache.commons.math3.util.MultidimensionalCounter$Iterator iterator()
    {
        org.apache.commons.math3.util.MultidimensionalCounter r0;
        org.apache.commons.math3.util.MultidimensionalCounter$Iterator $r1;

        r0 := @this: org.apache.commons.math3.util.MultidimensionalCounter;

        $r1 = new org.apache.commons.math3.util.MultidimensionalCounter$Iterator;

        specialinvoke $r1.<org.apache.commons.math3.util.MultidimensionalCounter$Iterator: void <init>(org.apache.commons.math3.util.MultidimensionalCounter)>(r0);

        return $r1;
    }
    public java.lang.String toString()
    {
        org.apache.commons.math3.util.MultidimensionalCounter r0;
        java.lang.StringBuilder r1, $r2;
        int i0, $i1;
        int[] $r3;
        java.lang.String $r4;

        r0 := @this: org.apache.commons.math3.util.MultidimensionalCounter;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        i0 = 0;

     label1:
        $i1 = r0.<org.apache.commons.math3.util.MultidimensionalCounter: int dimension>;

        if i0 >= $i1 goto label2;

        $r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r3 = newarray (int)[1];

        $r3[0] = i0;

        $i1 = virtualinvoke r0.<org.apache.commons.math3.util.MultidimensionalCounter: int getCount(int[])>($r3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        i0 = i0 + 1;

        goto label1;

     label2:
        $r4 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }
