org.apache.commons.math3.util.MultidimensionalCounter$Iterator extends java.lang.Object implements java.util.Iterator
private int count
private final int[] counter
private final int maxCount
final org.apache.commons.math3.util.MultidimensionalCounter this$0
    void <init>(org.apache.commons.math3.util.MultidimensionalCounter)
    {
        org.apache.commons.math3.util.MultidimensionalCounter$Iterator r0;
        org.apache.commons.math3.util.MultidimensionalCounter $r1, $r2;
        int $i0;
        int[] $r3;

        r0 := @this: org.apache.commons.math3.util.MultidimensionalCounter$Iterator;

        $r1 := @parameter0: org.apache.commons.math3.util.MultidimensionalCounter;

        r0.<org.apache.commons.math3.util.MultidimensionalCounter$Iterator: org.apache.commons.math3.util.MultidimensionalCounter this$0> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = r0.<org.apache.commons.math3.util.MultidimensionalCounter$Iterator: org.apache.commons.math3.util.MultidimensionalCounter this$0>;

        $i0 = staticinvoke <org.apache.commons.math3.util.MultidimensionalCounter: int access$000(org.apache.commons.math3.util.MultidimensionalCounter)>($r2);

        $r3 = newarray (int)[$i0];

        r0.<org.apache.commons.math3.util.MultidimensionalCounter$Iterator: int[] counter> = $r3;

        r0.<org.apache.commons.math3.util.MultidimensionalCounter$Iterator: int count> = -1;

        $r2 = r0.<org.apache.commons.math3.util.MultidimensionalCounter$Iterator: org.apache.commons.math3.util.MultidimensionalCounter this$0>;

        $i0 = staticinvoke <org.apache.commons.math3.util.MultidimensionalCounter: int access$100(org.apache.commons.math3.util.MultidimensionalCounter)>($r2);

        $i0 = $i0 + -1;

        r0.<org.apache.commons.math3.util.MultidimensionalCounter$Iterator: int maxCount> = $i0;

        $r3 = r0.<org.apache.commons.math3.util.MultidimensionalCounter$Iterator: int[] counter>;

        $i0 = staticinvoke <org.apache.commons.math3.util.MultidimensionalCounter: int access$200(org.apache.commons.math3.util.MultidimensionalCounter)>($r1);

        $r3[$i0] = -1;

        return;
    }
    public int getCount()
    {
        org.apache.commons.math3.util.MultidimensionalCounter$Iterator r0;
        int i0;

        r0 := @this: org.apache.commons.math3.util.MultidimensionalCounter$Iterator;

        i0 = r0.<org.apache.commons.math3.util.MultidimensionalCounter$Iterator: int count>;

        return i0;
    }
    public int getCount(int)
    {
        org.apache.commons.math3.util.MultidimensionalCounter$Iterator r0;
        int $i0;
        int[] $r1;

        r0 := @this: org.apache.commons.math3.util.MultidimensionalCounter$Iterator;

        $i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.math3.util.MultidimensionalCounter$Iterator: int[] counter>;

        $i0 = $r1[$i0];

        return $i0;
    }
    public int[] getCounts()
    {
        org.apache.commons.math3.util.MultidimensionalCounter$Iterator r0;
        int[] $r1;

        r0 := @this: org.apache.commons.math3.util.MultidimensionalCounter$Iterator;

        $r1 = r0.<org.apache.commons.math3.util.MultidimensionalCounter$Iterator: int[] counter>;

        $r1 = staticinvoke <org.apache.commons.math3.util.MathArrays: int[] copyOf(int[])>($r1);

        return $r1;
    }
    public boolean hasNext()
    {
        org.apache.commons.math3.util.MultidimensionalCounter$Iterator r0;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.util.MultidimensionalCounter$Iterator;

        $i1 = r0.<org.apache.commons.math3.util.MultidimensionalCounter$Iterator: int count>;

        $i0 = r0.<org.apache.commons.math3.util.MultidimensionalCounter$Iterator: int maxCount>;

        if $i1 >= $i0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public java.lang.Integer next()
    {
        org.apache.commons.math3.util.MultidimensionalCounter$Iterator r0;
        boolean $z0;
        java.util.NoSuchElementException $r1;
        org.apache.commons.math3.util.MultidimensionalCounter $r2;
        int $i0, $i1, $i2;
        int[] $r3;
        java.lang.Integer $r4;

        r0 := @this: org.apache.commons.math3.util.MultidimensionalCounter$Iterator;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.util.MultidimensionalCounter$Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r1 = new java.util.NoSuchElementException;

        specialinvoke $r1.<java.util.NoSuchElementException: void <init>()>();

        throw $r1;

     label1:
        $r2 = r0.<org.apache.commons.math3.util.MultidimensionalCounter$Iterator: org.apache.commons.math3.util.MultidimensionalCounter this$0>;

        $i0 = staticinvoke <org.apache.commons.math3.util.MultidimensionalCounter: int access$200(org.apache.commons.math3.util.MultidimensionalCounter)>($r2);

     label2:
        if $i0 < 0 goto label4;

        $r3 = r0.<org.apache.commons.math3.util.MultidimensionalCounter$Iterator: int[] counter>;

        $i1 = $r3[$i0];

        $r2 = r0.<org.apache.commons.math3.util.MultidimensionalCounter$Iterator: org.apache.commons.math3.util.MultidimensionalCounter this$0>;

        $r3 = staticinvoke <org.apache.commons.math3.util.MultidimensionalCounter: int[] access$300(org.apache.commons.math3.util.MultidimensionalCounter)>($r2);

        $i2 = $r3[$i0];

        $i2 = $i2 + -1;

        if $i1 != $i2 goto label3;

        $r3 = r0.<org.apache.commons.math3.util.MultidimensionalCounter$Iterator: int[] counter>;

        $r3[$i0] = 0;

        $i0 = $i0 + -1;

        goto label2;

     label3:
        $r3 = r0.<org.apache.commons.math3.util.MultidimensionalCounter$Iterator: int[] counter>;

        $i1 = $r3[$i0];

        $i1 = $i1 + 1;

        $r3[$i0] = $i1;

     label4:
        $i0 = r0.<org.apache.commons.math3.util.MultidimensionalCounter$Iterator: int count>;

        $i0 = $i0 + 1;

        r0.<org.apache.commons.math3.util.MultidimensionalCounter$Iterator: int count> = $i0;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r4;
    }
    public volatile java.lang.Object next()
    {
        org.apache.commons.math3.util.MultidimensionalCounter$Iterator r0;
        java.lang.Integer $r1;

        r0 := @this: org.apache.commons.math3.util.MultidimensionalCounter$Iterator;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.util.MultidimensionalCounter$Iterator: java.lang.Integer next()>();

        return $r1;
    }
    public void remove()
    {
        org.apache.commons.math3.util.MultidimensionalCounter$Iterator r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: org.apache.commons.math3.util.MultidimensionalCounter$Iterator;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }
