org.apache.commons.math3.util.TransformerMap extends java.lang.Object implements org.apache.commons.math3.util.NumberTransformer java.io.Serializable
private static final long serialVersionUID
private org.apache.commons.math3.util.NumberTransformer defaultTransformer
private java.util.Map map
    public void <init>()
    {
        org.apache.commons.math3.util.TransformerMap r0;
        java.util.HashMap $r1;
        org.apache.commons.math3.util.DefaultTransformer $r2;

        r0 := @this: org.apache.commons.math3.util.TransformerMap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.util.TransformerMap: org.apache.commons.math3.util.NumberTransformer defaultTransformer> = null;

        r0.<org.apache.commons.math3.util.TransformerMap: java.util.Map map> = null;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.commons.math3.util.TransformerMap: java.util.Map map> = $r1;

        $r2 = new org.apache.commons.math3.util.DefaultTransformer;

        specialinvoke $r2.<org.apache.commons.math3.util.DefaultTransformer: void <init>()>();

        r0.<org.apache.commons.math3.util.TransformerMap: org.apache.commons.math3.util.NumberTransformer defaultTransformer> = $r2;

        return;
    }
    public java.util.Set classes()
    {
        org.apache.commons.math3.util.TransformerMap r0;
        java.util.Set $r1;
        java.util.Map $r2;

        r0 := @this: org.apache.commons.math3.util.TransformerMap;

        $r2 = r0.<org.apache.commons.math3.util.TransformerMap: java.util.Map map>;

        $r1 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>();

        return $r1;
    }
    public void clear()
    {
        org.apache.commons.math3.util.TransformerMap r0;
        java.util.Map $r1;

        r0 := @this: org.apache.commons.math3.util.TransformerMap;

        $r1 = r0.<org.apache.commons.math3.util.TransformerMap: java.util.Map map>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        return;
    }
    public boolean containsClass(java.lang.Class)
    {
        org.apache.commons.math3.util.TransformerMap r0;
        java.lang.Class r1;
        boolean $z0;
        java.util.Map $r2;

        r0 := @this: org.apache.commons.math3.util.TransformerMap;

        r1 := @parameter0: java.lang.Class;

        $r2 = r0.<org.apache.commons.math3.util.TransformerMap: java.util.Map map>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }
    public boolean containsTransformer(org.apache.commons.math3.util.NumberTransformer)
    {
        org.apache.commons.math3.util.TransformerMap r0;
        org.apache.commons.math3.util.NumberTransformer $r1;
        boolean $z0;
        java.util.Map $r2;

        r0 := @this: org.apache.commons.math3.util.TransformerMap;

        $r1 := @parameter0: org.apache.commons.math3.util.NumberTransformer;

        $r2 = r0.<org.apache.commons.math3.util.TransformerMap: java.util.Map map>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsValue(java.lang.Object)>($r1);

        return $z0;
    }
    public boolean equals(java.lang.Object)
    {
        org.apache.commons.math3.util.TransformerMap r0, r2;
        java.lang.Object $r1;
        boolean $z0;
        org.apache.commons.math3.util.NumberTransformer $r3, $r4;
        java.util.Map $r5;
        int $i0, $i1;
        java.util.Set $r6;
        java.util.Iterator $r7;
        java.util.Map$Entry r8;

        r0 := @this: org.apache.commons.math3.util.TransformerMap;

        $r1 := @parameter0: java.lang.Object;

        if r0 != $r1 goto label1;

        return 1;

     label1:
        $z0 = $r1 instanceof org.apache.commons.math3.util.TransformerMap;

        if $z0 == 0 goto label6;

        r2 = (org.apache.commons.math3.util.TransformerMap) $r1;

        $r3 = r0.<org.apache.commons.math3.util.TransformerMap: org.apache.commons.math3.util.NumberTransformer defaultTransformer>;

        $r4 = r2.<org.apache.commons.math3.util.TransformerMap: org.apache.commons.math3.util.NumberTransformer defaultTransformer>;

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $r5 = r0.<org.apache.commons.math3.util.TransformerMap: java.util.Map map>;

        $i0 = interfaceinvoke $r5.<java.util.Map: int size()>();

        $r5 = r2.<org.apache.commons.math3.util.TransformerMap: java.util.Map map>;

        $i1 = interfaceinvoke $r5.<java.util.Map: int size()>();

        if $i0 == $i1 goto label3;

        return 0;

     label3:
        $r5 = r0.<org.apache.commons.math3.util.TransformerMap: java.util.Map map>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set entrySet()>();

        $r7 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r1 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.util.Map$Entry) $r1;

        $r1 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r3 = (org.apache.commons.math3.util.NumberTransformer) $r1;

        $r5 = r2.<org.apache.commons.math3.util.TransformerMap: java.util.Map map>;

        $r1 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r1 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label4;

        return 0;

     label5:
        return 1;

     label6:
        return 0;
    }
    public org.apache.commons.math3.util.NumberTransformer getTransformer(java.lang.Class)
    {
        org.apache.commons.math3.util.TransformerMap r0;
        java.lang.Class r1;
        java.lang.Object $r2;
        java.util.Map $r3;
        org.apache.commons.math3.util.NumberTransformer $r4;

        r0 := @this: org.apache.commons.math3.util.TransformerMap;

        r1 := @parameter0: java.lang.Class;

        $r3 = r0.<org.apache.commons.math3.util.TransformerMap: java.util.Map map>;

        $r2 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (org.apache.commons.math3.util.NumberTransformer) $r2;

        return $r4;
    }
    public int hashCode()
    {
        org.apache.commons.math3.util.TransformerMap r0;
        org.apache.commons.math3.util.NumberTransformer $r1;
        int $i0, $i1;
        java.util.Map $r2;
        java.util.Collection $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;

        r0 := @this: org.apache.commons.math3.util.TransformerMap;

        $r1 = r0.<org.apache.commons.math3.util.TransformerMap: org.apache.commons.math3.util.NumberTransformer defaultTransformer>;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $r2 = r0.<org.apache.commons.math3.util.TransformerMap: java.util.Map map>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>();

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r1 = (org.apache.commons.math3.util.NumberTransformer) $r5;

        $i0 = $i0 * 31;

        $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $i0 = $i0 + $i1;

        goto label1;

     label2:
        return $i0;
    }
    public org.apache.commons.math3.util.NumberTransformer putTransformer(java.lang.Class, org.apache.commons.math3.util.NumberTransformer)
    {
        org.apache.commons.math3.util.TransformerMap r0;
        java.lang.Class r1;
        org.apache.commons.math3.util.NumberTransformer $r2;
        java.lang.Object $r3;
        java.util.Map $r4;

        r0 := @this: org.apache.commons.math3.util.TransformerMap;

        r1 := @parameter0: java.lang.Class;

        $r2 := @parameter1: org.apache.commons.math3.util.NumberTransformer;

        $r4 = r0.<org.apache.commons.math3.util.TransformerMap: java.util.Map map>;

        $r3 = interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r2);

        $r2 = (org.apache.commons.math3.util.NumberTransformer) $r3;

        return $r2;
    }
    public org.apache.commons.math3.util.NumberTransformer removeTransformer(java.lang.Class)
    {
        org.apache.commons.math3.util.TransformerMap r0;
        java.lang.Class r1;
        java.lang.Object $r2;
        java.util.Map $r3;
        org.apache.commons.math3.util.NumberTransformer $r4;

        r0 := @this: org.apache.commons.math3.util.TransformerMap;

        r1 := @parameter0: java.lang.Class;

        $r3 = r0.<org.apache.commons.math3.util.TransformerMap: java.util.Map map>;

        $r2 = interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        $r4 = (org.apache.commons.math3.util.NumberTransformer) $r2;

        return $r4;
    }
    public double transform(java.lang.Object) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.util.TransformerMap r0;
        java.lang.Object $r1;
        boolean $z0;
        org.apache.commons.math3.util.NumberTransformer $r2;
        double $d0;
        java.lang.Class $r3;

        r0 := @this: org.apache.commons.math3.util.TransformerMap;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof java.lang.Number;

        if $z0 != 0 goto label1;

        $z0 = $r1 instanceof java.lang.String;

        if $z0 == 0 goto label2;

     label1:
        $r2 = r0.<org.apache.commons.math3.util.TransformerMap: org.apache.commons.math3.util.NumberTransformer defaultTransformer>;

        $d0 = interfaceinvoke $r2.<org.apache.commons.math3.util.NumberTransformer: double transform(java.lang.Object)>($r1);

        return $d0;

     label2:
        $r3 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke r0.<org.apache.commons.math3.util.TransformerMap: org.apache.commons.math3.util.NumberTransformer getTransformer(java.lang.Class)>($r3);

        if $r2 == null goto label3;

        $d0 = interfaceinvoke $r2.<org.apache.commons.math3.util.NumberTransformer: double transform(java.lang.Object)>($r1);

        return $d0;

     label3:
        return #NaN;
    }
    public java.util.Collection transformers()
    {
        org.apache.commons.math3.util.TransformerMap r0;
        java.util.Collection $r1;
        java.util.Map $r2;

        r0 := @this: org.apache.commons.math3.util.TransformerMap;

        $r2 = r0.<org.apache.commons.math3.util.TransformerMap: java.util.Map map>;

        $r1 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>();

        return $r1;
    }
