org.apache.commons.math3.util.Combinations$LexicographicIterator extends java.lang.Object implements java.util.Iterator
private final int[] c
private int j
private final int k
private boolean more
    void <init>(int, int)
    {
        org.apache.commons.math3.util.Combinations$LexicographicIterator r0;
        int $i0, $i1, $i2, $i3;
        int[] $r1;

        r0 := @this: org.apache.commons.math3.util.Combinations$LexicographicIterator;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.util.Combinations$LexicographicIterator: boolean more> = 1;

        r0.<org.apache.commons.math3.util.Combinations$LexicographicIterator: int k> = $i1;

        $i2 = $i1 + 3;

        $r1 = newarray (int)[$i2];

        r0.<org.apache.commons.math3.util.Combinations$LexicographicIterator: int[] c> = $r1;

        if $i1 == 0 goto label1;

        if $i1 < $i0 goto label2;

     label1:
        r0.<org.apache.commons.math3.util.Combinations$LexicographicIterator: boolean more> = 0;

        return;

     label2:
        $i2 = 1;

     label3:
        if $i2 > $i1 goto label4;

        $r1 = r0.<org.apache.commons.math3.util.Combinations$LexicographicIterator: int[] c>;

        $i3 = $i2 + -1;

        $r1[$i2] = $i3;

        $i2 = $i2 + 1;

        goto label3;

     label4:
        $r1 = r0.<org.apache.commons.math3.util.Combinations$LexicographicIterator: int[] c>;

        $i2 = $i1 + 1;

        $r1[$i2] = $i0;

        $r1 = r0.<org.apache.commons.math3.util.Combinations$LexicographicIterator: int[] c>;

        $i0 = $i1 + 2;

        $r1[$i0] = 0;

        r0.<org.apache.commons.math3.util.Combinations$LexicographicIterator: int j> = $i1;

        return;
    }
    public boolean hasNext()
    {
        org.apache.commons.math3.util.Combinations$LexicographicIterator r0;
        boolean z0;

        r0 := @this: org.apache.commons.math3.util.Combinations$LexicographicIterator;

        z0 = r0.<org.apache.commons.math3.util.Combinations$LexicographicIterator: boolean more>;

        return z0;
    }
    public volatile java.lang.Object next()
    {
        org.apache.commons.math3.util.Combinations$LexicographicIterator r0;
        int[] $r1;

        r0 := @this: org.apache.commons.math3.util.Combinations$LexicographicIterator;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.util.Combinations$LexicographicIterator: int[] next()>();

        return $r1;
    }
    public int[] next()
    {
        org.apache.commons.math3.util.Combinations$LexicographicIterator r0;
        int[] r1, $r3;
        boolean $z0;
        java.util.NoSuchElementException $r2;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.commons.math3.util.Combinations$LexicographicIterator;

        $z0 = r0.<org.apache.commons.math3.util.Combinations$LexicographicIterator: boolean more>;

        if $z0 != 0 goto label1;

        $r2 = new java.util.NoSuchElementException;

        specialinvoke $r2.<java.util.NoSuchElementException: void <init>()>();

        throw $r2;

     label1:
        $i0 = r0.<org.apache.commons.math3.util.Combinations$LexicographicIterator: int k>;

        r1 = newarray (int)[$i0];

        $r3 = r0.<org.apache.commons.math3.util.Combinations$LexicographicIterator: int[] c>;

        $i0 = r0.<org.apache.commons.math3.util.Combinations$LexicographicIterator: int k>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 1, r1, 0, $i0);

        $i0 = 0;

        $i1 = r0.<org.apache.commons.math3.util.Combinations$LexicographicIterator: int j>;

        if $i1 <= 0 goto label2;

        $i0 = r0.<org.apache.commons.math3.util.Combinations$LexicographicIterator: int j>;

        $r3 = r0.<org.apache.commons.math3.util.Combinations$LexicographicIterator: int[] c>;

        $i1 = r0.<org.apache.commons.math3.util.Combinations$LexicographicIterator: int j>;

        $r3[$i1] = $i0;

        $i0 = r0.<org.apache.commons.math3.util.Combinations$LexicographicIterator: int j>;

        $i0 = $i0 + -1;

        r0.<org.apache.commons.math3.util.Combinations$LexicographicIterator: int j> = $i0;

        return r1;

     label2:
        $r3 = r0.<org.apache.commons.math3.util.Combinations$LexicographicIterator: int[] c>;

        $i1 = $r3[1];

        $i1 = $i1 + 1;

        $r3 = r0.<org.apache.commons.math3.util.Combinations$LexicographicIterator: int[] c>;

        $i2 = $r3[2];

        if $i1 >= $i2 goto label3;

        $r3 = r0.<org.apache.commons.math3.util.Combinations$LexicographicIterator: int[] c>;

        $i0 = $r3[1];

        $i0 = $i0 + 1;

        $r3[1] = $i0;

        return r1;

     label3:
        r0.<org.apache.commons.math3.util.Combinations$LexicographicIterator: int j> = 2;

        $z0 = 0;

     label4:
        if $z0 != 0 goto label6;

        $r3 = r0.<org.apache.commons.math3.util.Combinations$LexicographicIterator: int[] c>;

        $i0 = r0.<org.apache.commons.math3.util.Combinations$LexicographicIterator: int j>;

        $i0 = $i0 + -1;

        $i1 = r0.<org.apache.commons.math3.util.Combinations$LexicographicIterator: int j>;

        $i1 = $i1 + -2;

        $r3[$i0] = $i1;

        $r3 = r0.<org.apache.commons.math3.util.Combinations$LexicographicIterator: int[] c>;

        $i0 = r0.<org.apache.commons.math3.util.Combinations$LexicographicIterator: int j>;

        $i0 = $r3[$i0];

        $i0 = $i0 + 1;

        $r3 = r0.<org.apache.commons.math3.util.Combinations$LexicographicIterator: int[] c>;

        $i1 = r0.<org.apache.commons.math3.util.Combinations$LexicographicIterator: int j>;

        $i1 = $i1 + 1;

        $i1 = $r3[$i1];

        if $i0 != $i1 goto label5;

        $i1 = r0.<org.apache.commons.math3.util.Combinations$LexicographicIterator: int j>;

        $i1 = $i1 + 1;

        r0.<org.apache.commons.math3.util.Combinations$LexicographicIterator: int j> = $i1;

        goto label4;

     label5:
        $z0 = 1;

        goto label4;

     label6:
        $i1 = r0.<org.apache.commons.math3.util.Combinations$LexicographicIterator: int j>;

        $i2 = r0.<org.apache.commons.math3.util.Combinations$LexicographicIterator: int k>;

        if $i1 <= $i2 goto label7;

        r0.<org.apache.commons.math3.util.Combinations$LexicographicIterator: boolean more> = 0;

        return r1;

     label7:
        $r3 = r0.<org.apache.commons.math3.util.Combinations$LexicographicIterator: int[] c>;

        $i1 = r0.<org.apache.commons.math3.util.Combinations$LexicographicIterator: int j>;

        $r3[$i1] = $i0;

        $i0 = r0.<org.apache.commons.math3.util.Combinations$LexicographicIterator: int j>;

        $i0 = $i0 + -1;

        r0.<org.apache.commons.math3.util.Combinations$LexicographicIterator: int j> = $i0;

        return r1;
    }
    public void remove()
    {
        org.apache.commons.math3.util.Combinations$LexicographicIterator r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: org.apache.commons.math3.util.Combinations$LexicographicIterator;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }
