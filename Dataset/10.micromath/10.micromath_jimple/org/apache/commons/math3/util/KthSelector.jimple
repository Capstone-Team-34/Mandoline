org.apache.commons.math3.util.KthSelector extends java.lang.Object implements java.io.Serializable
private static final int MIN_SELECT_SIZE
private static final long serialVersionUID
private final org.apache.commons.math3.util.PivotingStrategyInterface pivotingStrategy
    public void <init>()
    {
        org.apache.commons.math3.util.KthSelector r0;
        org.apache.commons.math3.util.MedianOf3PivotingStrategy $r1;

        r0 := @this: org.apache.commons.math3.util.KthSelector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.commons.math3.util.MedianOf3PivotingStrategy;

        specialinvoke $r1.<org.apache.commons.math3.util.MedianOf3PivotingStrategy: void <init>()>();

        r0.<org.apache.commons.math3.util.KthSelector: org.apache.commons.math3.util.PivotingStrategyInterface pivotingStrategy> = $r1;

        return;
    }
    public void <init>(org.apache.commons.math3.util.PivotingStrategyInterface) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.util.KthSelector r0;
        org.apache.commons.math3.util.PivotingStrategyInterface $r1;

        r0 := @this: org.apache.commons.math3.util.KthSelector;

        $r1 := @parameter0: org.apache.commons.math3.util.PivotingStrategyInterface;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>($r1);

        r0.<org.apache.commons.math3.util.KthSelector: org.apache.commons.math3.util.PivotingStrategyInterface pivotingStrategy> = $r1;

        return;
    }
    private int partition(double[], int, int, int)
    {
        org.apache.commons.math3.util.KthSelector r0;
        double[] $r1;
        int $i0, $i1, $i2, i3, i4, i6;
        double d0, d1, $d2;
        byte $b5;

        r0 := @this: org.apache.commons.math3.util.KthSelector;

        $r1 := @parameter0: double[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        d1 = $r1[$i2];

        d0 = $r1[$i0];

        $r1[$i2] = d0;

        $i2 = $i0 + 1;

        i3 = $i1 + -1;

     label1:
        if $i2 >= i3 goto label5;

        i4 = i3;

     label2:
        if $i2 >= i4 goto label9;

        d0 = $r1[i4];

        $b5 = d0 cmpl d1;

        if $b5 <= 0 goto label9;

        i4 = i4 + -1;

        goto label2;

     label3:
        if i6 >= i4 goto label4;

        d0 = $r1[i6];

        $b5 = d0 cmpg d1;

        if $b5 >= 0 goto label4;

        i6 = i6 + 1;

        goto label3;

     label4:
        if i6 >= i4 goto label8;

        d0 = $r1[i6];

        $i2 = i6 + 1;

        $d2 = $r1[i4];

        $r1[i6] = $d2;

        i3 = i4 + -1;

        $r1[i4] = d0;

        goto label1;

     label5:
        if $i2 >= $i1 goto label6;

        d0 = $r1[$i2];

        $b5 = d0 cmpl d1;

        if $b5 <= 0 goto label7;

     label6:
        $i2 = $i2 + -1;

     label7:
        d0 = $r1[$i2];

        $r1[$i0] = d0;

        $r1[$i2] = d1;

        return $i2;

     label8:
        i3 = i4;

        $i2 = i6;

        goto label1;

     label9:
        i6 = $i2;

        goto label3;
    }
    public org.apache.commons.math3.util.PivotingStrategyInterface getPivotingStrategy()
    {
        org.apache.commons.math3.util.KthSelector r0;
        org.apache.commons.math3.util.PivotingStrategyInterface r1;

        r0 := @this: org.apache.commons.math3.util.KthSelector;

        r1 = r0.<org.apache.commons.math3.util.KthSelector: org.apache.commons.math3.util.PivotingStrategyInterface pivotingStrategy>;

        return r1;
    }
    public double select(double[], int[], int)
    {
        org.apache.commons.math3.util.KthSelector r0;
        double[] $r1;
        int[] $r2;
        int $i0, i1, i2, i3, $i4, $i5, $i6;
        boolean z0;
        double $d0;
        org.apache.commons.math3.util.PivotingStrategyInterface $r3;

        r0 := @this: org.apache.commons.math3.util.KthSelector;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: int[];

        $i0 := @parameter2: int;

        i1 = 0;

        i2 = lengthof $r1;

        i3 = 0;

        if $r2 == null goto label03;

        z0 = 1;

     label01:
        $i4 = i2 - i1;

        if $i4 <= 15 goto label11;

        if z0 == 0 goto label04;

        $i4 = lengthof $r2;

        if i3 >= $i4 goto label04;

        $i4 = $r2[i3];

        if $i4 < 0 goto label04;

        $i4 = $r2[i3];

     label02:
        if $i0 != $i4 goto label05;

        $d0 = $r1[$i0];

        return $d0;

     label03:
        z0 = 0;

        goto label01;

     label04:
        $r3 = r0.<org.apache.commons.math3.util.KthSelector: org.apache.commons.math3.util.PivotingStrategyInterface pivotingStrategy>;

        $i4 = interfaceinvoke $r3.<org.apache.commons.math3.util.PivotingStrategyInterface: int pivotIndex(double[],int,int)>($r1, i1, i2);

        $i5 = specialinvoke r0.<org.apache.commons.math3.util.KthSelector: int partition(double[],int,int,int)>($r1, i1, i2, $i4);

        $i4 = $i5;

        if z0 == 0 goto label02;

        $i6 = lengthof $r2;

        if i3 >= $i6 goto label02;

        $r2[i3] = $i5;

        goto label02;

     label05:
        if $i0 >= $i4 goto label08;

        i2 = $i4;

        i3 = i3 * 2;

        i3 = i3 + 1;

        if z0 == 0 goto label07;

        $i4 = lengthof $r2;

     label06:
        i3 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>(i3, $i4);

        goto label01;

     label07:
        goto label06;

     label08:
        i1 = $i4 + 1;

        i3 = i3 * 2;

        i3 = i3 + 2;

        if z0 == 0 goto label10;

        $i4 = lengthof $r2;

     label09:
        i3 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>(i3, $i4);

        goto label01;

     label10:
        $i4 = i2;

        goto label09;

     label11:
        staticinvoke <java.util.Arrays: void sort(double[],int,int)>($r1, i1, i2);

        $d0 = $r1[$i0];

        return $d0;
    }
