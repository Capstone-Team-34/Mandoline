org.apache.commons.math3.util.FastMath$Split extends java.lang.Object
public static final org.apache.commons.math3.util.FastMath$Split NAN
public static final org.apache.commons.math3.util.FastMath$Split NEGATIVE_INFINITY
public static final org.apache.commons.math3.util.FastMath$Split POSITIVE_INFINITY
private final double full
private final double high
private final double low
    static void <clinit>()
    {
        org.apache.commons.math3.util.FastMath$Split $r0;

        $r0 = new org.apache.commons.math3.util.FastMath$Split;

        specialinvoke $r0.<org.apache.commons.math3.util.FastMath$Split: void <init>(double,double)>(#NaN, 0.0);

        <org.apache.commons.math3.util.FastMath$Split: org.apache.commons.math3.util.FastMath$Split NAN> = $r0;

        $r0 = new org.apache.commons.math3.util.FastMath$Split;

        specialinvoke $r0.<org.apache.commons.math3.util.FastMath$Split: void <init>(double,double)>(#Infinity, 0.0);

        <org.apache.commons.math3.util.FastMath$Split: org.apache.commons.math3.util.FastMath$Split POSITIVE_INFINITY> = $r0;

        $r0 = new org.apache.commons.math3.util.FastMath$Split;

        specialinvoke $r0.<org.apache.commons.math3.util.FastMath$Split: void <init>(double,double)>(#-Infinity, 0.0);

        <org.apache.commons.math3.util.FastMath$Split: org.apache.commons.math3.util.FastMath$Split NEGATIVE_INFINITY> = $r0;

        return;
    }
    void <init>(double)
    {
        org.apache.commons.math3.util.FastMath$Split r0;
        double $d0, $d1;
        long $l0;

        r0 := @this: org.apache.commons.math3.util.FastMath$Split;

        $d0 := @parameter0: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.util.FastMath$Split: double full> = $d0;

        $l0 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>($d0);

        $l0 = $l0 & -134217728L;

        $d1 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l0);

        r0.<org.apache.commons.math3.util.FastMath$Split: double high> = $d1;

        $d1 = r0.<org.apache.commons.math3.util.FastMath$Split: double high>;

        $d0 = $d0 - $d1;

        r0.<org.apache.commons.math3.util.FastMath$Split: double low> = $d0;

        return;
    }
    void <init>(double, double)
    {
        org.apache.commons.math3.util.FastMath$Split r0;
        double $d0, $d1, $d2;
        long $l0;
        byte $b1;

        r0 := @this: org.apache.commons.math3.util.FastMath$Split;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $b1 = $d0 cmpl 0.0;

        if $b1 != 0 goto label3;

        $b1 = $d1 cmpl 0.0;

        if $b1 != 0 goto label2;

        $l0 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>($d0);

        $b1 = $l0 cmp -9223372036854775808L;

        if $b1 != 0 goto label2;

        $d2 = -0.0;

     label1:
        specialinvoke r0.<org.apache.commons.math3.util.FastMath$Split: void <init>(double,double,double)>($d2, $d0, $d1);

        return;

     label2:
        $d2 = $d1;

        goto label1;

     label3:
        $d2 = $d0 + $d1;

        goto label1;
    }
    void <init>(double, double, double)
    {
        org.apache.commons.math3.util.FastMath$Split r0;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.util.FastMath$Split;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.util.FastMath$Split: double full> = $d0;

        r0.<org.apache.commons.math3.util.FastMath$Split: double high> = $d1;

        r0.<org.apache.commons.math3.util.FastMath$Split: double low> = $d2;

        return;
    }
    static org.apache.commons.math3.util.FastMath$Split access$500(org.apache.commons.math3.util.FastMath$Split, long)
    {
        org.apache.commons.math3.util.FastMath$Split $r0;
        long $l0;

        $r0 := @parameter0: org.apache.commons.math3.util.FastMath$Split;

        $l0 := @parameter1: long;

        $r0 = specialinvoke $r0.<org.apache.commons.math3.util.FastMath$Split: org.apache.commons.math3.util.FastMath$Split pow(long)>($l0);

        return $r0;
    }
    static double access$600(org.apache.commons.math3.util.FastMath$Split)
    {
        org.apache.commons.math3.util.FastMath$Split $r0;
        double d0;

        $r0 := @parameter0: org.apache.commons.math3.util.FastMath$Split;

        d0 = $r0.<org.apache.commons.math3.util.FastMath$Split: double full>;

        return d0;
    }
    private org.apache.commons.math3.util.FastMath$Split pow(long)
    {
        org.apache.commons.math3.util.FastMath$Split r0, r1, r2;
        long $l0, l1, $l3;
        double $d0, $d1, $d2;
        byte $b2;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.util.FastMath$Split;

        $l0 := @parameter0: long;

        r1 = new org.apache.commons.math3.util.FastMath$Split;

        specialinvoke r1.<org.apache.commons.math3.util.FastMath$Split: void <init>(double)>(1.0);

        r2 = new org.apache.commons.math3.util.FastMath$Split;

        $d1 = r0.<org.apache.commons.math3.util.FastMath$Split: double full>;

        $d2 = r0.<org.apache.commons.math3.util.FastMath$Split: double high>;

        $d0 = r0.<org.apache.commons.math3.util.FastMath$Split: double low>;

        specialinvoke r2.<org.apache.commons.math3.util.FastMath$Split: void <init>(double,double,double)>($d1, $d2, $d0);

        l1 = $l0;

     label1:
        $b2 = l1 cmp 0L;

        if $b2 == 0 goto label3;

        $l3 = 1L & l1;

        $b2 = $l3 cmp 0L;

        if $b2 == 0 goto label2;

        r1 = virtualinvoke r1.<org.apache.commons.math3.util.FastMath$Split: org.apache.commons.math3.util.FastMath$Split multiply(org.apache.commons.math3.util.FastMath$Split)>(r2);

     label2:
        r2 = virtualinvoke r2.<org.apache.commons.math3.util.FastMath$Split: org.apache.commons.math3.util.FastMath$Split multiply(org.apache.commons.math3.util.FastMath$Split)>(r2);

        l1 = l1 >>> 1;

        goto label1;

     label3:
        $d0 = r1.<org.apache.commons.math3.util.FastMath$Split: double full>;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 == 0 goto label7;

        $d0 = r0.<org.apache.commons.math3.util.FastMath$Split: double full>;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 == 0 goto label4;

        r0 = <org.apache.commons.math3.util.FastMath$Split: org.apache.commons.math3.util.FastMath$Split NAN>;

        return r0;

     label4:
        $d0 = r0.<org.apache.commons.math3.util.FastMath$Split: double full>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        $b2 = $d0 cmpg 1.0;

        if $b2 >= 0 goto label5;

        r1 = new org.apache.commons.math3.util.FastMath$Split;

        $d0 = r0.<org.apache.commons.math3.util.FastMath$Split: double full>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double copySign(double,double)>(0.0, $d0);

        specialinvoke r1.<org.apache.commons.math3.util.FastMath$Split: void <init>(double,double)>($d0, 0.0);

        return r1;

     label5:
        $d0 = r0.<org.apache.commons.math3.util.FastMath$Split: double full>;

        $b2 = $d0 cmpg 0.0;

        if $b2 >= 0 goto label6;

        $l0 = 1L & $l0;

        $b2 = $l0 cmp 1L;

        if $b2 != 0 goto label6;

        r0 = <org.apache.commons.math3.util.FastMath$Split: org.apache.commons.math3.util.FastMath$Split NEGATIVE_INFINITY>;

        return r0;

     label6:
        r0 = <org.apache.commons.math3.util.FastMath$Split: org.apache.commons.math3.util.FastMath$Split POSITIVE_INFINITY>;

        return r0;

     label7:
        return r1;
    }
    public org.apache.commons.math3.util.FastMath$Split multiply(org.apache.commons.math3.util.FastMath$Split)
    {
        org.apache.commons.math3.util.FastMath$Split r0, $r1, r2;
        double d0, $d1, $d2, $d3;

        r0 := @this: org.apache.commons.math3.util.FastMath$Split;

        $r1 := @parameter0: org.apache.commons.math3.util.FastMath$Split;

        r2 = new org.apache.commons.math3.util.FastMath$Split;

        $d1 = r0.<org.apache.commons.math3.util.FastMath$Split: double full>;

        d0 = $r1.<org.apache.commons.math3.util.FastMath$Split: double full>;

        $d1 = $d1 * d0;

        specialinvoke r2.<org.apache.commons.math3.util.FastMath$Split: void <init>(double)>($d1);

        $d1 = r0.<org.apache.commons.math3.util.FastMath$Split: double low>;

        d0 = $r1.<org.apache.commons.math3.util.FastMath$Split: double low>;

        $d1 = $d1 * d0;

        d0 = r2.<org.apache.commons.math3.util.FastMath$Split: double full>;

        $d2 = r0.<org.apache.commons.math3.util.FastMath$Split: double high>;

        $d3 = $r1.<org.apache.commons.math3.util.FastMath$Split: double high>;

        $d2 = $d2 * $d3;

        d0 = d0 - $d2;

        $d2 = r0.<org.apache.commons.math3.util.FastMath$Split: double low>;

        $d3 = $r1.<org.apache.commons.math3.util.FastMath$Split: double high>;

        $d2 = $d2 * $d3;

        d0 = d0 - $d2;

        $d2 = r0.<org.apache.commons.math3.util.FastMath$Split: double high>;

        $d3 = $r1.<org.apache.commons.math3.util.FastMath$Split: double low>;

        $d2 = $d2 * $d3;

        d0 = d0 - $d2;

        d0 = $d1 - d0;

        r0 = new org.apache.commons.math3.util.FastMath$Split;

        $d1 = r2.<org.apache.commons.math3.util.FastMath$Split: double high>;

        $d2 = r2.<org.apache.commons.math3.util.FastMath$Split: double low>;

        d0 = $d2 + d0;

        specialinvoke r0.<org.apache.commons.math3.util.FastMath$Split: void <init>(double,double)>($d1, d0);

        return r0;
    }
    public org.apache.commons.math3.util.FastMath$Split reciprocal()
    {
        org.apache.commons.math3.util.FastMath$Split r0, r1, $r2;
        double d0, d1, $d2, $d3;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.util.FastMath$Split;

        d0 = r0.<org.apache.commons.math3.util.FastMath$Split: double full>;

        d0 = 1.0 / d0;

        r1 = new org.apache.commons.math3.util.FastMath$Split;

        specialinvoke r1.<org.apache.commons.math3.util.FastMath$Split: void <init>(double)>(d0);

        $r2 = virtualinvoke r0.<org.apache.commons.math3.util.FastMath$Split: org.apache.commons.math3.util.FastMath$Split multiply(org.apache.commons.math3.util.FastMath$Split)>(r1);

        d0 = $r2.<org.apache.commons.math3.util.FastMath$Split: double high>;

        d0 = d0 - 1.0;

        $d2 = $r2.<org.apache.commons.math3.util.FastMath$Split: double low>;

        d1 = d0 + $d2;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1);

        if $z0 == 0 goto label1;

        return r1;

     label1:
        $r2 = new org.apache.commons.math3.util.FastMath$Split;

        d0 = r1.<org.apache.commons.math3.util.FastMath$Split: double high>;

        $d2 = r1.<org.apache.commons.math3.util.FastMath$Split: double low>;

        $d3 = r0.<org.apache.commons.math3.util.FastMath$Split: double full>;

        d1 = d1 / $d3;

        $d2 = $d2 - d1;

        specialinvoke $r2.<org.apache.commons.math3.util.FastMath$Split: void <init>(double,double)>(d0, $d2);

        return $r2;
    }
