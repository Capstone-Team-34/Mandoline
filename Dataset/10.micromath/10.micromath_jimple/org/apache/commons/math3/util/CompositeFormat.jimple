org.apache.commons.math3.util.CompositeFormat extends java.lang.Object
    private void <init>()
    {
        org.apache.commons.math3.util.CompositeFormat r0;

        r0 := @this: org.apache.commons.math3.util.CompositeFormat;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static java.lang.StringBuffer formatDouble(double, java.text.NumberFormat, java.lang.StringBuffer, java.text.FieldPosition)
    {
        double $d0;
        java.text.NumberFormat $r0;
        java.lang.StringBuffer $r1;
        java.text.FieldPosition $r2;
        boolean $z0;

        $d0 := @parameter0: double;

        $r0 := @parameter1: java.text.NumberFormat;

        $r1 := @parameter2: java.lang.StringBuffer;

        $r2 := @parameter3: java.text.FieldPosition;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 != 0 goto label1;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d0);

        if $z0 == 0 goto label2;

     label1:
        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(40);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(double)>($d0);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(41);

        return $r1;

     label2:
        virtualinvoke $r0.<java.text.NumberFormat: java.lang.StringBuffer format(double,java.lang.StringBuffer,java.text.FieldPosition)>($d0, $r1, $r2);

        return $r1;
    }
    public static java.text.NumberFormat getDefaultNumberFormat()
    {
        java.util.Locale $r0;
        java.text.NumberFormat $r1;

        $r0 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r1 = staticinvoke <org.apache.commons.math3.util.CompositeFormat: java.text.NumberFormat getDefaultNumberFormat(java.util.Locale)>($r0);

        return $r1;
    }
    public static java.text.NumberFormat getDefaultNumberFormat(java.util.Locale)
    {
        java.util.Locale $r0;
        java.text.NumberFormat $r1;

        $r0 := @parameter0: java.util.Locale;

        $r1 = staticinvoke <java.text.NumberFormat: java.text.NumberFormat getInstance(java.util.Locale)>($r0);

        virtualinvoke $r1.<java.text.NumberFormat: void setMaximumFractionDigits(int)>(10);

        return $r1;
    }
    public static void parseAndIgnoreWhitespace(java.lang.String, java.text.ParsePosition)
    {
        java.lang.String $r0;
        java.text.ParsePosition $r1;
        int $i0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.text.ParsePosition;

        staticinvoke <org.apache.commons.math3.util.CompositeFormat: char parseNextCharacter(java.lang.String,java.text.ParsePosition)>($r0, $r1);

        $i0 = virtualinvoke $r1.<java.text.ParsePosition: int getIndex()>();

        $i0 = $i0 + -1;

        virtualinvoke $r1.<java.text.ParsePosition: void setIndex(int)>($i0);

        return;
    }
    public static boolean parseFixedstring(java.lang.String, java.lang.String, java.text.ParsePosition)
    {
        java.lang.String $r0, $r1;
        java.text.ParsePosition $r2;
        int i0, $i1, $i2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.text.ParsePosition;

        $i1 = virtualinvoke $r2.<java.text.ParsePosition: int getIndex()>();

        i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        i0 = $i1 + i0;

        $i2 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i1 >= $i2 goto label1;

        $i2 = virtualinvoke $r0.<java.lang.String: int length()>();

        if i0 > $i2 goto label1;

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>($i1, i0);

        $i2 = virtualinvoke $r0.<java.lang.String: int compareTo(java.lang.String)>($r1);

        if $i2 == 0 goto label2;

     label1:
        virtualinvoke $r2.<java.text.ParsePosition: void setIndex(int)>($i1);

        virtualinvoke $r2.<java.text.ParsePosition: void setErrorIndex(int)>($i1);

        return 0;

     label2:
        virtualinvoke $r2.<java.text.ParsePosition: void setIndex(int)>(i0);

        return 1;
    }
    public static char parseNextCharacter(java.lang.String, java.text.ParsePosition)
    {
        java.lang.String $r0;
        java.text.ParsePosition $r1;
        int i0, i1, $i2;
        char $c3;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.text.ParsePosition;

        i0 = virtualinvoke $r1.<java.text.ParsePosition: int getIndex()>();

        i1 = i0;

        $i2 = virtualinvoke $r0.<java.lang.String: int length()>();

        if i0 >= $i2 goto label5;

     label1:
        i0 = i1 + 1;

        $c3 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(i1);

        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c3);

        if $z0 == 0 goto label2;

        if i0 < $i2 goto label4;

     label2:
        virtualinvoke $r1.<java.text.ParsePosition: void setIndex(int)>(i0);

        if i0 >= $i2 goto label3;

        return $c3;

     label3:
        return 0;

     label4:
        i1 = i0;

        goto label1;

     label5:
        return 0;
    }
    private static java.lang.Number parseNumber(java.lang.String, double, java.text.ParsePosition)
    {
        java.lang.String $r0, $r3;
        double $d0;
        java.text.ParsePosition $r1;
        int i0, $i1, $i2;
        java.lang.StringBuilder r2;
        java.lang.Double $r4;

        $r0 := @parameter0: java.lang.String;

        $d0 := @parameter1: double;

        $r1 := @parameter2: java.text.ParsePosition;

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(40);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        i0 = virtualinvoke r2.<java.lang.StringBuilder: int length()>();

        $i1 = virtualinvoke $r1.<java.text.ParsePosition: int getIndex()>();

        i0 = $i1 + i0;

        $i2 = virtualinvoke $r0.<java.lang.String: int length()>();

        if i0 >= $i2 goto label1;

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>($i1, i0);

        $r3 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $i1 = virtualinvoke $r0.<java.lang.String: int compareTo(java.lang.String)>($r3);

        if $i1 != 0 goto label1;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        virtualinvoke $r1.<java.text.ParsePosition: void setIndex(int)>(i0);

        return $r4;

     label1:
        return null;
    }
    public static java.lang.Number parseNumber(java.lang.String, java.text.NumberFormat, java.text.ParsePosition)
    {
        java.lang.String $r0;
        java.text.NumberFormat $r1;
        java.text.ParsePosition $r2;
        double[] r3;
        double $d0;
        int $i0, $i1;
        java.lang.Number $r4, r5;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.text.NumberFormat;

        $r2 := @parameter2: java.text.ParsePosition;

        $i0 = virtualinvoke $r2.<java.text.ParsePosition: int getIndex()>();

        $r4 = virtualinvoke $r1.<java.text.NumberFormat: java.lang.Number parse(java.lang.String,java.text.ParsePosition)>($r0, $r2);

        r5 = $r4;

        $i1 = virtualinvoke $r2.<java.text.ParsePosition: int getIndex()>();

        if $i0 != $i1 goto label3;

        r3 = newarray (double)[3];

        r3[0] = #NaN;

        r3[1] = #Infinity;

        r3[2] = #-Infinity;

        $i0 = 0;

     label1:
        $i1 = lengthof r3;

        if $i0 >= $i1 goto label4;

        $d0 = r3[$i0];

        $r4 = staticinvoke <org.apache.commons.math3.util.CompositeFormat: java.lang.Number parseNumber(java.lang.String,double,java.text.ParsePosition)>($r0, $d0, $r2);

        r5 = $r4;

        if $r4 == null goto label2;

        return $r4;

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        return $r4;

     label4:
        return r5;
    }
