org.apache.commons.math3.util.Combinations$LexicographicComparator extends java.lang.Object implements java.util.Comparator java.io.Serializable
private static final long serialVersionUID
private final int k
private final int n
    void <init>(int, int)
    {
        org.apache.commons.math3.util.Combinations$LexicographicComparator r0;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.util.Combinations$LexicographicComparator;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.util.Combinations$LexicographicComparator: int n> = $i0;

        r0.<org.apache.commons.math3.util.Combinations$LexicographicComparator: int k> = $i1;

        return;
    }
    private long lexNorm(int[])
    {
        org.apache.commons.math3.util.Combinations$LexicographicComparator r0;
        int[] $r1;
        int i0, i2, $i3;
        long l1, $l4;
        org.apache.commons.math3.exception.OutOfRangeException $r2;
        java.lang.Integer $r3, $r4, $r5;

        r0 := @this: org.apache.commons.math3.util.Combinations$LexicographicComparator;

        $r1 := @parameter0: int[];

        l1 = 0L;

        i2 = 0;

     label1:
        i0 = lengthof $r1;

        if i2 >= i0 goto label4;

        i0 = $r1[i2];

        if i0 < 0 goto label2;

        $i3 = r0.<org.apache.commons.math3.util.Combinations$LexicographicComparator: int n>;

        if i0 < $i3 goto label3;

     label2:
        $r2 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        i2 = r0.<org.apache.commons.math3.util.Combinations$LexicographicComparator: int n>;

        i2 = i2 + -1;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        specialinvoke $r2.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r3, $r4, $r5);

        throw $r2;

     label3:
        i0 = $r1[i2];

        $i3 = r0.<org.apache.commons.math3.util.Combinations$LexicographicComparator: int n>;

        $i3 = staticinvoke <org.apache.commons.math3.util.ArithmeticUtils: int pow(int,int)>($i3, i2);

        i0 = i0 * $i3;

        $l4 = (long) i0;

        l1 = l1 + $l4;

        i2 = i2 + 1;

        goto label1;

     label4:
        return l1;
    }
    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        org.apache.commons.math3.util.Combinations$LexicographicComparator r0;
        int $i0;
        java.lang.Object $r1, $r2;
        int[] $r3, $r4;

        r0 := @this: org.apache.commons.math3.util.Combinations$LexicographicComparator;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = (int[]) $r1;

        $r4 = (int[]) $r2;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.util.Combinations$LexicographicComparator: int compare(int[],int[])>($r3, $r4);

        return $i0;
    }
    public int compare(int[], int[])
    {
        org.apache.commons.math3.util.Combinations$LexicographicComparator r0;
        int[] $r1, $r2;
        int $i0, $i1;
        org.apache.commons.math3.exception.DimensionMismatchException $r3;
        long $l2, $l3;
        byte $b4;

        r0 := @this: org.apache.commons.math3.util.Combinations$LexicographicComparator;

        $r1 := @parameter0: int[];

        $r2 := @parameter1: int[];

        $i0 = lengthof $r1;

        $i1 = r0.<org.apache.commons.math3.util.Combinations$LexicographicComparator: int k>;

        if $i0 == $i1 goto label1;

        $r3 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i0 = lengthof $r1;

        $i1 = r0.<org.apache.commons.math3.util.Combinations$LexicographicComparator: int k>;

        specialinvoke $r3.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i0, $i1);

        throw $r3;

     label1:
        $i0 = lengthof $r2;

        $i1 = r0.<org.apache.commons.math3.util.Combinations$LexicographicComparator: int k>;

        if $i0 == $i1 goto label2;

        $r3 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i0 = lengthof $r2;

        $i1 = r0.<org.apache.commons.math3.util.Combinations$LexicographicComparator: int k>;

        specialinvoke $r3.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i0, $i1);

        throw $r3;

     label2:
        $r1 = staticinvoke <org.apache.commons.math3.util.MathArrays: int[] copyOf(int[])>($r1);

        staticinvoke <java.util.Arrays: void sort(int[])>($r1);

        $r2 = staticinvoke <org.apache.commons.math3.util.MathArrays: int[] copyOf(int[])>($r2);

        staticinvoke <java.util.Arrays: void sort(int[])>($r2);

        $l2 = specialinvoke r0.<org.apache.commons.math3.util.Combinations$LexicographicComparator: long lexNorm(int[])>($r1);

        $l3 = specialinvoke r0.<org.apache.commons.math3.util.Combinations$LexicographicComparator: long lexNorm(int[])>($r2);

        $b4 = $l2 cmp $l3;

        if $b4 >= 0 goto label3;

        return -1;

     label3:
        $b4 = $l2 cmp $l3;

        if $b4 <= 0 goto label4;

        return 1;

     label4:
        return 0;
    }
