org.apache.commons.math3.util.MathUtils extends java.lang.Object
public static final double PI_SQUARED
public static final double TWO_PI
    private void <init>()
    {
        org.apache.commons.math3.util.MathUtils r0;

        r0 := @this: org.apache.commons.math3.util.MathUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static void checkFinite(double) throws org.apache.commons.math3.exception.NotFiniteNumberException
    {
        double $d0;
        boolean $z0;
        org.apache.commons.math3.exception.NotFiniteNumberException $r0;
        java.lang.Double $r1;
        java.lang.Object[] $r2;

        $d0 := @parameter0: double;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d0);

        if $z0 != 0 goto label1;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 == 0 goto label2;

     label1:
        $r0 = new org.apache.commons.math3.exception.NotFiniteNumberException;

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r2 = newarray (java.lang.Object)[0];

        specialinvoke $r0.<org.apache.commons.math3.exception.NotFiniteNumberException: void <init>(java.lang.Number,java.lang.Object[])>($r1, $r2);

        throw $r0;

     label2:
        return;
    }
    public static void checkFinite(double[]) throws org.apache.commons.math3.exception.NotFiniteNumberException
    {
        double[] $r0;
        double d0;
        org.apache.commons.math3.exception.util.LocalizedFormats $r1;
        int i0, $i1;
        boolean $z0;
        org.apache.commons.math3.exception.NotFiniteNumberException $r2;
        java.lang.Double $r3;
        java.lang.Object[] $r4;
        java.lang.Integer $r5;

        $r0 := @parameter0: double[];

        i0 = 0;

     label1:
        $i1 = lengthof $r0;

        if i0 >= $i1 goto label4;

        d0 = $r0[i0];

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d0);

        if $z0 != 0 goto label2;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z0 == 0 goto label3;

     label2:
        $r2 = new org.apache.commons.math3.exception.NotFiniteNumberException;

        $r1 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats ARRAY_ELEMENT>;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r4 = newarray (java.lang.Object)[1];

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4[0] = $r5;

        specialinvoke $r2.<org.apache.commons.math3.exception.NotFiniteNumberException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])>($r1, $r3, $r4);

        throw $r2;

     label3:
        i0 = i0 + 1;

        goto label1;

     label4:
        return;
    }
    public static void checkNotNull(java.lang.Object) throws org.apache.commons.math3.exception.NullArgumentException
    {
        java.lang.Object $r0;
        org.apache.commons.math3.exception.NullArgumentException $r1;

        $r0 := @parameter0: java.lang.Object;

        if $r0 != null goto label1;

        $r1 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r1.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r1;

     label1:
        return;
    }
    public static transient void checkNotNull(java.lang.Object, org.apache.commons.math3.exception.util.Localizable, java.lang.Object[]) throws org.apache.commons.math3.exception.NullArgumentException
    {
        java.lang.Object $r0;
        org.apache.commons.math3.exception.util.Localizable $r1;
        java.lang.Object[] $r2;
        org.apache.commons.math3.exception.NullArgumentException $r3;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: org.apache.commons.math3.exception.util.Localizable;

        $r2 := @parameter2: java.lang.Object[];

        if $r0 != null goto label1;

        $r3 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r3.<org.apache.commons.math3.exception.NullArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r1, $r2);

        throw $r3;

     label1:
        return;
    }
    public static byte copySign(byte, byte) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        byte $b0, b1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r0;
        org.apache.commons.math3.exception.MathArithmeticException $r1;
        java.lang.Object[] $r2;

        b1 := @parameter0: byte;

        $b0 := @parameter1: byte;

        if b1 < 0 goto label1;

        if $b0 >= 0 goto label4;

     label1:
        if b1 >= 0 goto label2;

        if $b0 >= 0 goto label2;

        return b1;

     label2:
        if $b0 < 0 goto label3;

        if b1 != -128 goto label3;

        $r1 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r0 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OVERFLOW>;

        $r2 = newarray (java.lang.Object)[0];

        specialinvoke $r1.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r0, $r2);

        throw $r1;

     label3:
        b1 = neg b1;

     label4:
        return b1;
    }
    public static int copySign(int, int) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        int $i0, i1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r0;
        org.apache.commons.math3.exception.MathArithmeticException $r1;
        java.lang.Object[] $r2;

        i1 := @parameter0: int;

        $i0 := @parameter1: int;

        if i1 < 0 goto label1;

        if $i0 >= 0 goto label4;

     label1:
        if i1 >= 0 goto label2;

        if $i0 >= 0 goto label2;

        return i1;

     label2:
        if $i0 < 0 goto label3;

        if i1 != -2147483648 goto label3;

        $r1 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r0 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OVERFLOW>;

        $r2 = newarray (java.lang.Object)[0];

        specialinvoke $r1.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r0, $r2);

        throw $r1;

     label3:
        i1 = neg i1;

     label4:
        return i1;
    }
    public static long copySign(long, long) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        long $l0, l1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r0;
        byte $b2;
        org.apache.commons.math3.exception.MathArithmeticException $r1;
        java.lang.Object[] $r2;

        l1 := @parameter0: long;

        $l0 := @parameter1: long;

        $b2 = l1 cmp 0L;

        if $b2 < 0 goto label1;

        $b2 = $l0 cmp 0L;

        if $b2 >= 0 goto label4;

     label1:
        $b2 = l1 cmp 0L;

        if $b2 >= 0 goto label2;

        $b2 = $l0 cmp 0L;

        if $b2 >= 0 goto label2;

        return l1;

     label2:
        $b2 = $l0 cmp 0L;

        if $b2 < 0 goto label3;

        $b2 = l1 cmp -9223372036854775808L;

        if $b2 != 0 goto label3;

        $r1 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r0 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OVERFLOW>;

        $r2 = newarray (java.lang.Object)[0];

        specialinvoke $r1.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r0, $r2);

        throw $r1;

     label3:
        l1 = neg l1;

     label4:
        return l1;
    }
    public static short copySign(short, short) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        short $s0, s1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r0;
        org.apache.commons.math3.exception.MathArithmeticException $r1;
        java.lang.Object[] $r2;

        s1 := @parameter0: short;

        $s0 := @parameter1: short;

        if s1 < 0 goto label1;

        if $s0 >= 0 goto label4;

     label1:
        if s1 >= 0 goto label2;

        if $s0 >= 0 goto label2;

        return s1;

     label2:
        if $s0 < 0 goto label3;

        if s1 != -32768 goto label3;

        $r1 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r0 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OVERFLOW>;

        $r2 = newarray (java.lang.Object)[0];

        specialinvoke $r1.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r0, $r2);

        throw $r1;

     label3:
        s1 = neg s1;

     label4:
        return s1;
    }
    public static boolean equals(double, double)
    {
        double $d0, $d1;
        java.lang.Double $r0, $r1;
        boolean $z0;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $r1 = new java.lang.Double;

        specialinvoke $r1.<java.lang.Double: void <init>(double)>($d0);

        $r0 = new java.lang.Double;

        specialinvoke $r0.<java.lang.Double: void <init>(double)>($d1);

        $z0 = virtualinvoke $r1.<java.lang.Double: boolean equals(java.lang.Object)>($r0);

        return $z0;
    }
    public static int hash(double)
    {
        double $d0;
        int $i0;
        java.lang.Double $r0;

        $d0 := @parameter0: double;

        $r0 = new java.lang.Double;

        specialinvoke $r0.<java.lang.Double: void <init>(double)>($d0);

        $i0 = virtualinvoke $r0.<java.lang.Double: int hashCode()>();

        return $i0;
    }
    public static int hash(double[])
    {
        double[] $r0;
        int $i0;

        $r0 := @parameter0: double[];

        $i0 = staticinvoke <java.util.Arrays: int hashCode(double[])>($r0);

        return $i0;
    }
    public static org.apache.commons.math3.RealFieldElement max(org.apache.commons.math3.RealFieldElement, org.apache.commons.math3.RealFieldElement)
    {
        org.apache.commons.math3.RealFieldElement r0, r1, $r3;
        java.lang.Object $r2;
        double $d0;
        byte $b0;

        r1 := @parameter0: org.apache.commons.math3.RealFieldElement;

        r0 := @parameter1: org.apache.commons.math3.RealFieldElement;

        $r2 = interfaceinvoke r1.<org.apache.commons.math3.RealFieldElement: java.lang.Object subtract(java.lang.Object)>(r0);

        $r3 = (org.apache.commons.math3.RealFieldElement) $r2;

        $d0 = interfaceinvoke $r3.<org.apache.commons.math3.RealFieldElement: double getReal()>();

        $b0 = $d0 cmpl 0.0;

        if $b0 < 0 goto label1;

        return r1;

     label1:
        return r0;
    }
    public static org.apache.commons.math3.RealFieldElement min(org.apache.commons.math3.RealFieldElement, org.apache.commons.math3.RealFieldElement)
    {
        org.apache.commons.math3.RealFieldElement r0, r1, $r3;
        java.lang.Object $r2;
        double $d0;
        byte $b0;

        r0 := @parameter0: org.apache.commons.math3.RealFieldElement;

        r1 := @parameter1: org.apache.commons.math3.RealFieldElement;

        $r2 = interfaceinvoke r0.<org.apache.commons.math3.RealFieldElement: java.lang.Object subtract(java.lang.Object)>(r1);

        $r3 = (org.apache.commons.math3.RealFieldElement) $r2;

        $d0 = interfaceinvoke $r3.<org.apache.commons.math3.RealFieldElement: double getReal()>();

        $b0 = $d0 cmpl 0.0;

        if $b0 < 0 goto label1;

        return r1;

     label1:
        return r0;
    }
    public static double normalizeAngle(double, double)
    {
        double $d0, $d1, $d2;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 = 3.141592653589793 + $d0;

        $d1 = $d2 - $d1;

        $d1 = $d1 / 6.283185307179586;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double floor(double)>($d1);

        $d1 = $d1 * 6.283185307179586;

        $d0 = $d0 - $d1;

        return $d0;
    }
    public static double reduce(double, double, double)
    {
        double $d0, $d1, $d2, $d3;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d1);

        $d3 = $d0 - $d2;

        $d3 = $d3 / $d1;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double floor(double)>($d3);

        $d1 = $d3 * $d1;

        $d0 = $d0 - $d1;

        $d0 = $d0 - $d2;

        return $d0;
    }
