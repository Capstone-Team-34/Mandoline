org.apache.commons.math3.util.FastMath extends java.lang.Object
private static final double[] CBRTTWO
private static final double[] COSINE_TABLE_A
private static final double[] COSINE_TABLE_B
public static final double E
private static final double[] EIGHTHS
static final int EXP_FRAC_TABLE_LEN
static final int EXP_INT_TABLE_LEN
static final int EXP_INT_TABLE_MAX_INDEX
private static final double F_11_12
private static final double F_13_14
private static final double F_15_16
private static final double F_1_11
private static final double F_1_13
private static final double F_1_15
private static final double F_1_17
private static final double F_1_2
private static final double F_1_3
private static final double F_1_4
private static final double F_1_5
private static final double F_1_7
private static final double F_1_9
private static final double F_3_4
private static final double F_5_6
private static final double F_7_8
private static final double F_9_10
private static final long HEX_40000000
private static final long IMPLICIT_HIGH_BIT
private static final double LN_2_A
private static final double LN_2_B
private static final double[][] LN_HI_PREC_COEF
static final int LN_MANT_LEN
private static final double[][] LN_QUICK_COEF
private static final double LOG_MAX_VALUE
private static final long MASK_30BITS
private static final long MASK_DOUBLE_EXPONENT
private static final long MASK_DOUBLE_MANTISSA
private static final int MASK_NON_SIGN_INT
private static final long MASK_NON_SIGN_LONG
public static final double PI
private static final long[] PI_O_4_BITS
private static final long[] RECIP_2PI
private static final boolean RECOMPUTE_TABLES_AT_RUNTIME
private static final double[] SINE_TABLE_A
private static final double[] SINE_TABLE_B
private static final int SINE_TABLE_LEN
private static final double[] TANGENT_TABLE_A
private static final double[] TANGENT_TABLE_B
private static final double TWO_POWER_52
    static void <clinit>()
    {
        double $d0;
        double[][] $r0;
        double[] $r1;
        long[] $r2;

        $d0 = staticinvoke <java.lang.StrictMath: double log(double)>(1.7976931348623157E308);

        <org.apache.commons.math3.util.FastMath: double LOG_MAX_VALUE> = $d0;

        $r0 = newarray (double[])[9];

        $r1 = newarray (double)[2];

        $r1[0] = 1.0;

        $r1[1] = 5.669184079525E-24;

        $r0[0] = $r1;

        $r1 = newarray (double)[2];

        $r1[0] = -0.25;

        $r1[1] = -0.25;

        $r0[1] = $r1;

        $r1 = newarray (double)[2];

        $r1[0] = 0.3333333134651184;

        $r1[1] = 1.986821492305628E-8;

        $r0[2] = $r1;

        $r1 = newarray (double)[2];

        $r1[0] = -0.25;

        $r1[1] = -6.663542893624021E-14;

        $r0[3] = $r1;

        $r1 = newarray (double)[2];

        $r1[0] = 0.19999998807907104;

        $r1[1] = 1.1921056801463227E-8;

        $r0[4] = $r1;

        $r1 = newarray (double)[2];

        $r1[0] = -0.1666666567325592;

        $r1[1] = -7.800414592973399E-9;

        $r0[5] = $r1;

        $r1 = newarray (double)[2];

        $r1[0] = 0.1428571343421936;

        $r1[1] = 5.650007086920087E-9;

        $r0[6] = $r1;

        $r1 = newarray (double)[2];

        $r1[0] = -0.12502530217170715;

        $r1[1] = -7.44321345601866E-11;

        $r0[7] = $r1;

        $r1 = newarray (double)[2];

        $r1[0] = 0.11113807559013367;

        $r1[1] = 9.219544613762692E-9;

        $r0[8] = $r1;

        <org.apache.commons.math3.util.FastMath: double[][] LN_QUICK_COEF> = $r0;

        $r0 = newarray (double[])[6];

        $r1 = newarray (double)[2];

        $r1[0] = 1.0;

        $r1[1] = -6.032174644509064E-23;

        $r0[0] = $r1;

        $r1 = newarray (double)[2];

        $r1[0] = -0.25;

        $r1[1] = -0.25;

        $r0[1] = $r1;

        $r1 = newarray (double)[2];

        $r1[0] = 0.3333333134651184;

        $r1[1] = 1.9868161777724352E-8;

        $r0[2] = $r1;

        $r1 = newarray (double)[2];

        $r1[0] = -0.2499999701976776;

        $r1[1] = -2.957007209750105E-8;

        $r0[3] = $r1;

        $r1 = newarray (double)[2];

        $r1[0] = 0.19999954104423523;

        $r1[1] = 1.5830993332061267E-10;

        $r0[4] = $r1;

        $r1 = newarray (double)[2];

        $r1[0] = -0.16624879837036133;

        $r1[1] = -2.6033824355191673E-8;

        $r0[5] = $r1;

        <org.apache.commons.math3.util.FastMath: double[][] LN_HI_PREC_COEF> = $r0;

        $r1 = newarray (double)[14];

        $r1[0] = 0.0;

        $r1[1] = 0.1246747374534607;

        $r1[2] = 0.24740394949913025;

        $r1[3] = 0.366272509098053;

        $r1[4] = 0.4794255495071411;

        $r1[5] = 0.5850973129272461;

        $r1[6] = 0.6816387176513672;

        $r1[7] = 0.7675435543060303;

        $r1[8] = 0.8414709568023682;

        $r1[9] = 0.902267575263977;

        $r1[10] = 0.9489846229553223;

        $r1[11] = 0.9808930158615112;

        $r1[12] = 0.9974949359893799;

        $r1[13] = 0.9985313415527344;

        <org.apache.commons.math3.util.FastMath: double[] SINE_TABLE_A> = $r1;

        $r1 = newarray (double)[14];

        $r1[0] = 0.0;

        $r1[1] = -4.068233003401932E-9;

        $r1[2] = 9.755392680573412E-9;

        $r1[3] = 1.9987994582857286E-8;

        $r1[4] = -1.0902938113007961E-8;

        $r1[5] = -3.9986783938944604E-8;

        $r1[6] = 4.23719669792332E-8;

        $r1[7] = -5.207000323380292E-8;

        $r1[8] = 2.800552834259E-8;

        $r1[9] = 1.883511811213715E-8;

        $r1[10] = -3.5997360512765566E-9;

        $r1[11] = 4.116164446561962E-8;

        $r1[12] = 5.0614674548127384E-8;

        $r1[13] = -1.0129027912496858E-9;

        <org.apache.commons.math3.util.FastMath: double[] SINE_TABLE_B> = $r1;

        $r1 = newarray (double)[14];

        $r1[0] = 1.0;

        $r1[1] = 0.9921976327896118;

        $r1[2] = 0.9689123630523682;

        $r1[3] = 0.9305076599121094;

        $r1[4] = 0.8775825500488281;

        $r1[5] = 0.8109631538391113;

        $r1[6] = 0.7316888570785522;

        $r1[7] = 0.6409968137741089;

        $r1[8] = 0.5403022766113281;

        $r1[9] = 0.4311765432357788;

        $r1[10] = 0.3153223395347595;

        $r1[11] = 0.19454771280288696;

        $r1[12] = 0.07073719799518585;

        $r1[13] = -0.05417713522911072;

        <org.apache.commons.math3.util.FastMath: double[] COSINE_TABLE_A> = $r1;

        $r1 = newarray (double)[14];

        $r1[0] = 0.0;

        $r1[1] = 3.4439717236742845E-8;

        $r1[2] = 5.865827662008209E-8;

        $r1[3] = -3.7999795083850525E-8;

        $r1[4] = 1.184154459111628E-8;

        $r1[5] = -3.43338934259355E-8;

        $r1[6] = 1.1795268640216787E-8;

        $r1[7] = 4.438921624363781E-8;

        $r1[8] = 2.925681159240093E-8;

        $r1[9] = -2.6437112632041807E-8;

        $r1[10] = 2.2860509143963117E-8;

        $r1[11] = -4.813899778443457E-9;

        $r1[12] = 3.6725170580355583E-9;

        $r1[13] = 2.0217439756338078E-10;

        <org.apache.commons.math3.util.FastMath: double[] COSINE_TABLE_B> = $r1;

        $r1 = newarray (double)[14];

        $r1[0] = 0.0;

        $r1[1] = 0.1256551444530487;

        $r1[2] = 0.25534194707870483;

        $r1[3] = 0.3936265707015991;

        $r1[4] = 0.5463024377822876;

        $r1[5] = 0.7214844226837158;

        $r1[6] = 0.9315965175628662;

        $r1[7] = 1.1974215507507324;

        $r1[8] = 1.5574076175689697;

        $r1[9] = 2.092571258544922;

        $r1[10] = 3.0095696449279785;

        $r1[11] = 5.041914939880371;

        $r1[12] = 14.101419448852539;

        $r1[13] = -18.430862426757812;

        <org.apache.commons.math3.util.FastMath: double[] TANGENT_TABLE_A> = $r1;

        $r1 = newarray (double)[14];

        $r1[0] = 0.0;

        $r1[1] = -7.877917738262007E-9;

        $r1[2] = -2.5857668567479893E-8;

        $r1[3] = 5.2240336371356666E-9;

        $r1[4] = 5.206150291559893E-8;

        $r1[5] = 1.8307188599677033E-8;

        $r1[6] = -5.7618793749770706E-8;

        $r1[7] = 7.848361555046424E-8;

        $r1[8] = 1.0708593250394448E-7;

        $r1[9] = 1.7827257129423813E-8;

        $r1[10] = 2.893485277253286E-8;

        $r1[11] = 3.1660099222737955E-7;

        $r1[12] = 4.983191803254889E-7;

        $r1[13] = -3.356118100840571E-7;

        <org.apache.commons.math3.util.FastMath: double[] TANGENT_TABLE_B> = $r1;

        $r2 = newarray (long)[18];

        $r2[0] = 2935890503282001226L;

        $r2[1] = 9154082963658192752L;

        $r2[2] = 3952090531849364496L;

        $r2[3] = 9193070505571053912L;

        $r2[4] = 7910884519577875640L;

        $r2[5] = 113236205062349959L;

        $r2[6] = 4577762542105553359L;

        $r2[7] = -5034868814120038111L;

        $r2[8] = 4208363204685324176L;

        $r2[9] = 5648769086999809661L;

        $r2[10] = 2819561105158720014L;

        $r2[11] = -4035746434778044925L;

        $r2[12] = -302932621132653753L;

        $r2[13] = -2644281811660520851L;

        $r2[14] = -3183605296591799669L;

        $r2[15] = 6722166367014452318L;

        $r2[16] = -3512299194304650054L;

        $r2[17] = -7278142539171889152L;

        <org.apache.commons.math3.util.FastMath: long[] RECIP_2PI> = $r2;

        $r2 = newarray (long)[2];

        $r2[0] = -3958705157555305932L;

        $r2[1] = -4267615245585081135L;

        <org.apache.commons.math3.util.FastMath: long[] PI_O_4_BITS> = $r2;

        $r1 = newarray (double)[14];

        $r1[0] = 0.0;

        $r1[1] = 0.125;

        $r1[2] = 0.25;

        $r1[3] = 0.375;

        $r1[4] = 0.5;

        $r1[5] = 0.625;

        $r1[6] = 0.75;

        $r1[7] = 0.875;

        $r1[8] = 1.0;

        $r1[9] = 1.125;

        $r1[10] = 1.25;

        $r1[11] = 1.375;

        $r1[12] = 1.5;

        $r1[13] = 1.625;

        <org.apache.commons.math3.util.FastMath: double[] EIGHTHS> = $r1;

        $r1 = newarray (double)[5];

        $r1[0] = 0.6299605249474366;

        $r1[1] = 0.7937005259840998;

        $r1[2] = 1.0;

        $r1[3] = 1.2599210498948732;

        $r1[4] = 1.5874010519681994;

        <org.apache.commons.math3.util.FastMath: double[] CBRTTWO> = $r1;

        return;
    }
    private void <init>()
    {
        org.apache.commons.math3.util.FastMath r0;

        r0 := @this: org.apache.commons.math3.util.FastMath;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static double IEEEremainder(double, double)
    {
        double $d0, $d1;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d0 = staticinvoke <java.lang.StrictMath: double IEEEremainder(double,double)>($d0, $d1);

        return $d0;
    }
    public static double abs(double)
    {
        double $d0;
        long $l0;

        $d0 := @parameter0: double;

        $l0 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>($d0);

        $l0 = 9223372036854775807L & $l0;

        $d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l0);

        return $d0;
    }
    public static float abs(float)
    {
        float $f0;
        int $i0;

        $f0 := @parameter0: float;

        $i0 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>($f0);

        $i0 = 2147483647 & $i0;

        $f0 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>($i0);

        return $f0;
    }
    public static int abs(int)
    {
        int $i0, i1, $i2;

        $i0 := @parameter0: int;

        i1 = $i0 >>> 31;

        $i2 = i1 ^ -1;

        $i2 = $i2 + 1;

        $i0 = $i2 ^ $i0;

        $i0 = $i0 + i1;

        return $i0;
    }
    public static long abs(long)
    {
        long $l0, l1, $l2;

        $l0 := @parameter0: long;

        l1 = $l0 >>> 63;

        $l2 = -1L ^ l1;

        $l2 = $l2 + 1L;

        $l0 = $l2 ^ $l0;

        $l0 = $l0 + l1;

        return $l0;
    }
    public static double acos(double)
    {
        double $d0, d1, d2, d3, d4, $d5, $d6, $d7, $d8;
        byte $b0;
        boolean $z0;

        $d0 := @parameter0: double;

        $b0 = $d0 cmpl $d0;

        if $b0 == 0 goto label1;

        return #NaN;

     label1:
        $b0 = $d0 cmpl 1.0;

        if $b0 > 0 goto label2;

        $b0 = $d0 cmpg -1.0;

        if $b0 >= 0 goto label3;

     label2:
        return #NaN;

     label3:
        $b0 = $d0 cmpl -1.0;

        if $b0 != 0 goto label4;

        return 3.141592653589793;

     label4:
        $b0 = $d0 cmpl 1.0;

        if $b0 != 0 goto label5;

        return 0.0;

     label5:
        $b0 = $d0 cmpl 0.0;

        if $b0 != 0 goto label6;

        return 1.5707963267948966;

     label6:
        d3 = $d0 * 1.073741824E9;

        d2 = $d0 + d3;

        d2 = d2 - d3;

        d3 = $d0 - d2;

        d4 = d2 * d2;

        $d5 = d2 * d3;

        $d5 = $d5 * 2.0;

        d1 = d3 * d3;

        $d5 = $d5 + d1;

        d1 = neg d4;

        d4 = neg $d5;

        $d5 = 1.0 + d1;

        $d6 = $d5 - 1.0;

        d1 = $d6 - d1;

        d1 = neg d1;

        $d6 = $d5 + d4;

        $d5 = $d6 - $d5;

        d4 = $d5 - d4;

        d4 = neg d4;

        $d5 = d1 + d4;

        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d6);

        d4 = d1 * 1.073741824E9;

        $d7 = d1 + d4;

        d4 = $d7 - d4;

        $d7 = d1 - d4;

        $d8 = d4 * d4;

        $d6 = $d6 - $d8;

        $d8 = 2.0 * d4;

        $d8 = $d8 * $d7;

        $d6 = $d6 - $d8;

        $d8 = $d7 * $d7;

        $d6 = $d6 - $d8;

        $d8 = 2.0 * d1;

        $d6 = $d6 / $d8;

        $d6 = $d7 + $d6;

        d1 = 2.0 * d1;

        $d5 = $d5 / d1;

        $d5 = $d6 + $d5;

        $d6 = d4 + $d5;

        d4 = $d6 - d4;

        d4 = d4 - $d5;

        $d5 = neg d4;

        d1 = $d6 / $d0;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d1);

        if $z0 == 0 goto label7;

        return 1.5707963267948966;

     label7:
        d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double doubleHighPart(double)>(d1);

        d1 = d1 - d4;

        $d7 = d4 * d2;

        $d6 = $d6 - $d7;

        $d7 = d4 * d3;

        $d6 = $d6 - $d7;

        d2 = d1 * d2;

        d2 = $d6 - d2;

        d3 = d1 * d3;

        d3 = d2 - d3;

        d3 = d3 / $d0;

        d3 = d1 + d3;

        d2 = $d5 / $d0;

        d2 = d3 + d2;

        d3 = d4 + d2;

        d4 = d3 - d4;

        d2 = d4 - d2;

        d2 = neg d2;

        $b0 = $d0 cmpg 0.0;

        if $b0 >= 0 goto label9;

        $z0 = 1;

     label8:
        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan(double,double,boolean)>(d3, d2, $z0);

        return $d0;

     label9:
        $z0 = 0;

        goto label8;
    }
    public static double acosh(double)
    {
        double $d0, $d1;

        $d0 := @parameter0: double;

        $d1 = $d0 * $d0;

        $d1 = $d1 - 1.0;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d1);

        $d0 = $d1 + $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d0);

        return $d0;
    }
    public static int addExact(int, int) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        int $i0, $i1, i2, $i3;
        org.apache.commons.math3.exception.util.LocalizedFormats $r0;
        org.apache.commons.math3.exception.MathArithmeticException $r1;
        java.lang.Object[] $r2;
        java.lang.Integer $r3;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        i2 = $i0 + $i1;

        $i3 = $i0 ^ $i1;

        if $i3 < 0 goto label1;

        $i3 = i2 ^ $i1;

        if $i3 >= 0 goto label1;

        $r1 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r0 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OVERFLOW_IN_ADDITION>;

        $r2 = newarray (java.lang.Object)[2];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r2[0] = $r3;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r2[1] = $r3;

        specialinvoke $r1.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r0, $r2);

        throw $r1;

     label1:
        return i2;
    }
    public static long addExact(long, long) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        long $l0, $l1, l2, $l3;
        org.apache.commons.math3.exception.util.LocalizedFormats $r0;
        byte $b4;
        org.apache.commons.math3.exception.MathArithmeticException $r1;
        java.lang.Object[] $r2;
        java.lang.Long $r3;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        l2 = $l0 + $l1;

        $l3 = $l0 ^ $l1;

        $b4 = $l3 cmp 0L;

        if $b4 < 0 goto label1;

        $l3 = l2 ^ $l1;

        $b4 = $l3 cmp 0L;

        if $b4 >= 0 goto label1;

        $r1 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r0 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OVERFLOW_IN_ADDITION>;

        $r2 = newarray (java.lang.Object)[2];

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r2[0] = $r3;

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $r2[1] = $r3;

        specialinvoke $r1.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r0, $r2);

        throw $r1;

     label1:
        return l2;
    }
    public static double asin(double)
    {
        double d0, d1, d2, d3, d4, d5, $d6, $d7, $d8;
        byte $b0;

        d4 := @parameter0: double;

        $b0 = d4 cmpl d4;

        if $b0 == 0 goto label1;

        return #NaN;

     label1:
        $b0 = d4 cmpl 1.0;

        if $b0 > 0 goto label2;

        $b0 = d4 cmpg -1.0;

        if $b0 >= 0 goto label3;

     label2:
        return #NaN;

     label3:
        $b0 = d4 cmpl 1.0;

        if $b0 != 0 goto label4;

        return 1.5707963267948966;

     label4:
        $b0 = d4 cmpl -1.0;

        if $b0 != 0 goto label5;

        return -1.5707963267948966;

     label5:
        $b0 = d4 cmpl 0.0;

        if $b0 == 0 goto label6;

        d5 = d4 * 1.073741824E9;

        d3 = d4 + d5;

        d2 = d3 - d5;

        d3 = d4 - d2;

        d5 = d2 * d2;

        d2 = d2 * d3;

        d2 = d2 * 2.0;

        d3 = d3 * d3;

        d3 = d2 + d3;

        d2 = neg d5;

        d5 = neg d3;

        d3 = 1.0 + d2;

        d0 = d3 - 1.0;

        d2 = d0 - d2;

        d2 = neg d2;

        d0 = d3 + d5;

        d3 = d0 - d3;

        d5 = d3 - d5;

        d5 = neg d5;

        d2 = d2 + d5;

        d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d0);

        d3 = d5 * 1.073741824E9;

        $d6 = d5 + d3;

        d3 = $d6 - d3;

        $d6 = d5 - d3;

        d1 = d3 * d3;

        d0 = d0 - d1;

        d1 = 2.0 * d3;

        d1 = d1 * $d6;

        d0 = d0 - d1;

        d1 = $d6 * $d6;

        d0 = d0 - d1;

        d1 = 2.0 * d5;

        d0 = d0 / d1;

        $d6 = $d6 + d0;

        d0 = 2.0 * d5;

        d0 = d2 / d0;

        d1 = d4 / d5;

        d2 = d1 * 1.073741824E9;

        $d7 = d1 + d2;

        d2 = $d7 - d2;

        d1 = d1 - d2;

        $d7 = d2 * d3;

        $d7 = d4 - $d7;

        $d8 = d2 * $d6;

        $d7 = $d7 - $d8;

        d3 = d1 * d3;

        d3 = $d7 - d3;

        $d6 = d1 * $d6;

        d3 = d3 - $d6;

        d3 = d3 / d5;

        d3 = d1 + d3;

        d4 = neg d4;

        d4 = d4 * d0;

        d4 = d4 / d5;

        d4 = d4 / d5;

        d5 = d3 + d4;

        d4 = d2 + d5;

        d3 = d4 - d2;

        d5 = d3 - d5;

        d5 = neg d5;

        d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan(double,double,boolean)>(d4, d5, 0);

     label6:
        return d4;
    }
    public static double asinh(double)
    {
        double d0, $d1, $d2;
        boolean z0;
        byte $b0;

        $d1 := @parameter0: double;

        z0 = 0;

        $b0 = $d1 cmpg 0.0;

        if $b0 >= 0 goto label1;

        z0 = 1;

        $d1 = neg $d1;

     label1:
        $b0 = $d1 cmpl 0.167;

        if $b0 <= 0 goto label3;

        d0 = $d1 * $d1;

        d0 = d0 + 1.0;

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d0);

        $d1 = d0 + $d1;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d1);

     label2:
        if z0 == 0 goto label7;

        $d1 = neg $d1;

        return $d1;

     label3:
        d0 = $d1 * $d1;

        $b0 = $d1 cmpl 0.097;

        if $b0 <= 0 goto label4;

        $d2 = 0.058823529411764705 * d0;

        $d2 = $d2 * 0.9375;

        $d2 = 0.06666666666666667 - $d2;

        $d2 = $d2 * d0;

        $d2 = $d2 * 0.9285714285714286;

        $d2 = 0.07692307692307693 - $d2;

        $d2 = $d2 * d0;

        $d2 = $d2 * 0.9166666666666666;

        $d2 = 0.09090909090909091 - $d2;

        $d2 = $d2 * d0;

        $d2 = $d2 * 0.9;

        $d2 = 0.1111111111111111 - $d2;

        $d2 = $d2 * d0;

        $d2 = $d2 * 0.875;

        $d2 = 0.14285714285714285 - $d2;

        $d2 = $d2 * d0;

        $d2 = $d2 * 0.8333333333333334;

        $d2 = 0.2 - $d2;

        $d2 = $d2 * d0;

        $d2 = $d2 * 0.75;

        $d2 = 0.3333333333333333 - $d2;

        d0 = $d2 * d0;

        d0 = d0 * 0.5;

        d0 = 1.0 - d0;

        $d1 = $d1 * d0;

        goto label2;

     label4:
        $b0 = $d1 cmpl 0.036;

        if $b0 <= 0 goto label5;

        $d2 = 0.07692307692307693 * d0;

        $d2 = $d2 * 0.9166666666666666;

        $d2 = 0.09090909090909091 - $d2;

        $d2 = $d2 * d0;

        $d2 = $d2 * 0.9;

        $d2 = 0.1111111111111111 - $d2;

        $d2 = $d2 * d0;

        $d2 = $d2 * 0.875;

        $d2 = 0.14285714285714285 - $d2;

        $d2 = $d2 * d0;

        $d2 = $d2 * 0.8333333333333334;

        $d2 = 0.2 - $d2;

        $d2 = $d2 * d0;

        $d2 = $d2 * 0.75;

        $d2 = 0.3333333333333333 - $d2;

        d0 = $d2 * d0;

        d0 = d0 * 0.5;

        d0 = 1.0 - d0;

        $d1 = $d1 * d0;

        goto label2;

     label5:
        $b0 = $d1 cmpl 0.0036;

        if $b0 <= 0 goto label6;

        $d2 = 0.1111111111111111 * d0;

        $d2 = $d2 * 0.875;

        $d2 = 0.14285714285714285 - $d2;

        $d2 = $d2 * d0;

        $d2 = $d2 * 0.8333333333333334;

        $d2 = 0.2 - $d2;

        $d2 = $d2 * d0;

        $d2 = $d2 * 0.75;

        $d2 = 0.3333333333333333 - $d2;

        d0 = $d2 * d0;

        d0 = d0 * 0.5;

        d0 = 1.0 - d0;

        $d1 = $d1 * d0;

        goto label2;

     label6:
        $d2 = 0.2 * d0;

        $d2 = $d2 * 0.75;

        $d2 = 0.3333333333333333 - $d2;

        d0 = $d2 * d0;

        d0 = d0 * 0.5;

        d0 = 1.0 - d0;

        $d1 = $d1 * d0;

        goto label2;

     label7:
        return $d1;
    }
    public static double atan(double)
    {
        double $d0;

        $d0 := @parameter0: double;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan(double,double,boolean)>($d0, 0.0, 0);

        return $d0;
    }
    private static double atan(double, double, boolean)
    {
        boolean $z0, z1;
        double d0, d1, d2, d3, d4, d5, d6, $d7, $d8, $d9;
        byte $b0;
        int i1;
        double[] $r0;

        $d7 := @parameter0: double;

        d0 := @parameter1: double;

        $z0 := @parameter2: boolean;

        $b0 = $d7 cmpl 0.0;

        if $b0 != 0 goto label01;

        if $z0 == 0 goto label13;

        $d7 = staticinvoke <org.apache.commons.math3.util.FastMath: double copySign(double,double)>(3.141592653589793, $d7);

        return $d7;

     label01:
        $b0 = $d7 cmpg 0.0;

        if $b0 >= 0 goto label04;

        $d7 = neg $d7;

        d0 = neg d0;

        z1 = 1;

     label02:
        $b0 = $d7 cmpl 1.633123935319537E16;

        if $b0 <= 0 goto label06;

        $z0 = z1 ^ $z0;

        if $z0 == 0 goto label05;

        $d7 = -1.5707963267948966;

     label03:
        return $d7;

     label04:
        z1 = 0;

        goto label02;

     label05:
        $d7 = 1.5707963267948966;

        goto label03;

     label06:
        $b0 = $d7 cmpg 1.0;

        if $b0 >= 0 goto label11;

        d1 = -1.7168146928204135 * $d7;

        d1 = d1 * $d7;

        d1 = d1 + 8.0;

        d1 = d1 * $d7;

        d1 = d1 + 0.5;

        i1 = (int) d1;

     label07:
        $r0 = <org.apache.commons.math3.util.FastMath: double[] TANGENT_TABLE_A>;

        d2 = $r0[i1];

        $r0 = <org.apache.commons.math3.util.FastMath: double[] TANGENT_TABLE_B>;

        d3 = $r0[i1];

        d1 = $d7 - d2;

        $d8 = d1 - $d7;

        $d8 = $d8 + d2;

        $d8 = neg $d8;

        d6 = d0 - d3;

        d6 = $d8 + d6;

        $d8 = d1 + d6;

        d1 = $d8 - d1;

        d1 = d1 - d6;

        d1 = neg d1;

        d6 = $d7 * 1.073741824E9;

        d4 = $d7 + d6;

        d6 = d4 - d6;

        $d7 = d0 + $d7;

        $d7 = $d7 - d6;

        $d7 = d0 + $d7;

        if i1 != 0 goto label12;

        $d7 = d6 + $d7;

        d0 = d2 + d3;

        $d7 = $d7 * d0;

        $d7 = 1.0 + $d7;

        d0 = 1.0 / $d7;

        $d7 = $d8 * d0;

        d0 = d1 * d0;

     label08:
        d1 = $d7 * $d7;

        $d8 = 0.07490822288864472 * d1;

        $d8 = $d8 - 0.09088450866185192;

        $d8 = $d8 * d1;

        $d8 = $d8 + 0.11111095942313305;

        $d8 = $d8 * d1;

        $d8 = $d8 - 0.1428571423679182;

        $d8 = $d8 * d1;

        $d8 = $d8 + 0.19999999999923582;

        $d8 = $d8 * d1;

        $d8 = $d8 - 0.33333333333333287;

        d1 = $d8 * d1;

        $d8 = d1 * $d7;

        d1 = $d7 + $d8;

        d3 = d1 - $d7;

        $d8 = d3 - $d8;

        $d8 = neg $d8;

        $d7 = $d7 * $d7;

        $d7 = 1.0 + $d7;

        $d7 = d0 / $d7;

        $d7 = $d8 + $d7;

        $r0 = <org.apache.commons.math3.util.FastMath: double[] EIGHTHS>;

        d0 = $r0[i1];

        $d8 = d0 + d1;

        d0 = $d8 - d0;

        d0 = d0 - d1;

        d1 = neg d0;

        d0 = $d8 + $d7;

        $d8 = d0 - $d8;

        $d7 = $d8 - $d7;

        $d7 = neg $d7;

        d1 = d1 + $d7;

        $d7 = d0 + d1;

        if $z0 == 0 goto label09;

        d0 = $d7 - d0;

        d0 = d0 - d1;

        d1 = neg d0;

        d0 = 3.141592653589793 - $d7;

        $d8 = d0 - 3.141592653589793;

        $d7 = $d8 + $d7;

        $d7 = neg $d7;

        d1 = 1.2246467991473532E-16 - d1;

        $d7 = $d7 + d1;

        $d7 = d0 + $d7;

     label09:
        $z0 = z1 ^ $z0;

        if $z0 == 0 goto label10;

        $d7 = neg $d7;

     label10:
        return $d7;

     label11:
        d1 = 1.0 / $d7;

        $d8 = -1.7168146928204135 * d1;

        $d8 = $d8 * d1;

        $d8 = $d8 + 8.0;

        d1 = $d8 * d1;

        d1 = neg d1;

        d1 = d1 + 13.07;

        i1 = (int) d1;

        goto label07;

     label12:
        d0 = d6 * d2;

        d4 = 1.0 + d0;

        d5 = d4 - 1.0;

        d0 = d5 - d0;

        d5 = neg d0;

        d0 = $d7 * d2;

        d2 = d6 * d3;

        d2 = d0 + d2;

        d0 = d4 + d2;

        d6 = d0 - d4;

        d2 = d6 - d2;

        d2 = neg d2;

        d2 = d5 + d2;

        $d7 = $d7 * d3;

        d3 = d2 + $d7;

        $d7 = $d8 / d0;

        d2 = $d7 * 1.073741824E9;

        d6 = $d7 + d2;

        d4 = d6 - d2;

        d2 = $d7 - d4;

        d6 = d0 * 1.073741824E9;

        d5 = d0 + d6;

        d5 = d5 - d6;

        d6 = d0 - d5;

        $d9 = d4 * d5;

        $d9 = $d8 - $d9;

        d4 = d4 * d6;

        d4 = $d9 - d4;

        d5 = d2 * d5;

        d4 = d4 - d5;

        d2 = d2 * d6;

        d2 = d4 - d2;

        d2 = d2 / d0;

        $d8 = neg $d8;

        $d8 = $d8 * d3;

        $d8 = $d8 / d0;

        $d8 = $d8 / d0;

        $d8 = d2 + $d8;

        d0 = d1 / d0;

        d0 = $d8 + d0;

        goto label08;

     label13:
        return $d7;
    }
    public static double atan2(double, double)
    {
        double $d0, $d1, d2, d3, d4, $d5, $d6, $d7;
        byte $b0;
        boolean $z0;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $b0 = $d1 cmpl $d1;

        if $b0 != 0 goto label01;

        $b0 = $d0 cmpl $d0;

        if $b0 == 0 goto label02;

     label01:
        return #NaN;

     label02:
        $b0 = $d0 cmpl 0.0;

        if $b0 != 0 goto label08;

        d4 = $d1 * $d0;

        d2 = 1.0 / $d1;

        d3 = 1.0 / $d0;

        $b0 = d2 cmpl 0.0;

        if $b0 != 0 goto label04;

        $b0 = $d1 cmpl 0.0;

        if $b0 <= 0 goto label03;

        return $d0;

     label03:
        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double copySign(double,double)>(3.141592653589793, $d0);

        return $d0;

     label04:
        $b0 = $d1 cmpg 0.0;

        if $b0 < 0 goto label05;

        $b0 = d2 cmpg 0.0;

        if $b0 >= 0 goto label33;

     label05:
        $b0 = $d0 cmpg 0.0;

        if $b0 < 0 goto label06;

        $b0 = d3 cmpg 0.0;

        if $b0 >= 0 goto label07;

     label06:
        return -3.141592653589793;

     label07:
        return 3.141592653589793;

     label08:
        $b0 = $d0 cmpl #Infinity;

        if $b0 != 0 goto label11;

        $b0 = $d1 cmpl #Infinity;

        if $b0 != 0 goto label09;

        return 0.7853981633974483;

     label09:
        $b0 = $d1 cmpl #-Infinity;

        if $b0 != 0 goto label10;

        return 2.356194490192345;

     label10:
        return 1.5707963267948966;

     label11:
        $b0 = $d0 cmpl #-Infinity;

        if $b0 != 0 goto label14;

        $b0 = $d1 cmpl #Infinity;

        if $b0 != 0 goto label12;

        return -0.7853981633974483;

     label12:
        $b0 = $d1 cmpl #-Infinity;

        if $b0 != 0 goto label13;

        return -2.356194490192345;

     label13:
        return -1.5707963267948966;

     label14:
        $b0 = $d1 cmpl #Infinity;

        if $b0 != 0 goto label18;

        $b0 = $d0 cmpl 0.0;

        if $b0 > 0 goto label15;

        d2 = 1.0 / $d0;

        $b0 = d2 cmpl 0.0;

        if $b0 <= 0 goto label16;

     label15:
        return 0.0;

     label16:
        $b0 = $d0 cmpg 0.0;

        if $b0 < 0 goto label17;

        d2 = 1.0 / $d0;

        $b0 = d2 cmpg 0.0;

        if $b0 >= 0 goto label18;

     label17:
        return -0.0;

     label18:
        $b0 = $d1 cmpl #-Infinity;

        if $b0 != 0 goto label22;

        $b0 = $d0 cmpl 0.0;

        if $b0 > 0 goto label19;

        d2 = 1.0 / $d0;

        $b0 = d2 cmpl 0.0;

        if $b0 <= 0 goto label20;

     label19:
        return 3.141592653589793;

     label20:
        $b0 = $d0 cmpg 0.0;

        if $b0 < 0 goto label21;

        d2 = 1.0 / $d0;

        $b0 = d2 cmpg 0.0;

        if $b0 >= 0 goto label22;

     label21:
        return -3.141592653589793;

     label22:
        $b0 = $d1 cmpl 0.0;

        if $b0 != 0 goto label26;

        $b0 = $d0 cmpl 0.0;

        if $b0 > 0 goto label23;

        d2 = 1.0 / $d0;

        $b0 = d2 cmpl 0.0;

        if $b0 <= 0 goto label24;

     label23:
        return 1.5707963267948966;

     label24:
        $b0 = $d0 cmpg 0.0;

        if $b0 < 0 goto label25;

        d2 = 1.0 / $d0;

        $b0 = d2 cmpg 0.0;

        if $b0 >= 0 goto label26;

     label25:
        return -1.5707963267948966;

     label26:
        d3 = $d0 / $d1;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d3);

        if $z0 == 0 goto label29;

        $b0 = $d1 cmpg 0.0;

        if $b0 >= 0 goto label28;

        $z0 = 1;

     label27:
        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan(double,double,boolean)>(d3, 0.0, $z0);

        return $d0;

     label28:
        $z0 = 0;

        goto label27;

     label29:
        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double doubleHighPart(double)>(d3);

        d3 = d3 - d2;

        $d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double doubleHighPart(double)>($d1);

        d4 = $d1 - $d5;

        $d6 = d2 * $d5;

        $d6 = $d0 - $d6;

        $d7 = d2 * d4;

        $d6 = $d6 - $d7;

        $d5 = d3 * $d5;

        $d5 = $d6 - $d5;

        d4 = d3 * d4;

        d4 = $d5 - d4;

        d4 = d4 / $d1;

        d4 = d3 + d4;

        d3 = d2 + d4;

        d2 = d3 - d2;

        d2 = d2 - d4;

        d2 = neg d2;

        d4 = d3;

        $b0 = d3 cmpl 0.0;

        if $b0 != 0 goto label30;

        d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double copySign(double,double)>(0.0, $d0);

     label30:
        $b0 = $d1 cmpg 0.0;

        if $b0 >= 0 goto label32;

        $z0 = 1;

     label31:
        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan(double,double,boolean)>(d4, d2, $z0);

        return $d0;

     label32:
        $z0 = 0;

        goto label31;

     label33:
        return d4;
    }
    public static double atanh(double)
    {
        double d0, $d1, $d2;
        boolean z0;
        byte $b0;

        $d1 := @parameter0: double;

        z0 = 0;

        $b0 = $d1 cmpg 0.0;

        if $b0 >= 0 goto label1;

        z0 = 1;

        $d1 = neg $d1;

     label1:
        $b0 = $d1 cmpl 0.15;

        if $b0 <= 0 goto label3;

        d0 = 1.0 + $d1;

        $d1 = 1.0 - $d1;

        $d1 = d0 / $d1;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d1);

        $d1 = 0.5 * $d1;

     label2:
        if z0 == 0 goto label7;

        $d1 = neg $d1;

        return $d1;

     label3:
        d0 = $d1 * $d1;

        $b0 = $d1 cmpl 0.087;

        if $b0 <= 0 goto label4;

        $d2 = 0.058823529411764705 * d0;

        $d2 = 0.06666666666666667 + $d2;

        $d2 = $d2 * d0;

        $d2 = 0.07692307692307693 + $d2;

        $d2 = $d2 * d0;

        $d2 = 0.09090909090909091 + $d2;

        $d2 = $d2 * d0;

        $d2 = 0.1111111111111111 + $d2;

        $d2 = $d2 * d0;

        $d2 = 0.14285714285714285 + $d2;

        $d2 = $d2 * d0;

        $d2 = 0.2 + $d2;

        $d2 = $d2 * d0;

        $d2 = 0.3333333333333333 + $d2;

        d0 = $d2 * d0;

        d0 = 1.0 + d0;

        $d1 = $d1 * d0;

        goto label2;

     label4:
        $b0 = $d1 cmpl 0.031;

        if $b0 <= 0 goto label5;

        $d2 = 0.07692307692307693 * d0;

        $d2 = 0.09090909090909091 + $d2;

        $d2 = $d2 * d0;

        $d2 = 0.1111111111111111 + $d2;

        $d2 = $d2 * d0;

        $d2 = 0.14285714285714285 + $d2;

        $d2 = $d2 * d0;

        $d2 = 0.2 + $d2;

        $d2 = $d2 * d0;

        $d2 = 0.3333333333333333 + $d2;

        d0 = $d2 * d0;

        d0 = 1.0 + d0;

        $d1 = $d1 * d0;

        goto label2;

     label5:
        $b0 = $d1 cmpl 0.003;

        if $b0 <= 0 goto label6;

        $d2 = 0.1111111111111111 * d0;

        $d2 = 0.14285714285714285 + $d2;

        $d2 = $d2 * d0;

        $d2 = 0.2 + $d2;

        $d2 = $d2 * d0;

        $d2 = 0.3333333333333333 + $d2;

        d0 = $d2 * d0;

        d0 = 1.0 + d0;

        $d1 = $d1 * d0;

        goto label2;

     label6:
        $d2 = 0.2 * d0;

        $d2 = 0.3333333333333333 + $d2;

        d0 = $d2 * d0;

        d0 = 1.0 + d0;

        $d1 = $d1 * d0;

        goto label2;

     label7:
        return $d1;
    }
    public static double cbrt(double)
    {
        int i0, $i3;
        double d0, d1, d2, d3, $d4, $d5, d6, $d7, $d8;
        long $l1, l2, $l5;
        boolean z0;
        byte $b4;
        double[] $r0;

        d2 := @parameter0: double;

        $l1 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d2);

        l2 = $l1;

        $l1 = $l1 >> 52;

        $l1 = $l1 & 2047L;

        $i3 = (int) $l1;

        $i3 = $i3 + -1023;

        z0 = 0;

        if $i3 != -1023 goto label2;

        $b4 = d2 cmpl 0.0;

        if $b4 != 0 goto label1;

        return d2;

     label1:
        z0 = 1;

        d2 = d2 * 1.8014398509481984E16;

        $l1 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d2);

        l2 = $l1;

        $l1 = $l1 >> 52;

        $l1 = $l1 & 2047L;

        $i3 = (int) $l1;

        $i3 = $i3 + -1023;

     label2:
        if $i3 == 1024 goto label3;

        i0 = $i3 / 3;

        $l1 = -9223372036854775808L & l2;

        i0 = i0 + 1023;

        i0 = i0 & 2047;

        $l5 = (long) i0;

        $l5 = $l5 << 52;

        $l1 = $l1 | $l5;

        $d4 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l1);

        l2 = 4503599627370495L & l2;

        l2 = l2 | 4607182418800017408L;

        $d5 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>(l2);

        d0 = -0.010714690733195933 * $d5;

        d0 = d0 + 0.0875862700108075;

        d0 = d0 * $d5;

        d0 = d0 + -0.3058015757857271;

        d0 = d0 * $d5;

        d0 = d0 + 0.7249995199969751;

        $d5 = d0 * $d5;

        $d5 = $d5 + 0.5039018405998233;

        $r0 = <org.apache.commons.math3.util.FastMath: double[] CBRTTWO>;

        $i3 = $i3 % 3;

        $i3 = $i3 + 2;

        d0 = $r0[$i3];

        $d5 = $d5 * d0;

        d0 = $d4 * $d4;

        d0 = d0 * $d4;

        d2 = d2 / d0;

        d0 = $d5 * $d5;

        d0 = d0 * $d5;

        d0 = d2 - d0;

        d3 = 3.0 * $d5;

        d3 = d3 * $d5;

        d0 = d0 / d3;

        $d5 = $d5 + d0;

        d0 = $d5 * $d5;

        d0 = d0 * $d5;

        d0 = d2 - d0;

        d3 = 3.0 * $d5;

        d3 = d3 * $d5;

        d0 = d0 / d3;

        $d5 = $d5 + d0;

        d0 = $d5 * 1.073741824E9;

        d3 = $d5 + d0;

        d0 = d3 - d0;

        d3 = $d5 - d0;

        d6 = d0 * d0;

        d1 = d0 * d3;

        d1 = d1 * 2.0;

        $d7 = d3 * d3;

        $d7 = d1 + $d7;

        d1 = d6 * 1.073741824E9;

        $d8 = d6 + d1;

        d1 = $d8 - d1;

        d6 = d6 - d1;

        d6 = $d7 + d6;

        $d7 = d1 * d3;

        $d8 = d0 * d6;

        $d7 = $d7 + $d8;

        d3 = d6 * d3;

        d3 = $d7 + d3;

        d1 = d1 * d0;

        d0 = d2 - d1;

        d2 = d0 - d2;

        d2 = d2 + d1;

        d2 = neg d2;

        d2 = d2 - d3;

        d2 = d0 + d2;

        d0 = 3.0 * $d5;

        d0 = d0 * $d5;

        d2 = d2 / d0;

        d2 = $d5 + d2;

        d2 = d2 * $d4;

        if z0 == 0 goto label3;

        d2 = d2 * 3.814697265625E-6;

     label3:
        return d2;
    }
    public static double ceil(double)
    {
        double $d0, $d1;
        byte $b0;

        $d0 := @parameter0: double;

        $b0 = $d0 cmpl $d0;

        if $b0 == 0 goto label1;

        return $d0;

     label1:
        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double floor(double)>($d0);

        $b0 = $d1 cmpl $d0;

        if $b0 == 0 goto label2;

        $d1 = $d1 + 1.0;

        $b0 = $d1 cmpl 0.0;

        if $b0 != 0 goto label2;

        $d0 = $d1 * $d0;

        return $d0;

     label2:
        return $d1;
    }
    public static double copySign(double, double)
    {
        double $d0, d1;
        long $l0, $l1;
        byte $b2;

        d1 := @parameter0: double;

        $d0 := @parameter1: double;

        $l0 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d1);

        $l1 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>($d0);

        $l0 = $l0 ^ $l1;

        $b2 = $l0 cmp 0L;

        if $b2 < 0 goto label1;

        return d1;

     label1:
        d1 = neg d1;

        return d1;
    }
    public static float copySign(float, float)
    {
        float $f0, f1;
        int $i0, $i1;

        f1 := @parameter0: float;

        $f0 := @parameter1: float;

        $i0 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(f1);

        $i1 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>($f0);

        $i0 = $i0 ^ $i1;

        if $i0 < 0 goto label1;

        return f1;

     label1:
        f1 = neg f1;

        return f1;
    }
    public static double cos(double)
    {
        double $d0, d1;
        org.apache.commons.math3.util.FastMath$CodyWaite r0;
        double[] r1;
        int i0;
        byte $b1;

        $d0 := @parameter0: double;

        i0 = 0;

        d1 = $d0;

        $b1 = $d0 cmpg 0.0;

        if $b1 >= 0 goto label01;

        d1 = neg $d0;

     label01:
        $b1 = d1 cmpl d1;

        if $b1 != 0 goto label10;

        $b1 = d1 cmpl #Infinity;

        if $b1 != 0 goto label02;

        return #NaN;

     label02:
        $d0 = 0.0;

        $b1 = d1 cmpl 3294198.0;

        if $b1 <= 0 goto label06;

        r1 = newarray (double)[3];

        staticinvoke <org.apache.commons.math3.util.FastMath: void reducePayneHanek(double,double[])>(d1, r1);

        $d0 = r1[0];

        i0 = (int) $d0;

        i0 = i0 & 3;

        d1 = r1[1];

        $d0 = r1[2];

     label03:
        lookupswitch(i0)
        {
            case 0: goto label05;
            case 1: goto label07;
            case 2: goto label08;
            case 3: goto label09;
            default: goto label04;
        };

     label04:
        return #NaN;

     label05:
        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double cosQ(double,double)>(d1, $d0);

        return $d0;

     label06:
        $b1 = d1 cmpl 1.5707963267948966;

        if $b1 <= 0 goto label03;

        r0 = new org.apache.commons.math3.util.FastMath$CodyWaite;

        specialinvoke r0.<org.apache.commons.math3.util.FastMath$CodyWaite: void <init>(double)>(d1);

        i0 = virtualinvoke r0.<org.apache.commons.math3.util.FastMath$CodyWaite: int getK()>();

        i0 = i0 & 3;

        d1 = virtualinvoke r0.<org.apache.commons.math3.util.FastMath$CodyWaite: double getRemA()>();

        $d0 = virtualinvoke r0.<org.apache.commons.math3.util.FastMath$CodyWaite: double getRemB()>();

        goto label03;

     label07:
        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sinQ(double,double)>(d1, $d0);

        $d0 = neg $d0;

        return $d0;

     label08:
        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double cosQ(double,double)>(d1, $d0);

        $d0 = neg $d0;

        return $d0;

     label09:
        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sinQ(double,double)>(d1, $d0);

        return $d0;

     label10:
        return #NaN;
    }
    private static double cosQ(double, double)
    {
        double $d0, $d1, d2, $d3;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        d2 = 1.5707963267948966 - $d0;

        $d3 = d2 - 1.5707963267948966;

        $d0 = $d3 + $d0;

        $d0 = neg $d0;

        $d1 = 6.123233995736766E-17 - $d1;

        $d0 = $d0 + $d1;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sinQ(double,double)>(d2, $d0);

        return $d0;
    }
    public static double cosh(double)
    {
        double[] r0;
        double d0, d1, d2, d3, d4, $d5, $d6, $d7;
        byte $b0;

        d4 := @parameter0: double;

        $b0 = d4 cmpl d4;

        if $b0 == 0 goto label1;

        return d4;

     label1:
        $b0 = d4 cmpl 20.0;

        if $b0 <= 0 goto label3;

        $d5 = <org.apache.commons.math3.util.FastMath: double LOG_MAX_VALUE>;

        $b0 = d4 cmpl $d5;

        if $b0 < 0 goto label2;

        d4 = 0.5 * d4;

        d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>(d4);

        $d5 = 0.5 * d4;

        d4 = $d5 * d4;

        return d4;

     label2:
        d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>(d4);

        d4 = 0.5 * d4;

        return d4;

     label3:
        $b0 = d4 cmpg -20.0;

        if $b0 >= 0 goto label5;

        $d5 = <org.apache.commons.math3.util.FastMath: double LOG_MAX_VALUE>;

        $d5 = neg $d5;

        $b0 = d4 cmpg $d5;

        if $b0 > 0 goto label4;

        d4 = -0.5 * d4;

        d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>(d4);

        $d5 = 0.5 * d4;

        d4 = $d5 * d4;

        return d4;

     label4:
        d4 = neg d4;

        d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>(d4);

        d4 = 0.5 * d4;

        return d4;

     label5:
        r0 = newarray (double)[2];

        $b0 = d4 cmpg 0.0;

        if $b0 >= 0 goto label6;

        d4 = neg d4;

     label6:
        staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double,double,double[])>(d4, 0.0, r0);

        d4 = r0[0];

        $d5 = r0[1];

        d4 = d4 + $d5;

        $d5 = r0[0];

        $d5 = d4 - $d5;

        d1 = r0[1];

        $d5 = $d5 - d1;

        $d5 = neg $d5;

        d1 = d4 * 1.073741824E9;

        d0 = d4 + d1;

        d2 = d0 - d1;

        d3 = d4 - d2;

        d0 = 1.0 / d4;

        d1 = d0 * 1.073741824E9;

        $d6 = d0 + d1;

        d1 = $d6 - d1;

        $d6 = d0 - d1;

        $d7 = d2 * d1;

        $d7 = 1.0 - $d7;

        d2 = d2 * $d6;

        d2 = $d7 - d2;

        $d7 = d3 * d1;

        d2 = d2 - $d7;

        d3 = d3 * $d6;

        d3 = d2 - d3;

        d3 = d3 * d0;

        $d6 = $d6 + d3;

        d3 = neg $d5;

        d3 = d3 * d0;

        d0 = d3 * d0;

        d0 = $d6 + d0;

        $d6 = d4 + d1;

        d4 = $d6 - d4;

        d4 = d4 - d1;

        d4 = neg d4;

        $d5 = $d5 + d4;

        d4 = $d6 + d0;

        d1 = d4 - $d6;

        d1 = d1 - d0;

        d1 = neg d1;

        $d5 = $d5 + d1;

        d4 = d4 + $d5;

        d4 = d4 * 0.5;

        return d4;
    }
    public static int decrementExact(int) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        int $i0;
        org.apache.commons.math3.exception.util.LocalizedFormats $r0;
        org.apache.commons.math3.exception.MathArithmeticException $r1;
        java.lang.Object[] $r2;
        java.lang.Integer $r3;

        $i0 := @parameter0: int;

        if $i0 != -2147483648 goto label1;

        $r1 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r0 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OVERFLOW_IN_SUBTRACTION>;

        $r2 = newarray (java.lang.Object)[2];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r2[0] = $r3;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r2[1] = $r3;

        specialinvoke $r1.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r0, $r2);

        throw $r1;

     label1:
        $i0 = $i0 + -1;

        return $i0;
    }
    public static long decrementExact(long) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        long $l0;
        org.apache.commons.math3.exception.util.LocalizedFormats $r0;
        byte $b1;
        org.apache.commons.math3.exception.MathArithmeticException $r1;
        java.lang.Object[] $r2;
        java.lang.Long $r3;
        java.lang.Integer $r4;

        $l0 := @parameter0: long;

        $b1 = $l0 cmp -9223372036854775808L;

        if $b1 != 0 goto label1;

        $r1 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r0 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OVERFLOW_IN_SUBTRACTION>;

        $r2 = newarray (java.lang.Object)[2];

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r2[0] = $r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r2[1] = $r4;

        specialinvoke $r1.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r0, $r2);

        throw $r1;

     label1:
        $l0 = $l0 - 1L;

        return $l0;
    }
    private static double doubleHighPart(double)
    {
        double d0, $d1;
        byte $b0;
        long $l1;

        d0 := @parameter0: double;

        $d1 = <org.apache.commons.math3.util.Precision: double SAFE_MIN>;

        $d1 = neg $d1;

        $b0 = d0 cmpl $d1;

        if $b0 <= 0 goto label1;

        $d1 = <org.apache.commons.math3.util.Precision: double SAFE_MIN>;

        $b0 = d0 cmpg $d1;

        if $b0 >= 0 goto label1;

        return d0;

     label1:
        $l1 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);

        $l1 = $l1 & -1073741824L;

        d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l1);

        return d0;
    }
    public static double exp(double)
    {
        double $d0;

        $d0 := @parameter0: double;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double,double,double[])>($d0, 0.0, null);

        return $d0;
    }
    private static double exp(double, double, double[])
    {
        double $d0, $d1, d2, d3, d4, d5, d6, $d7;
        double[] $r0, $r1;
        int i0, i1;
        byte $b2;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $r0 := @parameter2: double[];

        i1 = (int) $d0;

        $b2 = $d0 cmpg 0.0;

        if $b2 >= 0 goto label06;

        $b2 = $d0 cmpg -746.0;

        if $b2 >= 0 goto label02;

        if $r0 == null goto label01;

        $d0 = (double) 0L;

        $r0[0] = $d0;

        $d0 = (double) 0L;

        $r0[1] = $d0;

     label01:
        return 0.0;

     label02:
        if i1 >= -709 goto label03;

        $d0 = 40.19140625 + $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double,double,double[])>($d0, $d1, $r0);

        $d0 = $d0 / 2.85040095144011776E17;

        if $r0 == null goto label11;

        $d1 = $r0[0];

        $d1 = $d1 / 2.85040095144011776E17;

        $r0[0] = $d1;

        $d1 = $r0[1];

        $d1 = $d1 / 2.85040095144011776E17;

        $r0[1] = $d1;

        return $d0;

     label03:
        if i1 != -709 goto label04;

        $d0 = 1.494140625 + $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double,double,double[])>($d0, $d1, $r0);

        $d0 = $d0 / 4.455505956692757;

        if $r0 == null goto label11;

        $d1 = $r0[0];

        $d1 = $d1 / 4.455505956692757;

        $r0[0] = $d1;

        $d1 = $r0[1];

        $d1 = $d1 / 4.455505956692757;

        $r0[1] = $d1;

        return $d0;

     label04:
        i1 = i1 + -1;

     label05:
        $r1 = staticinvoke <org.apache.commons.math3.util.FastMath$ExpIntTable: double[] access$000()>();

        i0 = i1 + 750;

        d4 = $r1[i0];

        $r1 = staticinvoke <org.apache.commons.math3.util.FastMath$ExpIntTable: double[] access$100()>();

        i0 = i1 + 750;

        d5 = $r1[i0];

        d3 = (double) i1;

        d3 = $d0 - d3;

        d3 = d3 * 1024.0;

        i0 = (int) d3;

        $r1 = staticinvoke <org.apache.commons.math3.util.FastMath$ExpFracTable: double[] access$200()>();

        d2 = $r1[i0];

        $r1 = staticinvoke <org.apache.commons.math3.util.FastMath$ExpFracTable: double[] access$300()>();

        d3 = $r1[i0];

        d6 = (double) i1;

        $d7 = (double) i0;

        $d7 = $d7 / 1024.0;

        d6 = d6 + $d7;

        $d0 = $d0 - d6;

        d6 = 0.04168701738764507 * $d0;

        d6 = d6 + 0.1666666505023083;

        d6 = d6 * $d0;

        d6 = d6 + 0.5000000000042687;

        d6 = d6 * $d0;

        d6 = d6 + 1.0;

        $d0 = d6 * $d0;

        $d0 = $d0 + -3.940510424527919E-20;

        d6 = d4 * d2;

        d4 = d4 * d3;

        d2 = d5 * d2;

        d4 = d4 + d2;

        d5 = d5 * d3;

        d5 = d4 + d5;

        d3 = d5 + d6;

        $b2 = d3 cmpl #Infinity;

        if $b2 != 0 goto label08;

        return #Infinity;

     label06:
        if i1 <= 709 goto label05;

        if $r0 == null goto label07;

        $d0 = (double) 9218868437227405312L;

        $r0[0] = $d0;

        $d0 = (double) 0L;

        $r0[1] = $d0;

     label07:
        return #Infinity;

     label08:
        $b2 = $d1 cmpl 0.0;

        if $b2 == 0 goto label10;

        d4 = d3 * $d1;

        d4 = d4 * $d0;

        d2 = d3 * $d1;

        d4 = d4 + d2;

        d2 = d3 * $d0;

        d4 = d4 + d2;

        d4 = d4 + d5;

        d4 = d4 + d6;

     label09:
        if $r0 == null goto label12;

        $r0[0] = d6;

        d6 = d3 * $d1;

        d6 = d6 * $d0;

        $d1 = d3 * $d1;

        $d1 = d6 + $d1;

        $d0 = d3 * $d0;

        $d0 = $d1 + $d0;

        $d0 = $d0 + d5;

        $r0[1] = $d0;

        return d4;

     label10:
        d4 = d3 * $d0;

        d4 = d4 + d5;

        d4 = d4 + d6;

        goto label09;

     label11:
        return $d0;

     label12:
        return d4;
    }
    public static double expm1(double)
    {
        double $d0;

        $d0 := @parameter0: double;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double expm1(double,double[])>($d0, null);

        return $d0;
    }
    private static double expm1(double, double[])
    {
        double[] $r0, $r1;
        double d0, d1, d2, d3, d4, d5, d6, $d7, $d8;
        byte $b0;
        boolean z0;
        int $i1;

        d4 := @parameter0: double;

        $r0 := @parameter1: double[];

        $b0 = d4 cmpl d4;

        if $b0 != 0 goto label8;

        $b0 = d4 cmpl 0.0;

        if $b0 != 0 goto label1;

        return d4;

     label1:
        $b0 = d4 cmpg -1.0;

        if $b0 <= 0 goto label2;

        $b0 = d4 cmpl 1.0;

        if $b0 < 0 goto label4;

     label2:
        $r0 = newarray (double)[2];

        staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double,double,double[])>(d4, 0.0, $r0);

        $b0 = d4 cmpl 0.0;

        if $b0 <= 0 goto label3;

        d4 = $r0[0];

        d4 = -1.0 + d4;

        d1 = $r0[1];

        d4 = d4 + d1;

        return d4;

     label3:
        d4 = $r0[0];

        d4 = -1.0 + d4;

        d1 = 1.0 + d4;

        d0 = $r0[0];

        d1 = d1 - d0;

        d1 = neg d1;

        d0 = $r0[1];

        d1 = d1 + d0;

        d4 = d4 + d1;

        return d4;

     label4:
        z0 = 0;

        $b0 = d4 cmpg 0.0;

        if $b0 >= 0 goto label5;

        d4 = neg d4;

        z0 = 1;

     label5:
        d1 = 1024.0 * d4;

        $i1 = (int) d1;

        $r1 = staticinvoke <org.apache.commons.math3.util.FastMath$ExpFracTable: double[] access$200()>();

        d1 = $r1[$i1];

        d6 = d1 - 1.0;

        $r1 = staticinvoke <org.apache.commons.math3.util.FastMath$ExpFracTable: double[] access$300()>();

        d0 = $r1[$i1];

        d1 = d6 + d0;

        d6 = d1 - d6;

        d0 = d6 - d0;

        d6 = neg d0;

        d0 = d1 * 1.073741824E9;

        d3 = d1 + d0;

        d0 = d3 - d0;

        d1 = d1 - d0;

        d1 = d6 + d1;

        d6 = (double) $i1;

        d6 = d6 / 1024.0;

        d4 = d4 - d6;

        d6 = 0.008336750013465571 * d4;

        d6 = d6 + 0.041666663879186654;

        d6 = d6 * d4;

        d6 = d6 + 0.16666666666745392;

        d6 = d6 * d4;

        d6 = d6 + 0.49999999999999994;

        d6 = d6 * d4;

        d6 = d6 * d4;

        d3 = d4 + d6;

        d4 = d3 - d4;

        d4 = d4 - d6;

        d4 = neg d4;

        d6 = d3 * 1.073741824E9;

        d5 = d3 + d6;

        d6 = d5 - d6;

        d3 = d3 - d6;

        d4 = d4 + d3;

        d3 = d6 * d0;

        d5 = d6 * d1;

        d5 = d3 + d5;

        d3 = d5 - d3;

        d2 = d6 * d1;

        d3 = d3 - d2;

        d2 = neg d3;

        d3 = d4 * d0;

        d3 = d5 + d3;

        d5 = d3 - d5;

        $d7 = d4 * d0;

        d5 = d5 - $d7;

        d5 = neg d5;

        d2 = d2 + d5;

        d5 = d4 * d1;

        d5 = d3 + d5;

        d3 = d5 - d3;

        $d7 = d4 * d1;

        d3 = d3 - $d7;

        d3 = neg d3;

        d2 = d2 + d3;

        d3 = d5 + d0;

        d0 = d3 - d0;

        d0 = d0 - d5;

        d0 = neg d0;

        d5 = d2 + d0;

        d0 = d3 + d6;

        d3 = d0 - d3;

        d6 = d3 - d6;

        d6 = neg d6;

        d3 = d5 + d6;

        d6 = d0 + d1;

        d0 = d6 - d0;

        d1 = d0 - d1;

        d1 = neg d1;

        d0 = d3 + d1;

        d1 = d6 + d4;

        d6 = d1 - d6;

        d4 = d6 - d4;

        d4 = neg d4;

        d6 = d0 + d4;

        d4 = d1;

        if z0 == 0 goto label6;

        d2 = 1.0 + d1;

        d4 = 1.0 / d2;

        d0 = d2 - 1.0;

        d0 = d0 - d1;

        d0 = neg d0;

        d3 = d0 + d6;

        d5 = d1 * d4;

        d0 = d5 * 1.073741824E9;

        $d7 = d5 + d0;

        d0 = $d7 - d0;

        d5 = d5 - d0;

        $d7 = d2 * 1.073741824E9;

        $d8 = d2 + $d7;

        $d7 = $d8 - $d7;

        d2 = d2 - $d7;

        $d8 = $d7 * d0;

        $d8 = d1 - $d8;

        $d7 = $d7 * d5;

        $d7 = $d8 - $d7;

        $d8 = d2 * d0;

        $d7 = $d7 - $d8;

        d2 = d2 * d5;

        d2 = $d7 - d2;

        d2 = d2 * d4;

        d5 = d5 + d2;

        d6 = d6 * d4;

        d6 = d5 + d6;

        d1 = neg d1;

        d1 = d1 * d3;

        d1 = d1 * d4;

        d4 = d1 * d4;

        d1 = d6 + d4;

        d4 = neg d0;

        d6 = neg d1;

     label6:
        if $r0 == null goto label7;

        $r0[0] = d4;

        $r0[1] = d6;

     label7:
        d4 = d4 + d6;

     label8:
        return d4;
    }
    public static double floor(double)
    {
        double d0, $d1;
        byte $b0;
        long l1;

        d0 := @parameter0: double;

        $b0 = d0 cmpl d0;

        if $b0 == 0 goto label1;

        return d0;

     label1:
        $b0 = d0 cmpl 4.503599627370496E15;

        if $b0 >= 0 goto label4;

        $b0 = d0 cmpg -4.503599627370496E15;

        if $b0 <= 0 goto label4;

        l1 = (long) d0;

        $b0 = d0 cmpg 0.0;

        if $b0 >= 0 goto label2;

        $d1 = (double) l1;

        $b0 = $d1 cmpl d0;

        if $b0 == 0 goto label2;

        l1 = l1 - 1L;

     label2:
        $b0 = l1 cmp 0L;

        if $b0 != 0 goto label3;

        $d1 = (double) l1;

        d0 = d0 * $d1;

        return d0;

     label3:
        d0 = (double) l1;

     label4:
        return d0;
    }
    public static int floorDiv(int, int) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        int $i0, $i1, i2, $i3;
        org.apache.commons.math3.exception.util.LocalizedFormats $r0;
        org.apache.commons.math3.exception.MathArithmeticException $r1;
        java.lang.Object[] $r2;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        if $i1 != 0 goto label1;

        $r1 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r0 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats ZERO_DENOMINATOR>;

        $r2 = newarray (java.lang.Object)[0];

        specialinvoke $r1.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r0, $r2);

        throw $r1;

     label1:
        i2 = $i0 % $i1;

        $i3 = $i0 ^ $i1;

        if $i3 >= 0 goto label2;

        if i2 != 0 goto label3;

     label2:
        $i0 = $i0 / $i1;

        return $i0;

     label3:
        $i0 = $i0 / $i1;

        $i0 = $i0 + -1;

        return $i0;
    }
    public static long floorDiv(long, long) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        long $l0, $l1, l2, $l4;
        org.apache.commons.math3.exception.util.LocalizedFormats $r0;
        byte $b3;
        org.apache.commons.math3.exception.MathArithmeticException $r1;
        java.lang.Object[] $r2;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $b3 = $l1 cmp 0L;

        if $b3 != 0 goto label1;

        $r1 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r0 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats ZERO_DENOMINATOR>;

        $r2 = newarray (java.lang.Object)[0];

        specialinvoke $r1.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r0, $r2);

        throw $r1;

     label1:
        l2 = $l0 % $l1;

        $l4 = $l0 ^ $l1;

        $b3 = $l4 cmp 0L;

        if $b3 >= 0 goto label2;

        $b3 = l2 cmp 0L;

        if $b3 != 0 goto label3;

     label2:
        $l0 = $l0 / $l1;

        return $l0;

     label3:
        $l0 = $l0 / $l1;

        $l0 = $l0 - 1L;

        return $l0;
    }
    public static int floorMod(int, int) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        int $i0, $i1, i2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r0;
        org.apache.commons.math3.exception.MathArithmeticException $r1;
        java.lang.Object[] $r2;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        if $i1 != 0 goto label1;

        $r1 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r0 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats ZERO_DENOMINATOR>;

        $r2 = newarray (java.lang.Object)[0];

        specialinvoke $r1.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r0, $r2);

        throw $r1;

     label1:
        i2 = $i0 % $i1;

        $i0 = $i0 ^ $i1;

        if $i0 >= 0 goto label3;

        if i2 != 0 goto label2;

        return i2;

     label2:
        $i0 = i2 + $i1;

        return $i0;

     label3:
        return i2;
    }
    public static long floorMod(long, long)
    {
        long $l0, $l1, l3;
        org.apache.commons.math3.exception.util.LocalizedFormats $r0;
        byte $b2;
        org.apache.commons.math3.exception.MathArithmeticException $r1;
        java.lang.Object[] $r2;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $b2 = $l1 cmp 0L;

        if $b2 != 0 goto label1;

        $r1 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r0 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats ZERO_DENOMINATOR>;

        $r2 = newarray (java.lang.Object)[0];

        specialinvoke $r1.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r0, $r2);

        throw $r1;

     label1:
        l3 = $l0 % $l1;

        $l0 = $l0 ^ $l1;

        $b2 = $l0 cmp 0L;

        if $b2 >= 0 goto label3;

        $b2 = l3 cmp 0L;

        if $b2 != 0 goto label2;

        return l3;

     label2:
        $l0 = l3 + $l1;

        return $l0;

     label3:
        return l3;
    }
    public static int getExponent(double)
    {
        double $d0;
        long $l0;
        int $i1;

        $d0 := @parameter0: double;

        $l0 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>($d0);

        $l0 = $l0 >>> 52;

        $l0 = $l0 & 2047L;

        $i1 = (int) $l0;

        $i1 = $i1 + -1023;

        return $i1;
    }
    public static int getExponent(float)
    {
        float $f0;
        int $i0;

        $f0 := @parameter0: float;

        $i0 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>($f0);

        $i0 = $i0 >>> 23;

        $i0 = $i0 & 255;

        $i0 = $i0 + -127;

        return $i0;
    }
    public static double hypot(double, double)
    {
        double $d0, $d1;
        int i0, $i1, $i2;
        boolean $z0;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d0);

        if $z0 != 0 goto label1;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d1);

        if $z0 == 0 goto label2;

     label1:
        return #Infinity;

     label2:
        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 != 0 goto label3;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d1);

        if $z0 == 0 goto label4;

     label3:
        return #NaN;

     label4:
        i0 = staticinvoke <org.apache.commons.math3.util.FastMath: int getExponent(double)>($d0);

        $i1 = staticinvoke <org.apache.commons.math3.util.FastMath: int getExponent(double)>($d1);

        $i2 = $i1 + 27;

        if i0 <= $i2 goto label5;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        return $d0;

     label5:
        $i2 = i0 + 27;

        if $i1 <= $i2 goto label6;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d1);

        return $d0;

     label6:
        i0 = i0 + $i1;

        i0 = i0 / 2;

        $i1 = neg i0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double scalb(double,int)>($d0, $i1);

        $i1 = neg i0;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double scalb(double,int)>($d1, $i1);

        $d0 = $d0 * $d0;

        $d1 = $d1 * $d1;

        $d0 = $d0 + $d1;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d0);

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double scalb(double,int)>($d0, i0);

        return $d0;
    }
    public static int incrementExact(int) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        int $i0;
        org.apache.commons.math3.exception.util.LocalizedFormats $r0;
        org.apache.commons.math3.exception.MathArithmeticException $r1;
        java.lang.Object[] $r2;
        java.lang.Integer $r3;

        $i0 := @parameter0: int;

        if $i0 != 2147483647 goto label1;

        $r1 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r0 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OVERFLOW_IN_ADDITION>;

        $r2 = newarray (java.lang.Object)[2];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r2[0] = $r3;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r2[1] = $r3;

        specialinvoke $r1.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r0, $r2);

        throw $r1;

     label1:
        $i0 = $i0 + 1;

        return $i0;
    }
    public static long incrementExact(long) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        long $l0;
        org.apache.commons.math3.exception.util.LocalizedFormats $r0;
        byte $b1;
        org.apache.commons.math3.exception.MathArithmeticException $r1;
        java.lang.Object[] $r2;
        java.lang.Long $r3;
        java.lang.Integer $r4;

        $l0 := @parameter0: long;

        $b1 = $l0 cmp 9223372036854775807L;

        if $b1 != 0 goto label1;

        $r1 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r0 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OVERFLOW_IN_ADDITION>;

        $r2 = newarray (java.lang.Object)[2];

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r2[0] = $r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r2[1] = $r4;

        specialinvoke $r1.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r0, $r2);

        throw $r1;

     label1:
        $l0 = 1L + $l0;

        return $l0;
    }
    public static double log(double)
    {
        double $d0;

        $d0 := @parameter0: double;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double,double[])>($d0, null);

        return $d0;
    }
    public static double log(double, double)
    {
        double $d0, $d1;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d1);

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d0);

        $d0 = $d1 / $d0;

        return $d0;
    }
    private static double log(double, double[])
    {
        double $d0, d1, d2, d3, d4, $d5;
        double[] $r0, r1, r4;
        byte $b0;
        long $l1, l2, $l3;
        int $i4, $i5;
        double[][] $r2, $r3;

        $d0 := @parameter0: double;

        $r0 := @parameter1: double[];

        $b0 = $d0 cmpl 0.0;

        if $b0 != 0 goto label01;

        return #-Infinity;

     label01:
        $l1 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>($d0);

        l2 = $l1;

        $l3 = -9223372036854775808L & $l1;

        $b0 = $l3 cmp 0L;

        if $b0 != 0 goto label02;

        $b0 = $d0 cmpl $d0;

        if $b0 == 0 goto label04;

     label02:
        $b0 = $d0 cmpl 0.0;

        if $b0 == 0 goto label04;

        if $r0 == null goto label03;

        $d0 = (double) 9221120237041090560L;

        $r0[0] = $d0;

     label03:
        return #NaN;

     label04:
        $b0 = $d0 cmpl #Infinity;

        if $b0 != 0 goto label06;

        if $r0 == null goto label05;

        $d0 = (double) 9218868437227405312L;

        $r0[0] = $d0;

     label05:
        return #Infinity;

     label06:
        $l3 = $l1 >> 52;

        $i4 = (int) $l3;

        $i4 = $i4 + -1023;

        $l3 = 9218868437227405312L & $l1;

        $b0 = $l3 cmp 0L;

        if $b0 != 0 goto label10;

        $b0 = $d0 cmpl 0.0;

        if $b0 != 0 goto label08;

        if $r0 == null goto label07;

        $d0 = (double) -4503599627370496L;

        $r0[0] = $d0;

     label07:
        return #-Infinity;

     label08:
        l2 = $l1 << 1;

     label09:
        $l1 = 4503599627370496L & l2;

        $b0 = $l1 cmp 0L;

        if $b0 != 0 goto label10;

        $i4 = $i4 + -1;

        l2 = l2 << 1;

        goto label09;

     label10:
        if $i4 == -1 goto label11;

        if $i4 != 0 goto label14;

     label11:
        $b0 = $d0 cmpg 1.01;

        if $b0 >= 0 goto label14;

        $b0 = $d0 cmpl 0.99;

        if $b0 <= 0 goto label14;

        if $r0 != null goto label14;

        $d0 = $d0 - 1.0;

        d2 = $d0 * 1.073741824E9;

        d1 = $d0 + d2;

        d2 = d1 - d2;

        $d0 = $d0 - d2;

        $r2 = <org.apache.commons.math3.util.FastMath: double[][] LN_QUICK_COEF>;

        $r3 = <org.apache.commons.math3.util.FastMath: double[][] LN_QUICK_COEF>;

        $i4 = lengthof $r3;

        $i4 = $i4 + -1;

        $r0 = $r2[$i4];

        d3 = $r0[0];

        d4 = $r0[1];

        $r2 = <org.apache.commons.math3.util.FastMath: double[][] LN_QUICK_COEF>;

        $i4 = lengthof $r2;

        $i4 = $i4 + -2;

     label12:
        if $i4 < 0 goto label13;

        d1 = d3 * d2;

        d3 = d3 * $d0;

        $d5 = d4 * d2;

        d3 = d3 + $d5;

        d4 = d4 * $d0;

        d4 = d3 + d4;

        d3 = d1 * 1.073741824E9;

        $d5 = d1 + d3;

        d3 = $d5 - d3;

        d1 = d1 - d3;

        d4 = d1 + d4;

        $r2 = <org.apache.commons.math3.util.FastMath: double[][] LN_QUICK_COEF>;

        $r0 = $r2[$i4];

        d1 = $r0[0];

        d1 = d3 + d1;

        d3 = $r0[1];

        d4 = d4 + d3;

        d3 = d1 * 1.073741824E9;

        $d5 = d1 + d3;

        d3 = $d5 - d3;

        d1 = d1 - d3;

        d4 = d1 + d4;

        $i4 = $i4 + -1;

        goto label12;

     label13:
        d1 = d3 * d2;

        d3 = d3 * $d0;

        d2 = d4 * d2;

        d2 = d3 + d2;

        $d0 = d4 * $d0;

        $d0 = d2 + $d0;

        d2 = d1 * 1.073741824E9;

        d4 = d1 + d2;

        d2 = d4 - d2;

        d1 = d1 - d2;

        $d0 = d1 + $d0;

        $d0 = d2 + $d0;

        return $d0;

     label14:
        $r2 = staticinvoke <org.apache.commons.math3.util.FastMath$lnMant: double[][] access$400()>();

        $l1 = 4499201580859392L & l2;

        $l1 = $l1 >> 42;

        $i5 = (int) $l1;

        r1 = $r2[$i5];

        $l1 = 4398046511103L & l2;

        $d0 = (double) $l1;

        $l1 = 4499201580859392L & l2;

        d2 = (double) $l1;

        d2 = 4.503599627370496E15 + d2;

        d2 = $d0 / d2;

        $d0 = 0.0;

        if $r0 == null goto label19;

        $d0 = d2 * 1.073741824E9;

        d1 = d2 + $d0;

        $d0 = d1 - $d0;

        d2 = d2 - $d0;

        $l1 = 4398046511103L & l2;

        d4 = (double) $l1;

        l2 = 4499201580859392L & l2;

        d1 = (double) l2;

        d1 = 4.503599627370496E15 + d1;

        d3 = $d0 * d1;

        d4 = d4 - d3;

        d3 = d2 * d1;

        d4 = d4 - d3;

        d1 = d4 / d1;

        d2 = d2 + d1;

        $r2 = <org.apache.commons.math3.util.FastMath: double[][] LN_HI_PREC_COEF>;

        $r3 = <org.apache.commons.math3.util.FastMath: double[][] LN_HI_PREC_COEF>;

        $i5 = lengthof $r3;

        $i5 = $i5 + -1;

        r4 = $r2[$i5];

        d3 = r4[0];

        d4 = r4[1];

        $r2 = <org.apache.commons.math3.util.FastMath: double[][] LN_HI_PREC_COEF>;

        $i5 = lengthof $r2;

        $i5 = $i5 + -2;

     label15:
        if $i5 < 0 goto label16;

        d1 = d3 * $d0;

        d3 = d3 * d2;

        $d5 = d4 * $d0;

        d3 = d3 + $d5;

        d4 = d4 * d2;

        d4 = d3 + d4;

        d3 = d1 * 1.073741824E9;

        $d5 = d1 + d3;

        d3 = $d5 - d3;

        d1 = d1 - d3;

        d4 = d1 + d4;

        $r2 = <org.apache.commons.math3.util.FastMath: double[][] LN_HI_PREC_COEF>;

        r4 = $r2[$i5];

        d1 = r4[0];

        d1 = d3 + d1;

        d3 = r4[1];

        d4 = d4 + d3;

        d3 = d1 * 1.073741824E9;

        $d5 = d1 + d3;

        d3 = $d5 - d3;

        d1 = d1 - d3;

        d4 = d1 + d4;

        $i5 = $i5 + -1;

        goto label15;

     label16:
        d1 = d3 * $d0;

        d3 = d3 * d2;

        $d0 = d4 * $d0;

        $d0 = d3 + $d0;

        d2 = d4 * d2;

        $d0 = $d0 + d2;

        d2 = d1 + $d0;

        d1 = d2 - d1;

        $d0 = d1 - $d0;

        $d0 = neg $d0;

     label17:
        d1 = (double) $i4;

        d1 = 0.6931470632553101 * d1;

        d4 = r1[0];

        d4 = d1 + d4;

        d1 = d4 - d1;

        d3 = r1[0];

        d1 = d1 - d3;

        d1 = neg d1;

        d3 = 0.0 + d1;

        d1 = d4 + d2;

        d4 = d1 - d4;

        d2 = d4 - d2;

        d2 = neg d2;

        d4 = d3 + d2;

        d2 = (double) $i4;

        d2 = 1.1730463525082348E-7 * d2;

        d2 = d1 + d2;

        d1 = d2 - d1;

        d3 = (double) $i4;

        d3 = 1.1730463525082348E-7 * d3;

        d1 = d1 - d3;

        d1 = neg d1;

        d4 = d4 + d1;

        d1 = r1[1];

        d1 = d2 + d1;

        d2 = d1 - d2;

        d3 = r1[1];

        d2 = d2 - d3;

        d2 = neg d2;

        d4 = d4 + d2;

        d2 = d1 + $d0;

        d1 = d2 - d1;

        $d0 = d1 - $d0;

        $d0 = neg $d0;

        $d0 = d4 + $d0;

        if $r0 == null goto label18;

        $r0[0] = d2;

        $r0[1] = $d0;

     label18:
        $d0 = d2 + $d0;

        return $d0;

     label19:
        d1 = -0.16624882440418567 * d2;

        d1 = d1 + 0.19999954120254515;

        d1 = d1 * d2;

        d1 = d1 + -0.2499999997677497;

        d1 = d1 * d2;

        d1 = d1 + 0.3333333333332802;

        d1 = d1 * d2;

        d1 = d1 + -0.5;

        d1 = d1 * d2;

        d1 = d1 + 1.0;

        d2 = d1 * d2;

        goto label17;
    }
    public static double log10(double)
    {
        double $d0, d1, $d2, $d3;
        double[] r0;
        boolean $z0;

        $d0 := @parameter0: double;

        r0 = newarray (double)[2];

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double,double[])>($d0, r0);

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d0);

        if $z0 == 0 goto label1;

        return $d0;

     label1:
        $d0 = r0[0];

        $d0 = $d0 * 1.073741824E9;

        d1 = r0[0];

        d1 = d1 + $d0;

        $d0 = d1 - $d0;

        d1 = r0[0];

        d1 = d1 - $d0;

        $d2 = r0[1];

        d1 = d1 + $d2;

        $d2 = 1.9699272335463627E-8 * d1;

        $d3 = 1.9699272335463627E-8 * $d0;

        $d2 = $d2 + $d3;

        d1 = 0.4342944622039795 * d1;

        d1 = $d2 + d1;

        $d0 = 0.4342944622039795 * $d0;

        $d0 = d1 + $d0;

        return $d0;
    }
    public static double log1p(double)
    {
        double $d0, d1, $d2;
        double[] r0;
        byte $b0;
        boolean $z0;

        $d0 := @parameter0: double;

        $b0 = $d0 cmpl -1.0;

        if $b0 != 0 goto label1;

        return #-Infinity;

     label1:
        $b0 = $d0 cmpl #Infinity;

        if $b0 != 0 goto label2;

        return #Infinity;

     label2:
        $b0 = $d0 cmpl 1.0E-6;

        if $b0 > 0 goto label3;

        $b0 = $d0 cmpg -1.0E-6;

        if $b0 >= 0 goto label4;

     label3:
        d1 = 1.0 + $d0;

        $d2 = d1 - 1.0;

        $d0 = $d2 - $d0;

        $d0 = neg $d0;

        r0 = newarray (double)[2];

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double,double[])>(d1, r0);

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d2);

        if $z0 != 0 goto label5;

        $d0 = $d0 / d1;

        d1 = 0.5 * $d0;

        d1 = d1 + 1.0;

        $d0 = d1 * $d0;

        d1 = r0[1];

        $d0 = $d0 + d1;

        d1 = r0[0];

        $d0 = $d0 + d1;

        return $d0;

     label4:
        d1 = 0.3333333333333333 * $d0;

        d1 = d1 - 0.5;

        d1 = d1 * $d0;

        d1 = d1 + 1.0;

        $d0 = d1 * $d0;

        return $d0;

     label5:
        return $d2;
    }
    public static void main(java.lang.String[])
    {
        java.lang.String[] $r0;
        java.io.PrintStream r1;
        double[] $r2;
        double[][] $r3;

        $r0 := @parameter0: java.lang.String[];

        r1 = <java.lang.System: java.io.PrintStream out>;

        $r2 = staticinvoke <org.apache.commons.math3.util.FastMath$ExpIntTable: double[] access$000()>();

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void printarray(java.io.PrintStream,java.lang.String,int,double[])>(r1, "EXP_INT_TABLE_A", 1500, $r2);

        $r2 = staticinvoke <org.apache.commons.math3.util.FastMath$ExpIntTable: double[] access$100()>();

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void printarray(java.io.PrintStream,java.lang.String,int,double[])>(r1, "EXP_INT_TABLE_B", 1500, $r2);

        $r2 = staticinvoke <org.apache.commons.math3.util.FastMath$ExpFracTable: double[] access$200()>();

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void printarray(java.io.PrintStream,java.lang.String,int,double[])>(r1, "EXP_FRAC_TABLE_A", 1025, $r2);

        $r2 = staticinvoke <org.apache.commons.math3.util.FastMath$ExpFracTable: double[] access$300()>();

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void printarray(java.io.PrintStream,java.lang.String,int,double[])>(r1, "EXP_FRAC_TABLE_B", 1025, $r2);

        $r3 = staticinvoke <org.apache.commons.math3.util.FastMath$lnMant: double[][] access$400()>();

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void printarray(java.io.PrintStream,java.lang.String,int,double[][])>(r1, "LN_MANT", 1024, $r3);

        $r2 = <org.apache.commons.math3.util.FastMath: double[] SINE_TABLE_A>;

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void printarray(java.io.PrintStream,java.lang.String,int,double[])>(r1, "SINE_TABLE_A", 14, $r2);

        $r2 = <org.apache.commons.math3.util.FastMath: double[] SINE_TABLE_B>;

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void printarray(java.io.PrintStream,java.lang.String,int,double[])>(r1, "SINE_TABLE_B", 14, $r2);

        $r2 = <org.apache.commons.math3.util.FastMath: double[] COSINE_TABLE_A>;

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void printarray(java.io.PrintStream,java.lang.String,int,double[])>(r1, "COSINE_TABLE_A", 14, $r2);

        $r2 = <org.apache.commons.math3.util.FastMath: double[] COSINE_TABLE_B>;

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void printarray(java.io.PrintStream,java.lang.String,int,double[])>(r1, "COSINE_TABLE_B", 14, $r2);

        $r2 = <org.apache.commons.math3.util.FastMath: double[] TANGENT_TABLE_A>;

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void printarray(java.io.PrintStream,java.lang.String,int,double[])>(r1, "TANGENT_TABLE_A", 14, $r2);

        $r2 = <org.apache.commons.math3.util.FastMath: double[] TANGENT_TABLE_B>;

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void printarray(java.io.PrintStream,java.lang.String,int,double[])>(r1, "TANGENT_TABLE_B", 14, $r2);

        return;
    }
    public static double max(double, double)
    {
        double $d0, d1;
        long $l0;
        byte $b1;

        d1 := @parameter0: double;

        $d0 := @parameter1: double;

        $b1 = d1 cmpl $d0;

        if $b1 <= 0 goto label1;

        return d1;

     label1:
        $b1 = d1 cmpg $d0;

        if $b1 >= 0 goto label2;

        return $d0;

     label2:
        $b1 = d1 cmpl $d0;

        if $b1 == 0 goto label3;

        return #NaN;

     label3:
        $l0 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d1);

        $b1 = $l0 cmp -9223372036854775808L;

        if $b1 != 0 goto label4;

        return $d0;

     label4:
        return d1;
    }
    public static float max(float, float)
    {
        float $f0, f1;
        int $i0;
        byte $b1;

        f1 := @parameter0: float;

        $f0 := @parameter1: float;

        $b1 = f1 cmpl $f0;

        if $b1 <= 0 goto label1;

        return f1;

     label1:
        $b1 = f1 cmpg $f0;

        if $b1 >= 0 goto label2;

        return $f0;

     label2:
        $b1 = f1 cmpl $f0;

        if $b1 == 0 goto label3;

        return #NaNF;

     label3:
        $i0 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(f1);

        if $i0 != -2147483648 goto label4;

        return $f0;

     label4:
        return f1;
    }
    public static int max(int, int)
    {
        int $i0, i1;

        $i0 := @parameter0: int;

        i1 := @parameter1: int;

        if $i0 > i1 goto label1;

        return i1;

     label1:
        return $i0;
    }
    public static long max(long, long)
    {
        long $l0, l2;
        byte $b1;

        $l0 := @parameter0: long;

        l2 := @parameter1: long;

        $b1 = $l0 cmp l2;

        if $b1 > 0 goto label1;

        return l2;

     label1:
        return $l0;
    }
    public static double min(double, double)
    {
        double $d0, d1;
        long $l0;
        byte $b1;

        $d0 := @parameter0: double;

        d1 := @parameter1: double;

        $b1 = $d0 cmpl d1;

        if $b1 <= 0 goto label1;

        return d1;

     label1:
        $b1 = $d0 cmpg d1;

        if $b1 >= 0 goto label2;

        return $d0;

     label2:
        $b1 = $d0 cmpl d1;

        if $b1 == 0 goto label3;

        return #NaN;

     label3:
        $l0 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>($d0);

        $b1 = $l0 cmp -9223372036854775808L;

        if $b1 != 0 goto label4;

        return $d0;

     label4:
        return d1;
    }
    public static float min(float, float)
    {
        float $f0, f1;
        int $i0;
        byte $b1;

        $f0 := @parameter0: float;

        f1 := @parameter1: float;

        $b1 = $f0 cmpl f1;

        if $b1 <= 0 goto label1;

        return f1;

     label1:
        $b1 = $f0 cmpg f1;

        if $b1 >= 0 goto label2;

        return $f0;

     label2:
        $b1 = $f0 cmpl f1;

        if $b1 == 0 goto label3;

        return #NaNF;

     label3:
        $i0 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>($f0);

        if $i0 != -2147483648 goto label4;

        return $f0;

     label4:
        return f1;
    }
    public static int min(int, int)
    {
        int $i0, i1;

        i1 := @parameter0: int;

        $i0 := @parameter1: int;

        if i1 > $i0 goto label1;

        return i1;

     label1:
        return $i0;
    }
    public static long min(long, long)
    {
        long $l0, l2;
        byte $b1;

        l2 := @parameter0: long;

        $l0 := @parameter1: long;

        $b1 = l2 cmp $l0;

        if $b1 > 0 goto label1;

        return l2;

     label1:
        return $l0;
    }
    public static int multiplyExact(int, int)
    {
        int $i0, $i1, $i2;
        org.apache.commons.math3.exception.MathArithmeticException $r0;
        org.apache.commons.math3.exception.util.LocalizedFormats $r1;
        java.lang.Object[] $r2;
        java.lang.Integer $r3;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        if $i1 <= 0 goto label1;

        $i2 = 2147483647 / $i1;

        if $i0 > $i2 goto label3;

        $i2 = -2147483648 / $i1;

        if $i0 < $i2 goto label3;

     label1:
        if $i1 >= -1 goto label2;

        $i2 = -2147483648 / $i1;

        if $i0 > $i2 goto label3;

        $i2 = 2147483647 / $i1;

        if $i0 < $i2 goto label3;

     label2:
        if $i1 != -1 goto label4;

        if $i0 != -2147483648 goto label4;

     label3:
        $r0 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r1 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OVERFLOW_IN_MULTIPLICATION>;

        $r2 = newarray (java.lang.Object)[2];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r2[0] = $r3;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r2[1] = $r3;

        specialinvoke $r0.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r1, $r2);

        throw $r0;

     label4:
        $i0 = $i0 * $i1;

        return $i0;
    }
    public static long multiplyExact(long, long)
    {
        long $l0, $l1, $l3;
        org.apache.commons.math3.exception.util.LocalizedFormats $r0;
        byte $b2;
        org.apache.commons.math3.exception.MathArithmeticException $r1;
        java.lang.Object[] $r2;
        java.lang.Long $r3;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $b2 = $l1 cmp 0L;

        if $b2 <= 0 goto label1;

        $l3 = 9223372036854775807L / $l1;

        $b2 = $l0 cmp $l3;

        if $b2 > 0 goto label3;

        $l3 = -9223372036854775808L / $l1;

        $b2 = $l0 cmp $l3;

        if $b2 < 0 goto label3;

     label1:
        $b2 = $l1 cmp -1L;

        if $b2 >= 0 goto label2;

        $l3 = -9223372036854775808L / $l1;

        $b2 = $l0 cmp $l3;

        if $b2 > 0 goto label3;

        $l3 = 9223372036854775807L / $l1;

        $b2 = $l0 cmp $l3;

        if $b2 < 0 goto label3;

     label2:
        $b2 = $l1 cmp -1L;

        if $b2 != 0 goto label4;

        $b2 = $l0 cmp -9223372036854775808L;

        if $b2 != 0 goto label4;

     label3:
        $r1 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r0 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OVERFLOW_IN_MULTIPLICATION>;

        $r2 = newarray (java.lang.Object)[2];

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r2[0] = $r3;

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $r2[1] = $r3;

        specialinvoke $r1.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r0, $r2);

        throw $r1;

     label4:
        $l0 = $l0 * $l1;

        return $l0;
    }
    public static double nextAfter(double, double)
    {
        double $d0, $d1;
        long l0, $l2;
        boolean $z0;
        byte $b1, $b3;
        int $i4;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 != 0 goto label01;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d1);

        if $z0 == 0 goto label02;

     label01:
        return #NaN;

     label02:
        $b1 = $d0 cmpl $d1;

        if $b1 != 0 goto label03;

        return $d1;

     label03:
        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d0);

        if $z0 == 0 goto label05;

        $b1 = $d0 cmpg 0.0;

        if $b1 >= 0 goto label04;

        return -1.7976931348623157E308;

     label04:
        return 1.7976931348623157E308;

     label05:
        $b1 = $d0 cmpl 0.0;

        if $b1 != 0 goto label07;

        $b1 = $d1 cmpg 0.0;

        if $b1 >= 0 goto label06;

        return -4.9E-324;

     label06:
        return 4.9E-324;

     label07:
        $l2 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>($d0);

        l0 = $l2 & -9223372036854775808L;

        $b1 = $d1 cmpg $d0;

        if $b1 >= 0 goto label10;

        $b1 = 1;

     label08:
        $b3 = l0 cmp 0L;

        if $b3 != 0 goto label11;

        $b3 = 1;

     label09:
        $i4 = $b3 ^ $b1;

        if $i4 == 0 goto label12;

        $l2 = 9223372036854775807L & $l2;

        $l2 = $l2 + 1L;

        l0 = $l2 | l0;

        $d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>(l0);

        return $d0;

     label10:
        $b1 = 0;

        goto label08;

     label11:
        $b3 = 0;

        goto label09;

     label12:
        $l2 = 9223372036854775807L & $l2;

        $l2 = $l2 - 1L;

        l0 = $l2 | l0;

        $d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>(l0);

        return $d0;
    }
    public static float nextAfter(float, double)
    {
        float $f0;
        double $d0, $d1;
        int i0, $i3, $i4;
        byte $b1, $b2;
        boolean $z0;

        $f0 := @parameter0: float;

        $d0 := @parameter1: double;

        $b1 = 1;

        $d1 = (double) $f0;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d1);

        if $z0 != 0 goto label01;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 == 0 goto label02;

     label01:
        return #NaNF;

     label02:
        $d1 = (double) $f0;

        $b2 = $d1 cmpl $d0;

        if $b2 != 0 goto label03;

        $f0 = (float) $d0;

        return $f0;

     label03:
        $z0 = staticinvoke <java.lang.Float: boolean isInfinite(float)>($f0);

        if $z0 == 0 goto label05;

        $b1 = $f0 cmpg 0.0F;

        if $b1 >= 0 goto label04;

        return -3.4028235E38F;

     label04:
        return 3.4028235E38F;

     label05:
        $b2 = $f0 cmpl 0.0F;

        if $b2 != 0 goto label07;

        $b1 = $d0 cmpg 0.0;

        if $b1 >= 0 goto label06;

        return -1.4E-45F;

     label06:
        return 1.4E-45F;

     label07:
        $i3 = staticinvoke <java.lang.Float: int floatToIntBits(float)>($f0);

        i0 = $i3 & -2147483648;

        $d1 = (double) $f0;

        $b2 = $d0 cmpg $d1;

        if $b2 >= 0 goto label10;

        $b2 = 1;

     label08:
        if i0 != 0 goto label11;

     label09:
        $i4 = $b1 ^ $b2;

        if $i4 == 0 goto label12;

        $i3 = $i3 & 2147483647;

        $i3 = $i3 + 1;

        i0 = $i3 | i0;

        $f0 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>(i0);

        return $f0;

     label10:
        $b2 = 0;

        goto label08;

     label11:
        $b1 = 0;

        goto label09;

     label12:
        $i3 = $i3 & 2147483647;

        $i3 = $i3 + -1;

        i0 = $i3 | i0;

        $f0 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>(i0);

        return $f0;
    }
    public static double nextDown(double)
    {
        double $d0;

        $d0 := @parameter0: double;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double nextAfter(double,double)>($d0, #-Infinity);

        return $d0;
    }
    public static float nextDown(float)
    {
        float $f0;

        $f0 := @parameter0: float;

        $f0 = staticinvoke <org.apache.commons.math3.util.FastMath: float nextAfter(float,double)>($f0, #-Infinity);

        return $f0;
    }
    public static double nextUp(double)
    {
        double $d0;

        $d0 := @parameter0: double;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double nextAfter(double,double)>($d0, #Infinity);

        return $d0;
    }
    public static float nextUp(float)
    {
        float $f0;

        $f0 := @parameter0: float;

        $f0 = staticinvoke <org.apache.commons.math3.util.FastMath: float nextAfter(float,double)>($f0, #Infinity);

        return $f0;
    }
    private static double polyCosine(double)
    {
        double $d0, $d1;

        $d0 := @parameter0: double;

        $d0 = $d0 * $d0;

        $d1 = 2.479773539153719E-5 * $d0;

        $d1 = $d1 + -0.0013888888689039883;

        $d1 = $d1 * $d0;

        $d1 = $d1 + 0.041666666666621166;

        $d1 = $d1 * $d0;

        $d1 = $d1 + -0.49999999999999994;

        $d0 = $d1 * $d0;

        return $d0;
    }
    private static double polySine(double)
    {
        double $d0, d1, $d2;

        $d0 := @parameter0: double;

        d1 = $d0 * $d0;

        $d2 = 2.7553817452272217E-6 * d1;

        $d2 = $d2 + -1.9841269659586505E-4;

        $d2 = $d2 * d1;

        $d2 = $d2 + 0.008333333333329196;

        $d2 = $d2 * d1;

        $d2 = $d2 + -0.16666666666666666;

        d1 = $d2 * d1;

        $d0 = d1 * $d0;

        return $d0;
    }
    public static double pow(double, double)
    {
        double $d0, $d1, d2, d3, d4, $d5;
        long l0, l1, l2;
        byte $b3, $b6;
        int $i4, $i5, $i7;
        double[] $r0;
        boolean $z0;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $b3 = $d1 cmpl 0.0;

        if $b3 != 0 goto label01;

        return 1.0;

     label01:
        l1 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>($d1);

        l2 = 9218868437227405312L & l1;

        l2 = l2 >> 52;

        $i4 = (int) l2;

        l2 = l1 & 4503599627370495L;

        l1 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>($d0);

        l0 = 9218868437227405312L & l1;

        l0 = l0 >> 52;

        $i5 = (int) l0;

        l1 = l1 & 4503599627370495L;

        if $i4 <= 1085 goto label12;

        if $i4 != 2047 goto label02;

        $b3 = l2 cmp 0L;

        if $b3 != 0 goto label03;

     label02:
        if $i5 != 2047 goto label04;

        $b3 = l1 cmp 0L;

        if $b3 == 0 goto label04;

     label03:
        return #NaN;

     label04:
        if $i5 != 1023 goto label06;

        $b3 = l1 cmp 0L;

        if $b3 != 0 goto label06;

        if $i4 != 2047 goto label05;

        return #NaN;

     label05:
        return 1.0;

     label06:
        $b3 = $d1 cmpl 0.0;

        if $b3 <= 0 goto label09;

        $b3 = 1;

     label07:
        if $i5 >= 1023 goto label10;

        $b6 = 1;

     label08:
        $i4 = $b6 ^ $b3;

        if $i4 == 0 goto label11;

        return #Infinity;

     label09:
        $b3 = 0;

        goto label07;

     label10:
        $b6 = 0;

        goto label08;

     label11:
        return 0.0;

     label12:
        if $i4 < 1023 goto label16;

        l2 = 4503599627370496L | l2;

        if $i4 >= 1075 goto label14;

        $i7 = 1075 - $i4;

        l0 = -1L << $i7;

        l0 = l2 & l0;

        $b3 = l0 cmp l2;

        if $b3 != 0 goto label16;

        $i4 = 1075 - $i4;

        l1 = l2 >> $i4;

        $b3 = $d1 cmpg 0.0;

        if $b3 >= 0 goto label13;

        l1 = neg l1;

     label13:
        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,long)>($d0, l1);

        return $d0;

     label14:
        $i4 = $i4 + -1075;

        l1 = l2 << $i4;

        $b3 = $d1 cmpg 0.0;

        if $b3 >= 0 goto label15;

        l1 = neg l1;

     label15:
        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,long)>($d0, l1);

        return $d0;

     label16:
        $b3 = $d0 cmpl 0.0;

        if $b3 != 0 goto label18;

        $b3 = $d1 cmpg 0.0;

        if $b3 >= 0 goto label17;

        return #Infinity;

     label17:
        return 0.0;

     label18:
        if $i5 != 2047 goto label21;

        $b3 = l1 cmp 0L;

        if $b3 != 0 goto label20;

        $b3 = $d1 cmpg 0.0;

        if $b3 >= 0 goto label19;

        return 0.0;

     label19:
        return #Infinity;

     label20:
        return #NaN;

     label21:
        $b3 = $d0 cmpg 0.0;

        if $b3 >= 0 goto label22;

        return #NaN;

     label22:
        d3 = $d1 * 1.073741824E9;

        d2 = $d1 + d3;

        d3 = d2 - d3;

        $d1 = $d1 - d3;

        $r0 = newarray (double)[2];

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double,double[])>($d0, $r0);

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d0);

        if $z0 == 0 goto label23;

        return $d0;

     label23:
        d4 = $r0[0];

        d2 = $r0[1];

        $d0 = d4 * 1.073741824E9;

        $d5 = d4 + $d0;

        $d0 = $d5 - $d0;

        d4 = d4 - $d0;

        d4 = d2 + d4;

        d2 = $d0 * d3;

        $d0 = $d0 * $d1;

        d3 = d4 * d3;

        $d0 = $d0 + d3;

        $d1 = d4 * $d1;

        $d1 = $d0 + $d1;

        $d0 = d2 + $d1;

        d3 = $d0 - d2;

        $d1 = d3 - $d1;

        $d1 = neg $d1;

        d3 = 0.008333333333333333 * $d1;

        d3 = d3 + 0.041666666666666664;

        d3 = d3 * $d1;

        d3 = d3 + 0.16666666666666666;

        d3 = d3 * $d1;

        d3 = d3 + 0.5;

        d3 = d3 * $d1;

        d3 = d3 + 1.0;

        $d1 = d3 * $d1;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double,double,double[])>($d0, $d1, null);

        return $d0;
    }
    public static double pow(double, int)
    {
        double $d0;
        int $i0;
        long $l1;

        $d0 := @parameter0: double;

        $i0 := @parameter1: int;

        $l1 = (long) $i0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,long)>($d0, $l1);

        return $d0;
    }
    public static double pow(double, long)
    {
        double $d0;
        long $l0;
        byte $b1;
        org.apache.commons.math3.util.FastMath$Split $r0;

        $d0 := @parameter0: double;

        $l0 := @parameter1: long;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        return 1.0;

     label1:
        $b1 = $l0 cmp 0L;

        if $b1 <= 0 goto label2;

        $r0 = new org.apache.commons.math3.util.FastMath$Split;

        specialinvoke $r0.<org.apache.commons.math3.util.FastMath$Split: void <init>(double)>($d0);

        $r0 = staticinvoke <org.apache.commons.math3.util.FastMath$Split: org.apache.commons.math3.util.FastMath$Split access$500(org.apache.commons.math3.util.FastMath$Split,long)>($r0, $l0);

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath$Split: double access$600(org.apache.commons.math3.util.FastMath$Split)>($r0);

        return $d0;

     label2:
        $r0 = new org.apache.commons.math3.util.FastMath$Split;

        specialinvoke $r0.<org.apache.commons.math3.util.FastMath$Split: void <init>(double)>($d0);

        $r0 = virtualinvoke $r0.<org.apache.commons.math3.util.FastMath$Split: org.apache.commons.math3.util.FastMath$Split reciprocal()>();

        $l0 = neg $l0;

        $r0 = staticinvoke <org.apache.commons.math3.util.FastMath$Split: org.apache.commons.math3.util.FastMath$Split access$500(org.apache.commons.math3.util.FastMath$Split,long)>($r0, $l0);

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath$Split: double access$600(org.apache.commons.math3.util.FastMath$Split)>($r0);

        return $d0;
    }
    public static double random()
    {
        double $d0;

        $d0 = staticinvoke <java.lang.Math: double random()>();

        return $d0;
    }
    private static void reducePayneHanek(double, double[])
    {
        double $d0, d1, d2;
        double[] $r0;
        int i0, i1, $i5;
        long $l2, $l3, l4, $l6, l7, l8, l9, l10, l11, $l12;
        long[] $r1;
        byte $b13;
        boolean z0, z1, z2;

        $d0 := @parameter0: double;

        $r0 := @parameter1: double[];

        $l2 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>($d0);

        $l3 = $l2 >> 52;

        $l3 = $l3 & 2047L;

        i0 = (int) $l3;

        i0 = i0 + -1023;

        $l2 = $l2 & 4503599627370495L;

        $l2 = $l2 | 4503599627370496L;

        i1 = i0 + 1;

        l4 = $l2 << 11;

        i0 = i1 >> 6;

        $i5 = i0 << 6;

        i1 = i1 - $i5;

        if i1 == 0 goto label53;

        if i0 != 0 goto label52;

        $l2 = 0L;

     label01:
        $r1 = <org.apache.commons.math3.util.FastMath: long[] RECIP_2PI>;

        $l3 = $r1[i0];

        $i5 = 64 - i1;

        $l3 = $l3 >>> $i5;

        $l2 = $l2 | $l3;

        $r1 = <org.apache.commons.math3.util.FastMath: long[] RECIP_2PI>;

        $l3 = $r1[i0];

        $l3 = $l3 << i1;

        $r1 = <org.apache.commons.math3.util.FastMath: long[] RECIP_2PI>;

        $i5 = i0 + 1;

        $l6 = $r1[$i5];

        $i5 = 64 - i1;

        $l6 = $l6 >>> $i5;

        l7 = $l3 | $l6;

        $r1 = <org.apache.commons.math3.util.FastMath: long[] RECIP_2PI>;

        $i5 = i0 + 1;

        $l3 = $r1[$i5];

        $l3 = $l3 << i1;

        $r1 = <org.apache.commons.math3.util.FastMath: long[] RECIP_2PI>;

        i0 = i0 + 2;

        $l6 = $r1[i0];

        i0 = 64 - i1;

        $l6 = $l6 >>> i0;

        $l6 = $l3 | $l6;

     label02:
        $l3 = l4 >>> 32;

        l4 = l4 & 4294967295L;

        l8 = l7 >>> 32;

        l9 = l7 & 4294967295L;

        l10 = $l3 * l8;

        l11 = l4 * l9;

        l7 = l4 * l8;

        l9 = $l3 * l9;

        l8 = l9 << 32;

        l8 = l11 + l8;

        $l12 = l9 >>> 32;

        l10 = l10 + $l12;

        l11 = -9223372036854775808L & l11;

        $b13 = l11 cmp 0L;

        if $b13 == 0 goto label56;

        z0 = 1;

     label03:
        l11 = 2147483648L & l9;

        $b13 = l11 cmp 0L;

        if $b13 == 0 goto label57;

        z1 = 1;

     label04:
        l11 = -9223372036854775808L & l8;

        $b13 = l11 cmp 0L;

        if $b13 == 0 goto label58;

        z2 = 1;

     label05:
        if z0 == 0 goto label06;

        if z1 != 0 goto label08;

     label06:
        if z0 != 0 goto label07;

        if z1 == 0 goto label09;

     label07:
        if z2 != 0 goto label09;

     label08:
        l10 = l10 + 1L;

     label09:
        l11 = -9223372036854775808L & l8;

        $b13 = l11 cmp 0L;

        if $b13 == 0 goto label59;

        z0 = 1;

     label10:
        l11 = 2147483648L & l7;

        $b13 = l11 cmp 0L;

        if $b13 == 0 goto label60;

        z1 = 1;

     label11:
        l11 = l7 << 32;

        l8 = l8 + l11;

        l7 = l7 >>> 32;

        l7 = l10 + l7;

        l10 = -9223372036854775808L & l8;

        $b13 = l10 cmp 0L;

        if $b13 == 0 goto label61;

        z2 = 1;

     label12:
        if z0 == 0 goto label13;

        if z1 != 0 goto label15;

     label13:
        if z0 != 0 goto label14;

        if z1 == 0 goto label16;

     label14:
        if z2 != 0 goto label16;

     label15:
        l7 = l7 + 1L;

     label16:
        l10 = $l6 >>> 32;

        l11 = $l6 & 4294967295L;

        $l6 = $l3 * l10;

        l10 = l4 * l10;

        l11 = $l3 * l11;

        l10 = l10 + l11;

        l10 = l10 >>> 32;

        $l6 = $l6 + l10;

        l10 = -9223372036854775808L & l8;

        $b13 = l10 cmp 0L;

        if $b13 == 0 goto label62;

        z0 = 1;

     label17:
        l10 = -9223372036854775808L & $l6;

        $b13 = l10 cmp 0L;

        if $b13 == 0 goto label63;

        z1 = 1;

     label18:
        $l6 = l8 + $l6;

        l8 = -9223372036854775808L & $l6;

        $b13 = l8 cmp 0L;

        if $b13 == 0 goto label64;

        z2 = 1;

     label19:
        if z0 == 0 goto label20;

        if z1 != 0 goto label22;

     label20:
        if z0 != 0 goto label21;

        if z1 == 0 goto label23;

     label21:
        if z2 != 0 goto label23;

     label22:
        l7 = l7 + 1L;

     label23:
        l8 = $l2 >>> 32;

        l10 = $l2 & 4294967295L;

        $l2 = l4 * l10;

        l4 = l4 * l8;

        $l3 = $l3 * l10;

        $l3 = l4 + $l3;

        $l3 = $l3 << 32;

        $l2 = $l3 + $l2;

        $l2 = l7 + $l2;

        $l3 = $l2 >>> 62;

        i0 = (int) $l3;

        $l2 = $l2 << 2;

        $l3 = $l6 >>> 62;

        $l3 = $l2 | $l3;

        $l2 = $l6 << 2;

        l4 = $l3 >>> 32;

        $l6 = $l3 & 4294967295L;

        $r1 = <org.apache.commons.math3.util.FastMath: long[] PI_O_4_BITS>;

        $l3 = $r1[0];

        $l3 = $l3 >>> 32;

        $r1 = <org.apache.commons.math3.util.FastMath: long[] PI_O_4_BITS>;

        l7 = $r1[0];

        l7 = l7 & 4294967295L;

        l8 = l4 * $l3;

        l10 = $l6 * l7;

        $l3 = $l6 * $l3;

        l11 = l4 * l7;

        l7 = l11 << 32;

        l7 = l10 + l7;

        l9 = l11 >>> 32;

        l8 = l8 + l9;

        l10 = -9223372036854775808L & l10;

        $b13 = l10 cmp 0L;

        if $b13 == 0 goto label65;

        z0 = 1;

     label24:
        l10 = 2147483648L & l11;

        $b13 = l10 cmp 0L;

        if $b13 == 0 goto label66;

        z1 = 1;

     label25:
        l10 = -9223372036854775808L & l7;

        $b13 = l10 cmp 0L;

        if $b13 == 0 goto label67;

        z2 = 1;

     label26:
        if z0 == 0 goto label27;

        if z1 != 0 goto label29;

     label27:
        if z0 != 0 goto label28;

        if z1 == 0 goto label30;

     label28:
        if z2 != 0 goto label30;

     label29:
        l8 = l8 + 1L;

     label30:
        l10 = -9223372036854775808L & l7;

        $b13 = l10 cmp 0L;

        if $b13 == 0 goto label68;

        z0 = 1;

     label31:
        l10 = 2147483648L & $l3;

        $b13 = l10 cmp 0L;

        if $b13 == 0 goto label69;

        z1 = 1;

     label32:
        l10 = $l3 << 32;

        l7 = l7 + l10;

        $l3 = $l3 >>> 32;

        $l3 = l8 + $l3;

        l8 = -9223372036854775808L & l7;

        $b13 = l8 cmp 0L;

        if $b13 == 0 goto label70;

        z2 = 1;

     label33:
        if z0 == 0 goto label34;

        if z1 != 0 goto label36;

     label34:
        if z0 != 0 goto label35;

        if z1 == 0 goto label37;

     label35:
        if z2 != 0 goto label37;

     label36:
        $l3 = $l3 + 1L;

     label37:
        $r1 = <org.apache.commons.math3.util.FastMath: long[] PI_O_4_BITS>;

        l8 = $r1[1];

        l10 = l8 >>> 32;

        $r1 = <org.apache.commons.math3.util.FastMath: long[] PI_O_4_BITS>;

        l8 = $r1[1];

        l11 = l8 & 4294967295L;

        l8 = l4 * l10;

        $l6 = $l6 * l10;

        l4 = l4 * l11;

        l4 = $l6 + l4;

        l4 = l4 >>> 32;

        l4 = l8 + l4;

        $l6 = -9223372036854775808L & l7;

        $b13 = $l6 cmp 0L;

        if $b13 == 0 goto label71;

        z0 = 1;

     label38:
        $l6 = -9223372036854775808L & l4;

        $b13 = $l6 cmp 0L;

        if $b13 == 0 goto label72;

        z1 = 1;

     label39:
        l4 = l7 + l4;

        $l6 = -9223372036854775808L & l4;

        $b13 = $l6 cmp 0L;

        if $b13 == 0 goto label73;

        z2 = 1;

     label40:
        if z0 == 0 goto label41;

        if z1 != 0 goto label43;

     label41:
        if z0 != 0 goto label42;

        if z1 == 0 goto label44;

     label42:
        if z2 != 0 goto label44;

     label43:
        $l3 = $l3 + 1L;

     label44:
        $l6 = $l2 >>> 32;

        l7 = $l2 & 4294967295L;

        $r1 = <org.apache.commons.math3.util.FastMath: long[] PI_O_4_BITS>;

        $l2 = $r1[0];

        l8 = $l2 >>> 32;

        $r1 = <org.apache.commons.math3.util.FastMath: long[] PI_O_4_BITS>;

        $l2 = $r1[0];

        l10 = $l2 & 4294967295L;

        $l2 = $l6 * l8;

        l7 = l7 * l8;

        $l6 = $l6 * l10;

        $l6 = l7 + $l6;

        $l6 = $l6 >>> 32;

        $l2 = $l2 + $l6;

        $l6 = -9223372036854775808L & l4;

        $b13 = $l6 cmp 0L;

        if $b13 == 0 goto label74;

        z0 = 1;

     label45:
        $l6 = -9223372036854775808L & $l2;

        $b13 = $l6 cmp 0L;

        if $b13 == 0 goto label75;

        z1 = 1;

     label46:
        $l2 = l4 + $l2;

        l4 = -9223372036854775808L & $l2;

        $b13 = l4 cmp 0L;

        if $b13 == 0 goto label76;

        z2 = 1;

     label47:
        if z0 == 0 goto label48;

        if z1 != 0 goto label50;

     label48:
        if z0 != 0 goto label49;

        if z1 == 0 goto label51;

     label49:
        if z2 != 0 goto label51;

     label50:
        $l3 = $l3 + 1L;

     label51:
        l4 = $l3 >>> 12;

        $d0 = (double) l4;

        d1 = $d0 / 4.503599627370496E15;

        $l3 = 4095L & $l3;

        $l3 = $l3 << 40;

        $l2 = $l2 >>> 24;

        $l2 = $l3 + $l2;

        $d0 = (double) $l2;

        $d0 = $d0 / 4.503599627370496E15;

        d2 = $d0 / 4.503599627370496E15;

        $d0 = d1 + d2;

        d1 = $d0 - d1;

        d1 = d1 - d2;

        d1 = neg d1;

        d2 = (double) i0;

        $r0[0] = d2;

        $d0 = 2.0 * $d0;

        $r0[1] = $d0;

        $d0 = 2.0 * d1;

        $r0[2] = $d0;

        return;

     label52:
        $r1 = <org.apache.commons.math3.util.FastMath: long[] RECIP_2PI>;

        $i5 = i0 + -1;

        $l2 = $r1[$i5];

        $l2 = $l2 << i1;

        goto label01;

     label53:
        if i0 != 0 goto label55;

        $l2 = 0L;

     label54:
        $r1 = <org.apache.commons.math3.util.FastMath: long[] RECIP_2PI>;

        l7 = $r1[i0];

        $r1 = <org.apache.commons.math3.util.FastMath: long[] RECIP_2PI>;

        i0 = i0 + 1;

        $l6 = $r1[i0];

        goto label02;

     label55:
        $r1 = <org.apache.commons.math3.util.FastMath: long[] RECIP_2PI>;

        i1 = i0 + -1;

        $l2 = $r1[i1];

        goto label54;

     label56:
        z0 = 0;

        goto label03;

     label57:
        z1 = 0;

        goto label04;

     label58:
        z2 = 0;

        goto label05;

     label59:
        z0 = 0;

        goto label10;

     label60:
        z1 = 0;

        goto label11;

     label61:
        z2 = 0;

        goto label12;

     label62:
        z0 = 0;

        goto label17;

     label63:
        z1 = 0;

        goto label18;

     label64:
        z2 = 0;

        goto label19;

     label65:
        z0 = 0;

        goto label24;

     label66:
        z1 = 0;

        goto label25;

     label67:
        z2 = 0;

        goto label26;

     label68:
        z0 = 0;

        goto label31;

     label69:
        z1 = 0;

        goto label32;

     label70:
        z2 = 0;

        goto label33;

     label71:
        z0 = 0;

        goto label38;

     label72:
        z1 = 0;

        goto label39;

     label73:
        z2 = 0;

        goto label40;

     label74:
        z0 = 0;

        goto label45;

     label75:
        z1 = 0;

        goto label46;

     label76:
        z2 = 0;

        goto label47;
    }
    public static double rint(double)
    {
        double $d0, $d1;
        long l0;
        byte $b1;

        $d0 := @parameter0: double;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double floor(double)>($d0);

        $d0 = $d0 - $d1;

        $b1 = $d0 cmpl 0.5;

        if $b1 <= 0 goto label2;

        $b1 = $d1 cmpl -1.0;

        if $b1 != 0 goto label1;

        return -0.0;

     label1:
        $d0 = $d1 + 1.0;

        return $d0;

     label2:
        $b1 = $d0 cmpg 0.5;

        if $b1 < 0 goto label3;

        l0 = (long) $d1;

        l0 = 1L & l0;

        $b1 = l0 cmp 0L;

        if $b1 == 0 goto label3;

        $d0 = $d1 + 1.0;

        return $d0;

     label3:
        return $d1;
    }
    public static int round(float)
    {
        float $f0;
        double $d0;
        int $i0;

        $f0 := @parameter0: float;

        $f0 = 0.5F + $f0;

        $d0 = (double) $f0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double floor(double)>($d0);

        $i0 = (int) $d0;

        return $i0;
    }
    public static long round(double)
    {
        double $d0;
        long $l0;

        $d0 := @parameter0: double;

        $d0 = 0.5 + $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double floor(double)>($d0);

        $l0 = (long) $d0;

        return $l0;
    }
    public static double scalb(double, int)
    {
        double $d0, $d1;
        int $i0, i1, $i6;
        long l2, l3, $l5;
        boolean $z0;
        byte $b4;

        $d0 := @parameter0: double;

        $i0 := @parameter1: int;

        if $i0 <= -1023 goto label01;

        if $i0 >= 1024 goto label01;

        $i0 = $i0 + 1023;

        l3 = (long) $i0;

        l3 = l3 << 52;

        $d1 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>(l3);

        $d0 = $d1 * $d0;

        return $d0;

     label01:
        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 != 0 goto label02;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d0);

        if $z0 != 0 goto label02;

        $b4 = $d0 cmpl 0.0;

        if $b4 != 0 goto label03;

     label02:
        return $d0;

     label03:
        if $i0 >= -2098 goto label05;

        $b4 = $d0 cmpl 0.0;

        if $b4 <= 0 goto label04;

        return 0.0;

     label04:
        return -0.0;

     label05:
        if $i0 <= 2097 goto label07;

        $b4 = $d0 cmpl 0.0;

        if $b4 <= 0 goto label06;

        return #Infinity;

     label06:
        return #-Infinity;

     label07:
        l2 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>($d0);

        l3 = l2 & -9223372036854775808L;

        $l5 = l2 >>> 52;

        $i6 = (int) $l5;

        i1 = $i6 & 2047;

        l2 = l2 & 4503599627370495L;

        $i6 = i1 + $i0;

        if $i0 >= 0 goto label12;

        if $i6 <= 0 goto label08;

        $l5 = (long) $i6;

        $l5 = $l5 << 52;

        l3 = $l5 | l3;

        l3 = l3 | l2;

        $d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>(l3);

        return $d0;

     label08:
        if $i6 <= -53 goto label10;

        $l5 = l2 | 4503599627370496L;

        $i0 = neg $i6;

        l2 = 1L << $i0;

        l2 = $l5 & l2;

        $i0 = 1 - $i6;

        $l5 = $l5 >>> $i0;

        $b4 = l2 cmp 0L;

        if $b4 == 0 goto label09;

        $l5 = $l5 + 1L;

     label09:
        l3 = l3 | $l5;

        $d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>(l3);

        return $d0;

     label10:
        $b4 = l3 cmp 0L;

        if $b4 != 0 goto label11;

        return 0.0;

     label11:
        return -0.0;

     label12:
        if i1 != 0 goto label17;

     label13:
        $l5 = l2 >>> 52;

        $b4 = $l5 cmp 1L;

        if $b4 == 0 goto label14;

        l2 = l2 << 1;

        $i6 = $i6 + -1;

        goto label13;

     label14:
        $i0 = $i6 + 1;

        l2 = l2 & 4503599627370495L;

        if $i0 >= 2047 goto label15;

        $l5 = (long) $i0;

        $l5 = $l5 << 52;

        l3 = $l5 | l3;

        l3 = l3 | l2;

        $d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>(l3);

        return $d0;

     label15:
        $b4 = l3 cmp 0L;

        if $b4 != 0 goto label16;

        return #Infinity;

     label16:
        return #-Infinity;

     label17:
        if $i6 >= 2047 goto label18;

        $l5 = (long) $i6;

        $l5 = $l5 << 52;

        l3 = $l5 | l3;

        l3 = l3 | l2;

        $d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>(l3);

        return $d0;

     label18:
        $b4 = l3 cmp 0L;

        if $b4 != 0 goto label19;

        return #Infinity;

     label19:
        return #-Infinity;
    }
    public static float scalb(float, int)
    {
        float $f0, $f1;
        int $i0, i1, i2, i3, $i5;
        boolean $z0;
        byte $b4;

        $f0 := @parameter0: float;

        $i0 := @parameter1: int;

        $f1 = #InfinityF;

        if $i0 <= -127 goto label01;

        if $i0 >= 128 goto label01;

        $i0 = $i0 + 127;

        $i0 = $i0 << 23;

        $f1 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>($i0);

        $f0 = $f1 * $f0;

        return $f0;

     label01:
        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>($f0);

        if $z0 != 0 goto label02;

        $z0 = staticinvoke <java.lang.Float: boolean isInfinite(float)>($f0);

        if $z0 != 0 goto label02;

        $b4 = $f0 cmpl 0.0F;

        if $b4 != 0 goto label03;

     label02:
        return $f0;

     label03:
        if $i0 >= -277 goto label04;

        $b4 = $f0 cmpl 0.0F;

        if $b4 > 0 goto label20;

        return -0.0F;

     label04:
        if $i0 <= 276 goto label06;

        $b4 = $f0 cmpl 0.0F;

        if $b4 <= 0 goto label05;

        return #InfinityF;

     label05:
        return #-InfinityF;

     label06:
        i2 = staticinvoke <java.lang.Float: int floatToIntBits(float)>($f0);

        i3 = i2 & -2147483648;

        $i5 = i2 >>> 23;

        i1 = $i5 & 255;

        i2 = i2 & 8388607;

        $i5 = i1 + $i0;

        if $i0 >= 0 goto label10;

        if $i5 <= 0 goto label07;

        $i0 = $i5 << 23;

        $i0 = $i0 | i3;

        $i0 = $i0 | i2;

        $f0 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>($i0);

        return $f0;

     label07:
        if $i5 <= -24 goto label09;

        $i0 = i2 | 8388608;

        i2 = neg $i5;

        i2 = 1 << i2;

        i2 = $i0 & i2;

        $i5 = 1 - $i5;

        $i0 = $i0 >>> $i5;

        if i2 == 0 goto label08;

        $i0 = $i0 + 1;

     label08:
        $i0 = i3 | $i0;

        $f0 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>($i0);

        return $f0;

     label09:
        if i3 == 0 goto label20;

        return -0.0F;

     label10:
        if i1 != 0 goto label16;

     label11:
        $i0 = i2 >>> 23;

        if $i0 == 1 goto label12;

        i2 = i2 << 1;

        $i5 = $i5 + -1;

        goto label11;

     label12:
        $i5 = $i5 + 1;

        $i0 = i2 & 8388607;

        if $i5 >= 255 goto label13;

        i2 = $i5 << 23;

        i3 = i2 | i3;

        $i0 = i3 | $i0;

        $f0 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>($i0);

        return $f0;

     label13:
        if i3 != 0 goto label15;

     label14:
        return $f1;

     label15:
        $f1 = #-InfinityF;

        goto label14;

     label16:
        if $i5 >= 255 goto label17;

        $i0 = $i5 << 23;

        $i0 = $i0 | i3;

        $i0 = $i0 | i2;

        $f0 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>($i0);

        return $f0;

     label17:
        if i3 != 0 goto label19;

     label18:
        return $f1;

     label19:
        $f1 = #-InfinityF;

        goto label18;

     label20:
        return 0.0F;
    }
    public static double signum(double)
    {
        double d0;
        byte $b0;

        d0 := @parameter0: double;

        $b0 = d0 cmpg 0.0;

        if $b0 >= 0 goto label1;

        return -1.0;

     label1:
        $b0 = d0 cmpl 0.0;

        if $b0 <= 0 goto label2;

        return 1.0;

     label2:
        return d0;
    }
    public static float signum(float)
    {
        float f0;
        byte $b0;

        f0 := @parameter0: float;

        $b0 = f0 cmpg 0.0F;

        if $b0 >= 0 goto label1;

        return -1.0F;

     label1:
        $b0 = f0 cmpl 0.0F;

        if $b0 <= 0 goto label2;

        return 1.0F;

     label2:
        return f0;
    }
    public static double sin(double)
    {
        double $d0, d1, d2;
        org.apache.commons.math3.util.FastMath$CodyWaite r0;
        double[] r1;
        boolean z0;
        int i0;
        byte $b1;
        long $l2;

        $d0 := @parameter0: double;

        z0 = 0;

        i0 = 0;

        d1 = 0.0;

        d2 = $d0;

        $b1 = $d0 cmpg 0.0;

        if $b1 >= 0 goto label01;

        z0 = 1;

        d2 = neg $d0;

     label01:
        $b1 = d2 cmpl 0.0;

        if $b1 != 0 goto label03;

        $l2 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>($d0);

        $b1 = $l2 cmp 0L;

        if $b1 >= 0 goto label02;

        return -0.0;

     label02:
        return 0.0;

     label03:
        $b1 = d2 cmpl d2;

        if $b1 != 0 goto label04;

        $b1 = d2 cmpl #Infinity;

        if $b1 != 0 goto label05;

     label04:
        return #NaN;

     label05:
        $b1 = d2 cmpl 3294198.0;

        if $b1 <= 0 goto label09;

        r1 = newarray (double)[3];

        staticinvoke <org.apache.commons.math3.util.FastMath: void reducePayneHanek(double,double[])>(d2, r1);

        $d0 = r1[0];

        i0 = (int) $d0;

        i0 = i0 & 3;

        d2 = r1[1];

        d1 = r1[2];

     label06:
        if z0 == 0 goto label07;

        i0 = i0 ^ 2;

     label07:
        lookupswitch(i0)
        {
            case 0: goto label10;
            case 1: goto label11;
            case 2: goto label12;
            case 3: goto label13;
            default: goto label08;
        };

     label08:
        return #NaN;

     label09:
        $b1 = d2 cmpl 1.5707963267948966;

        if $b1 <= 0 goto label06;

        r0 = new org.apache.commons.math3.util.FastMath$CodyWaite;

        specialinvoke r0.<org.apache.commons.math3.util.FastMath$CodyWaite: void <init>(double)>(d2);

        i0 = virtualinvoke r0.<org.apache.commons.math3.util.FastMath$CodyWaite: int getK()>();

        i0 = i0 & 3;

        d2 = virtualinvoke r0.<org.apache.commons.math3.util.FastMath$CodyWaite: double getRemA()>();

        d1 = virtualinvoke r0.<org.apache.commons.math3.util.FastMath$CodyWaite: double getRemB()>();

        goto label06;

     label10:
        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sinQ(double,double)>(d2, d1);

        return $d0;

     label11:
        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double cosQ(double,double)>(d2, d1);

        return $d0;

     label12:
        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sinQ(double,double)>(d2, d1);

        $d0 = neg $d0;

        return $d0;

     label13:
        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double cosQ(double,double)>(d2, d1);

        $d0 = neg $d0;

        return $d0;
    }
    private static double sinQ(double, double)
    {
        double $d0, $d1, d2, d3, d4, d5, d6, $d7, $d8, $d9, d10, d11;
        int $i0;
        double[] $r0;
        byte $b1;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        d5 = 8.0 * $d0;

        d5 = d5 + 0.5;

        $i0 = (int) d5;

        $r0 = <org.apache.commons.math3.util.FastMath: double[] EIGHTHS>;

        d5 = $r0[$i0];

        d4 = $d0 - d5;

        $r0 = <org.apache.commons.math3.util.FastMath: double[] SINE_TABLE_A>;

        $d0 = $r0[$i0];

        $r0 = <org.apache.commons.math3.util.FastMath: double[] SINE_TABLE_B>;

        d5 = $r0[$i0];

        $r0 = <org.apache.commons.math3.util.FastMath: double[] COSINE_TABLE_A>;

        d2 = $r0[$i0];

        $r0 = <org.apache.commons.math3.util.FastMath: double[] COSINE_TABLE_B>;

        d3 = $r0[$i0];

        $d7 = staticinvoke <org.apache.commons.math3.util.FastMath: double polySine(double)>(d4);

        $d8 = staticinvoke <org.apache.commons.math3.util.FastMath: double polyCosine(double)>(d4);

        d6 = d4 * 1.073741824E9;

        $d9 = d4 + d6;

        d6 = $d9 - d6;

        d4 = d4 - d6;

        d4 = $d7 + d4;

        $d9 = 0.0 + $d0;

        $d7 = $d9 - 0.0;

        $d7 = $d7 - $d0;

        $d7 = neg $d7;

        d10 = 0.0 + $d7;

        d11 = d2 * d6;

        $d7 = $d9 + d11;

        $d9 = $d7 - $d9;

        $d9 = $d9 - d11;

        d11 = neg $d9;

        $d9 = $d7;

        d10 = d10 + d11;

        d11 = $d0 * $d8;

        d10 = d11 + d10;

        d11 = d2 * d4;

        d10 = d10 + d11;

        d10 = d10 + d5;

        d11 = d3 * d6;

        d10 = d10 + d11;

        d11 = d5 * $d8;

        d10 = d10 + d11;

        d11 = d3 * d4;

        d10 = d10 + d11;

        $b1 = $d1 cmpl 0.0;

        if $b1 == 0 goto label1;

        d2 = d2 + d3;

        $d8 = 1.0 + $d8;

        $d8 = d2 * $d8;

        $d0 = $d0 + d5;

        d5 = d6 + d4;

        $d0 = $d0 * d5;

        $d0 = $d8 - $d0;

        $d1 = $d0 * $d1;

        $d0 = $d7 + $d1;

        d5 = $d0 - $d7;

        $d1 = d5 - $d1;

        $d1 = neg $d1;

        $d9 = $d0;

        d10 = d10 + $d1;

     label1:
        $d0 = $d9 + d10;

        return $d0;
    }
    public static double sinh(double)
    {
        double d0, d1, d2, d3, d4, d5, d6, $d7, $d8;
        boolean z0;
        byte $b0;
        double[] r0;

        d6 := @parameter0: double;

        z0 = 0;

        $b0 = d6 cmpl d6;

        if $b0 == 0 goto label01;

        return d6;

     label01:
        $b0 = d6 cmpl 20.0;

        if $b0 <= 0 goto label03;

        $d7 = <org.apache.commons.math3.util.FastMath: double LOG_MAX_VALUE>;

        $b0 = d6 cmpl $d7;

        if $b0 < 0 goto label02;

        d6 = 0.5 * d6;

        d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>(d6);

        $d7 = 0.5 * d6;

        d6 = $d7 * d6;

        return d6;

     label02:
        d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>(d6);

        d6 = 0.5 * d6;

        return d6;

     label03:
        $b0 = d6 cmpg -20.0;

        if $b0 >= 0 goto label05;

        $d7 = <org.apache.commons.math3.util.FastMath: double LOG_MAX_VALUE>;

        $d7 = neg $d7;

        $b0 = d6 cmpg $d7;

        if $b0 > 0 goto label04;

        d6 = -0.5 * d6;

        d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>(d6);

        $d7 = -0.5 * d6;

        d6 = $d7 * d6;

        return d6;

     label04:
        d6 = neg d6;

        d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>(d6);

        d6 = -0.5 * d6;

        return d6;

     label05:
        $b0 = d6 cmpl 0.0;

        if $b0 == 0 goto label10;

        $b0 = d6 cmpg 0.0;

        if $b0 >= 0 goto label06;

        d6 = neg d6;

        z0 = 1;

     label06:
        $b0 = d6 cmpl 0.25;

        if $b0 <= 0 goto label09;

        r0 = newarray (double)[2];

        staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double,double,double[])>(d6, 0.0, r0);

        d6 = r0[0];

        $d7 = r0[1];

        d6 = d6 + $d7;

        $d7 = r0[0];

        $d7 = d6 - $d7;

        d2 = r0[1];

        $d7 = $d7 - d2;

        $d7 = neg $d7;

        d2 = d6 * 1.073741824E9;

        d3 = d6 + d2;

        d0 = d3 - d2;

        d4 = d6 - d0;

        d2 = 1.0 / d6;

        d3 = d2 * 1.073741824E9;

        d1 = d2 + d3;

        d3 = d1 - d3;

        d1 = d2 - d3;

        d5 = d0 * d3;

        d5 = 1.0 - d5;

        d0 = d0 * d1;

        d0 = d5 - d0;

        d5 = d4 * d3;

        d0 = d0 - d5;

        d4 = d4 * d1;

        d4 = d0 - d4;

        d4 = d4 * d2;

        d1 = d1 + d4;

        d4 = neg $d7;

        d4 = d4 * d2;

        d2 = d4 * d2;

        d2 = d1 + d2;

        d1 = neg d3;

        d2 = neg d2;

        d3 = d6 + d1;

        d6 = d3 - d6;

        d6 = d6 - d1;

        d6 = neg d6;

        $d7 = $d7 + d6;

        d6 = d3 + d2;

        d3 = d6 - d3;

        d2 = d3 - d2;

        d2 = neg d2;

        $d7 = $d7 + d2;

        d6 = d6 + $d7;

        d6 = d6 * 0.5;

     label07:
        if z0 == 0 goto label08;

        d6 = neg d6;

     label08:
        return d6;

     label09:
        r0 = newarray (double)[2];

        staticinvoke <org.apache.commons.math3.util.FastMath: double expm1(double,double[])>(d6, r0);

        d6 = r0[0];

        $d7 = r0[1];

        d6 = d6 + $d7;

        $d7 = r0[0];

        $d7 = d6 - $d7;

        d2 = r0[1];

        $d7 = $d7 - d2;

        $d7 = neg $d7;

        d0 = 1.0 + d6;

        d2 = 1.0 / d0;

        d3 = d0 - 1.0;

        d3 = d3 - d6;

        d3 = neg d3;

        d1 = d3 + $d7;

        d4 = d6 * d2;

        d3 = d4 * 1.073741824E9;

        d5 = d4 + d3;

        d3 = d5 - d3;

        d4 = d4 - d3;

        d5 = d0 * 1.073741824E9;

        $d8 = d0 + d5;

        d5 = $d8 - d5;

        d0 = d0 - d5;

        $d8 = d5 * d3;

        $d8 = d6 - $d8;

        d5 = d5 * d4;

        d5 = $d8 - d5;

        $d8 = d0 * d3;

        d5 = d5 - $d8;

        d0 = d0 * d4;

        d0 = d5 - d0;

        d0 = d0 * d2;

        d4 = d4 + d0;

        d0 = $d7 * d2;

        d4 = d4 + d0;

        d0 = neg d6;

        d1 = d0 * d1;

        d1 = d1 * d2;

        d2 = d1 * d2;

        d2 = d4 + d2;

        d1 = d6 + d3;

        d6 = d1 - d6;

        d6 = d6 - d3;

        d6 = neg d6;

        $d7 = $d7 + d6;

        d6 = d1 + d2;

        d3 = d6 - d1;

        d2 = d3 - d2;

        d2 = neg d2;

        $d7 = $d7 + d2;

        d6 = d6 + $d7;

        d6 = d6 * 0.5;

        goto label07;

     label10:
        return d6;
    }
    public static double sqrt(double)
    {
        double $d0;

        $d0 := @parameter0: double;

        $d0 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        return $d0;
    }
    public static int subtractExact(int, int)
    {
        int $i0, $i1, i2, $i3;
        org.apache.commons.math3.exception.util.LocalizedFormats $r0;
        org.apache.commons.math3.exception.MathArithmeticException $r1;
        java.lang.Object[] $r2;
        java.lang.Integer $r3;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        i2 = $i0 - $i1;

        $i3 = $i0 ^ $i1;

        if $i3 >= 0 goto label1;

        $i3 = i2 ^ $i1;

        if $i3 < 0 goto label1;

        $r1 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r0 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OVERFLOW_IN_SUBTRACTION>;

        $r2 = newarray (java.lang.Object)[2];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r2[0] = $r3;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r2[1] = $r3;

        specialinvoke $r1.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r0, $r2);

        throw $r1;

     label1:
        return i2;
    }
    public static long subtractExact(long, long)
    {
        long $l0, $l1, l2, $l3;
        org.apache.commons.math3.exception.util.LocalizedFormats $r0;
        byte $b4;
        org.apache.commons.math3.exception.MathArithmeticException $r1;
        java.lang.Object[] $r2;
        java.lang.Long $r3;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        l2 = $l0 - $l1;

        $l3 = $l0 ^ $l1;

        $b4 = $l3 cmp 0L;

        if $b4 >= 0 goto label1;

        $l3 = l2 ^ $l1;

        $b4 = $l3 cmp 0L;

        if $b4 < 0 goto label1;

        $r1 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r0 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OVERFLOW_IN_SUBTRACTION>;

        $r2 = newarray (java.lang.Object)[2];

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r2[0] = $r3;

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $r2[1] = $r3;

        specialinvoke $r1.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r0, $r2);

        throw $r1;

     label1:
        return l2;
    }
    public static double tan(double)
    {
        double $d0, d1, d2, $d3;
        org.apache.commons.math3.util.FastMath$CodyWaite r0;
        double[] r1;
        int i0, i1;
        byte $b2;
        long $l3;

        $d0 := @parameter0: double;

        i0 = 0;

        i1 = 0;

        d1 = $d0;

        $b2 = $d0 cmpg 0.0;

        if $b2 >= 0 goto label01;

        i0 = 1;

        d1 = neg $d0;

     label01:
        $b2 = d1 cmpl 0.0;

        if $b2 != 0 goto label03;

        $l3 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>($d0);

        $b2 = $l3 cmp 0L;

        if $b2 >= 0 goto label02;

        return -0.0;

     label02:
        return 0.0;

     label03:
        $b2 = d1 cmpl d1;

        if $b2 != 0 goto label04;

        $b2 = d1 cmpl #Infinity;

        if $b2 != 0 goto label05;

     label04:
        return #NaN;

     label05:
        d2 = 0.0;

        $b2 = d1 cmpl 3294198.0;

        if $b2 <= 0 goto label09;

        r1 = newarray (double)[3];

        staticinvoke <org.apache.commons.math3.util.FastMath: void reducePayneHanek(double,double[])>(d1, r1);

        $d0 = r1[0];

        i1 = (int) $d0;

        i1 = i1 & 3;

        d1 = r1[1];

        d2 = r1[2];

     label06:
        $b2 = d1 cmpl 1.5;

        if $b2 <= 0 goto label07;

        $d0 = 1.5707963267948966 - d1;

        $d3 = $d0 - 1.5707963267948966;

        d1 = $d3 + d1;

        d1 = neg d1;

        d2 = 6.123233995736766E-17 - d2;

        d2 = d1 + d2;

        d1 = $d0 + d2;

        $d0 = d1 - $d0;

        $d0 = $d0 - d2;

        d2 = neg $d0;

        i1 = i1 ^ 1;

        i0 = i0 ^ 1;

     label07:
        i1 = i1 & 1;

        if i1 != 0 goto label10;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double tanQ(double,double,boolean)>(d1, d2, 0);

     label08:
        if i0 == 0 goto label11;

        $d0 = neg $d0;

        return $d0;

     label09:
        $b2 = d1 cmpl 1.5707963267948966;

        if $b2 <= 0 goto label06;

        r0 = new org.apache.commons.math3.util.FastMath$CodyWaite;

        specialinvoke r0.<org.apache.commons.math3.util.FastMath$CodyWaite: void <init>(double)>(d1);

        i1 = virtualinvoke r0.<org.apache.commons.math3.util.FastMath$CodyWaite: int getK()>();

        i1 = i1 & 3;

        d1 = virtualinvoke r0.<org.apache.commons.math3.util.FastMath$CodyWaite: double getRemA()>();

        d2 = virtualinvoke r0.<org.apache.commons.math3.util.FastMath$CodyWaite: double getRemB()>();

        goto label06;

     label10:
        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double tanQ(double,double,boolean)>(d1, d2, 1);

        $d0 = neg $d0;

        goto label08;

     label11:
        return $d0;
    }
    private static double tanQ(double, double, boolean)
    {
        double $d0, $d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, $d13, d14;
        boolean $z0;
        int $i0;
        double[] $r0;
        byte $b1;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $z0 := @parameter2: boolean;

        d8 = 8.0 * $d0;

        d8 = d8 + 0.5;

        $i0 = (int) d8;

        $r0 = <org.apache.commons.math3.util.FastMath: double[] EIGHTHS>;

        d8 = $r0[$i0];

        d5 = $d0 - d8;

        $r0 = <org.apache.commons.math3.util.FastMath: double[] SINE_TABLE_A>;

        d6 = $r0[$i0];

        $r0 = <org.apache.commons.math3.util.FastMath: double[] SINE_TABLE_B>;

        d8 = $r0[$i0];

        $r0 = <org.apache.commons.math3.util.FastMath: double[] COSINE_TABLE_A>;

        d4 = $r0[$i0];

        $r0 = <org.apache.commons.math3.util.FastMath: double[] COSINE_TABLE_B>;

        d3 = $r0[$i0];

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double polySine(double)>(d5);

        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double polyCosine(double)>(d5);

        d9 = d5 * 1.073741824E9;

        d7 = d5 + d9;

        d9 = d7 - d9;

        d5 = d5 - d9;

        d7 = $d0 + d5;

        $d0 = 0.0 + d6;

        d5 = $d0 - 0.0;

        d5 = d5 - d6;

        d5 = neg d5;

        d10 = 0.0 + d5;

        d11 = d4 * d9;

        d5 = $d0 + d11;

        $d0 = d5 - $d0;

        $d0 = $d0 - d11;

        $d0 = neg $d0;

        $d0 = d10 + $d0;

        d10 = d6 * d2;

        d11 = d4 * d7;

        d10 = d10 + d11;

        $d0 = $d0 + d10;

        d10 = d3 * d9;

        d10 = d10 + d8;

        d11 = d8 * d2;

        d10 = d10 + d11;

        d11 = d3 * d7;

        d10 = d10 + d11;

        d10 = $d0 + d10;

        $d0 = d5 + d10;

        d5 = $d0 - d5;

        d5 = d5 - d10;

        d10 = neg d5;

        d5 = d10;

        d11 = d4 * 1.0;

        d12 = 0.0 + d11;

        $d13 = d12 - 0.0;

        d11 = $d13 - d11;

        d11 = neg d11;

        $d13 = 0.0 + d11;

        d11 = neg d6;

        d14 = d11 * d9;

        d11 = d12 + d14;

        d12 = d11 - d12;

        d12 = d12 - d14;

        d12 = neg d12;

        d12 = $d13 + d12;

        $d13 = 1.0 * d3;

        d4 = d4 * d2;

        d4 = $d13 + d4;

        d3 = d3 * d2;

        d3 = d4 + d3;

        d3 = d12 + d3;

        d9 = d8 * d9;

        d6 = d6 * d7;

        d6 = d9 + d6;

        d8 = d8 * d7;

        d8 = d6 + d8;

        d6 = d3 - d8;

        d8 = d11 + d6;

        d9 = d8 - d11;

        d6 = d9 - d6;

        d6 = neg d6;

        d9 = d6;

        if $z0 == 0 goto label1;

        d5 = d8;

        d8 = $d0;

        $d0 = d5;

        d9 = d10;

        d5 = d6;

     label1:
        d6 = $d0 / d8;

        d7 = d6 * 1.073741824E9;

        d3 = d6 + d7;

        d4 = d3 - d7;

        d7 = d6 - d4;

        d3 = d8 * 1.073741824E9;

        d2 = d8 + d3;

        d2 = d2 - d3;

        d3 = d8 - d2;

        d10 = d4 * d2;

        d10 = $d0 - d10;

        d4 = d4 * d3;

        d4 = d10 - d4;

        d2 = d7 * d2;

        d2 = d4 - d2;

        d7 = d7 * d3;

        d7 = d2 - d7;

        d7 = d7 / d8;

        d5 = d5 / d8;

        d5 = d7 + d5;

        $d0 = neg $d0;

        $d0 = $d0 * d9;

        $d0 = $d0 / d8;

        $d0 = $d0 / d8;

        $d0 = d5 + $d0;

        $b1 = $d1 cmpl 0.0;

        if $b1 == 0 goto label3;

        d8 = d6 * d6;

        d8 = d8 * $d1;

        $d1 = $d1 + d8;

        if $z0 == 0 goto label2;

        $d1 = neg $d1;

     label2:
        $d0 = $d0 + $d1;

     label3:
        $d0 = d6 + $d0;

        return $d0;
    }
    public static double tanh(double)
    {
        double d0, $d1, $d2, $d3, d4, $d5, d6, d7, $d8;
        boolean z0;
        byte $b0;
        double[] r0;

        d0 := @parameter0: double;

        z0 = 0;

        $b0 = d0 cmpl d0;

        if $b0 == 0 goto label1;

        return d0;

     label1:
        $b0 = d0 cmpl 20.0;

        if $b0 <= 0 goto label2;

        return 1.0;

     label2:
        $b0 = d0 cmpg -20.0;

        if $b0 >= 0 goto label3;

        return -1.0;

     label3:
        $b0 = d0 cmpl 0.0;

        if $b0 == 0 goto label8;

        $b0 = d0 cmpg 0.0;

        if $b0 >= 0 goto label4;

        d0 = neg d0;

        z0 = 1;

     label4:
        $b0 = d0 cmpl 0.5;

        if $b0 < 0 goto label7;

        r0 = newarray (double)[2];

        d0 = 2.0 * d0;

        staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double,double,double[])>(d0, 0.0, r0);

        d0 = r0[0];

        $d1 = r0[1];

        $d1 = d0 + $d1;

        d0 = r0[0];

        d0 = $d1 - d0;

        $d2 = r0[1];

        d0 = d0 - $d2;

        $d3 = neg d0;

        d4 = -1.0 + $d1;

        d0 = 1.0 + d4;

        d0 = d0 - $d1;

        $d2 = neg d0;

        d0 = d4 + $d3;

        d4 = d0 - d4;

        d4 = d4 - $d3;

        d4 = neg d4;

        $d2 = $d2 + d4;

        d4 = 1.0 + $d1;

        $d5 = d4 - 1.0;

        $d1 = $d5 - $d1;

        $d5 = neg $d1;

        $d1 = d4 + $d3;

        d4 = $d1 - d4;

        $d3 = d4 - $d3;

        $d3 = neg $d3;

        d4 = $d5 + $d3;

        $d3 = $d1 * 1.073741824E9;

        $d5 = $d1 + $d3;

        d6 = $d5 - $d3;

        $d5 = $d1 - d6;

        d7 = d0 / $d1;

        $d3 = d7 * 1.073741824E9;

        $d8 = d7 + $d3;

        $d3 = $d8 - $d3;

        d7 = d7 - $d3;

        $d8 = d6 * $d3;

        $d8 = d0 - $d8;

        d6 = d6 * d7;

        d6 = $d8 - d6;

        $d8 = $d5 * $d3;

        d6 = d6 - $d8;

        $d5 = $d5 * d7;

        $d5 = d6 - $d5;

        $d5 = $d5 / $d1;

        $d5 = d7 + $d5;

        $d2 = $d2 / $d1;

        $d2 = $d5 + $d2;

        d4 = neg d4;

        d0 = d4 * d0;

        d0 = d0 / $d1;

        d0 = d0 / $d1;

        d0 = $d2 + d0;

        d0 = $d3 + d0;

     label5:
        if z0 == 0 goto label6;

        d0 = neg d0;

     label6:
        return d0;

     label7:
        r0 = newarray (double)[2];

        d0 = 2.0 * d0;

        staticinvoke <org.apache.commons.math3.util.FastMath: double expm1(double,double[])>(d0, r0);

        d0 = r0[0];

        $d1 = r0[1];

        d0 = d0 + $d1;

        $d1 = r0[0];

        $d1 = d0 - $d1;

        $d2 = r0[1];

        $d1 = $d1 - $d2;

        $d2 = neg $d1;

        d4 = 2.0 + d0;

        $d1 = d4 - 2.0;

        $d1 = $d1 - d0;

        $d3 = neg $d1;

        $d1 = d4 + $d2;

        d4 = $d1 - d4;

        d4 = d4 - $d2;

        d4 = neg d4;

        d4 = $d3 + d4;

        $d3 = $d1 * 1.073741824E9;

        $d5 = $d1 + $d3;

        d6 = $d5 - $d3;

        $d5 = $d1 - d6;

        d7 = d0 / $d1;

        $d3 = d7 * 1.073741824E9;

        $d8 = d7 + $d3;

        $d3 = $d8 - $d3;

        d7 = d7 - $d3;

        $d8 = d6 * $d3;

        $d8 = d0 - $d8;

        d6 = d6 * d7;

        d6 = $d8 - d6;

        $d8 = $d5 * $d3;

        d6 = d6 - $d8;

        $d5 = $d5 * d7;

        $d5 = d6 - $d5;

        $d5 = $d5 / $d1;

        $d5 = d7 + $d5;

        $d2 = $d2 / $d1;

        $d2 = $d5 + $d2;

        d4 = neg d4;

        d0 = d4 * d0;

        d0 = d0 / $d1;

        d0 = d0 / $d1;

        d0 = $d2 + d0;

        d0 = $d3 + d0;

        goto label5;

     label8:
        return d0;
    }
    public static double toDegrees(double)
    {
        double d0, d1, $d2;
        boolean $z0;
        byte $b0;

        d1 := @parameter0: double;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d1);

        if $z0 != 0 goto label2;

        $b0 = d1 cmpl 0.0;

        if $b0 != 0 goto label1;

        return d1;

     label1:
        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double doubleHighPart(double)>(d1);

        d0 = d1 - $d2;

        d1 = 3.145894820876798E-6 * d0;

        d0 = 57.2957763671875 * d0;

        d1 = d1 + d0;

        d0 = 3.145894820876798E-6 * $d2;

        d1 = d1 + d0;

        $d2 = 57.2957763671875 * $d2;

        d1 = d1 + $d2;

     label2:
        return d1;
    }
    public static int toIntExact(long) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        long $l0;
        org.apache.commons.math3.exception.util.LocalizedFormats $r0;
        byte $b1;
        org.apache.commons.math3.exception.MathArithmeticException $r1;
        java.lang.Object[] $r2;
        int $i2;

        $l0 := @parameter0: long;

        $b1 = $l0 cmp -2147483648L;

        if $b1 < 0 goto label1;

        $b1 = $l0 cmp 2147483647L;

        if $b1 <= 0 goto label2;

     label1:
        $r1 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r0 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OVERFLOW>;

        $r2 = newarray (java.lang.Object)[0];

        specialinvoke $r1.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r0, $r2);

        throw $r1;

     label2:
        $i2 = (int) $l0;

        return $i2;
    }
    public static double toRadians(double)
    {
        double $d0, d1, $d2, $d3;
        boolean $z0;
        byte $b0;

        $d0 := @parameter0: double;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d0);

        if $z0 != 0 goto label1;

        $b0 = $d0 cmpl 0.0;

        if $b0 != 0 goto label2;

     label1:
        return $d0;

     label2:
        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double doubleHighPart(double)>($d0);

        d1 = $d0 - $d2;

        $d3 = 1.997844754509471E-9 * d1;

        d1 = 0.01745329052209854 * d1;

        $d3 = $d3 + d1;

        d1 = 1.997844754509471E-9 * $d2;

        $d3 = $d3 + d1;

        $d2 = 0.01745329052209854 * $d2;

        $d2 = $d3 + $d2;

        $b0 = $d2 cmpl 0.0;

        if $b0 != 0 goto label3;

        $d0 = $d2 * $d0;

        return $d0;

     label3:
        return $d2;
    }
    public static double ulp(double)
    {
        double $d0, $d1;
        boolean $z0;
        long $l0;

        $d0 := @parameter0: double;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d0);

        if $z0 == 0 goto label1;

        return #Infinity;

     label1:
        $l0 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>($d0);

        $l0 = $l0 ^ 1L;

        $d1 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l0);

        $d0 = $d0 - $d1;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        return $d0;
    }
    public static float ulp(float)
    {
        float $f0, $f1;
        boolean $z0;
        int $i0;

        $f0 := @parameter0: float;

        $z0 = staticinvoke <java.lang.Float: boolean isInfinite(float)>($f0);

        if $z0 == 0 goto label1;

        return #InfinityF;

     label1:
        $i0 = staticinvoke <java.lang.Float: int floatToIntBits(float)>($f0);

        $i0 = $i0 ^ 1;

        $f1 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>($i0);

        $f0 = $f0 - $f1;

        $f0 = staticinvoke <org.apache.commons.math3.util.FastMath: float abs(float)>($f0);

        return $f0;
    }
