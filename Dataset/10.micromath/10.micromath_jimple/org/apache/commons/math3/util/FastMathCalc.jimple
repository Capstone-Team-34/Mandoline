org.apache.commons.math3.util.FastMathCalc extends java.lang.Object
private static final double[] FACT
private static final long HEX_40000000
private static final double[][] LN_SPLIT_COEF
private static final java.lang.String TABLE_END_DECL
private static final java.lang.String TABLE_START_DECL
    static void <clinit>()
    {
        double[] $r0;
        double[][] $r1;

        $r0 = newarray (double)[20];

        $r0[0] = 1.0;

        $r0[1] = 1.0;

        $r0[2] = 2.0;

        $r0[3] = 6.0;

        $r0[4] = 24.0;

        $r0[5] = 120.0;

        $r0[6] = 720.0;

        $r0[7] = 5040.0;

        $r0[8] = 40320.0;

        $r0[9] = 362880.0;

        $r0[10] = 3628800.0;

        $r0[11] = 3.99168E7;

        $r0[12] = 4.790016E8;

        $r0[13] = 6.2270208E9;

        $r0[14] = 8.71782912E10;

        $r0[15] = 1.307674368E12;

        $r0[16] = 2.0922789888E13;

        $r0[17] = 3.55687428096E14;

        $r0[18] = 6.402373705728E15;

        $r0[19] = 1.21645100408832E17;

        <org.apache.commons.math3.util.FastMathCalc: double[] FACT> = $r0;

        $r1 = newarray (double[])[16];

        $r0 = newarray (double)[2];

        $r0[0] = 2.0;

        $r0[1] = 0.0;

        $r1[0] = $r0;

        $r0 = newarray (double)[2];

        $r0[0] = 0.6666666269302368;

        $r0[1] = 3.9736429850260626E-8;

        $r1[1] = $r0;

        $r0 = newarray (double)[2];

        $r0[0] = 0.3999999761581421;

        $r0[1] = 2.3841857910019882E-8;

        $r1[2] = $r0;

        $r0 = newarray (double)[2];

        $r0[0] = 0.2857142686843872;

        $r0[1] = 1.7029898543501842E-8;

        $r1[3] = $r0;

        $r0 = newarray (double)[2];

        $r0[0] = 0.2222222089767456;

        $r0[1] = 1.3245471311735498E-8;

        $r1[4] = $r0;

        $r0 = newarray (double)[2];

        $r0[0] = 0.1818181574344635;

        $r0[1] = 2.4384203044354907E-8;

        $r1[5] = $r0;

        $r0 = newarray (double)[2];

        $r0[0] = 0.1538461446762085;

        $r0[1] = 9.140260083262505E-9;

        $r1[6] = $r0;

        $r0 = newarray (double)[2];

        $r0[0] = 0.13333332538604736;

        $r0[1] = 9.220590270857665E-9;

        $r1[7] = $r0;

        $r0 = newarray (double)[2];

        $r0[0] = 0.11764700710773468;

        $r0[1] = 1.2393345855018391E-8;

        $r1[8] = $r0;

        $r0 = newarray (double)[2];

        $r0[0] = 0.10526403784751892;

        $r0[1] = 8.251545029714408E-9;

        $r1[9] = $r0;

        $r0 = newarray (double)[2];

        $r0[0] = 0.0952233225107193;

        $r0[1] = 1.2675934823758863E-8;

        $r1[10] = $r0;

        $r0 = newarray (double)[2];

        $r0[0] = 0.08713622391223907;

        $r0[1] = 1.1430250008909141E-8;

        $r1[11] = $r0;

        $r0 = newarray (double)[2];

        $r0[0] = 0.07842259109020233;

        $r0[1] = 2.404307984052299E-9;

        $r1[12] = $r0;

        $r0 = newarray (double)[2];

        $r0[0] = 0.08371849358081818;

        $r0[1] = 1.176342548272881E-8;

        $r1[13] = $r0;

        $r0 = newarray (double)[2];

        $r0[0] = 0.030589580535888672;

        $r0[1] = 1.2958646899018938E-9;

        $r1[14] = $r0;

        $r0 = newarray (double)[2];

        $r0[0] = 0.14982303977012634;

        $r0[1] = 1.225743062930824E-8;

        $r1[15] = $r0;

        <org.apache.commons.math3.util.FastMathCalc: double[][] LN_SPLIT_COEF> = $r1;

        return;
    }
    private void <init>()
    {
        org.apache.commons.math3.util.FastMathCalc r0;

        r0 := @this: org.apache.commons.math3.util.FastMathCalc;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    private static void buildSinCosTables(double[], double[], double[], double[], int, double[], double[])
    {
        double[] $r0, $r1, $r2, $r3, $r4, $r5, r6, r7, r8, r9, r10, r11;
        int $i0, i1, $i2;
        double d0, $d1;

        $r0 := @parameter0: double[];

        $r1 := @parameter1: double[];

        $r2 := @parameter2: double[];

        $r3 := @parameter3: double[];

        $i0 := @parameter4: int;

        $r4 := @parameter5: double[];

        $r5 := @parameter6: double[];

        r7 = newarray (double)[2];

        i1 = 0;

     label1:
        if i1 >= 7 goto label2;

        d0 = (double) i1;

        d0 = d0 / 8.0;

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: double slowSin(double,double[])>(d0, r7);

        $d1 = r7[0];

        $r0[i1] = $d1;

        $d1 = r7[1];

        $r1[i1] = $d1;

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: double slowCos(double,double[])>(d0, r7);

        d0 = r7[0];

        $r2[i1] = d0;

        d0 = r7[1];

        $r3[i1] = d0;

        i1 = i1 + 1;

        goto label1;

     label2:
        i1 = 7;

     label3:
        if i1 >= $i0 goto label6;

        r9 = newarray (double)[2];

        r10 = newarray (double)[2];

        r11 = newarray (double)[2];

        r6 = newarray (double)[2];

        r8 = newarray (double)[2];

        $i2 = i1 & 1;

        if $i2 != 0 goto label5;

        $i2 = i1 / 2;

        d0 = $r0[$i2];

        r9[0] = d0;

        $i2 = i1 / 2;

        d0 = $r1[$i2];

        r9[1] = d0;

        $i2 = i1 / 2;

        d0 = $r2[$i2];

        r10[0] = d0;

        $i2 = i1 / 2;

        d0 = $r3[$i2];

        r10[1] = d0;

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void splitMult(double[],double[],double[])>(r9, r10, r7);

        d0 = r7[0];

        d0 = d0 * 2.0;

        $r0[i1] = d0;

        d0 = r7[1];

        d0 = d0 * 2.0;

        $r1[i1] = d0;

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void splitMult(double[],double[],double[])>(r10, r10, r11);

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void splitMult(double[],double[],double[])>(r9, r9, r8);

        d0 = r8[0];

        d0 = neg d0;

        r8[0] = d0;

        d0 = r8[1];

        d0 = neg d0;

        r8[1] = d0;

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void splitAdd(double[],double[],double[])>(r11, r8, r7);

        d0 = r7[0];

        $r2[i1] = d0;

        d0 = r7[1];

        $r3[i1] = d0;

     label4:
        i1 = i1 + 1;

        goto label3;

     label5:
        $i2 = i1 / 2;

        d0 = $r0[$i2];

        r9[0] = d0;

        $i2 = i1 / 2;

        d0 = $r1[$i2];

        r9[1] = d0;

        $i2 = i1 / 2;

        d0 = $r2[$i2];

        r10[0] = d0;

        $i2 = i1 / 2;

        d0 = $r3[$i2];

        r10[1] = d0;

        $i2 = i1 / 2;

        $i2 = $i2 + 1;

        d0 = $r0[$i2];

        r11[0] = d0;

        $i2 = i1 / 2;

        $i2 = $i2 + 1;

        d0 = $r1[$i2];

        r11[1] = d0;

        $i2 = i1 / 2;

        $i2 = $i2 + 1;

        d0 = $r2[$i2];

        r6[0] = d0;

        $i2 = i1 / 2;

        $i2 = $i2 + 1;

        d0 = $r3[$i2];

        r6[1] = d0;

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void splitMult(double[],double[],double[])>(r9, r6, r8);

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void splitMult(double[],double[],double[])>(r10, r11, r7);

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void splitAdd(double[],double[],double[])>(r7, r8, r7);

        d0 = r7[0];

        $r0[i1] = d0;

        d0 = r7[1];

        $r1[i1] = d0;

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void splitMult(double[],double[],double[])>(r10, r6, r7);

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void splitMult(double[],double[],double[])>(r9, r11, r8);

        d0 = r8[0];

        d0 = neg d0;

        r8[0] = d0;

        d0 = r8[1];

        d0 = neg d0;

        r8[1] = d0;

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void splitAdd(double[],double[],double[])>(r7, r8, r7);

        d0 = r7[0];

        $r2[i1] = d0;

        d0 = r7[1];

        $r3[i1] = d0;

        goto label4;

     label6:
        i1 = 0;

     label7:
        if i1 >= $i0 goto label8;

        r6 = newarray (double)[2];

        r7 = newarray (double)[2];

        r8 = newarray (double)[2];

        d0 = $r2[i1];

        r8[0] = d0;

        d0 = $r3[i1];

        r8[1] = d0;

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void splitReciprocal(double[],double[])>(r8, r7);

        d0 = $r0[i1];

        r6[0] = d0;

        d0 = $r1[i1];

        r6[1] = d0;

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void splitMult(double[],double[],double[])>(r6, r7, r8);

        d0 = r8[0];

        $r4[i1] = d0;

        d0 = r8[1];

        $r5[i1] = d0;

        i1 = i1 + 1;

        goto label7;

     label8:
        return;
    }
    private static void checkLen(int, int) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        int $i0, $i1;
        org.apache.commons.math3.exception.DimensionMismatchException $r0;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        if $i0 == $i1 goto label1;

        $r0 = new org.apache.commons.math3.exception.DimensionMismatchException;

        specialinvoke $r0.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i1, $i0);

        throw $r0;

     label1:
        return;
    }
    static double expint(int, double[])
    {
        double[] $r0, r1, r2, r3;
        int $i0, $i1;
        double $d0, $d1;

        $i0 := @parameter0: int;

        $r0 := @parameter1: double[];

        r2 = newarray (double)[2];

        r1 = newarray (double)[2];

        r3 = newarray (double)[2];

        r2[0] = 2.718281828459045;

        r2[1] = 1.4456468917292502E-16;

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void split(double,double[])>(1.0, r3);

     label1:
        if $i0 <= 0 goto label3;

        $i1 = $i0 & 1;

        if $i1 == 0 goto label2;

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void quadMult(double[],double[],double[])>(r3, r2, r1);

        $d0 = r1[0];

        r3[0] = $d0;

        $d0 = r1[1];

        r3[1] = $d0;

     label2:
        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void quadMult(double[],double[],double[])>(r2, r2, r1);

        $d0 = r1[0];

        r2[0] = $d0;

        $d0 = r1[1];

        r2[1] = $d0;

        $i0 = $i0 >> 1;

        goto label1;

     label3:
        if $r0 == null goto label4;

        $d0 = r3[0];

        $r0[0] = $d0;

        $d0 = r3[1];

        $r0[1] = $d0;

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void resplit(double[])>($r0);

     label4:
        $d0 = r3[0];

        $d1 = r3[1];

        $d0 = $d0 + $d1;

        return $d0;
    }
    static java.lang.String format(double)
    {
        double $d0;
        byte $b0;
        java.lang.StringBuilder $r0;
        java.lang.String $r1;

        $d0 := @parameter0: double;

        $b0 = $d0 cmpl $d0;

        if $b0 == 0 goto label1;

        return "Double.NaN,";

     label1:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $b0 = $d0 cmpl 0.0;

        if $b0 < 0 goto label3;

        $r1 = "+";

     label2:
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = staticinvoke <java.lang.Double: java.lang.String toString(double)>($d0);

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("d,");

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;

     label3:
        $r1 = "";

        goto label2;
    }
    static void printarray(java.io.PrintStream, java.lang.String, int, double[])
    {
        java.io.PrintStream $r0;
        java.lang.String $r1;
        int $i0, $i1;
        double[] $r2;
        double d0;
        java.lang.StringBuilder $r3;
        java.lang.Object[] $r4;

        $r0 := @parameter0: java.io.PrintStream;

        $r1 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $r2 := @parameter3: double[];

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>($r1);

        $i1 = lengthof $r2;

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void checkLen(int,int)>($i0, $i1);

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("    {");

        $i0 = lengthof $r2;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        d0 = $r2[$i1];

        $r4 = newarray (java.lang.Object)[1];

        $r1 = staticinvoke <org.apache.commons.math3.util.FastMathCalc: java.lang.String format(double)>(d0);

        $r4[0] = $r1;

        virtualinvoke $r0.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>("        %s%n", $r4);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("    };");

        return;
    }
    static void printarray(java.io.PrintStream, java.lang.String, int, double[][])
    {
        java.io.PrintStream $r0;
        java.lang.String $r1;
        int $i0, i1, $i2, i3, i4;
        double[][] $r2;
        double[] r3;
        double d0;
        java.lang.Object[] $r4;
        java.lang.StringBuilder $r5;

        $r0 := @parameter0: java.io.PrintStream;

        $r1 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $r2 := @parameter3: double[][];

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>($r1);

        $i2 = lengthof $r2;

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void checkLen(int,int)>($i0, $i2);

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("    { ");

        $i0 = lengthof $r2;

        $i2 = 0;

        i3 = 0;

     label1:
        if $i2 >= $i0 goto label4;

        r3 = $r2[$i2];

        virtualinvoke $r0.<java.io.PrintStream: void print(java.lang.String)>("        {");

        i1 = lengthof r3;

        i4 = 0;

     label2:
        if i4 >= i1 goto label3;

        d0 = r3[i4];

        $r4 = newarray (java.lang.Object)[1];

        $r1 = staticinvoke <org.apache.commons.math3.util.FastMathCalc: java.lang.String format(double)>(d0);

        $r4[0] = $r1;

        virtualinvoke $r0.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>("%-25.25s", $r4);

        i4 = i4 + 1;

        goto label2;

     label3:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}, // ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>($r1);

        $i2 = $i2 + 1;

        i3 = i3 + 1;

        goto label1;

     label4:
        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("    };");

        return;
    }
    private static void quadMult(double[], double[], double[])
    {
        double[] $r0, $r1, $r2, r3, r4, r5;
        double $d0, $d1, $d2, $d3;

        $r0 := @parameter0: double[];

        $r1 := @parameter1: double[];

        $r2 := @parameter2: double[];

        r3 = newarray (double)[2];

        r4 = newarray (double)[2];

        r5 = newarray (double)[2];

        $d0 = $r0[0];

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void split(double,double[])>($d0, r3);

        $d0 = $r1[0];

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void split(double,double[])>($d0, r4);

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void splitMult(double[],double[],double[])>(r3, r4, r5);

        $d0 = r5[0];

        $r2[0] = $d0;

        $d0 = r5[1];

        $r2[1] = $d0;

        $d0 = $r1[1];

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void split(double,double[])>($d0, r4);

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void splitMult(double[],double[],double[])>(r3, r4, r5);

        $d0 = $r2[0];

        $d1 = r5[0];

        $d0 = $d0 + $d1;

        $d1 = $r2[1];

        $d2 = $r2[0];

        $d2 = $d0 - $d2;

        $d3 = r5[0];

        $d2 = $d2 - $d3;

        $d1 = $d1 - $d2;

        $r2[1] = $d1;

        $r2[0] = $d0;

        $d0 = $r2[0];

        $d1 = r5[1];

        $d0 = $d0 + $d1;

        $d1 = $r2[1];

        $d2 = $r2[0];

        $d2 = $d0 - $d2;

        $d3 = r5[1];

        $d2 = $d2 - $d3;

        $d1 = $d1 - $d2;

        $r2[1] = $d1;

        $r2[0] = $d0;

        $d0 = $r0[1];

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void split(double,double[])>($d0, r3);

        $d0 = $r1[0];

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void split(double,double[])>($d0, r4);

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void splitMult(double[],double[],double[])>(r3, r4, r5);

        $d0 = $r2[0];

        $d1 = r5[0];

        $d0 = $d0 + $d1;

        $d1 = $r2[1];

        $d2 = $r2[0];

        $d2 = $d0 - $d2;

        $d3 = r5[0];

        $d2 = $d2 - $d3;

        $d1 = $d1 - $d2;

        $r2[1] = $d1;

        $r2[0] = $d0;

        $d0 = $r2[0];

        $d1 = r5[1];

        $d0 = $d0 + $d1;

        $d1 = $r2[1];

        $d2 = $r2[0];

        $d2 = $d0 - $d2;

        $d3 = r5[1];

        $d2 = $d2 - $d3;

        $d1 = $d1 - $d2;

        $r2[1] = $d1;

        $r2[0] = $d0;

        $d0 = $r0[1];

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void split(double,double[])>($d0, r3);

        $d0 = $r1[1];

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void split(double,double[])>($d0, r4);

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void splitMult(double[],double[],double[])>(r3, r4, r5);

        $d0 = $r2[0];

        $d1 = r5[0];

        $d0 = $d0 + $d1;

        $d1 = $r2[1];

        $d2 = $r2[0];

        $d2 = $d0 - $d2;

        $d3 = r5[0];

        $d2 = $d2 - $d3;

        $d1 = $d1 - $d2;

        $r2[1] = $d1;

        $r2[0] = $d0;

        $d0 = $r2[0];

        $d1 = r5[1];

        $d0 = $d0 + $d1;

        $d1 = $r2[1];

        $d2 = $r2[0];

        $d2 = $d0 - $d2;

        $d3 = r5[1];

        $d2 = $d2 - $d3;

        $d1 = $d1 - $d2;

        $r2[1] = $d1;

        $r2[0] = $d0;

        return;
    }
    private static void resplit(double[])
    {
        double[] $r0;
        double d0, d1, $d2, $d3;
        byte $b0;

        $r0 := @parameter0: double[];

        d0 = $r0[0];

        d1 = $r0[1];

        d0 = d0 + d1;

        d1 = $r0[0];

        d1 = d0 - d1;

        $d2 = $r0[1];

        d1 = d1 - $d2;

        d1 = neg d1;

        $b0 = d0 cmpg 8.0E298;

        if $b0 >= 0 goto label1;

        $b0 = d0 cmpl -8.0E298;

        if $b0 <= 0 goto label1;

        $d2 = d0 * 1.073741824E9;

        $d3 = d0 + $d2;

        $d2 = $d3 - $d2;

        $r0[0] = $d2;

        $d2 = $r0[0];

        d0 = d0 - $d2;

        d0 = d0 + d1;

        $r0[1] = d0;

        return;

     label1:
        $d2 = d0 * 9.313225746154785E-10;

        $d2 = d0 + $d2;

        $d2 = $d2 - d0;

        $d2 = $d2 * 1.073741824E9;

        $r0[0] = $d2;

        $d2 = $r0[0];

        d0 = d0 - $d2;

        d0 = d0 + d1;

        $r0[1] = d0;

        return;
    }
    static double slowCos(double, double[])
    {
        double $d0, $d1;
        double[] $r0, r1, r2, r3, r4, $r5;
        int $i0, $i1;

        $d0 := @parameter0: double;

        $r0 := @parameter1: double[];

        r3 = newarray (double)[2];

        r4 = newarray (double)[2];

        r2 = newarray (double)[2];

        r1 = newarray (double)[2];

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void split(double,double[])>($d0, r3);

        r4[1] = 0.0;

        r4[0] = 0.0;

        $r5 = <org.apache.commons.math3.util.FastMathCalc: double[] FACT>;

        $i0 = lengthof $r5;

        $i0 = $i0 + -1;

     label1:
        if $i0 < 0 goto label5;

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void splitMult(double[],double[],double[])>(r3, r4, r1);

        $d0 = r1[0];

        r4[0] = $d0;

        $d0 = r1[1];

        r4[1] = $d0;

        $i1 = $i0 & 1;

        if $i1 == 0 goto label3;

     label2:
        $i0 = $i0 + -1;

        goto label1;

     label3:
        $r5 = <org.apache.commons.math3.util.FastMathCalc: double[] FACT>;

        $d0 = $r5[$i0];

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void split(double,double[])>($d0, r1);

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void splitReciprocal(double[],double[])>(r1, r2);

        $i1 = $i0 & 2;

        if $i1 == 0 goto label4;

        $d0 = r2[0];

        $d0 = neg $d0;

        r2[0] = $d0;

        $d0 = r2[1];

        $d0 = neg $d0;

        r2[1] = $d0;

     label4:
        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void splitAdd(double[],double[],double[])>(r4, r2, r1);

        $d0 = r1[0];

        r4[0] = $d0;

        $d0 = r1[1];

        r4[1] = $d0;

        goto label2;

     label5:
        if $r0 == null goto label6;

        $d0 = r4[0];

        $r0[0] = $d0;

        $d0 = r4[1];

        $r0[1] = $d0;

     label6:
        $d0 = r4[0];

        $d1 = r4[1];

        $d0 = $d0 + $d1;

        return $d0;
    }
    static double[] slowLog(double)
    {
        double $d0;
        double[] r0, r1, r2, r3, $r6;
        double[][] $r4, $r5;
        int $i0;

        $d0 := @parameter0: double;

        r1 = newarray (double)[2];

        r2 = newarray (double)[2];

        r3 = newarray (double)[2];

        r0 = newarray (double)[2];

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void split(double,double[])>($d0, r1);

        $d0 = r1[0];

        $d0 = $d0 + 1.0;

        r1[0] = $d0;

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void resplit(double[])>(r1);

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void splitReciprocal(double[],double[])>(r1, r0);

        $d0 = r1[0];

        $d0 = $d0 - 2.0;

        r1[0] = $d0;

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void resplit(double[])>(r1);

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void splitMult(double[],double[],double[])>(r1, r0, r3);

        $d0 = r3[0];

        r1[0] = $d0;

        $d0 = r3[1];

        r1[1] = $d0;

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void splitMult(double[],double[],double[])>(r1, r1, r2);

        $r4 = <org.apache.commons.math3.util.FastMathCalc: double[][] LN_SPLIT_COEF>;

        $r5 = <org.apache.commons.math3.util.FastMathCalc: double[][] LN_SPLIT_COEF>;

        $i0 = lengthof $r5;

        $i0 = $i0 + -1;

        $r6 = $r4[$i0];

        $d0 = $r6[0];

        r3[0] = $d0;

        $r4 = <org.apache.commons.math3.util.FastMathCalc: double[][] LN_SPLIT_COEF>;

        $r5 = <org.apache.commons.math3.util.FastMathCalc: double[][] LN_SPLIT_COEF>;

        $i0 = lengthof $r5;

        $i0 = $i0 + -1;

        $r6 = $r4[$i0];

        $d0 = $r6[1];

        r3[1] = $d0;

        $r4 = <org.apache.commons.math3.util.FastMathCalc: double[][] LN_SPLIT_COEF>;

        $i0 = lengthof $r4;

        $i0 = $i0 + -2;

     label1:
        if $i0 < 0 goto label2;

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void splitMult(double[],double[],double[])>(r3, r2, r0);

        $d0 = r0[0];

        r3[0] = $d0;

        $d0 = r0[1];

        r3[1] = $d0;

        $r4 = <org.apache.commons.math3.util.FastMathCalc: double[][] LN_SPLIT_COEF>;

        $r6 = $r4[$i0];

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void splitAdd(double[],double[],double[])>(r3, $r6, r0);

        $d0 = r0[0];

        r3[0] = $d0;

        $d0 = r0[1];

        r3[1] = $d0;

        $i0 = $i0 + -1;

        goto label1;

     label2:
        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void splitMult(double[],double[],double[])>(r3, r1, r0);

        $d0 = r0[0];

        r3[0] = $d0;

        $d0 = r0[1];

        r3[1] = $d0;

        return r3;
    }
    static double slowSin(double, double[])
    {
        double $d0, $d1;
        double[] $r0, r1, r2, r3, r4, $r5;
        int $i0, $i1;

        $d0 := @parameter0: double;

        $r0 := @parameter1: double[];

        r3 = newarray (double)[2];

        r4 = newarray (double)[2];

        r2 = newarray (double)[2];

        r1 = newarray (double)[2];

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void split(double,double[])>($d0, r3);

        r4[1] = 0.0;

        r4[0] = 0.0;

        $r5 = <org.apache.commons.math3.util.FastMathCalc: double[] FACT>;

        $i0 = lengthof $r5;

        $i0 = $i0 + -1;

     label1:
        if $i0 < 0 goto label5;

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void splitMult(double[],double[],double[])>(r3, r4, r1);

        $d0 = r1[0];

        r4[0] = $d0;

        $d0 = r1[1];

        r4[1] = $d0;

        $i1 = $i0 & 1;

        if $i1 != 0 goto label3;

     label2:
        $i0 = $i0 + -1;

        goto label1;

     label3:
        $r5 = <org.apache.commons.math3.util.FastMathCalc: double[] FACT>;

        $d0 = $r5[$i0];

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void split(double,double[])>($d0, r1);

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void splitReciprocal(double[],double[])>(r1, r2);

        $i1 = $i0 & 2;

        if $i1 == 0 goto label4;

        $d0 = r2[0];

        $d0 = neg $d0;

        r2[0] = $d0;

        $d0 = r2[1];

        $d0 = neg $d0;

        r2[1] = $d0;

     label4:
        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void splitAdd(double[],double[],double[])>(r4, r2, r1);

        $d0 = r1[0];

        r4[0] = $d0;

        $d0 = r1[1];

        r4[1] = $d0;

        goto label2;

     label5:
        if $r0 == null goto label6;

        $d0 = r4[0];

        $r0[0] = $d0;

        $d0 = r4[1];

        $r0[1] = $d0;

     label6:
        $d0 = r4[0];

        $d1 = r4[1];

        $d0 = $d0 + $d1;

        return $d0;
    }
    static double slowexp(double, double[])
    {
        double $d0, $d1;
        double[] $r0, r1, r2, r3, r4, $r5;
        int $i0;

        $d0 := @parameter0: double;

        $r0 := @parameter1: double[];

        r3 = newarray (double)[2];

        r4 = newarray (double)[2];

        r2 = newarray (double)[2];

        r1 = newarray (double)[2];

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void split(double,double[])>($d0, r3);

        r4[1] = 0.0;

        r4[0] = 0.0;

        $r5 = <org.apache.commons.math3.util.FastMathCalc: double[] FACT>;

        $i0 = lengthof $r5;

        $i0 = $i0 + -1;

     label1:
        if $i0 < 0 goto label2;

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void splitMult(double[],double[],double[])>(r3, r4, r1);

        $d0 = r1[0];

        r4[0] = $d0;

        $d0 = r1[1];

        r4[1] = $d0;

        $r5 = <org.apache.commons.math3.util.FastMathCalc: double[] FACT>;

        $d0 = $r5[$i0];

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void split(double,double[])>($d0, r1);

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void splitReciprocal(double[],double[])>(r1, r2);

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void splitAdd(double[],double[],double[])>(r4, r2, r1);

        $d0 = r1[0];

        r4[0] = $d0;

        $d0 = r1[1];

        r4[1] = $d0;

        $i0 = $i0 + -1;

        goto label1;

     label2:
        if $r0 == null goto label3;

        $d0 = r4[0];

        $r0[0] = $d0;

        $d0 = r4[1];

        $r0[1] = $d0;

     label3:
        $d0 = r4[0];

        $d1 = r4[1];

        $d0 = $d0 + $d1;

        return $d0;
    }
    private static void split(double, double[])
    {
        double $d0, d1, $d2;
        double[] $r0;
        byte $b0;

        $d0 := @parameter0: double;

        $r0 := @parameter1: double[];

        $b0 = $d0 cmpg 8.0E298;

        if $b0 >= 0 goto label1;

        $b0 = $d0 cmpl -8.0E298;

        if $b0 <= 0 goto label1;

        d1 = $d0 * 1.073741824E9;

        $d2 = $d0 + d1;

        d1 = $d2 - d1;

        $r0[0] = d1;

        d1 = $r0[0];

        $d0 = $d0 - d1;

        $r0[1] = $d0;

        return;

     label1:
        d1 = $d0 * 9.313225746154785E-10;

        d1 = $d0 + d1;

        d1 = d1 - $d0;

        d1 = d1 * 1.073741824E9;

        $r0[0] = d1;

        d1 = $r0[0];

        $d0 = $d0 - d1;

        $r0[1] = $d0;

        return;
    }
    private static void splitAdd(double[], double[], double[])
    {
        double[] $r0, $r1, $r2;
        double $d0, $d1;

        $r0 := @parameter0: double[];

        $r1 := @parameter1: double[];

        $r2 := @parameter2: double[];

        $d0 = $r0[0];

        $d1 = $r1[0];

        $d0 = $d0 + $d1;

        $r2[0] = $d0;

        $d0 = $r0[1];

        $d1 = $r1[1];

        $d0 = $d0 + $d1;

        $r2[1] = $d0;

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void resplit(double[])>($r2);

        return;
    }
    private static void splitMult(double[], double[], double[])
    {
        double[] $r0, $r1, $r2;
        double $d0, $d1, $d2;

        $r0 := @parameter0: double[];

        $r1 := @parameter1: double[];

        $r2 := @parameter2: double[];

        $d0 = $r0[0];

        $d1 = $r1[0];

        $d0 = $d0 * $d1;

        $r2[0] = $d0;

        $d0 = $r0[0];

        $d1 = $r1[1];

        $d0 = $d0 * $d1;

        $d1 = $r0[1];

        $d2 = $r1[0];

        $d1 = $d1 * $d2;

        $d0 = $d0 + $d1;

        $d1 = $r0[1];

        $d2 = $r1[1];

        $d1 = $d1 * $d2;

        $d0 = $d0 + $d1;

        $r2[1] = $d0;

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void resplit(double[])>($r2);

        return;
    }
    static void splitReciprocal(double[], double[])
    {
        double[] $r0, $r1;
        double $d0, $d1, $d2, $d3;
        byte $b0;
        int i1;

        $r0 := @parameter0: double[];

        $r1 := @parameter1: double[];

        $d0 = $r0[0];

        $b0 = $d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        $d0 = $r0[1];

        $r0[0] = $d0;

        $d0 = (double) 0L;

        $r0[1] = $d0;

     label1:
        $d0 = $r0[0];

        $d0 = 0.9999997615814209 / $d0;

        $r1[0] = $d0;

        $d0 = $r0[0];

        $d0 = 2.384185791015625E-7 * $d0;

        $d1 = $r0[1];

        $d1 = 0.9999997615814209 * $d1;

        $d0 = $d0 - $d1;

        $d1 = $r0[0];

        $d2 = $r0[0];

        $d1 = $d1 * $d2;

        $d2 = $r0[0];

        $d3 = $r0[1];

        $d2 = $d2 * $d3;

        $d1 = $d1 + $d2;

        $d0 = $d0 / $d1;

        $r1[1] = $d0;

        $d0 = $r1[1];

        $d1 = $r1[1];

        $b0 = $d0 cmpl $d1;

        if $b0 == 0 goto label2;

        $d0 = (double) 0L;

        $r1[1] = $d0;

     label2:
        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void resplit(double[])>($r1);

        i1 = 0;

     label3:
        if i1 >= 2 goto label4;

        $d0 = $r1[0];

        $d1 = $r0[0];

        $d0 = $d0 * $d1;

        $d0 = 1.0 - $d0;

        $d1 = $r1[0];

        $d2 = $r0[1];

        $d1 = $d1 * $d2;

        $d0 = $d0 - $d1;

        $d1 = $r1[1];

        $d2 = $r0[0];

        $d1 = $d1 * $d2;

        $d0 = $d0 - $d1;

        $d1 = $r1[1];

        $d2 = $r0[1];

        $d1 = $d1 * $d2;

        $d0 = $d0 - $d1;

        $d1 = $r1[0];

        $d2 = $r1[1];

        $d1 = $d1 + $d2;

        $d0 = $d0 * $d1;

        $d1 = $r1[1];

        $d0 = $d1 + $d0;

        $r1[1] = $d0;

        i1 = i1 + 1;

        goto label3;

     label4:
        return;
    }
