org.apache.commons.math3.util.ResizableDoubleArray extends java.lang.Object implements org.apache.commons.math3.util.DoubleArray java.io.Serializable
public static final int ADDITIVE_MODE
private static final double DEFAULT_CONTRACTION_DELTA
private static final double DEFAULT_EXPANSION_FACTOR
private static final int DEFAULT_INITIAL_CAPACITY
public static final int MULTIPLICATIVE_MODE
private static final long serialVersionUID
private double contractionCriterion
private double expansionFactor
private org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode expansionMode
private double[] internalArray
private int numElements
private int startIndex
    public void <init>()
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        specialinvoke r0.<org.apache.commons.math3.util.ResizableDoubleArray: void <init>(int)>(16);

        return;
    }
    public void <init>(int) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        $i0 := @parameter0: int;

        specialinvoke r0.<org.apache.commons.math3.util.ResizableDoubleArray: void <init>(int,double)>($i0, 2.0);

        return;
    }
    public void <init>(int, double) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        int $i0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        $i0 := @parameter0: int;

        $d0 := @parameter1: double;

        $d1 = 0.5 + $d0;

        specialinvoke r0.<org.apache.commons.math3.util.ResizableDoubleArray: void <init>(int,double,double)>($i0, $d0, $d1);

        return;
    }
    public void <init>(int, double, double) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        int $i0;
        double $d0, $d1;
        org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode $r1;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        $i0 := @parameter0: int;

        $d0 := @parameter1: double;

        $d1 := @parameter2: double;

        $r1 = <org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode: org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode MULTIPLICATIVE>;

        specialinvoke r0.<org.apache.commons.math3.util.ResizableDoubleArray: void <init>(int,double,double,org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode,double[])>($i0, $d0, $d1, $r1, null);

        return;
    }
    public transient void <init>(int, double, double, org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode, double[]) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        int $i0;
        double $d0, $d1;
        org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode $r1, $r5;
        double[] $r2, $r7;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3;
        java.lang.Integer $r4;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r6;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        $i0 := @parameter0: int;

        $d0 := @parameter1: double;

        $d1 := @parameter2: double;

        $r1 := @parameter3: org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode;

        $r2 := @parameter4: double[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.util.ResizableDoubleArray: double contractionCriterion> = 2.5;

        r0.<org.apache.commons.math3.util.ResizableDoubleArray: double expansionFactor> = 2.0;

        $r5 = <org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode: org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode MULTIPLICATIVE>;

        r0.<org.apache.commons.math3.util.ResizableDoubleArray: org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode expansionMode> = $r5;

        r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements> = 0;

        r0.<org.apache.commons.math3.util.ResizableDoubleArray: int startIndex> = 0;

        if $i0 > 0 goto label1;

        $r6 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INITIAL_CAPACITY_NOT_POSITIVE>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r6.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r3, $r4);

        throw $r6;

     label1:
        virtualinvoke r0.<org.apache.commons.math3.util.ResizableDoubleArray: void checkContractExpand(double,double)>($d1, $d0);

        r0.<org.apache.commons.math3.util.ResizableDoubleArray: double expansionFactor> = $d0;

        r0.<org.apache.commons.math3.util.ResizableDoubleArray: double contractionCriterion> = $d1;

        r0.<org.apache.commons.math3.util.ResizableDoubleArray: org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode expansionMode> = $r1;

        $r7 = newarray (double)[$i0];

        r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray> = $r7;

        r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements> = 0;

        r0.<org.apache.commons.math3.util.ResizableDoubleArray: int startIndex> = 0;

        if $r2 == null goto label2;

        $i0 = lengthof $r2;

        if $i0 <= 0 goto label2;

        virtualinvoke r0.<org.apache.commons.math3.util.ResizableDoubleArray: void addElements(double[])>($r2);

     label2:
        return;
    }
    public void <init>(int, float) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        int $i0;
        float $f0;
        double $d0;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        $i0 := @parameter0: int;

        $f0 := @parameter1: float;

        $d0 = (double) $f0;

        specialinvoke r0.<org.apache.commons.math3.util.ResizableDoubleArray: void <init>(int,double)>($i0, $d0);

        return;
    }
    public void <init>(int, float, float) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        int $i0;
        float $f0, $f1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        $i0 := @parameter0: int;

        $f0 := @parameter1: float;

        $f1 := @parameter2: float;

        $d0 = (double) $f0;

        $d1 = (double) $f1;

        specialinvoke r0.<org.apache.commons.math3.util.ResizableDoubleArray: void <init>(int,double,double)>($i0, $d0, $d1);

        return;
    }
    public void <init>(int, float, float, int) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        int $i0, $i1;
        float $f0, $f1;
        double $d0, $d1;
        org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode $r1;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        $i0 := @parameter0: int;

        $f0 := @parameter1: float;

        $f1 := @parameter2: float;

        $i1 := @parameter3: int;

        $d0 = (double) $f0;

        $d1 = (double) $f1;

        if $i1 != 1 goto label2;

        $r1 = <org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode: org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode ADDITIVE>;

     label1:
        specialinvoke r0.<org.apache.commons.math3.util.ResizableDoubleArray: void <init>(int,double,double,org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode,double[])>($i0, $d0, $d1, $r1, null);

        virtualinvoke r0.<org.apache.commons.math3.util.ResizableDoubleArray: void setExpansionMode(int)>($i1);

        return;

     label2:
        $r1 = <org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode: org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode MULTIPLICATIVE>;

        goto label1;
    }
    public void <init>(org.apache.commons.math3.util.ResizableDoubleArray) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0, $r1;
        org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode $r2;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        $r1 := @parameter0: org.apache.commons.math3.util.ResizableDoubleArray;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.util.ResizableDoubleArray: double contractionCriterion> = 2.5;

        r0.<org.apache.commons.math3.util.ResizableDoubleArray: double expansionFactor> = 2.0;

        $r2 = <org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode: org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode MULTIPLICATIVE>;

        r0.<org.apache.commons.math3.util.ResizableDoubleArray: org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode expansionMode> = $r2;

        r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements> = 0;

        r0.<org.apache.commons.math3.util.ResizableDoubleArray: int startIndex> = 0;

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>($r1);

        staticinvoke <org.apache.commons.math3.util.ResizableDoubleArray: void copy(org.apache.commons.math3.util.ResizableDoubleArray,org.apache.commons.math3.util.ResizableDoubleArray)>($r1, r0);

        return;
    }
    public void <init>(double[])
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        double[] $r1;
        org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode $r2;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        $r1 := @parameter0: double[];

        $r2 = <org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode: org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode MULTIPLICATIVE>;

        specialinvoke r0.<org.apache.commons.math3.util.ResizableDoubleArray: void <init>(int,double,double,org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode,double[])>(16, 2.0, 2.5, $r2, $r1);

        return;
    }
    public static void copy(org.apache.commons.math3.util.ResizableDoubleArray, org.apache.commons.math3.util.ResizableDoubleArray) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.util.ResizableDoubleArray $r0, $r1;
        double[] $r2, $r4, $r5;
        double $d0;
        org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode $r3;
        int $i0;
        java.lang.Throwable $r6, $r7;

        $r0 := @parameter0: org.apache.commons.math3.util.ResizableDoubleArray;

        $r1 := @parameter1: org.apache.commons.math3.util.ResizableDoubleArray;

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>($r0);

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>($r1);

        entermonitor $r0;

     label1:
        entermonitor $r1;

     label2:
        $d0 = $r0.<org.apache.commons.math3.util.ResizableDoubleArray: double contractionCriterion>;

        $r1.<org.apache.commons.math3.util.ResizableDoubleArray: double contractionCriterion> = $d0;

        $d0 = $r0.<org.apache.commons.math3.util.ResizableDoubleArray: double expansionFactor>;

        $r1.<org.apache.commons.math3.util.ResizableDoubleArray: double expansionFactor> = $d0;

        $r3 = $r0.<org.apache.commons.math3.util.ResizableDoubleArray: org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode expansionMode>;

        $r1.<org.apache.commons.math3.util.ResizableDoubleArray: org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode expansionMode> = $r3;

        $r2 = $r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray>;

        $i0 = lengthof $r2;

        $r2 = newarray (double)[$i0];

        $r1.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray> = $r2;

        $r4 = $r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray>;

        $r2 = $r1.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray>;

        $r5 = $r1.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray>;

        $i0 = lengthof $r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r2, 0, $i0);

        $i0 = $r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements>;

        $r1.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements> = $i0;

        $i0 = $r0.<org.apache.commons.math3.util.ResizableDoubleArray: int startIndex>;

        $r1.<org.apache.commons.math3.util.ResizableDoubleArray: int startIndex> = $i0;

        exitmonitor $r1;

     label3:
        exitmonitor $r0;

     label4:
        return;

     label5:
        $r6 := @caughtexception;

     label6:
        exitmonitor $r1;

     label7:
        throw $r6;

     label8:
        $r7 := @caughtexception;

        exitmonitor $r0;

     label9:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label8;
        catch java.lang.Throwable from label6 to label7 with label5;
        catch java.lang.Throwable from label7 to label9 with label8;
    }
    private void discardExtremeElements(int, boolean) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        int $i0, $i1;
        boolean $z0;
        org.apache.commons.math3.exception.MathIllegalArgumentException $r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        java.lang.Object[] $r3;
        java.lang.Integer $r4;
        java.lang.Throwable $r5;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        $i0 := @parameter0: int;

        $z0 := @parameter1: boolean;

        entermonitor r0;

     label1:
        $i1 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements>;

        if $i0 <= $i1 goto label3;

        $r1 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY>;

        $r3 = newarray (java.lang.Object)[2];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3[0] = $r4;

        $i0 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3[1] = $r4;

        specialinvoke $r1.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r2, $r3);

        throw $r1;

     label2:
        $r5 := @caughtexception;

        exitmonitor r0;

        throw $r5;

     label3:
        if $i0 >= 0 goto label5;

     label4:
        $r1 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS>;

        $r3 = newarray (java.lang.Object)[1];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3[0] = $r4;

        specialinvoke $r1.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r2, $r3);

        throw $r1;

     label5:
        $i1 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements>;

        $i1 = $i1 - $i0;

        r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements> = $i1;

        if $z0 == 0 goto label6;

        $i1 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int startIndex>;

        $i0 = $i1 + $i0;

        r0.<org.apache.commons.math3.util.ResizableDoubleArray: int startIndex> = $i0;

     label6:
        $z0 = specialinvoke r0.<org.apache.commons.math3.util.ResizableDoubleArray: boolean shouldContract()>();

        if $z0 == 0 goto label7;

        virtualinvoke r0.<org.apache.commons.math3.util.ResizableDoubleArray: void contract()>();

     label7:
        exitmonitor r0;

        return;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label4 to label7 with label2;
    }
    private void expandTo(int)
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        int $i0;
        double[] r1, $r2, $r3;
        java.lang.Throwable $r4;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        $i0 := @parameter0: int;

        entermonitor r0;

     label1:
        r1 = newarray (double)[$i0];

        $r2 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray>;

        $r3 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray>;

        $i0 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, 0, $i0);

        r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray> = r1;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r4 := @caughtexception;

        exitmonitor r0;

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    private boolean shouldContract()
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        boolean $z0;
        org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode $r1, $r2;
        double[] $r3;
        int $i0, $i2;
        float $f0, $f1;
        double $d0, $d1;
        byte $b1;
        java.lang.Throwable $r4;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        $z0 = 1;

        entermonitor r0;

     label1:
        $r1 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode expansionMode>;

        $r2 = <org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode: org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode MULTIPLICATIVE>;

        if $r1 != $r2 goto label5;

        $r3 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray>;

        $i0 = lengthof $r3;

        $f0 = (float) $i0;

        $i0 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements>;

        $f1 = (float) $i0;

        $f0 = $f0 / $f1;

        $d0 = (double) $f0;

        $d1 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double contractionCriterion>;

     label2:
        $b1 = $d0 cmpl $d1;

        if $b1 <= 0 goto label4;

     label3:
        exitmonitor r0;

        return $z0;

     label4:
        $z0 = 0;

        goto label3;

     label5:
        $r3 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray>;

        $i0 = lengthof $r3;

        $i2 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements>;

        $i0 = $i0 - $i2;

        $d0 = (double) $i0;

        $d1 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double contractionCriterion>;

     label6:
        $b1 = $d0 cmpl $d1;

        if $b1 > 0 goto label3;

        $z0 = 0;

        goto label3;

     label7:
        $r4 := @caughtexception;

        exitmonitor r0;

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }
    public void addElement(double)
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        double $d0;
        int $i0, $i1, $i2;
        double[] $r1;
        java.lang.Throwable $r2;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        $d0 := @parameter0: double;

        entermonitor r0;

     label1:
        $r1 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray>;

        $i0 = lengthof $r1;

        $i1 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int startIndex>;

        $i2 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements>;

        $i1 = $i1 + $i2;

        if $i0 > $i1 goto label2;

        virtualinvoke r0.<org.apache.commons.math3.util.ResizableDoubleArray: void expand()>();

     label2:
        $r1 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray>;

        $i1 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int startIndex>;

        $i2 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements>;

        $i0 = $i2 + 1;

        r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements> = $i0;

        $i0 = $i1 + $i2;

        $r1[$i0] = $d0;

     label3:
        exitmonitor r0;

        return;

     label4:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label3 with label4;
    }
    public double addElementRolling(double)
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        double $d0, d1;
        boolean $z0;
        double[] $r1;
        int $i0, $i1;
        java.lang.Throwable $r2;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        $d0 := @parameter0: double;

        entermonitor r0;

     label1:
        $r1 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray>;

        $i0 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int startIndex>;

        d1 = $r1[$i0];

        $i0 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int startIndex>;

        $i1 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements>;

        $i1 = $i1 + 1;

        $i0 = $i0 + $i1;

        $r1 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray>;

        $i1 = lengthof $r1;

        if $i0 <= $i1 goto label2;

        virtualinvoke r0.<org.apache.commons.math3.util.ResizableDoubleArray: void expand()>();

     label2:
        $i0 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int startIndex>;

        $i0 = $i0 + 1;

        r0.<org.apache.commons.math3.util.ResizableDoubleArray: int startIndex> = $i0;

        $r1 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray>;

        $i0 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int startIndex>;

        $i1 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements>;

        $i1 = $i1 + -1;

        $i0 = $i0 + $i1;

        $r1[$i0] = $d0;

        $z0 = specialinvoke r0.<org.apache.commons.math3.util.ResizableDoubleArray: boolean shouldContract()>();

        if $z0 == 0 goto label3;

        virtualinvoke r0.<org.apache.commons.math3.util.ResizableDoubleArray: void contract()>();

     label3:
        exitmonitor r0;

        return d1;

     label4:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label3 with label4;
    }
    public void addElements(double[])
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        double[] $r1, r2, $r3;
        int $i0, $i1;
        java.lang.Throwable $r4;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        $r1 := @parameter0: double[];

        entermonitor r0;

     label1:
        $i0 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements>;

        $i1 = lengthof $r1;

        $i0 = $i0 + $i1;

        $i0 = $i0 + 1;

        r2 = newarray (double)[$i0];

        $r3 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray>;

        $i1 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int startIndex>;

        $i0 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, $i1, r2, 0, $i0);

        $i0 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements>;

        $i1 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, r2, $i0, $i1);

        r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray> = r2;

        r0.<org.apache.commons.math3.util.ResizableDoubleArray: int startIndex> = 0;

        $i0 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements>;

        $i1 = lengthof $r1;

        $i0 = $i0 + $i1;

        r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements> = $i0;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r4 := @caughtexception;

        exitmonitor r0;

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    protected void checkContractExpand(double, double) throws org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        double $d0, $d1;
        byte $b0;
        org.apache.commons.math3.exception.NumberIsTooSmallException r1;
        java.lang.Double $r2;
        java.lang.Integer $r3;
        org.apache.commons.math3.exception.util.ExceptionContext $r4;
        org.apache.commons.math3.exception.util.LocalizedFormats $r5;
        java.lang.Object[] $r6;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $b0 = $d0 cmpg $d1;

        if $b0 >= 0 goto label1;

        r1 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke r1.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r2, $r3, 1);

        $r4 = virtualinvoke r1.<org.apache.commons.math3.exception.NumberIsTooSmallException: org.apache.commons.math3.exception.util.ExceptionContext getContext()>();

        $r5 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR>;

        $r6 = newarray (java.lang.Object)[2];

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r6[0] = $r2;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        $r6[1] = $r2;

        virtualinvoke $r4.<org.apache.commons.math3.exception.util.ExceptionContext: void addMessage(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r5, $r6);

        throw r1;

     label1:
        $b0 = $d0 cmpg 1.0;

        if $b0 > 0 goto label2;

        r1 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke r1.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r2, $r3, 0);

        $r4 = virtualinvoke r1.<org.apache.commons.math3.exception.NumberIsTooSmallException: org.apache.commons.math3.exception.util.ExceptionContext getContext()>();

        $r5 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats CONTRACTION_CRITERIA_SMALLER_THAN_ONE>;

        $r6 = newarray (java.lang.Object)[1];

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r6[0] = $r2;

        virtualinvoke $r4.<org.apache.commons.math3.exception.util.ExceptionContext: void addMessage(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r5, $r6);

        throw r1;

     label2:
        $b0 = $d1 cmpg 1.0;

        if $b0 > 0 goto label3;

        r1 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke r1.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r2, $r3, 0);

        $r4 = virtualinvoke r1.<org.apache.commons.math3.exception.NumberIsTooSmallException: org.apache.commons.math3.exception.util.ExceptionContext getContext()>();

        $r5 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats EXPANSION_FACTOR_SMALLER_THAN_ONE>;

        $r6 = newarray (java.lang.Object)[1];

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        $r6[0] = $r2;

        virtualinvoke $r4.<org.apache.commons.math3.exception.util.ExceptionContext: void addMessage(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r5, $r6);

        throw r1;

     label3:
        return;
    }
    protected void checkContractExpand(float, float) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        float $f0, $f1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        $f0 := @parameter0: float;

        $f1 := @parameter1: float;

        $d0 = (double) $f0;

        $d1 = (double) $f1;

        virtualinvoke r0.<org.apache.commons.math3.util.ResizableDoubleArray: void checkContractExpand(double,double)>($d0, $d1);

        return;
    }
    public void clear()
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        java.lang.Throwable $r1;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        entermonitor r0;

     label1:
        r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements> = 0;

        r0.<org.apache.commons.math3.util.ResizableDoubleArray: int startIndex> = 0;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public double compute(org.apache.commons.math3.util.MathArrays$Function)
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        org.apache.commons.math3.util.MathArrays$Function $r1;
        double[] r2;
        int i0, i1;
        java.lang.Throwable $r3;
        double $d0;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        $r1 := @parameter0: org.apache.commons.math3.util.MathArrays$Function;

        entermonitor r0;

     label1:
        r2 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray>;

        i1 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int startIndex>;

        i0 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements>;

        exitmonitor r0;

     label2:
        $d0 = interfaceinvoke $r1.<org.apache.commons.math3.util.MathArrays$Function: double evaluate(double[],int,int)>(r2, i1, i0);

        return $d0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }
    public void contract()
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        double[] r1, $r2;
        int $i0, $i1;
        java.lang.Throwable $r3;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        entermonitor r0;

     label1:
        $i0 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements>;

        $i0 = $i0 + 1;

        r1 = newarray (double)[$i0];

        $r2 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray>;

        $i0 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int startIndex>;

        $i1 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i0, r1, 0, $i1);

        r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray> = r1;

        r0.<org.apache.commons.math3.util.ResizableDoubleArray: int startIndex> = 0;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public org.apache.commons.math3.util.ResizableDoubleArray copy()
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0, r1;
        java.lang.Throwable $r2;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        entermonitor r0;

     label1:
        r1 = new org.apache.commons.math3.util.ResizableDoubleArray;

        specialinvoke r1.<org.apache.commons.math3.util.ResizableDoubleArray: void <init>()>();

        staticinvoke <org.apache.commons.math3.util.ResizableDoubleArray: void copy(org.apache.commons.math3.util.ResizableDoubleArray,org.apache.commons.math3.util.ResizableDoubleArray)>(r0, r1);

     label2:
        exitmonitor r0;

        return r1;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public void discardFrontElements(int) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        int $i0;
        java.lang.Throwable $r1;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        $i0 := @parameter0: int;

        entermonitor r0;

     label1:
        specialinvoke r0.<org.apache.commons.math3.util.ResizableDoubleArray: void discardExtremeElements(int,boolean)>($i0, 1);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public void discardMostRecentElements(int) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        int $i0;
        java.lang.Throwable $r1;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        $i0 := @parameter0: int;

        entermonitor r0;

     label1:
        specialinvoke r0.<org.apache.commons.math3.util.ResizableDoubleArray: void discardExtremeElements(int,boolean)>($i0, 0);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public boolean equals(java.lang.Object)
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0, $r2;
        java.lang.Object $r1;
        boolean $z0;
        double $d0, $d1;
        byte $b0;
        org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode $r3, $r4;
        int $i1, $i2;
        double[] $r5, $r6;
        java.lang.Throwable $r7, $r8;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        $r1 := @parameter0: java.lang.Object;

        if $r1 != r0 goto label01;

        return 1;

     label01:
        $z0 = $r1 instanceof org.apache.commons.math3.util.ResizableDoubleArray;

        if $z0 != 0 goto label02;

        return 0;

     label02:
        entermonitor r0;

     label03:
        entermonitor $r1;

     label04:
        $r2 = (org.apache.commons.math3.util.ResizableDoubleArray) $r1;

        $d0 = $r2.<org.apache.commons.math3.util.ResizableDoubleArray: double contractionCriterion>;

        $d1 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double contractionCriterion>;

        $b0 = $d0 cmpl $d1;

        if $b0 != 0 goto label12;

        $z0 = 1;

     label05:
        if $z0 == 0 goto label13;

        $d0 = $r2.<org.apache.commons.math3.util.ResizableDoubleArray: double expansionFactor>;

        $d1 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double expansionFactor>;

        $b0 = $d0 cmpl $d1;

        if $b0 != 0 goto label13;

        $z0 = 1;

     label06:
        if $z0 == 0 goto label14;

        $r3 = $r2.<org.apache.commons.math3.util.ResizableDoubleArray: org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode expansionMode>;

        $r4 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode expansionMode>;

        if $r3 != $r4 goto label14;

        $z0 = 1;

     label07:
        if $z0 == 0 goto label15;

        $i1 = $r2.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements>;

        $i2 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements>;

        if $i1 != $i2 goto label15;

        $z0 = 1;

     label08:
        if $z0 == 0 goto label16;

        $i1 = $r2.<org.apache.commons.math3.util.ResizableDoubleArray: int startIndex>;

        $i2 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int startIndex>;

        if $i1 != $i2 goto label16;

        $z0 = 1;

     label09:
        if $z0 != 0 goto label17;

        exitmonitor $r1;

     label10:
        exitmonitor r0;

     label11:
        return 0;

     label12:
        $z0 = 0;

        goto label05;

     label13:
        $z0 = 0;

        goto label06;

     label14:
        $z0 = 0;

        goto label07;

     label15:
        $z0 = 0;

        goto label08;

     label16:
        $z0 = 0;

        goto label09;

     label17:
        $r5 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray>;

        $r6 = $r2.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray>;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(double[],double[])>($r5, $r6);

        exitmonitor $r1;

     label18:
        exitmonitor r0;

     label19:
        return $z0;

     label20:
        $r7 := @caughtexception;

        exitmonitor r0;

     label21:
        throw $r7;

     label22:
        $r8 := @caughtexception;

     label23:
        exitmonitor $r1;

     label24:
        throw $r8;

     label25:
        nop;

        catch java.lang.Throwable from label03 to label04 with label20;
        catch java.lang.Throwable from label04 to label10 with label22;
        catch java.lang.Throwable from label10 to label11 with label20;
        catch java.lang.Throwable from label17 to label18 with label22;
        catch java.lang.Throwable from label18 to label19 with label20;
        catch java.lang.Throwable from label20 to label21 with label20;
        catch java.lang.Throwable from label23 to label24 with label22;
        catch java.lang.Throwable from label24 to label25 with label20;
    }
    protected void expand()
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        double[] r1, $r4, $r5;
        org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode $r2, $r3;
        int $i0;
        double $d0, $d1;
        long $l1, $l2;
        java.lang.Throwable $r6;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        entermonitor r0;

     label1:
        $r2 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode expansionMode>;

        $r3 = <org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode: org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode MULTIPLICATIVE>;

        if $r2 != $r3 goto label4;

        r1 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray>;

        $i0 = lengthof r1;

        $d0 = (double) $i0;

        $d1 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double expansionFactor>;

        $d0 = $d0 * $d1;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double ceil(double)>($d0);

        $i0 = (int) $d0;

     label2:
        r1 = newarray (double)[$i0];

        $r4 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray>;

        $r5 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray>;

        $i0 = lengthof $r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r1, 0, $i0);

        r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray> = r1;

     label3:
        exitmonitor r0;

        return;

     label4:
        r1 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray>;

        $i0 = lengthof r1;

        $l1 = (long) $i0;

        $d0 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double expansionFactor>;

        $l2 = staticinvoke <org.apache.commons.math3.util.FastMath: long round(double)>($d0);

     label5:
        $l1 = $l1 + $l2;

        $i0 = (int) $l1;

        goto label2;

     label6:
        $r6 := @caughtexception;

        exitmonitor r0;

        throw $r6;

        catch java.lang.Throwable from label1 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }
    protected double[] getArrayRef()
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        double[] r1;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        r1 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray>;

        return r1;
    }
    public int getCapacity()
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        double[] $r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        $r1 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray>;

        $i0 = lengthof $r1;

        return $i0;
    }
    public float getContractionCriteria()
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        double $d0;
        float $f0;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.util.ResizableDoubleArray: double getContractionCriterion()>();

        $f0 = (float) $d0;

        return $f0;
    }
    public double getContractionCriterion()
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        double d0;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        d0 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double contractionCriterion>;

        return d0;
    }
    public double getElement(int)
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        int $i0, $i1;
        java.lang.ArrayIndexOutOfBoundsException $r1;
        java.lang.Throwable $r2;
        double[] $r3;
        double $d0;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        $i0 := @parameter0: int;

        entermonitor r0;

     label1:
        $i1 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements>;

        if $i0 < $i1 goto label3;

        $r1 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r1.<java.lang.ArrayIndexOutOfBoundsException: void <init>(int)>($i0);

        throw $r1;

     label2:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

     label3:
        if $i0 < 0 goto label6;

     label4:
        $r3 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray>;

        $i1 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int startIndex>;

        $i0 = $i1 + $i0;

        $d0 = $r3[$i0];

     label5:
        exitmonitor r0;

        return $d0;

     label6:
        $r1 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r1.<java.lang.ArrayIndexOutOfBoundsException: void <init>(int)>($i0);

        throw $r1;

     label7:
        nop;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label4 to label5 with label2;
        catch java.lang.Throwable from label6 to label7 with label2;
    }
    public double[] getElements()
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        double[] r1, $r2;
        int $i0, $i1;
        java.lang.Throwable $r3;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        entermonitor r0;

     label1:
        $i0 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements>;

        r1 = newarray (double)[$i0];

        $r2 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray>;

        $i0 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int startIndex>;

        $i1 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i0, r1, 0, $i1);

     label2:
        exitmonitor r0;

        return r1;

     label3:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public float getExpansionFactor()
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        double $d0;
        float $f0;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        $d0 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double expansionFactor>;

        $f0 = (float) $d0;

        return $f0;
    }
    public int getExpansionMode()
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        int $i0;
        int[] $r1;
        org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode $r2;
        org.apache.commons.math3.exception.MathInternalError $r3;
        java.lang.Throwable $r4;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        entermonitor r0;

     label1:
        $r1 = <org.apache.commons.math3.util.ResizableDoubleArray$1: int[] $SwitchMap$org$apache$commons$math3$util$ResizableDoubleArray$ExpansionMode>;

        $r2 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode expansionMode>;

        $i0 = virtualinvoke $r2.<org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode: int ordinal()>();

        $i0 = $r1[$i0];

        lookupswitch($i0)
        {
            case 1: goto label5;
            case 2: goto label7;
            default: goto label2;
        };

     label2:
        $r3 = new org.apache.commons.math3.exception.MathInternalError;

        specialinvoke $r3.<org.apache.commons.math3.exception.MathInternalError: void <init>()>();

        throw $r3;

     label3:
        $r4 := @caughtexception;

        exitmonitor r0;

     label4:
        throw $r4;

     label5:
        exitmonitor r0;

     label6:
        return 0;

     label7:
        exitmonitor r0;

     label8:
        return 1;

        catch java.lang.Throwable from label1 to label4 with label3;
        catch java.lang.Throwable from label5 to label6 with label3;
        catch java.lang.Throwable from label7 to label8 with label3;
    }
    int getInternalLength()
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        double[] $r1;
        int $i0;
        java.lang.Throwable $r2;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        entermonitor r0;

     label1:
        $r1 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray>;

        $i0 = lengthof $r1;

     label2:
        exitmonitor r0;

        return $i0;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public double[] getInternalValues()
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        java.lang.Throwable $r1;
        double[] r2;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        entermonitor r0;

     label1:
        r2 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray>;

     label2:
        exitmonitor r0;

        return r2;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public int getNumElements()
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        java.lang.Throwable $r1;
        int i0;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        entermonitor r0;

     label1:
        i0 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements>;

     label2:
        exitmonitor r0;

        return i0;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    protected int getStartIndex()
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        int i0;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        i0 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int startIndex>;

        return i0;
    }
    public int hashCode()
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        int[] r1;
        double $d0;
        java.lang.Double $r2;
        int $i0;
        org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode $r3;
        double[] $r4;
        java.lang.Throwable $r5;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        entermonitor r0;

     label1:
        r1 = newarray (int)[6];

        $d0 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double expansionFactor>;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $i0 = virtualinvoke $r2.<java.lang.Double: int hashCode()>();

        r1[0] = $i0;

        $d0 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double contractionCriterion>;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $i0 = virtualinvoke $r2.<java.lang.Double: int hashCode()>();

        r1[1] = $i0;

        $r3 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode expansionMode>;

        $i0 = virtualinvoke $r3.<org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode: int hashCode()>();

        r1[2] = $i0;

        $r4 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray>;

        $i0 = staticinvoke <java.util.Arrays: int hashCode(double[])>($r4);

        r1[3] = $i0;

        $i0 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements>;

        r1[4] = $i0;

        $i0 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int startIndex>;

        r1[5] = $i0;

        $i0 = staticinvoke <java.util.Arrays: int hashCode(int[])>(r1);

     label2:
        exitmonitor r0;

        return $i0;

     label3:
        $r5 := @caughtexception;

        exitmonitor r0;

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public void setContractionCriteria(float) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        float $f0, $f1;
        double $d0;
        java.lang.Throwable $r1;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        $f0 := @parameter0: float;

        $f1 = virtualinvoke r0.<org.apache.commons.math3.util.ResizableDoubleArray: float getExpansionFactor()>();

        virtualinvoke r0.<org.apache.commons.math3.util.ResizableDoubleArray: void checkContractExpand(float,float)>($f0, $f1);

        entermonitor r0;

        $d0 = (double) $f0;

     label1:
        r0.<org.apache.commons.math3.util.ResizableDoubleArray: double contractionCriterion> = $d0;

        exitmonitor r0;

     label2:
        return;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

     label4:
        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
    public void setElement(int, double)
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        int $i0, $i1, $i2;
        double $d0;
        java.lang.ArrayIndexOutOfBoundsException $r1;
        java.lang.Throwable $r2;
        double[] $r3;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        $i0 := @parameter0: int;

        $d0 := @parameter1: double;

        entermonitor r0;

        if $i0 >= 0 goto label3;

     label1:
        $r1 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r1.<java.lang.ArrayIndexOutOfBoundsException: void <init>(int)>($i0);

        throw $r1;

     label2:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

     label3:
        $i1 = $i0 + 1;

     label4:
        $i2 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements>;

        if $i1 <= $i2 goto label5;

        $i1 = $i0 + 1;

        r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements> = $i1;

     label5:
        $i1 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int startIndex>;

        $i1 = $i1 + $i0;

        $r3 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray>;

        $i2 = lengthof $r3;

        if $i1 < $i2 goto label6;

        $i1 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int startIndex>;

        $i2 = $i0 + 1;

        $i1 = $i1 + $i2;

        specialinvoke r0.<org.apache.commons.math3.util.ResizableDoubleArray: void expandTo(int)>($i1);

     label6:
        $r3 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray>;

        $i1 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int startIndex>;

        $i0 = $i1 + $i0;

        $r3[$i0] = $d0;

     label7:
        exitmonitor r0;

        return;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label4 to label7 with label2;
    }
    public void setExpansionFactor(float) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        float $f0;
        double $d0, $d1;
        java.lang.Throwable $r1;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        $f0 := @parameter0: float;

        $d1 = virtualinvoke r0.<org.apache.commons.math3.util.ResizableDoubleArray: double getContractionCriterion()>();

        $d0 = (double) $f0;

        virtualinvoke r0.<org.apache.commons.math3.util.ResizableDoubleArray: void checkContractExpand(double,double)>($d1, $d0);

        entermonitor r0;

        $d0 = (double) $f0;

     label1:
        r0.<org.apache.commons.math3.util.ResizableDoubleArray: double expansionFactor> = $d0;

        exitmonitor r0;

     label2:
        return;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

     label4:
        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
    public void setExpansionMode(int) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        int $i0;
        org.apache.commons.math3.exception.util.LocalizedFormats $r1;
        org.apache.commons.math3.exception.MathIllegalArgumentException $r2;
        java.lang.Object[] $r3;
        java.lang.Integer $r4;
        org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode $r5;
        java.lang.Throwable $r6;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        $i0 := @parameter0: int;

        if $i0 == 0 goto label1;

        if $i0 == 1 goto label1;

        $r2 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r1 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats UNSUPPORTED_EXPANSION_MODE>;

        $r3 = newarray (java.lang.Object)[5];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3[0] = $r4;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r3[1] = $r4;

        $r3[2] = "MULTIPLICATIVE_MODE";

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r3[3] = $r4;

        $r3[4] = "ADDITIVE_MODE";

        specialinvoke $r2.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r1, $r3);

        throw $r2;

     label1:
        entermonitor r0;

        if $i0 != 0 goto label5;

     label2:
        $r5 = <org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode: org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode MULTIPLICATIVE>;

        virtualinvoke r0.<org.apache.commons.math3.util.ResizableDoubleArray: void setExpansionMode(org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode)>($r5);

     label3:
        exitmonitor r0;

     label4:
        return;

     label5:
        if $i0 != 1 goto label3;

        $r5 = <org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode: org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode ADDITIVE>;

        virtualinvoke r0.<org.apache.commons.math3.util.ResizableDoubleArray: void setExpansionMode(org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode)>($r5);

        goto label3;

     label6:
        $r6 := @caughtexception;

        exitmonitor r0;

     label7:
        throw $r6;

        catch java.lang.Throwable from label2 to label4 with label6;
        catch java.lang.Throwable from label5 to label7 with label6;
    }
    public void setExpansionMode(org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode)
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode $r1;
        java.lang.Throwable $r2;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        $r1 := @parameter0: org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode;

        entermonitor r0;

     label1:
        r0.<org.apache.commons.math3.util.ResizableDoubleArray: org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode expansionMode> = $r1;

        exitmonitor r0;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

     label4:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
    protected void setInitialCapacity(int) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        $i0 := @parameter0: int;

        return;
    }
    public void setNumElements(int) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        int $i0, i1, $i2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r1;
        java.lang.Integer $r2;
        org.apache.commons.math3.exception.MathIllegalArgumentException $r3;
        java.lang.Object[] $r4;
        java.lang.Throwable $r5;
        double[] $r6;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        $i0 := @parameter0: int;

        entermonitor r0;

        if $i0 >= 0 goto label3;

     label1:
        $r3 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r1 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INDEX_NOT_POSITIVE>;

        $r4 = newarray (java.lang.Object)[1];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r4[0] = $r2;

        specialinvoke $r3.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r1, $r4);

        throw $r3;

     label2:
        $r5 := @caughtexception;

        exitmonitor r0;

        throw $r5;

     label3:
        i1 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int startIndex>;

        i1 = i1 + $i0;

        $r6 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray>;

        $i2 = lengthof $r6;

        if i1 <= $i2 goto label4;

        specialinvoke r0.<org.apache.commons.math3.util.ResizableDoubleArray: void expandTo(int)>(i1);

     label4:
        r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements> = $i0;

     label5:
        exitmonitor r0;

        return;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label5 with label2;
    }
    public int start()
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        java.lang.Throwable $r1;
        int i0;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        entermonitor r0;

     label1:
        i0 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int startIndex>;

     label2:
        exitmonitor r0;

        return i0;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public double substituteMostRecentElement(double) throws org.apache.commons.math3.exception.MathIllegalStateException
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        double $d0, d1;
        int i0, $i1;
        org.apache.commons.math3.exception.MathIllegalStateException $r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        java.lang.Object[] $r3;
        java.lang.Throwable $r4;
        double[] $r5;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        $d0 := @parameter0: double;

        entermonitor r0;

     label1:
        i0 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements>;

        if i0 >= 1 goto label3;

        $r1 = new org.apache.commons.math3.exception.MathIllegalStateException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY>;

        $r3 = newarray (java.lang.Object)[0];

        specialinvoke $r1.<org.apache.commons.math3.exception.MathIllegalStateException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r2, $r3);

        throw $r1;

     label2:
        $r4 := @caughtexception;

        exitmonitor r0;

        throw $r4;

     label3:
        i0 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int startIndex>;

        $i1 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements>;

        $i1 = $i1 + -1;

        i0 = i0 + $i1;

        $r5 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray>;

        d1 = $r5[i0];

        $r5 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray>;

        $r5[i0] = $d0;

     label4:
        exitmonitor r0;

        return d1;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }
