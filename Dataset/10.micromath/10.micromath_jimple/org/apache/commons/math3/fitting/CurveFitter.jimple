org.apache.commons.math3.fitting.CurveFitter extends java.lang.Object
private final java.util.List observations
private final org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer optimizer
    public void <init>(org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer)
    {
        org.apache.commons.math3.fitting.CurveFitter r0;
        org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer $r1;
        java.util.ArrayList $r2;

        r0 := @this: org.apache.commons.math3.fitting.CurveFitter;

        $r1 := @parameter0: org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.fitting.CurveFitter: org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer optimizer> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.math3.fitting.CurveFitter: java.util.List observations> = $r2;

        return;
    }
    static java.util.List access$000(org.apache.commons.math3.fitting.CurveFitter)
    {
        org.apache.commons.math3.fitting.CurveFitter $r0;
        java.util.List r1;

        $r0 := @parameter0: org.apache.commons.math3.fitting.CurveFitter;

        r1 = $r0.<org.apache.commons.math3.fitting.CurveFitter: java.util.List observations>;

        return r1;
    }
    public void addObservedPoint(double, double)
    {
        org.apache.commons.math3.fitting.CurveFitter r0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.fitting.CurveFitter;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        virtualinvoke r0.<org.apache.commons.math3.fitting.CurveFitter: void addObservedPoint(double,double,double)>(1.0, $d0, $d1);

        return;
    }
    public void addObservedPoint(double, double, double)
    {
        org.apache.commons.math3.fitting.CurveFitter r0;
        double $d0, $d1, $d2;
        java.util.List $r1;
        org.apache.commons.math3.fitting.WeightedObservedPoint $r2;

        r0 := @this: org.apache.commons.math3.fitting.CurveFitter;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $r1 = r0.<org.apache.commons.math3.fitting.CurveFitter: java.util.List observations>;

        $r2 = new org.apache.commons.math3.fitting.WeightedObservedPoint;

        specialinvoke $r2.<org.apache.commons.math3.fitting.WeightedObservedPoint: void <init>(double,double,double)>($d0, $d1, $d2);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2);

        return;
    }
    public void addObservedPoint(org.apache.commons.math3.fitting.WeightedObservedPoint)
    {
        org.apache.commons.math3.fitting.CurveFitter r0;
        org.apache.commons.math3.fitting.WeightedObservedPoint $r1;
        java.util.List $r2;

        r0 := @this: org.apache.commons.math3.fitting.CurveFitter;

        $r1 := @parameter0: org.apache.commons.math3.fitting.WeightedObservedPoint;

        $r2 = r0.<org.apache.commons.math3.fitting.CurveFitter: java.util.List observations>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r1);

        return;
    }
    public void clearObservations()
    {
        org.apache.commons.math3.fitting.CurveFitter r0;
        java.util.List $r1;

        r0 := @this: org.apache.commons.math3.fitting.CurveFitter;

        $r1 = r0.<org.apache.commons.math3.fitting.CurveFitter: java.util.List observations>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        return;
    }
    public double[] fit(int, org.apache.commons.math3.analysis.ParametricUnivariateFunction, double[])
    {
        org.apache.commons.math3.fitting.CurveFitter r0;
        int $i0, $i1;
        org.apache.commons.math3.analysis.ParametricUnivariateFunction r1;
        double[] $r2, r4, r5;
        org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction r3;
        java.util.List $r6;
        java.util.Iterator $r7;
        boolean $z0;
        java.lang.Object $r8;
        org.apache.commons.math3.fitting.WeightedObservedPoint r9;
        double $d0;
        org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer $r10;
        org.apache.commons.math3.optim.OptimizationData[] $r11;
        org.apache.commons.math3.optim.MaxEval $r12;
        org.apache.commons.math3.optim.nonlinear.vector.ModelFunction $r13;
        org.apache.commons.math3.optim.nonlinear.vector.ModelFunctionJacobian $r14;
        org.apache.commons.math3.optim.nonlinear.vector.Target $r15;
        org.apache.commons.math3.optim.nonlinear.vector.Weight $r16;
        org.apache.commons.math3.optim.InitialGuess $r17;
        org.apache.commons.math3.optim.PointVectorValuePair $r18;

        r0 := @this: org.apache.commons.math3.fitting.CurveFitter;

        $i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.analysis.ParametricUnivariateFunction;

        $r2 := @parameter2: double[];

        $r6 = r0.<org.apache.commons.math3.fitting.CurveFitter: java.util.List observations>;

        $i1 = interfaceinvoke $r6.<java.util.List: int size()>();

        r4 = newarray (double)[$i1];

        $r6 = r0.<org.apache.commons.math3.fitting.CurveFitter: java.util.List observations>;

        $i1 = interfaceinvoke $r6.<java.util.List: int size()>();

        r5 = newarray (double)[$i1];

        $i1 = 0;

        $r6 = r0.<org.apache.commons.math3.fitting.CurveFitter: java.util.List observations>;

        $r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (org.apache.commons.math3.fitting.WeightedObservedPoint) $r8;

        $d0 = virtualinvoke r9.<org.apache.commons.math3.fitting.WeightedObservedPoint: double getY()>();

        r4[$i1] = $d0;

        $d0 = virtualinvoke r9.<org.apache.commons.math3.fitting.WeightedObservedPoint: double getWeight()>();

        r5[$i1] = $d0;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        r3 = new org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction;

        specialinvoke r3.<org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction: void <init>(org.apache.commons.math3.fitting.CurveFitter,org.apache.commons.math3.analysis.ParametricUnivariateFunction)>(r0, r1);

        $r10 = r0.<org.apache.commons.math3.fitting.CurveFitter: org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer optimizer>;

        $r11 = newarray (org.apache.commons.math3.optim.OptimizationData)[6];

        $r12 = new org.apache.commons.math3.optim.MaxEval;

        specialinvoke $r12.<org.apache.commons.math3.optim.MaxEval: void <init>(int)>($i0);

        $r11[0] = $r12;

        $r13 = virtualinvoke r3.<org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction: org.apache.commons.math3.optim.nonlinear.vector.ModelFunction getModelFunction()>();

        $r11[1] = $r13;

        $r14 = virtualinvoke r3.<org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction: org.apache.commons.math3.optim.nonlinear.vector.ModelFunctionJacobian getModelFunctionJacobian()>();

        $r11[2] = $r14;

        $r15 = new org.apache.commons.math3.optim.nonlinear.vector.Target;

        specialinvoke $r15.<org.apache.commons.math3.optim.nonlinear.vector.Target: void <init>(double[])>(r4);

        $r11[3] = $r15;

        $r16 = new org.apache.commons.math3.optim.nonlinear.vector.Weight;

        specialinvoke $r16.<org.apache.commons.math3.optim.nonlinear.vector.Weight: void <init>(double[])>(r5);

        $r11[4] = $r16;

        $r17 = new org.apache.commons.math3.optim.InitialGuess;

        specialinvoke $r17.<org.apache.commons.math3.optim.InitialGuess: void <init>(double[])>($r2);

        $r11[5] = $r17;

        $r18 = virtualinvoke $r10.<org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer: org.apache.commons.math3.optim.PointVectorValuePair optimize(org.apache.commons.math3.optim.OptimizationData[])>($r11);

        $r2 = virtualinvoke $r18.<org.apache.commons.math3.optim.PointVectorValuePair: double[] getPointRef()>();

        return $r2;
    }
    public double[] fit(org.apache.commons.math3.analysis.ParametricUnivariateFunction, double[])
    {
        org.apache.commons.math3.fitting.CurveFitter r0;
        org.apache.commons.math3.analysis.ParametricUnivariateFunction r1;
        double[] $r2;

        r0 := @this: org.apache.commons.math3.fitting.CurveFitter;

        r1 := @parameter0: org.apache.commons.math3.analysis.ParametricUnivariateFunction;

        $r2 := @parameter1: double[];

        $r2 = virtualinvoke r0.<org.apache.commons.math3.fitting.CurveFitter: double[] fit(int,org.apache.commons.math3.analysis.ParametricUnivariateFunction,double[])>(2147483647, r1, $r2);

        return $r2;
    }
    public org.apache.commons.math3.fitting.WeightedObservedPoint[] getObservations()
    {
        org.apache.commons.math3.fitting.CurveFitter r0;
        java.util.List $r1, $r2;
        int $i0;
        org.apache.commons.math3.fitting.WeightedObservedPoint[] $r3;
        java.lang.Object[] $r4;

        r0 := @this: org.apache.commons.math3.fitting.CurveFitter;

        $r1 = r0.<org.apache.commons.math3.fitting.CurveFitter: java.util.List observations>;

        $r2 = r0.<org.apache.commons.math3.fitting.CurveFitter: java.util.List observations>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $r3 = newarray (org.apache.commons.math3.fitting.WeightedObservedPoint)[$i0];

        $r4 = interfaceinvoke $r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r3 = (org.apache.commons.math3.fitting.WeightedObservedPoint[]) $r4;

        return $r3;
    }
