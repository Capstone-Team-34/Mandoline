org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer extends java.lang.Object implements org.apache.commons.math3.fitting.leastsquares.LeastSquaresOptimizer
private static final double SINGULARITY_THRESHOLD
private final org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer$Decomposition decomposition
    public void <init>()
    {
        org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer r0;
        org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer$Decomposition $r1;

        r0 := @this: org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer;

        $r1 = <org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer$Decomposition: org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer$Decomposition QR>;

        specialinvoke r0.<org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer: void <init>(org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer$Decomposition)>($r1);

        return;
    }
    public void <init>(org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer$Decomposition)
    {
        org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer r0;
        org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer$Decomposition $r1;

        r0 := @this: org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer;

        $r1 := @parameter0: org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer$Decomposition;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer: org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer$Decomposition decomposition> = $r1;

        return;
    }
    static org.apache.commons.math3.util.Pair access$100(org.apache.commons.math3.linear.RealMatrix, org.apache.commons.math3.linear.RealVector)
    {
        org.apache.commons.math3.linear.RealMatrix $r0;
        org.apache.commons.math3.linear.RealVector $r1;
        org.apache.commons.math3.util.Pair $r2;

        $r0 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        $r1 := @parameter1: org.apache.commons.math3.linear.RealVector;

        $r2 = staticinvoke <org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer: org.apache.commons.math3.util.Pair computeNormalMatrix(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)>($r0, $r1);

        return $r2;
    }
    private static org.apache.commons.math3.util.Pair computeNormalMatrix(org.apache.commons.math3.linear.RealMatrix, org.apache.commons.math3.linear.RealVector)
    {
        org.apache.commons.math3.linear.RealMatrix $r0, $r3;
        org.apache.commons.math3.linear.RealVector $r1;
        org.apache.commons.math3.linear.ArrayRealVector r2;
        int $i0, $i1, i2, i3, i4;
        double $d0, $d1, $d2;
        org.apache.commons.math3.util.Pair $r4;

        $r0 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        $r1 := @parameter1: org.apache.commons.math3.linear.RealVector;

        $i0 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $i1 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        $r3 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix createRealMatrix(int,int)>($i1, $i1);

        r2 = new org.apache.commons.math3.linear.ArrayRealVector;

        specialinvoke r2.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(int)>($i1);

        i2 = 0;

     label01:
        if i2 >= $i0 goto label08;

        i3 = 0;

     label02:
        if i3 >= $i1 goto label03;

        $d0 = virtualinvoke r2.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>(i3);

        $d1 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>(i2);

        $d2 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>(i2, i3);

        $d1 = $d1 * $d2;

        $d0 = $d0 + $d1;

        virtualinvoke r2.<org.apache.commons.math3.linear.RealVector: void setEntry(int,double)>(i3, $d0);

        i3 = i3 + 1;

        goto label02;

     label03:
        i3 = 0;

     label04:
        if i3 >= $i1 goto label07;

        i4 = i3;

     label05:
        if i4 >= $i1 goto label06;

        $d0 = interfaceinvoke $r3.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>(i3, i4);

        $d1 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>(i2, i3);

        $d2 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>(i2, i4);

        $d1 = $d1 * $d2;

        $d0 = $d0 + $d1;

        interfaceinvoke $r3.<org.apache.commons.math3.linear.RealMatrix: void setEntry(int,int,double)>(i3, i4, $d0);

        i4 = i4 + 1;

        goto label05;

     label06:
        i3 = i3 + 1;

        goto label04;

     label07:
        i2 = i2 + 1;

        goto label01;

     label08:
        $i0 = 0;

     label09:
        if $i0 >= $i1 goto label12;

        i2 = 0;

     label10:
        if i2 >= $i0 goto label11;

        $d0 = interfaceinvoke $r3.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>(i2, $i0);

        interfaceinvoke $r3.<org.apache.commons.math3.linear.RealMatrix: void setEntry(int,int,double)>($i0, i2, $d0);

        i2 = i2 + 1;

        goto label10;

     label11:
        $i0 = $i0 + 1;

        goto label09;

     label12:
        $r4 = new org.apache.commons.math3.util.Pair;

        specialinvoke $r4.<org.apache.commons.math3.util.Pair: void <init>(java.lang.Object,java.lang.Object)>($r3, r2);

        return $r4;
    }
    public org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer$Decomposition getDecomposition()
    {
        org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer r0;
        org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer$Decomposition r1;

        r0 := @this: org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer;

        r1 = r0.<org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer: org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer$Decomposition decomposition>;

        return r1;
    }
    public org.apache.commons.math3.fitting.leastsquares.LeastSquaresOptimizer$Optimum optimize(org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem)
    {
        org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer r0;
        org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem $r1;
        org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem$Evaluation r2, r8, $r9;
        org.apache.commons.math3.util.Incrementor $r3, $r4;
        org.apache.commons.math3.optim.ConvergenceChecker $r5;
        org.apache.commons.math3.exception.NullArgumentException $r6;
        org.apache.commons.math3.linear.RealVector $r7, $r10;
        org.apache.commons.math3.linear.RealMatrix $r11;
        int $i0, $i1;
        boolean $z0;
        org.apache.commons.math3.fitting.leastsquares.OptimumImpl $r12;
        org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer$Decomposition $r13;

        r0 := @this: org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer;

        $r1 := @parameter0: org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem;

        $r3 = interfaceinvoke $r1.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem: org.apache.commons.math3.util.Incrementor getEvaluationCounter()>();

        $r4 = interfaceinvoke $r1.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem: org.apache.commons.math3.util.Incrementor getIterationCounter()>();

        $r5 = interfaceinvoke $r1.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem: org.apache.commons.math3.optim.ConvergenceChecker getConvergenceChecker()>();

        if $r5 != null goto label1;

        $r6 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r6.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r6;

     label1:
        $r7 = interfaceinvoke $r1.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem: org.apache.commons.math3.linear.RealVector getStart()>();

        r8 = null;

     label2:
        virtualinvoke $r4.<org.apache.commons.math3.util.Incrementor: void incrementCount()>();

        r2 = r8;

        virtualinvoke $r3.<org.apache.commons.math3.util.Incrementor: void incrementCount()>();

        $r9 = interfaceinvoke $r1.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem: org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem$Evaluation evaluate(org.apache.commons.math3.linear.RealVector)>($r7);

        r8 = $r9;

        $r10 = interfaceinvoke $r9.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem$Evaluation: org.apache.commons.math3.linear.RealVector getResiduals()>();

        $r11 = interfaceinvoke $r9.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem$Evaluation: org.apache.commons.math3.linear.RealMatrix getJacobian()>();

        $r7 = interfaceinvoke $r9.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem$Evaluation: org.apache.commons.math3.linear.RealVector getPoint()>();

        if r2 == null goto label3;

        $i0 = virtualinvoke $r4.<org.apache.commons.math3.util.Incrementor: int getCount()>();

        $z0 = interfaceinvoke $r5.<org.apache.commons.math3.optim.ConvergenceChecker: boolean converged(int,java.lang.Object,java.lang.Object)>($i0, r2, $r9);

        if $z0 == 0 goto label3;

        $r12 = new org.apache.commons.math3.fitting.leastsquares.OptimumImpl;

        $i0 = virtualinvoke $r3.<org.apache.commons.math3.util.Incrementor: int getCount()>();

        $i1 = virtualinvoke $r4.<org.apache.commons.math3.util.Incrementor: int getCount()>();

        specialinvoke $r12.<org.apache.commons.math3.fitting.leastsquares.OptimumImpl: void <init>(org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem$Evaluation,int,int)>($r9, $i0, $i1);

        return $r12;

     label3:
        $r13 = r0.<org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer: org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer$Decomposition decomposition>;

        $r10 = virtualinvoke $r13.<org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer$Decomposition: org.apache.commons.math3.linear.RealVector solve(org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealVector)>($r11, $r10);

        $r7 = virtualinvoke $r7.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector add(org.apache.commons.math3.linear.RealVector)>($r10);

        goto label2;
    }
    public java.lang.String toString()
    {
        org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer r0;
        java.lang.StringBuilder $r1;
        org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer$Decomposition $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("GaussNewtonOptimizer{decomposition=");

        $r2 = r0.<org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer: org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer$Decomposition decomposition>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }
    public org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer withDecomposition(org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer$Decomposition)
    {
        org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer r0;
        org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer$Decomposition $r1;

        r0 := @this: org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer;

        $r1 := @parameter0: org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer$Decomposition;

        r0 = new org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer;

        specialinvoke r0.<org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer: void <init>(org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer$Decomposition)>($r1);

        return r0;
    }
