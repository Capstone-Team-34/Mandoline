org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser extends java.lang.Object
private final double mean
private final double norm
private final double sigma
    public void <init>(org.apache.commons.math3.fitting.WeightedObservedPoint[])
    {
        org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser r0;
        org.apache.commons.math3.fitting.WeightedObservedPoint[] $r1;
        org.apache.commons.math3.exception.NullArgumentException $r2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3;
        java.lang.Object[] $r4;
        int $i0;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r5;
        java.lang.Integer $r6, $r7;
        double[] $r8;
        double $d0;

        r0 := @this: org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser;

        $r1 := @parameter0: org.apache.commons.math3.fitting.WeightedObservedPoint[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if $r1 != null goto label1;

        $r2 = new org.apache.commons.math3.exception.NullArgumentException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INPUT_ARRAY>;

        $r4 = newarray (java.lang.Object)[0];

        specialinvoke $r2.<org.apache.commons.math3.exception.NullArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r3, $r4);

        throw $r2;

     label1:
        $i0 = lengthof $r1;

        if $i0 >= 3 goto label2;

        $r5 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $i0 = lengthof $r1;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        specialinvoke $r5.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r6, $r7, 1);

        throw $r5;

     label2:
        $r1 = specialinvoke r0.<org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser: org.apache.commons.math3.fitting.WeightedObservedPoint[] sortObservations(org.apache.commons.math3.fitting.WeightedObservedPoint[])>($r1);

        $r8 = specialinvoke r0.<org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser: double[] basicGuess(org.apache.commons.math3.fitting.WeightedObservedPoint[])>($r1);

        $d0 = $r8[0];

        r0.<org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser: double norm> = $d0;

        $d0 = $r8[1];

        r0.<org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser: double mean> = $d0;

        $d0 = $r8[2];

        r0.<org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser: double sigma> = $d0;

        return;
    }
    private double[] basicGuess(org.apache.commons.math3.fitting.WeightedObservedPoint[])
    {
        org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser r0;
        org.apache.commons.math3.fitting.WeightedObservedPoint[] $r1;
        double d0, d1, $d2, $d3;
        org.apache.commons.math3.exception.OutOfRangeException r2;
        int $i0;
        org.apache.commons.math3.fitting.WeightedObservedPoint $r3;
        double[] $r4;

        r0 := @this: org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser;

        $r1 := @parameter0: org.apache.commons.math3.fitting.WeightedObservedPoint[];

        $i0 = specialinvoke r0.<org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser: int findMaxY(org.apache.commons.math3.fitting.WeightedObservedPoint[])>($r1);

        $r3 = $r1[$i0];

        $d2 = virtualinvoke $r3.<org.apache.commons.math3.fitting.WeightedObservedPoint: double getY()>();

        $r3 = $r1[$i0];

        $d3 = virtualinvoke $r3.<org.apache.commons.math3.fitting.WeightedObservedPoint: double getX()>();

        d1 = $d3 - $d2;

        d1 = d1 / 2.0;

        d0 = $d2 + d1;

     label1:
        d1 = specialinvoke r0.<org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser: double interpolateXAtY(org.apache.commons.math3.fitting.WeightedObservedPoint[],int,int,double)>($r1, $i0, -1, d0);

        d0 = specialinvoke r0.<org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser: double interpolateXAtY(org.apache.commons.math3.fitting.WeightedObservedPoint[],int,int,double)>($r1, $i0, 1, d0);

     label2:
        d1 = d0 - d1;

     label3:
        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(2.0);

        d0 = 2.0 * d0;

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d0);

        d0 = 2.0 * d0;

        d1 = d1 / d0;

        $r4 = newarray (double)[3];

        $r4[0] = $d2;

        $r4[1] = $d3;

        $r4[2] = d1;

        return $r4;

     label4:
        r2 := @caughtexception;

        $i0 = lengthof $r1;

        $i0 = $i0 + -1;

        $r3 = $r1[$i0];

        d1 = virtualinvoke $r3.<org.apache.commons.math3.fitting.WeightedObservedPoint: double getX()>();

        $r3 = $r1[0];

        d0 = virtualinvoke $r3.<org.apache.commons.math3.fitting.WeightedObservedPoint: double getX()>();

        d1 = d1 - d0;

        goto label3;

        catch org.apache.commons.math3.exception.OutOfRangeException from label1 to label2 with label4;
    }
    private int findMaxY(org.apache.commons.math3.fitting.WeightedObservedPoint[])
    {
        org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser r0;
        org.apache.commons.math3.fitting.WeightedObservedPoint[] $r1;
        int i0, i1, $i2;
        org.apache.commons.math3.fitting.WeightedObservedPoint $r2;
        double $d0, $d1;
        byte $b3;

        r0 := @this: org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser;

        $r1 := @parameter0: org.apache.commons.math3.fitting.WeightedObservedPoint[];

        i0 = 0;

        i1 = 1;

     label1:
        $i2 = lengthof $r1;

        if i1 >= $i2 goto label3;

        $r2 = $r1[i1];

        $d0 = virtualinvoke $r2.<org.apache.commons.math3.fitting.WeightedObservedPoint: double getY()>();

        $r2 = $r1[i0];

        $d1 = virtualinvoke $r2.<org.apache.commons.math3.fitting.WeightedObservedPoint: double getY()>();

        $b3 = $d0 cmpl $d1;

        if $b3 <= 0 goto label2;

        i0 = i1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return i0;
    }
    private org.apache.commons.math3.fitting.WeightedObservedPoint[] getInterpolationPointsForY(org.apache.commons.math3.fitting.WeightedObservedPoint[], int, int, double) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser r0;
        org.apache.commons.math3.fitting.WeightedObservedPoint[] $r1;
        int $i0, $i1, $i2, $i3;
        double $d0, $d1, $d2;
        org.apache.commons.math3.fitting.WeightedObservedPoint r2, r3;
        org.apache.commons.math3.exception.ZeroException $r4;
        boolean $z0;
        org.apache.commons.math3.exception.OutOfRangeException $r5;
        java.lang.Double $r6, $r7, $r8;

        r0 := @this: org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser;

        $r1 := @parameter0: org.apache.commons.math3.fitting.WeightedObservedPoint[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $d0 := @parameter3: double;

        if $i1 != 0 goto label1;

        $r4 = new org.apache.commons.math3.exception.ZeroException;

        specialinvoke $r4.<org.apache.commons.math3.exception.ZeroException: void <init>()>();

        throw $r4;

     label1:
        if $i1 >= 0 goto label3;

        $i2 = $i0 + $i1;

        if $i2 < 0 goto label4;

     label2:
        r2 = $r1[$i0];

        $i2 = $i0 + $i1;

        r3 = $r1[$i2];

        $d1 = virtualinvoke r2.<org.apache.commons.math3.fitting.WeightedObservedPoint: double getY()>();

        $d2 = virtualinvoke r3.<org.apache.commons.math3.fitting.WeightedObservedPoint: double getY()>();

        $z0 = specialinvoke r0.<org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser: boolean isBetween(double,double,double)>($d0, $d1, $d2);

        if $z0 == 0 goto label6;

        if $i1 >= 0 goto label5;

        $r1 = newarray (org.apache.commons.math3.fitting.WeightedObservedPoint)[2];

        $r1[0] = r3;

        $r1[1] = r2;

        return $r1;

     label3:
        $i2 = $i0 + $i1;

        $i3 = lengthof $r1;

        if $i2 < $i3 goto label2;

     label4:
        $r5 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(#-Infinity);

        $r8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(#Infinity);

        specialinvoke $r5.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r6, $r7, $r8);

        throw $r5;

     label5:
        $r1 = newarray (org.apache.commons.math3.fitting.WeightedObservedPoint)[2];

        $r1[0] = r2;

        $r1[1] = r3;

        return $r1;

     label6:
        $i0 = $i0 + $i1;

        goto label1;
    }
    private double interpolateXAtY(org.apache.commons.math3.fitting.WeightedObservedPoint[], int, int, double) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser r0;
        org.apache.commons.math3.fitting.WeightedObservedPoint[] $r1;
        int $i0, $i1;
        double $d0, $d1, $d2, $d3;
        org.apache.commons.math3.fitting.WeightedObservedPoint r2, r3;
        org.apache.commons.math3.exception.ZeroException $r4;
        byte $b2;

        r0 := @this: org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser;

        $r1 := @parameter0: org.apache.commons.math3.fitting.WeightedObservedPoint[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $d0 := @parameter3: double;

        if $i1 != 0 goto label1;

        $r4 = new org.apache.commons.math3.exception.ZeroException;

        specialinvoke $r4.<org.apache.commons.math3.exception.ZeroException: void <init>()>();

        throw $r4;

     label1:
        $r1 = specialinvoke r0.<org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser: org.apache.commons.math3.fitting.WeightedObservedPoint[] getInterpolationPointsForY(org.apache.commons.math3.fitting.WeightedObservedPoint[],int,int,double)>($r1, $i0, $i1, $d0);

        r2 = $r1[0];

        r3 = $r1[1];

        $d1 = virtualinvoke r2.<org.apache.commons.math3.fitting.WeightedObservedPoint: double getY()>();

        $b2 = $d1 cmpl $d0;

        if $b2 != 0 goto label2;

        $d0 = virtualinvoke r2.<org.apache.commons.math3.fitting.WeightedObservedPoint: double getX()>();

        return $d0;

     label2:
        $d1 = virtualinvoke r3.<org.apache.commons.math3.fitting.WeightedObservedPoint: double getY()>();

        $b2 = $d1 cmpl $d0;

        if $b2 != 0 goto label3;

        $d0 = virtualinvoke r3.<org.apache.commons.math3.fitting.WeightedObservedPoint: double getX()>();

        return $d0;

     label3:
        $d1 = virtualinvoke r2.<org.apache.commons.math3.fitting.WeightedObservedPoint: double getX()>();

        $d2 = virtualinvoke r2.<org.apache.commons.math3.fitting.WeightedObservedPoint: double getY()>();

        $d0 = $d0 - $d2;

        $d2 = virtualinvoke r3.<org.apache.commons.math3.fitting.WeightedObservedPoint: double getX()>();

        $d3 = virtualinvoke r2.<org.apache.commons.math3.fitting.WeightedObservedPoint: double getX()>();

        $d2 = $d2 - $d3;

        $d0 = $d0 * $d2;

        $d2 = virtualinvoke r3.<org.apache.commons.math3.fitting.WeightedObservedPoint: double getY()>();

        $d3 = virtualinvoke r2.<org.apache.commons.math3.fitting.WeightedObservedPoint: double getY()>();

        $d2 = $d2 - $d3;

        $d0 = $d0 / $d2;

        $d0 = $d1 + $d0;

        return $d0;
    }
    private boolean isBetween(double, double, double)
    {
        org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser r0;
        double $d0, $d1, $d2;
        byte $b0;

        r0 := @this: org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $b0 = $d0 cmpl $d1;

        if $b0 < 0 goto label1;

        $b0 = $d0 cmpg $d2;

        if $b0 <= 0 goto label2;

     label1:
        $b0 = $d0 cmpl $d2;

        if $b0 < 0 goto label3;

        $b0 = $d0 cmpg $d1;

        if $b0 > 0 goto label3;

     label2:
        return 1;

     label3:
        return 0;
    }
    private org.apache.commons.math3.fitting.WeightedObservedPoint[] sortObservations(org.apache.commons.math3.fitting.WeightedObservedPoint[])
    {
        org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser r0;
        org.apache.commons.math3.fitting.WeightedObservedPoint[] $r1;
        org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser$1 r2;
        java.lang.Object $r3;

        r0 := @this: org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser;

        $r1 := @parameter0: org.apache.commons.math3.fitting.WeightedObservedPoint[];

        $r3 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r1 = (org.apache.commons.math3.fitting.WeightedObservedPoint[]) $r3;

        r2 = new org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser$1;

        specialinvoke r2.<org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser$1: void <init>(org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser)>(r0);

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>($r1, r2);

        return $r1;
    }
    public double[] guess()
    {
        org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser r0;
        double[] $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser;

        $r1 = newarray (double)[3];

        $d0 = r0.<org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser: double norm>;

        $r1[0] = $d0;

        $d0 = r0.<org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser: double mean>;

        $r1[1] = $d0;

        $d0 = r0.<org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser: double sigma>;

        $r1[2] = $d0;

        return $r1;
    }
