org.apache.commons.math3.fitting.leastsquares.AbstractEvaluation extends java.lang.Object implements org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem$Evaluation
private final int observationSize
    void <init>(int)
    {
        org.apache.commons.math3.fitting.leastsquares.AbstractEvaluation r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.fitting.leastsquares.AbstractEvaluation;

        $i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.fitting.leastsquares.AbstractEvaluation: int observationSize> = $i0;

        return;
    }
    public double getCost()
    {
        org.apache.commons.math3.fitting.leastsquares.AbstractEvaluation r0;
        org.apache.commons.math3.linear.ArrayRealVector r1;
        org.apache.commons.math3.linear.RealVector $r2;
        double $d0;

        r0 := @this: org.apache.commons.math3.fitting.leastsquares.AbstractEvaluation;

        r1 = new org.apache.commons.math3.linear.ArrayRealVector;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.fitting.leastsquares.AbstractEvaluation: org.apache.commons.math3.linear.RealVector getResiduals()>();

        specialinvoke r1.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(org.apache.commons.math3.linear.RealVector)>($r2);

        $d0 = virtualinvoke r1.<org.apache.commons.math3.linear.ArrayRealVector: double dotProduct(org.apache.commons.math3.linear.RealVector)>(r1);

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d0);

        return $d0;
    }
    public org.apache.commons.math3.linear.RealMatrix getCovariances(double)
    {
        org.apache.commons.math3.fitting.leastsquares.AbstractEvaluation r0;
        double $d0;
        org.apache.commons.math3.linear.RealMatrix $r1, $r2;
        org.apache.commons.math3.linear.QRDecomposition $r3;
        org.apache.commons.math3.linear.DecompositionSolver $r4;

        r0 := @this: org.apache.commons.math3.fitting.leastsquares.AbstractEvaluation;

        $d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.fitting.leastsquares.AbstractEvaluation: org.apache.commons.math3.linear.RealMatrix getJacobian()>();

        $r2 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix transpose()>();

        $r1 = interfaceinvoke $r2.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>($r1);

        $r3 = new org.apache.commons.math3.linear.QRDecomposition;

        specialinvoke $r3.<org.apache.commons.math3.linear.QRDecomposition: void <init>(org.apache.commons.math3.linear.RealMatrix,double)>($r1, $d0);

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.linear.QRDecomposition: org.apache.commons.math3.linear.DecompositionSolver getSolver()>();

        $r1 = interfaceinvoke $r4.<org.apache.commons.math3.linear.DecompositionSolver: org.apache.commons.math3.linear.RealMatrix getInverse()>();

        return $r1;
    }
    public double getRMS()
    {
        org.apache.commons.math3.fitting.leastsquares.AbstractEvaluation r0;
        double $d0, $d1;
        int $i0;

        r0 := @this: org.apache.commons.math3.fitting.leastsquares.AbstractEvaluation;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.fitting.leastsquares.AbstractEvaluation: double getCost()>();

        $d0 = $d0 * $d0;

        $i0 = r0.<org.apache.commons.math3.fitting.leastsquares.AbstractEvaluation: int observationSize>;

        $d1 = (double) $i0;

        $d0 = $d0 / $d1;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d0);

        return $d0;
    }
    public org.apache.commons.math3.linear.RealVector getSigma(double)
    {
        org.apache.commons.math3.fitting.leastsquares.AbstractEvaluation r0;
        double $d0;
        org.apache.commons.math3.linear.ArrayRealVector r1;
        org.apache.commons.math3.linear.RealMatrix $r2;
        int $i0, i1;

        r0 := @this: org.apache.commons.math3.fitting.leastsquares.AbstractEvaluation;

        $d0 := @parameter0: double;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.fitting.leastsquares.AbstractEvaluation: org.apache.commons.math3.linear.RealMatrix getCovariances(double)>($d0);

        $i0 = interfaceinvoke $r2.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        r1 = new org.apache.commons.math3.linear.ArrayRealVector;

        specialinvoke r1.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(int)>($i0);

        i1 = 0;

     label1:
        if i1 >= $i0 goto label2;

        $d0 = interfaceinvoke $r2.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>(i1, i1);

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d0);

        virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: void setEntry(int,double)>(i1, $d0);

        i1 = i1 + 1;

        goto label1;

     label2:
        return r1;
    }
