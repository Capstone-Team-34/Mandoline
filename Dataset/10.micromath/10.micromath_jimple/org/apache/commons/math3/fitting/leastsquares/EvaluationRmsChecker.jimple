org.apache.commons.math3.fitting.leastsquares.EvaluationRmsChecker extends java.lang.Object implements org.apache.commons.math3.optim.ConvergenceChecker
private final double absTol
private final double relTol
    public void <init>(double)
    {
        org.apache.commons.math3.fitting.leastsquares.EvaluationRmsChecker r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.fitting.leastsquares.EvaluationRmsChecker;

        $d0 := @parameter0: double;

        specialinvoke r0.<org.apache.commons.math3.fitting.leastsquares.EvaluationRmsChecker: void <init>(double,double)>($d0, $d0);

        return;
    }
    public void <init>(double, double)
    {
        org.apache.commons.math3.fitting.leastsquares.EvaluationRmsChecker r0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.fitting.leastsquares.EvaluationRmsChecker;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.fitting.leastsquares.EvaluationRmsChecker: double relTol> = $d0;

        r0.<org.apache.commons.math3.fitting.leastsquares.EvaluationRmsChecker: double absTol> = $d1;

        return;
    }
    public volatile boolean converged(int, java.lang.Object, java.lang.Object)
    {
        org.apache.commons.math3.fitting.leastsquares.EvaluationRmsChecker r0;
        int $i0;
        boolean $z0;
        java.lang.Object $r1, $r2;
        org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem$Evaluation $r3, $r4;

        r0 := @this: org.apache.commons.math3.fitting.leastsquares.EvaluationRmsChecker;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.lang.Object;

        $r3 = (org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem$Evaluation) $r1;

        $r4 = (org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem$Evaluation) $r2;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.fitting.leastsquares.EvaluationRmsChecker: boolean converged(int,org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem$Evaluation,org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem$Evaluation)>($i0, $r3, $r4);

        return $z0;
    }
    public boolean converged(int, org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem$Evaluation, org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem$Evaluation)
    {
        org.apache.commons.math3.fitting.leastsquares.EvaluationRmsChecker r0;
        int $i0;
        org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem$Evaluation $r1, $r2;
        double $d0, $d1, $d2;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.fitting.leastsquares.EvaluationRmsChecker;

        $i0 := @parameter0: int;

        $r1 := @parameter1: org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem$Evaluation;

        $r2 := @parameter2: org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem$Evaluation;

        $d0 = interfaceinvoke $r1.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem$Evaluation: double getRMS()>();

        $d1 = interfaceinvoke $r2.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem$Evaluation: double getRMS()>();

        $d2 = r0.<org.apache.commons.math3.fitting.leastsquares.EvaluationRmsChecker: double absTol>;

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,double)>($d0, $d1, $d2);

        if $z0 != 0 goto label1;

        $d2 = r0.<org.apache.commons.math3.fitting.leastsquares.EvaluationRmsChecker: double relTol>;

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equalsWithRelativeTolerance(double,double,double)>($d0, $d1, $d2);

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
