org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer extends java.lang.Object implements org.apache.commons.math3.fitting.leastsquares.LeastSquaresOptimizer
private static final double TWO_EPS
private final double costRelativeTolerance
private final double initialStepBoundFactor
private final double orthoTolerance
private final double parRelativeTolerance
private final double qrRankingThreshold
    static void <clinit>()
    {
        double $d0;

        $d0 = <org.apache.commons.math3.util.Precision: double EPSILON>;

        $d0 = 2.0 * $d0;

        <org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double TWO_EPS> = $d0;

        return;
    }
    public void <init>()
    {
        org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer;

        $d0 = <org.apache.commons.math3.util.Precision: double SAFE_MIN>;

        specialinvoke r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: void <init>(double,double,double,double,double)>(100.0, 1.0E-10, 1.0E-10, 1.0E-10, $d0);

        return;
    }
    public void <init>(double, double, double, double, double)
    {
        org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer r0;
        double $d0, $d1, $d2, $d3, $d4;

        r0 := @this: org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $d3 := @parameter3: double;

        $d4 := @parameter4: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double initialStepBoundFactor> = $d0;

        r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double costRelativeTolerance> = $d1;

        r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double parRelativeTolerance> = $d2;

        r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double orthoTolerance> = $d3;

        r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double qrRankingThreshold> = $d4;

        return;
    }
    private void determineLMDirection(double[], double[], double[], org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData, int, double[], double[])
    {
        org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer r0;
        double[] $r1, $r2, $r3, $r5, $r6, $r9, $r10, $r11;
        org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData $r4;
        int $i0, i1, $i2, i3, i4;
        double d0, d1, d2, d3, d4, $d5;
        int[] $r7;
        double[][] $r8;
        byte $b5;

        r0 := @this: org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[];

        $r3 := @parameter2: double[];

        $r4 := @parameter3: org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData;

        $i0 := @parameter4: int;

        $r5 := @parameter5: double[];

        $r6 := @parameter6: double[];

        $r7 = staticinvoke <org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData: int[] access$100(org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData)>($r4);

        $r8 = staticinvoke <org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData: double[][] access$000(org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData)>($r4);

        $r9 = staticinvoke <org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData: double[] access$200(org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData)>($r4);

        i1 = 0;

     label01:
        if i1 >= $i0 goto label04;

        i3 = $r7[i1];

        i4 = i1 + 1;

     label02:
        if i4 >= $i0 goto label03;

        $r10 = $r8[i4];

        $r11 = $r8[i1];

        $i2 = $r7[i4];

        d1 = $r11[$i2];

        $r10[i3] = d1;

        i4 = i4 + 1;

        goto label02;

     label03:
        d1 = $r9[i3];

        $r6[i1] = d1;

        d1 = $r1[i1];

        $r5[i1] = d1;

        i1 = i1 + 1;

        goto label01;

     label04:
        $i2 = 0;

     label05:
        if $i2 >= $i0 goto label13;

        i1 = $r7[$i2];

        d1 = $r2[i1];

        $b5 = d1 cmpl 0.0;

        if $b5 == 0 goto label06;

        i1 = $i2 + 1;

        i3 = lengthof $r3;

        staticinvoke <java.util.Arrays: void fill(double[],int,int,double)>($r3, i1, i3, 0.0);

     label06:
        $r3[$i2] = d1;

        d1 = 0.0;

        i3 = $i2;

     label07:
        if i3 >= $i0 goto label12;

        i1 = $r7[i3];

        d4 = $r3[i3];

        $b5 = d4 cmpl 0.0;

        if $b5 == 0 goto label11;

        $r1 = $r8[i3];

        d3 = $r1[i1];

        d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d3);

        d0 = $r3[i3];

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d0);

        $b5 = d4 cmpg d0;

        if $b5 >= 0 goto label10;

        d4 = $r3[i3];

        d0 = d3 / d4;

        d4 = d0 * d0;

        d4 = 1.0 + d4;

        d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d4);

        d4 = 1.0 / d4;

        d0 = d4 * d0;

     label08:
        $r1 = $r8[i3];

        d3 = d0 * d3;

        d2 = $r3[i3];

        d2 = d2 * d4;

        d3 = d3 + d2;

        $r1[i1] = d3;

        d3 = $r5[i3];

        d3 = d3 * d0;

        d2 = d4 * d1;

        d3 = d3 + d2;

        d2 = neg d4;

        $d5 = $r5[i3];

        d2 = d2 * $d5;

        d1 = d0 * d1;

        d1 = d2 + d1;

        $r5[i3] = d3;

        i4 = i3 + 1;

     label09:
        if i4 >= $i0 goto label11;

        $r1 = $r8[i4];

        d2 = $r1[i1];

        d3 = d0 * d2;

        $d5 = $r3[i4];

        $d5 = $d5 * d4;

        d3 = d3 + $d5;

        $d5 = neg d4;

        d2 = $d5 * d2;

        $d5 = $r3[i4];

        $d5 = $d5 * d0;

        d2 = d2 + $d5;

        $r3[i4] = d2;

        $r1 = $r8[i4];

        $r1[i1] = d3;

        i4 = i4 + 1;

        goto label09;

     label10:
        d4 = $r3[i3];

        d4 = d4 / d3;

        d0 = d4 * d4;

        d0 = 1.0 + d0;

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d0);

        d0 = 1.0 / d0;

        d4 = d0 * d4;

        goto label08;

     label11:
        i3 = i3 + 1;

        goto label07;

     label12:
        $r1 = $r8[$i2];

        i1 = $r7[$i2];

        d1 = $r1[i1];

        $r3[$i2] = d1;

        $r1 = $r8[$i2];

        i1 = $r7[$i2];

        d1 = $r6[$i2];

        $r1[i1] = d1;

        $i2 = $i2 + 1;

        goto label05;

     label13:
        $i2 = $i0;

        i1 = 0;

     label14:
        if i1 >= $i0 goto label17;

        d1 = $r3[i1];

        $b5 = d1 cmpl 0.0;

        if $b5 != 0 goto label15;

        if $i2 != $i0 goto label15;

        $i2 = i1;

     label15:
        if $i2 >= $i0 goto label16;

        $r5[i1] = 0.0;

     label16:
        i1 = i1 + 1;

        goto label14;

     label17:
        if $i2 <= 0 goto label21;

        $i0 = $i2 + -1;

     label18:
        if $i0 < 0 goto label21;

        i1 = $r7[$i0];

        d1 = 0.0;

        i3 = $i0 + 1;

     label19:
        if i3 >= $i2 goto label20;

        $r1 = $r8[i3];

        d4 = $r1[i1];

        d0 = $r5[i3];

        d4 = d4 * d0;

        d1 = d1 + d4;

        i3 = i3 + 1;

        goto label19;

     label20:
        d4 = $r5[$i0];

        d1 = d4 - d1;

        d4 = $r3[$i0];

        d1 = d1 / d4;

        $r5[$i0] = d1;

        $i0 = $i0 + -1;

        goto label18;

     label21:
        $i0 = 0;

     label22:
        $i2 = lengthof $r6;

        if $i0 >= $i2 goto label23;

        $i2 = $r7[$i0];

        d1 = $r5[$i0];

        $r6[$i2] = d1;

        $i0 = $i0 + 1;

        goto label22;

     label23:
        return;
    }
    private double determineLMParameter(double[], double, double[], org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData, int, double[], double[], double[], double[], double)
    {
        org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer r0;
        double[] $r1, $r2, $r4, $r5, $r6, $r7, $r10, $r11;
        double $d0, d1, d2, d3, d4, $d5, $d6, $d7, $d8;
        org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData $r3;
        int $i0, i1, $i2, i3, $i4, $i5;
        double[][] $r8;
        int[] $r9;
        byte $b6;

        r0 := @this: org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer;

        $r1 := @parameter0: double[];

        $d0 := @parameter1: double;

        $r2 := @parameter2: double[];

        $r3 := @parameter3: org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData;

        $i0 := @parameter4: int;

        $r4 := @parameter5: double[];

        $r5 := @parameter6: double[];

        $r6 := @parameter7: double[];

        $r7 := @parameter8: double[];

        d4 := @parameter9: double;

        $r8 = staticinvoke <org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData: double[][] access$000(org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData)>($r3);

        $r9 = staticinvoke <org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData: int[] access$100(org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData)>($r3);

        $i2 = staticinvoke <org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData: int access$400(org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData)>($r3);

        $r10 = staticinvoke <org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData: double[] access$200(org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData)>($r3);

        $r11 = $r8[0];

        i1 = lengthof $r11;

        i3 = 0;

     label01:
        if i3 >= $i2 goto label02;

        $i4 = $r9[i3];

        d3 = $r1[i3];

        $r7[$i4] = d3;

        i3 = i3 + 1;

        goto label01;

     label02:
        i3 = $i2;

     label03:
        if i3 >= i1 goto label04;

        $i4 = $r9[i3];

        $r7[$i4] = 0.0;

        i3 = i3 + 1;

        goto label03;

     label04:
        i3 = $i2 + -1;

     label05:
        if i3 < 0 goto label08;

        i1 = $r9[i3];

        d3 = $r7[i1];

        $d5 = $r10[i1];

        d3 = d3 / $d5;

        $i4 = 0;

     label06:
        if $i4 >= i3 goto label07;

        $i5 = $r9[$i4];

        $d5 = $r7[$i5];

        $r11 = $r8[$i4];

        $d6 = $r11[i1];

        $d6 = $d6 * d3;

        $d5 = $d5 - $d6;

        $r7[$i5] = $d5;

        $i4 = $i4 + 1;

        goto label06;

     label07:
        $r7[i1] = d3;

        i3 = i3 + -1;

        goto label05;

     label08:
        d3 = 0.0;

        i1 = 0;

     label09:
        if i1 >= $i0 goto label10;

        i3 = $r9[i1];

        $d5 = $r2[i3];

        $d6 = $r7[i3];

        $d5 = $d5 * $d6;

        $r4[i3] = $d5;

        $d5 = $d5 * $d5;

        d3 = d3 + $d5;

        i1 = i1 + 1;

        goto label09;

     label10:
        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d3);

        d3 = d1 - $d0;

        $d5 = 0.1 * $d0;

        $b6 = d3 cmpg $d5;

        if $b6 > 0 goto label11;

        return 0.0;

     label11:
        $d5 = 0.0;

        if $i2 != $i0 goto label18;

        $i2 = 0;

     label12:
        if $i2 >= $i0 goto label13;

        i1 = $r9[$i2];

        $d5 = $r4[i1];

        $d6 = $r2[i1];

        $d6 = $d6 / d1;

        $d5 = $d5 * $d6;

        $r4[i1] = $d5;

        $i2 = $i2 + 1;

        goto label12;

     label13:
        $d5 = 0.0;

        $i2 = 0;

     label14:
        if $i2 >= $i0 goto label17;

        i1 = $r9[$i2];

        $d6 = 0.0;

        i3 = 0;

     label15:
        if i3 >= $i2 goto label16;

        $r11 = $r8[i3];

        d2 = $r11[i1];

        $i4 = $r9[i3];

        $d7 = $r4[$i4];

        d2 = d2 * $d7;

        $d6 = $d6 + d2;

        i3 = i3 + 1;

        goto label15;

     label16:
        d2 = $r4[i1];

        $d6 = d2 - $d6;

        d2 = $r10[i1];

        $d6 = $d6 / d2;

        $r4[i1] = $d6;

        $d6 = $d6 * $d6;

        $d5 = $d5 + $d6;

        $i2 = $i2 + 1;

        goto label14;

     label17:
        $d5 = $d0 * $d5;

        $d5 = d3 / $d5;

     label18:
        $d6 = 0.0;

        $i2 = 0;

     label19:
        if $i2 >= $i0 goto label22;

        i1 = $r9[$i2];

        d2 = 0.0;

        i3 = 0;

     label20:
        if i3 > $i2 goto label21;

        $r10 = $r8[i3];

        $d7 = $r10[i1];

        $d8 = $r1[i3];

        $d7 = $d7 * $d8;

        d2 = d2 + $d7;

        i3 = i3 + 1;

        goto label20;

     label21:
        $d7 = $r2[i1];

        d2 = d2 / $d7;

        d2 = d2 * d2;

        $d6 = $d6 + d2;

        $i2 = $i2 + 1;

        goto label19;

     label22:
        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d6);

        $d6 = d2 / $d0;

        $b6 = $d6 cmpl 0.0;

        if $b6 != 0 goto label23;

        $d6 = <org.apache.commons.math3.util.Precision: double SAFE_MIN>;

        $d7 = staticinvoke <org.apache.commons.math3.util.FastMath: double min(double,double)>($d0, 0.1);

        $d6 = $d6 / $d7;

     label23:
        d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>(d4, $d5);

        $d7 = staticinvoke <org.apache.commons.math3.util.FastMath: double min(double,double)>($d6, d4);

        d4 = $d7;

        $b6 = $d7 cmpl 0.0;

        if $b6 != 0 goto label24;

        d4 = d2 / d1;

     label24:
        $i2 = 10;

     label25:
        if $i2 < 0 goto label43;

        $b6 = d4 cmpl 0.0;

        if $b6 != 0 goto label26;

        d4 = <org.apache.commons.math3.util.Precision: double SAFE_MIN>;

        d1 = 0.001 * $d6;

        d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>(d4, d1);

     label26:
        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d4);

        i1 = 0;

     label27:
        if i1 >= $i0 goto label28;

        i3 = $r9[i1];

        d2 = $r2[i3];

        d2 = d2 * d1;

        $r4[i3] = d2;

        i1 = i1 + 1;

        goto label27;

     label28:
        specialinvoke r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: void determineLMDirection(double[],double[],double[],org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData,int,double[],double[])>($r1, $r4, $r5, $r3, $i0, $r6, $r7);

        d1 = 0.0;

        i1 = 0;

     label29:
        if i1 >= $i0 goto label30;

        i3 = $r9[i1];

        d2 = $r2[i3];

        $d7 = $r7[i3];

        d2 = d2 * $d7;

        $r6[i3] = d2;

        d2 = d2 * d2;

        d1 = d1 + d2;

        i1 = i1 + 1;

        goto label29;

     label30:
        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d1);

        d2 = d3;

        d3 = d1 - $d0;

        $d7 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d3);

        $d8 = 0.1 * $d0;

        $b6 = $d7 cmpg $d8;

        if $b6 <= 0 goto label31;

        $b6 = $d5 cmpl 0.0;

        if $b6 != 0 goto label32;

        $b6 = d3 cmpg d2;

        if $b6 > 0 goto label32;

        $b6 = d2 cmpg 0.0;

        if $b6 >= 0 goto label32;

     label31:
        return d4;

     label32:
        i1 = 0;

     label33:
        if i1 >= $i0 goto label34;

        i3 = $r9[i1];

        d2 = $r6[i3];

        $d7 = $r2[i3];

        d2 = d2 * $d7;

        d2 = d2 / d1;

        $r4[i3] = d2;

        i1 = i1 + 1;

        goto label33;

     label34:
        i1 = 0;

     label35:
        if i1 >= $i0 goto label38;

        i3 = $r9[i1];

        d1 = $r4[i3];

        d2 = $r5[i1];

        d1 = d1 / d2;

        $r4[i3] = d1;

        d1 = $r4[i3];

        $i4 = i1 + 1;

     label36:
        if $i4 >= $i0 goto label37;

        $i5 = $r9[$i4];

        d2 = $r4[$i5];

        $r10 = $r8[$i4];

        $d7 = $r10[i3];

        $d7 = $d7 * d1;

        d2 = d2 - $d7;

        $r4[$i5] = d2;

        $i4 = $i4 + 1;

        goto label36;

     label37:
        i1 = i1 + 1;

        goto label35;

     label38:
        d1 = 0.0;

        i1 = 0;

     label39:
        if i1 >= $i0 goto label40;

        i3 = $r9[i1];

        d2 = $r4[i3];

        d2 = d2 * d2;

        d1 = d1 + d2;

        i1 = i1 + 1;

        goto label39;

     label40:
        d1 = $d0 * d1;

        d1 = d3 / d1;

        $b6 = d3 cmpl 0.0;

        if $b6 <= 0 goto label42;

        $d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>($d5, d4);

     label41:
        d4 = d4 + d1;

        d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>($d5, d4);

        $i2 = $i2 + -1;

        goto label25;

     label42:
        $b6 = d3 cmpg 0.0;

        if $b6 >= 0 goto label41;

        $d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double min(double,double)>($d6, d4);

        goto label41;

     label43:
        return d4;
    }
    private void qTy(double[], org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData)
    {
        org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer r0;
        double[] $r1, $r5, $r6;
        org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData $r2;
        int i0, i1, i2, i3, i4;
        double[][] $r3;
        int[] $r4;
        double d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData;

        $r3 = staticinvoke <org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData: double[][] access$000(org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData)>($r2);

        $r4 = staticinvoke <org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData: int[] access$100(org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData)>($r2);

        $r5 = staticinvoke <org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData: double[] access$500(org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData)>($r2);

        i1 = lengthof $r3;

        $r6 = $r3[0];

        i0 = lengthof $r6;

        i3 = 0;

     label1:
        if i3 >= i0 goto label6;

        i2 = $r4[i3];

        d0 = 0.0;

        i4 = i3;

     label2:
        if i4 >= i1 goto label3;

        $r6 = $r3[i4];

        $d1 = $r6[i2];

        $d2 = $r1[i4];

        $d1 = $d1 * $d2;

        d0 = d0 + $d1;

        i4 = i4 + 1;

        goto label2;

     label3:
        $d1 = $r5[i2];

        d0 = d0 * $d1;

        i4 = i3;

     label4:
        if i4 >= i1 goto label5;

        $d1 = $r1[i4];

        $r6 = $r3[i4];

        $d2 = $r6[i2];

        $d2 = $d2 * d0;

        $d1 = $d1 - $d2;

        $r1[i4] = $d1;

        i4 = i4 + 1;

        goto label4;

     label5:
        i3 = i3 + 1;

        goto label1;

     label6:
        return;
    }
    private org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData qrDecomposition(org.apache.commons.math3.linear.RealMatrix, int) throws org.apache.commons.math3.exception.ConvergenceException
    {
        org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer r0;
        org.apache.commons.math3.linear.RealMatrix $r1;
        int $i0, i1, $i2, $i3, i4, i5, i6, $i7;
        int[] r2;
        double[] r3, r4, r5, $r7, $r13;
        double d0, d1, d2, $d3;
        double[][] $r6;
        boolean $z0;
        org.apache.commons.math3.exception.ConvergenceException $r8;
        org.apache.commons.math3.exception.util.LocalizedFormats $r9;
        java.lang.Object[] $r10;
        java.lang.Integer $r11;
        byte $b8;
        org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData $r12;

        r0 := @this: org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        $i0 := @parameter1: int;

        $r1 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix scalarMultiply(double)>(-1.0);

        $r6 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: double[][] getData()>();

        $i2 = lengthof $r6;

        r3 = $r6[0];

        $i3 = lengthof r3;

        r2 = newarray (int)[$i3];

        r3 = newarray (double)[$i3];

        r4 = newarray (double)[$i3];

        r5 = newarray (double)[$i3];

        i4 = 0;

     label01:
        if i4 >= $i3 goto label04;

        r2[i4] = i4;

        d1 = 0.0;

        i1 = 0;

     label02:
        if i1 >= $i2 goto label03;

        $r7 = $r6[i1];

        d2 = $r7[i4];

        d2 = d2 * d2;

        d1 = d1 + d2;

        i1 = i1 + 1;

        goto label02;

     label03:
        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d1);

        r4[i4] = d1;

        i4 = i4 + 1;

        goto label01;

     label04:
        i4 = 0;

     label05:
        if i4 >= $i3 goto label22;

        i5 = -1;

        d1 = #-Infinity;

        i1 = i4;

     label06:
        if i1 >= $i3 goto label12;

        d2 = 0.0;

        i6 = i4;

     label07:
        if i6 >= $i2 goto label08;

        $r7 = $r6[i6];

        $i7 = r2[i1];

        d0 = $r7[$i7];

        d0 = d0 * d0;

        d2 = d2 + d0;

        i6 = i6 + 1;

        goto label07;

     label08:
        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d2);

        if $z0 != 0 goto label09;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d2);

        if $z0 == 0 goto label10;

     label09:
        $r8 = new org.apache.commons.math3.exception.ConvergenceException;

        $r9 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN>;

        $r10 = newarray (java.lang.Object)[2];

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r10[0] = $r11;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r10[1] = $r11;

        specialinvoke $r8.<org.apache.commons.math3.exception.ConvergenceException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r9, $r10);

        throw $r8;

     label10:
        $b8 = d2 cmpl d1;

        if $b8 <= 0 goto label11;

        i5 = i1;

        d1 = d2;

     label11:
        i1 = i1 + 1;

        goto label06;

     label12:
        d2 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double qrRankingThreshold>;

        $b8 = d1 cmpg d2;

        if $b8 > 0 goto label13;

        $r12 = new org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData;

        specialinvoke $r12.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData: void <init>(double[][],int[],int,double[],double[],double[])>($r6, r2, i4, r3, r4, r5);

        return $r12;

     label13:
        i1 = r2[i5];

        i6 = r2[i4];

        r2[i5] = i6;

        r2[i4] = i1;

        $r7 = $r6[i4];

        d0 = $r7[i1];

        $b8 = d0 cmpl 0.0;

        if $b8 <= 0 goto label17;

        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d1);

        d2 = neg d2;

     label14:
        d0 = d0 * d2;

        d1 = d1 - d0;

        d1 = 1.0 / d1;

        r5[i1] = d1;

        r3[i1] = d2;

        $r7 = $r6[i4];

        d0 = $r7[i1];

        d2 = d0 - d2;

        $r7[i1] = d2;

        i5 = $i3 + -1;

        i5 = i5 - i4;

     label15:
        if i5 <= 0 goto label21;

        d2 = 0.0;

        i6 = i4;

     label16:
        if i6 >= $i2 goto label18;

        $r7 = $r6[i6];

        d0 = $r7[i1];

        $r7 = $r6[i6];

        $i7 = i4 + i5;

        $i7 = r2[$i7];

        $d3 = $r7[$i7];

        d0 = d0 * $d3;

        d2 = d2 + d0;

        i6 = i6 + 1;

        goto label16;

     label17:
        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d1);

        goto label14;

     label18:
        d2 = d2 * d1;

        i6 = i4;

     label19:
        if i6 >= $i2 goto label20;

        $r7 = $r6[i6];

        $i7 = i4 + i5;

        $i7 = r2[$i7];

        d0 = $r7[$i7];

        $r13 = $r6[i6];

        $d3 = $r13[i1];

        $d3 = $d3 * d2;

        d0 = d0 - $d3;

        $r7[$i7] = d0;

        i6 = i6 + 1;

        goto label19;

     label20:
        i5 = i5 + -1;

        goto label15;

     label21:
        i4 = i4 + 1;

        goto label05;

     label22:
        $r12 = new org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData;

        specialinvoke $r12.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData: void <init>(double[][],int[],int,double[],double[],double[])>($r6, r2, $i0, r3, r4, r5);

        return $r12;
    }
    public double getCostRelativeTolerance()
    {
        org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer r0;
        double d0;

        r0 := @this: org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer;

        d0 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double costRelativeTolerance>;

        return d0;
    }
    public double getInitialStepBoundFactor()
    {
        org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer r0;
        double d0;

        r0 := @this: org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer;

        d0 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double initialStepBoundFactor>;

        return d0;
    }
    public double getOrthoTolerance()
    {
        org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer r0;
        double d0;

        r0 := @this: org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer;

        d0 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double orthoTolerance>;

        return d0;
    }
    public double getParameterRelativeTolerance()
    {
        org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer r0;
        double d0;

        r0 := @this: org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer;

        d0 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double parRelativeTolerance>;

        return d0;
    }
    public double getRankingThreshold()
    {
        org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer r0;
        double d0;

        r0 := @this: org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer;

        d0 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double qrRankingThreshold>;

        return d0;
    }
    public org.apache.commons.math3.fitting.leastsquares.LeastSquaresOptimizer$Optimum optimize(org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem)
    {
        org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer r0;
        org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem $r1;
        double[] r2, r3, r4, r5, r6, r7, $r12, $r15, $r16, $r21, $r22, r23;
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, $d11, $d12, $d13;
        int i0, $i1, $i2, $i3, i4, i6;
        org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem$Evaluation r8, r14, $r26;
        org.apache.commons.math3.util.Incrementor $r9, $r10;
        org.apache.commons.math3.optim.ConvergenceChecker $r11;
        org.apache.commons.math3.linear.RealVector $r13;
        boolean z0, $z1;
        org.apache.commons.math3.linear.RealMatrix $r17;
        org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData $r18;
        double[][] $r19;
        int[] $r20;
        byte $b5;
        org.apache.commons.math3.fitting.leastsquares.OptimumImpl $r24;
        org.apache.commons.math3.linear.ArrayRealVector $r25;
        org.apache.commons.math3.exception.ConvergenceException $r27;
        org.apache.commons.math3.exception.util.LocalizedFormats $r28;
        java.lang.Object[] $r29;
        java.lang.Double $r30;

        r0 := @this: org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer;

        $r1 := @parameter0: org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem;

        $i1 = interfaceinvoke $r1.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem: int getObservationSize()>();

        $i2 = interfaceinvoke $r1.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem: int getParameterSize()>();

        $r9 = interfaceinvoke $r1.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem: org.apache.commons.math3.util.Incrementor getIterationCounter()>();

        $r10 = interfaceinvoke $r1.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem: org.apache.commons.math3.util.Incrementor getEvaluationCounter()>();

        $r11 = interfaceinvoke $r1.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem: org.apache.commons.math3.optim.ConvergenceChecker getConvergenceChecker()>();

        $i3 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i1, $i2);

        r7 = newarray (double)[$i2];

        d5 = 0.0;

        d6 = 0.0;

        d7 = 0.0;

        r3 = newarray (double)[$i2];

        $r12 = newarray (double)[$i2];

        r2 = newarray (double)[$i1];

        r2 = newarray (double)[$i1];

        r4 = newarray (double)[$i2];

        r5 = newarray (double)[$i2];

        r6 = newarray (double)[$i2];

        virtualinvoke $r10.<org.apache.commons.math3.util.Incrementor: void incrementCount()>();

        $r13 = interfaceinvoke $r1.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem: org.apache.commons.math3.linear.RealVector getStart()>();

        r8 = interfaceinvoke $r1.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem: org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem$Evaluation evaluate(org.apache.commons.math3.linear.RealVector)>($r13);

        r14 = r8;

        $r13 = interfaceinvoke r8.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem$Evaluation: org.apache.commons.math3.linear.RealVector getResiduals()>();

        $r15 = virtualinvoke $r13.<org.apache.commons.math3.linear.RealVector: double[] toArray()>();

        d8 = interfaceinvoke r8.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem$Evaluation: double getCost()>();

        $r13 = interfaceinvoke r8.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem$Evaluation: org.apache.commons.math3.linear.RealVector getPoint()>();

        $r16 = virtualinvoke $r13.<org.apache.commons.math3.linear.RealVector: double[] toArray()>();

        z0 = 1;

     label01:
        virtualinvoke $r9.<org.apache.commons.math3.util.Incrementor: void incrementCount()>();

        r8 = r14;

        $r17 = interfaceinvoke r14.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem$Evaluation: org.apache.commons.math3.linear.RealMatrix getJacobian()>();

        $r18 = specialinvoke r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData qrDecomposition(org.apache.commons.math3.linear.RealMatrix,int)>($r17, $i3);

        $r19 = staticinvoke <org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData: double[][] access$000(org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData)>($r18);

        $r20 = staticinvoke <org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData: int[] access$100(org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData)>($r18);

        $r21 = staticinvoke <org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData: double[] access$200(org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData)>($r18);

        $r22 = staticinvoke <org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData: double[] access$300(org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData)>($r18);

        r23 = $r15;

        i0 = 0;

     label02:
        if i0 >= $i1 goto label03;

        d4 = r23[i0];

        r2[i0] = d4;

        i0 = i0 + 1;

        goto label02;

     label03:
        specialinvoke r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: void qTy(double[],org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData)>(r2, $r18);

        i4 = 0;

     label04:
        if i4 >= $i3 goto label05;

        i0 = $r20[i4];

        r23 = $r19[i4];

        d4 = $r21[i0];

        r23[i0] = d4;

        i4 = i4 + 1;

        goto label04;

     label05:
        if z0 == 0 goto label09;

        d6 = 0.0;

        i0 = 0;

     label06:
        if i0 >= $i2 goto label08;

        d7 = $r22[i0];

        $b5 = d7 cmpl 0.0;

        if $b5 != 0 goto label07;

        d7 = 1.0;

     label07:
        d4 = $r16[i0];

        d4 = d7 * d4;

        d4 = d4 * d4;

        d6 = d6 + d4;

        r3[i0] = d7;

        i0 = i0 + 1;

        goto label06;

     label08:
        d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d6);

        d7 = d6;

        $b5 = d6 cmpl 0.0;

        if $b5 != 0 goto label12;

        d6 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double initialStepBoundFactor>;

     label09:
        d4 = 0.0;

        $b5 = d8 cmpl 0.0;

        if $b5 == 0 goto label15;

        i0 = 0;

     label10:
        if i0 >= $i3 goto label15;

        i4 = $r20[i0];

        d2 = $r22[i4];

        $b5 = d2 cmpl 0.0;

        if $b5 == 0 goto label14;

        d9 = 0.0;

        i6 = 0;

     label11:
        if i6 > i0 goto label13;

        $r21 = $r19[i6];

        d3 = $r21[i4];

        d1 = r2[i6];

        d3 = d3 * d1;

        d9 = d9 + d3;

        i6 = i6 + 1;

        goto label11;

     label12:
        d4 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double initialStepBoundFactor>;

        d6 = d4 * d6;

        goto label09;

     label13:
        d9 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d9);

        d2 = d2 * d8;

        d2 = d9 / d2;

        d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>(d4, d2);

     label14:
        i0 = i0 + 1;

        goto label10;

     label15:
        d2 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double orthoTolerance>;

        $b5 = d4 cmpg d2;

        if $b5 > 0 goto label16;

        $r24 = new org.apache.commons.math3.fitting.leastsquares.OptimumImpl;

        $i1 = virtualinvoke $r10.<org.apache.commons.math3.util.Incrementor: int getCount()>();

        $i2 = virtualinvoke $r9.<org.apache.commons.math3.util.Incrementor: int getCount()>();

        specialinvoke $r24.<org.apache.commons.math3.fitting.leastsquares.OptimumImpl: void <init>(org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem$Evaluation,int,int)>(r14, $i1, $i2);

        return $r24;

     label16:
        i0 = 0;

     label17:
        if i0 >= $i2 goto label18;

        d2 = r3[i0];

        d9 = $r22[i0];

        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>(d2, d9);

        r3[i0] = d2;

        i0 = i0 + 1;

        goto label17;

     label18:
        d10 = 0.0;

     label19:
        $b5 = d10 cmpg 1.0E-4;

        if $b5 >= 0 goto label01;

        i0 = 0;

     label20:
        if i0 >= $i3 goto label21;

        i4 = $r20[i0];

        d2 = $r16[i4];

        $r12[i4] = d2;

        i0 = i0 + 1;

        goto label20;

     label21:
        d2 = d8;

        d9 = specialinvoke r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double determineLMParameter(double[],double,double[],org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData,int,double[],double[],double[],double[],double)>(r2, d6, r3, $r18, $i3, r4, r5, r6, r7, d5);

        d5 = d9;

        d8 = 0.0;

        i0 = 0;

     label22:
        if i0 >= $i3 goto label23;

        i4 = $r20[i0];

        d3 = r7[i4];

        d3 = neg d3;

        r7[i4] = d3;

        d3 = $r12[i4];

        d1 = r7[i4];

        d3 = d3 + d1;

        $r16[i4] = d3;

        d3 = r3[i4];

        d1 = r7[i4];

        d3 = d3 * d1;

        d3 = d3 * d3;

        d8 = d8 + d3;

        i0 = i0 + 1;

        goto label22;

     label23:
        $d11 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d8);

        if z0 == 0 goto label24;

        d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double min(double,double)>(d6, $d11);

     label24:
        virtualinvoke $r10.<org.apache.commons.math3.util.Incrementor: void incrementCount()>();

        $r25 = new org.apache.commons.math3.linear.ArrayRealVector;

        specialinvoke $r25.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(double[])>($r16);

        $r26 = interfaceinvoke $r1.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem: org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem$Evaluation evaluate(org.apache.commons.math3.linear.RealVector)>($r25);

        r14 = $r26;

        $r13 = interfaceinvoke $r26.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem$Evaluation: org.apache.commons.math3.linear.RealVector getResiduals()>();

        $r15 = virtualinvoke $r13.<org.apache.commons.math3.linear.RealVector: double[] toArray()>();

        $d12 = interfaceinvoke $r26.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem$Evaluation: double getCost()>();

        d8 = $d12;

        $r13 = interfaceinvoke $r26.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem$Evaluation: org.apache.commons.math3.linear.RealVector getPoint()>();

        $r22 = virtualinvoke $r13.<org.apache.commons.math3.linear.RealVector: double[] toArray()>();

        $r16 = $r22;

        d3 = -1.0;

        d1 = 0.1 * $d12;

        $b5 = d1 cmpg d2;

        if $b5 >= 0 goto label25;

        d3 = $d12 / d2;

        d3 = d3 * d3;

        d3 = 1.0 - d3;

     label25:
        i0 = 0;

     label26:
        if i0 >= $i3 goto label29;

        i4 = $r20[i0];

        d1 = r7[i4];

        r4[i0] = 0.0;

        i6 = 0;

     label27:
        if i6 > i0 goto label28;

        d10 = r4[i6];

        $r21 = $r19[i6];

        d0 = $r21[i4];

        d0 = d0 * d1;

        d10 = d10 + d0;

        r4[i6] = d10;

        i6 = i6 + 1;

        goto label27;

     label28:
        i0 = i0 + 1;

        goto label26;

     label29:
        d10 = 0.0;

        i0 = 0;

     label30:
        if i0 >= $i3 goto label31;

        d1 = r4[i0];

        d0 = r4[i0];

        d1 = d1 * d0;

        d10 = d10 + d1;

        i0 = i0 + 1;

        goto label30;

     label31:
        d1 = d2 * d2;

        d10 = d10 / d1;

        d0 = d9 * $d11;

        d0 = d0 * $d11;

        d0 = d0 / d1;

        d1 = 2.0 * d0;

        d1 = d10 + d1;

        d10 = d10 + d0;

        d0 = neg d10;

        $b5 = d1 cmpl 0.0;

        if $b5 != 0 goto label38;

        d10 = 0.0;

     label32:
        $b5 = d10 cmpg 0.25;

        if $b5 > 0 goto label40;

        $b5 = d3 cmpg 0.0;

        if $b5 >= 0 goto label39;

        d5 = 0.5 * d0;

        $d13 = 0.5 * d3;

        d0 = $d13 + d0;

        d5 = d5 / d0;

     label33:
        $d12 = 0.1 * $d12;

        $b5 = $d12 cmpl d2;

        if $b5 >= 0 goto label34;

        $b5 = d5 cmpg 0.1;

        if $b5 >= 0 goto label35;

     label34:
        d5 = 0.1;

     label35:
        $d11 = 10.0 * $d11;

        d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double min(double,double)>(d6, $d11);

        d6 = d5 * d6;

        d5 = d9 / d5;

     label36:
        $b5 = d10 cmpl 1.0E-4;

        if $b5 < 0 goto label43;

        z0 = 0;

        d7 = 0.0;

        i0 = 0;

     label37:
        if i0 >= $i2 goto label42;

        d2 = r3[i0];

        d9 = $r22[i0];

        d2 = d2 * d9;

        d2 = d2 * d2;

        d7 = d7 + d2;

        i0 = i0 + 1;

        goto label37;

     label38:
        d10 = d3 / d1;

        goto label32;

     label39:
        d5 = 0.5;

        goto label33;

     label40:
        $b5 = d9 cmpl 0.0;

        if $b5 == 0 goto label41;

        $b5 = d10 cmpl 0.75;

        if $b5 < 0 goto label36;

     label41:
        d6 = 2.0 * $d11;

        d5 = d9 * 0.5;

        goto label36;

     label42:
        d7 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d7);

        if $r11 == null goto label46;

        i0 = virtualinvoke $r9.<org.apache.commons.math3.util.Incrementor: int getCount()>();

        $z1 = interfaceinvoke $r11.<org.apache.commons.math3.optim.ConvergenceChecker: boolean converged(int,java.lang.Object,java.lang.Object)>(i0, r8, $r26);

        if $z1 == 0 goto label46;

        $r24 = new org.apache.commons.math3.fitting.leastsquares.OptimumImpl;

        $i1 = virtualinvoke $r10.<org.apache.commons.math3.util.Incrementor: int getCount()>();

        $i2 = virtualinvoke $r9.<org.apache.commons.math3.util.Incrementor: int getCount()>();

        specialinvoke $r24.<org.apache.commons.math3.fitting.leastsquares.OptimumImpl: void <init>(org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem$Evaluation,int,int)>($r26, $i1, $i2);

        return $r24;

     label43:
        d8 = d2;

        i0 = 0;

     label44:
        if i0 >= $i3 goto label45;

        i4 = $r20[i0];

        d2 = $r12[i4];

        $r22[i4] = d2;

        i0 = i0 + 1;

        goto label44;

     label45:
        r14 = r8;

     label46:
        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d3);

        d9 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double costRelativeTolerance>;

        $b5 = d2 cmpg d9;

        if $b5 > 0 goto label47;

        d2 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double costRelativeTolerance>;

        $b5 = d1 cmpg d2;

        if $b5 > 0 goto label47;

        $b5 = d10 cmpg 2.0;

        if $b5 <= 0 goto label48;

     label47:
        d2 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double parRelativeTolerance>;

        d2 = d2 * d7;

        $b5 = d6 cmpg d2;

        if $b5 > 0 goto label49;

     label48:
        $r24 = new org.apache.commons.math3.fitting.leastsquares.OptimumImpl;

        $i1 = virtualinvoke $r10.<org.apache.commons.math3.util.Incrementor: int getCount()>();

        $i2 = virtualinvoke $r9.<org.apache.commons.math3.util.Incrementor: int getCount()>();

        specialinvoke $r24.<org.apache.commons.math3.fitting.leastsquares.OptimumImpl: void <init>(org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem$Evaluation,int,int)>(r14, $i1, $i2);

        return $r24;

     label49:
        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d3);

        d9 = <org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double TWO_EPS>;

        $b5 = d2 cmpg d9;

        if $b5 > 0 goto label50;

        d2 = <org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double TWO_EPS>;

        $b5 = d1 cmpg d2;

        if $b5 > 0 goto label50;

        $b5 = d10 cmpg 2.0;

        if $b5 > 0 goto label50;

        $r27 = new org.apache.commons.math3.exception.ConvergenceException;

        $r28 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats TOO_SMALL_COST_RELATIVE_TOLERANCE>;

        $r29 = newarray (java.lang.Object)[1];

        d5 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double costRelativeTolerance>;

        $r30 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d5);

        $r29[0] = $r30;

        specialinvoke $r27.<org.apache.commons.math3.exception.ConvergenceException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r28, $r29);

        throw $r27;

     label50:
        d2 = <org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double TWO_EPS>;

        d2 = d2 * d7;

        $b5 = d6 cmpg d2;

        if $b5 > 0 goto label51;

        $r27 = new org.apache.commons.math3.exception.ConvergenceException;

        $r28 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE>;

        $r29 = newarray (java.lang.Object)[1];

        d5 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double parRelativeTolerance>;

        $r30 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d5);

        $r29[0] = $r30;

        specialinvoke $r27.<org.apache.commons.math3.exception.ConvergenceException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r28, $r29);

        throw $r27;

     label51:
        d2 = <org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double TWO_EPS>;

        $b5 = d4 cmpg d2;

        if $b5 > 0 goto label19;

        $r27 = new org.apache.commons.math3.exception.ConvergenceException;

        $r28 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats TOO_SMALL_ORTHOGONALITY_TOLERANCE>;

        $r29 = newarray (java.lang.Object)[1];

        d5 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double orthoTolerance>;

        $r30 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d5);

        $r29[0] = $r30;

        specialinvoke $r27.<org.apache.commons.math3.exception.ConvergenceException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r28, $r29);

        throw $r27;
    }
    public org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer withCostRelativeTolerance(double)
    {
        org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer r0, $r1;
        double $d0, $d1, $d2, $d3, $d4;

        r0 := @this: org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer;

        $d0 := @parameter0: double;

        $r1 = new org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer;

        $d1 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double initialStepBoundFactor>;

        $d2 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double parRelativeTolerance>;

        $d3 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double orthoTolerance>;

        $d4 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double qrRankingThreshold>;

        specialinvoke $r1.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: void <init>(double,double,double,double,double)>($d1, $d0, $d2, $d3, $d4);

        return $r1;
    }
    public org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer withInitialStepBoundFactor(double)
    {
        org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer r0, $r1;
        double $d0, $d1, $d2, $d3, $d4;

        r0 := @this: org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer;

        $d0 := @parameter0: double;

        $r1 = new org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer;

        $d1 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double costRelativeTolerance>;

        $d2 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double parRelativeTolerance>;

        $d3 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double orthoTolerance>;

        $d4 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double qrRankingThreshold>;

        specialinvoke $r1.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: void <init>(double,double,double,double,double)>($d0, $d1, $d2, $d3, $d4);

        return $r1;
    }
    public org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer withOrthoTolerance(double)
    {
        org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer r0, $r1;
        double $d0, $d1, $d2, $d3, $d4;

        r0 := @this: org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer;

        $d0 := @parameter0: double;

        $r1 = new org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer;

        $d1 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double initialStepBoundFactor>;

        $d2 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double costRelativeTolerance>;

        $d3 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double parRelativeTolerance>;

        $d4 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double qrRankingThreshold>;

        specialinvoke $r1.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: void <init>(double,double,double,double,double)>($d1, $d2, $d3, $d0, $d4);

        return $r1;
    }
    public org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer withParameterRelativeTolerance(double)
    {
        org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer r0, $r1;
        double $d0, $d1, $d2, $d3, $d4;

        r0 := @this: org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer;

        $d0 := @parameter0: double;

        $r1 = new org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer;

        $d1 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double initialStepBoundFactor>;

        $d2 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double costRelativeTolerance>;

        $d3 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double orthoTolerance>;

        $d4 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double qrRankingThreshold>;

        specialinvoke $r1.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: void <init>(double,double,double,double,double)>($d1, $d2, $d0, $d3, $d4);

        return $r1;
    }
    public org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer withRankingThreshold(double)
    {
        org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer r0, $r1;
        double $d0, $d1, $d2, $d3, $d4;

        r0 := @this: org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer;

        $d0 := @parameter0: double;

        $r1 = new org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer;

        $d1 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double initialStepBoundFactor>;

        $d2 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double costRelativeTolerance>;

        $d3 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double parRelativeTolerance>;

        $d4 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double orthoTolerance>;

        specialinvoke $r1.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: void <init>(double,double,double,double,double)>($d1, $d2, $d3, $d4, $d0);

        return $r1;
    }
