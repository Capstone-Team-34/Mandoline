org.apache.commons.math3.fitting.GaussianCurveFitter extends org.apache.commons.math3.fitting.AbstractCurveFitter
private static final org.apache.commons.math3.analysis.function.Gaussian$Parametric FUNCTION
private final double[] initialGuess
private final int maxIter
    static void <clinit>()
    {
        org.apache.commons.math3.fitting.GaussianCurveFitter$1 $r0;

        $r0 = new org.apache.commons.math3.fitting.GaussianCurveFitter$1;

        specialinvoke $r0.<org.apache.commons.math3.fitting.GaussianCurveFitter$1: void <init>()>();

        <org.apache.commons.math3.fitting.GaussianCurveFitter: org.apache.commons.math3.analysis.function.Gaussian$Parametric FUNCTION> = $r0;

        return;
    }
    private void <init>(double[], int)
    {
        org.apache.commons.math3.fitting.GaussianCurveFitter r0;
        double[] $r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.fitting.GaussianCurveFitter;

        $r1 := @parameter0: double[];

        $i0 := @parameter1: int;

        specialinvoke r0.<org.apache.commons.math3.fitting.AbstractCurveFitter: void <init>()>();

        r0.<org.apache.commons.math3.fitting.GaussianCurveFitter: double[] initialGuess> = $r1;

        r0.<org.apache.commons.math3.fitting.GaussianCurveFitter: int maxIter> = $i0;

        return;
    }
    public static org.apache.commons.math3.fitting.GaussianCurveFitter create()
    {
        org.apache.commons.math3.fitting.GaussianCurveFitter $r0;

        $r0 = new org.apache.commons.math3.fitting.GaussianCurveFitter;

        specialinvoke $r0.<org.apache.commons.math3.fitting.GaussianCurveFitter: void <init>(double[],int)>(null, 2147483647);

        return $r0;
    }
    protected org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem getProblem(java.util.Collection)
    {
        org.apache.commons.math3.fitting.GaussianCurveFitter r0;
        java.util.Collection r1;
        org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction r2;
        double[] r3, r4, $r9;
        int $i0;
        java.util.Iterator $r5;
        boolean $z0;
        java.lang.Object $r6;
        org.apache.commons.math3.fitting.WeightedObservedPoint r7;
        double $d0;
        org.apache.commons.math3.analysis.function.Gaussian$Parametric $r8;
        org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder $r10;
        org.apache.commons.math3.linear.DiagonalMatrix $r11;
        org.apache.commons.math3.analysis.MultivariateVectorFunction $r12;
        org.apache.commons.math3.analysis.MultivariateMatrixFunction $r13;
        org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem $r14;
        org.apache.commons.math3.fitting.GaussianCurveFitter$ParameterGuesser $r15;

        r0 := @this: org.apache.commons.math3.fitting.GaussianCurveFitter;

        r1 := @parameter0: java.util.Collection;

        $i0 = interfaceinvoke r1.<java.util.Collection: int size()>();

        r3 = newarray (double)[$i0];

        r4 = newarray (double)[$i0];

        $i0 = 0;

        $r5 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.commons.math3.fitting.WeightedObservedPoint) $r6;

        $d0 = virtualinvoke r7.<org.apache.commons.math3.fitting.WeightedObservedPoint: double getY()>();

        r3[$i0] = $d0;

        $d0 = virtualinvoke r7.<org.apache.commons.math3.fitting.WeightedObservedPoint: double getWeight()>();

        r4[$i0] = $d0;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        r2 = new org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction;

        $r8 = <org.apache.commons.math3.fitting.GaussianCurveFitter: org.apache.commons.math3.analysis.function.Gaussian$Parametric FUNCTION>;

        specialinvoke r2.<org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction: void <init>(org.apache.commons.math3.analysis.ParametricUnivariateFunction,java.util.Collection)>($r8, r1);

        $r9 = r0.<org.apache.commons.math3.fitting.GaussianCurveFitter: double[] initialGuess>;

        if $r9 == null goto label4;

        $r9 = r0.<org.apache.commons.math3.fitting.GaussianCurveFitter: double[] initialGuess>;

     label3:
        $r10 = new org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder;

        specialinvoke $r10.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder: org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder maxEvaluations(int)>(2147483647);

        $i0 = r0.<org.apache.commons.math3.fitting.GaussianCurveFitter: int maxIter>;

        $r10 = virtualinvoke $r10.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder: org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder maxIterations(int)>($i0);

        $r10 = virtualinvoke $r10.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder: org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder start(double[])>($r9);

        $r10 = virtualinvoke $r10.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder: org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder target(double[])>(r3);

        $r11 = new org.apache.commons.math3.linear.DiagonalMatrix;

        specialinvoke $r11.<org.apache.commons.math3.linear.DiagonalMatrix: void <init>(double[])>(r4);

        $r10 = virtualinvoke $r10.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder: org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder weight(org.apache.commons.math3.linear.RealMatrix)>($r11);

        $r12 = virtualinvoke r2.<org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction: org.apache.commons.math3.analysis.MultivariateVectorFunction getModelFunction()>();

        $r13 = virtualinvoke r2.<org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction: org.apache.commons.math3.analysis.MultivariateMatrixFunction getModelFunctionJacobian()>();

        $r10 = virtualinvoke $r10.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder: org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder model(org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.analysis.MultivariateMatrixFunction)>($r12, $r13);

        $r14 = virtualinvoke $r10.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder: org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem build()>();

        return $r14;

     label4:
        $r15 = new org.apache.commons.math3.fitting.GaussianCurveFitter$ParameterGuesser;

        specialinvoke $r15.<org.apache.commons.math3.fitting.GaussianCurveFitter$ParameterGuesser: void <init>(java.util.Collection)>(r1);

        $r9 = virtualinvoke $r15.<org.apache.commons.math3.fitting.GaussianCurveFitter$ParameterGuesser: double[] guess()>();

        goto label3;
    }
    public org.apache.commons.math3.fitting.GaussianCurveFitter withMaxIterations(int)
    {
        org.apache.commons.math3.fitting.GaussianCurveFitter r0, $r1;
        int $i0;
        double[] $r2;

        r0 := @this: org.apache.commons.math3.fitting.GaussianCurveFitter;

        $i0 := @parameter0: int;

        $r1 = new org.apache.commons.math3.fitting.GaussianCurveFitter;

        $r2 = r0.<org.apache.commons.math3.fitting.GaussianCurveFitter: double[] initialGuess>;

        specialinvoke $r1.<org.apache.commons.math3.fitting.GaussianCurveFitter: void <init>(double[],int)>($r2, $i0);

        return $r1;
    }
    public org.apache.commons.math3.fitting.GaussianCurveFitter withStartPoint(double[])
    {
        org.apache.commons.math3.fitting.GaussianCurveFitter r0, $r2;
        double[] $r1;
        int $i0;
        java.lang.Object $r3;

        r0 := @this: org.apache.commons.math3.fitting.GaussianCurveFitter;

        $r1 := @parameter0: double[];

        $r2 = new org.apache.commons.math3.fitting.GaussianCurveFitter;

        $r3 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r1 = (double[]) $r3;

        $i0 = r0.<org.apache.commons.math3.fitting.GaussianCurveFitter: int maxIter>;

        specialinvoke $r2.<org.apache.commons.math3.fitting.GaussianCurveFitter: void <init>(double[],int)>($r1, $i0);

        return $r2;
    }
