org.apache.commons.math3.fraction.Fraction extends java.lang.Number implements org.apache.commons.math3.FieldElement java.lang.Comparable java.io.Serializable
private static final double DEFAULT_EPSILON
public static final org.apache.commons.math3.fraction.Fraction FOUR_FIFTHS
public static final org.apache.commons.math3.fraction.Fraction MINUS_ONE
public static final org.apache.commons.math3.fraction.Fraction ONE
public static final org.apache.commons.math3.fraction.Fraction ONE_FIFTH
public static final org.apache.commons.math3.fraction.Fraction ONE_HALF
public static final org.apache.commons.math3.fraction.Fraction ONE_QUARTER
public static final org.apache.commons.math3.fraction.Fraction ONE_THIRD
public static final org.apache.commons.math3.fraction.Fraction THREE_FIFTHS
public static final org.apache.commons.math3.fraction.Fraction THREE_QUARTERS
public static final org.apache.commons.math3.fraction.Fraction TWO
public static final org.apache.commons.math3.fraction.Fraction TWO_FIFTHS
public static final org.apache.commons.math3.fraction.Fraction TWO_QUARTERS
public static final org.apache.commons.math3.fraction.Fraction TWO_THIRDS
public static final org.apache.commons.math3.fraction.Fraction ZERO
private static final long serialVersionUID
private final int denominator
private final int numerator
    static void <clinit>()
    {
        org.apache.commons.math3.fraction.Fraction $r0;

        $r0 = new org.apache.commons.math3.fraction.Fraction;

        specialinvoke $r0.<org.apache.commons.math3.fraction.Fraction: void <init>(int,int)>(2, 1);

        <org.apache.commons.math3.fraction.Fraction: org.apache.commons.math3.fraction.Fraction TWO> = $r0;

        $r0 = new org.apache.commons.math3.fraction.Fraction;

        specialinvoke $r0.<org.apache.commons.math3.fraction.Fraction: void <init>(int,int)>(1, 1);

        <org.apache.commons.math3.fraction.Fraction: org.apache.commons.math3.fraction.Fraction ONE> = $r0;

        $r0 = new org.apache.commons.math3.fraction.Fraction;

        specialinvoke $r0.<org.apache.commons.math3.fraction.Fraction: void <init>(int,int)>(0, 1);

        <org.apache.commons.math3.fraction.Fraction: org.apache.commons.math3.fraction.Fraction ZERO> = $r0;

        $r0 = new org.apache.commons.math3.fraction.Fraction;

        specialinvoke $r0.<org.apache.commons.math3.fraction.Fraction: void <init>(int,int)>(4, 5);

        <org.apache.commons.math3.fraction.Fraction: org.apache.commons.math3.fraction.Fraction FOUR_FIFTHS> = $r0;

        $r0 = new org.apache.commons.math3.fraction.Fraction;

        specialinvoke $r0.<org.apache.commons.math3.fraction.Fraction: void <init>(int,int)>(1, 5);

        <org.apache.commons.math3.fraction.Fraction: org.apache.commons.math3.fraction.Fraction ONE_FIFTH> = $r0;

        $r0 = new org.apache.commons.math3.fraction.Fraction;

        specialinvoke $r0.<org.apache.commons.math3.fraction.Fraction: void <init>(int,int)>(1, 2);

        <org.apache.commons.math3.fraction.Fraction: org.apache.commons.math3.fraction.Fraction ONE_HALF> = $r0;

        $r0 = new org.apache.commons.math3.fraction.Fraction;

        specialinvoke $r0.<org.apache.commons.math3.fraction.Fraction: void <init>(int,int)>(1, 4);

        <org.apache.commons.math3.fraction.Fraction: org.apache.commons.math3.fraction.Fraction ONE_QUARTER> = $r0;

        $r0 = new org.apache.commons.math3.fraction.Fraction;

        specialinvoke $r0.<org.apache.commons.math3.fraction.Fraction: void <init>(int,int)>(1, 3);

        <org.apache.commons.math3.fraction.Fraction: org.apache.commons.math3.fraction.Fraction ONE_THIRD> = $r0;

        $r0 = new org.apache.commons.math3.fraction.Fraction;

        specialinvoke $r0.<org.apache.commons.math3.fraction.Fraction: void <init>(int,int)>(3, 5);

        <org.apache.commons.math3.fraction.Fraction: org.apache.commons.math3.fraction.Fraction THREE_FIFTHS> = $r0;

        $r0 = new org.apache.commons.math3.fraction.Fraction;

        specialinvoke $r0.<org.apache.commons.math3.fraction.Fraction: void <init>(int,int)>(3, 4);

        <org.apache.commons.math3.fraction.Fraction: org.apache.commons.math3.fraction.Fraction THREE_QUARTERS> = $r0;

        $r0 = new org.apache.commons.math3.fraction.Fraction;

        specialinvoke $r0.<org.apache.commons.math3.fraction.Fraction: void <init>(int,int)>(2, 5);

        <org.apache.commons.math3.fraction.Fraction: org.apache.commons.math3.fraction.Fraction TWO_FIFTHS> = $r0;

        $r0 = new org.apache.commons.math3.fraction.Fraction;

        specialinvoke $r0.<org.apache.commons.math3.fraction.Fraction: void <init>(int,int)>(2, 4);

        <org.apache.commons.math3.fraction.Fraction: org.apache.commons.math3.fraction.Fraction TWO_QUARTERS> = $r0;

        $r0 = new org.apache.commons.math3.fraction.Fraction;

        specialinvoke $r0.<org.apache.commons.math3.fraction.Fraction: void <init>(int,int)>(2, 3);

        <org.apache.commons.math3.fraction.Fraction: org.apache.commons.math3.fraction.Fraction TWO_THIRDS> = $r0;

        $r0 = new org.apache.commons.math3.fraction.Fraction;

        specialinvoke $r0.<org.apache.commons.math3.fraction.Fraction: void <init>(int,int)>(-1, 1);

        <org.apache.commons.math3.fraction.Fraction: org.apache.commons.math3.fraction.Fraction MINUS_ONE> = $r0;

        return;
    }
    public void <init>(double) throws org.apache.commons.math3.fraction.FractionConversionException
    {
        org.apache.commons.math3.fraction.Fraction r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.fraction.Fraction;

        $d0 := @parameter0: double;

        specialinvoke r0.<org.apache.commons.math3.fraction.Fraction: void <init>(double,double,int)>($d0, 1.0E-5, 100);

        return;
    }
    public void <init>(double, double, int) throws org.apache.commons.math3.fraction.FractionConversionException
    {
        org.apache.commons.math3.fraction.Fraction r0;
        double $d0, $d1;
        int $i0;

        r0 := @this: org.apache.commons.math3.fraction.Fraction;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $i0 := @parameter2: int;

        specialinvoke r0.<org.apache.commons.math3.fraction.Fraction: void <init>(double,double,int,int)>($d0, $d1, 2147483647, $i0);

        return;
    }
    private void <init>(double, double, int, int) throws org.apache.commons.math3.fraction.FractionConversionException
    {
        org.apache.commons.math3.fraction.Fraction r0;
        double $d0, $d1, d2, d3, d4, $d5;
        int $i0, $i1, i8;
        org.apache.commons.math3.fraction.FractionConversionException $r1;
        long l2, $l3, l5, l6, l7, $l9, $l10, $l11, $l12;
        byte $b4;
        boolean z0;

        r0 := @this: org.apache.commons.math3.fraction.Fraction;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        specialinvoke r0.<java.lang.Number: void <init>()>();

        d4 = $d0;

        d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double floor(double)>($d0);

        l2 = (long) d3;

        $l3 = staticinvoke <org.apache.commons.math3.util.FastMath: long abs(long)>(l2);

        $b4 = $l3 cmp 2147483647L;

        if $b4 <= 0 goto label01;

        $r1 = new org.apache.commons.math3.fraction.FractionConversionException;

        specialinvoke $r1.<org.apache.commons.math3.fraction.FractionConversionException: void <init>(double,long,long)>($d0, l2, 1L);

        throw $r1;

     label01:
        d3 = (double) l2;

        d3 = d3 - $d0;

        d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d3);

        $b4 = d3 cmpg $d1;

        if $b4 >= 0 goto label02;

        $i0 = (int) l2;

        r0.<org.apache.commons.math3.fraction.Fraction: int numerator> = $i0;

        r0.<org.apache.commons.math3.fraction.Fraction: int denominator> = 1;

        return;

     label02:
        l5 = 1L;

        l6 = 0L;

        $l3 = l2;

        l7 = 1L;

        i8 = 0;

        z0 = 0;

     label03:
        i8 = i8 + 1;

        d3 = (double) l2;

        d3 = d4 - d3;

        d3 = 1.0 / d3;

        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double floor(double)>(d3);

        $l9 = (long) d2;

        $l10 = $l9 * $l3;

        $l10 = $l10 + l5;

        $l11 = $l9 * l7;

        $l11 = $l11 + l6;

        $l12 = staticinvoke <org.apache.commons.math3.util.FastMath: long abs(long)>($l10);

        $b4 = $l12 cmp 2147483647L;

        if $b4 > 0 goto label04;

        $l12 = staticinvoke <org.apache.commons.math3.util.FastMath: long abs(long)>($l11);

        $b4 = $l12 cmp 2147483647L;

        if $b4 <= 0 goto label07;

     label04:
        $b4 = $d1 cmpl 0.0;

        if $b4 != 0 goto label06;

        l2 = staticinvoke <org.apache.commons.math3.util.FastMath: long abs(long)>(l7);

        l5 = (long) $i0;

        $b4 = l2 cmp l5;

        if $b4 >= 0 goto label06;

     label05:
        if i8 < $i1 goto label10;

        $r1 = new org.apache.commons.math3.fraction.FractionConversionException;

        specialinvoke $r1.<org.apache.commons.math3.fraction.FractionConversionException: void <init>(double,int)>($d0, $i1);

        throw $r1;

     label06:
        $r1 = new org.apache.commons.math3.fraction.FractionConversionException;

        specialinvoke $r1.<org.apache.commons.math3.fraction.FractionConversionException: void <init>(double,long,long)>($d0, $l10, $l11);

        throw $r1;

     label07:
        d2 = (double) $l10;

        $d5 = (double) $l11;

        d2 = d2 / $d5;

        if i8 >= $i1 goto label09;

        d2 = d2 - $d0;

        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d2);

        $b4 = d2 cmpl $d1;

        if $b4 <= 0 goto label09;

        $l12 = (long) $i0;

        $b4 = $l11 cmp $l12;

        if $b4 >= 0 goto label09;

        l5 = $l3;

        $l3 = $l10;

        l6 = l7;

        l7 = $l11;

        l2 = $l9;

        d4 = d3;

     label08:
        if z0 == 0 goto label03;

        goto label05;

     label09:
        z0 = 1;

        goto label08;

     label10:
        l2 = (long) $i0;

        $b4 = $l11 cmp l2;

        if $b4 >= 0 goto label11;

        $i0 = (int) $l10;

        r0.<org.apache.commons.math3.fraction.Fraction: int numerator> = $i0;

        $i0 = (int) $l11;

        r0.<org.apache.commons.math3.fraction.Fraction: int denominator> = $i0;

        return;

     label11:
        $i0 = (int) $l3;

        r0.<org.apache.commons.math3.fraction.Fraction: int numerator> = $i0;

        $i0 = (int) l7;

        r0.<org.apache.commons.math3.fraction.Fraction: int denominator> = $i0;

        return;
    }
    public void <init>(double, int) throws org.apache.commons.math3.fraction.FractionConversionException
    {
        org.apache.commons.math3.fraction.Fraction r0;
        double $d0;
        int $i0;

        r0 := @this: org.apache.commons.math3.fraction.Fraction;

        $d0 := @parameter0: double;

        $i0 := @parameter1: int;

        specialinvoke r0.<org.apache.commons.math3.fraction.Fraction: void <init>(double,double,int,int)>($d0, 0.0, $i0, 100);

        return;
    }
    public void <init>(int)
    {
        org.apache.commons.math3.fraction.Fraction r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.fraction.Fraction;

        $i0 := @parameter0: int;

        specialinvoke r0.<org.apache.commons.math3.fraction.Fraction: void <init>(int,int)>($i0, 1);

        return;
    }
    public void <init>(int, int)
    {
        org.apache.commons.math3.fraction.Fraction r0;
        int $i0, $i1, $i2;
        org.apache.commons.math3.exception.MathArithmeticException $r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        java.lang.Object[] $r3;
        java.lang.Integer $r4;

        r0 := @this: org.apache.commons.math3.fraction.Fraction;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Number: void <init>()>();

        if $i1 != 0 goto label1;

        $r1 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats ZERO_DENOMINATOR_IN_FRACTION>;

        $r3 = newarray (java.lang.Object)[2];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3[0] = $r4;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r3[1] = $r4;

        specialinvoke $r1.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r2, $r3);

        throw $r1;

     label1:
        if $i1 >= 0 goto label4;

        if $i0 == -2147483648 goto label2;

        if $i1 != -2147483648 goto label3;

     label2:
        $r1 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OVERFLOW_IN_FRACTION>;

        $r3 = newarray (java.lang.Object)[2];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3[0] = $r4;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r3[1] = $r4;

        specialinvoke $r1.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r2, $r3);

        throw $r1;

     label3:
        $i0 = neg $i0;

        $i1 = neg $i1;

     label4:
        $i2 = staticinvoke <org.apache.commons.math3.util.ArithmeticUtils: int gcd(int,int)>($i0, $i1);

        if $i2 <= 1 goto label5;

        $i0 = $i0 / $i2;

        $i1 = $i1 / $i2;

     label5:
        if $i1 >= 0 goto label6;

        $i0 = neg $i0;

        $i1 = neg $i1;

     label6:
        r0.<org.apache.commons.math3.fraction.Fraction: int numerator> = $i0;

        r0.<org.apache.commons.math3.fraction.Fraction: int denominator> = $i1;

        return;
    }
    private org.apache.commons.math3.fraction.Fraction addSub(org.apache.commons.math3.fraction.Fraction, boolean)
    {
        org.apache.commons.math3.fraction.Fraction r0, r1, $r5;
        boolean $z0;
        org.apache.commons.math3.exception.NullArgumentException $r2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3;
        java.lang.Object[] $r4;
        int $i0, $i1, $i2, $i4;
        long $l3;
        java.math.BigInteger $r6, $r7, $r8;
        org.apache.commons.math3.exception.MathArithmeticException $r9;

        r0 := @this: org.apache.commons.math3.fraction.Fraction;

        r1 := @parameter0: org.apache.commons.math3.fraction.Fraction;

        $z0 := @parameter1: boolean;

        if r1 != null goto label01;

        $r2 = new org.apache.commons.math3.exception.NullArgumentException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats FRACTION>;

        $r4 = newarray (java.lang.Object)[0];

        specialinvoke $r2.<org.apache.commons.math3.exception.NullArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r3, $r4);

        throw $r2;

     label01:
        $i0 = r0.<org.apache.commons.math3.fraction.Fraction: int numerator>;

        if $i0 != 0 goto label03;

        if $z0 == 0 goto label02;

        return r1;

     label02:
        r0 = virtualinvoke r1.<org.apache.commons.math3.fraction.Fraction: org.apache.commons.math3.fraction.Fraction negate()>();

        return r0;

     label03:
        $i0 = r1.<org.apache.commons.math3.fraction.Fraction: int numerator>;

        if $i0 != 0 goto label04;

        return r0;

     label04:
        $i0 = r0.<org.apache.commons.math3.fraction.Fraction: int denominator>;

        $i1 = r1.<org.apache.commons.math3.fraction.Fraction: int denominator>;

        $i0 = staticinvoke <org.apache.commons.math3.util.ArithmeticUtils: int gcd(int,int)>($i0, $i1);

        if $i0 != 1 goto label07;

        $i0 = r0.<org.apache.commons.math3.fraction.Fraction: int numerator>;

        $i1 = r1.<org.apache.commons.math3.fraction.Fraction: int denominator>;

        $i0 = staticinvoke <org.apache.commons.math3.util.ArithmeticUtils: int mulAndCheck(int,int)>($i0, $i1);

        $i1 = r1.<org.apache.commons.math3.fraction.Fraction: int numerator>;

        $i2 = r0.<org.apache.commons.math3.fraction.Fraction: int denominator>;

        $i1 = staticinvoke <org.apache.commons.math3.util.ArithmeticUtils: int mulAndCheck(int,int)>($i1, $i2);

        $r5 = new org.apache.commons.math3.fraction.Fraction;

        if $z0 == 0 goto label06;

        $i0 = staticinvoke <org.apache.commons.math3.util.ArithmeticUtils: int addAndCheck(int,int)>($i0, $i1);

     label05:
        $i1 = r0.<org.apache.commons.math3.fraction.Fraction: int denominator>;

        $i2 = r1.<org.apache.commons.math3.fraction.Fraction: int denominator>;

        $i1 = staticinvoke <org.apache.commons.math3.util.ArithmeticUtils: int mulAndCheck(int,int)>($i1, $i2);

        specialinvoke $r5.<org.apache.commons.math3.fraction.Fraction: void <init>(int,int)>($i0, $i1);

        return $r5;

     label06:
        $i0 = staticinvoke <org.apache.commons.math3.util.ArithmeticUtils: int subAndCheck(int,int)>($i0, $i1);

        goto label05;

     label07:
        $i1 = r0.<org.apache.commons.math3.fraction.Fraction: int numerator>;

        $l3 = (long) $i1;

        $r6 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l3);

        $i1 = r1.<org.apache.commons.math3.fraction.Fraction: int denominator>;

        $i1 = $i1 / $i0;

        $l3 = (long) $i1;

        $r7 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l3);

        $r6 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r7);

        $i1 = r1.<org.apache.commons.math3.fraction.Fraction: int numerator>;

        $l3 = (long) $i1;

        $r7 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l3);

        $i1 = r0.<org.apache.commons.math3.fraction.Fraction: int denominator>;

        $i1 = $i1 / $i0;

        $l3 = (long) $i1;

        $r8 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l3);

        $r7 = virtualinvoke $r7.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r8);

        if $z0 == 0 goto label10;

        $r6 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r7);

     label08:
        $l3 = (long) $i0;

        $r7 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l3);

        $r7 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r7);

        $i1 = virtualinvoke $r7.<java.math.BigInteger: int intValue()>();

        if $i1 != 0 goto label11;

        $i2 = $i0;

     label09:
        $l3 = (long) $i2;

        $r7 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l3);

        $r6 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r7);

        $i1 = virtualinvoke $r6.<java.math.BigInteger: int bitLength()>();

        if $i1 <= 31 goto label12;

        $r9 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NUMERATOR_OVERFLOW_AFTER_MULTIPLY>;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = $r6;

        specialinvoke $r9.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r3, $r4);

        throw $r9;

     label10:
        $r6 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r7);

        goto label08;

     label11:
        $i2 = staticinvoke <org.apache.commons.math3.util.ArithmeticUtils: int gcd(int,int)>($i1, $i0);

        goto label09;

     label12:
        $r5 = new org.apache.commons.math3.fraction.Fraction;

        $i1 = virtualinvoke $r6.<java.math.BigInteger: int intValue()>();

        $i4 = r0.<org.apache.commons.math3.fraction.Fraction: int denominator>;

        $i0 = $i4 / $i0;

        $i4 = r1.<org.apache.commons.math3.fraction.Fraction: int denominator>;

        $i2 = $i4 / $i2;

        $i0 = staticinvoke <org.apache.commons.math3.util.ArithmeticUtils: int mulAndCheck(int,int)>($i0, $i2);

        specialinvoke $r5.<org.apache.commons.math3.fraction.Fraction: void <init>(int,int)>($i1, $i0);

        return $r5;
    }
    public static org.apache.commons.math3.fraction.Fraction getReducedFraction(int, int)
    {
        int $i0, $i1, $i2;
        org.apache.commons.math3.exception.MathArithmeticException $r0;
        org.apache.commons.math3.exception.util.LocalizedFormats $r1;
        java.lang.Object[] $r2;
        java.lang.Integer $r3;
        org.apache.commons.math3.fraction.Fraction $r4;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        if $i1 != 0 goto label1;

        $r0 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r1 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats ZERO_DENOMINATOR_IN_FRACTION>;

        $r2 = newarray (java.lang.Object)[2];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r2[0] = $r3;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r2[1] = $r3;

        specialinvoke $r0.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r1, $r2);

        throw $r0;

     label1:
        if $i0 != 0 goto label2;

        $r4 = <org.apache.commons.math3.fraction.Fraction: org.apache.commons.math3.fraction.Fraction ZERO>;

        return $r4;

     label2:
        if $i1 != -2147483648 goto label3;

        $i2 = $i0 & 1;

        if $i2 != 0 goto label3;

        $i0 = $i0 / 2;

        $i1 = $i1 / 2;

     label3:
        if $i1 >= 0 goto label6;

        if $i0 == -2147483648 goto label4;

        if $i1 != -2147483648 goto label5;

     label4:
        $r0 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r1 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OVERFLOW_IN_FRACTION>;

        $r2 = newarray (java.lang.Object)[2];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r2[0] = $r3;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r2[1] = $r3;

        specialinvoke $r0.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r1, $r2);

        throw $r0;

     label5:
        $i0 = neg $i0;

        $i1 = neg $i1;

     label6:
        $i2 = staticinvoke <org.apache.commons.math3.util.ArithmeticUtils: int gcd(int,int)>($i0, $i1);

        $i0 = $i0 / $i2;

        $i1 = $i1 / $i2;

        $r4 = new org.apache.commons.math3.fraction.Fraction;

        specialinvoke $r4.<org.apache.commons.math3.fraction.Fraction: void <init>(int,int)>($i0, $i1);

        return $r4;
    }
    public org.apache.commons.math3.fraction.Fraction abs()
    {
        org.apache.commons.math3.fraction.Fraction r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.fraction.Fraction;

        $i0 = r0.<org.apache.commons.math3.fraction.Fraction: int numerator>;

        if $i0 < 0 goto label1;

        return r0;

     label1:
        r0 = virtualinvoke r0.<org.apache.commons.math3.fraction.Fraction: org.apache.commons.math3.fraction.Fraction negate()>();

        return r0;
    }
    public volatile java.lang.Object add(java.lang.Object) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.fraction.Fraction r0, $r2;
        java.lang.Object $r1;

        r0 := @this: org.apache.commons.math3.fraction.Fraction;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math3.fraction.Fraction) $r1;

        r0 = virtualinvoke r0.<org.apache.commons.math3.fraction.Fraction: org.apache.commons.math3.fraction.Fraction add(org.apache.commons.math3.fraction.Fraction)>($r2);

        return r0;
    }
    public org.apache.commons.math3.fraction.Fraction add(int)
    {
        org.apache.commons.math3.fraction.Fraction r0, $r1;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.commons.math3.fraction.Fraction;

        $i0 := @parameter0: int;

        $r1 = new org.apache.commons.math3.fraction.Fraction;

        $i1 = r0.<org.apache.commons.math3.fraction.Fraction: int numerator>;

        $i2 = r0.<org.apache.commons.math3.fraction.Fraction: int denominator>;

        $i0 = $i2 * $i0;

        $i0 = $i1 + $i0;

        $i1 = r0.<org.apache.commons.math3.fraction.Fraction: int denominator>;

        specialinvoke $r1.<org.apache.commons.math3.fraction.Fraction: void <init>(int,int)>($i0, $i1);

        return $r1;
    }
    public org.apache.commons.math3.fraction.Fraction add(org.apache.commons.math3.fraction.Fraction)
    {
        org.apache.commons.math3.fraction.Fraction r0, $r1;

        r0 := @this: org.apache.commons.math3.fraction.Fraction;

        $r1 := @parameter0: org.apache.commons.math3.fraction.Fraction;

        r0 = specialinvoke r0.<org.apache.commons.math3.fraction.Fraction: org.apache.commons.math3.fraction.Fraction addSub(org.apache.commons.math3.fraction.Fraction,boolean)>($r1, 1);

        return r0;
    }
    public volatile int compareTo(java.lang.Object)
    {
        org.apache.commons.math3.fraction.Fraction r0, $r2;
        int $i0;
        java.lang.Object $r1;

        r0 := @this: org.apache.commons.math3.fraction.Fraction;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math3.fraction.Fraction) $r1;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.fraction.Fraction: int compareTo(org.apache.commons.math3.fraction.Fraction)>($r2);

        return $i0;
    }
    public int compareTo(org.apache.commons.math3.fraction.Fraction)
    {
        org.apache.commons.math3.fraction.Fraction r0, $r1;
        long l0, l1, $l3;
        int $i2;
        byte $b4;

        r0 := @this: org.apache.commons.math3.fraction.Fraction;

        $r1 := @parameter0: org.apache.commons.math3.fraction.Fraction;

        $i2 = r0.<org.apache.commons.math3.fraction.Fraction: int numerator>;

        l1 = (long) $i2;

        $i2 = $r1.<org.apache.commons.math3.fraction.Fraction: int denominator>;

        l0 = (long) $i2;

        l1 = l1 * l0;

        $i2 = r0.<org.apache.commons.math3.fraction.Fraction: int denominator>;

        l0 = (long) $i2;

        $i2 = $r1.<org.apache.commons.math3.fraction.Fraction: int numerator>;

        $l3 = (long) $i2;

        l0 = l0 * $l3;

        $b4 = l1 cmp l0;

        if $b4 >= 0 goto label1;

        return -1;

     label1:
        $b4 = l1 cmp l0;

        if $b4 <= 0 goto label2;

        return 1;

     label2:
        return 0;
    }
    public volatile java.lang.Object divide(java.lang.Object) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.fraction.Fraction r0, $r2;
        java.lang.Object $r1;

        r0 := @this: org.apache.commons.math3.fraction.Fraction;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math3.fraction.Fraction) $r1;

        r0 = virtualinvoke r0.<org.apache.commons.math3.fraction.Fraction: org.apache.commons.math3.fraction.Fraction divide(org.apache.commons.math3.fraction.Fraction)>($r2);

        return r0;
    }
    public org.apache.commons.math3.fraction.Fraction divide(int)
    {
        org.apache.commons.math3.fraction.Fraction r0, $r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.fraction.Fraction;

        $i0 := @parameter0: int;

        $r1 = new org.apache.commons.math3.fraction.Fraction;

        specialinvoke $r1.<org.apache.commons.math3.fraction.Fraction: void <init>(int)>($i0);

        r0 = virtualinvoke r0.<org.apache.commons.math3.fraction.Fraction: org.apache.commons.math3.fraction.Fraction divide(org.apache.commons.math3.fraction.Fraction)>($r1);

        return r0;
    }
    public org.apache.commons.math3.fraction.Fraction divide(org.apache.commons.math3.fraction.Fraction)
    {
        org.apache.commons.math3.fraction.Fraction r0, $r1;
        org.apache.commons.math3.exception.NullArgumentException $r2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3;
        java.lang.Object[] $r4;
        int $i0;
        org.apache.commons.math3.exception.MathArithmeticException $r5;
        java.lang.Integer $r6;

        r0 := @this: org.apache.commons.math3.fraction.Fraction;

        $r1 := @parameter0: org.apache.commons.math3.fraction.Fraction;

        if $r1 != null goto label1;

        $r2 = new org.apache.commons.math3.exception.NullArgumentException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats FRACTION>;

        $r4 = newarray (java.lang.Object)[0];

        specialinvoke $r2.<org.apache.commons.math3.exception.NullArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r3, $r4);

        throw $r2;

     label1:
        $i0 = $r1.<org.apache.commons.math3.fraction.Fraction: int numerator>;

        if $i0 != 0 goto label2;

        $r5 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats ZERO_FRACTION_TO_DIVIDE_BY>;

        $r4 = newarray (java.lang.Object)[2];

        $i0 = $r1.<org.apache.commons.math3.fraction.Fraction: int numerator>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r4[0] = $r6;

        $i0 = $r1.<org.apache.commons.math3.fraction.Fraction: int denominator>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r4[1] = $r6;

        specialinvoke $r5.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r3, $r4);

        throw $r5;

     label2:
        $r1 = virtualinvoke $r1.<org.apache.commons.math3.fraction.Fraction: org.apache.commons.math3.fraction.Fraction reciprocal()>();

        r0 = virtualinvoke r0.<org.apache.commons.math3.fraction.Fraction: org.apache.commons.math3.fraction.Fraction multiply(org.apache.commons.math3.fraction.Fraction)>($r1);

        return r0;
    }
    public double doubleValue()
    {
        org.apache.commons.math3.fraction.Fraction r0;
        int $i0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.fraction.Fraction;

        $i0 = r0.<org.apache.commons.math3.fraction.Fraction: int numerator>;

        $d0 = (double) $i0;

        $i0 = r0.<org.apache.commons.math3.fraction.Fraction: int denominator>;

        $d1 = (double) $i0;

        $d0 = $d0 / $d1;

        return $d0;
    }
    public boolean equals(java.lang.Object)
    {
        org.apache.commons.math3.fraction.Fraction r0, r2;
        java.lang.Object $r1;
        boolean $z0;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.fraction.Fraction;

        $r1 := @parameter0: java.lang.Object;

        if r0 != $r1 goto label1;

        return 1;

     label1:
        $z0 = $r1 instanceof org.apache.commons.math3.fraction.Fraction;

        if $z0 == 0 goto label2;

        r2 = (org.apache.commons.math3.fraction.Fraction) $r1;

        $i0 = r0.<org.apache.commons.math3.fraction.Fraction: int numerator>;

        $i1 = r2.<org.apache.commons.math3.fraction.Fraction: int numerator>;

        if $i0 != $i1 goto label2;

        $i0 = r0.<org.apache.commons.math3.fraction.Fraction: int denominator>;

        $i1 = r2.<org.apache.commons.math3.fraction.Fraction: int denominator>;

        if $i0 == $i1 goto label3;

     label2:
        return 0;

     label3:
        return 1;
    }
    public float floatValue()
    {
        org.apache.commons.math3.fraction.Fraction r0;
        double $d0;
        float $f0;

        r0 := @this: org.apache.commons.math3.fraction.Fraction;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.fraction.Fraction: double doubleValue()>();

        $f0 = (float) $d0;

        return $f0;
    }
    public int getDenominator()
    {
        org.apache.commons.math3.fraction.Fraction r0;
        int i0;

        r0 := @this: org.apache.commons.math3.fraction.Fraction;

        i0 = r0.<org.apache.commons.math3.fraction.Fraction: int denominator>;

        return i0;
    }
    public volatile org.apache.commons.math3.Field getField()
    {
        org.apache.commons.math3.fraction.Fraction r0;
        org.apache.commons.math3.fraction.FractionField $r1;

        r0 := @this: org.apache.commons.math3.fraction.Fraction;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.fraction.Fraction: org.apache.commons.math3.fraction.FractionField getField()>();

        return $r1;
    }
    public org.apache.commons.math3.fraction.FractionField getField()
    {
        org.apache.commons.math3.fraction.Fraction r0;
        org.apache.commons.math3.fraction.FractionField $r1;

        r0 := @this: org.apache.commons.math3.fraction.Fraction;

        $r1 = staticinvoke <org.apache.commons.math3.fraction.FractionField: org.apache.commons.math3.fraction.FractionField getInstance()>();

        return $r1;
    }
    public int getNumerator()
    {
        org.apache.commons.math3.fraction.Fraction r0;
        int i0;

        r0 := @this: org.apache.commons.math3.fraction.Fraction;

        i0 = r0.<org.apache.commons.math3.fraction.Fraction: int numerator>;

        return i0;
    }
    public int hashCode()
    {
        org.apache.commons.math3.fraction.Fraction r0;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.fraction.Fraction;

        $i0 = r0.<org.apache.commons.math3.fraction.Fraction: int numerator>;

        $i0 = $i0 + 629;

        $i1 = $i0 * 37;

        $i0 = r0.<org.apache.commons.math3.fraction.Fraction: int denominator>;

        $i0 = $i1 + $i0;

        return $i0;
    }
    public int intValue()
    {
        org.apache.commons.math3.fraction.Fraction r0;
        double $d0;
        int $i0;

        r0 := @this: org.apache.commons.math3.fraction.Fraction;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.fraction.Fraction: double doubleValue()>();

        $i0 = (int) $d0;

        return $i0;
    }
    public long longValue()
    {
        org.apache.commons.math3.fraction.Fraction r0;
        double $d0;
        long $l0;

        r0 := @this: org.apache.commons.math3.fraction.Fraction;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.fraction.Fraction: double doubleValue()>();

        $l0 = (long) $d0;

        return $l0;
    }
    public volatile java.lang.Object multiply(int)
    {
        org.apache.commons.math3.fraction.Fraction r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.fraction.Fraction;

        $i0 := @parameter0: int;

        r0 = virtualinvoke r0.<org.apache.commons.math3.fraction.Fraction: org.apache.commons.math3.fraction.Fraction multiply(int)>($i0);

        return r0;
    }
    public volatile java.lang.Object multiply(java.lang.Object) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.fraction.Fraction r0, $r2;
        java.lang.Object $r1;

        r0 := @this: org.apache.commons.math3.fraction.Fraction;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math3.fraction.Fraction) $r1;

        r0 = virtualinvoke r0.<org.apache.commons.math3.fraction.Fraction: org.apache.commons.math3.fraction.Fraction multiply(org.apache.commons.math3.fraction.Fraction)>($r2);

        return r0;
    }
    public org.apache.commons.math3.fraction.Fraction multiply(int)
    {
        org.apache.commons.math3.fraction.Fraction r0, $r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.fraction.Fraction;

        $i0 := @parameter0: int;

        $r1 = new org.apache.commons.math3.fraction.Fraction;

        specialinvoke $r1.<org.apache.commons.math3.fraction.Fraction: void <init>(int)>($i0);

        r0 = virtualinvoke r0.<org.apache.commons.math3.fraction.Fraction: org.apache.commons.math3.fraction.Fraction multiply(org.apache.commons.math3.fraction.Fraction)>($r1);

        return r0;
    }
    public org.apache.commons.math3.fraction.Fraction multiply(org.apache.commons.math3.fraction.Fraction)
    {
        org.apache.commons.math3.fraction.Fraction r0, $r1;
        org.apache.commons.math3.exception.NullArgumentException $r2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3;
        java.lang.Object[] $r4;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.apache.commons.math3.fraction.Fraction;

        $r1 := @parameter0: org.apache.commons.math3.fraction.Fraction;

        if $r1 != null goto label1;

        $r2 = new org.apache.commons.math3.exception.NullArgumentException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats FRACTION>;

        $r4 = newarray (java.lang.Object)[0];

        specialinvoke $r2.<org.apache.commons.math3.exception.NullArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r3, $r4);

        throw $r2;

     label1:
        $i0 = r0.<org.apache.commons.math3.fraction.Fraction: int numerator>;

        if $i0 == 0 goto label2;

        $i0 = $r1.<org.apache.commons.math3.fraction.Fraction: int numerator>;

        if $i0 != 0 goto label3;

     label2:
        r0 = <org.apache.commons.math3.fraction.Fraction: org.apache.commons.math3.fraction.Fraction ZERO>;

        return r0;

     label3:
        $i0 = r0.<org.apache.commons.math3.fraction.Fraction: int numerator>;

        $i1 = $r1.<org.apache.commons.math3.fraction.Fraction: int denominator>;

        $i0 = staticinvoke <org.apache.commons.math3.util.ArithmeticUtils: int gcd(int,int)>($i0, $i1);

        $i1 = $r1.<org.apache.commons.math3.fraction.Fraction: int numerator>;

        $i2 = r0.<org.apache.commons.math3.fraction.Fraction: int denominator>;

        $i1 = staticinvoke <org.apache.commons.math3.util.ArithmeticUtils: int gcd(int,int)>($i1, $i2);

        $i2 = r0.<org.apache.commons.math3.fraction.Fraction: int numerator>;

        $i2 = $i2 / $i0;

        $i3 = $r1.<org.apache.commons.math3.fraction.Fraction: int numerator>;

        $i3 = $i3 / $i1;

        $i2 = staticinvoke <org.apache.commons.math3.util.ArithmeticUtils: int mulAndCheck(int,int)>($i2, $i3);

        $i3 = r0.<org.apache.commons.math3.fraction.Fraction: int denominator>;

        $i1 = $i3 / $i1;

        $i3 = $r1.<org.apache.commons.math3.fraction.Fraction: int denominator>;

        $i0 = $i3 / $i0;

        $i0 = staticinvoke <org.apache.commons.math3.util.ArithmeticUtils: int mulAndCheck(int,int)>($i1, $i0);

        r0 = staticinvoke <org.apache.commons.math3.fraction.Fraction: org.apache.commons.math3.fraction.Fraction getReducedFraction(int,int)>($i2, $i0);

        return r0;
    }
    public volatile java.lang.Object negate()
    {
        org.apache.commons.math3.fraction.Fraction r0;

        r0 := @this: org.apache.commons.math3.fraction.Fraction;

        r0 = virtualinvoke r0.<org.apache.commons.math3.fraction.Fraction: org.apache.commons.math3.fraction.Fraction negate()>();

        return r0;
    }
    public org.apache.commons.math3.fraction.Fraction negate()
    {
        org.apache.commons.math3.fraction.Fraction r0, $r5;
        int $i0, $i1;
        org.apache.commons.math3.exception.MathArithmeticException $r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        java.lang.Object[] $r3;
        java.lang.Integer $r4;

        r0 := @this: org.apache.commons.math3.fraction.Fraction;

        $i0 = r0.<org.apache.commons.math3.fraction.Fraction: int numerator>;

        if $i0 != -2147483648 goto label1;

        $r1 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OVERFLOW_IN_FRACTION>;

        $r3 = newarray (java.lang.Object)[2];

        $i0 = r0.<org.apache.commons.math3.fraction.Fraction: int numerator>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3[0] = $r4;

        $i0 = r0.<org.apache.commons.math3.fraction.Fraction: int denominator>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3[1] = $r4;

        specialinvoke $r1.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r2, $r3);

        throw $r1;

     label1:
        $r5 = new org.apache.commons.math3.fraction.Fraction;

        $i0 = r0.<org.apache.commons.math3.fraction.Fraction: int numerator>;

        $i0 = neg $i0;

        $i1 = r0.<org.apache.commons.math3.fraction.Fraction: int denominator>;

        specialinvoke $r5.<org.apache.commons.math3.fraction.Fraction: void <init>(int,int)>($i0, $i1);

        return $r5;
    }
    public double percentageValue()
    {
        org.apache.commons.math3.fraction.Fraction r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.fraction.Fraction;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.fraction.Fraction: double doubleValue()>();

        $d0 = 100.0 * $d0;

        return $d0;
    }
    public volatile java.lang.Object reciprocal() throws org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.fraction.Fraction r0;

        r0 := @this: org.apache.commons.math3.fraction.Fraction;

        r0 = virtualinvoke r0.<org.apache.commons.math3.fraction.Fraction: org.apache.commons.math3.fraction.Fraction reciprocal()>();

        return r0;
    }
    public org.apache.commons.math3.fraction.Fraction reciprocal()
    {
        org.apache.commons.math3.fraction.Fraction r0, $r1;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.fraction.Fraction;

        $r1 = new org.apache.commons.math3.fraction.Fraction;

        $i0 = r0.<org.apache.commons.math3.fraction.Fraction: int denominator>;

        $i1 = r0.<org.apache.commons.math3.fraction.Fraction: int numerator>;

        specialinvoke $r1.<org.apache.commons.math3.fraction.Fraction: void <init>(int,int)>($i0, $i1);

        return $r1;
    }
    public volatile java.lang.Object subtract(java.lang.Object) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.fraction.Fraction r0, $r2;
        java.lang.Object $r1;

        r0 := @this: org.apache.commons.math3.fraction.Fraction;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math3.fraction.Fraction) $r1;

        r0 = virtualinvoke r0.<org.apache.commons.math3.fraction.Fraction: org.apache.commons.math3.fraction.Fraction subtract(org.apache.commons.math3.fraction.Fraction)>($r2);

        return r0;
    }
    public org.apache.commons.math3.fraction.Fraction subtract(int)
    {
        org.apache.commons.math3.fraction.Fraction r0, $r1;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.commons.math3.fraction.Fraction;

        $i0 := @parameter0: int;

        $r1 = new org.apache.commons.math3.fraction.Fraction;

        $i1 = r0.<org.apache.commons.math3.fraction.Fraction: int numerator>;

        $i2 = r0.<org.apache.commons.math3.fraction.Fraction: int denominator>;

        $i0 = $i2 * $i0;

        $i0 = $i1 - $i0;

        $i1 = r0.<org.apache.commons.math3.fraction.Fraction: int denominator>;

        specialinvoke $r1.<org.apache.commons.math3.fraction.Fraction: void <init>(int,int)>($i0, $i1);

        return $r1;
    }
    public org.apache.commons.math3.fraction.Fraction subtract(org.apache.commons.math3.fraction.Fraction)
    {
        org.apache.commons.math3.fraction.Fraction r0, $r1;

        r0 := @this: org.apache.commons.math3.fraction.Fraction;

        $r1 := @parameter0: org.apache.commons.math3.fraction.Fraction;

        r0 = specialinvoke r0.<org.apache.commons.math3.fraction.Fraction: org.apache.commons.math3.fraction.Fraction addSub(org.apache.commons.math3.fraction.Fraction,boolean)>($r1, 0);

        return r0;
    }
    public java.lang.String toString()
    {
        org.apache.commons.math3.fraction.Fraction r0;
        int $i0;
        java.lang.String $r1;
        java.lang.StringBuilder $r2;

        r0 := @this: org.apache.commons.math3.fraction.Fraction;

        $i0 = r0.<org.apache.commons.math3.fraction.Fraction: int denominator>;

        if $i0 != 1 goto label1;

        $i0 = r0.<org.apache.commons.math3.fraction.Fraction: int numerator>;

        $r1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0);

        return $r1;

     label1:
        $i0 = r0.<org.apache.commons.math3.fraction.Fraction: int numerator>;

        if $i0 != 0 goto label2;

        return "0";

     label2:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $i0 = r0.<org.apache.commons.math3.fraction.Fraction: int numerator>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" / ");

        $i0 = r0.<org.apache.commons.math3.fraction.Fraction: int denominator>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;
    }
