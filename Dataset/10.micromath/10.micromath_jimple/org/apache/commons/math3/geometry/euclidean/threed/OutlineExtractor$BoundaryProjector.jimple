org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector extends java.lang.Object implements org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor
private org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet projected
final org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor this$0
private final double tolerance
    void <init>(org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor, double)
    {
        org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector r0;
        org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor $r1;
        double $d0;
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet $r2;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r3;
        java.lang.Boolean $r4;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor;

        $d0 := @parameter1: double;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector: org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor this$0> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;

        $r3 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r4 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        specialinvoke $r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r4);

        specialinvoke $r2.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree,double)>($r3, $d0);

        r0.<org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet projected> = $r2;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector: double tolerance> = $d0;

        return;
    }
    private void addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane, boolean)
    {
        org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector r0;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane r1;
        boolean $z0, $z1;
        double $d0, $d1;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] r2, r14;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r3, $r17;
        int i0, $i2, $i3, $i4, $i5;
        java.util.ArrayList r4;
        org.apache.commons.math3.geometry.euclidean.twod.Line r5, r19;
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet r6, $r22;
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane r7;
        org.apache.commons.math3.geometry.partitioning.Hyperplane $r8;
        org.apache.commons.math3.geometry.euclidean.threed.Plane r9;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r10, $r12;
        org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor $r11;
        byte $b1;
        org.apache.commons.math3.geometry.partitioning.Region $r13;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] r15, $r16;
        org.apache.commons.math3.geometry.euclidean.twod.SubLine $r18;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane $r20;
        org.apache.commons.math3.geometry.partitioning.RegionFactory $r21;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.SubHyperplane;

        $z0 := @parameter1: boolean;

        r7 = (org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane) r1;

        $r8 = interfaceinvoke r1.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        r9 = (org.apache.commons.math3.geometry.euclidean.threed.Plane) $r8;

        $r10 = virtualinvoke r9.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getNormal()>();

        $r11 = r0.<org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector: org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor this$0>;

        $r12 = staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor: org.apache.commons.math3.geometry.euclidean.threed.Vector3D access$000(org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor)>($r11);

        $d0 = virtualinvoke $r10.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double dotProduct(org.apache.commons.math3.geometry.Vector)>($r12);

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        $b1 = $d1 cmpl 0.001;

        if $b1 <= 0 goto label21;

        $r13 = virtualinvoke r7.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: org.apache.commons.math3.geometry.partitioning.Region getRemainingRegion()>();

        r6 = (org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet) $r13;

        r2 = virtualinvoke r6.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] getVertices()>();

        r14 = r2;

        $b1 = $d0 cmpg 0.0;

        if $b1 >= 0 goto label04;

        $z1 = 1;

     label01:
        $z0 = $z1 ^ $z0;

        if $z0 == 0 goto label08;

        $i2 = lengthof r2;

        r14 = newarray (org.apache.commons.math3.geometry.euclidean.twod.Vector2D[])[$i2];

        $i2 = 0;

     label02:
        $i3 = lengthof r2;

        if $i2 >= $i3 goto label08;

        r15 = r2[$i2];

        $i3 = lengthof r15;

        $r16 = newarray (org.apache.commons.math3.geometry.euclidean.twod.Vector2D)[$i3];

        $r17 = r15[0];

        if $r17 != null goto label05;

        $r16[0] = null;

        $i3 = 1;

     label03:
        $i4 = lengthof r15;

        if $i3 >= $i4 goto label07;

        $i4 = lengthof r15;

        $i4 = $i4 - $i3;

        $r17 = r15[$i4];

        $r16[$i3] = $r17;

        $i3 = $i3 + 1;

        goto label03;

     label04:
        $z1 = 0;

        goto label01;

     label05:
        $i3 = 0;

     label06:
        $i4 = lengthof r15;

        if $i3 >= $i4 goto label07;

        $i4 = lengthof r15;

        $i5 = $i3 + 1;

        $i4 = $i4 - $i5;

        $r17 = r15[$i4];

        $r16[$i3] = $r17;

        $i3 = $i3 + 1;

        goto label06;

     label07:
        r14[$i2] = $r16;

        $i2 = $i2 + 1;

        goto label02;

     label08:
        r4 = new java.util.ArrayList;

        specialinvoke r4.<java.util.ArrayList: void <init>()>();

        r2 = r14;

        $i2 = lengthof r14;

        $i3 = 0;

     label09:
        if $i3 >= $i2 goto label20;

        r15 = r2[$i3];

        $r17 = r15[0];

        if $r17 == null goto label17;

        $z0 = 1;

     label10:
        if $z0 == 0 goto label18;

        $i4 = lengthof r15;

        $i4 = $i4 + -1;

     label11:
        $r17 = r15[$i4];

        $r10 = virtualinvoke r9.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D toSpace(org.apache.commons.math3.geometry.Point)>($r17);

        $i5 = $i4 + 1;

        i0 = lengthof r15;

        $i5 = $i5 % i0;

        $r17 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        $r11 = r0.<org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector: org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor this$0>;

        $r12 = staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor: org.apache.commons.math3.geometry.euclidean.threed.Vector3D access$100(org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor)>($r11);

        $d0 = virtualinvoke $r10.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double dotProduct(org.apache.commons.math3.geometry.Vector)>($r12);

        $r11 = r0.<org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector: org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor this$0>;

        $r12 = staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor: org.apache.commons.math3.geometry.euclidean.threed.Vector3D access$200(org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor)>($r11);

        $d1 = virtualinvoke $r10.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double dotProduct(org.apache.commons.math3.geometry.Vector)>($r12);

        specialinvoke $r17.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: void <init>(double,double)>($d0, $d1);

     label12:
        i0 = lengthof r15;

        if $i5 >= i0 goto label19;

        r3 = r15[$i5];

        $r10 = virtualinvoke r9.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D toSpace(org.apache.commons.math3.geometry.Point)>(r3);

        r3 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        $r11 = r0.<org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector: org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor this$0>;

        $r12 = staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor: org.apache.commons.math3.geometry.euclidean.threed.Vector3D access$100(org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor)>($r11);

        $d0 = virtualinvoke $r10.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double dotProduct(org.apache.commons.math3.geometry.Vector)>($r12);

        $r11 = r0.<org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector: org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor this$0>;

        $r12 = staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor: org.apache.commons.math3.geometry.euclidean.threed.Vector3D access$200(org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor)>($r11);

        $d1 = virtualinvoke $r10.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double dotProduct(org.apache.commons.math3.geometry.Vector)>($r12);

        specialinvoke r3.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: void <init>(double,double)>($d0, $d1);

        r5 = new org.apache.commons.math3.geometry.euclidean.twod.Line;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector: double tolerance>;

        specialinvoke r5.<org.apache.commons.math3.geometry.euclidean.twod.Line: void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)>($r17, r3, $d0);

        $r18 = virtualinvoke r5.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.twod.SubLine wholeHyperplane()>();

        r1 = $r18;

        if $z0 != 0 goto label13;

        if $i4 == 1 goto label14;

     label13:
        $d0 = virtualinvoke r5.<org.apache.commons.math3.geometry.euclidean.twod.Line: double getAngle()>();

        $d0 = $d0 + 1.5707963267948966;

        r19 = new org.apache.commons.math3.geometry.euclidean.twod.Line;

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector: double tolerance>;

        specialinvoke r19.<org.apache.commons.math3.geometry.euclidean.twod.Line: void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double,double)>($r17, $d0, $d1);

        $r20 = interfaceinvoke $r18.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane split(org.apache.commons.math3.geometry.partitioning.Hyperplane)>(r19);

        r1 = virtualinvoke $r20.<org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlus()>();

     label14:
        if $z0 != 0 goto label15;

        $i4 = lengthof r15;

        $i4 = $i4 + -1;

        if $i5 == $i4 goto label16;

     label15:
        $d0 = virtualinvoke r5.<org.apache.commons.math3.geometry.euclidean.twod.Line: double getAngle()>();

        $d1 = $d0 + 1.5707963267948966;

        r5 = new org.apache.commons.math3.geometry.euclidean.twod.Line;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector: double tolerance>;

        specialinvoke r5.<org.apache.commons.math3.geometry.euclidean.twod.Line: void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double,double)>(r3, $d1, $d0);

        $r20 = interfaceinvoke r1.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane split(org.apache.commons.math3.geometry.partitioning.Hyperplane)>(r5);

        r1 = virtualinvoke $r20.<org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane getMinus()>();

     label16:
        virtualinvoke r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        $i4 = $i5;

        $r17 = r3;

        $i5 = $i5 + 1;

        goto label12;

     label17:
        $z0 = 0;

        goto label10;

     label18:
        $i4 = 1;

        goto label11;

     label19:
        $i3 = $i3 + 1;

        goto label09;

     label20:
        r6 = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector: double tolerance>;

        specialinvoke r6.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: void <init>(java.util.Collection,double)>(r4, $d0);

        $r21 = new org.apache.commons.math3.geometry.partitioning.RegionFactory;

        specialinvoke $r21.<org.apache.commons.math3.geometry.partitioning.RegionFactory: void <init>()>();

        $r22 = r0.<org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet projected>;

        $r13 = virtualinvoke $r21.<org.apache.commons.math3.geometry.partitioning.RegionFactory: org.apache.commons.math3.geometry.partitioning.Region union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)>($r22, r6);

        r6 = (org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet) $r13;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet projected> = r6;

     label21:
        return;
    }
    public org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet getProjected()
    {
        org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector r0;
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector;

        r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet projected>;

        return r1;
    }
    public void visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        java.lang.Object $r2;
        org.apache.commons.math3.geometry.partitioning.BoundaryAttribute r3;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r4;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        r3 = (org.apache.commons.math3.geometry.partitioning.BoundaryAttribute) $r2;

        $r4 = virtualinvoke r3.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusOutside()>();

        if $r4 == null goto label1;

        $r4 = virtualinvoke r3.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusOutside()>();

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector: void addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)>($r4, 0);

     label1:
        $r4 = virtualinvoke r3.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusInside()>();

        if $r4 == null goto label2;

        $r4 = virtualinvoke r3.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusInside()>();

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector: void addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)>($r4, 1);

     label2:
        return;
    }
    public void visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        return;
    }
    public org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r2 = <org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order: org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order MINUS_SUB_PLUS>;

        return r2;
    }
