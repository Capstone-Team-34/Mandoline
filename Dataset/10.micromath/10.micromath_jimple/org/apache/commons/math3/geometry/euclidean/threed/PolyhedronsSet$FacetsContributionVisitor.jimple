org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor extends java.lang.Object implements org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor
final org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet this$0
    void <init>(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor r0;
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet $r1;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet this$0> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: void access$000(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet,double)>($r1, 0.0);

        $r2 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        specialinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,double,double)>(0.0, 0.0, 0.0);

        staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: void access$100(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet,org.apache.commons.math3.geometry.Point)>($r1, $r2);

        return;
    }
    private void addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane, boolean)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor r0;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane r1;
        boolean $z0, $z1;
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet $r2, $r10;
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane $r3;
        org.apache.commons.math3.geometry.partitioning.Region $r4;
        double $d0, $d1;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r5, $r9, $r11;
        org.apache.commons.math3.geometry.partitioning.Hyperplane $r6;
        org.apache.commons.math3.geometry.euclidean.threed.Plane r7;
        org.apache.commons.math3.geometry.Point $r8;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.SubHyperplane;

        $z0 := @parameter1: boolean;

        $r3 = (org.apache.commons.math3.geometry.euclidean.threed.SubPlane) r1;

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.geometry.euclidean.threed.SubPlane: org.apache.commons.math3.geometry.partitioning.Region getRemainingRegion()>();

        $d0 = interfaceinvoke $r4.<org.apache.commons.math3.geometry.partitioning.Region: double getSize()>();

        $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d0);

        if $z1 == 0 goto label1;

        $r2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet this$0>;

        staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: void access$200(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet,double)>($r2, #Infinity);

        $r2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet this$0>;

        $r5 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D NaN>;

        staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: void access$300(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet,org.apache.commons.math3.geometry.Point)>($r2, $r5);

        return;

     label1:
        $r6 = interfaceinvoke r1.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        r7 = (org.apache.commons.math3.geometry.euclidean.threed.Plane) $r6;

        $r8 = interfaceinvoke $r4.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.Point getBarycenter()>();

        $r5 = virtualinvoke r7.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D toSpace(org.apache.commons.math3.geometry.Point)>($r8);

        $r9 = virtualinvoke r7.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getNormal()>();

        $d1 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double dotProduct(org.apache.commons.math3.geometry.Vector)>($r9);

        $d0 = $d0 * $d1;

        if $z0 == 0 goto label2;

        $d0 = neg $d0;

     label2:
        $r2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet this$0>;

        $r10 = r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet this$0>;

        $d1 = virtualinvoke $r10.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: double getSize()>();

        $d1 = $d1 + $d0;

        staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: void access$400(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet,double)>($r2, $d1);

        $r2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet this$0>;

        $r9 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $r10 = r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet this$0>;

        $r8 = virtualinvoke $r10.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: org.apache.commons.math3.geometry.Point getBarycenter()>();

        $r11 = (org.apache.commons.math3.geometry.euclidean.threed.Vector3D) $r8;

        specialinvoke $r9.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>(1.0, $r11, $d0, $r5);

        staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: void access$500(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet,org.apache.commons.math3.geometry.Point)>($r2, $r9);

        return;
    }
    public void visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        java.lang.Object $r2;
        org.apache.commons.math3.geometry.partitioning.BoundaryAttribute r3;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r4;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        r3 = (org.apache.commons.math3.geometry.partitioning.BoundaryAttribute) $r2;

        $r4 = virtualinvoke r3.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusOutside()>();

        if $r4 == null goto label1;

        $r4 = virtualinvoke r3.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusOutside()>();

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor: void addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)>($r4, 0);

     label1:
        $r4 = virtualinvoke r3.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusInside()>();

        if $r4 == null goto label2;

        $r4 = virtualinvoke r3.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusInside()>();

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor: void addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)>($r4, 1);

     label2:
        return;
    }
    public void visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        return;
    }
    public org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r2 = <org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order: org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order MINUS_SUB_PLUS>;

        return r2;
    }
