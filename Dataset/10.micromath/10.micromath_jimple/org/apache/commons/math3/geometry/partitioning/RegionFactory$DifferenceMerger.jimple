org.apache.commons.math3.geometry.partitioning.RegionFactory$DifferenceMerger extends java.lang.Object implements org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger org.apache.commons.math3.geometry.partitioning.BSPTree$VanishingCutHandler
private final org.apache.commons.math3.geometry.partitioning.Region region1
private final org.apache.commons.math3.geometry.partitioning.Region region2
final org.apache.commons.math3.geometry.partitioning.RegionFactory this$0
    void <init>(org.apache.commons.math3.geometry.partitioning.RegionFactory, org.apache.commons.math3.geometry.partitioning.Region, org.apache.commons.math3.geometry.partitioning.Region)
    {
        org.apache.commons.math3.geometry.partitioning.RegionFactory$DifferenceMerger r0;
        org.apache.commons.math3.geometry.partitioning.RegionFactory $r1;
        org.apache.commons.math3.geometry.partitioning.Region r2, r3;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.RegionFactory$DifferenceMerger;

        $r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.RegionFactory;

        r2 := @parameter1: org.apache.commons.math3.geometry.partitioning.Region;

        r3 := @parameter2: org.apache.commons.math3.geometry.partitioning.Region;

        r0.<org.apache.commons.math3.geometry.partitioning.RegionFactory$DifferenceMerger: org.apache.commons.math3.geometry.partitioning.RegionFactory this$0> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r2 = interfaceinvoke r2.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.partitioning.Region copySelf()>();

        r0.<org.apache.commons.math3.geometry.partitioning.RegionFactory$DifferenceMerger: org.apache.commons.math3.geometry.partitioning.Region region1> = r2;

        r2 = interfaceinvoke r3.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.partitioning.Region copySelf()>();

        r0.<org.apache.commons.math3.geometry.partitioning.RegionFactory$DifferenceMerger: org.apache.commons.math3.geometry.partitioning.Region region2> = r2;

        return;
    }
    public org.apache.commons.math3.geometry.partitioning.BSPTree fixNode(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.partitioning.RegionFactory$DifferenceMerger r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        java.lang.Boolean $r2, $r3;
        org.apache.commons.math3.geometry.partitioning.Region $r4;
        org.apache.commons.math3.geometry.Point $r5;
        org.apache.commons.math3.geometry.partitioning.Region$Location $r6, $r7;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.RegionFactory$DifferenceMerger;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $r3 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        r1 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree pruneAroundConvexCell(java.lang.Object,java.lang.Object,java.lang.Object)>($r2, $r3, null);

        $r4 = r0.<org.apache.commons.math3.geometry.partitioning.RegionFactory$DifferenceMerger: org.apache.commons.math3.geometry.partitioning.Region region1>;

        $r4 = interfaceinvoke $r4.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.partitioning.Region buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        $r5 = interfaceinvoke $r4.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.Point getBarycenter()>();

        r1 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r4 = r0.<org.apache.commons.math3.geometry.partitioning.RegionFactory$DifferenceMerger: org.apache.commons.math3.geometry.partitioning.Region region1>;

        $r6 = interfaceinvoke $r4.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.partitioning.Region$Location checkPoint(org.apache.commons.math3.geometry.Point)>($r5);

        $r7 = <org.apache.commons.math3.geometry.partitioning.Region$Location: org.apache.commons.math3.geometry.partitioning.Region$Location INSIDE>;

        if $r6 != $r7 goto label2;

        $r4 = r0.<org.apache.commons.math3.geometry.partitioning.RegionFactory$DifferenceMerger: org.apache.commons.math3.geometry.partitioning.Region region2>;

        $r6 = interfaceinvoke $r4.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.partitioning.Region$Location checkPoint(org.apache.commons.math3.geometry.Point)>($r5);

        $r7 = <org.apache.commons.math3.geometry.partitioning.Region$Location: org.apache.commons.math3.geometry.partitioning.Region$Location OUTSIDE>;

        if $r6 != $r7 goto label2;

        $z0 = 1;

     label1:
        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        specialinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r2);

        return r1;

     label2:
        $z0 = 0;

        goto label1;
    }
    public org.apache.commons.math3.geometry.partitioning.BSPTree merge(org.apache.commons.math3.geometry.partitioning.BSPTree, org.apache.commons.math3.geometry.partitioning.BSPTree, org.apache.commons.math3.geometry.partitioning.BSPTree, boolean, boolean)
    {
        org.apache.commons.math3.geometry.partitioning.RegionFactory$DifferenceMerger r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, r2, r3;
        boolean $z0, $z1, $z2;
        java.lang.Object $r4;
        java.lang.Boolean $r5;
        org.apache.commons.math3.geometry.partitioning.RegionFactory $r6;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.RegionFactory$DifferenceMerger;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r3 := @parameter1: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r2 := @parameter2: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $z0 := @parameter3: boolean;

        $z1 := @parameter4: boolean;

        $r4 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        $r5 = (java.lang.Boolean) $r4;

        $z2 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z2 == 0 goto label3;

        $r6 = r0.<org.apache.commons.math3.geometry.partitioning.RegionFactory$DifferenceMerger: org.apache.commons.math3.geometry.partitioning.RegionFactory this$0>;

        if $z1 == 0 goto label2;

     label1:
        r1 = staticinvoke <org.apache.commons.math3.geometry.partitioning.RegionFactory: org.apache.commons.math3.geometry.partitioning.BSPTree access$400(org.apache.commons.math3.geometry.partitioning.RegionFactory,org.apache.commons.math3.geometry.partitioning.BSPTree)>($r6, r3);

        virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: void insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,org.apache.commons.math3.geometry.partitioning.BSPTree$VanishingCutHandler)>(r2, $z0, r0);

        return r1;

     label2:
        r3 = r1;

        goto label1;

     label3:
        if $z1 == 0 goto label5;

     label4:
        virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: void insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,org.apache.commons.math3.geometry.partitioning.BSPTree$VanishingCutHandler)>(r2, $z0, r0);

        return r1;

     label5:
        r1 = r3;

        goto label4;
    }
