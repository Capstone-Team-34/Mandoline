org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D extends java.lang.Object implements org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHullGenerator2D
private static final double DEFAULT_TOLERANCE
private final boolean includeCollinearPoints
private final double tolerance
    protected void <init>(boolean)
    {
        org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D r0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D;

        $z0 := @parameter0: boolean;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D: void <init>(boolean,double)>($z0, 1.0E-10);

        return;
    }
    protected void <init>(boolean, double)
    {
        org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D r0;
        boolean $z0;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D;

        $z0 := @parameter0: boolean;

        $d0 := @parameter1: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D: boolean includeCollinearPoints> = $z0;

        r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D: double tolerance> = $d0;

        return;
    }
protected abstract java.util.Collection findHullVertices(java.util.Collection) { 
// no body
} 
    public org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D generate(java.util.Collection) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.ConvergenceException
    {
        org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D r0;
        java.util.Collection r1;
        org.apache.commons.math3.exception.MathIllegalArgumentException r2;
        double $d0;
        int $i0;
        org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D $r3;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] $r4;
        java.lang.Object[] $r5;
        org.apache.commons.math3.exception.ConvergenceException $r6;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D;

        r1 := @parameter0: java.util.Collection;

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r1);

        $i0 = interfaceinvoke r1.<java.util.Collection: int size()>();

        if $i0 >= 2 goto label8;

     label1:
        $r3 = new org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D;

     label2:
        $i0 = interfaceinvoke r1.<java.util.Collection: int size()>();

     label3:
        $r4 = newarray (org.apache.commons.math3.geometry.euclidean.twod.Vector2D)[$i0];

     label4:
        $r5 = interfaceinvoke r1.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r4);

     label5:
        $r4 = (org.apache.commons.math3.geometry.euclidean.twod.Vector2D[]) $r5;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D: double tolerance>;

     label6:
        specialinvoke $r3.<org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D: void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D[],double)>($r4, $d0);

     label7:
        return $r3;

     label8:
        r1 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D: java.util.Collection findHullVertices(java.util.Collection)>(r1);

        goto label1;

     label9:
        r2 := @caughtexception;

        $r6 = new org.apache.commons.math3.exception.ConvergenceException;

        specialinvoke $r6.<org.apache.commons.math3.exception.ConvergenceException: void <init>()>();

        throw $r6;

        catch org.apache.commons.math3.exception.MathIllegalArgumentException from label2 to label3 with label9;
        catch org.apache.commons.math3.exception.MathIllegalArgumentException from label4 to label5 with label9;
        catch org.apache.commons.math3.exception.MathIllegalArgumentException from label6 to label7 with label9;
    }
    public volatile org.apache.commons.math3.geometry.hull.ConvexHull generate(java.util.Collection) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.ConvergenceException
    {
        org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D r0;
        java.util.Collection $r1;
        org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D;

        $r1 := @parameter0: java.util.Collection;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D: org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D generate(java.util.Collection)>($r1);

        return $r2;
    }
    public double getTolerance()
    {
        org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D r0;
        double d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D;

        d0 = r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D: double tolerance>;

        return d0;
    }
    public boolean isIncludeCollinearPoints()
    {
        org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D r0;
        boolean z0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D;

        z0 = r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D: boolean includeCollinearPoints>;

        return z0;
    }
