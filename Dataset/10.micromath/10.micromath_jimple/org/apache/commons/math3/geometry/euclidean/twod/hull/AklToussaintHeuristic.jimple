org.apache.commons.math3.geometry.euclidean.twod.hull.AklToussaintHeuristic extends java.lang.Object
    private void <init>()
    {
        org.apache.commons.math3.geometry.euclidean.twod.hull.AklToussaintHeuristic r0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.hull.AklToussaintHeuristic;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    private static transient java.util.List buildQuadrilateral(org.apache.commons.math3.geometry.euclidean.twod.Vector2D[])
    {
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] $r0;
        int i0, i1;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r1;
        java.util.ArrayList r2;
        boolean $z0;

        $r0 := @parameter0: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[];

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        i0 = lengthof $r0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r1 = $r0[i1];

        $z0 = interfaceinvoke r2.<java.util.List: boolean contains(java.lang.Object)>(r1);

        if $z0 != 0 goto label2;

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r1);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return r2;
    }
    private static boolean insideQuadrilateral(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, java.util.List)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D $r0, r3, r4;
        java.util.List r1;
        java.lang.Object $r2;
        boolean $z0;
        double $d0, $d1;
        int $i0, i1, $i2;
        byte $b3;

        $r0 := @parameter0: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        r1 := @parameter1: java.util.List;

        $r2 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        r3 = (org.apache.commons.math3.geometry.euclidean.twod.Vector2D) $r2;

        $r2 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(1);

        r4 = (org.apache.commons.math3.geometry.euclidean.twod.Vector2D) $r2;

        $z0 = virtualinvoke $r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: boolean equals(java.lang.Object)>(r3);

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: boolean equals(java.lang.Object)>(r4);

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        $d0 = virtualinvoke $r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double crossProduct(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)>(r3, r4);

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        i1 = 1;

     label3:
        if i1 >= $i0 goto label8;

        r3 = r4;

        $i2 = i1 + 1;

        if $i2 != $i0 goto label6;

        $i2 = 0;

     label4:
        $r2 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>($i2);

        r4 = (org.apache.commons.math3.geometry.euclidean.twod.Vector2D) $r2;

        $z0 = virtualinvoke $r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: boolean equals(java.lang.Object)>(r3);

        if $z0 != 0 goto label5;

        $z0 = virtualinvoke $r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: boolean equals(java.lang.Object)>(r4);

        if $z0 == 0 goto label7;

     label5:
        return 1;

     label6:
        $i2 = i1 + 1;

        goto label4;

     label7:
        $d1 = virtualinvoke $r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double crossProduct(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)>(r3, r4);

        $d1 = $d1 * $d0;

        $b3 = $d1 cmpg 0.0;

        if $b3 < 0 goto label9;

        i1 = i1 + 1;

        goto label3;

     label8:
        return 1;

     label9:
        return 0;
    }
    public static java.util.Collection reducePoints(java.util.Collection)
    {
        java.util.ArrayList r0;
        java.util.Collection r1;
        int i0;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r2, r3, r4, r5, r8;
        java.util.Iterator $r6;
        boolean $z0;
        java.lang.Object $r7;
        double $d0, $d1;
        byte $b1;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] $r9;
        java.util.List $r10;

        r1 := @parameter0: java.util.Collection;

        i0 = 0;

        r2 = null;

        r3 = null;

        r4 = null;

        r5 = null;

        $r6 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.apache.commons.math3.geometry.euclidean.twod.Vector2D) $r7;

        if r2 == null goto label02;

        $d0 = virtualinvoke r8.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getX()>();

        $d1 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getX()>();

        $b1 = $d0 cmpg $d1;

        if $b1 >= 0 goto label03;

     label02:
        r2 = r8;

     label03:
        if r3 == null goto label04;

        $d0 = virtualinvoke r8.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getX()>();

        $d1 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getX()>();

        $b1 = $d0 cmpl $d1;

        if $b1 <= 0 goto label05;

     label04:
        r3 = r8;

     label05:
        if r4 == null goto label06;

        $d0 = virtualinvoke r8.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getY()>();

        $d1 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getY()>();

        $b1 = $d0 cmpg $d1;

        if $b1 >= 0 goto label07;

     label06:
        r4 = r8;

     label07:
        if r5 == null goto label08;

        $d0 = virtualinvoke r8.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getY()>();

        $d1 = virtualinvoke r5.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getY()>();

        $b1 = $d0 cmpl $d1;

        if $b1 <= 0 goto label09;

     label08:
        r5 = r8;

     label09:
        i0 = i0 + 1;

        goto label01;

     label10:
        if i0 >= 4 goto label11;

        return r1;

     label11:
        $r9 = newarray (org.apache.commons.math3.geometry.euclidean.twod.Vector2D)[4];

        $r9[0] = r4;

        $r9[1] = r3;

        $r9[2] = r5;

        $r9[3] = r2;

        $r10 = staticinvoke <org.apache.commons.math3.geometry.euclidean.twod.hull.AklToussaintHeuristic: java.util.List buildQuadrilateral(org.apache.commons.math3.geometry.euclidean.twod.Vector2D[])>($r9);

        i0 = interfaceinvoke $r10.<java.util.List: int size()>();

        if i0 < 3 goto label14;

        r0 = new java.util.ArrayList;

        specialinvoke r0.<java.util.ArrayList: void <init>(java.util.Collection)>($r10);

        $r6 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label12:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label13;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r2 = (org.apache.commons.math3.geometry.euclidean.twod.Vector2D) $r7;

        $z0 = staticinvoke <org.apache.commons.math3.geometry.euclidean.twod.hull.AklToussaintHeuristic: boolean insideQuadrilateral(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,java.util.List)>(r2, $r10);

        if $z0 != 0 goto label12;

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(r2);

        goto label12;

     label13:
        return r0;

     label14:
        return r1;
    }
