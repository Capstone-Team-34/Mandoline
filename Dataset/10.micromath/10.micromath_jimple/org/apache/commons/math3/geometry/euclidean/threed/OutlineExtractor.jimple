org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor extends java.lang.Object
private org.apache.commons.math3.geometry.euclidean.threed.Vector3D u
private org.apache.commons.math3.geometry.euclidean.threed.Vector3D v
private org.apache.commons.math3.geometry.euclidean.threed.Vector3D w
    public void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D)
    {
        org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r1, $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $r2 := @parameter1: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor: org.apache.commons.math3.geometry.euclidean.threed.Vector3D u> = $r1;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor: org.apache.commons.math3.geometry.euclidean.threed.Vector3D v> = $r2;

        $r1 = staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r1, $r2);

        r0.<org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w> = $r1;

        return;
    }
    static org.apache.commons.math3.geometry.euclidean.threed.Vector3D access$000(org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor)
    {
        org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor $r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r1;

        $r0 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor;

        r1 = $r0.<org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w>;

        return r1;
    }
    static org.apache.commons.math3.geometry.euclidean.threed.Vector3D access$100(org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor)
    {
        org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor $r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r1;

        $r0 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor;

        r1 = $r0.<org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor: org.apache.commons.math3.geometry.euclidean.threed.Vector3D u>;

        return r1;
    }
    static org.apache.commons.math3.geometry.euclidean.threed.Vector3D access$200(org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor)
    {
        org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor $r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r1;

        $r0 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor;

        r1 = $r0.<org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor: org.apache.commons.math3.geometry.euclidean.threed.Vector3D v>;

        return r1;
    }
    private boolean pointIsBetween(org.apache.commons.math3.geometry.euclidean.twod.Vector2D[], int, int)
    {
        org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor r0;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] $r1;
        int $i0, $i1, $i2;
        double d0, d1, d2, d3, d4, d5, $d6;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r2, r3, r4;
        byte $b3;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 = $i1 + $i0;

        $i2 = $i2 + -1;

        $i2 = $i2 % $i0;

        r4 = $r1[$i2];

        r2 = $r1[$i1];

        $i1 = $i1 + 1;

        $i0 = $i1 % $i0;

        r3 = $r1[$i0];

        d0 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getX()>();

        d1 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getX()>();

        d2 = d0 - d1;

        d0 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getY()>();

        d1 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getY()>();

        d4 = d0 - d1;

        d0 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getX()>();

        d1 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getX()>();

        d3 = d0 - d1;

        d0 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getY()>();

        d1 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getY()>();

        d5 = d0 - d1;

        d0 = d2 * d5;

        d1 = d3 * d4;

        d0 = d0 - d1;

        d1 = d2 * d3;

        $d6 = d4 * d5;

        d1 = d1 + $d6;

        d2 = d2 * d2;

        d4 = d4 * d4;

        d2 = d2 + d4;

        d3 = d3 * d3;

        d4 = d5 * d5;

        d3 = d3 + d4;

        d2 = d2 * d3;

        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d2);

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d0);

        d2 = 1.0E-6 * d2;

        $b3 = d0 cmpg d2;

        if $b3 > 0 goto label1;

        $b3 = d1 cmpl 0.0;

        if $b3 < 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] getOutline(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet)
    {
        org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor r0;
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet $r1;
        org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector r2;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] r3, $r8;
        double $d0;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r4;
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet $r5;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] $r6;
        int i0, $i1, i2, i3, $i4;
        boolean $z0;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D $r7;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet;

        r2 = new org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector;

        $d0 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: double getTolerance()>();

        specialinvoke r2.<org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector: void <init>(org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor,double)>(r0, $d0);

        $r4 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(1);

        virtualinvoke $r4.<org.apache.commons.math3.geometry.partitioning.BSPTree: void visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)>(r2);

        $r5 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet getProjected()>();

        $r6 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] getVertices()>();

        i0 = 0;

     label1:
        $i1 = lengthof $r6;

        if i0 >= $i1 goto label8;

        r3 = $r6[i0];

        $i1 = lengthof r3;

        i2 = 0;

     label2:
        if i2 >= $i1 goto label6;

        $z0 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor: boolean pointIsBetween(org.apache.commons.math3.geometry.euclidean.twod.Vector2D[],int,int)>(r3, $i1, i2);

        if $z0 == 0 goto label5;

        i3 = i2;

     label3:
        $i4 = $i1 + -1;

        if i3 >= $i4 goto label4;

        $i4 = i3 + 1;

        $r7 = r3[$i4];

        r3[i3] = $r7;

        i3 = i3 + 1;

        goto label3;

     label4:
        $i1 = $i1 + -1;

        goto label2;

     label5:
        i2 = i2 + 1;

        goto label2;

     label6:
        i2 = lengthof r3;

        if $i1 == i2 goto label7;

        $r8 = newarray (org.apache.commons.math3.geometry.euclidean.twod.Vector2D)[$i1];

        $r6[i0] = $r8;

        $r8 = $r6[i0];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, $r8, 0, $i1);

     label7:
        i0 = i0 + 1;

        goto label1;

     label8:
        return $r6;
    }
