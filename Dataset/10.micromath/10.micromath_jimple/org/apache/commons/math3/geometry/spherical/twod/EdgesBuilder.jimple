org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder extends java.lang.Object implements org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor
private final java.util.Map edgeToNode
private final java.util.Map nodeToEdgesList
private final org.apache.commons.math3.geometry.partitioning.BSPTree root
private final double tolerance
    void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree, double)
    {
        org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        double $d0;
        java.util.IdentityHashMap $r2;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $d0 := @parameter1: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder: org.apache.commons.math3.geometry.partitioning.BSPTree root> = r1;

        r0.<org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder: double tolerance> = $d0;

        $r2 = new java.util.IdentityHashMap;

        specialinvoke $r2.<java.util.IdentityHashMap: void <init>()>();

        r0.<org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder: java.util.Map edgeToNode> = $r2;

        $r2 = new java.util.IdentityHashMap;

        specialinvoke $r2.<java.util.IdentityHashMap: void <init>()>();

        r0.<org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder: java.util.Map nodeToEdgesList> = $r2;

        return;
    }
    private void addContribution(org.apache.commons.math3.geometry.spherical.twod.SubCircle, boolean, org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder r0;
        org.apache.commons.math3.geometry.spherical.twod.SubCircle $r1;
        boolean $z0, $z1;
        org.apache.commons.math3.geometry.partitioning.BSPTree r2;
        org.apache.commons.math3.geometry.spherical.twod.Vertex r3, r4;
        org.apache.commons.math3.geometry.partitioning.Hyperplane $r5;
        org.apache.commons.math3.geometry.spherical.twod.Circle r6, $r16;
        org.apache.commons.math3.geometry.partitioning.Region $r7;
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet $r8;
        java.util.List $r9;
        java.util.Iterator $r10;
        java.lang.Object $r11;
        org.apache.commons.math3.geometry.spherical.oned.Arc r12;
        org.apache.commons.math3.geometry.spherical.oned.S1Point $r13;
        double $d0;
        org.apache.commons.math3.geometry.spherical.twod.S2Point $r14;
        org.apache.commons.math3.geometry.spherical.twod.Edge r15;
        java.util.Map $r17;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder;

        $r1 := @parameter0: org.apache.commons.math3.geometry.spherical.twod.SubCircle;

        $z0 := @parameter1: boolean;

        r2 := @parameter2: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r5 = virtualinvoke $r1.<org.apache.commons.math3.geometry.spherical.twod.SubCircle: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        r6 = (org.apache.commons.math3.geometry.spherical.twod.Circle) $r5;

        $r7 = virtualinvoke $r1.<org.apache.commons.math3.geometry.spherical.twod.SubCircle: org.apache.commons.math3.geometry.partitioning.Region getRemainingRegion()>();

        $r8 = (org.apache.commons.math3.geometry.spherical.oned.ArcsSet) $r7;

        $r9 = virtualinvoke $r8.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: java.util.List asList()>();

        $r10 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (org.apache.commons.math3.geometry.spherical.oned.Arc) $r11;

        r4 = new org.apache.commons.math3.geometry.spherical.twod.Vertex;

        $r13 = new org.apache.commons.math3.geometry.spherical.oned.S1Point;

        $d0 = virtualinvoke r12.<org.apache.commons.math3.geometry.spherical.oned.Arc: double getInf()>();

        specialinvoke $r13.<org.apache.commons.math3.geometry.spherical.oned.S1Point: void <init>(double)>($d0);

        $r14 = virtualinvoke r6.<org.apache.commons.math3.geometry.spherical.twod.Circle: org.apache.commons.math3.geometry.spherical.twod.S2Point toSpace(org.apache.commons.math3.geometry.Point)>($r13);

        specialinvoke r4.<org.apache.commons.math3.geometry.spherical.twod.Vertex: void <init>(org.apache.commons.math3.geometry.spherical.twod.S2Point)>($r14);

        r3 = new org.apache.commons.math3.geometry.spherical.twod.Vertex;

        $r13 = new org.apache.commons.math3.geometry.spherical.oned.S1Point;

        $d0 = virtualinvoke r12.<org.apache.commons.math3.geometry.spherical.oned.Arc: double getSup()>();

        specialinvoke $r13.<org.apache.commons.math3.geometry.spherical.oned.S1Point: void <init>(double)>($d0);

        $r14 = virtualinvoke r6.<org.apache.commons.math3.geometry.spherical.twod.Circle: org.apache.commons.math3.geometry.spherical.twod.S2Point toSpace(org.apache.commons.math3.geometry.Point)>($r13);

        specialinvoke r3.<org.apache.commons.math3.geometry.spherical.twod.Vertex: void <init>(org.apache.commons.math3.geometry.spherical.twod.S2Point)>($r14);

        virtualinvoke r4.<org.apache.commons.math3.geometry.spherical.twod.Vertex: void bindWith(org.apache.commons.math3.geometry.spherical.twod.Circle)>(r6);

        virtualinvoke r3.<org.apache.commons.math3.geometry.spherical.twod.Vertex: void bindWith(org.apache.commons.math3.geometry.spherical.twod.Circle)>(r6);

        if $z0 == 0 goto label3;

        r15 = new org.apache.commons.math3.geometry.spherical.twod.Edge;

        $d0 = virtualinvoke r12.<org.apache.commons.math3.geometry.spherical.oned.Arc: double getSize()>();

        $r16 = virtualinvoke r6.<org.apache.commons.math3.geometry.spherical.twod.Circle: org.apache.commons.math3.geometry.spherical.twod.Circle getReverse()>();

        specialinvoke r15.<org.apache.commons.math3.geometry.spherical.twod.Edge: void <init>(org.apache.commons.math3.geometry.spherical.twod.Vertex,org.apache.commons.math3.geometry.spherical.twod.Vertex,double,org.apache.commons.math3.geometry.spherical.twod.Circle)>(r3, r4, $d0, $r16);

     label2:
        $r17 = r0.<org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder: java.util.Map edgeToNode>;

        interfaceinvoke $r17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r15, r2);

        $r17 = r0.<org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder: java.util.Map nodeToEdgesList>;

        $r11 = interfaceinvoke $r17.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        $r9 = (java.util.List) $r11;

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>(r15);

        goto label1;

     label3:
        r15 = new org.apache.commons.math3.geometry.spherical.twod.Edge;

        $d0 = virtualinvoke r12.<org.apache.commons.math3.geometry.spherical.oned.Arc: double getSize()>();

        specialinvoke r15.<org.apache.commons.math3.geometry.spherical.twod.Edge: void <init>(org.apache.commons.math3.geometry.spherical.twod.Vertex,org.apache.commons.math3.geometry.spherical.twod.Vertex,double,org.apache.commons.math3.geometry.spherical.twod.Circle)>(r4, r3, $d0, r6);

        goto label2;

     label4:
        return;
    }
    private org.apache.commons.math3.geometry.spherical.twod.Edge getFollowingEdge(org.apache.commons.math3.geometry.spherical.twod.Edge) throws org.apache.commons.math3.exception.MathIllegalStateException
    {
        org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder r0;
        org.apache.commons.math3.geometry.spherical.twod.Edge r1, r6, r11, $r12;
        org.apache.commons.math3.geometry.spherical.twod.Vertex $r2;
        org.apache.commons.math3.geometry.spherical.twod.S2Point $r3, $r13;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r4;
        double $d0, $d1;
        java.util.List $r5;
        java.util.Iterator $r7, $r10;
        boolean $z0;
        java.lang.Object $r8;
        java.util.Map $r9;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r14, $r15;
        byte $b0;
        org.apache.commons.math3.exception.MathIllegalStateException $r16;
        org.apache.commons.math3.exception.util.LocalizedFormats $r17;
        java.lang.Object[] $r18;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder;

        r1 := @parameter0: org.apache.commons.math3.geometry.spherical.twod.Edge;

        $r2 = virtualinvoke r1.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Vertex getEnd()>();

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.geometry.spherical.twod.Vertex: org.apache.commons.math3.geometry.spherical.twod.S2Point getLocation()>();

        $r4 = r0.<org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder: org.apache.commons.math3.geometry.partitioning.BSPTree root>;

        $d0 = r0.<org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder: double tolerance>;

        $r5 = virtualinvoke $r4.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.util.List getCloseCuts(org.apache.commons.math3.geometry.Point,double)>($r3, $d0);

        $d0 = r0.<org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder: double tolerance>;

        r6 = null;

        $r7 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.apache.commons.math3.geometry.partitioning.BSPTree) $r8;

        $r9 = r0.<org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder: java.util.Map nodeToEdgesList>;

        $r8 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        $r5 = (java.util.List) $r8;

        $r10 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r8 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r11 = (org.apache.commons.math3.geometry.spherical.twod.Edge) $r8;

        if r11 == r1 goto label2;

        $r2 = virtualinvoke r11.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Vertex getStart()>();

        $r12 = virtualinvoke $r2.<org.apache.commons.math3.geometry.spherical.twod.Vertex: org.apache.commons.math3.geometry.spherical.twod.Edge getIncoming()>();

        if $r12 != null goto label2;

        $r2 = virtualinvoke r11.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Vertex getStart()>();

        $r13 = virtualinvoke $r2.<org.apache.commons.math3.geometry.spherical.twod.Vertex: org.apache.commons.math3.geometry.spherical.twod.S2Point getLocation()>();

        $r14 = virtualinvoke $r13.<org.apache.commons.math3.geometry.spherical.twod.S2Point: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getVector()>();

        $r15 = virtualinvoke $r3.<org.apache.commons.math3.geometry.spherical.twod.S2Point: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getVector()>();

        $d1 = staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r15, $r14);

        $b0 = $d1 cmpg $d0;

        if $b0 > 0 goto label2;

        $d0 = $d1;

        r6 = r11;

        goto label2;

     label3:
        if r6 != null goto label5;

        $r2 = virtualinvoke r1.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Vertex getStart()>();

        $r13 = virtualinvoke $r2.<org.apache.commons.math3.geometry.spherical.twod.Vertex: org.apache.commons.math3.geometry.spherical.twod.S2Point getLocation()>();

        $r14 = virtualinvoke $r13.<org.apache.commons.math3.geometry.spherical.twod.S2Point: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getVector()>();

        $r15 = virtualinvoke $r3.<org.apache.commons.math3.geometry.spherical.twod.S2Point: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getVector()>();

        $d0 = staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r15, $r14);

        $d1 = r0.<org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder: double tolerance>;

        $b0 = $d0 cmpg $d1;

        if $b0 > 0 goto label4;

        return r1;

     label4:
        $r16 = new org.apache.commons.math3.exception.MathIllegalStateException;

        $r17 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OUTLINE_BOUNDARY_LOOP_OPEN>;

        $r18 = newarray (java.lang.Object)[0];

        specialinvoke $r16.<org.apache.commons.math3.exception.MathIllegalStateException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r17, $r18);

        throw $r16;

     label5:
        return r6;
    }
    public java.util.List getEdges() throws org.apache.commons.math3.exception.MathIllegalStateException
    {
        org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder r0;
        java.util.Map $r1;
        java.util.Set $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        org.apache.commons.math3.geometry.spherical.twod.Edge r5, $r6;
        java.util.ArrayList $r7;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder;

        $r1 = r0.<org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder: java.util.Map edgeToNode>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.commons.math3.geometry.spherical.twod.Edge) $r4;

        $r6 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder: org.apache.commons.math3.geometry.spherical.twod.Edge getFollowingEdge(org.apache.commons.math3.geometry.spherical.twod.Edge)>(r5);

        virtualinvoke r5.<org.apache.commons.math3.geometry.spherical.twod.Edge: void setNextEdge(org.apache.commons.math3.geometry.spherical.twod.Edge)>($r6);

        goto label1;

     label2:
        $r7 = new java.util.ArrayList;

        $r1 = r0.<org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder: java.util.Map edgeToNode>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        specialinvoke $r7.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        return $r7;
    }
    public void visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        java.util.Map $r2;
        java.util.ArrayList $r3;
        java.lang.Object $r4;
        org.apache.commons.math3.geometry.partitioning.BoundaryAttribute r5;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r6;
        org.apache.commons.math3.geometry.spherical.twod.SubCircle $r7;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = r0.<org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder: java.util.Map nodeToEdgesList>;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r3);

        $r4 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        r5 = (org.apache.commons.math3.geometry.partitioning.BoundaryAttribute) $r4;

        $r6 = virtualinvoke r5.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusOutside()>();

        if $r6 == null goto label1;

        $r6 = virtualinvoke r5.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusOutside()>();

        $r7 = (org.apache.commons.math3.geometry.spherical.twod.SubCircle) $r6;

        specialinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder: void addContribution(org.apache.commons.math3.geometry.spherical.twod.SubCircle,boolean,org.apache.commons.math3.geometry.partitioning.BSPTree)>($r7, 0, r1);

     label1:
        $r6 = virtualinvoke r5.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusInside()>();

        if $r6 == null goto label2;

        $r6 = virtualinvoke r5.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusInside()>();

        $r7 = (org.apache.commons.math3.geometry.spherical.twod.SubCircle) $r6;

        specialinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder: void addContribution(org.apache.commons.math3.geometry.spherical.twod.SubCircle,boolean,org.apache.commons.math3.geometry.partitioning.BSPTree)>($r7, 1, r1);

     label2:
        return;
    }
    public void visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        return;
    }
    public org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order r2;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r2 = <org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order: org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order MINUS_SUB_PLUS>;

        return r2;
    }
