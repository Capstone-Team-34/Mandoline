org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer extends java.lang.Object implements org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor
private final java.util.List convexCellsInsidePoints
private double summedArea
private org.apache.commons.math3.geometry.euclidean.threed.Vector3D summedBarycenter
private final double tolerance
    void <init>(double)
    {
        org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer r0;
        double $d0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r1;
        java.util.ArrayList $r2;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer;

        $d0 := @parameter0: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer: double tolerance> = $d0;

        r0.<org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer: double summedArea> = 0.0;

        $r1 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D ZERO>;

        r0.<org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer: org.apache.commons.math3.geometry.euclidean.threed.Vector3D summedBarycenter> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer: java.util.List convexCellsInsidePoints> = $r2;

        return;
    }
    private double convexCellArea(org.apache.commons.math3.geometry.spherical.twod.Vertex)
    {
        org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer r0;
        org.apache.commons.math3.geometry.spherical.twod.Vertex $r1, $r3;
        int i0;
        double d0, $d1, $d2;
        org.apache.commons.math3.geometry.spherical.twod.Edge $r2, $r6;
        org.apache.commons.math3.geometry.spherical.twod.Circle $r4;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r5, $r7, $r9;
        org.apache.commons.math3.geometry.spherical.twod.S2Point $r8;
        byte $b1;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer;

        $r1 := @parameter0: org.apache.commons.math3.geometry.spherical.twod.Vertex;

        i0 = 0;

        d0 = 0.0;

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.geometry.spherical.twod.Vertex: org.apache.commons.math3.geometry.spherical.twod.Edge getOutgoing()>();

     label1:
        if i0 == 0 goto label2;

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Vertex getStart()>();

        if $r3 == $r1 goto label4;

     label2:
        $r4 = virtualinvoke $r2.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Circle getCircle()>();

        $r5 = virtualinvoke $r4.<org.apache.commons.math3.geometry.spherical.twod.Circle: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getPole()>();

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Vertex getEnd()>();

        $r6 = virtualinvoke $r3.<org.apache.commons.math3.geometry.spherical.twod.Vertex: org.apache.commons.math3.geometry.spherical.twod.Edge getOutgoing()>();

        $r4 = virtualinvoke $r6.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Circle getCircle()>();

        $r7 = virtualinvoke $r4.<org.apache.commons.math3.geometry.spherical.twod.Circle: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getPole()>();

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Vertex getEnd()>();

        $r8 = virtualinvoke $r3.<org.apache.commons.math3.geometry.spherical.twod.Vertex: org.apache.commons.math3.geometry.spherical.twod.S2Point getLocation()>();

        $r9 = virtualinvoke $r8.<org.apache.commons.math3.geometry.spherical.twod.S2Point: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getVector()>();

        $r9 = staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r9, $r5);

        $d1 = staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double dotProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r7, $r9);

        $d2 = staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double dotProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r7, $r5);

        $d2 = neg $d2;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d1, $d2);

        $d2 = $d1;

        $b1 = $d1 cmpg 0.0;

        if $b1 >= 0 goto label3;

        $d2 = $d1 + 6.283185307179586;

     label3:
        d0 = d0 + $d2;

        i0 = i0 + 1;

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Vertex getEnd()>();

        $r2 = virtualinvoke $r3.<org.apache.commons.math3.geometry.spherical.twod.Vertex: org.apache.commons.math3.geometry.spherical.twod.Edge getOutgoing()>();

        goto label1;

     label4:
        i0 = i0 + -2;

        $d1 = (double) i0;

        $d1 = $d1 * 3.141592653589793;

        d0 = d0 - $d1;

        return d0;
    }
    private org.apache.commons.math3.geometry.euclidean.threed.Vector3D convexCellBarycenter(org.apache.commons.math3.geometry.spherical.twod.Vertex)
    {
        org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer r0;
        org.apache.commons.math3.geometry.spherical.twod.Vertex $r1, $r4;
        int i0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r2, r5, $r7;
        org.apache.commons.math3.geometry.spherical.twod.Edge $r3;
        double $d0;
        org.apache.commons.math3.geometry.spherical.twod.Circle $r6;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer;

        $r1 := @parameter0: org.apache.commons.math3.geometry.spherical.twod.Vertex;

        i0 = 0;

        r2 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D ZERO>;

        $r3 = virtualinvoke $r1.<org.apache.commons.math3.geometry.spherical.twod.Vertex: org.apache.commons.math3.geometry.spherical.twod.Edge getOutgoing()>();

     label1:
        if i0 == 0 goto label2;

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Vertex getStart()>();

        if $r4 == $r1 goto label3;

     label2:
        r5 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d0 = virtualinvoke $r3.<org.apache.commons.math3.geometry.spherical.twod.Edge: double getLength()>();

        $r6 = virtualinvoke $r3.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Circle getCircle()>();

        $r7 = virtualinvoke $r6.<org.apache.commons.math3.geometry.spherical.twod.Circle: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getPole()>();

        specialinvoke r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>(1.0, r2, $d0, $r7);

        i0 = i0 + 1;

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Vertex getEnd()>();

        $r3 = virtualinvoke $r4.<org.apache.commons.math3.geometry.spherical.twod.Vertex: org.apache.commons.math3.geometry.spherical.twod.Edge getOutgoing()>();

        r2 = r5;

        goto label1;

     label3:
        r2 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D normalize()>();

        return r2;
    }
    public double getArea()
    {
        org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer r0;
        double d0;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer;

        d0 = r0.<org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer: double summedArea>;

        return d0;
    }
    public org.apache.commons.math3.geometry.spherical.twod.S2Point getBarycenter()
    {
        org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r1;
        double $d0;
        byte $b0;
        org.apache.commons.math3.geometry.spherical.twod.S2Point $r2;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer;

        $r1 = r0.<org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer: org.apache.commons.math3.geometry.euclidean.threed.Vector3D summedBarycenter>;

        $d0 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getNormSq()>();

        $b0 = $d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        $r2 = <org.apache.commons.math3.geometry.spherical.twod.S2Point: org.apache.commons.math3.geometry.spherical.twod.S2Point NaN>;

        return $r2;

     label1:
        $r2 = new org.apache.commons.math3.geometry.spherical.twod.S2Point;

        $r1 = r0.<org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer: org.apache.commons.math3.geometry.euclidean.threed.Vector3D summedBarycenter>;

        specialinvoke $r2.<org.apache.commons.math3.geometry.spherical.twod.S2Point: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r1);

        return $r2;
    }
    public java.util.List getConvexCellsInsidePoints()
    {
        org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer r0;
        java.util.List r1;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer;

        r1 = r0.<org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer: java.util.List convexCellsInsidePoints>;

        return r1;
    }
    public void visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        return;
    }
    public void visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r2, $r10, $r11;
        org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet r3;
        java.lang.Object $r4;
        java.lang.Boolean $r5, $r6;
        boolean $z0;
        double $d0, $d1;
        java.util.List $r7;
        int $i0;
        org.apache.commons.math3.exception.MathInternalError $r8;
        org.apache.commons.math3.geometry.spherical.twod.Vertex $r9;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r4 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        r3 = new org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet;

        $r5 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $r6 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        r1 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree pruneAroundConvexCell(java.lang.Object,java.lang.Object,java.lang.Object)>($r5, $r6, null);

        $d0 = r0.<org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer: double tolerance>;

        specialinvoke r3.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree,double)>(r1, $d0);

        $r7 = virtualinvoke r3.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: java.util.List getBoundaryLoops()>();

        $i0 = interfaceinvoke $r7.<java.util.List: int size()>();

        if $i0 == 1 goto label1;

        $r8 = new org.apache.commons.math3.exception.MathInternalError;

        specialinvoke $r8.<org.apache.commons.math3.exception.MathInternalError: void <init>()>();

        throw $r8;

     label1:
        $r4 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>(0);

        $r9 = (org.apache.commons.math3.geometry.spherical.twod.Vertex) $r4;

        $d0 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer: double convexCellArea(org.apache.commons.math3.geometry.spherical.twod.Vertex)>($r9);

        $r4 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>(0);

        $r9 = (org.apache.commons.math3.geometry.spherical.twod.Vertex) $r4;

        $r10 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer: org.apache.commons.math3.geometry.euclidean.threed.Vector3D convexCellBarycenter(org.apache.commons.math3.geometry.spherical.twod.Vertex)>($r9);

        $r7 = r0.<org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer: java.util.List convexCellsInsidePoints>;

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r10);

        $d1 = r0.<org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer: double summedArea>;

        $d1 = $d1 + $d0;

        r0.<org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer: double summedArea> = $d1;

        $r11 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $r2 = r0.<org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer: org.apache.commons.math3.geometry.euclidean.threed.Vector3D summedBarycenter>;

        specialinvoke $r11.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>(1.0, $r2, $d0, $r10);

        r0.<org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer: org.apache.commons.math3.geometry.euclidean.threed.Vector3D summedBarycenter> = $r11;

     label2:
        return;
    }
    public org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order r2;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r2 = <org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order: org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order MINUS_SUB_PLUS>;

        return r2;
    }
