org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet extends org.apache.commons.math3.geometry.partitioning.AbstractRegion
private static final double DEFAULT_TOLERANCE
private org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] vertices
    public void <init>()
    {
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet r0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: void <init>(double)>(1.0E-10);

        return;
    }
    public void <init>(double)
    {
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;

        $d0 := @parameter0: double;

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: void <init>(double)>($d0);

        return;
    }
    public void <init>(double, double, double, double)
    {
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet r0;
        double $d0, $d1, $d2, $d3;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $d3 := @parameter3: double;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: void <init>(double,double,double,double,double)>($d0, $d1, $d2, $d3, 1.0E-10);

        return;
    }
    public void <init>(double, double, double, double, double)
    {
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet r0;
        double $d0, $d1, $d2, $d3, $d4;
        org.apache.commons.math3.geometry.euclidean.twod.Line[] $r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $d3 := @parameter3: double;

        $d4 := @parameter4: double;

        $r1 = staticinvoke <org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: org.apache.commons.math3.geometry.euclidean.twod.Line[] boxBoundary(double,double,double,double,double)>($d0, $d1, $d2, $d3, $d4);

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: void <init>(org.apache.commons.math3.geometry.partitioning.Hyperplane[],double)>($r1, $d4);

        return;
    }
    public transient void <init>(double, org.apache.commons.math3.geometry.euclidean.twod.Vector2D[])
    {
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet r0;
        double $d0;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] $r1;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;

        $d0 := @parameter0: double;

        $r1 := @parameter1: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[];

        $r2 = staticinvoke <org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: org.apache.commons.math3.geometry.partitioning.BSPTree verticesToTree(double,org.apache.commons.math3.geometry.euclidean.twod.Vector2D[])>($d0, $r1);

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree,double)>($r2, $d0);

        return;
    }
    public void <init>(java.util.Collection)
    {
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet r0;
        java.util.Collection r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;

        r1 := @parameter0: java.util.Collection;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: void <init>(java.util.Collection,double)>(r1, 1.0E-10);

        return;
    }
    public void <init>(java.util.Collection, double)
    {
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet r0;
        java.util.Collection r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;

        r1 := @parameter0: java.util.Collection;

        $d0 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: void <init>(java.util.Collection,double)>(r1, $d0);

        return;
    }
    public void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree,double)>(r1, 1.0E-10);

        return;
    }
    public void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree, double)
    {
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $d0 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree,double)>(r1, $d0);

        return;
    }
    private static org.apache.commons.math3.geometry.euclidean.twod.Line[] boxBoundary(double, double, double, double, double)
    {
        double $d0, $d1, $d2, $d3, $d4, $d5;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r0, r1, r2, r3;
        byte $b0;
        org.apache.commons.math3.geometry.euclidean.twod.Line[] $r4;
        org.apache.commons.math3.geometry.euclidean.twod.Line $r5;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $d3 := @parameter3: double;

        $d4 := @parameter4: double;

        $d5 = $d1 - $d4;

        $b0 = $d0 cmpl $d5;

        if $b0 >= 0 goto label1;

        $d5 = $d3 - $d4;

        $b0 = $d2 cmpl $d5;

        if $b0 < 0 goto label2;

     label1:
        return null;

     label2:
        r3 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        specialinvoke r3.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: void <init>(double,double)>($d0, $d2);

        r2 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        specialinvoke r2.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: void <init>(double,double)>($d0, $d3);

        r1 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        specialinvoke r1.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: void <init>(double,double)>($d1, $d2);

        r0 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: void <init>(double,double)>($d1, $d3);

        $r4 = newarray (org.apache.commons.math3.geometry.euclidean.twod.Line)[4];

        $r5 = new org.apache.commons.math3.geometry.euclidean.twod.Line;

        specialinvoke $r5.<org.apache.commons.math3.geometry.euclidean.twod.Line: void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)>(r3, r1, $d4);

        $r4[0] = $r5;

        $r5 = new org.apache.commons.math3.geometry.euclidean.twod.Line;

        specialinvoke $r5.<org.apache.commons.math3.geometry.euclidean.twod.Line: void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)>(r1, r0, $d4);

        $r4[1] = $r5;

        $r5 = new org.apache.commons.math3.geometry.euclidean.twod.Line;

        specialinvoke $r5.<org.apache.commons.math3.geometry.euclidean.twod.Line: void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)>(r0, r2, $d4);

        $r4[2] = $r5;

        $r5 = new org.apache.commons.math3.geometry.euclidean.twod.Line;

        specialinvoke $r5.<org.apache.commons.math3.geometry.euclidean.twod.Line: void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)>(r2, r3, $d4);

        $r4[3] = $r5;

        return $r4;
    }
    private int closeVerticesConnections(java.util.List)
    {
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet r0;
        java.util.List r1;
        int i0;
        java.util.Iterator $r2, $r7;
        boolean $z0;
        java.lang.Object $r3;
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment r4, $r5, r8, $r9;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D $r6, $r10;
        double d0, $d1;
        byte $b1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;

        r1 := @parameter0: java.util.List;

        i0 = 0;

        $r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment) $r3;

        $r5 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment getNext()>();

        if $r5 != null goto label1;

        $r6 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment: org.apache.commons.math3.geometry.euclidean.twod.Vector2D getEnd()>();

        if $r6 == null goto label1;

        $r6 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment: org.apache.commons.math3.geometry.euclidean.twod.Vector2D getEnd()>();

        $r5 = null;

        d0 = #Infinity;

        $r7 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment) $r3;

        $r9 = virtualinvoke r8.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment getPrevious()>();

        if $r9 != null goto label2;

        $r10 = virtualinvoke r8.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment: org.apache.commons.math3.geometry.euclidean.twod.Vector2D getStart()>();

        if $r10 == null goto label2;

        $r10 = virtualinvoke r8.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment: org.apache.commons.math3.geometry.euclidean.twod.Vector2D getStart()>();

        $d1 = staticinvoke <org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double distance(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)>($r6, $r10);

        $b1 = $d1 cmpg d0;

        if $b1 >= 0 goto label2;

        $r5 = r8;

        d0 = $d1;

        goto label2;

     label3:
        $d1 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: double getTolerance()>();

        $b1 = d0 cmpg $d1;

        if $b1 > 0 goto label1;

        virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment: void setNext(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment)>($r5);

        virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment: void setPrevious(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment)>(r4);

        i0 = i0 + 1;

        goto label1;

     label4:
        return i0;
    }
    private void filterSpuriousVertices(java.util.List)
    {
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet r0;
        java.util.List r1;
        double $d0, $d1, $d2;
        int i0, i1, $i2;
        java.lang.Object $r2;
        org.apache.commons.math3.geometry.euclidean.twod.Segment r3, r4, $r6;
        org.apache.commons.math3.geometry.euclidean.twod.Line $r5;
        boolean $z0;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D $r7, $r8;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;

        r1 := @parameter0: java.util.List;

        i1 = 0;

     label1:
        i0 = interfaceinvoke r1.<java.util.List: int size()>();

        if i1 >= i0 goto label3;

        $r2 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1);

        r3 = (org.apache.commons.math3.geometry.euclidean.twod.Segment) $r2;

        i0 = i1 + 1;

        $i2 = interfaceinvoke r1.<java.util.List: int size()>();

        i0 = i0 % $i2;

        $r2 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i0);

        r4 = (org.apache.commons.math3.geometry.euclidean.twod.Segment) $r2;

        if r4 == null goto label2;

        $r5 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.twod.Segment: org.apache.commons.math3.geometry.euclidean.twod.Line getLine()>();

        $d1 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.twod.Line: double getAngle()>();

        $r5 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.twod.Segment: org.apache.commons.math3.geometry.euclidean.twod.Line getLine()>();

        $d2 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.twod.Line: double getAngle()>();

        $d0 = <org.apache.commons.math3.util.Precision: double EPSILON>;

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,double)>($d1, $d2, $d0);

        if $z0 == 0 goto label2;

        $r6 = new org.apache.commons.math3.geometry.euclidean.twod.Segment;

        $r7 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.twod.Segment: org.apache.commons.math3.geometry.euclidean.twod.Vector2D getStart()>();

        $r8 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.twod.Segment: org.apache.commons.math3.geometry.euclidean.twod.Vector2D getEnd()>();

        $r5 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.twod.Segment: org.apache.commons.math3.geometry.euclidean.twod.Line getLine()>();

        specialinvoke $r6.<org.apache.commons.math3.geometry.euclidean.twod.Segment: void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Line)>($r7, $r8, $r5);

        interfaceinvoke r1.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i0, $r6);

        interfaceinvoke r1.<java.util.List: java.lang.Object remove(int)>(i1);

        i1 = i1 + -1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }
    private java.util.List followLoop(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment)
    {
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet r0;
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment $r1, $r3;
        java.util.ArrayList r2;
        int $i0;
        java.lang.Object $r4;
        org.apache.commons.math3.geometry.euclidean.twod.Segment $r5;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D $r6;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment;

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r1);

        virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment: void setProcessed(boolean)>(1);

        $r3 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment getNext()>();

     label1:
        if $r3 == $r1 goto label2;

        if $r3 == null goto label2;

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r3);

        virtualinvoke $r3.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment: void setProcessed(boolean)>(1);

        $r3 = virtualinvoke $r3.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment getNext()>();

        goto label1;

     label2:
        if $r3 != null goto label4;

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment getPrevious()>();

     label3:
        if $r1 == null goto label4;

        interfaceinvoke r2.<java.util.List: void add(int,java.lang.Object)>(0, $r1);

        virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment: void setProcessed(boolean)>(1);

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment getPrevious()>();

        goto label3;

     label4:
        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: void filterSpuriousVertices(java.util.List)>(r2);

        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        if $i0 != 2 goto label5;

        $r4 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(0);

        $r5 = (org.apache.commons.math3.geometry.euclidean.twod.Segment) $r4;

        $r6 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.twod.Segment: org.apache.commons.math3.geometry.euclidean.twod.Vector2D getStart()>();

        if $r6 == null goto label5;

        return null;

     label5:
        return r2;
    }
    private org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment getUnprocessed(java.util.List)
    {
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet r0;
        java.util.List r1;
        java.util.Iterator $r2;
        boolean $z0;
        java.lang.Object $r3;
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment r4;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;

        r1 := @parameter0: java.util.List;

        $r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment) $r3;

        $z0 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment: boolean isProcessed()>();

        if $z0 != 0 goto label1;

        return r4;

     label2:
        return null;
    }
    private static void insertEdges(double, org.apache.commons.math3.geometry.partitioning.BSPTree, java.util.List)
    {
        double $d0, $d1, $d2, $d3;
        org.apache.commons.math3.geometry.partitioning.BSPTree r0, $r6;
        java.util.List r1;
        java.util.ArrayList r2, r3;
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Edge r4, r10;
        int i0, $i1;
        java.lang.Object $r5;
        org.apache.commons.math3.geometry.euclidean.twod.Line $r7;
        boolean $z0;
        java.lang.Boolean $r8;
        java.util.Iterator $r9;
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex $r11;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D $r12;
        byte $b2;
        org.apache.commons.math3.geometry.partitioning.Side r13, r14;
        int[] $r15;

        $d0 := @parameter0: double;

        r0 := @parameter1: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r1 := @parameter2: java.util.List;

        r4 = null;

        i0 = 0;

     label01:
        if r4 != null goto label04;

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if i0 >= $i1 goto label04;

        $i1 = i0 + 1;

        $r5 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i0);

        r4 = (org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Edge) $r5;

        $r6 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Edge: org.apache.commons.math3.geometry.partitioning.BSPTree getNode()>();

        if $r6 != null goto label03;

        $r7 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Edge: org.apache.commons.math3.geometry.euclidean.twod.Line getLine()>();

        $z0 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: boolean insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)>($r7);

        if $z0 == 0 goto label02;

        virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Edge: void setNode(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r0);

        i0 = $i1;

        goto label01;

     label02:
        r4 = null;

        i0 = $i1;

        goto label01;

     label03:
        r4 = null;

        i0 = $i1;

        goto label01;

     label04:
        if r4 != null goto label07;

        $r6 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getParent()>();

        if $r6 == null goto label05;

        $r6 = virtualinvoke $r6.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        if r0 != $r6 goto label06;

     label05:
        $r8 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: void setAttribute(java.lang.Object)>($r8);

        return;

     label06:
        $r8 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: void setAttribute(java.lang.Object)>($r8);

        return;

     label07:
        r3 = new java.util.ArrayList;

        specialinvoke r3.<java.util.ArrayList: void <init>()>();

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        $r9 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label08:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label21;

        $r5 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Edge) $r5;

        if r10 == r4 goto label08;

        $r7 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Edge: org.apache.commons.math3.geometry.euclidean.twod.Line getLine()>();

        $r11 = virtualinvoke r10.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Edge: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex getStart()>();

        $r12 = virtualinvoke $r11.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex: org.apache.commons.math3.geometry.euclidean.twod.Vector2D getLocation()>();

        $d1 = virtualinvoke $r7.<org.apache.commons.math3.geometry.euclidean.twod.Line: double getOffset(org.apache.commons.math3.geometry.Point)>($r12);

        $r7 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Edge: org.apache.commons.math3.geometry.euclidean.twod.Line getLine()>();

        $r11 = virtualinvoke r10.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Edge: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex getEnd()>();

        $r12 = virtualinvoke $r11.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex: org.apache.commons.math3.geometry.euclidean.twod.Vector2D getLocation()>();

        $d2 = virtualinvoke $r7.<org.apache.commons.math3.geometry.euclidean.twod.Line: double getOffset(org.apache.commons.math3.geometry.Point)>($r12);

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d1);

        $b2 = $d3 cmpg $d0;

        if $b2 > 0 goto label12;

        r13 = <org.apache.commons.math3.geometry.partitioning.Side: org.apache.commons.math3.geometry.partitioning.Side HYPER>;

     label09:
        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d2);

        $b2 = $d1 cmpg $d0;

        if $b2 > 0 goto label14;

        r14 = <org.apache.commons.math3.geometry.partitioning.Side: org.apache.commons.math3.geometry.partitioning.Side HYPER>;

     label10:
        $r15 = <org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$1: int[] $SwitchMap$org$apache$commons$math3$geometry$partitioning$Side>;

        i0 = virtualinvoke r13.<org.apache.commons.math3.geometry.partitioning.Side: int ordinal()>();

        i0 = $r15[i0];

        lookupswitch(i0)
        {
            case 1: goto label16;
            case 2: goto label18;
            default: goto label11;
        };

     label11:
        r13 = <org.apache.commons.math3.geometry.partitioning.Side: org.apache.commons.math3.geometry.partitioning.Side PLUS>;

        if r14 != r13 goto label20;

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r10);

        goto label08;

     label12:
        $b2 = $d1 cmpg 0.0;

        if $b2 >= 0 goto label13;

        r13 = <org.apache.commons.math3.geometry.partitioning.Side: org.apache.commons.math3.geometry.partitioning.Side MINUS>;

        goto label09;

     label13:
        r13 = <org.apache.commons.math3.geometry.partitioning.Side: org.apache.commons.math3.geometry.partitioning.Side PLUS>;

        goto label09;

     label14:
        $b2 = $d2 cmpg 0.0;

        if $b2 >= 0 goto label15;

        r14 = <org.apache.commons.math3.geometry.partitioning.Side: org.apache.commons.math3.geometry.partitioning.Side MINUS>;

        goto label10;

     label15:
        r14 = <org.apache.commons.math3.geometry.partitioning.Side: org.apache.commons.math3.geometry.partitioning.Side PLUS>;

        goto label10;

     label16:
        r13 = <org.apache.commons.math3.geometry.partitioning.Side: org.apache.commons.math3.geometry.partitioning.Side MINUS>;

        if r14 != r13 goto label17;

        $r7 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Edge: org.apache.commons.math3.geometry.euclidean.twod.Line getLine()>();

        $r11 = virtualinvoke r10.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Edge: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex split(org.apache.commons.math3.geometry.euclidean.twod.Line)>($r7);

        r10 = virtualinvoke $r11.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Edge getOutgoing()>();

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r10);

        r10 = virtualinvoke $r11.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Edge getIncoming()>();

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r10);

        goto label08;

     label17:
        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r10);

        goto label08;

     label18:
        r13 = <org.apache.commons.math3.geometry.partitioning.Side: org.apache.commons.math3.geometry.partitioning.Side PLUS>;

        if r14 != r13 goto label19;

        $r7 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Edge: org.apache.commons.math3.geometry.euclidean.twod.Line getLine()>();

        $r11 = virtualinvoke r10.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Edge: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex split(org.apache.commons.math3.geometry.euclidean.twod.Line)>($r7);

        r10 = virtualinvoke $r11.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Edge getIncoming()>();

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r10);

        r10 = virtualinvoke $r11.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Edge getOutgoing()>();

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r10);

        goto label08;

     label19:
        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r10);

        goto label08;

     label20:
        r13 = <org.apache.commons.math3.geometry.partitioning.Side: org.apache.commons.math3.geometry.partitioning.Side MINUS>;

        if r14 != r13 goto label08;

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r10);

        goto label08;

     label21:
        $z0 = interfaceinvoke r3.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label23;

        $r6 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        staticinvoke <org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: void insertEdges(double,org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List)>($d0, $r6, r3);

     label22:
        $z0 = interfaceinvoke r2.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label24;

        r0 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        staticinvoke <org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: void insertEdges(double,org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List)>($d0, r0, r2);

        return;

     label23:
        $r6 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        $r8 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        virtualinvoke $r6.<org.apache.commons.math3.geometry.partitioning.BSPTree: void setAttribute(java.lang.Object)>($r8);

        goto label22;

     label24:
        r0 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        $r8 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: void setAttribute(java.lang.Object)>($r8);

        return;
    }
    private int naturalFollowerConnections(java.util.List)
    {
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet r0;
        java.util.List r1;
        int i0;
        java.util.Iterator $r2, $r8;
        boolean $z0;
        java.lang.Object $r3;
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment r4, $r5, $r9;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r6, $r7, $r10;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;

        r1 := @parameter0: java.util.List;

        i0 = 0;

        $r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment) $r3;

        $r5 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment getNext()>();

        if $r5 != null goto label1;

        $r6 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment: org.apache.commons.math3.geometry.partitioning.BSPTree getNode()>();

        $r7 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment: org.apache.commons.math3.geometry.partitioning.BSPTree getEndNode()>();

        $r8 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r3 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment) $r3;

        $r9 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment getPrevious()>();

        if $r9 != null goto label2;

        $r10 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment: org.apache.commons.math3.geometry.partitioning.BSPTree getNode()>();

        if $r10 != $r7 goto label2;

        $r10 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment: org.apache.commons.math3.geometry.partitioning.BSPTree getStartNode()>();

        if $r10 != $r6 goto label2;

        virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment: void setNext(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment)>($r5);

        virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment: void setPrevious(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment)>(r4);

        i0 = i0 + 1;

        goto label1;

     label3:
        return i0;
    }
    private int splitEdgeConnections(java.util.List)
    {
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet r0;
        java.util.List r1;
        int i0;
        java.util.Iterator $r2, $r9;
        boolean $z0;
        java.lang.Object $r3;
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment r4, $r5, $r10;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r6, $r11;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r7;
        org.apache.commons.math3.geometry.partitioning.Hyperplane $r8, $r12;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;

        r1 := @parameter0: java.util.List;

        i0 = 0;

        $r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment) $r3;

        $r5 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment getNext()>();

        if $r5 != null goto label1;

        $r6 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment: org.apache.commons.math3.geometry.partitioning.BSPTree getNode()>();

        $r7 = virtualinvoke $r6.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        $r8 = interfaceinvoke $r7.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        $r6 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment: org.apache.commons.math3.geometry.partitioning.BSPTree getEndNode()>();

        $r9 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r3 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment) $r3;

        $r10 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment getPrevious()>();

        if $r10 != null goto label2;

        $r11 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment: org.apache.commons.math3.geometry.partitioning.BSPTree getNode()>();

        $r7 = virtualinvoke $r11.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        $r12 = interfaceinvoke $r7.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        if $r12 != $r8 goto label2;

        $r11 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment: org.apache.commons.math3.geometry.partitioning.BSPTree getStartNode()>();

        if $r11 != $r6 goto label2;

        virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment: void setNext(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment)>($r5);

        virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment: void setPrevious(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment)>(r4);

        i0 = i0 + 1;

        goto label1;

     label3:
        return i0;
    }
    private static transient org.apache.commons.math3.geometry.partitioning.BSPTree verticesToTree(double, org.apache.commons.math3.geometry.euclidean.twod.Vector2D[])
    {
        double $d0, $d1;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] $r0;
        java.util.ArrayList r1;
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex r2, r3, r5;
        int i0, i1, i2, i3;
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex[] r4;
        org.apache.commons.math3.geometry.partitioning.BSPTree r6;
        java.lang.Boolean $r7;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D $r8, $r11;
        org.apache.commons.math3.geometry.euclidean.twod.Line $r9, r10;
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Edge $r12;
        byte $b4;

        $d0 := @parameter0: double;

        $r0 := @parameter1: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[];

        i1 = lengthof $r0;

        if i1 != 0 goto label1;

        r6 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r7 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        specialinvoke r6.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r7);

        return r6;

     label1:
        r4 = newarray (org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex)[i1];

        i2 = 0;

     label2:
        if i2 >= i1 goto label3;

        r2 = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex;

        $r8 = $r0[i2];

        specialinvoke r2.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex: void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D)>($r8);

        r4[i2] = r2;

        i2 = i2 + 1;

        goto label2;

     label3:
        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>(int)>(i1);

        i2 = 0;

     label4:
        if i2 >= i1 goto label9;

        r3 = r4[i2];

        i0 = i2 + 1;

        i0 = i0 % i1;

        r2 = r4[i0];

        $r9 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex: org.apache.commons.math3.geometry.euclidean.twod.Line sharedLineWith(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex)>(r2);

        r10 = $r9;

        if $r9 != null goto label5;

        r10 = new org.apache.commons.math3.geometry.euclidean.twod.Line;

        $r8 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex: org.apache.commons.math3.geometry.euclidean.twod.Vector2D getLocation()>();

        $r11 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex: org.apache.commons.math3.geometry.euclidean.twod.Vector2D getLocation()>();

        specialinvoke r10.<org.apache.commons.math3.geometry.euclidean.twod.Line: void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)>($r8, $r11, $d0);

     label5:
        $r12 = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Edge;

        specialinvoke $r12.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Edge: void <init>(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex,org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex,org.apache.commons.math3.geometry.euclidean.twod.Line)>(r3, r2, r10);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r12);

        i0 = lengthof r4;

        i3 = 0;

     label6:
        if i3 >= i0 goto label8;

        r5 = r4[i3];

        if r5 == r3 goto label7;

        if r5 == r2 goto label7;

        $r8 = virtualinvoke r5.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex: org.apache.commons.math3.geometry.euclidean.twod.Vector2D getLocation()>();

        $d1 = virtualinvoke r10.<org.apache.commons.math3.geometry.euclidean.twod.Line: double getOffset(org.apache.commons.math3.geometry.Point)>($r8);

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d1);

        $b4 = $d1 cmpg $d0;

        if $b4 > 0 goto label7;

        virtualinvoke r5.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex: void bindWith(org.apache.commons.math3.geometry.euclidean.twod.Line)>(r10);

     label7:
        i3 = i3 + 1;

        goto label6;

     label8:
        i2 = i2 + 1;

        goto label4;

     label9:
        r6 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        specialinvoke r6.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>()>();

        staticinvoke <org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: void insertEdges(double,org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List)>($d0, r6, r1);

        return r6;
    }
    public org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet r0, $r2;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: double getTolerance()>();

        specialinvoke $r2.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree,double)>(r1, $d0);

        return $r2;
    }
    public volatile org.apache.commons.math3.geometry.partitioning.AbstractRegion buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;

        $r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r1);

        return r0;
    }
    public volatile org.apache.commons.math3.geometry.partitioning.Region buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;

        $r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r1);

        return r0;
    }
    protected void computeGeometricalProperties()
    {
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet r0;
        double d0, d1, d2, d3, d4, d5, $d6, $d7, $d8, $d9, $d10;
        int i0, i1, i2, i3;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] r1;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r2;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] $r3;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r4;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r5;
        java.lang.Object $r6;
        java.lang.Boolean $r7;
        boolean $z0;
        byte $b4;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] getVertices()>();

        i0 = lengthof $r3;

        if i0 != 0 goto label2;

        $r4 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(0);

        $r5 = virtualinvoke $r4.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r5 != null goto label1;

        $r6 = virtualinvoke $r4.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        $r7 = (java.lang.Boolean) $r6;

        $z0 = virtualinvoke $r7.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: void setSize(double)>(#Infinity);

        r2 = <org.apache.commons.math3.geometry.euclidean.twod.Vector2D: org.apache.commons.math3.geometry.euclidean.twod.Vector2D NaN>;

        virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: void setBarycenter(org.apache.commons.math3.geometry.Point)>(r2);

        return;

     label1:
        virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: void setSize(double)>(0.0);

        r2 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        specialinvoke r2.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: void <init>(double,double)>(0.0, 0.0);

        virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: void setBarycenter(org.apache.commons.math3.geometry.Point)>(r2);

        return;

     label2:
        r1 = $r3[0];

        r2 = r1[0];

        if r2 != null goto label3;

        virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: void setSize(double)>(#Infinity);

        r2 = <org.apache.commons.math3.geometry.euclidean.twod.Vector2D: org.apache.commons.math3.geometry.euclidean.twod.Vector2D NaN>;

        virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: void setBarycenter(org.apache.commons.math3.geometry.Point)>(r2);

        return;

     label3:
        d3 = 0.0;

        d4 = 0.0;

        d5 = 0.0;

        i0 = lengthof $r3;

        i2 = 0;

     label4:
        if i2 >= i0 goto label7;

        r1 = $r3[i2];

        i1 = lengthof r1;

        i1 = i1 + -1;

        r2 = r1[i1];

        $d6 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getX()>();

        i1 = lengthof r1;

        i1 = i1 + -1;

        r2 = r1[i1];

        $d7 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getY()>();

        i1 = lengthof r1;

        i3 = 0;

     label5:
        if i3 >= i1 goto label6;

        r2 = r1[i3];

        d1 = $d6;

        d2 = $d7;

        $d8 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getX()>();

        $d6 = $d8;

        $d9 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getY()>();

        $d7 = $d9;

        d0 = d1 * $d9;

        $d10 = d2 * $d8;

        d0 = d0 - $d10;

        d3 = d3 + d0;

        d1 = d1 + $d8;

        d1 = d1 * d0;

        d4 = d4 + d1;

        d2 = d2 + $d9;

        d2 = d2 * d0;

        d5 = d5 + d2;

        i3 = i3 + 1;

        goto label5;

     label6:
        i2 = i2 + 1;

        goto label4;

     label7:
        $b4 = d3 cmpg 0.0;

        if $b4 >= 0 goto label8;

        virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: void setSize(double)>(#Infinity);

        r2 = <org.apache.commons.math3.geometry.euclidean.twod.Vector2D: org.apache.commons.math3.geometry.euclidean.twod.Vector2D NaN>;

        virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: void setBarycenter(org.apache.commons.math3.geometry.Point)>(r2);

        return;

     label8:
        $d6 = d3 / 2.0;

        virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: void setSize(double)>($d6);

        r2 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        $d6 = 3.0 * d3;

        d4 = d4 / $d6;

        d3 = 3.0 * d3;

        d5 = d5 / d3;

        specialinvoke r2.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: void <init>(double,double)>(d4, d5);

        virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: void setBarycenter(org.apache.commons.math3.geometry.Point)>(r2);

        return;
    }
    public org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] getVertices()
    {
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet r0;
        java.util.ArrayList r1;
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder r2;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] $r3;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r4;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r5;
        java.lang.Object $r6;
        double $d0, $d1;
        java.util.List $r7, $r9;
        int $i0, $i1, i2;
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment $r8;
        org.apache.commons.math3.geometry.euclidean.twod.Segment $r10;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D $r11;
        java.util.Iterator $r12, $r16;
        boolean $z0;
        org.apache.commons.math3.geometry.euclidean.twod.Line $r13;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] $r14;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D $r15;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;

        $r3 = r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] vertices>;

        if $r3 != null goto label01;

        $r4 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(0);

        $r5 = virtualinvoke $r4.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r5 != null goto label02;

        $r3 = newarray (org.apache.commons.math3.geometry.euclidean.twod.Vector2D[])[0];

        r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] vertices> = $r3;

     label01:
        $r3 = r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] vertices>;

        $r6 = virtualinvoke $r3.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][]) $r6;

        return $r3;

     label02:
        r2 = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: double getTolerance()>();

        specialinvoke r2.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder: void <init>(double)>($d0);

        $r4 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(1);

        virtualinvoke $r4.<org.apache.commons.math3.geometry.partitioning.BSPTree: void visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)>(r2);

        $r7 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder: java.util.List getSegments()>();

        $i0 = interfaceinvoke $r7.<java.util.List: int size()>();

        $i1 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: int naturalFollowerConnections(java.util.List)>($r7);

        $i0 = $i0 - $i1;

        if $i0 <= 0 goto label03;

        $i1 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: int splitEdgeConnections(java.util.List)>($r7);

        $i0 = $i0 - $i1;

     label03:
        if $i0 <= 0 goto label04;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: int closeVerticesConnections(java.util.List)>($r7);

     label04:
        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>()>();

        $r8 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment getUnprocessed(java.util.List)>($r7);

     label05:
        if $r8 == null goto label08;

        $r9 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: java.util.List followLoop(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment)>($r8);

        if $r9 == null goto label06;

        $r6 = interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>(0);

        $r10 = (org.apache.commons.math3.geometry.euclidean.twod.Segment) $r6;

        $r11 = virtualinvoke $r10.<org.apache.commons.math3.geometry.euclidean.twod.Segment: org.apache.commons.math3.geometry.euclidean.twod.Vector2D getStart()>();

        if $r11 != null goto label07;

        virtualinvoke r1.<java.util.ArrayList: void add(int,java.lang.Object)>(0, $r9);

     label06:
        $r8 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment getUnprocessed(java.util.List)>($r7);

        goto label05;

     label07:
        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r9);

        goto label06;

     label08:
        $i0 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        $r3 = newarray (org.apache.commons.math3.geometry.euclidean.twod.Vector2D[])[$i0];

        r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] vertices> = $r3;

        $i0 = 0;

        $r12 = virtualinvoke r1.<java.util.ArrayList: java.util.Iterator iterator()>();

     label09:
        $z0 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label01;

        $r6 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (java.util.List) $r6;

        $i1 = interfaceinvoke $r7.<java.util.List: int size()>();

        if $i1 < 2 goto label10;

        $i1 = interfaceinvoke $r7.<java.util.List: int size()>();

        if $i1 != 2 goto label11;

        $r6 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>(0);

        $r10 = (org.apache.commons.math3.geometry.euclidean.twod.Segment) $r6;

        $r11 = virtualinvoke $r10.<org.apache.commons.math3.geometry.euclidean.twod.Segment: org.apache.commons.math3.geometry.euclidean.twod.Vector2D getStart()>();

        if $r11 != null goto label11;

        $r6 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>(1);

        $r10 = (org.apache.commons.math3.geometry.euclidean.twod.Segment) $r6;

        $r11 = virtualinvoke $r10.<org.apache.commons.math3.geometry.euclidean.twod.Segment: org.apache.commons.math3.geometry.euclidean.twod.Vector2D getEnd()>();

        if $r11 != null goto label11;

     label10:
        $r6 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>(0);

        $r10 = (org.apache.commons.math3.geometry.euclidean.twod.Segment) $r6;

        $r13 = virtualinvoke $r10.<org.apache.commons.math3.geometry.euclidean.twod.Segment: org.apache.commons.math3.geometry.euclidean.twod.Line getLine()>();

        $r3 = r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] vertices>;

        $r14 = newarray (org.apache.commons.math3.geometry.euclidean.twod.Vector2D)[3];

        $r14[0] = null;

        $r15 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        specialinvoke $r15.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: void <init>(double)>(-3.4028234663852886E38);

        $r11 = virtualinvoke $r13.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.twod.Vector2D toSpace(org.apache.commons.math3.geometry.Point)>($r15);

        $r14[1] = $r11;

        $r15 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        specialinvoke $r15.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: void <init>(double)>(3.4028234663852886E38);

        $r11 = virtualinvoke $r13.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.twod.Vector2D toSpace(org.apache.commons.math3.geometry.Point)>($r15);

        $r14[2] = $r11;

        $r3[$i0] = $r14;

        $i0 = $i0 + 1;

        goto label09;

     label11:
        $r6 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>(0);

        $r10 = (org.apache.commons.math3.geometry.euclidean.twod.Segment) $r6;

        $r11 = virtualinvoke $r10.<org.apache.commons.math3.geometry.euclidean.twod.Segment: org.apache.commons.math3.geometry.euclidean.twod.Vector2D getStart()>();

        if $r11 != null goto label16;

        $i1 = interfaceinvoke $r7.<java.util.List: int size()>();

        $i1 = $i1 + 2;

        $r14 = newarray (org.apache.commons.math3.geometry.euclidean.twod.Vector2D)[$i1];

        $i1 = 0;

        $r16 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label12:
        $z0 = interfaceinvoke $r16.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label15;

        $r6 = interfaceinvoke $r16.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (org.apache.commons.math3.geometry.euclidean.twod.Segment) $r6;

        if $i1 != 0 goto label13;

        $r13 = virtualinvoke $r10.<org.apache.commons.math3.geometry.euclidean.twod.Segment: org.apache.commons.math3.geometry.euclidean.twod.Line getLine()>();

        $r11 = virtualinvoke $r10.<org.apache.commons.math3.geometry.euclidean.twod.Segment: org.apache.commons.math3.geometry.euclidean.twod.Vector2D getEnd()>();

        $r15 = virtualinvoke $r13.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.oned.Vector1D toSubSpace(org.apache.commons.math3.geometry.Point)>($r11);

        $d0 = virtualinvoke $r15.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double getX()>();

        $d1 = $d0 / 2.0;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d1);

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>(1.0, $d1);

        $d0 = $d0 - $d1;

        i2 = $i1 + 1;

        $r14[$i1] = null;

        $i1 = i2 + 1;

        $r13 = virtualinvoke $r10.<org.apache.commons.math3.geometry.euclidean.twod.Segment: org.apache.commons.math3.geometry.euclidean.twod.Line getLine()>();

        $r15 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        specialinvoke $r15.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: void <init>(double)>($d0);

        $r11 = virtualinvoke $r13.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.twod.Vector2D toSpace(org.apache.commons.math3.geometry.Point)>($r15);

        $r14[i2] = $r11;

     label13:
        i2 = lengthof $r14;

        i2 = i2 + -1;

        if $i1 >= i2 goto label14;

        $r11 = virtualinvoke $r10.<org.apache.commons.math3.geometry.euclidean.twod.Segment: org.apache.commons.math3.geometry.euclidean.twod.Vector2D getEnd()>();

        $r14[$i1] = $r11;

        $i1 = $i1 + 1;

     label14:
        i2 = lengthof $r14;

        i2 = i2 + -1;

        if $i1 != i2 goto label12;

        $r13 = virtualinvoke $r10.<org.apache.commons.math3.geometry.euclidean.twod.Segment: org.apache.commons.math3.geometry.euclidean.twod.Line getLine()>();

        $r11 = virtualinvoke $r10.<org.apache.commons.math3.geometry.euclidean.twod.Segment: org.apache.commons.math3.geometry.euclidean.twod.Vector2D getStart()>();

        $r15 = virtualinvoke $r13.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.oned.Vector1D toSubSpace(org.apache.commons.math3.geometry.Point)>($r11);

        $d0 = virtualinvoke $r15.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double getX()>();

        $d1 = $d0 / 2.0;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d1);

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>(1.0, $d1);

        $d0 = $d0 + $d1;

        $r13 = virtualinvoke $r10.<org.apache.commons.math3.geometry.euclidean.twod.Segment: org.apache.commons.math3.geometry.euclidean.twod.Line getLine()>();

        $r15 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        specialinvoke $r15.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: void <init>(double)>($d0);

        $r11 = virtualinvoke $r13.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.twod.Vector2D toSpace(org.apache.commons.math3.geometry.Point)>($r15);

        $r14[$i1] = $r11;

        $i1 = $i1 + 1;

        goto label12;

     label15:
        $r3 = r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] vertices>;

        $r3[$i0] = $r14;

        $i0 = $i0 + 1;

        goto label09;

     label16:
        $i1 = interfaceinvoke $r7.<java.util.List: int size()>();

        $r14 = newarray (org.apache.commons.math3.geometry.euclidean.twod.Vector2D)[$i1];

        $i1 = 0;

        $r16 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label17:
        $z0 = interfaceinvoke $r16.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label18;

        $r6 = interfaceinvoke $r16.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (org.apache.commons.math3.geometry.euclidean.twod.Segment) $r6;

        $r11 = virtualinvoke $r10.<org.apache.commons.math3.geometry.euclidean.twod.Segment: org.apache.commons.math3.geometry.euclidean.twod.Vector2D getStart()>();

        $r14[$i1] = $r11;

        $i1 = $i1 + 1;

        goto label17;

     label18:
        $r3 = r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] vertices>;

        $r3[$i0] = $r14;

        $i0 = $i0 + 1;

        goto label09;
    }
