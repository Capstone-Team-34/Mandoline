org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane extends java.lang.Object implements org.apache.commons.math3.geometry.partitioning.SubHyperplane
private final org.apache.commons.math3.geometry.partitioning.Hyperplane hyperplane
private final org.apache.commons.math3.geometry.partitioning.Region remainingRegion
    protected void <init>(org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.Region)
    {
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane r0;
        org.apache.commons.math3.geometry.partitioning.Hyperplane r1;
        org.apache.commons.math3.geometry.partitioning.Region r2;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.Hyperplane;

        r2 := @parameter1: org.apache.commons.math3.geometry.partitioning.Region;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane hyperplane> = r1;

        r0.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: org.apache.commons.math3.geometry.partitioning.Region remainingRegion> = r2;

        return;
    }
    private org.apache.commons.math3.geometry.partitioning.BSPTree recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree, org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.Transform, java.util.Map)
    {
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, r6, $r12, $r13;
        org.apache.commons.math3.geometry.partitioning.Hyperplane r2, $r11;
        org.apache.commons.math3.geometry.partitioning.Transform r3;
        java.util.Map r4;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r5, $r9;
        java.lang.Object $r7;
        org.apache.commons.math3.geometry.partitioning.BoundaryAttribute r8;
        org.apache.commons.math3.geometry.partitioning.NodesSet $r10;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r2 := @parameter1: org.apache.commons.math3.geometry.partitioning.Hyperplane;

        r3 := @parameter2: org.apache.commons.math3.geometry.partitioning.Transform;

        r4 := @parameter3: java.util.Map;

        $r5 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r5 != null goto label2;

        r6 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r7 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        specialinvoke r6.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r7);

     label1:
        interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r6);

        return r6;

     label2:
        $r7 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        r8 = (org.apache.commons.math3.geometry.partitioning.BoundaryAttribute) $r7;

        if r8 == null goto label5;

        $r5 = virtualinvoke r8.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusOutside()>();

        if $r5 != null goto label6;

        $r5 = null;

     label3:
        $r9 = virtualinvoke r8.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusInside()>();

        if $r9 != null goto label7;

        $r9 = null;

     label4:
        r8 = new org.apache.commons.math3.geometry.partitioning.BoundaryAttribute;

        $r10 = new org.apache.commons.math3.geometry.partitioning.NodesSet;

        specialinvoke $r10.<org.apache.commons.math3.geometry.partitioning.NodesSet: void <init>()>();

        specialinvoke r8.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.NodesSet)>($r5, $r9, $r10);

     label5:
        r6 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r5 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        $r11 = r0.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane hyperplane>;

        $r5 = interfaceinvoke r3.<org.apache.commons.math3.geometry.partitioning.Transform: org.apache.commons.math3.geometry.partitioning.SubHyperplane apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)>($r5, $r11, r2);

        $r12 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        $r12 = specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: org.apache.commons.math3.geometry.partitioning.BSPTree recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform,java.util.Map)>($r12, r2, r3, r4);

        $r13 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        $r13 = specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: org.apache.commons.math3.geometry.partitioning.BSPTree recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform,java.util.Map)>($r13, r2, r3, r4);

        specialinvoke r6.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)>($r5, $r12, $r13, r8);

        goto label1;

     label6:
        $r5 = virtualinvoke r8.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusOutside()>();

        $r11 = r0.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane hyperplane>;

        $r5 = interfaceinvoke r3.<org.apache.commons.math3.geometry.partitioning.Transform: org.apache.commons.math3.geometry.partitioning.SubHyperplane apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)>($r5, $r11, r2);

        goto label3;

     label7:
        $r9 = virtualinvoke r8.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusInside()>();

        $r11 = r0.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane hyperplane>;

        $r9 = interfaceinvoke r3.<org.apache.commons.math3.geometry.partitioning.Transform: org.apache.commons.math3.geometry.partitioning.SubHyperplane apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)>($r9, $r11, r2);

        goto label4;
    }
    public org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)
    {
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane r0;
        org.apache.commons.math3.geometry.partitioning.Transform r1;
        java.util.HashMap r2;
        org.apache.commons.math3.geometry.partitioning.Hyperplane $r3;
        org.apache.commons.math3.geometry.partitioning.Region $r4;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r5, $r10;
        java.util.Set $r6;
        java.util.Iterator $r7, $r15;
        boolean $z0;
        java.lang.Object $r8;
        java.util.Map$Entry r9;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r11;
        org.apache.commons.math3.geometry.partitioning.BoundaryAttribute r12, r13;
        org.apache.commons.math3.geometry.partitioning.NodesSet $r14;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.Transform;

        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane hyperplane>;

        $r3 = interfaceinvoke r1.<org.apache.commons.math3.geometry.partitioning.Transform: org.apache.commons.math3.geometry.partitioning.Hyperplane apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)>($r3);

        r2 = new java.util.HashMap;

        specialinvoke r2.<java.util.HashMap: void <init>()>();

        $r4 = r0.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: org.apache.commons.math3.geometry.partitioning.Region remainingRegion>;

        $r5 = interfaceinvoke $r4.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(0);

        $r5 = specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: org.apache.commons.math3.geometry.partitioning.BSPTree recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform,java.util.Map)>($r5, $r3, r1, r2);

        $r6 = interfaceinvoke r2.<java.util.Map: java.util.Set entrySet()>();

        $r7 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (java.util.Map$Entry) $r8;

        $r8 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r10 = (org.apache.commons.math3.geometry.partitioning.BSPTree) $r8;

        $r11 = virtualinvoke $r10.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r11 == null goto label1;

        $r8 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r10 = (org.apache.commons.math3.geometry.partitioning.BSPTree) $r8;

        $r8 = virtualinvoke $r10.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        r12 = (org.apache.commons.math3.geometry.partitioning.BoundaryAttribute) $r8;

        if r12 == null goto label1;

        $r8 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r10 = (org.apache.commons.math3.geometry.partitioning.BSPTree) $r8;

        $r8 = virtualinvoke $r10.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        r13 = (org.apache.commons.math3.geometry.partitioning.BoundaryAttribute) $r8;

        $r14 = virtualinvoke r12.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.NodesSet getSplitters()>();

        $r15 = virtualinvoke $r14.<org.apache.commons.math3.geometry.partitioning.NodesSet: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r8 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (org.apache.commons.math3.geometry.partitioning.BSPTree) $r8;

        $r14 = virtualinvoke r13.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.NodesSet getSplitters()>();

        $r8 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r10);

        $r10 = (org.apache.commons.math3.geometry.partitioning.BSPTree) $r8;

        virtualinvoke $r14.<org.apache.commons.math3.geometry.partitioning.NodesSet: void add(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r10);

        goto label2;

     label3:
        $r4 = r0.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: org.apache.commons.math3.geometry.partitioning.Region remainingRegion>;

        $r4 = interfaceinvoke $r4.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.partitioning.Region buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r5);

        r0 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)>($r3, $r4);

        return r0;
    }
protected abstract org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.Region) { 
// no body
} 
    public org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane copySelf()
    {
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane r0;
        org.apache.commons.math3.geometry.partitioning.Region $r1;
        org.apache.commons.math3.geometry.partitioning.Hyperplane $r2;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane;

        $r2 = r0.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane hyperplane>;

        $r2 = interfaceinvoke $r2.<org.apache.commons.math3.geometry.partitioning.Hyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane copySelf()>();

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: org.apache.commons.math3.geometry.partitioning.Region remainingRegion>;

        r0 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)>($r2, $r1);

        return r0;
    }
    public volatile org.apache.commons.math3.geometry.partitioning.SubHyperplane copySelf()
    {
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane r0;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane;

        r0 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane copySelf()>();

        return r0;
    }
    public org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()
    {
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane r0;
        org.apache.commons.math3.geometry.partitioning.Hyperplane r1;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane;

        r1 = r0.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane hyperplane>;

        return r1;
    }
    public org.apache.commons.math3.geometry.partitioning.Region getRemainingRegion()
    {
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane r0;
        org.apache.commons.math3.geometry.partitioning.Region r1;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane;

        r1 = r0.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: org.apache.commons.math3.geometry.partitioning.Region remainingRegion>;

        return r1;
    }
    public double getSize()
    {
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane r0;
        double $d0;
        org.apache.commons.math3.geometry.partitioning.Region $r1;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: org.apache.commons.math3.geometry.partitioning.Region remainingRegion>;

        $d0 = interfaceinvoke $r1.<org.apache.commons.math3.geometry.partitioning.Region: double getSize()>();

        return $d0;
    }
    public boolean isEmpty()
    {
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane r0;
        boolean $z0;
        org.apache.commons.math3.geometry.partitioning.Region $r1;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: org.apache.commons.math3.geometry.partitioning.Region remainingRegion>;

        $z0 = interfaceinvoke $r1.<org.apache.commons.math3.geometry.partitioning.Region: boolean isEmpty()>();

        return $z0;
    }
    public org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)
    {
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane r0, r4;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane r1;
        org.apache.commons.math3.geometry.partitioning.Region $r2, $r3;
        org.apache.commons.math3.geometry.partitioning.Hyperplane $r5;
        org.apache.commons.math3.geometry.partitioning.RegionFactory $r6;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.SubHyperplane;

        r4 = (org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane) r1;

        $r5 = r0.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane hyperplane>;

        $r6 = new org.apache.commons.math3.geometry.partitioning.RegionFactory;

        specialinvoke $r6.<org.apache.commons.math3.geometry.partitioning.RegionFactory: void <init>()>();

        $r2 = r0.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: org.apache.commons.math3.geometry.partitioning.Region remainingRegion>;

        $r3 = r4.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: org.apache.commons.math3.geometry.partitioning.Region remainingRegion>;

        $r2 = virtualinvoke $r6.<org.apache.commons.math3.geometry.partitioning.RegionFactory: org.apache.commons.math3.geometry.partitioning.Region union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)>($r2, $r3);

        r0 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)>($r5, $r2);

        return r0;
    }
    public volatile org.apache.commons.math3.geometry.partitioning.SubHyperplane reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)
    {
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane r0;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r1;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane;

        $r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.SubHyperplane;

        r0 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)>($r1);

        return r0;
    }
    public org.apache.commons.math3.geometry.partitioning.Side side(org.apache.commons.math3.geometry.partitioning.Hyperplane)
    {
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane r0;
        org.apache.commons.math3.geometry.partitioning.Hyperplane r1;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane $r2;
        org.apache.commons.math3.geometry.partitioning.Side $r3;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.Hyperplane;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane split(org.apache.commons.math3.geometry.partitioning.Hyperplane)>(r1);

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane: org.apache.commons.math3.geometry.partitioning.Side getSide()>();

        return $r3;
    }
public abstract org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane split(org.apache.commons.math3.geometry.partitioning.Hyperplane) { 
// no body
} 
