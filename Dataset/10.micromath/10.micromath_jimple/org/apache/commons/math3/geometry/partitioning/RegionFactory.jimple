org.apache.commons.math3.geometry.partitioning.RegionFactory extends java.lang.Object
private final org.apache.commons.math3.geometry.partitioning.RegionFactory$NodesCleaner nodeCleaner
    public void <init>()
    {
        org.apache.commons.math3.geometry.partitioning.RegionFactory r0;
        org.apache.commons.math3.geometry.partitioning.RegionFactory$NodesCleaner $r1;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.RegionFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.commons.math3.geometry.partitioning.RegionFactory$NodesCleaner;

        specialinvoke $r1.<org.apache.commons.math3.geometry.partitioning.RegionFactory$NodesCleaner: void <init>(org.apache.commons.math3.geometry.partitioning.RegionFactory,org.apache.commons.math3.geometry.partitioning.RegionFactory$1)>(r0, null);

        r0.<org.apache.commons.math3.geometry.partitioning.RegionFactory: org.apache.commons.math3.geometry.partitioning.RegionFactory$NodesCleaner nodeCleaner> = $r1;

        return;
    }
    static org.apache.commons.math3.geometry.partitioning.BSPTree access$400(org.apache.commons.math3.geometry.partitioning.RegionFactory, org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.partitioning.RegionFactory $r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r1;

        $r0 := @parameter0: org.apache.commons.math3.geometry.partitioning.RegionFactory;

        $r1 := @parameter1: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r1 = specialinvoke $r0.<org.apache.commons.math3.geometry.partitioning.RegionFactory: org.apache.commons.math3.geometry.partitioning.BSPTree recurseComplement(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r1);

        return $r1;
    }
    private org.apache.commons.math3.geometry.partitioning.BSPTree recurseComplement(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.partitioning.RegionFactory r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, $r7;
        java.util.HashMap r2;
        java.util.Set $r3;
        java.util.Iterator $r4, $r12;
        boolean $z0;
        java.lang.Object $r5;
        java.util.Map$Entry r6;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r8;
        org.apache.commons.math3.geometry.partitioning.BoundaryAttribute r9, r10;
        org.apache.commons.math3.geometry.partitioning.NodesSet $r11;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.RegionFactory;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r2 = new java.util.HashMap;

        specialinvoke r2.<java.util.HashMap: void <init>()>();

        r1 = specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.RegionFactory: org.apache.commons.math3.geometry.partitioning.BSPTree recurseComplement(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Map)>(r1, r2);

        $r3 = interfaceinvoke r2.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r5;

        $r5 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = (org.apache.commons.math3.geometry.partitioning.BSPTree) $r5;

        $r8 = virtualinvoke $r7.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r8 == null goto label1;

        $r5 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = (org.apache.commons.math3.geometry.partitioning.BSPTree) $r5;

        $r5 = virtualinvoke $r7.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        r9 = (org.apache.commons.math3.geometry.partitioning.BoundaryAttribute) $r5;

        if r9 == null goto label1;

        $r5 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r7 = (org.apache.commons.math3.geometry.partitioning.BSPTree) $r5;

        $r5 = virtualinvoke $r7.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        r10 = (org.apache.commons.math3.geometry.partitioning.BoundaryAttribute) $r5;

        $r11 = virtualinvoke r9.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.NodesSet getSplitters()>();

        $r12 = virtualinvoke $r11.<org.apache.commons.math3.geometry.partitioning.NodesSet: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r5 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (org.apache.commons.math3.geometry.partitioning.BSPTree) $r5;

        $r11 = virtualinvoke r10.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.NodesSet getSplitters()>();

        $r5 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7);

        $r7 = (org.apache.commons.math3.geometry.partitioning.BSPTree) $r5;

        virtualinvoke $r11.<org.apache.commons.math3.geometry.partitioning.NodesSet: void add(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r7);

        goto label2;

     label3:
        return r1;
    }
    private org.apache.commons.math3.geometry.partitioning.BSPTree recurseComplement(org.apache.commons.math3.geometry.partitioning.BSPTree, java.util.Map)
    {
        org.apache.commons.math3.geometry.partitioning.RegionFactory r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, r4, $r10, $r11;
        java.util.Map r2;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r3, $r8;
        java.lang.Object $r5;
        java.lang.Boolean $r6;
        boolean $z0;
        org.apache.commons.math3.geometry.partitioning.BoundaryAttribute r7;
        org.apache.commons.math3.geometry.partitioning.NodesSet $r9;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.RegionFactory;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r2 := @parameter1: java.util.Map;

        $r3 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r3 != null goto label4;

        r4 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r5 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        $r6 = (java.lang.Boolean) $r5;

        $z0 = virtualinvoke $r6.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label3;

        $r6 = <java.lang.Boolean: java.lang.Boolean FALSE>;

     label1:
        specialinvoke r4.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r6);

     label2:
        interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r4);

        return r4;

     label3:
        $r6 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        goto label1;

     label4:
        $r5 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        r7 = (org.apache.commons.math3.geometry.partitioning.BoundaryAttribute) $r5;

        if r7 == null goto label7;

        $r3 = virtualinvoke r7.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusInside()>();

        if $r3 != null goto label8;

        $r3 = null;

     label5:
        $r8 = virtualinvoke r7.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusOutside()>();

        if $r8 != null goto label9;

        $r8 = null;

     label6:
        r7 = new org.apache.commons.math3.geometry.partitioning.BoundaryAttribute;

        $r9 = new org.apache.commons.math3.geometry.partitioning.NodesSet;

        specialinvoke $r9.<org.apache.commons.math3.geometry.partitioning.NodesSet: void <init>()>();

        specialinvoke r7.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.NodesSet)>($r3, $r8, $r9);

     label7:
        r4 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r3 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        $r3 = interfaceinvoke $r3.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane copySelf()>();

        $r10 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        $r10 = specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.RegionFactory: org.apache.commons.math3.geometry.partitioning.BSPTree recurseComplement(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Map)>($r10, r2);

        $r11 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        $r11 = specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.RegionFactory: org.apache.commons.math3.geometry.partitioning.BSPTree recurseComplement(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Map)>($r11, r2);

        specialinvoke r4.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)>($r3, $r10, $r11, r7);

        goto label2;

     label8:
        $r3 = virtualinvoke r7.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusInside()>();

        $r3 = interfaceinvoke $r3.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane copySelf()>();

        goto label5;

     label9:
        $r8 = virtualinvoke r7.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusOutside()>();

        $r8 = interfaceinvoke $r8.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane copySelf()>();

        goto label6;
    }
    public transient org.apache.commons.math3.geometry.partitioning.Region buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])
    {
        org.apache.commons.math3.geometry.partitioning.RegionFactory r0;
        org.apache.commons.math3.geometry.partitioning.Hyperplane[] r1;
        org.apache.commons.math3.geometry.partitioning.Hyperplane r2, $r10;
        int i0, i1, $i2;
        org.apache.commons.math3.geometry.partitioning.Region $r3;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r4, r5, $r8;
        java.lang.Boolean $r6;
        boolean $z0;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r7, $r9;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane $r11;
        int[] $r12;
        org.apache.commons.math3.geometry.partitioning.Side $r13;
        org.apache.commons.math3.exception.MathIllegalArgumentException $r14;
        org.apache.commons.math3.exception.util.LocalizedFormats $r15;
        java.lang.Object[] $r16;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.RegionFactory;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.Hyperplane[];

        if r1 == null goto label01;

        i0 = lengthof r1;

        if i0 != 0 goto label02;

     label01:
        return null;

     label02:
        r2 = r1[0];

        $r3 = interfaceinvoke r2.<org.apache.commons.math3.geometry.partitioning.Hyperplane: org.apache.commons.math3.geometry.partitioning.Region wholeSpace()>();

        $r4 = interfaceinvoke $r3.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(0);

        r5 = $r4;

        $r6 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        virtualinvoke $r4.<org.apache.commons.math3.geometry.partitioning.BSPTree: void setAttribute(java.lang.Object)>($r6);

        i0 = lengthof r1;

        i1 = 0;

     label03:
        if i1 >= i0 goto label11;

        r2 = r1[i1];

        $z0 = virtualinvoke r5.<org.apache.commons.math3.geometry.partitioning.BSPTree: boolean insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)>(r2);

        if $z0 == 0 goto label05;

        virtualinvoke r5.<org.apache.commons.math3.geometry.partitioning.BSPTree: void setAttribute(java.lang.Object)>(null);

        $r4 = virtualinvoke r5.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        $r6 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        virtualinvoke $r4.<org.apache.commons.math3.geometry.partitioning.BSPTree: void setAttribute(java.lang.Object)>($r6);

        $r4 = virtualinvoke r5.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        r5 = $r4;

        $r6 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        virtualinvoke $r4.<org.apache.commons.math3.geometry.partitioning.BSPTree: void setAttribute(java.lang.Object)>($r6);

     label04:
        i1 = i1 + 1;

        goto label03;

     label05:
        $r7 = interfaceinvoke r2.<org.apache.commons.math3.geometry.partitioning.Hyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane wholeHyperplane()>();

        $r4 = r5;

     label06:
        $r8 = virtualinvoke $r4.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getParent()>();

        if $r8 == null goto label04;

        if $r7 == null goto label04;

        $r8 = virtualinvoke $r4.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getParent()>();

        $r9 = virtualinvoke $r8.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        $r10 = interfaceinvoke $r9.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        $r11 = interfaceinvoke $r7.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane split(org.apache.commons.math3.geometry.partitioning.Hyperplane)>($r10);

        $r12 = <org.apache.commons.math3.geometry.partitioning.RegionFactory$1: int[] $SwitchMap$org$apache$commons$math3$geometry$partitioning$Side>;

        $r13 = virtualinvoke $r11.<org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane: org.apache.commons.math3.geometry.partitioning.Side getSide()>();

        $i2 = virtualinvoke $r13.<org.apache.commons.math3.geometry.partitioning.Side: int ordinal()>();

        $i2 = $r12[$i2];

        lookupswitch($i2)
        {
            case 1: goto label09;
            case 2: goto label10;
            default: goto label07;
        };

     label07:
        $r7 = virtualinvoke $r11.<org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane getMinus()>();

     label08:
        $r4 = virtualinvoke $r4.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getParent()>();

        goto label06;

     label09:
        $z0 = interfaceinvoke r2.<org.apache.commons.math3.geometry.partitioning.Hyperplane: boolean sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)>($r10);

        if $z0 != 0 goto label08;

        r2 = r1[0];

        $r3 = interfaceinvoke r2.<org.apache.commons.math3.geometry.partitioning.Hyperplane: org.apache.commons.math3.geometry.partitioning.Region wholeSpace()>();

        $r3 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.RegionFactory: org.apache.commons.math3.geometry.partitioning.Region getComplement(org.apache.commons.math3.geometry.partitioning.Region)>($r3);

        return $r3;

     label10:
        $r14 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r15 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NOT_CONVEX_HYPERPLANES>;

        $r16 = newarray (java.lang.Object)[0];

        specialinvoke $r14.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r15, $r16);

        throw $r14;

     label11:
        return $r3;
    }
    public org.apache.commons.math3.geometry.partitioning.Region difference(org.apache.commons.math3.geometry.partitioning.Region, org.apache.commons.math3.geometry.partitioning.Region)
    {
        org.apache.commons.math3.geometry.partitioning.RegionFactory r0;
        org.apache.commons.math3.geometry.partitioning.Region r1, r2;
        org.apache.commons.math3.geometry.partitioning.RegionFactory$DifferenceMerger $r3;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r4, $r5;
        org.apache.commons.math3.geometry.partitioning.RegionFactory$NodesCleaner $r6;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.RegionFactory;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.Region;

        r2 := @parameter1: org.apache.commons.math3.geometry.partitioning.Region;

        $r4 = interfaceinvoke r1.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(0);

        $r5 = interfaceinvoke r2.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(0);

        $r3 = new org.apache.commons.math3.geometry.partitioning.RegionFactory$DifferenceMerger;

        specialinvoke $r3.<org.apache.commons.math3.geometry.partitioning.RegionFactory$DifferenceMerger: void <init>(org.apache.commons.math3.geometry.partitioning.RegionFactory,org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)>(r0, r1, r2);

        $r4 = virtualinvoke $r4.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)>($r5, $r3);

        $r6 = r0.<org.apache.commons.math3.geometry.partitioning.RegionFactory: org.apache.commons.math3.geometry.partitioning.RegionFactory$NodesCleaner nodeCleaner>;

        virtualinvoke $r4.<org.apache.commons.math3.geometry.partitioning.BSPTree: void visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)>($r6);

        r1 = interfaceinvoke r1.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.partitioning.Region buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r4);

        return r1;
    }
    public org.apache.commons.math3.geometry.partitioning.Region getComplement(org.apache.commons.math3.geometry.partitioning.Region)
    {
        org.apache.commons.math3.geometry.partitioning.RegionFactory r0;
        org.apache.commons.math3.geometry.partitioning.Region r1;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r2;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.RegionFactory;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.Region;

        $r2 = interfaceinvoke r1.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(0);

        $r2 = specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.RegionFactory: org.apache.commons.math3.geometry.partitioning.BSPTree recurseComplement(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r2);

        r1 = interfaceinvoke r1.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.partitioning.Region buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r2);

        return r1;
    }
    public org.apache.commons.math3.geometry.partitioning.Region intersection(org.apache.commons.math3.geometry.partitioning.Region, org.apache.commons.math3.geometry.partitioning.Region)
    {
        org.apache.commons.math3.geometry.partitioning.RegionFactory r0;
        org.apache.commons.math3.geometry.partitioning.Region r1, r2;
        org.apache.commons.math3.geometry.partitioning.RegionFactory$IntersectionMerger $r3;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r4, $r5;
        org.apache.commons.math3.geometry.partitioning.RegionFactory$NodesCleaner $r6;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.RegionFactory;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.Region;

        r2 := @parameter1: org.apache.commons.math3.geometry.partitioning.Region;

        $r4 = interfaceinvoke r1.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(0);

        $r5 = interfaceinvoke r2.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(0);

        $r3 = new org.apache.commons.math3.geometry.partitioning.RegionFactory$IntersectionMerger;

        specialinvoke $r3.<org.apache.commons.math3.geometry.partitioning.RegionFactory$IntersectionMerger: void <init>(org.apache.commons.math3.geometry.partitioning.RegionFactory,org.apache.commons.math3.geometry.partitioning.RegionFactory$1)>(r0, null);

        $r4 = virtualinvoke $r4.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)>($r5, $r3);

        $r6 = r0.<org.apache.commons.math3.geometry.partitioning.RegionFactory: org.apache.commons.math3.geometry.partitioning.RegionFactory$NodesCleaner nodeCleaner>;

        virtualinvoke $r4.<org.apache.commons.math3.geometry.partitioning.BSPTree: void visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)>($r6);

        r1 = interfaceinvoke r1.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.partitioning.Region buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r4);

        return r1;
    }
    public org.apache.commons.math3.geometry.partitioning.Region union(org.apache.commons.math3.geometry.partitioning.Region, org.apache.commons.math3.geometry.partitioning.Region)
    {
        org.apache.commons.math3.geometry.partitioning.RegionFactory r0;
        org.apache.commons.math3.geometry.partitioning.Region r1, r2;
        org.apache.commons.math3.geometry.partitioning.RegionFactory$UnionMerger $r3;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r4, $r5;
        org.apache.commons.math3.geometry.partitioning.RegionFactory$NodesCleaner $r6;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.RegionFactory;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.Region;

        r2 := @parameter1: org.apache.commons.math3.geometry.partitioning.Region;

        $r4 = interfaceinvoke r1.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(0);

        $r5 = interfaceinvoke r2.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(0);

        $r3 = new org.apache.commons.math3.geometry.partitioning.RegionFactory$UnionMerger;

        specialinvoke $r3.<org.apache.commons.math3.geometry.partitioning.RegionFactory$UnionMerger: void <init>(org.apache.commons.math3.geometry.partitioning.RegionFactory,org.apache.commons.math3.geometry.partitioning.RegionFactory$1)>(r0, null);

        $r4 = virtualinvoke $r4.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)>($r5, $r3);

        $r6 = r0.<org.apache.commons.math3.geometry.partitioning.RegionFactory: org.apache.commons.math3.geometry.partitioning.RegionFactory$NodesCleaner nodeCleaner>;

        virtualinvoke $r4.<org.apache.commons.math3.geometry.partitioning.BSPTree: void visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)>($r6);

        r1 = interfaceinvoke r1.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.partitioning.Region buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r4);

        return r1;
    }
    public org.apache.commons.math3.geometry.partitioning.Region xor(org.apache.commons.math3.geometry.partitioning.Region, org.apache.commons.math3.geometry.partitioning.Region)
    {
        org.apache.commons.math3.geometry.partitioning.RegionFactory r0;
        org.apache.commons.math3.geometry.partitioning.Region r1, r2;
        org.apache.commons.math3.geometry.partitioning.RegionFactory$XorMerger $r3;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r4, $r5;
        org.apache.commons.math3.geometry.partitioning.RegionFactory$NodesCleaner $r6;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.RegionFactory;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.Region;

        r2 := @parameter1: org.apache.commons.math3.geometry.partitioning.Region;

        $r4 = interfaceinvoke r1.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(0);

        $r5 = interfaceinvoke r2.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(0);

        $r3 = new org.apache.commons.math3.geometry.partitioning.RegionFactory$XorMerger;

        specialinvoke $r3.<org.apache.commons.math3.geometry.partitioning.RegionFactory$XorMerger: void <init>(org.apache.commons.math3.geometry.partitioning.RegionFactory,org.apache.commons.math3.geometry.partitioning.RegionFactory$1)>(r0, null);

        $r4 = virtualinvoke $r4.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)>($r5, $r3);

        $r6 = r0.<org.apache.commons.math3.geometry.partitioning.RegionFactory: org.apache.commons.math3.geometry.partitioning.RegionFactory$NodesCleaner nodeCleaner>;

        virtualinvoke $r4.<org.apache.commons.math3.geometry.partitioning.BSPTree: void visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)>($r6);

        r1 = interfaceinvoke r1.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.partitioning.Region buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r4);

        return r1;
    }
