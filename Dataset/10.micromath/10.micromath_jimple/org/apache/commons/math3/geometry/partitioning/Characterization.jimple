org.apache.commons.math3.geometry.partitioning.Characterization extends java.lang.Object
private final org.apache.commons.math3.geometry.partitioning.NodesSet insideSplitters
private org.apache.commons.math3.geometry.partitioning.SubHyperplane insideTouching
private final org.apache.commons.math3.geometry.partitioning.NodesSet outsideSplitters
private org.apache.commons.math3.geometry.partitioning.SubHyperplane outsideTouching
    void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree, org.apache.commons.math3.geometry.partitioning.SubHyperplane)
    {
        org.apache.commons.math3.geometry.partitioning.Characterization r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane r2;
        org.apache.commons.math3.geometry.partitioning.NodesSet $r3;
        java.util.ArrayList $r4;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.Characterization;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r2 := @parameter1: org.apache.commons.math3.geometry.partitioning.SubHyperplane;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.geometry.partitioning.Characterization: org.apache.commons.math3.geometry.partitioning.SubHyperplane outsideTouching> = null;

        r0.<org.apache.commons.math3.geometry.partitioning.Characterization: org.apache.commons.math3.geometry.partitioning.SubHyperplane insideTouching> = null;

        $r3 = new org.apache.commons.math3.geometry.partitioning.NodesSet;

        specialinvoke $r3.<org.apache.commons.math3.geometry.partitioning.NodesSet: void <init>()>();

        r0.<org.apache.commons.math3.geometry.partitioning.Characterization: org.apache.commons.math3.geometry.partitioning.NodesSet outsideSplitters> = $r3;

        $r3 = new org.apache.commons.math3.geometry.partitioning.NodesSet;

        specialinvoke $r3.<org.apache.commons.math3.geometry.partitioning.NodesSet: void <init>()>();

        r0.<org.apache.commons.math3.geometry.partitioning.Characterization: org.apache.commons.math3.geometry.partitioning.NodesSet insideSplitters> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.Characterization: void characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,java.util.List)>(r1, r2, $r4);

        return;
    }
    private void addInsideTouching(org.apache.commons.math3.geometry.partitioning.SubHyperplane, java.util.List)
    {
        org.apache.commons.math3.geometry.partitioning.Characterization r0;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane r1, $r3;
        java.util.List r2;
        org.apache.commons.math3.geometry.partitioning.NodesSet $r4;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.Characterization;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.SubHyperplane;

        r2 := @parameter1: java.util.List;

        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.Characterization: org.apache.commons.math3.geometry.partitioning.SubHyperplane insideTouching>;

        if $r3 != null goto label2;

        r0.<org.apache.commons.math3.geometry.partitioning.Characterization: org.apache.commons.math3.geometry.partitioning.SubHyperplane insideTouching> = r1;

     label1:
        $r4 = r0.<org.apache.commons.math3.geometry.partitioning.Characterization: org.apache.commons.math3.geometry.partitioning.NodesSet insideSplitters>;

        virtualinvoke $r4.<org.apache.commons.math3.geometry.partitioning.NodesSet: void addAll(java.lang.Iterable)>(r2);

        return;

     label2:
        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.Characterization: org.apache.commons.math3.geometry.partitioning.SubHyperplane insideTouching>;

        r1 = interfaceinvoke $r3.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)>(r1);

        r0.<org.apache.commons.math3.geometry.partitioning.Characterization: org.apache.commons.math3.geometry.partitioning.SubHyperplane insideTouching> = r1;

        goto label1;
    }
    private void addOutsideTouching(org.apache.commons.math3.geometry.partitioning.SubHyperplane, java.util.List)
    {
        org.apache.commons.math3.geometry.partitioning.Characterization r0;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane r1, $r3;
        java.util.List r2;
        org.apache.commons.math3.geometry.partitioning.NodesSet $r4;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.Characterization;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.SubHyperplane;

        r2 := @parameter1: java.util.List;

        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.Characterization: org.apache.commons.math3.geometry.partitioning.SubHyperplane outsideTouching>;

        if $r3 != null goto label2;

        r0.<org.apache.commons.math3.geometry.partitioning.Characterization: org.apache.commons.math3.geometry.partitioning.SubHyperplane outsideTouching> = r1;

     label1:
        $r4 = r0.<org.apache.commons.math3.geometry.partitioning.Characterization: org.apache.commons.math3.geometry.partitioning.NodesSet outsideSplitters>;

        virtualinvoke $r4.<org.apache.commons.math3.geometry.partitioning.NodesSet: void addAll(java.lang.Iterable)>(r2);

        return;

     label2:
        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.Characterization: org.apache.commons.math3.geometry.partitioning.SubHyperplane outsideTouching>;

        r1 = interfaceinvoke $r3.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)>(r1);

        r0.<org.apache.commons.math3.geometry.partitioning.Characterization: org.apache.commons.math3.geometry.partitioning.SubHyperplane outsideTouching> = r1;

        goto label1;
    }
    private void characterize(org.apache.commons.math3.geometry.partitioning.BSPTree, org.apache.commons.math3.geometry.partitioning.SubHyperplane, java.util.List)
    {
        org.apache.commons.math3.geometry.partitioning.Characterization r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, $r12;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane r2, $r4;
        java.util.List r3;
        java.lang.Object $r5;
        java.lang.Boolean $r6;
        boolean $z0;
        org.apache.commons.math3.geometry.partitioning.Hyperplane $r7;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane $r8;
        int[] $r9;
        org.apache.commons.math3.geometry.partitioning.Side $r10;
        int $i0;
        org.apache.commons.math3.exception.MathInternalError $r11;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.Characterization;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r2 := @parameter1: org.apache.commons.math3.geometry.partitioning.SubHyperplane;

        r3 := @parameter2: java.util.List;

        $r4 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r4 != null goto label2;

        $r5 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        $r6 = (java.lang.Boolean) $r5;

        $z0 = virtualinvoke $r6.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.Characterization: void addInsideTouching(org.apache.commons.math3.geometry.partitioning.SubHyperplane,java.util.List)>(r2, r3);

        return;

     label1:
        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.Characterization: void addOutsideTouching(org.apache.commons.math3.geometry.partitioning.SubHyperplane,java.util.List)>(r2, r3);

        return;

     label2:
        $r4 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        $r7 = interfaceinvoke $r4.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        $r8 = interfaceinvoke r2.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane split(org.apache.commons.math3.geometry.partitioning.Hyperplane)>($r7);

        $r9 = <org.apache.commons.math3.geometry.partitioning.Characterization$1: int[] $SwitchMap$org$apache$commons$math3$geometry$partitioning$Side>;

        $r10 = virtualinvoke $r8.<org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane: org.apache.commons.math3.geometry.partitioning.Side getSide()>();

        $i0 = virtualinvoke $r10.<org.apache.commons.math3.geometry.partitioning.Side: int ordinal()>();

        $i0 = $r9[$i0];

        lookupswitch($i0)
        {
            case 1: goto label4;
            case 2: goto label5;
            case 3: goto label6;
            default: goto label3;
        };

     label3:
        $r11 = new org.apache.commons.math3.exception.MathInternalError;

        specialinvoke $r11.<org.apache.commons.math3.exception.MathInternalError: void <init>()>();

        throw $r11;

     label4:
        r1 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.Characterization: void characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,java.util.List)>(r1, r2, r3);

        return;

     label5:
        r1 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.Characterization: void characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,java.util.List)>(r1, r2, r3);

        return;

     label6:
        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r1);

        $r12 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        r2 = virtualinvoke $r8.<org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlus()>();

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.Characterization: void characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,java.util.List)>($r12, r2, r3);

        r1 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        r2 = virtualinvoke $r8.<org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane getMinus()>();

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.Characterization: void characterize(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane,java.util.List)>(r1, r2, r3);

        $i0 = interfaceinvoke r3.<java.util.List: int size()>();

        $i0 = $i0 + -1;

        interfaceinvoke r3.<java.util.List: java.lang.Object remove(int)>($i0);

        return;
    }
    public org.apache.commons.math3.geometry.partitioning.NodesSet getInsideSplitters()
    {
        org.apache.commons.math3.geometry.partitioning.Characterization r0;
        org.apache.commons.math3.geometry.partitioning.NodesSet r1;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.Characterization;

        r1 = r0.<org.apache.commons.math3.geometry.partitioning.Characterization: org.apache.commons.math3.geometry.partitioning.NodesSet insideSplitters>;

        return r1;
    }
    public org.apache.commons.math3.geometry.partitioning.NodesSet getOutsideSplitters()
    {
        org.apache.commons.math3.geometry.partitioning.Characterization r0;
        org.apache.commons.math3.geometry.partitioning.NodesSet r1;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.Characterization;

        r1 = r0.<org.apache.commons.math3.geometry.partitioning.Characterization: org.apache.commons.math3.geometry.partitioning.NodesSet outsideSplitters>;

        return r1;
    }
    public org.apache.commons.math3.geometry.partitioning.SubHyperplane insideTouching()
    {
        org.apache.commons.math3.geometry.partitioning.Characterization r0;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane r1;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.Characterization;

        r1 = r0.<org.apache.commons.math3.geometry.partitioning.Characterization: org.apache.commons.math3.geometry.partitioning.SubHyperplane insideTouching>;

        return r1;
    }
    public org.apache.commons.math3.geometry.partitioning.SubHyperplane outsideTouching()
    {
        org.apache.commons.math3.geometry.partitioning.Characterization r0;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane r1;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.Characterization;

        r1 = r0.<org.apache.commons.math3.geometry.partitioning.Characterization: org.apache.commons.math3.geometry.partitioning.SubHyperplane outsideTouching>;

        return r1;
    }
    public boolean touchInside()
    {
        org.apache.commons.math3.geometry.partitioning.Characterization r0;
        boolean $z0;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r1;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.Characterization;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.Characterization: org.apache.commons.math3.geometry.partitioning.SubHyperplane insideTouching>;

        if $r1 == null goto label1;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.Characterization: org.apache.commons.math3.geometry.partitioning.SubHyperplane insideTouching>;

        $z0 = interfaceinvoke $r1.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean touchOutside()
    {
        org.apache.commons.math3.geometry.partitioning.Characterization r0;
        boolean $z0;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r1;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.Characterization;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.Characterization: org.apache.commons.math3.geometry.partitioning.SubHyperplane outsideTouching>;

        if $r1 == null goto label1;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.Characterization: org.apache.commons.math3.geometry.partitioning.SubHyperplane outsideTouching>;

        $z0 = interfaceinvoke $r1.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }
