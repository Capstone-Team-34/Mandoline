org.apache.commons.math3.geometry.euclidean.threed.Rotation extends java.lang.Object implements java.io.Serializable
public static final org.apache.commons.math3.geometry.euclidean.threed.Rotation IDENTITY
private static final long serialVersionUID
private final double q0
private final double q1
private final double q2
private final double q3
    static void <clinit>()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Rotation $r0;

        $r0 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        specialinvoke $r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: void <init>(double,double,double,double,boolean)>(1.0, 0.0, 0.0, 0.0, 0);

        <org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Rotation IDENTITY> = $r0;

        return;
    }
    public void <init>(double, double, double, double, boolean)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Rotation r0;
        boolean $z0;
        double d0, $d1, $d2, $d3, $d4, $d5;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        $d1 := @parameter0: double;

        $d2 := @parameter1: double;

        $d3 := @parameter2: double;

        $d4 := @parameter3: double;

        $z0 := @parameter4: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if $z0 == 0 goto label1;

        d0 = $d1 * $d1;

        $d5 = $d2 * $d2;

        d0 = d0 + $d5;

        $d5 = $d3 * $d3;

        d0 = d0 + $d5;

        $d5 = $d4 * $d4;

        d0 = d0 + $d5;

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d0);

        d0 = 1.0 / d0;

        $d1 = $d1 * d0;

        $d2 = $d2 * d0;

        $d3 = $d3 * d0;

        $d4 = $d4 * d0;

     label1:
        r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0> = $d1;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1> = $d2;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2> = $d3;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3> = $d4;

        return;
    }
    public void <init>(org.apache.commons.math3.geometry.euclidean.threed.RotationOrder, double, double, double)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Rotation r0;
        org.apache.commons.math3.geometry.euclidean.threed.RotationOrder $r1;
        double $d0, $d1, $d2;
        org.apache.commons.math3.geometry.euclidean.threed.RotationConvention $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.RotationOrder;

        $d0 := @parameter1: double;

        $d1 := @parameter2: double;

        $d2 := @parameter3: double;

        $r2 = <org.apache.commons.math3.geometry.euclidean.threed.RotationConvention: org.apache.commons.math3.geometry.euclidean.threed.RotationConvention VECTOR_OPERATOR>;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: void <init>(org.apache.commons.math3.geometry.euclidean.threed.RotationOrder,org.apache.commons.math3.geometry.euclidean.threed.RotationConvention,double,double,double)>($r1, $r2, $d0, $d1, $d2);

        return;
    }
    public void <init>(org.apache.commons.math3.geometry.euclidean.threed.RotationOrder, org.apache.commons.math3.geometry.euclidean.threed.RotationConvention, double, double, double)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Rotation r0, r3, r4, r5;
        org.apache.commons.math3.geometry.euclidean.threed.RotationOrder $r1;
        org.apache.commons.math3.geometry.euclidean.threed.RotationConvention $r2;
        double $d0, $d1, $d2;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r6;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.RotationOrder;

        $r2 := @parameter1: org.apache.commons.math3.geometry.euclidean.threed.RotationConvention;

        $d0 := @parameter2: double;

        $d1 := @parameter3: double;

        $d2 := @parameter4: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r3 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        $r6 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.RotationOrder: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getA1()>();

        specialinvoke r3.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.RotationConvention)>($r6, $d0, $r2);

        r4 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        $r6 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.RotationOrder: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getA2()>();

        specialinvoke r4.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.RotationConvention)>($r6, $d1, $r2);

        r5 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        $r6 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.RotationOrder: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getA3()>();

        specialinvoke r5.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.RotationConvention)>($r6, $d2, $r2);

        r4 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Rotation compose(org.apache.commons.math3.geometry.euclidean.threed.Rotation,org.apache.commons.math3.geometry.euclidean.threed.RotationConvention)>(r5, $r2);

        r3 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Rotation compose(org.apache.commons.math3.geometry.euclidean.threed.Rotation,org.apache.commons.math3.geometry.euclidean.threed.RotationConvention)>(r4, $r2);

        $d0 = r3.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0> = $d0;

        $d0 = r3.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1> = $d0;

        $d0 = r3.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2> = $d0;

        $d0 = r3.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3> = $d0;

        return;
    }
    public void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.geometry.euclidean.threed.Rotation r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r1;
        double $d0;
        org.apache.commons.math3.geometry.euclidean.threed.RotationConvention $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d0 := @parameter1: double;

        $r2 = <org.apache.commons.math3.geometry.euclidean.threed.RotationConvention: org.apache.commons.math3.geometry.euclidean.threed.RotationConvention VECTOR_OPERATOR>;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.RotationConvention)>($r1, $d0, $r2);

        return;
    }
    public void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double, org.apache.commons.math3.geometry.euclidean.threed.RotationConvention) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.geometry.euclidean.threed.Rotation r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r1;
        double $d0, $d1, d2;
        org.apache.commons.math3.geometry.euclidean.threed.RotationConvention $r2, $r6;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3;
        byte $b0;
        org.apache.commons.math3.exception.MathIllegalArgumentException $r4;
        java.lang.Object[] $r5;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d0 := @parameter1: double;

        $r2 := @parameter2: org.apache.commons.math3.geometry.euclidean.threed.RotationConvention;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $d1 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getNorm()>();

        $b0 = $d1 cmpl 0.0;

        if $b0 != 0 goto label1;

        $r4 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats ZERO_NORM_FOR_ROTATION_AXIS>;

        $r5 = newarray (java.lang.Object)[0];

        specialinvoke $r4.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r3, $r5);

        throw $r4;

     label1:
        $r6 = <org.apache.commons.math3.geometry.euclidean.threed.RotationConvention: org.apache.commons.math3.geometry.euclidean.threed.RotationConvention VECTOR_OPERATOR>;

        if $r2 != $r6 goto label3;

        d2 = -0.5 * $d0;

     label2:
        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sin(double)>(d2);

        $d0 = $d0 / $d1;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double cos(double)>(d2);

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0> = $d1;

        $d1 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d1 = $d1 * $d0;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1> = $d1;

        $d1 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d1 = $d1 * $d0;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2> = $d1;

        $d1 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d0 = $d1 * $d0;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3> = $d0;

        return;

     label3:
        d2 = 0.5 * $d0;

        goto label2;
    }
    public void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.geometry.euclidean.threed.Rotation r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r1, $r2;
        double d0, $d1, $d2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3;
        byte $b0;
        org.apache.commons.math3.exception.MathArithmeticException $r4;
        java.lang.Object[] $r5;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $r2 := @parameter1: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        d0 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getNorm()>();

        $d1 = virtualinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getNorm()>();

        d0 = d0 * $d1;

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        $r4 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR>;

        $r5 = newarray (java.lang.Object)[0];

        specialinvoke $r4.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r3, $r5);

        throw $r4;

     label1:
        $d1 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double dotProduct(org.apache.commons.math3.geometry.Vector)>($r2);

        $d2 = -0.999999999999998 * d0;

        $b0 = $d1 cmpg $d2;

        if $b0 >= 0 goto label2;

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D orthogonal()>();

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0> = 0.0;

        d0 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        d0 = neg d0;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1> = d0;

        d0 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        d0 = neg d0;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2> = d0;

        d0 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        d0 = neg d0;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3> = d0;

        return;

     label2:
        $d1 = $d1 / d0;

        $d1 = 1.0 + $d1;

        $d1 = 0.5 * $d1;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d1);

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0> = $d1;

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $d1 = 2.0 * $d1;

        d0 = $d1 * d0;

        d0 = 1.0 / d0;

        $r1 = virtualinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D crossProduct(org.apache.commons.math3.geometry.Vector)>($r1);

        $d1 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d1 = $d1 * d0;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1> = $d1;

        $d1 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d1 = $d1 * d0;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2> = $d1;

        $d1 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        d0 = $d1 * d0;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3> = d0;

        return;
    }
    public void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.geometry.euclidean.threed.Rotation r0;
        double[][] r1;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r2, $r3, $r4, $r5, $r6, $r7;
        double[] $r8;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        $r2 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $r3 := @parameter1: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $r4 := @parameter2: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $r5 := @parameter3: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D crossProduct(org.apache.commons.math3.geometry.Vector)>($r3);

        $r3 = virtualinvoke $r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D normalize()>();

        $r6 = virtualinvoke $r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D crossProduct(org.apache.commons.math3.geometry.Vector)>($r2);

        $r6 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D normalize()>();

        $r2 = virtualinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D normalize()>();

        $r5 = virtualinvoke $r4.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D crossProduct(org.apache.commons.math3.geometry.Vector)>($r5);

        $r5 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D normalize()>();

        $r7 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D crossProduct(org.apache.commons.math3.geometry.Vector)>($r4);

        $r7 = virtualinvoke $r7.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D normalize()>();

        $r4 = virtualinvoke $r4.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D normalize()>();

        r1 = newarray (double[])[3];

        $r8 = newarray (double)[3];

        $d0 = virtualinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d1 = virtualinvoke $r4.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d2 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d3 = virtualinvoke $r7.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d4 = virtualinvoke $r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d5 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double,double,double)>($d0, $d1, $d2, $d3, $d4, $d5);

        $r8[0] = $d0;

        $d0 = virtualinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d1 = virtualinvoke $r4.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d2 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d3 = virtualinvoke $r7.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d4 = virtualinvoke $r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d5 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double,double,double)>($d0, $d1, $d2, $d3, $d4, $d5);

        $r8[1] = $d0;

        $d0 = virtualinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d1 = virtualinvoke $r4.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d2 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d3 = virtualinvoke $r7.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d4 = virtualinvoke $r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d5 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double,double,double)>($d0, $d1, $d2, $d3, $d4, $d5);

        $r8[2] = $d0;

        r1[0] = $r8;

        $r8 = newarray (double)[3];

        $d0 = virtualinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d1 = virtualinvoke $r4.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d2 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d3 = virtualinvoke $r7.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d4 = virtualinvoke $r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d5 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double,double,double)>($d0, $d1, $d2, $d3, $d4, $d5);

        $r8[0] = $d0;

        $d0 = virtualinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d1 = virtualinvoke $r4.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d2 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d3 = virtualinvoke $r7.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d4 = virtualinvoke $r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d5 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double,double,double)>($d0, $d1, $d2, $d3, $d4, $d5);

        $r8[1] = $d0;

        $d0 = virtualinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d1 = virtualinvoke $r4.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d2 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d3 = virtualinvoke $r7.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d4 = virtualinvoke $r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d5 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double,double,double)>($d0, $d1, $d2, $d3, $d4, $d5);

        $r8[2] = $d0;

        r1[1] = $r8;

        $r8 = newarray (double)[3];

        $d0 = virtualinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d1 = virtualinvoke $r4.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d2 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d3 = virtualinvoke $r7.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d4 = virtualinvoke $r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d5 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double,double,double)>($d0, $d1, $d2, $d3, $d4, $d5);

        $r8[0] = $d0;

        $d0 = virtualinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d1 = virtualinvoke $r4.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d2 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d3 = virtualinvoke $r7.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d4 = virtualinvoke $r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d5 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double,double,double)>($d0, $d1, $d2, $d3, $d4, $d5);

        $r8[1] = $d0;

        $d0 = virtualinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d1 = virtualinvoke $r4.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d2 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d3 = virtualinvoke $r7.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d4 = virtualinvoke $r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d5 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double,double,double)>($d0, $d1, $d2, $d3, $d4, $d5);

        $r8[2] = $d0;

        r1[2] = $r8;

        $r8 = staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.Rotation: double[] mat2quat(double[][])>(r1);

        $d0 = $r8[0];

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0> = $d0;

        $d0 = $r8[1];

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1> = $d0;

        $d0 = $r8[2];

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2> = $d0;

        $d0 = $r8[3];

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3> = $d0;

        return;
    }
    public void <init>(double[][], double) throws org.apache.commons.math3.geometry.euclidean.threed.NotARotationMatrixException
    {
        org.apache.commons.math3.geometry.euclidean.threed.Rotation r0;
        double[][] $r1;
        double $d0, $d1, $d2, $d3, $d4;
        int $i0;
        double[] $r2;
        org.apache.commons.math3.geometry.euclidean.threed.NotARotationMatrixException $r3;
        org.apache.commons.math3.exception.util.LocalizedFormats $r4;
        java.lang.Object[] $r5;
        java.lang.Integer $r6;
        byte $b1;
        java.lang.Double $r7;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        $r1 := @parameter0: double[][];

        $d0 := @parameter1: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = lengthof $r1;

        if $i0 != 3 goto label1;

        $r2 = $r1[0];

        $i0 = lengthof $r2;

        if $i0 != 3 goto label1;

        $r2 = $r1[1];

        $i0 = lengthof $r2;

        if $i0 != 3 goto label1;

        $r2 = $r1[2];

        $i0 = lengthof $r2;

        if $i0 == 3 goto label2;

     label1:
        $r3 = new org.apache.commons.math3.geometry.euclidean.threed.NotARotationMatrixException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats ROTATION_MATRIX_DIMENSIONS>;

        $r5 = newarray (java.lang.Object)[2];

        $i0 = lengthof $r1;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r5[0] = $r6;

        $r2 = $r1[0];

        $i0 = lengthof $r2;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r5[1] = $r6;

        specialinvoke $r3.<org.apache.commons.math3.geometry.euclidean.threed.NotARotationMatrixException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r4, $r5);

        throw $r3;

     label2:
        $r1 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double[][] orthogonalizeMatrix(double[][],double)>($r1, $d0);

        $r2 = $r1[0];

        $d0 = $r2[0];

        $r2 = $r1[1];

        $d1 = $r2[1];

        $r2 = $r1[2];

        $d2 = $r2[2];

        $d1 = $d1 * $d2;

        $r2 = $r1[2];

        $d2 = $r2[1];

        $r2 = $r1[1];

        $d3 = $r2[2];

        $d2 = $d2 * $d3;

        $d1 = $d1 - $d2;

        $d0 = $d0 * $d1;

        $r2 = $r1[1];

        $d1 = $r2[0];

        $r2 = $r1[0];

        $d2 = $r2[1];

        $r2 = $r1[2];

        $d3 = $r2[2];

        $d2 = $d2 * $d3;

        $r2 = $r1[2];

        $d3 = $r2[1];

        $r2 = $r1[0];

        $d4 = $r2[2];

        $d3 = $d3 * $d4;

        $d2 = $d2 - $d3;

        $d1 = $d1 * $d2;

        $d0 = $d0 - $d1;

        $r2 = $r1[2];

        $d1 = $r2[0];

        $r2 = $r1[0];

        $d2 = $r2[1];

        $r2 = $r1[1];

        $d3 = $r2[2];

        $d2 = $d2 * $d3;

        $r2 = $r1[1];

        $d3 = $r2[1];

        $r2 = $r1[0];

        $d4 = $r2[2];

        $d3 = $d3 * $d4;

        $d2 = $d2 - $d3;

        $d1 = $d1 * $d2;

        $d0 = $d0 + $d1;

        $b1 = $d0 cmpg 0.0;

        if $b1 >= 0 goto label3;

        $r3 = new org.apache.commons.math3.geometry.euclidean.threed.NotARotationMatrixException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT>;

        $r5 = newarray (java.lang.Object)[1];

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r5[0] = $r7;

        specialinvoke $r3.<org.apache.commons.math3.geometry.euclidean.threed.NotARotationMatrixException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r4, $r5);

        throw $r3;

     label3:
        $r2 = staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.Rotation: double[] mat2quat(double[][])>($r1);

        $d0 = $r2[0];

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0> = $d0;

        $d0 = $r2[1];

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1> = $d0;

        $d0 = $r2[2];

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2> = $d0;

        $d0 = $r2[3];

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3> = $d0;

        return;
    }
    private org.apache.commons.math3.geometry.euclidean.threed.Rotation composeInternal(org.apache.commons.math3.geometry.euclidean.threed.Rotation)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Rotation r0, $r1, $r2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        $r2 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        $d0 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $d0 = $d0 * $d1;

        $d1 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d1 = $d1 * $d2;

        $d2 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d3 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d2 = $d2 * $d3;

        $d1 = $d1 + $d2;

        $d2 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d3 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d2 = $d2 * $d3;

        $d1 = $d1 + $d2;

        $d0 = $d0 - $d1;

        $d1 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $d1 = $d1 * $d2;

        $d2 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $d3 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d2 = $d2 * $d3;

        $d1 = $d1 + $d2;

        $d2 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d3 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d2 = $d2 * $d3;

        $d3 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d4 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d3 = $d3 * $d4;

        $d2 = $d2 - $d3;

        $d1 = $d1 + $d2;

        $d2 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d3 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $d2 = $d2 * $d3;

        $d3 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $d4 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d3 = $d3 * $d4;

        $d2 = $d2 + $d3;

        $d3 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d4 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d3 = $d3 * $d4;

        $d4 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d5 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d4 = $d4 * $d5;

        $d3 = $d3 - $d4;

        $d2 = $d2 + $d3;

        $d3 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d4 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $d3 = $d3 * $d4;

        $d4 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $d5 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d4 = $d4 * $d5;

        $d3 = $d3 + $d4;

        $d4 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d5 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d4 = $d4 * $d5;

        $d5 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d6 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d5 = $d5 * $d6;

        $d4 = $d4 - $d5;

        $d3 = $d3 + $d4;

        specialinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: void <init>(double,double,double,double,boolean)>($d0, $d1, $d2, $d3, 0);

        return $r2;
    }
    private org.apache.commons.math3.geometry.euclidean.threed.Rotation composeInverseInternal(org.apache.commons.math3.geometry.euclidean.threed.Rotation)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Rotation r0, $r1, $r2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        $r2 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        $d0 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $d0 = neg $d0;

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $d0 = $d0 * $d1;

        $d1 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d1 = $d1 * $d2;

        $d2 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d3 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d2 = $d2 * $d3;

        $d1 = $d1 + $d2;

        $d2 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d3 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d2 = $d2 * $d3;

        $d1 = $d1 + $d2;

        $d0 = $d0 - $d1;

        $d1 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d1 = neg $d1;

        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $d1 = $d1 * $d2;

        $d2 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $d3 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d2 = $d2 * $d3;

        $d1 = $d1 + $d2;

        $d2 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d3 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d2 = $d2 * $d3;

        $d3 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d4 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d3 = $d3 * $d4;

        $d2 = $d2 - $d3;

        $d1 = $d1 + $d2;

        $d2 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d2 = neg $d2;

        $d3 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $d2 = $d2 * $d3;

        $d3 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $d4 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d3 = $d3 * $d4;

        $d2 = $d2 + $d3;

        $d3 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d4 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d3 = $d3 * $d4;

        $d4 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d5 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d4 = $d4 * $d5;

        $d3 = $d3 - $d4;

        $d2 = $d2 + $d3;

        $d3 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d3 = neg $d3;

        $d4 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $d3 = $d3 * $d4;

        $d4 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $d5 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d4 = $d4 * $d5;

        $d3 = $d3 + $d4;

        $d4 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d5 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d4 = $d4 * $d5;

        $d5 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d6 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d5 = $d5 * $d6;

        $d4 = $d4 - $d5;

        $d3 = $d3 + $d4;

        specialinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: void <init>(double,double,double,double,boolean)>($d0, $d1, $d2, $d3, 0);

        return $r2;
    }
    public static double distance(org.apache.commons.math3.geometry.euclidean.threed.Rotation, org.apache.commons.math3.geometry.euclidean.threed.Rotation)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Rotation $r0, $r1;
        double $d0;

        $r0 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        $r1 := @parameter1: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        $r0 = specialinvoke $r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Rotation composeInverseInternal(org.apache.commons.math3.geometry.euclidean.threed.Rotation)>($r1);

        $d0 = virtualinvoke $r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double getAngle()>();

        return $d0;
    }
    private static double[] mat2quat(double[][])
    {
        double[][] $r0;
        double[] r1, $r2;
        double $d0, $d1, $d2;
        byte $b0;

        $r0 := @parameter0: double[][];

        r1 = newarray (double)[4];

        $r2 = $r0[0];

        $d0 = $r2[0];

        $r2 = $r0[1];

        $d1 = $r2[1];

        $d0 = $d0 + $d1;

        $r2 = $r0[2];

        $d1 = $r2[2];

        $d0 = $d0 + $d1;

        $b0 = $d0 cmpl -0.19;

        if $b0 <= 0 goto label1;

        $d0 = 1.0 + $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d0);

        $d0 = 0.5 * $d0;

        r1[0] = $d0;

        $d0 = r1[0];

        $d0 = 0.25 / $d0;

        $r2 = $r0[1];

        $d1 = $r2[2];

        $r2 = $r0[2];

        $d2 = $r2[1];

        $d1 = $d1 - $d2;

        $d1 = $d1 * $d0;

        r1[1] = $d1;

        $r2 = $r0[2];

        $d1 = $r2[0];

        $r2 = $r0[0];

        $d2 = $r2[2];

        $d1 = $d1 - $d2;

        $d1 = $d1 * $d0;

        r1[2] = $d1;

        $r2 = $r0[0];

        $d1 = $r2[1];

        $r2 = $r0[1];

        $d2 = $r2[0];

        $d1 = $d1 - $d2;

        $d0 = $d1 * $d0;

        r1[3] = $d0;

        return r1;

     label1:
        $r2 = $r0[0];

        $d0 = $r2[0];

        $r2 = $r0[1];

        $d1 = $r2[1];

        $d0 = $d0 - $d1;

        $r2 = $r0[2];

        $d1 = $r2[2];

        $d0 = $d0 - $d1;

        $b0 = $d0 cmpl -0.19;

        if $b0 <= 0 goto label2;

        $d0 = 1.0 + $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d0);

        $d0 = 0.5 * $d0;

        r1[1] = $d0;

        $d0 = r1[1];

        $d0 = 0.25 / $d0;

        $r2 = $r0[1];

        $d1 = $r2[2];

        $r2 = $r0[2];

        $d2 = $r2[1];

        $d1 = $d1 - $d2;

        $d1 = $d1 * $d0;

        r1[0] = $d1;

        $r2 = $r0[0];

        $d1 = $r2[1];

        $r2 = $r0[1];

        $d2 = $r2[0];

        $d1 = $d1 + $d2;

        $d1 = $d1 * $d0;

        r1[2] = $d1;

        $r2 = $r0[0];

        $d1 = $r2[2];

        $r2 = $r0[2];

        $d2 = $r2[0];

        $d1 = $d1 + $d2;

        $d0 = $d1 * $d0;

        r1[3] = $d0;

        return r1;

     label2:
        $r2 = $r0[1];

        $d0 = $r2[1];

        $r2 = $r0[0];

        $d1 = $r2[0];

        $d0 = $d0 - $d1;

        $r2 = $r0[2];

        $d1 = $r2[2];

        $d0 = $d0 - $d1;

        $b0 = $d0 cmpl -0.19;

        if $b0 <= 0 goto label3;

        $d0 = 1.0 + $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d0);

        $d0 = 0.5 * $d0;

        r1[2] = $d0;

        $d0 = r1[2];

        $d0 = 0.25 / $d0;

        $r2 = $r0[2];

        $d1 = $r2[0];

        $r2 = $r0[0];

        $d2 = $r2[2];

        $d1 = $d1 - $d2;

        $d1 = $d1 * $d0;

        r1[0] = $d1;

        $r2 = $r0[0];

        $d1 = $r2[1];

        $r2 = $r0[1];

        $d2 = $r2[0];

        $d1 = $d1 + $d2;

        $d1 = $d1 * $d0;

        r1[1] = $d1;

        $r2 = $r0[2];

        $d1 = $r2[1];

        $r2 = $r0[1];

        $d2 = $r2[2];

        $d1 = $d1 + $d2;

        $d0 = $d1 * $d0;

        r1[3] = $d0;

        return r1;

     label3:
        $r2 = $r0[2];

        $d0 = $r2[2];

        $r2 = $r0[0];

        $d1 = $r2[0];

        $d0 = $d0 - $d1;

        $r2 = $r0[1];

        $d1 = $r2[1];

        $d0 = $d0 - $d1;

        $d0 = 1.0 + $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d0);

        $d0 = 0.5 * $d0;

        r1[3] = $d0;

        $d0 = r1[3];

        $d0 = 0.25 / $d0;

        $r2 = $r0[0];

        $d1 = $r2[1];

        $r2 = $r0[1];

        $d2 = $r2[0];

        $d1 = $d1 - $d2;

        $d1 = $d1 * $d0;

        r1[0] = $d1;

        $r2 = $r0[0];

        $d1 = $r2[2];

        $r2 = $r0[2];

        $d2 = $r2[0];

        $d1 = $d1 + $d2;

        $d1 = $d1 * $d0;

        r1[1] = $d1;

        $r2 = $r0[2];

        $d1 = $r2[1];

        $r2 = $r0[1];

        $d2 = $r2[2];

        $d1 = $d1 + $d2;

        $d0 = $d1 * $d0;

        r1[2] = $d0;

        return r1;
    }
    private double[][] orthogonalizeMatrix(double[][], double) throws org.apache.commons.math3.geometry.euclidean.threed.NotARotationMatrixException
    {
        org.apache.commons.math3.geometry.euclidean.threed.Rotation r0;
        double[][] $r1;
        double $d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, d19, $d20, $d21;
        double[] r2, r3, r4, r5, r6, r7;
        int[] $r8;
        java.lang.Class $r9;
        java.lang.Object $r10;
        int i0;
        byte $b1;
        org.apache.commons.math3.geometry.euclidean.threed.NotARotationMatrixException $r11;
        org.apache.commons.math3.exception.util.LocalizedFormats $r12;
        java.lang.Object[] $r13;
        java.lang.Integer $r14;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        $r1 := @parameter0: double[][];

        $d0 := @parameter1: double;

        r2 = $r1[0];

        r3 = $r1[1];

        r4 = $r1[2];

        d16 = r2[0];

        d17 = r2[1];

        d18 = r2[2];

        d7 = r3[0];

        d6 = r3[1];

        d4 = r3[2];

        d3 = r4[0];

        d2 = r4[1];

        d1 = r4[2];

        d19 = 0.0;

        $r8 = newarray (int)[2];

        $r8[0] = 3;

        $r8[1] = 3;

        $r9 = <java.lang.Double: java.lang.Class TYPE>;

        $r10 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r9, $r8);

        $r1 = (double[][]) $r10;

        r5 = $r1[0];

        r6 = $r1[1];

        r7 = $r1[2];

        i0 = 0;

     label1:
        i0 = i0 + 1;

        if i0 >= 11 goto label3;

        d5 = r2[0];

        d5 = d5 * d16;

        d8 = r3[0];

        d8 = d8 * d7;

        d5 = d5 + d8;

        d8 = r4[0];

        d8 = d8 * d3;

        d5 = d5 + d8;

        d8 = r2[1];

        d8 = d8 * d16;

        d9 = r3[1];

        d9 = d9 * d7;

        d8 = d8 + d9;

        d9 = r4[1];

        d9 = d9 * d3;

        d8 = d8 + d9;

        d9 = r2[2];

        d9 = d9 * d16;

        d10 = r3[2];

        d10 = d10 * d7;

        d9 = d9 + d10;

        d10 = r4[2];

        d10 = d10 * d3;

        d9 = d9 + d10;

        d10 = r2[0];

        d10 = d10 * d17;

        d12 = r3[0];

        d12 = d12 * d6;

        d10 = d10 + d12;

        d12 = r4[0];

        d12 = d12 * d2;

        d10 = d10 + d12;

        d12 = r2[1];

        d12 = d12 * d17;

        d14 = r3[1];

        d14 = d14 * d6;

        d12 = d12 + d14;

        d14 = r4[1];

        d14 = d14 * d2;

        d12 = d12 + d14;

        d14 = r2[2];

        d14 = d14 * d17;

        d11 = r3[2];

        d11 = d11 * d6;

        d14 = d14 + d11;

        d11 = r4[2];

        d11 = d11 * d2;

        d14 = d14 + d11;

        d11 = r2[0];

        d11 = d11 * d18;

        d13 = r3[0];

        d13 = d13 * d4;

        d11 = d11 + d13;

        d13 = r4[0];

        d13 = d13 * d1;

        d11 = d11 + d13;

        d13 = r2[1];

        d13 = d13 * d18;

        d15 = r3[1];

        d15 = d15 * d4;

        d13 = d13 + d15;

        d15 = r4[1];

        d15 = d15 * d1;

        d13 = d13 + d15;

        d15 = r2[2];

        d15 = d15 * d18;

        $d20 = r3[2];

        $d20 = $d20 * d4;

        d15 = d15 + $d20;

        $d20 = r4[2];

        $d20 = $d20 * d1;

        d15 = d15 + $d20;

        $d20 = d16 * d5;

        $d21 = d17 * d8;

        $d20 = $d20 + $d21;

        $d21 = d18 * d9;

        $d20 = $d20 + $d21;

        $d21 = r2[0];

        $d20 = $d20 - $d21;

        $d20 = 0.5 * $d20;

        $d20 = d16 - $d20;

        r5[0] = $d20;

        $d20 = d16 * d10;

        $d21 = d17 * d12;

        $d20 = $d20 + $d21;

        $d21 = d18 * d14;

        $d20 = $d20 + $d21;

        $d21 = r2[1];

        $d20 = $d20 - $d21;

        $d20 = 0.5 * $d20;

        $d20 = d17 - $d20;

        r5[1] = $d20;

        d16 = d16 * d11;

        d17 = d17 * d13;

        d17 = d16 + d17;

        d16 = d18 * d15;

        d17 = d17 + d16;

        d16 = r2[2];

        d17 = d17 - d16;

        d17 = 0.5 * d17;

        d18 = d18 - d17;

        r5[2] = d18;

        d18 = d7 * d5;

        d17 = d6 * d8;

        d18 = d18 + d17;

        d17 = d4 * d9;

        d18 = d18 + d17;

        d17 = r3[0];

        d18 = d18 - d17;

        d18 = 0.5 * d18;

        d18 = d7 - d18;

        r6[0] = d18;

        d18 = d7 * d10;

        d17 = d6 * d12;

        d18 = d18 + d17;

        d17 = d4 * d14;

        d18 = d18 + d17;

        d17 = r3[1];

        d18 = d18 - d17;

        d18 = 0.5 * d18;

        d18 = d6 - d18;

        r6[1] = d18;

        d7 = d7 * d11;

        d6 = d6 * d13;

        d6 = d7 + d6;

        d7 = d4 * d15;

        d6 = d6 + d7;

        d7 = r3[2];

        d6 = d6 - d7;

        d6 = 0.5 * d6;

        d4 = d4 - d6;

        r6[2] = d4;

        d4 = d3 * d5;

        d5 = d2 * d8;

        d4 = d4 + d5;

        d5 = d1 * d9;

        d4 = d4 + d5;

        d5 = r4[0];

        d4 = d4 - d5;

        d4 = 0.5 * d4;

        d4 = d3 - d4;

        r7[0] = d4;

        d4 = d3 * d10;

        d5 = d2 * d12;

        d4 = d4 + d5;

        d5 = d1 * d14;

        d4 = d4 + d5;

        d5 = r4[1];

        d4 = d4 - d5;

        d4 = 0.5 * d4;

        d4 = d2 - d4;

        r7[1] = d4;

        d3 = d3 * d11;

        d2 = d2 * d13;

        d2 = d3 + d2;

        d3 = d1 * d15;

        d2 = d2 + d3;

        d3 = r4[2];

        d2 = d2 - d3;

        d2 = 0.5 * d2;

        d1 = d1 - d2;

        r7[2] = d1;

        d1 = r5[0];

        d2 = r2[0];

        d1 = d1 - d2;

        d2 = r5[1];

        d3 = r2[1];

        d2 = d2 - d3;

        d3 = r5[2];

        d4 = r2[2];

        d3 = d3 - d4;

        d4 = r6[0];

        d5 = r3[0];

        d4 = d4 - d5;

        d5 = r6[1];

        d6 = r3[1];

        d5 = d5 - d6;

        d6 = r6[2];

        d7 = r3[2];

        d6 = d6 - d7;

        d7 = r7[0];

        d8 = r4[0];

        d7 = d7 - d8;

        d8 = r7[1];

        d9 = r4[1];

        d8 = d8 - d9;

        d9 = r7[2];

        d10 = r4[2];

        d9 = d9 - d10;

        d1 = d1 * d1;

        d2 = d2 * d2;

        d1 = d1 + d2;

        d2 = d3 * d3;

        d1 = d1 + d2;

        d2 = d4 * d4;

        d1 = d1 + d2;

        d2 = d5 * d5;

        d1 = d1 + d2;

        d2 = d6 * d6;

        d1 = d1 + d2;

        d2 = d7 * d7;

        d1 = d1 + d2;

        d2 = d8 * d8;

        d1 = d1 + d2;

        d2 = d9 * d9;

        d5 = d1 + d2;

        d19 = d5 - d19;

        d19 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d19);

        $b1 = d19 cmpg $d0;

        if $b1 > 0 goto label2;

        return $r1;

     label2:
        d16 = r5[0];

        d17 = r5[1];

        d18 = r5[2];

        d7 = r6[0];

        d6 = r6[1];

        d4 = r6[2];

        d3 = r7[0];

        d2 = r7[1];

        d1 = r7[2];

        d19 = d5;

        goto label1;

     label3:
        $r11 = new org.apache.commons.math3.geometry.euclidean.threed.NotARotationMatrixException;

        $r12 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats UNABLE_TO_ORTHOGONOLIZE_MATRIX>;

        $r13 = newarray (java.lang.Object)[1];

        i0 = i0 + -1;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r13[0] = $r14;

        specialinvoke $r11.<org.apache.commons.math3.geometry.euclidean.threed.NotARotationMatrixException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r12, $r13);

        throw $r11;
    }
    public org.apache.commons.math3.geometry.euclidean.threed.Rotation applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.Rotation)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Rotation r0, $r1;
        org.apache.commons.math3.geometry.euclidean.threed.RotationConvention $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        $r2 = <org.apache.commons.math3.geometry.euclidean.threed.RotationConvention: org.apache.commons.math3.geometry.euclidean.threed.RotationConvention VECTOR_OPERATOR>;

        r0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Rotation composeInverse(org.apache.commons.math3.geometry.euclidean.threed.Rotation,org.apache.commons.math3.geometry.euclidean.threed.RotationConvention)>($r1, $r2);

        return r0;
    }
    public org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Rotation r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r1;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d2 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d3 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d4 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        d1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        d1 = d1 * $d2;

        d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        d0 = d0 * $d3;

        d1 = d1 + d0;

        d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        d0 = d0 * $d4;

        d1 = d1 + d0;

        d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        d0 = neg d0;

        $r1 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d5 = $d2 * d0;

        $d6 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d6 = $d6 * $d4;

        $d7 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d7 = $d7 * $d3;

        $d6 = $d6 - $d7;

        $d5 = $d5 - $d6;

        $d5 = $d5 * d0;

        $d6 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d6 = $d6 * d1;

        $d5 = $d5 + $d6;

        $d5 = 2.0 * $d5;

        $d5 = $d5 - $d2;

        $d6 = $d3 * d0;

        $d7 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d7 = $d7 * $d2;

        $d8 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d8 = $d8 * $d4;

        $d7 = $d7 - $d8;

        $d6 = $d6 - $d7;

        $d6 = $d6 * d0;

        $d7 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d7 = $d7 * d1;

        $d6 = $d6 + $d7;

        $d6 = 2.0 * $d6;

        $d6 = $d6 - $d3;

        $d7 = $d4 * d0;

        $d8 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d3 = $d8 * $d3;

        $d8 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d2 = $d8 * $d2;

        $d2 = $d3 - $d2;

        $d2 = $d7 - $d2;

        $d2 = $d2 * d0;

        $d3 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        d1 = $d3 * d1;

        $d2 = $d2 + d1;

        $d2 = 2.0 * $d2;

        $d4 = $d2 - $d4;

        specialinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,double,double)>($d5, $d6, $d4);

        return $r1;
    }
    public void applyInverseTo(double[], double[])
    {
        org.apache.commons.math3.geometry.euclidean.threed.Rotation r0;
        double[] $r1, $r2;
        double d0, d1, d2, d3, d4, $d5, $d6, $d7;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[];

        d2 = $r1[0];

        d3 = $r1[1];

        d4 = $r1[2];

        d1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        d1 = d1 * d2;

        d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        d0 = d0 * d3;

        d1 = d1 + d0;

        d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        d0 = d0 * d4;

        d1 = d1 + d0;

        d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        d0 = neg d0;

        $d5 = d2 * d0;

        $d6 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d6 = $d6 * d4;

        $d7 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d7 = $d7 * d3;

        $d6 = $d6 - $d7;

        $d5 = $d5 - $d6;

        $d5 = $d5 * d0;

        $d6 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d6 = $d6 * d1;

        $d5 = $d5 + $d6;

        $d5 = 2.0 * $d5;

        $d5 = $d5 - d2;

        $r2[0] = $d5;

        $d5 = d3 * d0;

        $d6 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d6 = $d6 * d2;

        $d7 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d7 = $d7 * d4;

        $d6 = $d6 - $d7;

        $d5 = $d5 - $d6;

        $d5 = $d5 * d0;

        $d6 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d6 = $d6 * d1;

        $d5 = $d5 + $d6;

        $d5 = 2.0 * $d5;

        $d5 = $d5 - d3;

        $r2[1] = $d5;

        $d5 = d4 * d0;

        $d6 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        d3 = $d6 * d3;

        $d6 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        d2 = $d6 * d2;

        d2 = d3 - d2;

        d2 = $d5 - d2;

        d2 = d2 * d0;

        d3 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        d1 = d3 * d1;

        d2 = d2 + d1;

        d2 = 2.0 * d2;

        d4 = d2 - d4;

        $r2[2] = d4;

        return;
    }
    public org.apache.commons.math3.geometry.euclidean.threed.Rotation applyTo(org.apache.commons.math3.geometry.euclidean.threed.Rotation)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Rotation r0, $r1;
        org.apache.commons.math3.geometry.euclidean.threed.RotationConvention $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        $r2 = <org.apache.commons.math3.geometry.euclidean.threed.RotationConvention: org.apache.commons.math3.geometry.euclidean.threed.RotationConvention VECTOR_OPERATOR>;

        r0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Rotation compose(org.apache.commons.math3.geometry.euclidean.threed.Rotation,org.apache.commons.math3.geometry.euclidean.threed.RotationConvention)>($r1, $r2);

        return r0;
    }
    public org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Rotation r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r1;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d1 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d2 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d3 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        d0 = d0 * $d1;

        $d4 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d4 = $d4 * $d2;

        d0 = d0 + $d4;

        $d4 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d4 = $d4 * $d3;

        d0 = d0 + $d4;

        $r1 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d4 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $d5 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $d5 = $d5 * $d1;

        $d6 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d6 = $d6 * $d3;

        $d7 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d7 = $d7 * $d2;

        $d6 = $d6 - $d7;

        $d5 = $d5 - $d6;

        $d4 = $d4 * $d5;

        $d5 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d5 = $d5 * d0;

        $d4 = $d4 + $d5;

        $d4 = 2.0 * $d4;

        $d4 = $d4 - $d1;

        $d5 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $d6 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $d6 = $d6 * $d2;

        $d7 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d7 = $d7 * $d1;

        $d8 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d8 = $d8 * $d3;

        $d7 = $d7 - $d8;

        $d6 = $d6 - $d7;

        $d5 = $d5 * $d6;

        $d6 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d6 = $d6 * d0;

        $d5 = $d5 + $d6;

        $d5 = 2.0 * $d5;

        $d5 = $d5 - $d2;

        $d6 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $d7 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $d7 = $d7 * $d3;

        $d8 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d2 = $d8 * $d2;

        $d8 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d1 = $d8 * $d1;

        $d1 = $d2 - $d1;

        $d1 = $d7 - $d1;

        $d1 = $d6 * $d1;

        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        d0 = $d2 * d0;

        $d1 = $d1 + d0;

        $d1 = 2.0 * $d1;

        $d3 = $d1 - $d3;

        specialinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,double,double)>($d4, $d5, $d3);

        return $r1;
    }
    public void applyTo(double[], double[])
    {
        org.apache.commons.math3.geometry.euclidean.threed.Rotation r0;
        double[] $r1, $r2;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[];

        d1 = $r1[0];

        d2 = $r1[1];

        d3 = $r1[2];

        d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        d0 = d0 * d1;

        $d4 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d4 = $d4 * d2;

        d0 = d0 + $d4;

        $d4 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d4 = $d4 * d3;

        d0 = d0 + $d4;

        $d4 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $d5 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $d5 = $d5 * d1;

        $d6 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d6 = $d6 * d3;

        $d7 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d7 = $d7 * d2;

        $d6 = $d6 - $d7;

        $d5 = $d5 - $d6;

        $d4 = $d4 * $d5;

        $d5 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d5 = $d5 * d0;

        $d4 = $d4 + $d5;

        $d4 = 2.0 * $d4;

        $d4 = $d4 - d1;

        $r2[0] = $d4;

        $d4 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $d5 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $d5 = $d5 * d2;

        $d6 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d6 = $d6 * d1;

        $d7 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d7 = $d7 * d3;

        $d6 = $d6 - $d7;

        $d5 = $d5 - $d6;

        $d4 = $d4 * $d5;

        $d5 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d5 = $d5 * d0;

        $d4 = $d4 + $d5;

        $d4 = 2.0 * $d4;

        $d4 = $d4 - d2;

        $r2[1] = $d4;

        $d4 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $d5 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $d5 = $d5 * d3;

        $d6 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        d2 = $d6 * d2;

        $d6 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        d1 = $d6 * d1;

        d1 = d2 - d1;

        d1 = $d5 - d1;

        d1 = $d4 * d1;

        d2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        d0 = d2 * d0;

        d1 = d1 + d0;

        d1 = 2.0 * d1;

        d3 = d1 - d3;

        $r2[2] = d3;

        return;
    }
    public org.apache.commons.math3.geometry.euclidean.threed.Rotation compose(org.apache.commons.math3.geometry.euclidean.threed.Rotation, org.apache.commons.math3.geometry.euclidean.threed.RotationConvention)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Rotation r0, $r1;
        org.apache.commons.math3.geometry.euclidean.threed.RotationConvention $r2, $r3;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        $r2 := @parameter1: org.apache.commons.math3.geometry.euclidean.threed.RotationConvention;

        $r3 = <org.apache.commons.math3.geometry.euclidean.threed.RotationConvention: org.apache.commons.math3.geometry.euclidean.threed.RotationConvention VECTOR_OPERATOR>;

        if $r2 != $r3 goto label1;

        r0 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Rotation composeInternal(org.apache.commons.math3.geometry.euclidean.threed.Rotation)>($r1);

        return r0;

     label1:
        r0 = specialinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Rotation composeInternal(org.apache.commons.math3.geometry.euclidean.threed.Rotation)>(r0);

        return r0;
    }
    public org.apache.commons.math3.geometry.euclidean.threed.Rotation composeInverse(org.apache.commons.math3.geometry.euclidean.threed.Rotation, org.apache.commons.math3.geometry.euclidean.threed.RotationConvention)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Rotation r0, $r1;
        org.apache.commons.math3.geometry.euclidean.threed.RotationConvention $r2, $r3;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        $r2 := @parameter1: org.apache.commons.math3.geometry.euclidean.threed.RotationConvention;

        $r3 = <org.apache.commons.math3.geometry.euclidean.threed.RotationConvention: org.apache.commons.math3.geometry.euclidean.threed.RotationConvention VECTOR_OPERATOR>;

        if $r2 != $r3 goto label1;

        r0 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Rotation composeInverseInternal(org.apache.commons.math3.geometry.euclidean.threed.Rotation)>($r1);

        return r0;

     label1:
        r0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Rotation revert()>();

        r0 = specialinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Rotation composeInternal(org.apache.commons.math3.geometry.euclidean.threed.Rotation)>(r0);

        return r0;
    }
    public double getAngle()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Rotation r0;
        double $d0, $d1, $d2;
        byte $b0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $b0 = $d0 cmpg -0.1;

        if $b0 < 0 goto label1;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $b0 = $d0 cmpl 0.1;

        if $b0 <= 0 goto label2;

     label1:
        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d0 = $d0 * $d1;

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d1 = $d1 * $d2;

        $d0 = $d0 + $d1;

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d1 = $d1 * $d2;

        $d0 = $d0 + $d1;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d0);

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double asin(double)>($d0);

        $d0 = $d0 * 2.0;

        return $d0;

     label2:
        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $b0 = $d0 cmpg 0.0;

        if $b0 >= 0 goto label3;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $d0 = neg $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double acos(double)>($d0);

        $d0 = $d0 * 2.0;

        return $d0;

     label3:
        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double acos(double)>($d0);

        $d0 = $d0 * 2.0;

        return $d0;
    }
    public double[] getAngles(org.apache.commons.math3.geometry.euclidean.threed.RotationOrder) throws org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException
    {
        org.apache.commons.math3.geometry.euclidean.threed.Rotation r0;
        org.apache.commons.math3.geometry.euclidean.threed.RotationOrder $r1;
        double[] $r2;
        org.apache.commons.math3.geometry.euclidean.threed.RotationConvention $r3;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.RotationOrder;

        $r3 = <org.apache.commons.math3.geometry.euclidean.threed.RotationConvention: org.apache.commons.math3.geometry.euclidean.threed.RotationConvention VECTOR_OPERATOR>;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double[] getAngles(org.apache.commons.math3.geometry.euclidean.threed.RotationOrder,org.apache.commons.math3.geometry.euclidean.threed.RotationConvention)>($r1, $r3);

        return $r2;
    }
    public double[] getAngles(org.apache.commons.math3.geometry.euclidean.threed.RotationOrder, org.apache.commons.math3.geometry.euclidean.threed.RotationConvention) throws org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException
    {
        org.apache.commons.math3.geometry.euclidean.threed.Rotation r0;
        org.apache.commons.math3.geometry.euclidean.threed.RotationOrder $r1, $r4;
        org.apache.commons.math3.geometry.euclidean.threed.RotationConvention $r2, $r3;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r5, $r6;
        double $d0, $d1;
        byte $b0;
        org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException $r7;
        double[] $r8;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.RotationOrder;

        $r2 := @parameter1: org.apache.commons.math3.geometry.euclidean.threed.RotationConvention;

        $r3 = <org.apache.commons.math3.geometry.euclidean.threed.RotationConvention: org.apache.commons.math3.geometry.euclidean.threed.RotationConvention VECTOR_OPERATOR>;

        if $r2 != $r3 goto label36;

        $r4 = <org.apache.commons.math3.geometry.euclidean.threed.RotationOrder: org.apache.commons.math3.geometry.euclidean.threed.RotationOrder XYZ>;

        if $r1 != $r4 goto label03;

        $r5 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_K>;

        $r5 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r5);

        $r6 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_I>;

        $r6 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r6);

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $b0 = $d0 cmpg -0.9999999999;

        if $b0 < 0 goto label01;

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $b0 = $d0 cmpl 0.9999999999;

        if $b0 <= 0 goto label02;

     label01:
        $r7 = new org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException;

        specialinvoke $r7.<org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException: void <init>(boolean)>(1);

        throw $r7;

     label02:
        $r8 = newarray (double)[3];

        $d0 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d0 = neg $d0;

        $d1 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d0, $d1);

        $r8[0] = $d0;

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double asin(double)>($d0);

        $r8[1] = $d0;

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d0 = neg $d0;

        $d1 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d0, $d1);

        $r8[2] = $d0;

        return $r8;

     label03:
        $r4 = <org.apache.commons.math3.geometry.euclidean.threed.RotationOrder: org.apache.commons.math3.geometry.euclidean.threed.RotationOrder XZY>;

        if $r1 != $r4 goto label06;

        $r5 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_J>;

        $r5 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r5);

        $r6 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_I>;

        $r6 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r6);

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $b0 = $d0 cmpg -0.9999999999;

        if $b0 < 0 goto label04;

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $b0 = $d0 cmpl 0.9999999999;

        if $b0 <= 0 goto label05;

     label04:
        $r7 = new org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException;

        specialinvoke $r7.<org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException: void <init>(boolean)>(1);

        throw $r7;

     label05:
        $r8 = newarray (double)[3];

        $d0 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d1 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d0, $d1);

        $r8[0] = $d0;

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double asin(double)>($d0);

        $d0 = neg $d0;

        $r8[1] = $d0;

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d1 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d0, $d1);

        $r8[2] = $d0;

        return $r8;

     label06:
        $r4 = <org.apache.commons.math3.geometry.euclidean.threed.RotationOrder: org.apache.commons.math3.geometry.euclidean.threed.RotationOrder YXZ>;

        if $r1 != $r4 goto label09;

        $r5 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_K>;

        $r5 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r5);

        $r6 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_J>;

        $r6 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r6);

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $b0 = $d0 cmpg -0.9999999999;

        if $b0 < 0 goto label07;

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $b0 = $d0 cmpl 0.9999999999;

        if $b0 <= 0 goto label08;

     label07:
        $r7 = new org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException;

        specialinvoke $r7.<org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException: void <init>(boolean)>(1);

        throw $r7;

     label08:
        $r8 = newarray (double)[3];

        $d0 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d1 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d0, $d1);

        $r8[0] = $d0;

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double asin(double)>($d0);

        $d0 = neg $d0;

        $r8[1] = $d0;

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d1 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d0, $d1);

        $r8[2] = $d0;

        return $r8;

     label09:
        $r4 = <org.apache.commons.math3.geometry.euclidean.threed.RotationOrder: org.apache.commons.math3.geometry.euclidean.threed.RotationOrder YZX>;

        if $r1 != $r4 goto label12;

        $r5 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_I>;

        $r5 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r5);

        $r6 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_J>;

        $r6 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r6);

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $b0 = $d0 cmpg -0.9999999999;

        if $b0 < 0 goto label10;

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $b0 = $d0 cmpl 0.9999999999;

        if $b0 <= 0 goto label11;

     label10:
        $r7 = new org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException;

        specialinvoke $r7.<org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException: void <init>(boolean)>(1);

        throw $r7;

     label11:
        $r8 = newarray (double)[3];

        $d0 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d0 = neg $d0;

        $d1 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d0, $d1);

        $r8[0] = $d0;

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double asin(double)>($d0);

        $r8[1] = $d0;

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d0 = neg $d0;

        $d1 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d0, $d1);

        $r8[2] = $d0;

        return $r8;

     label12:
        $r4 = <org.apache.commons.math3.geometry.euclidean.threed.RotationOrder: org.apache.commons.math3.geometry.euclidean.threed.RotationOrder ZXY>;

        if $r1 != $r4 goto label15;

        $r5 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_J>;

        $r5 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r5);

        $r6 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_K>;

        $r6 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r6);

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $b0 = $d0 cmpg -0.9999999999;

        if $b0 < 0 goto label13;

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $b0 = $d0 cmpl 0.9999999999;

        if $b0 <= 0 goto label14;

     label13:
        $r7 = new org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException;

        specialinvoke $r7.<org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException: void <init>(boolean)>(1);

        throw $r7;

     label14:
        $r8 = newarray (double)[3];

        $d0 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d0 = neg $d0;

        $d1 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d0, $d1);

        $r8[0] = $d0;

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double asin(double)>($d0);

        $r8[1] = $d0;

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d0 = neg $d0;

        $d1 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d0, $d1);

        $r8[2] = $d0;

        return $r8;

     label15:
        $r4 = <org.apache.commons.math3.geometry.euclidean.threed.RotationOrder: org.apache.commons.math3.geometry.euclidean.threed.RotationOrder ZYX>;

        if $r1 != $r4 goto label18;

        $r5 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_I>;

        $r5 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r5);

        $r6 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_K>;

        $r6 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r6);

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $b0 = $d0 cmpg -0.9999999999;

        if $b0 < 0 goto label16;

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $b0 = $d0 cmpl 0.9999999999;

        if $b0 <= 0 goto label17;

     label16:
        $r7 = new org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException;

        specialinvoke $r7.<org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException: void <init>(boolean)>(1);

        throw $r7;

     label17:
        $r8 = newarray (double)[3];

        $d0 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d1 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d0, $d1);

        $r8[0] = $d0;

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double asin(double)>($d0);

        $d0 = neg $d0;

        $r8[1] = $d0;

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d1 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d0, $d1);

        $r8[2] = $d0;

        return $r8;

     label18:
        $r4 = <org.apache.commons.math3.geometry.euclidean.threed.RotationOrder: org.apache.commons.math3.geometry.euclidean.threed.RotationOrder XYX>;

        if $r1 != $r4 goto label21;

        $r5 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_I>;

        $r5 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r5);

        $r6 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_I>;

        $r6 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r6);

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $b0 = $d0 cmpg -0.9999999999;

        if $b0 < 0 goto label19;

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $b0 = $d0 cmpl 0.9999999999;

        if $b0 <= 0 goto label20;

     label19:
        $r7 = new org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException;

        specialinvoke $r7.<org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException: void <init>(boolean)>(0);

        throw $r7;

     label20:
        $r8 = newarray (double)[3];

        $d0 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d1 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d1 = neg $d1;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d0, $d1);

        $r8[0] = $d0;

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double acos(double)>($d0);

        $r8[1] = $d0;

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d1 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d0, $d1);

        $r8[2] = $d0;

        return $r8;

     label21:
        $r4 = <org.apache.commons.math3.geometry.euclidean.threed.RotationOrder: org.apache.commons.math3.geometry.euclidean.threed.RotationOrder XZX>;

        if $r1 != $r4 goto label24;

        $r5 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_I>;

        $r5 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r5);

        $r6 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_I>;

        $r6 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r6);

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $b0 = $d0 cmpg -0.9999999999;

        if $b0 < 0 goto label22;

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $b0 = $d0 cmpl 0.9999999999;

        if $b0 <= 0 goto label23;

     label22:
        $r7 = new org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException;

        specialinvoke $r7.<org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException: void <init>(boolean)>(0);

        throw $r7;

     label23:
        $r8 = newarray (double)[3];

        $d0 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d1 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d0, $d1);

        $r8[0] = $d0;

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double acos(double)>($d0);

        $r8[1] = $d0;

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d1 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d1 = neg $d1;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d0, $d1);

        $r8[2] = $d0;

        return $r8;

     label24:
        $r4 = <org.apache.commons.math3.geometry.euclidean.threed.RotationOrder: org.apache.commons.math3.geometry.euclidean.threed.RotationOrder YXY>;

        if $r1 != $r4 goto label27;

        $r5 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_J>;

        $r5 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r5);

        $r6 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_J>;

        $r6 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r6);

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $b0 = $d0 cmpg -0.9999999999;

        if $b0 < 0 goto label25;

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $b0 = $d0 cmpl 0.9999999999;

        if $b0 <= 0 goto label26;

     label25:
        $r7 = new org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException;

        specialinvoke $r7.<org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException: void <init>(boolean)>(0);

        throw $r7;

     label26:
        $r8 = newarray (double)[3];

        $d0 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d1 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d0, $d1);

        $r8[0] = $d0;

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double acos(double)>($d0);

        $r8[1] = $d0;

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d1 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d1 = neg $d1;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d0, $d1);

        $r8[2] = $d0;

        return $r8;

     label27:
        $r4 = <org.apache.commons.math3.geometry.euclidean.threed.RotationOrder: org.apache.commons.math3.geometry.euclidean.threed.RotationOrder YZY>;

        if $r1 != $r4 goto label30;

        $r5 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_J>;

        $r5 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r5);

        $r6 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_J>;

        $r6 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r6);

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $b0 = $d0 cmpg -0.9999999999;

        if $b0 < 0 goto label28;

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $b0 = $d0 cmpl 0.9999999999;

        if $b0 <= 0 goto label29;

     label28:
        $r7 = new org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException;

        specialinvoke $r7.<org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException: void <init>(boolean)>(0);

        throw $r7;

     label29:
        $r8 = newarray (double)[3];

        $d0 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d1 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d1 = neg $d1;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d0, $d1);

        $r8[0] = $d0;

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double acos(double)>($d0);

        $r8[1] = $d0;

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d1 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d0, $d1);

        $r8[2] = $d0;

        return $r8;

     label30:
        $r4 = <org.apache.commons.math3.geometry.euclidean.threed.RotationOrder: org.apache.commons.math3.geometry.euclidean.threed.RotationOrder ZXZ>;

        if $r1 != $r4 goto label33;

        $r5 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_K>;

        $r5 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r5);

        $r6 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_K>;

        $r6 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r6);

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $b0 = $d0 cmpg -0.9999999999;

        if $b0 < 0 goto label31;

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $b0 = $d0 cmpl 0.9999999999;

        if $b0 <= 0 goto label32;

     label31:
        $r7 = new org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException;

        specialinvoke $r7.<org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException: void <init>(boolean)>(0);

        throw $r7;

     label32:
        $r8 = newarray (double)[3];

        $d0 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d1 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d1 = neg $d1;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d0, $d1);

        $r8[0] = $d0;

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double acos(double)>($d0);

        $r8[1] = $d0;

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d1 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d0, $d1);

        $r8[2] = $d0;

        return $r8;

     label33:
        $r5 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_K>;

        $r5 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r5);

        $r6 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_K>;

        $r6 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r6);

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $b0 = $d0 cmpg -0.9999999999;

        if $b0 < 0 goto label34;

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $b0 = $d0 cmpl 0.9999999999;

        if $b0 <= 0 goto label35;

     label34:
        $r7 = new org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException;

        specialinvoke $r7.<org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException: void <init>(boolean)>(0);

        throw $r7;

     label35:
        $r8 = newarray (double)[3];

        $d0 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d1 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d0, $d1);

        $r8[0] = $d0;

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double acos(double)>($d0);

        $r8[1] = $d0;

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d1 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d1 = neg $d1;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d0, $d1);

        $r8[2] = $d0;

        return $r8;

     label36:
        $r4 = <org.apache.commons.math3.geometry.euclidean.threed.RotationOrder: org.apache.commons.math3.geometry.euclidean.threed.RotationOrder XYZ>;

        if $r1 != $r4 goto label39;

        $r5 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_I>;

        $r5 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r5);

        $r6 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_K>;

        $r6 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r6);

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $b0 = $d0 cmpg -0.9999999999;

        if $b0 < 0 goto label37;

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $b0 = $d0 cmpl 0.9999999999;

        if $b0 <= 0 goto label38;

     label37:
        $r7 = new org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException;

        specialinvoke $r7.<org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException: void <init>(boolean)>(1);

        throw $r7;

     label38:
        $r8 = newarray (double)[3];

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d0 = neg $d0;

        $d1 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d0, $d1);

        $r8[0] = $d0;

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double asin(double)>($d0);

        $r8[1] = $d0;

        $d0 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d0 = neg $d0;

        $d1 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d0, $d1);

        $r8[2] = $d0;

        return $r8;

     label39:
        $r4 = <org.apache.commons.math3.geometry.euclidean.threed.RotationOrder: org.apache.commons.math3.geometry.euclidean.threed.RotationOrder XZY>;

        if $r1 != $r4 goto label42;

        $r5 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_I>;

        $r5 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r5);

        $r6 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_J>;

        $r6 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r6);

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $b0 = $d0 cmpg -0.9999999999;

        if $b0 < 0 goto label40;

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $b0 = $d0 cmpl 0.9999999999;

        if $b0 <= 0 goto label41;

     label40:
        $r7 = new org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException;

        specialinvoke $r7.<org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException: void <init>(boolean)>(1);

        throw $r7;

     label41:
        $r8 = newarray (double)[3];

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d1 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d0, $d1);

        $r8[0] = $d0;

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double asin(double)>($d0);

        $d0 = neg $d0;

        $r8[1] = $d0;

        $d0 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d1 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d0, $d1);

        $r8[2] = $d0;

        return $r8;

     label42:
        $r4 = <org.apache.commons.math3.geometry.euclidean.threed.RotationOrder: org.apache.commons.math3.geometry.euclidean.threed.RotationOrder YXZ>;

        if $r1 != $r4 goto label45;

        $r5 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_J>;

        $r5 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r5);

        $r6 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_K>;

        $r6 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r6);

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $b0 = $d0 cmpg -0.9999999999;

        if $b0 < 0 goto label43;

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $b0 = $d0 cmpl 0.9999999999;

        if $b0 <= 0 goto label44;

     label43:
        $r7 = new org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException;

        specialinvoke $r7.<org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException: void <init>(boolean)>(1);

        throw $r7;

     label44:
        $r8 = newarray (double)[3];

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d1 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d0, $d1);

        $r8[0] = $d0;

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double asin(double)>($d0);

        $d0 = neg $d0;

        $r8[1] = $d0;

        $d0 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d1 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d0, $d1);

        $r8[2] = $d0;

        return $r8;

     label45:
        $r4 = <org.apache.commons.math3.geometry.euclidean.threed.RotationOrder: org.apache.commons.math3.geometry.euclidean.threed.RotationOrder YZX>;

        if $r1 != $r4 goto label48;

        $r5 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_J>;

        $r5 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r5);

        $r6 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_I>;

        $r6 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r6);

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $b0 = $d0 cmpg -0.9999999999;

        if $b0 < 0 goto label46;

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $b0 = $d0 cmpl 0.9999999999;

        if $b0 <= 0 goto label47;

     label46:
        $r7 = new org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException;

        specialinvoke $r7.<org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException: void <init>(boolean)>(1);

        throw $r7;

     label47:
        $r8 = newarray (double)[3];

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d0 = neg $d0;

        $d1 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d0, $d1);

        $r8[0] = $d0;

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double asin(double)>($d0);

        $r8[1] = $d0;

        $d0 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d0 = neg $d0;

        $d1 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d0, $d1);

        $r8[2] = $d0;

        return $r8;

     label48:
        $r4 = <org.apache.commons.math3.geometry.euclidean.threed.RotationOrder: org.apache.commons.math3.geometry.euclidean.threed.RotationOrder ZXY>;

        if $r1 != $r4 goto label51;

        $r5 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_K>;

        $r5 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r5);

        $r6 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_J>;

        $r6 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r6);

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $b0 = $d0 cmpg -0.9999999999;

        if $b0 < 0 goto label49;

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $b0 = $d0 cmpl 0.9999999999;

        if $b0 <= 0 goto label50;

     label49:
        $r7 = new org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException;

        specialinvoke $r7.<org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException: void <init>(boolean)>(1);

        throw $r7;

     label50:
        $r8 = newarray (double)[3];

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d0 = neg $d0;

        $d1 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d0, $d1);

        $r8[0] = $d0;

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double asin(double)>($d0);

        $r8[1] = $d0;

        $d0 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d0 = neg $d0;

        $d1 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d0, $d1);

        $r8[2] = $d0;

        return $r8;

     label51:
        $r4 = <org.apache.commons.math3.geometry.euclidean.threed.RotationOrder: org.apache.commons.math3.geometry.euclidean.threed.RotationOrder ZYX>;

        if $r1 != $r4 goto label54;

        $r5 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_K>;

        $r5 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r5);

        $r6 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_I>;

        $r6 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r6);

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $b0 = $d0 cmpg -0.9999999999;

        if $b0 < 0 goto label52;

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $b0 = $d0 cmpl 0.9999999999;

        if $b0 <= 0 goto label53;

     label52:
        $r7 = new org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException;

        specialinvoke $r7.<org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException: void <init>(boolean)>(1);

        throw $r7;

     label53:
        $r8 = newarray (double)[3];

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d1 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d0, $d1);

        $r8[0] = $d0;

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double asin(double)>($d0);

        $d0 = neg $d0;

        $r8[1] = $d0;

        $d0 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d1 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d0, $d1);

        $r8[2] = $d0;

        return $r8;

     label54:
        $r4 = <org.apache.commons.math3.geometry.euclidean.threed.RotationOrder: org.apache.commons.math3.geometry.euclidean.threed.RotationOrder XYX>;

        if $r1 != $r4 goto label57;

        $r5 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_I>;

        $r5 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r5);

        $r6 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_I>;

        $r6 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r6);

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $b0 = $d0 cmpg -0.9999999999;

        if $b0 < 0 goto label55;

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $b0 = $d0 cmpl 0.9999999999;

        if $b0 <= 0 goto label56;

     label55:
        $r7 = new org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException;

        specialinvoke $r7.<org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException: void <init>(boolean)>(0);

        throw $r7;

     label56:
        $r8 = newarray (double)[3];

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d1 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d1 = neg $d1;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d0, $d1);

        $r8[0] = $d0;

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double acos(double)>($d0);

        $r8[1] = $d0;

        $d0 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d1 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d0, $d1);

        $r8[2] = $d0;

        return $r8;

     label57:
        $r4 = <org.apache.commons.math3.geometry.euclidean.threed.RotationOrder: org.apache.commons.math3.geometry.euclidean.threed.RotationOrder XZX>;

        if $r1 != $r4 goto label60;

        $r5 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_I>;

        $r5 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r5);

        $r6 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_I>;

        $r6 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r6);

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $b0 = $d0 cmpg -0.9999999999;

        if $b0 < 0 goto label58;

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $b0 = $d0 cmpl 0.9999999999;

        if $b0 <= 0 goto label59;

     label58:
        $r7 = new org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException;

        specialinvoke $r7.<org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException: void <init>(boolean)>(0);

        throw $r7;

     label59:
        $r8 = newarray (double)[3];

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d1 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d0, $d1);

        $r8[0] = $d0;

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double acos(double)>($d0);

        $r8[1] = $d0;

        $d0 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d1 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d1 = neg $d1;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d0, $d1);

        $r8[2] = $d0;

        return $r8;

     label60:
        $r4 = <org.apache.commons.math3.geometry.euclidean.threed.RotationOrder: org.apache.commons.math3.geometry.euclidean.threed.RotationOrder YXY>;

        if $r1 != $r4 goto label63;

        $r5 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_J>;

        $r5 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r5);

        $r6 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_J>;

        $r6 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r6);

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $b0 = $d0 cmpg -0.9999999999;

        if $b0 < 0 goto label61;

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $b0 = $d0 cmpl 0.9999999999;

        if $b0 <= 0 goto label62;

     label61:
        $r7 = new org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException;

        specialinvoke $r7.<org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException: void <init>(boolean)>(0);

        throw $r7;

     label62:
        $r8 = newarray (double)[3];

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d1 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d0, $d1);

        $r8[0] = $d0;

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double acos(double)>($d0);

        $r8[1] = $d0;

        $d0 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d1 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d1 = neg $d1;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d0, $d1);

        $r8[2] = $d0;

        return $r8;

     label63:
        $r4 = <org.apache.commons.math3.geometry.euclidean.threed.RotationOrder: org.apache.commons.math3.geometry.euclidean.threed.RotationOrder YZY>;

        if $r1 != $r4 goto label66;

        $r5 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_J>;

        $r5 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r5);

        $r6 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_J>;

        $r6 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r6);

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $b0 = $d0 cmpg -0.9999999999;

        if $b0 < 0 goto label64;

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $b0 = $d0 cmpl 0.9999999999;

        if $b0 <= 0 goto label65;

     label64:
        $r7 = new org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException;

        specialinvoke $r7.<org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException: void <init>(boolean)>(0);

        throw $r7;

     label65:
        $r8 = newarray (double)[3];

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d1 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d1 = neg $d1;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d0, $d1);

        $r8[0] = $d0;

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double acos(double)>($d0);

        $r8[1] = $d0;

        $d0 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d1 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d0, $d1);

        $r8[2] = $d0;

        return $r8;

     label66:
        $r4 = <org.apache.commons.math3.geometry.euclidean.threed.RotationOrder: org.apache.commons.math3.geometry.euclidean.threed.RotationOrder ZXZ>;

        if $r1 != $r4 goto label69;

        $r5 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_K>;

        $r5 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r5);

        $r6 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_K>;

        $r6 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r6);

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $b0 = $d0 cmpg -0.9999999999;

        if $b0 < 0 goto label67;

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $b0 = $d0 cmpl 0.9999999999;

        if $b0 <= 0 goto label68;

     label67:
        $r7 = new org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException;

        specialinvoke $r7.<org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException: void <init>(boolean)>(0);

        throw $r7;

     label68:
        $r8 = newarray (double)[3];

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d1 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d1 = neg $d1;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d0, $d1);

        $r8[0] = $d0;

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double acos(double)>($d0);

        $r8[1] = $d0;

        $d0 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d1 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d0, $d1);

        $r8[2] = $d0;

        return $r8;

     label69:
        $r5 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_K>;

        $r5 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r5);

        $r6 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_K>;

        $r6 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r6);

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $b0 = $d0 cmpg -0.9999999999;

        if $b0 < 0 goto label70;

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $b0 = $d0 cmpl 0.9999999999;

        if $b0 <= 0 goto label71;

     label70:
        $r7 = new org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException;

        specialinvoke $r7.<org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException: void <init>(boolean)>(0);

        throw $r7;

     label71:
        $r8 = newarray (double)[3];

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d1 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d0, $d1);

        $r8[0] = $d0;

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double acos(double)>($d0);

        $r8[1] = $d0;

        $d0 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d1 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d1 = neg $d1;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d0, $d1);

        $r8[2] = $d0;

        return $r8;
    }
    public org.apache.commons.math3.geometry.euclidean.threed.Vector3D getAxis()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Rotation r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r1;
        org.apache.commons.math3.geometry.euclidean.threed.RotationConvention $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        $r2 = <org.apache.commons.math3.geometry.euclidean.threed.RotationConvention: org.apache.commons.math3.geometry.euclidean.threed.RotationConvention VECTOR_OPERATOR>;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getAxis(org.apache.commons.math3.geometry.euclidean.threed.RotationConvention)>($r2);

        return $r1;
    }
    public org.apache.commons.math3.geometry.euclidean.threed.Vector3D getAxis(org.apache.commons.math3.geometry.euclidean.threed.RotationConvention)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Rotation r0;
        org.apache.commons.math3.geometry.euclidean.threed.RotationConvention $r1, $r2;
        double d0, $d1, $d2, $d3;
        byte $b0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r3;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.RotationConvention;

        d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        d0 = d0 * $d1;

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d1 = $d1 * $d2;

        d0 = d0 + $d1;

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d1 = $d1 * $d2;

        d0 = d0 + $d1;

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label3;

        $r2 = <org.apache.commons.math3.geometry.euclidean.threed.RotationConvention: org.apache.commons.math3.geometry.euclidean.threed.RotationConvention VECTOR_OPERATOR>;

        if $r1 != $r2 goto label2;

        $r3 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_I>;

     label1:
        return $r3;

     label2:
        $r3 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D MINUS_I>;

        goto label1;

     label3:
        $r2 = <org.apache.commons.math3.geometry.euclidean.threed.RotationConvention: org.apache.commons.math3.geometry.euclidean.threed.RotationConvention VECTOR_OPERATOR>;

        if $r1 != $r2 goto label5;

        $d1 = 1.0;

     label4:
        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $b0 = $d2 cmpg 0.0;

        if $b0 >= 0 goto label6;

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d0);

        d0 = $d1 / d0;

        $r3 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d1 = $d1 * d0;

        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d2 = $d2 * d0;

        $d3 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        d0 = $d3 * d0;

        specialinvoke $r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,double,double)>($d1, $d2, d0);

        return $r3;

     label5:
        $d1 = -1.0;

        goto label4;

     label6:
        $d1 = neg $d1;

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d0);

        d0 = $d1 / d0;

        $r3 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d1 = $d1 * d0;

        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d2 = $d2 * d0;

        $d3 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        d0 = $d3 * d0;

        specialinvoke $r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,double,double)>($d1, $d2, d0);

        return $r3;
    }
    public double[][] getMatrix()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Rotation r0;
        double[][] r1;
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, $d10;
        double[] $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        d1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        d0 = d0 * d1;

        d1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        d2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        d1 = d1 * d2;

        d2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        d6 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        d2 = d2 * d6;

        d6 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        d3 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        d3 = d6 * d3;

        d6 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        d8 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        d4 = d6 * d8;

        d6 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        d8 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        d5 = d6 * d8;

        d6 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        d8 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        d6 = d6 * d8;

        d8 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        d9 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        d7 = d8 * d9;

        d8 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        d9 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        d8 = d8 * d9;

        d9 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d10 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        d9 = d9 * $d10;

        r1 = newarray (double[])[3];

        $r2 = newarray (double)[3];

        r1[0] = $r2;

        $r2 = newarray (double)[3];

        r1[1] = $r2;

        $r2 = newarray (double)[3];

        r1[2] = $r2;

        $r2 = r1[0];

        d4 = d0 + d4;

        d4 = 2.0 * d4;

        d4 = d4 - 1.0;

        $r2[0] = d4;

        $r2 = r1[1];

        d4 = d5 - d3;

        d4 = 2.0 * d4;

        $r2[0] = d4;

        $r2 = r1[2];

        d4 = d6 + d2;

        d4 = 2.0 * d4;

        $r2[0] = d4;

        $r2 = r1[0];

        d3 = d5 + d3;

        d3 = 2.0 * d3;

        $r2[1] = d3;

        $r2 = r1[1];

        d3 = d0 + d7;

        d3 = 2.0 * d3;

        d3 = d3 - 1.0;

        $r2[1] = d3;

        $r2 = r1[2];

        d3 = d8 - d1;

        d3 = 2.0 * d3;

        $r2[1] = d3;

        $r2 = r1[0];

        d2 = d6 - d2;

        d2 = 2.0 * d2;

        $r2[2] = d2;

        $r2 = r1[1];

        d1 = d8 + d1;

        d1 = 2.0 * d1;

        $r2[2] = d1;

        $r2 = r1[2];

        d0 = d0 + d9;

        d0 = 2.0 * d0;

        d0 = d0 - 1.0;

        $r2[2] = d0;

        return r1;
    }
    public double getQ0()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Rotation r0;
        double d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        return d0;
    }
    public double getQ1()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Rotation r0;
        double d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        return d0;
    }
    public double getQ2()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Rotation r0;
        double d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        return d0;
    }
    public double getQ3()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Rotation r0;
        double d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        return d0;
    }
    public org.apache.commons.math3.geometry.euclidean.threed.Rotation revert()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Rotation r0, $r1;
        double $d0, $d1, $d2, $d3;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        $r1 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $d3 = neg $d0;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        specialinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: void <init>(double,double,double,double,boolean)>($d3, $d0, $d1, $d2, 0);

        return $r1;
    }
