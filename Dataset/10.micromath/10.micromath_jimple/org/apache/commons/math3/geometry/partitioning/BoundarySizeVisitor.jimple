org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor extends java.lang.Object implements org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor
private double boundarySize
    void <init>()
    {
        org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor r0;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor: double boundarySize> = 0.0;

        return;
    }
    public double getSize()
    {
        org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor r0;
        double d0;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor;

        d0 = r0.<org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor: double boundarySize>;

        return d0;
    }
    public void visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        java.lang.Object $r2;
        org.apache.commons.math3.geometry.partitioning.BoundaryAttribute r3;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r4;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        r3 = (org.apache.commons.math3.geometry.partitioning.BoundaryAttribute) $r2;

        $r4 = virtualinvoke r3.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusOutside()>();

        if $r4 == null goto label1;

        $d0 = r0.<org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor: double boundarySize>;

        $r4 = virtualinvoke r3.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusOutside()>();

        $d1 = interfaceinvoke $r4.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: double getSize()>();

        $d0 = $d0 + $d1;

        r0.<org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor: double boundarySize> = $d0;

     label1:
        $r4 = virtualinvoke r3.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusInside()>();

        if $r4 == null goto label2;

        $d0 = r0.<org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor: double boundarySize>;

        $r4 = virtualinvoke r3.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusInside()>();

        $d1 = interfaceinvoke $r4.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: double getSize()>();

        $d0 = $d0 + $d1;

        r0.<org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor: double boundarySize> = $d0;

     label2:
        return;
    }
    public void visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        return;
    }
    public org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order r2;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r2 = <org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order: org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order MINUS_SUB_PLUS>;

        return r2;
    }
