org.apache.commons.math3.geometry.euclidean.threed.Plane extends java.lang.Object implements org.apache.commons.math3.geometry.partitioning.Hyperplane org.apache.commons.math3.geometry.partitioning.Embedding
private static final double DEFAULT_TOLERANCE
private org.apache.commons.math3.geometry.euclidean.threed.Vector3D origin
private double originOffset
private final double tolerance
private org.apache.commons.math3.geometry.euclidean.threed.Vector3D u
private org.apache.commons.math3.geometry.euclidean.threed.Vector3D v
private org.apache.commons.math3.geometry.euclidean.threed.Vector3D w
    public void <init>(org.apache.commons.math3.geometry.euclidean.threed.Plane)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0, $r1;
        double $d0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $d0 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double originOffset>;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double originOffset> = $d0;

        $r2 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D origin>;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D origin> = $r2;

        $r2 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D u>;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D u> = $r2;

        $r2 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D v>;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D v> = $r2;

        $r2 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w>;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w> = $r2;

        $d0 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double tolerance>;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double tolerance> = $d0;

        return;
    }
    public void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double)>($r1, 1.0E-10);

        return;
    }
    public void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d0 := @parameter1: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: void setNormal(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r1);

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double tolerance> = $d0;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double originOffset> = 0.0;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: void setFrame()>();

        return;
    }
    public void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r1, $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $r2 := @parameter1: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double)>($r1, $r2, 1.0E-10);

        return;
    }
    public void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r1, $r2;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $r2 := @parameter1: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d0 := @parameter2: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: void setNormal(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r2);

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double tolerance> = $d0;

        $r2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w>;

        $d0 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double dotProduct(org.apache.commons.math3.geometry.Vector)>($r2);

        $d0 = neg $d0;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double originOffset> = $d0;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: void setFrame()>();

        return;
    }
    public void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r1, $r2, $r3;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $r2 := @parameter1: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $r3 := @parameter2: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double)>($r1, $r2, $r3, 1.0E-10);

        return;
    }
    public void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r1, $r2, $r3;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $r2 := @parameter1: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $r3 := @parameter2: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d0 := @parameter3: double;

        $r2 = virtualinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D subtract(org.apache.commons.math3.geometry.Vector)>($r1);

        $r3 = virtualinvoke $r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D subtract(org.apache.commons.math3.geometry.Vector)>($r1);

        $r2 = virtualinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D crossProduct(org.apache.commons.math3.geometry.Vector)>($r3);

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double)>($r1, $r2, $d0);

        return;
    }
    public static org.apache.commons.math3.geometry.euclidean.threed.Vector3D intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane, org.apache.commons.math3.geometry.euclidean.threed.Plane, org.apache.commons.math3.geometry.euclidean.threed.Plane)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane $r0, $r1, $r2;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r3;
        byte $b0;

        $r0 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        $r1 := @parameter1: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        $r2 := @parameter2: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        $r3 = $r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w>;

        $d4 = virtualinvoke $r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $r3 = $r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w>;

        $d5 = virtualinvoke $r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $r3 = $r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w>;

        $d6 = virtualinvoke $r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d7 = $r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double originOffset>;

        $r3 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w>;

        $d8 = virtualinvoke $r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $r3 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w>;

        $d9 = virtualinvoke $r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $r3 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w>;

        $d10 = virtualinvoke $r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d11 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double originOffset>;

        $r3 = $r2.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w>;

        $d12 = virtualinvoke $r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $r3 = $r2.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w>;

        $d13 = virtualinvoke $r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $r3 = $r2.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w>;

        $d14 = virtualinvoke $r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d15 = $r2.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double originOffset>;

        d3 = $d9 * $d14;

        d2 = $d13 * $d10;

        d0 = d3 - d2;

        d3 = $d10 * $d12;

        d2 = $d14 * $d8;

        d1 = d3 - d2;

        d3 = $d8 * $d13;

        d2 = $d12 * $d9;

        d2 = d3 - d2;

        d3 = $d4 * d0;

        $d16 = $d5 * d1;

        d3 = d3 + $d16;

        $d16 = $d6 * d2;

        d3 = d3 + $d16;

        $d16 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d3);

        $b0 = $d16 cmpg 1.0E-10;

        if $b0 >= 0 goto label1;

        return null;

     label1:
        d3 = 1.0 / d3;

        $r3 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        d0 = neg d0;

        d0 = d0 * $d7;

        $d16 = $d6 * $d13;

        $d17 = $d14 * $d5;

        $d16 = $d16 - $d17;

        $d16 = $d16 * $d11;

        d0 = d0 - $d16;

        $d16 = $d10 * $d5;

        $d17 = $d6 * $d9;

        $d16 = $d16 - $d17;

        $d16 = $d16 * $d15;

        d0 = d0 - $d16;

        d0 = d0 * d3;

        d1 = neg d1;

        d1 = d1 * $d7;

        $d14 = $d14 * $d4;

        $d16 = $d6 * $d12;

        $d14 = $d14 - $d16;

        $d14 = $d14 * $d11;

        $d14 = d1 - $d14;

        $d6 = $d6 * $d8;

        $d10 = $d10 * $d4;

        $d10 = $d6 - $d10;

        $d10 = $d10 * $d15;

        $d10 = $d14 - $d10;

        $d10 = $d10 * d3;

        d2 = neg d2;

        $d7 = d2 * $d7;

        $d12 = $d5 * $d12;

        $d13 = $d13 * $d4;

        $d13 = $d12 - $d13;

        $d11 = $d13 * $d11;

        $d11 = $d7 - $d11;

        $d4 = $d9 * $d4;

        $d5 = $d5 * $d8;

        $d5 = $d4 - $d5;

        $d15 = $d5 * $d15;

        $d15 = $d11 - $d15;

        $d15 = $d15 * d3;

        specialinvoke $r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,double,double)>(d0, $d10, $d15);

        return $r3;
    }
    private void setFrame()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r1, $r2;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        $r1 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double originOffset>;

        $d0 = neg $d0;

        $r2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w>;

        specialinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($d0, $r2);

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D origin> = $r1;

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w>;

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D orthogonal()>();

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D u> = $r1;

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w>;

        $r2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D u>;

        $r1 = staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r1, $r2);

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D v> = $r1;

        return;
    }
    private void setNormal(org.apache.commons.math3.geometry.euclidean.threed.Vector3D) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r1, $r5;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        double $d0;
        byte $b0;
        org.apache.commons.math3.exception.MathArithmeticException $r3;
        java.lang.Object[] $r4;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d0 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getNorm()>();

        $b0 = $d0 cmpg 1.0E-10;

        if $b0 >= 0 goto label1;

        $r3 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats ZERO_NORM>;

        $r4 = newarray (java.lang.Object)[0];

        specialinvoke $r3.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r2, $r4);

        throw $r3;

     label1:
        $r5 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d0 = 1.0 / $d0;

        specialinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($d0, $r1);

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w> = $r5;

        return;
    }
    public boolean contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r1;
        double $d0, $d1;
        byte $b0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double getOffset(org.apache.commons.math3.geometry.Vector)>($r1);

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double tolerance>;

        $b0 = $d1 cmpg $d0;

        if $b0 >= 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public org.apache.commons.math3.geometry.euclidean.threed.Plane copySelf()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0, $r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        $r1 = new org.apache.commons.math3.geometry.euclidean.threed.Plane;

        specialinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.Plane: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Plane)>(r0);

        return $r1;
    }
    public volatile org.apache.commons.math3.geometry.partitioning.Hyperplane copySelf()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        r0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Plane copySelf()>();

        return r0;
    }
    public org.apache.commons.math3.geometry.euclidean.threed.Vector3D getNormal()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w>;

        return r1;
    }
    public double getOffset(org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0;
        double $d0, $d1;
        org.apache.commons.math3.geometry.Point r1;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r2, $r3;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        r1 := @parameter0: org.apache.commons.math3.geometry.Point;

        r2 = (org.apache.commons.math3.geometry.euclidean.threed.Vector3D) r1;

        $r3 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w>;

        $d1 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double dotProduct(org.apache.commons.math3.geometry.Vector)>($r3);

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double originOffset>;

        $d0 = $d1 + $d0;

        return $d0;
    }
    public double getOffset(org.apache.commons.math3.geometry.Vector)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0;
        org.apache.commons.math3.geometry.Vector r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        r1 := @parameter0: org.apache.commons.math3.geometry.Vector;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double getOffset(org.apache.commons.math3.geometry.Point)>(r1);

        return $d0;
    }
    public double getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0, $r1;
        double $d0, $d1;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double originOffset>;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: boolean sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)>($r1);

        if $z0 == 0 goto label2;

        $d1 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double originOffset>;

        $d1 = neg $d1;

     label1:
        $d0 = $d1 + $d0;

        return $d0;

     label2:
        $d1 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double originOffset>;

        goto label1;
    }
    public org.apache.commons.math3.geometry.euclidean.threed.Vector3D getOrigin()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D origin>;

        return r1;
    }
    public org.apache.commons.math3.geometry.euclidean.threed.Vector3D getPointAt(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, double)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D $r1;
        double $d0, $d1, $d2, $d3;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r2, $r3, $r4, $r5;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        $d0 := @parameter1: double;

        $r2 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d1 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getX()>();

        $r3 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D u>;

        $d2 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getY()>();

        $r4 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D v>;

        $d3 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double originOffset>;

        $d0 = $d0 - $d3;

        $r5 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w>;

        specialinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($d1, $r3, $d2, $r4, $d0, $r5);

        return $r2;
    }
    public double getTolerance()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0;
        double d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double tolerance>;

        return d0;
    }
    public org.apache.commons.math3.geometry.euclidean.threed.Vector3D getU()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D u>;

        return r1;
    }
    public org.apache.commons.math3.geometry.euclidean.threed.Vector3D getV()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D v>;

        return r1;
    }
    public org.apache.commons.math3.geometry.euclidean.threed.Line intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0, $r1, $r4;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r2, $r3;
        double $d0, $d1;
        byte $b0;
        org.apache.commons.math3.geometry.euclidean.threed.Line $r5;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        $r2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w>;

        $r3 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w>;

        $r3 = staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r2, $r3);

        $d0 = virtualinvoke $r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getNorm()>();

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double tolerance>;

        $b0 = $d0 cmpg $d1;

        if $b0 >= 0 goto label1;

        return null;

     label1:
        $r4 = new org.apache.commons.math3.geometry.euclidean.threed.Plane;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double tolerance>;

        specialinvoke $r4.<org.apache.commons.math3.geometry.euclidean.threed.Plane: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double)>($r3, $d0);

        $r2 = staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)>(r0, $r1, $r4);

        $r5 = new org.apache.commons.math3.geometry.euclidean.threed.Line;

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D add(org.apache.commons.math3.geometry.Vector)>($r3);

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double tolerance>;

        specialinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Line: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double)>($r2, $r3, $d0);

        return $r5;
    }
    public org.apache.commons.math3.geometry.euclidean.threed.Vector3D intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0;
        org.apache.commons.math3.geometry.euclidean.threed.Line $r1;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r2, $r3, $r4;
        double d0, $d1, $d2;
        byte $b0;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D $r5;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Line;

        $r3 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getDirection()>();

        $r4 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w>;

        d0 = virtualinvoke $r4.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double dotProduct(org.apache.commons.math3.geometry.Vector)>($r3);

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d0);

        $b0 = $d1 cmpg 1.0E-10;

        if $b0 >= 0 goto label1;

        return null;

     label1:
        $r5 = <org.apache.commons.math3.geometry.euclidean.oned.Vector1D: org.apache.commons.math3.geometry.euclidean.oned.Vector1D ZERO>;

        $r4 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D toSpace(org.apache.commons.math3.geometry.Point)>($r5);

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double originOffset>;

        $r2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w>;

        $d2 = virtualinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double dotProduct(org.apache.commons.math3.geometry.Vector)>($r4);

        $d1 = $d1 + $d2;

        $d1 = neg $d1;

        d0 = $d1 / d0;

        $r2 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        specialinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>(1.0, $r4, d0, $r3);

        return $r2;
    }
    public boolean isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Plane)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0, $r1;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r2, $r3;
        double $d0, $d1, $d2;
        byte $b0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        $r3 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w>;

        $r2 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w>;

        $d0 = staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r3, $r2);

        $b0 = $d0 cmpg 1.0E-10;

        if $b0 >= 0 goto label1;

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double originOffset>;

        $d2 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double originOffset>;

        $d1 = $d1 - $d2;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d1);

        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double tolerance>;

        $b0 = $d1 cmpg $d2;

        if $b0 < 0 goto label2;

     label1:
        $b0 = $d0 cmpl 3.141592653489793;

        if $b0 <= 0 goto label3;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double originOffset>;

        $d1 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double originOffset>;

        $d0 = $d0 + $d1;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double tolerance>;

        $b0 = $d0 cmpg $d1;

        if $b0 >= 0 goto label3;

     label2:
        return 1;

     label3:
        return 0;
    }
    public org.apache.commons.math3.geometry.Point project(org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0;
        org.apache.commons.math3.geometry.Point r1;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D $r2;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r3;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        r1 := @parameter0: org.apache.commons.math3.geometry.Point;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.twod.Vector2D toSubSpace(org.apache.commons.math3.geometry.Point)>(r1);

        $r3 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D toSpace(org.apache.commons.math3.geometry.Vector)>($r2);

        return $r3;
    }
    public void reset(org.apache.commons.math3.geometry.euclidean.threed.Plane)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0, $r1;
        double $d0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        $d0 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double originOffset>;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double originOffset> = $d0;

        $r2 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D origin>;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D origin> = $r2;

        $r2 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D u>;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D u> = $r2;

        $r2 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D v>;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D v> = $r2;

        $r2 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w>;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w> = $r2;

        return;
    }
    public void reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r1, $r2;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $r2 := @parameter1: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: void setNormal(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r2);

        $r2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w>;

        $d0 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double dotProduct(org.apache.commons.math3.geometry.Vector)>($r2);

        $d0 = neg $d0;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double originOffset> = $d0;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: void setFrame()>();

        return;
    }
    public void revertSelf()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r1, $r2;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D u>;

        $r2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D v>;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D u> = $r2;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D v> = r1;

        r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w>;

        r1 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D negate()>();

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w> = r1;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double originOffset>;

        $d0 = neg $d0;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double originOffset> = $d0;

        return;
    }
    public org.apache.commons.math3.geometry.euclidean.threed.Plane rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Rotation)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0, r3;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r1, $r4;
        org.apache.commons.math3.geometry.euclidean.threed.Rotation $r2;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $r2 := @parameter1: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        $r4 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D origin>;

        $r4 = virtualinvoke $r4.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D subtract(org.apache.commons.math3.geometry.Vector)>($r1);

        r3 = new org.apache.commons.math3.geometry.euclidean.threed.Plane;

        $r4 = virtualinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r4);

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D add(org.apache.commons.math3.geometry.Vector)>($r4);

        $r4 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w>;

        $r4 = virtualinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r4);

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double tolerance>;

        specialinvoke r3.<org.apache.commons.math3.geometry.euclidean.threed.Plane: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double)>($r1, $r4, $d0);

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D u>;

        $r1 = virtualinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r1);

        r3.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D u> = $r1;

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D v>;

        $r1 = virtualinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r1);

        r3.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D v> = $r1;

        return r3;
    }
    public boolean sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0, r3;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r1, $r4;
        double $d0;
        org.apache.commons.math3.geometry.partitioning.Hyperplane r2;
        byte $b0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        r2 := @parameter0: org.apache.commons.math3.geometry.partitioning.Hyperplane;

        r3 = (org.apache.commons.math3.geometry.euclidean.threed.Plane) r2;

        $r4 = r3.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w>;

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w>;

        $d0 = virtualinvoke $r4.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double dotProduct(org.apache.commons.math3.geometry.Vector)>($r1);

        $b0 = $d0 cmpl 0.0;

        if $b0 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public volatile org.apache.commons.math3.geometry.Point toSpace(org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0;
        org.apache.commons.math3.geometry.Point $r1;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        $r1 := @parameter0: org.apache.commons.math3.geometry.Point;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D toSpace(org.apache.commons.math3.geometry.Point)>($r1);

        return $r2;
    }
    public org.apache.commons.math3.geometry.euclidean.threed.Vector3D toSpace(org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0;
        org.apache.commons.math3.geometry.Point r1;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r2, $r3, $r4, $r5;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r6;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        r1 := @parameter0: org.apache.commons.math3.geometry.Point;

        r6 = (org.apache.commons.math3.geometry.euclidean.twod.Vector2D) r1;

        $r2 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d0 = virtualinvoke r6.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getX()>();

        $r3 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D u>;

        $d1 = virtualinvoke r6.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getY()>();

        $r4 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D v>;

        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double originOffset>;

        $d2 = neg $d2;

        $r5 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w>;

        specialinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($d0, $r3, $d1, $r4, $d2, $r5);

        return $r2;
    }
    public org.apache.commons.math3.geometry.euclidean.threed.Vector3D toSpace(org.apache.commons.math3.geometry.Vector)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0;
        org.apache.commons.math3.geometry.Vector r1;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        r1 := @parameter0: org.apache.commons.math3.geometry.Vector;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D toSpace(org.apache.commons.math3.geometry.Point)>(r1);

        return $r2;
    }
    public volatile org.apache.commons.math3.geometry.Point toSubSpace(org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0;
        org.apache.commons.math3.geometry.Point $r1;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        $r1 := @parameter0: org.apache.commons.math3.geometry.Point;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.twod.Vector2D toSubSpace(org.apache.commons.math3.geometry.Point)>($r1);

        return $r2;
    }
    public org.apache.commons.math3.geometry.euclidean.twod.Vector2D toSubSpace(org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0;
        org.apache.commons.math3.geometry.Point r1;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D $r2;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r3, $r4;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        r1 := @parameter0: org.apache.commons.math3.geometry.Point;

        r3 = (org.apache.commons.math3.geometry.euclidean.threed.Vector3D) r1;

        $r2 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        $r4 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D u>;

        $d0 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double dotProduct(org.apache.commons.math3.geometry.Vector)>($r4);

        $r4 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D v>;

        $d1 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double dotProduct(org.apache.commons.math3.geometry.Vector)>($r4);

        specialinvoke $r2.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: void <init>(double,double)>($d0, $d1);

        return $r2;
    }
    public org.apache.commons.math3.geometry.euclidean.twod.Vector2D toSubSpace(org.apache.commons.math3.geometry.Vector)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0;
        org.apache.commons.math3.geometry.Vector r1;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        r1 := @parameter0: org.apache.commons.math3.geometry.Vector;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.twod.Vector2D toSubSpace(org.apache.commons.math3.geometry.Point)>(r1);

        return $r2;
    }
    public org.apache.commons.math3.geometry.euclidean.threed.Plane translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0, r2;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r1, $r3;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        r2 = new org.apache.commons.math3.geometry.euclidean.threed.Plane;

        $r3 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D origin>;

        $r3 = virtualinvoke $r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D add(org.apache.commons.math3.geometry.Vector)>($r1);

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w>;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double tolerance>;

        specialinvoke r2.<org.apache.commons.math3.geometry.euclidean.threed.Plane: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double)>($r3, $r1, $d0);

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D u>;

        r2.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D u> = $r1;

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D v>;

        r2.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D v> = $r1;

        return r2;
    }
    public org.apache.commons.math3.geometry.euclidean.threed.SubPlane wholeHyperplane()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0;
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane $r1;
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet $r2;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        $r1 = new org.apache.commons.math3.geometry.euclidean.threed.SubPlane;

        $r2 = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double tolerance>;

        specialinvoke $r2.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: void <init>(double)>($d0);

        specialinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.SubPlane: void <init>(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)>(r0, $r2);

        return $r1;
    }
    public volatile org.apache.commons.math3.geometry.partitioning.SubHyperplane wholeHyperplane()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0;
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane $r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.SubPlane wholeHyperplane()>();

        return $r1;
    }
    public org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet wholeSpace()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0;
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        $r1 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double tolerance>;

        specialinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: void <init>(double)>($d0);

        return $r1;
    }
    public volatile org.apache.commons.math3.geometry.partitioning.Region wholeSpace()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0;
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet $r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet wholeSpace()>();

        return $r1;
    }
