org.apache.commons.math3.geometry.euclidean.threed.SubPlane extends org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane
    public void <init>(org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.Region)
    {
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane r0;
        org.apache.commons.math3.geometry.partitioning.Hyperplane r1;
        org.apache.commons.math3.geometry.partitioning.Region r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.SubPlane;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.Hyperplane;

        r2 := @parameter1: org.apache.commons.math3.geometry.partitioning.Region;

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: void <init>(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)>(r1, r2);

        return;
    }
    protected org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.Region)
    {
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane r0;
        org.apache.commons.math3.geometry.partitioning.Hyperplane r1;
        org.apache.commons.math3.geometry.partitioning.Region r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.SubPlane;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.Hyperplane;

        r2 := @parameter1: org.apache.commons.math3.geometry.partitioning.Region;

        r0 = new org.apache.commons.math3.geometry.euclidean.threed.SubPlane;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.SubPlane: void <init>(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)>(r1, r2);

        return r0;
    }
    public org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane split(org.apache.commons.math3.geometry.partitioning.Hyperplane)
    {
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane r0, $r22;
        org.apache.commons.math3.geometry.partitioning.Hyperplane r1;
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet $r2;
        org.apache.commons.math3.geometry.euclidean.threed.Plane r3, r4;
        org.apache.commons.math3.geometry.euclidean.threed.Line $r5;
        double $d0, $d1, $d2;
        byte $b0;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane $r6;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D $r7;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r8, $r13;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D $r9, r10, $r11, r12;
        org.apache.commons.math3.geometry.euclidean.twod.Line $r14;
        org.apache.commons.math3.geometry.euclidean.twod.SubLine $r15, $r16;
        org.apache.commons.math3.geometry.partitioning.Region $r17;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r18, $r19, $r21, $r23;
        boolean $z0;
        java.lang.Boolean $r20;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.SubPlane;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.Hyperplane;

        r3 = (org.apache.commons.math3.geometry.euclidean.threed.Plane) r1;

        r1 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.SubPlane: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        r4 = (org.apache.commons.math3.geometry.euclidean.threed.Plane) r1;

        $r5 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Line intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)>(r4);

        $d0 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double getTolerance()>();

        if $r5 != null goto label3;

        $d1 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)>(r4);

        $d2 = neg $d0;

        $b0 = $d1 cmpg $d2;

        if $b0 >= 0 goto label1;

        $r6 = new org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane;

        specialinvoke $r6.<org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane: void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)>(null, r0);

        return $r6;

     label1:
        $b0 = $d1 cmpl $d0;

        if $b0 <= 0 goto label2;

        $r6 = new org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane;

        specialinvoke $r6.<org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane: void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)>(r0, null);

        return $r6;

     label2:
        $r6 = new org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane;

        specialinvoke $r6.<org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane: void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)>(null, null);

        return $r6;

     label3:
        $r7 = <org.apache.commons.math3.geometry.euclidean.oned.Vector1D: org.apache.commons.math3.geometry.euclidean.oned.Vector1D ZERO>;

        $r8 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D toSpace(org.apache.commons.math3.geometry.Point)>($r7);

        $r9 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.twod.Vector2D toSubSpace(org.apache.commons.math3.geometry.Point)>($r8);

        r10 = $r9;

        $r7 = <org.apache.commons.math3.geometry.euclidean.oned.Vector1D: org.apache.commons.math3.geometry.euclidean.oned.Vector1D ONE>;

        $r8 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D toSpace(org.apache.commons.math3.geometry.Point)>($r7);

        $r11 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.twod.Vector2D toSubSpace(org.apache.commons.math3.geometry.Point)>($r8);

        r12 = $r11;

        $r8 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getDirection()>();

        $r13 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getNormal()>();

        $r8 = staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r8, $r13);

        $r13 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getNormal()>();

        $d1 = virtualinvoke $r8.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double dotProduct(org.apache.commons.math3.geometry.Vector)>($r13);

        $b0 = $d1 cmpg 0.0;

        if $b0 >= 0 goto label4;

        r10 = $r11;

        r12 = $r9;

     label4:
        $r14 = new org.apache.commons.math3.geometry.euclidean.twod.Line;

        specialinvoke $r14.<org.apache.commons.math3.geometry.euclidean.twod.Line: void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)>(r10, r12, $d0);

        $r15 = virtualinvoke $r14.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.twod.SubLine wholeHyperplane()>();

        $r14 = new org.apache.commons.math3.geometry.euclidean.twod.Line;

        specialinvoke $r14.<org.apache.commons.math3.geometry.euclidean.twod.Line: void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)>(r12, r10, $d0);

        $r16 = virtualinvoke $r14.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.twod.SubLine wholeHyperplane()>();

        $r17 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.SubPlane: org.apache.commons.math3.geometry.partitioning.Region getRemainingRegion()>();

        $r18 = interfaceinvoke $r17.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(0);

        $r18 = virtualinvoke $r18.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)>($r15);

        $r17 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.SubPlane: org.apache.commons.math3.geometry.partitioning.Region getRemainingRegion()>();

        $r19 = virtualinvoke $r18.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        $z0 = interfaceinvoke $r17.<org.apache.commons.math3.geometry.partitioning.Region: boolean isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r19);

        if $z0 == 0 goto label7;

        $r19 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r20 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        specialinvoke $r19.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r20);

     label5:
        $r17 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.SubPlane: org.apache.commons.math3.geometry.partitioning.Region getRemainingRegion()>();

        $r21 = virtualinvoke $r18.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        $z0 = interfaceinvoke $r17.<org.apache.commons.math3.geometry.partitioning.Region: boolean isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r21);

        if $z0 == 0 goto label8;

        $r21 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r20 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        specialinvoke $r21.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r20);

     label6:
        $r6 = new org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane;

        r0 = new org.apache.commons.math3.geometry.euclidean.threed.SubPlane;

        r3 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Plane copySelf()>();

        $r2 = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;

        specialinvoke $r2.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree,double)>($r19, $d0);

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.SubPlane: void <init>(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)>(r3, $r2);

        $r22 = new org.apache.commons.math3.geometry.euclidean.threed.SubPlane;

        r4 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Plane copySelf()>();

        $r2 = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;

        specialinvoke $r2.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree,double)>($r21, $d0);

        specialinvoke $r22.<org.apache.commons.math3.geometry.euclidean.threed.SubPlane: void <init>(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)>(r4, $r2);

        specialinvoke $r6.<org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane: void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)>(r0, $r22);

        return $r6;

     label7:
        $r19 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r21 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r20 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        specialinvoke $r21.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r20);

        $r23 = virtualinvoke $r18.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        specialinvoke $r19.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)>($r16, $r21, $r23, null);

        goto label5;

     label8:
        $r21 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r23 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r20 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        specialinvoke $r23.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r20);

        $r18 = virtualinvoke $r18.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        specialinvoke $r21.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)>($r15, $r23, $r18, null);

        goto label6;
    }
