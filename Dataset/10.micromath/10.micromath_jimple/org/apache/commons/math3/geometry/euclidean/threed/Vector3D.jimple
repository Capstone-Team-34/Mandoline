org.apache.commons.math3.geometry.euclidean.threed.Vector3D extends java.lang.Object implements java.io.Serializable org.apache.commons.math3.geometry.Vector
public static final org.apache.commons.math3.geometry.euclidean.threed.Vector3D MINUS_I
public static final org.apache.commons.math3.geometry.euclidean.threed.Vector3D MINUS_J
public static final org.apache.commons.math3.geometry.euclidean.threed.Vector3D MINUS_K
public static final org.apache.commons.math3.geometry.euclidean.threed.Vector3D NEGATIVE_INFINITY
public static final org.apache.commons.math3.geometry.euclidean.threed.Vector3D NaN
public static final org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_I
public static final org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_J
public static final org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_K
public static final org.apache.commons.math3.geometry.euclidean.threed.Vector3D POSITIVE_INFINITY
public static final org.apache.commons.math3.geometry.euclidean.threed.Vector3D ZERO
private static final long serialVersionUID
private final double x
private final double y
private final double z
    static void <clinit>()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r0;

        $r0 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        specialinvoke $r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,double,double)>(0.0, 0.0, 0.0);

        <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D ZERO> = $r0;

        $r0 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        specialinvoke $r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,double,double)>(1.0, 0.0, 0.0);

        <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_I> = $r0;

        $r0 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        specialinvoke $r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,double,double)>(-1.0, 0.0, 0.0);

        <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D MINUS_I> = $r0;

        $r0 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        specialinvoke $r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,double,double)>(0.0, 1.0, 0.0);

        <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_J> = $r0;

        $r0 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        specialinvoke $r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,double,double)>(0.0, -1.0, 0.0);

        <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D MINUS_J> = $r0;

        $r0 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        specialinvoke $r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,double,double)>(0.0, 0.0, 1.0);

        <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_K> = $r0;

        $r0 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        specialinvoke $r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,double,double)>(0.0, 0.0, -1.0);

        <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D MINUS_K> = $r0;

        $r0 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        specialinvoke $r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,double,double)>(#NaN, #NaN, #NaN);

        <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D NaN> = $r0;

        $r0 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        specialinvoke $r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,double,double)>(#Infinity, #Infinity, #Infinity);

        <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D POSITIVE_INFINITY> = $r0;

        $r0 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        specialinvoke $r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,double,double)>(#-Infinity, #-Infinity, #-Infinity);

        <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D NEGATIVE_INFINITY> = $r0;

        return;
    }
    public void <init>(double, double)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r0;
        double $d0, $d1, $d2, $d3;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double cos(double)>($d1);

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double cos(double)>($d0);

        $d3 = $d3 * $d2;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double x> = $d3;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sin(double)>($d0);

        $d0 = $d0 * $d2;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double y> = $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sin(double)>($d1);

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double z> = $d0;

        return;
    }
    public void <init>(double, double, double)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r0;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double x> = $d0;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double y> = $d1;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double z> = $d2;

        return;
    }
    public void <init>(double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r0, $r1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d0 := @parameter0: double;

        $r1 := @parameter1: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $d1 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double x>;

        $d1 = $d1 * $d0;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double x> = $d1;

        $d1 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double y>;

        $d1 = $d1 * $d0;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double y> = $d1;

        $d1 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double z>;

        $d0 = $d1 * $d0;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double z> = $d0;

        return;
    }
    public void <init>(double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r0, $r1, $r2;
        double $d0, $d1, $d2, $d3;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d0 := @parameter0: double;

        $r1 := @parameter1: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d1 := @parameter2: double;

        $r2 := @parameter3: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $d2 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double x>;

        $d3 = $r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double x>;

        $d2 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double)>($d0, $d2, $d1, $d3);

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double x> = $d2;

        $d2 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double y>;

        $d3 = $r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double y>;

        $d2 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double)>($d0, $d2, $d1, $d3);

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double y> = $d2;

        $d2 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double z>;

        $d3 = $r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double z>;

        $d0 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double)>($d0, $d2, $d1, $d3);

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double z> = $d0;

        return;
    }
    public void <init>(double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r0, $r1, $r2, $r3;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d0 := @parameter0: double;

        $r1 := @parameter1: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d1 := @parameter2: double;

        $r2 := @parameter3: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d2 := @parameter4: double;

        $r3 := @parameter5: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $d3 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double x>;

        $d4 = $r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double x>;

        $d5 = $r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double x>;

        $d3 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double,double,double)>($d0, $d3, $d1, $d4, $d2, $d5);

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double x> = $d3;

        $d3 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double y>;

        $d4 = $r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double y>;

        $d5 = $r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double y>;

        $d3 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double,double,double)>($d0, $d3, $d1, $d4, $d2, $d5);

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double y> = $d3;

        $d3 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double z>;

        $d4 = $r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double z>;

        $d5 = $r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double z>;

        $d0 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double,double,double)>($d0, $d3, $d1, $d4, $d2, $d5);

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double z> = $d0;

        return;
    }
    public void <init>(double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r0, $r1, $r2, $r3, $r4;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d0 := @parameter0: double;

        $r1 := @parameter1: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d1 := @parameter2: double;

        $r2 := @parameter3: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d2 := @parameter4: double;

        $r3 := @parameter5: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d3 := @parameter6: double;

        $r4 := @parameter7: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $d4 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double x>;

        $d5 = $r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double x>;

        $d6 = $r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double x>;

        $d7 = $r4.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double x>;

        $d4 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double,double,double,double,double)>($d0, $d4, $d1, $d5, $d2, $d6, $d3, $d7);

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double x> = $d4;

        $d4 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double y>;

        $d5 = $r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double y>;

        $d6 = $r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double y>;

        $d7 = $r4.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double y>;

        $d4 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double,double,double,double,double)>($d0, $d4, $d1, $d5, $d2, $d6, $d3, $d7);

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double y> = $d4;

        $d4 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double z>;

        $d5 = $r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double z>;

        $d6 = $r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double z>;

        $d7 = $r4.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double z>;

        $d0 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double,double,double,double,double)>($d0, $d4, $d1, $d5, $d2, $d6, $d3, $d7);

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double z> = $d0;

        return;
    }
    public void <init>(double[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r0;
        double[] $r1;
        int $i0;
        org.apache.commons.math3.exception.DimensionMismatchException $r2;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $r1 := @parameter0: double[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = lengthof $r1;

        if $i0 == 3 goto label1;

        $r2 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i0 = lengthof $r1;

        specialinvoke $r2.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i0, 3);

        throw $r2;

     label1:
        $d0 = $r1[0];

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double x> = $d0;

        $d0 = $r1[1];

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double y> = $d0;

        $d0 = $r1[2];

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double z> = $d0;

        return;
    }
    public static double angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r0, $r1;
        double d0, d1, $d2, $d3;
        byte $b0;
        org.apache.commons.math3.exception.MathArithmeticException $r2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3;
        java.lang.Object[] $r4;

        $r0 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $r1 := @parameter1: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        d0 = virtualinvoke $r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getNorm()>();

        d1 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getNorm()>();

        d0 = d0 * d1;

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        $r2 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats ZERO_NORM>;

        $r4 = newarray (java.lang.Object)[0];

        specialinvoke $r2.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r3, $r4);

        throw $r2;

     label1:
        $d2 = virtualinvoke $r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double dotProduct(org.apache.commons.math3.geometry.Vector)>($r1);

        d1 = d0 * 0.9999;

        $d3 = neg d1;

        $b0 = $d2 cmpg $d3;

        if $b0 < 0 goto label2;

        $b0 = $d2 cmpl d1;

        if $b0 <= 0 goto label4;

     label2:
        $r0 = staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r0, $r1);

        $b0 = $d2 cmpl 0.0;

        if $b0 < 0 goto label3;

        d1 = virtualinvoke $r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getNorm()>();

        d0 = d1 / d0;

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double asin(double)>(d0);

        return d0;

     label3:
        d1 = virtualinvoke $r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getNorm()>();

        d0 = d1 / d0;

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double asin(double)>(d0);

        d0 = 3.141592653589793 - d0;

        return d0;

     label4:
        d0 = $d2 / d0;

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double acos(double)>(d0);

        return d0;
    }
    public static org.apache.commons.math3.geometry.euclidean.threed.Vector3D crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r0, $r1;

        $r0 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $r1 := @parameter1: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $r0 = virtualinvoke $r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D crossProduct(org.apache.commons.math3.geometry.Vector)>($r1);

        return $r0;
    }
    public static double distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r0, $r1;
        double $d0;

        $r0 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $r1 := @parameter1: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d0 = virtualinvoke $r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double distance(org.apache.commons.math3.geometry.Vector)>($r1);

        return $d0;
    }
    public static double distance1(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r0, $r1;
        double $d0;

        $r0 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $r1 := @parameter1: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d0 = virtualinvoke $r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double distance1(org.apache.commons.math3.geometry.Vector)>($r1);

        return $d0;
    }
    public static double distanceInf(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r0, $r1;
        double $d0;

        $r0 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $r1 := @parameter1: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d0 = virtualinvoke $r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double distanceInf(org.apache.commons.math3.geometry.Vector)>($r1);

        return $d0;
    }
    public static double distanceSq(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r0, $r1;
        double $d0;

        $r0 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $r1 := @parameter1: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d0 = virtualinvoke $r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double distanceSq(org.apache.commons.math3.geometry.Vector)>($r1);

        return $d0;
    }
    public static double dotProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r0, $r1;
        double $d0;

        $r0 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $r1 := @parameter1: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d0 = virtualinvoke $r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double dotProduct(org.apache.commons.math3.geometry.Vector)>($r1);

        return $d0;
    }
    public volatile org.apache.commons.math3.geometry.Vector add(double, org.apache.commons.math3.geometry.Vector)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r0;
        double $d0;
        org.apache.commons.math3.geometry.Vector $r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d0 := @parameter0: double;

        $r1 := @parameter1: org.apache.commons.math3.geometry.Vector;

        r0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D add(double,org.apache.commons.math3.geometry.Vector)>($d0, $r1);

        return r0;
    }
    public volatile org.apache.commons.math3.geometry.Vector add(org.apache.commons.math3.geometry.Vector)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r0;
        org.apache.commons.math3.geometry.Vector $r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $r1 := @parameter0: org.apache.commons.math3.geometry.Vector;

        r0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D add(org.apache.commons.math3.geometry.Vector)>($r1);

        return r0;
    }
    public org.apache.commons.math3.geometry.euclidean.threed.Vector3D add(double, org.apache.commons.math3.geometry.Vector)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r0, $r2, $r3;
        double $d0;
        org.apache.commons.math3.geometry.Vector r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d0 := @parameter0: double;

        r1 := @parameter1: org.apache.commons.math3.geometry.Vector;

        $r2 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $r3 = (org.apache.commons.math3.geometry.euclidean.threed.Vector3D) r1;

        specialinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>(1.0, r0, $d0, $r3);

        return $r2;
    }
    public org.apache.commons.math3.geometry.euclidean.threed.Vector3D add(org.apache.commons.math3.geometry.Vector)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r0, $r2, r3;
        org.apache.commons.math3.geometry.Vector r1;
        double $d0, $d1, $d2, $d3;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        r1 := @parameter0: org.apache.commons.math3.geometry.Vector;

        r3 = (org.apache.commons.math3.geometry.euclidean.threed.Vector3D) r1;

        $r2 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double x>;

        $d2 = r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double x>;

        $d1 = $d1 + $d2;

        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double y>;

        $d0 = r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double y>;

        $d2 = $d2 + $d0;

        $d3 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double z>;

        $d0 = r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double z>;

        $d0 = $d3 + $d0;

        specialinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,double,double)>($d1, $d2, $d0);

        return $r2;
    }
    public org.apache.commons.math3.geometry.euclidean.threed.Vector3D crossProduct(org.apache.commons.math3.geometry.Vector)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r0, $r2, r3;
        org.apache.commons.math3.geometry.Vector r1;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        r1 := @parameter0: org.apache.commons.math3.geometry.Vector;

        r3 = (org.apache.commons.math3.geometry.euclidean.threed.Vector3D) r1;

        $r2 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double y>;

        $d1 = r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double z>;

        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double z>;

        $d2 = neg $d2;

        $d3 = r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double y>;

        $d0 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double)>($d0, $d1, $d2, $d3);

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double z>;

        $d2 = r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double x>;

        $d3 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double x>;

        $d3 = neg $d3;

        $d4 = r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double z>;

        $d1 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double)>($d1, $d2, $d3, $d4);

        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double x>;

        $d3 = r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double y>;

        $d4 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double y>;

        $d4 = neg $d4;

        $d5 = r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double x>;

        $d2 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double)>($d2, $d3, $d4, $d5);

        specialinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,double,double)>($d0, $d1, $d2);

        return $r2;
    }
    public double distance(org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r0, r2;
        org.apache.commons.math3.geometry.Point r1;
        double d0, d1, d2, $d3;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        r1 := @parameter0: org.apache.commons.math3.geometry.Point;

        r2 = (org.apache.commons.math3.geometry.euclidean.threed.Vector3D) r1;

        d0 = r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double x>;

        d1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double x>;

        d0 = d0 - d1;

        d1 = r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double y>;

        d2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double y>;

        d1 = d1 - d2;

        d2 = r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double z>;

        $d3 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double z>;

        d2 = d2 - $d3;

        d0 = d0 * d0;

        d1 = d1 * d1;

        d0 = d0 + d1;

        d1 = d2 * d2;

        d0 = d0 + d1;

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d0);

        return d0;
    }
    public double distance(org.apache.commons.math3.geometry.Vector)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r0;
        org.apache.commons.math3.geometry.Vector r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        r1 := @parameter0: org.apache.commons.math3.geometry.Vector;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double distance(org.apache.commons.math3.geometry.Point)>(r1);

        return $d0;
    }
    public double distance1(org.apache.commons.math3.geometry.Vector)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r0, r2;
        org.apache.commons.math3.geometry.Vector r1;
        double $d0, $d1, $d2, $d3;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        r1 := @parameter0: org.apache.commons.math3.geometry.Vector;

        r2 = (org.apache.commons.math3.geometry.euclidean.threed.Vector3D) r1;

        $d0 = r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double x>;

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double x>;

        $d0 = $d0 - $d1;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        $d1 = r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double y>;

        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double y>;

        $d1 = $d1 - $d2;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d1);

        $d2 = r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double z>;

        $d3 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double z>;

        $d2 = $d2 - $d3;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d2);

        $d0 = $d0 + $d1;

        $d0 = $d0 + $d2;

        return $d0;
    }
    public double distanceInf(org.apache.commons.math3.geometry.Vector)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r0, r2;
        org.apache.commons.math3.geometry.Vector r1;
        double $d0, $d1, $d2, $d3;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        r1 := @parameter0: org.apache.commons.math3.geometry.Vector;

        r2 = (org.apache.commons.math3.geometry.euclidean.threed.Vector3D) r1;

        $d0 = r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double x>;

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double x>;

        $d0 = $d0 - $d1;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        $d1 = r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double y>;

        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double y>;

        $d1 = $d1 - $d2;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d1);

        $d2 = r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double z>;

        $d3 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double z>;

        $d2 = $d2 - $d3;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d2);

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>($d0, $d1);

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>($d0, $d2);

        return $d0;
    }
    public double distanceSq(org.apache.commons.math3.geometry.Vector)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r0, r2;
        org.apache.commons.math3.geometry.Vector r1;
        double d0, d1, d2, $d3;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        r1 := @parameter0: org.apache.commons.math3.geometry.Vector;

        r2 = (org.apache.commons.math3.geometry.euclidean.threed.Vector3D) r1;

        d0 = r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double x>;

        d1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double x>;

        d0 = d0 - d1;

        d1 = r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double y>;

        d2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double y>;

        d1 = d1 - d2;

        d2 = r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double z>;

        $d3 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double z>;

        d2 = d2 - $d3;

        d0 = d0 * d0;

        d1 = d1 * d1;

        d0 = d0 + d1;

        d1 = d2 * d2;

        d0 = d0 + d1;

        return d0;
    }
    public double dotProduct(org.apache.commons.math3.geometry.Vector)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r0, r2;
        org.apache.commons.math3.geometry.Vector r1;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        r1 := @parameter0: org.apache.commons.math3.geometry.Vector;

        r2 = (org.apache.commons.math3.geometry.euclidean.threed.Vector3D) r1;

        $d5 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double x>;

        $d0 = r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double x>;

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double y>;

        $d2 = r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double y>;

        $d3 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double z>;

        $d4 = r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double z>;

        $d0 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double,double,double)>($d5, $d0, $d1, $d2, $d3, $d4);

        return $d0;
    }
    public boolean equals(java.lang.Object)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r0, r2;
        java.lang.Object $r1;
        boolean $z0;
        double $d0, $d1;
        byte $b0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $r1 := @parameter0: java.lang.Object;

        if r0 != $r1 goto label1;

        return 1;

     label1:
        $z0 = $r1 instanceof org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        if $z0 == 0 goto label3;

        r2 = (org.apache.commons.math3.geometry.euclidean.threed.Vector3D) $r1;

        $z0 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: boolean isNaN()>();

        if $z0 == 0 goto label2;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: boolean isNaN()>();

        return $z0;

     label2:
        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double x>;

        $d1 = r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double x>;

        $b0 = $d0 cmpl $d1;

        if $b0 != 0 goto label3;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double y>;

        $d1 = r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double y>;

        $b0 = $d0 cmpl $d1;

        if $b0 != 0 goto label3;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double z>;

        $d1 = r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double z>;

        $b0 = $d0 cmpl $d1;

        if $b0 == 0 goto label4;

     label3:
        return 0;

     label4:
        return 1;
    }
    public double getAlpha()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double y>;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double x>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d1, $d0);

        return $d0;
    }
    public double getDelta()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double z>;

        $d1 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getNorm()>();

        $d0 = $d0 / $d1;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double asin(double)>($d0);

        return $d0;
    }
    public double getNorm()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r0;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double x>;

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double x>;

        $d0 = $d0 * $d1;

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double y>;

        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double y>;

        $d1 = $d1 * $d2;

        $d0 = $d0 + $d1;

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double z>;

        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double z>;

        $d1 = $d1 * $d2;

        $d0 = $d0 + $d1;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d0);

        return $d0;
    }
    public double getNorm1()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double x>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double y>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d1);

        $d0 = $d0 + $d1;

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double z>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d1);

        $d0 = $d0 + $d1;

        return $d0;
    }
    public double getNormInf()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double x>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double y>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d1);

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>($d0, $d1);

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double z>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d1);

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>($d0, $d1);

        return $d0;
    }
    public double getNormSq()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r0;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double x>;

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double x>;

        $d0 = $d0 * $d1;

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double y>;

        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double y>;

        $d1 = $d1 * $d2;

        $d0 = $d0 + $d1;

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double z>;

        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double z>;

        $d1 = $d1 * $d2;

        $d0 = $d0 + $d1;

        return $d0;
    }
    public org.apache.commons.math3.geometry.Space getSpace()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r0;
        org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D $r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $r1 = staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D: org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D getInstance()>();

        return $r1;
    }
    public double getX()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r0;
        double d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double x>;

        return d0;
    }
    public double getY()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r0;
        double d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double y>;

        return d0;
    }
    public double getZ()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r0;
        double d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double z>;

        return d0;
    }
    public volatile org.apache.commons.math3.geometry.Vector getZero()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        r0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getZero()>();

        return r0;
    }
    public org.apache.commons.math3.geometry.euclidean.threed.Vector3D getZero()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        r0 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D ZERO>;

        return r0;
    }
    public int hashCode()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r0;
        boolean $z0;
        double $d0;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: boolean isNaN()>();

        if $z0 == 0 goto label1;

        return 642;

     label1:
        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double x>;

        $i0 = staticinvoke <org.apache.commons.math3.util.MathUtils: int hash(double)>($d0);

        $i0 = $i0 * 164;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double y>;

        $i1 = staticinvoke <org.apache.commons.math3.util.MathUtils: int hash(double)>($d0);

        $i1 = $i1 * 3;

        $i0 = $i0 + $i1;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double z>;

        $i1 = staticinvoke <org.apache.commons.math3.util.MathUtils: int hash(double)>($d0);

        $i0 = $i0 + $i1;

        $i0 = $i0 * 643;

        return $i0;
    }
    public boolean isInfinite()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r0;
        boolean $z0;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: boolean isNaN()>();

        if $z0 != 0 goto label2;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double x>;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d0);

        if $z0 != 0 goto label1;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double y>;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d0);

        if $z0 != 0 goto label1;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double z>;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d0);

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    public boolean isNaN()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r0;
        double $d0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double x>;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 != 0 goto label1;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double y>;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 != 0 goto label1;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double z>;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    public volatile org.apache.commons.math3.geometry.Vector negate()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        r0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D negate()>();

        return r0;
    }
    public org.apache.commons.math3.geometry.euclidean.threed.Vector3D negate()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r0, $r1;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $r1 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double x>;

        $d0 = neg $d0;

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double y>;

        $d1 = neg $d1;

        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double z>;

        $d2 = neg $d2;

        specialinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,double,double)>($d0, $d1, $d2);

        return $r1;
    }
    public volatile org.apache.commons.math3.geometry.Vector normalize() throws org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        r0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D normalize()>();

        return r0;
    }
    public org.apache.commons.math3.geometry.euclidean.threed.Vector3D normalize() throws org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r0;
        org.apache.commons.math3.exception.util.LocalizedFormats $r1;
        double $d0;
        byte $b0;
        org.apache.commons.math3.exception.MathArithmeticException $r2;
        java.lang.Object[] $r3;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getNorm()>();

        $b0 = $d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        $r2 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r1 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR>;

        $r3 = newarray (java.lang.Object)[0];

        specialinvoke $r2.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r1, $r3);

        throw $r2;

     label1:
        $d0 = 1.0 / $d0;

        r0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D scalarMultiply(double)>($d0);

        return r0;
    }
    public org.apache.commons.math3.geometry.euclidean.threed.Vector3D orthogonal() throws org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r0, $r4;
        double d0, $d1, $d2;
        byte $b0;
        org.apache.commons.math3.exception.MathArithmeticException $r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        java.lang.Object[] $r3;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        d0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getNorm()>();

        d0 = 0.6 * d0;

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        $r1 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats ZERO_NORM>;

        $r3 = newarray (java.lang.Object)[0];

        specialinvoke $r1.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r2, $r3);

        throw $r1;

     label1:
        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double x>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d1);

        $b0 = $d1 cmpg d0;

        if $b0 > 0 goto label2;

        d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double y>;

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double y>;

        d0 = d0 * $d1;

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double z>;

        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double z>;

        $d1 = $d1 * $d2;

        d0 = d0 + $d1;

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d0);

        $d1 = 1.0 / d0;

        $r4 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double z>;

        d0 = d0 * $d1;

        $d2 = neg $d1;

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double y>;

        $d1 = $d2 * $d1;

        specialinvoke $r4.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,double,double)>(0.0, d0, $d1);

        return $r4;

     label2:
        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double y>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d1);

        $b0 = $d1 cmpg d0;

        if $b0 > 0 goto label3;

        d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double x>;

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double x>;

        d0 = d0 * $d1;

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double z>;

        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double z>;

        $d1 = $d1 * $d2;

        d0 = d0 + $d1;

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d0);

        d0 = 1.0 / d0;

        $r4 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d1 = neg d0;

        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double z>;

        $d1 = $d1 * $d2;

        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double x>;

        d0 = $d2 * d0;

        specialinvoke $r4.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,double,double)>($d1, 0.0, d0);

        return $r4;

     label3:
        d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double x>;

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double x>;

        d0 = d0 * $d1;

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double y>;

        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double y>;

        $d1 = $d1 * $d2;

        d0 = d0 + $d1;

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d0);

        $d1 = 1.0 / d0;

        $r4 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double y>;

        d0 = d0 * $d1;

        $d1 = neg $d1;

        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double x>;

        $d1 = $d1 * $d2;

        specialinvoke $r4.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,double,double)>(d0, $d1, 0.0);

        return $r4;
    }
    public volatile org.apache.commons.math3.geometry.Vector scalarMultiply(double)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d0 := @parameter0: double;

        r0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D scalarMultiply(double)>($d0);

        return r0;
    }
    public org.apache.commons.math3.geometry.euclidean.threed.Vector3D scalarMultiply(double)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r0, $r1;
        double $d0, $d1, $d2, $d3;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d0 := @parameter0: double;

        $r1 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double x>;

        $d1 = $d1 * $d0;

        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double y>;

        $d2 = $d2 * $d0;

        $d3 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double z>;

        $d0 = $d3 * $d0;

        specialinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,double,double)>($d1, $d2, $d0);

        return $r1;
    }
    public volatile org.apache.commons.math3.geometry.Vector subtract(double, org.apache.commons.math3.geometry.Vector)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r0;
        double $d0;
        org.apache.commons.math3.geometry.Vector $r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d0 := @parameter0: double;

        $r1 := @parameter1: org.apache.commons.math3.geometry.Vector;

        r0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D subtract(double,org.apache.commons.math3.geometry.Vector)>($d0, $r1);

        return r0;
    }
    public volatile org.apache.commons.math3.geometry.Vector subtract(org.apache.commons.math3.geometry.Vector)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r0;
        org.apache.commons.math3.geometry.Vector $r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $r1 := @parameter0: org.apache.commons.math3.geometry.Vector;

        r0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D subtract(org.apache.commons.math3.geometry.Vector)>($r1);

        return r0;
    }
    public org.apache.commons.math3.geometry.euclidean.threed.Vector3D subtract(double, org.apache.commons.math3.geometry.Vector)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r0, $r2, $r3;
        double $d0;
        org.apache.commons.math3.geometry.Vector r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d0 := @parameter0: double;

        r1 := @parameter1: org.apache.commons.math3.geometry.Vector;

        $r2 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d0 = neg $d0;

        $r3 = (org.apache.commons.math3.geometry.euclidean.threed.Vector3D) r1;

        specialinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>(1.0, r0, $d0, $r3);

        return $r2;
    }
    public org.apache.commons.math3.geometry.euclidean.threed.Vector3D subtract(org.apache.commons.math3.geometry.Vector)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r0, $r2, r3;
        org.apache.commons.math3.geometry.Vector r1;
        double $d0, $d1, $d2, $d3;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        r1 := @parameter0: org.apache.commons.math3.geometry.Vector;

        r3 = (org.apache.commons.math3.geometry.euclidean.threed.Vector3D) r1;

        $r2 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double x>;

        $d2 = r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double x>;

        $d1 = $d1 - $d2;

        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double y>;

        $d0 = r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double y>;

        $d2 = $d2 - $d0;

        $d3 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double z>;

        $d0 = r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double z>;

        $d0 = $d3 - $d0;

        specialinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,double,double)>($d1, $d2, $d0);

        return $r2;
    }
    public double[] toArray()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r0;
        double[] $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $r1 = newarray (double)[3];

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double x>;

        $r1[0] = $d0;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double y>;

        $r1[1] = $d0;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double z>;

        $r1[2] = $d0;

        return $r1;
    }
    public java.lang.String toString()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormat $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $r1 = staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormat: org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormat getInstance()>();

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormat: java.lang.String format(org.apache.commons.math3.geometry.Vector)>(r0);

        return $r2;
    }
    public java.lang.String toString(java.text.NumberFormat)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r0;
        java.text.NumberFormat $r1;
        java.lang.String $r2;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormat $r3;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $r1 := @parameter0: java.text.NumberFormat;

        $r3 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormat;

        specialinvoke $r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormat: void <init>(java.text.NumberFormat)>($r1);

        $r2 = virtualinvoke $r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormat: java.lang.String format(org.apache.commons.math3.geometry.Vector)>(r0);

        return $r2;
    }
