org.apache.commons.math3.geometry.euclidean.twod.Line extends java.lang.Object implements org.apache.commons.math3.geometry.partitioning.Hyperplane org.apache.commons.math3.geometry.partitioning.Embedding
private static final double DEFAULT_TOLERANCE
private double angle
private double cos
private double originOffset
private org.apache.commons.math3.geometry.euclidean.twod.Line reverse
private double sin
private final double tolerance
    private void <init>(double, double, double, double, double)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Line r0;
        double $d0, $d1, $d2, $d3, $d4;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Line;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $d3 := @parameter3: double;

        $d4 := @parameter4: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double angle> = $d0;

        r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double cos> = $d1;

        r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double sin> = $d2;

        r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double originOffset> = $d3;

        r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double tolerance> = $d4;

        r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.twod.Line reverse> = null;

        return;
    }
    void <init>(double, double, double, double, double, org.apache.commons.math3.geometry.euclidean.twod.Line$1)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Line r0;
        double $d0, $d1, $d2, $d3, $d4;
        org.apache.commons.math3.geometry.euclidean.twod.Line$1 $r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Line;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $d3 := @parameter3: double;

        $d4 := @parameter4: double;

        $r1 := @parameter5: org.apache.commons.math3.geometry.euclidean.twod.Line$1;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: void <init>(double,double,double,double,double)>($d0, $d1, $d2, $d3, $d4);

        return;
    }
    public void <init>(org.apache.commons.math3.geometry.euclidean.twod.Line)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Line r0, $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Line;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.twod.Line;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $d0 = $r1.<org.apache.commons.math3.geometry.euclidean.twod.Line: double angle>;

        $d0 = staticinvoke <org.apache.commons.math3.util.MathUtils: double normalizeAngle(double,double)>($d0, 3.141592653589793);

        r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double angle> = $d0;

        $d0 = $r1.<org.apache.commons.math3.geometry.euclidean.twod.Line: double cos>;

        r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double cos> = $d0;

        $d0 = $r1.<org.apache.commons.math3.geometry.euclidean.twod.Line: double sin>;

        r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double sin> = $d0;

        $d0 = $r1.<org.apache.commons.math3.geometry.euclidean.twod.Line: double originOffset>;

        r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double originOffset> = $d0;

        $d0 = $r1.<org.apache.commons.math3.geometry.euclidean.twod.Line: double tolerance>;

        r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double tolerance> = $d0;

        r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.twod.Line reverse> = null;

        return;
    }
    public void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, double)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Line r0;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Line;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        $d0 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double,double)>($r1, $d0, 1.0E-10);

        return;
    }
    public void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, double, double)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Line r0;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D $r1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Line;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        $d0 := @parameter1: double;

        $d1 := @parameter2: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: void reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)>($r1, $d0);

        r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double tolerance> = $d1;

        return;
    }
    public void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Line r0;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D $r1, $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Line;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        $r2 := @parameter1: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)>($r1, $r2, 1.0E-10);

        return;
    }
    public void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D, double)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Line r0;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D $r1, $r2;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Line;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        $r2 := @parameter1: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        $d0 := @parameter2: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: void reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)>($r1, $r2);

        r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double tolerance> = $d0;

        return;
    }
    static double access$000(org.apache.commons.math3.geometry.euclidean.twod.Line)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Line $r0;
        double d0;

        $r0 := @parameter0: org.apache.commons.math3.geometry.euclidean.twod.Line;

        d0 = $r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double cos>;

        return d0;
    }
    static double access$100(org.apache.commons.math3.geometry.euclidean.twod.Line)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Line $r0;
        double d0;

        $r0 := @parameter0: org.apache.commons.math3.geometry.euclidean.twod.Line;

        d0 = $r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double sin>;

        return d0;
    }
    static double access$200(org.apache.commons.math3.geometry.euclidean.twod.Line)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Line $r0;
        double d0;

        $r0 := @parameter0: org.apache.commons.math3.geometry.euclidean.twod.Line;

        d0 = $r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double originOffset>;

        return d0;
    }
    static double access$300(org.apache.commons.math3.geometry.euclidean.twod.Line)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Line $r0;
        double d0;

        $r0 := @parameter0: org.apache.commons.math3.geometry.euclidean.twod.Line;

        d0 = $r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double tolerance>;

        return d0;
    }
    public static org.apache.commons.math3.geometry.partitioning.Transform getTransform(double, double, double, double, double, double) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        double $d0, $d1, $d2, $d3, $d4, $d5;
        org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform $r0;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $d3 := @parameter3: double;

        $d4 := @parameter4: double;

        $d5 := @parameter5: double;

        $r0 = new org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform;

        specialinvoke $r0.<org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform: void <init>(double,double,double,double,double,double)>($d0, $d1, $d2, $d3, $d4, $d5);

        return $r0;
    }
    public static org.apache.commons.math3.geometry.partitioning.Transform getTransform(java.awt.geom.AffineTransform) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        java.awt.geom.AffineTransform $r0;
        double[] r1;
        org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform $r2;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        $r0 := @parameter0: java.awt.geom.AffineTransform;

        r1 = newarray (double)[6];

        virtualinvoke $r0.<java.awt.geom.AffineTransform: void getMatrix(double[])>(r1);

        $r2 = new org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform;

        $d0 = r1[0];

        $d1 = r1[1];

        $d2 = r1[2];

        $d3 = r1[3];

        $d4 = r1[4];

        $d5 = r1[5];

        specialinvoke $r2.<org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform: void <init>(double,double,double,double,double,double)>($d0, $d1, $d2, $d3, $d4, $d5);

        return $r2;
    }
    private void unlinkReverse()
    {
        org.apache.commons.math3.geometry.euclidean.twod.Line r0, $r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Line;

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.twod.Line reverse>;

        if $r1 == null goto label1;

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.twod.Line reverse>;

        $r1.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.twod.Line reverse> = null;

     label1:
        r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.twod.Line reverse> = null;

        return;
    }
    public boolean contains(org.apache.commons.math3.geometry.euclidean.twod.Vector2D)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Line r0;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D $r1;
        double $d0, $d1;
        byte $b0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Line;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double getOffset(org.apache.commons.math3.geometry.Vector)>($r1);

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double tolerance>;

        $b0 = $d1 cmpg $d0;

        if $b0 >= 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public org.apache.commons.math3.geometry.euclidean.twod.Line copySelf()
    {
        org.apache.commons.math3.geometry.euclidean.twod.Line r0, $r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Line;

        $r1 = new org.apache.commons.math3.geometry.euclidean.twod.Line;

        specialinvoke $r1.<org.apache.commons.math3.geometry.euclidean.twod.Line: void <init>(org.apache.commons.math3.geometry.euclidean.twod.Line)>(r0);

        return $r1;
    }
    public volatile org.apache.commons.math3.geometry.partitioning.Hyperplane copySelf()
    {
        org.apache.commons.math3.geometry.euclidean.twod.Line r0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Line;

        r0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.twod.Line copySelf()>();

        return r0;
    }
    public double distance(org.apache.commons.math3.geometry.euclidean.twod.Vector2D)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Line r0;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Line;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double getOffset(org.apache.commons.math3.geometry.Vector)>($r1);

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        return $d0;
    }
    public double getAngle()
    {
        org.apache.commons.math3.geometry.euclidean.twod.Line r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Line;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double angle>;

        $d0 = staticinvoke <org.apache.commons.math3.util.MathUtils: double normalizeAngle(double,double)>($d0, 3.141592653589793);

        return $d0;
    }
    public double getOffset(org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Line r0;
        org.apache.commons.math3.geometry.Point r1;
        double $d0, $d1, $d2, $d3, $d4;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Line;

        r1 := @parameter0: org.apache.commons.math3.geometry.Point;

        r2 = (org.apache.commons.math3.geometry.euclidean.twod.Vector2D) r1;

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double sin>;

        $d2 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getX()>();

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double cos>;

        $d3 = neg $d0;

        $d4 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getY()>();

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double originOffset>;

        $d1 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double,double,double)>($d1, $d2, $d3, $d4, 1.0, $d0);

        return $d1;
    }
    public double getOffset(org.apache.commons.math3.geometry.Vector)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Line r0;
        org.apache.commons.math3.geometry.Vector r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Line;

        r1 := @parameter0: org.apache.commons.math3.geometry.Vector;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double getOffset(org.apache.commons.math3.geometry.Point)>(r1);

        return $d0;
    }
    public double getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Line r0, $r1;
        double $d0, $d1, $d2, $d3, $d4;
        byte $b0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Line;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.twod.Line;

        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double originOffset>;

        $d3 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double cos>;

        $d4 = $r1.<org.apache.commons.math3.geometry.euclidean.twod.Line: double cos>;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double sin>;

        $d1 = $r1.<org.apache.commons.math3.geometry.euclidean.twod.Line: double sin>;

        $d0 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double)>($d3, $d4, $d0, $d1);

        $b0 = $d0 cmpl 0.0;

        if $b0 <= 0 goto label2;

        $d0 = $r1.<org.apache.commons.math3.geometry.euclidean.twod.Line: double originOffset>;

        $d0 = neg $d0;

     label1:
        $d2 = $d0 + $d2;

        return $d2;

     label2:
        $d0 = $r1.<org.apache.commons.math3.geometry.euclidean.twod.Line: double originOffset>;

        goto label1;
    }
    public double getOriginOffset()
    {
        org.apache.commons.math3.geometry.euclidean.twod.Line r0;
        double d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Line;

        d0 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double originOffset>;

        return d0;
    }
    public org.apache.commons.math3.geometry.euclidean.twod.Vector2D getPointAt(org.apache.commons.math3.geometry.euclidean.oned.Vector1D, double)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Line r0;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D $r1;
        double $d0, d1, $d2, $d3, $d4;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Line;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        $d0 := @parameter1: double;

        $d4 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double getX()>();

        d1 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double originOffset>;

        d1 = $d0 - d1;

        $r2 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double cos>;

        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double sin>;

        $d0 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double)>($d4, $d0, d1, $d2);

        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double sin>;

        d1 = neg d1;

        $d3 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double cos>;

        $d4 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double)>($d4, $d2, d1, $d3);

        specialinvoke $r2.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: void <init>(double,double)>($d0, $d4);

        return $r2;
    }
    public org.apache.commons.math3.geometry.euclidean.twod.Line getReverse()
    {
        org.apache.commons.math3.geometry.euclidean.twod.Line r0, $r1;
        double $d0, $d1, $d2, $d3, $d4;
        byte $b0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Line;

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.twod.Line reverse>;

        if $r1 != null goto label2;

        $r1 = new org.apache.commons.math3.geometry.euclidean.twod.Line;

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double angle>;

        $b0 = $d1 cmpg 3.141592653589793;

        if $b0 >= 0 goto label3;

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double angle>;

        $d1 = $d1 + 3.141592653589793;

     label1:
        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double cos>;

        $d2 = neg $d2;

        $d3 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double sin>;

        $d3 = neg $d3;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double originOffset>;

        $d4 = neg $d0;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double tolerance>;

        specialinvoke $r1.<org.apache.commons.math3.geometry.euclidean.twod.Line: void <init>(double,double,double,double,double)>($d1, $d2, $d3, $d4, $d0);

        r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.twod.Line reverse> = $r1;

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.twod.Line reverse>;

        $r1.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.twod.Line reverse> = r0;

     label2:
        r0 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.twod.Line reverse>;

        return r0;

     label3:
        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double angle>;

        $d1 = $d1 - 3.141592653589793;

        goto label1;
    }
    public double getTolerance()
    {
        org.apache.commons.math3.geometry.euclidean.twod.Line r0;
        double d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Line;

        d0 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double tolerance>;

        return d0;
    }
    public org.apache.commons.math3.geometry.euclidean.twod.Vector2D intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Line r0, $r1;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D $r2;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        byte $b0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Line;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.twod.Line;

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double sin>;

        $d0 = $r1.<org.apache.commons.math3.geometry.euclidean.twod.Line: double cos>;

        $d2 = $r1.<org.apache.commons.math3.geometry.euclidean.twod.Line: double sin>;

        $d2 = neg $d2;

        $d3 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double cos>;

        $d1 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double)>($d1, $d0, $d2, $d3);

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d1);

        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double tolerance>;

        $b0 = $d0 cmpg $d2;

        if $b0 >= 0 goto label1;

        return null;

     label1:
        $r2 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double cos>;

        $d2 = $r1.<org.apache.commons.math3.geometry.euclidean.twod.Line: double originOffset>;

        $d3 = $r1.<org.apache.commons.math3.geometry.euclidean.twod.Line: double cos>;

        $d3 = neg $d3;

        $d4 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double originOffset>;

        $d0 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double)>($d0, $d2, $d3, $d4);

        $d0 = $d0 / $d1;

        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double sin>;

        $d3 = $r1.<org.apache.commons.math3.geometry.euclidean.twod.Line: double originOffset>;

        $d4 = $r1.<org.apache.commons.math3.geometry.euclidean.twod.Line: double sin>;

        $d4 = neg $d4;

        $d5 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double originOffset>;

        $d2 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double)>($d2, $d3, $d4, $d5);

        $d1 = $d2 / $d1;

        specialinvoke $r2.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: void <init>(double,double)>($d0, $d1);

        return $r2;
    }
    public boolean isParallelTo(org.apache.commons.math3.geometry.euclidean.twod.Line)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Line r0, $r1;
        double $d0, $d1, $d2, $d3;
        byte $b0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Line;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.twod.Line;

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double sin>;

        $d2 = $r1.<org.apache.commons.math3.geometry.euclidean.twod.Line: double cos>;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double cos>;

        $d3 = neg $d0;

        $d0 = $r1.<org.apache.commons.math3.geometry.euclidean.twod.Line: double sin>;

        $d1 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double)>($d1, $d2, $d3, $d0);

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d1);

        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double tolerance>;

        $b0 = $d1 cmpg $d2;

        if $b0 >= 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public org.apache.commons.math3.geometry.Point project(org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Line r0;
        org.apache.commons.math3.geometry.Point r1;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D $r2;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D $r3;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Line;

        r1 := @parameter0: org.apache.commons.math3.geometry.Point;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.oned.Vector1D toSubSpace(org.apache.commons.math3.geometry.Point)>(r1);

        $r3 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.twod.Vector2D toSpace(org.apache.commons.math3.geometry.Vector)>($r2);

        return $r3;
    }
    public void reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, double)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Line r0;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D $r1;
        double $d0, $d1, $d2, $d3;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Line;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        $d0 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: void unlinkReverse()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.MathUtils: double normalizeAngle(double,double)>($d0, 3.141592653589793);

        r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double angle> = $d0;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double angle>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double cos(double)>($d0);

        r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double cos> = $d0;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double angle>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sin(double)>($d0);

        r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double sin> = $d0;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double cos>;

        $d1 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getY()>();

        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double sin>;

        $d2 = neg $d2;

        $d3 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getX()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double)>($d0, $d1, $d2, $d3);

        r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double originOffset> = $d0;

        return;
    }
    public void reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Line r0;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D $r1, $r2;
        double d0, d1, $d2, $d3, $d4;
        byte $b0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Line;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        $r2 := @parameter1: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: void unlinkReverse()>();

        $d2 = virtualinvoke $r2.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getX()>();

        d0 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getX()>();

        d0 = $d2 - d0;

        $d2 = virtualinvoke $r2.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getY()>();

        d1 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getY()>();

        d1 = $d2 - d1;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double hypot(double,double)>(d0, d1);

        $b0 = $d2 cmpl 0.0;

        if $b0 != 0 goto label1;

        r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double angle> = 0.0;

        r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double cos> = 1.0;

        r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double sin> = 0.0;

        $d2 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getY()>();

        r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double originOffset> = $d2;

        return;

     label1:
        $d3 = neg d1;

        $d4 = neg d0;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d3, $d4);

        $d3 = 3.141592653589793 + $d3;

        r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double angle> = $d3;

        d0 = d0 / $d2;

        r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double cos> = d0;

        d0 = d1 / $d2;

        r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double sin> = d0;

        d0 = virtualinvoke $r2.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getX()>();

        d1 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getY()>();

        $d3 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getX()>();

        $d3 = neg $d3;

        $d4 = virtualinvoke $r2.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getY()>();

        d0 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double)>(d0, d1, $d3, $d4);

        $d2 = d0 / $d2;

        r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double originOffset> = $d2;

        return;
    }
    public void revertSelf()
    {
        org.apache.commons.math3.geometry.euclidean.twod.Line r0;
        double $d0;
        byte $b0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Line;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: void unlinkReverse()>();

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double angle>;

        $b0 = $d0 cmpg 3.141592653589793;

        if $b0 >= 0 goto label2;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double angle>;

        $d0 = $d0 + 3.141592653589793;

        r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double angle> = $d0;

     label1:
        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double cos>;

        $d0 = neg $d0;

        r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double cos> = $d0;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double sin>;

        $d0 = neg $d0;

        r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double sin> = $d0;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double originOffset>;

        $d0 = neg $d0;

        r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double originOffset> = $d0;

        return;

     label2:
        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double angle>;

        $d0 = $d0 - 3.141592653589793;

        r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double angle> = $d0;

        goto label1;
    }
    public boolean sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Line r0, r2;
        org.apache.commons.math3.geometry.partitioning.Hyperplane r1;
        double $d0, $d1, $d2, $d3;
        byte $b0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Line;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.Hyperplane;

        r2 = (org.apache.commons.math3.geometry.euclidean.twod.Line) r1;

        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double sin>;

        $d3 = r2.<org.apache.commons.math3.geometry.euclidean.twod.Line: double sin>;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double cos>;

        $d1 = r2.<org.apache.commons.math3.geometry.euclidean.twod.Line: double cos>;

        $d0 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double)>($d2, $d3, $d0, $d1);

        $b0 = $d0 cmpl 0.0;

        if $b0 < 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public void setAngle(double)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Line r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Line;

        $d0 := @parameter0: double;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: void unlinkReverse()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.MathUtils: double normalizeAngle(double,double)>($d0, 3.141592653589793);

        r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double angle> = $d0;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double angle>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double cos(double)>($d0);

        r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double cos> = $d0;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double angle>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sin(double)>($d0);

        r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double sin> = $d0;

        return;
    }
    public void setOriginOffset(double)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Line r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Line;

        $d0 := @parameter0: double;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: void unlinkReverse()>();

        r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double originOffset> = $d0;

        return;
    }
    public volatile org.apache.commons.math3.geometry.Point toSpace(org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Line r0;
        org.apache.commons.math3.geometry.Point $r1;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Line;

        $r1 := @parameter0: org.apache.commons.math3.geometry.Point;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.twod.Vector2D toSpace(org.apache.commons.math3.geometry.Point)>($r1);

        return $r2;
    }
    public org.apache.commons.math3.geometry.euclidean.twod.Vector2D toSpace(org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Line r0;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D $r1;
        org.apache.commons.math3.geometry.Point r2;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D r3;
        double $d0, $d1, $d2, $d3, $d4;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Line;

        r2 := @parameter0: org.apache.commons.math3.geometry.Point;

        r3 = (org.apache.commons.math3.geometry.euclidean.oned.Vector1D) r2;

        $d0 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double getX()>();

        $r1 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double cos>;

        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double originOffset>;

        $d2 = neg $d2;

        $d3 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double sin>;

        $d1 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double)>($d0, $d1, $d2, $d3);

        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double sin>;

        $d3 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double originOffset>;

        $d4 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double cos>;

        $d0 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double)>($d0, $d2, $d3, $d4);

        specialinvoke $r1.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: void <init>(double,double)>($d1, $d0);

        return $r1;
    }
    public org.apache.commons.math3.geometry.euclidean.twod.Vector2D toSpace(org.apache.commons.math3.geometry.Vector)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Line r0;
        org.apache.commons.math3.geometry.Vector r1;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Line;

        r1 := @parameter0: org.apache.commons.math3.geometry.Vector;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.twod.Vector2D toSpace(org.apache.commons.math3.geometry.Point)>(r1);

        return $r2;
    }
    public volatile org.apache.commons.math3.geometry.Point toSubSpace(org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Line r0;
        org.apache.commons.math3.geometry.Point $r1;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Line;

        $r1 := @parameter0: org.apache.commons.math3.geometry.Point;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.oned.Vector1D toSubSpace(org.apache.commons.math3.geometry.Point)>($r1);

        return $r2;
    }
    public org.apache.commons.math3.geometry.euclidean.oned.Vector1D toSubSpace(org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Line r0;
        org.apache.commons.math3.geometry.Point r1;
        double $d0, $d1, $d2, $d3;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D $r2;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r3;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Line;

        r1 := @parameter0: org.apache.commons.math3.geometry.Point;

        r3 = (org.apache.commons.math3.geometry.euclidean.twod.Vector2D) r1;

        $r2 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double cos>;

        $d2 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getX()>();

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double sin>;

        $d3 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getY()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double)>($d1, $d2, $d0, $d3);

        specialinvoke $r2.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: void <init>(double)>($d0);

        return $r2;
    }
    public org.apache.commons.math3.geometry.euclidean.oned.Vector1D toSubSpace(org.apache.commons.math3.geometry.Vector)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Line r0;
        org.apache.commons.math3.geometry.Vector r1;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Line;

        r1 := @parameter0: org.apache.commons.math3.geometry.Vector;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.oned.Vector1D toSubSpace(org.apache.commons.math3.geometry.Point)>(r1);

        return $r2;
    }
    public void translateToPoint(org.apache.commons.math3.geometry.euclidean.twod.Vector2D)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Line r0;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D $r1;
        double $d0, $d1, $d2, $d3;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Line;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double cos>;

        $d1 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getY()>();

        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double sin>;

        $d2 = neg $d2;

        $d3 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getX()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double)>($d0, $d1, $d2, $d3);

        r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double originOffset> = $d0;

        return;
    }
    public org.apache.commons.math3.geometry.euclidean.twod.SubLine wholeHyperplane()
    {
        org.apache.commons.math3.geometry.euclidean.twod.Line r0;
        org.apache.commons.math3.geometry.euclidean.twod.SubLine $r1;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet $r2;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Line;

        $r1 = new org.apache.commons.math3.geometry.euclidean.twod.SubLine;

        $r2 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double tolerance>;

        specialinvoke $r2.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: void <init>(double)>($d0);

        specialinvoke $r1.<org.apache.commons.math3.geometry.euclidean.twod.SubLine: void <init>(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)>(r0, $r2);

        return $r1;
    }
    public volatile org.apache.commons.math3.geometry.partitioning.SubHyperplane wholeHyperplane()
    {
        org.apache.commons.math3.geometry.euclidean.twod.Line r0;
        org.apache.commons.math3.geometry.euclidean.twod.SubLine $r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Line;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.twod.SubLine wholeHyperplane()>();

        return $r1;
    }
    public org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet wholeSpace()
    {
        org.apache.commons.math3.geometry.euclidean.twod.Line r0;
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Line;

        $r1 = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: double tolerance>;

        specialinvoke $r1.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: void <init>(double)>($d0);

        return $r1;
    }
    public volatile org.apache.commons.math3.geometry.partitioning.Region wholeSpace()
    {
        org.apache.commons.math3.geometry.euclidean.twod.Line r0;
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet $r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Line;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet wholeSpace()>();

        return $r1;
    }
