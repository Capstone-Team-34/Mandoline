org.apache.commons.math3.geometry.partitioning.InsideFinder extends java.lang.Object
private boolean minusFound
private boolean plusFound
private final org.apache.commons.math3.geometry.partitioning.Region region
    void <init>(org.apache.commons.math3.geometry.partitioning.Region)
    {
        org.apache.commons.math3.geometry.partitioning.InsideFinder r0;
        org.apache.commons.math3.geometry.partitioning.Region r1;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.InsideFinder;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.Region;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.geometry.partitioning.InsideFinder: org.apache.commons.math3.geometry.partitioning.Region region> = r1;

        r0.<org.apache.commons.math3.geometry.partitioning.InsideFinder: boolean plusFound> = 0;

        r0.<org.apache.commons.math3.geometry.partitioning.InsideFinder: boolean minusFound> = 0;

        return;
    }
    public boolean minusFound()
    {
        org.apache.commons.math3.geometry.partitioning.InsideFinder r0;
        boolean z0;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.InsideFinder;

        z0 = r0.<org.apache.commons.math3.geometry.partitioning.InsideFinder: boolean minusFound>;

        return z0;
    }
    public boolean plusFound()
    {
        org.apache.commons.math3.geometry.partitioning.InsideFinder r0;
        boolean z0;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.InsideFinder;

        z0 = r0.<org.apache.commons.math3.geometry.partitioning.InsideFinder: boolean plusFound>;

        return z0;
    }
    public void recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree, org.apache.commons.math3.geometry.partitioning.SubHyperplane)
    {
        org.apache.commons.math3.geometry.partitioning.InsideFinder r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, $r11;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane r2, $r3;
        java.lang.Object $r4;
        java.lang.Boolean $r5;
        boolean $z0;
        org.apache.commons.math3.geometry.partitioning.Hyperplane $r6, $r10;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane $r7;
        int[] $r8;
        org.apache.commons.math3.geometry.partitioning.Side $r9, $r12;
        int $i0;
        org.apache.commons.math3.geometry.partitioning.Region $r13;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.InsideFinder;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r2 := @parameter1: org.apache.commons.math3.geometry.partitioning.SubHyperplane;

        $r3 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r3 != null goto label01;

        $r4 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label20;

        r0.<org.apache.commons.math3.geometry.partitioning.InsideFinder: boolean plusFound> = 1;

        r0.<org.apache.commons.math3.geometry.partitioning.InsideFinder: boolean minusFound> = 1;

        return;

     label01:
        $r3 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        $r6 = interfaceinvoke $r3.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        $r7 = interfaceinvoke r2.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane split(org.apache.commons.math3.geometry.partitioning.Hyperplane)>($r6);

        $r8 = <org.apache.commons.math3.geometry.partitioning.InsideFinder$1: int[] $SwitchMap$org$apache$commons$math3$geometry$partitioning$Side>;

        $r9 = virtualinvoke $r7.<org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane: org.apache.commons.math3.geometry.partitioning.Side getSide()>();

        $i0 = virtualinvoke $r9.<org.apache.commons.math3.geometry.partitioning.Side: int ordinal()>();

        $i0 = $r8[$i0];

        lookupswitch($i0)
        {
            case 1: goto label06;
            case 2: goto label10;
            case 3: goto label14;
            default: goto label02;
        };

     label02:
        $r3 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        $r6 = interfaceinvoke $r3.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        $r10 = interfaceinvoke r2.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        $z0 = interfaceinvoke $r6.<org.apache.commons.math3.geometry.partitioning.Hyperplane: boolean sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)>($r10);

        if $z0 == 0 goto label16;

        $r11 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        r2 = virtualinvoke $r11.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if r2 != null goto label03;

        $r11 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        $r4 = virtualinvoke $r11.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label04;

     label03:
        r0.<org.apache.commons.math3.geometry.partitioning.InsideFinder: boolean plusFound> = 1;

     label04:
        $r11 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        r2 = virtualinvoke $r11.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if r2 != null goto label05;

        r1 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        $r4 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label20;

     label05:
        r0.<org.apache.commons.math3.geometry.partitioning.InsideFinder: boolean minusFound> = 1;

        return;

     label06:
        $r3 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        $r6 = interfaceinvoke r2.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        $r7 = interfaceinvoke $r3.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane split(org.apache.commons.math3.geometry.partitioning.Hyperplane)>($r6);

        $r9 = virtualinvoke $r7.<org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane: org.apache.commons.math3.geometry.partitioning.Side getSide()>();

        $r12 = <org.apache.commons.math3.geometry.partitioning.Side: org.apache.commons.math3.geometry.partitioning.Side PLUS>;

        if $r9 != $r12 goto label09;

        $r13 = r0.<org.apache.commons.math3.geometry.partitioning.InsideFinder: org.apache.commons.math3.geometry.partitioning.Region region>;

        $r11 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        $z0 = interfaceinvoke $r13.<org.apache.commons.math3.geometry.partitioning.Region: boolean isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r11);

        if $z0 != 0 goto label07;

        r0.<org.apache.commons.math3.geometry.partitioning.InsideFinder: boolean plusFound> = 1;

     label07:
        $z0 = r0.<org.apache.commons.math3.geometry.partitioning.InsideFinder: boolean plusFound>;

        if $z0 == 0 goto label08;

        $z0 = r0.<org.apache.commons.math3.geometry.partitioning.InsideFinder: boolean minusFound>;

        if $z0 != 0 goto label20;

     label08:
        r1 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.InsideFinder: void recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)>(r1, r2);

        return;

     label09:
        $r13 = r0.<org.apache.commons.math3.geometry.partitioning.InsideFinder: org.apache.commons.math3.geometry.partitioning.Region region>;

        $r11 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        $z0 = interfaceinvoke $r13.<org.apache.commons.math3.geometry.partitioning.Region: boolean isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r11);

        if $z0 != 0 goto label07;

        r0.<org.apache.commons.math3.geometry.partitioning.InsideFinder: boolean minusFound> = 1;

        goto label07;

     label10:
        $r3 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        $r6 = interfaceinvoke r2.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        $r7 = interfaceinvoke $r3.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane split(org.apache.commons.math3.geometry.partitioning.Hyperplane)>($r6);

        $r9 = virtualinvoke $r7.<org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane: org.apache.commons.math3.geometry.partitioning.Side getSide()>();

        $r12 = <org.apache.commons.math3.geometry.partitioning.Side: org.apache.commons.math3.geometry.partitioning.Side PLUS>;

        if $r9 != $r12 goto label13;

        $r13 = r0.<org.apache.commons.math3.geometry.partitioning.InsideFinder: org.apache.commons.math3.geometry.partitioning.Region region>;

        $r11 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        $z0 = interfaceinvoke $r13.<org.apache.commons.math3.geometry.partitioning.Region: boolean isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r11);

        if $z0 != 0 goto label11;

        r0.<org.apache.commons.math3.geometry.partitioning.InsideFinder: boolean plusFound> = 1;

     label11:
        $z0 = r0.<org.apache.commons.math3.geometry.partitioning.InsideFinder: boolean plusFound>;

        if $z0 == 0 goto label12;

        $z0 = r0.<org.apache.commons.math3.geometry.partitioning.InsideFinder: boolean minusFound>;

        if $z0 != 0 goto label20;

     label12:
        r1 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.InsideFinder: void recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)>(r1, r2);

        return;

     label13:
        $r13 = r0.<org.apache.commons.math3.geometry.partitioning.InsideFinder: org.apache.commons.math3.geometry.partitioning.Region region>;

        $r11 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        $z0 = interfaceinvoke $r13.<org.apache.commons.math3.geometry.partitioning.Region: boolean isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r11);

        if $z0 != 0 goto label11;

        r0.<org.apache.commons.math3.geometry.partitioning.InsideFinder: boolean minusFound> = 1;

        goto label11;

     label14:
        $r11 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        r2 = virtualinvoke $r7.<org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlus()>();

        virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.InsideFinder: void recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)>($r11, r2);

        $z0 = r0.<org.apache.commons.math3.geometry.partitioning.InsideFinder: boolean plusFound>;

        if $z0 == 0 goto label15;

        $z0 = r0.<org.apache.commons.math3.geometry.partitioning.InsideFinder: boolean minusFound>;

        if $z0 != 0 goto label20;

     label15:
        r1 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        r2 = virtualinvoke $r7.<org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane getMinus()>();

        virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.InsideFinder: void recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)>(r1, r2);

        return;

     label16:
        $r11 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        r2 = virtualinvoke $r11.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if r2 != null goto label17;

        $r11 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        $r4 = virtualinvoke $r11.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label18;

     label17:
        r0.<org.apache.commons.math3.geometry.partitioning.InsideFinder: boolean minusFound> = 1;

     label18:
        $r11 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        r2 = virtualinvoke $r11.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if r2 != null goto label19;

        r1 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        $r4 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label20;

     label19:
        r0.<org.apache.commons.math3.geometry.partitioning.InsideFinder: boolean plusFound> = 1;

     label20:
        return;
    }
