org.apache.commons.math3.geometry.partitioning.AbstractRegion extends java.lang.Object implements org.apache.commons.math3.geometry.partitioning.Region
private org.apache.commons.math3.geometry.Point barycenter
private double size
private final double tolerance
private org.apache.commons.math3.geometry.partitioning.BSPTree tree
    protected void <init>(double)
    {
        org.apache.commons.math3.geometry.partitioning.AbstractRegion r0;
        double $d0;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r1;
        java.lang.Boolean $r2;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractRegion;

        $d0 := @parameter0: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        specialinvoke $r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r2);

        r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.BSPTree tree> = $r1;

        r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: double tolerance> = $d0;

        return;
    }
    protected void <init>(java.util.Collection, double)
    {
        org.apache.commons.math3.geometry.partitioning.AbstractRegion r0;
        java.util.Collection r1;
        double $d0;
        java.util.TreeSet r2;
        int $i0;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r3;
        java.lang.Boolean $r4;
        org.apache.commons.math3.geometry.partitioning.AbstractRegion$1 $r5;
        org.apache.commons.math3.geometry.partitioning.AbstractRegion$2 $r6;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractRegion;

        r1 := @parameter0: java.util.Collection;

        $d0 := @parameter1: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: double tolerance> = $d0;

        $i0 = interfaceinvoke r1.<java.util.Collection: int size()>();

        if $i0 != 0 goto label1;

        $r3 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r4 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        specialinvoke $r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r4);

        r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.BSPTree tree> = $r3;

        return;

     label1:
        r2 = new java.util.TreeSet;

        $r5 = new org.apache.commons.math3.geometry.partitioning.AbstractRegion$1;

        specialinvoke $r5.<org.apache.commons.math3.geometry.partitioning.AbstractRegion$1: void <init>(org.apache.commons.math3.geometry.partitioning.AbstractRegion)>(r0);

        specialinvoke r2.<java.util.TreeSet: void <init>(java.util.Comparator)>($r5);

        virtualinvoke r2.<java.util.TreeSet: boolean addAll(java.util.Collection)>(r1);

        $r3 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        specialinvoke $r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>()>();

        r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.BSPTree tree> = $r3;

        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.BSPTree tree>;

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: void insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)>($r3, r2);

        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.BSPTree tree>;

        $r6 = new org.apache.commons.math3.geometry.partitioning.AbstractRegion$2;

        specialinvoke $r6.<org.apache.commons.math3.geometry.partitioning.AbstractRegion$2: void <init>(org.apache.commons.math3.geometry.partitioning.AbstractRegion)>(r0);

        virtualinvoke $r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: void visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)>($r6);

        return;
    }
    protected void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree, double)
    {
        org.apache.commons.math3.geometry.partitioning.AbstractRegion r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractRegion;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $d0 := @parameter1: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.BSPTree tree> = r1;

        r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: double tolerance> = $d0;

        return;
    }
    public void <init>(org.apache.commons.math3.geometry.partitioning.Hyperplane[], double)
    {
        org.apache.commons.math3.geometry.partitioning.AbstractRegion r0;
        org.apache.commons.math3.geometry.partitioning.Hyperplane[] r1;
        double $d0;
        org.apache.commons.math3.geometry.partitioning.Hyperplane r2;
        int i0, i1;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r3, $r6;
        java.lang.Boolean $r4;
        org.apache.commons.math3.geometry.partitioning.Region $r5;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractRegion;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.Hyperplane[];

        $d0 := @parameter1: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: double tolerance> = $d0;

        if r1 == null goto label1;

        i0 = lengthof r1;

        if i0 != 0 goto label2;

     label1:
        $r3 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r4 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        specialinvoke $r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r4);

        r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.BSPTree tree> = $r3;

        return;

     label2:
        r2 = r1[0];

        $r5 = interfaceinvoke r2.<org.apache.commons.math3.geometry.partitioning.Hyperplane: org.apache.commons.math3.geometry.partitioning.Region wholeSpace()>();

        $r3 = interfaceinvoke $r5.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(0);

        r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.BSPTree tree> = $r3;

        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.BSPTree tree>;

        $r4 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        virtualinvoke $r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: void setAttribute(java.lang.Object)>($r4);

        i0 = lengthof r1;

        i1 = 0;

     label3:
        if i1 >= i0 goto label5;

        r2 = r1[i1];

        $z0 = virtualinvoke $r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: boolean insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)>(r2);

        if $z0 == 0 goto label4;

        virtualinvoke $r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: void setAttribute(java.lang.Object)>(null);

        $r6 = virtualinvoke $r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        $r4 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        virtualinvoke $r6.<org.apache.commons.math3.geometry.partitioning.BSPTree: void setAttribute(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        $r3 = $r6;

        $r4 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        virtualinvoke $r6.<org.apache.commons.math3.geometry.partitioning.BSPTree: void setAttribute(java.lang.Object)>($r4);

     label4:
        i1 = i1 + 1;

        goto label3;

     label5:
        return;
    }
    private void insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree, java.util.Collection)
    {
        org.apache.commons.math3.geometry.partitioning.AbstractRegion r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, $r13;
        java.util.Collection r2;
        java.util.ArrayList r3, r4;
        java.util.Iterator $r5;
        org.apache.commons.math3.geometry.partitioning.Hyperplane r6, $r9;
        boolean $z0;
        java.lang.Object $r7;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r8;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane $r10;
        int[] $r11;
        org.apache.commons.math3.geometry.partitioning.Side $r12;
        int $i0;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractRegion;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r2 := @parameter1: java.util.Collection;

        $r5 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>();

        r6 = null;

     label1:
        if r6 != null goto label2;

        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (org.apache.commons.math3.geometry.partitioning.SubHyperplane) $r7;

        $r9 = interfaceinvoke $r8.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        r6 = $r9;

        $r9 = interfaceinvoke $r9.<org.apache.commons.math3.geometry.partitioning.Hyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane copySelf()>();

        $z0 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: boolean insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)>($r9);

        if $z0 != 0 goto label1;

        r6 = null;

        goto label1;

     label2:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label3;

        return;

     label3:
        r4 = new java.util.ArrayList;

        specialinvoke r4.<java.util.ArrayList: void <init>()>();

        r3 = new java.util.ArrayList;

        specialinvoke r3.<java.util.ArrayList: void <init>()>();

     label4:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label9;

        $r7 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (org.apache.commons.math3.geometry.partitioning.SubHyperplane) $r7;

        $r10 = interfaceinvoke $r8.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane split(org.apache.commons.math3.geometry.partitioning.Hyperplane)>(r6);

        $r11 = <org.apache.commons.math3.geometry.partitioning.AbstractRegion$3: int[] $SwitchMap$org$apache$commons$math3$geometry$partitioning$Side>;

        $r12 = virtualinvoke $r10.<org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane: org.apache.commons.math3.geometry.partitioning.Side getSide()>();

        $i0 = virtualinvoke $r12.<org.apache.commons.math3.geometry.partitioning.Side: int ordinal()>();

        $i0 = $r11[$i0];

        lookupswitch($i0)
        {
            case 1: goto label6;
            case 2: goto label7;
            case 3: goto label8;
            default: goto label5;
        };

     label5:
        goto label4;

     label6:
        virtualinvoke r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r8);

        goto label4;

     label7:
        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r8);

        goto label4;

     label8:
        $r8 = virtualinvoke $r10.<org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlus()>();

        virtualinvoke r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r8);

        $r8 = virtualinvoke $r10.<org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane getMinus()>();

        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r8);

        goto label4;

     label9:
        $r13 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: void insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)>($r13, r4);

        r1 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: void insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)>(r1, r3);

        return;
    }
    private org.apache.commons.math3.geometry.partitioning.SubHyperplane recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree, org.apache.commons.math3.geometry.partitioning.SubHyperplane)
    {
        org.apache.commons.math3.geometry.partitioning.AbstractRegion r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, $r8;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane r2, $r3;
        java.lang.Object $r4;
        java.lang.Boolean $r5;
        boolean $z0;
        org.apache.commons.math3.geometry.partitioning.Hyperplane $r6;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane $r7;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractRegion;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r2 := @parameter1: org.apache.commons.math3.geometry.partitioning.SubHyperplane;

        $r3 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r3 != null goto label2;

        $r4 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label1;

        r2 = interfaceinvoke r2.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane copySelf()>();

        return r2;

     label1:
        return null;

     label2:
        $r3 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        $r6 = interfaceinvoke $r3.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        $r7 = interfaceinvoke r2.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane split(org.apache.commons.math3.geometry.partitioning.Hyperplane)>($r6);

        $r3 = virtualinvoke $r7.<org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlus()>();

        if $r3 == null goto label6;

        $r3 = virtualinvoke $r7.<org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane getMinus()>();

        if $r3 == null goto label5;

        $r8 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        r2 = virtualinvoke $r7.<org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlus()>();

        r2 = specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.SubHyperplane recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)>($r8, r2);

        r1 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        $r3 = virtualinvoke $r7.<org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane getMinus()>();

        $r3 = specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.SubHyperplane recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)>(r1, $r3);

        if r2 != null goto label3;

        return $r3;

     label3:
        if $r3 != null goto label4;

        return r2;

     label4:
        r2 = interfaceinvoke r2.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)>($r3);

        return r2;

     label5:
        r1 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        r2 = specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.SubHyperplane recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)>(r1, r2);

        return r2;

     label6:
        $r3 = virtualinvoke $r7.<org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane getMinus()>();

        if $r3 == null goto label7;

        r1 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        r2 = specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.SubHyperplane recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)>(r1, r2);

        return r2;

     label7:
        $r8 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        r1 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        r2 = specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.SubHyperplane recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)>(r1, r2);

        r2 = specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.SubHyperplane recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)>($r8, r2);

        return r2;
    }
    private org.apache.commons.math3.geometry.partitioning.BSPTree recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree, org.apache.commons.math3.geometry.partitioning.Transform, java.util.Map)
    {
        org.apache.commons.math3.geometry.partitioning.AbstractRegion r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, r5, $r12, $r13;
        org.apache.commons.math3.geometry.partitioning.Transform r2;
        java.util.Map r3;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r4;
        java.lang.Object $r6;
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane r7, r9, r10;
        org.apache.commons.math3.geometry.partitioning.BoundaryAttribute r8;
        org.apache.commons.math3.geometry.partitioning.NodesSet $r11;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractRegion;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r2 := @parameter1: org.apache.commons.math3.geometry.partitioning.Transform;

        r3 := @parameter2: java.util.Map;

        $r4 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r4 != null goto label2;

        r5 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r6 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        specialinvoke r5.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r6);

     label1:
        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r5);

        return r5;

     label2:
        $r4 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        r7 = (org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane) $r4;

        r7 = virtualinvoke r7.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)>(r2);

        $r6 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        r8 = (org.apache.commons.math3.geometry.partitioning.BoundaryAttribute) $r6;

        if r8 == null goto label5;

        $r4 = virtualinvoke r8.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusOutside()>();

        if $r4 != null goto label6;

        r9 = null;

     label3:
        $r4 = virtualinvoke r8.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusInside()>();

        if $r4 != null goto label7;

        r10 = null;

     label4:
        r8 = new org.apache.commons.math3.geometry.partitioning.BoundaryAttribute;

        $r11 = new org.apache.commons.math3.geometry.partitioning.NodesSet;

        specialinvoke $r11.<org.apache.commons.math3.geometry.partitioning.NodesSet: void <init>()>();

        specialinvoke r8.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.NodesSet)>(r9, r10, $r11);

     label5:
        r5 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r12 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        $r12 = specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.BSPTree recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform,java.util.Map)>($r12, r2, r3);

        $r13 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        $r13 = specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.BSPTree recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform,java.util.Map)>($r13, r2, r3);

        specialinvoke r5.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)>(r7, $r12, $r13, r8);

        goto label1;

     label6:
        $r4 = virtualinvoke r8.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusOutside()>();

        r9 = (org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane) $r4;

        r9 = virtualinvoke r9.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)>(r2);

        goto label3;

     label7:
        $r4 = virtualinvoke r8.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusInside()>();

        r10 = (org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane) $r4;

        r10 = virtualinvoke r10.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)>(r2);

        goto label4;
    }
    public org.apache.commons.math3.geometry.partitioning.AbstractRegion applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)
    {
        org.apache.commons.math3.geometry.partitioning.AbstractRegion r0;
        org.apache.commons.math3.geometry.partitioning.Transform r1;
        java.util.HashMap r2;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r3, $r8;
        java.util.Set $r4;
        java.util.Iterator $r5, $r13;
        boolean $z0;
        java.lang.Object $r6;
        java.util.Map$Entry r7;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r9;
        org.apache.commons.math3.geometry.partitioning.BoundaryAttribute r10, r11;
        org.apache.commons.math3.geometry.partitioning.NodesSet $r12;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractRegion;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.Transform;

        r2 = new java.util.HashMap;

        specialinvoke r2.<java.util.HashMap: void <init>()>();

        $r3 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(0);

        $r3 = specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.BSPTree recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform,java.util.Map)>($r3, r1, r2);

        $r4 = interfaceinvoke r2.<java.util.Map: java.util.Set entrySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r6;

        $r6 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = (org.apache.commons.math3.geometry.partitioning.BSPTree) $r6;

        $r9 = virtualinvoke $r8.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r9 == null goto label1;

        $r6 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = (org.apache.commons.math3.geometry.partitioning.BSPTree) $r6;

        $r6 = virtualinvoke $r8.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        r10 = (org.apache.commons.math3.geometry.partitioning.BoundaryAttribute) $r6;

        if r10 == null goto label1;

        $r6 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r8 = (org.apache.commons.math3.geometry.partitioning.BSPTree) $r6;

        $r6 = virtualinvoke $r8.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        r11 = (org.apache.commons.math3.geometry.partitioning.BoundaryAttribute) $r6;

        $r12 = virtualinvoke r10.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.NodesSet getSplitters()>();

        $r13 = virtualinvoke $r12.<org.apache.commons.math3.geometry.partitioning.NodesSet: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r6 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (org.apache.commons.math3.geometry.partitioning.BSPTree) $r6;

        $r12 = virtualinvoke r11.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.NodesSet getSplitters()>();

        $r6 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8);

        $r8 = (org.apache.commons.math3.geometry.partitioning.BSPTree) $r6;

        virtualinvoke $r12.<org.apache.commons.math3.geometry.partitioning.NodesSet: void add(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r8);

        goto label2;

     label3:
        r0 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.AbstractRegion buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r3);

        return r0;
    }
public abstract org.apache.commons.math3.geometry.partitioning.AbstractRegion buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree) { 
// no body
} 
    public volatile org.apache.commons.math3.geometry.partitioning.Region buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.partitioning.AbstractRegion r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r1;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractRegion;

        $r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r0 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.AbstractRegion buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r1);

        return r0;
    }
    public org.apache.commons.math3.geometry.partitioning.Region$Location checkPoint(org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.partitioning.AbstractRegion r0;
        org.apache.commons.math3.geometry.Point r1;
        org.apache.commons.math3.geometry.partitioning.Region$Location $r2;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r3;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractRegion;

        r1 := @parameter0: org.apache.commons.math3.geometry.Point;

        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.BSPTree tree>;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.Region$Location checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Point)>($r3, r1);

        return $r2;
    }
    public org.apache.commons.math3.geometry.partitioning.Region$Location checkPoint(org.apache.commons.math3.geometry.Vector)
    {
        org.apache.commons.math3.geometry.partitioning.AbstractRegion r0;
        org.apache.commons.math3.geometry.Vector r1;
        org.apache.commons.math3.geometry.partitioning.Region$Location $r2;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractRegion;

        r1 := @parameter0: org.apache.commons.math3.geometry.Vector;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.Region$Location checkPoint(org.apache.commons.math3.geometry.Point)>(r1);

        return $r2;
    }
    protected org.apache.commons.math3.geometry.partitioning.Region$Location checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree, org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.partitioning.AbstractRegion r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, $r6;
        org.apache.commons.math3.geometry.Point r2;
        double $d0;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r3;
        java.lang.Object $r4;
        java.lang.Boolean $r5;
        boolean $z0;
        org.apache.commons.math3.geometry.partitioning.Region$Location $r7, r8, $r9;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractRegion;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r2 := @parameter1: org.apache.commons.math3.geometry.Point;

        $d0 = r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: double tolerance>;

        r1 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getCell(org.apache.commons.math3.geometry.Point,double)>(r2, $d0);

        $r3 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r3 != null goto label2;

        $r4 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label1;

        $r7 = <org.apache.commons.math3.geometry.partitioning.Region$Location: org.apache.commons.math3.geometry.partitioning.Region$Location INSIDE>;

        return $r7;

     label1:
        $r7 = <org.apache.commons.math3.geometry.partitioning.Region$Location: org.apache.commons.math3.geometry.partitioning.Region$Location OUTSIDE>;

        return $r7;

     label2:
        $r6 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        $r7 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.Region$Location checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Point)>($r6, r2);

        r8 = $r7;

        r1 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        $r9 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.Region$Location checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Point)>(r1, r2);

        if $r7 != $r9 goto label4;

     label3:
        return r8;

     label4:
        r8 = <org.apache.commons.math3.geometry.partitioning.Region$Location: org.apache.commons.math3.geometry.partitioning.Region$Location BOUNDARY>;

        goto label3;
    }
    protected org.apache.commons.math3.geometry.partitioning.Region$Location checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree, org.apache.commons.math3.geometry.Vector)
    {
        org.apache.commons.math3.geometry.partitioning.AbstractRegion r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        org.apache.commons.math3.geometry.Vector r2;
        org.apache.commons.math3.geometry.partitioning.Region$Location $r3;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractRegion;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r2 := @parameter1: org.apache.commons.math3.geometry.Vector;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.Region$Location checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Point)>(r1, r2);

        return $r3;
    }
protected abstract void computeGeometricalProperties() { 
// no body
} 
    public boolean contains(org.apache.commons.math3.geometry.partitioning.Region)
    {
        org.apache.commons.math3.geometry.partitioning.AbstractRegion r0;
        org.apache.commons.math3.geometry.partitioning.Region r1;
        org.apache.commons.math3.geometry.partitioning.RegionFactory $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractRegion;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.Region;

        $r2 = new org.apache.commons.math3.geometry.partitioning.RegionFactory;

        specialinvoke $r2.<org.apache.commons.math3.geometry.partitioning.RegionFactory: void <init>()>();

        r1 = virtualinvoke $r2.<org.apache.commons.math3.geometry.partitioning.RegionFactory: org.apache.commons.math3.geometry.partitioning.Region difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)>(r1, r0);

        $z0 = interfaceinvoke r1.<org.apache.commons.math3.geometry.partitioning.Region: boolean isEmpty()>();

        return $z0;
    }
    public org.apache.commons.math3.geometry.partitioning.AbstractRegion copySelf()
    {
        org.apache.commons.math3.geometry.partitioning.AbstractRegion r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r1;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractRegion;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.BSPTree tree>;

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree copySelf()>();

        r0 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.AbstractRegion buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r1);

        return r0;
    }
    public volatile org.apache.commons.math3.geometry.partitioning.Region copySelf()
    {
        org.apache.commons.math3.geometry.partitioning.AbstractRegion r0;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractRegion;

        r0 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.AbstractRegion copySelf()>();

        return r0;
    }
    public org.apache.commons.math3.geometry.Point getBarycenter()
    {
        org.apache.commons.math3.geometry.partitioning.AbstractRegion r0;
        org.apache.commons.math3.geometry.Point $r1;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractRegion;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.Point barycenter>;

        if $r1 != null goto label1;

        virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: void computeGeometricalProperties()>();

     label1:
        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.Point barycenter>;

        return $r1;
    }
    public double getBoundarySize()
    {
        org.apache.commons.math3.geometry.partitioning.AbstractRegion r0;
        org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor r1;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r2;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractRegion;

        r1 = new org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor;

        specialinvoke r1.<org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor: void <init>()>();

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(1);

        virtualinvoke $r2.<org.apache.commons.math3.geometry.partitioning.BSPTree: void visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)>(r1);

        $d0 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor: double getSize()>();

        return $d0;
    }
    public double getSize()
    {
        org.apache.commons.math3.geometry.partitioning.AbstractRegion r0;
        org.apache.commons.math3.geometry.Point $r1;
        double d0;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractRegion;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.Point barycenter>;

        if $r1 != null goto label1;

        virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: void computeGeometricalProperties()>();

     label1:
        d0 = r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: double size>;

        return d0;
    }
    public double getTolerance()
    {
        org.apache.commons.math3.geometry.partitioning.AbstractRegion r0;
        double d0;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractRegion;

        d0 = r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: double tolerance>;

        return d0;
    }
    public org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)
    {
        org.apache.commons.math3.geometry.partitioning.AbstractRegion r0;
        boolean $z0;
        org.apache.commons.math3.geometry.partitioning.BoundaryBuilder $r1;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r2;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r3;
        java.lang.Object $r4;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractRegion;

        $z0 := @parameter0: boolean;

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.BSPTree tree>;

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r3 == null goto label1;

        $r2 = r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.BSPTree tree>;

        $r4 = virtualinvoke $r2.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        if $r4 != null goto label1;

        $r2 = r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.BSPTree tree>;

        $r1 = new org.apache.commons.math3.geometry.partitioning.BoundaryBuilder;

        specialinvoke $r1.<org.apache.commons.math3.geometry.partitioning.BoundaryBuilder: void <init>()>();

        virtualinvoke $r2.<org.apache.commons.math3.geometry.partitioning.BSPTree: void visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)>($r1);

     label1:
        $r2 = r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.BSPTree tree>;

        return $r2;
    }
    public org.apache.commons.math3.geometry.partitioning.SubHyperplane intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)
    {
        org.apache.commons.math3.geometry.partitioning.AbstractRegion r0;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane r1;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r2;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractRegion;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.SubHyperplane;

        $r2 = r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.BSPTree tree>;

        r1 = specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.SubHyperplane recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)>($r2, r1);

        return r1;
    }
    public boolean isEmpty()
    {
        org.apache.commons.math3.geometry.partitioning.AbstractRegion r0;
        boolean $z0;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r1;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractRegion;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.BSPTree tree>;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: boolean isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r1);

        return $z0;
    }
    public boolean isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.partitioning.AbstractRegion r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, $r5;
        boolean $z0, $z1;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractRegion;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $z0 = 1;

        $r2 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r2 != null goto label2;

        $r3 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label1;

        return 1;

     label1:
        return 0;

     label2:
        $r5 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        $z1 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: boolean isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r5);

        if $z1 == 0 goto label4;

        r1 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        $z1 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: boolean isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        if $z1 == 0 goto label4;

     label3:
        return $z0;

     label4:
        $z0 = 0;

        goto label3;
    }
    public boolean isFull()
    {
        org.apache.commons.math3.geometry.partitioning.AbstractRegion r0;
        boolean $z0;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r1;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractRegion;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.BSPTree tree>;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: boolean isFull(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r1);

        return $z0;
    }
    public boolean isFull(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.partitioning.AbstractRegion r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, $r5;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractRegion;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r2 != null goto label1;

        $r3 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;

     label1:
        $r5 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        $z0 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: boolean isFull(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r5);

        if $z0 == 0 goto label2;

        r1 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        $z0 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: boolean isFull(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }
    public org.apache.commons.math3.geometry.partitioning.BoundaryProjection projectToBoundary(org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.partitioning.AbstractRegion r0;
        org.apache.commons.math3.geometry.Point r1;
        org.apache.commons.math3.geometry.partitioning.BoundaryProjector r2;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r3;
        org.apache.commons.math3.geometry.partitioning.BoundaryProjection $r4;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractRegion;

        r1 := @parameter0: org.apache.commons.math3.geometry.Point;

        r2 = new org.apache.commons.math3.geometry.partitioning.BoundaryProjector;

        specialinvoke r2.<org.apache.commons.math3.geometry.partitioning.BoundaryProjector: void <init>(org.apache.commons.math3.geometry.Point)>(r1);

        $r3 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(1);

        virtualinvoke $r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: void visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)>(r2);

        $r4 = virtualinvoke r2.<org.apache.commons.math3.geometry.partitioning.BoundaryProjector: org.apache.commons.math3.geometry.partitioning.BoundaryProjection getProjection()>();

        return $r4;
    }
    protected void setBarycenter(org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.partitioning.AbstractRegion r0;
        org.apache.commons.math3.geometry.Point r1;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractRegion;

        r1 := @parameter0: org.apache.commons.math3.geometry.Point;

        r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.Point barycenter> = r1;

        return;
    }
    protected void setBarycenter(org.apache.commons.math3.geometry.Vector)
    {
        org.apache.commons.math3.geometry.partitioning.AbstractRegion r0;
        org.apache.commons.math3.geometry.Vector r1;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractRegion;

        r1 := @parameter0: org.apache.commons.math3.geometry.Vector;

        virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: void setBarycenter(org.apache.commons.math3.geometry.Point)>(r1);

        return;
    }
    protected void setSize(double)
    {
        org.apache.commons.math3.geometry.partitioning.AbstractRegion r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractRegion;

        $d0 := @parameter0: double;

        r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: double size> = $d0;

        return;
    }
    public org.apache.commons.math3.geometry.partitioning.Side side(org.apache.commons.math3.geometry.partitioning.Hyperplane)
    {
        org.apache.commons.math3.geometry.partitioning.AbstractRegion r0;
        org.apache.commons.math3.geometry.partitioning.Hyperplane r1;
        org.apache.commons.math3.geometry.partitioning.InsideFinder r2;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r3;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r4;
        boolean $z0;
        org.apache.commons.math3.geometry.partitioning.Side r5;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractRegion;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.Hyperplane;

        r2 = new org.apache.commons.math3.geometry.partitioning.InsideFinder;

        specialinvoke r2.<org.apache.commons.math3.geometry.partitioning.InsideFinder: void <init>(org.apache.commons.math3.geometry.partitioning.Region)>(r0);

        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.BSPTree tree>;

        $r4 = interfaceinvoke r1.<org.apache.commons.math3.geometry.partitioning.Hyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane wholeHyperplane()>();

        virtualinvoke r2.<org.apache.commons.math3.geometry.partitioning.InsideFinder: void recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)>($r3, $r4);

        $z0 = virtualinvoke r2.<org.apache.commons.math3.geometry.partitioning.InsideFinder: boolean plusFound()>();

        if $z0 == 0 goto label2;

        $z0 = virtualinvoke r2.<org.apache.commons.math3.geometry.partitioning.InsideFinder: boolean minusFound()>();

        if $z0 == 0 goto label1;

        r5 = <org.apache.commons.math3.geometry.partitioning.Side: org.apache.commons.math3.geometry.partitioning.Side BOTH>;

        return r5;

     label1:
        r5 = <org.apache.commons.math3.geometry.partitioning.Side: org.apache.commons.math3.geometry.partitioning.Side PLUS>;

        return r5;

     label2:
        $z0 = virtualinvoke r2.<org.apache.commons.math3.geometry.partitioning.InsideFinder: boolean minusFound()>();

        if $z0 == 0 goto label3;

        r5 = <org.apache.commons.math3.geometry.partitioning.Side: org.apache.commons.math3.geometry.partitioning.Side MINUS>;

        return r5;

     label3:
        r5 = <org.apache.commons.math3.geometry.partitioning.Side: org.apache.commons.math3.geometry.partitioning.Side HYPER>;

        return r5;
    }
