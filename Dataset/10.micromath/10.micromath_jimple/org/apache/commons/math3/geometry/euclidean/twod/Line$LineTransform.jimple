org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform extends java.lang.Object implements org.apache.commons.math3.geometry.partitioning.Transform
private double c11
private double c1X
private double c1Y
private double cX1
private double cXX
private double cXY
private double cY1
private double cYX
private double cYY
    void <init>(double, double, double, double, double, double) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform r0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;
        org.apache.commons.math3.exception.util.LocalizedFormats $r1;
        byte $b0;
        org.apache.commons.math3.exception.MathIllegalArgumentException $r2;
        java.lang.Object[] $r3;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $d3 := @parameter3: double;

        $d4 := @parameter4: double;

        $d5 := @parameter5: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform: double cXX> = $d0;

        r0.<org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform: double cYX> = $d1;

        r0.<org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform: double cXY> = $d2;

        r0.<org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform: double cYY> = $d3;

        r0.<org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform: double cX1> = $d4;

        r0.<org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform: double cY1> = $d5;

        $d6 = neg $d3;

        $d6 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double)>($d2, $d5, $d6, $d4);

        r0.<org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform: double c1Y> = $d6;

        $d6 = neg $d1;

        $d4 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double)>($d0, $d5, $d6, $d4);

        r0.<org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform: double c1X> = $d4;

        $d1 = neg $d1;

        $d0 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double)>($d0, $d3, $d1, $d2);

        r0.<org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform: double c11> = $d0;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform: double c11>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        $b0 = $d0 cmpg 1.0E-20;

        if $b0 >= 0 goto label1;

        $r2 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r1 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NON_INVERTIBLE_TRANSFORM>;

        $r3 = newarray (java.lang.Object)[0];

        specialinvoke $r2.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r1, $r3);

        throw $r2;

     label1:
        return;
    }
    public volatile org.apache.commons.math3.geometry.Point apply(org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform r0;
        org.apache.commons.math3.geometry.Point $r1;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform;

        $r1 := @parameter0: org.apache.commons.math3.geometry.Point;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform: org.apache.commons.math3.geometry.euclidean.twod.Vector2D apply(org.apache.commons.math3.geometry.Point)>($r1);

        return $r2;
    }
    public org.apache.commons.math3.geometry.euclidean.twod.Line apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform r0;
        org.apache.commons.math3.geometry.partitioning.Hyperplane r1;
        org.apache.commons.math3.geometry.euclidean.twod.Line $r2, r3;
        double d0, $d1, $d2, $d3, $d4, $d5;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.Hyperplane;

        r3 = (org.apache.commons.math3.geometry.euclidean.twod.Line) r1;

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform: double c1X>;

        $d2 = staticinvoke <org.apache.commons.math3.geometry.euclidean.twod.Line: double access$000(org.apache.commons.math3.geometry.euclidean.twod.Line)>(r3);

        $d3 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform: double c1Y>;

        d0 = staticinvoke <org.apache.commons.math3.geometry.euclidean.twod.Line: double access$100(org.apache.commons.math3.geometry.euclidean.twod.Line)>(r3);

        $d4 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform: double c11>;

        $d5 = staticinvoke <org.apache.commons.math3.geometry.euclidean.twod.Line: double access$200(org.apache.commons.math3.geometry.euclidean.twod.Line)>(r3);

        $d1 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double,double,double)>($d1, $d2, $d3, d0, $d4, $d5);

        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform: double cXX>;

        $d3 = staticinvoke <org.apache.commons.math3.geometry.euclidean.twod.Line: double access$000(org.apache.commons.math3.geometry.euclidean.twod.Line)>(r3);

        d0 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform: double cXY>;

        $d4 = staticinvoke <org.apache.commons.math3.geometry.euclidean.twod.Line: double access$100(org.apache.commons.math3.geometry.euclidean.twod.Line)>(r3);

        $d2 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double)>($d2, $d3, d0, $d4);

        $d3 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform: double cYX>;

        d0 = staticinvoke <org.apache.commons.math3.geometry.euclidean.twod.Line: double access$000(org.apache.commons.math3.geometry.euclidean.twod.Line)>(r3);

        $d4 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform: double cYY>;

        $d5 = staticinvoke <org.apache.commons.math3.geometry.euclidean.twod.Line: double access$100(org.apache.commons.math3.geometry.euclidean.twod.Line)>(r3);

        $d3 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double)>($d3, d0, $d4, $d5);

        d0 = $d3 * $d3;

        $d4 = $d2 * $d2;

        d0 = d0 + $d4;

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d0);

        d0 = 1.0 / d0;

        $r2 = new org.apache.commons.math3.geometry.euclidean.twod.Line;

        $d4 = neg $d3;

        $d5 = neg $d2;

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d4, $d5);

        $d4 = 3.141592653589793 + $d4;

        $d2 = d0 * $d2;

        $d3 = d0 * $d3;

        $d1 = d0 * $d1;

        d0 = staticinvoke <org.apache.commons.math3.geometry.euclidean.twod.Line: double access$300(org.apache.commons.math3.geometry.euclidean.twod.Line)>(r3);

        specialinvoke $r2.<org.apache.commons.math3.geometry.euclidean.twod.Line: void <init>(double,double,double,double,double,org.apache.commons.math3.geometry.euclidean.twod.Line$1)>($d4, $d2, $d3, $d1, d0, null);

        return $r2;
    }
    public org.apache.commons.math3.geometry.euclidean.twod.Vector2D apply(org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform r0;
        org.apache.commons.math3.geometry.Point r1;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D $r2;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform;

        r1 := @parameter0: org.apache.commons.math3.geometry.Point;

        $r2 = (org.apache.commons.math3.geometry.euclidean.twod.Vector2D) r1;

        $d0 = virtualinvoke $r2.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getX()>();

        $d1 = virtualinvoke $r2.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getY()>();

        $r2 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform: double cXX>;

        $d3 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform: double cXY>;

        $d4 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform: double cX1>;

        $d2 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double,double,double)>($d2, $d0, $d3, $d1, $d4, 1.0);

        $d3 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform: double cYX>;

        $d4 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform: double cYY>;

        $d5 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform: double cY1>;

        $d0 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double,double,double)>($d3, $d0, $d4, $d1, $d5, 1.0);

        specialinvoke $r2.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: void <init>(double,double)>($d2, $d0);

        return $r2;
    }
    public volatile org.apache.commons.math3.geometry.partitioning.Hyperplane apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform r0;
        org.apache.commons.math3.geometry.partitioning.Hyperplane $r1;
        org.apache.commons.math3.geometry.euclidean.twod.Line $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform;

        $r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.Hyperplane;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform: org.apache.commons.math3.geometry.euclidean.twod.Line apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)>($r1);

        return $r2;
    }
    public org.apache.commons.math3.geometry.partitioning.SubHyperplane apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane, org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.Hyperplane)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform r0;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane r1;
        org.apache.commons.math3.geometry.partitioning.Hyperplane r2, r3, $r4;
        org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint r5, $r10;
        org.apache.commons.math3.geometry.euclidean.twod.Line r6, r7;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D $r8;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D $r9;
        boolean $z0;
        double $d0;
        org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint $r11;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.SubHyperplane;

        r2 := @parameter1: org.apache.commons.math3.geometry.partitioning.Hyperplane;

        r3 := @parameter2: org.apache.commons.math3.geometry.partitioning.Hyperplane;

        $r4 = interfaceinvoke r1.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        r5 = (org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint) $r4;

        r6 = (org.apache.commons.math3.geometry.euclidean.twod.Line) r2;

        r7 = (org.apache.commons.math3.geometry.euclidean.twod.Line) r3;

        $r8 = virtualinvoke r5.<org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint: org.apache.commons.math3.geometry.euclidean.oned.Vector1D getLocation()>();

        $r9 = virtualinvoke r6.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.twod.Vector2D toSpace(org.apache.commons.math3.geometry.Vector)>($r8);

        $r9 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform: org.apache.commons.math3.geometry.euclidean.twod.Vector2D apply(org.apache.commons.math3.geometry.Point)>($r9);

        $r8 = virtualinvoke r7.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.oned.Vector1D toSubSpace(org.apache.commons.math3.geometry.Vector)>($r9);

        $r10 = new org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint;

        $z0 = virtualinvoke r5.<org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint: boolean isDirect()>();

        $d0 = staticinvoke <org.apache.commons.math3.geometry.euclidean.twod.Line: double access$300(org.apache.commons.math3.geometry.euclidean.twod.Line)>(r6);

        specialinvoke $r10.<org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint: void <init>(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,boolean,double)>($r8, $z0, $d0);

        $r11 = virtualinvoke $r10.<org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint: org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint wholeHyperplane()>();

        return $r11;
    }
