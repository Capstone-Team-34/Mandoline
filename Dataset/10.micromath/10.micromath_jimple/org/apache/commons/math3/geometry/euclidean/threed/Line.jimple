org.apache.commons.math3.geometry.euclidean.threed.Line extends java.lang.Object implements org.apache.commons.math3.geometry.partitioning.Embedding
private static final double DEFAULT_TOLERANCE
private org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction
private final double tolerance
private org.apache.commons.math3.geometry.euclidean.threed.Vector3D zero
    public void <init>(org.apache.commons.math3.geometry.euclidean.threed.Line)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Line r0, $r1;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r2;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Line;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Line;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction>;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction> = $r2;

        $r2 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D zero>;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D zero> = $r2;

        $d0 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Line: double tolerance>;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: double tolerance> = $d0;

        return;
    }
    public void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.geometry.euclidean.threed.Line r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r1, $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Line;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $r2 := @parameter1: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double)>($r1, $r2, 1.0E-10);

        return;
    }
    public void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.geometry.euclidean.threed.Line r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r1, $r2;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Line;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $r2 := @parameter1: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d0 := @parameter2: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: void reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r1, $r2);

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: double tolerance> = $d0;

        return;
    }
    public org.apache.commons.math3.geometry.euclidean.threed.Vector3D closestPoint(org.apache.commons.math3.geometry.euclidean.threed.Line)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Line r0, $r1;
        double $d0, $d1, $d2, $d3;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r2, $r3, $r4;
        byte $b0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Line;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Line;

        $r2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction>;

        $r3 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction>;

        $d1 = virtualinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double dotProduct(org.apache.commons.math3.geometry.Vector)>($r3);

        $d0 = $d1 * $d1;

        $d0 = 1.0 - $d0;

        $d2 = <org.apache.commons.math3.util.Precision: double EPSILON>;

        $b0 = $d0 cmpg $d2;

        if $b0 >= 0 goto label1;

        $r2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D zero>;

        return $r2;

     label1:
        $r2 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D zero>;

        $r3 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D zero>;

        $r2 = virtualinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D subtract(org.apache.commons.math3.geometry.Vector)>($r3);

        $r3 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction>;

        $d2 = virtualinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double dotProduct(org.apache.commons.math3.geometry.Vector)>($r3);

        $r3 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction>;

        $d3 = virtualinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double dotProduct(org.apache.commons.math3.geometry.Vector)>($r3);

        $r4 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $r2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D zero>;

        $d1 = $d3 * $d1;

        $d1 = $d2 - $d1;

        $d0 = $d1 / $d0;

        $r3 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction>;

        specialinvoke $r4.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>(1.0, $r2, $d0, $r3);

        return $r4;
    }
    public boolean contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Line r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r1;
        double $d0, $d1;
        byte $b0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Line;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d1 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: double distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r1);

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: double tolerance>;

        $b0 = $d1 cmpg $d0;

        if $b0 >= 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public double distance(org.apache.commons.math3.geometry.euclidean.threed.Line)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Line r0, $r1;
        double d0, $d1;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r2, $r3, $r4;
        byte $b0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Line;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Line;

        $r2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction>;

        $r3 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction>;

        $r2 = staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r2, $r3);

        d0 = virtualinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getNorm()>();

        $d1 = <org.apache.commons.math3.util.Precision: double SAFE_MIN>;

        $b0 = d0 cmpg $d1;

        if $b0 >= 0 goto label1;

        $r2 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D zero>;

        d0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: double distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r2);

        return d0;

     label1:
        $r3 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D zero>;

        $r4 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D zero>;

        $r3 = virtualinvoke $r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D subtract(org.apache.commons.math3.geometry.Vector)>($r4);

        $d1 = virtualinvoke $r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double dotProduct(org.apache.commons.math3.geometry.Vector)>($r2);

        d0 = $d1 / d0;

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d0);

        return d0;
    }
    public double distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Line r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r1, $r2, $r3;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Line;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $r3 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D zero>;

        $r3 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D subtract(org.apache.commons.math3.geometry.Vector)>($r3);

        $r1 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $r2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction>;

        $d0 = virtualinvoke $r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double dotProduct(org.apache.commons.math3.geometry.Vector)>($r2);

        $d0 = neg $d0;

        $r2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction>;

        specialinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>(1.0, $r3, $d0, $r2);

        $d0 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getNorm()>();

        return $d0;
    }
    public double getAbscissa(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Line r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r1, $r2;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Line;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $r2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D zero>;

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D subtract(org.apache.commons.math3.geometry.Vector)>($r2);

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction>;

        $d0 = virtualinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double dotProduct(org.apache.commons.math3.geometry.Vector)>($r1);

        return $d0;
    }
    public org.apache.commons.math3.geometry.euclidean.threed.Vector3D getDirection()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Line r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Line;

        r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction>;

        return r1;
    }
    public org.apache.commons.math3.geometry.euclidean.threed.Vector3D getOrigin()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Line r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Line;

        r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D zero>;

        return r1;
    }
    public double getTolerance()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Line r0;
        double d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Line;

        d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: double tolerance>;

        return d0;
    }
    public org.apache.commons.math3.geometry.euclidean.threed.Vector3D intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Line r0, $r1;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Line;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Line;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D closestPoint(org.apache.commons.math3.geometry.euclidean.threed.Line)>($r1);

        $z0 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.Line: boolean contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r2);

        if $z0 == 0 goto label1;

        return $r2;

     label1:
        return null;
    }
    public boolean isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Line r0, $r1;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r2, $r3;
        double $d0, $d1;
        byte $b0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Line;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Line;

        $r3 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction>;

        $r2 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction>;

        $d1 = staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r3, $r2);

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: double tolerance>;

        $b0 = $d1 cmpg $d0;

        if $b0 < 0 goto label1;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: double tolerance>;

        $d0 = 3.141592653589793 - $d0;

        $b0 = $d1 cmpl $d0;

        if $b0 <= 0 goto label2;

     label1:
        $r2 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D zero>;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: boolean contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r2);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }
    public org.apache.commons.math3.geometry.euclidean.threed.Vector3D pointAt(double)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Line r0;
        double $d0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r1, $r2, $r3;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Line;

        $d0 := @parameter0: double;

        $r1 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $r2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D zero>;

        $r3 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction>;

        specialinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>(1.0, $r2, $d0, $r3);

        return $r1;
    }
    public void reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.geometry.euclidean.threed.Line r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r1, $r2, $r6;
        double $d0, $d1;
        byte $b0;
        org.apache.commons.math3.exception.MathIllegalArgumentException $r3;
        org.apache.commons.math3.exception.util.LocalizedFormats $r4;
        java.lang.Object[] $r5;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Line;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $r2 := @parameter1: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $r2 = virtualinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D subtract(org.apache.commons.math3.geometry.Vector)>($r1);

        $d0 = virtualinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getNormSq()>();

        $b0 = $d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        $r3 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats ZERO_NORM>;

        $r5 = newarray (java.lang.Object)[0];

        specialinvoke $r3.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r4, $r5);

        throw $r3;

     label1:
        $r6 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d0);

        $d1 = 1.0 / $d1;

        specialinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($d1, $r2);

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction> = $r6;

        $r6 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d1 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double dotProduct(org.apache.commons.math3.geometry.Vector)>($r2);

        $d1 = neg $d1;

        $d0 = $d1 / $d0;

        specialinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>(1.0, $r1, $d0, $r2);

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D zero> = $r6;

        return;
    }
    public org.apache.commons.math3.geometry.euclidean.threed.Line revert()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Line r0, r1;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Line;

        r1 = new org.apache.commons.math3.geometry.euclidean.threed.Line;

        specialinvoke r1.<org.apache.commons.math3.geometry.euclidean.threed.Line: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Line)>(r0);

        $r2 = r1.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction>;

        $r2 = virtualinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D negate()>();

        r1.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction> = $r2;

        return r1;
    }
    public volatile org.apache.commons.math3.geometry.Point toSpace(org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Line r0;
        org.apache.commons.math3.geometry.Point $r1;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Line;

        $r1 := @parameter0: org.apache.commons.math3.geometry.Point;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D toSpace(org.apache.commons.math3.geometry.Point)>($r1);

        return $r2;
    }
    public org.apache.commons.math3.geometry.euclidean.threed.Vector3D toSpace(org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Line r0;
        org.apache.commons.math3.geometry.Point r1;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D r2;
        double $d0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r3;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Line;

        r1 := @parameter0: org.apache.commons.math3.geometry.Point;

        r2 = (org.apache.commons.math3.geometry.euclidean.oned.Vector1D) r1;

        $d0 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double getX()>();

        $r3 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D pointAt(double)>($d0);

        return $r3;
    }
    public org.apache.commons.math3.geometry.euclidean.threed.Vector3D toSpace(org.apache.commons.math3.geometry.Vector)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Line r0;
        org.apache.commons.math3.geometry.Vector r1;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Line;

        r1 := @parameter0: org.apache.commons.math3.geometry.Vector;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D toSpace(org.apache.commons.math3.geometry.Point)>(r1);

        return $r2;
    }
    public volatile org.apache.commons.math3.geometry.Point toSubSpace(org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Line r0;
        org.apache.commons.math3.geometry.Point $r1;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Line;

        $r1 := @parameter0: org.apache.commons.math3.geometry.Point;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.oned.Vector1D toSubSpace(org.apache.commons.math3.geometry.Point)>($r1);

        return $r2;
    }
    public org.apache.commons.math3.geometry.euclidean.oned.Vector1D toSubSpace(org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Line r0;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D $r1;
        double $d0;
        org.apache.commons.math3.geometry.Point r2;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r3;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Line;

        r2 := @parameter0: org.apache.commons.math3.geometry.Point;

        $r1 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        r3 = (org.apache.commons.math3.geometry.euclidean.threed.Vector3D) r2;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: double getAbscissa(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>(r3);

        specialinvoke $r1.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: void <init>(double)>($d0);

        return $r1;
    }
    public org.apache.commons.math3.geometry.euclidean.oned.Vector1D toSubSpace(org.apache.commons.math3.geometry.Vector)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Line r0;
        org.apache.commons.math3.geometry.Vector r1;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Line;

        r1 := @parameter0: org.apache.commons.math3.geometry.Vector;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.oned.Vector1D toSubSpace(org.apache.commons.math3.geometry.Point)>(r1);

        return $r2;
    }
    public org.apache.commons.math3.geometry.euclidean.threed.SubLine wholeLine()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Line r0;
        org.apache.commons.math3.geometry.euclidean.threed.SubLine $r1;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet $r2;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Line;

        $r1 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine;

        $r2 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: double tolerance>;

        specialinvoke $r2.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: void <init>(double)>($d0);

        specialinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.SubLine: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Line,org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet)>(r0, $r2);

        return $r1;
    }
