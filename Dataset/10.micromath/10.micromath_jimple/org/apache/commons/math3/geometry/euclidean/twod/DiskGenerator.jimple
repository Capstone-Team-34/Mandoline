org.apache.commons.math3.geometry.euclidean.twod.DiskGenerator extends java.lang.Object implements org.apache.commons.math3.geometry.enclosing.SupportBallGenerator
    public void <init>()
    {
        org.apache.commons.math3.geometry.euclidean.twod.DiskGenerator r0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.DiskGenerator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    private org.apache.commons.math3.fraction.BigFraction minor(org.apache.commons.math3.fraction.BigFraction[], org.apache.commons.math3.fraction.BigFraction[])
    {
        org.apache.commons.math3.geometry.euclidean.twod.DiskGenerator r0;
        org.apache.commons.math3.fraction.BigFraction[] $r1, $r2;
        org.apache.commons.math3.fraction.BigFraction $r3, $r4, $r5, $r6;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.DiskGenerator;

        $r1 := @parameter0: org.apache.commons.math3.fraction.BigFraction[];

        $r2 := @parameter1: org.apache.commons.math3.fraction.BigFraction[];

        $r3 = $r2[0];

        $r4 = $r1[2];

        $r5 = $r1[1];

        $r4 = virtualinvoke $r4.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction subtract(org.apache.commons.math3.fraction.BigFraction)>($r5);

        $r3 = virtualinvoke $r3.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction multiply(org.apache.commons.math3.fraction.BigFraction)>($r4);

        $r4 = $r2[1];

        $r5 = $r1[0];

        $r6 = $r1[2];

        $r5 = virtualinvoke $r5.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction subtract(org.apache.commons.math3.fraction.BigFraction)>($r6);

        $r4 = virtualinvoke $r4.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction multiply(org.apache.commons.math3.fraction.BigFraction)>($r5);

        $r3 = virtualinvoke $r3.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction add(org.apache.commons.math3.fraction.BigFraction)>($r4);

        $r4 = $r2[2];

        $r5 = $r1[1];

        $r6 = $r1[0];

        $r5 = virtualinvoke $r5.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction subtract(org.apache.commons.math3.fraction.BigFraction)>($r6);

        $r4 = virtualinvoke $r4.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction multiply(org.apache.commons.math3.fraction.BigFraction)>($r5);

        $r3 = virtualinvoke $r3.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction add(org.apache.commons.math3.fraction.BigFraction)>($r4);

        return $r3;
    }
    public org.apache.commons.math3.geometry.enclosing.EnclosingBall ballOnSupport(java.util.List)
    {
        org.apache.commons.math3.geometry.euclidean.twod.DiskGenerator r0;
        java.util.List r1;
        org.apache.commons.math3.fraction.BigFraction[] r2, r3, r4;
        int $i0;
        org.apache.commons.math3.geometry.enclosing.EnclosingBall $r5;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D $r6, r9, $r10, $r15;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] $r7;
        java.lang.Object $r8;
        double $d0, $d1;
        org.apache.commons.math3.fraction.BigFraction $r11, $r12, $r13, $r14;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.DiskGenerator;

        r1 := @parameter0: java.util.List;

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i0 >= 1 goto label1;

        $r5 = new org.apache.commons.math3.geometry.enclosing.EnclosingBall;

        $r6 = <org.apache.commons.math3.geometry.euclidean.twod.Vector2D: org.apache.commons.math3.geometry.euclidean.twod.Vector2D ZERO>;

        $r7 = newarray (org.apache.commons.math3.geometry.euclidean.twod.Vector2D)[0];

        specialinvoke $r5.<org.apache.commons.math3.geometry.enclosing.EnclosingBall: void <init>(org.apache.commons.math3.geometry.Point,double,org.apache.commons.math3.geometry.Point[])>($r6, #-Infinity, $r7);

        return $r5;

     label1:
        $r8 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        $r6 = (org.apache.commons.math3.geometry.euclidean.twod.Vector2D) $r8;

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i0 >= 2 goto label2;

        $r5 = new org.apache.commons.math3.geometry.enclosing.EnclosingBall;

        $r7 = newarray (org.apache.commons.math3.geometry.euclidean.twod.Vector2D)[1];

        $r7[0] = $r6;

        specialinvoke $r5.<org.apache.commons.math3.geometry.enclosing.EnclosingBall: void <init>(org.apache.commons.math3.geometry.Point,double,org.apache.commons.math3.geometry.Point[])>($r6, 0.0, $r7);

        return $r5;

     label2:
        $r8 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(1);

        r9 = (org.apache.commons.math3.geometry.euclidean.twod.Vector2D) $r8;

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i0 >= 3 goto label3;

        $r5 = new org.apache.commons.math3.geometry.enclosing.EnclosingBall;

        $r10 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        specialinvoke $r10.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: void <init>(double,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)>(0.5, $r6, 0.5, r9);

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double distance(org.apache.commons.math3.geometry.Vector)>(r9);

        $d0 = 0.5 * $d0;

        $r7 = newarray (org.apache.commons.math3.geometry.euclidean.twod.Vector2D)[2];

        $r7[0] = $r6;

        $r7[1] = r9;

        specialinvoke $r5.<org.apache.commons.math3.geometry.enclosing.EnclosingBall: void <init>(org.apache.commons.math3.geometry.Point,double,org.apache.commons.math3.geometry.Point[])>($r10, $d0, $r7);

        return $r5;

     label3:
        $r8 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(2);

        $r10 = (org.apache.commons.math3.geometry.euclidean.twod.Vector2D) $r8;

        r3 = newarray (org.apache.commons.math3.fraction.BigFraction)[3];

        $r11 = new org.apache.commons.math3.fraction.BigFraction;

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getX()>();

        specialinvoke $r11.<org.apache.commons.math3.fraction.BigFraction: void <init>(double)>($d0);

        r3[0] = $r11;

        $r11 = new org.apache.commons.math3.fraction.BigFraction;

        $d0 = virtualinvoke r9.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getX()>();

        specialinvoke $r11.<org.apache.commons.math3.fraction.BigFraction: void <init>(double)>($d0);

        r3[1] = $r11;

        $r11 = new org.apache.commons.math3.fraction.BigFraction;

        $d0 = virtualinvoke $r10.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getX()>();

        specialinvoke $r11.<org.apache.commons.math3.fraction.BigFraction: void <init>(double)>($d0);

        r3[2] = $r11;

        r4 = newarray (org.apache.commons.math3.fraction.BigFraction)[3];

        $r11 = new org.apache.commons.math3.fraction.BigFraction;

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getY()>();

        specialinvoke $r11.<org.apache.commons.math3.fraction.BigFraction: void <init>(double)>($d0);

        r4[0] = $r11;

        $r11 = new org.apache.commons.math3.fraction.BigFraction;

        $d0 = virtualinvoke r9.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getY()>();

        specialinvoke $r11.<org.apache.commons.math3.fraction.BigFraction: void <init>(double)>($d0);

        r4[1] = $r11;

        $r11 = new org.apache.commons.math3.fraction.BigFraction;

        $d0 = virtualinvoke $r10.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getY()>();

        specialinvoke $r11.<org.apache.commons.math3.fraction.BigFraction: void <init>(double)>($d0);

        r4[2] = $r11;

        r2 = newarray (org.apache.commons.math3.fraction.BigFraction)[3];

        $r11 = r3[0];

        $r12 = r3[0];

        $r11 = virtualinvoke $r11.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction multiply(org.apache.commons.math3.fraction.BigFraction)>($r12);

        $r12 = r4[0];

        $r13 = r4[0];

        $r12 = virtualinvoke $r12.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction multiply(org.apache.commons.math3.fraction.BigFraction)>($r13);

        $r11 = virtualinvoke $r11.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction add(org.apache.commons.math3.fraction.BigFraction)>($r12);

        r2[0] = $r11;

        $r11 = r3[1];

        $r12 = r3[1];

        $r11 = virtualinvoke $r11.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction multiply(org.apache.commons.math3.fraction.BigFraction)>($r12);

        $r12 = r4[1];

        $r13 = r4[1];

        $r12 = virtualinvoke $r12.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction multiply(org.apache.commons.math3.fraction.BigFraction)>($r13);

        $r11 = virtualinvoke $r11.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction add(org.apache.commons.math3.fraction.BigFraction)>($r12);

        r2[1] = $r11;

        $r11 = r3[2];

        $r12 = r3[2];

        $r11 = virtualinvoke $r11.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction multiply(org.apache.commons.math3.fraction.BigFraction)>($r12);

        $r12 = r4[2];

        $r13 = r4[2];

        $r12 = virtualinvoke $r12.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction multiply(org.apache.commons.math3.fraction.BigFraction)>($r13);

        $r11 = virtualinvoke $r11.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction add(org.apache.commons.math3.fraction.BigFraction)>($r12);

        r2[2] = $r11;

        $r11 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.DiskGenerator: org.apache.commons.math3.fraction.BigFraction minor(org.apache.commons.math3.fraction.BigFraction[],org.apache.commons.math3.fraction.BigFraction[])>(r3, r4);

        $r12 = virtualinvoke $r11.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction multiply(int)>(2);

        $r11 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.DiskGenerator: org.apache.commons.math3.fraction.BigFraction minor(org.apache.commons.math3.fraction.BigFraction[],org.apache.commons.math3.fraction.BigFraction[])>(r2, r4);

        $r13 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.DiskGenerator: org.apache.commons.math3.fraction.BigFraction minor(org.apache.commons.math3.fraction.BigFraction[],org.apache.commons.math3.fraction.BigFraction[])>(r2, r3);

        $r11 = virtualinvoke $r11.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction divide(org.apache.commons.math3.fraction.BigFraction)>($r12);

        $r12 = virtualinvoke $r13.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction divide(org.apache.commons.math3.fraction.BigFraction)>($r12);

        $r12 = virtualinvoke $r12.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction negate()>();

        $r13 = r3[0];

        $r13 = virtualinvoke $r13.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction subtract(org.apache.commons.math3.fraction.BigFraction)>($r11);

        $r14 = r4[0];

        $r14 = virtualinvoke $r14.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction subtract(org.apache.commons.math3.fraction.BigFraction)>($r12);

        $r13 = virtualinvoke $r13.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction multiply(org.apache.commons.math3.fraction.BigFraction)>($r13);

        $r14 = virtualinvoke $r14.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction multiply(org.apache.commons.math3.fraction.BigFraction)>($r14);

        $r13 = virtualinvoke $r13.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction add(org.apache.commons.math3.fraction.BigFraction)>($r14);

        $r5 = new org.apache.commons.math3.geometry.enclosing.EnclosingBall;

        $r15 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        $d0 = virtualinvoke $r11.<org.apache.commons.math3.fraction.BigFraction: double doubleValue()>();

        $d1 = virtualinvoke $r12.<org.apache.commons.math3.fraction.BigFraction: double doubleValue()>();

        specialinvoke $r15.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: void <init>(double,double)>($d0, $d1);

        $d0 = virtualinvoke $r13.<org.apache.commons.math3.fraction.BigFraction: double doubleValue()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d0);

        $r7 = newarray (org.apache.commons.math3.geometry.euclidean.twod.Vector2D)[3];

        $r7[0] = $r6;

        $r7[1] = r9;

        $r7[2] = $r10;

        specialinvoke $r5.<org.apache.commons.math3.geometry.enclosing.EnclosingBall: void <init>(org.apache.commons.math3.geometry.Point,double,org.apache.commons.math3.geometry.Point[])>($r15, $d0, $r7);

        return $r5;
    }
