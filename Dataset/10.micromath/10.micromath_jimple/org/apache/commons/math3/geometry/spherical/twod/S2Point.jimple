org.apache.commons.math3.geometry.spherical.twod.S2Point extends java.lang.Object implements org.apache.commons.math3.geometry.Point
public static final org.apache.commons.math3.geometry.spherical.twod.S2Point MINUS_I
public static final org.apache.commons.math3.geometry.spherical.twod.S2Point MINUS_J
public static final org.apache.commons.math3.geometry.spherical.twod.S2Point MINUS_K
public static final org.apache.commons.math3.geometry.spherical.twod.S2Point NaN
public static final org.apache.commons.math3.geometry.spherical.twod.S2Point PLUS_I
public static final org.apache.commons.math3.geometry.spherical.twod.S2Point PLUS_J
public static final org.apache.commons.math3.geometry.spherical.twod.S2Point PLUS_K
private static final long serialVersionUID
private final double phi
private final double theta
private final org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector
    static void <clinit>()
    {
        org.apache.commons.math3.geometry.spherical.twod.S2Point $r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r1;

        $r0 = new org.apache.commons.math3.geometry.spherical.twod.S2Point;

        $r1 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_I>;

        specialinvoke $r0.<org.apache.commons.math3.geometry.spherical.twod.S2Point: void <init>(double,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>(0.0, 1.5707963267948966, $r1);

        <org.apache.commons.math3.geometry.spherical.twod.S2Point: org.apache.commons.math3.geometry.spherical.twod.S2Point PLUS_I> = $r0;

        $r0 = new org.apache.commons.math3.geometry.spherical.twod.S2Point;

        $r1 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_J>;

        specialinvoke $r0.<org.apache.commons.math3.geometry.spherical.twod.S2Point: void <init>(double,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>(1.5707963267948966, 1.5707963267948966, $r1);

        <org.apache.commons.math3.geometry.spherical.twod.S2Point: org.apache.commons.math3.geometry.spherical.twod.S2Point PLUS_J> = $r0;

        $r0 = new org.apache.commons.math3.geometry.spherical.twod.S2Point;

        $r1 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_K>;

        specialinvoke $r0.<org.apache.commons.math3.geometry.spherical.twod.S2Point: void <init>(double,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>(0.0, 0.0, $r1);

        <org.apache.commons.math3.geometry.spherical.twod.S2Point: org.apache.commons.math3.geometry.spherical.twod.S2Point PLUS_K> = $r0;

        $r0 = new org.apache.commons.math3.geometry.spherical.twod.S2Point;

        $r1 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D MINUS_I>;

        specialinvoke $r0.<org.apache.commons.math3.geometry.spherical.twod.S2Point: void <init>(double,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>(3.141592653589793, 1.5707963267948966, $r1);

        <org.apache.commons.math3.geometry.spherical.twod.S2Point: org.apache.commons.math3.geometry.spherical.twod.S2Point MINUS_I> = $r0;

        $r0 = new org.apache.commons.math3.geometry.spherical.twod.S2Point;

        $r1 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D MINUS_J>;

        specialinvoke $r0.<org.apache.commons.math3.geometry.spherical.twod.S2Point: void <init>(double,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>(4.71238898038469, 1.5707963267948966, $r1);

        <org.apache.commons.math3.geometry.spherical.twod.S2Point: org.apache.commons.math3.geometry.spherical.twod.S2Point MINUS_J> = $r0;

        $r0 = new org.apache.commons.math3.geometry.spherical.twod.S2Point;

        $r1 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D MINUS_K>;

        specialinvoke $r0.<org.apache.commons.math3.geometry.spherical.twod.S2Point: void <init>(double,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>(0.0, 3.141592653589793, $r1);

        <org.apache.commons.math3.geometry.spherical.twod.S2Point: org.apache.commons.math3.geometry.spherical.twod.S2Point MINUS_K> = $r0;

        $r0 = new org.apache.commons.math3.geometry.spherical.twod.S2Point;

        $r1 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D NaN>;

        specialinvoke $r0.<org.apache.commons.math3.geometry.spherical.twod.S2Point: void <init>(double,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>(#NaN, #NaN, $r1);

        <org.apache.commons.math3.geometry.spherical.twod.S2Point: org.apache.commons.math3.geometry.spherical.twod.S2Point NaN> = $r0;

        return;
    }
    public void <init>(double, double) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.geometry.spherical.twod.S2Point r0;
        double $d0, $d1;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r1;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.S2Point;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $r1 = staticinvoke <org.apache.commons.math3.geometry.spherical.twod.S2Point: org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector(double,double)>($d0, $d1);

        specialinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.S2Point: void <init>(double,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($d0, $d1, $r1);

        return;
    }
    private void <init>(double, double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D)
    {
        org.apache.commons.math3.geometry.spherical.twod.S2Point r0;
        double $d0, $d1;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r1;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.S2Point;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $r1 := @parameter2: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.geometry.spherical.twod.S2Point: double theta> = $d0;

        r0.<org.apache.commons.math3.geometry.spherical.twod.S2Point: double phi> = $d1;

        r0.<org.apache.commons.math3.geometry.spherical.twod.S2Point: org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector> = $r1;

        return;
    }
    public void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.geometry.spherical.twod.S2Point r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r1, $r2;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.S2Point;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d0 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d1 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d0, $d1);

        $r2 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_K>;

        $d1 = staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r2, $r1);

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D normalize()>();

        specialinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.S2Point: void <init>(double,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($d0, $d1, $r1);

        return;
    }
    public static double distance(org.apache.commons.math3.geometry.spherical.twod.S2Point, org.apache.commons.math3.geometry.spherical.twod.S2Point)
    {
        org.apache.commons.math3.geometry.spherical.twod.S2Point $r0, $r1;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r2, $r3;
        double $d0;

        $r0 := @parameter0: org.apache.commons.math3.geometry.spherical.twod.S2Point;

        $r1 := @parameter1: org.apache.commons.math3.geometry.spherical.twod.S2Point;

        $r3 = $r0.<org.apache.commons.math3.geometry.spherical.twod.S2Point: org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector>;

        $r2 = $r1.<org.apache.commons.math3.geometry.spherical.twod.S2Point: org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector>;

        $d0 = staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r3, $r2);

        return $d0;
    }
    private static org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector(double, double) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        double $d0, $d1, $d2, $d3;
        byte $b0;
        org.apache.commons.math3.exception.OutOfRangeException $r0;
        java.lang.Double $r1, $r3;
        java.lang.Integer $r2;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r4;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $b0 = $d1 cmpg 0.0;

        if $b0 < 0 goto label1;

        $b0 = $d1 cmpl 3.141592653589793;

        if $b0 <= 0 goto label2;

     label1:
        $r0 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(3.141592653589793);

        specialinvoke $r0.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r1, $r2, $r3);

        throw $r0;

     label2:
        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double cos(double)>($d0);

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double sin(double)>($d0);

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double cos(double)>($d1);

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sin(double)>($d1);

        $r4 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d2 = $d2 * $d1;

        $d1 = $d3 * $d1;

        specialinvoke $r4.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,double,double)>($d2, $d1, $d0);

        return $r4;
    }
    public double distance(org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.spherical.twod.S2Point r0, r2;
        double $d0;
        org.apache.commons.math3.geometry.Point r1;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.S2Point;

        r1 := @parameter0: org.apache.commons.math3.geometry.Point;

        r2 = (org.apache.commons.math3.geometry.spherical.twod.S2Point) r1;

        $d0 = staticinvoke <org.apache.commons.math3.geometry.spherical.twod.S2Point: double distance(org.apache.commons.math3.geometry.spherical.twod.S2Point,org.apache.commons.math3.geometry.spherical.twod.S2Point)>(r0, r2);

        return $d0;
    }
    public boolean equals(java.lang.Object)
    {
        org.apache.commons.math3.geometry.spherical.twod.S2Point r0, r2;
        java.lang.Object $r1;
        boolean $z0;
        double $d0, $d1;
        byte $b0;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.S2Point;

        $r1 := @parameter0: java.lang.Object;

        if r0 != $r1 goto label1;

        return 1;

     label1:
        $z0 = $r1 instanceof org.apache.commons.math3.geometry.spherical.twod.S2Point;

        if $z0 == 0 goto label3;

        r2 = (org.apache.commons.math3.geometry.spherical.twod.S2Point) $r1;

        $z0 = virtualinvoke r2.<org.apache.commons.math3.geometry.spherical.twod.S2Point: boolean isNaN()>();

        if $z0 == 0 goto label2;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.S2Point: boolean isNaN()>();

        return $z0;

     label2:
        $d0 = r0.<org.apache.commons.math3.geometry.spherical.twod.S2Point: double theta>;

        $d1 = r2.<org.apache.commons.math3.geometry.spherical.twod.S2Point: double theta>;

        $b0 = $d0 cmpl $d1;

        if $b0 != 0 goto label3;

        $d0 = r0.<org.apache.commons.math3.geometry.spherical.twod.S2Point: double phi>;

        $d1 = r2.<org.apache.commons.math3.geometry.spherical.twod.S2Point: double phi>;

        $b0 = $d0 cmpl $d1;

        if $b0 == 0 goto label4;

     label3:
        return 0;

     label4:
        return 1;
    }
    public double getPhi()
    {
        org.apache.commons.math3.geometry.spherical.twod.S2Point r0;
        double d0;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.S2Point;

        d0 = r0.<org.apache.commons.math3.geometry.spherical.twod.S2Point: double phi>;

        return d0;
    }
    public org.apache.commons.math3.geometry.Space getSpace()
    {
        org.apache.commons.math3.geometry.spherical.twod.S2Point r0;
        org.apache.commons.math3.geometry.spherical.twod.Sphere2D $r1;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.S2Point;

        $r1 = staticinvoke <org.apache.commons.math3.geometry.spherical.twod.Sphere2D: org.apache.commons.math3.geometry.spherical.twod.Sphere2D getInstance()>();

        return $r1;
    }
    public double getTheta()
    {
        org.apache.commons.math3.geometry.spherical.twod.S2Point r0;
        double d0;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.S2Point;

        d0 = r0.<org.apache.commons.math3.geometry.spherical.twod.S2Point: double theta>;

        return d0;
    }
    public org.apache.commons.math3.geometry.euclidean.threed.Vector3D getVector()
    {
        org.apache.commons.math3.geometry.spherical.twod.S2Point r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r1;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.S2Point;

        r1 = r0.<org.apache.commons.math3.geometry.spherical.twod.S2Point: org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector>;

        return r1;
    }
    public int hashCode()
    {
        org.apache.commons.math3.geometry.spherical.twod.S2Point r0;
        double $d0;
        boolean $z0;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.S2Point;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.S2Point: boolean isNaN()>();

        if $z0 == 0 goto label1;

        return 542;

     label1:
        $d0 = r0.<org.apache.commons.math3.geometry.spherical.twod.S2Point: double theta>;

        $i0 = staticinvoke <org.apache.commons.math3.util.MathUtils: int hash(double)>($d0);

        $i0 = $i0 * 37;

        $d0 = r0.<org.apache.commons.math3.geometry.spherical.twod.S2Point: double phi>;

        $i1 = staticinvoke <org.apache.commons.math3.util.MathUtils: int hash(double)>($d0);

        $i0 = $i0 + $i1;

        $i0 = $i0 * 134;

        return $i0;
    }
    public boolean isNaN()
    {
        org.apache.commons.math3.geometry.spherical.twod.S2Point r0;
        double $d0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.S2Point;

        $d0 = r0.<org.apache.commons.math3.geometry.spherical.twod.S2Point: double theta>;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 != 0 goto label1;

        $d0 = r0.<org.apache.commons.math3.geometry.spherical.twod.S2Point: double phi>;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    public org.apache.commons.math3.geometry.spherical.twod.S2Point negate()
    {
        org.apache.commons.math3.geometry.spherical.twod.S2Point r0, $r2;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.S2Point;

        $r2 = new org.apache.commons.math3.geometry.spherical.twod.S2Point;

        $d0 = r0.<org.apache.commons.math3.geometry.spherical.twod.S2Point: double theta>;

        $d0 = neg $d0;

        $d1 = r0.<org.apache.commons.math3.geometry.spherical.twod.S2Point: double phi>;

        $d1 = 3.141592653589793 - $d1;

        $r1 = r0.<org.apache.commons.math3.geometry.spherical.twod.S2Point: org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector>;

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D negate()>();

        specialinvoke $r2.<org.apache.commons.math3.geometry.spherical.twod.S2Point: void <init>(double,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($d0, $d1, $r1);

        return $r2;
    }
