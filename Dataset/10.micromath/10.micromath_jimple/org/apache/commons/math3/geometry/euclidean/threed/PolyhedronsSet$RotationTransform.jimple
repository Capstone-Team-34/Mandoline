org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform extends java.lang.Object implements org.apache.commons.math3.geometry.partitioning.Transform
private org.apache.commons.math3.geometry.euclidean.threed.Plane cachedOriginal
private org.apache.commons.math3.geometry.partitioning.Transform cachedTransform
private org.apache.commons.math3.geometry.euclidean.threed.Vector3D center
private org.apache.commons.math3.geometry.euclidean.threed.Rotation rotation
    void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Rotation)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r1;
        org.apache.commons.math3.geometry.euclidean.threed.Rotation $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $r2 := @parameter1: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform: org.apache.commons.math3.geometry.euclidean.threed.Vector3D center> = $r1;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform: org.apache.commons.math3.geometry.euclidean.threed.Rotation rotation> = $r2;

        return;
    }
    public volatile org.apache.commons.math3.geometry.Point apply(org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform r0;
        org.apache.commons.math3.geometry.Point $r1;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform;

        $r1 := @parameter0: org.apache.commons.math3.geometry.Point;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform: org.apache.commons.math3.geometry.euclidean.threed.Vector3D apply(org.apache.commons.math3.geometry.Point)>($r1);

        return $r2;
    }
    public org.apache.commons.math3.geometry.euclidean.threed.Plane apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform r0;
        org.apache.commons.math3.geometry.euclidean.threed.Rotation $r1;
        org.apache.commons.math3.geometry.euclidean.threed.Plane $r2;
        org.apache.commons.math3.geometry.partitioning.Hyperplane r3;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r4;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform;

        r3 := @parameter0: org.apache.commons.math3.geometry.partitioning.Hyperplane;

        $r2 = (org.apache.commons.math3.geometry.euclidean.threed.Plane) r3;

        $r4 = r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform: org.apache.commons.math3.geometry.euclidean.threed.Vector3D center>;

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform: org.apache.commons.math3.geometry.euclidean.threed.Rotation rotation>;

        $r2 = virtualinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Plane rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)>($r4, $r1);

        return $r2;
    }
    public org.apache.commons.math3.geometry.euclidean.threed.Vector3D apply(org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r1, $r3, $r4;
        org.apache.commons.math3.geometry.Point r2;
        org.apache.commons.math3.geometry.euclidean.threed.Rotation $r5;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform;

        r2 := @parameter0: org.apache.commons.math3.geometry.Point;

        $r1 = (org.apache.commons.math3.geometry.euclidean.threed.Vector3D) r2;

        $r3 = r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform: org.apache.commons.math3.geometry.euclidean.threed.Vector3D center>;

        $r4 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D subtract(org.apache.commons.math3.geometry.Vector)>($r3);

        $r3 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform: org.apache.commons.math3.geometry.euclidean.threed.Vector3D center>;

        $r5 = r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform: org.apache.commons.math3.geometry.euclidean.threed.Rotation rotation>;

        $r4 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r4);

        specialinvoke $r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>(1.0, $r1, 1.0, $r4);

        return $r3;
    }
    public volatile org.apache.commons.math3.geometry.partitioning.Hyperplane apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform r0;
        org.apache.commons.math3.geometry.partitioning.Hyperplane $r1;
        org.apache.commons.math3.geometry.euclidean.threed.Plane $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform;

        $r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.Hyperplane;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform: org.apache.commons.math3.geometry.euclidean.threed.Plane apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)>($r1);

        return $r2;
    }
    public org.apache.commons.math3.geometry.partitioning.SubHyperplane apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane, org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.Hyperplane)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform r0;
        org.apache.commons.math3.geometry.partitioning.Hyperplane r1, r3;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane r2;
        org.apache.commons.math3.geometry.euclidean.threed.Plane $r4, r5;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r6, $r8, $r9;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D $r7, $r10, $r11;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        org.apache.commons.math3.geometry.partitioning.Transform $r12;
        org.apache.commons.math3.geometry.euclidean.twod.SubLine r13;
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane $r14;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform;

        r2 := @parameter0: org.apache.commons.math3.geometry.partitioning.SubHyperplane;

        r3 := @parameter1: org.apache.commons.math3.geometry.partitioning.Hyperplane;

        r1 := @parameter2: org.apache.commons.math3.geometry.partitioning.Hyperplane;

        $r4 = r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform: org.apache.commons.math3.geometry.euclidean.threed.Plane cachedOriginal>;

        if r3 == $r4 goto label1;

        $r4 = (org.apache.commons.math3.geometry.euclidean.threed.Plane) r3;

        r5 = (org.apache.commons.math3.geometry.euclidean.threed.Plane) r1;

        $r6 = virtualinvoke $r4.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getOrigin()>();

        $r7 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        specialinvoke $r7.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: void <init>(double,double)>(1.0, 0.0);

        $r8 = virtualinvoke $r4.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D toSpace(org.apache.commons.math3.geometry.Point)>($r7);

        $r7 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        specialinvoke $r7.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: void <init>(double,double)>(0.0, 1.0);

        $r9 = virtualinvoke $r4.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D toSpace(org.apache.commons.math3.geometry.Point)>($r7);

        $r6 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform: org.apache.commons.math3.geometry.euclidean.threed.Vector3D apply(org.apache.commons.math3.geometry.Point)>($r6);

        $r7 = virtualinvoke r5.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.twod.Vector2D toSubSpace(org.apache.commons.math3.geometry.Point)>($r6);

        $r8 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform: org.apache.commons.math3.geometry.euclidean.threed.Vector3D apply(org.apache.commons.math3.geometry.Point)>($r8);

        $r10 = virtualinvoke r5.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.twod.Vector2D toSubSpace(org.apache.commons.math3.geometry.Point)>($r8);

        $r9 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform: org.apache.commons.math3.geometry.euclidean.threed.Vector3D apply(org.apache.commons.math3.geometry.Point)>($r9);

        $r11 = virtualinvoke r5.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.twod.Vector2D toSubSpace(org.apache.commons.math3.geometry.Point)>($r9);

        $r4 = (org.apache.commons.math3.geometry.euclidean.threed.Plane) r3;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform: org.apache.commons.math3.geometry.euclidean.threed.Plane cachedOriginal> = $r4;

        $d0 = virtualinvoke $r10.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getX()>();

        $d1 = virtualinvoke $r7.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getX()>();

        $d0 = $d0 - $d1;

        $d1 = virtualinvoke $r10.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getY()>();

        $d2 = virtualinvoke $r7.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getY()>();

        $d1 = $d1 - $d2;

        $d2 = virtualinvoke $r11.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getX()>();

        $d3 = virtualinvoke $r7.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getX()>();

        $d2 = $d2 - $d3;

        $d3 = virtualinvoke $r11.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getY()>();

        $d4 = virtualinvoke $r7.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getY()>();

        $d3 = $d3 - $d4;

        $d4 = virtualinvoke $r7.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getX()>();

        $d5 = virtualinvoke $r7.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getY()>();

        $r12 = staticinvoke <org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.partitioning.Transform getTransform(double,double,double,double,double,double)>($d0, $d1, $d2, $d3, $d4, $d5);

        r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform: org.apache.commons.math3.geometry.partitioning.Transform cachedTransform> = $r12;

     label1:
        r13 = (org.apache.commons.math3.geometry.euclidean.twod.SubLine) r2;

        $r12 = r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform: org.apache.commons.math3.geometry.partitioning.Transform cachedTransform>;

        $r14 = virtualinvoke r13.<org.apache.commons.math3.geometry.euclidean.twod.SubLine: org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)>($r12);

        return $r14;
    }
