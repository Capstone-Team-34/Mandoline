org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D extends java.lang.Object implements org.apache.commons.math3.geometry.hull.ConvexHull java.io.Serializable
private static final long serialVersionUID
private transient org.apache.commons.math3.geometry.euclidean.twod.Segment[] lineSegments
private final double tolerance
private final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] vertices
    public void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D[], double) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D r0;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] $r1;
        double $d0;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        boolean $z0;
        org.apache.commons.math3.exception.MathIllegalArgumentException $r3;
        java.lang.Object[] $r4;
        java.lang.Object $r5;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[];

        $d0 := @parameter1: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D: double tolerance> = $d0;

        $z0 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D: boolean isConvex(org.apache.commons.math3.geometry.euclidean.twod.Vector2D[])>($r1);

        if $z0 != 0 goto label1;

        $r3 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NOT_CONVEX>;

        $r4 = newarray (java.lang.Object)[0];

        specialinvoke $r3.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r2, $r4);

        throw $r3;

     label1:
        $r5 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r1 = (org.apache.commons.math3.geometry.euclidean.twod.Vector2D[]) $r5;

        r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] vertices> = $r1;

        return;
    }
    private boolean isConvex(org.apache.commons.math3.geometry.euclidean.twod.Vector2D[])
    {
        org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D r0;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] $r1;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r2, r3, r4;
        int $i0, i1, $i2;
        double $d0, $d1, $d2, $d3;
        byte $b3;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[];

        $i0 = lengthof $r1;

        if $i0 >= 3 goto label1;

        return 1;

     label1:
        $i0 = 0;

        i1 = 0;

     label2:
        $i2 = lengthof $r1;

        if i1 >= $i2 goto label9;

        if i1 != 0 goto label5;

        $i2 = lengthof $r1;

        $i2 = $i2 + -1;

     label3:
        r2 = $r1[$i2];

        r3 = $r1[i1];

        $i2 = lengthof $r1;

        $i2 = $i2 + -1;

        if i1 != $i2 goto label6;

        $i2 = 0;

     label4:
        r4 = $r1[$i2];

        r2 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: org.apache.commons.math3.geometry.euclidean.twod.Vector2D subtract(org.apache.commons.math3.geometry.Vector)>(r2);

        r3 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: org.apache.commons.math3.geometry.euclidean.twod.Vector2D subtract(org.apache.commons.math3.geometry.Vector)>(r3);

        $d0 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getX()>();

        $d1 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getY()>();

        $d2 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getY()>();

        $d2 = neg $d2;

        $d3 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getX()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double)>($d0, $d1, $d2, $d3);

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D: double tolerance>;

        $i2 = staticinvoke <org.apache.commons.math3.util.Precision: int compareTo(double,double,double)>($d0, 0.0, $d1);

        $d0 = (double) $i2;

        $b3 = $d0 cmpl 0.0;

        if $b3 == 0 goto label8;

        $d0 = (double) $i0;

        $b3 = $d0 cmpl 0.0;

        if $b3 == 0 goto label7;

        if $i2 == $i0 goto label7;

        return 0;

     label5:
        $i2 = i1 + -1;

        goto label3;

     label6:
        $i2 = i1 + 1;

        goto label4;

     label7:
        $i0 = $i2;

     label8:
        i1 = i1 + 1;

        goto label2;

     label9:
        return 1;
    }
    private org.apache.commons.math3.geometry.euclidean.twod.Segment[] retrieveLineSegments()
    {
        org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D r0;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] r1;
        int i0, i1, i2, i3;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r2, r3, r7;
        org.apache.commons.math3.geometry.euclidean.twod.Segment[] $r4;
        org.apache.commons.math3.geometry.euclidean.twod.Segment $r5;
        org.apache.commons.math3.geometry.euclidean.twod.Line $r6;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D;

        $r4 = r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D: org.apache.commons.math3.geometry.euclidean.twod.Segment[] lineSegments>;

        if $r4 != null goto label1;

        r1 = r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] vertices>;

        i0 = lengthof r1;

        if i0 > 1 goto label2;

        $r4 = newarray (org.apache.commons.math3.geometry.euclidean.twod.Segment)[0];

        r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D: org.apache.commons.math3.geometry.euclidean.twod.Segment[] lineSegments> = $r4;

     label1:
        $r4 = r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D: org.apache.commons.math3.geometry.euclidean.twod.Segment[] lineSegments>;

        return $r4;

     label2:
        if i0 != 2 goto label3;

        $r4 = newarray (org.apache.commons.math3.geometry.euclidean.twod.Segment)[1];

        r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D: org.apache.commons.math3.geometry.euclidean.twod.Segment[] lineSegments> = $r4;

        r1 = r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] vertices>;

        r2 = r1[0];

        r1 = r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] vertices>;

        r3 = r1[1];

        $r4 = r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D: org.apache.commons.math3.geometry.euclidean.twod.Segment[] lineSegments>;

        $r5 = new org.apache.commons.math3.geometry.euclidean.twod.Segment;

        $r6 = new org.apache.commons.math3.geometry.euclidean.twod.Line;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D: double tolerance>;

        specialinvoke $r6.<org.apache.commons.math3.geometry.euclidean.twod.Line: void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)>(r2, r3, $d0);

        specialinvoke $r5.<org.apache.commons.math3.geometry.euclidean.twod.Segment: void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Line)>(r2, r3, $r6);

        $r4[0] = $r5;

        goto label1;

     label3:
        $r4 = newarray (org.apache.commons.math3.geometry.euclidean.twod.Segment)[i0];

        r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D: org.apache.commons.math3.geometry.euclidean.twod.Segment[] lineSegments> = $r4;

        r3 = null;

        r7 = null;

        r1 = r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] vertices>;

        i0 = lengthof r1;

        i1 = 0;

        i2 = 0;

     label4:
        if i1 >= i0 goto label7;

        r2 = r1[i1];

        if r7 != null goto label6;

        r3 = r2;

        r7 = r2;

        i3 = i2;

     label5:
        i1 = i1 + 1;

        i2 = i3;

        goto label4;

     label6:
        $r4 = r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D: org.apache.commons.math3.geometry.euclidean.twod.Segment[] lineSegments>;

        i3 = i2 + 1;

        $r5 = new org.apache.commons.math3.geometry.euclidean.twod.Segment;

        $r6 = new org.apache.commons.math3.geometry.euclidean.twod.Line;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D: double tolerance>;

        specialinvoke $r6.<org.apache.commons.math3.geometry.euclidean.twod.Line: void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)>(r7, r2, $d0);

        specialinvoke $r5.<org.apache.commons.math3.geometry.euclidean.twod.Segment: void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Line)>(r7, r2, $r6);

        $r4[i2] = $r5;

        r7 = r2;

        goto label5;

     label7:
        $r4 = r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D: org.apache.commons.math3.geometry.euclidean.twod.Segment[] lineSegments>;

        $r5 = new org.apache.commons.math3.geometry.euclidean.twod.Segment;

        $r6 = new org.apache.commons.math3.geometry.euclidean.twod.Line;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D: double tolerance>;

        specialinvoke $r6.<org.apache.commons.math3.geometry.euclidean.twod.Line: void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)>(r7, r3, $d0);

        specialinvoke $r5.<org.apache.commons.math3.geometry.euclidean.twod.Segment: void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Line)>(r7, r3, $r6);

        $r4[i2] = $r5;

        goto label1;
    }
    public org.apache.commons.math3.geometry.partitioning.Region createRegion() throws org.apache.commons.math3.exception.InsufficientDataException
    {
        org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D r0;
        org.apache.commons.math3.geometry.partitioning.RegionFactory r1;
        org.apache.commons.math3.geometry.euclidean.twod.Line[] r2;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] $r3;
        int $i0, $i1;
        org.apache.commons.math3.exception.InsufficientDataException $r4;
        org.apache.commons.math3.geometry.euclidean.twod.Segment[] $r5;
        org.apache.commons.math3.geometry.euclidean.twod.Segment $r6;
        org.apache.commons.math3.geometry.euclidean.twod.Line $r7;
        org.apache.commons.math3.geometry.partitioning.Region $r8;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D;

        $r3 = r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] vertices>;

        $i0 = lengthof $r3;

        if $i0 >= 3 goto label1;

        $r4 = new org.apache.commons.math3.exception.InsufficientDataException;

        specialinvoke $r4.<org.apache.commons.math3.exception.InsufficientDataException: void <init>()>();

        throw $r4;

     label1:
        r1 = new org.apache.commons.math3.geometry.partitioning.RegionFactory;

        specialinvoke r1.<org.apache.commons.math3.geometry.partitioning.RegionFactory: void <init>()>();

        $r5 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D: org.apache.commons.math3.geometry.euclidean.twod.Segment[] retrieveLineSegments()>();

        $i0 = lengthof $r5;

        r2 = newarray (org.apache.commons.math3.geometry.euclidean.twod.Line)[$i0];

        $i0 = 0;

     label2:
        $i1 = lengthof $r5;

        if $i0 >= $i1 goto label3;

        $r6 = $r5[$i0];

        $r7 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.twod.Segment: org.apache.commons.math3.geometry.euclidean.twod.Line getLine()>();

        r2[$i0] = $r7;

        $i0 = $i0 + 1;

        goto label2;

     label3:
        $r8 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.RegionFactory: org.apache.commons.math3.geometry.partitioning.Region buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])>(r2);

        return $r8;
    }
    public org.apache.commons.math3.geometry.euclidean.twod.Segment[] getLineSegments()
    {
        org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D r0;
        org.apache.commons.math3.geometry.euclidean.twod.Segment[] $r1;
        java.lang.Object $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D;

        $r1 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D: org.apache.commons.math3.geometry.euclidean.twod.Segment[] retrieveLineSegments()>();

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r1 = (org.apache.commons.math3.geometry.euclidean.twod.Segment[]) $r2;

        return $r1;
    }
    public volatile org.apache.commons.math3.geometry.Point[] getVertices()
    {
        org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D r0;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] $r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] getVertices()>();

        return $r1;
    }
    public org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] getVertices()
    {
        org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D r0;
        java.lang.Object $r1;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D;

        $r2 = r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] vertices>;

        $r1 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (org.apache.commons.math3.geometry.euclidean.twod.Vector2D[]) $r1;

        return $r2;
    }
