org.apache.commons.math3.geometry.partitioning.BoundaryProjector extends java.lang.Object implements org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor
private org.apache.commons.math3.geometry.partitioning.BSPTree leaf
private double offset
private final org.apache.commons.math3.geometry.Point original
private org.apache.commons.math3.geometry.Point projected
    void <init>(org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.partitioning.BoundaryProjector r0;
        org.apache.commons.math3.geometry.Point r1;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.BoundaryProjector;

        r1 := @parameter0: org.apache.commons.math3.geometry.Point;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.geometry.partitioning.BoundaryProjector: org.apache.commons.math3.geometry.Point original> = r1;

        r0.<org.apache.commons.math3.geometry.partitioning.BoundaryProjector: org.apache.commons.math3.geometry.Point projected> = null;

        r0.<org.apache.commons.math3.geometry.partitioning.BoundaryProjector: org.apache.commons.math3.geometry.partitioning.BSPTree leaf> = null;

        r0.<org.apache.commons.math3.geometry.partitioning.BoundaryProjector: double offset> = #Infinity;

        return;
    }
    private void addRegion(org.apache.commons.math3.geometry.partitioning.SubHyperplane, java.util.List)
    {
        org.apache.commons.math3.geometry.partitioning.BoundaryProjector r0;
        java.util.List r1;
        org.apache.commons.math3.geometry.partitioning.Region $r2;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane r3;
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane r4;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.BoundaryProjector;

        r3 := @parameter0: org.apache.commons.math3.geometry.partitioning.SubHyperplane;

        r1 := @parameter1: java.util.List;

        if r3 == null goto label1;

        r4 = (org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane) r3;

        $r2 = virtualinvoke r4.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: org.apache.commons.math3.geometry.partitioning.Region getRemainingRegion()>();

        if $r2 == null goto label1;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r2);

     label1:
        return;
    }
    private boolean belongsToPart(org.apache.commons.math3.geometry.Point, org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.Region)
    {
        org.apache.commons.math3.geometry.partitioning.BoundaryProjector r0;
        org.apache.commons.math3.geometry.Point r1;
        org.apache.commons.math3.geometry.partitioning.Hyperplane r2;
        org.apache.commons.math3.geometry.partitioning.Region r3;
        org.apache.commons.math3.geometry.partitioning.Region$Location $r4, $r6;
        org.apache.commons.math3.geometry.partitioning.Embedding r5;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.BoundaryProjector;

        r1 := @parameter0: org.apache.commons.math3.geometry.Point;

        r2 := @parameter1: org.apache.commons.math3.geometry.partitioning.Hyperplane;

        r3 := @parameter2: org.apache.commons.math3.geometry.partitioning.Region;

        r5 = (org.apache.commons.math3.geometry.partitioning.Embedding) r2;

        r1 = interfaceinvoke r5.<org.apache.commons.math3.geometry.partitioning.Embedding: org.apache.commons.math3.geometry.Point toSubSpace(org.apache.commons.math3.geometry.Point)>(r1);

        $r6 = interfaceinvoke r3.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.partitioning.Region$Location checkPoint(org.apache.commons.math3.geometry.Point)>(r1);

        $r4 = <org.apache.commons.math3.geometry.partitioning.Region$Location: org.apache.commons.math3.geometry.partitioning.Region$Location OUTSIDE>;

        if $r6 == $r4 goto label1;

        return 1;

     label1:
        return 0;
    }
    private java.util.List boundaryRegions(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.partitioning.BoundaryProjector r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        java.util.ArrayList r2;
        java.lang.Object $r3;
        org.apache.commons.math3.geometry.partitioning.BoundaryAttribute r4;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r5;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.BoundaryProjector;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>(int)>(2);

        $r3 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        r4 = (org.apache.commons.math3.geometry.partitioning.BoundaryAttribute) $r3;

        $r5 = virtualinvoke r4.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusInside()>();

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.BoundaryProjector: void addRegion(org.apache.commons.math3.geometry.partitioning.SubHyperplane,java.util.List)>($r5, r2);

        $r5 = virtualinvoke r4.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusOutside()>();

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.BoundaryProjector: void addRegion(org.apache.commons.math3.geometry.partitioning.SubHyperplane,java.util.List)>($r5, r2);

        return r2;
    }
    private org.apache.commons.math3.geometry.Point singularProjection(org.apache.commons.math3.geometry.Point, org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.Region)
    {
        org.apache.commons.math3.geometry.partitioning.BoundaryProjector r0;
        org.apache.commons.math3.geometry.Point r1;
        org.apache.commons.math3.geometry.partitioning.Hyperplane r2;
        org.apache.commons.math3.geometry.partitioning.Region r3;
        org.apache.commons.math3.geometry.partitioning.Embedding r4;
        org.apache.commons.math3.geometry.partitioning.BoundaryProjection $r5;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.BoundaryProjector;

        r1 := @parameter0: org.apache.commons.math3.geometry.Point;

        r2 := @parameter1: org.apache.commons.math3.geometry.partitioning.Hyperplane;

        r3 := @parameter2: org.apache.commons.math3.geometry.partitioning.Region;

        r4 = (org.apache.commons.math3.geometry.partitioning.Embedding) r2;

        r1 = interfaceinvoke r4.<org.apache.commons.math3.geometry.partitioning.Embedding: org.apache.commons.math3.geometry.Point toSubSpace(org.apache.commons.math3.geometry.Point)>(r1);

        $r5 = interfaceinvoke r3.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.partitioning.BoundaryProjection projectToBoundary(org.apache.commons.math3.geometry.Point)>(r1);

        r1 = virtualinvoke $r5.<org.apache.commons.math3.geometry.partitioning.BoundaryProjection: org.apache.commons.math3.geometry.Point getProjected()>();

        if r1 != null goto label1;

        return null;

     label1:
        r1 = virtualinvoke $r5.<org.apache.commons.math3.geometry.partitioning.BoundaryProjection: org.apache.commons.math3.geometry.Point getProjected()>();

        r1 = interfaceinvoke r4.<org.apache.commons.math3.geometry.partitioning.Embedding: org.apache.commons.math3.geometry.Point toSpace(org.apache.commons.math3.geometry.Point)>(r1);

        return r1;
    }
    public org.apache.commons.math3.geometry.partitioning.BoundaryProjection getProjection()
    {
        org.apache.commons.math3.geometry.partitioning.BoundaryProjector r0;
        org.apache.commons.math3.geometry.Point $r1, $r6;
        double $d0, $d1;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;
        org.apache.commons.math3.geometry.partitioning.BoundaryProjection $r5;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.BoundaryProjector;

        $d0 = r0.<org.apache.commons.math3.geometry.partitioning.BoundaryProjector: double offset>;

        $r2 = r0.<org.apache.commons.math3.geometry.partitioning.BoundaryProjector: org.apache.commons.math3.geometry.partitioning.BSPTree leaf>;

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        $d1 = -1.0;

     label1:
        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double copySign(double,double)>($d0, $d1);

        r0.<org.apache.commons.math3.geometry.partitioning.BoundaryProjector: double offset> = $d0;

        $r5 = new org.apache.commons.math3.geometry.partitioning.BoundaryProjection;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.BoundaryProjector: org.apache.commons.math3.geometry.Point original>;

        $r6 = r0.<org.apache.commons.math3.geometry.partitioning.BoundaryProjector: org.apache.commons.math3.geometry.Point projected>;

        $d0 = r0.<org.apache.commons.math3.geometry.partitioning.BoundaryProjector: double offset>;

        specialinvoke $r5.<org.apache.commons.math3.geometry.partitioning.BoundaryProjection: void <init>(org.apache.commons.math3.geometry.Point,org.apache.commons.math3.geometry.Point,double)>($r1, $r6, $d0);

        return $r5;

     label2:
        $d1 = 1.0;

        goto label1;
    }
    public void visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.partitioning.BoundaryProjector r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r2;
        org.apache.commons.math3.geometry.partitioning.Hyperplane $r3;
        org.apache.commons.math3.geometry.Point $r4, $r9, $r10;
        double $d0, $d1, $d2;
        byte $b0;
        java.util.List $r5;
        boolean z0, $z1;
        java.util.Iterator $r6;
        java.lang.Object $r7;
        org.apache.commons.math3.geometry.partitioning.Region r8;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.BoundaryProjector;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        $r3 = interfaceinvoke $r2.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        $r4 = r0.<org.apache.commons.math3.geometry.partitioning.BoundaryProjector: org.apache.commons.math3.geometry.Point original>;

        $d0 = interfaceinvoke $r3.<org.apache.commons.math3.geometry.partitioning.Hyperplane: double getOffset(org.apache.commons.math3.geometry.Point)>($r4);

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        $d2 = r0.<org.apache.commons.math3.geometry.partitioning.BoundaryProjector: double offset>;

        $b0 = $d1 cmpg $d2;

        if $b0 >= 0 goto label4;

        $r4 = r0.<org.apache.commons.math3.geometry.partitioning.BoundaryProjector: org.apache.commons.math3.geometry.Point original>;

        $r4 = interfaceinvoke $r3.<org.apache.commons.math3.geometry.partitioning.Hyperplane: org.apache.commons.math3.geometry.Point project(org.apache.commons.math3.geometry.Point)>($r4);

        $r5 = specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.BoundaryProjector: java.util.List boundaryRegions(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        z0 = 0;

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.apache.commons.math3.geometry.partitioning.Region) $r7;

        if z0 != 0 goto label1;

        $z1 = specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.BoundaryProjector: boolean belongsToPart(org.apache.commons.math3.geometry.Point,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)>($r4, $r3, r8);

        if $z1 == 0 goto label1;

        r0.<org.apache.commons.math3.geometry.partitioning.BoundaryProjector: org.apache.commons.math3.geometry.Point projected> = $r4;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        r0.<org.apache.commons.math3.geometry.partitioning.BoundaryProjector: double offset> = $d1;

        z0 = 1;

        goto label1;

     label2:
        if z0 != 0 goto label4;

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label3:
        z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if z0 == 0 goto label4;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.apache.commons.math3.geometry.partitioning.Region) $r7;

        $r9 = specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.BoundaryProjector: org.apache.commons.math3.geometry.Point singularProjection(org.apache.commons.math3.geometry.Point,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)>($r4, $r3, r8);

        if $r9 == null goto label3;

        $r10 = r0.<org.apache.commons.math3.geometry.partitioning.BoundaryProjector: org.apache.commons.math3.geometry.Point original>;

        $d0 = interfaceinvoke $r10.<org.apache.commons.math3.geometry.Point: double distance(org.apache.commons.math3.geometry.Point)>($r9);

        $d1 = r0.<org.apache.commons.math3.geometry.partitioning.BoundaryProjector: double offset>;

        $b0 = $d0 cmpg $d1;

        if $b0 >= 0 goto label3;

        r0.<org.apache.commons.math3.geometry.partitioning.BoundaryProjector: org.apache.commons.math3.geometry.Point projected> = $r9;

        r0.<org.apache.commons.math3.geometry.partitioning.BoundaryProjector: double offset> = $d0;

        goto label3;

     label4:
        return;
    }
    public void visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.partitioning.BoundaryProjector r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, $r2;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.BoundaryProjector;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = r0.<org.apache.commons.math3.geometry.partitioning.BoundaryProjector: org.apache.commons.math3.geometry.partitioning.BSPTree leaf>;

        if $r2 != null goto label1;

        r0.<org.apache.commons.math3.geometry.partitioning.BoundaryProjector: org.apache.commons.math3.geometry.partitioning.BSPTree leaf> = r1;

     label1:
        return;
    }
    public org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.partitioning.BoundaryProjector r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        org.apache.commons.math3.geometry.Point $r2;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r3;
        org.apache.commons.math3.geometry.partitioning.Hyperplane $r4;
        double $d0;
        byte $b0;
        org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order r5;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.BoundaryProjector;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r3 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        $r4 = interfaceinvoke $r3.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        $r2 = r0.<org.apache.commons.math3.geometry.partitioning.BoundaryProjector: org.apache.commons.math3.geometry.Point original>;

        $d0 = interfaceinvoke $r4.<org.apache.commons.math3.geometry.partitioning.Hyperplane: double getOffset(org.apache.commons.math3.geometry.Point)>($r2);

        $b0 = $d0 cmpg 0.0;

        if $b0 > 0 goto label1;

        r5 = <org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order: org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order MINUS_SUB_PLUS>;

        return r5;

     label1:
        r5 = <org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order: org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order PLUS_SUB_MINUS>;

        return r5;
    }
