org.apache.commons.math3.geometry.spherical.oned.S1Point extends java.lang.Object implements org.apache.commons.math3.geometry.Point
public static final org.apache.commons.math3.geometry.spherical.oned.S1Point NaN
private static final long serialVersionUID
private final double alpha
private final org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector
    static void <clinit>()
    {
        org.apache.commons.math3.geometry.spherical.oned.S1Point $r0;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D $r1;

        $r0 = new org.apache.commons.math3.geometry.spherical.oned.S1Point;

        $r1 = <org.apache.commons.math3.geometry.euclidean.twod.Vector2D: org.apache.commons.math3.geometry.euclidean.twod.Vector2D NaN>;

        specialinvoke $r0.<org.apache.commons.math3.geometry.spherical.oned.S1Point: void <init>(double,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)>(#NaN, $r1);

        <org.apache.commons.math3.geometry.spherical.oned.S1Point: org.apache.commons.math3.geometry.spherical.oned.S1Point NaN> = $r0;

        return;
    }
    public void <init>(double)
    {
        org.apache.commons.math3.geometry.spherical.oned.S1Point r0;
        double $d0, $d1, $d2;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D $r1;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.S1Point;

        $d0 := @parameter0: double;

        $d1 = staticinvoke <org.apache.commons.math3.util.MathUtils: double normalizeAngle(double,double)>($d0, 3.141592653589793);

        $r1 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double cos(double)>($d0);

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sin(double)>($d0);

        specialinvoke $r1.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: void <init>(double,double)>($d2, $d0);

        specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.S1Point: void <init>(double,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)>($d1, $r1);

        return;
    }
    private void <init>(double, org.apache.commons.math3.geometry.euclidean.twod.Vector2D)
    {
        org.apache.commons.math3.geometry.spherical.oned.S1Point r0;
        double $d0;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D $r1;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.S1Point;

        $d0 := @parameter0: double;

        $r1 := @parameter1: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.geometry.spherical.oned.S1Point: double alpha> = $d0;

        r0.<org.apache.commons.math3.geometry.spherical.oned.S1Point: org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector> = $r1;

        return;
    }
    public static double distance(org.apache.commons.math3.geometry.spherical.oned.S1Point, org.apache.commons.math3.geometry.spherical.oned.S1Point)
    {
        org.apache.commons.math3.geometry.spherical.oned.S1Point $r0, $r1;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D $r2, $r3;
        double $d0;

        $r0 := @parameter0: org.apache.commons.math3.geometry.spherical.oned.S1Point;

        $r1 := @parameter1: org.apache.commons.math3.geometry.spherical.oned.S1Point;

        $r3 = $r0.<org.apache.commons.math3.geometry.spherical.oned.S1Point: org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector>;

        $r2 = $r1.<org.apache.commons.math3.geometry.spherical.oned.S1Point: org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector>;

        $d0 = staticinvoke <org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double angle(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)>($r3, $r2);

        return $d0;
    }
    public double distance(org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.spherical.oned.S1Point r0, r2;
        double $d0;
        org.apache.commons.math3.geometry.Point r1;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.S1Point;

        r1 := @parameter0: org.apache.commons.math3.geometry.Point;

        r2 = (org.apache.commons.math3.geometry.spherical.oned.S1Point) r1;

        $d0 = staticinvoke <org.apache.commons.math3.geometry.spherical.oned.S1Point: double distance(org.apache.commons.math3.geometry.spherical.oned.S1Point,org.apache.commons.math3.geometry.spherical.oned.S1Point)>(r0, r2);

        return $d0;
    }
    public boolean equals(java.lang.Object)
    {
        org.apache.commons.math3.geometry.spherical.oned.S1Point r0, r2;
        java.lang.Object $r1;
        double $d0, $d1;
        boolean $z0;
        byte $b0;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.S1Point;

        $r1 := @parameter0: java.lang.Object;

        if r0 != $r1 goto label1;

        return 1;

     label1:
        $z0 = $r1 instanceof org.apache.commons.math3.geometry.spherical.oned.S1Point;

        if $z0 == 0 goto label3;

        r2 = (org.apache.commons.math3.geometry.spherical.oned.S1Point) $r1;

        $z0 = virtualinvoke r2.<org.apache.commons.math3.geometry.spherical.oned.S1Point: boolean isNaN()>();

        if $z0 == 0 goto label2;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.S1Point: boolean isNaN()>();

        return $z0;

     label2:
        $d0 = r0.<org.apache.commons.math3.geometry.spherical.oned.S1Point: double alpha>;

        $d1 = r2.<org.apache.commons.math3.geometry.spherical.oned.S1Point: double alpha>;

        $b0 = $d0 cmpl $d1;

        if $b0 == 0 goto label4;

     label3:
        return 0;

     label4:
        return 1;
    }
    public double getAlpha()
    {
        org.apache.commons.math3.geometry.spherical.oned.S1Point r0;
        double d0;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.S1Point;

        d0 = r0.<org.apache.commons.math3.geometry.spherical.oned.S1Point: double alpha>;

        return d0;
    }
    public org.apache.commons.math3.geometry.Space getSpace()
    {
        org.apache.commons.math3.geometry.spherical.oned.S1Point r0;
        org.apache.commons.math3.geometry.spherical.oned.Sphere1D $r1;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.S1Point;

        $r1 = staticinvoke <org.apache.commons.math3.geometry.spherical.oned.Sphere1D: org.apache.commons.math3.geometry.spherical.oned.Sphere1D getInstance()>();

        return $r1;
    }
    public org.apache.commons.math3.geometry.euclidean.twod.Vector2D getVector()
    {
        org.apache.commons.math3.geometry.spherical.oned.S1Point r0;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r1;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.S1Point;

        r1 = r0.<org.apache.commons.math3.geometry.spherical.oned.S1Point: org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector>;

        return r1;
    }
    public int hashCode()
    {
        org.apache.commons.math3.geometry.spherical.oned.S1Point r0;
        boolean $z0;
        double $d0;
        int $i0;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.S1Point;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.S1Point: boolean isNaN()>();

        if $z0 == 0 goto label1;

        return 542;

     label1:
        $d0 = r0.<org.apache.commons.math3.geometry.spherical.oned.S1Point: double alpha>;

        $i0 = staticinvoke <org.apache.commons.math3.util.MathUtils: int hash(double)>($d0);

        $i0 = $i0 * 1759;

        return $i0;
    }
    public boolean isNaN()
    {
        org.apache.commons.math3.geometry.spherical.oned.S1Point r0;
        boolean $z0;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.S1Point;

        $d0 = r0.<org.apache.commons.math3.geometry.spherical.oned.S1Point: double alpha>;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        return $z0;
    }
