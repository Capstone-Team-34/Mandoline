org.apache.commons.math3.geometry.spherical.oned.ArcsSet extends org.apache.commons.math3.geometry.partitioning.AbstractRegion implements java.lang.Iterable
    public void <init>(double)
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        $d0 := @parameter0: double;

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: void <init>(double)>($d0);

        return;
    }
    public void <init>(double, double, double) throws org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet r0;
        double $d0, $d1, $d2;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r1;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $r1 = staticinvoke <org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.partitioning.BSPTree buildTree(double,double,double)>($d0, $d1, $d2);

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree,double)>($r1, $d2);

        return;
    }
    public void <init>(java.util.Collection, double) throws org.apache.commons.math3.geometry.spherical.oned.ArcsSet$InconsistentStateAt2PiWrapping
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet r0;
        java.util.Collection r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        r1 := @parameter0: java.util.Collection;

        $d0 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: void <init>(java.util.Collection,double)>(r1, $d0);

        specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: void check2PiConsistency()>();

        return;
    }
    public void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree, double) throws org.apache.commons.math3.geometry.spherical.oned.ArcsSet$InconsistentStateAt2PiWrapping
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $d0 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree,double)>(r1, $d0);

        specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: void check2PiConsistency()>();

        return;
    }
    static org.apache.commons.math3.geometry.partitioning.BSPTree access$000(org.apache.commons.math3.geometry.spherical.oned.ArcsSet)
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet $r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r1;

        $r0 := @parameter0: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        $r1 = specialinvoke $r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.partitioning.BSPTree getFirstArcStart()>();

        return $r1;
    }
    static org.apache.commons.math3.geometry.partitioning.BSPTree access$100(org.apache.commons.math3.geometry.spherical.oned.ArcsSet, org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet $r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r1;

        $r0 := @parameter0: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        $r1 := @parameter1: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r1 = specialinvoke $r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.partitioning.BSPTree getFirstLeaf(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r1);

        return $r1;
    }
    static boolean access$200(org.apache.commons.math3.geometry.spherical.oned.ArcsSet, org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet $r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r1;
        boolean $z0;

        $r0 := @parameter0: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        $r1 := @parameter1: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $z0 = specialinvoke $r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: boolean isArcStart(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r1);

        return $z0;
    }
    static org.apache.commons.math3.geometry.partitioning.BSPTree access$300(org.apache.commons.math3.geometry.spherical.oned.ArcsSet, org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet $r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r1;

        $r0 := @parameter0: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        $r1 := @parameter1: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r1 = specialinvoke $r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.partitioning.BSPTree nextInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r1);

        return $r1;
    }
    static boolean access$400(org.apache.commons.math3.geometry.spherical.oned.ArcsSet, org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet $r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r1;
        boolean $z0;

        $r0 := @parameter0: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        $r1 := @parameter1: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $z0 = specialinvoke $r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: boolean isArcEnd(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r1);

        return $z0;
    }
    static double access$500(org.apache.commons.math3.geometry.spherical.oned.ArcsSet, org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet $r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r1;
        double $d0;

        $r0 := @parameter0: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        $r1 := @parameter1: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $d0 = specialinvoke $r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: double getAngle(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r1);

        return $d0;
    }
    static org.apache.commons.math3.geometry.partitioning.BSPTree access$600(org.apache.commons.math3.geometry.spherical.oned.ArcsSet, org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet $r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r1;

        $r0 := @parameter0: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        $r1 := @parameter1: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r1 = specialinvoke $r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.partitioning.BSPTree previousInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r1);

        return $r1;
    }
    private void addArcLimit(org.apache.commons.math3.geometry.partitioning.BSPTree, double, boolean)
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, $r6;
        double $d0;
        boolean $z0;
        org.apache.commons.math3.geometry.spherical.oned.LimitAngle r2;
        org.apache.commons.math3.geometry.spherical.oned.S1Point $r3;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r4;
        org.apache.commons.math3.exception.MathInternalError $r5;
        java.lang.Boolean $r7;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $d0 := @parameter1: double;

        $z0 := @parameter2: boolean;

        r2 = new org.apache.commons.math3.geometry.spherical.oned.LimitAngle;

        $r3 = new org.apache.commons.math3.geometry.spherical.oned.S1Point;

        specialinvoke $r3.<org.apache.commons.math3.geometry.spherical.oned.S1Point: void <init>(double)>($d0);

        if $z0 != 0 goto label2;

        $z0 = 1;

     label1:
        $d0 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: double getTolerance()>();

        specialinvoke r2.<org.apache.commons.math3.geometry.spherical.oned.LimitAngle: void <init>(org.apache.commons.math3.geometry.spherical.oned.S1Point,boolean,double)>($r3, $z0, $d0);

        $r3 = virtualinvoke r2.<org.apache.commons.math3.geometry.spherical.oned.LimitAngle: org.apache.commons.math3.geometry.spherical.oned.S1Point getLocation()>();

        $d0 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: double getTolerance()>();

        r1 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getCell(org.apache.commons.math3.geometry.Point,double)>($r3, $d0);

        $r4 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r4 == null goto label3;

        $r5 = new org.apache.commons.math3.exception.MathInternalError;

        specialinvoke $r5.<org.apache.commons.math3.exception.MathInternalError: void <init>()>();

        throw $r5;

     label2:
        $z0 = 0;

        goto label1;

     label3:
        virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: boolean insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)>(r2);

        virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: void setAttribute(java.lang.Object)>(null);

        $r6 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        $r7 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        virtualinvoke $r6.<org.apache.commons.math3.geometry.partitioning.BSPTree: void setAttribute(java.lang.Object)>($r7);

        r1 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        $r7 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: void setAttribute(java.lang.Object)>($r7);

        return;
    }
    private static org.apache.commons.math3.geometry.partitioning.BSPTree buildTree(double, double, double) throws org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        double $d0, $d1, $d2, $d3;
        boolean $z0;
        byte $b0;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r0, $r10, $r11, $r12, $r13;
        java.lang.Boolean $r1;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3;
        java.lang.Double $r4, $r5;
        org.apache.commons.math3.geometry.spherical.oned.LimitAngle $r6;
        org.apache.commons.math3.geometry.spherical.oned.S1Point $r7;
        org.apache.commons.math3.geometry.spherical.oned.SubLimitAngle $r8, $r9;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,int)>($d0, $d1, 0);

        if $z0 != 0 goto label1;

        $d3 = $d1 - $d0;

        $b0 = $d3 cmpl 6.283185307179586;

        if $b0 < 0 goto label2;

     label1:
        $r0 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r1 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        specialinvoke $r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r1);

        return $r0;

     label2:
        $b0 = $d0 cmpl $d1;

        if $b0 <= 0 goto label3;

        $r2 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats ENDPOINTS_NOT_AN_INTERVAL>;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        specialinvoke $r2.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r3, $r4, $r5, 1);

        throw $r2;

     label3:
        $d3 = staticinvoke <org.apache.commons.math3.util.MathUtils: double normalizeAngle(double,double)>($d0, 3.141592653589793);

        $d0 = $d1 - $d0;

        $d0 = $d3 + $d0;

        $r6 = new org.apache.commons.math3.geometry.spherical.oned.LimitAngle;

        $r7 = new org.apache.commons.math3.geometry.spherical.oned.S1Point;

        specialinvoke $r7.<org.apache.commons.math3.geometry.spherical.oned.S1Point: void <init>(double)>($d3);

        specialinvoke $r6.<org.apache.commons.math3.geometry.spherical.oned.LimitAngle: void <init>(org.apache.commons.math3.geometry.spherical.oned.S1Point,boolean,double)>($r7, 0, $d2);

        $r8 = virtualinvoke $r6.<org.apache.commons.math3.geometry.spherical.oned.LimitAngle: org.apache.commons.math3.geometry.spherical.oned.SubLimitAngle wholeHyperplane()>();

        $b0 = $d0 cmpg 6.283185307179586;

        if $b0 > 0 goto label4;

        $r6 = new org.apache.commons.math3.geometry.spherical.oned.LimitAngle;

        $r7 = new org.apache.commons.math3.geometry.spherical.oned.S1Point;

        specialinvoke $r7.<org.apache.commons.math3.geometry.spherical.oned.S1Point: void <init>(double)>($d0);

        specialinvoke $r6.<org.apache.commons.math3.geometry.spherical.oned.LimitAngle: void <init>(org.apache.commons.math3.geometry.spherical.oned.S1Point,boolean,double)>($r7, 1, $d2);

        $r9 = virtualinvoke $r6.<org.apache.commons.math3.geometry.spherical.oned.LimitAngle: org.apache.commons.math3.geometry.spherical.oned.SubLimitAngle wholeHyperplane()>();

        $r0 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r10 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r1 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        specialinvoke $r10.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r1);

        $r11 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r12 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r1 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        specialinvoke $r12.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r1);

        $r13 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r1 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        specialinvoke $r13.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r1);

        specialinvoke $r11.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)>($r9, $r12, $r13, null);

        specialinvoke $r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)>($r8, $r10, $r11, null);

        return $r0;

     label4:
        $r6 = new org.apache.commons.math3.geometry.spherical.oned.LimitAngle;

        $r7 = new org.apache.commons.math3.geometry.spherical.oned.S1Point;

        $d0 = $d0 - 6.283185307179586;

        specialinvoke $r7.<org.apache.commons.math3.geometry.spherical.oned.S1Point: void <init>(double)>($d0);

        specialinvoke $r6.<org.apache.commons.math3.geometry.spherical.oned.LimitAngle: void <init>(org.apache.commons.math3.geometry.spherical.oned.S1Point,boolean,double)>($r7, 1, $d2);

        $r9 = virtualinvoke $r6.<org.apache.commons.math3.geometry.spherical.oned.LimitAngle: org.apache.commons.math3.geometry.spherical.oned.SubLimitAngle wholeHyperplane()>();

        $r0 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r10 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r11 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r1 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        specialinvoke $r11.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r1);

        $r12 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r1 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        specialinvoke $r12.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r1);

        specialinvoke $r10.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)>($r9, $r11, $r12, null);

        $r11 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r1 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        specialinvoke $r11.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r1);

        specialinvoke $r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)>($r8, $r10, $r11, null);

        return $r0;
    }
    private void check2PiConsistency() throws org.apache.commons.math3.geometry.spherical.oned.ArcsSet$InconsistentStateAt2PiWrapping
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r1, $r3;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r2;
        java.lang.Object $r4;
        java.lang.Boolean r5, r6;
        boolean $z0, $z1;
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet$InconsistentStateAt2PiWrapping $r7;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(0);

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r2 != null goto label1;

        return;

     label1:
        $r3 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.partitioning.BSPTree getFirstLeaf(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r1);

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        r5 = (java.lang.Boolean) $r4;

        $r1 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.partitioning.BSPTree getLastLeaf(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r1);

        $r4 = virtualinvoke $r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        r6 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke r5.<java.lang.Boolean: boolean booleanValue()>();

        $z1 = virtualinvoke r6.<java.lang.Boolean: boolean booleanValue()>();

        $z0 = $z0 ^ $z1;

        if $z0 == 0 goto label2;

        $r7 = new org.apache.commons.math3.geometry.spherical.oned.ArcsSet$InconsistentStateAt2PiWrapping;

        specialinvoke $r7.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet$InconsistentStateAt2PiWrapping: void <init>()>();

        throw $r7;

     label2:
        return;
    }
    private org.apache.commons.math3.geometry.partitioning.BSPTree childAfter(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $z0 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: boolean isDirect(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        if $z0 == 0 goto label1;

        r1 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        return r1;

     label1:
        r1 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        return r1;
    }
    private org.apache.commons.math3.geometry.partitioning.BSPTree childBefore(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $z0 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: boolean isDirect(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        if $z0 == 0 goto label1;

        r1 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        return r1;

     label1:
        r1 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        return r1;
    }
    private org.apache.commons.math3.geometry.spherical.oned.ArcsSet createSplitPart(java.util.List)
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet r0, $r6;
        java.util.List r1;
        int i0, i1, $i2;
        org.apache.commons.math3.geometry.partitioning.BSPTree r2;
        java.lang.Boolean $r3;
        boolean $z0;
        java.lang.Object $r4;
        java.lang.Double $r5;
        double $d0, $d1;
        byte $b3;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r7;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        r1 := @parameter0: java.util.List;

        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label01;

        return null;

     label01:
        i1 = 0;

     label02:
        i0 = interfaceinvoke r1.<java.util.List: int size()>();

        if i1 >= i0 goto label07;

        i0 = i1 + 1;

        $i2 = interfaceinvoke r1.<java.util.List: int size()>();

        i0 = i0 % $i2;

        $r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1);

        $r5 = (java.lang.Double) $r4;

        $d0 = virtualinvoke $r5.<java.lang.Double: double doubleValue()>();

        $r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r5 = (java.lang.Double) $r4;

        $d1 = virtualinvoke $r5.<java.lang.Double: double doubleValue()>();

        $d1 = staticinvoke <org.apache.commons.math3.util.MathUtils: double normalizeAngle(double,double)>($d1, $d0);

        $d0 = $d1 - $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        $d1 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: double getTolerance()>();

        $b3 = $d0 cmpg $d1;

        if $b3 > 0 goto label03;

        if i0 <= 0 goto label04;

        interfaceinvoke r1.<java.util.List: java.lang.Object remove(int)>(i0);

        interfaceinvoke r1.<java.util.List: java.lang.Object remove(int)>(i1);

        i1 = i1 + -1;

     label03:
        i1 = i1 + 1;

        goto label02;

     label04:
        i0 = interfaceinvoke r1.<java.util.List: int size()>();

        i0 = i0 + -1;

        $r4 = interfaceinvoke r1.<java.util.List: java.lang.Object remove(int)>(i0);

        $r5 = (java.lang.Double) $r4;

        $d0 = virtualinvoke $r5.<java.lang.Double: double doubleValue()>();

        $r4 = interfaceinvoke r1.<java.util.List: java.lang.Object remove(int)>(0);

        $r5 = (java.lang.Double) $r4;

        $d1 = virtualinvoke $r5.<java.lang.Double: double doubleValue()>();

        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label06;

        $d0 = $d0 - $d1;

        $b3 = $d0 cmpl 3.141592653589793;

        if $b3 <= 0 goto label05;

        $r6 = new org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        r2 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r3 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        specialinvoke r2.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r3);

        $d0 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: double getTolerance()>();

        specialinvoke $r6.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree,double)>(r2, $d0);

        return $r6;

     label05:
        return null;

     label06:
        $r4 = interfaceinvoke r1.<java.util.List: java.lang.Object remove(int)>(0);

        $r5 = (java.lang.Double) $r4;

        $d0 = virtualinvoke $r5.<java.lang.Double: double doubleValue()>();

        $d0 = $d0 + 6.283185307179586;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r5);

        goto label03;

     label07:
        r2 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r3 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        specialinvoke r2.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r3);

        i1 = 0;

     label08:
        i0 = interfaceinvoke r1.<java.util.List: int size()>();

        i0 = i0 + -1;

        if i1 >= i0 goto label09;

        $r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1);

        $r5 = (java.lang.Double) $r4;

        $d0 = virtualinvoke $r5.<java.lang.Double: double doubleValue()>();

        specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: void addArcLimit(org.apache.commons.math3.geometry.partitioning.BSPTree,double,boolean)>(r2, $d0, 1);

        i0 = i1 + 1;

        $r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r5 = (java.lang.Double) $r4;

        $d0 = virtualinvoke $r5.<java.lang.Double: double doubleValue()>();

        specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: void addArcLimit(org.apache.commons.math3.geometry.partitioning.BSPTree,double,boolean)>(r2, $d0, 0);

        i1 = i1 + 2;

        goto label08;

     label09:
        $r7 = virtualinvoke r2.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r7 != null goto label10;

        return null;

     label10:
        $r6 = new org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: double getTolerance()>();

        specialinvoke $r6.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree,double)>(r2, $d0);

        return $r6;
    }
    private double getAngle(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r2;
        org.apache.commons.math3.geometry.partitioning.Hyperplane $r3;
        org.apache.commons.math3.geometry.spherical.oned.LimitAngle $r4;
        org.apache.commons.math3.geometry.spherical.oned.S1Point $r5;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        $r3 = interfaceinvoke $r2.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        $r4 = (org.apache.commons.math3.geometry.spherical.oned.LimitAngle) $r3;

        $r5 = virtualinvoke $r4.<org.apache.commons.math3.geometry.spherical.oned.LimitAngle: org.apache.commons.math3.geometry.spherical.oned.S1Point getLocation()>();

        $d0 = virtualinvoke $r5.<org.apache.commons.math3.geometry.spherical.oned.S1Point: double getAlpha()>();

        return $d0;
    }
    private org.apache.commons.math3.geometry.partitioning.BSPTree getFirstArcStart()
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r1;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(0);

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r2 != null goto label1;

        return null;

     label1:
        $r1 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.partitioning.BSPTree getFirstLeaf(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r1);

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getParent()>();

     label2:
        if $r1 == null goto label3;

        $z0 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: boolean isArcStart(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r1);

        if $z0 != 0 goto label3;

        $r1 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.partitioning.BSPTree nextInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r1);

        goto label2;

     label3:
        return $r1;
    }
    private org.apache.commons.math3.geometry.partitioning.BSPTree getFirstLeaf(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, r3;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r2;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r2 != null goto label1;

        return r1;

     label1:
        r3 = null;

     label2:
        if r1 == null goto label3;

        r3 = r1;

        r1 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.partitioning.BSPTree previousInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        goto label2;

     label3:
        r1 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.partitioning.BSPTree leafBefore(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r3);

        return r1;
    }
    private org.apache.commons.math3.geometry.partitioning.BSPTree getLastLeaf(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, r3;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r2;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r2 != null goto label1;

        return r1;

     label1:
        r3 = null;

     label2:
        if r1 == null goto label3;

        r3 = r1;

        r1 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.partitioning.BSPTree nextInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        goto label2;

     label3:
        r1 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.partitioning.BSPTree leafAfter(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r3);

        return r1;
    }
    private boolean isAfterParent(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, $r2;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getParent()>();

        if $r2 != null goto label1;

        return 0;

     label1:
        $r2 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.partitioning.BSPTree childAfter(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r2);

        if r1 != $r2 goto label2;

        return 1;

     label2:
        return 0;
    }
    private boolean isArcEnd(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.partitioning.BSPTree leafBefore(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r1 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.partitioning.BSPTree leafAfter(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        $r3 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        return 0;

     label2:
        return 1;
    }
    private boolean isArcStart(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.partitioning.BSPTree leafBefore(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        r1 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.partitioning.BSPTree leafAfter(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        $r3 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label2;

        return 0;

     label2:
        return 1;
    }
    private boolean isBeforeParent(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, $r2;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getParent()>();

        if $r2 != null goto label1;

        return 0;

     label1:
        $r2 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.partitioning.BSPTree childBefore(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r2);

        if r1 != $r2 goto label2;

        return 1;

     label2:
        return 0;
    }
    private boolean isDirect(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r2;
        org.apache.commons.math3.geometry.partitioning.Hyperplane $r3;
        org.apache.commons.math3.geometry.spherical.oned.LimitAngle $r4;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        $r3 = interfaceinvoke $r2.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        $r4 = (org.apache.commons.math3.geometry.spherical.oned.LimitAngle) $r3;

        $z0 = virtualinvoke $r4.<org.apache.commons.math3.geometry.spherical.oned.LimitAngle: boolean isDirect()>();

        return $z0;
    }
    private org.apache.commons.math3.geometry.partitioning.BSPTree leafAfter(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r2;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r1 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.partitioning.BSPTree childAfter(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

     label1:
        $r2 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r2 == null goto label2;

        r1 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.partitioning.BSPTree childBefore(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        goto label1;

     label2:
        return r1;
    }
    private org.apache.commons.math3.geometry.partitioning.BSPTree leafBefore(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r2;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r1 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.partitioning.BSPTree childBefore(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

     label1:
        $r2 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r2 == null goto label2;

        r1 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.partitioning.BSPTree childAfter(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        goto label1;

     label2:
        return r1;
    }
    private org.apache.commons.math3.geometry.partitioning.BSPTree nextInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, $r2;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r3;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.partitioning.BSPTree childAfter(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r3 == null goto label1;

        r1 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.partitioning.BSPTree leafAfter(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        r1 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getParent()>();

        return r1;

     label1:
        $z0 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: boolean isAfterParent(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        if $z0 == 0 goto label2;

        r1 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getParent()>();

        goto label1;

     label2:
        r1 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getParent()>();

        return r1;
    }
    private org.apache.commons.math3.geometry.partitioning.BSPTree previousInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, $r2;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r3;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.partitioning.BSPTree childBefore(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r3 == null goto label1;

        r1 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.partitioning.BSPTree leafBefore(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        r1 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getParent()>();

        return r1;

     label1:
        $z0 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: boolean isBeforeParent(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        if $z0 == 0 goto label2;

        r1 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getParent()>();

        goto label1;

     label2:
        r1 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getParent()>();

        return r1;
    }
    public java.util.List asList()
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet r0;
        java.util.ArrayList r1;
        java.util.Iterator $r2;
        boolean $z0;
        java.lang.Object $r3;
        double[] r4;
        org.apache.commons.math3.geometry.spherical.oned.Arc $r5;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>()>();

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (double[]) $r3;

        $r5 = new org.apache.commons.math3.geometry.spherical.oned.Arc;

        $d0 = r4[0];

        $d1 = r4[1];

        $d2 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: double getTolerance()>();

        specialinvoke $r5.<org.apache.commons.math3.geometry.spherical.oned.Arc: void <init>(double,double,double)>($d0, $d1, $d2);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r5);

        goto label1;

     label2:
        return r1;
    }
    public volatile org.apache.commons.math3.geometry.partitioning.AbstractRegion buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r1;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        $r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r0 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.spherical.oned.ArcsSet buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r1);

        return r0;
    }
    public volatile org.apache.commons.math3.geometry.partitioning.Region buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r1;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        $r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r0 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.spherical.oned.ArcsSet buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r1);

        return r0;
    }
    public org.apache.commons.math3.geometry.spherical.oned.ArcsSet buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet r0, $r2;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = new org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: double getTolerance()>();

        specialinvoke $r2.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree,double)>(r1, $d0);

        return $r2;
    }
    protected void computeGeometricalProperties()
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet r0;
        double d0, $d1, d2, $d3, $d4;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r1;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r2;
        org.apache.commons.math3.geometry.spherical.oned.S1Point $r3;
        java.lang.Object $r4;
        java.lang.Boolean $r5;
        boolean $z0;
        java.util.Iterator $r6;
        double[] r7;
        byte $b0;
        org.apache.commons.math3.geometry.partitioning.Hyperplane $r8;
        org.apache.commons.math3.geometry.spherical.oned.LimitAngle r9;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(0);

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r2 != null goto label3;

        $r3 = <org.apache.commons.math3.geometry.spherical.oned.S1Point: org.apache.commons.math3.geometry.spherical.oned.S1Point NaN>;

        virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: void setBarycenter(org.apache.commons.math3.geometry.Point)>($r3);

        $r1 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(0);

        $r4 = virtualinvoke $r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        $d1 = 6.283185307179586;

     label1:
        virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: void setSize(double)>($d1);

        return;

     label2:
        $d1 = 0.0;

        goto label1;

     label3:
        d2 = 0.0;

        $d1 = 0.0;

        $r6 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r4 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (double[]) $r4;

        d0 = r7[1];

        $d3 = r7[0];

        d0 = d0 - $d3;

        d2 = d2 + d0;

        $d3 = r7[0];

        $d4 = r7[1];

        $d3 = $d3 + $d4;

        d0 = $d3 * d0;

        $d1 = $d1 + d0;

        goto label4;

     label5:
        virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: void setSize(double)>(d2);

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,int)>(d2, 6.283185307179586, 0);

        if $z0 == 0 goto label6;

        $r3 = <org.apache.commons.math3.geometry.spherical.oned.S1Point: org.apache.commons.math3.geometry.spherical.oned.S1Point NaN>;

        virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: void setBarycenter(org.apache.commons.math3.geometry.Point)>($r3);

        return;

     label6:
        d0 = <org.apache.commons.math3.util.Precision: double SAFE_MIN>;

        $b0 = d2 cmpl d0;

        if $b0 < 0 goto label7;

        $r3 = new org.apache.commons.math3.geometry.spherical.oned.S1Point;

        d2 = 2.0 * d2;

        $d1 = $d1 / d2;

        specialinvoke $r3.<org.apache.commons.math3.geometry.spherical.oned.S1Point: void <init>(double)>($d1);

        virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: void setBarycenter(org.apache.commons.math3.geometry.Point)>($r3);

        return;

     label7:
        $r1 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(0);

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        $r8 = interfaceinvoke $r2.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        r9 = (org.apache.commons.math3.geometry.spherical.oned.LimitAngle) $r8;

        $r3 = virtualinvoke r9.<org.apache.commons.math3.geometry.spherical.oned.LimitAngle: org.apache.commons.math3.geometry.spherical.oned.S1Point getLocation()>();

        virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: void setBarycenter(org.apache.commons.math3.geometry.Point)>($r3);

        return;
    }
    public java.util.Iterator iterator()
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet r0;
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet$SubArcsIterator $r1;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        $r1 = new org.apache.commons.math3.geometry.spherical.oned.ArcsSet$SubArcsIterator;

        specialinvoke $r1.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet$SubArcsIterator: void <init>(org.apache.commons.math3.geometry.spherical.oned.ArcsSet)>(r0);

        return $r1;
    }
    public org.apache.commons.math3.geometry.partitioning.BoundaryProjection projectToBoundary(org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet r0;
        org.apache.commons.math3.geometry.Point r1;
        double d0, d1, d2, $d3, $d4;
        org.apache.commons.math3.geometry.spherical.oned.S1Point $r2;
        boolean z0, $z1;
        java.util.Iterator $r3;
        java.lang.Object $r4;
        double[] r5;
        byte $b0;
        org.apache.commons.math3.geometry.partitioning.BoundaryProjection $r6;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.Point;

        $r2 = (org.apache.commons.math3.geometry.spherical.oned.S1Point) r1;

        d1 = virtualinvoke $r2.<org.apache.commons.math3.geometry.spherical.oned.S1Point: double getAlpha()>();

        z0 = 0;

        d2 = #NaN;

        d0 = #NaN;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: java.util.Iterator iterator()>();

     label01:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label08;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (double[]) $r4;

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d2);

        if $z1 == 0 goto label02;

        d2 = r5[0];

     label02:
        if z0 != 0 goto label03;

        $d3 = r5[0];

        $b0 = d1 cmpg $d3;

        if $b0 >= 0 goto label06;

        z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if z0 == 0 goto label04;

        z0 = 1;

     label03:
        d0 = r5[1];

        goto label01;

     label04:
        d2 = d1 - d0;

        $d3 = r5[0];

        d1 = $d3 - d1;

        $b0 = d2 cmpg d1;

        if $b0 >= 0 goto label05;

        $r6 = new org.apache.commons.math3.geometry.partitioning.BoundaryProjection;

        $r2 = new org.apache.commons.math3.geometry.spherical.oned.S1Point;

        specialinvoke $r2.<org.apache.commons.math3.geometry.spherical.oned.S1Point: void <init>(double)>(d0);

        specialinvoke $r6.<org.apache.commons.math3.geometry.partitioning.BoundaryProjection: void <init>(org.apache.commons.math3.geometry.Point,org.apache.commons.math3.geometry.Point,double)>(r1, $r2, d2);

        return $r6;

     label05:
        $r6 = new org.apache.commons.math3.geometry.partitioning.BoundaryProjection;

        $r2 = new org.apache.commons.math3.geometry.spherical.oned.S1Point;

        d0 = r5[0];

        specialinvoke $r2.<org.apache.commons.math3.geometry.spherical.oned.S1Point: void <init>(double)>(d0);

        specialinvoke $r6.<org.apache.commons.math3.geometry.partitioning.BoundaryProjection: void <init>(org.apache.commons.math3.geometry.Point,org.apache.commons.math3.geometry.Point,double)>(r1, $r2, d1);

        return $r6;

     label06:
        d0 = r5[1];

        $b0 = d1 cmpg d0;

        if $b0 > 0 goto label03;

        d0 = r5[0];

        d0 = d0 - d1;

        d2 = r5[1];

        d1 = d1 - d2;

        $b0 = d0 cmpg d1;

        if $b0 >= 0 goto label07;

        $r6 = new org.apache.commons.math3.geometry.partitioning.BoundaryProjection;

        $r2 = new org.apache.commons.math3.geometry.spherical.oned.S1Point;

        d0 = r5[1];

        specialinvoke $r2.<org.apache.commons.math3.geometry.spherical.oned.S1Point: void <init>(double)>(d0);

        specialinvoke $r6.<org.apache.commons.math3.geometry.partitioning.BoundaryProjection: void <init>(org.apache.commons.math3.geometry.Point,org.apache.commons.math3.geometry.Point,double)>(r1, $r2, d1);

        return $r6;

     label07:
        $r6 = new org.apache.commons.math3.geometry.partitioning.BoundaryProjection;

        $r2 = new org.apache.commons.math3.geometry.spherical.oned.S1Point;

        d1 = r5[0];

        specialinvoke $r2.<org.apache.commons.math3.geometry.spherical.oned.S1Point: void <init>(double)>(d1);

        specialinvoke $r6.<org.apache.commons.math3.geometry.partitioning.BoundaryProjection: void <init>(org.apache.commons.math3.geometry.Point,org.apache.commons.math3.geometry.Point,double)>(r1, $r2, d0);

        return $r6;

     label08:
        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z1 == 0 goto label09;

        $r6 = new org.apache.commons.math3.geometry.partitioning.BoundaryProjection;

        specialinvoke $r6.<org.apache.commons.math3.geometry.partitioning.BoundaryProjection: void <init>(org.apache.commons.math3.geometry.Point,org.apache.commons.math3.geometry.Point,double)>(r1, null, 6.283185307179586);

        return $r6;

     label09:
        if z0 == 0 goto label11;

        $d3 = d0 - 6.283185307179586;

        $d3 = d1 - $d3;

        d1 = d2 - d1;

        $b0 = $d3 cmpg d1;

        if $b0 >= 0 goto label10;

        $r6 = new org.apache.commons.math3.geometry.partitioning.BoundaryProjection;

        $r2 = new org.apache.commons.math3.geometry.spherical.oned.S1Point;

        specialinvoke $r2.<org.apache.commons.math3.geometry.spherical.oned.S1Point: void <init>(double)>(d0);

        specialinvoke $r6.<org.apache.commons.math3.geometry.partitioning.BoundaryProjection: void <init>(org.apache.commons.math3.geometry.Point,org.apache.commons.math3.geometry.Point,double)>(r1, $r2, $d3);

        return $r6;

     label10:
        $r6 = new org.apache.commons.math3.geometry.partitioning.BoundaryProjection;

        $r2 = new org.apache.commons.math3.geometry.spherical.oned.S1Point;

        specialinvoke $r2.<org.apache.commons.math3.geometry.spherical.oned.S1Point: void <init>(double)>(d2);

        specialinvoke $r6.<org.apache.commons.math3.geometry.partitioning.BoundaryProjection: void <init>(org.apache.commons.math3.geometry.Point,org.apache.commons.math3.geometry.Point,double)>(r1, $r2, d1);

        return $r6;

     label11:
        $d3 = d1 - d0;

        $d4 = 6.283185307179586 + d2;

        d1 = $d4 - d1;

        $b0 = $d3 cmpg d1;

        if $b0 >= 0 goto label12;

        $r6 = new org.apache.commons.math3.geometry.partitioning.BoundaryProjection;

        $r2 = new org.apache.commons.math3.geometry.spherical.oned.S1Point;

        specialinvoke $r2.<org.apache.commons.math3.geometry.spherical.oned.S1Point: void <init>(double)>(d0);

        specialinvoke $r6.<org.apache.commons.math3.geometry.partitioning.BoundaryProjection: void <init>(org.apache.commons.math3.geometry.Point,org.apache.commons.math3.geometry.Point,double)>(r1, $r2, $d3);

        return $r6;

     label12:
        $r6 = new org.apache.commons.math3.geometry.partitioning.BoundaryProjection;

        $r2 = new org.apache.commons.math3.geometry.spherical.oned.S1Point;

        specialinvoke $r2.<org.apache.commons.math3.geometry.spherical.oned.S1Point: void <init>(double)>(d2);

        specialinvoke $r6.<org.apache.commons.math3.geometry.partitioning.BoundaryProjection: void <init>(org.apache.commons.math3.geometry.Point,org.apache.commons.math3.geometry.Point,double)>(r1, $r2, d1);

        return $r6;
    }
    public org.apache.commons.math3.geometry.partitioning.Side side(org.apache.commons.math3.geometry.spherical.oned.Arc)
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet r0;
        org.apache.commons.math3.geometry.spherical.oned.Arc $r1;
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet$Split $r2;
        org.apache.commons.math3.geometry.partitioning.Side $r3;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        $r1 := @parameter0: org.apache.commons.math3.geometry.spherical.oned.Arc;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.spherical.oned.ArcsSet$Split split(org.apache.commons.math3.geometry.spherical.oned.Arc)>($r1);

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet$Split: org.apache.commons.math3.geometry.partitioning.Side getSide()>();

        return $r3;
    }
    public org.apache.commons.math3.geometry.spherical.oned.ArcsSet$Split split(org.apache.commons.math3.geometry.spherical.oned.Arc)
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet r0, $r9;
        org.apache.commons.math3.geometry.spherical.oned.Arc $r1;
        double d0, d1, d2, d3, d4;
        java.util.ArrayList r2, r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        double[] r6;
        byte $b0;
        java.lang.Double $r7;
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet$Split $r8;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        $r1 := @parameter0: org.apache.commons.math3.geometry.spherical.oned.Arc;

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        r3 = new java.util.ArrayList;

        specialinvoke r3.<java.util.ArrayList: void <init>()>();

        d2 = virtualinvoke $r1.<org.apache.commons.math3.geometry.spherical.oned.Arc: double getInf()>();

        d2 = 3.141592653589793 + d2;

        d0 = virtualinvoke $r1.<org.apache.commons.math3.geometry.spherical.oned.Arc: double getSup()>();

        d1 = virtualinvoke $r1.<org.apache.commons.math3.geometry.spherical.oned.Arc: double getInf()>();

        d0 = d0 - d1;

        $r4 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (double[]) $r5;

        d1 = r6[0];

        d1 = staticinvoke <org.apache.commons.math3.util.MathUtils: double normalizeAngle(double,double)>(d1, d2);

        d3 = virtualinvoke $r1.<org.apache.commons.math3.geometry.spherical.oned.Arc: double getInf()>();

        d4 = d1 - d3;

        d1 = r6[0];

        d1 = d1 - d4;

        d3 = r6[1];

        d3 = d3 - d1;

        $b0 = d4 cmpg d0;

        if $b0 >= 0 goto label4;

        d4 = r6[0];

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d4);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r7);

        $b0 = d3 cmpl d0;

        if $b0 <= 0 goto label3;

        d4 = d0 + d1;

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d4);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r7);

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d4);

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r7);

        $b0 = d3 cmpl 6.283185307179586;

        if $b0 <= 0 goto label2;

        d1 = 6.283185307179586 + d1;

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r7);

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r7);

        d1 = r6[1];

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label1;

     label2:
        d1 = r6[1];

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label1;

     label3:
        d1 = r6[1];

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label1;

     label4:
        d4 = r6[0];

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d4);

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r7);

        $b0 = d3 cmpl 6.283185307179586;

        if $b0 <= 0 goto label6;

        d4 = 6.283185307179586 + d1;

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d4);

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r7);

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d4);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r7);

        d4 = 6.283185307179586 + d0;

        $b0 = d3 cmpl d4;

        if $b0 <= 0 goto label5;

        d3 = 6.283185307179586 + d0;

        d1 = d3 + d1;

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r7);

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r7);

        d1 = r6[1];

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label1;

     label5:
        d1 = r6[1];

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label1;

     label6:
        d1 = r6[1];

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label1;

     label7:
        $r8 = new org.apache.commons.math3.geometry.spherical.oned.ArcsSet$Split;

        $r9 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.spherical.oned.ArcsSet createSplitPart(java.util.List)>(r3);

        r0 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.spherical.oned.ArcsSet createSplitPart(java.util.List)>(r2);

        specialinvoke $r8.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet$Split: void <init>(org.apache.commons.math3.geometry.spherical.oned.ArcsSet,org.apache.commons.math3.geometry.spherical.oned.ArcsSet,org.apache.commons.math3.geometry.spherical.oned.ArcsSet$1)>($r9, r0, null);

        return $r8;
    }
