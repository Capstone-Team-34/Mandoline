org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet extends org.apache.commons.math3.geometry.partitioning.AbstractRegion implements java.lang.Iterable
private static final double DEFAULT_TOLERANCE
    public void <init>()
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: void <init>(double)>(1.0E-10);

        return;
    }
    public void <init>(double)
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        $d0 := @parameter0: double;

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: void <init>(double)>($d0);

        return;
    }
    public void <init>(double, double)
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: void <init>(double,double,double)>($d0, $d1, 1.0E-10);

        return;
    }
    public void <init>(double, double, double)
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0;
        double $d0, $d1, $d2;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $r1 = staticinvoke <org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.partitioning.BSPTree buildTree(double,double,double)>($d0, $d1, $d2);

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree,double)>($r1, $d2);

        return;
    }
    public void <init>(java.util.Collection)
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0;
        java.util.Collection r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        r1 := @parameter0: java.util.Collection;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: void <init>(java.util.Collection,double)>(r1, 1.0E-10);

        return;
    }
    public void <init>(java.util.Collection, double)
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0;
        java.util.Collection r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        r1 := @parameter0: java.util.Collection;

        $d0 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: void <init>(java.util.Collection,double)>(r1, $d0);

        return;
    }
    public void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree,double)>(r1, 1.0E-10);

        return;
    }
    public void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree, double)
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $d0 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree,double)>(r1, $d0);

        return;
    }
    static org.apache.commons.math3.geometry.partitioning.BSPTree access$000(org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet)
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet $r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r1;

        $r0 := @parameter0: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        $r1 = specialinvoke $r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.partitioning.BSPTree getFirstIntervalBoundary()>();

        return $r1;
    }
    static org.apache.commons.math3.geometry.partitioning.BSPTree access$100(org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet, org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet $r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r1;

        $r0 := @parameter0: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        $r1 := @parameter1: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r1 = specialinvoke $r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.partitioning.BSPTree getFirstLeaf(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r1);

        return $r1;
    }
    static boolean access$200(org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet, org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet $r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r1;
        boolean $z0;

        $r0 := @parameter0: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        $r1 := @parameter1: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $z0 = specialinvoke $r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: boolean isIntervalEnd(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r1);

        return $z0;
    }
    static double access$300(org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet, org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet $r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r1;
        double $d0;

        $r0 := @parameter0: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        $r1 := @parameter1: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $d0 = specialinvoke $r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: double getAngle(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r1);

        return $d0;
    }
    static boolean access$400(org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet, org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet $r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r1;
        boolean $z0;

        $r0 := @parameter0: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        $r1 := @parameter1: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $z0 = specialinvoke $r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: boolean isIntervalStart(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r1);

        return $z0;
    }
    static org.apache.commons.math3.geometry.partitioning.BSPTree access$500(org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet, org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet $r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r1;

        $r0 := @parameter0: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        $r1 := @parameter1: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r1 = specialinvoke $r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.partitioning.BSPTree nextInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r1);

        return $r1;
    }
    private static org.apache.commons.math3.geometry.partitioning.BSPTree buildTree(double, double, double)
    {
        double $d0, $d1, $d2;
        java.lang.Boolean $r0;
        boolean $z0;
        byte $b0;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r1, $r5, $r6, $r8, $r9;
        org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint $r2;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D $r3;
        org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint $r4, $r7;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d0);

        if $z0 == 0 goto label2;

        $b0 = $d0 cmpg 0.0;

        if $b0 >= 0 goto label2;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d1);

        if $z0 == 0 goto label1;

        $b0 = $d1 cmpl 0.0;

        if $b0 <= 0 goto label1;

        $r1 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r0 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        specialinvoke $r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r0);

        return $r1;

     label1:
        $r2 = new org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint;

        $r3 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        specialinvoke $r3.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: void <init>(double)>($d1);

        specialinvoke $r2.<org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint: void <init>(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,boolean,double)>($r3, 1, $d2);

        $r4 = virtualinvoke $r2.<org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint: org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint wholeHyperplane()>();

        $r1 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r5 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r0 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        specialinvoke $r5.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r0);

        $r6 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r0 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        specialinvoke $r6.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r0);

        specialinvoke $r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)>($r4, $r5, $r6, null);

        return $r1;

     label2:
        $r2 = new org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint;

        $r3 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        specialinvoke $r3.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: void <init>(double)>($d0);

        specialinvoke $r2.<org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint: void <init>(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,boolean,double)>($r3, 0, $d2);

        $r4 = virtualinvoke $r2.<org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint: org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint wholeHyperplane()>();

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d1);

        if $z0 == 0 goto label3;

        $b0 = $d1 cmpl 0.0;

        if $b0 <= 0 goto label3;

        $r1 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r5 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r0 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        specialinvoke $r5.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r0);

        $r6 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r0 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        specialinvoke $r6.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r0);

        specialinvoke $r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)>($r4, $r5, $r6, null);

        return $r1;

     label3:
        $r2 = new org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint;

        $r3 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        specialinvoke $r3.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: void <init>(double)>($d1);

        specialinvoke $r2.<org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint: void <init>(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,boolean,double)>($r3, 1, $d2);

        $r7 = virtualinvoke $r2.<org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint: org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint wholeHyperplane()>();

        $r1 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r5 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r0 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        specialinvoke $r5.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r0);

        $r6 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r8 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r0 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        specialinvoke $r8.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r0);

        $r9 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r0 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        specialinvoke $r9.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r0);

        specialinvoke $r6.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)>($r7, $r8, $r9, null);

        specialinvoke $r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)>($r4, $r5, $r6, null);

        return $r1;
    }
    private org.apache.commons.math3.geometry.partitioning.BSPTree childAfter(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $z0 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: boolean isDirect(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        if $z0 == 0 goto label1;

        r1 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        return r1;

     label1:
        r1 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        return r1;
    }
    private org.apache.commons.math3.geometry.partitioning.BSPTree childBefore(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $z0 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: boolean isDirect(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        if $z0 == 0 goto label1;

        r1 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        return r1;

     label1:
        r1 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        return r1;
    }
    private org.apache.commons.math3.geometry.euclidean.oned.Vector1D finiteOrNullPoint(double)
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0;
        double $d0;
        boolean $z0;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D $r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        $d0 := @parameter0: double;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d0);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r1 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        specialinvoke $r1.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: void <init>(double)>($d0);

        return $r1;
    }
    private double getAngle(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r2;
        org.apache.commons.math3.geometry.partitioning.Hyperplane $r3;
        org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint $r4;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D $r5;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        $r3 = interfaceinvoke $r2.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        $r4 = (org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint) $r3;

        $r5 = virtualinvoke $r4.<org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint: org.apache.commons.math3.geometry.euclidean.oned.Vector1D getLocation()>();

        $d0 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double getX()>();

        return $d0;
    }
    private org.apache.commons.math3.geometry.partitioning.BSPTree getFirstIntervalBoundary()
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r1;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(0);

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r2 != null goto label1;

        return null;

     label1:
        $r1 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.partitioning.BSPTree getFirstLeaf(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r1);

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getParent()>();

     label2:
        if $r1 == null goto label3;

        $z0 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: boolean isIntervalStart(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r1);

        if $z0 != 0 goto label3;

        $z0 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: boolean isIntervalEnd(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r1);

        if $z0 != 0 goto label3;

        $r1 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.partitioning.BSPTree nextInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r1);

        goto label2;

     label3:
        return $r1;
    }
    private org.apache.commons.math3.geometry.partitioning.BSPTree getFirstLeaf(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, r3;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r2 != null goto label1;

        return r1;

     label1:
        r3 = null;

     label2:
        if r1 == null goto label3;

        r3 = r1;

        r1 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.partitioning.BSPTree previousInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        goto label2;

     label3:
        r1 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.partitioning.BSPTree leafBefore(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r3);

        return r1;
    }
    private boolean isAfterParent(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getParent()>();

        if $r2 != null goto label1;

        return 0;

     label1:
        $r2 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.partitioning.BSPTree childAfter(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r2);

        if r1 != $r2 goto label2;

        return 1;

     label2:
        return 0;
    }
    private boolean isBeforeParent(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getParent()>();

        if $r2 != null goto label1;

        return 0;

     label1:
        $r2 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.partitioning.BSPTree childBefore(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r2);

        if r1 != $r2 goto label2;

        return 1;

     label2:
        return 0;
    }
    private boolean isDirect(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r2;
        org.apache.commons.math3.geometry.partitioning.Hyperplane $r3;
        org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint $r4;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        $r3 = interfaceinvoke $r2.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        $r4 = (org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint) $r3;

        $z0 = virtualinvoke $r4.<org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint: boolean isDirect()>();

        return $z0;
    }
    private boolean isIntervalEnd(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.partitioning.BSPTree leafBefore(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r1 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.partitioning.BSPTree leafAfter(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        $r3 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        return 0;

     label2:
        return 1;
    }
    private boolean isIntervalStart(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.partitioning.BSPTree leafBefore(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        r1 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.partitioning.BSPTree leafAfter(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        $r3 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label2;

        return 0;

     label2:
        return 1;
    }
    private org.apache.commons.math3.geometry.partitioning.BSPTree leafAfter(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r1 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.partitioning.BSPTree childAfter(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

     label1:
        $r2 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r2 == null goto label2;

        r1 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.partitioning.BSPTree childBefore(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        goto label1;

     label2:
        return r1;
    }
    private org.apache.commons.math3.geometry.partitioning.BSPTree leafBefore(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r1 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.partitioning.BSPTree childBefore(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

     label1:
        $r2 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r2 == null goto label2;

        r1 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.partitioning.BSPTree childAfter(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        goto label1;

     label2:
        return r1;
    }
    private org.apache.commons.math3.geometry.partitioning.BSPTree nextInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, $r2;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r3;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.partitioning.BSPTree childAfter(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r3 == null goto label1;

        r1 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.partitioning.BSPTree leafAfter(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        r1 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getParent()>();

        return r1;

     label1:
        $z0 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: boolean isAfterParent(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        if $z0 == 0 goto label2;

        r1 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getParent()>();

        goto label1;

     label2:
        r1 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getParent()>();

        return r1;
    }
    private org.apache.commons.math3.geometry.partitioning.BSPTree previousInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, $r2;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r3;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.partitioning.BSPTree childBefore(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r3 == null goto label1;

        r1 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.partitioning.BSPTree leafBefore(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        r1 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getParent()>();

        return r1;

     label1:
        $z0 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: boolean isBeforeParent(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        if $z0 == 0 goto label2;

        r1 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getParent()>();

        goto label1;

     label2:
        r1 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getParent()>();

        return r1;
    }
    public java.util.List asList()
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0;
        java.util.ArrayList r1;
        java.util.Iterator $r2;
        boolean $z0;
        java.lang.Object $r3;
        double[] r4;
        org.apache.commons.math3.geometry.euclidean.oned.Interval $r5;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>()>();

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (double[]) $r3;

        $r5 = new org.apache.commons.math3.geometry.euclidean.oned.Interval;

        $d0 = r4[0];

        $d1 = r4[1];

        specialinvoke $r5.<org.apache.commons.math3.geometry.euclidean.oned.Interval: void <init>(double,double)>($d0, $d1);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r5);

        goto label1;

     label2:
        return r1;
    }
    public org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0, $r2;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: double getTolerance()>();

        specialinvoke $r2.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree,double)>(r1, $d0);

        return $r2;
    }
    public volatile org.apache.commons.math3.geometry.partitioning.AbstractRegion buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        $r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r1);

        return r0;
    }
    public volatile org.apache.commons.math3.geometry.partitioning.Region buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        $r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r1);

        return r0;
    }
    protected void computeGeometricalProperties()
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r1;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r2;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D $r3;
        java.lang.Object $r4;
        java.lang.Boolean $r5;
        boolean $z0;
        double $d0, d1, $d2, $d3;
        java.util.List $r6;
        java.util.Iterator $r7;
        org.apache.commons.math3.geometry.euclidean.oned.Interval r8;
        byte $b0;
        org.apache.commons.math3.geometry.partitioning.Hyperplane $r9;
        org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint $r10;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(0);

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r2 != null goto label3;

        $r3 = <org.apache.commons.math3.geometry.euclidean.oned.Vector1D: org.apache.commons.math3.geometry.euclidean.oned.Vector1D NaN>;

        virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: void setBarycenter(org.apache.commons.math3.geometry.Point)>($r3);

        $r1 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(0);

        $r4 = virtualinvoke $r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        $d0 = #Infinity;

     label1:
        virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: void setSize(double)>($d0);

        return;

     label2:
        $d0 = 0.0;

        goto label1;

     label3:
        $d0 = 0.0;

        d1 = 0.0;

        $r6 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: java.util.List asList()>();

        $r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r4 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.apache.commons.math3.geometry.euclidean.oned.Interval) $r4;

        $d2 = virtualinvoke r8.<org.apache.commons.math3.geometry.euclidean.oned.Interval: double getSize()>();

        $d0 = $d0 + $d2;

        $d2 = virtualinvoke r8.<org.apache.commons.math3.geometry.euclidean.oned.Interval: double getSize()>();

        $d3 = virtualinvoke r8.<org.apache.commons.math3.geometry.euclidean.oned.Interval: double getBarycenter()>();

        $d2 = $d2 * $d3;

        d1 = d1 + $d2;

        goto label4;

     label5:
        virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: void setSize(double)>($d0);

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d0);

        if $z0 == 0 goto label6;

        $r3 = <org.apache.commons.math3.geometry.euclidean.oned.Vector1D: org.apache.commons.math3.geometry.euclidean.oned.Vector1D NaN>;

        virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: void setBarycenter(org.apache.commons.math3.geometry.Point)>($r3);

        return;

     label6:
        $d2 = <org.apache.commons.math3.util.Precision: double SAFE_MIN>;

        $b0 = $d0 cmpl $d2;

        if $b0 < 0 goto label7;

        $r3 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        $d0 = d1 / $d0;

        specialinvoke $r3.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: void <init>(double)>($d0);

        virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: void setBarycenter(org.apache.commons.math3.geometry.Point)>($r3);

        return;

     label7:
        $r1 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(0);

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        $r9 = interfaceinvoke $r2.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        $r10 = (org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint) $r9;

        $r3 = virtualinvoke $r10.<org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint: org.apache.commons.math3.geometry.euclidean.oned.Vector1D getLocation()>();

        virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: void setBarycenter(org.apache.commons.math3.geometry.Point)>($r3);

        return;
    }
    public double getInf()
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r1;
        double d0;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r2;
        org.apache.commons.math3.geometry.partitioning.Hyperplane $r3;
        org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint r4;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D $r5;
        boolean $z0;
        java.lang.Object $r6;
        java.lang.Boolean $r7;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(0);

        d0 = #Infinity;

     label1:
        $r2 = virtualinvoke $r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r2 == null goto label3;

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        $r3 = interfaceinvoke $r2.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        r4 = (org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint) $r3;

        $r5 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint: org.apache.commons.math3.geometry.euclidean.oned.Vector1D getLocation()>();

        d0 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double getX()>();

        $z0 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint: boolean isDirect()>();

        if $z0 == 0 goto label2;

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        goto label1;

     label2:
        $r1 = virtualinvoke $r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        goto label1;

     label3:
        $r6 = virtualinvoke $r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        $r7 = (java.lang.Boolean) $r6;

        $z0 = virtualinvoke $r7.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label4;

        return #-Infinity;

     label4:
        return d0;
    }
    public double getSup()
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r1;
        double d0;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r2;
        org.apache.commons.math3.geometry.partitioning.Hyperplane $r3;
        org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint r4;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D $r5;
        boolean $z0;
        java.lang.Object $r6;
        java.lang.Boolean $r7;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(0);

        d0 = #-Infinity;

     label1:
        $r2 = virtualinvoke $r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r2 == null goto label3;

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        $r3 = interfaceinvoke $r2.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        r4 = (org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint) $r3;

        $r5 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint: org.apache.commons.math3.geometry.euclidean.oned.Vector1D getLocation()>();

        d0 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double getX()>();

        $z0 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint: boolean isDirect()>();

        if $z0 == 0 goto label2;

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        goto label1;

     label2:
        $r1 = virtualinvoke $r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        goto label1;

     label3:
        $r6 = virtualinvoke $r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        $r7 = (java.lang.Boolean) $r6;

        $z0 = virtualinvoke $r7.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label4;

        return #Infinity;

     label4:
        return d0;
    }
    public java.util.Iterator iterator()
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet$SubIntervalsIterator $r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        $r1 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet$SubIntervalsIterator;

        specialinvoke $r1.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet$SubIntervalsIterator: void <init>(org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet)>(r0);

        return $r1;
    }
    public org.apache.commons.math3.geometry.partitioning.BoundaryProjection projectToBoundary(org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0;
        org.apache.commons.math3.geometry.Point r1;
        double d0, d1, d2, $d3;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        double[] r5;
        byte $b0;
        org.apache.commons.math3.geometry.partitioning.BoundaryProjection $r6;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.Point;

        $r2 = (org.apache.commons.math3.geometry.euclidean.oned.Vector1D) r1;

        d0 = virtualinvoke $r2.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double getX()>();

        d1 = #-Infinity;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (double[]) $r4;

        d2 = r5[0];

        $b0 = d0 cmpg d2;

        if $b0 >= 0 goto label3;

        d2 = d0 - d1;

        $d3 = r5[0];

        d0 = $d3 - d0;

        $b0 = d2 cmpg d0;

        if $b0 >= 0 goto label2;

        $r6 = new org.apache.commons.math3.geometry.partitioning.BoundaryProjection;

        $r2 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.euclidean.oned.Vector1D finiteOrNullPoint(double)>(d1);

        specialinvoke $r6.<org.apache.commons.math3.geometry.partitioning.BoundaryProjection: void <init>(org.apache.commons.math3.geometry.Point,org.apache.commons.math3.geometry.Point,double)>(r1, $r2, d2);

        return $r6;

     label2:
        $r6 = new org.apache.commons.math3.geometry.partitioning.BoundaryProjection;

        d1 = r5[0];

        $r2 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.euclidean.oned.Vector1D finiteOrNullPoint(double)>(d1);

        specialinvoke $r6.<org.apache.commons.math3.geometry.partitioning.BoundaryProjection: void <init>(org.apache.commons.math3.geometry.Point,org.apache.commons.math3.geometry.Point,double)>(r1, $r2, d0);

        return $r6;

     label3:
        d1 = r5[1];

        $b0 = d0 cmpg d1;

        if $b0 > 0 goto label5;

        d1 = r5[0];

        d1 = d1 - d0;

        d2 = r5[1];

        d0 = d0 - d2;

        $b0 = d1 cmpg d0;

        if $b0 >= 0 goto label4;

        $r6 = new org.apache.commons.math3.geometry.partitioning.BoundaryProjection;

        d1 = r5[1];

        $r2 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.euclidean.oned.Vector1D finiteOrNullPoint(double)>(d1);

        specialinvoke $r6.<org.apache.commons.math3.geometry.partitioning.BoundaryProjection: void <init>(org.apache.commons.math3.geometry.Point,org.apache.commons.math3.geometry.Point,double)>(r1, $r2, d0);

        return $r6;

     label4:
        $r6 = new org.apache.commons.math3.geometry.partitioning.BoundaryProjection;

        d0 = r5[0];

        $r2 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.euclidean.oned.Vector1D finiteOrNullPoint(double)>(d0);

        specialinvoke $r6.<org.apache.commons.math3.geometry.partitioning.BoundaryProjection: void <init>(org.apache.commons.math3.geometry.Point,org.apache.commons.math3.geometry.Point,double)>(r1, $r2, d1);

        return $r6;

     label5:
        d1 = r5[1];

        goto label1;

     label6:
        $r6 = new org.apache.commons.math3.geometry.partitioning.BoundaryProjection;

        $r2 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.euclidean.oned.Vector1D finiteOrNullPoint(double)>(d1);

        d0 = d0 - d1;

        specialinvoke $r6.<org.apache.commons.math3.geometry.partitioning.BoundaryProjection: void <init>(org.apache.commons.math3.geometry.Point,org.apache.commons.math3.geometry.Point,double)>(r1, $r2, d0);

        return $r6;
    }
