org.apache.commons.math3.geometry.euclidean.twod.NestedLoops extends java.lang.Object
private org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] loop
private boolean originalIsClockwise
private org.apache.commons.math3.geometry.partitioning.Region polygon
private java.util.List surrounded
private final double tolerance
    void <init>(double)
    {
        org.apache.commons.math3.geometry.euclidean.twod.NestedLoops r0;
        double $d0;
        java.util.ArrayList $r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.NestedLoops;

        $d0 := @parameter0: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: java.util.List surrounded> = $r1;

        r0.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: double tolerance> = $d0;

        return;
    }
    private void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D[], double) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.geometry.euclidean.twod.NestedLoops r0;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] $r1;
        double $d0, $d1, $d2;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r2;
        java.util.ArrayList r3;
        org.apache.commons.math3.geometry.euclidean.twod.Line r4;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r5, r9;
        org.apache.commons.math3.exception.MathIllegalArgumentException $r6;
        org.apache.commons.math3.exception.util.LocalizedFormats $r7;
        java.lang.Object[] $r8;
        int $i0, $i1;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D $r10;
        org.apache.commons.math3.geometry.euclidean.twod.SubLine $r11;
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet $r12;
        org.apache.commons.math3.geometry.partitioning.Region $r13;
        boolean $z0;
        org.apache.commons.math3.geometry.partitioning.RegionFactory $r14;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.NestedLoops;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[];

        $d0 := @parameter1: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r5 = $r1[0];

        if r5 != null goto label1;

        $r6 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r7 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OUTLINE_BOUNDARY_LOOP_OPEN>;

        $r8 = newarray (java.lang.Object)[0];

        specialinvoke $r6.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r7, $r8);

        throw $r6;

     label1:
        r0.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] loop> = $r1;

        r3 = new java.util.ArrayList;

        specialinvoke r3.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: java.util.List surrounded> = r3;

        r0.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: double tolerance> = $d0;

        r3 = new java.util.ArrayList;

        specialinvoke r3.<java.util.ArrayList: void <init>()>();

        $i0 = lengthof $r1;

        $i0 = $i0 + -1;

        r9 = $r1[$i0];

        $i0 = 0;

     label2:
        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label3;

        r5 = r9;

        r9 = $r1[$i0];

        r4 = new org.apache.commons.math3.geometry.euclidean.twod.Line;

        specialinvoke r4.<org.apache.commons.math3.geometry.euclidean.twod.Line: void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)>(r5, r9, $d0);

        r2 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        $r10 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.oned.Vector1D toSubSpace(org.apache.commons.math3.geometry.Point)>(r5);

        $d1 = virtualinvoke $r10.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double getX()>();

        $r10 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.oned.Vector1D toSubSpace(org.apache.commons.math3.geometry.Point)>(r9);

        $d2 = virtualinvoke $r10.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double getX()>();

        specialinvoke r2.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: void <init>(double,double,double)>($d1, $d2, $d0);

        $r11 = new org.apache.commons.math3.geometry.euclidean.twod.SubLine;

        specialinvoke $r11.<org.apache.commons.math3.geometry.euclidean.twod.SubLine: void <init>(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)>(r4, r2);

        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r11);

        $i0 = $i0 + 1;

        goto label2;

     label3:
        $r12 = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;

        specialinvoke $r12.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: void <init>(java.util.Collection,double)>(r3, $d0);

        r0.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: org.apache.commons.math3.geometry.partitioning.Region polygon> = $r12;

        $r13 = r0.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: org.apache.commons.math3.geometry.partitioning.Region polygon>;

        $d0 = interfaceinvoke $r13.<org.apache.commons.math3.geometry.partitioning.Region: double getSize()>();

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d0);

        if $z0 == 0 goto label4;

        $r14 = new org.apache.commons.math3.geometry.partitioning.RegionFactory;

        specialinvoke $r14.<org.apache.commons.math3.geometry.partitioning.RegionFactory: void <init>()>();

        $r13 = r0.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: org.apache.commons.math3.geometry.partitioning.Region polygon>;

        $r13 = virtualinvoke $r14.<org.apache.commons.math3.geometry.partitioning.RegionFactory: org.apache.commons.math3.geometry.partitioning.Region getComplement(org.apache.commons.math3.geometry.partitioning.Region)>($r13);

        r0.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: org.apache.commons.math3.geometry.partitioning.Region polygon> = $r13;

        r0.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: boolean originalIsClockwise> = 0;

        return;

     label4:
        r0.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: boolean originalIsClockwise> = 1;

        return;
    }
    private void add(org.apache.commons.math3.geometry.euclidean.twod.NestedLoops) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.geometry.euclidean.twod.NestedLoops r0, $r1, r6;
        org.apache.commons.math3.geometry.partitioning.RegionFactory r2;
        java.util.List $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        org.apache.commons.math3.geometry.partitioning.Region $r7, $r8;
        org.apache.commons.math3.exception.MathIllegalArgumentException $r9;
        org.apache.commons.math3.exception.util.LocalizedFormats $r10;
        java.lang.Object[] $r11;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.NestedLoops;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.twod.NestedLoops;

        $r3 = r0.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: java.util.List surrounded>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.commons.math3.geometry.euclidean.twod.NestedLoops) $r5;

        $r7 = r6.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: org.apache.commons.math3.geometry.partitioning.Region polygon>;

        $r8 = $r1.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: org.apache.commons.math3.geometry.partitioning.Region polygon>;

        $z0 = interfaceinvoke $r7.<org.apache.commons.math3.geometry.partitioning.Region: boolean contains(org.apache.commons.math3.geometry.partitioning.Region)>($r8);

        if $z0 == 0 goto label1;

        specialinvoke r6.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: void add(org.apache.commons.math3.geometry.euclidean.twod.NestedLoops)>($r1);

        return;

     label2:
        $r3 = r0.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: java.util.List surrounded>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.commons.math3.geometry.euclidean.twod.NestedLoops) $r5;

        $r7 = $r1.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: org.apache.commons.math3.geometry.partitioning.Region polygon>;

        $r8 = r6.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: org.apache.commons.math3.geometry.partitioning.Region polygon>;

        $z0 = interfaceinvoke $r7.<org.apache.commons.math3.geometry.partitioning.Region: boolean contains(org.apache.commons.math3.geometry.partitioning.Region)>($r8);

        if $z0 == 0 goto label3;

        $r3 = $r1.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: java.util.List surrounded>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r6);

        interfaceinvoke $r4.<java.util.Iterator: void remove()>();

        goto label3;

     label4:
        r2 = new org.apache.commons.math3.geometry.partitioning.RegionFactory;

        specialinvoke r2.<org.apache.commons.math3.geometry.partitioning.RegionFactory: void <init>()>();

        $r3 = r0.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: java.util.List surrounded>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.commons.math3.geometry.euclidean.twod.NestedLoops) $r5;

        $r7 = $r1.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: org.apache.commons.math3.geometry.partitioning.Region polygon>;

        $r8 = r6.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: org.apache.commons.math3.geometry.partitioning.Region polygon>;

        $r7 = virtualinvoke r2.<org.apache.commons.math3.geometry.partitioning.RegionFactory: org.apache.commons.math3.geometry.partitioning.Region intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)>($r7, $r8);

        $z0 = interfaceinvoke $r7.<org.apache.commons.math3.geometry.partitioning.Region: boolean isEmpty()>();

        if $z0 != 0 goto label5;

        $r9 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r10 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats CROSSING_BOUNDARY_LOOPS>;

        $r11 = newarray (java.lang.Object)[0];

        specialinvoke $r9.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r10, $r11);

        throw $r9;

     label6:
        $r3 = r0.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: java.util.List surrounded>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r1);

        return;
    }
    private void setClockWise(boolean)
    {
        org.apache.commons.math3.geometry.euclidean.twod.NestedLoops r0;
        boolean $z0, $z1;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r1, $r4;
        int i0, i1;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] $r2, $r3;
        java.util.List $r5;
        java.util.Iterator $r6;
        java.lang.Object $r7;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.NestedLoops;

        $z0 := @parameter0: boolean;

        $z1 = r0.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: boolean originalIsClockwise>;

        $z1 = $z1 ^ $z0;

        if $z1 == 0 goto label2;

        i0 = -1;

        $r2 = r0.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] loop>;

        i1 = lengthof $r2;

     label1:
        i0 = i0 + 1;

        i1 = i1 + -1;

        if i0 >= i1 goto label2;

        $r2 = r0.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] loop>;

        r1 = $r2[i0];

        $r2 = r0.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] loop>;

        $r3 = r0.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] loop>;

        $r4 = $r3[i1];

        $r2[i0] = $r4;

        $r2 = r0.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] loop>;

        $r2[i1] = r1;

        goto label1;

     label2:
        $r5 = r0.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: java.util.List surrounded>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r0 = (org.apache.commons.math3.geometry.euclidean.twod.NestedLoops) $r7;

        if $z0 != 0 goto label5;

        $z1 = 1;

     label4:
        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: void setClockWise(boolean)>($z1);

        goto label3;

     label5:
        $z1 = 0;

        goto label4;

     label6:
        return;
    }
    public void add(org.apache.commons.math3.geometry.euclidean.twod.Vector2D[]) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.geometry.euclidean.twod.NestedLoops r0, $r2;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.NestedLoops;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[];

        $r2 = new org.apache.commons.math3.geometry.euclidean.twod.NestedLoops;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: double tolerance>;

        specialinvoke $r2.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D[],double)>($r1, $d0);

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: void add(org.apache.commons.math3.geometry.euclidean.twod.NestedLoops)>($r2);

        return;
    }
    public void correctOrientation()
    {
        org.apache.commons.math3.geometry.euclidean.twod.NestedLoops r0;
        java.util.List $r1;
        java.util.Iterator $r2;
        boolean $z0;
        java.lang.Object $r3;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.NestedLoops;

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: java.util.List surrounded>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r0 = (org.apache.commons.math3.geometry.euclidean.twod.NestedLoops) $r3;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: void setClockWise(boolean)>(1);

        goto label1;

     label2:
        return;
    }
