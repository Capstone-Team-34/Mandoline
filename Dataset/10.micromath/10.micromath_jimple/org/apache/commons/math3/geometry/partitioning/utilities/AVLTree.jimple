org.apache.commons.math3.geometry.partitioning.utilities.AVLTree extends java.lang.Object
private org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node top
    public void <init>()
    {
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree r0;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node top> = null;

        return;
    }
    static org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node access$302(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree, org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node)
    {
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree $r0;
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node $r1;

        $r0 := @parameter0: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree;

        $r1 := @parameter1: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node;

        $r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node top> = $r1;

        return $r1;
    }
    public boolean delete(java.lang.Comparable)
    {
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree r0;
        java.lang.Comparable r1, $r3;
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node $r2;
        int $i0;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree;

        r1 := @parameter0: java.lang.Comparable;

        if r1 == null goto label3;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node getNotSmaller(java.lang.Comparable)>(r1);

     label1:
        if $r2 == null goto label3;

        $r3 = staticinvoke <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: java.lang.Comparable access$000(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node)>($r2);

        if $r3 != r1 goto label2;

        virtualinvoke $r2.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: void delete()>();

        return 1;

     label2:
        $r3 = staticinvoke <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: java.lang.Comparable access$000(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node)>($r2);

        $i0 = interfaceinvoke $r3.<java.lang.Comparable: int compareTo(java.lang.Object)>(r1);

        if $i0 > 0 goto label3;

        $r2 = virtualinvoke $r2.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node getNext()>();

        goto label1;

     label3:
        return 0;
    }
    public org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node getLargest()
    {
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree r0;
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node $r1;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node top>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node top>;

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node getLargest()>();

        return $r1;
    }
    public org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node getNotLarger(java.lang.Comparable)
    {
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree r0;
        java.lang.Comparable r1, $r4;
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node r2, r3, $r5;
        int $i0;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree;

        r1 := @parameter0: java.lang.Comparable;

        r2 = null;

        r3 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node top>;

     label1:
        if r3 == null goto label5;

        $r4 = staticinvoke <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: java.lang.Comparable access$000(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node)>(r3);

        $i0 = interfaceinvoke $r4.<java.lang.Comparable: int compareTo(java.lang.Object)>(r1);

        if $i0 <= 0 goto label3;

        $r5 = staticinvoke <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node access$200(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node)>(r3);

        if $r5 != null goto label2;

        return r2;

     label2:
        r3 = staticinvoke <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node access$200(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node)>(r3);

        goto label1;

     label3:
        r2 = r3;

        $r5 = staticinvoke <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node access$100(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node)>(r3);

        if $r5 != null goto label4;

        return r3;

     label4:
        r3 = staticinvoke <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node access$100(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node)>(r3);

        goto label1;

     label5:
        return null;
    }
    public org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node getNotSmaller(java.lang.Comparable)
    {
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree r0;
        java.lang.Comparable r1, $r4;
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node r2, r3, $r5;
        int $i0;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree;

        r1 := @parameter0: java.lang.Comparable;

        r2 = null;

        r3 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node top>;

     label1:
        if r3 == null goto label5;

        $r4 = staticinvoke <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: java.lang.Comparable access$000(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node)>(r3);

        $i0 = interfaceinvoke $r4.<java.lang.Comparable: int compareTo(java.lang.Object)>(r1);

        if $i0 >= 0 goto label3;

        $r5 = staticinvoke <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node access$100(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node)>(r3);

        if $r5 != null goto label2;

        return r2;

     label2:
        r3 = staticinvoke <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node access$100(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node)>(r3);

        goto label1;

     label3:
        r2 = r3;

        $r5 = staticinvoke <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node access$200(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node)>(r3);

        if $r5 != null goto label4;

        return r3;

     label4:
        r3 = staticinvoke <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node access$200(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node)>(r3);

        goto label1;

     label5:
        return null;
    }
    public org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node getSmallest()
    {
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree r0;
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node $r1;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node top>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node top>;

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node getSmallest()>();

        return $r1;
    }
    public void insert(java.lang.Comparable)
    {
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree r0;
        java.lang.Comparable r1;
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node $r2;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree;

        r1 := @parameter0: java.lang.Comparable;

        if r1 == null goto label2;

        $r2 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node top>;

        if $r2 != null goto label1;

        $r2 = new org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node;

        specialinvoke $r2.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: void <init>(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree,java.lang.Comparable,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node)>(r0, r1, null);

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node top> = $r2;

        return;

     label1:
        $r2 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node top>;

        virtualinvoke $r2.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: boolean insert(java.lang.Comparable)>(r1);

     label2:
        return;
    }
    public boolean isEmpty()
    {
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree r0;
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node $r1;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node top>;

        if $r1 != null goto label1;

        return 1;

     label1:
        return 0;
    }
    public int size()
    {
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree r0;
        int $i0;
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node $r1;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node top>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node top>;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: int size()>();

        return $i0;
    }
