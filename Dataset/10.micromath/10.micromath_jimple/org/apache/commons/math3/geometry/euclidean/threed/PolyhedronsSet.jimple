org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet extends org.apache.commons.math3.geometry.partitioning.AbstractRegion
private static final double DEFAULT_TOLERANCE
    public void <init>()
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet r0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: void <init>(double)>(1.0E-10);

        return;
    }
    public void <init>(double)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet;

        $d0 := @parameter0: double;

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: void <init>(double)>($d0);

        return;
    }
    public void <init>(double, double, double, double, double, double)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet r0;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $d3 := @parameter3: double;

        $d4 := @parameter4: double;

        $d5 := @parameter5: double;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: void <init>(double,double,double,double,double,double,double)>($d0, $d1, $d2, $d3, $d4, $d5, 1.0E-10);

        return;
    }
    public void <init>(double, double, double, double, double, double, double)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet r0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $d3 := @parameter3: double;

        $d4 := @parameter4: double;

        $d5 := @parameter5: double;

        $d6 := @parameter6: double;

        $r1 = staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: org.apache.commons.math3.geometry.partitioning.BSPTree buildBoundary(double,double,double,double,double,double,double)>($d0, $d1, $d2, $d3, $d4, $d5, $d6);

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree,double)>($r1, $d6);

        return;
    }
    public void <init>(java.util.Collection)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet r0;
        java.util.Collection r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet;

        r1 := @parameter0: java.util.Collection;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: void <init>(java.util.Collection,double)>(r1, 1.0E-10);

        return;
    }
    public void <init>(java.util.Collection, double)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet r0;
        java.util.Collection r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet;

        r1 := @parameter0: java.util.Collection;

        $d0 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: void <init>(java.util.Collection,double)>(r1, $d0);

        return;
    }
    public void <init>(java.util.List, java.util.List, double)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet r0;
        java.util.List r1, r2;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.List;

        $d0 := @parameter2: double;

        r1 = staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: java.util.List buildBoundary(java.util.List,java.util.List,double)>(r1, r2, $d0);

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: void <init>(java.util.Collection,double)>(r1, $d0);

        return;
    }
    public void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree,double)>(r1, 1.0E-10);

        return;
    }
    public void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree, double)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $d0 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree,double)>(r1, $d0);

        return;
    }
    static void access$000(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet, double)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet $r0;
        double $d0;

        $r0 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet;

        $d0 := @parameter1: double;

        virtualinvoke $r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: void setSize(double)>($d0);

        return;
    }
    static void access$100(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet, org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet $r0;
        org.apache.commons.math3.geometry.Point $r1;

        $r0 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet;

        $r1 := @parameter1: org.apache.commons.math3.geometry.Point;

        virtualinvoke $r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: void setBarycenter(org.apache.commons.math3.geometry.Point)>($r1);

        return;
    }
    static void access$200(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet, double)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet $r0;
        double $d0;

        $r0 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet;

        $d0 := @parameter1: double;

        virtualinvoke $r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: void setSize(double)>($d0);

        return;
    }
    static void access$300(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet, org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet $r0;
        org.apache.commons.math3.geometry.Point $r1;

        $r0 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet;

        $r1 := @parameter1: org.apache.commons.math3.geometry.Point;

        virtualinvoke $r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: void setBarycenter(org.apache.commons.math3.geometry.Point)>($r1);

        return;
    }
    static void access$400(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet, double)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet $r0;
        double $d0;

        $r0 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet;

        $d0 := @parameter1: double;

        virtualinvoke $r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: void setSize(double)>($d0);

        return;
    }
    static void access$500(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet, org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet $r0;
        org.apache.commons.math3.geometry.Point $r1;

        $r0 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet;

        $r1 := @parameter1: org.apache.commons.math3.geometry.Point;

        virtualinvoke $r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: void setBarycenter(org.apache.commons.math3.geometry.Point)>($r1);

        return;
    }
    private org.apache.commons.math3.geometry.partitioning.SubHyperplane boundaryFacet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r1;
        org.apache.commons.math3.geometry.partitioning.BSPTree r2;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r3;
        org.apache.commons.math3.geometry.partitioning.Hyperplane $r4;
        org.apache.commons.math3.geometry.euclidean.threed.Plane $r5;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D $r6;
        java.lang.Object $r7;
        org.apache.commons.math3.geometry.partitioning.BoundaryAttribute r8;
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane $r9;
        org.apache.commons.math3.geometry.partitioning.Region $r10;
        org.apache.commons.math3.geometry.partitioning.Region$Location $r11, $r12;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        r2 := @parameter1: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r3 = virtualinvoke r2.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        $r4 = interfaceinvoke $r3.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        $r5 = (org.apache.commons.math3.geometry.euclidean.threed.Plane) $r4;

        $r6 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.twod.Vector2D toSubSpace(org.apache.commons.math3.geometry.Point)>($r1);

        $r7 = virtualinvoke r2.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        r8 = (org.apache.commons.math3.geometry.partitioning.BoundaryAttribute) $r7;

        $r3 = virtualinvoke r8.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusOutside()>();

        if $r3 == null goto label1;

        $r3 = virtualinvoke r8.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusOutside()>();

        $r9 = (org.apache.commons.math3.geometry.euclidean.threed.SubPlane) $r3;

        $r10 = virtualinvoke $r9.<org.apache.commons.math3.geometry.euclidean.threed.SubPlane: org.apache.commons.math3.geometry.partitioning.Region getRemainingRegion()>();

        $r11 = interfaceinvoke $r10.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.partitioning.Region$Location checkPoint(org.apache.commons.math3.geometry.Point)>($r6);

        $r12 = <org.apache.commons.math3.geometry.partitioning.Region$Location: org.apache.commons.math3.geometry.partitioning.Region$Location INSIDE>;

        if $r11 != $r12 goto label1;

        $r3 = virtualinvoke r8.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusOutside()>();

        return $r3;

     label1:
        $r3 = virtualinvoke r8.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusInside()>();

        if $r3 == null goto label2;

        $r3 = virtualinvoke r8.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusInside()>();

        $r9 = (org.apache.commons.math3.geometry.euclidean.threed.SubPlane) $r3;

        $r10 = virtualinvoke $r9.<org.apache.commons.math3.geometry.euclidean.threed.SubPlane: org.apache.commons.math3.geometry.partitioning.Region getRemainingRegion()>();

        $r11 = interfaceinvoke $r10.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.partitioning.Region$Location checkPoint(org.apache.commons.math3.geometry.Point)>($r6);

        $r12 = <org.apache.commons.math3.geometry.partitioning.Region$Location: org.apache.commons.math3.geometry.partitioning.Region$Location INSIDE>;

        if $r11 != $r12 goto label2;

        $r3 = virtualinvoke r8.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusInside()>();

        return $r3;

     label2:
        return null;
    }
    private static java.util.List buildBoundary(java.util.List, java.util.List, double)
    {
        java.util.List r0, r1;
        double $d0, $d1;
        org.apache.commons.math3.geometry.euclidean.threed.Plane r2;
        int[] r3, r4;
        java.util.ArrayList r5;
        int i0, i1, $i2, i4, $i5, i6, i7;
        java.lang.Object $r6;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r7, $r8, $r15;
        byte $b3;
        org.apache.commons.math3.exception.MathIllegalArgumentException $r9;
        org.apache.commons.math3.exception.util.LocalizedFormats $r10;
        java.lang.Object[] $r11;
        java.lang.Double $r12;
        int[][] $r13;
        boolean z0;
        java.util.Iterator $r14;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] $r16;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D $r17;
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane $r18;
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet $r19;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        $d0 := @parameter2: double;

        i1 = 0;

     label01:
        $i2 = interfaceinvoke r0.<java.util.List: int size()>();

        $i2 = $i2 + -1;

        if i1 >= $i2 goto label05;

        $r6 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i1);

        r7 = (org.apache.commons.math3.geometry.euclidean.threed.Vector3D) $r6;

        $i2 = i1 + 1;

     label02:
        i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i2 >= i0 goto label04;

        $r6 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>($i2);

        $r8 = (org.apache.commons.math3.geometry.euclidean.threed.Vector3D) $r6;

        $d1 = staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>(r7, $r8);

        $b3 = $d1 cmpg $d0;

        if $b3 > 0 goto label03;

        $r9 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r10 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats CLOSE_VERTICES>;

        $r11 = newarray (java.lang.Object)[3];

        $d0 = virtualinvoke r7.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $r12 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r11[0] = $r12;

        $d0 = virtualinvoke r7.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $r12 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r11[1] = $r12;

        $d0 = virtualinvoke r7.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $r12 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r11[2] = $r12;

        specialinvoke $r9.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r10, $r11);

        throw $r9;

     label03:
        $i2 = $i2 + 1;

        goto label02;

     label04:
        i1 = i1 + 1;

        goto label01;

     label05:
        $r13 = staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: int[][] findReferences(java.util.List,java.util.List)>(r0, r1);

        $r13 = staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: int[][] successors(java.util.List,java.util.List,int[][])>(r0, r1, $r13);

        i1 = 0;

     label06:
        $i2 = interfaceinvoke r0.<java.util.List: int size()>();

        if i1 >= $i2 goto label15;

        r3 = $r13[i1];

        $i2 = lengthof r3;

        i4 = 0;

     label07:
        if i4 >= $i2 goto label14;

        i0 = r3[i4];

        if i0 < 0 goto label13;

        z0 = 0;

        r4 = $r13[i0];

        $i5 = lengthof r4;

        i6 = 0;

     label08:
        if i6 >= $i5 goto label12;

        i7 = r4[i6];

        if z0 != 0 goto label09;

        if i7 != i1 goto label11;

     label09:
        z0 = 1;

     label10:
        i6 = i6 + 1;

        goto label08;

     label11:
        z0 = 0;

        goto label10;

     label12:
        if z0 != 0 goto label13;

        $r6 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i1);

        r7 = (org.apache.commons.math3.geometry.euclidean.threed.Vector3D) $r6;

        $r6 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i0);

        $r8 = (org.apache.commons.math3.geometry.euclidean.threed.Vector3D) $r6;

        $r9 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r10 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats EDGE_CONNECTED_TO_ONE_FACET>;

        $r11 = newarray (java.lang.Object)[6];

        $d0 = virtualinvoke r7.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $r12 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r11[0] = $r12;

        $d0 = virtualinvoke r7.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $r12 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r11[1] = $r12;

        $d0 = virtualinvoke r7.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $r12 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r11[2] = $r12;

        $d0 = virtualinvoke $r8.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $r12 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r11[3] = $r12;

        $d0 = virtualinvoke $r8.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $r12 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r11[4] = $r12;

        $d0 = virtualinvoke $r8.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $r12 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r11[5] = $r12;

        specialinvoke $r9.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r10, $r11);

        throw $r9;

     label13:
        i4 = i4 + 1;

        goto label07;

     label14:
        i1 = i1 + 1;

        goto label06;

     label15:
        r5 = new java.util.ArrayList;

        specialinvoke r5.<java.util.ArrayList: void <init>()>();

        $r14 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label16:
        z0 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

        if z0 == 0 goto label20;

        $r6 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        r3 = (int[]) $r6;

        r2 = new org.apache.commons.math3.geometry.euclidean.threed.Plane;

        i1 = r3[0];

        $r6 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i1);

        r7 = (org.apache.commons.math3.geometry.euclidean.threed.Vector3D) $r6;

        i1 = r3[1];

        $r6 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i1);

        $r8 = (org.apache.commons.math3.geometry.euclidean.threed.Vector3D) $r6;

        i1 = r3[2];

        $r6 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i1);

        $r15 = (org.apache.commons.math3.geometry.euclidean.threed.Vector3D) $r6;

        specialinvoke r2.<org.apache.commons.math3.geometry.euclidean.threed.Plane: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double)>(r7, $r8, $r15, $d0);

        i1 = lengthof r3;

        $r16 = newarray (org.apache.commons.math3.geometry.euclidean.twod.Vector2D)[i1];

        i1 = 0;

     label17:
        $i2 = lengthof r3;

        if i1 >= $i2 goto label19;

        $i2 = r3[i1];

        $r6 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>($i2);

        r7 = (org.apache.commons.math3.geometry.euclidean.threed.Vector3D) $r6;

        z0 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.threed.Plane: boolean contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>(r7);

        if z0 != 0 goto label18;

        $r9 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r10 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OUT_OF_PLANE>;

        $r11 = newarray (java.lang.Object)[3];

        $d0 = virtualinvoke r7.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $r12 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r11[0] = $r12;

        $d0 = virtualinvoke r7.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $r12 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r11[1] = $r12;

        $d0 = virtualinvoke r7.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $r12 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r11[2] = $r12;

        specialinvoke $r9.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r10, $r11);

        throw $r9;

     label18:
        $r17 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.twod.Vector2D toSubSpace(org.apache.commons.math3.geometry.Vector)>(r7);

        $r16[i1] = $r17;

        i1 = i1 + 1;

        goto label17;

     label19:
        $r18 = new org.apache.commons.math3.geometry.euclidean.threed.SubPlane;

        $r19 = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;

        specialinvoke $r19.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: void <init>(double,org.apache.commons.math3.geometry.euclidean.twod.Vector2D[])>($d0, $r16);

        specialinvoke $r18.<org.apache.commons.math3.geometry.euclidean.threed.SubPlane: void <init>(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)>(r2, $r19);

        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r18);

        goto label16;

     label20:
        return r5;
    }
    private static org.apache.commons.math3.geometry.partitioning.BSPTree buildBoundary(double, double, double, double, double, double, double)
    {
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0, r1, r2, r3, r4, r5;
        byte $b0;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r6;
        java.lang.Boolean $r7;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r8, $r9;
        org.apache.commons.math3.geometry.partitioning.RegionFactory $r10;
        org.apache.commons.math3.geometry.partitioning.Hyperplane[] $r11;
        org.apache.commons.math3.geometry.partitioning.Region $r12;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $d3 := @parameter3: double;

        $d4 := @parameter4: double;

        $d5 := @parameter5: double;

        $d6 := @parameter6: double;

        $d7 = $d1 - $d6;

        $b0 = $d0 cmpl $d7;

        if $b0 >= 0 goto label1;

        $d7 = $d3 - $d6;

        $b0 = $d2 cmpl $d7;

        if $b0 >= 0 goto label1;

        $d7 = $d5 - $d6;

        $b0 = $d4 cmpl $d7;

        if $b0 < 0 goto label2;

     label1:
        $r6 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r7 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        specialinvoke $r6.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r7);

        return $r6;

     label2:
        r1 = new org.apache.commons.math3.geometry.euclidean.threed.Plane;

        $r8 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        specialinvoke $r8.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,double,double)>($d0, 0.0, 0.0);

        $r9 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D MINUS_I>;

        specialinvoke r1.<org.apache.commons.math3.geometry.euclidean.threed.Plane: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double)>($r8, $r9, $d6);

        r0 = new org.apache.commons.math3.geometry.euclidean.threed.Plane;

        $r8 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        specialinvoke $r8.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,double,double)>($d1, 0.0, 0.0);

        $r9 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_I>;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double)>($r8, $r9, $d6);

        r3 = new org.apache.commons.math3.geometry.euclidean.threed.Plane;

        $r8 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        specialinvoke $r8.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,double,double)>(0.0, $d2, 0.0);

        $r9 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D MINUS_J>;

        specialinvoke r3.<org.apache.commons.math3.geometry.euclidean.threed.Plane: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double)>($r8, $r9, $d6);

        r2 = new org.apache.commons.math3.geometry.euclidean.threed.Plane;

        $r8 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        specialinvoke $r8.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,double,double)>(0.0, $d3, 0.0);

        $r9 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_J>;

        specialinvoke r2.<org.apache.commons.math3.geometry.euclidean.threed.Plane: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double)>($r8, $r9, $d6);

        r5 = new org.apache.commons.math3.geometry.euclidean.threed.Plane;

        $r8 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        specialinvoke $r8.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,double,double)>(0.0, 0.0, $d4);

        $r9 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D MINUS_K>;

        specialinvoke r5.<org.apache.commons.math3.geometry.euclidean.threed.Plane: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double)>($r8, $r9, $d6);

        r4 = new org.apache.commons.math3.geometry.euclidean.threed.Plane;

        $r8 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        specialinvoke $r8.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,double,double)>(0.0, 0.0, $d5);

        $r9 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_K>;

        specialinvoke r4.<org.apache.commons.math3.geometry.euclidean.threed.Plane: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double)>($r8, $r9, $d6);

        $r10 = new org.apache.commons.math3.geometry.partitioning.RegionFactory;

        specialinvoke $r10.<org.apache.commons.math3.geometry.partitioning.RegionFactory: void <init>()>();

        $r11 = newarray (org.apache.commons.math3.geometry.partitioning.Hyperplane)[6];

        $r11[0] = r1;

        $r11[1] = r0;

        $r11[2] = r3;

        $r11[3] = r2;

        $r11[4] = r5;

        $r11[5] = r4;

        $r12 = virtualinvoke $r10.<org.apache.commons.math3.geometry.partitioning.RegionFactory: org.apache.commons.math3.geometry.partitioning.Region buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])>($r11);

        $r6 = interfaceinvoke $r12.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(0);

        return $r6;
    }
    private static int[][] findReferences(java.util.List, java.util.List)
    {
        java.util.List r0, r1;
        int i0, i1, $i2, $i3, $i4, i5, $i6;
        int[] r2, r5;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r6;
        org.apache.commons.math3.exception.util.LocalizedFormats $r7;
        java.lang.Integer $r8, $r9;
        java.lang.Class $r10;
        int[][] r11;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        $i2 = interfaceinvoke r0.<java.util.List: int size()>();

        r2 = newarray (int)[$i2];

        $i2 = 0;

        $r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label04;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (int[]) $r4;

        $i3 = lengthof r5;

        if $i3 >= 3 goto label02;

        $r6 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r7 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats WRONG_NUMBER_OF_POINTS>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $i2 = lengthof r5;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        specialinvoke $r6.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r7, $r8, $r9, 1);

        throw $r6;

     label02:
        $i3 = lengthof r5;

        i1 = 0;

     label03:
        if i1 >= $i3 goto label01;

        i0 = r5[i1];

        $i4 = r2[i0];

        $i4 = $i4 + 1;

        r2[i0] = $i4;

        $i2 = staticinvoke <org.apache.commons.math3.util.FastMath: int max(int,int)>($i2, $i4);

        i1 = i1 + 1;

        goto label03;

     label04:
        $i3 = interfaceinvoke r0.<java.util.List: int size()>();

        r2 = newarray (int)[2];

        r2[0] = $i3;

        r2[1] = $i2;

        $r10 = <java.lang.Integer: java.lang.Class TYPE>;

        $r4 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r10, r2);

        r11 = (int[][]) $r4;

        $i3 = lengthof r11;

        i1 = 0;

     label05:
        if i1 >= $i3 goto label06;

        r2 = r11[i1];

        staticinvoke <java.util.Arrays: void fill(int[],int)>(r2, -1);

        i1 = i1 + 1;

        goto label05;

     label06:
        $i3 = 0;

     label07:
        i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i3 >= i1 goto label12;

        $r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>($i3);

        r2 = (int[]) $r4;

        i0 = lengthof r2;

        $i4 = 0;

     label08:
        if $i4 >= i0 goto label11;

        i1 = r2[$i4];

        i5 = 0;

     label09:
        if i5 >= $i2 goto label10;

        r5 = r11[i1];

        $i6 = r5[i5];

        if $i6 < 0 goto label10;

        i5 = i5 + 1;

        goto label09;

     label10:
        r5 = r11[i1];

        r5[i5] = $i3;

        $i4 = $i4 + 1;

        goto label08;

     label11:
        $i3 = $i3 + 1;

        goto label07;

     label12:
        return r11;
    }
    private org.apache.commons.math3.geometry.partitioning.SubHyperplane recurseFirstIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Line)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, $r5, $r6, r9;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r2, $r10;
        org.apache.commons.math3.geometry.euclidean.threed.Line $r3;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r4;
        org.apache.commons.math3.geometry.partitioning.Hyperplane $r7;
        org.apache.commons.math3.geometry.euclidean.threed.Plane r8;
        double $d0, $d1, $d2;
        byte $b0;
        boolean z0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 := @parameter1: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $r3 := @parameter2: org.apache.commons.math3.geometry.euclidean.threed.Line;

        $r4 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r4 != null goto label1;

        return null;

     label1:
        $r5 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        $r6 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        $r7 = interfaceinvoke $r4.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        r8 = (org.apache.commons.math3.geometry.euclidean.threed.Plane) $r7;

        $d0 = virtualinvoke r8.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double getOffset(org.apache.commons.math3.geometry.Point)>($r2);

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        $d2 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: double getTolerance()>();

        $b0 = $d1 cmpg $d2;

        if $b0 >= 0 goto label5;

        z0 = 1;

     label2:
        $b0 = $d0 cmpg 0.0;

        if $b0 >= 0 goto label6;

        r9 = $r5;

        $r5 = $r6;

     label3:
        if z0 == 0 goto label4;

        $r4 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: org.apache.commons.math3.geometry.partitioning.SubHyperplane boundaryFacet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.partitioning.BSPTree)>($r2, r1);

        if $r4 != null goto label9;

     label4:
        $r4 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: org.apache.commons.math3.geometry.partitioning.SubHyperplane recurseFirstIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)>(r9, $r2, $r3);

        if $r4 == null goto label7;

        return $r4;

     label5:
        z0 = 0;

        goto label2;

     label6:
        r9 = $r6;

        goto label3;

     label7:
        if z0 != 0 goto label8;

        $r10 = virtualinvoke r8.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)>($r3);

        if $r10 == null goto label8;

        $d0 = virtualinvoke $r3.<org.apache.commons.math3.geometry.euclidean.threed.Line: double getAbscissa(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r10);

        $d1 = virtualinvoke $r3.<org.apache.commons.math3.geometry.euclidean.threed.Line: double getAbscissa(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r2);

        $b0 = $d0 cmpl $d1;

        if $b0 <= 0 goto label8;

        $r4 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: org.apache.commons.math3.geometry.partitioning.SubHyperplane boundaryFacet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.partitioning.BSPTree)>($r10, r1);

        if $r4 != null goto label9;

     label8:
        $r4 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: org.apache.commons.math3.geometry.partitioning.SubHyperplane recurseFirstIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)>($r5, $r2, $r3);

     label9:
        return $r4;
    }
    private static int[][] successors(java.util.List, java.util.List, int[][])
    {
        java.util.List r0, r1;
        int[][] $r2, r6;
        int i0, $i1, $i2, $i3, $i4;
        int[] r3, $r7;
        java.lang.Class $r4;
        java.lang.Object $r5;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r8, r9;
        org.apache.commons.math3.exception.MathIllegalArgumentException $r10;
        org.apache.commons.math3.exception.util.LocalizedFormats $r11;
        java.lang.Object[] $r12;
        double $d0;
        java.lang.Double $r13;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        $r2 := @parameter2: int[][];

        i0 = interfaceinvoke r0.<java.util.List: int size()>();

        r3 = $r2[0];

        $i1 = lengthof r3;

        r3 = newarray (int)[2];

        r3[0] = i0;

        r3[1] = $i1;

        $r4 = <java.lang.Integer: java.lang.Class TYPE>;

        $r5 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r4, r3);

        r6 = (int[][]) $r5;

        i0 = lengthof r6;

        $i1 = 0;

     label01:
        if $i1 >= i0 goto label02;

        r3 = r6[$i1];

        staticinvoke <java.util.Arrays: void fill(int[],int)>(r3, -1);

        $i1 = $i1 + 1;

        goto label01;

     label02:
        i0 = 0;

     label03:
        $i1 = interfaceinvoke r0.<java.util.List: int size()>();

        if i0 >= $i1 goto label11;

        $i1 = 0;

     label04:
        r3 = r6[i0];

        $i2 = lengthof r3;

        if $i1 >= $i2 goto label10;

        r3 = $r2[i0];

        $i2 = r3[$i1];

        if $i2 < 0 goto label10;

        r3 = $r2[i0];

        $i2 = r3[$i1];

        $r5 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>($i2);

        r3 = (int[]) $r5;

        $i2 = 0;

     label05:
        $i3 = lengthof r3;

        if $i2 >= $i3 goto label06;

        $i3 = r3[$i2];

        if $i3 == i0 goto label06;

        $i2 = $i2 + 1;

        goto label05;

     label06:
        $r7 = r6[i0];

        $i2 = $i2 + 1;

        $i3 = lengthof r3;

        $i2 = $i2 % $i3;

        $i2 = r3[$i2];

        $r7[$i1] = $i2;

        $i2 = 0;

     label07:
        if $i2 >= $i1 goto label09;

        r3 = r6[i0];

        $i3 = r3[$i2];

        r3 = r6[i0];

        $i4 = r3[$i1];

        if $i3 != $i4 goto label08;

        $r5 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i0);

        r8 = (org.apache.commons.math3.geometry.euclidean.threed.Vector3D) $r5;

        r3 = r6[i0];

        i0 = r3[$i1];

        $r5 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i0);

        r9 = (org.apache.commons.math3.geometry.euclidean.threed.Vector3D) $r5;

        $r10 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r11 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats FACET_ORIENTATION_MISMATCH>;

        $r12 = newarray (java.lang.Object)[6];

        $d0 = virtualinvoke r8.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $r13 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r12[0] = $r13;

        $d0 = virtualinvoke r8.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $r13 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r12[1] = $r13;

        $d0 = virtualinvoke r8.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $r13 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r12[2] = $r13;

        $d0 = virtualinvoke r9.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $r13 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r12[3] = $r13;

        $d0 = virtualinvoke r9.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $r13 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r12[4] = $r13;

        $d0 = virtualinvoke r9.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $r13 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r12[5] = $r13;

        specialinvoke $r10.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r11, $r12);

        throw $r10;

     label08:
        $i2 = $i2 + 1;

        goto label07;

     label09:
        $i1 = $i1 + 1;

        goto label04;

     label10:
        i0 = i0 + 1;

        goto label03;

     label11:
        return r6;
    }
    public org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet r0, $r2;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: double getTolerance()>();

        specialinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree,double)>(r1, $d0);

        return $r2;
    }
    public volatile org.apache.commons.math3.geometry.partitioning.AbstractRegion buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet;

        $r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r1);

        return r0;
    }
    public volatile org.apache.commons.math3.geometry.partitioning.Region buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet;

        $r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r1);

        return r0;
    }
    protected void computeGeometricalProperties()
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r1;
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor $r2;
        double $d0;
        byte $b0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r3, $r5;
        org.apache.commons.math3.geometry.Point $r4;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(1);

        $r2 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor;

        specialinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor: void <init>(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet)>(r0);

        virtualinvoke $r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: void visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)>($r2);

        $d0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: double getSize()>();

        $b0 = $d0 cmpg 0.0;

        if $b0 >= 0 goto label1;

        virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: void setSize(double)>(#Infinity);

        $r3 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D NaN>;

        virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: void setBarycenter(org.apache.commons.math3.geometry.Point)>($r3);

        return;

     label1:
        $d0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: double getSize()>();

        $d0 = $d0 / 3.0;

        virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: void setSize(double)>($d0);

        $r3 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: double getSize()>();

        $d0 = 4.0 * $d0;

        $d0 = 1.0 / $d0;

        $r4 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: org.apache.commons.math3.geometry.Point getBarycenter()>();

        $r5 = (org.apache.commons.math3.geometry.euclidean.threed.Vector3D) $r4;

        specialinvoke $r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($d0, $r5);

        virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: void setBarycenter(org.apache.commons.math3.geometry.Point)>($r3);

        return;
    }
    public org.apache.commons.math3.geometry.partitioning.SubHyperplane firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Line)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r1;
        org.apache.commons.math3.geometry.euclidean.threed.Line $r2;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r3;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r4;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $r2 := @parameter1: org.apache.commons.math3.geometry.euclidean.threed.Line;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(1);

        $r4 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: org.apache.commons.math3.geometry.partitioning.SubHyperplane recurseFirstIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)>($r3, $r1, $r2);

        return $r4;
    }
    public org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Rotation)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r1;
        org.apache.commons.math3.geometry.euclidean.threed.Rotation $r2;
        org.apache.commons.math3.geometry.partitioning.AbstractRegion $r3;
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform $r4;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $r2 := @parameter1: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        $r4 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform;

        specialinvoke $r4.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)>($r1, $r2);

        $r3 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: org.apache.commons.math3.geometry.partitioning.AbstractRegion applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)>($r4);

        r0 = (org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet) $r3;

        return r0;
    }
    public org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r1;
        org.apache.commons.math3.geometry.partitioning.AbstractRegion $r2;
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$TranslationTransform $r3;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $r3 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$TranslationTransform;

        specialinvoke $r3.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$TranslationTransform: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r1);

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: org.apache.commons.math3.geometry.partitioning.AbstractRegion applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)>($r3);

        r0 = (org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet) $r2;

        return r0;
    }
