org.apache.commons.math3.geometry.euclidean.twod.SubLine extends org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane
private static final double DEFAULT_TOLERANCE
    public void <init>(org.apache.commons.math3.geometry.euclidean.twod.Segment)
    {
        org.apache.commons.math3.geometry.euclidean.twod.SubLine r0;
        org.apache.commons.math3.geometry.euclidean.twod.Segment $r1;
        org.apache.commons.math3.geometry.euclidean.twod.Line $r2, $r5;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D $r3, $r4;
        double $d0;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet $r6;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.SubLine;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.twod.Segment;

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.twod.Segment: org.apache.commons.math3.geometry.euclidean.twod.Line getLine()>();

        $r3 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.twod.Segment: org.apache.commons.math3.geometry.euclidean.twod.Vector2D getStart()>();

        $r4 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.twod.Segment: org.apache.commons.math3.geometry.euclidean.twod.Vector2D getEnd()>();

        $r5 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.twod.Segment: org.apache.commons.math3.geometry.euclidean.twod.Line getLine()>();

        $d0 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.twod.Line: double getTolerance()>();

        $r6 = staticinvoke <org.apache.commons.math3.geometry.euclidean.twod.SubLine: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet buildIntervalSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)>($r3, $r4, $d0);

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: void <init>(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)>($r2, $r6);

        return;
    }
    public void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D)
    {
        org.apache.commons.math3.geometry.euclidean.twod.SubLine r0;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D $r1, $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.SubLine;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        $r2 := @parameter1: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.SubLine: void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)>($r1, $r2, 1.0E-10);

        return;
    }
    public void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D, double)
    {
        org.apache.commons.math3.geometry.euclidean.twod.SubLine r0;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D $r1, $r2;
        double $d0;
        org.apache.commons.math3.geometry.euclidean.twod.Line $r3;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet $r4;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.SubLine;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        $r2 := @parameter1: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        $d0 := @parameter2: double;

        $r3 = new org.apache.commons.math3.geometry.euclidean.twod.Line;

        specialinvoke $r3.<org.apache.commons.math3.geometry.euclidean.twod.Line: void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)>($r1, $r2, $d0);

        $r4 = staticinvoke <org.apache.commons.math3.geometry.euclidean.twod.SubLine: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet buildIntervalSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)>($r1, $r2, $d0);

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: void <init>(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)>($r3, $r4);

        return;
    }
    public void <init>(org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.Region)
    {
        org.apache.commons.math3.geometry.euclidean.twod.SubLine r0;
        org.apache.commons.math3.geometry.partitioning.Hyperplane r1;
        org.apache.commons.math3.geometry.partitioning.Region r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.SubLine;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.Hyperplane;

        r2 := @parameter1: org.apache.commons.math3.geometry.partitioning.Region;

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: void <init>(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)>(r1, r2);

        return;
    }
    private static org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet buildIntervalSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D, double)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D $r0, $r1;
        double $d0, $d1, $d2;
        org.apache.commons.math3.geometry.euclidean.twod.Line r2;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet $r3;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D $r4;

        $r0 := @parameter0: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        $r1 := @parameter1: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        $d0 := @parameter2: double;

        r2 = new org.apache.commons.math3.geometry.euclidean.twod.Line;

        specialinvoke r2.<org.apache.commons.math3.geometry.euclidean.twod.Line: void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)>($r0, $r1, $d0);

        $r3 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        $r4 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.oned.Vector1D toSubSpace(org.apache.commons.math3.geometry.Point)>($r0);

        $d1 = virtualinvoke $r4.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double getX()>();

        $r4 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.oned.Vector1D toSubSpace(org.apache.commons.math3.geometry.Point)>($r1);

        $d2 = virtualinvoke $r4.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double getX()>();

        specialinvoke $r3.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: void <init>(double,double,double)>($d1, $d2, $d0);

        return $r3;
    }
    protected org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.Region)
    {
        org.apache.commons.math3.geometry.euclidean.twod.SubLine r0;
        org.apache.commons.math3.geometry.partitioning.Hyperplane r1;
        org.apache.commons.math3.geometry.partitioning.Region r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.SubLine;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.Hyperplane;

        r2 := @parameter1: org.apache.commons.math3.geometry.partitioning.Region;

        r0 = new org.apache.commons.math3.geometry.euclidean.twod.SubLine;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.SubLine: void <init>(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)>(r1, r2);

        return r0;
    }
    public java.util.List getSegments()
    {
        org.apache.commons.math3.geometry.euclidean.twod.SubLine r0;
        java.util.ArrayList r1;
        org.apache.commons.math3.geometry.partitioning.Hyperplane $r2;
        org.apache.commons.math3.geometry.euclidean.twod.Line r3;
        org.apache.commons.math3.geometry.partitioning.Region $r4;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet $r5;
        java.util.List $r6;
        int $i0;
        java.util.Iterator $r7;
        boolean $z0;
        java.lang.Object $r8;
        org.apache.commons.math3.geometry.euclidean.oned.Interval r9;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D $r10;
        double $d0;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D $r11, $r12;
        org.apache.commons.math3.geometry.euclidean.twod.Segment $r13;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.SubLine;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.SubLine: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        r3 = (org.apache.commons.math3.geometry.euclidean.twod.Line) $r2;

        $r4 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.SubLine: org.apache.commons.math3.geometry.partitioning.Region getRemainingRegion()>();

        $r5 = (org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet) $r4;

        $r6 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: java.util.List asList()>();

        r1 = new java.util.ArrayList;

        $i0 = interfaceinvoke $r6.<java.util.List: int size()>();

        specialinvoke r1.<java.util.ArrayList: void <init>(int)>($i0);

        $r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (org.apache.commons.math3.geometry.euclidean.oned.Interval) $r8;

        $r10 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        $d0 = virtualinvoke r9.<org.apache.commons.math3.geometry.euclidean.oned.Interval: double getInf()>();

        specialinvoke $r10.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: void <init>(double)>($d0);

        $r11 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.twod.Vector2D toSpace(org.apache.commons.math3.geometry.Point)>($r10);

        $r10 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        $d0 = virtualinvoke r9.<org.apache.commons.math3.geometry.euclidean.oned.Interval: double getSup()>();

        specialinvoke $r10.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: void <init>(double)>($d0);

        $r12 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.twod.Vector2D toSpace(org.apache.commons.math3.geometry.Point)>($r10);

        $r13 = new org.apache.commons.math3.geometry.euclidean.twod.Segment;

        specialinvoke $r13.<org.apache.commons.math3.geometry.euclidean.twod.Segment: void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Line)>($r11, $r12, r3);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r13);

        goto label1;

     label2:
        return r1;
    }
    public org.apache.commons.math3.geometry.euclidean.twod.Vector2D intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine, boolean)
    {
        org.apache.commons.math3.geometry.euclidean.twod.SubLine r0, $r1;
        boolean $z0;
        org.apache.commons.math3.geometry.partitioning.Hyperplane $r2;
        org.apache.commons.math3.geometry.euclidean.twod.Line r3, r4;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D $r5;
        org.apache.commons.math3.geometry.partitioning.Region $r6;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D $r7;
        org.apache.commons.math3.geometry.partitioning.Region$Location $r8, $r9, $r10;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.SubLine;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.twod.SubLine;

        $z0 := @parameter1: boolean;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.SubLine: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        r3 = (org.apache.commons.math3.geometry.euclidean.twod.Line) $r2;

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.twod.SubLine: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        r4 = (org.apache.commons.math3.geometry.euclidean.twod.Line) $r2;

        $r5 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.twod.Vector2D intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)>(r4);

        if $r5 != null goto label1;

        return null;

     label1:
        $r6 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.SubLine: org.apache.commons.math3.geometry.partitioning.Region getRemainingRegion()>();

        $r7 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.oned.Vector1D toSubSpace(org.apache.commons.math3.geometry.Point)>($r5);

        $r8 = interfaceinvoke $r6.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.partitioning.Region$Location checkPoint(org.apache.commons.math3.geometry.Point)>($r7);

        $r6 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.twod.SubLine: org.apache.commons.math3.geometry.partitioning.Region getRemainingRegion()>();

        $r7 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.oned.Vector1D toSubSpace(org.apache.commons.math3.geometry.Point)>($r5);

        $r9 = interfaceinvoke $r6.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.partitioning.Region$Location checkPoint(org.apache.commons.math3.geometry.Point)>($r7);

        if $z0 == 0 goto label3;

        $r10 = <org.apache.commons.math3.geometry.partitioning.Region$Location: org.apache.commons.math3.geometry.partitioning.Region$Location OUTSIDE>;

        if $r8 == $r10 goto label2;

        $r8 = <org.apache.commons.math3.geometry.partitioning.Region$Location: org.apache.commons.math3.geometry.partitioning.Region$Location OUTSIDE>;

        if $r9 != $r8 goto label5;

     label2:
        return null;

     label3:
        $r10 = <org.apache.commons.math3.geometry.partitioning.Region$Location: org.apache.commons.math3.geometry.partitioning.Region$Location INSIDE>;

        if $r8 != $r10 goto label4;

        $r8 = <org.apache.commons.math3.geometry.partitioning.Region$Location: org.apache.commons.math3.geometry.partitioning.Region$Location INSIDE>;

        if $r9 == $r8 goto label5;

     label4:
        return null;

     label5:
        return $r5;
    }
    public org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane split(org.apache.commons.math3.geometry.partitioning.Hyperplane)
    {
        org.apache.commons.math3.geometry.euclidean.twod.SubLine r0, $r17;
        org.apache.commons.math3.geometry.partitioning.Hyperplane r1, $r3;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet $r2;
        org.apache.commons.math3.geometry.euclidean.twod.Line r4, r5;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D $r6;
        double $d0, $d1, $d2;
        byte $b0;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane $r7;
        boolean z0, $z1;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D $r8;
        org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint $r9;
        org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint $r10, $r11;
        org.apache.commons.math3.geometry.partitioning.Region $r12;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r13, $r14, $r16, $r18;
        java.lang.Boolean $r15;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.SubLine;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.Hyperplane;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.SubLine: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        r4 = (org.apache.commons.math3.geometry.euclidean.twod.Line) $r3;

        r5 = (org.apache.commons.math3.geometry.euclidean.twod.Line) r1;

        $r6 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.twod.Vector2D intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)>(r5);

        $d0 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.twod.Line: double getTolerance()>();

        if $r6 != null goto label03;

        $d1 = virtualinvoke r5.<org.apache.commons.math3.geometry.euclidean.twod.Line: double getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)>(r4);

        $d2 = neg $d0;

        $b0 = $d1 cmpg $d2;

        if $b0 >= 0 goto label01;

        $r7 = new org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane;

        specialinvoke $r7.<org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane: void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)>(null, r0);

        return $r7;

     label01:
        $b0 = $d1 cmpl $d0;

        if $b0 <= 0 goto label02;

        $r7 = new org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane;

        specialinvoke $r7.<org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane: void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)>(r0, null);

        return $r7;

     label02:
        $r7 = new org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane;

        specialinvoke $r7.<org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane: void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)>(null, null);

        return $r7;

     label03:
        $d1 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.twod.Line: double getAngle()>();

        $d2 = virtualinvoke r5.<org.apache.commons.math3.geometry.euclidean.twod.Line: double getAngle()>();

        $d1 = $d1 - $d2;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sin(double)>($d1);

        $b0 = $d1 cmpg 0.0;

        if $b0 >= 0 goto label08;

        z0 = 1;

     label04:
        $r8 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.oned.Vector1D toSubSpace(org.apache.commons.math3.geometry.Point)>($r6);

        $r9 = new org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint;

        if z0 != 0 goto label09;

        $z1 = 1;

     label05:
        specialinvoke $r9.<org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint: void <init>(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,boolean,double)>($r8, $z1, $d0);

        $r10 = virtualinvoke $r9.<org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint: org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint wholeHyperplane()>();

        $r9 = new org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint;

        specialinvoke $r9.<org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint: void <init>(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,boolean,double)>($r8, z0, $d0);

        $r11 = virtualinvoke $r9.<org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint: org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint wholeHyperplane()>();

        $r12 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.SubLine: org.apache.commons.math3.geometry.partitioning.Region getRemainingRegion()>();

        $r13 = interfaceinvoke $r12.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(0);

        $r13 = virtualinvoke $r13.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)>($r11);

        $r12 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.SubLine: org.apache.commons.math3.geometry.partitioning.Region getRemainingRegion()>();

        $r14 = virtualinvoke $r13.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        z0 = interfaceinvoke $r12.<org.apache.commons.math3.geometry.partitioning.Region: boolean isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r14);

        if z0 == 0 goto label10;

        $r14 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r15 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        specialinvoke $r14.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r15);

     label06:
        $r12 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.SubLine: org.apache.commons.math3.geometry.partitioning.Region getRemainingRegion()>();

        $r16 = virtualinvoke $r13.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        z0 = interfaceinvoke $r12.<org.apache.commons.math3.geometry.partitioning.Region: boolean isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r16);

        if z0 == 0 goto label11;

        $r16 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r15 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        specialinvoke $r16.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r15);

     label07:
        $r7 = new org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane;

        r0 = new org.apache.commons.math3.geometry.euclidean.twod.SubLine;

        r5 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.twod.Line copySelf()>();

        $r2 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        specialinvoke $r2.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree,double)>($r14, $d0);

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.SubLine: void <init>(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)>(r5, $r2);

        $r17 = new org.apache.commons.math3.geometry.euclidean.twod.SubLine;

        r4 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.twod.Line copySelf()>();

        $r2 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        specialinvoke $r2.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree,double)>($r16, $d0);

        specialinvoke $r17.<org.apache.commons.math3.geometry.euclidean.twod.SubLine: void <init>(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)>(r4, $r2);

        specialinvoke $r7.<org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane: void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)>(r0, $r17);

        return $r7;

     label08:
        z0 = 0;

        goto label04;

     label09:
        $z1 = 0;

        goto label05;

     label10:
        $r14 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r16 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r15 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        specialinvoke $r16.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r15);

        $r18 = virtualinvoke $r13.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        specialinvoke $r14.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)>($r10, $r16, $r18, null);

        goto label06;

     label11:
        $r16 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r18 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r15 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        specialinvoke $r18.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r15);

        $r13 = virtualinvoke $r13.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        specialinvoke $r16.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)>($r11, $r18, $r13, null);

        goto label07;
    }
