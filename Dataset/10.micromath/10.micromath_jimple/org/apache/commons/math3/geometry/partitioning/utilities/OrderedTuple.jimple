org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple extends java.lang.Object implements java.lang.Comparable
private static final long EXPONENT_MASK
private static final long IMPLICIT_ONE
private static final long MANTISSA_MASK
private static final long SIGN_MASK
private double[] components
private long[] encoding
private int lsb
private boolean nan
private boolean negInf
private int offset
private boolean posInf
    public transient void <init>(double[])
    {
        org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple r0;
        double[] $r1, $r3;
        java.lang.Object $r2;
        int i0, i1, $i2, $i6, $i7;
        double $d0;
        boolean $z0;
        byte $b3;
        long $l4, $l5;
        long[] $r4;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple;

        $r1 := @parameter0: double[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (double[]) $r2;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: double[] components> = $r3;

        i0 = -2147483648;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: int lsb> = 2147483647;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: boolean posInf> = 0;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: boolean negInf> = 0;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: boolean nan> = 0;

        i1 = 0;

     label1:
        $i2 = lengthof $r1;

        if i1 >= $i2 goto label6;

        $d0 = $r1[i1];

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d0);

        if $z0 == 0 goto label4;

        $d0 = $r1[i1];

        $b3 = $d0 cmpg 0.0;

        if $b3 >= 0 goto label3;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: boolean negInf> = 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: boolean posInf> = 1;

        goto label2;

     label4:
        $d0 = $r1[i1];

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 == 0 goto label5;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: boolean nan> = 1;

        goto label2;

     label5:
        $d0 = $r1[i1];

        $l4 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $l5 = staticinvoke <org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: long mantissa(long)>($l4);

        $b3 = $l5 cmp 0L;

        if $b3 == 0 goto label2;

        $i2 = staticinvoke <org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: int exponent(long)>($l4);

        $i6 = staticinvoke <org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: int computeMSB(long)>($l5);

        $i6 = $i6 + $i2;

        i0 = staticinvoke <org.apache.commons.math3.util.FastMath: int max(int,int)>(i0, $i6);

        $i6 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: int lsb>;

        $i7 = staticinvoke <org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: int computeLSB(long)>($l5);

        $i2 = $i7 + $i2;

        $i2 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i6, $i2);

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: int lsb> = $i2;

        goto label2;

     label6:
        $z0 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: boolean posInf>;

        if $z0 == 0 goto label7;

        $z0 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: boolean negInf>;

        if $z0 == 0 goto label7;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: boolean posInf> = 0;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: boolean negInf> = 0;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: boolean nan> = 1;

     label7:
        i1 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: int lsb>;

        if i1 > i0 goto label8;

        i0 = i0 + 16;

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: void encode(int)>(i0);

        return;

     label8:
        $r4 = newarray (long)[1];

        $r4[0] = 0L;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: long[] encoding> = $r4;

        return;
    }
    private static int computeLSB(long)
    {
        long $l0, l1, $l4;
        int i2, i3;
        byte $b5;

        $l0 := @parameter0: long;

        l1 = -4294967296L;

        i2 = 32;

        i3 = 0;

     label1:
        if i2 == 0 goto label3;

        $l4 = $l0 & l1;

        $b5 = $l4 cmp $l0;

        if $b5 != 0 goto label2;

        i3 = i3 | i2;

        $l0 = $l0 >> i2;

     label2:
        i2 = i2 >> 1;

        l1 = l1 >> i2;

        goto label1;

     label3:
        return i3;
    }
    private static int computeMSB(long)
    {
        long $l0, l1, $l4;
        int i2, i3;
        byte $b5;

        $l0 := @parameter0: long;

        l1 = 4294967295L;

        i2 = 32;

        i3 = 0;

     label1:
        if i2 == 0 goto label3;

        $l4 = $l0 & l1;

        $b5 = $l4 cmp $l0;

        if $b5 == 0 goto label2;

        i3 = i3 | i2;

        $l0 = $l0 >> i2;

     label2:
        i2 = i2 >> 1;

        l1 = l1 >> i2;

        goto label1;

     label3:
        return i3;
    }
    private void encode(int)
    {
        org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple r0;
        int $i0, i1, $i2, i5, $i6;
        long[] $r1;
        long $l3, $l7;
        byte $b4;
        double[] $r2;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple;

        $i0 := @parameter0: int;

        $i0 = $i0 + 31;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: int offset> = $i0;

        $i0 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: int offset>;

        $i2 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: int offset>;

        $i2 = $i2 % 32;

        $i0 = $i0 - $i2;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: int offset> = $i0;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: long[] encoding>;

        if $r1 == null goto label1;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: long[] encoding>;

        $i0 = lengthof $r1;

        if $i0 != 1 goto label1;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: long[] encoding>;

        $l3 = $r1[0];

        $b4 = $l3 cmp 0L;

        if $b4 != 0 goto label1;

        return;

     label1:
        $i0 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: int offset>;

        $i0 = $i0 + 1;

        $i2 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: int lsb>;

        $i0 = $i0 - $i2;

        $i0 = $i0 + 62;

        $i0 = $i0 / 63;

        $r2 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: double[] components>;

        $i2 = lengthof $r2;

        $i0 = $i2 * $i0;

        $r1 = newarray (long)[$i0];

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: long[] encoding> = $r1;

        $i0 = 0;

        $i2 = 62;

        $l3 = 0L;

        i5 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: int offset>;

     label2:
        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: long[] encoding>;

        $i6 = lengthof $r1;

        if $i0 >= $i6 goto label8;

        $i6 = 0;

     label3:
        $r2 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: double[] components>;

        i1 = lengthof $r2;

        if $i6 >= i1 goto label6;

        i1 = specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: int getBit(int,int)>($i6, i5);

        if i1 == 0 goto label4;

        $l7 = 1L << $i2;

        $l3 = $l3 | $l7;

     label4:
        if $i2 != 0 goto label7;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: long[] encoding>;

        $r1[$i0] = $l3;

        $l3 = 0L;

        $i2 = 62;

        $i0 = $i0 + 1;

     label5:
        $i6 = $i6 + 1;

        goto label3;

     label6:
        i5 = i5 + -1;

        goto label2;

     label7:
        $i2 = $i2 + -1;

        goto label5;

     label8:
        return;
    }
    private static int exponent(long)
    {
        long $l0;
        int $i1;

        $l0 := @parameter0: long;

        $l0 = 9218868437227405312L & $l0;

        $l0 = $l0 >> 52;

        $i1 = (int) $l0;

        $i1 = $i1 + -1075;

        return $i1;
    }
    private int getBit(int, int)
    {
        org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple r0;
        int $i0, $i1, $i4;
        byte $b2, $b5;
        double[] $r1;
        double $d0;
        long $l3, $l6;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $b2 = 1;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: double[] components>;

        $d0 = $r1[$i0];

        $l3 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $i0 = staticinvoke <org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: int exponent(long)>($l3);

        if $i1 < $i0 goto label8;

        $i4 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: int offset>;

        if $i1 <= $i4 goto label1;

        return 0;

     label1:
        $i4 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: int offset>;

        if $i1 != $i4 goto label4;

        $l3 = staticinvoke <org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: long sign(long)>($l3);

        $b5 = $l3 cmp 0L;

        if $b5 != 0 goto label3;

     label2:
        return $b2;

     label3:
        $b2 = 0;

        goto label2;

     label4:
        $i4 = $i0 + 52;

        if $i1 <= $i4 goto label5;

        $l3 = staticinvoke <org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: long sign(long)>($l3);

        $b2 = $l3 cmp 0L;

        if $b2 == 0 goto label8;

        return 1;

     label5:
        $l6 = staticinvoke <org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: long sign(long)>($l3);

        $b2 = $l6 cmp 0L;

        if $b2 != 0 goto label7;

        $l3 = staticinvoke <org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: long mantissa(long)>($l3);

     label6:
        $i0 = $i1 - $i0;

        $l3 = $l3 >> $i0;

        $l3 = $l3 & 1L;

        $i0 = (int) $l3;

        return $i0;

     label7:
        $l3 = staticinvoke <org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: long mantissa(long)>($l3);

        $l3 = neg $l3;

        goto label6;

     label8:
        return 0;
    }
    private static long mantissa(long)
    {
        long $l0, $l1;
        byte $b2;

        $l0 := @parameter0: long;

        $l1 = 9218868437227405312L & $l0;

        $b2 = $l1 cmp 0L;

        if $b2 != 0 goto label1;

        $l0 = $l0 & 4503599627370495L;

        $l0 = $l0 << 1;

        return $l0;

     label1:
        $l0 = $l0 & 4503599627370495L;

        $l0 = 4503599627370496L | $l0;

        return $l0;
    }
    private static long sign(long)
    {
        long $l0;

        $l0 := @parameter0: long;

        $l0 = -9223372036854775808L & $l0;

        return $l0;
    }
    public volatile int compareTo(java.lang.Object)
    {
        org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple r0, $r2;
        int $i0;
        java.lang.Object $r1;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple) $r1;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: int compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)>($r2);

        return $i0;
    }
    public int compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)
    {
        org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple r0, $r1;
        int $i0, $i1;
        double[] $r2;
        boolean $z0;
        long[] $r3;
        long $l2, $l3;
        byte $b4;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple;

        $r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple;

        $r2 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: double[] components>;

        $i0 = lengthof $r2;

        $r2 = $r1.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: double[] components>;

        $i1 = lengthof $r2;

        if $i0 != $i1 goto label11;

        $z0 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: boolean nan>;

        if $z0 == 0 goto label01;

        return 1;

     label01:
        $z0 = $r1.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: boolean nan>;

        if $z0 == 0 goto label02;

        return -1;

     label02:
        $z0 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: boolean negInf>;

        if $z0 != 0 goto label03;

        $z0 = $r1.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: boolean posInf>;

        if $z0 == 0 goto label04;

     label03:
        return -1;

     label04:
        $z0 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: boolean posInf>;

        if $z0 != 0 goto label12;

        $z0 = $r1.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: boolean negInf>;

        if $z0 != 0 goto label12;

        $i0 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: int offset>;

        $i1 = $r1.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: int offset>;

        if $i0 >= $i1 goto label07;

        $i0 = $r1.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: int offset>;

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: void encode(int)>($i0);

     label05:
        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: long[] encoding>;

        $i0 = lengthof $r3;

        $r3 = $r1.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: long[] encoding>;

        $i1 = lengthof $r3;

        $i0 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i0, $i1);

        $i1 = 0;

     label06:
        if $i1 >= $i0 goto label09;

        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: long[] encoding>;

        $l2 = $r3[$i1];

        $r3 = $r1.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: long[] encoding>;

        $l3 = $r3[$i1];

        $b4 = $l2 cmp $l3;

        if $b4 >= 0 goto label08;

        return -1;

     label07:
        $i0 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: int offset>;

        $i1 = $r1.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: int offset>;

        if $i0 <= $i1 goto label05;

        $i0 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: int offset>;

        specialinvoke $r1.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: void encode(int)>($i0);

        goto label05;

     label08:
        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: long[] encoding>;

        $l2 = $r3[$i1];

        $r3 = $r1.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: long[] encoding>;

        $l3 = $r3[$i1];

        $b4 = $l2 cmp $l3;

        if $b4 > 0 goto label12;

        $i1 = $i1 + 1;

        goto label06;

     label09:
        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: long[] encoding>;

        $i0 = lengthof $r3;

        $r3 = $r1.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: long[] encoding>;

        $i1 = lengthof $r3;

        if $i0 >= $i1 goto label10;

        return -1;

     label10:
        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: long[] encoding>;

        $i0 = lengthof $r3;

        $r3 = $r1.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: long[] encoding>;

        $i1 = lengthof $r3;

        if $i0 > $i1 goto label12;

        return 0;

     label11:
        $r2 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: double[] components>;

        $i0 = lengthof $r2;

        $r2 = $r1.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: double[] components>;

        $i1 = lengthof $r2;

        $i0 = $i0 - $i1;

        return $i0;

     label12:
        return 1;
    }
    public boolean equals(java.lang.Object)
    {
        org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple r0, r2;
        int $i0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple;

        if $z0 == 0 goto label2;

        r2 = (org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple) r1;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: int compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)>(r2);

        if $i0 == 0 goto label3;

     label2:
        return 0;

     label3:
        return 1;
    }
    public double[] getComponents()
    {
        org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple r0;
        java.lang.Object $r1;
        double[] $r2;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple;

        $r2 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: double[] components>;

        $r1 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (double[]) $r1;

        return $r2;
    }
    public int hashCode()
    {
        org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple r0;
        int $i0, $i2;
        byte $b1, $b3;
        double[] $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple;

        $b1 = 97;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: double[] components>;

        $i0 = staticinvoke <java.util.Arrays: int hashCode(double[])>($r1);

        $i0 = $i0 * 37;

        $i2 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: int offset>;

        $i0 = $i0 + $i2;

        $i0 = $i0 * 37;

        $i2 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: int lsb>;

        $i0 = $i0 + $i2;

        $i0 = $i0 * 37;

        $z0 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: boolean posInf>;

        if $z0 == 0 goto label4;

        $b3 = 97;

     label1:
        $i0 = $i0 + $b3;

        $i0 = $i0 * 37;

        $z0 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: boolean negInf>;

        if $z0 == 0 goto label5;

        $b3 = 97;

     label2:
        $i0 = $i0 + $b3;

        $i0 = $i0 * 37;

        $z0 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: boolean nan>;

        if $z0 == 0 goto label6;

     label3:
        $i0 = $i0 + $b1;

        return $i0;

     label4:
        $b3 = 71;

        goto label1;

     label5:
        $b3 = 71;

        goto label2;

     label6:
        $b1 = 71;

        goto label3;
    }
