org.apache.commons.math3.geometry.euclidean.oned.Vector1D extends java.lang.Object implements org.apache.commons.math3.geometry.Vector
public static final org.apache.commons.math3.geometry.euclidean.oned.Vector1D NEGATIVE_INFINITY
public static final org.apache.commons.math3.geometry.euclidean.oned.Vector1D NaN
public static final org.apache.commons.math3.geometry.euclidean.oned.Vector1D ONE
public static final org.apache.commons.math3.geometry.euclidean.oned.Vector1D POSITIVE_INFINITY
public static final org.apache.commons.math3.geometry.euclidean.oned.Vector1D ZERO
private static final long serialVersionUID
private final double x
    static void <clinit>()
    {
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D $r0;

        $r0 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        specialinvoke $r0.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: void <init>(double)>(0.0);

        <org.apache.commons.math3.geometry.euclidean.oned.Vector1D: org.apache.commons.math3.geometry.euclidean.oned.Vector1D ZERO> = $r0;

        $r0 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        specialinvoke $r0.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: void <init>(double)>(1.0);

        <org.apache.commons.math3.geometry.euclidean.oned.Vector1D: org.apache.commons.math3.geometry.euclidean.oned.Vector1D ONE> = $r0;

        $r0 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        specialinvoke $r0.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: void <init>(double)>(#NaN);

        <org.apache.commons.math3.geometry.euclidean.oned.Vector1D: org.apache.commons.math3.geometry.euclidean.oned.Vector1D NaN> = $r0;

        $r0 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        specialinvoke $r0.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: void <init>(double)>(#Infinity);

        <org.apache.commons.math3.geometry.euclidean.oned.Vector1D: org.apache.commons.math3.geometry.euclidean.oned.Vector1D POSITIVE_INFINITY> = $r0;

        $r0 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        specialinvoke $r0.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: void <init>(double)>(#-Infinity);

        <org.apache.commons.math3.geometry.euclidean.oned.Vector1D: org.apache.commons.math3.geometry.euclidean.oned.Vector1D NEGATIVE_INFINITY> = $r0;

        return;
    }
    public void <init>(double)
    {
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        $d0 := @parameter0: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double x> = $d0;

        return;
    }
    public void <init>(double, org.apache.commons.math3.geometry.euclidean.oned.Vector1D)
    {
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D r0, $r1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        $d0 := @parameter0: double;

        $r1 := @parameter1: org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $d1 = $r1.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double x>;

        $d0 = $d1 * $d0;

        r0.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double x> = $d0;

        return;
    }
    public void <init>(double, org.apache.commons.math3.geometry.euclidean.oned.Vector1D, double, org.apache.commons.math3.geometry.euclidean.oned.Vector1D)
    {
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D r0, $r1, $r2;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        $d0 := @parameter0: double;

        $r1 := @parameter1: org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        $d1 := @parameter2: double;

        $r2 := @parameter3: org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $d2 = $r1.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double x>;

        $d0 = $d2 * $d0;

        $d2 = $r2.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double x>;

        $d1 = $d2 * $d1;

        $d0 = $d0 + $d1;

        r0.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double x> = $d0;

        return;
    }
    public void <init>(double, org.apache.commons.math3.geometry.euclidean.oned.Vector1D, double, org.apache.commons.math3.geometry.euclidean.oned.Vector1D, double, org.apache.commons.math3.geometry.euclidean.oned.Vector1D)
    {
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D r0, $r1, $r2, $r3;
        double $d0, $d1, $d2, $d3;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        $d0 := @parameter0: double;

        $r1 := @parameter1: org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        $d1 := @parameter2: double;

        $r2 := @parameter3: org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        $d2 := @parameter4: double;

        $r3 := @parameter5: org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $d3 = $r1.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double x>;

        $d0 = $d3 * $d0;

        $d3 = $r2.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double x>;

        $d1 = $d3 * $d1;

        $d0 = $d0 + $d1;

        $d1 = $r3.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double x>;

        $d1 = $d1 * $d2;

        $d0 = $d0 + $d1;

        r0.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double x> = $d0;

        return;
    }
    public void <init>(double, org.apache.commons.math3.geometry.euclidean.oned.Vector1D, double, org.apache.commons.math3.geometry.euclidean.oned.Vector1D, double, org.apache.commons.math3.geometry.euclidean.oned.Vector1D, double, org.apache.commons.math3.geometry.euclidean.oned.Vector1D)
    {
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D r0, $r1, $r2, $r3, $r4;
        double $d0, $d1, $d2, $d3, $d4;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        $d0 := @parameter0: double;

        $r1 := @parameter1: org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        $d1 := @parameter2: double;

        $r2 := @parameter3: org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        $d2 := @parameter4: double;

        $r3 := @parameter5: org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        $d3 := @parameter6: double;

        $r4 := @parameter7: org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $d4 = $r1.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double x>;

        $d0 = $d4 * $d0;

        $d4 = $r2.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double x>;

        $d1 = $d4 * $d1;

        $d0 = $d0 + $d1;

        $d1 = $r3.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double x>;

        $d1 = $d1 * $d2;

        $d0 = $d0 + $d1;

        $d1 = $r4.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double x>;

        $d1 = $d1 * $d3;

        $d0 = $d0 + $d1;

        r0.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double x> = $d0;

        return;
    }
    public static double distance(org.apache.commons.math3.geometry.euclidean.oned.Vector1D, org.apache.commons.math3.geometry.euclidean.oned.Vector1D)
    {
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D $r0, $r1;
        double $d0;

        $r0 := @parameter0: org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        $r1 := @parameter1: org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        $d0 = virtualinvoke $r0.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double distance(org.apache.commons.math3.geometry.Vector)>($r1);

        return $d0;
    }
    public static double distanceInf(org.apache.commons.math3.geometry.euclidean.oned.Vector1D, org.apache.commons.math3.geometry.euclidean.oned.Vector1D)
    {
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D $r0, $r1;
        double $d0;

        $r0 := @parameter0: org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        $r1 := @parameter1: org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        $d0 = virtualinvoke $r0.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double distanceInf(org.apache.commons.math3.geometry.Vector)>($r1);

        return $d0;
    }
    public static double distanceSq(org.apache.commons.math3.geometry.euclidean.oned.Vector1D, org.apache.commons.math3.geometry.euclidean.oned.Vector1D)
    {
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D $r0, $r1;
        double $d0;

        $r0 := @parameter0: org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        $r1 := @parameter1: org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        $d0 = virtualinvoke $r0.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double distanceSq(org.apache.commons.math3.geometry.Vector)>($r1);

        return $d0;
    }
    public volatile org.apache.commons.math3.geometry.Vector add(double, org.apache.commons.math3.geometry.Vector)
    {
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D r0;
        double $d0;
        org.apache.commons.math3.geometry.Vector $r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        $d0 := @parameter0: double;

        $r1 := @parameter1: org.apache.commons.math3.geometry.Vector;

        r0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: org.apache.commons.math3.geometry.euclidean.oned.Vector1D add(double,org.apache.commons.math3.geometry.Vector)>($d0, $r1);

        return r0;
    }
    public volatile org.apache.commons.math3.geometry.Vector add(org.apache.commons.math3.geometry.Vector)
    {
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D r0;
        org.apache.commons.math3.geometry.Vector $r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        $r1 := @parameter0: org.apache.commons.math3.geometry.Vector;

        r0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: org.apache.commons.math3.geometry.euclidean.oned.Vector1D add(org.apache.commons.math3.geometry.Vector)>($r1);

        return r0;
    }
    public org.apache.commons.math3.geometry.euclidean.oned.Vector1D add(double, org.apache.commons.math3.geometry.Vector)
    {
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D r0, $r2, r3;
        double $d0, $d1, $d2;
        org.apache.commons.math3.geometry.Vector r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        $d0 := @parameter0: double;

        r1 := @parameter1: org.apache.commons.math3.geometry.Vector;

        r3 = (org.apache.commons.math3.geometry.euclidean.oned.Vector1D) r1;

        $r2 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double x>;

        $d1 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double getX()>();

        $d0 = $d1 * $d0;

        $d0 = $d2 + $d0;

        specialinvoke $r2.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: void <init>(double)>($d0);

        return $r2;
    }
    public org.apache.commons.math3.geometry.euclidean.oned.Vector1D add(org.apache.commons.math3.geometry.Vector)
    {
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D r0, $r2, r3;
        org.apache.commons.math3.geometry.Vector r1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        r1 := @parameter0: org.apache.commons.math3.geometry.Vector;

        r3 = (org.apache.commons.math3.geometry.euclidean.oned.Vector1D) r1;

        $r2 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double x>;

        $d0 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double getX()>();

        $d0 = $d1 + $d0;

        specialinvoke $r2.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: void <init>(double)>($d0);

        return $r2;
    }
    public double distance(org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D r0, r2;
        org.apache.commons.math3.geometry.Point r1;
        double d0, $d1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        r1 := @parameter0: org.apache.commons.math3.geometry.Point;

        r2 = (org.apache.commons.math3.geometry.euclidean.oned.Vector1D) r1;

        $d1 = r2.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double x>;

        d0 = r0.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double x>;

        d0 = $d1 - d0;

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d0);

        return d0;
    }
    public double distance(org.apache.commons.math3.geometry.Vector)
    {
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D r0;
        org.apache.commons.math3.geometry.Vector r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        r1 := @parameter0: org.apache.commons.math3.geometry.Vector;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double distance(org.apache.commons.math3.geometry.Point)>(r1);

        return $d0;
    }
    public double distance1(org.apache.commons.math3.geometry.Vector)
    {
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D r0, r2;
        org.apache.commons.math3.geometry.Vector r1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        r1 := @parameter0: org.apache.commons.math3.geometry.Vector;

        r2 = (org.apache.commons.math3.geometry.euclidean.oned.Vector1D) r1;

        $d1 = r2.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double x>;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double x>;

        $d0 = $d1 - $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        return $d0;
    }
    public double distanceInf(org.apache.commons.math3.geometry.Vector)
    {
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D r0, r2;
        org.apache.commons.math3.geometry.Vector r1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        r1 := @parameter0: org.apache.commons.math3.geometry.Vector;

        r2 = (org.apache.commons.math3.geometry.euclidean.oned.Vector1D) r1;

        $d1 = r2.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double x>;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double x>;

        $d0 = $d1 - $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        return $d0;
    }
    public double distanceSq(org.apache.commons.math3.geometry.Vector)
    {
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D r0, r2;
        org.apache.commons.math3.geometry.Vector r1;
        double d0, $d1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        r1 := @parameter0: org.apache.commons.math3.geometry.Vector;

        r2 = (org.apache.commons.math3.geometry.euclidean.oned.Vector1D) r1;

        $d1 = r2.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double x>;

        d0 = r0.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double x>;

        d0 = $d1 - d0;

        d0 = d0 * d0;

        return d0;
    }
    public double dotProduct(org.apache.commons.math3.geometry.Vector)
    {
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D r0, r2;
        org.apache.commons.math3.geometry.Vector r1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        r1 := @parameter0: org.apache.commons.math3.geometry.Vector;

        r2 = (org.apache.commons.math3.geometry.euclidean.oned.Vector1D) r1;

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double x>;

        $d0 = r2.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double x>;

        $d0 = $d1 * $d0;

        return $d0;
    }
    public boolean equals(java.lang.Object)
    {
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D r0, r2;
        java.lang.Object $r1;
        double $d0, $d1;
        boolean $z0;
        byte $b0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        $r1 := @parameter0: java.lang.Object;

        if r0 != $r1 goto label1;

        return 1;

     label1:
        $z0 = $r1 instanceof org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        if $z0 == 0 goto label3;

        r2 = (org.apache.commons.math3.geometry.euclidean.oned.Vector1D) $r1;

        $z0 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: boolean isNaN()>();

        if $z0 == 0 goto label2;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: boolean isNaN()>();

        return $z0;

     label2:
        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double x>;

        $d1 = r2.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double x>;

        $b0 = $d0 cmpl $d1;

        if $b0 == 0 goto label4;

     label3:
        return 0;

     label4:
        return 1;
    }
    public double getNorm()
    {
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double x>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        return $d0;
    }
    public double getNorm1()
    {
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double x>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        return $d0;
    }
    public double getNormInf()
    {
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double x>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        return $d0;
    }
    public double getNormSq()
    {
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D r0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double x>;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double x>;

        $d0 = $d1 * $d0;

        return $d0;
    }
    public org.apache.commons.math3.geometry.Space getSpace()
    {
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D r0;
        org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D $r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        $r1 = staticinvoke <org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D: org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D getInstance()>();

        return $r1;
    }
    public double getX()
    {
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D r0;
        double d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        d0 = r0.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double x>;

        return d0;
    }
    public volatile org.apache.commons.math3.geometry.Vector getZero()
    {
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D r0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        r0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: org.apache.commons.math3.geometry.euclidean.oned.Vector1D getZero()>();

        return r0;
    }
    public org.apache.commons.math3.geometry.euclidean.oned.Vector1D getZero()
    {
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D r0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        r0 = <org.apache.commons.math3.geometry.euclidean.oned.Vector1D: org.apache.commons.math3.geometry.euclidean.oned.Vector1D ZERO>;

        return r0;
    }
    public int hashCode()
    {
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D r0;
        boolean $z0;
        double $d0;
        int $i0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: boolean isNaN()>();

        if $z0 == 0 goto label1;

        return 7785;

     label1:
        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double x>;

        $i0 = staticinvoke <org.apache.commons.math3.util.MathUtils: int hash(double)>($d0);

        $i0 = $i0 * 997;

        return $i0;
    }
    public boolean isInfinite()
    {
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D r0;
        boolean $z0;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: boolean isNaN()>();

        if $z0 != 0 goto label1;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double x>;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d0);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean isNaN()
    {
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D r0;
        boolean $z0;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double x>;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        return $z0;
    }
    public volatile org.apache.commons.math3.geometry.Vector negate()
    {
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D r0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        r0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: org.apache.commons.math3.geometry.euclidean.oned.Vector1D negate()>();

        return r0;
    }
    public org.apache.commons.math3.geometry.euclidean.oned.Vector1D negate()
    {
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D r0, $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        $r1 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double x>;

        $d0 = neg $d0;

        specialinvoke $r1.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: void <init>(double)>($d0);

        return $r1;
    }
    public volatile org.apache.commons.math3.geometry.Vector normalize() throws org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D r0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        r0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: org.apache.commons.math3.geometry.euclidean.oned.Vector1D normalize()>();

        return r0;
    }
    public org.apache.commons.math3.geometry.euclidean.oned.Vector1D normalize() throws org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D r0;
        org.apache.commons.math3.exception.util.LocalizedFormats $r1;
        double $d0;
        byte $b0;
        org.apache.commons.math3.exception.MathArithmeticException $r2;
        java.lang.Object[] $r3;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double getNorm()>();

        $b0 = $d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        $r2 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r1 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR>;

        $r3 = newarray (java.lang.Object)[0];

        specialinvoke $r2.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r1, $r3);

        throw $r2;

     label1:
        $d0 = 1.0 / $d0;

        r0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: org.apache.commons.math3.geometry.euclidean.oned.Vector1D scalarMultiply(double)>($d0);

        return r0;
    }
    public volatile org.apache.commons.math3.geometry.Vector scalarMultiply(double)
    {
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        $d0 := @parameter0: double;

        r0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: org.apache.commons.math3.geometry.euclidean.oned.Vector1D scalarMultiply(double)>($d0);

        return r0;
    }
    public org.apache.commons.math3.geometry.euclidean.oned.Vector1D scalarMultiply(double)
    {
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D r0, $r1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        $d0 := @parameter0: double;

        $r1 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double x>;

        $d0 = $d1 * $d0;

        specialinvoke $r1.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: void <init>(double)>($d0);

        return $r1;
    }
    public volatile org.apache.commons.math3.geometry.Vector subtract(double, org.apache.commons.math3.geometry.Vector)
    {
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D r0;
        double $d0;
        org.apache.commons.math3.geometry.Vector $r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        $d0 := @parameter0: double;

        $r1 := @parameter1: org.apache.commons.math3.geometry.Vector;

        r0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: org.apache.commons.math3.geometry.euclidean.oned.Vector1D subtract(double,org.apache.commons.math3.geometry.Vector)>($d0, $r1);

        return r0;
    }
    public volatile org.apache.commons.math3.geometry.Vector subtract(org.apache.commons.math3.geometry.Vector)
    {
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D r0;
        org.apache.commons.math3.geometry.Vector $r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        $r1 := @parameter0: org.apache.commons.math3.geometry.Vector;

        r0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: org.apache.commons.math3.geometry.euclidean.oned.Vector1D subtract(org.apache.commons.math3.geometry.Vector)>($r1);

        return r0;
    }
    public org.apache.commons.math3.geometry.euclidean.oned.Vector1D subtract(double, org.apache.commons.math3.geometry.Vector)
    {
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D r0, $r2, r3;
        double $d0, $d1, $d2;
        org.apache.commons.math3.geometry.Vector r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        $d0 := @parameter0: double;

        r1 := @parameter1: org.apache.commons.math3.geometry.Vector;

        r3 = (org.apache.commons.math3.geometry.euclidean.oned.Vector1D) r1;

        $r2 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double x>;

        $d1 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double getX()>();

        $d0 = $d1 * $d0;

        $d0 = $d2 - $d0;

        specialinvoke $r2.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: void <init>(double)>($d0);

        return $r2;
    }
    public org.apache.commons.math3.geometry.euclidean.oned.Vector1D subtract(org.apache.commons.math3.geometry.Vector)
    {
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D r0, $r2, r3;
        org.apache.commons.math3.geometry.Vector r1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        r1 := @parameter0: org.apache.commons.math3.geometry.Vector;

        r3 = (org.apache.commons.math3.geometry.euclidean.oned.Vector1D) r1;

        $r2 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double x>;

        $d0 = r3.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double x>;

        $d0 = $d1 - $d0;

        specialinvoke $r2.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: void <init>(double)>($d0);

        return $r2;
    }
    public java.lang.String toString()
    {
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D r0;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1DFormat $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        $r1 = staticinvoke <org.apache.commons.math3.geometry.euclidean.oned.Vector1DFormat: org.apache.commons.math3.geometry.euclidean.oned.Vector1DFormat getInstance()>();

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.oned.Vector1DFormat: java.lang.String format(org.apache.commons.math3.geometry.Vector)>(r0);

        return $r2;
    }
    public java.lang.String toString(java.text.NumberFormat)
    {
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D r0;
        java.text.NumberFormat $r1;
        java.lang.String $r2;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1DFormat $r3;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        $r1 := @parameter0: java.text.NumberFormat;

        $r3 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1DFormat;

        specialinvoke $r3.<org.apache.commons.math3.geometry.euclidean.oned.Vector1DFormat: void <init>(java.text.NumberFormat)>($r1);

        $r2 = virtualinvoke $r3.<org.apache.commons.math3.geometry.euclidean.oned.Vector1DFormat: java.lang.String format(org.apache.commons.math3.geometry.Vector)>(r0);

        return $r2;
    }
