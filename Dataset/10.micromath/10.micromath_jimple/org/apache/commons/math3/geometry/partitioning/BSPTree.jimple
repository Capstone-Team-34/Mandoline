org.apache.commons.math3.geometry.partitioning.BSPTree extends java.lang.Object
private java.lang.Object attribute
private org.apache.commons.math3.geometry.partitioning.SubHyperplane cut
private org.apache.commons.math3.geometry.partitioning.BSPTree minus
private org.apache.commons.math3.geometry.partitioning.BSPTree parent
private org.apache.commons.math3.geometry.partitioning.BSPTree plus
    public void <init>()
    {
        org.apache.commons.math3.geometry.partitioning.BSPTree r0;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.BSPTree;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane cut> = null;

        r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree plus> = null;

        r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree minus> = null;

        r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree parent> = null;

        r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object attribute> = null;

        return;
    }
    public void <init>(java.lang.Object)
    {
        org.apache.commons.math3.geometry.partitioning.BSPTree r0;
        java.lang.Object $r1;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane cut> = null;

        r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree plus> = null;

        r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree minus> = null;

        r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree parent> = null;

        r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object attribute> = $r1;

        return;
    }
    public void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane, org.apache.commons.math3.geometry.partitioning.BSPTree, org.apache.commons.math3.geometry.partitioning.BSPTree, java.lang.Object)
    {
        org.apache.commons.math3.geometry.partitioning.BSPTree r0, r2, r3;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane r1;
        java.lang.Object $r4;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.SubHyperplane;

        r2 := @parameter1: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r3 := @parameter2: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r4 := @parameter3: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane cut> = r1;

        r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree plus> = r2;

        r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree minus> = r3;

        r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree parent> = null;

        r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object attribute> = $r4;

        r2.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree parent> = r0;

        r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree parent> = r0;

        return;
    }
    private void chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.BSPTree$VanishingCutHandler)
    {
        org.apache.commons.math3.geometry.partitioning.BSPTree r0, $r5, $r6;
        org.apache.commons.math3.geometry.partitioning.Hyperplane r1;
        org.apache.commons.math3.geometry.partitioning.BSPTree$VanishingCutHandler r2;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r3;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane $r4;
        java.lang.Object $r7;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.Hyperplane;

        r2 := @parameter1: org.apache.commons.math3.geometry.partitioning.BSPTree$VanishingCutHandler;

        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane cut>;

        if $r3 == null goto label1;

        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane cut>;

        $r4 = interfaceinvoke $r3.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane split(org.apache.commons.math3.geometry.partitioning.Hyperplane)>(r1);

        $r3 = virtualinvoke $r4.<org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlus()>();

        r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane cut> = $r3;

        $r5 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree plus>;

        specialinvoke $r5.<org.apache.commons.math3.geometry.partitioning.BSPTree: void chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree$VanishingCutHandler)>(r1, r2);

        $r5 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree minus>;

        specialinvoke $r5.<org.apache.commons.math3.geometry.partitioning.BSPTree: void chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree$VanishingCutHandler)>(r1, r2);

        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane cut>;

        if $r3 != null goto label1;

        $r5 = interfaceinvoke r2.<org.apache.commons.math3.geometry.partitioning.BSPTree$VanishingCutHandler: org.apache.commons.math3.geometry.partitioning.BSPTree fixNode(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r0);

        $r3 = $r5.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane cut>;

        r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane cut> = $r3;

        $r6 = $r5.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree plus>;

        r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree plus> = $r6;

        $r6 = $r5.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree minus>;

        r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree minus> = $r6;

        $r7 = $r5.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object attribute>;

        r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object attribute> = $r7;

     label1:
        return;
    }
    private void chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.BSPTree$VanishingCutHandler)
    {
        org.apache.commons.math3.geometry.partitioning.BSPTree r0, $r5, $r6;
        org.apache.commons.math3.geometry.partitioning.Hyperplane r1;
        org.apache.commons.math3.geometry.partitioning.BSPTree$VanishingCutHandler r2;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r3;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane $r4;
        java.lang.Object $r7;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.Hyperplane;

        r2 := @parameter1: org.apache.commons.math3.geometry.partitioning.BSPTree$VanishingCutHandler;

        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane cut>;

        if $r3 == null goto label1;

        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane cut>;

        $r4 = interfaceinvoke $r3.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane split(org.apache.commons.math3.geometry.partitioning.Hyperplane)>(r1);

        $r3 = virtualinvoke $r4.<org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane getMinus()>();

        r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane cut> = $r3;

        $r5 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree plus>;

        specialinvoke $r5.<org.apache.commons.math3.geometry.partitioning.BSPTree: void chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree$VanishingCutHandler)>(r1, r2);

        $r5 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree minus>;

        specialinvoke $r5.<org.apache.commons.math3.geometry.partitioning.BSPTree: void chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree$VanishingCutHandler)>(r1, r2);

        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane cut>;

        if $r3 != null goto label1;

        $r5 = interfaceinvoke r2.<org.apache.commons.math3.geometry.partitioning.BSPTree$VanishingCutHandler: org.apache.commons.math3.geometry.partitioning.BSPTree fixNode(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r0);

        $r3 = $r5.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane cut>;

        r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane cut> = $r3;

        $r6 = $r5.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree plus>;

        r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree plus> = $r6;

        $r6 = $r5.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree minus>;

        r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree minus> = $r6;

        $r7 = $r5.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object attribute>;

        r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object attribute> = $r7;

     label1:
        return;
    }
    private void condense()
    {
        org.apache.commons.math3.geometry.partitioning.BSPTree r0, $r2;
        boolean $z0;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r1;
        java.lang.Object $r3, $r4;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane cut>;

        if $r1 == null goto label5;

        $r2 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree plus>;

        $r1 = $r2.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane cut>;

        if $r1 != null goto label5;

        $r2 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree minus>;

        $r1 = $r2.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane cut>;

        if $r1 != null goto label5;

        $r2 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree plus>;

        $r3 = $r2.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object attribute>;

        if $r3 != null goto label1;

        $r2 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree minus>;

        $r3 = $r2.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object attribute>;

        if $r3 == null goto label2;

     label1:
        $r2 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree plus>;

        $r3 = $r2.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object attribute>;

        if $r3 == null goto label5;

        $r2 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree plus>;

        $r3 = $r2.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object attribute>;

        $r2 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree minus>;

        $r4 = $r2.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object attribute>;

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label5;

     label2:
        $r2 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree plus>;

        $r3 = $r2.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object attribute>;

        if $r3 != null goto label4;

        $r2 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree minus>;

        $r3 = $r2.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object attribute>;

     label3:
        r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object attribute> = $r3;

        r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane cut> = null;

        r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree plus> = null;

        r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree minus> = null;

        return;

     label4:
        $r2 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree plus>;

        $r3 = $r2.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object attribute>;

        goto label3;

     label5:
        return;
    }
    private org.apache.commons.math3.geometry.partitioning.SubHyperplane fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)
    {
        org.apache.commons.math3.geometry.partitioning.BSPTree r0, $r2;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane r1, $r3;
        org.apache.commons.math3.geometry.partitioning.Hyperplane $r4;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane $r5;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.SubHyperplane;

     label1:
        $r2 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree parent>;

        if $r2 == null goto label4;

        if r1 == null goto label4;

        $r2 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree parent>;

        $r2 = $r2.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree plus>;

        if r0 != $r2 goto label3;

        $r2 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree parent>;

        $r3 = $r2.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane cut>;

        $r4 = interfaceinvoke $r3.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        $r5 = interfaceinvoke r1.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane split(org.apache.commons.math3.geometry.partitioning.Hyperplane)>($r4);

        r1 = virtualinvoke $r5.<org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlus()>();

     label2:
        r0 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree parent>;

        goto label1;

     label3:
        $r2 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree parent>;

        $r3 = $r2.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane cut>;

        $r4 = interfaceinvoke $r3.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        $r5 = interfaceinvoke r1.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane split(org.apache.commons.math3.geometry.partitioning.Hyperplane)>($r4);

        r1 = virtualinvoke $r5.<org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane getMinus()>();

        goto label2;

     label4:
        return r1;
    }
    private org.apache.commons.math3.geometry.partitioning.BSPTree merge(org.apache.commons.math3.geometry.partitioning.BSPTree, org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger, org.apache.commons.math3.geometry.partitioning.BSPTree, boolean)
    {
        org.apache.commons.math3.geometry.partitioning.BSPTree r0, r1, r3, $r5;
        org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger r2;
        boolean $z0;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r4;
        org.apache.commons.math3.geometry.partitioning.Hyperplane $r6;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r2 := @parameter1: org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger;

        r3 := @parameter2: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $z0 := @parameter3: boolean;

        $r4 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane cut>;

        if $r4 != null goto label1;

        r0 = interfaceinvoke r2.<org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger: org.apache.commons.math3.geometry.partitioning.BSPTree merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)>(r0, r1, r3, $z0, 1);

        return r0;

     label1:
        $r4 = r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane cut>;

        if $r4 != null goto label2;

        r0 = interfaceinvoke r2.<org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger: org.apache.commons.math3.geometry.partitioning.BSPTree merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,boolean)>(r1, r0, r3, $z0, 0);

        return r0;

     label2:
        $r4 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane cut>;

        r1 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)>($r4);

        if r3 == null goto label3;

        r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree parent> = r3;

        if $z0 == 0 goto label4;

        r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree plus> = r1;

     label3:
        r3 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree plus>;

        $r5 = r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree plus>;

        specialinvoke r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)>($r5, r2, r1, 1);

        r0 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree minus>;

        r3 = r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree minus>;

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)>(r3, r2, r1, 0);

        specialinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: void condense()>();

        $r4 = r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane cut>;

        if $r4 == null goto label5;

        $r4 = r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane cut>;

        $r6 = interfaceinvoke $r4.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        $r4 = interfaceinvoke $r6.<org.apache.commons.math3.geometry.partitioning.Hyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane wholeHyperplane()>();

        $r4 = specialinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)>($r4);

        r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane cut> = $r4;

        return r1;

     label4:
        r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree minus> = r1;

        goto label3;

     label5:
        return r1;
    }
    private void recurseCloseCuts(org.apache.commons.math3.geometry.Point, double, java.util.List)
    {
        org.apache.commons.math3.geometry.partitioning.BSPTree r0, $r5;
        org.apache.commons.math3.geometry.Point r1;
        double $d0, $d1, $d2;
        java.util.List r2;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r3;
        org.apache.commons.math3.geometry.partitioning.Hyperplane $r4;
        byte $b0;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r1 := @parameter0: org.apache.commons.math3.geometry.Point;

        $d0 := @parameter1: double;

        r2 := @parameter2: java.util.List;

        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane cut>;

        if $r3 == null goto label3;

        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane cut>;

        $r4 = interfaceinvoke $r3.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        $d1 = interfaceinvoke $r4.<org.apache.commons.math3.geometry.partitioning.Hyperplane: double getOffset(org.apache.commons.math3.geometry.Point)>(r1);

        $d2 = neg $d0;

        $b0 = $d1 cmpg $d2;

        if $b0 >= 0 goto label1;

        r0 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree minus>;

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: void recurseCloseCuts(org.apache.commons.math3.geometry.Point,double,java.util.List)>(r1, $d0, r2);

        return;

     label1:
        $b0 = $d1 cmpl $d0;

        if $b0 <= 0 goto label2;

        r0 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree plus>;

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: void recurseCloseCuts(org.apache.commons.math3.geometry.Point,double,java.util.List)>(r1, $d0, r2);

        return;

     label2:
        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r0);

        $r5 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree minus>;

        specialinvoke $r5.<org.apache.commons.math3.geometry.partitioning.BSPTree: void recurseCloseCuts(org.apache.commons.math3.geometry.Point,double,java.util.List)>(r1, $d0, r2);

        r0 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree plus>;

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: void recurseCloseCuts(org.apache.commons.math3.geometry.Point,double,java.util.List)>(r1, $d0, r2);

     label3:
        return;
    }
    public org.apache.commons.math3.geometry.partitioning.BSPTree copySelf()
    {
        org.apache.commons.math3.geometry.partitioning.BSPTree r0, $r3, $r4, $r5;
        java.lang.Object $r1;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r2;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane cut>;

        if $r2 != null goto label1;

        $r3 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object attribute>;

        specialinvoke $r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r1);

        return $r3;

     label1:
        $r3 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane cut>;

        $r2 = interfaceinvoke $r2.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane copySelf()>();

        $r4 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree plus>;

        $r4 = virtualinvoke $r4.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree copySelf()>();

        $r5 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree minus>;

        $r5 = virtualinvoke $r5.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree copySelf()>();

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object attribute>;

        specialinvoke $r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)>($r2, $r4, $r5, $r1);

        return $r3;
    }
    public java.lang.Object getAttribute()
    {
        org.apache.commons.math3.geometry.partitioning.BSPTree r0;
        java.lang.Object r1;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r1 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object attribute>;

        return r1;
    }
    public org.apache.commons.math3.geometry.partitioning.BSPTree getCell(org.apache.commons.math3.geometry.Point, double)
    {
        org.apache.commons.math3.geometry.Point r0;
        double $d0, $d1, $d2;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r2;
        org.apache.commons.math3.geometry.partitioning.Hyperplane $r3;
        byte $b0;

        r1 := @this: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r0 := @parameter0: org.apache.commons.math3.geometry.Point;

        $d0 := @parameter1: double;

        $r2 = r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane cut>;

        if $r2 != null goto label1;

        return r1;

     label1:
        $r2 = r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane cut>;

        $r3 = interfaceinvoke $r2.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        $d1 = interfaceinvoke $r3.<org.apache.commons.math3.geometry.partitioning.Hyperplane: double getOffset(org.apache.commons.math3.geometry.Point)>(r0);

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d1);

        $b0 = $d2 cmpg $d0;

        if $b0 < 0 goto label3;

        $b0 = $d1 cmpg 0.0;

        if $b0 > 0 goto label2;

        r1 = r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree minus>;

        r1 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getCell(org.apache.commons.math3.geometry.Point,double)>(r0, $d0);

        return r1;

     label2:
        r1 = r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree plus>;

        r1 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getCell(org.apache.commons.math3.geometry.Point,double)>(r0, $d0);

     label3:
        return r1;
    }
    public org.apache.commons.math3.geometry.partitioning.BSPTree getCell(org.apache.commons.math3.geometry.Vector)
    {
        org.apache.commons.math3.geometry.partitioning.BSPTree r0;
        org.apache.commons.math3.geometry.Vector r1;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r1 := @parameter0: org.apache.commons.math3.geometry.Vector;

        r0 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getCell(org.apache.commons.math3.geometry.Point,double)>(r1, 1.0E-10);

        return r0;
    }
    public java.util.List getCloseCuts(org.apache.commons.math3.geometry.Point, double)
    {
        org.apache.commons.math3.geometry.partitioning.BSPTree r0;
        org.apache.commons.math3.geometry.Point r1;
        double $d0;
        java.util.ArrayList r2;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r1 := @parameter0: org.apache.commons.math3.geometry.Point;

        $d0 := @parameter1: double;

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: void recurseCloseCuts(org.apache.commons.math3.geometry.Point,double,java.util.List)>(r1, $d0, r2);

        return r2;
    }
    public org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()
    {
        org.apache.commons.math3.geometry.partitioning.BSPTree r0;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane r1;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r1 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane cut>;

        return r1;
    }
    public org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()
    {
        org.apache.commons.math3.geometry.partitioning.BSPTree r0;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r0 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree minus>;

        return r0;
    }
    public org.apache.commons.math3.geometry.partitioning.BSPTree getParent()
    {
        org.apache.commons.math3.geometry.partitioning.BSPTree r0;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r0 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree parent>;

        return r0;
    }
    public org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()
    {
        org.apache.commons.math3.geometry.partitioning.BSPTree r0;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r0 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree plus>;

        return r0;
    }
    public boolean insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)
    {
        org.apache.commons.math3.geometry.partitioning.BSPTree r0, $r3;
        org.apache.commons.math3.geometry.partitioning.Hyperplane r1;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.Hyperplane;

        $r2 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane cut>;

        if $r2 == null goto label1;

        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree plus>;

        $r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree parent> = null;

        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree minus>;

        $r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree parent> = null;

     label1:
        $r2 = interfaceinvoke r1.<org.apache.commons.math3.geometry.partitioning.Hyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane wholeHyperplane()>();

        $r2 = specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane)>($r2);

        if $r2 == null goto label2;

        $z0 = interfaceinvoke $r2.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: boolean isEmpty()>();

        if $z0 == 0 goto label3;

     label2:
        r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane cut> = null;

        r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree plus> = null;

        r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree minus> = null;

        return 0;

     label3:
        r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane cut> = $r2;

        $r3 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        specialinvoke $r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>()>();

        r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree plus> = $r3;

        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree plus>;

        $r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree parent> = r0;

        $r3 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        specialinvoke $r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>()>();

        r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree minus> = $r3;

        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree minus>;

        $r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree parent> = r0;

        return 1;
    }
    public void insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree, boolean)
    {
        org.apache.commons.math3.geometry.partitioning.BSPTree r0, r1;
        boolean $z0;
        org.apache.commons.math3.geometry.partitioning.BSPTree$1 $r2;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $z0 := @parameter1: boolean;

        $r2 = new org.apache.commons.math3.geometry.partitioning.BSPTree$1;

        specialinvoke $r2.<org.apache.commons.math3.geometry.partitioning.BSPTree$1: void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r0);

        virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: void insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,org.apache.commons.math3.geometry.partitioning.BSPTree$VanishingCutHandler)>(r1, $z0, $r2);

        return;
    }
    public void insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree, boolean, org.apache.commons.math3.geometry.partitioning.BSPTree$VanishingCutHandler)
    {
        org.apache.commons.math3.geometry.partitioning.BSPTree r0, r1, $r4, $r7;
        boolean $z0;
        org.apache.commons.math3.geometry.partitioning.BSPTree$VanishingCutHandler r2;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r3;
        org.apache.commons.math3.geometry.partitioning.Hyperplane $r5;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane $r6;
        java.lang.Object $r8;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $z0 := @parameter1: boolean;

        r2 := @parameter2: org.apache.commons.math3.geometry.partitioning.BSPTree$VanishingCutHandler;

        r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree parent> = r1;

        if r1 == null goto label1;

        if $z0 == 0 goto label5;

        r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree plus> = r0;

     label1:
        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane cut>;

        if $r3 == null goto label8;

        r1 = r0;

     label2:
        $r4 = r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree parent>;

        if $r4 == null goto label4;

        $r4 = r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree parent>;

        $r3 = $r4.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane cut>;

        $r5 = interfaceinvoke $r3.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        $r4 = r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree parent>;

        $r4 = $r4.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree plus>;

        if r1 != $r4 goto label6;

        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane cut>;

        $r6 = interfaceinvoke $r3.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane split(org.apache.commons.math3.geometry.partitioning.Hyperplane)>($r5);

        $r3 = virtualinvoke $r6.<org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlus()>();

        r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane cut> = $r3;

        $r4 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree plus>;

        specialinvoke $r4.<org.apache.commons.math3.geometry.partitioning.BSPTree: void chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree$VanishingCutHandler)>($r5, r2);

        $r4 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree minus>;

        specialinvoke $r4.<org.apache.commons.math3.geometry.partitioning.BSPTree: void chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree$VanishingCutHandler)>($r5, r2);

     label3:
        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane cut>;

        if $r3 != null goto label7;

        $r4 = interfaceinvoke r2.<org.apache.commons.math3.geometry.partitioning.BSPTree$VanishingCutHandler: org.apache.commons.math3.geometry.partitioning.BSPTree fixNode(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r0);

        $r3 = $r4.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane cut>;

        r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane cut> = $r3;

        $r7 = $r4.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree plus>;

        r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree plus> = $r7;

        $r7 = $r4.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree minus>;

        r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree minus> = $r7;

        $r8 = $r4.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object attribute>;

        r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object attribute> = $r8;

        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane cut>;

        if $r3 != null goto label7;

     label4:
        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: void condense()>();

        return;

     label5:
        r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree minus> = r0;

        goto label1;

     label6:
        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane cut>;

        $r6 = interfaceinvoke $r3.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane split(org.apache.commons.math3.geometry.partitioning.Hyperplane)>($r5);

        $r3 = virtualinvoke $r6.<org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane getMinus()>();

        r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane cut> = $r3;

        $r4 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree plus>;

        specialinvoke $r4.<org.apache.commons.math3.geometry.partitioning.BSPTree: void chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree$VanishingCutHandler)>($r5, r2);

        $r4 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree minus>;

        specialinvoke $r4.<org.apache.commons.math3.geometry.partitioning.BSPTree: void chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree$VanishingCutHandler)>($r5, r2);

        goto label3;

     label7:
        r1 = r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree parent>;

        goto label2;

     label8:
        return;
    }
    public org.apache.commons.math3.geometry.partitioning.BSPTree merge(org.apache.commons.math3.geometry.partitioning.BSPTree, org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)
    {
        org.apache.commons.math3.geometry.partitioning.BSPTree r0, r1;
        org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger r2;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r2 := @parameter1: org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger;

        r0 = specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger,org.apache.commons.math3.geometry.partitioning.BSPTree,boolean)>(r1, r2, null, 0);

        return r0;
    }
    public org.apache.commons.math3.geometry.partitioning.BSPTree pruneAroundConvexCell(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.apache.commons.math3.geometry.partitioning.BSPTree r0, r4, r6, $r7;
        java.lang.Object $r1, $r2, $r3;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r5;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 := @parameter2: java.lang.Object;

        r6 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        specialinvoke r6.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r1);

     label1:
        r4 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree parent>;

        if r4 == null goto label4;

        r4 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree parent>;

        $r5 = r4.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane cut>;

        $r5 = interfaceinvoke $r5.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane copySelf()>();

        r4 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        specialinvoke r4.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r2);

        $r7 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree parent>;

        $r7 = $r7.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree plus>;

        if r0 != $r7 goto label3;

        $r7 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        specialinvoke $r7.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)>($r5, r6, r4, $r3);

        r6 = $r7;

     label2:
        r0 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree parent>;

        goto label1;

     label3:
        $r7 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        specialinvoke $r7.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)>($r5, r4, r6, $r3);

        r6 = $r7;

        goto label2;

     label4:
        return r6;
    }
    public void setAttribute(java.lang.Object)
    {
        org.apache.commons.math3.geometry.partitioning.BSPTree r0;
        java.lang.Object $r1;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r1 := @parameter0: java.lang.Object;

        r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object attribute> = $r1;

        return;
    }
    public org.apache.commons.math3.geometry.partitioning.BSPTree split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)
    {
        org.apache.commons.math3.geometry.partitioning.BSPTree r0, r3, $r4, $r5, $r13;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane r1, $r2;
        java.lang.Object $r6;
        org.apache.commons.math3.geometry.partitioning.Hyperplane $r7, $r8;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane $r9, $r14;
        int[] $r10;
        org.apache.commons.math3.geometry.partitioning.Side $r11, $r12;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.SubHyperplane;

        $r2 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane cut>;

        if $r2 != null goto label1;

        r3 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r4 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree copySelf()>();

        $r5 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r6 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object attribute>;

        specialinvoke $r5.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r6);

        specialinvoke r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)>(r1, $r4, $r5, null);

        return r3;

     label1:
        $r2 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane cut>;

        $r7 = interfaceinvoke $r2.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        $r8 = interfaceinvoke r1.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        $r9 = interfaceinvoke r1.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane split(org.apache.commons.math3.geometry.partitioning.Hyperplane)>($r7);

        $r10 = <org.apache.commons.math3.geometry.partitioning.BSPTree$2: int[] $SwitchMap$org$apache$commons$math3$geometry$partitioning$Side>;

        $r11 = virtualinvoke $r9.<org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane: org.apache.commons.math3.geometry.partitioning.Side getSide()>();

        $i0 = virtualinvoke $r11.<org.apache.commons.math3.geometry.partitioning.Side: int ordinal()>();

        $i0 = $r10[$i0];

        lookupswitch($i0)
        {
            case 1: goto label4;
            case 2: goto label6;
            case 3: goto label8;
            default: goto label2;
        };

     label2:
        $z0 = interfaceinvoke $r7.<org.apache.commons.math3.geometry.partitioning.Hyperplane: boolean sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)>($r8);

        if $z0 == 0 goto label9;

        r3 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r4 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree plus>;

        $r4 = virtualinvoke $r4.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree copySelf()>();

        $r5 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree minus>;

        $r5 = virtualinvoke $r5.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree copySelf()>();

        $r6 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object attribute>;

        specialinvoke r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)>(r1, $r4, $r5, $r6);

     label3:
        return r3;

     label4:
        r3 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree plus>;

        r3 = virtualinvoke r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)>(r1);

        r1 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane cut>;

        $r9 = interfaceinvoke r1.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane split(org.apache.commons.math3.geometry.partitioning.Hyperplane)>($r8);

        $r11 = virtualinvoke $r9.<org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane: org.apache.commons.math3.geometry.partitioning.Side getSide()>();

        $r12 = <org.apache.commons.math3.geometry.partitioning.Side: org.apache.commons.math3.geometry.partitioning.Side PLUS>;

        if $r11 != $r12 goto label5;

        $r4 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        r1 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane cut>;

        r1 = interfaceinvoke r1.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane copySelf()>();

        $r5 = r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree plus>;

        $r13 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree minus>;

        $r13 = virtualinvoke $r13.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree copySelf()>();

        $r6 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object attribute>;

        specialinvoke $r4.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)>(r1, $r5, $r13, $r6);

        r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree plus> = $r4;

        r0 = r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree plus>;

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: void condense()>();

        r0 = r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree plus>;

        r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree parent> = r3;

        return r3;

     label5:
        $r4 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        r1 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane cut>;

        r1 = interfaceinvoke r1.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane copySelf()>();

        $r5 = r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree minus>;

        $r13 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree minus>;

        $r13 = virtualinvoke $r13.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree copySelf()>();

        $r6 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object attribute>;

        specialinvoke $r4.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)>(r1, $r5, $r13, $r6);

        r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree minus> = $r4;

        r0 = r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree minus>;

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: void condense()>();

        r0 = r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree minus>;

        r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree parent> = r3;

        return r3;

     label6:
        r3 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree minus>;

        r3 = virtualinvoke r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)>(r1);

        r1 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane cut>;

        $r9 = interfaceinvoke r1.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane split(org.apache.commons.math3.geometry.partitioning.Hyperplane)>($r8);

        $r11 = virtualinvoke $r9.<org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane: org.apache.commons.math3.geometry.partitioning.Side getSide()>();

        $r12 = <org.apache.commons.math3.geometry.partitioning.Side: org.apache.commons.math3.geometry.partitioning.Side PLUS>;

        if $r11 != $r12 goto label7;

        $r4 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        r1 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane cut>;

        r1 = interfaceinvoke r1.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane copySelf()>();

        $r5 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree plus>;

        $r5 = virtualinvoke $r5.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree copySelf()>();

        $r13 = r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree plus>;

        $r6 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object attribute>;

        specialinvoke $r4.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)>(r1, $r5, $r13, $r6);

        r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree plus> = $r4;

        r0 = r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree plus>;

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: void condense()>();

        r0 = r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree plus>;

        r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree parent> = r3;

        return r3;

     label7:
        $r4 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        r1 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane cut>;

        r1 = interfaceinvoke r1.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane copySelf()>();

        $r5 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree plus>;

        $r5 = virtualinvoke $r5.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree copySelf()>();

        $r13 = r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree minus>;

        $r6 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object attribute>;

        specialinvoke $r4.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)>(r1, $r5, $r13, $r6);

        r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree minus> = $r4;

        r0 = r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree minus>;

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: void condense()>();

        r0 = r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree minus>;

        r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree parent> = r3;

        return r3;

     label8:
        $r2 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane cut>;

        $r14 = interfaceinvoke $r2.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane split(org.apache.commons.math3.geometry.partitioning.Hyperplane)>($r8);

        r3 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r4 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree plus>;

        $r2 = virtualinvoke $r9.<org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlus()>();

        $r4 = virtualinvoke $r4.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)>($r2);

        r0 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree minus>;

        $r2 = virtualinvoke $r9.<org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane getMinus()>();

        r0 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)>($r2);

        specialinvoke r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)>(r1, $r4, r0, null);

        r0 = r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree plus>;

        r1 = virtualinvoke $r14.<org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlus()>();

        r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane cut> = r1;

        r0 = r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree minus>;

        r1 = virtualinvoke $r14.<org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane getMinus()>();

        r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane cut> = r1;

        r0 = r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree plus>;

        r0 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree minus>;

        $r4 = r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree plus>;

        $r5 = r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree minus>;

        $r5 = $r5.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree plus>;

        $r4.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree minus> = $r5;

        $r4 = r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree plus>;

        $r4 = $r4.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree minus>;

        $r5 = r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree plus>;

        $r4.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree parent> = $r5;

        $r4 = r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree minus>;

        $r4.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree plus> = r0;

        r0 = r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree minus>;

        r0 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree plus>;

        $r4 = r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree minus>;

        r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree parent> = $r4;

        r0 = r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree plus>;

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: void condense()>();

        r0 = r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree minus>;

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: void condense()>();

        return r3;

     label9:
        r3 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r4 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree minus>;

        $r4 = virtualinvoke $r4.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree copySelf()>();

        $r5 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree plus>;

        $r5 = virtualinvoke $r5.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree copySelf()>();

        $r6 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object attribute>;

        specialinvoke r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)>(r1, $r4, $r5, $r6);

        goto label3;
    }
    public void visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)
    {
        org.apache.commons.math3.geometry.partitioning.BSPTree r0, $r6;
        org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor r1;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r2;
        int[] $r3;
        org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order $r4;
        int $i0;
        org.apache.commons.math3.exception.MathInternalError $r5;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor;

        $r2 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane cut>;

        if $r2 != null goto label1;

        interfaceinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor: void visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r0);

        return;

     label1:
        $r3 = <org.apache.commons.math3.geometry.partitioning.BSPTree$2: int[] $SwitchMap$org$apache$commons$math3$geometry$partitioning$BSPTreeVisitor$Order>;

        $r4 = interfaceinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor: org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r0);

        $i0 = virtualinvoke $r4.<org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order: int ordinal()>();

        $i0 = $r3[$i0];

        lookupswitch($i0)
        {
            case 1: goto label3;
            case 2: goto label4;
            case 3: goto label5;
            case 4: goto label6;
            case 5: goto label7;
            case 6: goto label8;
            default: goto label2;
        };

     label2:
        $r5 = new org.apache.commons.math3.exception.MathInternalError;

        specialinvoke $r5.<org.apache.commons.math3.exception.MathInternalError: void <init>()>();

        throw $r5;

     label3:
        $r6 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree plus>;

        virtualinvoke $r6.<org.apache.commons.math3.geometry.partitioning.BSPTree: void visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)>(r1);

        $r6 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree minus>;

        virtualinvoke $r6.<org.apache.commons.math3.geometry.partitioning.BSPTree: void visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)>(r1);

        interfaceinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor: void visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r0);

        return;

     label4:
        $r6 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree plus>;

        virtualinvoke $r6.<org.apache.commons.math3.geometry.partitioning.BSPTree: void visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)>(r1);

        interfaceinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor: void visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r0);

        r0 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree minus>;

        virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: void visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)>(r1);

        return;

     label5:
        $r6 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree minus>;

        virtualinvoke $r6.<org.apache.commons.math3.geometry.partitioning.BSPTree: void visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)>(r1);

        $r6 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree plus>;

        virtualinvoke $r6.<org.apache.commons.math3.geometry.partitioning.BSPTree: void visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)>(r1);

        interfaceinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor: void visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r0);

        return;

     label6:
        $r6 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree minus>;

        virtualinvoke $r6.<org.apache.commons.math3.geometry.partitioning.BSPTree: void visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)>(r1);

        interfaceinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor: void visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r0);

        r0 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree plus>;

        virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: void visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)>(r1);

        return;

     label7:
        interfaceinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor: void visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r0);

        $r6 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree plus>;

        virtualinvoke $r6.<org.apache.commons.math3.geometry.partitioning.BSPTree: void visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)>(r1);

        r0 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree minus>;

        virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: void visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)>(r1);

        return;

     label8:
        interfaceinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor: void visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r0);

        $r6 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree minus>;

        virtualinvoke $r6.<org.apache.commons.math3.geometry.partitioning.BSPTree: void visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)>(r1);

        r0 = r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree plus>;

        virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: void visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)>(r1);

        return;
    }
