org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates extends java.lang.Object implements java.io.Serializable
private static final long serialVersionUID
private double[][] jacobian
private final double phi
private double[][] phiHessian
private final double r
private double[][] rHessian
private final double theta
private double[][] thetaHessian
private final org.apache.commons.math3.geometry.euclidean.threed.Vector3D v
    public void <init>(double, double, double)
    {
        org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates r0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double cos(double)>($d1);

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double sin(double)>($d1);

        $d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double cos(double)>($d2);

        $d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double sin(double)>($d2);

        r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double r> = $d0;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double theta> = $d1;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double phi> = $d2;

        $r1 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d1 = $d0 * $d3;

        $d1 = $d1 * $d6;

        $d2 = $d0 * $d4;

        $d2 = $d2 * $d6;

        $d0 = $d0 * $d5;

        specialinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,double,double)>($d1, $d2, $d0);

        r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: org.apache.commons.math3.geometry.euclidean.threed.Vector3D v> = $r1;

        return;
    }
    public void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)
    {
        org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: org.apache.commons.math3.geometry.euclidean.threed.Vector3D v> = $r1;

        $d0 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getNorm()>();

        r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double r> = $d0;

        $d0 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getAlpha()>();

        r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double theta> = $d0;

        $d1 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double r>;

        $d0 = $d1 / $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double acos(double)>($d0);

        r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double phi> = $d0;

        return;
    }
    private void computeHessians()
    {
        org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates r0;
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, $d11, $d12, $d13, $d14, $d15;
        double[][] $r1;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r2;
        int[] $r3;
        java.lang.Class $r4;
        java.lang.Object $r5;
        double[] $r6, $r7;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates;

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] rHessian>;

        if $r1 != null goto label1;

        $r2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: org.apache.commons.math3.geometry.euclidean.threed.Vector3D v>;

        $d11 = virtualinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $r2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: org.apache.commons.math3.geometry.euclidean.threed.Vector3D v>;

        $d12 = virtualinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $r2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: org.apache.commons.math3.geometry.euclidean.threed.Vector3D v>;

        $d13 = virtualinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        d5 = $d11 * $d11;

        d7 = $d12 * $d12;

        d9 = $d13 * $d13;

        d2 = d5 + d7;

        $d14 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d2);

        d0 = d2 + d9;

        d6 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double r>;

        d6 = $d11 / d6;

        d3 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double r>;

        d8 = $d12 / d3;

        d3 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double r>;

        d10 = $d13 / d3;

        d4 = $d11 / d2;

        d3 = $d12 / d2;

        d1 = d6 / d0;

        d8 = d8 / d0;

        d6 = d10 / d0;

        $r3 = newarray (int)[2];

        $r3[0] = 3;

        $r3[1] = 3;

        $r4 = <java.lang.Double: java.lang.Class TYPE>;

        $r5 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r4, $r3);

        $r1 = (double[][]) $r5;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] rHessian> = $r1;

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] rHessian>;

        $r6 = $r1[0];

        d10 = $d12 * d8;

        $d15 = $d13 * d6;

        d10 = d10 + $d15;

        $r6[0] = d10;

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] rHessian>;

        $r6 = $r1[1];

        d10 = neg $d11;

        d10 = d10 * d8;

        $r6[0] = d10;

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] rHessian>;

        $r6 = $r1[2];

        d10 = neg $d13;

        d10 = d10 * d1;

        $r6[0] = d10;

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] rHessian>;

        $r6 = $r1[1];

        d10 = $d11 * d1;

        $d15 = $d13 * d6;

        d10 = d10 + $d15;

        $r6[1] = d10;

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] rHessian>;

        $r6 = $r1[2];

        d10 = neg $d12;

        d10 = d10 * d6;

        $r6[1] = d10;

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] rHessian>;

        $r6 = $r1[2];

        d1 = $d11 * d1;

        d8 = $d12 * d8;

        d1 = d1 + d8;

        $r6[2] = d1;

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] rHessian>;

        $r6 = $r1[0];

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] rHessian>;

        $r7 = $r1[1];

        d1 = $r7[0];

        $r6[1] = d1;

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] rHessian>;

        $r6 = $r1[0];

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] rHessian>;

        $r7 = $r1[2];

        d1 = $r7[0];

        $r6[2] = d1;

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] rHessian>;

        $r6 = $r1[1];

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] rHessian>;

        $r7 = $r1[2];

        d1 = $r7[1];

        $r6[2] = d1;

        $r3 = newarray (int)[2];

        $r3[0] = 2;

        $r3[1] = 2;

        $r4 = <java.lang.Double: java.lang.Class TYPE>;

        $r5 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r4, $r3);

        $r1 = (double[][]) $r5;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] thetaHessian> = $r1;

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] thetaHessian>;

        $r6 = $r1[0];

        d1 = 2.0 * d4;

        d1 = d1 * d3;

        $r6[0] = d1;

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] thetaHessian>;

        $r6 = $r1[1];

        d1 = d3 * d3;

        d8 = d4 * d4;

        d1 = d1 - d8;

        $r6[0] = d1;

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] thetaHessian>;

        $r6 = $r1[1];

        d4 = -2.0 * d4;

        d3 = d4 * d3;

        $r6[1] = d3;

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] thetaHessian>;

        $r6 = $r1[0];

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] thetaHessian>;

        $r7 = $r1[1];

        d3 = $r7[0];

        $r6[1] = d3;

        d4 = $d14 * d0;

        d3 = $d14 * d4;

        d0 = d4 * d0;

        d4 = d0 * d2;

        d1 = 3.0 * d2;

        d1 = d1 + d9;

        $r3 = newarray (int)[2];

        $r3[0] = 3;

        $r3[1] = 3;

        $r4 = <java.lang.Double: java.lang.Class TYPE>;

        $r5 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r4, $r3);

        $r1 = (double[][]) $r5;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] phiHessian> = $r1;

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] phiHessian>;

        $r6 = $r1[0];

        d5 = d5 * d1;

        d5 = d3 - d5;

        d5 = d5 * $d13;

        d5 = d5 / d4;

        $r6[0] = d5;

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] phiHessian>;

        $r6 = $r1[1];

        d5 = neg $d11;

        d5 = d5 * $d12;

        d5 = d5 * $d13;

        d5 = d5 * d1;

        d5 = d5 / d4;

        $r6[0] = d5;

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] phiHessian>;

        $r6 = $r1[2];

        d5 = d2 - d9;

        $d11 = d5 * $d11;

        $d11 = $d11 / d0;

        $r6[0] = $d11;

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] phiHessian>;

        $r6 = $r1[1];

        d7 = d7 * d1;

        d7 = d3 - d7;

        $d13 = d7 * $d13;

        $d13 = $d13 / d4;

        $r6[1] = $d13;

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] phiHessian>;

        $r6 = $r1[2];

        d2 = d2 - d9;

        $d12 = d2 * $d12;

        $d12 = $d12 / d0;

        $r6[1] = $d12;

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] phiHessian>;

        $r6 = $r1[2];

        $d14 = 2.0 * $d14;

        $d14 = $d14 * d6;

        $d12 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double r>;

        $d14 = $d14 / $d12;

        $r6[2] = $d14;

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] phiHessian>;

        $r6 = $r1[0];

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] phiHessian>;

        $r7 = $r1[1];

        $d14 = $r7[0];

        $r6[1] = $d14;

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] phiHessian>;

        $r6 = $r1[0];

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] phiHessian>;

        $r7 = $r1[2];

        $d14 = $r7[0];

        $r6[2] = $d14;

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] phiHessian>;

        $r6 = $r1[1];

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] phiHessian>;

        $r7 = $r1[2];

        $d14 = $r7[1];

        $r6[2] = $d14;

     label1:
        return;
    }
    private void computeJacobian()
    {
        org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates r0;
        double d0, d1, $d2, $d3, $d4, $d5, $d6;
        double[][] $r1;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r2;
        int[] $r3;
        java.lang.Class $r4;
        java.lang.Object $r5;
        double[] $r6;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates;

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] jacobian>;

        if $r1 != null goto label1;

        $r2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: org.apache.commons.math3.geometry.euclidean.threed.Vector3D v>;

        $d2 = virtualinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $r2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: org.apache.commons.math3.geometry.euclidean.threed.Vector3D v>;

        $d3 = virtualinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $r2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: org.apache.commons.math3.geometry.euclidean.threed.Vector3D v>;

        $d4 = virtualinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        d0 = $d2 * $d2;

        $d5 = $d3 * $d3;

        d1 = d0 + $d5;

        $d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d1);

        d0 = $d4 * $d4;

        d0 = d1 + d0;

        $r3 = newarray (int)[2];

        $r3[0] = 3;

        $r3[1] = 3;

        $r4 = <java.lang.Double: java.lang.Class TYPE>;

        $r5 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r4, $r3);

        $r1 = (double[][]) $r5;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] jacobian> = $r1;

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] jacobian>;

        $r6 = $r1[0];

        $d6 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double r>;

        $d6 = $d2 / $d6;

        $r6[0] = $d6;

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] jacobian>;

        $r6 = $r1[0];

        $d6 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double r>;

        $d6 = $d3 / $d6;

        $r6[1] = $d6;

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] jacobian>;

        $r6 = $r1[0];

        $d6 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double r>;

        $d6 = $d4 / $d6;

        $r6[2] = $d6;

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] jacobian>;

        $r6 = $r1[1];

        $d6 = neg $d3;

        $d6 = $d6 / d1;

        $r6[0] = $d6;

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] jacobian>;

        $r6 = $r1[1];

        d1 = $d2 / d1;

        $r6[1] = d1;

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] jacobian>;

        $r6 = $r1[2];

        $d2 = $d2 * $d4;

        d1 = $d5 * d0;

        $d2 = $d2 / d1;

        $r6[0] = $d2;

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] jacobian>;

        $r6 = $r1[2];

        $d3 = $d3 * $d4;

        $d4 = $d5 * d0;

        $d3 = $d3 / $d4;

        $r6[1] = $d3;

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] jacobian>;

        $r6 = $r1[2];

        $d5 = neg $d5;

        d0 = $d5 / d0;

        $r6[2] = d0;

     label1:
        return;
    }
    private java.lang.Object writeReplace()
    {
        org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates r0;
        org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates$DataTransferObject $r1;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r2;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates;

        $r1 = new org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates$DataTransferObject;

        $r2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: org.apache.commons.math3.geometry.euclidean.threed.Vector3D v>;

        $d0 = virtualinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $r2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: org.apache.commons.math3.geometry.euclidean.threed.Vector3D v>;

        $d1 = virtualinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $r2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: org.apache.commons.math3.geometry.euclidean.threed.Vector3D v>;

        $d2 = virtualinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        specialinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates$DataTransferObject: void <init>(double,double,double)>($d0, $d1, $d2);

        return $r1;
    }
    public org.apache.commons.math3.geometry.euclidean.threed.Vector3D getCartesian()
    {
        org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates;

        r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: org.apache.commons.math3.geometry.euclidean.threed.Vector3D v>;

        return r1;
    }
    public double getPhi()
    {
        org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates r0;
        double d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates;

        d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double phi>;

        return d0;
    }
    public double getR()
    {
        org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates r0;
        double d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates;

        d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double r>;

        return d0;
    }
    public double getTheta()
    {
        org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates r0;
        double d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates;

        d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double theta>;

        return d0;
    }
    public double[] toCartesianGradient(double[])
    {
        org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates r0;
        double[] $r1, $r2, $r4;
        double $d0, $d1, $d2;
        double[][] $r3;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates;

        $r1 := @parameter0: double[];

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: void computeJacobian()>();

        $r2 = newarray (double)[3];

        $d0 = $r1[0];

        $r3 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] jacobian>;

        $r4 = $r3[0];

        $d1 = $r4[0];

        $d0 = $d0 * $d1;

        $d1 = $r1[1];

        $r3 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] jacobian>;

        $r4 = $r3[1];

        $d2 = $r4[0];

        $d1 = $d1 * $d2;

        $d0 = $d0 + $d1;

        $d1 = $r1[2];

        $r3 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] jacobian>;

        $r4 = $r3[2];

        $d2 = $r4[0];

        $d1 = $d1 * $d2;

        $d0 = $d0 + $d1;

        $r2[0] = $d0;

        $d0 = $r1[0];

        $r3 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] jacobian>;

        $r4 = $r3[0];

        $d1 = $r4[1];

        $d0 = $d0 * $d1;

        $d1 = $r1[1];

        $r3 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] jacobian>;

        $r4 = $r3[1];

        $d2 = $r4[1];

        $d1 = $d1 * $d2;

        $d0 = $d0 + $d1;

        $d1 = $r1[2];

        $r3 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] jacobian>;

        $r4 = $r3[2];

        $d2 = $r4[1];

        $d1 = $d1 * $d2;

        $d0 = $d0 + $d1;

        $r2[1] = $d0;

        $d0 = $r1[0];

        $r3 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] jacobian>;

        $r4 = $r3[0];

        $d1 = $r4[2];

        $d0 = $d0 * $d1;

        $d1 = $r1[2];

        $r3 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] jacobian>;

        $r1 = $r3[2];

        $d2 = $r1[2];

        $d1 = $d1 * $d2;

        $d0 = $d0 + $d1;

        $r2[2] = $d0;

        return $r2;
    }
    public double[][] toCartesianHessian(double[][], double[])
    {
        org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates r0;
        double[][] $r1, r6, r7, $r10;
        double[] $r2, $r8, $r9;
        int[] $r3;
        java.lang.Class $r4;
        java.lang.Object $r5;
        double $d0, $d1, $d2, $d3;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates;

        $r1 := @parameter0: double[][];

        $r2 := @parameter1: double[];

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: void computeJacobian()>();

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: void computeHessians()>();

        $r3 = newarray (int)[2];

        $r3[0] = 3;

        $r3[1] = 3;

        $r4 = <java.lang.Double: java.lang.Class TYPE>;

        $r5 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r4, $r3);

        r6 = (double[][]) $r5;

        $r3 = newarray (int)[2];

        $r3[0] = 3;

        $r3[1] = 3;

        $r4 = <java.lang.Double: java.lang.Class TYPE>;

        $r5 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r4, $r3);

        r7 = (double[][]) $r5;

        $r8 = r6[0];

        $r9 = $r1[0];

        $d0 = $r9[0];

        $r10 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] jacobian>;

        $r9 = $r10[0];

        $d1 = $r9[0];

        $d0 = $d0 * $d1;

        $r9 = $r1[1];

        $d1 = $r9[0];

        $r10 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] jacobian>;

        $r9 = $r10[1];

        $d2 = $r9[0];

        $d1 = $d1 * $d2;

        $d0 = $d0 + $d1;

        $r9 = $r1[2];

        $d1 = $r9[0];

        $r10 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] jacobian>;

        $r9 = $r10[2];

        $d2 = $r9[0];

        $d1 = $d1 * $d2;

        $d0 = $d0 + $d1;

        $r8[0] = $d0;

        $r8 = r6[0];

        $r9 = $r1[0];

        $d0 = $r9[0];

        $r10 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] jacobian>;

        $r9 = $r10[0];

        $d1 = $r9[1];

        $d0 = $d0 * $d1;

        $r9 = $r1[1];

        $d1 = $r9[0];

        $r10 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] jacobian>;

        $r9 = $r10[1];

        $d2 = $r9[1];

        $d1 = $d1 * $d2;

        $d0 = $d0 + $d1;

        $r9 = $r1[2];

        $d1 = $r9[0];

        $r10 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] jacobian>;

        $r9 = $r10[2];

        $d2 = $r9[1];

        $d1 = $d1 * $d2;

        $d0 = $d0 + $d1;

        $r8[1] = $d0;

        $r8 = r6[0];

        $r9 = $r1[0];

        $d0 = $r9[0];

        $r10 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] jacobian>;

        $r9 = $r10[0];

        $d1 = $r9[2];

        $d0 = $d0 * $d1;

        $r9 = $r1[2];

        $d1 = $r9[0];

        $r10 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] jacobian>;

        $r9 = $r10[2];

        $d2 = $r9[2];

        $d1 = $d1 * $d2;

        $d0 = $d0 + $d1;

        $r8[2] = $d0;

        $r8 = r6[1];

        $r9 = $r1[1];

        $d0 = $r9[0];

        $r10 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] jacobian>;

        $r9 = $r10[0];

        $d1 = $r9[0];

        $d0 = $d0 * $d1;

        $r9 = $r1[1];

        $d1 = $r9[1];

        $r10 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] jacobian>;

        $r9 = $r10[1];

        $d2 = $r9[0];

        $d1 = $d1 * $d2;

        $d0 = $d0 + $d1;

        $r9 = $r1[2];

        $d1 = $r9[1];

        $r10 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] jacobian>;

        $r9 = $r10[2];

        $d2 = $r9[0];

        $d1 = $d1 * $d2;

        $d0 = $d0 + $d1;

        $r8[0] = $d0;

        $r8 = r6[1];

        $r9 = $r1[1];

        $d0 = $r9[0];

        $r10 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] jacobian>;

        $r9 = $r10[0];

        $d1 = $r9[1];

        $d0 = $d0 * $d1;

        $r9 = $r1[1];

        $d1 = $r9[1];

        $r10 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] jacobian>;

        $r9 = $r10[1];

        $d2 = $r9[1];

        $d1 = $d1 * $d2;

        $d0 = $d0 + $d1;

        $r9 = $r1[2];

        $d1 = $r9[1];

        $r10 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] jacobian>;

        $r9 = $r10[2];

        $d2 = $r9[1];

        $d1 = $d1 * $d2;

        $d0 = $d0 + $d1;

        $r8[1] = $d0;

        $r8 = r6[2];

        $r9 = $r1[2];

        $d0 = $r9[0];

        $r10 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] jacobian>;

        $r9 = $r10[0];

        $d1 = $r9[0];

        $d0 = $d0 * $d1;

        $r9 = $r1[2];

        $d1 = $r9[1];

        $r10 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] jacobian>;

        $r9 = $r10[1];

        $d2 = $r9[0];

        $d1 = $d1 * $d2;

        $d0 = $d0 + $d1;

        $r9 = $r1[2];

        $d1 = $r9[2];

        $r10 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] jacobian>;

        $r9 = $r10[2];

        $d2 = $r9[0];

        $d1 = $d1 * $d2;

        $d0 = $d0 + $d1;

        $r8[0] = $d0;

        $r8 = r6[2];

        $r9 = $r1[2];

        $d0 = $r9[0];

        $r10 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] jacobian>;

        $r9 = $r10[0];

        $d1 = $r9[1];

        $d0 = $d0 * $d1;

        $r9 = $r1[2];

        $d1 = $r9[1];

        $r10 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] jacobian>;

        $r9 = $r10[1];

        $d2 = $r9[1];

        $d1 = $d1 * $d2;

        $d0 = $d0 + $d1;

        $r9 = $r1[2];

        $d1 = $r9[2];

        $r10 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] jacobian>;

        $r9 = $r10[2];

        $d2 = $r9[1];

        $d1 = $d1 * $d2;

        $d0 = $d0 + $d1;

        $r8[1] = $d0;

        $r8 = r6[2];

        $r9 = $r1[2];

        $d0 = $r9[0];

        $r10 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] jacobian>;

        $r9 = $r10[0];

        $d1 = $r9[2];

        $d0 = $d0 * $d1;

        $r9 = $r1[2];

        $d1 = $r9[2];

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] jacobian>;

        $r9 = $r1[2];

        $d2 = $r9[2];

        $d1 = $d1 * $d2;

        $d0 = $d0 + $d1;

        $r8[2] = $d0;

        $r8 = r7[0];

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] jacobian>;

        $r9 = $r1[0];

        $d0 = $r9[0];

        $r9 = r6[0];

        $d1 = $r9[0];

        $d0 = $d0 * $d1;

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] jacobian>;

        $r9 = $r1[1];

        $d1 = $r9[0];

        $r9 = r6[1];

        $d2 = $r9[0];

        $d1 = $d1 * $d2;

        $d0 = $d0 + $d1;

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] jacobian>;

        $r9 = $r1[2];

        $d1 = $r9[0];

        $r9 = r6[2];

        $d2 = $r9[0];

        $d1 = $d1 * $d2;

        $d0 = $d0 + $d1;

        $r8[0] = $d0;

        $r8 = r7[1];

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] jacobian>;

        $r9 = $r1[0];

        $d0 = $r9[1];

        $r9 = r6[0];

        $d1 = $r9[0];

        $d0 = $d0 * $d1;

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] jacobian>;

        $r9 = $r1[1];

        $d1 = $r9[1];

        $r9 = r6[1];

        $d2 = $r9[0];

        $d1 = $d1 * $d2;

        $d0 = $d0 + $d1;

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] jacobian>;

        $r9 = $r1[2];

        $d1 = $r9[1];

        $r9 = r6[2];

        $d2 = $r9[0];

        $d1 = $d1 * $d2;

        $d0 = $d0 + $d1;

        $r8[0] = $d0;

        $r8 = r7[2];

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] jacobian>;

        $r9 = $r1[0];

        $d0 = $r9[2];

        $r9 = r6[0];

        $d1 = $r9[0];

        $d0 = $d0 * $d1;

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] jacobian>;

        $r9 = $r1[2];

        $d1 = $r9[2];

        $r9 = r6[2];

        $d2 = $r9[0];

        $d1 = $d1 * $d2;

        $d0 = $d0 + $d1;

        $r8[0] = $d0;

        $r8 = r7[1];

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] jacobian>;

        $r9 = $r1[0];

        $d0 = $r9[1];

        $r9 = r6[0];

        $d1 = $r9[1];

        $d0 = $d0 * $d1;

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] jacobian>;

        $r9 = $r1[1];

        $d1 = $r9[1];

        $r9 = r6[1];

        $d2 = $r9[1];

        $d1 = $d1 * $d2;

        $d0 = $d0 + $d1;

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] jacobian>;

        $r9 = $r1[2];

        $d1 = $r9[1];

        $r9 = r6[2];

        $d2 = $r9[1];

        $d1 = $d1 * $d2;

        $d0 = $d0 + $d1;

        $r8[1] = $d0;

        $r8 = r7[2];

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] jacobian>;

        $r9 = $r1[0];

        $d0 = $r9[2];

        $r9 = r6[0];

        $d1 = $r9[1];

        $d0 = $d0 * $d1;

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] jacobian>;

        $r9 = $r1[2];

        $d1 = $r9[2];

        $r9 = r6[2];

        $d2 = $r9[1];

        $d1 = $d1 * $d2;

        $d0 = $d0 + $d1;

        $r8[1] = $d0;

        $r8 = r7[2];

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] jacobian>;

        $r9 = $r1[0];

        $d0 = $r9[2];

        $r9 = r6[0];

        $d1 = $r9[2];

        $d0 = $d0 * $d1;

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] jacobian>;

        $r9 = $r1[2];

        $d1 = $r9[2];

        $r9 = r6[2];

        $d2 = $r9[2];

        $d1 = $d1 * $d2;

        $d0 = $d0 + $d1;

        $r8[2] = $d0;

        $r8 = r7[0];

        $d0 = $r8[0];

        $d1 = $r2[0];

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] rHessian>;

        $r9 = $r1[0];

        $d2 = $r9[0];

        $d1 = $d1 * $d2;

        $d2 = $r2[1];

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] thetaHessian>;

        $r9 = $r1[0];

        $d3 = $r9[0];

        $d2 = $d2 * $d3;

        $d1 = $d1 + $d2;

        $d2 = $r2[2];

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] phiHessian>;

        $r9 = $r1[0];

        $d3 = $r9[0];

        $d2 = $d2 * $d3;

        $d1 = $d1 + $d2;

        $d0 = $d0 + $d1;

        $r8[0] = $d0;

        $r8 = r7[1];

        $d0 = $r8[0];

        $d1 = $r2[0];

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] rHessian>;

        $r9 = $r1[1];

        $d2 = $r9[0];

        $d1 = $d1 * $d2;

        $d2 = $r2[1];

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] thetaHessian>;

        $r9 = $r1[1];

        $d3 = $r9[0];

        $d2 = $d2 * $d3;

        $d1 = $d1 + $d2;

        $d2 = $r2[2];

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] phiHessian>;

        $r9 = $r1[1];

        $d3 = $r9[0];

        $d2 = $d2 * $d3;

        $d1 = $d1 + $d2;

        $d0 = $d0 + $d1;

        $r8[0] = $d0;

        $r8 = r7[2];

        $d0 = $r8[0];

        $d1 = $r2[0];

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] rHessian>;

        $r9 = $r1[2];

        $d2 = $r9[0];

        $d1 = $d1 * $d2;

        $d2 = $r2[2];

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] phiHessian>;

        $r9 = $r1[2];

        $d3 = $r9[0];

        $d2 = $d2 * $d3;

        $d1 = $d1 + $d2;

        $d0 = $d0 + $d1;

        $r8[0] = $d0;

        $r8 = r7[1];

        $d0 = $r8[1];

        $d1 = $r2[0];

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] rHessian>;

        $r9 = $r1[1];

        $d2 = $r9[1];

        $d1 = $d1 * $d2;

        $d2 = $r2[1];

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] thetaHessian>;

        $r9 = $r1[1];

        $d3 = $r9[1];

        $d2 = $d2 * $d3;

        $d1 = $d1 + $d2;

        $d2 = $r2[2];

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] phiHessian>;

        $r9 = $r1[1];

        $d3 = $r9[1];

        $d2 = $d2 * $d3;

        $d1 = $d1 + $d2;

        $d0 = $d0 + $d1;

        $r8[1] = $d0;

        $r8 = r7[2];

        $d0 = $r8[1];

        $d1 = $r2[0];

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] rHessian>;

        $r9 = $r1[2];

        $d2 = $r9[1];

        $d1 = $d1 * $d2;

        $d2 = $r2[2];

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] phiHessian>;

        $r9 = $r1[2];

        $d3 = $r9[1];

        $d2 = $d2 * $d3;

        $d1 = $d1 + $d2;

        $d0 = $d0 + $d1;

        $r8[1] = $d0;

        $r8 = r7[2];

        $d0 = $r8[2];

        $d1 = $r2[0];

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] rHessian>;

        $r9 = $r1[2];

        $d2 = $r9[2];

        $d1 = $d1 * $d2;

        $d2 = $r2[2];

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates: double[][] phiHessian>;

        $r2 = $r1[2];

        $d3 = $r2[2];

        $d2 = $d2 * $d3;

        $d1 = $d1 + $d2;

        $d0 = $d0 + $d1;

        $r8[2] = $d0;

        $r2 = r7[0];

        $r8 = r7[1];

        $d0 = $r8[0];

        $r2[1] = $d0;

        $r2 = r7[0];

        $r8 = r7[2];

        $d0 = $r8[0];

        $r2[2] = $d0;

        $r2 = r7[1];

        $r8 = r7[2];

        $d0 = $r8[1];

        $r2[2] = $d0;

        return r7;
    }
