org.apache.commons.math3.geometry.spherical.twod.Edge extends java.lang.Object
private final org.apache.commons.math3.geometry.spherical.twod.Circle circle
private org.apache.commons.math3.geometry.spherical.twod.Vertex end
private final double length
private final org.apache.commons.math3.geometry.spherical.twod.Vertex start
    void <init>(org.apache.commons.math3.geometry.spherical.twod.Vertex, org.apache.commons.math3.geometry.spherical.twod.Vertex, double, org.apache.commons.math3.geometry.spherical.twod.Circle)
    {
        org.apache.commons.math3.geometry.spherical.twod.Edge r0;
        org.apache.commons.math3.geometry.spherical.twod.Vertex $r1, $r2;
        double $d0;
        org.apache.commons.math3.geometry.spherical.twod.Circle $r3;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.Edge;

        $r1 := @parameter0: org.apache.commons.math3.geometry.spherical.twod.Vertex;

        $r2 := @parameter1: org.apache.commons.math3.geometry.spherical.twod.Vertex;

        $d0 := @parameter2: double;

        $r3 := @parameter3: org.apache.commons.math3.geometry.spherical.twod.Circle;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Vertex start> = $r1;

        r0.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Vertex end> = $r2;

        r0.<org.apache.commons.math3.geometry.spherical.twod.Edge: double length> = $d0;

        r0.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Circle circle> = $r3;

        virtualinvoke $r1.<org.apache.commons.math3.geometry.spherical.twod.Vertex: void setOutgoing(org.apache.commons.math3.geometry.spherical.twod.Edge)>(r0);

        virtualinvoke $r2.<org.apache.commons.math3.geometry.spherical.twod.Vertex: void setIncoming(org.apache.commons.math3.geometry.spherical.twod.Edge)>(r0);

        return;
    }
    private org.apache.commons.math3.geometry.spherical.twod.Vertex addSubEdge(org.apache.commons.math3.geometry.spherical.twod.Vertex, org.apache.commons.math3.geometry.spherical.twod.Vertex, double, java.util.List, org.apache.commons.math3.geometry.spherical.twod.Circle)
    {
        org.apache.commons.math3.geometry.spherical.twod.Edge r0, r4;
        org.apache.commons.math3.geometry.spherical.twod.Vertex $r1, r5;
        double $d0, $d1;
        java.util.List r2;
        org.apache.commons.math3.geometry.spherical.twod.Circle $r3, $r6;
        byte $b0;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.Edge;

        r5 := @parameter0: org.apache.commons.math3.geometry.spherical.twod.Vertex;

        $r1 := @parameter1: org.apache.commons.math3.geometry.spherical.twod.Vertex;

        $d0 := @parameter2: double;

        r2 := @parameter3: java.util.List;

        $r3 := @parameter4: org.apache.commons.math3.geometry.spherical.twod.Circle;

        $r6 = r0.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Circle circle>;

        $d1 = virtualinvoke $r6.<org.apache.commons.math3.geometry.spherical.twod.Circle: double getTolerance()>();

        $b0 = $d0 cmpg $d1;

        if $b0 > 0 goto label1;

        return r5;

     label1:
        virtualinvoke $r1.<org.apache.commons.math3.geometry.spherical.twod.Vertex: void bindWith(org.apache.commons.math3.geometry.spherical.twod.Circle)>($r3);

        r4 = new org.apache.commons.math3.geometry.spherical.twod.Edge;

        $r3 = r0.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Circle circle>;

        specialinvoke r4.<org.apache.commons.math3.geometry.spherical.twod.Edge: void <init>(org.apache.commons.math3.geometry.spherical.twod.Vertex,org.apache.commons.math3.geometry.spherical.twod.Vertex,double,org.apache.commons.math3.geometry.spherical.twod.Circle)>(r5, $r1, $d0, $r3);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r4);

        return $r1;
    }
    public org.apache.commons.math3.geometry.spherical.twod.Circle getCircle()
    {
        org.apache.commons.math3.geometry.spherical.twod.Edge r0;
        org.apache.commons.math3.geometry.spherical.twod.Circle r1;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.Edge;

        r1 = r0.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Circle circle>;

        return r1;
    }
    public org.apache.commons.math3.geometry.spherical.twod.Vertex getEnd()
    {
        org.apache.commons.math3.geometry.spherical.twod.Edge r0;
        org.apache.commons.math3.geometry.spherical.twod.Vertex r1;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.Edge;

        r1 = r0.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Vertex end>;

        return r1;
    }
    public double getLength()
    {
        org.apache.commons.math3.geometry.spherical.twod.Edge r0;
        double d0;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.Edge;

        d0 = r0.<org.apache.commons.math3.geometry.spherical.twod.Edge: double length>;

        return d0;
    }
    public org.apache.commons.math3.geometry.euclidean.threed.Vector3D getPointAt(double)
    {
        org.apache.commons.math3.geometry.spherical.twod.Edge r0;
        double $d0, $d1;
        org.apache.commons.math3.geometry.spherical.twod.Circle $r1, $r2;
        org.apache.commons.math3.geometry.spherical.twod.Vertex $r3;
        org.apache.commons.math3.geometry.spherical.twod.S2Point $r4;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r5;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.Edge;

        $d0 := @parameter0: double;

        $r2 = r0.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Circle circle>;

        $r1 = r0.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Circle circle>;

        $r3 = r0.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Vertex start>;

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.geometry.spherical.twod.Vertex: org.apache.commons.math3.geometry.spherical.twod.S2Point getLocation()>();

        $r5 = virtualinvoke $r4.<org.apache.commons.math3.geometry.spherical.twod.S2Point: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getVector()>();

        $d1 = virtualinvoke $r1.<org.apache.commons.math3.geometry.spherical.twod.Circle: double getPhase(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r5);

        $d0 = $d1 + $d0;

        $r5 = virtualinvoke $r2.<org.apache.commons.math3.geometry.spherical.twod.Circle: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getPointAt(double)>($d0);

        return $r5;
    }
    public org.apache.commons.math3.geometry.spherical.twod.Vertex getStart()
    {
        org.apache.commons.math3.geometry.spherical.twod.Edge r0;
        org.apache.commons.math3.geometry.spherical.twod.Vertex r1;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.Edge;

        r1 = r0.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Vertex start>;

        return r1;
    }
    void setNextEdge(org.apache.commons.math3.geometry.spherical.twod.Edge)
    {
        org.apache.commons.math3.geometry.spherical.twod.Edge r0, $r1;
        org.apache.commons.math3.geometry.spherical.twod.Vertex $r2;
        org.apache.commons.math3.geometry.spherical.twod.Circle $r3;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.Edge;

        $r1 := @parameter0: org.apache.commons.math3.geometry.spherical.twod.Edge;

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Vertex getStart()>();

        r0.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Vertex end> = $r2;

        $r2 = r0.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Vertex end>;

        virtualinvoke $r2.<org.apache.commons.math3.geometry.spherical.twod.Vertex: void setIncoming(org.apache.commons.math3.geometry.spherical.twod.Edge)>(r0);

        $r2 = r0.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Vertex end>;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Circle getCircle()>();

        virtualinvoke $r2.<org.apache.commons.math3.geometry.spherical.twod.Vertex: void bindWith(org.apache.commons.math3.geometry.spherical.twod.Circle)>($r3);

        return;
    }
    void split(org.apache.commons.math3.geometry.spherical.twod.Circle, java.util.List, java.util.List)
    {
        org.apache.commons.math3.geometry.spherical.twod.Edge r0;
        org.apache.commons.math3.geometry.spherical.twod.Circle $r1, $r4;
        java.util.List r2, r3;
        double d0, d1, d2, $d3, $d4, $d5, $d6;
        org.apache.commons.math3.geometry.spherical.twod.Vertex $r5, $r9;
        org.apache.commons.math3.geometry.spherical.twod.S2Point $r6;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r7;
        org.apache.commons.math3.geometry.spherical.oned.Arc $r8;
        byte $b0;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.Edge;

        $r1 := @parameter0: org.apache.commons.math3.geometry.spherical.twod.Circle;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: java.util.List;

        $r4 = r0.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Circle circle>;

        $r5 = r0.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Vertex start>;

        $r6 = virtualinvoke $r5.<org.apache.commons.math3.geometry.spherical.twod.Vertex: org.apache.commons.math3.geometry.spherical.twod.S2Point getLocation()>();

        $r7 = virtualinvoke $r6.<org.apache.commons.math3.geometry.spherical.twod.S2Point: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getVector()>();

        $d3 = virtualinvoke $r4.<org.apache.commons.math3.geometry.spherical.twod.Circle: double getPhase(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r7);

        $r4 = r0.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Circle circle>;

        $r8 = virtualinvoke $r4.<org.apache.commons.math3.geometry.spherical.twod.Circle: org.apache.commons.math3.geometry.spherical.oned.Arc getInsideArc(org.apache.commons.math3.geometry.spherical.twod.Circle)>($r1);

        d2 = virtualinvoke $r8.<org.apache.commons.math3.geometry.spherical.oned.Arc: double getInf()>();

        d1 = 3.141592653589793 + $d3;

        d2 = staticinvoke <org.apache.commons.math3.util.MathUtils: double normalizeAngle(double,double)>(d2, d1);

        d2 = d2 - $d3;

        d1 = virtualinvoke $r8.<org.apache.commons.math3.geometry.spherical.oned.Arc: double getSize()>();

        d1 = d2 + d1;

        d0 = d1 - 6.283185307179586;

        $r4 = r0.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Circle circle>;

        $d4 = virtualinvoke $r4.<org.apache.commons.math3.geometry.spherical.twod.Circle: double getTolerance()>();

        $r5 = r0.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Vertex start>;

        $d5 = r0.<org.apache.commons.math3.geometry.spherical.twod.Edge: double length>;

        $d5 = $d5 - $d4;

        $b0 = d0 cmpl $d5;

        if $b0 < 0 goto label1;

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r0);

        return;

     label1:
        $d5 = 0.0;

        $b0 = d0 cmpl 0.0;

        if $b0 < 0 goto label2;

        $r9 = new org.apache.commons.math3.geometry.spherical.twod.Vertex;

        $r6 = new org.apache.commons.math3.geometry.spherical.twod.S2Point;

        $r4 = r0.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Circle circle>;

        $d5 = $d3 + d0;

        $r7 = virtualinvoke $r4.<org.apache.commons.math3.geometry.spherical.twod.Circle: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getPointAt(double)>($d5);

        specialinvoke $r6.<org.apache.commons.math3.geometry.spherical.twod.S2Point: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r7);

        specialinvoke $r9.<org.apache.commons.math3.geometry.spherical.twod.Vertex: void <init>(org.apache.commons.math3.geometry.spherical.twod.S2Point)>($r6);

        $r5 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Vertex addSubEdge(org.apache.commons.math3.geometry.spherical.twod.Vertex,org.apache.commons.math3.geometry.spherical.twod.Vertex,double,java.util.List,org.apache.commons.math3.geometry.spherical.twod.Circle)>($r5, $r9, d0, r3, $r1);

        $d5 = d0;

     label2:
        $d6 = r0.<org.apache.commons.math3.geometry.spherical.twod.Edge: double length>;

        $d6 = $d6 - $d4;

        $b0 = d2 cmpl $d6;

        if $b0 < 0 goto label4;

        $b0 = d0 cmpl 0.0;

        if $b0 < 0 goto label3;

        $r9 = r0.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Vertex end>;

        d2 = r0.<org.apache.commons.math3.geometry.spherical.twod.Edge: double length>;

        d2 = d2 - $d5;

        specialinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Vertex addSubEdge(org.apache.commons.math3.geometry.spherical.twod.Vertex,org.apache.commons.math3.geometry.spherical.twod.Vertex,double,java.util.List,org.apache.commons.math3.geometry.spherical.twod.Circle)>($r5, $r9, d2, r2, $r1);

        return;

     label3:
        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r0);

        return;

     label4:
        $r9 = new org.apache.commons.math3.geometry.spherical.twod.Vertex;

        $r6 = new org.apache.commons.math3.geometry.spherical.twod.S2Point;

        $r4 = r0.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Circle circle>;

        d0 = $d3 + d2;

        $r7 = virtualinvoke $r4.<org.apache.commons.math3.geometry.spherical.twod.Circle: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getPointAt(double)>(d0);

        specialinvoke $r6.<org.apache.commons.math3.geometry.spherical.twod.S2Point: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r7);

        specialinvoke $r9.<org.apache.commons.math3.geometry.spherical.twod.Vertex: void <init>(org.apache.commons.math3.geometry.spherical.twod.S2Point)>($r6);

        d0 = d2 - $d5;

        $r5 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Vertex addSubEdge(org.apache.commons.math3.geometry.spherical.twod.Vertex,org.apache.commons.math3.geometry.spherical.twod.Vertex,double,java.util.List,org.apache.commons.math3.geometry.spherical.twod.Circle)>($r5, $r9, d0, r2, $r1);

        d0 = r0.<org.apache.commons.math3.geometry.spherical.twod.Edge: double length>;

        $d4 = d0 - $d4;

        $b0 = d1 cmpl $d4;

        if $b0 < 0 goto label5;

        $r9 = r0.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Vertex end>;

        $d3 = r0.<org.apache.commons.math3.geometry.spherical.twod.Edge: double length>;

        d2 = $d3 - d2;

        specialinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Vertex addSubEdge(org.apache.commons.math3.geometry.spherical.twod.Vertex,org.apache.commons.math3.geometry.spherical.twod.Vertex,double,java.util.List,org.apache.commons.math3.geometry.spherical.twod.Circle)>($r5, $r9, d2, r3, $r1);

        return;

     label5:
        $r9 = new org.apache.commons.math3.geometry.spherical.twod.Vertex;

        $r6 = new org.apache.commons.math3.geometry.spherical.twod.S2Point;

        $r4 = r0.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Circle circle>;

        $d3 = $d3 + d2;

        $r7 = virtualinvoke $r4.<org.apache.commons.math3.geometry.spherical.twod.Circle: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getPointAt(double)>($d3);

        specialinvoke $r6.<org.apache.commons.math3.geometry.spherical.twod.S2Point: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r7);

        specialinvoke $r9.<org.apache.commons.math3.geometry.spherical.twod.Vertex: void <init>(org.apache.commons.math3.geometry.spherical.twod.S2Point)>($r6);

        $d3 = d2 - d2;

        $r5 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Vertex addSubEdge(org.apache.commons.math3.geometry.spherical.twod.Vertex,org.apache.commons.math3.geometry.spherical.twod.Vertex,double,java.util.List,org.apache.commons.math3.geometry.spherical.twod.Circle)>($r5, $r9, $d3, r3, $r1);

        $r9 = r0.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Vertex end>;

        $d3 = r0.<org.apache.commons.math3.geometry.spherical.twod.Edge: double length>;

        d2 = $d3 - d2;

        specialinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Vertex addSubEdge(org.apache.commons.math3.geometry.spherical.twod.Vertex,org.apache.commons.math3.geometry.spherical.twod.Vertex,double,java.util.List,org.apache.commons.math3.geometry.spherical.twod.Circle)>($r5, $r9, d2, r2, $r1);

        return;
    }
