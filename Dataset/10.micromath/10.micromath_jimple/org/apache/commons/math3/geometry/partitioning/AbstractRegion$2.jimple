org.apache.commons.math3.geometry.partitioning.AbstractRegion$2 extends java.lang.Object implements org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor
final org.apache.commons.math3.geometry.partitioning.AbstractRegion this$0
    void <init>(org.apache.commons.math3.geometry.partitioning.AbstractRegion)
    {
        org.apache.commons.math3.geometry.partitioning.AbstractRegion$2 r0;
        org.apache.commons.math3.geometry.partitioning.AbstractRegion $r1;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractRegion$2;

        $r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.AbstractRegion;

        r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion$2: org.apache.commons.math3.geometry.partitioning.AbstractRegion this$0> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public void visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.partitioning.AbstractRegion$2 r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractRegion$2;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        return;
    }
    public void visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.partitioning.AbstractRegion$2 r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, $r2;
        java.lang.Boolean $r3;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractRegion$2;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getParent()>();

        if $r2 == null goto label1;

        $r2 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getParent()>();

        $r2 = virtualinvoke $r2.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        if r1 != $r2 goto label2;

     label1:
        $r3 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: void setAttribute(java.lang.Object)>($r3);

        return;

     label2:
        $r3 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: void setAttribute(java.lang.Object)>($r3);

        return;
    }
    public org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.partitioning.AbstractRegion$2 r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order r2;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractRegion$2;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r2 = <org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order: org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order PLUS_SUB_MINUS>;

        return r2;
    }
