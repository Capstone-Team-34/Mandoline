org.apache.commons.math3.geometry.partitioning.BoundaryBuilder extends java.lang.Object implements org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor
    void <init>()
    {
        org.apache.commons.math3.geometry.partitioning.BoundaryBuilder r0;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.BoundaryBuilder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public void visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.partitioning.BoundaryBuilder r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, $r6;
        org.apache.commons.math3.geometry.partitioning.Characterization r2, r8;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane r3, r4, $r7;
        org.apache.commons.math3.geometry.partitioning.NodesSet r5, $r9;
        boolean $z0;
        org.apache.commons.math3.geometry.partitioning.BoundaryAttribute $r10;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.BoundaryBuilder;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r3 = null;

        r4 = null;

        r5 = null;

        r2 = new org.apache.commons.math3.geometry.partitioning.Characterization;

        $r6 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        $r7 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        $r7 = interfaceinvoke $r7.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane copySelf()>();

        specialinvoke r2.<org.apache.commons.math3.geometry.partitioning.Characterization: void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)>($r6, $r7);

        $z0 = virtualinvoke r2.<org.apache.commons.math3.geometry.partitioning.Characterization: boolean touchOutside()>();

        if $z0 == 0 goto label1;

        r8 = new org.apache.commons.math3.geometry.partitioning.Characterization;

        $r6 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        $r7 = virtualinvoke r2.<org.apache.commons.math3.geometry.partitioning.Characterization: org.apache.commons.math3.geometry.partitioning.SubHyperplane outsideTouching()>();

        specialinvoke r8.<org.apache.commons.math3.geometry.partitioning.Characterization: void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)>($r6, $r7);

        $z0 = virtualinvoke r8.<org.apache.commons.math3.geometry.partitioning.Characterization: boolean touchInside()>();

        if $z0 == 0 goto label1;

        r3 = virtualinvoke r8.<org.apache.commons.math3.geometry.partitioning.Characterization: org.apache.commons.math3.geometry.partitioning.SubHyperplane insideTouching()>();

        r5 = new org.apache.commons.math3.geometry.partitioning.NodesSet;

        specialinvoke r5.<org.apache.commons.math3.geometry.partitioning.NodesSet: void <init>()>();

        $r9 = virtualinvoke r8.<org.apache.commons.math3.geometry.partitioning.Characterization: org.apache.commons.math3.geometry.partitioning.NodesSet getInsideSplitters()>();

        virtualinvoke r5.<org.apache.commons.math3.geometry.partitioning.NodesSet: void addAll(java.lang.Iterable)>($r9);

        $r9 = virtualinvoke r2.<org.apache.commons.math3.geometry.partitioning.Characterization: org.apache.commons.math3.geometry.partitioning.NodesSet getOutsideSplitters()>();

        virtualinvoke r5.<org.apache.commons.math3.geometry.partitioning.NodesSet: void addAll(java.lang.Iterable)>($r9);

     label1:
        $z0 = virtualinvoke r2.<org.apache.commons.math3.geometry.partitioning.Characterization: boolean touchInside()>();

        if $z0 == 0 goto label3;

        r8 = new org.apache.commons.math3.geometry.partitioning.Characterization;

        $r6 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        $r7 = virtualinvoke r2.<org.apache.commons.math3.geometry.partitioning.Characterization: org.apache.commons.math3.geometry.partitioning.SubHyperplane insideTouching()>();

        specialinvoke r8.<org.apache.commons.math3.geometry.partitioning.Characterization: void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)>($r6, $r7);

        $z0 = virtualinvoke r8.<org.apache.commons.math3.geometry.partitioning.Characterization: boolean touchOutside()>();

        if $z0 == 0 goto label3;

        r4 = virtualinvoke r8.<org.apache.commons.math3.geometry.partitioning.Characterization: org.apache.commons.math3.geometry.partitioning.SubHyperplane outsideTouching()>();

        if r5 != null goto label2;

        r5 = new org.apache.commons.math3.geometry.partitioning.NodesSet;

        specialinvoke r5.<org.apache.commons.math3.geometry.partitioning.NodesSet: void <init>()>();

     label2:
        $r9 = virtualinvoke r8.<org.apache.commons.math3.geometry.partitioning.Characterization: org.apache.commons.math3.geometry.partitioning.NodesSet getOutsideSplitters()>();

        virtualinvoke r5.<org.apache.commons.math3.geometry.partitioning.NodesSet: void addAll(java.lang.Iterable)>($r9);

        $r9 = virtualinvoke r2.<org.apache.commons.math3.geometry.partitioning.Characterization: org.apache.commons.math3.geometry.partitioning.NodesSet getInsideSplitters()>();

        virtualinvoke r5.<org.apache.commons.math3.geometry.partitioning.NodesSet: void addAll(java.lang.Iterable)>($r9);

     label3:
        if r5 == null goto label5;

        $r6 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getParent()>();

     label4:
        if $r6 == null goto label5;

        virtualinvoke r5.<org.apache.commons.math3.geometry.partitioning.NodesSet: void add(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r6);

        $r6 = virtualinvoke $r6.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getParent()>();

        goto label4;

     label5:
        $r10 = new org.apache.commons.math3.geometry.partitioning.BoundaryAttribute;

        specialinvoke $r10.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.NodesSet)>(r3, r4, r5);

        virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: void setAttribute(java.lang.Object)>($r10);

        return;
    }
    public void visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.partitioning.BoundaryBuilder r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.BoundaryBuilder;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        return;
    }
    public org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.partitioning.BoundaryBuilder r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order r2;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.BoundaryBuilder;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r2 = <org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order: org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order PLUS_MINUS_SUB>;

        return r2;
    }
