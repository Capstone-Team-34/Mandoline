org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet extends org.apache.commons.math3.geometry.partitioning.AbstractRegion
private java.util.List loops
    public void <init>(double)
    {
        org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet;

        $d0 := @parameter0: double;

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: void <init>(double)>($d0);

        return;
    }
    public transient void <init>(double, org.apache.commons.math3.geometry.spherical.twod.S2Point[])
    {
        org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet r0;
        double $d0;
        org.apache.commons.math3.geometry.spherical.twod.S2Point[] $r1;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r2;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet;

        $d0 := @parameter0: double;

        $r1 := @parameter1: org.apache.commons.math3.geometry.spherical.twod.S2Point[];

        $r2 = staticinvoke <org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: org.apache.commons.math3.geometry.partitioning.BSPTree verticesToTree(double,org.apache.commons.math3.geometry.spherical.twod.S2Point[])>($d0, $r1);

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree,double)>($r2, $d0);

        return;
    }
    public void <init>(java.util.Collection, double)
    {
        org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet r0;
        java.util.Collection r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet;

        r1 := @parameter0: java.util.Collection;

        $d0 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: void <init>(java.util.Collection,double)>(r1, $d0);

        return;
    }
    public void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double)
    {
        org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r1;
        double $d0;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r2, $r3, $r7;
        org.apache.commons.math3.geometry.spherical.twod.SubCircle $r4;
        org.apache.commons.math3.geometry.spherical.twod.Circle $r5;
        java.lang.Boolean $r6;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d0 := @parameter1: double;

        $r2 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r5 = new org.apache.commons.math3.geometry.spherical.twod.Circle;

        specialinvoke $r5.<org.apache.commons.math3.geometry.spherical.twod.Circle: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double)>($r1, $d0);

        $r4 = virtualinvoke $r5.<org.apache.commons.math3.geometry.spherical.twod.Circle: org.apache.commons.math3.geometry.spherical.twod.SubCircle wholeHyperplane()>();

        $r3 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r6 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        specialinvoke $r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r6);

        $r7 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r6 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        specialinvoke $r7.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r6);

        specialinvoke $r2.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)>($r4, $r3, $r7, null);

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree,double)>($r2, $d0);

        return;
    }
    public void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double, int, double)
    {
        org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r1, $r2;
        double $d0, $d1;
        int $i0;
        org.apache.commons.math3.geometry.spherical.twod.S2Point[] $r3;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $r2 := @parameter1: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d0 := @parameter2: double;

        $i0 := @parameter3: int;

        $d1 := @parameter4: double;

        $r3 = staticinvoke <org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: org.apache.commons.math3.geometry.spherical.twod.S2Point[] createRegularPolygonVertices(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,int)>($r1, $r2, $d0, $i0);

        specialinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: void <init>(double,org.apache.commons.math3.geometry.spherical.twod.S2Point[])>($d1, $r3);

        return;
    }
    public void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree, double)
    {
        org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $d0 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree,double)>(r1, $d0);

        return;
    }
    private static org.apache.commons.math3.geometry.spherical.twod.S2Point[] createRegularPolygonVertices(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double, int)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r0, $r1;
        double $d0;
        int $i0, i1, $i2;
        org.apache.commons.math3.geometry.spherical.twod.S2Point[] r2;
        org.apache.commons.math3.geometry.euclidean.threed.Rotation r3;
        org.apache.commons.math3.geometry.euclidean.threed.RotationConvention $r4;
        org.apache.commons.math3.geometry.spherical.twod.S2Point $r5, $r6;

        $r0 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $r1 := @parameter1: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d0 := @parameter2: double;

        $i0 := @parameter3: int;

        r2 = newarray (org.apache.commons.math3.geometry.spherical.twod.S2Point)[$i0];

        r3 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        $r1 = staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r0, $r1);

        $r4 = <org.apache.commons.math3.geometry.euclidean.threed.RotationConvention: org.apache.commons.math3.geometry.euclidean.threed.RotationConvention VECTOR_OPERATOR>;

        specialinvoke r3.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.RotationConvention)>($r1, $d0, $r4);

        $r5 = new org.apache.commons.math3.geometry.spherical.twod.S2Point;

        $r1 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r0);

        specialinvoke $r5.<org.apache.commons.math3.geometry.spherical.twod.S2Point: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r1);

        r2[0] = $r5;

        r3 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        $d0 = (double) $i0;

        $d0 = 6.283185307179586 / $d0;

        $r4 = <org.apache.commons.math3.geometry.euclidean.threed.RotationConvention: org.apache.commons.math3.geometry.euclidean.threed.RotationConvention VECTOR_OPERATOR>;

        specialinvoke r3.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.RotationConvention)>($r0, $d0, $r4);

        i1 = 1;

     label1:
        if i1 >= $i0 goto label2;

        $r5 = new org.apache.commons.math3.geometry.spherical.twod.S2Point;

        $i2 = i1 + -1;

        $r6 = r2[$i2];

        $r0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.spherical.twod.S2Point: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getVector()>();

        $r0 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r0);

        specialinvoke $r5.<org.apache.commons.math3.geometry.spherical.twod.S2Point: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r0);

        r2[i1] = $r5;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r2;
    }
    private java.util.List getInsidePoints()
    {
        org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet r0;
        org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer r1;
        double $d0;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r2;
        java.util.List $r3;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet;

        r1 = new org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: double getTolerance()>();

        specialinvoke r1.<org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer: void <init>(double)>($d0);

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(1);

        virtualinvoke $r2.<org.apache.commons.math3.geometry.partitioning.BSPTree: void visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)>(r1);

        $r3 = virtualinvoke r1.<org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer: java.util.List getConvexCellsInsidePoints()>();

        return $r3;
    }
    private java.util.List getOutsidePoints()
    {
        org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet r0, r4;
        org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer r1;
        org.apache.commons.math3.geometry.partitioning.RegionFactory $r2;
        org.apache.commons.math3.geometry.partitioning.Region $r3;
        double $d0;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r5;
        java.util.List $r6;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet;

        $r2 = new org.apache.commons.math3.geometry.partitioning.RegionFactory;

        specialinvoke $r2.<org.apache.commons.math3.geometry.partitioning.RegionFactory: void <init>()>();

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.geometry.partitioning.RegionFactory: org.apache.commons.math3.geometry.partitioning.Region getComplement(org.apache.commons.math3.geometry.partitioning.Region)>(r0);

        r4 = (org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet) $r3;

        r1 = new org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: double getTolerance()>();

        specialinvoke r1.<org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer: void <init>(double)>($d0);

        $r5 = virtualinvoke r4.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(1);

        virtualinvoke $r5.<org.apache.commons.math3.geometry.partitioning.BSPTree: void visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)>(r1);

        $r6 = virtualinvoke r1.<org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer: java.util.List getConvexCellsInsidePoints()>();

        return $r6;
    }
    private static void insertEdges(double, org.apache.commons.math3.geometry.partitioning.BSPTree, java.util.List)
    {
        double $d0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r0, $r7;
        java.util.List r1;
        java.util.ArrayList r2, r3;
        org.apache.commons.math3.geometry.spherical.twod.Edge r4, r10;
        int i0, $i1;
        java.lang.Object $r5;
        org.apache.commons.math3.geometry.spherical.twod.Circle $r6;
        boolean $z0;
        java.lang.Boolean $r8;
        java.util.Iterator $r9;

        $d0 := @parameter0: double;

        r0 := @parameter1: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r1 := @parameter2: java.util.List;

        r4 = null;

        i0 = 0;

     label01:
        if r4 != null goto label02;

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if i0 >= $i1 goto label02;

        $i1 = i0 + 1;

        $r5 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i0);

        r4 = (org.apache.commons.math3.geometry.spherical.twod.Edge) $r5;

        $r6 = virtualinvoke r4.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Circle getCircle()>();

        $z0 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: boolean insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)>($r6);

        if $z0 != 0 goto label11;

        r4 = null;

        i0 = $i1;

        goto label01;

     label02:
        if r4 != null goto label05;

        $r7 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getParent()>();

        if $r7 == null goto label03;

        $r7 = virtualinvoke $r7.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        if r0 != $r7 goto label04;

     label03:
        $r8 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: void setAttribute(java.lang.Object)>($r8);

        return;

     label04:
        $r8 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: void setAttribute(java.lang.Object)>($r8);

        return;

     label05:
        r3 = new java.util.ArrayList;

        specialinvoke r3.<java.util.ArrayList: void <init>()>();

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        $r9 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label06:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label07;

        $r5 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.apache.commons.math3.geometry.spherical.twod.Edge) $r5;

        if r10 == r4 goto label06;

        $r6 = virtualinvoke r4.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Circle getCircle()>();

        virtualinvoke r10.<org.apache.commons.math3.geometry.spherical.twod.Edge: void split(org.apache.commons.math3.geometry.spherical.twod.Circle,java.util.List,java.util.List)>($r6, r3, r2);

        goto label06;

     label07:
        $z0 = interfaceinvoke r3.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label09;

        $r7 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        staticinvoke <org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: void insertEdges(double,org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List)>($d0, $r7, r3);

     label08:
        $z0 = interfaceinvoke r2.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label10;

        r0 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        staticinvoke <org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: void insertEdges(double,org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List)>($d0, r0, r2);

        return;

     label09:
        $r7 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        $r8 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        virtualinvoke $r7.<org.apache.commons.math3.geometry.partitioning.BSPTree: void setAttribute(java.lang.Object)>($r8);

        goto label08;

     label10:
        r0 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        $r8 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: void setAttribute(java.lang.Object)>($r8);

        return;

     label11:
        i0 = $i1;

        goto label01;
    }
    private static transient org.apache.commons.math3.geometry.partitioning.BSPTree verticesToTree(double, org.apache.commons.math3.geometry.spherical.twod.S2Point[])
    {
        double $d0, $d1;
        org.apache.commons.math3.geometry.spherical.twod.S2Point[] $r0;
        org.apache.commons.math3.geometry.spherical.twod.Vertex r1, r4, r8;
        java.util.ArrayList r2;
        int i0, i1, i2, i3;
        org.apache.commons.math3.geometry.spherical.twod.Vertex[] r3;
        org.apache.commons.math3.geometry.partitioning.BSPTree r5;
        java.lang.Boolean $r6;
        org.apache.commons.math3.geometry.spherical.twod.S2Point $r7, $r11;
        org.apache.commons.math3.geometry.spherical.twod.Circle $r9, r10;
        org.apache.commons.math3.geometry.spherical.twod.Edge $r12;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r13, $r14;
        byte $b4;

        $d0 := @parameter0: double;

        $r0 := @parameter1: org.apache.commons.math3.geometry.spherical.twod.S2Point[];

        i1 = lengthof $r0;

        if i1 != 0 goto label1;

        r5 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r6 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        specialinvoke r5.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r6);

        return r5;

     label1:
        r3 = newarray (org.apache.commons.math3.geometry.spherical.twod.Vertex)[i1];

        i0 = 0;

     label2:
        if i0 >= i1 goto label3;

        r1 = new org.apache.commons.math3.geometry.spherical.twod.Vertex;

        $r7 = $r0[i0];

        specialinvoke r1.<org.apache.commons.math3.geometry.spherical.twod.Vertex: void <init>(org.apache.commons.math3.geometry.spherical.twod.S2Point)>($r7);

        r3[i0] = r1;

        i0 = i0 + 1;

        goto label2;

     label3:
        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>(int)>(i1);

        i0 = i1 + -1;

        r8 = r3[i0];

        i2 = 0;

     label4:
        if i2 >= i1 goto label9;

        r1 = r8;

        r8 = r3[i2];

        $r9 = virtualinvoke r1.<org.apache.commons.math3.geometry.spherical.twod.Vertex: org.apache.commons.math3.geometry.spherical.twod.Circle sharedCircleWith(org.apache.commons.math3.geometry.spherical.twod.Vertex)>(r8);

        r10 = $r9;

        if $r9 != null goto label5;

        r10 = new org.apache.commons.math3.geometry.spherical.twod.Circle;

        $r7 = virtualinvoke r1.<org.apache.commons.math3.geometry.spherical.twod.Vertex: org.apache.commons.math3.geometry.spherical.twod.S2Point getLocation()>();

        $r11 = virtualinvoke r8.<org.apache.commons.math3.geometry.spherical.twod.Vertex: org.apache.commons.math3.geometry.spherical.twod.S2Point getLocation()>();

        specialinvoke r10.<org.apache.commons.math3.geometry.spherical.twod.Circle: void <init>(org.apache.commons.math3.geometry.spherical.twod.S2Point,org.apache.commons.math3.geometry.spherical.twod.S2Point,double)>($r7, $r11, $d0);

     label5:
        $r12 = new org.apache.commons.math3.geometry.spherical.twod.Edge;

        $r7 = virtualinvoke r1.<org.apache.commons.math3.geometry.spherical.twod.Vertex: org.apache.commons.math3.geometry.spherical.twod.S2Point getLocation()>();

        $r13 = virtualinvoke $r7.<org.apache.commons.math3.geometry.spherical.twod.S2Point: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getVector()>();

        $r7 = virtualinvoke r8.<org.apache.commons.math3.geometry.spherical.twod.Vertex: org.apache.commons.math3.geometry.spherical.twod.S2Point getLocation()>();

        $r14 = virtualinvoke $r7.<org.apache.commons.math3.geometry.spherical.twod.S2Point: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getVector()>();

        $d1 = staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r13, $r14);

        specialinvoke $r12.<org.apache.commons.math3.geometry.spherical.twod.Edge: void <init>(org.apache.commons.math3.geometry.spherical.twod.Vertex,org.apache.commons.math3.geometry.spherical.twod.Vertex,double,org.apache.commons.math3.geometry.spherical.twod.Circle)>(r1, r8, $d1, r10);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r12);

        i0 = lengthof r3;

        i3 = 0;

     label6:
        if i3 >= i0 goto label8;

        r4 = r3[i3];

        if r4 == r1 goto label7;

        if r4 == r8 goto label7;

        $r7 = virtualinvoke r4.<org.apache.commons.math3.geometry.spherical.twod.Vertex: org.apache.commons.math3.geometry.spherical.twod.S2Point getLocation()>();

        $d1 = virtualinvoke r10.<org.apache.commons.math3.geometry.spherical.twod.Circle: double getOffset(org.apache.commons.math3.geometry.Point)>($r7);

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d1);

        $b4 = $d1 cmpg $d0;

        if $b4 > 0 goto label7;

        virtualinvoke r4.<org.apache.commons.math3.geometry.spherical.twod.Vertex: void bindWith(org.apache.commons.math3.geometry.spherical.twod.Circle)>(r10);

     label7:
        i3 = i3 + 1;

        goto label6;

     label8:
        i2 = i2 + 1;

        goto label4;

     label9:
        r5 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        specialinvoke r5.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>()>();

        staticinvoke <org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: void insertEdges(double,org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List)>($d0, r5, r2);

        return r5;
    }
    public volatile org.apache.commons.math3.geometry.partitioning.AbstractRegion buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r1;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet;

        $r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r0 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r1);

        return r0;
    }
    public volatile org.apache.commons.math3.geometry.partitioning.Region buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r1;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet;

        $r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r0 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r1);

        return r0;
    }
    public org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet r0, $r2;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = new org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: double getTolerance()>();

        specialinvoke $r2.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree,double)>(r1, $d0);

        return $r2;
    }
    protected void computeGeometricalProperties() throws org.apache.commons.math3.exception.MathIllegalStateException
    {
        org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet r0;
        org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer r1;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r2;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r3;
        java.lang.Object $r4;
        java.lang.Boolean $r5;
        boolean $z0;
        org.apache.commons.math3.geometry.spherical.twod.S2Point $r6;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(1);

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r3 != null goto label2;

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r3 != null goto label1;

        $r4 = virtualinvoke $r2.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: void setSize(double)>(12.566370614359172);

        $r6 = new org.apache.commons.math3.geometry.spherical.twod.S2Point;

        specialinvoke $r6.<org.apache.commons.math3.geometry.spherical.twod.S2Point: void <init>(double,double)>(0.0, 0.0);

        virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: void setBarycenter(org.apache.commons.math3.geometry.Point)>($r6);

        return;

     label1:
        virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: void setSize(double)>(0.0);

        $r6 = <org.apache.commons.math3.geometry.spherical.twod.S2Point: org.apache.commons.math3.geometry.spherical.twod.S2Point NaN>;

        virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: void setBarycenter(org.apache.commons.math3.geometry.Point)>($r6);

        return;

     label2:
        r1 = new org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: double getTolerance()>();

        specialinvoke r1.<org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer: void <init>(double)>($d0);

        virtualinvoke $r2.<org.apache.commons.math3.geometry.partitioning.BSPTree: void visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)>(r1);

        $d0 = virtualinvoke r1.<org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer: double getArea()>();

        virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: void setSize(double)>($d0);

        $r6 = virtualinvoke r1.<org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer: org.apache.commons.math3.geometry.spherical.twod.S2Point getBarycenter()>();

        virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: void setBarycenter(org.apache.commons.math3.geometry.Point)>($r6);

        return;
    }
    public java.util.List getBoundaryLoops() throws org.apache.commons.math3.exception.MathIllegalStateException
    {
        org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet r0;
        org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder r1;
        java.util.List $r2, $r9;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r3;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r4;
        double $d0;
        java.util.ArrayList $r5;
        boolean $z0;
        java.lang.Object $r6;
        org.apache.commons.math3.geometry.spherical.twod.Edge r7, $r12;
        org.apache.commons.math3.geometry.spherical.twod.Vertex $r8, $r11;
        java.util.Iterator $r10;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet;

        $r2 = r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: java.util.List loops>;

        if $r2 != null goto label1;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(0);

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r4 != null goto label2;

        $r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: java.util.List loops> = $r2;

     label1:
        $r2 = r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: java.util.List loops>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r2);

        return $r2;

     label2:
        $r3 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(1);

        r1 = new org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: double getTolerance()>();

        specialinvoke r1.<org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder: void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree,double)>($r3, $d0);

        virtualinvoke $r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: void visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)>(r1);

        $r2 = virtualinvoke r1.<org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder: java.util.List getEdges()>();

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: java.util.List loops> = $r5;

     label3:
        $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r6 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(0);

        r7 = (org.apache.commons.math3.geometry.spherical.twod.Edge) $r6;

        $r8 = virtualinvoke r7.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Vertex getStart()>();

        $r9 = r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: java.util.List loops>;

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r8);

     label4:
        $r10 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r6 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        if $r6 != r7 goto label5;

        interfaceinvoke $r10.<java.util.Iterator: void remove()>();

     label6:
        $r11 = virtualinvoke r7.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Vertex getEnd()>();

        $r12 = virtualinvoke $r11.<org.apache.commons.math3.geometry.spherical.twod.Vertex: org.apache.commons.math3.geometry.spherical.twod.Edge getOutgoing()>();

        r7 = $r12;

        $r11 = virtualinvoke $r12.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Vertex getStart()>();

        if $r11 != $r8 goto label4;

        goto label3;
    }
    public org.apache.commons.math3.geometry.enclosing.EnclosingBall getEnclosingCap()
    {
        org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet r0;
        org.apache.commons.math3.geometry.enclosing.WelzlEncloser r1;
        org.apache.commons.math3.geometry.euclidean.threed.SphereGenerator r2;
        org.apache.commons.math3.geometry.spherical.twod.S2Point r3, $r23;
        boolean $z0;
        org.apache.commons.math3.geometry.enclosing.EnclosingBall r4, r24;
        org.apache.commons.math3.geometry.spherical.twod.S2Point[] $r5;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r6, $r7;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r8;
        org.apache.commons.math3.geometry.partitioning.Hyperplane $r9;
        org.apache.commons.math3.geometry.spherical.twod.Circle r10;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r11;
        java.util.List $r12, $r13;
        java.util.Iterator $r14;
        java.lang.Object $r15;
        org.apache.commons.math3.geometry.spherical.twod.Vertex r16, r17;
        int i0, $i2;
        org.apache.commons.math3.geometry.spherical.twod.Edge $r18;
        double $d0, $d1, $d2;
        org.apache.commons.math3.geometry.Point[] $r19;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D[] r20;
        org.apache.commons.math3.geometry.Point $r21;
        byte $b1;
        org.apache.commons.math3.geometry.partitioning.BoundaryProjection $r22;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: boolean isEmpty()>();

        if $z0 == 0 goto label01;

        r4 = new org.apache.commons.math3.geometry.enclosing.EnclosingBall;

        r3 = <org.apache.commons.math3.geometry.spherical.twod.S2Point: org.apache.commons.math3.geometry.spherical.twod.S2Point PLUS_K>;

        $r5 = newarray (org.apache.commons.math3.geometry.spherical.twod.S2Point)[0];

        specialinvoke r4.<org.apache.commons.math3.geometry.enclosing.EnclosingBall: void <init>(org.apache.commons.math3.geometry.Point,double,org.apache.commons.math3.geometry.Point[])>(r3, #-Infinity, $r5);

        return r4;

     label01:
        $z0 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: boolean isFull()>();

        if $z0 == 0 goto label02;

        r4 = new org.apache.commons.math3.geometry.enclosing.EnclosingBall;

        r3 = <org.apache.commons.math3.geometry.spherical.twod.S2Point: org.apache.commons.math3.geometry.spherical.twod.S2Point PLUS_K>;

        $r5 = newarray (org.apache.commons.math3.geometry.spherical.twod.S2Point)[0];

        specialinvoke r4.<org.apache.commons.math3.geometry.enclosing.EnclosingBall: void <init>(org.apache.commons.math3.geometry.Point,double,org.apache.commons.math3.geometry.Point[])>(r3, #Infinity, $r5);

        return r4;

     label02:
        $r6 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(0);

        $r7 = virtualinvoke $r6.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        $z0 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: boolean isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r7);

        if $z0 == 0 goto label03;

        $r7 = virtualinvoke $r6.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        $z0 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: boolean isFull(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r7);

        if $z0 == 0 goto label03;

        $r8 = virtualinvoke $r6.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        $r9 = interfaceinvoke $r8.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        r10 = (org.apache.commons.math3.geometry.spherical.twod.Circle) $r9;

        r4 = new org.apache.commons.math3.geometry.enclosing.EnclosingBall;

        r3 = new org.apache.commons.math3.geometry.spherical.twod.S2Point;

        $r11 = virtualinvoke r10.<org.apache.commons.math3.geometry.spherical.twod.Circle: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getPole()>();

        specialinvoke r3.<org.apache.commons.math3.geometry.spherical.twod.S2Point: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r11);

        r3 = virtualinvoke r3.<org.apache.commons.math3.geometry.spherical.twod.S2Point: org.apache.commons.math3.geometry.spherical.twod.S2Point negate()>();

        $r5 = newarray (org.apache.commons.math3.geometry.spherical.twod.S2Point)[0];

        specialinvoke r4.<org.apache.commons.math3.geometry.enclosing.EnclosingBall: void <init>(org.apache.commons.math3.geometry.Point,double,org.apache.commons.math3.geometry.Point[])>(r3, 1.5707963267948966, $r5);

        return r4;

     label03:
        $r7 = virtualinvoke $r6.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        $z0 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: boolean isFull(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r7);

        if $z0 == 0 goto label04;

        $r7 = virtualinvoke $r6.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        $z0 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: boolean isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r7);

        if $z0 == 0 goto label04;

        $r8 = virtualinvoke $r6.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        $r9 = interfaceinvoke $r8.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        r10 = (org.apache.commons.math3.geometry.spherical.twod.Circle) $r9;

        r4 = new org.apache.commons.math3.geometry.enclosing.EnclosingBall;

        r3 = new org.apache.commons.math3.geometry.spherical.twod.S2Point;

        $r11 = virtualinvoke r10.<org.apache.commons.math3.geometry.spherical.twod.Circle: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getPole()>();

        specialinvoke r3.<org.apache.commons.math3.geometry.spherical.twod.S2Point: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r11);

        $r5 = newarray (org.apache.commons.math3.geometry.spherical.twod.S2Point)[0];

        specialinvoke r4.<org.apache.commons.math3.geometry.enclosing.EnclosingBall: void <init>(org.apache.commons.math3.geometry.Point,double,org.apache.commons.math3.geometry.Point[])>(r3, 1.5707963267948966, $r5);

        return r4;

     label04:
        $r12 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: java.util.List getInsidePoints()>();

        $r13 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: java.util.List getBoundaryLoops()>();

        $r14 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z0 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r15 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        r16 = (org.apache.commons.math3.geometry.spherical.twod.Vertex) $r15;

        i0 = 0;

        r17 = r16;

     label06:
        if i0 == 0 goto label07;

        if r17 == r16 goto label05;

     label07:
        i0 = i0 + 1;

        r3 = virtualinvoke r17.<org.apache.commons.math3.geometry.spherical.twod.Vertex: org.apache.commons.math3.geometry.spherical.twod.S2Point getLocation()>();

        $r11 = virtualinvoke r3.<org.apache.commons.math3.geometry.spherical.twod.S2Point: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getVector()>();

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r11);

        $r18 = virtualinvoke r17.<org.apache.commons.math3.geometry.spherical.twod.Vertex: org.apache.commons.math3.geometry.spherical.twod.Edge getOutgoing()>();

        r17 = virtualinvoke $r18.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Vertex getEnd()>();

        goto label06;

     label08:
        r2 = new org.apache.commons.math3.geometry.euclidean.threed.SphereGenerator;

        specialinvoke r2.<org.apache.commons.math3.geometry.euclidean.threed.SphereGenerator: void <init>()>();

        r1 = new org.apache.commons.math3.geometry.enclosing.WelzlEncloser;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: double getTolerance()>();

        specialinvoke r1.<org.apache.commons.math3.geometry.enclosing.WelzlEncloser: void <init>(double,org.apache.commons.math3.geometry.enclosing.SupportBallGenerator)>($d0, r2);

        r4 = virtualinvoke r1.<org.apache.commons.math3.geometry.enclosing.WelzlEncloser: org.apache.commons.math3.geometry.enclosing.EnclosingBall enclose(java.lang.Iterable)>($r12);

        $r19 = virtualinvoke r4.<org.apache.commons.math3.geometry.enclosing.EnclosingBall: org.apache.commons.math3.geometry.Point[] getSupport()>();

        r20 = (org.apache.commons.math3.geometry.euclidean.threed.Vector3D[]) $r19;

        $d1 = virtualinvoke r4.<org.apache.commons.math3.geometry.enclosing.EnclosingBall: double getRadius()>();

        $r21 = virtualinvoke r4.<org.apache.commons.math3.geometry.enclosing.EnclosingBall: org.apache.commons.math3.geometry.Point getCenter()>();

        $r11 = (org.apache.commons.math3.geometry.euclidean.threed.Vector3D) $r21;

        $d0 = virtualinvoke $r11.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getNorm()>();

        $d2 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: double getTolerance()>();

        $b1 = $d0 cmpg $d2;

        if $b1 >= 0 goto label10;

        r4 = new org.apache.commons.math3.geometry.enclosing.EnclosingBall;

        r3 = <org.apache.commons.math3.geometry.spherical.twod.S2Point: org.apache.commons.math3.geometry.spherical.twod.S2Point PLUS_K>;

        $r5 = newarray (org.apache.commons.math3.geometry.spherical.twod.S2Point)[0];

        specialinvoke r4.<org.apache.commons.math3.geometry.enclosing.EnclosingBall: void <init>(org.apache.commons.math3.geometry.Point,double,org.apache.commons.math3.geometry.Point[])>(r3, #Infinity, $r5);

        $r12 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: java.util.List getOutsidePoints()>();

        $r14 = interfaceinvoke $r12.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z0 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label13;

        $r15 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        $r11 = (org.apache.commons.math3.geometry.euclidean.threed.Vector3D) $r15;

        r3 = new org.apache.commons.math3.geometry.spherical.twod.S2Point;

        specialinvoke r3.<org.apache.commons.math3.geometry.spherical.twod.S2Point: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r11);

        $r22 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: org.apache.commons.math3.geometry.partitioning.BoundaryProjection projectToBoundary(org.apache.commons.math3.geometry.Point)>(r3);

        $d0 = virtualinvoke $r22.<org.apache.commons.math3.geometry.partitioning.BoundaryProjection: double getOffset()>();

        $d0 = 3.141592653589793 - $d0;

        $d1 = virtualinvoke r4.<org.apache.commons.math3.geometry.enclosing.EnclosingBall: double getRadius()>();

        $b1 = $d0 cmpg $d1;

        if $b1 >= 0 goto label09;

        r4 = new org.apache.commons.math3.geometry.enclosing.EnclosingBall;

        r3 = virtualinvoke r3.<org.apache.commons.math3.geometry.spherical.twod.S2Point: org.apache.commons.math3.geometry.spherical.twod.S2Point negate()>();

        $d0 = virtualinvoke $r22.<org.apache.commons.math3.geometry.partitioning.BoundaryProjection: double getOffset()>();

        $d0 = 3.141592653589793 - $d0;

        $r5 = newarray (org.apache.commons.math3.geometry.spherical.twod.S2Point)[1];

        $r21 = virtualinvoke $r22.<org.apache.commons.math3.geometry.partitioning.BoundaryProjection: org.apache.commons.math3.geometry.Point getProjected()>();

        $r23 = (org.apache.commons.math3.geometry.spherical.twod.S2Point) $r21;

        $r5[0] = $r23;

        specialinvoke r4.<org.apache.commons.math3.geometry.enclosing.EnclosingBall: void <init>(org.apache.commons.math3.geometry.Point,double,org.apache.commons.math3.geometry.Point[])>(r3, $d0, $r5);

        goto label09;

     label10:
        i0 = lengthof r20;

        $r5 = newarray (org.apache.commons.math3.geometry.spherical.twod.S2Point)[i0];

        i0 = 0;

     label11:
        $i2 = lengthof r20;

        if i0 >= $i2 goto label12;

        r3 = new org.apache.commons.math3.geometry.spherical.twod.S2Point;

        $r11 = r20[i0];

        specialinvoke r3.<org.apache.commons.math3.geometry.spherical.twod.S2Point: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r11);

        $r5[i0] = r3;

        i0 = i0 + 1;

        goto label11;

     label12:
        r24 = new org.apache.commons.math3.geometry.enclosing.EnclosingBall;

        r3 = new org.apache.commons.math3.geometry.spherical.twod.S2Point;

        $r21 = virtualinvoke r4.<org.apache.commons.math3.geometry.enclosing.EnclosingBall: org.apache.commons.math3.geometry.Point getCenter()>();

        $r11 = (org.apache.commons.math3.geometry.euclidean.threed.Vector3D) $r21;

        specialinvoke r3.<org.apache.commons.math3.geometry.spherical.twod.S2Point: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r11);

        $d2 = $d0 * $d0;

        $d2 = 1.0 + $d2;

        $d1 = $d1 * $d1;

        $d1 = $d2 - $d1;

        $d0 = 2.0 * $d0;

        $d0 = $d1 / $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double acos(double)>($d0);

        specialinvoke r24.<org.apache.commons.math3.geometry.enclosing.EnclosingBall: void <init>(org.apache.commons.math3.geometry.Point,double,org.apache.commons.math3.geometry.Point[])>(r3, $d0, $r5);

        return r24;

     label13:
        return r4;
    }
