org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder extends java.lang.Object implements org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor
private final java.util.List segments
private final double tolerance
    void <init>(double)
    {
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder r0;
        double $d0;
        java.util.ArrayList $r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder;

        $d0 := @parameter0: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder: double tolerance> = $d0;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder: java.util.List segments> = $r1;

        return;
    }
    private void addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane, org.apache.commons.math3.geometry.partitioning.BSPTree, java.lang.Iterable, boolean)
    {
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder r0;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane r1;
        org.apache.commons.math3.geometry.partitioning.BSPTree r2, $r15, $r16;
        java.lang.Iterable r3;
        boolean $z0, $z1;
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane r4;
        org.apache.commons.math3.geometry.partitioning.Hyperplane $r5;
        org.apache.commons.math3.geometry.euclidean.twod.Line r6, $r18;
        org.apache.commons.math3.geometry.partitioning.Region $r7;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet $r8;
        java.util.List $r9;
        java.util.Iterator $r10;
        java.lang.Object $r11;
        org.apache.commons.math3.geometry.euclidean.oned.Interval r12;
        double $d0;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r13, r14;
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment $r17;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D $r19;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.SubHyperplane;

        r2 := @parameter1: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r3 := @parameter2: java.lang.Iterable;

        $z0 := @parameter3: boolean;

        r4 = (org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane) r1;

        $r5 = interfaceinvoke r1.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        r6 = (org.apache.commons.math3.geometry.euclidean.twod.Line) $r5;

        $r7 = virtualinvoke r4.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: org.apache.commons.math3.geometry.partitioning.Region getRemainingRegion()>();

        $r8 = (org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet) $r7;

        $r9 = virtualinvoke $r8.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: java.util.List asList()>();

        $r10 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (org.apache.commons.math3.geometry.euclidean.oned.Interval) $r11;

        $d0 = virtualinvoke r12.<org.apache.commons.math3.geometry.euclidean.oned.Interval: double getInf()>();

        $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d0);

        if $z1 == 0 goto label4;

        r13 = null;

     label2:
        $d0 = virtualinvoke r12.<org.apache.commons.math3.geometry.euclidean.oned.Interval: double getSup()>();

        $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d0);

        if $z1 == 0 goto label5;

        r14 = null;

     label3:
        $r15 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder: org.apache.commons.math3.geometry.partitioning.BSPTree selectClosest(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,java.lang.Iterable)>(r13, r3);

        $r16 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder: org.apache.commons.math3.geometry.partitioning.BSPTree selectClosest(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,java.lang.Iterable)>(r14, r3);

        if $z0 == 0 goto label6;

        $r9 = r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder: java.util.List segments>;

        $r17 = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment;

        $r18 = virtualinvoke r6.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.twod.Line getReverse()>();

        specialinvoke $r17.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment: void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Line,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree)>(r14, r13, $r18, r2, $r16, $r15);

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r17);

        goto label1;

     label4:
        $r19 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        $d0 = virtualinvoke r12.<org.apache.commons.math3.geometry.euclidean.oned.Interval: double getInf()>();

        specialinvoke $r19.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: void <init>(double)>($d0);

        r13 = virtualinvoke r6.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.twod.Vector2D toSpace(org.apache.commons.math3.geometry.Point)>($r19);

        goto label2;

     label5:
        $r19 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        $d0 = virtualinvoke r12.<org.apache.commons.math3.geometry.euclidean.oned.Interval: double getSup()>();

        specialinvoke $r19.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: void <init>(double)>($d0);

        r14 = virtualinvoke r6.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.twod.Vector2D toSpace(org.apache.commons.math3.geometry.Point)>($r19);

        goto label3;

     label6:
        $r9 = r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder: java.util.List segments>;

        $r17 = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment;

        specialinvoke $r17.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment: void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Line,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree)>(r13, r14, r6, r2, $r15, $r16);

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r17);

        goto label1;

     label7:
        return;
    }
    private org.apache.commons.math3.geometry.partitioning.BSPTree selectClosest(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, java.lang.Iterable)
    {
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder r0;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D $r1;
        java.lang.Iterable r2;
        org.apache.commons.math3.geometry.partitioning.BSPTree r3, r6;
        double d0, $d1;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r7;
        org.apache.commons.math3.geometry.partitioning.Hyperplane $r8;
        byte $b0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        r2 := @parameter1: java.lang.Iterable;

        r3 = null;

        d0 = #Infinity;

        $r4 = interfaceinvoke r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.commons.math3.geometry.partitioning.BSPTree) $r5;

        $r7 = virtualinvoke r6.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        $r8 = interfaceinvoke $r7.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        $d1 = interfaceinvoke $r8.<org.apache.commons.math3.geometry.partitioning.Hyperplane: double getOffset(org.apache.commons.math3.geometry.Point)>($r1);

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d1);

        $b0 = $d1 cmpg d0;

        if $b0 >= 0 goto label1;

        r3 = r6;

        d0 = $d1;

        goto label1;

     label2:
        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder: double tolerance>;

        $b0 = d0 cmpg $d1;

        if $b0 > 0 goto label3;

        return r3;

     label3:
        return null;
    }
    public java.util.List getSegments()
    {
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder r0;
        java.util.List r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder;

        r1 = r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder: java.util.List segments>;

        return r1;
    }
    public void visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        java.lang.Object $r2;
        org.apache.commons.math3.geometry.partitioning.BoundaryAttribute r3;
        org.apache.commons.math3.geometry.partitioning.NodesSet $r4;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r5;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        r3 = (org.apache.commons.math3.geometry.partitioning.BoundaryAttribute) $r2;

        $r4 = virtualinvoke r3.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.NodesSet getSplitters()>();

        $r5 = virtualinvoke r3.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusOutside()>();

        if $r5 == null goto label1;

        $r5 = virtualinvoke r3.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusOutside()>();

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder: void addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Iterable,boolean)>($r5, r1, $r4, 0);

     label1:
        $r5 = virtualinvoke r3.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusInside()>();

        if $r5 == null goto label2;

        $r5 = virtualinvoke r3.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusInside()>();

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder: void addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Iterable,boolean)>($r5, r1, $r4, 1);

     label2:
        return;
    }
    public void visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        return;
    }
    public org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r2 = <org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order: org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order MINUS_SUB_PLUS>;

        return r2;
    }
