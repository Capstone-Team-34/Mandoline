org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node extends java.lang.Object
private java.lang.Comparable element
private org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left
private org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node parent
private org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right
private org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew
final org.apache.commons.math3.geometry.partitioning.utilities.AVLTree this$0
    void <init>(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree, java.lang.Comparable, org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node)
    {
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node r0, r3;
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree $r1;
        java.lang.Comparable r2;
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew $r4;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node;

        $r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree;

        r2 := @parameter1: java.lang.Comparable;

        r3 := @parameter2: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree this$0> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: java.lang.Comparable element> = r2;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left> = null;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right> = null;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node parent> = r3;

        $r4 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = $r4;

        return;
    }
    static java.lang.Comparable access$000(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node)
    {
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node $r0;
        java.lang.Comparable r1;

        $r0 := @parameter0: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node;

        r1 = $r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: java.lang.Comparable element>;

        return r1;
    }
    static org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node access$100(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node)
    {
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node $r0;

        $r0 := @parameter0: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node;

        $r0 = $r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        return $r0;
    }
    static org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node access$200(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node)
    {
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node $r0;

        $r0 := @parameter0: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node;

        $r0 = $r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        return $r0;
    }
    private boolean rebalanceLeftGrown()
    {
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node r0, $r3;
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew r1, $r4;
        int[] $r2;
        int $i0;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node;

        $r2 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$1: int[] $SwitchMap$org$apache$commons$math3$geometry$partitioning$utilities$AVLTree$Skew>;

        r1 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew>;

        $i0 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: int ordinal()>();

        $i0 = $r2[$i0];

        lookupswitch($i0)
        {
            case 1: goto label2;
            case 2: goto label8;
            default: goto label1;
        };

     label1:
        r1 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew LEFT_HIGH>;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = r1;

        return 1;

     label2:
        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        r1 = $r3.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew>;

        $r4 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew LEFT_HIGH>;

        if r1 != $r4 goto label3;

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: void rotateCW()>();

        r1 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = r1;

        r0 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        r1 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = r1;

        return 0;

     label3:
        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        $r3 = $r3.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        r1 = $r3.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew>;

        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        specialinvoke $r3.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: void rotateCCW()>();

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: void rotateCW()>();

        $r2 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$1: int[] $SwitchMap$org$apache$commons$math3$geometry$partitioning$utilities$AVLTree$Skew>;

        $i0 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: int ordinal()>();

        $i0 = $r2[$i0];

        lookupswitch($i0)
        {
            case 1: goto label6;
            case 2: goto label7;
            default: goto label4;
        };

     label4:
        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        r1 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        $r3.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = r1;

        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        r1 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        $r3.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = r1;

     label5:
        r1 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = r1;

        return 0;

     label6:
        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        r1 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        $r3.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = r1;

        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        r1 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew RIGHT_HIGH>;

        $r3.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = r1;

        goto label5;

     label7:
        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        r1 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew LEFT_HIGH>;

        $r3.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = r1;

        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        r1 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        $r3.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = r1;

        goto label5;

     label8:
        r1 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = r1;

        return 0;
    }
    private boolean rebalanceLeftShrunk()
    {
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node r0, $r3;
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew r1, $r4;
        int[] $r2;
        int $i0;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node;

        $r2 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$1: int[] $SwitchMap$org$apache$commons$math3$geometry$partitioning$utilities$AVLTree$Skew>;

        r1 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew>;

        $i0 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: int ordinal()>();

        $i0 = $r2[$i0];

        lookupswitch($i0)
        {
            case 1: goto label2;
            case 2: goto label3;
            default: goto label1;
        };

     label1:
        r1 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew RIGHT_HIGH>;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = r1;

        return 0;

     label2:
        r1 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = r1;

        return 1;

     label3:
        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        r1 = $r3.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew>;

        $r4 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew RIGHT_HIGH>;

        if r1 != $r4 goto label4;

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: void rotateCCW()>();

        r1 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = r1;

        r0 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        r1 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = r1;

        return 1;

     label4:
        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        r1 = $r3.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew>;

        $r4 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        if r1 != $r4 goto label5;

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: void rotateCCW()>();

        r1 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew LEFT_HIGH>;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = r1;

        r0 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        r1 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew RIGHT_HIGH>;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = r1;

        return 0;

     label5:
        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        $r3 = $r3.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        r1 = $r3.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew>;

        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        specialinvoke $r3.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: void rotateCW()>();

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: void rotateCCW()>();

        $r2 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$1: int[] $SwitchMap$org$apache$commons$math3$geometry$partitioning$utilities$AVLTree$Skew>;

        $i0 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: int ordinal()>();

        $i0 = $r2[$i0];

        lookupswitch($i0)
        {
            case 1: goto label8;
            case 2: goto label9;
            default: goto label6;
        };

     label6:
        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        r1 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        $r3.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = r1;

        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        r1 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        $r3.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = r1;

     label7:
        r1 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = r1;

        return 1;

     label8:
        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        r1 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        $r3.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = r1;

        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        r1 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew RIGHT_HIGH>;

        $r3.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = r1;

        goto label7;

     label9:
        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        r1 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew LEFT_HIGH>;

        $r3.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = r1;

        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        r1 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        $r3.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = r1;

        goto label7;
    }
    private boolean rebalanceRightGrown()
    {
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node r0, $r3;
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew r1, $r4;
        int[] $r2;
        int $i0;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node;

        $r2 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$1: int[] $SwitchMap$org$apache$commons$math3$geometry$partitioning$utilities$AVLTree$Skew>;

        r1 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew>;

        $i0 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: int ordinal()>();

        $i0 = $r2[$i0];

        lookupswitch($i0)
        {
            case 1: goto label2;
            case 2: goto label3;
            default: goto label1;
        };

     label1:
        r1 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew RIGHT_HIGH>;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = r1;

        return 1;

     label2:
        r1 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = r1;

        return 0;

     label3:
        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        r1 = $r3.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew>;

        $r4 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew RIGHT_HIGH>;

        if r1 != $r4 goto label4;

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: void rotateCCW()>();

        r1 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = r1;

        r0 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        r1 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = r1;

        return 0;

     label4:
        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        $r3 = $r3.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        r1 = $r3.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew>;

        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        specialinvoke $r3.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: void rotateCW()>();

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: void rotateCCW()>();

        $r2 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$1: int[] $SwitchMap$org$apache$commons$math3$geometry$partitioning$utilities$AVLTree$Skew>;

        $i0 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: int ordinal()>();

        $i0 = $r2[$i0];

        lookupswitch($i0)
        {
            case 1: goto label7;
            case 2: goto label8;
            default: goto label5;
        };

     label5:
        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        r1 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        $r3.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = r1;

        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        r1 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        $r3.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = r1;

     label6:
        r1 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = r1;

        return 0;

     label7:
        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        r1 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        $r3.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = r1;

        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        r1 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew RIGHT_HIGH>;

        $r3.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = r1;

        goto label6;

     label8:
        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        r1 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew LEFT_HIGH>;

        $r3.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = r1;

        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        r1 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        $r3.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = r1;

        goto label6;
    }
    private boolean rebalanceRightShrunk()
    {
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node r0, $r3;
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew r1, $r4;
        int[] $r2;
        int $i0;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node;

        $r2 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$1: int[] $SwitchMap$org$apache$commons$math3$geometry$partitioning$utilities$AVLTree$Skew>;

        r1 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew>;

        $i0 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: int ordinal()>();

        $i0 = $r2[$i0];

        lookupswitch($i0)
        {
            case 1: goto label3;
            case 2: goto label2;
            default: goto label1;
        };

     label1:
        r1 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew LEFT_HIGH>;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = r1;

        return 0;

     label2:
        r1 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = r1;

        return 1;

     label3:
        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        r1 = $r3.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew>;

        $r4 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew LEFT_HIGH>;

        if r1 != $r4 goto label4;

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: void rotateCW()>();

        r1 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = r1;

        r0 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        r1 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = r1;

        return 1;

     label4:
        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        r1 = $r3.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew>;

        $r4 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        if r1 != $r4 goto label5;

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: void rotateCW()>();

        r1 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew RIGHT_HIGH>;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = r1;

        r0 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        r1 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew LEFT_HIGH>;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = r1;

        return 0;

     label5:
        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        $r3 = $r3.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        r1 = $r3.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew>;

        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        specialinvoke $r3.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: void rotateCCW()>();

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: void rotateCW()>();

        $r2 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$1: int[] $SwitchMap$org$apache$commons$math3$geometry$partitioning$utilities$AVLTree$Skew>;

        $i0 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: int ordinal()>();

        $i0 = $r2[$i0];

        lookupswitch($i0)
        {
            case 1: goto label8;
            case 2: goto label9;
            default: goto label6;
        };

     label6:
        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        r1 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        $r3.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = r1;

        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        r1 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        $r3.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = r1;

     label7:
        r1 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = r1;

        return 1;

     label8:
        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        r1 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        $r3.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = r1;

        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        r1 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew RIGHT_HIGH>;

        $r3.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = r1;

        goto label7;

     label9:
        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        r1 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew LEFT_HIGH>;

        $r3.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = r1;

        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        r1 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        $r3.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = r1;

        goto label7;
    }
    private void rotateCCW()
    {
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node r0, r2, $r4;
        java.lang.Comparable r1, $r3;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node;

        r1 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: java.lang.Comparable element>;

        r2 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        $r3 = r2.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: java.lang.Comparable element>;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: java.lang.Comparable element> = $r3;

        r2 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        r2.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: java.lang.Comparable element> = r1;

        r2 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        $r4 = r2.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right> = $r4;

        $r4 = r2.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        r2.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right> = $r4;

        $r4 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        r2.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left> = $r4;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left> = r2;

        r2 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        if r2 == null goto label1;

        r2 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        r2.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node parent> = r0;

     label1:
        r2 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        r2 = r2.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        if r2 == null goto label2;

        r2 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        r2 = r2.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        r0 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        r2.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node parent> = r0;

     label2:
        return;
    }
    private void rotateCW()
    {
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node r0, r2, $r4;
        java.lang.Comparable r1, $r3;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node;

        r1 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: java.lang.Comparable element>;

        r2 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        $r3 = r2.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: java.lang.Comparable element>;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: java.lang.Comparable element> = $r3;

        r2 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        r2.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: java.lang.Comparable element> = r1;

        r2 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        $r4 = r2.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left> = $r4;

        $r4 = r2.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        r2.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left> = $r4;

        $r4 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        r2.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right> = $r4;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right> = r2;

        r2 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        if r2 == null goto label1;

        r2 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        r2.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node parent> = r0;

     label1:
        r2 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        r2 = r2.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        if r2 == null goto label2;

        r2 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        r2 = r2.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        r0 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        r2.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node parent> = r0;

     label2:
        return;
    }
    public void delete()
    {
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node r0, $r1, $r3;
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree $r2;
        boolean z0;
        java.lang.Comparable $r4;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node parent>;

        if $r1 != null goto label01;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        if $r1 != null goto label01;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        if $r1 != null goto label01;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: java.lang.Comparable element> = null;

        $r2 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree this$0>;

        staticinvoke <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node access$302(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node)>($r2, null);

        return;

     label01:
        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        if $r1 != null goto label09;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        if $r1 != null goto label09;

        $r1 = r0;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: java.lang.Comparable element> = null;

        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node parent>;

        $r3 = $r3.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        if r0 != $r3 goto label08;

        z0 = 1;

     label02:
        $r3 = null;

     label03:
        r0 = $r1.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node parent>;

        if z0 == 0 goto label15;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left> = $r3;

     label04:
        if $r3 == null goto label05;

        $r3.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node parent> = r0;

     label05:
        if z0 == 0 goto label16;

        z0 = specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: boolean rebalanceLeftShrunk()>();

        if z0 == 0 goto label18;

     label06:
        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node parent>;

        if $r1 == null goto label18;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node parent>;

        $r1 = $r1.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        if r0 != $r1 goto label17;

        z0 = 1;

     label07:
        r0 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node parent>;

        goto label05;

     label08:
        z0 = 0;

        goto label02;

     label09:
        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        if $r1 == null goto label12;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node getLargest()>();

     label10:
        $r4 = $r1.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: java.lang.Comparable element>;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: java.lang.Comparable element> = $r4;

        r0 = $r1.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node parent>;

        r0 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        if $r1 != r0 goto label13;

        z0 = 1;

     label11:
        r0 = $r1.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        if r0 == null goto label14;

        $r3 = $r1.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        goto label03;

     label12:
        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node getSmallest()>();

        goto label10;

     label13:
        z0 = 0;

        goto label11;

     label14:
        $r3 = $r1.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        goto label03;

     label15:
        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right> = $r3;

        goto label04;

     label16:
        z0 = specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: boolean rebalanceRightShrunk()>();

        if z0 == 0 goto label18;

        goto label06;

     label17:
        z0 = 0;

        goto label07;

     label18:
        return;
    }
    public java.lang.Comparable getElement()
    {
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node r0;
        java.lang.Comparable r1;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node;

        r1 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: java.lang.Comparable element>;

        return r1;
    }
    org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node getLargest()
    {
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node r0, r1;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node;

        r1 = r0;

     label1:
        r0 = r1.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        if r0 == null goto label2;

        r1 = r1.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        goto label1;

     label2:
        return r1;
    }
    public org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node getNext()
    {
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node r0, $r1;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        if $r1 == null goto label1;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node getSmallest()>();

        if $r1 == null goto label1;

        return $r1;

     label1:
        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node parent>;

        if $r1 == null goto label3;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node parent>;

        $r1 = $r1.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        if r0 == $r1 goto label2;

        r0 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node parent>;

        return r0;

     label2:
        r0 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node parent>;

        goto label1;

     label3:
        return null;
    }
    public org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node getPrevious()
    {
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node r0, $r1;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        if $r1 == null goto label1;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node getLargest()>();

        if $r1 == null goto label1;

        return $r1;

     label1:
        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node parent>;

        if $r1 == null goto label3;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node parent>;

        $r1 = $r1.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        if r0 == $r1 goto label2;

        r0 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node parent>;

        return r0;

     label2:
        r0 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node parent>;

        goto label1;

     label3:
        return null;
    }
    org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node getSmallest()
    {
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node r0, r1;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node;

        r1 = r0;

     label1:
        r0 = r1.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        if r0 == null goto label2;

        r1 = r1.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        goto label1;

     label2:
        return r1;
    }
    boolean insert(java.lang.Comparable)
    {
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node r0, $r3;
        java.lang.Comparable r1, $r2;
        int $i0;
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree $r4;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node;

        r1 := @parameter0: java.lang.Comparable;

        $r2 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: java.lang.Comparable element>;

        $i0 = interfaceinvoke r1.<java.lang.Comparable: int compareTo(java.lang.Object)>($r2);

        if $i0 >= 0 goto label2;

        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        if $r3 != null goto label1;

        $r3 = new org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node;

        $r4 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree this$0>;

        specialinvoke $r3.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: void <init>(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree,java.lang.Comparable,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node)>($r4, r1, r0);

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left> = $r3;

        $z0 = specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: boolean rebalanceLeftGrown()>();

        return $z0;

     label1:
        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        $z0 = virtualinvoke $r3.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: boolean insert(java.lang.Comparable)>(r1);

        if $z0 == 0 goto label4;

        $z0 = specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: boolean rebalanceLeftGrown()>();

        return $z0;

     label2:
        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        if $r3 != null goto label3;

        $r3 = new org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node;

        $r4 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree this$0>;

        specialinvoke $r3.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: void <init>(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree,java.lang.Comparable,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node)>($r4, r1, r0);

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right> = $r3;

        $z0 = specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: boolean rebalanceRightGrown()>();

        return $z0;

     label3:
        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        $z0 = virtualinvoke $r3.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: boolean insert(java.lang.Comparable)>(r1);

        if $z0 == 0 goto label4;

        $z0 = specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: boolean rebalanceRightGrown()>();

        return $z0;

     label4:
        return 0;
    }
    int size()
    {
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node r0, $r1;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node;

        $i0 = 0;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        if $r1 != null goto label3;

        $i1 = 0;

     label1:
        $i1 = $i1 + 1;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        if $r1 != null goto label4;

     label2:
        $i0 = $i1 + $i0;

        return $i0;

     label3:
        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        $i1 = virtualinvoke $r1.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: int size()>();

        goto label1;

     label4:
        r0 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: int size()>();

        goto label2;
    }
