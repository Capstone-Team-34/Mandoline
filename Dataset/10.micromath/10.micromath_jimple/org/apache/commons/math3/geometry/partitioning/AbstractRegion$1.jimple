org.apache.commons.math3.geometry.partitioning.AbstractRegion$1 extends java.lang.Object implements java.util.Comparator
final org.apache.commons.math3.geometry.partitioning.AbstractRegion this$0
    void <init>(org.apache.commons.math3.geometry.partitioning.AbstractRegion)
    {
        org.apache.commons.math3.geometry.partitioning.AbstractRegion$1 r0;
        org.apache.commons.math3.geometry.partitioning.AbstractRegion $r1;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractRegion$1;

        $r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.AbstractRegion;

        r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion$1: org.apache.commons.math3.geometry.partitioning.AbstractRegion this$0> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        org.apache.commons.math3.geometry.partitioning.AbstractRegion$1 r0;
        int $i0;
        java.lang.Object $r1, $r2;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r3, $r4;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractRegion$1;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = (org.apache.commons.math3.geometry.partitioning.SubHyperplane) $r1;

        $r4 = (org.apache.commons.math3.geometry.partitioning.SubHyperplane) $r2;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion$1: int compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)>($r3, $r4);

        return $i0;
    }
    public int compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane, org.apache.commons.math3.geometry.partitioning.SubHyperplane)
    {
        org.apache.commons.math3.geometry.partitioning.AbstractRegion$1 r0;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane r1, r2;
        double $d0, $d1;
        byte $b0;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractRegion$1;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.SubHyperplane;

        r2 := @parameter1: org.apache.commons.math3.geometry.partitioning.SubHyperplane;

        $d0 = interfaceinvoke r1.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: double getSize()>();

        $d1 = interfaceinvoke r2.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: double getSize()>();

        $b0 = $d1 cmpg $d0;

        if $b0 >= 0 goto label1;

        return -1;

     label1:
        if r1 != r2 goto label2;

        return 0;

     label2:
        return 1;
    }
