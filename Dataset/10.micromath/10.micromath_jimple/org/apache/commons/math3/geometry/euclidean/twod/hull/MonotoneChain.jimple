org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain extends org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D
    public void <init>()
    {
        org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain r0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain: void <init>(boolean)>(0);

        return;
    }
    public void <init>(boolean)
    {
        org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain r0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain;

        $z0 := @parameter0: boolean;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D: void <init>(boolean)>($z0);

        return;
    }
    public void <init>(boolean, double)
    {
        org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain r0;
        boolean $z0;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain;

        $z0 := @parameter0: boolean;

        $d0 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D: void <init>(boolean,double)>($z0, $d0);

        return;
    }
    private void updateHull(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, java.util.List)
    {
        org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain r0;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D $r1, r4, r5;
        java.util.List r2;
        double $d0, $d1, $d2;
        int $i0, $i2;
        java.lang.Object $r3;
        byte $b1;
        org.apache.commons.math3.geometry.euclidean.twod.Line $r6;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        r2 := @parameter1: java.util.List;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain: double getTolerance()>();

        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        if $i0 != 1 goto label2;

        $r3 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(0);

        r4 = (org.apache.commons.math3.geometry.euclidean.twod.Vector2D) $r3;

        $d1 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double distance(org.apache.commons.math3.geometry.Vector)>($r1);

        $b1 = $d1 cmpg $d0;

        if $b1 >= 0 goto label2;

        return;

     label1:
        $b1 = $d1 cmpl 0.0;

        if $b1 <= 0 goto label6;

        $i0 = $i0 + -1;

        interfaceinvoke r2.<java.util.List: java.lang.Object remove(int)>($i0);

     label2:
        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        if $i0 < 2 goto label6;

        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        $i2 = $i0 + -2;

        $r3 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>($i2);

        r4 = (org.apache.commons.math3.geometry.euclidean.twod.Vector2D) $r3;

        $i2 = $i0 + -1;

        $r3 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>($i2);

        r5 = (org.apache.commons.math3.geometry.euclidean.twod.Vector2D) $r3;

        $r6 = new org.apache.commons.math3.geometry.euclidean.twod.Line;

        specialinvoke $r6.<org.apache.commons.math3.geometry.euclidean.twod.Line: void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)>(r4, r5, $d0);

        $d1 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.twod.Line: double getOffset(org.apache.commons.math3.geometry.Vector)>($r1);

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d1);

        $b1 = $d2 cmpg $d0;

        if $b1 >= 0 goto label1;

        $d1 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double distance(org.apache.commons.math3.geometry.Vector)>($r1);

        $b1 = $d1 cmpg $d0;

        if $b1 < 0 goto label7;

        $d2 = virtualinvoke r5.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double distance(org.apache.commons.math3.geometry.Vector)>($r1);

        $b1 = $d2 cmpg $d0;

        if $b1 < 0 goto label7;

        $d0 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double distance(org.apache.commons.math3.geometry.Vector)>(r5);

        $z0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain: boolean isIncludeCollinearPoints()>();

        if $z0 == 0 goto label5;

        $b1 = $d1 cmpg $d0;

        if $b1 >= 0 goto label4;

        $i0 = $i0 + -1;

     label3:
        interfaceinvoke r2.<java.util.List: void add(int,java.lang.Object)>($i0, $r1);

        return;

     label4:
        goto label3;

     label5:
        $b1 = $d1 cmpl $d0;

        if $b1 <= 0 goto label7;

        $i0 = $i0 + -1;

        interfaceinvoke r2.<java.util.List: java.lang.Object remove(int)>($i0);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r1);

        return;

     label6:
        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r1);

     label7:
        return;
    }
    public java.util.Collection findHullVertices(java.util.Collection)
    {
        org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain r0;
        java.util.Collection r1;
        java.util.ArrayList r2, r3, r4;
        org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain$1 $r5;
        java.util.Iterator $r6;
        boolean $z0;
        java.lang.Object $r7;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r8;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain;

        r1 := @parameter0: java.util.Collection;

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>(java.util.Collection)>(r1);

        $r5 = new org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain$1;

        specialinvoke $r5.<org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain$1: void <init>(org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain)>(r0);

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(r2, $r5);

        r3 = new java.util.ArrayList;

        specialinvoke r3.<java.util.ArrayList: void <init>()>();

        $r6 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.apache.commons.math3.geometry.euclidean.twod.Vector2D) $r7;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain: void updateHull(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,java.util.List)>(r8, r3);

        goto label1;

     label2:
        r4 = new java.util.ArrayList;

        specialinvoke r4.<java.util.ArrayList: void <init>()>();

        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        $i0 = $i0 + -1;

     label3:
        if $i0 < 0 goto label4;

        $r7 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>($i0);

        r8 = (org.apache.commons.math3.geometry.euclidean.twod.Vector2D) $r7;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain: void updateHull(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,java.util.List)>(r8, r4);

        $i0 = $i0 + -1;

        goto label3;

     label4:
        r2 = new java.util.ArrayList;

        $i0 = interfaceinvoke r3.<java.util.List: int size()>();

        $i1 = interfaceinvoke r4.<java.util.List: int size()>();

        $i0 = $i0 + $i1;

        $i0 = $i0 + -2;

        specialinvoke r2.<java.util.ArrayList: void <init>(int)>($i0);

        $i0 = 0;

     label5:
        $i1 = interfaceinvoke r3.<java.util.List: int size()>();

        $i1 = $i1 + -1;

        if $i0 >= $i1 goto label6;

        $r7 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>($i0);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r7);

        $i0 = $i0 + 1;

        goto label5;

     label6:
        $i0 = 0;

     label7:
        $i1 = interfaceinvoke r4.<java.util.List: int size()>();

        $i1 = $i1 + -1;

        if $i0 >= $i1 goto label8;

        $r7 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>($i0);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r7);

        $i0 = $i0 + 1;

        goto label7;

     label8:
        $z0 = interfaceinvoke r2.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label9;

        $z0 = interfaceinvoke r3.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label9;

        $r7 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(0);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r7);

     label9:
        return r2;
    }
    public volatile org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D generate(java.util.Collection) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.ConvergenceException
    {
        org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain r0;
        java.util.Collection $r1;
        org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain;

        $r1 := @parameter0: java.util.Collection;

        $r2 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D: org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D generate(java.util.Collection)>($r1);

        return $r2;
    }
    public volatile double getTolerance()
    {
        org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain;

        $d0 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D: double getTolerance()>();

        return $d0;
    }
    public volatile boolean isIncludeCollinearPoints()
    {
        org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain r0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain;

        $z0 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D: boolean isIncludeCollinearPoints()>();

        return $z0;
    }
