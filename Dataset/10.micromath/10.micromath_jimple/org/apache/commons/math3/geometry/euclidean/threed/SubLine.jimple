org.apache.commons.math3.geometry.euclidean.threed.SubLine extends java.lang.Object
private static final double DEFAULT_TOLERANCE
private final org.apache.commons.math3.geometry.euclidean.threed.Line line
private final org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet remainingRegion
    public void <init>(org.apache.commons.math3.geometry.euclidean.threed.Line, org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet)
    {
        org.apache.commons.math3.geometry.euclidean.threed.SubLine r0;
        org.apache.commons.math3.geometry.euclidean.threed.Line $r1;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.SubLine;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Line;

        $r2 := @parameter1: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.geometry.euclidean.threed.SubLine: org.apache.commons.math3.geometry.euclidean.threed.Line line> = $r1;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.SubLine: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet remainingRegion> = $r2;

        return;
    }
    public void <init>(org.apache.commons.math3.geometry.euclidean.threed.Segment) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.geometry.euclidean.threed.SubLine r0;
        org.apache.commons.math3.geometry.euclidean.threed.Segment $r1;
        org.apache.commons.math3.geometry.euclidean.threed.Line $r2, $r5;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r3, $r4;
        double $d0;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet $r6;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.SubLine;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Segment;

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.Segment: org.apache.commons.math3.geometry.euclidean.threed.Line getLine()>();

        $r3 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.Segment: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getStart()>();

        $r4 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.Segment: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getEnd()>();

        $r5 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.Segment: org.apache.commons.math3.geometry.euclidean.threed.Line getLine()>();

        $d0 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Line: double getTolerance()>();

        $r6 = staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.SubLine: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet buildIntervalSet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double)>($r3, $r4, $d0);

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.SubLine: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Line,org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet)>($r2, $r6);

        return;
    }
    public void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.geometry.euclidean.threed.SubLine r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r1, $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.SubLine;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $r2 := @parameter1: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.SubLine: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double)>($r1, $r2, 1.0E-10);

        return;
    }
    public void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.geometry.euclidean.threed.SubLine r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r1, $r2;
        double $d0;
        org.apache.commons.math3.geometry.euclidean.threed.Line $r3;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet $r4;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.SubLine;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $r2 := @parameter1: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d0 := @parameter2: double;

        $r3 = new org.apache.commons.math3.geometry.euclidean.threed.Line;

        specialinvoke $r3.<org.apache.commons.math3.geometry.euclidean.threed.Line: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double)>($r1, $r2, $d0);

        $r4 = staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.SubLine: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet buildIntervalSet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double)>($r1, $r2, $d0);

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.SubLine: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Line,org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet)>($r3, $r4);

        return;
    }
    private static org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet buildIntervalSet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r0, $r1;
        double $d0, $d1, $d2;
        org.apache.commons.math3.geometry.euclidean.threed.Line r2;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet $r3;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D $r4;

        $r0 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $r1 := @parameter1: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d0 := @parameter2: double;

        r2 = new org.apache.commons.math3.geometry.euclidean.threed.Line;

        specialinvoke r2.<org.apache.commons.math3.geometry.euclidean.threed.Line: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double)>($r0, $r1, $d0);

        $r3 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        $r4 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.oned.Vector1D toSubSpace(org.apache.commons.math3.geometry.Point)>($r0);

        $d1 = virtualinvoke $r4.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double getX()>();

        $r4 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.oned.Vector1D toSubSpace(org.apache.commons.math3.geometry.Point)>($r1);

        $d2 = virtualinvoke $r4.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double getX()>();

        specialinvoke $r3.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: void <init>(double,double,double)>($d1, $d2, $d0);

        return $r3;
    }
    public java.util.List getSegments()
    {
        org.apache.commons.math3.geometry.euclidean.threed.SubLine r0;
        java.util.ArrayList r1;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet $r2;
        java.util.List $r3;
        int $i0;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        org.apache.commons.math3.geometry.euclidean.oned.Interval r6;
        org.apache.commons.math3.geometry.euclidean.threed.Line $r7;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D $r8;
        double $d0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r9, $r10;
        org.apache.commons.math3.geometry.euclidean.threed.Segment $r11;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.SubLine;

        $r2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SubLine: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet remainingRegion>;

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: java.util.List asList()>();

        r1 = new java.util.ArrayList;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        specialinvoke r1.<java.util.ArrayList: void <init>(int)>($i0);

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.commons.math3.geometry.euclidean.oned.Interval) $r5;

        $r7 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SubLine: org.apache.commons.math3.geometry.euclidean.threed.Line line>;

        $r8 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        $d0 = virtualinvoke r6.<org.apache.commons.math3.geometry.euclidean.oned.Interval: double getInf()>();

        specialinvoke $r8.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: void <init>(double)>($d0);

        $r9 = virtualinvoke $r7.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D toSpace(org.apache.commons.math3.geometry.Point)>($r8);

        $r7 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SubLine: org.apache.commons.math3.geometry.euclidean.threed.Line line>;

        $r8 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        $d0 = virtualinvoke r6.<org.apache.commons.math3.geometry.euclidean.oned.Interval: double getSup()>();

        specialinvoke $r8.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: void <init>(double)>($d0);

        $r10 = virtualinvoke $r7.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D toSpace(org.apache.commons.math3.geometry.Point)>($r8);

        $r11 = new org.apache.commons.math3.geometry.euclidean.threed.Segment;

        $r7 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SubLine: org.apache.commons.math3.geometry.euclidean.threed.Line line>;

        specialinvoke $r11.<org.apache.commons.math3.geometry.euclidean.threed.Segment: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)>($r9, $r10, $r7);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r11);

        goto label1;

     label2:
        return r1;
    }
    public org.apache.commons.math3.geometry.euclidean.threed.Vector3D intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine, boolean)
    {
        org.apache.commons.math3.geometry.euclidean.threed.SubLine r0, $r1;
        boolean $z0;
        org.apache.commons.math3.geometry.euclidean.threed.Line $r2, $r3;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r4;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet $r5;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D $r6;
        org.apache.commons.math3.geometry.partitioning.Region$Location $r7, $r8, $r9;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.SubLine;

        $r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.SubLine;

        $z0 := @parameter1: boolean;

        $r2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SubLine: org.apache.commons.math3.geometry.euclidean.threed.Line line>;

        $r3 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.SubLine: org.apache.commons.math3.geometry.euclidean.threed.Line line>;

        $r4 = virtualinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)>($r3);

        if $r4 != null goto label1;

        return null;

     label1:
        $r5 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SubLine: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet remainingRegion>;

        $r2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SubLine: org.apache.commons.math3.geometry.euclidean.threed.Line line>;

        $r6 = virtualinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.oned.Vector1D toSubSpace(org.apache.commons.math3.geometry.Point)>($r4);

        $r7 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.partitioning.Region$Location checkPoint(org.apache.commons.math3.geometry.Point)>($r6);

        $r5 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.SubLine: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet remainingRegion>;

        $r2 = $r1.<org.apache.commons.math3.geometry.euclidean.threed.SubLine: org.apache.commons.math3.geometry.euclidean.threed.Line line>;

        $r6 = virtualinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.oned.Vector1D toSubSpace(org.apache.commons.math3.geometry.Point)>($r4);

        $r8 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.partitioning.Region$Location checkPoint(org.apache.commons.math3.geometry.Point)>($r6);

        if $z0 == 0 goto label3;

        $r9 = <org.apache.commons.math3.geometry.partitioning.Region$Location: org.apache.commons.math3.geometry.partitioning.Region$Location OUTSIDE>;

        if $r7 == $r9 goto label2;

        $r7 = <org.apache.commons.math3.geometry.partitioning.Region$Location: org.apache.commons.math3.geometry.partitioning.Region$Location OUTSIDE>;

        if $r8 != $r7 goto label5;

     label2:
        return null;

     label3:
        $r9 = <org.apache.commons.math3.geometry.partitioning.Region$Location: org.apache.commons.math3.geometry.partitioning.Region$Location INSIDE>;

        if $r7 != $r9 goto label4;

        $r7 = <org.apache.commons.math3.geometry.partitioning.Region$Location: org.apache.commons.math3.geometry.partitioning.Region$Location INSIDE>;

        if $r8 == $r7 goto label5;

     label4:
        return null;

     label5:
        return $r4;
    }
