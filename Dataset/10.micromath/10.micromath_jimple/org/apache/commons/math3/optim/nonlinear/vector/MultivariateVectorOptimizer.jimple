org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer extends org.apache.commons.math3.optim.BaseMultivariateOptimizer
private org.apache.commons.math3.analysis.MultivariateVectorFunction model
private double[] target
private org.apache.commons.math3.linear.RealMatrix weightMatrix
    protected void <init>(org.apache.commons.math3.optim.ConvergenceChecker)
    {
        org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer r0;
        org.apache.commons.math3.optim.ConvergenceChecker r1;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer;

        r1 := @parameter0: org.apache.commons.math3.optim.ConvergenceChecker;

        specialinvoke r0.<org.apache.commons.math3.optim.BaseMultivariateOptimizer: void <init>(org.apache.commons.math3.optim.ConvergenceChecker)>(r1);

        return;
    }
    private void checkParameters()
    {
        org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer r0;
        double[] $r1;
        int $i0, $i1;
        org.apache.commons.math3.linear.RealMatrix $r2;
        org.apache.commons.math3.exception.DimensionMismatchException $r3;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer;

        $r1 = r0.<org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer: double[] target>;

        $i0 = lengthof $r1;

        $r2 = r0.<org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer: org.apache.commons.math3.linear.RealMatrix weightMatrix>;

        $i1 = interfaceinvoke $r2.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        if $i0 == $i1 goto label1;

        $r3 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $r1 = r0.<org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer: double[] target>;

        $i0 = lengthof $r1;

        $r2 = r0.<org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer: org.apache.commons.math3.linear.RealMatrix weightMatrix>;

        $i1 = interfaceinvoke $r2.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        specialinvoke $r3.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i0, $i1);

        throw $r3;

     label1:
        return;
    }
    protected double[] computeObjectiveValue(double[])
    {
        org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer r0;
        double[] $r1;
        org.apache.commons.math3.analysis.MultivariateVectorFunction $r2;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer;

        $r1 := @parameter0: double[];

        specialinvoke r0.<org.apache.commons.math3.optim.BaseMultivariateOptimizer: void incrementEvaluationCount()>();

        $r2 = r0.<org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer: org.apache.commons.math3.analysis.MultivariateVectorFunction model>;

        $r1 = interfaceinvoke $r2.<org.apache.commons.math3.analysis.MultivariateVectorFunction: double[] value(double[])>($r1);

        return $r1;
    }
    public double[] getTarget()
    {
        org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer r0;
        java.lang.Object $r1;
        double[] $r2;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer;

        $r2 = r0.<org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer: double[] target>;

        $r1 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (double[]) $r1;

        return $r2;
    }
    public int getTargetSize()
    {
        org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer r0;
        double[] $r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer;

        $r1 = r0.<org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer: double[] target>;

        $i0 = lengthof $r1;

        return $i0;
    }
    public org.apache.commons.math3.linear.RealMatrix getWeight()
    {
        org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer r0;
        org.apache.commons.math3.linear.RealMatrix $r1;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer;

        $r1 = r0.<org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer: org.apache.commons.math3.linear.RealMatrix weightMatrix>;

        $r1 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix copy()>();

        return $r1;
    }
    public volatile java.lang.Object optimize(org.apache.commons.math3.optim.OptimizationData[])
    {
        org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer r0;
        org.apache.commons.math3.optim.OptimizationData[] $r1;
        org.apache.commons.math3.optim.PointVectorValuePair $r2;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer;

        $r1 := @parameter0: org.apache.commons.math3.optim.OptimizationData[];

        $r2 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer: org.apache.commons.math3.optim.PointVectorValuePair optimize(org.apache.commons.math3.optim.OptimizationData[])>($r1);

        return $r2;
    }
    public transient org.apache.commons.math3.optim.PointVectorValuePair optimize(org.apache.commons.math3.optim.OptimizationData[]) throws org.apache.commons.math3.exception.TooManyEvaluationsException, org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer r0;
        org.apache.commons.math3.optim.OptimizationData[] $r1;
        java.lang.Object $r2;
        org.apache.commons.math3.optim.PointVectorValuePair $r3;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer;

        $r1 := @parameter0: org.apache.commons.math3.optim.OptimizationData[];

        $r2 = specialinvoke r0.<org.apache.commons.math3.optim.BaseMultivariateOptimizer: java.lang.Object optimize(org.apache.commons.math3.optim.OptimizationData[])>($r1);

        $r3 = (org.apache.commons.math3.optim.PointVectorValuePair) $r2;

        return $r3;
    }
    protected transient void parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[])
    {
        org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer r0;
        org.apache.commons.math3.optim.OptimizationData[] $r1;
        int i0, i1;
        org.apache.commons.math3.optim.OptimizationData r2;
        boolean $z0;
        org.apache.commons.math3.optim.nonlinear.vector.ModelFunction r3;
        org.apache.commons.math3.analysis.MultivariateVectorFunction $r4;
        org.apache.commons.math3.optim.nonlinear.vector.Target r5;
        double[] $r6;
        org.apache.commons.math3.optim.nonlinear.vector.Weight r7;
        org.apache.commons.math3.linear.RealMatrix $r8;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer;

        $r1 := @parameter0: org.apache.commons.math3.optim.OptimizationData[];

        specialinvoke r0.<org.apache.commons.math3.optim.BaseMultivariateOptimizer: void parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[])>($r1);

        i0 = lengthof $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label5;

        r2 = $r1[i1];

        $z0 = r2 instanceof org.apache.commons.math3.optim.nonlinear.vector.ModelFunction;

        if $z0 == 0 goto label3;

        r3 = (org.apache.commons.math3.optim.nonlinear.vector.ModelFunction) r2;

        $r4 = virtualinvoke r3.<org.apache.commons.math3.optim.nonlinear.vector.ModelFunction: org.apache.commons.math3.analysis.MultivariateVectorFunction getModelFunction()>();

        r0.<org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer: org.apache.commons.math3.analysis.MultivariateVectorFunction model> = $r4;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $z0 = r2 instanceof org.apache.commons.math3.optim.nonlinear.vector.Target;

        if $z0 == 0 goto label4;

        r5 = (org.apache.commons.math3.optim.nonlinear.vector.Target) r2;

        $r6 = virtualinvoke r5.<org.apache.commons.math3.optim.nonlinear.vector.Target: double[] getTarget()>();

        r0.<org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer: double[] target> = $r6;

        goto label2;

     label4:
        $z0 = r2 instanceof org.apache.commons.math3.optim.nonlinear.vector.Weight;

        if $z0 == 0 goto label2;

        r7 = (org.apache.commons.math3.optim.nonlinear.vector.Weight) r2;

        $r8 = virtualinvoke r7.<org.apache.commons.math3.optim.nonlinear.vector.Weight: org.apache.commons.math3.linear.RealMatrix getWeight()>();

        r0.<org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer: org.apache.commons.math3.linear.RealMatrix weightMatrix> = $r8;

        goto label2;

     label5:
        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer: void checkParameters()>();

        return;
    }
