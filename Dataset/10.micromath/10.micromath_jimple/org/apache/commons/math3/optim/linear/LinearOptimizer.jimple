org.apache.commons.math3.optim.linear.LinearOptimizer extends org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer
private org.apache.commons.math3.optim.linear.LinearObjectiveFunction function
private java.util.Collection linearConstraints
private boolean nonNegative
    protected void <init>()
    {
        org.apache.commons.math3.optim.linear.LinearOptimizer r0;

        r0 := @this: org.apache.commons.math3.optim.linear.LinearOptimizer;

        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer: void <init>(org.apache.commons.math3.optim.ConvergenceChecker)>(null);

        return;
    }
    protected java.util.Collection getConstraints()
    {
        org.apache.commons.math3.optim.linear.LinearOptimizer r0;
        java.util.Collection $r1;

        r0 := @this: org.apache.commons.math3.optim.linear.LinearOptimizer;

        $r1 = r0.<org.apache.commons.math3.optim.linear.LinearOptimizer: java.util.Collection linearConstraints>;

        $r1 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>($r1);

        return $r1;
    }
    protected org.apache.commons.math3.optim.linear.LinearObjectiveFunction getFunction()
    {
        org.apache.commons.math3.optim.linear.LinearOptimizer r0;
        org.apache.commons.math3.optim.linear.LinearObjectiveFunction r1;

        r0 := @this: org.apache.commons.math3.optim.linear.LinearOptimizer;

        r1 = r0.<org.apache.commons.math3.optim.linear.LinearOptimizer: org.apache.commons.math3.optim.linear.LinearObjectiveFunction function>;

        return r1;
    }
    protected boolean isRestrictedToNonNegative()
    {
        org.apache.commons.math3.optim.linear.LinearOptimizer r0;
        boolean z0;

        r0 := @this: org.apache.commons.math3.optim.linear.LinearOptimizer;

        z0 = r0.<org.apache.commons.math3.optim.linear.LinearOptimizer: boolean nonNegative>;

        return z0;
    }
    public volatile java.lang.Object optimize(org.apache.commons.math3.optim.OptimizationData[])
    {
        org.apache.commons.math3.optim.linear.LinearOptimizer r0;
        org.apache.commons.math3.optim.OptimizationData[] $r1;
        org.apache.commons.math3.optim.PointValuePair $r2;

        r0 := @this: org.apache.commons.math3.optim.linear.LinearOptimizer;

        $r1 := @parameter0: org.apache.commons.math3.optim.OptimizationData[];

        $r2 = virtualinvoke r0.<org.apache.commons.math3.optim.linear.LinearOptimizer: org.apache.commons.math3.optim.PointValuePair optimize(org.apache.commons.math3.optim.OptimizationData[])>($r1);

        return $r2;
    }
    public transient org.apache.commons.math3.optim.PointValuePair optimize(org.apache.commons.math3.optim.OptimizationData[]) throws org.apache.commons.math3.exception.TooManyIterationsException
    {
        org.apache.commons.math3.optim.linear.LinearOptimizer r0;
        org.apache.commons.math3.optim.OptimizationData[] $r1;
        org.apache.commons.math3.optim.PointValuePair $r2;

        r0 := @this: org.apache.commons.math3.optim.linear.LinearOptimizer;

        $r1 := @parameter0: org.apache.commons.math3.optim.OptimizationData[];

        $r2 = specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer: org.apache.commons.math3.optim.PointValuePair optimize(org.apache.commons.math3.optim.OptimizationData[])>($r1);

        return $r2;
    }
    protected transient void parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[])
    {
        org.apache.commons.math3.optim.linear.LinearOptimizer r0;
        org.apache.commons.math3.optim.OptimizationData[] $r1;
        int i0, i1;
        org.apache.commons.math3.optim.OptimizationData r2;
        boolean $z0;
        org.apache.commons.math3.optim.linear.LinearObjectiveFunction r3;
        org.apache.commons.math3.optim.linear.LinearConstraintSet r4;
        java.util.Collection $r5;
        org.apache.commons.math3.optim.linear.NonNegativeConstraint r6;

        r0 := @this: org.apache.commons.math3.optim.linear.LinearOptimizer;

        $r1 := @parameter0: org.apache.commons.math3.optim.OptimizationData[];

        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer: void parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[])>($r1);

        i0 = lengthof $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label5;

        r2 = $r1[i1];

        $z0 = r2 instanceof org.apache.commons.math3.optim.linear.LinearObjectiveFunction;

        if $z0 == 0 goto label3;

        r3 = (org.apache.commons.math3.optim.linear.LinearObjectiveFunction) r2;

        r0.<org.apache.commons.math3.optim.linear.LinearOptimizer: org.apache.commons.math3.optim.linear.LinearObjectiveFunction function> = r3;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $z0 = r2 instanceof org.apache.commons.math3.optim.linear.LinearConstraintSet;

        if $z0 == 0 goto label4;

        r4 = (org.apache.commons.math3.optim.linear.LinearConstraintSet) r2;

        $r5 = virtualinvoke r4.<org.apache.commons.math3.optim.linear.LinearConstraintSet: java.util.Collection getConstraints()>();

        r0.<org.apache.commons.math3.optim.linear.LinearOptimizer: java.util.Collection linearConstraints> = $r5;

        goto label2;

     label4:
        $z0 = r2 instanceof org.apache.commons.math3.optim.linear.NonNegativeConstraint;

        if $z0 == 0 goto label2;

        r6 = (org.apache.commons.math3.optim.linear.NonNegativeConstraint) r2;

        $z0 = virtualinvoke r6.<org.apache.commons.math3.optim.linear.NonNegativeConstraint: boolean isRestrictedToNonNegative()>();

        r0.<org.apache.commons.math3.optim.linear.LinearOptimizer: boolean nonNegative> = $z0;

        goto label2;

     label5:
        return;
    }
