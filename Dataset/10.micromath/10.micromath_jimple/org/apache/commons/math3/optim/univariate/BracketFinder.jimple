org.apache.commons.math3.optim.univariate.BracketFinder extends java.lang.Object
private static final double EPS_MIN
private static final double GOLD
private org.apache.commons.math3.util.IntegerSequence$Incrementor evaluations
private double fHi
private double fLo
private double fMid
private final double growLimit
private double hi
private double lo
private double mid
    public void <init>()
    {
        org.apache.commons.math3.optim.univariate.BracketFinder r0;

        r0 := @this: org.apache.commons.math3.optim.univariate.BracketFinder;

        specialinvoke r0.<org.apache.commons.math3.optim.univariate.BracketFinder: void <init>(double,int)>(100.0, 500);

        return;
    }
    public void <init>(double, int)
    {
        org.apache.commons.math3.optim.univariate.BracketFinder r0;
        double $d0;
        int $i0;
        byte $b1;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r1;
        java.lang.Double $r2;
        java.lang.Integer $r3;
        org.apache.commons.math3.util.IntegerSequence$Incrementor $r4;

        r0 := @this: org.apache.commons.math3.optim.univariate.BracketFinder;

        $d0 := @parameter0: double;

        $i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $b1 = $d0 cmpg 0.0;

        if $b1 > 0 goto label1;

        $r1 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        specialinvoke $r1.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(java.lang.Number)>($r2);

        throw $r1;

     label1:
        if $i0 > 0 goto label2;

        $r1 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r1.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(java.lang.Number)>($r3);

        throw $r1;

     label2:
        r0.<org.apache.commons.math3.optim.univariate.BracketFinder: double growLimit> = $d0;

        $r4 = staticinvoke <org.apache.commons.math3.util.IntegerSequence$Incrementor: org.apache.commons.math3.util.IntegerSequence$Incrementor create()>();

        $r4 = virtualinvoke $r4.<org.apache.commons.math3.util.IntegerSequence$Incrementor: org.apache.commons.math3.util.IntegerSequence$Incrementor withMaximalCount(int)>($i0);

        r0.<org.apache.commons.math3.optim.univariate.BracketFinder: org.apache.commons.math3.util.IntegerSequence$Incrementor evaluations> = $r4;

        return;
    }
    private double eval(org.apache.commons.math3.analysis.UnivariateFunction, double)
    {
        org.apache.commons.math3.optim.univariate.BracketFinder r0;
        org.apache.commons.math3.analysis.UnivariateFunction $r1;
        double $d0;
        org.apache.commons.math3.exception.MaxCountExceededException r2;
        org.apache.commons.math3.util.IntegerSequence$Incrementor $r3;
        org.apache.commons.math3.exception.TooManyEvaluationsException $r4;
        java.lang.Number $r5;

        r0 := @this: org.apache.commons.math3.optim.univariate.BracketFinder;

        $r1 := @parameter0: org.apache.commons.math3.analysis.UnivariateFunction;

        $d0 := @parameter1: double;

        $r3 = r0.<org.apache.commons.math3.optim.univariate.BracketFinder: org.apache.commons.math3.util.IntegerSequence$Incrementor evaluations>;

     label1:
        virtualinvoke $r3.<org.apache.commons.math3.util.IntegerSequence$Incrementor: void increment()>();

     label2:
        $d0 = interfaceinvoke $r1.<org.apache.commons.math3.analysis.UnivariateFunction: double value(double)>($d0);

        return $d0;

     label3:
        r2 := @caughtexception;

        $r4 = new org.apache.commons.math3.exception.TooManyEvaluationsException;

        $r5 = virtualinvoke r2.<org.apache.commons.math3.exception.MaxCountExceededException: java.lang.Number getMax()>();

        specialinvoke $r4.<org.apache.commons.math3.exception.TooManyEvaluationsException: void <init>(java.lang.Number)>($r5);

        throw $r4;

        catch org.apache.commons.math3.exception.MaxCountExceededException from label1 to label2 with label3;
    }
    public int getEvaluations()
    {
        org.apache.commons.math3.optim.univariate.BracketFinder r0;
        int $i0;
        org.apache.commons.math3.util.IntegerSequence$Incrementor $r1;

        r0 := @this: org.apache.commons.math3.optim.univariate.BracketFinder;

        $r1 = r0.<org.apache.commons.math3.optim.univariate.BracketFinder: org.apache.commons.math3.util.IntegerSequence$Incrementor evaluations>;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.util.IntegerSequence$Incrementor: int getCount()>();

        return $i0;
    }
    public double getFHi()
    {
        org.apache.commons.math3.optim.univariate.BracketFinder r0;
        double d0;

        r0 := @this: org.apache.commons.math3.optim.univariate.BracketFinder;

        d0 = r0.<org.apache.commons.math3.optim.univariate.BracketFinder: double fHi>;

        return d0;
    }
    public double getFLo()
    {
        org.apache.commons.math3.optim.univariate.BracketFinder r0;
        double d0;

        r0 := @this: org.apache.commons.math3.optim.univariate.BracketFinder;

        d0 = r0.<org.apache.commons.math3.optim.univariate.BracketFinder: double fLo>;

        return d0;
    }
    public double getFMid()
    {
        org.apache.commons.math3.optim.univariate.BracketFinder r0;
        double d0;

        r0 := @this: org.apache.commons.math3.optim.univariate.BracketFinder;

        d0 = r0.<org.apache.commons.math3.optim.univariate.BracketFinder: double fMid>;

        return d0;
    }
    public double getHi()
    {
        org.apache.commons.math3.optim.univariate.BracketFinder r0;
        double d0;

        r0 := @this: org.apache.commons.math3.optim.univariate.BracketFinder;

        d0 = r0.<org.apache.commons.math3.optim.univariate.BracketFinder: double hi>;

        return d0;
    }
    public double getLo()
    {
        org.apache.commons.math3.optim.univariate.BracketFinder r0;
        double d0;

        r0 := @this: org.apache.commons.math3.optim.univariate.BracketFinder;

        d0 = r0.<org.apache.commons.math3.optim.univariate.BracketFinder: double lo>;

        return d0;
    }
    public int getMaxEvaluations()
    {
        org.apache.commons.math3.optim.univariate.BracketFinder r0;
        int $i0;
        org.apache.commons.math3.util.IntegerSequence$Incrementor $r1;

        r0 := @this: org.apache.commons.math3.optim.univariate.BracketFinder;

        $r1 = r0.<org.apache.commons.math3.optim.univariate.BracketFinder: org.apache.commons.math3.util.IntegerSequence$Incrementor evaluations>;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.util.IntegerSequence$Incrementor: int getMaximalCount()>();

        return $i0;
    }
    public double getMid()
    {
        org.apache.commons.math3.optim.univariate.BracketFinder r0;
        double d0;

        r0 := @this: org.apache.commons.math3.optim.univariate.BracketFinder;

        d0 = r0.<org.apache.commons.math3.optim.univariate.BracketFinder: double mid>;

        return d0;
    }
    public void search(org.apache.commons.math3.analysis.UnivariateFunction, org.apache.commons.math3.optim.nonlinear.scalar.GoalType, double, double)
    {
        org.apache.commons.math3.optim.univariate.BracketFinder r0;
        org.apache.commons.math3.analysis.UnivariateFunction $r1;
        org.apache.commons.math3.optim.nonlinear.scalar.GoalType $r2, $r4;
        double d0, d1, d2, $d3, $d4, $d5, d6, $d7, d8, $d9;
        org.apache.commons.math3.util.IntegerSequence$Incrementor $r3;
        boolean z0;
        byte $b0;

        r0 := @this: org.apache.commons.math3.optim.univariate.BracketFinder;

        $r1 := @parameter0: org.apache.commons.math3.analysis.UnivariateFunction;

        $r2 := @parameter1: org.apache.commons.math3.optim.nonlinear.scalar.GoalType;

        $d3 := @parameter2: double;

        $d4 := @parameter3: double;

        $r3 = r0.<org.apache.commons.math3.optim.univariate.BracketFinder: org.apache.commons.math3.util.IntegerSequence$Incrementor evaluations>;

        $r3 = virtualinvoke $r3.<org.apache.commons.math3.util.IntegerSequence$Incrementor: org.apache.commons.math3.util.IntegerSequence$Incrementor withStart(int)>(0);

        r0.<org.apache.commons.math3.optim.univariate.BracketFinder: org.apache.commons.math3.util.IntegerSequence$Incrementor evaluations> = $r3;

        $r4 = <org.apache.commons.math3.optim.nonlinear.scalar.GoalType: org.apache.commons.math3.optim.nonlinear.scalar.GoalType MINIMIZE>;

        if $r2 != $r4 goto label09;

        z0 = 1;

     label01:
        $d5 = specialinvoke r0.<org.apache.commons.math3.optim.univariate.BracketFinder: double eval(org.apache.commons.math3.analysis.UnivariateFunction,double)>($r1, $d3);

        d6 = $d5;

        $d7 = specialinvoke r0.<org.apache.commons.math3.optim.univariate.BracketFinder: double eval(org.apache.commons.math3.analysis.UnivariateFunction,double)>($r1, $d4);

        d8 = $d7;

        if z0 == 0 goto label10;

        $b0 = $d5 cmpg $d7;

        if $b0 >= 0 goto label03;

     label02:
        d8 = $d3;

        $d3 = $d4;

        $d4 = d8;

        d6 = $d7;

        d8 = $d5;

     label03:
        $d5 = $d4 - $d3;

        $d5 = 1.618034 * $d5;

        $d5 = $d4 + $d5;

        $d7 = specialinvoke r0.<org.apache.commons.math3.optim.univariate.BracketFinder: double eval(org.apache.commons.math3.analysis.UnivariateFunction,double)>($r1, $d5);

     label04:
        if z0 == 0 goto label11;

        $b0 = $d7 cmpg d8;

        if $b0 >= 0 goto label08;

     label05:
        d0 = $d4 - $d3;

        d2 = d8 - $d7;

        d0 = d0 * d2;

        d2 = $d4 - $d5;

        d1 = d8 - d6;

        d1 = d2 * d1;

        d2 = d1 - d0;

        $d9 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d2);

        $b0 = $d9 cmpg 1.0E-21;

        if $b0 >= 0 goto label12;

        d2 = 2.0E-21;

     label06:
        $d9 = $d4 - $d5;

        d1 = $d9 * d1;

        $d9 = $d4 - $d3;

        d0 = $d9 * d0;

        d0 = d1 - d0;

        d0 = d0 / d2;

        d0 = $d4 - d0;

        d2 = r0.<org.apache.commons.math3.optim.univariate.BracketFinder: double growLimit>;

        d1 = $d5 - $d4;

        d2 = d2 * d1;

        d2 = $d4 + d2;

        d1 = d0 - $d5;

        $d9 = $d4 - d0;

        d1 = d1 * $d9;

        $b0 = d1 cmpl 0.0;

        if $b0 <= 0 goto label19;

        d2 = specialinvoke r0.<org.apache.commons.math3.optim.univariate.BracketFinder: double eval(org.apache.commons.math3.analysis.UnivariateFunction,double)>($r1, d0);

        if z0 == 0 goto label13;

        $b0 = d2 cmpg $d7;

        if $b0 >= 0 goto label14;

     label07:
        $d3 = $d4;

        $d4 = d0;

        d6 = d8;

        d8 = d2;

     label08:
        r0.<org.apache.commons.math3.optim.univariate.BracketFinder: double lo> = $d3;

        r0.<org.apache.commons.math3.optim.univariate.BracketFinder: double fLo> = d6;

        r0.<org.apache.commons.math3.optim.univariate.BracketFinder: double mid> = $d4;

        r0.<org.apache.commons.math3.optim.univariate.BracketFinder: double fMid> = d8;

        r0.<org.apache.commons.math3.optim.univariate.BracketFinder: double hi> = $d5;

        r0.<org.apache.commons.math3.optim.univariate.BracketFinder: double fHi> = $d7;

        $d3 = r0.<org.apache.commons.math3.optim.univariate.BracketFinder: double lo>;

        $d4 = r0.<org.apache.commons.math3.optim.univariate.BracketFinder: double hi>;

        $b0 = $d3 cmpl $d4;

        if $b0 <= 0 goto label24;

        $d3 = r0.<org.apache.commons.math3.optim.univariate.BracketFinder: double lo>;

        $d4 = r0.<org.apache.commons.math3.optim.univariate.BracketFinder: double hi>;

        r0.<org.apache.commons.math3.optim.univariate.BracketFinder: double lo> = $d4;

        r0.<org.apache.commons.math3.optim.univariate.BracketFinder: double hi> = $d3;

        $d3 = r0.<org.apache.commons.math3.optim.univariate.BracketFinder: double fLo>;

        $d4 = r0.<org.apache.commons.math3.optim.univariate.BracketFinder: double fHi>;

        r0.<org.apache.commons.math3.optim.univariate.BracketFinder: double fLo> = $d4;

        r0.<org.apache.commons.math3.optim.univariate.BracketFinder: double fHi> = $d3;

        return;

     label09:
        z0 = 0;

        goto label01;

     label10:
        $b0 = $d5 cmpl $d7;

        if $b0 <= 0 goto label03;

        goto label02;

     label11:
        $b0 = $d7 cmpl d8;

        if $b0 <= 0 goto label08;

        goto label05;

     label12:
        d2 = 2.0 * d2;

        goto label06;

     label13:
        $b0 = d2 cmpl $d7;

        if $b0 > 0 goto label07;

     label14:
        if z0 == 0 goto label16;

        $b0 = d2 cmpl d8;

        if $b0 <= 0 goto label17;

     label15:
        $d5 = d0;

        $d7 = d2;

        goto label08;

     label16:
        $b0 = d2 cmpg d8;

        if $b0 < 0 goto label15;

     label17:
        $d3 = $d5 - $d4;

        $d3 = 1.618034 * $d3;

        d0 = $d5 + $d3;

        d2 = specialinvoke r0.<org.apache.commons.math3.optim.univariate.BracketFinder: double eval(org.apache.commons.math3.analysis.UnivariateFunction,double)>($r1, d0);

     label18:
        $d3 = $d4;

        d6 = d8;

        $d4 = $d5;

        d8 = $d7;

        $d5 = d0;

        $d7 = d2;

        goto label04;

     label19:
        $d3 = d0 - d2;

        d6 = d2 - $d5;

        $d3 = $d3 * d6;

        $b0 = $d3 cmpl 0.0;

        if $b0 < 0 goto label20;

        d0 = d2;

        d2 = specialinvoke r0.<org.apache.commons.math3.optim.univariate.BracketFinder: double eval(org.apache.commons.math3.analysis.UnivariateFunction,double)>($r1, d2);

        goto label18;

     label20:
        $d3 = d0 - d2;

        d6 = $d5 - d0;

        $d3 = $d3 * d6;

        $b0 = $d3 cmpl 0.0;

        if $b0 <= 0 goto label23;

        $d3 = specialinvoke r0.<org.apache.commons.math3.optim.univariate.BracketFinder: double eval(org.apache.commons.math3.analysis.UnivariateFunction,double)>($r1, d0);

        d2 = $d3;

        if z0 == 0 goto label22;

        $b0 = $d3 cmpg $d7;

        if $b0 >= 0 goto label18;

     label21:
        $d4 = $d5;

        $d5 = d0;

        d8 = d0 - $d4;

        d8 = 1.618034 * d8;

        d0 = d0 + d8;

        d8 = $d7;

        $d7 = $d3;

        d2 = specialinvoke r0.<org.apache.commons.math3.optim.univariate.BracketFinder: double eval(org.apache.commons.math3.analysis.UnivariateFunction,double)>($r1, d0);

        goto label18;

     label22:
        $b0 = $d3 cmpl $d7;

        if $b0 <= 0 goto label18;

        goto label21;

     label23:
        $d3 = $d5 - $d4;

        $d3 = 1.618034 * $d3;

        d0 = $d5 + $d3;

        d2 = specialinvoke r0.<org.apache.commons.math3.optim.univariate.BracketFinder: double eval(org.apache.commons.math3.analysis.UnivariateFunction,double)>($r1, d0);

        goto label18;

     label24:
        return;
    }
