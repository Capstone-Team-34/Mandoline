org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer$2 extends java.lang.Object implements java.util.Comparator
final org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer this$0
final boolean val$isMinim
    void <init>(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer, boolean)
    {
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer$2 r0;
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer$2;

        $r1 := @parameter0: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer;

        $z0 := @parameter1: boolean;

        r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer$2: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer this$0> = $r1;

        r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer$2: boolean val$isMinim> = $z0;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer$2 r0;
        int $i0;
        java.lang.Object $r1, $r2;
        org.apache.commons.math3.optim.PointValuePair $r3, $r4;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer$2;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = (org.apache.commons.math3.optim.PointValuePair) $r1;

        $r4 = (org.apache.commons.math3.optim.PointValuePair) $r2;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer$2: int compare(org.apache.commons.math3.optim.PointValuePair,org.apache.commons.math3.optim.PointValuePair)>($r3, $r4);

        return $i0;
    }
    public int compare(org.apache.commons.math3.optim.PointValuePair, org.apache.commons.math3.optim.PointValuePair)
    {
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer$2 r0;
        org.apache.commons.math3.optim.PointValuePair $r1, $r2;
        java.lang.Object $r3;
        java.lang.Double $r4;
        double $d0, $d1;
        boolean $z0;
        int $i0;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer$2;

        $r1 := @parameter0: org.apache.commons.math3.optim.PointValuePair;

        $r2 := @parameter1: org.apache.commons.math3.optim.PointValuePair;

        $r3 = virtualinvoke $r1.<org.apache.commons.math3.optim.PointValuePair: java.lang.Object getValue()>();

        $r4 = (java.lang.Double) $r3;

        $d0 = virtualinvoke $r4.<java.lang.Double: double doubleValue()>();

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.optim.PointValuePair: java.lang.Object getValue()>();

        $r4 = (java.lang.Double) $r3;

        $d1 = virtualinvoke $r4.<java.lang.Double: double doubleValue()>();

        $z0 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer$2: boolean val$isMinim>;

        if $z0 == 0 goto label1;

        $i0 = staticinvoke <java.lang.Double: int compare(double,double)>($d0, $d1);

        return $i0;

     label1:
        $i0 = staticinvoke <java.lang.Double: int compare(double,double)>($d1, $d0);

        return $i0;
    }
