org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer extends org.apache.commons.math3.optim.nonlinear.scalar.GradientMultivariateOptimizer
private final org.apache.commons.math3.optim.nonlinear.scalar.LineSearch line
private final org.apache.commons.math3.optim.nonlinear.scalar.gradient.Preconditioner preconditioner
private final org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$Formula updateFormula
    public void <init>(org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$Formula, org.apache.commons.math3.optim.ConvergenceChecker)
    {
        org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer r0;
        org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$Formula $r1;
        org.apache.commons.math3.optim.ConvergenceChecker r2;
        org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$IdentityPreconditioner $r3;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer;

        $r1 := @parameter0: org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$Formula;

        r2 := @parameter1: org.apache.commons.math3.optim.ConvergenceChecker;

        $r3 = new org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$IdentityPreconditioner;

        specialinvoke $r3.<org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$IdentityPreconditioner: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer: void <init>(org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$Formula,org.apache.commons.math3.optim.ConvergenceChecker,double,double,double,org.apache.commons.math3.optim.nonlinear.scalar.gradient.Preconditioner)>($r1, r2, 1.0E-8, 1.0E-8, 1.0E-8, $r3);

        return;
    }
    public void <init>(org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$Formula, org.apache.commons.math3.optim.ConvergenceChecker, double, double, double)
    {
        org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer r0;
        org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$Formula $r1;
        org.apache.commons.math3.optim.ConvergenceChecker r2;
        double $d0, $d1, $d2;
        org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$IdentityPreconditioner $r3;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer;

        $r1 := @parameter0: org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$Formula;

        r2 := @parameter1: org.apache.commons.math3.optim.ConvergenceChecker;

        $d0 := @parameter2: double;

        $d1 := @parameter3: double;

        $d2 := @parameter4: double;

        $r3 = new org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$IdentityPreconditioner;

        specialinvoke $r3.<org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$IdentityPreconditioner: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer: void <init>(org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$Formula,org.apache.commons.math3.optim.ConvergenceChecker,double,double,double,org.apache.commons.math3.optim.nonlinear.scalar.gradient.Preconditioner)>($r1, r2, $d0, $d1, $d2, $r3);

        return;
    }
    public void <init>(org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$Formula, org.apache.commons.math3.optim.ConvergenceChecker, double, double, double, org.apache.commons.math3.optim.nonlinear.scalar.gradient.Preconditioner)
    {
        org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer r0;
        org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$Formula $r1;
        org.apache.commons.math3.optim.ConvergenceChecker r2;
        double $d0, $d1, $d2;
        org.apache.commons.math3.optim.nonlinear.scalar.gradient.Preconditioner $r3;
        org.apache.commons.math3.optim.nonlinear.scalar.LineSearch $r4;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer;

        $r1 := @parameter0: org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$Formula;

        r2 := @parameter1: org.apache.commons.math3.optim.ConvergenceChecker;

        $d0 := @parameter2: double;

        $d1 := @parameter3: double;

        $d2 := @parameter4: double;

        $r3 := @parameter5: org.apache.commons.math3.optim.nonlinear.scalar.gradient.Preconditioner;

        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.GradientMultivariateOptimizer: void <init>(org.apache.commons.math3.optim.ConvergenceChecker)>(r2);

        r0.<org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer: org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$Formula updateFormula> = $r1;

        r0.<org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer: org.apache.commons.math3.optim.nonlinear.scalar.gradient.Preconditioner preconditioner> = $r3;

        $r4 = new org.apache.commons.math3.optim.nonlinear.scalar.LineSearch;

        specialinvoke $r4.<org.apache.commons.math3.optim.nonlinear.scalar.LineSearch: void <init>(org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer,double,double,double)>(r0, $d0, $d1, $d2);

        r0.<org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer: org.apache.commons.math3.optim.nonlinear.scalar.LineSearch line> = $r4;

        return;
    }
    public void <init>(org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$Formula, org.apache.commons.math3.optim.ConvergenceChecker, org.apache.commons.math3.analysis.solvers.UnivariateSolver)
    {
        org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer r0;
        org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$Formula $r1;
        org.apache.commons.math3.optim.ConvergenceChecker r2;
        org.apache.commons.math3.analysis.solvers.UnivariateSolver $r3;
        org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$IdentityPreconditioner $r4;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer;

        $r1 := @parameter0: org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$Formula;

        r2 := @parameter1: org.apache.commons.math3.optim.ConvergenceChecker;

        $r3 := @parameter2: org.apache.commons.math3.analysis.solvers.UnivariateSolver;

        $r4 = new org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$IdentityPreconditioner;

        specialinvoke $r4.<org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$IdentityPreconditioner: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer: void <init>(org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$Formula,org.apache.commons.math3.optim.ConvergenceChecker,org.apache.commons.math3.analysis.solvers.UnivariateSolver,org.apache.commons.math3.optim.nonlinear.scalar.gradient.Preconditioner)>($r1, r2, $r3, $r4);

        return;
    }
    public void <init>(org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$Formula, org.apache.commons.math3.optim.ConvergenceChecker, org.apache.commons.math3.analysis.solvers.UnivariateSolver, org.apache.commons.math3.optim.nonlinear.scalar.gradient.Preconditioner)
    {
        org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer r0;
        org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$Formula $r1;
        org.apache.commons.math3.optim.ConvergenceChecker r2;
        org.apache.commons.math3.analysis.solvers.UnivariateSolver $r3;
        org.apache.commons.math3.optim.nonlinear.scalar.gradient.Preconditioner $r4;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer;

        $r1 := @parameter0: org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$Formula;

        r2 := @parameter1: org.apache.commons.math3.optim.ConvergenceChecker;

        $r3 := @parameter2: org.apache.commons.math3.analysis.solvers.UnivariateSolver;

        $r4 := @parameter3: org.apache.commons.math3.optim.nonlinear.scalar.gradient.Preconditioner;

        $d0 = interfaceinvoke $r3.<org.apache.commons.math3.analysis.solvers.UnivariateSolver: double getRelativeAccuracy()>();

        $d1 = interfaceinvoke $r3.<org.apache.commons.math3.analysis.solvers.UnivariateSolver: double getAbsoluteAccuracy()>();

        $d2 = interfaceinvoke $r3.<org.apache.commons.math3.analysis.solvers.UnivariateSolver: double getAbsoluteAccuracy()>();

        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer: void <init>(org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$Formula,org.apache.commons.math3.optim.ConvergenceChecker,double,double,double,org.apache.commons.math3.optim.nonlinear.scalar.gradient.Preconditioner)>($r1, r2, $d0, $d1, $d2, $r4);

        return;
    }
    private void checkParameters()
    {
        org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer r0;
        org.apache.commons.math3.exception.util.LocalizedFormats $r1;
        double[] $r2;
        org.apache.commons.math3.exception.MathUnsupportedOperationException $r3;
        java.lang.Object[] $r4;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer: double[] getLowerBound()>();

        if $r2 != null goto label1;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer: double[] getUpperBound()>();

        if $r2 == null goto label2;

     label1:
        $r3 = new org.apache.commons.math3.exception.MathUnsupportedOperationException;

        $r1 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats CONSTRAINT>;

        $r4 = newarray (java.lang.Object)[0];

        specialinvoke $r3.<org.apache.commons.math3.exception.MathUnsupportedOperationException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r1, $r4);

        throw $r3;

     label2:
        return;
    }
    protected volatile java.lang.Object doOptimize()
    {
        org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer r0;
        org.apache.commons.math3.optim.PointValuePair $r1;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer: org.apache.commons.math3.optim.PointValuePair doOptimize()>();

        return $r1;
    }
    protected org.apache.commons.math3.optim.PointValuePair doOptimize()
    {
        org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer r0;
        double d0, $d1, $d2, $d3, $d4;
        org.apache.commons.math3.optim.PointValuePair r1, r11;
        org.apache.commons.math3.optim.ConvergenceChecker $r2;
        double[] $r3, $r5, $r8, r9, $r14;
        org.apache.commons.math3.optim.nonlinear.scalar.GoalType $r4, $r6;
        int $i0, i1, $i2;
        org.apache.commons.math3.optim.nonlinear.scalar.gradient.Preconditioner $r7;
        java.lang.Object $r10;
        boolean $z0;
        org.apache.commons.math3.optim.nonlinear.scalar.LineSearch $r12;
        org.apache.commons.math3.optim.univariate.UnivariatePointValuePair $r13;
        int[] $r15;
        org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$Formula $r16;
        org.apache.commons.math3.exception.MathInternalError $r17;
        byte $b3;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer: org.apache.commons.math3.optim.ConvergenceChecker getConvergenceChecker()>();

        $r3 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer: double[] getStartPoint()>();

        $r4 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer: org.apache.commons.math3.optim.nonlinear.scalar.GoalType getGoalType()>();

        $i0 = lengthof $r3;

        $r5 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer: double[] computeObjectiveGradient(double[])>($r3);

        $r6 = <org.apache.commons.math3.optim.nonlinear.scalar.GoalType: org.apache.commons.math3.optim.nonlinear.scalar.GoalType MINIMIZE>;

        if $r4 != $r6 goto label02;

        i1 = 0;

     label01:
        if i1 >= $i0 goto label02;

        $d1 = $r5[i1];

        $d1 = neg $d1;

        $r5[i1] = $d1;

        i1 = i1 + 1;

        goto label01;

     label02:
        $r7 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer: org.apache.commons.math3.optim.nonlinear.scalar.gradient.Preconditioner preconditioner>;

        $r8 = interfaceinvoke $r7.<org.apache.commons.math3.optim.nonlinear.scalar.gradient.Preconditioner: double[] precondition(double[],double[])>($r3, $r5);

        r9 = $r8;

        $r10 = virtualinvoke $r8.<java.lang.Object: java.lang.Object clone()>();

        $r8 = (double[]) $r10;

        $d1 = 0.0;

        i1 = 0;

     label03:
        if i1 >= $i0 goto label04;

        d0 = $r5[i1];

        $d2 = $r8[i1];

        d0 = d0 * $d2;

        $d1 = $d1 + d0;

        i1 = i1 + 1;

        goto label03;

     label04:
        r11 = null;

     label05:
        virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer: void incrementIterationCount()>();

        d0 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer: double computeObjectiveValue(double[])>($r3);

        r1 = r11;

        r11 = new org.apache.commons.math3.optim.PointValuePair;

        specialinvoke r11.<org.apache.commons.math3.optim.PointValuePair: void <init>(double[],double)>($r3, d0);

        if r1 == null goto label06;

        i1 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer: int getIterations()>();

        $z0 = interfaceinvoke $r2.<org.apache.commons.math3.optim.ConvergenceChecker: boolean converged(int,java.lang.Object,java.lang.Object)>(i1, r1, r11);

        if $z0 == 0 goto label06;

        return r11;

     label06:
        $r12 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer: org.apache.commons.math3.optim.nonlinear.scalar.LineSearch line>;

        $r13 = virtualinvoke $r12.<org.apache.commons.math3.optim.nonlinear.scalar.LineSearch: org.apache.commons.math3.optim.univariate.UnivariatePointValuePair search(double[],double[])>($r3, $r8);

        d0 = virtualinvoke $r13.<org.apache.commons.math3.optim.univariate.UnivariatePointValuePair: double getPoint()>();

        i1 = 0;

     label07:
        $i2 = lengthof $r3;

        if i1 >= $i2 goto label08;

        $d2 = $r3[i1];

        $d3 = $r8[i1];

        $d3 = $d3 * d0;

        $d2 = $d2 + $d3;

        $r3[i1] = $d2;

        i1 = i1 + 1;

        goto label07;

     label08:
        $r5 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer: double[] computeObjectiveGradient(double[])>($r3);

        $r6 = <org.apache.commons.math3.optim.nonlinear.scalar.GoalType: org.apache.commons.math3.optim.nonlinear.scalar.GoalType MINIMIZE>;

        if $r4 != $r6 goto label10;

        i1 = 0;

     label09:
        if i1 >= $i0 goto label10;

        d0 = $r5[i1];

        d0 = neg d0;

        $r5[i1] = d0;

        i1 = i1 + 1;

        goto label09;

     label10:
        d0 = $d1;

        $r7 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer: org.apache.commons.math3.optim.nonlinear.scalar.gradient.Preconditioner preconditioner>;

        $r14 = interfaceinvoke $r7.<org.apache.commons.math3.optim.nonlinear.scalar.gradient.Preconditioner: double[] precondition(double[],double[])>($r3, $r5);

        $d1 = 0.0;

        i1 = 0;

     label11:
        if i1 >= $i0 goto label12;

        $d2 = $r5[i1];

        $d3 = $r14[i1];

        $d2 = $d2 * $d3;

        $d1 = $d1 + $d2;

        i1 = i1 + 1;

        goto label11;

     label12:
        $r15 = <org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$1: int[] $SwitchMap$org$apache$commons$math3$optim$nonlinear$scalar$gradient$NonLinearConjugateGradientOptimizer$Formula>;

        $r16 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer: org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$Formula updateFormula>;

        i1 = virtualinvoke $r16.<org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$Formula: int ordinal()>();

        i1 = $r15[i1];

        lookupswitch(i1)
        {
            case 1: goto label14;
            case 2: goto label17;
            default: goto label13;
        };

     label13:
        $r17 = new org.apache.commons.math3.exception.MathInternalError;

        specialinvoke $r17.<org.apache.commons.math3.exception.MathInternalError: void <init>()>();

        throw $r17;

     label14:
        d0 = $d1 / d0;

     label15:
        r9 = $r14;

        i1 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer: int getIterations()>();

        i1 = i1 % $i0;

        if i1 == 0 goto label16;

        $b3 = d0 cmpg 0.0;

        if $b3 >= 0 goto label20;

     label16:
        $r10 = virtualinvoke $r14.<java.lang.Object: java.lang.Object clone()>();

        $r8 = (double[]) $r10;

        goto label05;

     label17:
        $d2 = 0.0;

        i1 = 0;

     label18:
        $i2 = lengthof $r5;

        if i1 >= $i2 goto label19;

        $d3 = $r5[i1];

        $d4 = r9[i1];

        $d3 = $d3 * $d4;

        $d2 = $d2 + $d3;

        i1 = i1 + 1;

        goto label18;

     label19:
        $d2 = $d1 - $d2;

        d0 = $d2 / d0;

        goto label15;

     label20:
        i1 = 0;

     label21:
        if i1 >= $i0 goto label05;

        $d2 = $r14[i1];

        $d3 = $r8[i1];

        $d3 = $d3 * d0;

        $d2 = $d2 + $d3;

        $r8[i1] = $d2;

        i1 = i1 + 1;

        goto label21;
    }
    public volatile java.lang.Object optimize(org.apache.commons.math3.optim.OptimizationData[])
    {
        org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer r0;
        org.apache.commons.math3.optim.OptimizationData[] $r1;
        org.apache.commons.math3.optim.PointValuePair $r2;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer;

        $r1 := @parameter0: org.apache.commons.math3.optim.OptimizationData[];

        $r2 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer: org.apache.commons.math3.optim.PointValuePair optimize(org.apache.commons.math3.optim.OptimizationData[])>($r1);

        return $r2;
    }
    public transient org.apache.commons.math3.optim.PointValuePair optimize(org.apache.commons.math3.optim.OptimizationData[]) throws org.apache.commons.math3.exception.TooManyEvaluationsException
    {
        org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer r0;
        org.apache.commons.math3.optim.OptimizationData[] $r1;
        org.apache.commons.math3.optim.PointValuePair $r2;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer;

        $r1 := @parameter0: org.apache.commons.math3.optim.OptimizationData[];

        $r2 = specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.GradientMultivariateOptimizer: org.apache.commons.math3.optim.PointValuePair optimize(org.apache.commons.math3.optim.OptimizationData[])>($r1);

        return $r2;
    }
    protected transient void parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[])
    {
        org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer r0;
        org.apache.commons.math3.optim.OptimizationData[] $r1;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer;

        $r1 := @parameter0: org.apache.commons.math3.optim.OptimizationData[];

        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.GradientMultivariateOptimizer: void parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[])>($r1);

        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer: void checkParameters()>();

        return;
    }
