org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer extends org.apache.commons.math3.optim.univariate.UnivariateOptimizer
private org.apache.commons.math3.random.RandomGenerator generator
private int maxEvalIndex
private org.apache.commons.math3.optim.OptimizationData[] optimData
private org.apache.commons.math3.optim.univariate.UnivariatePointValuePair[] optima
private final org.apache.commons.math3.optim.univariate.UnivariateOptimizer optimizer
private int searchIntervalIndex
private int starts
private int totalEvaluations
    public void <init>(org.apache.commons.math3.optim.univariate.UnivariateOptimizer, int, org.apache.commons.math3.random.RandomGenerator)
    {
        org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer r0;
        org.apache.commons.math3.optim.univariate.UnivariateOptimizer $r1;
        int $i0;
        org.apache.commons.math3.random.RandomGenerator $r2;
        org.apache.commons.math3.optim.ConvergenceChecker $r3;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r4;
        java.lang.Integer $r5;

        r0 := @this: org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer;

        $r1 := @parameter0: org.apache.commons.math3.optim.univariate.UnivariateOptimizer;

        $i0 := @parameter1: int;

        $r2 := @parameter2: org.apache.commons.math3.random.RandomGenerator;

        $r3 = virtualinvoke $r1.<org.apache.commons.math3.optim.univariate.UnivariateOptimizer: org.apache.commons.math3.optim.ConvergenceChecker getConvergenceChecker()>();

        specialinvoke r0.<org.apache.commons.math3.optim.univariate.UnivariateOptimizer: void <init>(org.apache.commons.math3.optim.ConvergenceChecker)>($r3);

        r0.<org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer: int maxEvalIndex> = -1;

        r0.<org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer: int searchIntervalIndex> = -1;

        if $i0 >= 1 goto label1;

        $r4 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r4.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(java.lang.Number)>($r5);

        throw $r4;

     label1:
        r0.<org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer: org.apache.commons.math3.optim.univariate.UnivariateOptimizer optimizer> = $r1;

        r0.<org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer: int starts> = $i0;

        r0.<org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer: org.apache.commons.math3.random.RandomGenerator generator> = $r2;

        return;
    }
    private void sortPairs(org.apache.commons.math3.optim.nonlinear.scalar.GoalType)
    {
        org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer r0;
        org.apache.commons.math3.optim.nonlinear.scalar.GoalType $r1;
        org.apache.commons.math3.optim.univariate.UnivariatePointValuePair[] $r2;
        org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer$1 $r3;

        r0 := @this: org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer;

        $r1 := @parameter0: org.apache.commons.math3.optim.nonlinear.scalar.GoalType;

        $r2 = r0.<org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer: org.apache.commons.math3.optim.univariate.UnivariatePointValuePair[] optima>;

        $r3 = new org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer$1;

        specialinvoke $r3.<org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer$1: void <init>(org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer,org.apache.commons.math3.optim.nonlinear.scalar.GoalType)>(r0, $r1);

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>($r2, $r3);

        return;
    }
    protected volatile java.lang.Object doOptimize()
    {
        org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer r0;
        org.apache.commons.math3.optim.univariate.UnivariatePointValuePair $r1;

        r0 := @this: org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer: org.apache.commons.math3.optim.univariate.UnivariatePointValuePair doOptimize()>();

        return $r1;
    }
    protected org.apache.commons.math3.optim.univariate.UnivariatePointValuePair doOptimize()
    {
        org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer r0;
        java.lang.RuntimeException r1;
        double $d0, $d1, $d2, $d3, $d4;
        int i0, $i1, $i2, $i3;
        org.apache.commons.math3.optim.OptimizationData[] $r2;
        org.apache.commons.math3.optim.OptimizationData $r3;
        boolean $z0;
        org.apache.commons.math3.exception.MathIllegalStateException $r4;
        org.apache.commons.math3.optim.univariate.UnivariatePointValuePair[] $r5;
        org.apache.commons.math3.optim.MaxEval $r6;
        org.apache.commons.math3.optim.univariate.SearchInterval $r7;
        org.apache.commons.math3.optim.univariate.UnivariateOptimizer $r8;
        org.apache.commons.math3.optim.univariate.UnivariatePointValuePair $r9;
        org.apache.commons.math3.random.RandomGenerator $r10;
        org.apache.commons.math3.optim.nonlinear.scalar.GoalType $r11;

        r0 := @this: org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer;

        i0 = 0;

     label01:
        $r2 = r0.<org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer: org.apache.commons.math3.optim.OptimizationData[] optimData>;

        $i1 = lengthof $r2;

        if i0 >= $i1 goto label04;

        $r2 = r0.<org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer: org.apache.commons.math3.optim.OptimizationData[] optimData>;

        $r3 = $r2[i0];

        $z0 = $r3 instanceof org.apache.commons.math3.optim.MaxEval;

        if $z0 == 0 goto label03;

        $r2 = r0.<org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer: org.apache.commons.math3.optim.OptimizationData[] optimData>;

        $r2[i0] = null;

        r0.<org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer: int maxEvalIndex> = i0;

     label02:
        i0 = i0 + 1;

        goto label01;

     label03:
        $r2 = r0.<org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer: org.apache.commons.math3.optim.OptimizationData[] optimData>;

        $r3 = $r2[i0];

        $z0 = $r3 instanceof org.apache.commons.math3.optim.univariate.SearchInterval;

        if $z0 == 0 goto label02;

        $r2 = r0.<org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer: org.apache.commons.math3.optim.OptimizationData[] optimData>;

        $r2[i0] = null;

        r0.<org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer: int searchIntervalIndex> = i0;

        goto label02;

     label04:
        i0 = r0.<org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer: int maxEvalIndex>;

        if i0 != -1 goto label05;

        $r4 = new org.apache.commons.math3.exception.MathIllegalStateException;

        specialinvoke $r4.<org.apache.commons.math3.exception.MathIllegalStateException: void <init>()>();

        throw $r4;

     label05:
        i0 = r0.<org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer: int searchIntervalIndex>;

        if i0 != -1 goto label06;

        $r4 = new org.apache.commons.math3.exception.MathIllegalStateException;

        specialinvoke $r4.<org.apache.commons.math3.exception.MathIllegalStateException: void <init>()>();

        throw $r4;

     label06:
        r1 = null;

        i0 = r0.<org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer: int starts>;

        $r5 = newarray (org.apache.commons.math3.optim.univariate.UnivariatePointValuePair)[i0];

        r0.<org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer: org.apache.commons.math3.optim.univariate.UnivariatePointValuePair[] optima> = $r5;

        r0.<org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer: int totalEvaluations> = 0;

        i0 = virtualinvoke r0.<org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer: int getMaxEvaluations()>();

        $d1 = virtualinvoke r0.<org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer: double getMin()>();

        $d2 = virtualinvoke r0.<org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer: double getMax()>();

        $d3 = virtualinvoke r0.<org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer: double getStartValue()>();

        $i1 = 0;

     label07:
        $i2 = r0.<org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer: int starts>;

        if $i1 >= $i2 goto label21;

     label08:
        $r2 = r0.<org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer: org.apache.commons.math3.optim.OptimizationData[] optimData>;

        $i2 = r0.<org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer: int maxEvalIndex>;

     label09:
        $r6 = new org.apache.commons.math3.optim.MaxEval;

     label10:
        $i3 = r0.<org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer: int totalEvaluations>;

     label11:
        $i3 = i0 - $i3;

     label12:
        specialinvoke $r6.<org.apache.commons.math3.optim.MaxEval: void <init>(int)>($i3);

        $r2[$i2] = $r6;

     label13:
        if $i1 != 0 goto label18;

        $d0 = $d3;

     label14:
        $r2 = r0.<org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer: org.apache.commons.math3.optim.OptimizationData[] optimData>;

        $i2 = r0.<org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer: int searchIntervalIndex>;

     label15:
        $r7 = new org.apache.commons.math3.optim.univariate.SearchInterval;

     label16:
        specialinvoke $r7.<org.apache.commons.math3.optim.univariate.SearchInterval: void <init>(double,double,double)>($d1, $d2, $d0);

        $r2[$i2] = $r7;

        $r5 = r0.<org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer: org.apache.commons.math3.optim.univariate.UnivariatePointValuePair[] optima>;

        $r8 = r0.<org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer: org.apache.commons.math3.optim.univariate.UnivariateOptimizer optimizer>;

        $r2 = r0.<org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer: org.apache.commons.math3.optim.OptimizationData[] optimData>;

        $r9 = virtualinvoke $r8.<org.apache.commons.math3.optim.univariate.UnivariateOptimizer: org.apache.commons.math3.optim.univariate.UnivariatePointValuePair optimize(org.apache.commons.math3.optim.OptimizationData[])>($r2);

        $r5[$i1] = $r9;

     label17:
        $i2 = r0.<org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer: int totalEvaluations>;

        $r8 = r0.<org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer: org.apache.commons.math3.optim.univariate.UnivariateOptimizer optimizer>;

        $i3 = virtualinvoke $r8.<org.apache.commons.math3.optim.univariate.UnivariateOptimizer: int getEvaluations()>();

        $i2 = $i2 + $i3;

        r0.<org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer: int totalEvaluations> = $i2;

        $i1 = $i1 + 1;

        goto label07;

     label18:
        $r10 = r0.<org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer: org.apache.commons.math3.random.RandomGenerator generator>;

        $d4 = interfaceinvoke $r10.<org.apache.commons.math3.random.RandomGenerator: double nextDouble()>();

     label19:
        $d0 = $d2 - $d1;

        $d0 = $d4 * $d0;

        $d0 = $d1 + $d0;

        goto label14;

     label20:
        r1 := @caughtexception;

        $r5 = r0.<org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer: org.apache.commons.math3.optim.univariate.UnivariatePointValuePair[] optima>;

        $r5[$i1] = null;

        goto label17;

     label21:
        $r11 = virtualinvoke r0.<org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer: org.apache.commons.math3.optim.nonlinear.scalar.GoalType getGoalType()>();

        specialinvoke r0.<org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer: void sortPairs(org.apache.commons.math3.optim.nonlinear.scalar.GoalType)>($r11);

        $r5 = r0.<org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer: org.apache.commons.math3.optim.univariate.UnivariatePointValuePair[] optima>;

        $r9 = $r5[0];

        if $r9 != null goto label22;

        throw r1;

     label22:
        $r5 = r0.<org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer: org.apache.commons.math3.optim.univariate.UnivariatePointValuePair[] optima>;

        $r9 = $r5[0];

        return $r9;

        catch java.lang.RuntimeException from label08 to label09 with label20;
        catch java.lang.RuntimeException from label10 to label11 with label20;
        catch java.lang.RuntimeException from label12 to label13 with label20;
        catch java.lang.RuntimeException from label14 to label15 with label20;
        catch java.lang.RuntimeException from label16 to label17 with label20;
        catch java.lang.RuntimeException from label18 to label19 with label20;
    }
    public int getEvaluations()
    {
        org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer r0;
        int i0;

        r0 := @this: org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer;

        i0 = r0.<org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer: int totalEvaluations>;

        return i0;
    }
    public org.apache.commons.math3.optim.univariate.UnivariatePointValuePair[] getOptima()
    {
        org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer r0;
        org.apache.commons.math3.exception.util.LocalizedFormats $r1;
        java.lang.Object $r2;
        org.apache.commons.math3.optim.univariate.UnivariatePointValuePair[] $r3;
        org.apache.commons.math3.exception.MathIllegalStateException $r4;
        java.lang.Object[] $r5;

        r0 := @this: org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer;

        $r3 = r0.<org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer: org.apache.commons.math3.optim.univariate.UnivariatePointValuePair[] optima>;

        if $r3 != null goto label1;

        $r4 = new org.apache.commons.math3.exception.MathIllegalStateException;

        $r1 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NO_OPTIMUM_COMPUTED_YET>;

        $r5 = newarray (java.lang.Object)[0];

        specialinvoke $r4.<org.apache.commons.math3.exception.MathIllegalStateException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r1, $r5);

        throw $r4;

     label1:
        $r3 = r0.<org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer: org.apache.commons.math3.optim.univariate.UnivariatePointValuePair[] optima>;

        $r2 = virtualinvoke $r3.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (org.apache.commons.math3.optim.univariate.UnivariatePointValuePair[]) $r2;

        return $r3;
    }
    public volatile java.lang.Object optimize(org.apache.commons.math3.optim.OptimizationData[]) throws org.apache.commons.math3.exception.TooManyEvaluationsException, org.apache.commons.math3.exception.TooManyIterationsException
    {
        org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer r0;
        org.apache.commons.math3.optim.OptimizationData[] $r1;
        org.apache.commons.math3.optim.univariate.UnivariatePointValuePair $r2;

        r0 := @this: org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer;

        $r1 := @parameter0: org.apache.commons.math3.optim.OptimizationData[];

        $r2 = virtualinvoke r0.<org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer: org.apache.commons.math3.optim.univariate.UnivariatePointValuePair optimize(org.apache.commons.math3.optim.OptimizationData[])>($r1);

        return $r2;
    }
    public transient org.apache.commons.math3.optim.univariate.UnivariatePointValuePair optimize(org.apache.commons.math3.optim.OptimizationData[])
    {
        org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer r0;
        org.apache.commons.math3.optim.OptimizationData[] $r1;
        org.apache.commons.math3.optim.univariate.UnivariatePointValuePair $r2;

        r0 := @this: org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer;

        $r1 := @parameter0: org.apache.commons.math3.optim.OptimizationData[];

        r0.<org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer: org.apache.commons.math3.optim.OptimizationData[] optimData> = $r1;

        $r2 = specialinvoke r0.<org.apache.commons.math3.optim.univariate.UnivariateOptimizer: org.apache.commons.math3.optim.univariate.UnivariatePointValuePair optimize(org.apache.commons.math3.optim.OptimizationData[])>($r1);

        return $r2;
    }
