org.apache.commons.math3.optim.SimplePointChecker extends org.apache.commons.math3.optim.AbstractConvergenceChecker
private static final int ITERATION_CHECK_DISABLED
private final int maxIterationCount
    public void <init>(double, double)
    {
        org.apache.commons.math3.optim.SimplePointChecker r0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.optim.SimplePointChecker;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.optim.AbstractConvergenceChecker: void <init>(double,double)>($d0, $d1);

        r0.<org.apache.commons.math3.optim.SimplePointChecker: int maxIterationCount> = -1;

        return;
    }
    public void <init>(double, double, int)
    {
        org.apache.commons.math3.optim.SimplePointChecker r0;
        double $d0, $d1;
        int $i0;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r1;
        java.lang.Integer $r2;

        r0 := @this: org.apache.commons.math3.optim.SimplePointChecker;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $i0 := @parameter2: int;

        specialinvoke r0.<org.apache.commons.math3.optim.AbstractConvergenceChecker: void <init>(double,double)>($d0, $d1);

        if $i0 > 0 goto label1;

        $r1 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r1.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(java.lang.Number)>($r2);

        throw $r1;

     label1:
        r0.<org.apache.commons.math3.optim.SimplePointChecker: int maxIterationCount> = $i0;

        return;
    }
    public volatile boolean converged(int, java.lang.Object, java.lang.Object)
    {
        org.apache.commons.math3.optim.SimplePointChecker r0;
        int $i0;
        boolean $z0;
        java.lang.Object $r1, $r2;
        org.apache.commons.math3.util.Pair $r3, $r4;

        r0 := @this: org.apache.commons.math3.optim.SimplePointChecker;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.lang.Object;

        $r3 = (org.apache.commons.math3.util.Pair) $r1;

        $r4 = (org.apache.commons.math3.util.Pair) $r2;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.optim.SimplePointChecker: boolean converged(int,org.apache.commons.math3.util.Pair,org.apache.commons.math3.util.Pair)>($i0, $r3, $r4);

        return $z0;
    }
    public boolean converged(int, org.apache.commons.math3.util.Pair, org.apache.commons.math3.util.Pair)
    {
        org.apache.commons.math3.optim.SimplePointChecker r0;
        int $i0, $i1;
        org.apache.commons.math3.util.Pair r1, r2;
        double d0, d1, $d2;
        java.lang.Object $r3;
        double[] r4, r5;
        byte $b2;

        r0 := @this: org.apache.commons.math3.optim.SimplePointChecker;

        $i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.util.Pair;

        r2 := @parameter2: org.apache.commons.math3.util.Pair;

        $i1 = r0.<org.apache.commons.math3.optim.SimplePointChecker: int maxIterationCount>;

        if $i1 == -1 goto label1;

        $i1 = r0.<org.apache.commons.math3.optim.SimplePointChecker: int maxIterationCount>;

        if $i0 < $i1 goto label1;

        return 1;

     label1:
        $r3 = virtualinvoke r1.<org.apache.commons.math3.util.Pair: java.lang.Object getKey()>();

        r4 = (double[]) $r3;

        $r3 = virtualinvoke r2.<org.apache.commons.math3.util.Pair: java.lang.Object getKey()>();

        r5 = (double[]) $r3;

        $i0 = 0;

     label2:
        $i1 = lengthof r4;

        if $i0 >= $i1 goto label4;

        d1 = r4[$i0];

        d0 = r5[$i0];

        $d2 = d1 - d0;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d2);

        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d1);

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d0);

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>(d1, d0);

        d1 = virtualinvoke r0.<org.apache.commons.math3.optim.SimplePointChecker: double getRelativeThreshold()>();

        d0 = d1 * d0;

        $b2 = $d2 cmpl d0;

        if $b2 <= 0 goto label3;

        d0 = virtualinvoke r0.<org.apache.commons.math3.optim.SimplePointChecker: double getAbsoluteThreshold()>();

        $b2 = $d2 cmpl d0;

        if $b2 <= 0 goto label3;

        return 0;

     label3:
        $i0 = $i0 + 1;

        goto label2;

     label4:
        return 1;
    }
