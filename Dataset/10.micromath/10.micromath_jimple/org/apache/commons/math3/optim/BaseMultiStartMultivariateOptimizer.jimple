org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer extends org.apache.commons.math3.optim.BaseMultivariateOptimizer
private org.apache.commons.math3.random.RandomVectorGenerator generator
private int initialGuessIndex
private int maxEvalIndex
private org.apache.commons.math3.optim.OptimizationData[] optimData
private final org.apache.commons.math3.optim.BaseMultivariateOptimizer optimizer
private int starts
private int totalEvaluations
    public void <init>(org.apache.commons.math3.optim.BaseMultivariateOptimizer, int, org.apache.commons.math3.random.RandomVectorGenerator)
    {
        org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer r0;
        org.apache.commons.math3.optim.BaseMultivariateOptimizer r1;
        int $i0;
        org.apache.commons.math3.random.RandomVectorGenerator $r2;
        org.apache.commons.math3.optim.ConvergenceChecker $r3;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r4;
        java.lang.Integer $r5;

        r0 := @this: org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer;

        r1 := @parameter0: org.apache.commons.math3.optim.BaseMultivariateOptimizer;

        $i0 := @parameter1: int;

        $r2 := @parameter2: org.apache.commons.math3.random.RandomVectorGenerator;

        $r3 = virtualinvoke r1.<org.apache.commons.math3.optim.BaseMultivariateOptimizer: org.apache.commons.math3.optim.ConvergenceChecker getConvergenceChecker()>();

        specialinvoke r0.<org.apache.commons.math3.optim.BaseMultivariateOptimizer: void <init>(org.apache.commons.math3.optim.ConvergenceChecker)>($r3);

        r0.<org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer: int maxEvalIndex> = -1;

        r0.<org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer: int initialGuessIndex> = -1;

        if $i0 >= 1 goto label1;

        $r4 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r4.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(java.lang.Number)>($r5);

        throw $r4;

     label1:
        r0.<org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer: org.apache.commons.math3.optim.BaseMultivariateOptimizer optimizer> = r1;

        r0.<org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer: int starts> = $i0;

        r0.<org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer: org.apache.commons.math3.random.RandomVectorGenerator generator> = $r2;

        return;
    }
protected abstract void clear() { 
// no body
} 
    protected java.lang.Object doOptimize()
    {
        org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer r0;
        java.lang.RuntimeException r1;
        int i0, $i1, $i2, $i3, $i4;
        org.apache.commons.math3.optim.OptimizationData[] $r2;
        org.apache.commons.math3.optim.OptimizationData $r3;
        boolean $z0;
        org.apache.commons.math3.exception.MathIllegalStateException $r4;
        double[] $r5, $r6, $r7, r9;
        org.apache.commons.math3.optim.MaxEval $r8;
        org.apache.commons.math3.optim.InitialGuess $r10;
        org.apache.commons.math3.optim.BaseMultivariateOptimizer $r11;
        java.lang.Object $r12;
        org.apache.commons.math3.exception.TooManyEvaluationsException $r13;
        java.lang.Integer $r14;
        org.apache.commons.math3.random.RandomVectorGenerator $r15;
        double $d0, $d1;
        byte $b5;
        java.lang.Object[] $r16;

        r0 := @this: org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer;

        i0 = 0;

     label01:
        $r2 = r0.<org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer: org.apache.commons.math3.optim.OptimizationData[] optimData>;

        $i1 = lengthof $r2;

        if i0 >= $i1 goto label04;

        $r2 = r0.<org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer: org.apache.commons.math3.optim.OptimizationData[] optimData>;

        $r3 = $r2[i0];

        $z0 = $r3 instanceof org.apache.commons.math3.optim.MaxEval;

        if $z0 == 0 goto label02;

        $r2 = r0.<org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer: org.apache.commons.math3.optim.OptimizationData[] optimData>;

        $r2[i0] = null;

        r0.<org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer: int maxEvalIndex> = i0;

     label02:
        $r2 = r0.<org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer: org.apache.commons.math3.optim.OptimizationData[] optimData>;

        $r3 = $r2[i0];

        $z0 = $r3 instanceof org.apache.commons.math3.optim.InitialGuess;

        if $z0 == 0 goto label03;

        $r2 = r0.<org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer: org.apache.commons.math3.optim.OptimizationData[] optimData>;

        $r2[i0] = null;

        r0.<org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer: int initialGuessIndex> = i0;

     label03:
        i0 = i0 + 1;

        goto label01;

     label04:
        i0 = r0.<org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer: int maxEvalIndex>;

        if i0 != -1 goto label05;

        $r4 = new org.apache.commons.math3.exception.MathIllegalStateException;

        specialinvoke $r4.<org.apache.commons.math3.exception.MathIllegalStateException: void <init>()>();

        throw $r4;

     label05:
        i0 = r0.<org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer: int initialGuessIndex>;

        if i0 != -1 goto label06;

        $r4 = new org.apache.commons.math3.exception.MathIllegalStateException;

        specialinvoke $r4.<org.apache.commons.math3.exception.MathIllegalStateException: void <init>()>();

        throw $r4;

     label06:
        r1 = null;

        r0.<org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer: int totalEvaluations> = 0;

        virtualinvoke r0.<org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer: void clear()>();

        i0 = virtualinvoke r0.<org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer: int getMaxEvaluations()>();

        $r5 = virtualinvoke r0.<org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer: double[] getLowerBound()>();

        $r6 = virtualinvoke r0.<org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer: double[] getUpperBound()>();

        $r7 = virtualinvoke r0.<org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer: double[] getStartPoint()>();

        $i1 = 0;

     label07:
        $i2 = r0.<org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer: int starts>;

        if $i1 >= $i2 goto label37;

     label08:
        $r2 = r0.<org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer: org.apache.commons.math3.optim.OptimizationData[] optimData>;

        $i2 = r0.<org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer: int maxEvalIndex>;

     label09:
        $r8 = new org.apache.commons.math3.optim.MaxEval;

     label10:
        $i3 = r0.<org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer: int totalEvaluations>;

     label11:
        $i3 = i0 - $i3;

     label12:
        specialinvoke $r8.<org.apache.commons.math3.optim.MaxEval: void <init>(int)>($i3);

        $r2[$i2] = $r8;

     label13:
        r9 = null;

        if $i1 != 0 goto label18;

        r9 = $r7;

     label14:
        $r2 = r0.<org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer: org.apache.commons.math3.optim.OptimizationData[] optimData>;

        $i2 = r0.<org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer: int initialGuessIndex>;

     label15:
        $r10 = new org.apache.commons.math3.optim.InitialGuess;

     label16:
        specialinvoke $r10.<org.apache.commons.math3.optim.InitialGuess: void <init>(double[])>(r9);

        $r2[$i2] = $r10;

        $r11 = r0.<org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer: org.apache.commons.math3.optim.BaseMultivariateOptimizer optimizer>;

        $r2 = r0.<org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer: org.apache.commons.math3.optim.OptimizationData[] optimData>;

        $r12 = virtualinvoke $r11.<org.apache.commons.math3.optim.BaseMultivariateOptimizer: java.lang.Object optimize(org.apache.commons.math3.optim.OptimizationData[])>($r2);

        virtualinvoke r0.<org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer: void store(java.lang.Object)>($r12);

     label17:
        $i2 = r0.<org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer: int totalEvaluations>;

        $r11 = r0.<org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer: org.apache.commons.math3.optim.BaseMultivariateOptimizer optimizer>;

        $i3 = virtualinvoke $r11.<org.apache.commons.math3.optim.BaseMultivariateOptimizer: int getEvaluations()>();

        $i2 = $i2 + $i3;

        r0.<org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer: int totalEvaluations> = $i2;

        $i1 = $i1 + 1;

        goto label07;

     label18:
        $i3 = 0;

     label19:
        if r9 != null goto label14;

        $i2 = $i3 + 1;

     label20:
        $i4 = virtualinvoke r0.<org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer: int getMaxEvaluations()>();

     label21:
        if $i3 < $i4 goto label24;

        $r13 = new org.apache.commons.math3.exception.TooManyEvaluationsException;

     label22:
        $i2 = virtualinvoke r0.<org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer: int getMaxEvaluations()>();

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        specialinvoke $r13.<org.apache.commons.math3.exception.TooManyEvaluationsException: void <init>(java.lang.Number)>($r14);

        throw $r13;

     label23:
        r1 := @caughtexception;

        goto label17;

     label24:
        $r15 = r0.<org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer: org.apache.commons.math3.random.RandomVectorGenerator generator>;

        r9 = interfaceinvoke $r15.<org.apache.commons.math3.random.RandomVectorGenerator: double[] nextVector()>();

     label25:
        $i3 = 0;

     label26:
        if r9 == null goto label36;

     label27:
        $i4 = lengthof r9;

     label28:
        if $i3 >= $i4 goto label36;

        if $r5 == null goto label31;

     label29:
        $d0 = r9[$i3];

        $d1 = $r5[$i3];

     label30:
        $b5 = $d0 cmpg $d1;

        if $b5 < 0 goto label34;

     label31:
        if $r6 == null goto label35;

     label32:
        $d0 = r9[$i3];

        $d1 = $r6[$i3];

     label33:
        $b5 = $d0 cmpl $d1;

        if $b5 <= 0 goto label35;

     label34:
        r9 = null;

     label35:
        $i3 = $i3 + 1;

        goto label26;

     label36:
        $i3 = $i2;

        goto label19;

     label37:
        $r16 = virtualinvoke r0.<org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer: java.lang.Object[] getOptima()>();

        i0 = lengthof $r16;

        if i0 != 0 goto label38;

        throw r1;

     label38:
        $r12 = $r16[0];

        return $r12;

        catch java.lang.RuntimeException from label08 to label09 with label23;
        catch java.lang.RuntimeException from label10 to label11 with label23;
        catch java.lang.RuntimeException from label12 to label13 with label23;
        catch java.lang.RuntimeException from label14 to label15 with label23;
        catch java.lang.RuntimeException from label16 to label17 with label23;
        catch java.lang.RuntimeException from label20 to label21 with label23;
        catch java.lang.RuntimeException from label22 to label23 with label23;
        catch java.lang.RuntimeException from label24 to label25 with label23;
        catch java.lang.RuntimeException from label27 to label28 with label23;
        catch java.lang.RuntimeException from label29 to label30 with label23;
        catch java.lang.RuntimeException from label32 to label33 with label23;
    }
    public int getEvaluations()
    {
        org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer r0;
        int i0;

        r0 := @this: org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer;

        i0 = r0.<org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer: int totalEvaluations>;

        return i0;
    }
public abstract java.lang.Object[] getOptima() { 
// no body
} 
    public transient java.lang.Object optimize(org.apache.commons.math3.optim.OptimizationData[])
    {
        org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer r0;
        org.apache.commons.math3.optim.OptimizationData[] $r1;
        java.lang.Object $r2;

        r0 := @this: org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer;

        $r1 := @parameter0: org.apache.commons.math3.optim.OptimizationData[];

        r0.<org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer: org.apache.commons.math3.optim.OptimizationData[] optimData> = $r1;

        $r2 = specialinvoke r0.<org.apache.commons.math3.optim.BaseMultivariateOptimizer: java.lang.Object optimize(org.apache.commons.math3.optim.OptimizationData[])>($r1);

        return $r2;
    }
protected abstract void store(java.lang.Object) { 
// no body
} 
