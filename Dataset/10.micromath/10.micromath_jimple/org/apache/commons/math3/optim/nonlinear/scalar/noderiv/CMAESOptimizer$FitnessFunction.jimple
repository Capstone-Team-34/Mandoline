org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction extends java.lang.Object
private final boolean isRepairMode
final org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer this$0
    void <init>(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer)
    {
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction r0;
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer $r1;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction;

        $r1 := @parameter0: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer;

        r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer this$0> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction: boolean isRepairMode> = 1;

        return;
    }
    static double[] access$200(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction, double[])
    {
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction $r0;
        double[] $r1;

        $r0 := @parameter0: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction;

        $r1 := @parameter1: double[];

        $r1 = specialinvoke $r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction: double[] repair(double[])>($r1);

        return $r1;
    }
    private double penalty(double[], double[])
    {
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction r0;
        double[] $r1, $r2;
        double $d0, d1, $d2;
        int i0, $i1;
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer $r3;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[];

        d1 = 0.0;

        i0 = 0;

     label1:
        $i1 = lengthof $r1;

        if i0 >= $i1 goto label2;

        $d2 = $r1[i0];

        $d0 = $r2[i0];

        $d0 = $d2 - $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        d1 = d1 + $d0;

        i0 = i0 + 1;

        goto label1;

     label2:
        $r3 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer this$0>;

        $z0 = staticinvoke <org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer: boolean access$400(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer)>($r3);

        if $z0 == 0 goto label3;

        return d1;

     label3:
        d1 = neg d1;

        return d1;
    }
    private double[] repair(double[])
    {
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction r0;
        double[] $r1, r2, $r4, $r5;
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer $r3;
        int $i0, $i1;
        double $d0, $d1;
        byte $b2;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction;

        $r1 := @parameter0: double[];

        $r3 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer this$0>;

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer: double[] getLowerBound()>();

        $r3 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer this$0>;

        $r5 = virtualinvoke $r3.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer: double[] getUpperBound()>();

        $i0 = lengthof $r1;

        r2 = newarray (double)[$i0];

        $i0 = 0;

     label1:
        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label5;

        $d0 = $r1[$i0];

        $d1 = $r4[$i0];

        $b2 = $d0 cmpg $d1;

        if $b2 >= 0 goto label3;

        $d0 = $r4[$i0];

        r2[$i0] = $d0;

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        $d0 = $r1[$i0];

        $d1 = $r5[$i0];

        $b2 = $d0 cmpl $d1;

        if $b2 <= 0 goto label4;

        $d0 = $r5[$i0];

        r2[$i0] = $d0;

        goto label2;

     label4:
        $d0 = $r1[$i0];

        r2[$i0] = $d0;

        goto label2;

     label5:
        return r2;
    }
    public boolean isFeasible(double[])
    {
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction r0;
        double[] $r1, $r3, $r4;
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer $r2;
        int i0, $i1;
        double $d0, $d1;
        byte $b2;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction;

        $r1 := @parameter0: double[];

        $r2 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer this$0>;

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer: double[] getLowerBound()>();

        $r2 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer this$0>;

        $r4 = virtualinvoke $r2.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer: double[] getUpperBound()>();

        i0 = 0;

     label1:
        $i1 = lengthof $r1;

        if i0 >= $i1 goto label3;

        $d0 = $r1[i0];

        $d1 = $r3[i0];

        $b2 = $d0 cmpg $d1;

        if $b2 >= 0 goto label2;

        return 0;

     label2:
        $d0 = $r1[i0];

        $d1 = $r4[i0];

        $b2 = $d0 cmpl $d1;

        if $b2 > 0 goto label4;

        i0 = i0 + 1;

        goto label1;

     label3:
        return 1;

     label4:
        return 0;
    }
    public org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$ValuePenaltyPair value(double[])
    {
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction r0;
        double[] $r1, $r2;
        double d0, d1;
        boolean $z0;
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer $r3;
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$ValuePenaltyPair $r4;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction;

        $r1 := @parameter0: double[];

        d0 = 0.0;

        $z0 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction: boolean isRepairMode>;

        if $z0 == 0 goto label4;

        $r2 = specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction: double[] repair(double[])>($r1);

        $r3 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer this$0>;

        d1 = virtualinvoke $r3.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer: double computeObjectiveValue(double[])>($r2);

        d0 = specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction: double penalty(double[],double[])>($r1, $r2);

     label1:
        $r3 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer this$0>;

        $z0 = staticinvoke <org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer: boolean access$400(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer)>($r3);

        if $z0 == 0 goto label5;

     label2:
        $r3 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer this$0>;

        $z0 = staticinvoke <org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer: boolean access$400(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer)>($r3);

        if $z0 == 0 goto label6;

     label3:
        $r4 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$ValuePenaltyPair;

        specialinvoke $r4.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$ValuePenaltyPair: void <init>(double,double)>(d1, d0);

        return $r4;

     label4:
        $r3 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer this$0>;

        d1 = virtualinvoke $r3.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer: double computeObjectiveValue(double[])>($r1);

        goto label1;

     label5:
        d1 = neg d1;

        goto label2;

     label6:
        d0 = neg d0;

        goto label3;
    }
