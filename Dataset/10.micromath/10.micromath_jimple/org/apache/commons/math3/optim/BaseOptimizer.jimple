org.apache.commons.math3.optim.BaseOptimizer extends java.lang.Object
private final org.apache.commons.math3.optim.ConvergenceChecker checker
protected final org.apache.commons.math3.util.Incrementor evaluations
protected final org.apache.commons.math3.util.Incrementor iterations
    protected void <init>(org.apache.commons.math3.optim.ConvergenceChecker)
    {
        org.apache.commons.math3.optim.BaseOptimizer r0;
        org.apache.commons.math3.optim.ConvergenceChecker r1;

        r0 := @this: org.apache.commons.math3.optim.BaseOptimizer;

        r1 := @parameter0: org.apache.commons.math3.optim.ConvergenceChecker;

        specialinvoke r0.<org.apache.commons.math3.optim.BaseOptimizer: void <init>(org.apache.commons.math3.optim.ConvergenceChecker,int,int)>(r1, 0, 2147483647);

        return;
    }
    protected void <init>(org.apache.commons.math3.optim.ConvergenceChecker, int, int)
    {
        org.apache.commons.math3.optim.BaseOptimizer r0;
        org.apache.commons.math3.optim.ConvergenceChecker r1;
        int $i0, $i1;
        org.apache.commons.math3.util.Incrementor $r2;
        org.apache.commons.math3.optim.BaseOptimizer$MaxEvalCallback $r3;
        org.apache.commons.math3.optim.BaseOptimizer$MaxIterCallback $r4;

        r0 := @this: org.apache.commons.math3.optim.BaseOptimizer;

        r1 := @parameter0: org.apache.commons.math3.optim.ConvergenceChecker;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.optim.BaseOptimizer: org.apache.commons.math3.optim.ConvergenceChecker checker> = r1;

        $r2 = new org.apache.commons.math3.util.Incrementor;

        $r3 = new org.apache.commons.math3.optim.BaseOptimizer$MaxEvalCallback;

        specialinvoke $r3.<org.apache.commons.math3.optim.BaseOptimizer$MaxEvalCallback: void <init>(org.apache.commons.math3.optim.BaseOptimizer$1)>(null);

        specialinvoke $r2.<org.apache.commons.math3.util.Incrementor: void <init>(int,org.apache.commons.math3.util.Incrementor$MaxCountExceededCallback)>($i0, $r3);

        r0.<org.apache.commons.math3.optim.BaseOptimizer: org.apache.commons.math3.util.Incrementor evaluations> = $r2;

        $r2 = new org.apache.commons.math3.util.Incrementor;

        $r4 = new org.apache.commons.math3.optim.BaseOptimizer$MaxIterCallback;

        specialinvoke $r4.<org.apache.commons.math3.optim.BaseOptimizer$MaxIterCallback: void <init>(org.apache.commons.math3.optim.BaseOptimizer$1)>(null);

        specialinvoke $r2.<org.apache.commons.math3.util.Incrementor: void <init>(int,org.apache.commons.math3.util.Incrementor$MaxCountExceededCallback)>($i1, $r4);

        r0.<org.apache.commons.math3.optim.BaseOptimizer: org.apache.commons.math3.util.Incrementor iterations> = $r2;

        return;
    }
protected abstract java.lang.Object doOptimize() { 
// no body
} 
    public org.apache.commons.math3.optim.ConvergenceChecker getConvergenceChecker()
    {
        org.apache.commons.math3.optim.BaseOptimizer r0;
        org.apache.commons.math3.optim.ConvergenceChecker r1;

        r0 := @this: org.apache.commons.math3.optim.BaseOptimizer;

        r1 = r0.<org.apache.commons.math3.optim.BaseOptimizer: org.apache.commons.math3.optim.ConvergenceChecker checker>;

        return r1;
    }
    public int getEvaluations()
    {
        org.apache.commons.math3.optim.BaseOptimizer r0;
        int $i0;
        org.apache.commons.math3.util.Incrementor $r1;

        r0 := @this: org.apache.commons.math3.optim.BaseOptimizer;

        $r1 = r0.<org.apache.commons.math3.optim.BaseOptimizer: org.apache.commons.math3.util.Incrementor evaluations>;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.util.Incrementor: int getCount()>();

        return $i0;
    }
    public int getIterations()
    {
        org.apache.commons.math3.optim.BaseOptimizer r0;
        int $i0;
        org.apache.commons.math3.util.Incrementor $r1;

        r0 := @this: org.apache.commons.math3.optim.BaseOptimizer;

        $r1 = r0.<org.apache.commons.math3.optim.BaseOptimizer: org.apache.commons.math3.util.Incrementor iterations>;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.util.Incrementor: int getCount()>();

        return $i0;
    }
    public int getMaxEvaluations()
    {
        org.apache.commons.math3.optim.BaseOptimizer r0;
        int $i0;
        org.apache.commons.math3.util.Incrementor $r1;

        r0 := @this: org.apache.commons.math3.optim.BaseOptimizer;

        $r1 = r0.<org.apache.commons.math3.optim.BaseOptimizer: org.apache.commons.math3.util.Incrementor evaluations>;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.util.Incrementor: int getMaximalCount()>();

        return $i0;
    }
    public int getMaxIterations()
    {
        org.apache.commons.math3.optim.BaseOptimizer r0;
        int $i0;
        org.apache.commons.math3.util.Incrementor $r1;

        r0 := @this: org.apache.commons.math3.optim.BaseOptimizer;

        $r1 = r0.<org.apache.commons.math3.optim.BaseOptimizer: org.apache.commons.math3.util.Incrementor iterations>;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.util.Incrementor: int getMaximalCount()>();

        return $i0;
    }
    protected void incrementEvaluationCount() throws org.apache.commons.math3.exception.TooManyEvaluationsException
    {
        org.apache.commons.math3.optim.BaseOptimizer r0;
        org.apache.commons.math3.util.Incrementor $r1;

        r0 := @this: org.apache.commons.math3.optim.BaseOptimizer;

        $r1 = r0.<org.apache.commons.math3.optim.BaseOptimizer: org.apache.commons.math3.util.Incrementor evaluations>;

        virtualinvoke $r1.<org.apache.commons.math3.util.Incrementor: void incrementCount()>();

        return;
    }
    protected void incrementIterationCount() throws org.apache.commons.math3.exception.TooManyIterationsException
    {
        org.apache.commons.math3.optim.BaseOptimizer r0;
        org.apache.commons.math3.util.Incrementor $r1;

        r0 := @this: org.apache.commons.math3.optim.BaseOptimizer;

        $r1 = r0.<org.apache.commons.math3.optim.BaseOptimizer: org.apache.commons.math3.util.Incrementor iterations>;

        virtualinvoke $r1.<org.apache.commons.math3.util.Incrementor: void incrementCount()>();

        return;
    }
    public java.lang.Object optimize() throws org.apache.commons.math3.exception.TooManyEvaluationsException, org.apache.commons.math3.exception.TooManyIterationsException
    {
        org.apache.commons.math3.optim.BaseOptimizer r0;
        java.lang.Object $r1;
        org.apache.commons.math3.util.Incrementor $r2;

        r0 := @this: org.apache.commons.math3.optim.BaseOptimizer;

        $r2 = r0.<org.apache.commons.math3.optim.BaseOptimizer: org.apache.commons.math3.util.Incrementor evaluations>;

        virtualinvoke $r2.<org.apache.commons.math3.util.Incrementor: void resetCount()>();

        $r2 = r0.<org.apache.commons.math3.optim.BaseOptimizer: org.apache.commons.math3.util.Incrementor iterations>;

        virtualinvoke $r2.<org.apache.commons.math3.util.Incrementor: void resetCount()>();

        $r1 = virtualinvoke r0.<org.apache.commons.math3.optim.BaseOptimizer: java.lang.Object doOptimize()>();

        return $r1;
    }
    public transient java.lang.Object optimize(org.apache.commons.math3.optim.OptimizationData[]) throws org.apache.commons.math3.exception.TooManyEvaluationsException, org.apache.commons.math3.exception.TooManyIterationsException
    {
        org.apache.commons.math3.optim.BaseOptimizer r0;
        org.apache.commons.math3.optim.OptimizationData[] $r1;
        java.lang.Object $r2;
        org.apache.commons.math3.util.Incrementor $r3;

        r0 := @this: org.apache.commons.math3.optim.BaseOptimizer;

        $r1 := @parameter0: org.apache.commons.math3.optim.OptimizationData[];

        virtualinvoke r0.<org.apache.commons.math3.optim.BaseOptimizer: void parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[])>($r1);

        $r3 = r0.<org.apache.commons.math3.optim.BaseOptimizer: org.apache.commons.math3.util.Incrementor evaluations>;

        virtualinvoke $r3.<org.apache.commons.math3.util.Incrementor: void resetCount()>();

        $r3 = r0.<org.apache.commons.math3.optim.BaseOptimizer: org.apache.commons.math3.util.Incrementor iterations>;

        virtualinvoke $r3.<org.apache.commons.math3.util.Incrementor: void resetCount()>();

        $r2 = virtualinvoke r0.<org.apache.commons.math3.optim.BaseOptimizer: java.lang.Object doOptimize()>();

        return $r2;
    }
    protected transient void parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[])
    {
        org.apache.commons.math3.optim.BaseOptimizer r0;
        org.apache.commons.math3.optim.OptimizationData[] $r1;
        int i0, i1, $i2;
        org.apache.commons.math3.optim.OptimizationData r2;
        boolean $z0;
        org.apache.commons.math3.util.Incrementor $r3;
        org.apache.commons.math3.optim.MaxEval r4;
        org.apache.commons.math3.optim.MaxIter r5;

        r0 := @this: org.apache.commons.math3.optim.BaseOptimizer;

        $r1 := @parameter0: org.apache.commons.math3.optim.OptimizationData[];

        i0 = lengthof $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        r2 = $r1[i1];

        $z0 = r2 instanceof org.apache.commons.math3.optim.MaxEval;

        if $z0 == 0 goto label3;

        $r3 = r0.<org.apache.commons.math3.optim.BaseOptimizer: org.apache.commons.math3.util.Incrementor evaluations>;

        r4 = (org.apache.commons.math3.optim.MaxEval) r2;

        $i2 = virtualinvoke r4.<org.apache.commons.math3.optim.MaxEval: int getMaxEval()>();

        virtualinvoke $r3.<org.apache.commons.math3.util.Incrementor: void setMaximalCount(int)>($i2);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $z0 = r2 instanceof org.apache.commons.math3.optim.MaxIter;

        if $z0 == 0 goto label2;

        $r3 = r0.<org.apache.commons.math3.optim.BaseOptimizer: org.apache.commons.math3.util.Incrementor iterations>;

        r5 = (org.apache.commons.math3.optim.MaxIter) r2;

        $i2 = virtualinvoke r5.<org.apache.commons.math3.optim.MaxIter: int getMaxIter()>();

        virtualinvoke $r3.<org.apache.commons.math3.util.Incrementor: void setMaximalCount(int)>($i2);

        goto label2;

     label4:
        return;
    }
