org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer extends org.apache.commons.math3.optim.BaseMultivariateOptimizer
private org.apache.commons.math3.analysis.MultivariateFunction function
private org.apache.commons.math3.optim.nonlinear.scalar.GoalType goal
    protected void <init>(org.apache.commons.math3.optim.ConvergenceChecker)
    {
        org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer r0;
        org.apache.commons.math3.optim.ConvergenceChecker r1;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer;

        r1 := @parameter0: org.apache.commons.math3.optim.ConvergenceChecker;

        specialinvoke r0.<org.apache.commons.math3.optim.BaseMultivariateOptimizer: void <init>(org.apache.commons.math3.optim.ConvergenceChecker)>(r1);

        return;
    }
    public double computeObjectiveValue(double[])
    {
        org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer r0;
        double[] $r1;
        double $d0;
        org.apache.commons.math3.analysis.MultivariateFunction $r2;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer;

        $r1 := @parameter0: double[];

        specialinvoke r0.<org.apache.commons.math3.optim.BaseMultivariateOptimizer: void incrementEvaluationCount()>();

        $r2 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer: org.apache.commons.math3.analysis.MultivariateFunction function>;

        $d0 = interfaceinvoke $r2.<org.apache.commons.math3.analysis.MultivariateFunction: double value(double[])>($r1);

        return $d0;
    }
    public org.apache.commons.math3.optim.nonlinear.scalar.GoalType getGoalType()
    {
        org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer r0;
        org.apache.commons.math3.optim.nonlinear.scalar.GoalType r1;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer;

        r1 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer: org.apache.commons.math3.optim.nonlinear.scalar.GoalType goal>;

        return r1;
    }
    public volatile java.lang.Object optimize(org.apache.commons.math3.optim.OptimizationData[])
    {
        org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer r0;
        org.apache.commons.math3.optim.OptimizationData[] $r1;
        org.apache.commons.math3.optim.PointValuePair $r2;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer;

        $r1 := @parameter0: org.apache.commons.math3.optim.OptimizationData[];

        $r2 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer: org.apache.commons.math3.optim.PointValuePair optimize(org.apache.commons.math3.optim.OptimizationData[])>($r1);

        return $r2;
    }
    public transient org.apache.commons.math3.optim.PointValuePair optimize(org.apache.commons.math3.optim.OptimizationData[]) throws org.apache.commons.math3.exception.TooManyEvaluationsException
    {
        org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer r0;
        org.apache.commons.math3.optim.OptimizationData[] $r1;
        java.lang.Object $r2;
        org.apache.commons.math3.optim.PointValuePair $r3;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer;

        $r1 := @parameter0: org.apache.commons.math3.optim.OptimizationData[];

        $r2 = specialinvoke r0.<org.apache.commons.math3.optim.BaseMultivariateOptimizer: java.lang.Object optimize(org.apache.commons.math3.optim.OptimizationData[])>($r1);

        $r3 = (org.apache.commons.math3.optim.PointValuePair) $r2;

        return $r3;
    }
    protected transient void parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[])
    {
        org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer r0;
        org.apache.commons.math3.optim.OptimizationData[] $r1;
        int i0, i1;
        org.apache.commons.math3.analysis.MultivariateFunction $r2;
        org.apache.commons.math3.optim.OptimizationData r3;
        boolean $z0;
        org.apache.commons.math3.optim.nonlinear.scalar.GoalType r4;
        org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction r5;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer;

        $r1 := @parameter0: org.apache.commons.math3.optim.OptimizationData[];

        specialinvoke r0.<org.apache.commons.math3.optim.BaseMultivariateOptimizer: void parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[])>($r1);

        i0 = lengthof $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        r3 = $r1[i1];

        $z0 = r3 instanceof org.apache.commons.math3.optim.nonlinear.scalar.GoalType;

        if $z0 == 0 goto label3;

        r4 = (org.apache.commons.math3.optim.nonlinear.scalar.GoalType) r3;

        r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer: org.apache.commons.math3.optim.nonlinear.scalar.GoalType goal> = r4;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $z0 = r3 instanceof org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction;

        if $z0 == 0 goto label2;

        r5 = (org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction) r3;

        $r2 = virtualinvoke r5.<org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction: org.apache.commons.math3.analysis.MultivariateFunction getObjectiveFunction()>();

        r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer: org.apache.commons.math3.analysis.MultivariateFunction function> = $r2;

        goto label2;

     label4:
        return;
    }
