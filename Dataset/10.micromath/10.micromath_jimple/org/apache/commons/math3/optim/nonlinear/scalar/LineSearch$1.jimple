org.apache.commons.math3.optim.nonlinear.scalar.LineSearch$1 extends java.lang.Object implements org.apache.commons.math3.analysis.UnivariateFunction
final org.apache.commons.math3.optim.nonlinear.scalar.LineSearch this$0
final double[] val$direction
final int val$n
final double[] val$startPoint
    void <init>(org.apache.commons.math3.optim.nonlinear.scalar.LineSearch, int, double[], double[])
    {
        org.apache.commons.math3.optim.nonlinear.scalar.LineSearch$1 r0;
        org.apache.commons.math3.optim.nonlinear.scalar.LineSearch $r1;
        int $i0;
        double[] $r2, $r3;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.LineSearch$1;

        $r1 := @parameter0: org.apache.commons.math3.optim.nonlinear.scalar.LineSearch;

        $i0 := @parameter1: int;

        $r2 := @parameter2: double[];

        $r3 := @parameter3: double[];

        r0.<org.apache.commons.math3.optim.nonlinear.scalar.LineSearch$1: org.apache.commons.math3.optim.nonlinear.scalar.LineSearch this$0> = $r1;

        r0.<org.apache.commons.math3.optim.nonlinear.scalar.LineSearch$1: int val$n> = $i0;

        r0.<org.apache.commons.math3.optim.nonlinear.scalar.LineSearch$1: double[] val$startPoint> = $r2;

        r0.<org.apache.commons.math3.optim.nonlinear.scalar.LineSearch$1: double[] val$direction> = $r3;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public double value(double)
    {
        org.apache.commons.math3.optim.nonlinear.scalar.LineSearch$1 r0;
        double $d0, $d1, $d2;
        double[] r1, $r2;
        int $i0, $i1;
        org.apache.commons.math3.optim.nonlinear.scalar.LineSearch $r3;
        org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer $r4;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.LineSearch$1;

        $d0 := @parameter0: double;

        $i0 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.LineSearch$1: int val$n>;

        r1 = newarray (double)[$i0];

        $i0 = 0;

     label1:
        $i1 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.LineSearch$1: int val$n>;

        if $i0 >= $i1 goto label2;

        $r2 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.LineSearch$1: double[] val$startPoint>;

        $d1 = $r2[$i0];

        $r2 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.LineSearch$1: double[] val$direction>;

        $d2 = $r2[$i0];

        $d2 = $d2 * $d0;

        $d1 = $d1 + $d2;

        r1[$i0] = $d1;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $r3 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.LineSearch$1: org.apache.commons.math3.optim.nonlinear.scalar.LineSearch this$0>;

        $r4 = staticinvoke <org.apache.commons.math3.optim.nonlinear.scalar.LineSearch: org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer access$000(org.apache.commons.math3.optim.nonlinear.scalar.LineSearch)>($r3);

        $d0 = virtualinvoke $r4.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer: double computeObjectiveValue(double[])>(r1);

        return $d0;
    }
