org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer extends org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer
private final boolean useLU
    public void <init>(org.apache.commons.math3.optim.ConvergenceChecker)
    {
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer r0;
        org.apache.commons.math3.optim.ConvergenceChecker r1;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer;

        r1 := @parameter0: org.apache.commons.math3.optim.ConvergenceChecker;

        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer: void <init>(boolean,org.apache.commons.math3.optim.ConvergenceChecker)>(1, r1);

        return;
    }
    public void <init>(boolean, org.apache.commons.math3.optim.ConvergenceChecker)
    {
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer r0;
        boolean $z0;
        org.apache.commons.math3.optim.ConvergenceChecker r1;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer;

        $z0 := @parameter0: boolean;

        r1 := @parameter1: org.apache.commons.math3.optim.ConvergenceChecker;

        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer: void <init>(org.apache.commons.math3.optim.ConvergenceChecker)>(r1);

        r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer: boolean useLU> = $z0;

        return;
    }
    private void checkParameters()
    {
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer r0;
        org.apache.commons.math3.exception.util.LocalizedFormats $r1;
        double[] $r2;
        org.apache.commons.math3.exception.MathUnsupportedOperationException $r3;
        java.lang.Object[] $r4;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer: double[] getLowerBound()>();

        if $r2 != null goto label1;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer: double[] getUpperBound()>();

        if $r2 == null goto label2;

     label1:
        $r3 = new org.apache.commons.math3.exception.MathUnsupportedOperationException;

        $r1 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats CONSTRAINT>;

        $r4 = newarray (java.lang.Object)[0];

        specialinvoke $r3.<org.apache.commons.math3.exception.MathUnsupportedOperationException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r1, $r4);

        throw $r3;

     label2:
        return;
    }
    public volatile java.lang.Object doOptimize()
    {
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer r0;
        org.apache.commons.math3.optim.PointVectorValuePair $r1;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer: org.apache.commons.math3.optim.PointVectorValuePair doOptimize()>();

        return $r1;
    }
    public org.apache.commons.math3.optim.PointVectorValuePair doOptimize()
    {
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer r0;
        double[] r1, r2, $r8, $r10, $r12, $r17;
        org.apache.commons.math3.linear.SingularMatrixException r3;
        org.apache.commons.math3.linear.BlockRealMatrix r4;
        org.apache.commons.math3.optim.PointVectorValuePair r5, r11;
        double d0, d1, $d2, $d3;
        org.apache.commons.math3.optim.ConvergenceChecker $r6;
        org.apache.commons.math3.exception.NullArgumentException $r7;
        int $i0, i1, i2, i3, i4;
        org.apache.commons.math3.linear.RealMatrix $r9;
        boolean z0, $z1;
        int[] $r13;
        java.lang.Class $r14;
        java.lang.Object $r15;
        double[][] r16;
        org.apache.commons.math3.linear.LUDecomposition $r18;
        org.apache.commons.math3.linear.DecompositionSolver $r19;
        org.apache.commons.math3.linear.ArrayRealVector $r20;
        org.apache.commons.math3.linear.RealVector $r21;
        org.apache.commons.math3.linear.QRDecomposition $r22;
        org.apache.commons.math3.exception.ConvergenceException $r23;
        org.apache.commons.math3.exception.util.LocalizedFormats $r24;
        java.lang.Object[] $r25;
        org.apache.commons.math3.exception.MathInternalError $r26;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer;

        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer: void checkParameters()>();

        $r6 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer: org.apache.commons.math3.optim.ConvergenceChecker getConvergenceChecker()>();

        if $r6 != null goto label01;

        $r7 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r7.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r7;

     label01:
        $r8 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer: double[] getTarget()>();

        $i0 = lengthof $r8;

        $r9 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer: org.apache.commons.math3.linear.RealMatrix getWeight()>();

        $r8 = newarray (double)[$i0];

        i1 = 0;

     label02:
        if i1 >= $i0 goto label03;

        d1 = interfaceinvoke $r9.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>(i1, i1);

        $r8[i1] = d1;

        i1 = i1 + 1;

        goto label02;

     label03:
        $r10 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer: double[] getStartPoint()>();

        i1 = lengthof $r10;

        r11 = null;

        z0 = 0;

     label04:
        if z0 != 0 goto label25;

        virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer: void incrementIterationCount()>();

        r5 = r11;

        r1 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer: double[] computeObjectiveValue(double[])>($r10);

        $r12 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer: double[] computeResiduals(double[])>(r1);

        $r9 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer: org.apache.commons.math3.linear.RealMatrix computeWeightedJacobian(double[])>($r10);

        r11 = new org.apache.commons.math3.optim.PointVectorValuePair;

        specialinvoke r11.<org.apache.commons.math3.optim.PointVectorValuePair: void <init>(double[],double[])>($r10, r1);

        r2 = newarray (double)[i1];

        $r13 = newarray (int)[2];

        $r13[0] = i1;

        $r13[1] = i1;

        $r14 = <java.lang.Double: java.lang.Class TYPE>;

        $r15 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r14, $r13);

        r16 = (double[][]) $r15;

        i2 = 0;

     label05:
        if i2 >= $i0 goto label12;

        $r17 = interfaceinvoke $r9.<org.apache.commons.math3.linear.RealMatrix: double[] getRow(int)>(i2);

        d1 = $r8[i2];

        d0 = $r12[i2];

        d0 = d1 * d0;

        i3 = 0;

     label06:
        if i3 >= i1 goto label07;

        $d2 = r2[i3];

        $d3 = $r17[i3];

        $d3 = $d3 * d0;

        $d2 = $d2 + $d3;

        r2[i3] = $d2;

        i3 = i3 + 1;

        goto label06;

     label07:
        i3 = 0;

     label08:
        if i3 >= i1 goto label11;

        r1 = r16[i3];

        d0 = $r17[i3];

        d0 = d1 * d0;

        i4 = 0;

     label09:
        if i4 >= i1 goto label10;

        $d2 = r1[i4];

        $d3 = $r17[i4];

        $d3 = $d3 * d0;

        $d2 = $d2 + $d3;

        r1[i4] = $d2;

        i4 = i4 + 1;

        goto label09;

     label10:
        i3 = i3 + 1;

        goto label08;

     label11:
        i2 = i2 + 1;

        goto label05;

     label12:
        if r5 == null goto label13;

        i2 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer: int getIterations()>();

        $z1 = interfaceinvoke $r6.<org.apache.commons.math3.optim.ConvergenceChecker: boolean converged(int,java.lang.Object,java.lang.Object)>(i2, r5, r11);

        z0 = $z1;

        if $z1 == 0 goto label13;

        d1 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer: double computeCost(double[])>($r12);

        virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer: void setCost(double)>(d1);

        return r11;

     label13:
        r4 = new org.apache.commons.math3.linear.BlockRealMatrix;

     label14:
        specialinvoke r4.<org.apache.commons.math3.linear.BlockRealMatrix: void <init>(double[][])>(r16);

     label15:
        $z1 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer: boolean useLU>;

        if $z1 == 0 goto label21;

        $r18 = new org.apache.commons.math3.linear.LUDecomposition;

     label16:
        specialinvoke $r18.<org.apache.commons.math3.linear.LUDecomposition: void <init>(org.apache.commons.math3.linear.RealMatrix)>(r4);

        $r19 = virtualinvoke $r18.<org.apache.commons.math3.linear.LUDecomposition: org.apache.commons.math3.linear.DecompositionSolver getSolver()>();

     label17:
        $r20 = new org.apache.commons.math3.linear.ArrayRealVector;

     label18:
        specialinvoke $r20.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(double[],boolean)>(r2, 0);

        $r21 = interfaceinvoke $r19.<org.apache.commons.math3.linear.DecompositionSolver: org.apache.commons.math3.linear.RealVector solve(org.apache.commons.math3.linear.RealVector)>($r20);

        $r12 = virtualinvoke $r21.<org.apache.commons.math3.linear.RealVector: double[] toArray()>();

     label19:
        i2 = 0;

     label20:
        if i2 >= i1 goto label04;

        d1 = $r10[i2];

        d0 = $r12[i2];

        d1 = d1 + d0;

        $r10[i2] = d1;

        i2 = i2 + 1;

        goto label20;

     label21:
        $r22 = new org.apache.commons.math3.linear.QRDecomposition;

     label22:
        specialinvoke $r22.<org.apache.commons.math3.linear.QRDecomposition: void <init>(org.apache.commons.math3.linear.RealMatrix)>(r4);

        $r19 = virtualinvoke $r22.<org.apache.commons.math3.linear.QRDecomposition: org.apache.commons.math3.linear.DecompositionSolver getSolver()>();

     label23:
        goto label17;

     label24:
        r3 := @caughtexception;

        $r23 = new org.apache.commons.math3.exception.ConvergenceException;

        $r24 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats UNABLE_TO_SOLVE_SINGULAR_PROBLEM>;

        $r25 = newarray (java.lang.Object)[0];

        specialinvoke $r23.<org.apache.commons.math3.exception.ConvergenceException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r24, $r25);

        throw $r23;

     label25:
        $r26 = new org.apache.commons.math3.exception.MathInternalError;

        specialinvoke $r26.<org.apache.commons.math3.exception.MathInternalError: void <init>()>();

        throw $r26;

        catch org.apache.commons.math3.linear.SingularMatrixException from label14 to label15 with label24;
        catch org.apache.commons.math3.linear.SingularMatrixException from label16 to label17 with label24;
        catch org.apache.commons.math3.linear.SingularMatrixException from label18 to label19 with label24;
        catch org.apache.commons.math3.linear.SingularMatrixException from label22 to label23 with label24;
    }
