org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer extends org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer
private static final double TWO_EPS
private double[] beta
private final double costRelativeTolerance
private double[] diagR
private final double initialStepBoundFactor
private double[] jacNorm
private double[] lmDir
private double lmPar
private final double orthoTolerance
private final double parRelativeTolerance
private int[] permutation
private final double qrRankingThreshold
private int rank
private int solvedCols
private double[][] weightedJacobian
private double[] weightedResidual
    static void <clinit>()
    {
        double $d0;

        $d0 = <org.apache.commons.math3.util.Precision: double EPSILON>;

        $d0 = 2.0 * $d0;

        <org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double TWO_EPS> = $d0;

        return;
    }
    public void <init>()
    {
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer;

        $d0 = <org.apache.commons.math3.util.Precision: double SAFE_MIN>;

        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: void <init>(double,double,double,double,double)>(100.0, 1.0E-10, 1.0E-10, 1.0E-10, $d0);

        return;
    }
    public void <init>(double, double, double)
    {
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer r0;
        double $d0, $d1, $d2, $d3;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $d3 = <org.apache.commons.math3.util.Precision: double SAFE_MIN>;

        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: void <init>(double,double,double,double,double)>(100.0, $d0, $d1, $d2, $d3);

        return;
    }
    public void <init>(double, double, double, double, double)
    {
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer r0;
        double $d0, $d1, $d2, $d3, $d4;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $d3 := @parameter3: double;

        $d4 := @parameter4: double;

        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer: void <init>(org.apache.commons.math3.optim.ConvergenceChecker)>(null);

        r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double initialStepBoundFactor> = $d0;

        r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double costRelativeTolerance> = $d1;

        r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double parRelativeTolerance> = $d2;

        r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double orthoTolerance> = $d3;

        r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double qrRankingThreshold> = $d4;

        return;
    }
    public void <init>(double, org.apache.commons.math3.optim.ConvergenceChecker, double, double, double, double)
    {
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer r0;
        double $d0, $d1, $d2, $d3, $d4;
        org.apache.commons.math3.optim.ConvergenceChecker r1;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer;

        $d0 := @parameter0: double;

        r1 := @parameter1: org.apache.commons.math3.optim.ConvergenceChecker;

        $d1 := @parameter2: double;

        $d2 := @parameter3: double;

        $d3 := @parameter4: double;

        $d4 := @parameter5: double;

        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer: void <init>(org.apache.commons.math3.optim.ConvergenceChecker)>(r1);

        r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double initialStepBoundFactor> = $d0;

        r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double costRelativeTolerance> = $d1;

        r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double parRelativeTolerance> = $d2;

        r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double orthoTolerance> = $d3;

        r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double qrRankingThreshold> = $d4;

        return;
    }
    public void <init>(org.apache.commons.math3.optim.ConvergenceChecker)
    {
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer r0;
        org.apache.commons.math3.optim.ConvergenceChecker r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer;

        r1 := @parameter0: org.apache.commons.math3.optim.ConvergenceChecker;

        $d0 = <org.apache.commons.math3.util.Precision: double SAFE_MIN>;

        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: void <init>(double,org.apache.commons.math3.optim.ConvergenceChecker,double,double,double,double)>(100.0, r1, 1.0E-10, 1.0E-10, 1.0E-10, $d0);

        return;
    }
    private void checkParameters()
    {
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer r0;
        org.apache.commons.math3.exception.util.LocalizedFormats $r1;
        double[] $r2;
        org.apache.commons.math3.exception.MathUnsupportedOperationException $r3;
        java.lang.Object[] $r4;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[] getLowerBound()>();

        if $r2 != null goto label1;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[] getUpperBound()>();

        if $r2 == null goto label2;

     label1:
        $r3 = new org.apache.commons.math3.exception.MathUnsupportedOperationException;

        $r1 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats CONSTRAINT>;

        $r4 = newarray (java.lang.Object)[0];

        specialinvoke $r3.<org.apache.commons.math3.exception.MathUnsupportedOperationException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r1, $r4);

        throw $r3;

     label2:
        return;
    }
    private void determineLMDirection(double[], double[], double[], double[])
    {
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer r0;
        double[] $r1, $r2, $r3, $r4, $r7, $r8;
        double d0, d1, d2, d3, d4, $d5;
        int i0, i1, $i2, $i3, $i5;
        int[] $r5;
        double[][] $r6;
        byte $b4;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[];

        $r3 := @parameter2: double[];

        $r4 := @parameter3: double[];

        i1 = 0;

     label01:
        $i2 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int solvedCols>;

        if i1 >= $i2 goto label04;

        $r5 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int[] permutation>;

        $i2 = $r5[i1];

        i0 = i1 + 1;

     label02:
        $i3 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int solvedCols>;

        if i0 >= $i3 goto label03;

        $r6 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[][] weightedJacobian>;

        $r7 = $r6[i0];

        $r6 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[][] weightedJacobian>;

        $r8 = $r6[i1];

        $r5 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int[] permutation>;

        $i3 = $r5[i0];

        d1 = $r8[$i3];

        $r7[$i2] = d1;

        i0 = i0 + 1;

        goto label02;

     label03:
        $r7 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[] lmDir>;

        $r8 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[] diagR>;

        d1 = $r8[$i2];

        $r7[i1] = d1;

        d1 = $r1[i1];

        $r4[i1] = d1;

        i1 = i1 + 1;

        goto label01;

     label04:
        i1 = 0;

     label05:
        $i2 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int solvedCols>;

        if i1 >= $i2 goto label13;

        $r5 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int[] permutation>;

        $i2 = $r5[i1];

        d1 = $r2[$i2];

        $b4 = d1 cmpl 0.0;

        if $b4 == 0 goto label06;

        $i2 = i1 + 1;

        i0 = lengthof $r3;

        staticinvoke <java.util.Arrays: void fill(double[],int,int,double)>($r3, $i2, i0, 0.0);

     label06:
        $r3[i1] = d1;

        d1 = 0.0;

        $i2 = i1;

     label07:
        i0 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int solvedCols>;

        if $i2 >= i0 goto label12;

        $r5 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int[] permutation>;

        i0 = $r5[$i2];

        d4 = $r3[$i2];

        $b4 = d4 cmpl 0.0;

        if $b4 == 0 goto label11;

        $r6 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[][] weightedJacobian>;

        $r1 = $r6[$i2];

        d3 = $r1[i0];

        d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d3);

        d0 = $r3[$i2];

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d0);

        $b4 = d4 cmpg d0;

        if $b4 >= 0 goto label10;

        d4 = $r3[$i2];

        d0 = d3 / d4;

        d4 = d0 * d0;

        d4 = 1.0 + d4;

        d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d4);

        d4 = 1.0 / d4;

        d0 = d4 * d0;

     label08:
        $r6 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[][] weightedJacobian>;

        $r1 = $r6[$i2];

        d3 = d0 * d3;

        d2 = $r3[$i2];

        d2 = d2 * d4;

        d3 = d3 + d2;

        $r1[i0] = d3;

        d3 = $r4[$i2];

        d3 = d3 * d0;

        d2 = d4 * d1;

        d3 = d3 + d2;

        d2 = neg d4;

        $d5 = $r4[$i2];

        d2 = d2 * $d5;

        d1 = d0 * d1;

        d1 = d2 + d1;

        $r4[$i2] = d3;

        $i3 = $i2 + 1;

     label09:
        $i5 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int solvedCols>;

        if $i3 >= $i5 goto label11;

        $r6 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[][] weightedJacobian>;

        $r1 = $r6[$i3];

        d2 = $r1[i0];

        d3 = d0 * d2;

        $d5 = $r3[$i3];

        $d5 = $d5 * d4;

        d3 = d3 + $d5;

        $d5 = neg d4;

        d2 = $d5 * d2;

        $d5 = $r3[$i3];

        $d5 = $d5 * d0;

        d2 = d2 + $d5;

        $r3[$i3] = d2;

        $r6 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[][] weightedJacobian>;

        $r1 = $r6[$i3];

        $r1[i0] = d3;

        $i3 = $i3 + 1;

        goto label09;

     label10:
        d4 = $r3[$i2];

        d4 = d4 / d3;

        d0 = d4 * d4;

        d0 = 1.0 + d0;

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d0);

        d0 = 1.0 / d0;

        d4 = d0 * d4;

        goto label08;

     label11:
        $i2 = $i2 + 1;

        goto label07;

     label12:
        $r6 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[][] weightedJacobian>;

        $r1 = $r6[i1];

        $r5 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int[] permutation>;

        $i2 = $r5[i1];

        d1 = $r1[$i2];

        $r3[i1] = d1;

        $r6 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[][] weightedJacobian>;

        $r1 = $r6[i1];

        $r5 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int[] permutation>;

        $i2 = $r5[i1];

        $r7 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[] lmDir>;

        d1 = $r7[i1];

        $r1[$i2] = d1;

        i1 = i1 + 1;

        goto label05;

     label13:
        i1 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int solvedCols>;

        $i2 = 0;

     label14:
        i0 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int solvedCols>;

        if $i2 >= i0 goto label17;

        d1 = $r3[$i2];

        $b4 = d1 cmpl 0.0;

        if $b4 != 0 goto label15;

        i0 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int solvedCols>;

        if i1 != i0 goto label15;

        i1 = $i2;

     label15:
        i0 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int solvedCols>;

        if i1 >= i0 goto label16;

        $r4[$i2] = 0.0;

     label16:
        $i2 = $i2 + 1;

        goto label14;

     label17:
        if i1 <= 0 goto label21;

        $i2 = i1 + -1;

     label18:
        if $i2 < 0 goto label21;

        $r5 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int[] permutation>;

        i0 = $r5[$i2];

        d1 = 0.0;

        $i3 = $i2 + 1;

     label19:
        if $i3 >= i1 goto label20;

        $r6 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[][] weightedJacobian>;

        $r1 = $r6[$i3];

        d4 = $r1[i0];

        d0 = $r4[$i3];

        d4 = d4 * d0;

        d1 = d1 + d4;

        $i3 = $i3 + 1;

        goto label19;

     label20:
        d4 = $r4[$i2];

        d1 = d4 - d1;

        d4 = $r3[$i2];

        d1 = d1 / d4;

        $r4[$i2] = d1;

        $i2 = $i2 + -1;

        goto label18;

     label21:
        i1 = 0;

     label22:
        $r1 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[] lmDir>;

        $i2 = lengthof $r1;

        if i1 >= $i2 goto label23;

        $r1 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[] lmDir>;

        $r5 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int[] permutation>;

        $i2 = $r5[i1];

        d1 = $r4[i1];

        $r1[$i2] = d1;

        i1 = i1 + 1;

        goto label22;

     label23:
        return;
    }
    private void determineLMParameter(double[], double, double[], double[], double[], double[])
    {
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer r0;
        double[] $r1, $r2, $r3, $r4, $r5, $r7, $r9;
        double $d0, d1, d2, d3, $d4, $d5, $d6, $d7;
        int i0, i1, $i2, $i3, $i5;
        double[][] $r6;
        int[] $r8;
        byte $b4;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer;

        $r1 := @parameter0: double[];

        $d0 := @parameter1: double;

        $r2 := @parameter2: double[];

        $r3 := @parameter3: double[];

        $r4 := @parameter4: double[];

        $r5 := @parameter5: double[];

        $r6 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[][] weightedJacobian>;

        $r7 = $r6[0];

        i0 = lengthof $r7;

        i1 = 0;

     label01:
        $i2 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int rank>;

        if i1 >= $i2 goto label02;

        $r7 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[] lmDir>;

        $r8 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int[] permutation>;

        $i2 = $r8[i1];

        d3 = $r1[i1];

        $r7[$i2] = d3;

        i1 = i1 + 1;

        goto label01;

     label02:
        i1 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int rank>;

     label03:
        if i1 >= i0 goto label04;

        $r7 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[] lmDir>;

        $r8 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int[] permutation>;

        $i2 = $r8[i1];

        $r7[$i2] = 0.0;

        i1 = i1 + 1;

        goto label03;

     label04:
        i0 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int rank>;

        i1 = i0 + -1;

     label05:
        if i1 < 0 goto label08;

        $r8 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int[] permutation>;

        i0 = $r8[i1];

        $r7 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[] lmDir>;

        d3 = $r7[i0];

        $r7 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[] diagR>;

        $d4 = $r7[i0];

        d3 = d3 / $d4;

        $i2 = 0;

     label06:
        if $i2 >= i1 goto label07;

        $r7 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[] lmDir>;

        $r8 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int[] permutation>;

        $i3 = $r8[$i2];

        $d4 = $r7[$i3];

        $r6 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[][] weightedJacobian>;

        $r9 = $r6[$i2];

        $d5 = $r9[i0];

        $d5 = $d5 * d3;

        $d4 = $d4 - $d5;

        $r7[$i3] = $d4;

        $i2 = $i2 + 1;

        goto label06;

     label07:
        $r7 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[] lmDir>;

        $r7[i0] = d3;

        i1 = i1 + -1;

        goto label05;

     label08:
        d3 = 0.0;

        i0 = 0;

     label09:
        i1 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int solvedCols>;

        if i0 >= i1 goto label10;

        $r8 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int[] permutation>;

        i1 = $r8[i0];

        $d4 = $r2[i1];

        $r7 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[] lmDir>;

        $d5 = $r7[i1];

        $d4 = $d4 * $d5;

        $r3[i1] = $d4;

        $d4 = $d4 * $d4;

        d3 = d3 + $d4;

        i0 = i0 + 1;

        goto label09;

     label10:
        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d3);

        d3 = d1 - $d0;

        $d4 = 0.1 * $d0;

        $b4 = d3 cmpg $d4;

        if $b4 > 0 goto label11;

        r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double lmPar> = 0.0;

        return;

     label11:
        $d4 = 0.0;

        i0 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int rank>;

        i1 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int solvedCols>;

        if i0 != i1 goto label18;

        i0 = 0;

     label12:
        i1 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int solvedCols>;

        if i0 >= i1 goto label13;

        $r8 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int[] permutation>;

        i1 = $r8[i0];

        $d4 = $r3[i1];

        $d5 = $r2[i1];

        $d5 = $d5 / d1;

        $d4 = $d4 * $d5;

        $r3[i1] = $d4;

        i0 = i0 + 1;

        goto label12;

     label13:
        $d4 = 0.0;

        i0 = 0;

     label14:
        i1 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int solvedCols>;

        if i0 >= i1 goto label17;

        $r8 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int[] permutation>;

        i1 = $r8[i0];

        $d5 = 0.0;

        $i2 = 0;

     label15:
        if $i2 >= i0 goto label16;

        $r6 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[][] weightedJacobian>;

        $r7 = $r6[$i2];

        d2 = $r7[i1];

        $r8 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int[] permutation>;

        $i3 = $r8[$i2];

        $d6 = $r3[$i3];

        d2 = d2 * $d6;

        $d5 = $d5 + d2;

        $i2 = $i2 + 1;

        goto label15;

     label16:
        d2 = $r3[i1];

        $d5 = d2 - $d5;

        $r7 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[] diagR>;

        d2 = $r7[i1];

        $d5 = $d5 / d2;

        $r3[i1] = $d5;

        $d5 = $d5 * $d5;

        $d4 = $d4 + $d5;

        i0 = i0 + 1;

        goto label14;

     label17:
        $d4 = $d0 * $d4;

        $d4 = d3 / $d4;

     label18:
        $d5 = 0.0;

        i0 = 0;

     label19:
        i1 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int solvedCols>;

        if i0 >= i1 goto label22;

        $r8 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int[] permutation>;

        i1 = $r8[i0];

        d2 = 0.0;

        $i2 = 0;

     label20:
        if $i2 > i0 goto label21;

        $r6 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[][] weightedJacobian>;

        $r7 = $r6[$i2];

        $d6 = $r7[i1];

        $d7 = $r1[$i2];

        $d6 = $d6 * $d7;

        d2 = d2 + $d6;

        $i2 = $i2 + 1;

        goto label20;

     label21:
        $d6 = $r2[i1];

        d2 = d2 / $d6;

        d2 = d2 * d2;

        $d5 = $d5 + d2;

        i0 = i0 + 1;

        goto label19;

     label22:
        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d5);

        $d5 = d2 / $d0;

        $b4 = $d5 cmpl 0.0;

        if $b4 != 0 goto label23;

        $d5 = <org.apache.commons.math3.util.Precision: double SAFE_MIN>;

        $d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double min(double,double)>($d0, 0.1);

        $d5 = $d5 / $d6;

     label23:
        $d6 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double lmPar>;

        $d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>($d6, $d4);

        $d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double min(double,double)>($d5, $d6);

        r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double lmPar> = $d6;

        $d6 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double lmPar>;

        $b4 = $d6 cmpl 0.0;

        if $b4 != 0 goto label24;

        d1 = d2 / d1;

        r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double lmPar> = d1;

     label24:
        i0 = 10;

     label25:
        if i0 < 0 goto label42;

        d1 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double lmPar>;

        $b4 = d1 cmpl 0.0;

        if $b4 != 0 goto label26;

        d1 = <org.apache.commons.math3.util.Precision: double SAFE_MIN>;

        d2 = 0.001 * $d5;

        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>(d1, d2);

        r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double lmPar> = d1;

     label26:
        d1 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double lmPar>;

        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d1);

        i1 = 0;

     label27:
        $i2 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int solvedCols>;

        if i1 >= $i2 goto label28;

        $r8 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int[] permutation>;

        $i2 = $r8[i1];

        d2 = $r2[$i2];

        d2 = d2 * d1;

        $r3[$i2] = d2;

        i1 = i1 + 1;

        goto label27;

     label28:
        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: void determineLMDirection(double[],double[],double[],double[])>($r1, $r3, $r4, $r5);

        d1 = 0.0;

        i1 = 0;

     label29:
        $i2 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int solvedCols>;

        if i1 >= $i2 goto label30;

        $r8 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int[] permutation>;

        $i2 = $r8[i1];

        d2 = $r2[$i2];

        $r7 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[] lmDir>;

        $d6 = $r7[$i2];

        d2 = d2 * $d6;

        $r5[$i2] = d2;

        d2 = d2 * d2;

        d1 = d1 + d2;

        i1 = i1 + 1;

        goto label29;

     label30:
        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d1);

        d2 = d3;

        d3 = d1 - $d0;

        $d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d3);

        $d7 = 0.1 * $d0;

        $b4 = $d6 cmpg $d7;

        if $b4 <= 0 goto label42;

        $b4 = $d4 cmpl 0.0;

        if $b4 != 0 goto label31;

        $b4 = d3 cmpg d2;

        if $b4 > 0 goto label31;

        $b4 = d2 cmpg 0.0;

        if $b4 < 0 goto label42;

     label31:
        i1 = 0;

     label32:
        $i2 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int solvedCols>;

        if i1 >= $i2 goto label33;

        $r8 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int[] permutation>;

        $i2 = $r8[i1];

        d2 = $r5[$i2];

        $d6 = $r2[$i2];

        d2 = d2 * $d6;

        d2 = d2 / d1;

        $r3[$i2] = d2;

        i1 = i1 + 1;

        goto label32;

     label33:
        i1 = 0;

     label34:
        $i2 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int solvedCols>;

        if i1 >= $i2 goto label37;

        $r8 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int[] permutation>;

        $i2 = $r8[i1];

        d1 = $r3[$i2];

        d2 = $r4[i1];

        d1 = d1 / d2;

        $r3[$i2] = d1;

        d1 = $r3[$i2];

        $i3 = i1 + 1;

     label35:
        $i5 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int solvedCols>;

        if $i3 >= $i5 goto label36;

        $r8 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int[] permutation>;

        $i5 = $r8[$i3];

        d2 = $r3[$i5];

        $r6 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[][] weightedJacobian>;

        $r7 = $r6[$i3];

        $d6 = $r7[$i2];

        $d6 = $d6 * d1;

        d2 = d2 - $d6;

        $r3[$i5] = d2;

        $i3 = $i3 + 1;

        goto label35;

     label36:
        i1 = i1 + 1;

        goto label34;

     label37:
        d1 = 0.0;

        i1 = 0;

     label38:
        $i2 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int solvedCols>;

        if i1 >= $i2 goto label39;

        $r8 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int[] permutation>;

        $i2 = $r8[i1];

        d2 = $r3[$i2];

        d2 = d2 * d2;

        d1 = d1 + d2;

        i1 = i1 + 1;

        goto label38;

     label39:
        d1 = $d0 * d1;

        d1 = d3 / d1;

        $b4 = d3 cmpl 0.0;

        if $b4 <= 0 goto label41;

        d2 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double lmPar>;

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>($d4, d2);

     label40:
        d2 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double lmPar>;

        d1 = d2 + d1;

        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>($d4, d1);

        r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double lmPar> = d1;

        i0 = i0 + -1;

        goto label25;

     label41:
        $b4 = d3 cmpg 0.0;

        if $b4 >= 0 goto label40;

        d2 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double lmPar>;

        $d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double min(double,double)>($d5, d2);

        goto label40;

     label42:
        return;
    }
    private void qTy(double[])
    {
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer r0;
        double[] $r1, $r3;
        int i0, i1, i2, i3, i4;
        double[][] $r2;
        int[] $r4;
        double d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer;

        $r1 := @parameter0: double[];

        $r2 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[][] weightedJacobian>;

        i1 = lengthof $r2;

        $r2 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[][] weightedJacobian>;

        $r3 = $r2[0];

        i0 = lengthof $r3;

        i3 = 0;

     label1:
        if i3 >= i0 goto label6;

        $r4 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int[] permutation>;

        i2 = $r4[i3];

        d0 = 0.0;

        i4 = i3;

     label2:
        if i4 >= i1 goto label3;

        $r2 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[][] weightedJacobian>;

        $r3 = $r2[i4];

        $d1 = $r3[i2];

        $d2 = $r1[i4];

        $d1 = $d1 * $d2;

        d0 = d0 + $d1;

        i4 = i4 + 1;

        goto label2;

     label3:
        $r3 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[] beta>;

        $d1 = $r3[i2];

        d0 = d0 * $d1;

        i4 = i3;

     label4:
        if i4 >= i1 goto label5;

        $d1 = $r1[i4];

        $r2 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[][] weightedJacobian>;

        $r3 = $r2[i4];

        $d2 = $r3[i2];

        $d2 = $d2 * d0;

        $d1 = $d1 - $d2;

        $r1[i4] = $d1;

        i4 = i4 + 1;

        goto label4;

     label5:
        i3 = i3 + 1;

        goto label1;

     label6:
        return;
    }
    private void qrDecomposition(org.apache.commons.math3.linear.RealMatrix) throws org.apache.commons.math3.exception.ConvergenceException
    {
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer r0;
        org.apache.commons.math3.linear.RealMatrix $r1;
        double d0, d1, d2, $d3;
        int i0, $i1, $i2, i3, i4, i5, $i6;
        double[][] $r2;
        double[] $r3, $r10;
        int[] $r4, $r9;
        boolean $z0;
        org.apache.commons.math3.exception.ConvergenceException $r5;
        org.apache.commons.math3.exception.util.LocalizedFormats $r6;
        java.lang.Object[] $r7;
        java.lang.Integer $r8;
        byte $b7;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        $r1 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix scalarMultiply(double)>(-1.0);

        $r2 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: double[][] getData()>();

        r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[][] weightedJacobian> = $r2;

        $r2 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[][] weightedJacobian>;

        $i1 = lengthof $r2;

        $r2 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[][] weightedJacobian>;

        $r3 = $r2[0];

        $i2 = lengthof $r3;

        i3 = 0;

     label01:
        if i3 >= $i2 goto label04;

        $r4 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int[] permutation>;

        $r4[i3] = i3;

        d1 = 0.0;

        i0 = 0;

     label02:
        if i0 >= $i1 goto label03;

        $r2 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[][] weightedJacobian>;

        $r3 = $r2[i0];

        d2 = $r3[i3];

        d2 = d2 * d2;

        d1 = d1 + d2;

        i0 = i0 + 1;

        goto label02;

     label03:
        $r3 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[] jacNorm>;

        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d1);

        $r3[i3] = d1;

        i3 = i3 + 1;

        goto label01;

     label04:
        i3 = 0;

     label05:
        if i3 >= $i2 goto label22;

        i4 = -1;

        d1 = #-Infinity;

        i0 = i3;

     label06:
        if i0 >= $i2 goto label12;

        d2 = 0.0;

        i5 = i3;

     label07:
        if i5 >= $i1 goto label08;

        $r2 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[][] weightedJacobian>;

        $r3 = $r2[i5];

        $r4 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int[] permutation>;

        $i6 = $r4[i0];

        d0 = $r3[$i6];

        d0 = d0 * d0;

        d2 = d2 + d0;

        i5 = i5 + 1;

        goto label07;

     label08:
        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d2);

        if $z0 != 0 goto label09;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d2);

        if $z0 == 0 goto label10;

     label09:
        $r5 = new org.apache.commons.math3.exception.ConvergenceException;

        $r6 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN>;

        $r7 = newarray (java.lang.Object)[2];

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r7[0] = $r8;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r7[1] = $r8;

        specialinvoke $r5.<org.apache.commons.math3.exception.ConvergenceException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r6, $r7);

        throw $r5;

     label10:
        $b7 = d2 cmpl d1;

        if $b7 <= 0 goto label11;

        i4 = i0;

        d1 = d2;

     label11:
        i0 = i0 + 1;

        goto label06;

     label12:
        d2 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double qrRankingThreshold>;

        $b7 = d1 cmpg d2;

        if $b7 > 0 goto label13;

        r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int rank> = i3;

        return;

     label13:
        $r4 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int[] permutation>;

        i0 = $r4[i4];

        $r4 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int[] permutation>;

        $r9 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int[] permutation>;

        i5 = $r9[i3];

        $r4[i4] = i5;

        $r4 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int[] permutation>;

        $r4[i3] = i0;

        $r2 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[][] weightedJacobian>;

        $r3 = $r2[i3];

        d0 = $r3[i0];

        $b7 = d0 cmpl 0.0;

        if $b7 <= 0 goto label17;

        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d1);

        d2 = neg d2;

     label14:
        d0 = d0 * d2;

        d1 = d1 - d0;

        d1 = 1.0 / d1;

        $r3 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[] beta>;

        $r3[i0] = d1;

        $r3 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[] diagR>;

        $r3[i0] = d2;

        $r2 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[][] weightedJacobian>;

        $r3 = $r2[i3];

        d0 = $r3[i0];

        d2 = d0 - d2;

        $r3[i0] = d2;

        i4 = $i2 + -1;

        i4 = i4 - i3;

     label15:
        if i4 <= 0 goto label21;

        d2 = 0.0;

        i5 = i3;

     label16:
        if i5 >= $i1 goto label18;

        $r2 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[][] weightedJacobian>;

        $r3 = $r2[i5];

        d0 = $r3[i0];

        $r2 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[][] weightedJacobian>;

        $r3 = $r2[i5];

        $r4 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int[] permutation>;

        $i6 = i3 + i4;

        $i6 = $r4[$i6];

        $d3 = $r3[$i6];

        d0 = d0 * $d3;

        d2 = d2 + d0;

        i5 = i5 + 1;

        goto label16;

     label17:
        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d1);

        goto label14;

     label18:
        d2 = d2 * d1;

        i5 = i3;

     label19:
        if i5 >= $i1 goto label20;

        $r2 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[][] weightedJacobian>;

        $r3 = $r2[i5];

        $r4 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int[] permutation>;

        $i6 = i3 + i4;

        $i6 = $r4[$i6];

        d0 = $r3[$i6];

        $r2 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[][] weightedJacobian>;

        $r10 = $r2[i5];

        $d3 = $r10[i0];

        $d3 = $d3 * d2;

        d0 = d0 - $d3;

        $r3[$i6] = d0;

        i5 = i5 + 1;

        goto label19;

     label20:
        i4 = i4 + -1;

        goto label15;

     label21:
        i3 = i3 + 1;

        goto label05;

     label22:
        $i1 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int solvedCols>;

        r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int rank> = $i1;

        return;
    }
    protected volatile java.lang.Object doOptimize()
    {
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer r0;
        org.apache.commons.math3.optim.PointVectorValuePair $r1;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: org.apache.commons.math3.optim.PointVectorValuePair doOptimize()>();

        return $r1;
    }
    protected org.apache.commons.math3.optim.PointVectorValuePair doOptimize()
    {
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer r0;
        double[] r1, r2, r3, r4, r5, $r7, $r9, r10, r11, r13, $r14, r15, $r20, $r21;
        double d0, d1, d2, d3, d4, d5, d6, d7, $d8, d9, $d10, $d11, $d12;
        int i0, $i1, $i2, $i3, i5;
        org.apache.commons.math3.optim.PointVectorValuePair r6, r16;
        int[] $r8;
        org.apache.commons.math3.linear.RealMatrix $r12, $r18;
        boolean z0, $z1;
        org.apache.commons.math3.optim.ConvergenceChecker $r17;
        double[][] $r19;
        byte $b4;
        org.apache.commons.math3.exception.ConvergenceException $r22;
        org.apache.commons.math3.exception.util.LocalizedFormats $r23;
        java.lang.Object[] $r24;
        java.lang.Double $r25;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer;

        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: void checkParameters()>();

        $r7 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[] getTarget()>();

        $i1 = lengthof $r7;

        $r7 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[] getStartPoint()>();

        $i2 = lengthof $r7;

        $i3 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i1, $i2);

        r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int solvedCols> = $i3;

        r2 = newarray (double)[$i2];

        r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[] diagR> = r2;

        r2 = newarray (double)[$i2];

        r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[] jacNorm> = r2;

        r2 = newarray (double)[$i2];

        r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[] beta> = r2;

        $r8 = newarray (int)[$i2];

        r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int[] permutation> = $r8;

        r2 = newarray (double)[$i2];

        r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[] lmDir> = r2;

        d5 = 0.0;

        d6 = 0.0;

        r2 = newarray (double)[$i2];

        $r9 = newarray (double)[$i2];

        r10 = newarray (double)[$i1];

        r1 = newarray (double)[$i1];

        r1 = newarray (double)[$i1];

        r3 = newarray (double)[$i2];

        r4 = newarray (double)[$i2];

        r5 = newarray (double)[$i2];

        $r12 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: org.apache.commons.math3.linear.RealMatrix getWeightSquareRoot()>();

        r11 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[] computeObjectiveValue(double[])>($r7);

        r13 = r11;

        $r14 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[] computeResiduals(double[])>(r11);

        r15 = $r14;

        r16 = new org.apache.commons.math3.optim.PointVectorValuePair;

        specialinvoke r16.<org.apache.commons.math3.optim.PointVectorValuePair: void <init>(double[],double[])>($r7, r11);

        d7 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double computeCost(double[])>($r14);

        r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double lmPar> = 0.0;

        z0 = 1;

        $r17 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: org.apache.commons.math3.optim.ConvergenceChecker getConvergenceChecker()>();

     label01:
        virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: void incrementIterationCount()>();

        r6 = r16;

        $r18 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: org.apache.commons.math3.linear.RealMatrix computeWeightedJacobian(double[])>($r7);

        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: void qrDecomposition(org.apache.commons.math3.linear.RealMatrix)>($r18);

        r11 = interfaceinvoke $r12.<org.apache.commons.math3.linear.RealMatrix: double[] operate(double[])>(r15);

        r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[] weightedResidual> = r11;

        $i3 = 0;

     label02:
        if $i3 >= $i1 goto label03;

        r11 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[] weightedResidual>;

        d4 = r11[$i3];

        r1[$i3] = d4;

        $i3 = $i3 + 1;

        goto label02;

     label03:
        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: void qTy(double[])>(r1);

        $i3 = 0;

     label04:
        i0 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int solvedCols>;

        if $i3 >= i0 goto label05;

        $r8 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int[] permutation>;

        i0 = $r8[$i3];

        $r19 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[][] weightedJacobian>;

        r11 = $r19[$i3];

        $r14 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[] diagR>;

        d4 = $r14[i0];

        r11[i0] = d4;

        $i3 = $i3 + 1;

        goto label04;

     label05:
        if z0 == 0 goto label09;

        d5 = 0.0;

        $i3 = 0;

     label06:
        if $i3 >= $i2 goto label08;

        r11 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[] jacNorm>;

        d6 = r11[$i3];

        $b4 = d6 cmpl 0.0;

        if $b4 != 0 goto label07;

        d6 = 1.0;

     label07:
        d4 = $r7[$i3];

        d4 = d6 * d4;

        d4 = d4 * d4;

        d5 = d5 + d4;

        r2[$i3] = d6;

        $i3 = $i3 + 1;

        goto label06;

     label08:
        d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d5);

        d6 = d5;

        $b4 = d5 cmpl 0.0;

        if $b4 != 0 goto label12;

        d5 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double initialStepBoundFactor>;

     label09:
        d4 = 0.0;

        $b4 = d7 cmpl 0.0;

        if $b4 == 0 goto label15;

        $i3 = 0;

     label10:
        i0 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int solvedCols>;

        if $i3 >= i0 goto label15;

        $r8 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int[] permutation>;

        i0 = $r8[$i3];

        r11 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[] jacNorm>;

        d2 = r11[i0];

        $b4 = d2 cmpl 0.0;

        if $b4 == 0 goto label14;

        d3 = 0.0;

        i5 = 0;

     label11:
        if i5 > $i3 goto label13;

        $r19 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[][] weightedJacobian>;

        r11 = $r19[i5];

        $d8 = r11[i0];

        d1 = r1[i5];

        $d8 = $d8 * d1;

        d3 = d3 + $d8;

        i5 = i5 + 1;

        goto label11;

     label12:
        d4 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double initialStepBoundFactor>;

        d5 = d4 * d5;

        goto label09;

     label13:
        d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d3);

        d2 = d2 * d7;

        d2 = d3 / d2;

        d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>(d4, d2);

     label14:
        $i3 = $i3 + 1;

        goto label10;

     label15:
        d2 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double orthoTolerance>;

        $b4 = d4 cmpg d2;

        if $b4 > 0 goto label16;

        virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: void setCost(double)>(d7);

        return r16;

     label16:
        $i3 = 0;

     label17:
        if $i3 >= $i2 goto label18;

        d2 = r2[$i3];

        r11 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[] jacNorm>;

        d3 = r11[$i3];

        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>(d2, d3);

        r2[$i3] = d2;

        $i3 = $i3 + 1;

        goto label17;

     label18:
        d9 = 0.0;

     label19:
        $b4 = d9 cmpg 1.0E-4;

        if $b4 >= 0 goto label01;

        $i3 = 0;

     label20:
        i0 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int solvedCols>;

        if $i3 >= i0 goto label21;

        $r8 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int[] permutation>;

        i0 = $r8[$i3];

        d2 = $r7[i0];

        $r9[i0] = d2;

        $i3 = $i3 + 1;

        goto label20;

     label21:
        d2 = d7;

        $r14 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[] weightedResidual>;

        r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[] weightedResidual> = r10;

        r10 = $r14;

        r11 = r13;

        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: void determineLMParameter(double[],double,double[],double[],double[],double[])>(r1, d5, r2, r3, r4, r5);

        d7 = 0.0;

        $i3 = 0;

     label22:
        i0 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int solvedCols>;

        if $i3 >= i0 goto label23;

        $r8 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int[] permutation>;

        i0 = $r8[$i3];

        r15 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[] lmDir>;

        r13 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[] lmDir>;

        d3 = r13[i0];

        d3 = neg d3;

        r15[i0] = d3;

        d3 = $r9[i0];

        r15 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[] lmDir>;

        $d8 = r15[i0];

        d3 = d3 + $d8;

        $r7[i0] = d3;

        d3 = r2[i0];

        r15 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[] lmDir>;

        $d8 = r15[i0];

        d3 = d3 * $d8;

        d3 = d3 * d3;

        d7 = d7 + d3;

        $i3 = $i3 + 1;

        goto label22;

     label23:
        $d10 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d7);

        if z0 == 0 goto label24;

        d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double min(double,double)>(d5, $d10);

     label24:
        $r20 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[] computeObjectiveValue(double[])>($r7);

        r13 = $r20;

        $r21 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[] computeResiduals(double[])>($r20);

        r15 = $r21;

        r16 = new org.apache.commons.math3.optim.PointVectorValuePair;

        specialinvoke r16.<org.apache.commons.math3.optim.PointVectorValuePair: void <init>(double[],double[])>($r7, $r20);

        $d8 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double computeCost(double[])>($r21);

        d7 = $d8;

        d3 = -1.0;

        d1 = 0.1 * $d8;

        $b4 = d1 cmpg d2;

        if $b4 >= 0 goto label25;

        d3 = $d8 / d2;

        d3 = d3 * d3;

        d3 = 1.0 - d3;

     label25:
        $i3 = 0;

     label26:
        i0 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int solvedCols>;

        if $i3 >= i0 goto label29;

        $r8 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int[] permutation>;

        i0 = $r8[$i3];

        $r20 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[] lmDir>;

        d1 = $r20[i0];

        r3[$i3] = 0.0;

        i5 = 0;

     label27:
        if i5 > $i3 goto label28;

        d9 = r3[i5];

        $r19 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[][] weightedJacobian>;

        $r20 = $r19[i5];

        d0 = $r20[i0];

        d0 = d0 * d1;

        d9 = d9 + d0;

        r3[i5] = d9;

        i5 = i5 + 1;

        goto label27;

     label28:
        $i3 = $i3 + 1;

        goto label26;

     label29:
        d9 = 0.0;

        $i3 = 0;

     label30:
        i0 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int solvedCols>;

        if $i3 >= i0 goto label31;

        d1 = r3[$i3];

        d0 = r3[$i3];

        d1 = d1 * d0;

        d9 = d9 + d1;

        $i3 = $i3 + 1;

        goto label30;

     label31:
        d1 = d2 * d2;

        d9 = d9 / d1;

        d0 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double lmPar>;

        d0 = d0 * $d10;

        d0 = d0 * $d10;

        d0 = d0 / d1;

        d1 = 2.0 * d0;

        d1 = d9 + d1;

        d9 = d9 + d0;

        $d11 = neg d9;

        $b4 = d1 cmpl 0.0;

        if $b4 != 0 goto label38;

        d9 = 0.0;

     label32:
        $b4 = d9 cmpg 0.25;

        if $b4 > 0 goto label40;

        $b4 = d3 cmpg 0.0;

        if $b4 >= 0 goto label39;

        d0 = 0.5 * $d11;

        $d12 = 0.5 * d3;

        $d11 = $d12 + $d11;

        d0 = d0 / $d11;

     label33:
        $d11 = 0.1 * $d8;

        $b4 = $d11 cmpl d2;

        if $b4 >= 0 goto label34;

        $b4 = d0 cmpg 0.1;

        if $b4 >= 0 goto label35;

     label34:
        d0 = 0.1;

     label35:
        $d10 = 10.0 * $d10;

        d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double min(double,double)>(d5, $d10);

        d5 = d0 * d5;

        $d10 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double lmPar>;

        $d10 = $d10 / d0;

        r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double lmPar> = $d10;

     label36:
        $b4 = d9 cmpl 1.0E-4;

        if $b4 < 0 goto label43;

        z0 = 0;

        d6 = 0.0;

        $i3 = 0;

     label37:
        if $i3 >= $i2 goto label42;

        d2 = r2[$i3];

        $d10 = $r7[$i3];

        d2 = d2 * $d10;

        d2 = d2 * d2;

        d6 = d6 + d2;

        $i3 = $i3 + 1;

        goto label37;

     label38:
        d9 = d3 / d1;

        goto label32;

     label39:
        d0 = 0.5;

        goto label33;

     label40:
        d0 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double lmPar>;

        $b4 = d0 cmpl 0.0;

        if $b4 == 0 goto label41;

        $b4 = d9 cmpl 0.75;

        if $b4 < 0 goto label36;

     label41:
        d5 = 2.0 * $d10;

        $d10 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double lmPar>;

        $d10 = $d10 * 0.5;

        r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double lmPar> = $d10;

        goto label36;

     label42:
        d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d6);

        if $r17 == null goto label46;

        $i3 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int getIterations()>();

        $z1 = interfaceinvoke $r17.<org.apache.commons.math3.optim.ConvergenceChecker: boolean converged(int,java.lang.Object,java.lang.Object)>($i3, r6, r16);

        if $z1 == 0 goto label46;

        virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: void setCost(double)>($d8);

        return r16;

     label43:
        d7 = d2;

        $i3 = 0;

     label44:
        i0 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int solvedCols>;

        if $i3 >= i0 goto label45;

        $r8 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: int[] permutation>;

        i0 = $r8[$i3];

        d2 = $r9[i0];

        $r7[i0] = d2;

        $i3 = $i3 + 1;

        goto label44;

     label45:
        r10 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[] weightedResidual>;

        r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double[] weightedResidual> = $r14;

        r13 = r11;

        r16 = new org.apache.commons.math3.optim.PointVectorValuePair;

        specialinvoke r16.<org.apache.commons.math3.optim.PointVectorValuePair: void <init>(double[],double[])>($r7, r11);

     label46:
        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d3);

        $d8 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double costRelativeTolerance>;

        $b4 = d2 cmpg $d8;

        if $b4 > 0 goto label47;

        d2 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double costRelativeTolerance>;

        $b4 = d1 cmpg d2;

        if $b4 > 0 goto label47;

        $b4 = d9 cmpg 2.0;

        if $b4 <= 0 goto label48;

     label47:
        d2 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double parRelativeTolerance>;

        d2 = d2 * d6;

        $b4 = d5 cmpg d2;

        if $b4 > 0 goto label49;

     label48:
        virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: void setCost(double)>(d7);

        return r16;

     label49:
        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d3);

        d3 = <org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double TWO_EPS>;

        $b4 = d2 cmpg d3;

        if $b4 > 0 goto label50;

        d2 = <org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double TWO_EPS>;

        $b4 = d1 cmpg d2;

        if $b4 > 0 goto label50;

        $b4 = d9 cmpg 2.0;

        if $b4 > 0 goto label50;

        $r22 = new org.apache.commons.math3.exception.ConvergenceException;

        $r23 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats TOO_SMALL_COST_RELATIVE_TOLERANCE>;

        $r24 = newarray (java.lang.Object)[1];

        d5 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double costRelativeTolerance>;

        $r25 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d5);

        $r24[0] = $r25;

        specialinvoke $r22.<org.apache.commons.math3.exception.ConvergenceException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r23, $r24);

        throw $r22;

     label50:
        d2 = <org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double TWO_EPS>;

        d2 = d2 * d6;

        $b4 = d5 cmpg d2;

        if $b4 > 0 goto label51;

        $r22 = new org.apache.commons.math3.exception.ConvergenceException;

        $r23 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE>;

        $r24 = newarray (java.lang.Object)[1];

        d5 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double parRelativeTolerance>;

        $r25 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d5);

        $r24[0] = $r25;

        specialinvoke $r22.<org.apache.commons.math3.exception.ConvergenceException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r23, $r24);

        throw $r22;

     label51:
        d2 = <org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double TWO_EPS>;

        $b4 = d4 cmpg d2;

        if $b4 > 0 goto label19;

        $r22 = new org.apache.commons.math3.exception.ConvergenceException;

        $r23 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats TOO_SMALL_ORTHOGONALITY_TOLERANCE>;

        $r24 = newarray (java.lang.Object)[1];

        d5 = r0.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer: double orthoTolerance>;

        $r25 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d5);

        $r24[0] = $r25;

        specialinvoke $r22.<org.apache.commons.math3.exception.ConvergenceException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r23, $r24);

        throw $r22;
    }
