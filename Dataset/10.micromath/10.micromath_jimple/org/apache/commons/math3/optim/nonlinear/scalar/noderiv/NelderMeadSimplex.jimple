org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex extends org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex
private static final double DEFAULT_GAMMA
private static final double DEFAULT_KHI
private static final double DEFAULT_RHO
private static final double DEFAULT_SIGMA
private final double gamma
private final double khi
private final double rho
private final double sigma
    public void <init>(int)
    {
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex;

        $i0 := @parameter0: int;

        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: void <init>(int,double)>($i0, 1.0);

        return;
    }
    public void <init>(int, double)
    {
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex r0;
        int $i0;
        double $d0;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex;

        $i0 := @parameter0: int;

        $d0 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: void <init>(int,double,double,double,double,double)>($i0, $d0, 1.0, 2.0, 0.5, 0.5);

        return;
    }
    public void <init>(int, double, double, double, double)
    {
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex r0;
        int $i0;
        double $d0, $d1, $d2, $d3;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex;

        $i0 := @parameter0: int;

        $d0 := @parameter1: double;

        $d1 := @parameter2: double;

        $d2 := @parameter3: double;

        $d3 := @parameter4: double;

        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: void <init>(int,double,double,double,double,double)>($i0, 1.0, $d0, $d1, $d2, $d3);

        return;
    }
    public void <init>(int, double, double, double, double, double)
    {
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex r0;
        int $i0;
        double $d0, $d1, $d2, $d3, $d4;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex;

        $i0 := @parameter0: int;

        $d0 := @parameter1: double;

        $d1 := @parameter2: double;

        $d2 := @parameter3: double;

        $d3 := @parameter4: double;

        $d4 := @parameter5: double;

        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex: void <init>(int,double)>($i0, $d0);

        r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: double rho> = $d1;

        r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: double khi> = $d2;

        r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: double gamma> = $d3;

        r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: double sigma> = $d4;

        return;
    }
    public void <init>(double[])
    {
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex r0;
        double[] $r1;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex;

        $r1 := @parameter0: double[];

        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: void <init>(double[],double,double,double,double)>($r1, 1.0, 2.0, 0.5, 0.5);

        return;
    }
    public void <init>(double[], double, double, double, double)
    {
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex r0;
        double[] $r1;
        double $d0, $d1, $d2, $d3;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex;

        $r1 := @parameter0: double[];

        $d0 := @parameter1: double;

        $d1 := @parameter2: double;

        $d2 := @parameter3: double;

        $d3 := @parameter4: double;

        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex: void <init>(double[])>($r1);

        r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: double rho> = $d0;

        r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: double khi> = $d1;

        r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: double gamma> = $d2;

        r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: double sigma> = $d3;

        return;
    }
    public void <init>(double[][])
    {
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex r0;
        double[][] $r1;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex;

        $r1 := @parameter0: double[][];

        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: void <init>(double[][],double,double,double,double)>($r1, 1.0, 2.0, 0.5, 0.5);

        return;
    }
    public void <init>(double[][], double, double, double, double)
    {
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex r0;
        double[][] $r1;
        double $d0, $d1, $d2, $d3;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex;

        $r1 := @parameter0: double[][];

        $d0 := @parameter1: double;

        $d1 := @parameter2: double;

        $d2 := @parameter3: double;

        $d3 := @parameter4: double;

        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex: void <init>(double[][])>($r1);

        r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: double rho> = $d0;

        r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: double khi> = $d1;

        r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: double gamma> = $d2;

        r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: double sigma> = $d3;

        return;
    }
    public void iterate(org.apache.commons.math3.analysis.MultivariateFunction, java.util.Comparator)
    {
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex r0;
        org.apache.commons.math3.analysis.MultivariateFunction $r1;
        java.util.Comparator r2;
        double[] r3, $r8, $r9;
        org.apache.commons.math3.optim.PointValuePair r4, r5, $r6, $r7;
        double d0, $d1, $d2, $d3;
        int $i0, $i1, i2;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex;

        $r1 := @parameter0: org.apache.commons.math3.analysis.MultivariateFunction;

        r2 := @parameter1: java.util.Comparator;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: int getDimension()>();

        $r6 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: org.apache.commons.math3.optim.PointValuePair getPoint(int)>(0);

        $i1 = $i0 + -1;

        $r7 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: org.apache.commons.math3.optim.PointValuePair getPoint(int)>($i1);

        r4 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: org.apache.commons.math3.optim.PointValuePair getPoint(int)>($i0);

        $r8 = virtualinvoke r4.<org.apache.commons.math3.optim.PointValuePair: double[] getPointRef()>();

        r3 = newarray (double)[$i0];

        $i1 = 0;

     label01:
        if $i1 >= $i0 goto label04;

        r5 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: org.apache.commons.math3.optim.PointValuePair getPoint(int)>($i1);

        $r9 = virtualinvoke r5.<org.apache.commons.math3.optim.PointValuePair: double[] getPointRef()>();

        i2 = 0;

     label02:
        if i2 >= $i0 goto label03;

        d0 = r3[i2];

        $d1 = $r9[i2];

        d0 = d0 + $d1;

        r3[i2] = d0;

        i2 = i2 + 1;

        goto label02;

     label03:
        $i1 = $i1 + 1;

        goto label01;

     label04:
        d0 = (double) $i0;

        d0 = 1.0 / d0;

        $i1 = 0;

     label05:
        if $i1 >= $i0 goto label06;

        $d1 = r3[$i1];

        $d1 = $d1 * d0;

        r3[$i1] = $d1;

        $i1 = $i1 + 1;

        goto label05;

     label06:
        $r9 = newarray (double)[$i0];

        $i1 = 0;

     label07:
        if $i1 >= $i0 goto label08;

        d0 = r3[$i1];

        $d1 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: double rho>;

        $d2 = r3[$i1];

        $d3 = $r8[$i1];

        $d2 = $d2 - $d3;

        $d1 = $d1 * $d2;

        d0 = d0 + $d1;

        $r9[$i1] = d0;

        $i1 = $i1 + 1;

        goto label07;

     label08:
        r5 = new org.apache.commons.math3.optim.PointValuePair;

        d0 = interfaceinvoke $r1.<org.apache.commons.math3.analysis.MultivariateFunction: double value(double[])>($r9);

        specialinvoke r5.<org.apache.commons.math3.optim.PointValuePair: void <init>(double[],double,boolean)>($r9, d0, 0);

        $i1 = interfaceinvoke r2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r6, r5);

        if $i1 > 0 goto label09;

        $i1 = interfaceinvoke r2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r5, $r7);

        if $i1 >= 0 goto label09;

        virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: void replaceWorstPoint(org.apache.commons.math3.optim.PointValuePair,java.util.Comparator)>(r5, r2);

        return;

     label09:
        $i1 = interfaceinvoke r2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r5, $r6);

        if $i1 >= 0 goto label13;

        $r8 = newarray (double)[$i0];

        $i1 = 0;

     label10:
        if $i1 >= $i0 goto label11;

        d0 = r3[$i1];

        $d1 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: double khi>;

        $d2 = $r9[$i1];

        $d3 = r3[$i1];

        $d2 = $d2 - $d3;

        $d1 = $d1 * $d2;

        d0 = d0 + $d1;

        $r8[$i1] = d0;

        $i1 = $i1 + 1;

        goto label10;

     label11:
        r4 = new org.apache.commons.math3.optim.PointValuePair;

        d0 = interfaceinvoke $r1.<org.apache.commons.math3.analysis.MultivariateFunction: double value(double[])>($r8);

        specialinvoke r4.<org.apache.commons.math3.optim.PointValuePair: void <init>(double[],double,boolean)>($r8, d0, 0);

        $i0 = interfaceinvoke r2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r4, r5);

        if $i0 >= 0 goto label12;

        virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: void replaceWorstPoint(org.apache.commons.math3.optim.PointValuePair,java.util.Comparator)>(r4, r2);

        return;

     label12:
        virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: void replaceWorstPoint(org.apache.commons.math3.optim.PointValuePair,java.util.Comparator)>(r5, r2);

        return;

     label13:
        $i1 = interfaceinvoke r2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r5, r4);

        if $i1 >= 0 goto label16;

        $r8 = newarray (double)[$i0];

        $i1 = 0;

     label14:
        if $i1 >= $i0 goto label15;

        d0 = r3[$i1];

        $d1 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: double gamma>;

        $d2 = $r9[$i1];

        $d3 = r3[$i1];

        $d2 = $d2 - $d3;

        $d1 = $d1 * $d2;

        d0 = d0 + $d1;

        $r8[$i1] = d0;

        $i1 = $i1 + 1;

        goto label14;

     label15:
        r4 = new org.apache.commons.math3.optim.PointValuePair;

        d0 = interfaceinvoke $r1.<org.apache.commons.math3.analysis.MultivariateFunction: double value(double[])>($r8);

        specialinvoke r4.<org.apache.commons.math3.optim.PointValuePair: void <init>(double[],double,boolean)>($r8, d0, 0);

        $i1 = interfaceinvoke r2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r4, r5);

        if $i1 > 0 goto label19;

        virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: void replaceWorstPoint(org.apache.commons.math3.optim.PointValuePair,java.util.Comparator)>(r4, r2);

        return;

     label16:
        $r9 = newarray (double)[$i0];

        $i1 = 0;

     label17:
        if $i1 >= $i0 goto label18;

        d0 = r3[$i1];

        $d1 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: double gamma>;

        $d2 = r3[$i1];

        $d3 = $r8[$i1];

        $d2 = $d2 - $d3;

        $d1 = $d1 * $d2;

        d0 = d0 - $d1;

        $r9[$i1] = d0;

        $i1 = $i1 + 1;

        goto label17;

     label18:
        r5 = new org.apache.commons.math3.optim.PointValuePair;

        d0 = interfaceinvoke $r1.<org.apache.commons.math3.analysis.MultivariateFunction: double value(double[])>($r9);

        specialinvoke r5.<org.apache.commons.math3.optim.PointValuePair: void <init>(double[],double,boolean)>($r9, d0, 0);

        $i1 = interfaceinvoke r2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r5, r4);

        if $i1 >= 0 goto label19;

        virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: void replaceWorstPoint(org.apache.commons.math3.optim.PointValuePair,java.util.Comparator)>(r5, r2);

        return;

     label19:
        r5 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: org.apache.commons.math3.optim.PointValuePair getPoint(int)>(0);

        r3 = virtualinvoke r5.<org.apache.commons.math3.optim.PointValuePair: double[] getPointRef()>();

        $i1 = 1;

     label20:
        if $i1 > $i0 goto label23;

        r5 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: org.apache.commons.math3.optim.PointValuePair getPoint(int)>($i1);

        $r8 = virtualinvoke r5.<org.apache.commons.math3.optim.PointValuePair: double[] getPoint()>();

        i2 = 0;

     label21:
        if i2 >= $i0 goto label22;

        d0 = r3[i2];

        $d1 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: double sigma>;

        $d2 = $r8[i2];

        $d3 = r3[i2];

        $d2 = $d2 - $d3;

        $d1 = $d1 * $d2;

        d0 = d0 + $d1;

        $r8[i2] = d0;

        i2 = i2 + 1;

        goto label21;

     label22:
        r5 = new org.apache.commons.math3.optim.PointValuePair;

        specialinvoke r5.<org.apache.commons.math3.optim.PointValuePair: void <init>(double[],double,boolean)>($r8, #NaN, 0);

        virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: void setPoint(int,org.apache.commons.math3.optim.PointValuePair)>($i1, r5);

        $i1 = $i1 + 1;

        goto label20;

     label23:
        virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: void evaluate(org.apache.commons.math3.analysis.MultivariateFunction,java.util.Comparator)>($r1, r2);

        return;
    }
