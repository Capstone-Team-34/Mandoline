org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer extends org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer
private static final double MIN_RELATIVE_TOLERANCE
private final double absoluteThreshold
private final org.apache.commons.math3.optim.nonlinear.scalar.LineSearch line
private final double relativeThreshold
    static void <clinit>()
    {
        double $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double ulp(double)>(1.0);

        $d0 = 2.0 * $d0;

        <org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer: double MIN_RELATIVE_TOLERANCE> = $d0;

        return;
    }
    public void <init>(double, double)
    {
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer r0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer: void <init>(double,double,org.apache.commons.math3.optim.ConvergenceChecker)>($d0, $d1, null);

        return;
    }
    public void <init>(double, double, double, double)
    {
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer r0;
        double $d0, $d1, $d2, $d3;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $d3 := @parameter3: double;

        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer: void <init>(double,double,double,double,org.apache.commons.math3.optim.ConvergenceChecker)>($d0, $d1, $d2, $d3, null);

        return;
    }
    public void <init>(double, double, double, double, org.apache.commons.math3.optim.ConvergenceChecker)
    {
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer r0;
        double $d0, $d1, $d2, $d3, $d4;
        org.apache.commons.math3.optim.ConvergenceChecker r1;
        byte $b0;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r2;
        java.lang.Double $r3, $r4;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r5;
        org.apache.commons.math3.optim.nonlinear.scalar.LineSearch $r6;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $d3 := @parameter3: double;

        r1 := @parameter4: org.apache.commons.math3.optim.ConvergenceChecker;

        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer: void <init>(org.apache.commons.math3.optim.ConvergenceChecker)>(r1);

        $d4 = <org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer: double MIN_RELATIVE_TOLERANCE>;

        $b0 = $d0 cmpg $d4;

        if $b0 >= 0 goto label1;

        $r2 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $d0 = <org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer: double MIN_RELATIVE_TOLERANCE>;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        specialinvoke $r2.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r3, $r4, 1);

        throw $r2;

     label1:
        $b0 = $d1 cmpg 0.0;

        if $b0 > 0 goto label2;

        $r5 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        specialinvoke $r5.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(java.lang.Number)>($r3);

        throw $r5;

     label2:
        r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer: double relativeThreshold> = $d0;

        r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer: double absoluteThreshold> = $d1;

        $r6 = new org.apache.commons.math3.optim.nonlinear.scalar.LineSearch;

        specialinvoke $r6.<org.apache.commons.math3.optim.nonlinear.scalar.LineSearch: void <init>(org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer,double,double,double)>(r0, $d2, $d3, 1.0);

        r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer: org.apache.commons.math3.optim.nonlinear.scalar.LineSearch line> = $r6;

        return;
    }
    public void <init>(double, double, org.apache.commons.math3.optim.ConvergenceChecker)
    {
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer r0;
        double $d0, $d1, $d2, $d3;
        org.apache.commons.math3.optim.ConvergenceChecker r1;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        r1 := @parameter2: org.apache.commons.math3.optim.ConvergenceChecker;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d0);

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d1);

        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer: void <init>(double,double,double,double,org.apache.commons.math3.optim.ConvergenceChecker)>($d0, $d1, $d2, $d3, r1);

        return;
    }
    private void checkParameters()
    {
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer r0;
        org.apache.commons.math3.exception.util.LocalizedFormats $r1;
        double[] $r2;
        org.apache.commons.math3.exception.MathUnsupportedOperationException $r3;
        java.lang.Object[] $r4;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer: double[] getLowerBound()>();

        if $r2 != null goto label1;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer: double[] getUpperBound()>();

        if $r2 == null goto label2;

     label1:
        $r3 = new org.apache.commons.math3.exception.MathUnsupportedOperationException;

        $r1 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats CONSTRAINT>;

        $r4 = newarray (java.lang.Object)[0];

        specialinvoke $r3.<org.apache.commons.math3.exception.MathUnsupportedOperationException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r1, $r4);

        throw $r3;

     label2:
        return;
    }
    private double[][] newPointAndDirection(double[], double[], double)
    {
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer r0;
        double[] $r1, $r2, r3, r4;
        double $d0, $d1, $d2;
        int i0, i1;
        double[][] r5;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[];

        $d0 := @parameter2: double;

        i0 = lengthof $r1;

        r4 = newarray (double)[i0];

        r3 = newarray (double)[i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $d1 = $r2[i1];

        $d1 = $d1 * $d0;

        r3[i1] = $d1;

        $d2 = $r1[i1];

        $d1 = r3[i1];

        $d1 = $d2 + $d1;

        r4[i1] = $d1;

        i1 = i1 + 1;

        goto label1;

     label2:
        r5 = newarray (double[])[2];

        r5[0] = r4;

        r5[1] = r3;

        return r5;
    }
    protected volatile java.lang.Object doOptimize()
    {
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer r0;
        org.apache.commons.math3.optim.PointValuePair $r1;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer: org.apache.commons.math3.optim.PointValuePair doOptimize()>();

        return $r1;
    }
    protected org.apache.commons.math3.optim.PointValuePair doOptimize()
    {
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer r0;
        double d0, $d1, d2, d3, $d4, $d5, $d6;
        int i0, $i1, i2;
        org.apache.commons.math3.optim.PointValuePair r1, r14;
        org.apache.commons.math3.optim.nonlinear.scalar.GoalType $r2, $r15;
        double[] $r3, $r8, $r10, $r16;
        int[] $r4;
        java.lang.Class $r5;
        java.lang.Object $r6;
        double[][] r7, $r13;
        org.apache.commons.math3.optim.ConvergenceChecker $r9;
        org.apache.commons.math3.optim.nonlinear.scalar.LineSearch $r11;
        org.apache.commons.math3.optim.univariate.UnivariatePointValuePair $r12;
        byte $b3;
        boolean z0;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer;

        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer: void checkParameters()>();

        $r2 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer: org.apache.commons.math3.optim.nonlinear.scalar.GoalType getGoalType()>();

        $r3 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer: double[] getStartPoint()>();

        $i1 = lengthof $r3;

        $r4 = newarray (int)[2];

        $r4[0] = $i1;

        $r4[1] = $i1;

        $r5 = <java.lang.Double: java.lang.Class TYPE>;

        $r6 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r5, $r4);

        r7 = (double[][]) $r6;

        i2 = 0;

     label01:
        if i2 >= $i1 goto label02;

        $r8 = r7[i2];

        $r8[i2] = 1.0;

        i2 = i2 + 1;

        goto label01;

     label02:
        $r9 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer: org.apache.commons.math3.optim.ConvergenceChecker getConvergenceChecker()>();

        $r8 = $r3;

        $d1 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer: double computeObjectiveValue(double[])>($r3);

        $r6 = virtualinvoke $r3.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (double[]) $r6;

     label03:
        virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer: void incrementIterationCount()>();

        d0 = $d1;

        d2 = 0.0;

        i2 = 0;

        i0 = 0;

     label04:
        if i0 >= $i1 goto label06;

        $r10 = r7[i0];

        $r10 = staticinvoke <org.apache.commons.math3.util.MathArrays: double[] copyOf(double[])>($r10);

        d3 = $d1;

        $r11 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer: org.apache.commons.math3.optim.nonlinear.scalar.LineSearch line>;

        $r12 = virtualinvoke $r11.<org.apache.commons.math3.optim.nonlinear.scalar.LineSearch: org.apache.commons.math3.optim.univariate.UnivariatePointValuePair search(double[],double[])>($r8, $r10);

        $d4 = virtualinvoke $r12.<org.apache.commons.math3.optim.univariate.UnivariatePointValuePair: double getValue()>();

        $d1 = $d4;

        $d5 = virtualinvoke $r12.<org.apache.commons.math3.optim.univariate.UnivariatePointValuePair: double getPoint()>();

        $r13 = specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer: double[][] newPointAndDirection(double[],double[],double)>($r8, $r10, $d5);

        $r8 = $r13[0];

        $d5 = d3 - $d4;

        $b3 = $d5 cmpl d2;

        if $b3 <= 0 goto label05;

        d2 = d3 - $d4;

        i2 = i0;

     label05:
        i0 = i0 + 1;

        goto label04;

     label06:
        d3 = d0 - $d1;

        d3 = 2.0 * d3;

        $d4 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer: double relativeThreshold>;

        $d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d0);

        $d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d1);

        $d5 = $d5 + $d6;

        $d4 = $d4 * $d5;

        $d5 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer: double absoluteThreshold>;

        $d4 = $d4 + $d5;

        $b3 = d3 cmpg $d4;

        if $b3 > 0 goto label09;

        z0 = 1;

     label07:
        r1 = new org.apache.commons.math3.optim.PointValuePair;

        specialinvoke r1.<org.apache.commons.math3.optim.PointValuePair: void <init>(double[],double)>($r3, d0);

        r14 = new org.apache.commons.math3.optim.PointValuePair;

        specialinvoke r14.<org.apache.commons.math3.optim.PointValuePair: void <init>(double[],double)>($r8, $d1);

        if z0 != 0 goto label08;

        if $r9 == null goto label08;

        i0 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer: int getIterations()>();

        z0 = interfaceinvoke $r9.<org.apache.commons.math3.optim.ConvergenceChecker: boolean converged(int,java.lang.Object,java.lang.Object)>(i0, r1, r14);

     label08:
        if z0 == 0 goto label12;

        $r15 = <org.apache.commons.math3.optim.nonlinear.scalar.GoalType: org.apache.commons.math3.optim.nonlinear.scalar.GoalType MINIMIZE>;

        if $r2 != $r15 goto label11;

        $b3 = $d1 cmpg d0;

        if $b3 >= 0 goto label10;

        return r14;

     label09:
        z0 = 0;

        goto label07;

     label10:
        return r1;

     label11:
        $b3 = $d1 cmpl d0;

        if $b3 > 0 goto label15;

        return r1;

     label12:
        $r10 = newarray (double)[$i1];

        $r16 = newarray (double)[$i1];

        i0 = 0;

     label13:
        if i0 >= $i1 goto label14;

        d3 = $r8[i0];

        $d4 = $r3[i0];

        d3 = d3 - $d4;

        $r10[i0] = d3;

        d3 = $r8[i0];

        d3 = 2.0 * d3;

        $d4 = $r3[i0];

        d3 = d3 - $d4;

        $r16[i0] = d3;

        i0 = i0 + 1;

        goto label13;

     label14:
        $r6 = virtualinvoke $r8.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (double[]) $r6;

        d3 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer: double computeObjectiveValue(double[])>($r16);

        $b3 = d0 cmpl d3;

        if $b3 <= 0 goto label03;

        $d4 = d0 + d3;

        $d5 = 2.0 * $d1;

        $d4 = $d4 - $d5;

        $d4 = 2.0 * $d4;

        $d5 = d0 - $d1;

        $d5 = $d5 - d2;

        $d5 = $d5 * $d5;

        $d4 = $d4 * $d5;

        d0 = d0 - d3;

        d2 = d2 * d0;

        d2 = d2 * d0;

        d2 = $d4 - d2;

        $b3 = d2 cmpg 0.0;

        if $b3 >= 0 goto label03;

        $r11 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer: org.apache.commons.math3.optim.nonlinear.scalar.LineSearch line>;

        $r12 = virtualinvoke $r11.<org.apache.commons.math3.optim.nonlinear.scalar.LineSearch: org.apache.commons.math3.optim.univariate.UnivariatePointValuePair search(double[],double[])>($r8, $r10);

        $d1 = virtualinvoke $r12.<org.apache.commons.math3.optim.univariate.UnivariatePointValuePair: double getValue()>();

        d2 = virtualinvoke $r12.<org.apache.commons.math3.optim.univariate.UnivariatePointValuePair: double getPoint()>();

        $r13 = specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer: double[][] newPointAndDirection(double[],double[],double)>($r8, $r10, d2);

        $r8 = $r13[0];

        i0 = $i1 + -1;

        $r10 = r7[i0];

        r7[i2] = $r10;

        $r10 = $r13[1];

        r7[i0] = $r10;

        goto label03;

     label15:
        return r14;
    }
