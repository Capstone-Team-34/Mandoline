org.apache.commons.math3.optim.univariate.SearchInterval extends java.lang.Object implements org.apache.commons.math3.optim.OptimizationData
private final double lower
private final double start
private final double upper
    public void <init>(double, double)
    {
        org.apache.commons.math3.optim.univariate.SearchInterval r0;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.optim.univariate.SearchInterval;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 = $d0 + $d1;

        $d2 = 0.5 * $d2;

        specialinvoke r0.<org.apache.commons.math3.optim.univariate.SearchInterval: void <init>(double,double,double)>($d0, $d1, $d2);

        return;
    }
    public void <init>(double, double, double)
    {
        org.apache.commons.math3.optim.univariate.SearchInterval r0;
        double $d0, $d1, $d2;
        byte $b0;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r1;
        java.lang.Double $r2, $r3, $r5;
        org.apache.commons.math3.exception.OutOfRangeException $r4;

        r0 := @this: org.apache.commons.math3.optim.univariate.SearchInterval;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $b0 = $d0 cmpl $d1;

        if $b0 < 0 goto label1;

        $r1 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        specialinvoke $r1.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r2, $r3, 0);

        throw $r1;

     label1:
        $b0 = $d2 cmpg $d0;

        if $b0 < 0 goto label2;

        $b0 = $d2 cmpl $d1;

        if $b0 <= 0 goto label3;

     label2:
        $r4 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d2);

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        specialinvoke $r4.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r2, $r3, $r5);

        throw $r4;

     label3:
        r0.<org.apache.commons.math3.optim.univariate.SearchInterval: double lower> = $d0;

        r0.<org.apache.commons.math3.optim.univariate.SearchInterval: double upper> = $d1;

        r0.<org.apache.commons.math3.optim.univariate.SearchInterval: double start> = $d2;

        return;
    }
    public double getMax()
    {
        org.apache.commons.math3.optim.univariate.SearchInterval r0;
        double d0;

        r0 := @this: org.apache.commons.math3.optim.univariate.SearchInterval;

        d0 = r0.<org.apache.commons.math3.optim.univariate.SearchInterval: double upper>;

        return d0;
    }
    public double getMin()
    {
        org.apache.commons.math3.optim.univariate.SearchInterval r0;
        double d0;

        r0 := @this: org.apache.commons.math3.optim.univariate.SearchInterval;

        d0 = r0.<org.apache.commons.math3.optim.univariate.SearchInterval: double lower>;

        return d0;
    }
    public double getStartValue()
    {
        org.apache.commons.math3.optim.univariate.SearchInterval r0;
        double d0;

        r0 := @this: org.apache.commons.math3.optim.univariate.SearchInterval;

        d0 = r0.<org.apache.commons.math3.optim.univariate.SearchInterval: double start>;

        return d0;
    }
