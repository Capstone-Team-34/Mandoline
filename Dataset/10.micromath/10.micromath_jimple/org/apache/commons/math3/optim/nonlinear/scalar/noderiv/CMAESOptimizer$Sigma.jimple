org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$Sigma extends java.lang.Object implements org.apache.commons.math3.optim.OptimizationData
private final double[] sigma
    public void <init>(double[]) throws org.apache.commons.math3.exception.NotPositiveException
    {
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$Sigma r0;
        double[] $r1;
        int i0, $i1;
        double $d0;
        byte $b2;
        org.apache.commons.math3.exception.NotPositiveException $r2;
        java.lang.Double $r3;
        java.lang.Object $r4;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$Sigma;

        $r1 := @parameter0: double[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        i0 = 0;

     label1:
        $i1 = lengthof $r1;

        if i0 >= $i1 goto label3;

        $d0 = $r1[i0];

        $b2 = $d0 cmpg 0.0;

        if $b2 >= 0 goto label2;

        $r2 = new org.apache.commons.math3.exception.NotPositiveException;

        $d0 = $r1[i0];

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        specialinvoke $r2.<org.apache.commons.math3.exception.NotPositiveException: void <init>(java.lang.Number)>($r3);

        throw $r2;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        $r4 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r1 = (double[]) $r4;

        r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$Sigma: double[] sigma> = $r1;

        return;
    }
    public double[] getSigma()
    {
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$Sigma r0;
        java.lang.Object $r1;
        double[] $r2;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$Sigma;

        $r2 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$Sigma: double[] sigma>;

        $r1 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (double[]) $r1;

        return $r2;
    }
