org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex extends org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex
private static final double DEFAULT_GAMMA
private static final double DEFAULT_KHI
private final double gamma
private final double khi
    public void <init>(int)
    {
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex;

        $i0 := @parameter0: int;

        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex: void <init>(int,double)>($i0, 1.0);

        return;
    }
    public void <init>(int, double)
    {
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex r0;
        int $i0;
        double $d0;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex;

        $i0 := @parameter0: int;

        $d0 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex: void <init>(int,double,double,double)>($i0, $d0, 2.0, 0.5);

        return;
    }
    public void <init>(int, double, double)
    {
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex r0;
        int $i0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex;

        $i0 := @parameter0: int;

        $d0 := @parameter1: double;

        $d1 := @parameter2: double;

        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex: void <init>(int,double,double,double)>($i0, 1.0, $d0, $d1);

        return;
    }
    public void <init>(int, double, double, double)
    {
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex r0;
        int $i0;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex;

        $i0 := @parameter0: int;

        $d0 := @parameter1: double;

        $d1 := @parameter2: double;

        $d2 := @parameter3: double;

        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex: void <init>(int,double)>($i0, $d0);

        r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex: double khi> = $d1;

        r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex: double gamma> = $d2;

        return;
    }
    public void <init>(double[])
    {
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex r0;
        double[] $r1;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex;

        $r1 := @parameter0: double[];

        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex: void <init>(double[],double,double)>($r1, 2.0, 0.5);

        return;
    }
    public void <init>(double[], double, double)
    {
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex r0;
        double[] $r1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex;

        $r1 := @parameter0: double[];

        $d0 := @parameter1: double;

        $d1 := @parameter2: double;

        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex: void <init>(double[])>($r1);

        r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex: double khi> = $d0;

        r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex: double gamma> = $d1;

        return;
    }
    public void <init>(double[][])
    {
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex r0;
        double[][] $r1;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex;

        $r1 := @parameter0: double[][];

        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex: void <init>(double[][],double,double)>($r1, 2.0, 0.5);

        return;
    }
    public void <init>(double[][], double, double)
    {
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex r0;
        double[][] $r1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex;

        $r1 := @parameter0: double[][];

        $d0 := @parameter1: double;

        $d1 := @parameter2: double;

        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex: void <init>(double[][])>($r1);

        r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex: double khi> = $d0;

        r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex: double gamma> = $d1;

        return;
    }
    private org.apache.commons.math3.optim.PointValuePair evaluateNewSimplex(org.apache.commons.math3.analysis.MultivariateFunction, org.apache.commons.math3.optim.PointValuePair[], double, java.util.Comparator)
    {
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex r0;
        org.apache.commons.math3.analysis.MultivariateFunction $r1;
        org.apache.commons.math3.optim.PointValuePair[] $r2;
        double $d0, $d1, $d2, $d3;
        java.util.Comparator r3;
        double[] r4, $r6, $r7;
        org.apache.commons.math3.optim.PointValuePair $r5;
        int $i0, i1, $i2;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex;

        $r1 := @parameter0: org.apache.commons.math3.analysis.MultivariateFunction;

        $r2 := @parameter1: org.apache.commons.math3.optim.PointValuePair[];

        $d0 := @parameter2: double;

        r3 := @parameter3: java.util.Comparator;

        $r5 = $r2[0];

        $r6 = virtualinvoke $r5.<org.apache.commons.math3.optim.PointValuePair: double[] getPointRef()>();

        $r5 = $r2[0];

        virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex: void setPoint(int,org.apache.commons.math3.optim.PointValuePair)>(0, $r5);

        $i0 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex: int getDimension()>();

        i1 = 1;

     label1:
        $i2 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex: int getSize()>();

        if i1 >= $i2 goto label4;

        $r5 = $r2[i1];

        $r7 = virtualinvoke $r5.<org.apache.commons.math3.optim.PointValuePair: double[] getPointRef()>();

        r4 = newarray (double)[$i0];

        $i2 = 0;

     label2:
        if $i2 >= $i0 goto label3;

        $d2 = $r6[$i2];

        $d3 = $r6[$i2];

        $d1 = $r7[$i2];

        $d1 = $d3 - $d1;

        $d1 = $d1 * $d0;

        $d2 = $d2 + $d1;

        r4[$i2] = $d2;

        $i2 = $i2 + 1;

        goto label2;

     label3:
        $r5 = new org.apache.commons.math3.optim.PointValuePair;

        specialinvoke $r5.<org.apache.commons.math3.optim.PointValuePair: void <init>(double[],double,boolean)>(r4, #NaN, 0);

        virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex: void setPoint(int,org.apache.commons.math3.optim.PointValuePair)>(i1, $r5);

        i1 = i1 + 1;

        goto label1;

     label4:
        virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex: void evaluate(org.apache.commons.math3.analysis.MultivariateFunction,java.util.Comparator)>($r1, r3);

        $r5 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex: org.apache.commons.math3.optim.PointValuePair getPoint(int)>(0);

        return $r5;
    }
    public void iterate(org.apache.commons.math3.analysis.MultivariateFunction, java.util.Comparator)
    {
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex r0;
        org.apache.commons.math3.analysis.MultivariateFunction $r1;
        java.util.Comparator r2;
        org.apache.commons.math3.optim.PointValuePair r3, $r5;
        org.apache.commons.math3.optim.PointValuePair[] $r4, $r6;
        int $i0;
        double $d0;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex;

        $r1 := @parameter0: org.apache.commons.math3.analysis.MultivariateFunction;

        r2 := @parameter1: java.util.Comparator;

        $r4 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex: org.apache.commons.math3.optim.PointValuePair[] getPoints()>();

        r3 = $r4[0];

        $r5 = specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex: org.apache.commons.math3.optim.PointValuePair evaluateNewSimplex(org.apache.commons.math3.analysis.MultivariateFunction,org.apache.commons.math3.optim.PointValuePair[],double,java.util.Comparator)>($r1, $r4, 1.0, r2);

        $i0 = interfaceinvoke r2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r5, r3);

        if $i0 >= 0 goto label1;

        $r6 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex: org.apache.commons.math3.optim.PointValuePair[] getPoints()>();

        $d0 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex: double khi>;

        r3 = specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex: org.apache.commons.math3.optim.PointValuePair evaluateNewSimplex(org.apache.commons.math3.analysis.MultivariateFunction,org.apache.commons.math3.optim.PointValuePair[],double,java.util.Comparator)>($r1, $r4, $d0, r2);

        $i0 = interfaceinvoke r2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r5, r3);

        if $i0 > 0 goto label2;

        virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex: void setPoints(org.apache.commons.math3.optim.PointValuePair[])>($r6);

        return;

     label1:
        $d0 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex: double gamma>;

        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex: org.apache.commons.math3.optim.PointValuePair evaluateNewSimplex(org.apache.commons.math3.analysis.MultivariateFunction,org.apache.commons.math3.optim.PointValuePair[],double,java.util.Comparator)>($r1, $r4, $d0, r2);

     label2:
        return;
    }
