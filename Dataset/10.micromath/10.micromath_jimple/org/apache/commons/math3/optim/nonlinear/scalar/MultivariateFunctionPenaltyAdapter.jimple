org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter extends java.lang.Object implements org.apache.commons.math3.analysis.MultivariateFunction
private final org.apache.commons.math3.analysis.MultivariateFunction bounded
private final double[] lower
private final double offset
private final double[] scale
private final double[] upper
    public void <init>(org.apache.commons.math3.analysis.MultivariateFunction, double[], double[], double, double[])
    {
        org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter r0;
        org.apache.commons.math3.analysis.MultivariateFunction $r1;
        double[] $r2, $r3, $r4;
        double $d0, $d1, $d2;
        int $i0, $i1;
        org.apache.commons.math3.exception.DimensionMismatchException $r5;
        byte $b2;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r6;
        java.lang.Double $r7, $r8;
        java.lang.Object $r9;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter;

        $r1 := @parameter0: org.apache.commons.math3.analysis.MultivariateFunction;

        $r2 := @parameter1: double[];

        $r3 := @parameter2: double[];

        $d0 := @parameter3: double;

        $r4 := @parameter4: double[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>($r2);

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>($r3);

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>($r4);

        $i0 = lengthof $r2;

        $i1 = lengthof $r3;

        if $i0 == $i1 goto label1;

        $r5 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i0 = lengthof $r2;

        $i1 = lengthof $r3;

        specialinvoke $r5.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i0, $i1);

        throw $r5;

     label1:
        $i0 = lengthof $r2;

        $i1 = lengthof $r4;

        if $i0 == $i1 goto label2;

        $r5 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i0 = lengthof $r2;

        $i1 = lengthof $r4;

        specialinvoke $r5.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i0, $i1);

        throw $r5;

     label2:
        $i0 = 0;

     label3:
        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label5;

        $d1 = $r3[$i0];

        $d2 = $r2[$i0];

        $b2 = $d1 cmpl $d2;

        if $b2 >= 0 goto label4;

        $r6 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $d0 = $r3[$i0];

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $d0 = $r2[$i0];

        $r8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        specialinvoke $r6.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r7, $r8, 1);

        throw $r6;

     label4:
        $i0 = $i0 + 1;

        goto label3;

     label5:
        r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter: org.apache.commons.math3.analysis.MultivariateFunction bounded> = $r1;

        $r9 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (double[]) $r9;

        r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter: double[] lower> = $r2;

        $r9 = virtualinvoke $r3.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (double[]) $r9;

        r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter: double[] upper> = $r2;

        r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter: double offset> = $d0;

        $r9 = virtualinvoke $r4.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (double[]) $r9;

        r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter: double[] scale> = $r2;

        return;
    }
    public double value(double[])
    {
        org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter r0;
        double[] $r1, $r2;
        int i0, $i1;
        double $d0, $d1, $d2, $d3;
        byte $b2;
        org.apache.commons.math3.analysis.MultivariateFunction $r3;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter;

        $r1 := @parameter0: double[];

        i0 = 0;

     label1:
        $r2 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter: double[] scale>;

        $i1 = lengthof $r2;

        if i0 >= $i1 goto label9;

        $d0 = $r1[i0];

        $r2 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter: double[] lower>;

        $d1 = $r2[i0];

        $b2 = $d0 cmpg $d1;

        if $b2 < 0 goto label2;

        $d0 = $r1[i0];

        $r2 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter: double[] upper>;

        $d1 = $r2[i0];

        $b2 = $d0 cmpl $d1;

        if $b2 <= 0 goto label8;

     label2:
        $d0 = 0.0;

     label3:
        $r2 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter: double[] scale>;

        $i1 = lengthof $r2;

        if i0 >= $i1 goto label7;

        $d1 = $r1[i0];

        $r2 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter: double[] lower>;

        $d2 = $r2[i0];

        $b2 = $d1 cmpg $d2;

        if $b2 >= 0 goto label5;

        $r2 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter: double[] scale>;

        $d1 = $r2[i0];

        $r2 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter: double[] lower>;

        $d2 = $r2[i0];

        $d3 = $r1[i0];

        $d2 = $d2 - $d3;

        $d1 = $d1 * $d2;

     label4:
        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d1);

        $d0 = $d0 + $d1;

        i0 = i0 + 1;

        goto label3;

     label5:
        $d1 = $r1[i0];

        $r2 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter: double[] upper>;

        $d2 = $r2[i0];

        $b2 = $d1 cmpl $d2;

        if $b2 <= 0 goto label6;

        $r2 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter: double[] scale>;

        $d1 = $r2[i0];

        $d2 = $r1[i0];

        $r2 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter: double[] upper>;

        $d3 = $r2[i0];

        $d2 = $d2 - $d3;

        $d1 = $d1 * $d2;

        goto label4;

     label6:
        $d1 = 0.0;

        goto label4;

     label7:
        $d1 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter: double offset>;

        $d0 = $d1 + $d0;

        return $d0;

     label8:
        i0 = i0 + 1;

        goto label1;

     label9:
        $r3 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter: org.apache.commons.math3.analysis.MultivariateFunction bounded>;

        $d0 = interfaceinvoke $r3.<org.apache.commons.math3.analysis.MultivariateFunction: double value(double[])>($r1);

        return $d0;
    }
