org.apache.commons.math3.optim.BaseMultivariateOptimizer extends org.apache.commons.math3.optim.BaseOptimizer
private double[] lowerBound
private double[] start
private double[] upperBound
    protected void <init>(org.apache.commons.math3.optim.ConvergenceChecker)
    {
        org.apache.commons.math3.optim.BaseMultivariateOptimizer r0;
        org.apache.commons.math3.optim.ConvergenceChecker r1;

        r0 := @this: org.apache.commons.math3.optim.BaseMultivariateOptimizer;

        r1 := @parameter0: org.apache.commons.math3.optim.ConvergenceChecker;

        specialinvoke r0.<org.apache.commons.math3.optim.BaseOptimizer: void <init>(org.apache.commons.math3.optim.ConvergenceChecker)>(r1);

        return;
    }
    private void checkParameters()
    {
        org.apache.commons.math3.optim.BaseMultivariateOptimizer r0;
        int i0, $i1;
        double d0, d1;
        double[] $r1;
        org.apache.commons.math3.exception.DimensionMismatchException $r2;
        byte $b2;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r3;
        java.lang.Double $r4, $r5;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r6;

        r0 := @this: org.apache.commons.math3.optim.BaseMultivariateOptimizer;

        $r1 = r0.<org.apache.commons.math3.optim.BaseMultivariateOptimizer: double[] start>;

        if $r1 == null goto label8;

        $r1 = r0.<org.apache.commons.math3.optim.BaseMultivariateOptimizer: double[] start>;

        i0 = lengthof $r1;

        $r1 = r0.<org.apache.commons.math3.optim.BaseMultivariateOptimizer: double[] lowerBound>;

        if $r1 == null goto label4;

        $r1 = r0.<org.apache.commons.math3.optim.BaseMultivariateOptimizer: double[] lowerBound>;

        $i1 = lengthof $r1;

        if $i1 == i0 goto label1;

        $r2 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $r1 = r0.<org.apache.commons.math3.optim.BaseMultivariateOptimizer: double[] lowerBound>;

        $i1 = lengthof $r1;

        specialinvoke $r2.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i1, i0);

        throw $r2;

     label1:
        $i1 = 0;

     label2:
        if $i1 >= i0 goto label4;

        $r1 = r0.<org.apache.commons.math3.optim.BaseMultivariateOptimizer: double[] start>;

        d1 = $r1[$i1];

        $r1 = r0.<org.apache.commons.math3.optim.BaseMultivariateOptimizer: double[] lowerBound>;

        d0 = $r1[$i1];

        $b2 = d1 cmpg d0;

        if $b2 >= 0 goto label3;

        $r3 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        specialinvoke $r3.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r4, $r5, 1);

        throw $r3;

     label3:
        $i1 = $i1 + 1;

        goto label2;

     label4:
        $r1 = r0.<org.apache.commons.math3.optim.BaseMultivariateOptimizer: double[] upperBound>;

        if $r1 == null goto label8;

        $r1 = r0.<org.apache.commons.math3.optim.BaseMultivariateOptimizer: double[] upperBound>;

        $i1 = lengthof $r1;

        if $i1 == i0 goto label5;

        $r2 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $r1 = r0.<org.apache.commons.math3.optim.BaseMultivariateOptimizer: double[] upperBound>;

        $i1 = lengthof $r1;

        specialinvoke $r2.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i1, i0);

        throw $r2;

     label5:
        $i1 = 0;

     label6:
        if $i1 >= i0 goto label8;

        $r1 = r0.<org.apache.commons.math3.optim.BaseMultivariateOptimizer: double[] start>;

        d1 = $r1[$i1];

        $r1 = r0.<org.apache.commons.math3.optim.BaseMultivariateOptimizer: double[] upperBound>;

        d0 = $r1[$i1];

        $b2 = d1 cmpl d0;

        if $b2 <= 0 goto label7;

        $r6 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        specialinvoke $r6.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r4, $r5, 1);

        throw $r6;

     label7:
        $i1 = $i1 + 1;

        goto label6;

     label8:
        return;
    }
    public double[] getLowerBound()
    {
        org.apache.commons.math3.optim.BaseMultivariateOptimizer r0;
        java.lang.Object $r1;
        double[] $r2;

        r0 := @this: org.apache.commons.math3.optim.BaseMultivariateOptimizer;

        $r2 = r0.<org.apache.commons.math3.optim.BaseMultivariateOptimizer: double[] lowerBound>;

        if $r2 != null goto label1;

        return null;

     label1:
        $r2 = r0.<org.apache.commons.math3.optim.BaseMultivariateOptimizer: double[] lowerBound>;

        $r1 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (double[]) $r1;

        return $r2;
    }
    public double[] getStartPoint()
    {
        org.apache.commons.math3.optim.BaseMultivariateOptimizer r0;
        java.lang.Object $r1;
        double[] $r2;

        r0 := @this: org.apache.commons.math3.optim.BaseMultivariateOptimizer;

        $r2 = r0.<org.apache.commons.math3.optim.BaseMultivariateOptimizer: double[] start>;

        if $r2 != null goto label1;

        return null;

     label1:
        $r2 = r0.<org.apache.commons.math3.optim.BaseMultivariateOptimizer: double[] start>;

        $r1 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (double[]) $r1;

        return $r2;
    }
    public double[] getUpperBound()
    {
        org.apache.commons.math3.optim.BaseMultivariateOptimizer r0;
        java.lang.Object $r1;
        double[] $r2;

        r0 := @this: org.apache.commons.math3.optim.BaseMultivariateOptimizer;

        $r2 = r0.<org.apache.commons.math3.optim.BaseMultivariateOptimizer: double[] upperBound>;

        if $r2 != null goto label1;

        return null;

     label1:
        $r2 = r0.<org.apache.commons.math3.optim.BaseMultivariateOptimizer: double[] upperBound>;

        $r1 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (double[]) $r1;

        return $r2;
    }
    public transient java.lang.Object optimize(org.apache.commons.math3.optim.OptimizationData[])
    {
        org.apache.commons.math3.optim.BaseMultivariateOptimizer r0;
        org.apache.commons.math3.optim.OptimizationData[] $r1;
        java.lang.Object $r2;

        r0 := @this: org.apache.commons.math3.optim.BaseMultivariateOptimizer;

        $r1 := @parameter0: org.apache.commons.math3.optim.OptimizationData[];

        $r2 = specialinvoke r0.<org.apache.commons.math3.optim.BaseOptimizer: java.lang.Object optimize(org.apache.commons.math3.optim.OptimizationData[])>($r1);

        return $r2;
    }
    protected transient void parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[])
    {
        org.apache.commons.math3.optim.BaseMultivariateOptimizer r0;
        org.apache.commons.math3.optim.OptimizationData[] $r1;
        int i0, i1;
        org.apache.commons.math3.optim.OptimizationData r2;
        boolean $z0;
        org.apache.commons.math3.optim.InitialGuess r3;
        double[] $r4;
        org.apache.commons.math3.optim.SimpleBounds r5;

        r0 := @this: org.apache.commons.math3.optim.BaseMultivariateOptimizer;

        $r1 := @parameter0: org.apache.commons.math3.optim.OptimizationData[];

        specialinvoke r0.<org.apache.commons.math3.optim.BaseOptimizer: void parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[])>($r1);

        i0 = lengthof $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        r2 = $r1[i1];

        $z0 = r2 instanceof org.apache.commons.math3.optim.InitialGuess;

        if $z0 == 0 goto label3;

        r3 = (org.apache.commons.math3.optim.InitialGuess) r2;

        $r4 = virtualinvoke r3.<org.apache.commons.math3.optim.InitialGuess: double[] getInitialGuess()>();

        r0.<org.apache.commons.math3.optim.BaseMultivariateOptimizer: double[] start> = $r4;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $z0 = r2 instanceof org.apache.commons.math3.optim.SimpleBounds;

        if $z0 == 0 goto label2;

        r5 = (org.apache.commons.math3.optim.SimpleBounds) r2;

        $r4 = virtualinvoke r5.<org.apache.commons.math3.optim.SimpleBounds: double[] getLower()>();

        r0.<org.apache.commons.math3.optim.BaseMultivariateOptimizer: double[] lowerBound> = $r4;

        $r4 = virtualinvoke r5.<org.apache.commons.math3.optim.SimpleBounds: double[] getUpper()>();

        r0.<org.apache.commons.math3.optim.BaseMultivariateOptimizer: double[] upperBound> = $r4;

        goto label2;

     label4:
        specialinvoke r0.<org.apache.commons.math3.optim.BaseMultivariateOptimizer: void checkParameters()>();

        return;
    }
