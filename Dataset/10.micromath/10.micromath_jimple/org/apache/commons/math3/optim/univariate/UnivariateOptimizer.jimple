org.apache.commons.math3.optim.univariate.UnivariateOptimizer extends org.apache.commons.math3.optim.BaseOptimizer
private org.apache.commons.math3.analysis.UnivariateFunction function
private org.apache.commons.math3.optim.nonlinear.scalar.GoalType goal
private double max
private double min
private double start
    protected void <init>(org.apache.commons.math3.optim.ConvergenceChecker)
    {
        org.apache.commons.math3.optim.univariate.UnivariateOptimizer r0;
        org.apache.commons.math3.optim.ConvergenceChecker r1;

        r0 := @this: org.apache.commons.math3.optim.univariate.UnivariateOptimizer;

        r1 := @parameter0: org.apache.commons.math3.optim.ConvergenceChecker;

        specialinvoke r0.<org.apache.commons.math3.optim.BaseOptimizer: void <init>(org.apache.commons.math3.optim.ConvergenceChecker)>(r1);

        return;
    }
    protected double computeObjectiveValue(double)
    {
        org.apache.commons.math3.optim.univariate.UnivariateOptimizer r0;
        double $d0;
        org.apache.commons.math3.analysis.UnivariateFunction $r1;

        r0 := @this: org.apache.commons.math3.optim.univariate.UnivariateOptimizer;

        $d0 := @parameter0: double;

        specialinvoke r0.<org.apache.commons.math3.optim.BaseOptimizer: void incrementEvaluationCount()>();

        $r1 = r0.<org.apache.commons.math3.optim.univariate.UnivariateOptimizer: org.apache.commons.math3.analysis.UnivariateFunction function>;

        $d0 = interfaceinvoke $r1.<org.apache.commons.math3.analysis.UnivariateFunction: double value(double)>($d0);

        return $d0;
    }
    public org.apache.commons.math3.optim.nonlinear.scalar.GoalType getGoalType()
    {
        org.apache.commons.math3.optim.univariate.UnivariateOptimizer r0;
        org.apache.commons.math3.optim.nonlinear.scalar.GoalType r1;

        r0 := @this: org.apache.commons.math3.optim.univariate.UnivariateOptimizer;

        r1 = r0.<org.apache.commons.math3.optim.univariate.UnivariateOptimizer: org.apache.commons.math3.optim.nonlinear.scalar.GoalType goal>;

        return r1;
    }
    public double getMax()
    {
        org.apache.commons.math3.optim.univariate.UnivariateOptimizer r0;
        double d0;

        r0 := @this: org.apache.commons.math3.optim.univariate.UnivariateOptimizer;

        d0 = r0.<org.apache.commons.math3.optim.univariate.UnivariateOptimizer: double max>;

        return d0;
    }
    public double getMin()
    {
        org.apache.commons.math3.optim.univariate.UnivariateOptimizer r0;
        double d0;

        r0 := @this: org.apache.commons.math3.optim.univariate.UnivariateOptimizer;

        d0 = r0.<org.apache.commons.math3.optim.univariate.UnivariateOptimizer: double min>;

        return d0;
    }
    public double getStartValue()
    {
        org.apache.commons.math3.optim.univariate.UnivariateOptimizer r0;
        double d0;

        r0 := @this: org.apache.commons.math3.optim.univariate.UnivariateOptimizer;

        d0 = r0.<org.apache.commons.math3.optim.univariate.UnivariateOptimizer: double start>;

        return d0;
    }
    public volatile java.lang.Object optimize(org.apache.commons.math3.optim.OptimizationData[]) throws org.apache.commons.math3.exception.TooManyEvaluationsException, org.apache.commons.math3.exception.TooManyIterationsException
    {
        org.apache.commons.math3.optim.univariate.UnivariateOptimizer r0;
        org.apache.commons.math3.optim.OptimizationData[] $r1;
        org.apache.commons.math3.optim.univariate.UnivariatePointValuePair $r2;

        r0 := @this: org.apache.commons.math3.optim.univariate.UnivariateOptimizer;

        $r1 := @parameter0: org.apache.commons.math3.optim.OptimizationData[];

        $r2 = virtualinvoke r0.<org.apache.commons.math3.optim.univariate.UnivariateOptimizer: org.apache.commons.math3.optim.univariate.UnivariatePointValuePair optimize(org.apache.commons.math3.optim.OptimizationData[])>($r1);

        return $r2;
    }
    public transient org.apache.commons.math3.optim.univariate.UnivariatePointValuePair optimize(org.apache.commons.math3.optim.OptimizationData[]) throws org.apache.commons.math3.exception.TooManyEvaluationsException
    {
        org.apache.commons.math3.optim.univariate.UnivariateOptimizer r0;
        org.apache.commons.math3.optim.OptimizationData[] $r1;
        java.lang.Object $r2;
        org.apache.commons.math3.optim.univariate.UnivariatePointValuePair $r3;

        r0 := @this: org.apache.commons.math3.optim.univariate.UnivariateOptimizer;

        $r1 := @parameter0: org.apache.commons.math3.optim.OptimizationData[];

        $r2 = specialinvoke r0.<org.apache.commons.math3.optim.BaseOptimizer: java.lang.Object optimize(org.apache.commons.math3.optim.OptimizationData[])>($r1);

        $r3 = (org.apache.commons.math3.optim.univariate.UnivariatePointValuePair) $r2;

        return $r3;
    }
    protected transient void parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[])
    {
        org.apache.commons.math3.optim.univariate.UnivariateOptimizer r0;
        org.apache.commons.math3.optim.OptimizationData[] $r1;
        int i0, i1;
        org.apache.commons.math3.optim.OptimizationData r2;
        boolean $z0;
        org.apache.commons.math3.optim.univariate.SearchInterval r3;
        double $d0;
        org.apache.commons.math3.optim.univariate.UnivariateObjectiveFunction r4;
        org.apache.commons.math3.analysis.UnivariateFunction $r5;
        org.apache.commons.math3.optim.nonlinear.scalar.GoalType r6;

        r0 := @this: org.apache.commons.math3.optim.univariate.UnivariateOptimizer;

        $r1 := @parameter0: org.apache.commons.math3.optim.OptimizationData[];

        specialinvoke r0.<org.apache.commons.math3.optim.BaseOptimizer: void parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[])>($r1);

        i0 = lengthof $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label5;

        r2 = $r1[i1];

        $z0 = r2 instanceof org.apache.commons.math3.optim.univariate.SearchInterval;

        if $z0 == 0 goto label3;

        r3 = (org.apache.commons.math3.optim.univariate.SearchInterval) r2;

        $d0 = virtualinvoke r3.<org.apache.commons.math3.optim.univariate.SearchInterval: double getMin()>();

        r0.<org.apache.commons.math3.optim.univariate.UnivariateOptimizer: double min> = $d0;

        $d0 = virtualinvoke r3.<org.apache.commons.math3.optim.univariate.SearchInterval: double getMax()>();

        r0.<org.apache.commons.math3.optim.univariate.UnivariateOptimizer: double max> = $d0;

        $d0 = virtualinvoke r3.<org.apache.commons.math3.optim.univariate.SearchInterval: double getStartValue()>();

        r0.<org.apache.commons.math3.optim.univariate.UnivariateOptimizer: double start> = $d0;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $z0 = r2 instanceof org.apache.commons.math3.optim.univariate.UnivariateObjectiveFunction;

        if $z0 == 0 goto label4;

        r4 = (org.apache.commons.math3.optim.univariate.UnivariateObjectiveFunction) r2;

        $r5 = virtualinvoke r4.<org.apache.commons.math3.optim.univariate.UnivariateObjectiveFunction: org.apache.commons.math3.analysis.UnivariateFunction getObjectiveFunction()>();

        r0.<org.apache.commons.math3.optim.univariate.UnivariateOptimizer: org.apache.commons.math3.analysis.UnivariateFunction function> = $r5;

        goto label2;

     label4:
        $z0 = r2 instanceof org.apache.commons.math3.optim.nonlinear.scalar.GoalType;

        if $z0 == 0 goto label2;

        r6 = (org.apache.commons.math3.optim.nonlinear.scalar.GoalType) r2;

        r0.<org.apache.commons.math3.optim.univariate.UnivariateOptimizer: org.apache.commons.math3.optim.nonlinear.scalar.GoalType goal> = r6;

        goto label2;

     label5:
        return;
    }
