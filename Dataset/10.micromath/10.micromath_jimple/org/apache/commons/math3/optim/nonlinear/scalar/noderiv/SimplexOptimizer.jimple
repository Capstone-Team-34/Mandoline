org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer extends org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer
private org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex simplex
    public void <init>(double, double)
    {
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer r0;
        double $d0, $d1;
        org.apache.commons.math3.optim.SimpleValueChecker $r1;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $r1 = new org.apache.commons.math3.optim.SimpleValueChecker;

        specialinvoke $r1.<org.apache.commons.math3.optim.SimpleValueChecker: void <init>(double,double)>($d0, $d1);

        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer: void <init>(org.apache.commons.math3.optim.ConvergenceChecker)>($r1);

        return;
    }
    public void <init>(org.apache.commons.math3.optim.ConvergenceChecker)
    {
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer r0;
        org.apache.commons.math3.optim.ConvergenceChecker r1;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer;

        r1 := @parameter0: org.apache.commons.math3.optim.ConvergenceChecker;

        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer: void <init>(org.apache.commons.math3.optim.ConvergenceChecker)>(r1);

        return;
    }
    private void checkParameters()
    {
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer r0;
        org.apache.commons.math3.exception.util.LocalizedFormats $r1;
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex $r2;
        org.apache.commons.math3.exception.NullArgumentException $r3;
        double[] $r4;
        org.apache.commons.math3.exception.MathUnsupportedOperationException $r5;
        java.lang.Object[] $r6;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer;

        $r2 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex simplex>;

        if $r2 != null goto label1;

        $r3 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r3.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r3;

     label1:
        $r4 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer: double[] getLowerBound()>();

        if $r4 != null goto label2;

        $r4 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer: double[] getUpperBound()>();

        if $r4 == null goto label3;

     label2:
        $r5 = new org.apache.commons.math3.exception.MathUnsupportedOperationException;

        $r1 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats CONSTRAINT>;

        $r6 = newarray (java.lang.Object)[0];

        specialinvoke $r5.<org.apache.commons.math3.exception.MathUnsupportedOperationException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r1, $r6);

        throw $r5;

     label3:
        return;
    }
    protected volatile java.lang.Object doOptimize()
    {
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer r0;
        org.apache.commons.math3.optim.PointValuePair $r1;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer: org.apache.commons.math3.optim.PointValuePair doOptimize()>();

        return $r1;
    }
    protected org.apache.commons.math3.optim.PointValuePair doOptimize()
    {
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer r0;
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer$2 r1;
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer$1 r2;
        org.apache.commons.math3.optim.PointValuePair r3, $r10;
        org.apache.commons.math3.optim.nonlinear.scalar.GoalType $r4, $r5;
        boolean z0;
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex $r6;
        double[] $r7;
        org.apache.commons.math3.optim.PointValuePair[] r8;
        org.apache.commons.math3.optim.ConvergenceChecker $r9;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer;

        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer: void checkParameters()>();

        r2 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer$1;

        specialinvoke r2.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer$1: void <init>(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer)>(r0);

        $r4 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer: org.apache.commons.math3.optim.nonlinear.scalar.GoalType getGoalType()>();

        $r5 = <org.apache.commons.math3.optim.nonlinear.scalar.GoalType: org.apache.commons.math3.optim.nonlinear.scalar.GoalType MINIMIZE>;

        if $r4 != $r5 goto label5;

        z0 = 1;

     label1:
        r1 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer$2;

        specialinvoke r1.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer$2: void <init>(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer,boolean)>(r0, z0);

        $r6 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex simplex>;

        $r7 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer: double[] getStartPoint()>();

        virtualinvoke $r6.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex: void build(double[])>($r7);

        $r6 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex simplex>;

        virtualinvoke $r6.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex: void evaluate(org.apache.commons.math3.analysis.MultivariateFunction,java.util.Comparator)>(r2, r1);

        r8 = null;

        $r9 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer: org.apache.commons.math3.optim.ConvergenceChecker getConvergenceChecker()>();

     label2:
        $i0 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer: int getIterations()>();

        if $i0 <= 0 goto label8;

        z0 = 1;

        $i0 = 0;

     label3:
        $r6 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex simplex>;

        $i1 = virtualinvoke $r6.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex: int getSize()>();

        if $i0 >= $i1 goto label7;

        r3 = r8[$i0];

        if z0 == 0 goto label6;

        $r6 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex simplex>;

        $r10 = virtualinvoke $r6.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex: org.apache.commons.math3.optim.PointValuePair getPoint(int)>($i0);

        z0 = interfaceinvoke $r9.<org.apache.commons.math3.optim.ConvergenceChecker: boolean converged(int,java.lang.Object,java.lang.Object)>(0, r3, $r10);

        if z0 == 0 goto label6;

        z0 = 1;

     label4:
        $i0 = $i0 + 1;

        goto label3;

     label5:
        z0 = 0;

        goto label1;

     label6:
        z0 = 0;

        goto label4;

     label7:
        if z0 == 0 goto label8;

        $r6 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex simplex>;

        r3 = virtualinvoke $r6.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex: org.apache.commons.math3.optim.PointValuePair getPoint(int)>(0);

        return r3;

     label8:
        $r6 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex simplex>;

        r8 = virtualinvoke $r6.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex: org.apache.commons.math3.optim.PointValuePair[] getPoints()>();

        $r6 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex simplex>;

        virtualinvoke $r6.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex: void iterate(org.apache.commons.math3.analysis.MultivariateFunction,java.util.Comparator)>(r2, r1);

        virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer: void incrementIterationCount()>();

        goto label2;
    }
    public volatile java.lang.Object optimize(org.apache.commons.math3.optim.OptimizationData[])
    {
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer r0;
        org.apache.commons.math3.optim.OptimizationData[] $r1;
        org.apache.commons.math3.optim.PointValuePair $r2;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer;

        $r1 := @parameter0: org.apache.commons.math3.optim.OptimizationData[];

        $r2 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer: org.apache.commons.math3.optim.PointValuePair optimize(org.apache.commons.math3.optim.OptimizationData[])>($r1);

        return $r2;
    }
    public transient org.apache.commons.math3.optim.PointValuePair optimize(org.apache.commons.math3.optim.OptimizationData[])
    {
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer r0;
        org.apache.commons.math3.optim.OptimizationData[] $r1;
        org.apache.commons.math3.optim.PointValuePair $r2;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer;

        $r1 := @parameter0: org.apache.commons.math3.optim.OptimizationData[];

        $r2 = specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer: org.apache.commons.math3.optim.PointValuePair optimize(org.apache.commons.math3.optim.OptimizationData[])>($r1);

        return $r2;
    }
    protected transient void parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[])
    {
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer r0;
        org.apache.commons.math3.optim.OptimizationData[] $r1;
        int i0, i1;
        boolean $z0;
        org.apache.commons.math3.optim.OptimizationData r2;
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex r3;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer;

        $r1 := @parameter0: org.apache.commons.math3.optim.OptimizationData[];

        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer: void parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[])>($r1);

        i0 = lengthof $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r2 = $r1[i1];

        $z0 = r2 instanceof org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex;

        if $z0 == 0 goto label2;

        r3 = (org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex) r2;

        r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex simplex> = r3;

        return;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }
