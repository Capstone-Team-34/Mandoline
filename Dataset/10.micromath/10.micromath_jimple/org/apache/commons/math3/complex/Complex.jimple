org.apache.commons.math3.complex.Complex extends java.lang.Object implements org.apache.commons.math3.FieldElement java.io.Serializable
public static final org.apache.commons.math3.complex.Complex I
public static final org.apache.commons.math3.complex.Complex INF
public static final org.apache.commons.math3.complex.Complex NaN
public static final org.apache.commons.math3.complex.Complex ONE
public static final org.apache.commons.math3.complex.Complex ZERO
private static final long serialVersionUID
private final double imaginary
private final transient boolean isInfinite
private final transient boolean isNaN
private final double real
    static void <clinit>()
    {
        org.apache.commons.math3.complex.Complex $r0;

        $r0 = new org.apache.commons.math3.complex.Complex;

        specialinvoke $r0.<org.apache.commons.math3.complex.Complex: void <init>(double,double)>(0.0, 1.0);

        <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex I> = $r0;

        $r0 = new org.apache.commons.math3.complex.Complex;

        specialinvoke $r0.<org.apache.commons.math3.complex.Complex: void <init>(double,double)>(#NaN, #NaN);

        <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex NaN> = $r0;

        $r0 = new org.apache.commons.math3.complex.Complex;

        specialinvoke $r0.<org.apache.commons.math3.complex.Complex: void <init>(double,double)>(#Infinity, #Infinity);

        <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex INF> = $r0;

        $r0 = new org.apache.commons.math3.complex.Complex;

        specialinvoke $r0.<org.apache.commons.math3.complex.Complex: void <init>(double,double)>(1.0, 0.0);

        <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex ONE> = $r0;

        $r0 = new org.apache.commons.math3.complex.Complex;

        specialinvoke $r0.<org.apache.commons.math3.complex.Complex: void <init>(double,double)>(0.0, 0.0);

        <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex ZERO> = $r0;

        return;
    }
    public void <init>(double)
    {
        org.apache.commons.math3.complex.Complex r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $d0 := @parameter0: double;

        specialinvoke r0.<org.apache.commons.math3.complex.Complex: void <init>(double,double)>($d0, 0.0);

        return;
    }
    public void <init>(double, double)
    {
        org.apache.commons.math3.complex.Complex r0;
        double $d0, $d1;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $z0 = 1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.complex.Complex: double real> = $d0;

        r0.<org.apache.commons.math3.complex.Complex: double imaginary> = $d1;

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z1 != 0 goto label1;

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d1);

        if $z1 == 0 goto label4;

     label1:
        $z1 = 1;

     label2:
        r0.<org.apache.commons.math3.complex.Complex: boolean isNaN> = $z1;

        $z1 = r0.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        if $z1 != 0 goto label5;

        $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d0);

        if $z1 != 0 goto label3;

        $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d1);

        if $z1 == 0 goto label5;

     label3:
        r0.<org.apache.commons.math3.complex.Complex: boolean isInfinite> = $z0;

        return;

     label4:
        $z1 = 0;

        goto label2;

     label5:
        $z0 = 0;

        goto label3;
    }
    public static boolean equals(org.apache.commons.math3.complex.Complex, org.apache.commons.math3.complex.Complex)
    {
        org.apache.commons.math3.complex.Complex $r0, $r1;
        boolean $z0;

        $r0 := @parameter0: org.apache.commons.math3.complex.Complex;

        $r1 := @parameter1: org.apache.commons.math3.complex.Complex;

        $z0 = staticinvoke <org.apache.commons.math3.complex.Complex: boolean equals(org.apache.commons.math3.complex.Complex,org.apache.commons.math3.complex.Complex,int)>($r0, $r1, 1);

        return $z0;
    }
    public static boolean equals(org.apache.commons.math3.complex.Complex, org.apache.commons.math3.complex.Complex, double)
    {
        org.apache.commons.math3.complex.Complex $r0, $r1;
        double $d0, $d1, $d2;
        boolean $z0;

        $r0 := @parameter0: org.apache.commons.math3.complex.Complex;

        $r1 := @parameter1: org.apache.commons.math3.complex.Complex;

        $d0 := @parameter2: double;

        $d1 = $r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d2 = $r1.<org.apache.commons.math3.complex.Complex: double real>;

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,double)>($d1, $d2, $d0);

        if $z0 == 0 goto label1;

        $d1 = $r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d2 = $r1.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,double)>($d1, $d2, $d0);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public static boolean equals(org.apache.commons.math3.complex.Complex, org.apache.commons.math3.complex.Complex, int)
    {
        org.apache.commons.math3.complex.Complex $r0, $r1;
        int $i0;
        double $d0, $d1;
        boolean $z0;

        $r0 := @parameter0: org.apache.commons.math3.complex.Complex;

        $r1 := @parameter1: org.apache.commons.math3.complex.Complex;

        $i0 := @parameter2: int;

        $d0 = $r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d1 = $r1.<org.apache.commons.math3.complex.Complex: double real>;

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,int)>($d0, $d1, $i0);

        if $z0 == 0 goto label1;

        $d0 = $r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d1 = $r1.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,int)>($d0, $d1, $i0);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public static boolean equalsWithRelativeTolerance(org.apache.commons.math3.complex.Complex, org.apache.commons.math3.complex.Complex, double)
    {
        org.apache.commons.math3.complex.Complex $r0, $r1;
        double $d0, $d1, $d2;
        boolean $z0;

        $r0 := @parameter0: org.apache.commons.math3.complex.Complex;

        $r1 := @parameter1: org.apache.commons.math3.complex.Complex;

        $d0 := @parameter2: double;

        $d1 = $r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d2 = $r1.<org.apache.commons.math3.complex.Complex: double real>;

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equalsWithRelativeTolerance(double,double,double)>($d1, $d2, $d0);

        if $z0 == 0 goto label1;

        $d1 = $r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d2 = $r1.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equalsWithRelativeTolerance(double,double,double)>($d1, $d2, $d0);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public static org.apache.commons.math3.complex.Complex valueOf(double)
    {
        double $d0;
        boolean $z0;
        org.apache.commons.math3.complex.Complex $r0;

        $d0 := @parameter0: double;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 == 0 goto label1;

        $r0 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex NaN>;

        return $r0;

     label1:
        $r0 = new org.apache.commons.math3.complex.Complex;

        specialinvoke $r0.<org.apache.commons.math3.complex.Complex: void <init>(double)>($d0);

        return $r0;
    }
    public static org.apache.commons.math3.complex.Complex valueOf(double, double)
    {
        double $d0, $d1;
        boolean $z0;
        org.apache.commons.math3.complex.Complex $r0;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 != 0 goto label1;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d1);

        if $z0 == 0 goto label2;

     label1:
        $r0 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex NaN>;

        return $r0;

     label2:
        $r0 = new org.apache.commons.math3.complex.Complex;

        specialinvoke $r0.<org.apache.commons.math3.complex.Complex: void <init>(double,double)>($d0, $d1);

        return $r0;
    }
    public double abs()
    {
        org.apache.commons.math3.complex.Complex r0;
        boolean $z0;
        double $d0, $d1;
        byte $b0;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $z0 = r0.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        if $z0 == 0 goto label1;

        return #NaN;

     label1:
        $z0 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: boolean isInfinite()>();

        if $z0 == 0 goto label2;

        return #Infinity;

     label2:
        $d0 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        $d1 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d1);

        $b0 = $d0 cmpg $d1;

        if $b0 >= 0 goto label4;

        $d0 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $b0 = $d0 cmpl 0.0;

        if $b0 != 0 goto label3;

        $d0 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        return $d0;

     label3:
        $d0 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d1 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d1 = $d0 / $d1;

        $d0 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        $d1 = $d1 * $d1;

        $d1 = $d1 + 1.0;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d1);

        $d0 = $d0 * $d1;

        return $d0;

     label4:
        $d0 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $b0 = $d0 cmpl 0.0;

        if $b0 != 0 goto label5;

        $d0 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        return $d0;

     label5:
        $d0 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d1 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d1 = $d0 / $d1;

        $d0 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        $d1 = $d1 * $d1;

        $d1 = $d1 + 1.0;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d1);

        $d0 = $d0 * $d1;

        return $d0;
    }
    public org.apache.commons.math3.complex.Complex acos()
    {
        org.apache.commons.math3.complex.Complex r0, $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $z0 = r0.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        if $z0 == 0 goto label1;

        r0 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex NaN>;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex sqrt1z()>();

        $r2 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex I>;

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex multiply(org.apache.commons.math3.complex.Complex)>($r2);

        r0 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex add(org.apache.commons.math3.complex.Complex)>($r1);

        r0 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex log()>();

        $r1 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex I>;

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex negate()>();

        r0 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex multiply(org.apache.commons.math3.complex.Complex)>($r1);

        return r0;
    }
    public volatile java.lang.Object add(java.lang.Object) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.complex.Complex r0, $r2;
        java.lang.Object $r1;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math3.complex.Complex) $r1;

        r0 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex add(org.apache.commons.math3.complex.Complex)>($r2);

        return r0;
    }
    public org.apache.commons.math3.complex.Complex add(double)
    {
        org.apache.commons.math3.complex.Complex r0;
        double $d0, $d1;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $d0 := @parameter0: double;

        $z0 = r0.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        if $z0 != 0 goto label1;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 == 0 goto label2;

     label1:
        r0 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex NaN>;

        return r0;

     label2:
        $d1 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d1 = $d1 + $d0;

        $d0 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        r0 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex createComplex(double,double)>($d1, $d0);

        return r0;
    }
    public org.apache.commons.math3.complex.Complex add(org.apache.commons.math3.complex.Complex) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.complex.Complex r0, $r1;
        boolean $z0;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $r1 := @parameter0: org.apache.commons.math3.complex.Complex;

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>($r1);

        $z0 = r0.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        if $z0 != 0 goto label1;

        $z0 = $r1.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        if $z0 == 0 goto label2;

     label1:
        r0 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex NaN>;

        return r0;

     label2:
        $d0 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d1 = virtualinvoke $r1.<org.apache.commons.math3.complex.Complex: double getReal()>();

        $d0 = $d0 + $d1;

        $d1 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d2 = virtualinvoke $r1.<org.apache.commons.math3.complex.Complex: double getImaginary()>();

        $d1 = $d1 + $d2;

        r0 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex createComplex(double,double)>($d0, $d1);

        return r0;
    }
    public org.apache.commons.math3.complex.Complex asin()
    {
        org.apache.commons.math3.complex.Complex r0, $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $z0 = r0.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        if $z0 == 0 goto label1;

        r0 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex NaN>;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex sqrt1z()>();

        $r2 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex I>;

        r0 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex multiply(org.apache.commons.math3.complex.Complex)>($r2);

        r0 = virtualinvoke $r1.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex add(org.apache.commons.math3.complex.Complex)>(r0);

        r0 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex log()>();

        $r1 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex I>;

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex negate()>();

        r0 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex multiply(org.apache.commons.math3.complex.Complex)>($r1);

        return r0;
    }
    public org.apache.commons.math3.complex.Complex atan()
    {
        org.apache.commons.math3.complex.Complex r0, $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $z0 = r0.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        if $z0 == 0 goto label1;

        r0 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex NaN>;

        return r0;

     label1:
        $r1 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex I>;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex add(org.apache.commons.math3.complex.Complex)>($r1);

        $r2 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex I>;

        $r2 = virtualinvoke $r2.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex subtract(org.apache.commons.math3.complex.Complex)>(r0);

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex divide(org.apache.commons.math3.complex.Complex)>($r2);

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex log()>();

        $r2 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex I>;

        r0 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex createComplex(double,double)>(2.0, 0.0);

        r0 = virtualinvoke $r2.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex divide(org.apache.commons.math3.complex.Complex)>(r0);

        r0 = virtualinvoke $r1.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex multiply(org.apache.commons.math3.complex.Complex)>(r0);

        return r0;
    }
    public org.apache.commons.math3.complex.Complex conjugate()
    {
        org.apache.commons.math3.complex.Complex r0;
        boolean $z0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $z0 = r0.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        if $z0 == 0 goto label1;

        r0 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex NaN>;

        return r0;

     label1:
        $d0 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d1 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d1 = neg $d1;

        r0 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex createComplex(double,double)>($d0, $d1);

        return r0;
    }
    public org.apache.commons.math3.complex.Complex cos()
    {
        org.apache.commons.math3.complex.Complex r0;
        boolean $z0;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $z0 = r0.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        if $z0 == 0 goto label1;

        r0 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex NaN>;

        return r0;

     label1:
        $d0 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double cos(double)>($d0);

        $d1 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double cosh(double)>($d1);

        $d0 = $d0 * $d1;

        $d1 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sin(double)>($d1);

        $d1 = neg $d1;

        $d2 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double sinh(double)>($d2);

        $d1 = $d1 * $d2;

        r0 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex createComplex(double,double)>($d0, $d1);

        return r0;
    }
    public org.apache.commons.math3.complex.Complex cosh()
    {
        org.apache.commons.math3.complex.Complex r0;
        boolean $z0;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $z0 = r0.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        if $z0 == 0 goto label1;

        r0 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex NaN>;

        return r0;

     label1:
        $d0 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double cosh(double)>($d0);

        $d1 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double cos(double)>($d1);

        $d0 = $d0 * $d1;

        $d1 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sinh(double)>($d1);

        $d2 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double sin(double)>($d2);

        $d1 = $d1 * $d2;

        r0 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex createComplex(double,double)>($d0, $d1);

        return r0;
    }
    protected org.apache.commons.math3.complex.Complex createComplex(double, double)
    {
        org.apache.commons.math3.complex.Complex r0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        r0 = new org.apache.commons.math3.complex.Complex;

        specialinvoke r0.<org.apache.commons.math3.complex.Complex: void <init>(double,double)>($d0, $d1);

        return r0;
    }
    public volatile java.lang.Object divide(java.lang.Object) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.complex.Complex r0, $r2;
        java.lang.Object $r1;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math3.complex.Complex) $r1;

        r0 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex divide(org.apache.commons.math3.complex.Complex)>($r2);

        return r0;
    }
    public org.apache.commons.math3.complex.Complex divide(double)
    {
        org.apache.commons.math3.complex.Complex r0;
        double $d0, $d1, $d2;
        boolean $z0;
        byte $b0;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $d0 := @parameter0: double;

        $z0 = r0.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        if $z0 != 0 goto label1;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 == 0 goto label2;

     label1:
        r0 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex NaN>;

        return r0;

     label2:
        $b0 = $d0 cmpl 0.0;

        if $b0 != 0 goto label3;

        r0 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex NaN>;

        return r0;

     label3:
        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d0);

        if $z0 == 0 goto label5;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: boolean isInfinite()>();

        if $z0 != 0 goto label4;

        r0 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex ZERO>;

        return r0;

     label4:
        r0 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex NaN>;

        return r0;

     label5:
        $d1 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d1 = $d1 / $d0;

        $d2 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d0 = $d2 / $d0;

        r0 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex createComplex(double,double)>($d1, $d0);

        return r0;
    }
    public org.apache.commons.math3.complex.Complex divide(org.apache.commons.math3.complex.Complex) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.complex.Complex r0, $r1;
        boolean $z0;
        double $d0, $d1, $d2, $d3, $d4;
        byte $b0;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $r1 := @parameter0: org.apache.commons.math3.complex.Complex;

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>($r1);

        $z0 = r0.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        if $z0 != 0 goto label1;

        $z0 = $r1.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        if $z0 == 0 goto label2;

     label1:
        r0 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex NaN>;

        return r0;

     label2:
        $d0 = virtualinvoke $r1.<org.apache.commons.math3.complex.Complex: double getReal()>();

        $d1 = virtualinvoke $r1.<org.apache.commons.math3.complex.Complex: double getImaginary()>();

        $b0 = $d0 cmpl 0.0;

        if $b0 != 0 goto label3;

        $b0 = $d1 cmpl 0.0;

        if $b0 != 0 goto label3;

        r0 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex NaN>;

        return r0;

     label3:
        $z0 = virtualinvoke $r1.<org.apache.commons.math3.complex.Complex: boolean isInfinite()>();

        if $z0 == 0 goto label4;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: boolean isInfinite()>();

        if $z0 != 0 goto label4;

        r0 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex ZERO>;

        return r0;

     label4:
        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d1);

        $b0 = $d2 cmpg $d3;

        if $b0 >= 0 goto label5;

        $d2 = $d0 / $d1;

        $d0 = $d0 * $d2;

        $d0 = $d0 + $d1;

        $d1 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d1 = $d1 * $d2;

        $d3 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d1 = $d1 + $d3;

        $d1 = $d1 / $d0;

        $d3 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d2 = $d3 * $d2;

        $d3 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d2 = $d2 - $d3;

        $d2 = $d2 / $d0;

        r0 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex createComplex(double,double)>($d1, $d2);

        return r0;

     label5:
        $d2 = $d1 / $d0;

        $d1 = $d1 * $d2;

        $d0 = $d1 + $d0;

        $d1 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d1 = $d1 * $d2;

        $d3 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d1 = $d1 + $d3;

        $d1 = $d1 / $d0;

        $d3 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d4 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d2 = $d4 * $d2;

        $d2 = $d3 - $d2;

        $d2 = $d2 / $d0;

        r0 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex createComplex(double,double)>($d1, $d2);

        return r0;
    }
    public boolean equals(java.lang.Object)
    {
        org.apache.commons.math3.complex.Complex r0, r2;
        java.lang.Object $r1;
        boolean $z0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $r1 := @parameter0: java.lang.Object;

        if r0 != $r1 goto label1;

        return 1;

     label1:
        $z0 = $r1 instanceof org.apache.commons.math3.complex.Complex;

        if $z0 == 0 goto label3;

        r2 = (org.apache.commons.math3.complex.Complex) $r1;

        $z0 = r2.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        if $z0 == 0 goto label2;

        $z0 = r0.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        return $z0;

     label2:
        $d0 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d1 = r2.<org.apache.commons.math3.complex.Complex: double real>;

        $z0 = staticinvoke <org.apache.commons.math3.util.MathUtils: boolean equals(double,double)>($d0, $d1);

        if $z0 == 0 goto label3;

        $d0 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d1 = r2.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $z0 = staticinvoke <org.apache.commons.math3.util.MathUtils: boolean equals(double,double)>($d0, $d1);

        if $z0 != 0 goto label4;

     label3:
        return 0;

     label4:
        return 1;
    }
    public org.apache.commons.math3.complex.Complex exp()
    {
        org.apache.commons.math3.complex.Complex r0;
        boolean $z0;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $z0 = r0.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        if $z0 == 0 goto label1;

        r0 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex NaN>;

        return r0;

     label1:
        $d0 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d0);

        $d1 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double cos(double)>($d1);

        $d1 = $d1 * $d0;

        $d2 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double sin(double)>($d2);

        $d0 = $d2 * $d0;

        r0 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex createComplex(double,double)>($d1, $d0);

        return r0;
    }
    public double getArgument()
    {
        org.apache.commons.math3.complex.Complex r0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: double getImaginary()>();

        $d1 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: double getReal()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d0, $d1);

        return $d0;
    }
    public volatile org.apache.commons.math3.Field getField()
    {
        org.apache.commons.math3.complex.Complex r0;
        org.apache.commons.math3.complex.ComplexField $r1;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.ComplexField getField()>();

        return $r1;
    }
    public org.apache.commons.math3.complex.ComplexField getField()
    {
        org.apache.commons.math3.complex.Complex r0;
        org.apache.commons.math3.complex.ComplexField $r1;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $r1 = staticinvoke <org.apache.commons.math3.complex.ComplexField: org.apache.commons.math3.complex.ComplexField getInstance()>();

        return $r1;
    }
    public double getImaginary()
    {
        org.apache.commons.math3.complex.Complex r0;
        double d0;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        d0 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        return d0;
    }
    public double getReal()
    {
        org.apache.commons.math3.complex.Complex r0;
        double d0;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        d0 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        return d0;
    }
    public int hashCode()
    {
        org.apache.commons.math3.complex.Complex r0;
        double $d0;
        boolean $z0;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $z0 = r0.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        if $z0 == 0 goto label1;

        return 7;

     label1:
        $d0 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $i0 = staticinvoke <org.apache.commons.math3.util.MathUtils: int hash(double)>($d0);

        $i0 = $i0 * 17;

        $d0 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $i1 = staticinvoke <org.apache.commons.math3.util.MathUtils: int hash(double)>($d0);

        $i0 = $i0 + $i1;

        $i0 = $i0 * 37;

        return $i0;
    }
    public boolean isInfinite()
    {
        org.apache.commons.math3.complex.Complex r0;
        boolean z0;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        z0 = r0.<org.apache.commons.math3.complex.Complex: boolean isInfinite>;

        return z0;
    }
    public boolean isNaN()
    {
        org.apache.commons.math3.complex.Complex r0;
        boolean z0;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        z0 = r0.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        return z0;
    }
    public org.apache.commons.math3.complex.Complex log()
    {
        org.apache.commons.math3.complex.Complex r0;
        double $d0, $d1, $d2;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $z0 = r0.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        if $z0 == 0 goto label1;

        r0 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex NaN>;

        return r0;

     label1:
        $d1 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: double abs()>();

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d1);

        $d2 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d0 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d2, $d0);

        r0 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex createComplex(double,double)>($d1, $d0);

        return r0;
    }
    public volatile java.lang.Object multiply(int)
    {
        org.apache.commons.math3.complex.Complex r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $i0 := @parameter0: int;

        r0 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex multiply(int)>($i0);

        return r0;
    }
    public volatile java.lang.Object multiply(java.lang.Object) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.complex.Complex r0, $r2;
        java.lang.Object $r1;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math3.complex.Complex) $r1;

        r0 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex multiply(org.apache.commons.math3.complex.Complex)>($r2);

        return r0;
    }
    public org.apache.commons.math3.complex.Complex multiply(double)
    {
        org.apache.commons.math3.complex.Complex r0;
        double $d0, $d1, $d2;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $d0 := @parameter0: double;

        $z0 = r0.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        if $z0 != 0 goto label1;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 == 0 goto label2;

     label1:
        r0 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex NaN>;

        return r0;

     label2:
        $d1 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d1);

        if $z0 != 0 goto label3;

        $d1 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d1);

        if $z0 != 0 goto label3;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d0);

        if $z0 == 0 goto label4;

     label3:
        r0 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex INF>;

        return r0;

     label4:
        $d1 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d1 = $d1 * $d0;

        $d2 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d0 = $d2 * $d0;

        r0 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex createComplex(double,double)>($d1, $d0);

        return r0;
    }
    public org.apache.commons.math3.complex.Complex multiply(int)
    {
        org.apache.commons.math3.complex.Complex r0;
        int $i0;
        double $d0, $d1, $d2;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $i0 := @parameter0: int;

        $z0 = r0.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        if $z0 == 0 goto label1;

        r0 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex NaN>;

        return r0;

     label1:
        $d1 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d1);

        if $z0 != 0 goto label2;

        $d1 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d1);

        if $z0 == 0 goto label3;

     label2:
        r0 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex INF>;

        return r0;

     label3:
        $d1 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d0 = (double) $i0;

        $d1 = $d1 * $d0;

        $d2 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d0 = (double) $i0;

        $d0 = $d2 * $d0;

        r0 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex createComplex(double,double)>($d1, $d0);

        return r0;
    }
    public org.apache.commons.math3.complex.Complex multiply(org.apache.commons.math3.complex.Complex) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.complex.Complex r0, $r1;
        double $d0, $d1, $d2, $d3;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $r1 := @parameter0: org.apache.commons.math3.complex.Complex;

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>($r1);

        $z0 = r0.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        if $z0 != 0 goto label1;

        $z0 = $r1.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        if $z0 == 0 goto label2;

     label1:
        r0 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex NaN>;

        return r0;

     label2:
        $d1 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d1);

        if $z0 != 0 goto label3;

        $d1 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d1);

        if $z0 != 0 goto label3;

        $d1 = $r1.<org.apache.commons.math3.complex.Complex: double real>;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d1);

        if $z0 != 0 goto label3;

        $d1 = $r1.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d1);

        if $z0 == 0 goto label4;

     label3:
        r0 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex INF>;

        return r0;

     label4:
        $d1 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d2 = $r1.<org.apache.commons.math3.complex.Complex: double real>;

        $d1 = $d1 * $d2;

        $d2 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d0 = $r1.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d2 = $d2 * $d0;

        $d1 = $d1 - $d2;

        $d2 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d0 = $r1.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d2 = $d2 * $d0;

        $d3 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d0 = $r1.<org.apache.commons.math3.complex.Complex: double real>;

        $d0 = $d3 * $d0;

        $d2 = $d2 + $d0;

        r0 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex createComplex(double,double)>($d1, $d2);

        return r0;
    }
    public volatile java.lang.Object negate()
    {
        org.apache.commons.math3.complex.Complex r0;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        r0 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex negate()>();

        return r0;
    }
    public org.apache.commons.math3.complex.Complex negate()
    {
        org.apache.commons.math3.complex.Complex r0;
        boolean $z0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $z0 = r0.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        if $z0 == 0 goto label1;

        r0 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex NaN>;

        return r0;

     label1:
        $d0 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d0 = neg $d0;

        $d1 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d1 = neg $d1;

        r0 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex createComplex(double,double)>($d0, $d1);

        return r0;
    }
    public java.util.List nthRoot(int) throws org.apache.commons.math3.exception.NotPositiveException
    {
        org.apache.commons.math3.complex.Complex r0, $r5;
        int $i0, i1;
        double d0, d1, d2, d3, $d4;
        java.util.ArrayList r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        org.apache.commons.math3.exception.NotPositiveException $r3;
        java.lang.Integer $r4;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $i0 := @parameter0: int;

        if $i0 > 0 goto label1;

        $r3 = new org.apache.commons.math3.exception.NotPositiveException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r3.<org.apache.commons.math3.exception.NotPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r2, $r4);

        throw $r3;

     label1:
        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>()>();

        $z0 = r0.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        if $z0 == 0 goto label2;

        r0 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex NaN>;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r0);

        return r1;

     label2:
        $z0 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: boolean isInfinite()>();

        if $z0 == 0 goto label3;

        r0 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex INF>;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r0);

        return r1;

     label3:
        $d4 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: double abs()>();

        d3 = (double) $i0;

        d3 = 1.0 / d3;

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,double)>($d4, d3);

        d3 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: double getArgument()>();

        d1 = (double) $i0;

        d1 = d3 / d1;

        d3 = (double) $i0;

        d3 = 6.283185307179586 / d3;

        i1 = 0;

     label4:
        if i1 >= $i0 goto label5;

        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double cos(double)>(d1);

        d2 = $d4 * d2;

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sin(double)>(d1);

        d0 = $d4 * d0;

        $r5 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex createComplex(double,double)>(d2, d0);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r5);

        d1 = d1 + d3;

        i1 = i1 + 1;

        goto label4;

     label5:
        return r1;
    }
    public org.apache.commons.math3.complex.Complex pow(double)
    {
        org.apache.commons.math3.complex.Complex r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $d0 := @parameter0: double;

        r0 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex log()>();

        r0 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex multiply(double)>($d0);

        r0 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex exp()>();

        return r0;
    }
    public org.apache.commons.math3.complex.Complex pow(org.apache.commons.math3.complex.Complex) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.complex.Complex r0, $r1;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $r1 := @parameter0: org.apache.commons.math3.complex.Complex;

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>($r1);

        r0 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex log()>();

        r0 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex multiply(org.apache.commons.math3.complex.Complex)>($r1);

        r0 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex exp()>();

        return r0;
    }
    protected final java.lang.Object readResolve()
    {
        org.apache.commons.math3.complex.Complex r0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $d1 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d0 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        r0 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex createComplex(double,double)>($d1, $d0);

        return r0;
    }
    public volatile java.lang.Object reciprocal() throws org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.complex.Complex r0;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        r0 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex reciprocal()>();

        return r0;
    }
    public org.apache.commons.math3.complex.Complex reciprocal()
    {
        org.apache.commons.math3.complex.Complex r0;
        boolean $z0;
        double $d0, $d1, $d2;
        byte $b0;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $z0 = r0.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        if $z0 == 0 goto label1;

        r0 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex NaN>;

        return r0;

     label1:
        $d0 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $b0 = $d0 cmpl 0.0;

        if $b0 != 0 goto label2;

        $d0 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $b0 = $d0 cmpl 0.0;

        if $b0 != 0 goto label2;

        r0 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex INF>;

        return r0;

     label2:
        $z0 = r0.<org.apache.commons.math3.complex.Complex: boolean isInfinite>;

        if $z0 == 0 goto label3;

        r0 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex ZERO>;

        return r0;

     label3:
        $d0 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        $d1 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d1);

        $b0 = $d0 cmpg $d1;

        if $b0 >= 0 goto label4;

        $d0 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d1 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d0 = $d0 / $d1;

        $d1 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d1 = $d1 * $d0;

        $d2 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d1 = $d1 + $d2;

        $d1 = 1.0 / $d1;

        $d0 = $d1 * $d0;

        $d1 = neg $d1;

        r0 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex createComplex(double,double)>($d0, $d1);

        return r0;

     label4:
        $d0 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d1 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d0 = $d0 / $d1;

        $d1 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d1 = $d1 * $d0;

        $d2 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d1 = $d1 + $d2;

        $d1 = 1.0 / $d1;

        $d2 = neg $d1;

        $d0 = $d2 * $d0;

        r0 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex createComplex(double,double)>($d1, $d0);

        return r0;
    }
    public org.apache.commons.math3.complex.Complex sin()
    {
        org.apache.commons.math3.complex.Complex r0;
        boolean $z0;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $z0 = r0.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        if $z0 == 0 goto label1;

        r0 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex NaN>;

        return r0;

     label1:
        $d0 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sin(double)>($d0);

        $d1 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double cosh(double)>($d1);

        $d0 = $d0 * $d1;

        $d1 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double cos(double)>($d1);

        $d2 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double sinh(double)>($d2);

        $d1 = $d1 * $d2;

        r0 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex createComplex(double,double)>($d0, $d1);

        return r0;
    }
    public org.apache.commons.math3.complex.Complex sinh()
    {
        org.apache.commons.math3.complex.Complex r0;
        boolean $z0;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $z0 = r0.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        if $z0 == 0 goto label1;

        r0 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex NaN>;

        return r0;

     label1:
        $d0 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sinh(double)>($d0);

        $d1 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double cos(double)>($d1);

        $d0 = $d0 * $d1;

        $d1 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double cosh(double)>($d1);

        $d2 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double sin(double)>($d2);

        $d1 = $d1 * $d2;

        r0 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex createComplex(double,double)>($d0, $d1);

        return r0;
    }
    public org.apache.commons.math3.complex.Complex sqrt()
    {
        org.apache.commons.math3.complex.Complex r0;
        boolean $z0;
        double $d0, $d1, $d2;
        byte $b0;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $z0 = r0.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        if $z0 == 0 goto label1;

        r0 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex NaN>;

        return r0;

     label1:
        $d0 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $b0 = $d0 cmpl 0.0;

        if $b0 != 0 goto label2;

        $d0 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $b0 = $d0 cmpl 0.0;

        if $b0 != 0 goto label2;

        r0 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex createComplex(double,double)>(0.0, 0.0);

        return r0;

     label2:
        $d0 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        $d1 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: double abs()>();

        $d0 = $d0 + $d1;

        $d0 = $d0 / 2.0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d0);

        $d1 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $b0 = $d1 cmpl 0.0;

        if $b0 < 0 goto label3;

        $d1 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d2 = 2.0 * $d0;

        $d1 = $d1 / $d2;

        r0 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex createComplex(double,double)>($d0, $d1);

        return r0;

     label3:
        $d1 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d1);

        $d2 = 2.0 * $d0;

        $d1 = $d1 / $d2;

        $d2 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double copySign(double,double)>(1.0, $d2);

        $d0 = $d2 * $d0;

        r0 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex createComplex(double,double)>($d1, $d0);

        return r0;
    }
    public org.apache.commons.math3.complex.Complex sqrt1z()
    {
        org.apache.commons.math3.complex.Complex r0, $r1;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex createComplex(double,double)>(1.0, 0.0);

        r0 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex multiply(org.apache.commons.math3.complex.Complex)>(r0);

        r0 = virtualinvoke $r1.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex subtract(org.apache.commons.math3.complex.Complex)>(r0);

        r0 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex sqrt()>();

        return r0;
    }
    public volatile java.lang.Object subtract(java.lang.Object) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.complex.Complex r0, $r2;
        java.lang.Object $r1;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math3.complex.Complex) $r1;

        r0 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex subtract(org.apache.commons.math3.complex.Complex)>($r2);

        return r0;
    }
    public org.apache.commons.math3.complex.Complex subtract(double)
    {
        org.apache.commons.math3.complex.Complex r0;
        double $d0, $d1;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $d0 := @parameter0: double;

        $z0 = r0.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        if $z0 != 0 goto label1;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 == 0 goto label2;

     label1:
        r0 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex NaN>;

        return r0;

     label2:
        $d1 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d1 = $d1 - $d0;

        $d0 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        r0 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex createComplex(double,double)>($d1, $d0);

        return r0;
    }
    public org.apache.commons.math3.complex.Complex subtract(org.apache.commons.math3.complex.Complex) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.complex.Complex r0, $r1;
        boolean $z0;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $r1 := @parameter0: org.apache.commons.math3.complex.Complex;

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>($r1);

        $z0 = r0.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        if $z0 != 0 goto label1;

        $z0 = $r1.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        if $z0 == 0 goto label2;

     label1:
        r0 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex NaN>;

        return r0;

     label2:
        $d0 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d1 = virtualinvoke $r1.<org.apache.commons.math3.complex.Complex: double getReal()>();

        $d0 = $d0 - $d1;

        $d1 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d2 = virtualinvoke $r1.<org.apache.commons.math3.complex.Complex: double getImaginary()>();

        $d1 = $d1 - $d2;

        r0 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex createComplex(double,double)>($d0, $d1);

        return r0;
    }
    public org.apache.commons.math3.complex.Complex tan()
    {
        org.apache.commons.math3.complex.Complex r0;
        double d0, d1, d2, $d3;
        boolean $z0;
        byte $b0;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $z0 = r0.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        if $z0 != 0 goto label1;

        d1 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d1);

        if $z0 == 0 goto label2;

     label1:
        r0 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex NaN>;

        return r0;

     label2:
        d1 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $b0 = d1 cmpl 20.0;

        if $b0 <= 0 goto label3;

        r0 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex createComplex(double,double)>(0.0, 1.0);

        return r0;

     label3:
        d1 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $b0 = d1 cmpg -20.0;

        if $b0 >= 0 goto label4;

        r0 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex createComplex(double,double)>(0.0, -1.0);

        return r0;

     label4:
        d1 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        d2 = 2.0 * d1;

        d1 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        d1 = 2.0 * d1;

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double cos(double)>(d2);

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double cosh(double)>(d1);

        d0 = d0 + $d3;

        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double sin(double)>(d2);

        d2 = d2 / d0;

        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sinh(double)>(d1);

        d1 = d1 / d0;

        r0 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex createComplex(double,double)>(d2, d1);

        return r0;
    }
    public org.apache.commons.math3.complex.Complex tanh()
    {
        org.apache.commons.math3.complex.Complex r0;
        double d0, d1, d2, $d3;
        boolean $z0;
        byte $b0;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $z0 = r0.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        if $z0 != 0 goto label1;

        d1 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d1);

        if $z0 == 0 goto label2;

     label1:
        r0 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex NaN>;

        return r0;

     label2:
        d1 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $b0 = d1 cmpl 20.0;

        if $b0 <= 0 goto label3;

        r0 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex createComplex(double,double)>(1.0, 0.0);

        return r0;

     label3:
        d1 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $b0 = d1 cmpg -20.0;

        if $b0 >= 0 goto label4;

        r0 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex createComplex(double,double)>(-1.0, 0.0);

        return r0;

     label4:
        d1 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        d2 = 2.0 * d1;

        d1 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        d1 = 2.0 * d1;

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double cosh(double)>(d2);

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double cos(double)>(d1);

        d0 = d0 + $d3;

        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double sinh(double)>(d2);

        d2 = d2 / d0;

        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sin(double)>(d1);

        d1 = d1 / d0;

        r0 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex createComplex(double,double)>(d2, d1);

        return r0;
    }
    public java.lang.String toString()
    {
        org.apache.commons.math3.complex.Complex r0;
        java.lang.StringBuilder $r1;
        double $d0;
        java.lang.String $r2;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $d0 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $d0 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
