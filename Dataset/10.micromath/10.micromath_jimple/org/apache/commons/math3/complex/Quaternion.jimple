org.apache.commons.math3.complex.Quaternion extends java.lang.Object implements java.io.Serializable
public static final org.apache.commons.math3.complex.Quaternion I
public static final org.apache.commons.math3.complex.Quaternion IDENTITY
public static final org.apache.commons.math3.complex.Quaternion J
public static final org.apache.commons.math3.complex.Quaternion K
public static final org.apache.commons.math3.complex.Quaternion ZERO
private static final long serialVersionUID
private final double q0
private final double q1
private final double q2
private final double q3
    static void <clinit>()
    {
        org.apache.commons.math3.complex.Quaternion $r0;

        $r0 = new org.apache.commons.math3.complex.Quaternion;

        specialinvoke $r0.<org.apache.commons.math3.complex.Quaternion: void <init>(double,double,double,double)>(1.0, 0.0, 0.0, 0.0);

        <org.apache.commons.math3.complex.Quaternion: org.apache.commons.math3.complex.Quaternion IDENTITY> = $r0;

        $r0 = new org.apache.commons.math3.complex.Quaternion;

        specialinvoke $r0.<org.apache.commons.math3.complex.Quaternion: void <init>(double,double,double,double)>(0.0, 0.0, 0.0, 0.0);

        <org.apache.commons.math3.complex.Quaternion: org.apache.commons.math3.complex.Quaternion ZERO> = $r0;

        $r0 = new org.apache.commons.math3.complex.Quaternion;

        specialinvoke $r0.<org.apache.commons.math3.complex.Quaternion: void <init>(double,double,double,double)>(0.0, 1.0, 0.0, 0.0);

        <org.apache.commons.math3.complex.Quaternion: org.apache.commons.math3.complex.Quaternion I> = $r0;

        $r0 = new org.apache.commons.math3.complex.Quaternion;

        specialinvoke $r0.<org.apache.commons.math3.complex.Quaternion: void <init>(double,double,double,double)>(0.0, 0.0, 1.0, 0.0);

        <org.apache.commons.math3.complex.Quaternion: org.apache.commons.math3.complex.Quaternion J> = $r0;

        $r0 = new org.apache.commons.math3.complex.Quaternion;

        specialinvoke $r0.<org.apache.commons.math3.complex.Quaternion: void <init>(double,double,double,double)>(0.0, 0.0, 0.0, 1.0);

        <org.apache.commons.math3.complex.Quaternion: org.apache.commons.math3.complex.Quaternion K> = $r0;

        return;
    }
    public void <init>(double, double, double, double)
    {
        org.apache.commons.math3.complex.Quaternion r0;
        double $d0, $d1, $d2, $d3;

        r0 := @this: org.apache.commons.math3.complex.Quaternion;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $d3 := @parameter3: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.complex.Quaternion: double q0> = $d0;

        r0.<org.apache.commons.math3.complex.Quaternion: double q1> = $d1;

        r0.<org.apache.commons.math3.complex.Quaternion: double q2> = $d2;

        r0.<org.apache.commons.math3.complex.Quaternion: double q3> = $d3;

        return;
    }
    public void <init>(double, double[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.complex.Quaternion r0;
        double $d0;
        double[] $r1;
        int $i0;
        org.apache.commons.math3.exception.DimensionMismatchException $r2;

        r0 := @this: org.apache.commons.math3.complex.Quaternion;

        $d0 := @parameter0: double;

        $r1 := @parameter1: double[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = lengthof $r1;

        if $i0 == 3 goto label1;

        $r2 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i0 = lengthof $r1;

        specialinvoke $r2.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i0, 3);

        throw $r2;

     label1:
        r0.<org.apache.commons.math3.complex.Quaternion: double q0> = $d0;

        $d0 = $r1[0];

        r0.<org.apache.commons.math3.complex.Quaternion: double q1> = $d0;

        $d0 = $r1[1];

        r0.<org.apache.commons.math3.complex.Quaternion: double q2> = $d0;

        $d0 = $r1[2];

        r0.<org.apache.commons.math3.complex.Quaternion: double q3> = $d0;

        return;
    }
    public void <init>(double[])
    {
        org.apache.commons.math3.complex.Quaternion r0;
        double[] $r1;

        r0 := @this: org.apache.commons.math3.complex.Quaternion;

        $r1 := @parameter0: double[];

        specialinvoke r0.<org.apache.commons.math3.complex.Quaternion: void <init>(double,double[])>(0.0, $r1);

        return;
    }
    public static org.apache.commons.math3.complex.Quaternion add(org.apache.commons.math3.complex.Quaternion, org.apache.commons.math3.complex.Quaternion)
    {
        org.apache.commons.math3.complex.Quaternion $r0, $r1, $r2;
        double $d0, $d1, $d2, $d3, $d4;

        $r0 := @parameter0: org.apache.commons.math3.complex.Quaternion;

        $r1 := @parameter1: org.apache.commons.math3.complex.Quaternion;

        $r2 = new org.apache.commons.math3.complex.Quaternion;

        $d0 = virtualinvoke $r0.<org.apache.commons.math3.complex.Quaternion: double getQ0()>();

        $d1 = virtualinvoke $r1.<org.apache.commons.math3.complex.Quaternion: double getQ0()>();

        $d0 = $d0 + $d1;

        $d1 = virtualinvoke $r0.<org.apache.commons.math3.complex.Quaternion: double getQ1()>();

        $d2 = virtualinvoke $r1.<org.apache.commons.math3.complex.Quaternion: double getQ1()>();

        $d1 = $d1 + $d2;

        $d2 = virtualinvoke $r0.<org.apache.commons.math3.complex.Quaternion: double getQ2()>();

        $d3 = virtualinvoke $r1.<org.apache.commons.math3.complex.Quaternion: double getQ2()>();

        $d2 = $d2 + $d3;

        $d3 = virtualinvoke $r0.<org.apache.commons.math3.complex.Quaternion: double getQ3()>();

        $d4 = virtualinvoke $r1.<org.apache.commons.math3.complex.Quaternion: double getQ3()>();

        $d3 = $d3 + $d4;

        specialinvoke $r2.<org.apache.commons.math3.complex.Quaternion: void <init>(double,double,double,double)>($d0, $d1, $d2, $d3);

        return $r2;
    }
    public static double dotProduct(org.apache.commons.math3.complex.Quaternion, org.apache.commons.math3.complex.Quaternion)
    {
        org.apache.commons.math3.complex.Quaternion $r0, $r1;
        double $d0, $d1, $d2;

        $r0 := @parameter0: org.apache.commons.math3.complex.Quaternion;

        $r1 := @parameter1: org.apache.commons.math3.complex.Quaternion;

        $d0 = virtualinvoke $r0.<org.apache.commons.math3.complex.Quaternion: double getQ0()>();

        $d1 = virtualinvoke $r1.<org.apache.commons.math3.complex.Quaternion: double getQ0()>();

        $d0 = $d0 * $d1;

        $d1 = virtualinvoke $r0.<org.apache.commons.math3.complex.Quaternion: double getQ1()>();

        $d2 = virtualinvoke $r1.<org.apache.commons.math3.complex.Quaternion: double getQ1()>();

        $d1 = $d1 * $d2;

        $d0 = $d0 + $d1;

        $d1 = virtualinvoke $r0.<org.apache.commons.math3.complex.Quaternion: double getQ2()>();

        $d2 = virtualinvoke $r1.<org.apache.commons.math3.complex.Quaternion: double getQ2()>();

        $d1 = $d1 * $d2;

        $d0 = $d0 + $d1;

        $d1 = virtualinvoke $r0.<org.apache.commons.math3.complex.Quaternion: double getQ3()>();

        $d2 = virtualinvoke $r1.<org.apache.commons.math3.complex.Quaternion: double getQ3()>();

        $d1 = $d1 * $d2;

        $d0 = $d0 + $d1;

        return $d0;
    }
    public static org.apache.commons.math3.complex.Quaternion multiply(org.apache.commons.math3.complex.Quaternion, org.apache.commons.math3.complex.Quaternion)
    {
        org.apache.commons.math3.complex.Quaternion $r0, $r1;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11;

        $r0 := @parameter0: org.apache.commons.math3.complex.Quaternion;

        $r1 := @parameter1: org.apache.commons.math3.complex.Quaternion;

        $d4 = virtualinvoke $r0.<org.apache.commons.math3.complex.Quaternion: double getQ0()>();

        $d5 = virtualinvoke $r0.<org.apache.commons.math3.complex.Quaternion: double getQ1()>();

        $d6 = virtualinvoke $r0.<org.apache.commons.math3.complex.Quaternion: double getQ2()>();

        d3 = virtualinvoke $r0.<org.apache.commons.math3.complex.Quaternion: double getQ3()>();

        $d7 = virtualinvoke $r1.<org.apache.commons.math3.complex.Quaternion: double getQ0()>();

        $d8 = virtualinvoke $r1.<org.apache.commons.math3.complex.Quaternion: double getQ1()>();

        $d9 = virtualinvoke $r1.<org.apache.commons.math3.complex.Quaternion: double getQ2()>();

        $d10 = virtualinvoke $r1.<org.apache.commons.math3.complex.Quaternion: double getQ3()>();

        d0 = $d4 * $d7;

        d1 = $d5 * $d8;

        d0 = d0 - d1;

        d1 = $d6 * $d9;

        d0 = d0 - d1;

        d1 = d3 * $d10;

        d0 = d0 - d1;

        d1 = $d4 * $d8;

        d2 = $d5 * $d7;

        d1 = d1 + d2;

        d2 = $d6 * $d10;

        d1 = d1 + d2;

        d2 = d3 * $d9;

        d1 = d1 - d2;

        d2 = $d4 * $d9;

        $d11 = $d5 * $d10;

        d2 = d2 - $d11;

        $d11 = $d6 * $d7;

        d2 = d2 + $d11;

        $d11 = d3 * $d8;

        d2 = d2 + $d11;

        $d4 = $d4 * $d10;

        $d5 = $d5 * $d9;

        $d5 = $d4 + $d5;

        $d6 = $d6 * $d8;

        $d6 = $d5 - $d6;

        d3 = d3 * $d7;

        d3 = $d6 + d3;

        $r0 = new org.apache.commons.math3.complex.Quaternion;

        specialinvoke $r0.<org.apache.commons.math3.complex.Quaternion: void <init>(double,double,double,double)>(d0, d1, d2, d3);

        return $r0;
    }
    public static org.apache.commons.math3.complex.Quaternion subtract(org.apache.commons.math3.complex.Quaternion, org.apache.commons.math3.complex.Quaternion)
    {
        org.apache.commons.math3.complex.Quaternion $r0, $r1, $r2;
        double $d0, $d1, $d2, $d3, $d4;

        $r0 := @parameter0: org.apache.commons.math3.complex.Quaternion;

        $r1 := @parameter1: org.apache.commons.math3.complex.Quaternion;

        $r2 = new org.apache.commons.math3.complex.Quaternion;

        $d0 = virtualinvoke $r0.<org.apache.commons.math3.complex.Quaternion: double getQ0()>();

        $d1 = virtualinvoke $r1.<org.apache.commons.math3.complex.Quaternion: double getQ0()>();

        $d0 = $d0 - $d1;

        $d1 = virtualinvoke $r0.<org.apache.commons.math3.complex.Quaternion: double getQ1()>();

        $d2 = virtualinvoke $r1.<org.apache.commons.math3.complex.Quaternion: double getQ1()>();

        $d1 = $d1 - $d2;

        $d2 = virtualinvoke $r0.<org.apache.commons.math3.complex.Quaternion: double getQ2()>();

        $d3 = virtualinvoke $r1.<org.apache.commons.math3.complex.Quaternion: double getQ2()>();

        $d2 = $d2 - $d3;

        $d3 = virtualinvoke $r0.<org.apache.commons.math3.complex.Quaternion: double getQ3()>();

        $d4 = virtualinvoke $r1.<org.apache.commons.math3.complex.Quaternion: double getQ3()>();

        $d3 = $d3 - $d4;

        specialinvoke $r2.<org.apache.commons.math3.complex.Quaternion: void <init>(double,double,double,double)>($d0, $d1, $d2, $d3);

        return $r2;
    }
    public org.apache.commons.math3.complex.Quaternion add(org.apache.commons.math3.complex.Quaternion)
    {
        org.apache.commons.math3.complex.Quaternion r0, $r1;

        r0 := @this: org.apache.commons.math3.complex.Quaternion;

        $r1 := @parameter0: org.apache.commons.math3.complex.Quaternion;

        r0 = staticinvoke <org.apache.commons.math3.complex.Quaternion: org.apache.commons.math3.complex.Quaternion add(org.apache.commons.math3.complex.Quaternion,org.apache.commons.math3.complex.Quaternion)>(r0, $r1);

        return r0;
    }
    public double dotProduct(org.apache.commons.math3.complex.Quaternion)
    {
        org.apache.commons.math3.complex.Quaternion r0, $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.complex.Quaternion;

        $r1 := @parameter0: org.apache.commons.math3.complex.Quaternion;

        $d0 = staticinvoke <org.apache.commons.math3.complex.Quaternion: double dotProduct(org.apache.commons.math3.complex.Quaternion,org.apache.commons.math3.complex.Quaternion)>(r0, $r1);

        return $d0;
    }
    public boolean equals(java.lang.Object)
    {
        org.apache.commons.math3.complex.Quaternion r0, r2;
        java.lang.Object $r1;
        boolean $z0;
        double $d0, $d1;
        byte $b0;

        r0 := @this: org.apache.commons.math3.complex.Quaternion;

        $r1 := @parameter0: java.lang.Object;

        if r0 != $r1 goto label1;

        return 1;

     label1:
        $z0 = $r1 instanceof org.apache.commons.math3.complex.Quaternion;

        if $z0 == 0 goto label2;

        r2 = (org.apache.commons.math3.complex.Quaternion) $r1;

        $d0 = r0.<org.apache.commons.math3.complex.Quaternion: double q0>;

        $d1 = virtualinvoke r2.<org.apache.commons.math3.complex.Quaternion: double getQ0()>();

        $b0 = $d0 cmpl $d1;

        if $b0 != 0 goto label2;

        $d0 = r0.<org.apache.commons.math3.complex.Quaternion: double q1>;

        $d1 = virtualinvoke r2.<org.apache.commons.math3.complex.Quaternion: double getQ1()>();

        $b0 = $d0 cmpl $d1;

        if $b0 != 0 goto label2;

        $d0 = r0.<org.apache.commons.math3.complex.Quaternion: double q2>;

        $d1 = virtualinvoke r2.<org.apache.commons.math3.complex.Quaternion: double getQ2()>();

        $b0 = $d0 cmpl $d1;

        if $b0 != 0 goto label2;

        $d0 = r0.<org.apache.commons.math3.complex.Quaternion: double q3>;

        $d1 = virtualinvoke r2.<org.apache.commons.math3.complex.Quaternion: double getQ3()>();

        $b0 = $d0 cmpl $d1;

        if $b0 == 0 goto label3;

     label2:
        return 0;

     label3:
        return 1;
    }
    public boolean equals(org.apache.commons.math3.complex.Quaternion, double)
    {
        org.apache.commons.math3.complex.Quaternion r0, $r1;
        double $d0, $d1, $d2;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.complex.Quaternion;

        $r1 := @parameter0: org.apache.commons.math3.complex.Quaternion;

        $d0 := @parameter1: double;

        $d1 = r0.<org.apache.commons.math3.complex.Quaternion: double q0>;

        $d2 = virtualinvoke $r1.<org.apache.commons.math3.complex.Quaternion: double getQ0()>();

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,double)>($d1, $d2, $d0);

        if $z0 == 0 goto label1;

        $d1 = r0.<org.apache.commons.math3.complex.Quaternion: double q1>;

        $d2 = virtualinvoke $r1.<org.apache.commons.math3.complex.Quaternion: double getQ1()>();

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,double)>($d1, $d2, $d0);

        if $z0 == 0 goto label1;

        $d1 = r0.<org.apache.commons.math3.complex.Quaternion: double q2>;

        $d2 = virtualinvoke $r1.<org.apache.commons.math3.complex.Quaternion: double getQ2()>();

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,double)>($d1, $d2, $d0);

        if $z0 == 0 goto label1;

        $d1 = r0.<org.apache.commons.math3.complex.Quaternion: double q3>;

        $d2 = virtualinvoke $r1.<org.apache.commons.math3.complex.Quaternion: double getQ3()>();

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,double)>($d1, $d2, $d0);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public org.apache.commons.math3.complex.Quaternion getConjugate()
    {
        org.apache.commons.math3.complex.Quaternion r0, $r1;
        double $d0, $d1, $d2, $d3;

        r0 := @this: org.apache.commons.math3.complex.Quaternion;

        $r1 = new org.apache.commons.math3.complex.Quaternion;

        $d0 = r0.<org.apache.commons.math3.complex.Quaternion: double q0>;

        $d1 = r0.<org.apache.commons.math3.complex.Quaternion: double q1>;

        $d1 = neg $d1;

        $d2 = r0.<org.apache.commons.math3.complex.Quaternion: double q2>;

        $d2 = neg $d2;

        $d3 = r0.<org.apache.commons.math3.complex.Quaternion: double q3>;

        $d3 = neg $d3;

        specialinvoke $r1.<org.apache.commons.math3.complex.Quaternion: void <init>(double,double,double,double)>($d0, $d1, $d2, $d3);

        return $r1;
    }
    public org.apache.commons.math3.complex.Quaternion getInverse()
    {
        org.apache.commons.math3.complex.Quaternion r0, $r5;
        double d0, $d1, $d2, $d3, $d4;
        java.lang.Double $r1;
        byte $b0;
        org.apache.commons.math3.exception.ZeroException $r2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3;
        java.lang.Object[] $r4;

        r0 := @this: org.apache.commons.math3.complex.Quaternion;

        d0 = r0.<org.apache.commons.math3.complex.Quaternion: double q0>;

        $d1 = r0.<org.apache.commons.math3.complex.Quaternion: double q0>;

        d0 = d0 * $d1;

        $d1 = r0.<org.apache.commons.math3.complex.Quaternion: double q1>;

        $d2 = r0.<org.apache.commons.math3.complex.Quaternion: double q1>;

        $d1 = $d1 * $d2;

        d0 = d0 + $d1;

        $d1 = r0.<org.apache.commons.math3.complex.Quaternion: double q2>;

        $d2 = r0.<org.apache.commons.math3.complex.Quaternion: double q2>;

        $d1 = $d1 * $d2;

        d0 = d0 + $d1;

        $d1 = r0.<org.apache.commons.math3.complex.Quaternion: double q3>;

        $d2 = r0.<org.apache.commons.math3.complex.Quaternion: double q3>;

        $d1 = $d1 * $d2;

        d0 = d0 + $d1;

        $d1 = <org.apache.commons.math3.util.Precision: double SAFE_MIN>;

        $b0 = d0 cmpg $d1;

        if $b0 >= 0 goto label1;

        $r2 = new org.apache.commons.math3.exception.ZeroException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NORM>;

        $r4 = newarray (java.lang.Object)[1];

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r4[0] = $r1;

        specialinvoke $r2.<org.apache.commons.math3.exception.ZeroException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r3, $r4);

        throw $r2;

     label1:
        $r5 = new org.apache.commons.math3.complex.Quaternion;

        $d1 = r0.<org.apache.commons.math3.complex.Quaternion: double q0>;

        $d1 = $d1 / d0;

        $d2 = r0.<org.apache.commons.math3.complex.Quaternion: double q1>;

        $d2 = neg $d2;

        $d2 = $d2 / d0;

        $d3 = r0.<org.apache.commons.math3.complex.Quaternion: double q2>;

        $d3 = neg $d3;

        $d3 = $d3 / d0;

        $d4 = r0.<org.apache.commons.math3.complex.Quaternion: double q3>;

        $d4 = neg $d4;

        d0 = $d4 / d0;

        specialinvoke $r5.<org.apache.commons.math3.complex.Quaternion: void <init>(double,double,double,double)>($d1, $d2, $d3, d0);

        return $r5;
    }
    public double getNorm()
    {
        org.apache.commons.math3.complex.Quaternion r0;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.complex.Quaternion;

        $d0 = r0.<org.apache.commons.math3.complex.Quaternion: double q0>;

        $d1 = r0.<org.apache.commons.math3.complex.Quaternion: double q0>;

        $d0 = $d0 * $d1;

        $d1 = r0.<org.apache.commons.math3.complex.Quaternion: double q1>;

        $d2 = r0.<org.apache.commons.math3.complex.Quaternion: double q1>;

        $d1 = $d1 * $d2;

        $d0 = $d0 + $d1;

        $d1 = r0.<org.apache.commons.math3.complex.Quaternion: double q2>;

        $d2 = r0.<org.apache.commons.math3.complex.Quaternion: double q2>;

        $d1 = $d1 * $d2;

        $d0 = $d0 + $d1;

        $d1 = r0.<org.apache.commons.math3.complex.Quaternion: double q3>;

        $d2 = r0.<org.apache.commons.math3.complex.Quaternion: double q3>;

        $d1 = $d1 * $d2;

        $d0 = $d0 + $d1;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d0);

        return $d0;
    }
    public org.apache.commons.math3.complex.Quaternion getPositivePolarForm()
    {
        org.apache.commons.math3.complex.Quaternion r0, $r1;
        double $d0, $d1, $d2, $d3;
        byte $b0;

        r0 := @this: org.apache.commons.math3.complex.Quaternion;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.complex.Quaternion: double getQ0()>();

        $b0 = $d0 cmpg 0.0;

        if $b0 >= 0 goto label1;

        r0 = virtualinvoke r0.<org.apache.commons.math3.complex.Quaternion: org.apache.commons.math3.complex.Quaternion normalize()>();

        $r1 = new org.apache.commons.math3.complex.Quaternion;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.complex.Quaternion: double getQ0()>();

        $d0 = neg $d0;

        $d1 = virtualinvoke r0.<org.apache.commons.math3.complex.Quaternion: double getQ1()>();

        $d1 = neg $d1;

        $d2 = virtualinvoke r0.<org.apache.commons.math3.complex.Quaternion: double getQ2()>();

        $d2 = neg $d2;

        $d3 = virtualinvoke r0.<org.apache.commons.math3.complex.Quaternion: double getQ3()>();

        $d3 = neg $d3;

        specialinvoke $r1.<org.apache.commons.math3.complex.Quaternion: void <init>(double,double,double,double)>($d0, $d1, $d2, $d3);

        return $r1;

     label1:
        r0 = virtualinvoke r0.<org.apache.commons.math3.complex.Quaternion: org.apache.commons.math3.complex.Quaternion normalize()>();

        return r0;
    }
    public double getQ0()
    {
        org.apache.commons.math3.complex.Quaternion r0;
        double d0;

        r0 := @this: org.apache.commons.math3.complex.Quaternion;

        d0 = r0.<org.apache.commons.math3.complex.Quaternion: double q0>;

        return d0;
    }
    public double getQ1()
    {
        org.apache.commons.math3.complex.Quaternion r0;
        double d0;

        r0 := @this: org.apache.commons.math3.complex.Quaternion;

        d0 = r0.<org.apache.commons.math3.complex.Quaternion: double q1>;

        return d0;
    }
    public double getQ2()
    {
        org.apache.commons.math3.complex.Quaternion r0;
        double d0;

        r0 := @this: org.apache.commons.math3.complex.Quaternion;

        d0 = r0.<org.apache.commons.math3.complex.Quaternion: double q2>;

        return d0;
    }
    public double getQ3()
    {
        org.apache.commons.math3.complex.Quaternion r0;
        double d0;

        r0 := @this: org.apache.commons.math3.complex.Quaternion;

        d0 = r0.<org.apache.commons.math3.complex.Quaternion: double q3>;

        return d0;
    }
    public double getScalarPart()
    {
        org.apache.commons.math3.complex.Quaternion r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.complex.Quaternion;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.complex.Quaternion: double getQ0()>();

        return $d0;
    }
    public double[] getVectorPart()
    {
        org.apache.commons.math3.complex.Quaternion r0;
        double[] $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.complex.Quaternion;

        $r1 = newarray (double)[3];

        $d0 = virtualinvoke r0.<org.apache.commons.math3.complex.Quaternion: double getQ1()>();

        $r1[0] = $d0;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.complex.Quaternion: double getQ2()>();

        $r1[1] = $d0;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.complex.Quaternion: double getQ3()>();

        $r1[2] = $d0;

        return $r1;
    }
    public int hashCode()
    {
        org.apache.commons.math3.complex.Quaternion r0;
        double[] r1;
        double d0;
        int i0, $i1, i2, i3;

        r0 := @this: org.apache.commons.math3.complex.Quaternion;

        i2 = 17;

        r1 = newarray (double)[4];

        d0 = r0.<org.apache.commons.math3.complex.Quaternion: double q0>;

        r1[0] = d0;

        d0 = r0.<org.apache.commons.math3.complex.Quaternion: double q1>;

        r1[1] = d0;

        d0 = r0.<org.apache.commons.math3.complex.Quaternion: double q2>;

        r1[2] = d0;

        d0 = r0.<org.apache.commons.math3.complex.Quaternion: double q3>;

        r1[3] = d0;

        i0 = lengthof r1;

        i3 = 0;

     label1:
        if i3 >= i0 goto label2;

        d0 = r1[i3];

        $i1 = staticinvoke <org.apache.commons.math3.util.MathUtils: int hash(double)>(d0);

        i2 = i2 * 31;

        i2 = i2 + $i1;

        i3 = i3 + 1;

        goto label1;

     label2:
        return i2;
    }
    public boolean isPureQuaternion(double)
    {
        org.apache.commons.math3.complex.Quaternion r0;
        double $d0, $d1;
        byte $b0;

        r0 := @this: org.apache.commons.math3.complex.Quaternion;

        $d0 := @parameter0: double;

        $d1 = virtualinvoke r0.<org.apache.commons.math3.complex.Quaternion: double getQ0()>();

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d1);

        $b0 = $d1 cmpg $d0;

        if $b0 > 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean isUnitQuaternion(double)
    {
        org.apache.commons.math3.complex.Quaternion r0;
        double $d0, $d1;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.complex.Quaternion;

        $d0 := @parameter0: double;

        $d1 = virtualinvoke r0.<org.apache.commons.math3.complex.Quaternion: double getNorm()>();

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,double)>($d1, 1.0, $d0);

        return $z0;
    }
    public org.apache.commons.math3.complex.Quaternion multiply(double)
    {
        org.apache.commons.math3.complex.Quaternion r0, $r1;
        double $d0, $d1, $d2, $d3, $d4;

        r0 := @this: org.apache.commons.math3.complex.Quaternion;

        $d0 := @parameter0: double;

        $r1 = new org.apache.commons.math3.complex.Quaternion;

        $d1 = r0.<org.apache.commons.math3.complex.Quaternion: double q0>;

        $d1 = $d1 * $d0;

        $d2 = r0.<org.apache.commons.math3.complex.Quaternion: double q1>;

        $d2 = $d2 * $d0;

        $d3 = r0.<org.apache.commons.math3.complex.Quaternion: double q2>;

        $d3 = $d3 * $d0;

        $d4 = r0.<org.apache.commons.math3.complex.Quaternion: double q3>;

        $d0 = $d4 * $d0;

        specialinvoke $r1.<org.apache.commons.math3.complex.Quaternion: void <init>(double,double,double,double)>($d1, $d2, $d3, $d0);

        return $r1;
    }
    public org.apache.commons.math3.complex.Quaternion multiply(org.apache.commons.math3.complex.Quaternion)
    {
        org.apache.commons.math3.complex.Quaternion r0, $r1;

        r0 := @this: org.apache.commons.math3.complex.Quaternion;

        $r1 := @parameter0: org.apache.commons.math3.complex.Quaternion;

        r0 = staticinvoke <org.apache.commons.math3.complex.Quaternion: org.apache.commons.math3.complex.Quaternion multiply(org.apache.commons.math3.complex.Quaternion,org.apache.commons.math3.complex.Quaternion)>(r0, $r1);

        return r0;
    }
    public org.apache.commons.math3.complex.Quaternion normalize()
    {
        org.apache.commons.math3.complex.Quaternion r0, $r5;
        double $d0, $d1, $d2, $d3, $d4;
        byte $b0;
        org.apache.commons.math3.exception.ZeroException $r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        java.lang.Object[] $r3;
        java.lang.Double $r4;

        r0 := @this: org.apache.commons.math3.complex.Quaternion;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.complex.Quaternion: double getNorm()>();

        $d1 = <org.apache.commons.math3.util.Precision: double SAFE_MIN>;

        $b0 = $d0 cmpg $d1;

        if $b0 >= 0 goto label1;

        $r1 = new org.apache.commons.math3.exception.ZeroException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NORM>;

        $r3 = newarray (java.lang.Object)[1];

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r3[0] = $r4;

        specialinvoke $r1.<org.apache.commons.math3.exception.ZeroException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r2, $r3);

        throw $r1;

     label1:
        $r5 = new org.apache.commons.math3.complex.Quaternion;

        $d1 = r0.<org.apache.commons.math3.complex.Quaternion: double q0>;

        $d1 = $d1 / $d0;

        $d2 = r0.<org.apache.commons.math3.complex.Quaternion: double q1>;

        $d2 = $d2 / $d0;

        $d3 = r0.<org.apache.commons.math3.complex.Quaternion: double q2>;

        $d3 = $d3 / $d0;

        $d4 = r0.<org.apache.commons.math3.complex.Quaternion: double q3>;

        $d0 = $d4 / $d0;

        specialinvoke $r5.<org.apache.commons.math3.complex.Quaternion: void <init>(double,double,double,double)>($d1, $d2, $d3, $d0);

        return $r5;
    }
    public org.apache.commons.math3.complex.Quaternion subtract(org.apache.commons.math3.complex.Quaternion)
    {
        org.apache.commons.math3.complex.Quaternion r0, $r1;

        r0 := @this: org.apache.commons.math3.complex.Quaternion;

        $r1 := @parameter0: org.apache.commons.math3.complex.Quaternion;

        r0 = staticinvoke <org.apache.commons.math3.complex.Quaternion: org.apache.commons.math3.complex.Quaternion subtract(org.apache.commons.math3.complex.Quaternion,org.apache.commons.math3.complex.Quaternion)>(r0, $r1);

        return r0;
    }
    public java.lang.String toString()
    {
        org.apache.commons.math3.complex.Quaternion r0;
        java.lang.StringBuilder r1, $r2;
        double $d0;
        java.lang.String $r3;

        r0 := @this: org.apache.commons.math3.complex.Quaternion;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $d0 = r0.<org.apache.commons.math3.complex.Quaternion: double q0>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $d0 = r0.<org.apache.commons.math3.complex.Quaternion: double q1>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $d0 = r0.<org.apache.commons.math3.complex.Quaternion: double q2>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $d0 = r0.<org.apache.commons.math3.complex.Quaternion: double q3>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r3 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }
