org.apache.commons.math3.transform.FastFourierTransformer extends java.lang.Object implements java.io.Serializable
static final boolean $assertionsDisabled
private static final double[] W_SUB_N_I
private static final double[] W_SUB_N_R
static final long serialVersionUID
private final org.apache.commons.math3.transform.DftNormalization normalization
    static void <clinit>()
    {
        boolean $z0;
        java.lang.Class $r0;
        double[] $r1;

        $r0 = class "Lorg/apache/commons/math3/transform/FastFourierTransformer;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label2;

        $z0 = 1;

     label1:
        <org.apache.commons.math3.transform.FastFourierTransformer: boolean $assertionsDisabled> = $z0;

        $r1 = newarray (double)[63];

        $r1[0] = 1.0;

        $r1[1] = -1.0;

        $r1[2] = 6.123233995736766E-17;

        $r1[3] = 0.7071067811865476;

        $r1[4] = 0.9238795325112867;

        $r1[5] = 0.9807852804032304;

        $r1[6] = 0.9951847266721969;

        $r1[7] = 0.9987954562051724;

        $r1[8] = 0.9996988186962042;

        $r1[9] = 0.9999247018391445;

        $r1[10] = 0.9999811752826011;

        $r1[11] = 0.9999952938095762;

        $r1[12] = 0.9999988234517019;

        $r1[13] = 0.9999997058628822;

        $r1[14] = 0.9999999264657179;

        $r1[15] = 0.9999999816164293;

        $r1[16] = 0.9999999954041073;

        $r1[17] = 0.9999999988510269;

        $r1[18] = 0.9999999997127567;

        $r1[19] = 0.9999999999281892;

        $r1[20] = 0.9999999999820472;

        $r1[21] = 0.9999999999955118;

        $r1[22] = 0.999999999998878;

        $r1[23] = 0.9999999999997194;

        $r1[24] = 0.9999999999999298;

        $r1[25] = 0.9999999999999825;

        $r1[26] = 0.9999999999999957;

        $r1[27] = 0.9999999999999989;

        $r1[28] = 0.9999999999999998;

        $r1[29] = 0.9999999999999999;

        $r1[30] = 1.0;

        $r1[31] = 1.0;

        $r1[32] = 1.0;

        $r1[33] = 1.0;

        $r1[34] = 1.0;

        $r1[35] = 1.0;

        $r1[36] = 1.0;

        $r1[37] = 1.0;

        $r1[38] = 1.0;

        $r1[39] = 1.0;

        $r1[40] = 1.0;

        $r1[41] = 1.0;

        $r1[42] = 1.0;

        $r1[43] = 1.0;

        $r1[44] = 1.0;

        $r1[45] = 1.0;

        $r1[46] = 1.0;

        $r1[47] = 1.0;

        $r1[48] = 1.0;

        $r1[49] = 1.0;

        $r1[50] = 1.0;

        $r1[51] = 1.0;

        $r1[52] = 1.0;

        $r1[53] = 1.0;

        $r1[54] = 1.0;

        $r1[55] = 1.0;

        $r1[56] = 1.0;

        $r1[57] = 1.0;

        $r1[58] = 1.0;

        $r1[59] = 1.0;

        $r1[60] = 1.0;

        $r1[61] = 1.0;

        $r1[62] = 1.0;

        <org.apache.commons.math3.transform.FastFourierTransformer: double[] W_SUB_N_R> = $r1;

        $r1 = newarray (double)[63];

        $r1[0] = 2.4492935982947064E-16;

        $r1[1] = -1.2246467991473532E-16;

        $r1[2] = -1.0;

        $r1[3] = -0.7071067811865475;

        $r1[4] = -0.3826834323650898;

        $r1[5] = -0.19509032201612825;

        $r1[6] = -0.0980171403295606;

        $r1[7] = -0.049067674327418015;

        $r1[8] = -0.024541228522912288;

        $r1[9] = -0.012271538285719925;

        $r1[10] = -0.006135884649154475;

        $r1[11] = -0.003067956762965976;

        $r1[12] = -0.0015339801862847655;

        $r1[13] = -7.669903187427045E-4;

        $r1[14] = -3.8349518757139556E-4;

        $r1[15] = -1.917475973107033E-4;

        $r1[16] = -9.587379909597734E-5;

        $r1[17] = -4.793689960306688E-5;

        $r1[18] = -2.396844980841822E-5;

        $r1[19] = -1.1984224905069705E-5;

        $r1[20] = -5.9921124526424275E-6;

        $r1[21] = -2.996056226334661E-6;

        $r1[22] = -1.4980281131690111E-6;

        $r1[23] = -7.490140565847157E-7;

        $r1[24] = -3.7450702829238413E-7;

        $r1[25] = -1.8725351414619535E-7;

        $r1[26] = -9.362675707309808E-8;

        $r1[27] = -4.681337853654909E-8;

        $r1[28] = -2.340668926827455E-8;

        $r1[29] = -1.1703344634137277E-8;

        $r1[30] = -5.8516723170686385E-9;

        $r1[31] = -2.9258361585343192E-9;

        $r1[32] = -1.4629180792671596E-9;

        $r1[33] = -7.314590396335798E-10;

        $r1[34] = -3.657295198167899E-10;

        $r1[35] = -1.8286475990839495E-10;

        $r1[36] = -9.143237995419748E-11;

        $r1[37] = -4.571618997709874E-11;

        $r1[38] = -2.285809498854937E-11;

        $r1[39] = -1.1429047494274685E-11;

        $r1[40] = -5.714523747137342E-12;

        $r1[41] = -2.857261873568671E-12;

        $r1[42] = -1.4286309367843356E-12;

        $r1[43] = -7.143154683921678E-13;

        $r1[44] = -3.571577341960839E-13;

        $r1[45] = -1.7857886709804195E-13;

        $r1[46] = -8.928943354902097E-14;

        $r1[47] = -4.4644716774510487E-14;

        $r1[48] = -2.2322358387255243E-14;

        $r1[49] = -1.1161179193627622E-14;

        $r1[50] = -5.580589596813811E-15;

        $r1[51] = -2.7902947984069054E-15;

        $r1[52] = -1.3951473992034527E-15;

        $r1[53] = -6.975736996017264E-16;

        $r1[54] = -3.487868498008632E-16;

        $r1[55] = -1.743934249004316E-16;

        $r1[56] = -8.71967124502158E-17;

        $r1[57] = -4.35983562251079E-17;

        $r1[58] = -2.179917811255395E-17;

        $r1[59] = -1.0899589056276974E-17;

        $r1[60] = -5.449794528138487E-18;

        $r1[61] = -2.7248972640692436E-18;

        $r1[62] = -1.3624486320346218E-18;

        <org.apache.commons.math3.transform.FastFourierTransformer: double[] W_SUB_N_I> = $r1;

        return;

     label2:
        $z0 = 0;

        goto label1;
    }
    public void <init>(org.apache.commons.math3.transform.DftNormalization)
    {
        org.apache.commons.math3.transform.FastFourierTransformer r0;
        org.apache.commons.math3.transform.DftNormalization $r1;

        r0 := @this: org.apache.commons.math3.transform.FastFourierTransformer;

        $r1 := @parameter0: org.apache.commons.math3.transform.DftNormalization;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.transform.FastFourierTransformer: org.apache.commons.math3.transform.DftNormalization normalization> = $r1;

        return;
    }
    private static void bitReversalShuffle2(double[], double[])
    {
        double[] $r0, $r1;
        int i0, i1, i2, i3, i4;
        boolean $z0;
        java.lang.AssertionError $r2;
        double d0, $d1;

        $r0 := @parameter0: double[];

        $r1 := @parameter1: double[];

        i1 = lengthof $r0;

        $z0 = <org.apache.commons.math3.transform.FastFourierTransformer: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        i0 = lengthof $r1;

        if i0 == i1 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        i0 = i1 >> 1;

        i2 = 0;

        i3 = 0;

     label2:
        if i3 >= i1 goto label6;

        if i3 >= i2 goto label3;

        d0 = $r0[i3];

        $d1 = $r0[i2];

        $r0[i3] = $d1;

        $r0[i2] = d0;

        d0 = $r1[i3];

        $d1 = $r1[i2];

        $r1[i3] = $d1;

        $r1[i2] = d0;

     label3:
        i4 = i0;

     label4:
        if i4 > i2 goto label5;

        if i4 <= 0 goto label5;

        i2 = i2 - i4;

        i4 = i4 >> 1;

        goto label4;

     label5:
        i2 = i2 + i4;

        i3 = i3 + 1;

        goto label2;

     label6:
        return;
    }
    private void mdfft(org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix, org.apache.commons.math3.transform.TransformType, int, int[])
    {
        org.apache.commons.math3.transform.FastFourierTransformer r0;
        org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix $r1;
        org.apache.commons.math3.transform.TransformType $r2;
        int $i0, $i1, $i2;
        int[] $r3, r4, $r5;
        org.apache.commons.math3.complex.Complex[] r6;
        org.apache.commons.math3.complex.Complex $r7;

        r0 := @this: org.apache.commons.math3.transform.FastFourierTransformer;

        $r1 := @parameter0: org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix;

        $r2 := @parameter1: org.apache.commons.math3.transform.TransformType;

        $i0 := @parameter2: int;

        $r3 := @parameter3: int[];

        $r5 = virtualinvoke $r1.<org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: int[] getDimensionSizes()>();

        $i2 = lengthof $r3;

        $i1 = lengthof $r5;

        if $i2 != $i1 goto label4;

        $i1 = $r5[$i0];

        r6 = newarray (org.apache.commons.math3.complex.Complex)[$i1];

        $i1 = 0;

     label1:
        $i2 = $r5[$i0];

        if $i1 >= $i2 goto label2;

        $r3[$i0] = $i1;

        $r7 = virtualinvoke $r1.<org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: org.apache.commons.math3.complex.Complex get(int[])>($r3);

        r6[$i1] = $r7;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        r6 = virtualinvoke r0.<org.apache.commons.math3.transform.FastFourierTransformer: org.apache.commons.math3.complex.Complex[] transform(org.apache.commons.math3.complex.Complex[],org.apache.commons.math3.transform.TransformType)>(r6, $r2);

        $i1 = 0;

     label3:
        $i2 = $r5[$i0];

        if $i1 >= $i2 goto label7;

        $r3[$i0] = $i1;

        $r7 = r6[$i1];

        virtualinvoke $r1.<org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: org.apache.commons.math3.complex.Complex set(org.apache.commons.math3.complex.Complex,int[])>($r7, $r3);

        $i1 = $i1 + 1;

        goto label3;

     label4:
        $i1 = lengthof $r3;

        $i1 = $i1 + 1;

        r4 = newarray (int)[$i1];

        $i1 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r4, 0, $i1);

        $i1 = lengthof $r3;

        if $i1 != $i0 goto label5;

        r4[$i0] = 0;

        specialinvoke r0.<org.apache.commons.math3.transform.FastFourierTransformer: void mdfft(org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix,org.apache.commons.math3.transform.TransformType,int,int[])>($r1, $r2, $i0, r4);

        return;

     label5:
        $i1 = 0;

     label6:
        $i2 = lengthof $r3;

        $i2 = $r5[$i2];

        if $i1 >= $i2 goto label7;

        $i2 = lengthof $r3;

        r4[$i2] = $i1;

        specialinvoke r0.<org.apache.commons.math3.transform.FastFourierTransformer: void mdfft(org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix,org.apache.commons.math3.transform.TransformType,int,int[])>($r1, $r2, $i0, r4);

        $i1 = $i1 + 1;

        goto label6;

     label7:
        return;
    }
    private static void normalizeTransformedData(double[][], org.apache.commons.math3.transform.DftNormalization, org.apache.commons.math3.transform.TransformType)
    {
        double[][] $r0;
        org.apache.commons.math3.transform.DftNormalization $r1;
        org.apache.commons.math3.transform.TransformType $r2, $r8;
        double[] r3, r4;
        int i0, $i1;
        boolean $z0;
        java.lang.AssertionError $r5;
        int[] $r6;
        org.apache.commons.math3.exception.MathIllegalStateException $r7;
        double $d0, $d1;

        $r0 := @parameter0: double[][];

        $r1 := @parameter1: org.apache.commons.math3.transform.DftNormalization;

        $r2 := @parameter2: org.apache.commons.math3.transform.TransformType;

        r4 = $r0[0];

        r3 = $r0[1];

        i0 = lengthof r4;

        $z0 = <org.apache.commons.math3.transform.FastFourierTransformer: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i1 = lengthof r3;

        if $i1 == i0 goto label1;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label1:
        $r6 = <org.apache.commons.math3.transform.FastFourierTransformer$1: int[] $SwitchMap$org$apache$commons$math3$transform$DftNormalization>;

        $i1 = virtualinvoke $r1.<org.apache.commons.math3.transform.DftNormalization: int ordinal()>();

        $i1 = $r6[$i1];

        lookupswitch($i1)
        {
            case 1: goto label3;
            case 2: goto label5;
            default: goto label2;
        };

     label2:
        $r7 = new org.apache.commons.math3.exception.MathIllegalStateException;

        specialinvoke $r7.<org.apache.commons.math3.exception.MathIllegalStateException: void <init>()>();

        throw $r7;

     label3:
        $r8 = <org.apache.commons.math3.transform.TransformType: org.apache.commons.math3.transform.TransformType INVERSE>;

        if $r2 != $r8 goto label7;

        $d0 = (double) i0;

        $d0 = 1.0 / $d0;

        $i1 = 0;

     label4:
        if $i1 >= i0 goto label7;

        $d1 = r4[$i1];

        $d1 = $d1 * $d0;

        r4[$i1] = $d1;

        $d1 = r3[$i1];

        $d1 = $d1 * $d0;

        r3[$i1] = $d1;

        $i1 = $i1 + 1;

        goto label4;

     label5:
        $d0 = (double) i0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d0);

        $d0 = 1.0 / $d0;

        $i1 = 0;

     label6:
        if $i1 >= i0 goto label7;

        $d1 = r4[$i1];

        $d1 = $d1 * $d0;

        r4[$i1] = $d1;

        $d1 = r3[$i1];

        $d1 = $d1 * $d0;

        r3[$i1] = $d1;

        $i1 = $i1 + 1;

        goto label6;

     label7:
        return;
    }
    public static void transformInPlace(double[][], org.apache.commons.math3.transform.DftNormalization, org.apache.commons.math3.transform.TransformType)
    {
        double[][] $r0;
        org.apache.commons.math3.transform.DftNormalization $r1;
        org.apache.commons.math3.transform.TransformType $r2, $r10;
        double[] r3, r4, $r11;
        int i0, i1, i2, $i3, i5, i6, i7, $i8;
        double d0, d1, d2, d3, d4, d5, d6, d7, $d8, $d9;
        org.apache.commons.math3.exception.DimensionMismatchException $r5;
        long $l4;
        boolean $z0;
        org.apache.commons.math3.exception.MathIllegalArgumentException $r6;
        org.apache.commons.math3.exception.util.LocalizedFormats $r7;
        java.lang.Object[] $r8;
        java.lang.Integer $r9;

        $r0 := @parameter0: double[][];

        $r1 := @parameter1: org.apache.commons.math3.transform.DftNormalization;

        $r2 := @parameter2: org.apache.commons.math3.transform.TransformType;

        $i3 = lengthof $r0;

        if $i3 == 2 goto label01;

        $r5 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i3 = lengthof $r0;

        specialinvoke $r5.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i3, 2);

        throw $r5;

     label01:
        r4 = $r0[0];

        r3 = $r0[1];

        $i3 = lengthof r4;

        i2 = lengthof r3;

        if $i3 == i2 goto label02;

        $r5 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i3 = lengthof r3;

        i2 = lengthof r4;

        specialinvoke $r5.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i3, i2);

        throw $r5;

     label02:
        $i3 = lengthof r4;

        $l4 = (long) $i3;

        $z0 = staticinvoke <org.apache.commons.math3.util.ArithmeticUtils: boolean isPowerOfTwo(long)>($l4);

        if $z0 != 0 goto label03;

        $r6 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r7 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NOT_POWER_OF_TWO_CONSIDER_PADDING>;

        $r8 = newarray (java.lang.Object)[1];

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r8[0] = $r9;

        specialinvoke $r6.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r7, $r8);

        throw $r6;

     label03:
        if $i3 != 1 goto label04;

        return;

     label04:
        if $i3 != 2 goto label05;

        d6 = r4[0];

        d5 = r3[0];

        d4 = r4[1];

        d7 = r3[1];

        d0 = d6 + d4;

        r4[0] = d0;

        d0 = d5 + d7;

        r3[0] = d0;

        d6 = d6 - d4;

        r4[1] = d6;

        d5 = d5 - d7;

        r3[1] = d5;

        staticinvoke <org.apache.commons.math3.transform.FastFourierTransformer: void normalizeTransformedData(double[][],org.apache.commons.math3.transform.DftNormalization,org.apache.commons.math3.transform.TransformType)>($r0, $r1, $r2);

        return;

     label05:
        staticinvoke <org.apache.commons.math3.transform.FastFourierTransformer: void bitReversalShuffle2(double[],double[])>(r4, r3);

        $r10 = <org.apache.commons.math3.transform.TransformType: org.apache.commons.math3.transform.TransformType INVERSE>;

        if $r2 != $r10 goto label07;

        i2 = 0;

     label06:
        if i2 >= $i3 goto label09;

        i5 = i2 + 1;

        i0 = i2 + 2;

        i1 = i2 + 3;

        d2 = r4[i2];

        d6 = r3[i2];

        d5 = r4[i0];

        d0 = r3[i0];

        d1 = r4[i5];

        d4 = r3[i5];

        d7 = r4[i1];

        d3 = r3[i1];

        $d8 = d2 + d5;

        $d8 = $d8 + d1;

        $d8 = $d8 + d7;

        r4[i2] = $d8;

        $d8 = d6 + d0;

        $d8 = $d8 + d4;

        $d8 = $d8 + d3;

        r3[i2] = $d8;

        $d8 = d2 - d1;

        $d9 = d3 - d0;

        $d8 = $d8 + $d9;

        r4[i5] = $d8;

        $d8 = d6 - d4;

        $d9 = d5 - d7;

        $d8 = $d8 + $d9;

        r3[i5] = $d8;

        $d8 = d2 - d5;

        $d8 = $d8 + d1;

        $d8 = $d8 - d7;

        r4[i0] = $d8;

        $d8 = d6 - d0;

        $d8 = $d8 + d4;

        $d8 = $d8 - d3;

        r3[i0] = $d8;

        d2 = d2 - d1;

        d0 = d0 - d3;

        d0 = d2 + d0;

        r4[i1] = d0;

        d6 = d6 - d4;

        d5 = d7 - d5;

        d5 = d6 + d5;

        r3[i1] = d5;

        i2 = i2 + 4;

        goto label06;

     label07:
        i2 = 0;

     label08:
        if i2 >= $i3 goto label09;

        i5 = i2 + 1;

        i0 = i2 + 2;

        i1 = i2 + 3;

        d2 = r4[i2];

        d6 = r3[i2];

        d5 = r4[i0];

        d0 = r3[i0];

        d1 = r4[i5];

        d4 = r3[i5];

        d7 = r4[i1];

        d3 = r3[i1];

        $d8 = d2 + d5;

        $d8 = $d8 + d1;

        $d8 = $d8 + d7;

        r4[i2] = $d8;

        $d8 = d6 + d0;

        $d8 = $d8 + d4;

        $d8 = $d8 + d3;

        r3[i2] = $d8;

        $d8 = d2 - d1;

        $d9 = d0 - d3;

        $d8 = $d8 + $d9;

        r4[i5] = $d8;

        $d8 = d6 - d4;

        $d9 = d7 - d5;

        $d8 = $d8 + $d9;

        r3[i5] = $d8;

        $d8 = d2 - d5;

        $d8 = $d8 + d1;

        $d8 = $d8 - d7;

        r4[i0] = $d8;

        $d8 = d6 - d0;

        $d8 = $d8 + d4;

        $d8 = $d8 - d3;

        r3[i0] = $d8;

        d2 = d2 - d1;

        d0 = d3 - d0;

        d0 = d2 + d0;

        r4[i1] = d0;

        d6 = d6 - d4;

        d5 = d5 - d7;

        d5 = d6 + d5;

        r3[i1] = d5;

        i2 = i2 + 4;

        goto label08;

     label09:
        i5 = 4;

        i0 = 2;

     label10:
        if i5 >= $i3 goto label16;

        i2 = i5 << 1;

        i1 = i0 + 1;

        $r11 = <org.apache.commons.math3.transform.FastFourierTransformer: double[] W_SUB_N_R>;

        d5 = $r11[i1];

        $r11 = <org.apache.commons.math3.transform.FastFourierTransformer: double[] W_SUB_N_I>;

        d7 = $r11[i1];

        $r10 = <org.apache.commons.math3.transform.TransformType: org.apache.commons.math3.transform.TransformType INVERSE>;

        if $r2 != $r10 goto label11;

        d7 = neg d7;

     label11:
        i6 = 0;

     label12:
        if i6 >= $i3 goto label15;

        i0 = i6 + i5;

        d6 = 1.0;

        d4 = 0.0;

        i7 = 0;

     label13:
        if i7 >= i5 goto label14;

        $i8 = i6 + i7;

        d1 = r4[$i8];

        $i8 = i6 + i7;

        d0 = r3[$i8];

        $i8 = i0 + i7;

        d3 = r4[$i8];

        $i8 = i0 + i7;

        d2 = r3[$i8];

        $i8 = i6 + i7;

        $d8 = d6 * d3;

        $d8 = $d8 + d1;

        $d9 = d4 * d2;

        $d8 = $d8 - $d9;

        r4[$i8] = $d8;

        $i8 = i6 + i7;

        $d8 = d6 * d2;

        $d8 = $d8 + d0;

        $d9 = d4 * d3;

        $d8 = $d8 + $d9;

        r3[$i8] = $d8;

        $i8 = i0 + i7;

        $d8 = d6 * d3;

        $d9 = d4 * d2;

        $d8 = $d8 - $d9;

        d1 = d1 - $d8;

        r4[$i8] = d1;

        $i8 = i0 + i7;

        d2 = d6 * d2;

        d3 = d4 * d3;

        d3 = d2 + d3;

        d0 = d0 - d3;

        r3[$i8] = d0;

        d0 = d6 * d5;

        d3 = d4 * d7;

        d6 = d6 * d7;

        d4 = d4 * d5;

        d4 = d6 + d4;

        d6 = d0 - d3;

        i7 = i7 + 1;

        goto label13;

     label14:
        i6 = i6 + i2;

        goto label12;

     label15:
        i5 = i2;

        i0 = i1;

        goto label10;

     label16:
        staticinvoke <org.apache.commons.math3.transform.FastFourierTransformer: void normalizeTransformedData(double[][],org.apache.commons.math3.transform.DftNormalization,org.apache.commons.math3.transform.TransformType)>($r0, $r1, $r2);

        return;
    }
    public java.lang.Object mdfft(java.lang.Object, org.apache.commons.math3.transform.TransformType)
    {
        org.apache.commons.math3.transform.FastFourierTransformer r0;
        java.lang.Object $r1;
        org.apache.commons.math3.transform.TransformType $r2;
        org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix $r3;
        int[] $r4, $r5;
        int i0, $i1;

        r0 := @this: org.apache.commons.math3.transform.FastFourierTransformer;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: org.apache.commons.math3.transform.TransformType;

        $r3 = new org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix;

        specialinvoke $r3.<org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: void <init>(java.lang.Object)>($r1);

        $r1 = virtualinvoke $r3.<org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: java.lang.Object clone()>();

        $r3 = (org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix) $r1;

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: int[] getDimensionSizes()>();

        i0 = 0;

     label1:
        $i1 = lengthof $r4;

        if i0 >= $i1 goto label2;

        $r5 = newarray (int)[0];

        specialinvoke r0.<org.apache.commons.math3.transform.FastFourierTransformer: void mdfft(org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix,org.apache.commons.math3.transform.TransformType,int,int[])>($r3, $r2, i0, $r5);

        i0 = i0 + 1;

        goto label1;

     label2:
        $r1 = virtualinvoke $r3.<org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: java.lang.Object getArray()>();

        return $r1;
    }
    public org.apache.commons.math3.complex.Complex[] transform(org.apache.commons.math3.analysis.UnivariateFunction, double, double, int, org.apache.commons.math3.transform.TransformType)
    {
        org.apache.commons.math3.transform.FastFourierTransformer r0;
        org.apache.commons.math3.analysis.UnivariateFunction $r1;
        double $d0, $d1;
        int $i0;
        org.apache.commons.math3.transform.TransformType $r2;
        double[] $r3;
        org.apache.commons.math3.complex.Complex[] $r4;

        r0 := @this: org.apache.commons.math3.transform.FastFourierTransformer;

        $r1 := @parameter0: org.apache.commons.math3.analysis.UnivariateFunction;

        $d0 := @parameter1: double;

        $d1 := @parameter2: double;

        $i0 := @parameter3: int;

        $r2 := @parameter4: org.apache.commons.math3.transform.TransformType;

        $r3 = staticinvoke <org.apache.commons.math3.analysis.FunctionUtils: double[] sample(org.apache.commons.math3.analysis.UnivariateFunction,double,double,int)>($r1, $d0, $d1, $i0);

        $r4 = virtualinvoke r0.<org.apache.commons.math3.transform.FastFourierTransformer: org.apache.commons.math3.complex.Complex[] transform(double[],org.apache.commons.math3.transform.TransformType)>($r3, $r2);

        return $r4;
    }
    public org.apache.commons.math3.complex.Complex[] transform(double[], org.apache.commons.math3.transform.TransformType)
    {
        org.apache.commons.math3.transform.FastFourierTransformer r0;
        double[] $r1, $r4;
        org.apache.commons.math3.transform.TransformType $r2;
        double[][] r3;
        int $i0;
        org.apache.commons.math3.transform.DftNormalization $r5;
        org.apache.commons.math3.complex.Complex[] $r6;

        r0 := @this: org.apache.commons.math3.transform.FastFourierTransformer;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: org.apache.commons.math3.transform.TransformType;

        r3 = newarray (double[])[2];

        $i0 = lengthof $r1;

        $r4 = staticinvoke <org.apache.commons.math3.util.MathArrays: double[] copyOf(double[],int)>($r1, $i0);

        r3[0] = $r4;

        $i0 = lengthof $r1;

        $r1 = newarray (double)[$i0];

        r3[1] = $r1;

        $r5 = r0.<org.apache.commons.math3.transform.FastFourierTransformer: org.apache.commons.math3.transform.DftNormalization normalization>;

        staticinvoke <org.apache.commons.math3.transform.FastFourierTransformer: void transformInPlace(double[][],org.apache.commons.math3.transform.DftNormalization,org.apache.commons.math3.transform.TransformType)>(r3, $r5, $r2);

        $r6 = staticinvoke <org.apache.commons.math3.transform.TransformUtils: org.apache.commons.math3.complex.Complex[] createComplexArray(double[][])>(r3);

        return $r6;
    }
    public org.apache.commons.math3.complex.Complex[] transform(org.apache.commons.math3.complex.Complex[], org.apache.commons.math3.transform.TransformType)
    {
        org.apache.commons.math3.transform.FastFourierTransformer r0;
        org.apache.commons.math3.complex.Complex[] $r1;
        org.apache.commons.math3.transform.TransformType $r2;
        double[][] $r3;
        org.apache.commons.math3.transform.DftNormalization $r4;

        r0 := @this: org.apache.commons.math3.transform.FastFourierTransformer;

        $r1 := @parameter0: org.apache.commons.math3.complex.Complex[];

        $r2 := @parameter1: org.apache.commons.math3.transform.TransformType;

        $r3 = staticinvoke <org.apache.commons.math3.transform.TransformUtils: double[][] createRealImaginaryArray(org.apache.commons.math3.complex.Complex[])>($r1);

        $r4 = r0.<org.apache.commons.math3.transform.FastFourierTransformer: org.apache.commons.math3.transform.DftNormalization normalization>;

        staticinvoke <org.apache.commons.math3.transform.FastFourierTransformer: void transformInPlace(double[][],org.apache.commons.math3.transform.DftNormalization,org.apache.commons.math3.transform.TransformType)>($r3, $r4, $r2);

        $r1 = staticinvoke <org.apache.commons.math3.transform.TransformUtils: org.apache.commons.math3.complex.Complex[] createComplexArray(double[][])>($r3);

        return $r1;
    }
