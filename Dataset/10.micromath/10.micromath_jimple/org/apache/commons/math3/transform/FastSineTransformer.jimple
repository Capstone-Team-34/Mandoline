org.apache.commons.math3.transform.FastSineTransformer extends java.lang.Object implements org.apache.commons.math3.transform.RealTransformer java.io.Serializable
static final long serialVersionUID
private final org.apache.commons.math3.transform.DstNormalization normalization
    public void <init>(org.apache.commons.math3.transform.DstNormalization)
    {
        org.apache.commons.math3.transform.FastSineTransformer r0;
        org.apache.commons.math3.transform.DstNormalization $r1;

        r0 := @this: org.apache.commons.math3.transform.FastSineTransformer;

        $r1 := @parameter0: org.apache.commons.math3.transform.DstNormalization;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.transform.FastSineTransformer: org.apache.commons.math3.transform.DstNormalization normalization> = $r1;

        return;
    }
    protected double[] fst(double[]) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.transform.FastSineTransformer r0;
        double[] $r1, r2, r3;
        double d0, d1, $d2;
        int i0, $i3, $i4, $i5;
        long $l1;
        boolean $z0;
        org.apache.commons.math3.exception.util.LocalizedFormats $r4;
        java.lang.Object[] $r5;
        java.lang.Integer $r6;
        byte $b2;
        java.lang.Double $r7;
        org.apache.commons.math3.transform.DftNormalization $r8;
        org.apache.commons.math3.transform.TransformType $r9;
        org.apache.commons.math3.complex.Complex[] $r10;
        org.apache.commons.math3.complex.Complex $r11;
        org.apache.commons.math3.exception.MathIllegalArgumentException $r12;
        org.apache.commons.math3.transform.FastFourierTransformer $r13;

        r0 := @this: org.apache.commons.math3.transform.FastSineTransformer;

        $r1 := @parameter0: double[];

        i0 = lengthof $r1;

        r2 = newarray (double)[i0];

        i0 = lengthof $r1;

        $l1 = (long) i0;

        $z0 = staticinvoke <org.apache.commons.math3.util.ArithmeticUtils: boolean isPowerOfTwo(long)>($l1);

        if $z0 != 0 goto label1;

        $r12 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NOT_POWER_OF_TWO_CONSIDER_PADDING>;

        $r5 = newarray (java.lang.Object)[1];

        i0 = lengthof $r1;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5[0] = $r6;

        specialinvoke $r12.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r4, $r5);

        throw $r12;

     label1:
        d0 = $r1[0];

        $b2 = d0 cmpl 0.0;

        if $b2 == 0 goto label2;

        $r12 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats FIRST_ELEMENT_NOT_ZERO>;

        $r5 = newarray (java.lang.Object)[1];

        d0 = $r1[0];

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r5[0] = $r7;

        specialinvoke $r12.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r4, $r5);

        throw $r12;

     label2:
        i0 = lengthof $r1;

        if i0 != 1 goto label3;

        d0 = (double) 0L;

        r2[0] = d0;

        return r2;

     label3:
        r3 = newarray (double)[i0];

        d0 = (double) 0L;

        r3[0] = d0;

        $i3 = i0 >> 1;

        $i4 = i0 >> 1;

        d0 = $r1[$i4];

        d0 = 2.0 * d0;

        r3[$i3] = d0;

        $i3 = 1;

     label4:
        $i4 = i0 >> 1;

        if $i3 >= $i4 goto label5;

        d0 = (double) $i3;

        d0 = d0 * 3.141592653589793;

        d1 = (double) i0;

        d0 = d0 / d1;

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sin(double)>(d0);

        d1 = $r1[$i3];

        $i4 = i0 - $i3;

        $d2 = $r1[$i4];

        d1 = d1 + $d2;

        d0 = d0 * d1;

        d1 = $r1[$i3];

        $i4 = i0 - $i3;

        $d2 = $r1[$i4];

        d1 = d1 - $d2;

        d1 = 0.5 * d1;

        $d2 = d0 + d1;

        r3[$i3] = $d2;

        $i4 = i0 - $i3;

        d0 = d0 - d1;

        r3[$i4] = d0;

        $i3 = $i3 + 1;

        goto label4;

     label5:
        $r13 = new org.apache.commons.math3.transform.FastFourierTransformer;

        $r8 = <org.apache.commons.math3.transform.DftNormalization: org.apache.commons.math3.transform.DftNormalization STANDARD>;

        specialinvoke $r13.<org.apache.commons.math3.transform.FastFourierTransformer: void <init>(org.apache.commons.math3.transform.DftNormalization)>($r8);

        $r9 = <org.apache.commons.math3.transform.TransformType: org.apache.commons.math3.transform.TransformType FORWARD>;

        $r10 = virtualinvoke $r13.<org.apache.commons.math3.transform.FastFourierTransformer: org.apache.commons.math3.complex.Complex[] transform(double[],org.apache.commons.math3.transform.TransformType)>(r3, $r9);

        d0 = (double) 0L;

        r2[0] = d0;

        $r11 = $r10[0];

        d0 = virtualinvoke $r11.<org.apache.commons.math3.complex.Complex: double getReal()>();

        d0 = 0.5 * d0;

        r2[1] = d0;

        $i3 = 1;

     label6:
        $i4 = i0 >> 1;

        if $i3 >= $i4 goto label7;

        $i4 = $i3 * 2;

        $r11 = $r10[$i3];

        d0 = virtualinvoke $r11.<org.apache.commons.math3.complex.Complex: double getImaginary()>();

        d0 = neg d0;

        r2[$i4] = d0;

        $i4 = $i3 * 2;

        $i4 = $i4 + 1;

        $r11 = $r10[$i3];

        d0 = virtualinvoke $r11.<org.apache.commons.math3.complex.Complex: double getReal()>();

        $i5 = $i3 * 2;

        $i5 = $i5 + -1;

        d1 = r2[$i5];

        d0 = d0 + d1;

        r2[$i4] = d0;

        $i3 = $i3 + 1;

        goto label6;

     label7:
        return r2;
    }
    public double[] transform(org.apache.commons.math3.analysis.UnivariateFunction, double, double, int, org.apache.commons.math3.transform.TransformType)
    {
        org.apache.commons.math3.transform.FastSineTransformer r0;
        org.apache.commons.math3.analysis.UnivariateFunction $r1;
        double $d0, $d1;
        int $i0;
        org.apache.commons.math3.transform.TransformType $r2;
        double[] $r3;

        r0 := @this: org.apache.commons.math3.transform.FastSineTransformer;

        $r1 := @parameter0: org.apache.commons.math3.analysis.UnivariateFunction;

        $d0 := @parameter1: double;

        $d1 := @parameter2: double;

        $i0 := @parameter3: int;

        $r2 := @parameter4: org.apache.commons.math3.transform.TransformType;

        $r3 = staticinvoke <org.apache.commons.math3.analysis.FunctionUtils: double[] sample(org.apache.commons.math3.analysis.UnivariateFunction,double,double,int)>($r1, $d0, $d1, $i0);

        $d0 = (double) 0L;

        $r3[0] = $d0;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.transform.FastSineTransformer: double[] transform(double[],org.apache.commons.math3.transform.TransformType)>($r3, $r2);

        return $r3;
    }
    public double[] transform(double[], org.apache.commons.math3.transform.TransformType)
    {
        org.apache.commons.math3.transform.FastSineTransformer r0;
        double[] $r1;
        org.apache.commons.math3.transform.TransformType $r2, $r5;
        org.apache.commons.math3.transform.DstNormalization $r3, $r4;
        int $i0;
        double $d0;

        r0 := @this: org.apache.commons.math3.transform.FastSineTransformer;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: org.apache.commons.math3.transform.TransformType;

        $r4 = r0.<org.apache.commons.math3.transform.FastSineTransformer: org.apache.commons.math3.transform.DstNormalization normalization>;

        $r3 = <org.apache.commons.math3.transform.DstNormalization: org.apache.commons.math3.transform.DstNormalization ORTHOGONAL_DST_I>;

        if $r4 != $r3 goto label1;

        $i0 = lengthof $r1;

        $d0 = (double) $i0;

        $d0 = 2.0 / $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d0);

        $r1 = virtualinvoke r0.<org.apache.commons.math3.transform.FastSineTransformer: double[] fst(double[])>($r1);

        $r1 = staticinvoke <org.apache.commons.math3.transform.TransformUtils: double[] scaleArray(double[],double)>($r1, $d0);

        return $r1;

     label1:
        $r5 = <org.apache.commons.math3.transform.TransformType: org.apache.commons.math3.transform.TransformType FORWARD>;

        if $r2 != $r5 goto label2;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.transform.FastSineTransformer: double[] fst(double[])>($r1);

        return $r1;

     label2:
        $i0 = lengthof $r1;

        $d0 = (double) $i0;

        $d0 = 2.0 / $d0;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.transform.FastSineTransformer: double[] fst(double[])>($r1);

        $r1 = staticinvoke <org.apache.commons.math3.transform.TransformUtils: double[] scaleArray(double[],double)>($r1, $d0);

        return $r1;
    }
