org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix extends java.lang.Object implements java.lang.Cloneable
protected int[] dimensionSize
protected java.lang.Object multiDimensionalComplexArray
    void <init>(java.lang.Object)
    {
        org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix r0;
        java.lang.Object $r1, r2;
        int i0, $i1, i2;
        boolean $z0;
        java.lang.Object[] r3;
        int[] $r4;

        r0 := @this: org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix;

        $r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: java.lang.Object multiDimensionalComplexArray> = $r1;

        i0 = 0;

        r2 = $r1;

     label1:
        $z0 = r2 instanceof java.lang.Object[];

        if $z0 == 0 goto label2;

        r3 = (java.lang.Object[]) r2;

        i0 = i0 + 1;

        r2 = r3[0];

        goto label1;

     label2:
        $r4 = newarray (int)[i0];

        r0.<org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: int[] dimensionSize> = $r4;

        i2 = 0;

     label3:
        $z0 = $r1 instanceof java.lang.Object[];

        if $z0 == 0 goto label4;

        r3 = (java.lang.Object[]) $r1;

        $r4 = r0.<org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: int[] dimensionSize>;

        $i1 = lengthof r3;

        $r4[i2] = $i1;

        $r1 = r3[0];

        i2 = i2 + 1;

        goto label3;

     label4:
        return;
    }
    private void clone(org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix)
    {
        org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix r0, $r1;
        int[] r2, $r3, $r7;
        int $i0, i1, $i2, $i3, $i4;
        java.lang.Class $r4;
        java.lang.Object $r5;
        int[][] r6;
        org.apache.commons.math3.complex.Complex $r8;

        r0 := @this: org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix;

        $r1 := @parameter0: org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix;

        r2 = r0.<org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: int[] dimensionSize>;

        $i0 = lengthof r2;

        r2 = newarray (int)[$i0];

        $i0 = 1;

        i1 = 0;

     label1:
        $r3 = r0.<org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: int[] dimensionSize>;

        $i2 = lengthof $r3;

        if i1 >= $i2 goto label2;

        $r3 = r0.<org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: int[] dimensionSize>;

        $i2 = $r3[i1];

        $i0 = $i0 * $i2;

        i1 = i1 + 1;

        goto label1;

     label2:
        $r3 = r0.<org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: int[] dimensionSize>;

        i1 = lengthof $r3;

        $r3 = newarray (int)[2];

        $r3[0] = $i0;

        $r3[1] = i1;

        $r4 = <java.lang.Integer: java.lang.Class TYPE>;

        $r5 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r4, $r3);

        r6 = (int[][]) $r5;

        $i0 = lengthof r6;

        i1 = 0;

     label3:
        if i1 >= $i0 goto label7;

        $r3 = r6[i1];

        $r7 = r0.<org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: int[] dimensionSize>;

        $i2 = lengthof $r7;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, $r3, 0, $i2);

        $i2 = 0;

     label4:
        $r3 = r0.<org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: int[] dimensionSize>;

        $i3 = lengthof $r3;

        if $i2 >= $i3 goto label5;

        $i3 = r2[$i2];

        $i3 = $i3 + 1;

        r2[$i2] = $i3;

        $i3 = r2[$i2];

        $r3 = r0.<org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: int[] dimensionSize>;

        $i4 = $r3[$i2];

        if $i3 >= $i4 goto label6;

     label5:
        i1 = i1 + 1;

        goto label3;

     label6:
        r2[$i2] = 0;

        $i2 = $i2 + 1;

        goto label4;

     label7:
        $i0 = lengthof r6;

        i1 = 0;

     label8:
        if i1 >= $i0 goto label9;

        r2 = r6[i1];

        $r8 = virtualinvoke r0.<org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: org.apache.commons.math3.complex.Complex get(int[])>(r2);

        virtualinvoke $r1.<org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: org.apache.commons.math3.complex.Complex set(org.apache.commons.math3.complex.Complex,int[])>($r8, r2);

        i1 = i1 + 1;

        goto label8;

     label9:
        return;
    }
    public java.lang.Object clone()
    {
        org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix r0, r1;
        int[] $r2;
        java.lang.Object $r3;

        r0 := @this: org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix;

        r1 = new org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix;

        $r2 = r0.<org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: int[] dimensionSize>;

        $r3 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>(class "Lorg/apache/commons/math3/complex/Complex;", $r2);

        specialinvoke r1.<org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: void <init>(java.lang.Object)>($r3);

        specialinvoke r0.<org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: void clone(org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix)>(r1);

        return r1;
    }
    public transient org.apache.commons.math3.complex.Complex get(int[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix r0;
        int[] $r1, $r3;
        int $i0, $i1;
        org.apache.commons.math3.exception.DimensionMismatchException $r2;
        java.lang.Object r4;
        java.lang.Object[] r5;
        org.apache.commons.math3.complex.Complex r6;

        r0 := @this: org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix;

        $r1 := @parameter0: int[];

        if $r1 != null goto label2;

        $r1 = r0.<org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: int[] dimensionSize>;

        $i0 = lengthof $r1;

        if $i0 <= 0 goto label1;

        $r2 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $r1 = r0.<org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: int[] dimensionSize>;

        $i0 = lengthof $r1;

        specialinvoke $r2.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>(0, $i0);

        throw $r2;

     label1:
        return null;

     label2:
        $i0 = lengthof $r1;

        $r3 = r0.<org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: int[] dimensionSize>;

        $i1 = lengthof $r3;

        if $i0 == $i1 goto label3;

        $r2 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i0 = lengthof $r1;

        $r1 = r0.<org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: int[] dimensionSize>;

        $i1 = lengthof $r1;

        specialinvoke $r2.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i0, $i1);

        throw $r2;

     label3:
        r4 = r0.<org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: java.lang.Object multiDimensionalComplexArray>;

        $i0 = 0;

     label4:
        $r3 = r0.<org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: int[] dimensionSize>;

        $i1 = lengthof $r3;

        if $i0 >= $i1 goto label5;

        r5 = (java.lang.Object[]) r4;

        $i1 = $r1[$i0];

        r4 = r5[$i1];

        $i0 = $i0 + 1;

        goto label4;

     label5:
        r6 = (org.apache.commons.math3.complex.Complex) r4;

        return r6;
    }
    public java.lang.Object getArray()
    {
        org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix r0;
        java.lang.Object r1;

        r0 := @this: org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix;

        r1 = r0.<org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: java.lang.Object multiDimensionalComplexArray>;

        return r1;
    }
    public int[] getDimensionSizes()
    {
        org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix r0;
        java.lang.Object $r1;
        int[] $r2;

        r0 := @this: org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix;

        $r2 = r0.<org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: int[] dimensionSize>;

        $r1 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (int[]) $r1;

        return $r2;
    }
    public transient org.apache.commons.math3.complex.Complex set(org.apache.commons.math3.complex.Complex, int[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix r0;
        org.apache.commons.math3.complex.Complex $r1, r7;
        int[] $r2, $r4;
        int $i0, $i1;
        org.apache.commons.math3.exception.DimensionMismatchException $r3;
        java.lang.Object $r5;
        java.lang.Object[] $r6;

        r0 := @this: org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix;

        $r1 := @parameter0: org.apache.commons.math3.complex.Complex;

        $r2 := @parameter1: int[];

        if $r2 != null goto label2;

        $r2 = r0.<org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: int[] dimensionSize>;

        $i0 = lengthof $r2;

        if $i0 <= 0 goto label1;

        $r3 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $r2 = r0.<org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: int[] dimensionSize>;

        $i0 = lengthof $r2;

        specialinvoke $r3.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>(0, $i0);

        throw $r3;

     label1:
        return null;

     label2:
        $i0 = lengthof $r2;

        $r4 = r0.<org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: int[] dimensionSize>;

        $i1 = lengthof $r4;

        if $i0 == $i1 goto label3;

        $r3 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i0 = lengthof $r2;

        $r2 = r0.<org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: int[] dimensionSize>;

        $i1 = lengthof $r2;

        specialinvoke $r3.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i0, $i1);

        throw $r3;

     label3:
        $r5 = r0.<org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: java.lang.Object multiDimensionalComplexArray>;

        $r6 = (java.lang.Object[]) $r5;

        $i0 = 0;

     label4:
        $r4 = r0.<org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: int[] dimensionSize>;

        $i1 = lengthof $r4;

        $i1 = $i1 + -1;

        if $i0 >= $i1 goto label5;

        $i1 = $r2[$i0];

        $r5 = $r6[$i1];

        $r6 = (java.lang.Object[]) $r5;

        $i0 = $i0 + 1;

        goto label4;

     label5:
        $r4 = r0.<org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: int[] dimensionSize>;

        $i0 = lengthof $r4;

        $i0 = $i0 + -1;

        $i0 = $r2[$i0];

        $r5 = $r6[$i0];

        r7 = (org.apache.commons.math3.complex.Complex) $r5;

        $r4 = r0.<org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: int[] dimensionSize>;

        $i0 = lengthof $r4;

        $i0 = $i0 + -1;

        $i0 = $r2[$i0];

        $r6[$i0] = $r1;

        return r7;
    }
