org.apache.commons.math3.transform.TransformUtils extends java.lang.Object
private static final int[] POWERS_OF_TWO
    static void <clinit>()
    {
        int[] $r0;

        $r0 = newarray (int)[31];

        $r0[0] = 1;

        $r0[1] = 2;

        $r0[2] = 4;

        $r0[3] = 8;

        $r0[4] = 16;

        $r0[5] = 32;

        $r0[6] = 64;

        $r0[7] = 128;

        $r0[8] = 256;

        $r0[9] = 512;

        $r0[10] = 1024;

        $r0[11] = 2048;

        $r0[12] = 4096;

        $r0[13] = 8192;

        $r0[14] = 16384;

        $r0[15] = 32768;

        $r0[16] = 65536;

        $r0[17] = 131072;

        $r0[18] = 262144;

        $r0[19] = 524288;

        $r0[20] = 1048576;

        $r0[21] = 2097152;

        $r0[22] = 4194304;

        $r0[23] = 8388608;

        $r0[24] = 16777216;

        $r0[25] = 33554432;

        $r0[26] = 67108864;

        $r0[27] = 134217728;

        $r0[28] = 268435456;

        $r0[29] = 536870912;

        $r0[30] = 1073741824;

        <org.apache.commons.math3.transform.TransformUtils: int[] POWERS_OF_TWO> = $r0;

        return;
    }
    private void <init>()
    {
        org.apache.commons.math3.transform.TransformUtils r0;

        r0 := @this: org.apache.commons.math3.transform.TransformUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static org.apache.commons.math3.complex.Complex[] createComplexArray(double[][]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        double[][] $r0;
        org.apache.commons.math3.complex.Complex[] r1;
        double[] r2, r3;
        int i0, $i1;
        double $d0, $d1;
        org.apache.commons.math3.exception.DimensionMismatchException $r4;
        org.apache.commons.math3.complex.Complex $r5;

        $r0 := @parameter0: double[][];

        i0 = lengthof $r0;

        if i0 == 2 goto label1;

        $r4 = new org.apache.commons.math3.exception.DimensionMismatchException;

        i0 = lengthof $r0;

        specialinvoke $r4.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>(i0, 2);

        throw $r4;

     label1:
        r3 = $r0[0];

        r2 = $r0[1];

        i0 = lengthof r3;

        $i1 = lengthof r2;

        if i0 == $i1 goto label2;

        $r4 = new org.apache.commons.math3.exception.DimensionMismatchException;

        i0 = lengthof r2;

        $i1 = lengthof r3;

        specialinvoke $r4.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>(i0, $i1);

        throw $r4;

     label2:
        i0 = lengthof r3;

        r1 = newarray (org.apache.commons.math3.complex.Complex)[i0];

        $i1 = 0;

     label3:
        if $i1 >= i0 goto label4;

        $r5 = new org.apache.commons.math3.complex.Complex;

        $d1 = r3[$i1];

        $d0 = r2[$i1];

        specialinvoke $r5.<org.apache.commons.math3.complex.Complex: void <init>(double,double)>($d1, $d0);

        r1[$i1] = $r5;

        $i1 = $i1 + 1;

        goto label3;

     label4:
        return r1;
    }
    public static double[][] createRealImaginaryArray(org.apache.commons.math3.complex.Complex[])
    {
        org.apache.commons.math3.complex.Complex[] $r0;
        org.apache.commons.math3.complex.Complex r1;
        double[] r2, r3;
        int $i0, $i1;
        int[] $r4;
        java.lang.Class $r5;
        java.lang.Object $r6;
        double[][] r7;
        double $d0;

        $r0 := @parameter0: org.apache.commons.math3.complex.Complex[];

        $i0 = lengthof $r0;

        $r4 = newarray (int)[2];

        $r4[0] = 2;

        $r4[1] = $i0;

        $r5 = <java.lang.Double: java.lang.Class TYPE>;

        $r6 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r5, $r4);

        r7 = (double[][]) $r6;

        r3 = r7[0];

        r2 = r7[1];

        $i0 = 0;

     label1:
        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label2;

        r1 = $r0[$i0];

        $d0 = virtualinvoke r1.<org.apache.commons.math3.complex.Complex: double getReal()>();

        r3[$i0] = $d0;

        $d0 = virtualinvoke r1.<org.apache.commons.math3.complex.Complex: double getImaginary()>();

        r2[$i0] = $d0;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return r7;
    }
    public static int exactLog2(int) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        int $i0, $i1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r0;
        int[] $r1;
        org.apache.commons.math3.exception.MathIllegalArgumentException $r2;
        java.lang.Object[] $r3;
        java.lang.Integer $r4;

        $i0 := @parameter0: int;

        $r1 = <org.apache.commons.math3.transform.TransformUtils: int[] POWERS_OF_TWO>;

        $i1 = staticinvoke <java.util.Arrays: int binarySearch(int[],int)>($r1, $i0);

        if $i1 >= 0 goto label1;

        $r2 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r0 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NOT_POWER_OF_TWO_CONSIDER_PADDING>;

        $r3 = newarray (java.lang.Object)[1];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3[0] = $r4;

        specialinvoke $r2.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r0, $r3);

        throw $r2;

     label1:
        return $i1;
    }
    public static double[] scaleArray(double[], double)
    {
        double[] $r0;
        double $d0, $d1;
        int $i0, i1;

        $r0 := @parameter0: double[];

        $d0 := @parameter1: double;

        i1 = 0;

     label1:
        $i0 = lengthof $r0;

        if i1 >= $i0 goto label2;

        $d1 = $r0[i1];

        $d1 = $d1 * $d0;

        $r0[i1] = $d1;

        i1 = i1 + 1;

        goto label1;

     label2:
        return $r0;
    }
    public static org.apache.commons.math3.complex.Complex[] scaleArray(org.apache.commons.math3.complex.Complex[], double)
    {
        org.apache.commons.math3.complex.Complex[] $r0;
        double $d0, $d1, $d2;
        int i0, $i1;
        org.apache.commons.math3.complex.Complex $r1, $r2;

        $r0 := @parameter0: org.apache.commons.math3.complex.Complex[];

        $d0 := @parameter1: double;

        i0 = 0;

     label1:
        $i1 = lengthof $r0;

        if i0 >= $i1 goto label2;

        $r1 = new org.apache.commons.math3.complex.Complex;

        $r2 = $r0[i0];

        $d1 = virtualinvoke $r2.<org.apache.commons.math3.complex.Complex: double getReal()>();

        $d1 = $d1 * $d0;

        $r2 = $r0[i0];

        $d2 = virtualinvoke $r2.<org.apache.commons.math3.complex.Complex: double getImaginary()>();

        $d2 = $d2 * $d0;

        specialinvoke $r1.<org.apache.commons.math3.complex.Complex: void <init>(double,double)>($d1, $d2);

        $r0[i0] = $r1;

        i0 = i0 + 1;

        goto label1;

     label2:
        return $r0;
    }
