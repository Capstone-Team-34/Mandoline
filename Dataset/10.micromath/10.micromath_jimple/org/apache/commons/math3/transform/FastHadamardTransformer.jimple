org.apache.commons.math3.transform.FastHadamardTransformer extends java.lang.Object implements org.apache.commons.math3.transform.RealTransformer java.io.Serializable
static final long serialVersionUID
    public void <init>()
    {
        org.apache.commons.math3.transform.FastHadamardTransformer r0;

        r0 := @this: org.apache.commons.math3.transform.FastHadamardTransformer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    protected double[] fht(double[]) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.transform.FastHadamardTransformer r0;
        double[] $r1, r6, r8;
        int i0, i1, i3, i4, i5, $i6;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        long $l2;
        boolean $z0;
        org.apache.commons.math3.exception.MathIllegalArgumentException $r3;
        java.lang.Object[] $r4;
        java.lang.Integer $r5;
        java.lang.Object $r7;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.transform.FastHadamardTransformer;

        $r1 := @parameter0: double[];

        i1 = lengthof $r1;

        i0 = i1 / 2;

        $l2 = (long) i1;

        $z0 = staticinvoke <org.apache.commons.math3.util.ArithmeticUtils: boolean isPowerOfTwo(long)>($l2);

        if $z0 != 0 goto label1;

        $r3 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NOT_POWER_OF_TWO>;

        $r4 = newarray (java.lang.Object)[1];

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r4[0] = $r5;

        specialinvoke $r3.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r2, $r4);

        throw $r3;

     label1:
        r6 = newarray (double)[i1];

        $r7 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        r8 = (double[]) $r7;

        i3 = 1;

     label2:
        if i3 >= i1 goto label7;

        $r1 = r8;

        r8 = r6;

        r6 = $r1;

        i4 = 0;

     label3:
        if i4 >= i0 goto label4;

        i5 = i4 * 2;

        $d0 = $r1[i5];

        i5 = i5 + 1;

        $d1 = $r1[i5];

        $d0 = $d0 + $d1;

        r8[i4] = $d0;

        i4 = i4 + 1;

        goto label3;

     label4:
        i4 = i0;

     label5:
        if i4 >= i1 goto label6;

        i5 = i4 * 2;

        $i6 = i5 - i1;

        $d0 = $r1[$i6];

        i5 = i5 - i1;

        i5 = i5 + 1;

        $d1 = $r1[i5];

        $d0 = $d0 - $d1;

        r8[i4] = $d0;

        i4 = i4 + 1;

        goto label5;

     label6:
        i3 = i3 << 1;

        goto label2;

     label7:
        return r8;
    }
    protected int[] fht(int[]) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.transform.FastHadamardTransformer r0;
        int[] $r1, r6, r8;
        int i0, i1, i3, i4, i5, $i6;
        long $l2;
        boolean $z0;
        org.apache.commons.math3.exception.MathIllegalArgumentException $r2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3;
        java.lang.Object[] $r4;
        java.lang.Integer $r5;
        java.lang.Object $r7;

        r0 := @this: org.apache.commons.math3.transform.FastHadamardTransformer;

        $r1 := @parameter0: int[];

        i1 = lengthof $r1;

        i0 = i1 / 2;

        $l2 = (long) i1;

        $z0 = staticinvoke <org.apache.commons.math3.util.ArithmeticUtils: boolean isPowerOfTwo(long)>($l2);

        if $z0 != 0 goto label1;

        $r2 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NOT_POWER_OF_TWO>;

        $r4 = newarray (java.lang.Object)[1];

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r4[0] = $r5;

        specialinvoke $r2.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r3, $r4);

        throw $r2;

     label1:
        r6 = newarray (int)[i1];

        $r7 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        r8 = (int[]) $r7;

        i3 = 1;

     label2:
        if i3 >= i1 goto label7;

        $r1 = r8;

        r8 = r6;

        r6 = $r1;

        i4 = 0;

     label3:
        if i4 >= i0 goto label4;

        i5 = i4 * 2;

        $i6 = $r1[i5];

        i5 = i5 + 1;

        i5 = $r1[i5];

        $i6 = $i6 + i5;

        r8[i4] = $i6;

        i4 = i4 + 1;

        goto label3;

     label4:
        i4 = i0;

     label5:
        if i4 >= i1 goto label6;

        i5 = i4 * 2;

        $i6 = i5 - i1;

        $i6 = $r1[$i6];

        i5 = i5 - i1;

        i5 = i5 + 1;

        i5 = $r1[i5];

        $i6 = $i6 - i5;

        r8[i4] = $i6;

        i4 = i4 + 1;

        goto label5;

     label6:
        i3 = i3 << 1;

        goto label2;

     label7:
        return r8;
    }
    public double[] transform(org.apache.commons.math3.analysis.UnivariateFunction, double, double, int, org.apache.commons.math3.transform.TransformType)
    {
        org.apache.commons.math3.transform.FastHadamardTransformer r0;
        org.apache.commons.math3.analysis.UnivariateFunction $r1;
        double $d0, $d1;
        int $i0;
        org.apache.commons.math3.transform.TransformType $r2;
        double[] $r3;

        r0 := @this: org.apache.commons.math3.transform.FastHadamardTransformer;

        $r1 := @parameter0: org.apache.commons.math3.analysis.UnivariateFunction;

        $d0 := @parameter1: double;

        $d1 := @parameter2: double;

        $i0 := @parameter3: int;

        $r2 := @parameter4: org.apache.commons.math3.transform.TransformType;

        $r3 = staticinvoke <org.apache.commons.math3.analysis.FunctionUtils: double[] sample(org.apache.commons.math3.analysis.UnivariateFunction,double,double,int)>($r1, $d0, $d1, $i0);

        $r3 = virtualinvoke r0.<org.apache.commons.math3.transform.FastHadamardTransformer: double[] transform(double[],org.apache.commons.math3.transform.TransformType)>($r3, $r2);

        return $r3;
    }
    public double[] transform(double[], org.apache.commons.math3.transform.TransformType)
    {
        org.apache.commons.math3.transform.FastHadamardTransformer r0;
        double[] $r1, $r4;
        org.apache.commons.math3.transform.TransformType $r2, $r3;
        int $i0;
        double $d0;

        r0 := @this: org.apache.commons.math3.transform.FastHadamardTransformer;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: org.apache.commons.math3.transform.TransformType;

        $r3 = <org.apache.commons.math3.transform.TransformType: org.apache.commons.math3.transform.TransformType FORWARD>;

        if $r2 != $r3 goto label1;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.transform.FastHadamardTransformer: double[] fht(double[])>($r1);

        return $r1;

     label1:
        $r4 = virtualinvoke r0.<org.apache.commons.math3.transform.FastHadamardTransformer: double[] fht(double[])>($r1);

        $i0 = lengthof $r1;

        $d0 = (double) $i0;

        $d0 = 1.0 / $d0;

        $r1 = staticinvoke <org.apache.commons.math3.transform.TransformUtils: double[] scaleArray(double[],double)>($r4, $d0);

        return $r1;
    }
    public int[] transform(int[])
    {
        org.apache.commons.math3.transform.FastHadamardTransformer r0;
        int[] $r1;

        r0 := @this: org.apache.commons.math3.transform.FastHadamardTransformer;

        $r1 := @parameter0: int[];

        $r1 = virtualinvoke r0.<org.apache.commons.math3.transform.FastHadamardTransformer: int[] fht(int[])>($r1);

        return $r1;
    }
