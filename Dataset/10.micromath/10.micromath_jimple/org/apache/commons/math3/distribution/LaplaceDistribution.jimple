org.apache.commons.math3.distribution.LaplaceDistribution extends org.apache.commons.math3.distribution.AbstractRealDistribution
private static final long serialVersionUID
private final double beta
private final double mu
    public void <init>(double, double)
    {
        org.apache.commons.math3.distribution.LaplaceDistribution r0;
        double $d0, $d1;
        org.apache.commons.math3.random.Well19937c $r1;

        r0 := @this: org.apache.commons.math3.distribution.LaplaceDistribution;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $r1 = new org.apache.commons.math3.random.Well19937c;

        specialinvoke $r1.<org.apache.commons.math3.random.Well19937c: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.distribution.LaplaceDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double,double)>($r1, $d0, $d1);

        return;
    }
    public void <init>(org.apache.commons.math3.random.RandomGenerator, double, double)
    {
        org.apache.commons.math3.distribution.LaplaceDistribution r0;
        org.apache.commons.math3.random.RandomGenerator $r1;
        double $d0, $d1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        java.lang.Double $r3;
        byte $b0;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r4;

        r0 := @this: org.apache.commons.math3.distribution.LaplaceDistribution;

        $r1 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        $d0 := @parameter1: double;

        $d1 := @parameter2: double;

        specialinvoke r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator)>($r1);

        $b0 = $d1 cmpg 0.0;

        if $b0 > 0 goto label1;

        $r4 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NOT_POSITIVE_SCALE>;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        specialinvoke $r4.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r2, $r3);

        throw $r4;

     label1:
        r0.<org.apache.commons.math3.distribution.LaplaceDistribution: double mu> = $d0;

        r0.<org.apache.commons.math3.distribution.LaplaceDistribution: double beta> = $d1;

        return;
    }
    public double cumulativeProbability(double)
    {
        org.apache.commons.math3.distribution.LaplaceDistribution r0;
        double $d0, $d1;
        byte $b0;

        r0 := @this: org.apache.commons.math3.distribution.LaplaceDistribution;

        $d0 := @parameter0: double;

        $d1 = r0.<org.apache.commons.math3.distribution.LaplaceDistribution: double mu>;

        $b0 = $d0 cmpg $d1;

        if $b0 > 0 goto label1;

        $d1 = r0.<org.apache.commons.math3.distribution.LaplaceDistribution: double mu>;

        $d0 = $d0 - $d1;

        $d1 = r0.<org.apache.commons.math3.distribution.LaplaceDistribution: double beta>;

        $d0 = $d0 / $d1;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d0);

        $d0 = $d0 / 2.0;

        return $d0;

     label1:
        $d1 = r0.<org.apache.commons.math3.distribution.LaplaceDistribution: double mu>;

        $d1 = $d1 - $d0;

        $d0 = r0.<org.apache.commons.math3.distribution.LaplaceDistribution: double beta>;

        $d0 = $d1 / $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d0);

        $d0 = $d0 / 2.0;

        $d0 = 1.0 - $d0;

        return $d0;
    }
    public double density(double)
    {
        org.apache.commons.math3.distribution.LaplaceDistribution r0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.distribution.LaplaceDistribution;

        $d0 := @parameter0: double;

        $d1 = r0.<org.apache.commons.math3.distribution.LaplaceDistribution: double mu>;

        $d0 = $d0 - $d1;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        $d0 = neg $d0;

        $d1 = r0.<org.apache.commons.math3.distribution.LaplaceDistribution: double beta>;

        $d0 = $d0 / $d1;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d0);

        $d1 = r0.<org.apache.commons.math3.distribution.LaplaceDistribution: double beta>;

        $d1 = 2.0 * $d1;

        $d0 = $d0 / $d1;

        return $d0;
    }
    public double getLocation()
    {
        org.apache.commons.math3.distribution.LaplaceDistribution r0;
        double d0;

        r0 := @this: org.apache.commons.math3.distribution.LaplaceDistribution;

        d0 = r0.<org.apache.commons.math3.distribution.LaplaceDistribution: double mu>;

        return d0;
    }
    public double getNumericalMean()
    {
        org.apache.commons.math3.distribution.LaplaceDistribution r0;
        double d0;

        r0 := @this: org.apache.commons.math3.distribution.LaplaceDistribution;

        d0 = r0.<org.apache.commons.math3.distribution.LaplaceDistribution: double mu>;

        return d0;
    }
    public double getNumericalVariance()
    {
        org.apache.commons.math3.distribution.LaplaceDistribution r0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.distribution.LaplaceDistribution;

        $d0 = r0.<org.apache.commons.math3.distribution.LaplaceDistribution: double beta>;

        $d0 = 2.0 * $d0;

        $d1 = r0.<org.apache.commons.math3.distribution.LaplaceDistribution: double beta>;

        $d0 = $d0 * $d1;

        return $d0;
    }
    public double getScale()
    {
        org.apache.commons.math3.distribution.LaplaceDistribution r0;
        double d0;

        r0 := @this: org.apache.commons.math3.distribution.LaplaceDistribution;

        d0 = r0.<org.apache.commons.math3.distribution.LaplaceDistribution: double beta>;

        return d0;
    }
    public double getSupportLowerBound()
    {
        org.apache.commons.math3.distribution.LaplaceDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.LaplaceDistribution;

        return #-Infinity;
    }
    public double getSupportUpperBound()
    {
        org.apache.commons.math3.distribution.LaplaceDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.LaplaceDistribution;

        return #Infinity;
    }
    public double inverseCumulativeProbability(double) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.distribution.LaplaceDistribution r0;
        double $d0, d1, $d2;
        byte $b0;
        org.apache.commons.math3.exception.OutOfRangeException $r1;
        java.lang.Double $r2, $r3, $r4;

        r0 := @this: org.apache.commons.math3.distribution.LaplaceDistribution;

        $d0 := @parameter0: double;

        $b0 = $d0 cmpg 0.0;

        if $b0 < 0 goto label1;

        $b0 = $d0 cmpl 1.0;

        if $b0 <= 0 goto label2;

     label1:
        $r1 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        specialinvoke $r1.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r2, $r3, $r4);

        throw $r1;

     label2:
        $b0 = $d0 cmpl 0.0;

        if $b0 != 0 goto label3;

        return #-Infinity;

     label3:
        $b0 = $d0 cmpl 1.0;

        if $b0 != 0 goto label4;

        return #Infinity;

     label4:
        $b0 = $d0 cmpl 0.5;

        if $b0 <= 0 goto label6;

        $d0 = 2.0 * $d0;

        $d0 = 2.0 - $d0;

        $d0 = staticinvoke <java.lang.Math: double log(double)>($d0);

        d1 = neg $d0;

     label5:
        $d0 = r0.<org.apache.commons.math3.distribution.LaplaceDistribution: double mu>;

        $d2 = r0.<org.apache.commons.math3.distribution.LaplaceDistribution: double beta>;

        d1 = $d2 * d1;

        $d0 = $d0 + d1;

        return $d0;

     label6:
        $d0 = 2.0 * $d0;

        d1 = staticinvoke <java.lang.Math: double log(double)>($d0);

        goto label5;
    }
    public boolean isSupportConnected()
    {
        org.apache.commons.math3.distribution.LaplaceDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.LaplaceDistribution;

        return 1;
    }
    public boolean isSupportLowerBoundInclusive()
    {
        org.apache.commons.math3.distribution.LaplaceDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.LaplaceDistribution;

        return 0;
    }
    public boolean isSupportUpperBoundInclusive()
    {
        org.apache.commons.math3.distribution.LaplaceDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.LaplaceDistribution;

        return 0;
    }
