org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization extends java.lang.Object
private static final int DEFAULT_MAX_ITERATIONS
private static final double DEFAULT_THRESHOLD
private final double[][] data
private org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution fittedModel
private double logLikelihood
    public void <init>(double[][]) throws org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization r0;
        double[][] $r1, $r8;
        int $i0, $i1, $i2;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r2;
        java.lang.Integer $r3, $r12;
        double[] $r4, $r13;
        int[] $r5;
        java.lang.Class $r6;
        java.lang.Object $r7;
        org.apache.commons.math3.exception.DimensionMismatchException $r9;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r10;
        org.apache.commons.math3.exception.util.LocalizedFormats $r11;

        r0 := @this: org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization;

        $r1 := @parameter0: double[][];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization: double logLikelihood> = 0.0;

        $i0 = lengthof $r1;

        if $i0 >= 1 goto label1;

        $r2 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $i0 = lengthof $r1;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r2.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(java.lang.Number)>($r3);

        throw $r2;

     label1:
        $i0 = lengthof $r1;

        $r4 = $r1[0];

        $i1 = lengthof $r4;

        $r5 = newarray (int)[2];

        $r5[0] = $i0;

        $r5[1] = $i1;

        $r6 = <java.lang.Double: java.lang.Class TYPE>;

        $r7 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r6, $r5);

        $r8 = (double[][]) $r7;

        r0.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization: double[][] data> = $r8;

        $i0 = 0;

     label2:
        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label5;

        $r4 = $r1[$i0];

        $i1 = lengthof $r4;

        $r4 = $r1[0];

        $i2 = lengthof $r4;

        if $i1 == $i2 goto label3;

        $r9 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $r4 = $r1[$i0];

        $i0 = lengthof $r4;

        $r4 = $r1[0];

        $i1 = lengthof $r4;

        specialinvoke $r9.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i0, $i1);

        throw $r9;

     label3:
        $r4 = $r1[$i0];

        $i1 = lengthof $r4;

        if $i1 >= 2 goto label4;

        $r10 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r11 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NUMBER_TOO_SMALL>;

        $r4 = $r1[$i0];

        $i0 = lengthof $r4;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        specialinvoke $r10.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r11, $r3, $r12, 1);

        throw $r10;

     label4:
        $r8 = r0.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization: double[][] data>;

        $r4 = $r1[$i0];

        $r13 = $r1[$i0];

        $i1 = lengthof $r13;

        $r4 = staticinvoke <org.apache.commons.math3.util.MathArrays: double[] copyOf(double[],int)>($r4, $i1);

        $r8[$i0] = $r4;

        $i0 = $i0 + 1;

        goto label2;

     label5:
        return;
    }
    public static org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution estimate(double[][], int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.DimensionMismatchException
    {
        double[][] $r0;
        int $i0, i1, i2, i3, $i4, $i5, i6, i7, i8;
        double[] r1, $r14;
        java.util.ArrayList r2;
        org.apache.commons.math3.distribution.MultivariateNormalDistribution r3;
        double d0, d1, $d2;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r4;
        java.lang.Integer $r5, $r7;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r6;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r8;
        org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow[] $r9;
        org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow $r10;
        int[] $r11;
        java.lang.Class $r12;
        java.lang.Object $r13;
        org.apache.commons.math3.stat.correlation.Covariance $r15;
        org.apache.commons.math3.linear.RealMatrix $r16;
        org.apache.commons.math3.util.Pair $r17;
        java.lang.Double $r18;
        org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution $r19;

        $r0 := @parameter0: double[][];

        $i0 := @parameter1: int;

        $i4 = lengthof $r0;

        if $i4 >= 2 goto label01;

        $r4 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $i0 = lengthof $r0;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r4.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(java.lang.Number)>($r5);

        throw $r4;

     label01:
        if $i0 >= 2 goto label02;

        $r6 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        specialinvoke $r6.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r5, $r7, 1);

        throw $r6;

     label02:
        $i4 = lengthof $r0;

        if $i0 <= $i4 goto label03;

        $r8 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $i0 = lengthof $r0;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r8.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r5, $r7, 1);

        throw $r8;

     label03:
        $i4 = lengthof $r0;

        r1 = $r0[0];

        $i5 = lengthof r1;

        $r9 = newarray (org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow)[$i4];

        i6 = 0;

     label04:
        if i6 >= $i4 goto label05;

        $r10 = new org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow;

        r1 = $r0[i6];

        specialinvoke $r10.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow: void <init>(double[])>(r1);

        $r9[i6] = $r10;

        i6 = i6 + 1;

        goto label04;

     label05:
        staticinvoke <java.util.Arrays: void sort(java.lang.Object[])>($r9);

        d1 = (double) $i0;

        d1 = 1.0 / d1;

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>(int)>($i0);

        i6 = 0;

     label06:
        if i6 >= $i0 goto label11;

        i1 = i6 * $i4;

        i2 = i1 / $i0;

        i1 = i6 + 1;

        i1 = i1 * $i4;

        i1 = i1 / $i0;

        i3 = i1 - i2;

        $r11 = newarray (int)[2];

        $r11[0] = i3;

        $r11[1] = $i5;

        $r12 = <java.lang.Double: java.lang.Class TYPE>;

        $r13 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r12, $r11);

        $r0 = (double[][]) $r13;

        r1 = newarray (double)[$i5];

        i7 = 0;

     label07:
        if i2 >= i1 goto label10;

        i8 = 0;

     label08:
        if i8 >= $i5 goto label09;

        $r10 = $r9[i2];

        $r14 = virtualinvoke $r10.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow: double[] getRow()>();

        d0 = $r14[i8];

        $d2 = r1[i8];

        $d2 = $d2 + d0;

        r1[i8] = $d2;

        $r14 = $r0[i7];

        $r14[i8] = d0;

        i8 = i8 + 1;

        goto label08;

     label09:
        i2 = i2 + 1;

        i7 = i7 + 1;

        goto label07;

     label10:
        d0 = (double) i3;

        d0 = 1.0 / d0;

        staticinvoke <org.apache.commons.math3.util.MathArrays: void scaleInPlace(double,double[])>(d0, r1);

        $r15 = new org.apache.commons.math3.stat.correlation.Covariance;

        specialinvoke $r15.<org.apache.commons.math3.stat.correlation.Covariance: void <init>(double[][])>($r0);

        $r16 = virtualinvoke $r15.<org.apache.commons.math3.stat.correlation.Covariance: org.apache.commons.math3.linear.RealMatrix getCovarianceMatrix()>();

        $r0 = interfaceinvoke $r16.<org.apache.commons.math3.linear.RealMatrix: double[][] getData()>();

        r3 = new org.apache.commons.math3.distribution.MultivariateNormalDistribution;

        specialinvoke r3.<org.apache.commons.math3.distribution.MultivariateNormalDistribution: void <init>(double[],double[][])>(r1, $r0);

        $r17 = new org.apache.commons.math3.util.Pair;

        $r18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        specialinvoke $r17.<org.apache.commons.math3.util.Pair: void <init>(java.lang.Object,java.lang.Object)>($r18, r3);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r17);

        i6 = i6 + 1;

        goto label06;

     label11:
        $r19 = new org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution;

        specialinvoke $r19.<org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution: void <init>(java.util.List)>(r2);

        return $r19;
    }
    public void fit(org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution) throws org.apache.commons.math3.linear.SingularMatrixException, org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization r0;
        org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution $r1;

        r0 := @this: org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization;

        $r1 := @parameter0: org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution;

        virtualinvoke r0.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization: void fit(org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution,int,double)>($r1, 1000, 1.0E-5);

        return;
    }
    public void fit(org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution, int, double) throws org.apache.commons.math3.linear.SingularMatrixException, org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization r0;
        org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution $r1, $r14;
        int $i0, i1, $i3, $i4, $i5, i6, i7, i8;
        double $d0, d1, $d2, $d3, $d4, $d5, $d6;
        double[] r2, $r15, $r20, $r21;
        org.apache.commons.math3.distribution.MultivariateNormalDistribution[] r3;
        org.apache.commons.math3.linear.Array2DRowRealMatrix r4;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r5;
        java.lang.Integer $r6;
        byte $b2;
        java.lang.Double $r7;
        double[][] $r8, r18, $r19;
        java.util.List $r9;
        java.lang.Object $r10;
        org.apache.commons.math3.util.Pair $r11;
        org.apache.commons.math3.distribution.MultivariateNormalDistribution $r12;
        org.apache.commons.math3.exception.DimensionMismatchException $r13;
        int[] $r16;
        java.lang.Class $r17;
        org.apache.commons.math3.linear.RealMatrix[] $r22;
        org.apache.commons.math3.linear.RealMatrix $r23, $r24;
        double[][][] r25;
        org.apache.commons.math3.exception.ConvergenceException $r26;

        r0 := @this: org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization;

        $r1 := @parameter0: org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution;

        $i0 := @parameter1: int;

        $d0 := @parameter2: double;

        if $i0 >= 1 goto label01;

        $r5 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r5.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(java.lang.Number)>($r6);

        throw $r5;

     label01:
        $b2 = $d0 cmpg 4.9E-324;

        if $b2 >= 0 goto label02;

        $r5 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        specialinvoke $r5.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(java.lang.Number)>($r7);

        throw $r5;

     label02:
        $r8 = r0.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization: double[][] data>;

        i1 = lengthof $r8;

        $r8 = r0.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization: double[][] data>;

        r2 = $r8[0];

        $i3 = lengthof r2;

        $r9 = virtualinvoke $r1.<org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution: java.util.List getComponents()>();

        $i4 = interfaceinvoke $r9.<java.util.List: int size()>();

        $r9 = virtualinvoke $r1.<org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution: java.util.List getComponents()>();

        $r10 = interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>(0);

        $r11 = (org.apache.commons.math3.util.Pair) $r10;

        $r10 = virtualinvoke $r11.<org.apache.commons.math3.util.Pair: java.lang.Object getSecond()>();

        $r12 = (org.apache.commons.math3.distribution.MultivariateNormalDistribution) $r10;

        r2 = virtualinvoke $r12.<org.apache.commons.math3.distribution.MultivariateNormalDistribution: double[] getMeans()>();

        $i5 = lengthof r2;

        if $i5 == $i3 goto label03;

        $r13 = new org.apache.commons.math3.exception.DimensionMismatchException;

        specialinvoke $r13.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i5, $i3);

        throw $r13;

     label03:
        d1 = 0.0;

        r0.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization: double logLikelihood> = #-Infinity;

        $r14 = new org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution;

        $r9 = virtualinvoke $r1.<org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution: java.util.List getComponents()>();

        specialinvoke $r14.<org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution: void <init>(java.util.List)>($r9);

        r0.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization: org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution fittedModel> = $r14;

        i6 = 0;

     label04:
        $i5 = i6 + 1;

        if i6 > $i0 goto label25;

        $d2 = r0.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization: double logLikelihood>;

        $d2 = d1 - $d2;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d2);

        $b2 = $d2 cmpl $d0;

        if $b2 <= 0 goto label25;

        d1 = r0.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization: double logLikelihood>;

        $d2 = 0.0;

        $r1 = r0.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization: org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution fittedModel>;

        $r9 = virtualinvoke $r1.<org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution: java.util.List getComponents()>();

        $r15 = newarray (double)[$i4];

        r3 = newarray (org.apache.commons.math3.distribution.MultivariateNormalDistribution)[$i4];

        i6 = 0;

     label05:
        if i6 >= $i4 goto label06;

        $r10 = interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>(i6);

        $r11 = (org.apache.commons.math3.util.Pair) $r10;

        $r10 = virtualinvoke $r11.<org.apache.commons.math3.util.Pair: java.lang.Object getFirst()>();

        $r7 = (java.lang.Double) $r10;

        $d3 = virtualinvoke $r7.<java.lang.Double: double doubleValue()>();

        $r15[i6] = $d3;

        $r10 = interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>(i6);

        $r11 = (org.apache.commons.math3.util.Pair) $r10;

        $r10 = virtualinvoke $r11.<org.apache.commons.math3.util.Pair: java.lang.Object getSecond()>();

        $r12 = (org.apache.commons.math3.distribution.MultivariateNormalDistribution) $r10;

        r3[i6] = $r12;

        i6 = i6 + 1;

        goto label05;

     label06:
        $r16 = newarray (int)[2];

        $r16[0] = i1;

        $r16[1] = $i4;

        $r17 = <java.lang.Double: java.lang.Class TYPE>;

        $r10 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r17, $r16);

        $r8 = (double[][]) $r10;

        r2 = newarray (double)[$i4];

        $r16 = newarray (int)[2];

        $r16[0] = $i4;

        $r16[1] = $i3;

        $r17 = <java.lang.Double: java.lang.Class TYPE>;

        $r10 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r17, $r16);

        r18 = (double[][]) $r10;

        i6 = 0;

     label07:
        if i6 >= i1 goto label12;

        $r1 = r0.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization: org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution fittedModel>;

        $r19 = r0.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization: double[][] data>;

        $r20 = $r19[i6];

        $d3 = virtualinvoke $r1.<org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution: double density(double[])>($r20);

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d3);

        $d2 = $d2 + $d4;

        i7 = 0;

     label08:
        if i7 >= $i4 goto label11;

        $r20 = $r8[i6];

        $d4 = $r15[i7];

        $r12 = r3[i7];

        $r19 = r0.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization: double[][] data>;

        $r21 = $r19[i6];

        $d5 = virtualinvoke $r12.<org.apache.commons.math3.distribution.MultivariateNormalDistribution: double density(double[])>($r21);

        $d4 = $d4 * $d5;

        $d4 = $d4 / $d3;

        $r20[i7] = $d4;

        $d4 = r2[i7];

        $r20 = $r8[i6];

        $d5 = $r20[i7];

        $d4 = $d4 + $d5;

        r2[i7] = $d4;

        i8 = 0;

     label09:
        if i8 >= $i3 goto label10;

        $r20 = r18[i7];

        $d4 = $r20[i8];

        $r21 = $r8[i6];

        $d5 = $r21[i7];

        $r19 = r0.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization: double[][] data>;

        $r21 = $r19[i6];

        $d6 = $r21[i8];

        $d5 = $d5 * $d6;

        $d4 = $d4 + $d5;

        $r20[i8] = $d4;

        i8 = i8 + 1;

        goto label09;

     label10:
        i7 = i7 + 1;

        goto label08;

     label11:
        i6 = i6 + 1;

        goto label07;

     label12:
        $d3 = (double) i1;

        $d2 = $d2 / $d3;

        r0.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization: double logLikelihood> = $d2;

        $r15 = newarray (double)[$i4];

        $r16 = newarray (int)[2];

        $r16[0] = $i4;

        $r16[1] = $i3;

        $r17 = <java.lang.Double: java.lang.Class TYPE>;

        $r10 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r17, $r16);

        $r19 = (double[][]) $r10;

        i6 = 0;

     label13:
        if i6 >= $i4 goto label16;

        $d2 = r2[i6];

        $d3 = (double) i1;

        $d2 = $d2 / $d3;

        $r15[i6] = $d2;

        i7 = 0;

     label14:
        if i7 >= $i3 goto label15;

        $r20 = $r19[i6];

        $r21 = r18[i6];

        $d2 = $r21[i7];

        $d3 = r2[i6];

        $d2 = $d2 / $d3;

        $r20[i7] = $d2;

        i7 = i7 + 1;

        goto label14;

     label15:
        i6 = i6 + 1;

        goto label13;

     label16:
        $r22 = newarray (org.apache.commons.math3.linear.RealMatrix)[$i4];

        i6 = 0;

     label17:
        if i6 >= $i4 goto label18;

        r4 = new org.apache.commons.math3.linear.Array2DRowRealMatrix;

        specialinvoke r4.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void <init>(int,int)>($i3, $i3);

        $r22[i6] = r4;

        i6 = i6 + 1;

        goto label17;

     label18:
        i6 = 0;

     label19:
        if i6 >= i1 goto label22;

        i7 = 0;

     label20:
        if i7 >= $i4 goto label21;

        r4 = new org.apache.commons.math3.linear.Array2DRowRealMatrix;

        r18 = r0.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization: double[][] data>;

        $r20 = r18[i6];

        $r21 = $r19[i7];

        $r20 = staticinvoke <org.apache.commons.math3.util.MathArrays: double[] ebeSubtract(double[],double[])>($r20, $r21);

        specialinvoke r4.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void <init>(double[])>($r20);

        $r23 = interfaceinvoke r4.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix transpose()>();

        $r23 = interfaceinvoke r4.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>($r23);

        $r20 = $r8[i6];

        $d2 = $r20[i7];

        $r23 = interfaceinvoke $r23.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix scalarMultiply(double)>($d2);

        $r24 = $r22[i7];

        $r23 = interfaceinvoke $r24.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix add(org.apache.commons.math3.linear.RealMatrix)>($r23);

        $r22[i7] = $r23;

        i7 = i7 + 1;

        goto label20;

     label21:
        i6 = i6 + 1;

        goto label19;

     label22:
        $r16 = newarray (int)[3];

        $r16[0] = $i4;

        $r16[1] = $i3;

        $r16[2] = $i3;

        $r17 = <java.lang.Double: java.lang.Class TYPE>;

        $r10 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r17, $r16);

        r25 = (double[][][]) $r10;

        i6 = 0;

     label23:
        if i6 >= $i4 goto label24;

        $r23 = $r22[i6];

        $d2 = r2[i6];

        $d2 = 1.0 / $d2;

        $r23 = interfaceinvoke $r23.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix scalarMultiply(double)>($d2);

        $r22[i6] = $r23;

        $r23 = $r22[i6];

        $r8 = interfaceinvoke $r23.<org.apache.commons.math3.linear.RealMatrix: double[][] getData()>();

        r25[i6] = $r8;

        i6 = i6 + 1;

        goto label23;

     label24:
        $r1 = new org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution;

        specialinvoke $r1.<org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution: void <init>(double[],double[][],double[][][])>($r15, $r19, r25);

        r0.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization: org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution fittedModel> = $r1;

        i6 = $i5;

        goto label04;

     label25:
        $d2 = r0.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization: double logLikelihood>;

        d1 = d1 - $d2;

        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d1);

        $b2 = d1 cmpl $d0;

        if $b2 <= 0 goto label26;

        $r26 = new org.apache.commons.math3.exception.ConvergenceException;

        specialinvoke $r26.<org.apache.commons.math3.exception.ConvergenceException: void <init>()>();

        throw $r26;

     label26:
        return;
    }
    public org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution getFittedModel()
    {
        org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization r0;
        org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution $r1, $r3;
        java.util.List $r2;

        r0 := @this: org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization;

        $r1 = new org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution;

        $r3 = r0.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization: org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution fittedModel>;

        $r2 = virtualinvoke $r3.<org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution: java.util.List getComponents()>();

        specialinvoke $r1.<org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution: void <init>(java.util.List)>($r2);

        return $r1;
    }
    public double getLogLikelihood()
    {
        org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization r0;
        double d0;

        r0 := @this: org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization;

        d0 = r0.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization: double logLikelihood>;

        return d0;
    }
