org.apache.commons.math3.distribution.ZipfDistribution$ZipfRejectionInversionSampler extends java.lang.Object
private final double exponent
private final double hIntegralNumberOfElements
private final double hIntegralX1
private final int numberOfElements
private final double s
    void <init>(int, double)
    {
        org.apache.commons.math3.distribution.ZipfDistribution$ZipfRejectionInversionSampler r0;
        int $i0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.distribution.ZipfDistribution$ZipfRejectionInversionSampler;

        $i0 := @parameter0: int;

        $d0 := @parameter1: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.distribution.ZipfDistribution$ZipfRejectionInversionSampler: double exponent> = $d0;

        r0.<org.apache.commons.math3.distribution.ZipfDistribution$ZipfRejectionInversionSampler: int numberOfElements> = $i0;

        $d0 = specialinvoke r0.<org.apache.commons.math3.distribution.ZipfDistribution$ZipfRejectionInversionSampler: double hIntegral(double)>(1.5);

        $d0 = $d0 - 1.0;

        r0.<org.apache.commons.math3.distribution.ZipfDistribution$ZipfRejectionInversionSampler: double hIntegralX1> = $d0;

        $d0 = (double) $i0;

        $d0 = $d0 + 0.5;

        $d0 = specialinvoke r0.<org.apache.commons.math3.distribution.ZipfDistribution$ZipfRejectionInversionSampler: double hIntegral(double)>($d0);

        r0.<org.apache.commons.math3.distribution.ZipfDistribution$ZipfRejectionInversionSampler: double hIntegralNumberOfElements> = $d0;

        $d0 = specialinvoke r0.<org.apache.commons.math3.distribution.ZipfDistribution$ZipfRejectionInversionSampler: double hIntegral(double)>(2.5);

        $d1 = specialinvoke r0.<org.apache.commons.math3.distribution.ZipfDistribution$ZipfRejectionInversionSampler: double h(double)>(2.0);

        $d0 = $d0 - $d1;

        $d0 = specialinvoke r0.<org.apache.commons.math3.distribution.ZipfDistribution$ZipfRejectionInversionSampler: double hIntegralInverse(double)>($d0);

        $d0 = 2.0 - $d0;

        r0.<org.apache.commons.math3.distribution.ZipfDistribution$ZipfRejectionInversionSampler: double s> = $d0;

        return;
    }
    private double h(double)
    {
        org.apache.commons.math3.distribution.ZipfDistribution$ZipfRejectionInversionSampler r0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.distribution.ZipfDistribution$ZipfRejectionInversionSampler;

        $d0 := @parameter0: double;

        $d1 = r0.<org.apache.commons.math3.distribution.ZipfDistribution$ZipfRejectionInversionSampler: double exponent>;

        $d1 = neg $d1;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d0);

        $d0 = $d1 * $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d0);

        return $d0;
    }
    private double hIntegral(double)
    {
        org.apache.commons.math3.distribution.ZipfDistribution$ZipfRejectionInversionSampler r0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.distribution.ZipfDistribution$ZipfRejectionInversionSampler;

        $d0 := @parameter0: double;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d0);

        $d1 = r0.<org.apache.commons.math3.distribution.ZipfDistribution$ZipfRejectionInversionSampler: double exponent>;

        $d1 = 1.0 - $d1;

        $d1 = $d1 * $d0;

        $d1 = staticinvoke <org.apache.commons.math3.distribution.ZipfDistribution$ZipfRejectionInversionSampler: double helper2(double)>($d1);

        $d0 = $d1 * $d0;

        return $d0;
    }
    private double hIntegralInverse(double)
    {
        org.apache.commons.math3.distribution.ZipfDistribution$ZipfRejectionInversionSampler r0;
        double $d0, $d1;
        byte $b0;

        r0 := @this: org.apache.commons.math3.distribution.ZipfDistribution$ZipfRejectionInversionSampler;

        $d0 := @parameter0: double;

        $d1 = r0.<org.apache.commons.math3.distribution.ZipfDistribution$ZipfRejectionInversionSampler: double exponent>;

        $d1 = 1.0 - $d1;

        $d1 = $d0 * $d1;

        $b0 = $d1 cmpg -1.0;

        if $b0 >= 0 goto label1;

        $d1 = -1.0;

     label1:
        $d1 = staticinvoke <org.apache.commons.math3.distribution.ZipfDistribution$ZipfRejectionInversionSampler: double helper1(double)>($d1);

        $d0 = $d1 * $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d0);

        return $d0;
    }
    static double helper1(double)
    {
        double $d0, $d1;
        byte $b0;

        $d0 := @parameter0: double;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        $b0 = $d1 cmpl 1.0E-8;

        if $b0 <= 0 goto label1;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double log1p(double)>($d0);

        $d0 = $d1 / $d0;

        return $d0;

     label1:
        $d1 = 0.25 * $d0;

        $d1 = 0.3333333333333333 - $d1;

        $d1 = $d1 * $d0;

        $d1 = 0.5 - $d1;

        $d0 = $d1 * $d0;

        $d0 = 1.0 - $d0;

        return $d0;
    }
    static double helper2(double)
    {
        double $d0, $d1, $d2;
        byte $b0;

        $d0 := @parameter0: double;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        $b0 = $d1 cmpl 1.0E-8;

        if $b0 <= 0 goto label1;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double expm1(double)>($d0);

        $d0 = $d1 / $d0;

        return $d0;

     label1:
        $d1 = 0.5 * $d0;

        $d2 = 0.3333333333333333 * $d0;

        $d0 = 0.25 * $d0;

        $d0 = $d0 + 1.0;

        $d0 = $d2 * $d0;

        $d0 = $d0 + 1.0;

        $d0 = $d1 * $d0;

        $d0 = $d0 + 1.0;

        return $d0;
    }
    int sample(org.apache.commons.math3.random.RandomGenerator)
    {
        org.apache.commons.math3.distribution.ZipfDistribution$ZipfRejectionInversionSampler r0;
        org.apache.commons.math3.random.RandomGenerator $r1;
        double d0, $d1, $d2, $d3;
        int i0, $i2;
        byte $b1;

        r0 := @this: org.apache.commons.math3.distribution.ZipfDistribution$ZipfRejectionInversionSampler;

        $r1 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

     label1:
        d0 = r0.<org.apache.commons.math3.distribution.ZipfDistribution$ZipfRejectionInversionSampler: double hIntegralNumberOfElements>;

        $d2 = interfaceinvoke $r1.<org.apache.commons.math3.random.RandomGenerator: double nextDouble()>();

        $d3 = r0.<org.apache.commons.math3.distribution.ZipfDistribution$ZipfRejectionInversionSampler: double hIntegralX1>;

        $d1 = r0.<org.apache.commons.math3.distribution.ZipfDistribution$ZipfRejectionInversionSampler: double hIntegralNumberOfElements>;

        $d1 = $d3 - $d1;

        $d2 = $d2 * $d1;

        d0 = d0 + $d2;

        $d2 = specialinvoke r0.<org.apache.commons.math3.distribution.ZipfDistribution$ZipfRejectionInversionSampler: double hIntegralInverse(double)>(d0);

        $d1 = 0.5 + $d2;

        i0 = (int) $d1;

        if i0 >= 1 goto label3;

        i0 = 1;

     label2:
        $d1 = (double) i0;

        $d2 = $d1 - $d2;

        $d1 = r0.<org.apache.commons.math3.distribution.ZipfDistribution$ZipfRejectionInversionSampler: double s>;

        $b1 = $d2 cmpg $d1;

        if $b1 <= 0 goto label4;

        $d2 = (double) i0;

        $d2 = $d2 + 0.5;

        $d2 = specialinvoke r0.<org.apache.commons.math3.distribution.ZipfDistribution$ZipfRejectionInversionSampler: double hIntegral(double)>($d2);

        $d1 = (double) i0;

        $d1 = specialinvoke r0.<org.apache.commons.math3.distribution.ZipfDistribution$ZipfRejectionInversionSampler: double h(double)>($d1);

        $d2 = $d2 - $d1;

        $b1 = d0 cmpl $d2;

        if $b1 < 0 goto label1;

        return i0;

     label3:
        $i2 = r0.<org.apache.commons.math3.distribution.ZipfDistribution$ZipfRejectionInversionSampler: int numberOfElements>;

        if i0 <= $i2 goto label2;

        i0 = r0.<org.apache.commons.math3.distribution.ZipfDistribution$ZipfRejectionInversionSampler: int numberOfElements>;

        goto label2;

     label4:
        return i0;
    }
