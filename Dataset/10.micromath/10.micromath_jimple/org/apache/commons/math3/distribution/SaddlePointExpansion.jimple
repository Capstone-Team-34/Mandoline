org.apache.commons.math3.distribution.SaddlePointExpansion extends java.lang.Object
private static final double[] EXACT_STIRLING_ERRORS
private static final double HALF_LOG_2_PI
    static void <clinit>()
    {
        double $d0;
        double[] $r0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(6.283185307179586);

        $d0 = 0.5 * $d0;

        <org.apache.commons.math3.distribution.SaddlePointExpansion: double HALF_LOG_2_PI> = $d0;

        $r0 = newarray (double)[31];

        $r0[0] = 0.0;

        $r0[1] = 0.15342640972002736;

        $r0[2] = 0.08106146679532726;

        $r0[3] = 0.05481412105191765;

        $r0[4] = 0.0413406959554093;

        $r0[5] = 0.03316287351993629;

        $r0[6] = 0.02767792568499834;

        $r0[7] = 0.023746163656297496;

        $r0[8] = 0.020790672103765093;

        $r0[9] = 0.018488450532673187;

        $r0[10] = 0.016644691189821193;

        $r0[11] = 0.015134973221917378;

        $r0[12] = 0.013876128823070748;

        $r0[13] = 0.012810465242920227;

        $r0[14] = 0.01189670994589177;

        $r0[15] = 0.011104559758206917;

        $r0[16] = 0.010411265261972096;

        $r0[17] = 0.009799416126158804;

        $r0[18] = 0.009255462182712733;

        $r0[19] = 0.008768700134139386;

        $r0[20] = 0.00833056343336287;

        $r0[21] = 0.00793411456431402;

        $r0[22] = 0.007573675487951841;

        $r0[23] = 0.007244554301320383;

        $r0[24] = 0.00694284010720953;

        $r0[25] = 0.006665247032707682;

        $r0[26] = 0.006408994188004207;

        $r0[27] = 0.006171712263039458;

        $r0[28] = 0.0059513701127588475;

        $r0[29] = 0.0057462165130101155;

        $r0[30] = 0.005554733551962801;

        <org.apache.commons.math3.distribution.SaddlePointExpansion: double[] EXACT_STIRLING_ERRORS> = $r0;

        return;
    }
    private void <init>()
    {
        org.apache.commons.math3.distribution.SaddlePointExpansion r0;

        r0 := @this: org.apache.commons.math3.distribution.SaddlePointExpansion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    static double getDeviancePart(double, double)
    {
        double $d0, $d1, d2, $d3, $d4;
        byte $b0;
        int i1, $i2;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        d2 = $d0 - $d1;

        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d2);

        $d3 = $d0 + $d1;

        $d3 = 0.1 * $d3;

        $b0 = d2 cmpg $d3;

        if $b0 >= 0 goto label3;

        d2 = $d0 - $d1;

        $d1 = $d0 + $d1;

        $d3 = d2 / $d1;

        $d1 = $d3 * d2;

        d2 = #NaN;

        $d0 = 2.0 * $d0;

        $d0 = $d0 * $d3;

        $d3 = $d3 * $d3;

        i1 = 1;

     label1:
        $b0 = $d1 cmpl d2;

        if $b0 == 0 goto label2;

        d2 = $d1;

        $d0 = $d0 * $d3;

        $i2 = i1 * 2;

        $i2 = $i2 + 1;

        $d4 = (double) $i2;

        $d4 = $d0 / $d4;

        $d1 = $d1 + $d4;

        i1 = i1 + 1;

        goto label1;

     label2:
        return $d1;

     label3:
        d2 = $d0 / $d1;

        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(d2);

        d2 = d2 * $d0;

        $d1 = d2 + $d1;

        $d0 = $d1 - $d0;

        return $d0;
    }
    static double getStirlingError(double)
    {
        double $d0, d1, $d2, $d3;
        int $i0;
        byte $b1;
        double[] $r0;

        $d0 := @parameter0: double;

        $b1 = $d0 cmpg 15.0;

        if $b1 >= 0 goto label2;

        d1 = 2.0 * $d0;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double floor(double)>(d1);

        $b1 = $d2 cmpl d1;

        if $b1 != 0 goto label1;

        $r0 = <org.apache.commons.math3.distribution.SaddlePointExpansion: double[] EXACT_STIRLING_ERRORS>;

        $i0 = (int) d1;

        $d0 = $r0[$i0];

        return $d0;

     label1:
        d1 = 1.0 + $d0;

        d1 = staticinvoke <org.apache.commons.math3.special.Gamma: double logGamma(double)>(d1);

        $d2 = 0.5 + $d0;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d0);

        $d2 = $d2 * $d3;

        d1 = d1 - $d2;

        $d0 = d1 + $d0;

        d1 = <org.apache.commons.math3.distribution.SaddlePointExpansion: double HALF_LOG_2_PI>;

        $d0 = $d0 - d1;

        return $d0;

     label2:
        d1 = $d0 * $d0;

        $d2 = 8.417508417508417E-4 / d1;

        $d2 = 5.952380952380953E-4 - $d2;

        $d2 = $d2 / d1;

        $d2 = 7.936507936507937E-4 - $d2;

        $d2 = $d2 / d1;

        $d2 = 0.002777777777777778 - $d2;

        d1 = $d2 / d1;

        d1 = 0.08333333333333333 - d1;

        $d0 = d1 / $d0;

        return $d0;
    }
    static double logBinomialProbability(int, int, double, double)
    {
        int $i0, $i1, $i3;
        double $d0, $d1, $d2, $d3, $d4;
        byte $b2;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $d0 := @parameter2: double;

        $d1 := @parameter3: double;

        if $i0 != 0 goto label2;

        $b2 = $d0 cmpg 0.1;

        if $b2 >= 0 goto label1;

        $d2 = (double) $i1;

        $d3 = (double) $i1;

        $d1 = $d3 * $d1;

        $d1 = staticinvoke <org.apache.commons.math3.distribution.SaddlePointExpansion: double getDeviancePart(double,double)>($d2, $d1);

        $d1 = neg $d1;

        $d2 = (double) $i1;

        $d0 = $d2 * $d0;

        $d0 = $d1 - $d0;

        return $d0;

     label1:
        $d0 = (double) $i1;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d1);

        $d0 = $d0 * $d1;

        return $d0;

     label2:
        if $i0 != $i1 goto label4;

        $b2 = $d1 cmpg 0.1;

        if $b2 >= 0 goto label3;

        $d2 = (double) $i1;

        $d3 = (double) $i1;

        $d0 = $d3 * $d0;

        $d0 = staticinvoke <org.apache.commons.math3.distribution.SaddlePointExpansion: double getDeviancePart(double,double)>($d2, $d0);

        $d0 = neg $d0;

        $d2 = (double) $i1;

        $d1 = $d2 * $d1;

        $d0 = $d0 - $d1;

        return $d0;

     label3:
        $d1 = (double) $i1;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d0);

        $d0 = $d1 * $d0;

        return $d0;

     label4:
        $d2 = (double) $i1;

        $d2 = staticinvoke <org.apache.commons.math3.distribution.SaddlePointExpansion: double getStirlingError(double)>($d2);

        $d3 = (double) $i0;

        $d3 = staticinvoke <org.apache.commons.math3.distribution.SaddlePointExpansion: double getStirlingError(double)>($d3);

        $d2 = $d2 - $d3;

        $i3 = $i1 - $i0;

        $d3 = (double) $i3;

        $d3 = staticinvoke <org.apache.commons.math3.distribution.SaddlePointExpansion: double getStirlingError(double)>($d3);

        $d2 = $d2 - $d3;

        $d3 = (double) $i0;

        $d4 = (double) $i1;

        $d0 = $d4 * $d0;

        $d0 = staticinvoke <org.apache.commons.math3.distribution.SaddlePointExpansion: double getDeviancePart(double,double)>($d3, $d0);

        $d0 = $d2 - $d0;

        $i3 = $i1 - $i0;

        $d2 = (double) $i3;

        $d3 = (double) $i1;

        $d1 = $d3 * $d1;

        $d1 = staticinvoke <org.apache.commons.math3.distribution.SaddlePointExpansion: double getDeviancePart(double,double)>($d2, $d1);

        $d0 = $d0 - $d1;

        $d1 = (double) $i0;

        $d1 = 6.283185307179586 * $d1;

        $i0 = $i1 - $i0;

        $d2 = (double) $i0;

        $d1 = $d1 * $d2;

        $d2 = (double) $i1;

        $d1 = $d1 / $d2;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d1);

        $d1 = -0.5 * $d1;

        $d0 = $d0 + $d1;

        return $d0;
    }
