org.apache.commons.math3.distribution.FDistribution extends org.apache.commons.math3.distribution.AbstractRealDistribution
public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY
private static final long serialVersionUID
private final double denominatorDegreesOfFreedom
private final double numeratorDegreesOfFreedom
private double numericalVariance
private boolean numericalVarianceIsCalculated
private final double solverAbsoluteAccuracy
    public void <init>(double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.distribution.FDistribution r0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.distribution.FDistribution;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.distribution.FDistribution: void <init>(double,double,double)>($d0, $d1, 1.0E-9);

        return;
    }
    public void <init>(double, double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.distribution.FDistribution r0;
        double $d0, $d1, $d2;
        org.apache.commons.math3.random.Well19937c $r1;

        r0 := @this: org.apache.commons.math3.distribution.FDistribution;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $r1 = new org.apache.commons.math3.random.Well19937c;

        specialinvoke $r1.<org.apache.commons.math3.random.Well19937c: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.distribution.FDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double,double,double)>($r1, $d0, $d1, $d2);

        return;
    }
    public void <init>(org.apache.commons.math3.random.RandomGenerator, double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.distribution.FDistribution r0;
        org.apache.commons.math3.random.RandomGenerator $r1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.distribution.FDistribution;

        $r1 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        $d0 := @parameter1: double;

        $d1 := @parameter2: double;

        specialinvoke r0.<org.apache.commons.math3.distribution.FDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double,double,double)>($r1, $d0, $d1, 1.0E-9);

        return;
    }
    public void <init>(org.apache.commons.math3.random.RandomGenerator, double, double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.distribution.FDistribution r0;
        org.apache.commons.math3.random.RandomGenerator $r1;
        double $d0, $d1, $d2;
        byte $b0;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3;
        java.lang.Double $r4;

        r0 := @this: org.apache.commons.math3.distribution.FDistribution;

        $r1 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        $d0 := @parameter1: double;

        $d1 := @parameter2: double;

        $d2 := @parameter3: double;

        specialinvoke r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator)>($r1);

        r0.<org.apache.commons.math3.distribution.FDistribution: double numericalVariance> = #NaN;

        r0.<org.apache.commons.math3.distribution.FDistribution: boolean numericalVarianceIsCalculated> = 0;

        $b0 = $d0 cmpg 0.0;

        if $b0 > 0 goto label1;

        $r2 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats DEGREES_OF_FREEDOM>;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        specialinvoke $r2.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r3, $r4);

        throw $r2;

     label1:
        $b0 = $d1 cmpg 0.0;

        if $b0 > 0 goto label2;

        $r2 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats DEGREES_OF_FREEDOM>;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        specialinvoke $r2.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r3, $r4);

        throw $r2;

     label2:
        r0.<org.apache.commons.math3.distribution.FDistribution: double numeratorDegreesOfFreedom> = $d0;

        r0.<org.apache.commons.math3.distribution.FDistribution: double denominatorDegreesOfFreedom> = $d1;

        r0.<org.apache.commons.math3.distribution.FDistribution: double solverAbsoluteAccuracy> = $d2;

        return;
    }
    protected double calculateNumericalVariance()
    {
        org.apache.commons.math3.distribution.FDistribution r0;
        double d0, $d1, $d2, $d3, $d4;
        byte $b0;

        r0 := @this: org.apache.commons.math3.distribution.FDistribution;

        $d1 = virtualinvoke r0.<org.apache.commons.math3.distribution.FDistribution: double getDenominatorDegreesOfFreedom()>();

        $b0 = $d1 cmpl 4.0;

        if $b0 <= 0 goto label1;

        $d2 = virtualinvoke r0.<org.apache.commons.math3.distribution.FDistribution: double getNumeratorDegreesOfFreedom()>();

        d0 = $d1 - 2.0;

        $d3 = $d1 * $d1;

        $d3 = $d3 * 2.0;

        $d4 = $d2 + $d1;

        $d4 = $d4 - 2.0;

        $d3 = $d3 * $d4;

        d0 = d0 * d0;

        $d2 = d0 * $d2;

        $d1 = $d1 - 4.0;

        $d1 = $d2 * $d1;

        $d1 = $d3 / $d1;

        return $d1;

     label1:
        return #NaN;
    }
    public double cumulativeProbability(double)
    {
        org.apache.commons.math3.distribution.FDistribution r0;
        double $d0, d1, d2, $d3;
        byte $b0;

        r0 := @this: org.apache.commons.math3.distribution.FDistribution;

        $d0 := @parameter0: double;

        $b0 = $d0 cmpg 0.0;

        if $b0 > 0 goto label1;

        return 0.0;

     label1:
        d2 = r0.<org.apache.commons.math3.distribution.FDistribution: double numeratorDegreesOfFreedom>;

        d1 = r0.<org.apache.commons.math3.distribution.FDistribution: double denominatorDegreesOfFreedom>;

        $d3 = d2 * $d0;

        $d0 = d2 * $d0;

        $d0 = $d0 + d1;

        $d0 = $d3 / $d0;

        d2 = 0.5 * d2;

        d1 = 0.5 * d1;

        $d0 = staticinvoke <org.apache.commons.math3.special.Beta: double regularizedBeta(double,double,double)>($d0, d2, d1);

        return $d0;
    }
    public double density(double)
    {
        org.apache.commons.math3.distribution.FDistribution r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.distribution.FDistribution;

        $d0 := @parameter0: double;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.distribution.FDistribution: double logDensity(double)>($d0);

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d0);

        return $d0;
    }
    public double getDenominatorDegreesOfFreedom()
    {
        org.apache.commons.math3.distribution.FDistribution r0;
        double d0;

        r0 := @this: org.apache.commons.math3.distribution.FDistribution;

        d0 = r0.<org.apache.commons.math3.distribution.FDistribution: double denominatorDegreesOfFreedom>;

        return d0;
    }
    public double getNumeratorDegreesOfFreedom()
    {
        org.apache.commons.math3.distribution.FDistribution r0;
        double d0;

        r0 := @this: org.apache.commons.math3.distribution.FDistribution;

        d0 = r0.<org.apache.commons.math3.distribution.FDistribution: double numeratorDegreesOfFreedom>;

        return d0;
    }
    public double getNumericalMean()
    {
        org.apache.commons.math3.distribution.FDistribution r0;
        double $d0, $d1;
        byte $b0;

        r0 := @this: org.apache.commons.math3.distribution.FDistribution;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.distribution.FDistribution: double getDenominatorDegreesOfFreedom()>();

        $b0 = $d0 cmpl 2.0;

        if $b0 <= 0 goto label1;

        $d1 = $d0 - 2.0;

        $d0 = $d0 / $d1;

        return $d0;

     label1:
        return #NaN;
    }
    public double getNumericalVariance()
    {
        org.apache.commons.math3.distribution.FDistribution r0;
        double $d0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.distribution.FDistribution;

        $z0 = r0.<org.apache.commons.math3.distribution.FDistribution: boolean numericalVarianceIsCalculated>;

        if $z0 != 0 goto label1;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.distribution.FDistribution: double calculateNumericalVariance()>();

        r0.<org.apache.commons.math3.distribution.FDistribution: double numericalVariance> = $d0;

        r0.<org.apache.commons.math3.distribution.FDistribution: boolean numericalVarianceIsCalculated> = 1;

     label1:
        $d0 = r0.<org.apache.commons.math3.distribution.FDistribution: double numericalVariance>;

        return $d0;
    }
    protected double getSolverAbsoluteAccuracy()
    {
        org.apache.commons.math3.distribution.FDistribution r0;
        double d0;

        r0 := @this: org.apache.commons.math3.distribution.FDistribution;

        d0 = r0.<org.apache.commons.math3.distribution.FDistribution: double solverAbsoluteAccuracy>;

        return d0;
    }
    public double getSupportLowerBound()
    {
        org.apache.commons.math3.distribution.FDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.FDistribution;

        return 0.0;
    }
    public double getSupportUpperBound()
    {
        org.apache.commons.math3.distribution.FDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.FDistribution;

        return #Infinity;
    }
    public boolean isSupportConnected()
    {
        org.apache.commons.math3.distribution.FDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.FDistribution;

        return 1;
    }
    public boolean isSupportLowerBoundInclusive()
    {
        org.apache.commons.math3.distribution.FDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.FDistribution;

        return 0;
    }
    public boolean isSupportUpperBoundInclusive()
    {
        org.apache.commons.math3.distribution.FDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.FDistribution;

        return 0;
    }
    public double logDensity(double)
    {
        org.apache.commons.math3.distribution.FDistribution r0;
        double $d0, d1, d2, $d3, $d4, $d5, $d6;

        r0 := @this: org.apache.commons.math3.distribution.FDistribution;

        $d0 := @parameter0: double;

        d2 = r0.<org.apache.commons.math3.distribution.FDistribution: double numeratorDegreesOfFreedom>;

        d2 = d2 / 2.0;

        d1 = r0.<org.apache.commons.math3.distribution.FDistribution: double denominatorDegreesOfFreedom>;

        d1 = d1 / 2.0;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d0);

        $d4 = r0.<org.apache.commons.math3.distribution.FDistribution: double numeratorDegreesOfFreedom>;

        $d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d4);

        $d4 = r0.<org.apache.commons.math3.distribution.FDistribution: double denominatorDegreesOfFreedom>;

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d4);

        $d6 = r0.<org.apache.commons.math3.distribution.FDistribution: double numeratorDegreesOfFreedom>;

        $d0 = $d6 * $d0;

        $d6 = r0.<org.apache.commons.math3.distribution.FDistribution: double denominatorDegreesOfFreedom>;

        $d0 = $d0 + $d6;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d0);

        $d5 = d2 * $d5;

        $d6 = d2 * $d3;

        $d5 = $d5 + $d6;

        $d3 = $d5 - $d3;

        $d4 = d1 * $d4;

        $d3 = $d3 + $d4;

        $d4 = d2 * $d0;

        $d3 = $d3 - $d4;

        $d0 = d1 * $d0;

        $d0 = $d3 - $d0;

        d2 = staticinvoke <org.apache.commons.math3.special.Beta: double logBeta(double,double)>(d2, d1);

        $d0 = $d0 - d2;

        return $d0;
    }
