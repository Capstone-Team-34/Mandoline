org.apache.commons.math3.distribution.AbstractIntegerDistribution extends java.lang.Object implements org.apache.commons.math3.distribution.IntegerDistribution java.io.Serializable
private static final long serialVersionUID
protected final org.apache.commons.math3.random.RandomGenerator random
protected final org.apache.commons.math3.random.RandomDataImpl randomData
    protected void <init>()
    {
        org.apache.commons.math3.distribution.AbstractIntegerDistribution r0;
        org.apache.commons.math3.random.RandomDataImpl $r1;

        r0 := @this: org.apache.commons.math3.distribution.AbstractIntegerDistribution;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.commons.math3.random.RandomDataImpl;

        specialinvoke $r1.<org.apache.commons.math3.random.RandomDataImpl: void <init>()>();

        r0.<org.apache.commons.math3.distribution.AbstractIntegerDistribution: org.apache.commons.math3.random.RandomDataImpl randomData> = $r1;

        r0.<org.apache.commons.math3.distribution.AbstractIntegerDistribution: org.apache.commons.math3.random.RandomGenerator random> = null;

        return;
    }
    protected void <init>(org.apache.commons.math3.random.RandomGenerator)
    {
        org.apache.commons.math3.distribution.AbstractIntegerDistribution r0;
        org.apache.commons.math3.random.RandomGenerator $r1;
        org.apache.commons.math3.random.RandomDataImpl $r2;

        r0 := @this: org.apache.commons.math3.distribution.AbstractIntegerDistribution;

        $r1 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new org.apache.commons.math3.random.RandomDataImpl;

        specialinvoke $r2.<org.apache.commons.math3.random.RandomDataImpl: void <init>()>();

        r0.<org.apache.commons.math3.distribution.AbstractIntegerDistribution: org.apache.commons.math3.random.RandomDataImpl randomData> = $r2;

        r0.<org.apache.commons.math3.distribution.AbstractIntegerDistribution: org.apache.commons.math3.random.RandomGenerator random> = $r1;

        return;
    }
    private double checkedCumulativeProbability(int) throws org.apache.commons.math3.exception.MathInternalError
    {
        org.apache.commons.math3.distribution.AbstractIntegerDistribution r0;
        int $i0;
        org.apache.commons.math3.exception.util.LocalizedFormats $r1;
        double $d0;
        boolean $z0;
        org.apache.commons.math3.exception.MathInternalError $r2;
        java.lang.Object[] $r3;
        java.lang.Integer $r4;

        r0 := @this: org.apache.commons.math3.distribution.AbstractIntegerDistribution;

        $i0 := @parameter0: int;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.distribution.AbstractIntegerDistribution: double cumulativeProbability(int)>($i0);

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 == 0 goto label1;

        $r2 = new org.apache.commons.math3.exception.MathInternalError;

        $r1 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN>;

        $r3 = newarray (java.lang.Object)[1];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3[0] = $r4;

        specialinvoke $r2.<org.apache.commons.math3.exception.MathInternalError: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r1, $r3);

        throw $r2;

     label1:
        return $d0;
    }
    public double cumulativeProbability(int, int) throws org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.distribution.AbstractIntegerDistribution r0;
        int $i0, $i1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r1;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r2;
        java.lang.Integer $r3, $r4;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.distribution.AbstractIntegerDistribution;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        if $i1 >= $i0 goto label1;

        $r2 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r1 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        specialinvoke $r2.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r1, $r3, $r4, 1);

        throw $r2;

     label1:
        $d0 = virtualinvoke r0.<org.apache.commons.math3.distribution.AbstractIntegerDistribution: double cumulativeProbability(int)>($i1);

        $d1 = virtualinvoke r0.<org.apache.commons.math3.distribution.AbstractIntegerDistribution: double cumulativeProbability(int)>($i0);

        $d0 = $d0 - $d1;

        return $d0;
    }
    public int inverseCumulativeProbability(double) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.distribution.AbstractIntegerDistribution r0;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        byte $b0;
        org.apache.commons.math3.exception.OutOfRangeException $r1;
        java.lang.Double $r2;
        java.lang.Integer $r3, $r4;
        int $i1, i2, i3;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.distribution.AbstractIntegerDistribution;

        $d0 := @parameter0: double;

        $b0 = $d0 cmpg 0.0;

        if $b0 < 0 goto label01;

        $b0 = $d0 cmpl 1.0;

        if $b0 <= 0 goto label02;

     label01:
        $r1 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke $r1.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r2, $r3, $r4);

        throw $r1;

     label02:
        $i1 = virtualinvoke r0.<org.apache.commons.math3.distribution.AbstractIntegerDistribution: int getSupportLowerBound()>();

        i2 = $i1;

        $b0 = $d0 cmpl 0.0;

        if $b0 != 0 goto label03;

        return $i1;

     label03:
        if $i1 != -2147483648 goto label04;

        $d1 = specialinvoke r0.<org.apache.commons.math3.distribution.AbstractIntegerDistribution: double checkedCumulativeProbability(int)>($i1);

        $b0 = $d1 cmpl $d0;

        if $b0 < 0 goto label05;

        return $i1;

     label04:
        i2 = $i1 + -1;

     label05:
        $i1 = virtualinvoke r0.<org.apache.commons.math3.distribution.AbstractIntegerDistribution: int getSupportUpperBound()>();

        i3 = $i1;

        $b0 = $d0 cmpl 1.0;

        if $b0 == 0 goto label10;

        $d1 = virtualinvoke r0.<org.apache.commons.math3.distribution.AbstractIntegerDistribution: double getNumericalMean()>();

        $d2 = virtualinvoke r0.<org.apache.commons.math3.distribution.AbstractIntegerDistribution: double getNumericalVariance()>();

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d2);

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d1);

        if $z0 != 0 goto label09;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d1);

        if $z0 != 0 goto label09;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d2);

        if $z0 != 0 goto label09;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d2);

        if $z0 != 0 goto label09;

        $b0 = $d2 cmpl 0.0;

        if $b0 == 0 goto label09;

        $z0 = 1;

     label06:
        if $z0 == 0 goto label08;

        $d3 = 1.0 - $d0;

        $d3 = $d3 / $d0;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d3);

        $d4 = $d3 * $d2;

        $d4 = $d1 - $d4;

        $d5 = (double) i2;

        $b0 = $d4 cmpl $d5;

        if $b0 <= 0 goto label07;

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double ceil(double)>($d4);

        i2 = (int) $d4;

        i2 = i2 + -1;

     label07:
        $d3 = 1.0 / $d3;

        $d2 = $d3 * $d2;

        $d1 = $d1 + $d2;

        $d2 = (double) $i1;

        $b0 = $d1 cmpg $d2;

        if $b0 >= 0 goto label08;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double ceil(double)>($d1);

        $i1 = (int) $d1;

        i3 = $i1 + -1;

     label08:
        i2 = virtualinvoke r0.<org.apache.commons.math3.distribution.AbstractIntegerDistribution: int solveInverseCumulativeProbability(double,int,int)>($d0, i2, i3);

        return i2;

     label09:
        $z0 = 0;

        goto label06;

     label10:
        return $i1;
    }
    public double logProbability(int)
    {
        org.apache.commons.math3.distribution.AbstractIntegerDistribution r0;
        int $i0;
        double $d0;

        r0 := @this: org.apache.commons.math3.distribution.AbstractIntegerDistribution;

        $i0 := @parameter0: int;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.distribution.AbstractIntegerDistribution: double probability(int)>($i0);

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d0);

        return $d0;
    }
    public void reseedRandomGenerator(long)
    {
        org.apache.commons.math3.distribution.AbstractIntegerDistribution r0;
        long $l0;
        org.apache.commons.math3.random.RandomGenerator $r1;
        org.apache.commons.math3.random.RandomDataImpl $r2;

        r0 := @this: org.apache.commons.math3.distribution.AbstractIntegerDistribution;

        $l0 := @parameter0: long;

        $r1 = r0.<org.apache.commons.math3.distribution.AbstractIntegerDistribution: org.apache.commons.math3.random.RandomGenerator random>;

        interfaceinvoke $r1.<org.apache.commons.math3.random.RandomGenerator: void setSeed(long)>($l0);

        $r2 = r0.<org.apache.commons.math3.distribution.AbstractIntegerDistribution: org.apache.commons.math3.random.RandomDataImpl randomData>;

        virtualinvoke $r2.<org.apache.commons.math3.random.RandomDataImpl: void reSeed(long)>($l0);

        return;
    }
    public int sample()
    {
        org.apache.commons.math3.distribution.AbstractIntegerDistribution r0;
        org.apache.commons.math3.random.RandomGenerator $r1;
        double $d0;
        int $i0;

        r0 := @this: org.apache.commons.math3.distribution.AbstractIntegerDistribution;

        $r1 = r0.<org.apache.commons.math3.distribution.AbstractIntegerDistribution: org.apache.commons.math3.random.RandomGenerator random>;

        $d0 = interfaceinvoke $r1.<org.apache.commons.math3.random.RandomGenerator: double nextDouble()>();

        $i0 = virtualinvoke r0.<org.apache.commons.math3.distribution.AbstractIntegerDistribution: int inverseCumulativeProbability(double)>($d0);

        return $i0;
    }
    public int[] sample(int)
    {
        org.apache.commons.math3.distribution.AbstractIntegerDistribution r0;
        int $i0, i1, $i2;
        int[] r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r3;
        java.lang.Integer $r4;

        r0 := @this: org.apache.commons.math3.distribution.AbstractIntegerDistribution;

        $i0 := @parameter0: int;

        if $i0 > 0 goto label1;

        $r3 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NUMBER_OF_SAMPLES>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r3.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r2, $r4);

        throw $r3;

     label1:
        r1 = newarray (int)[$i0];

        i1 = 0;

     label2:
        if i1 >= $i0 goto label3;

        $i2 = virtualinvoke r0.<org.apache.commons.math3.distribution.AbstractIntegerDistribution: int sample()>();

        r1[i1] = $i2;

        i1 = i1 + 1;

        goto label2;

     label3:
        return r1;
    }
    protected int solveInverseCumulativeProbability(double, int, int)
    {
        org.apache.commons.math3.distribution.AbstractIntegerDistribution r0;
        double $d0, $d1;
        int $i0, $i1, $i2;
        byte $b3;

        r0 := @this: org.apache.commons.math3.distribution.AbstractIntegerDistribution;

        $d0 := @parameter0: double;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

     label1:
        $i2 = $i0 + 1;

        if $i2 >= $i1 goto label5;

        $i2 = $i0 + $i1;

        $i2 = $i2 / 2;

        if $i2 < $i0 goto label2;

        if $i2 <= $i1 goto label3;

     label2:
        $i2 = $i1 - $i0;

        $i2 = $i2 / 2;

        $i2 = $i0 + $i2;

     label3:
        $d1 = specialinvoke r0.<org.apache.commons.math3.distribution.AbstractIntegerDistribution: double checkedCumulativeProbability(int)>($i2);

        $b3 = $d1 cmpl $d0;

        if $b3 < 0 goto label4;

        $i1 = $i2;

        goto label1;

     label4:
        $i0 = $i2;

        goto label1;

     label5:
        return $i1;
    }
