org.apache.commons.math3.distribution.BetaDistribution$ChengBetaSampler extends java.lang.Object
    private void <init>()
    {
        org.apache.commons.math3.distribution.BetaDistribution$ChengBetaSampler r0;

        r0 := @this: org.apache.commons.math3.distribution.BetaDistribution$ChengBetaSampler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    private static double algorithmBB(org.apache.commons.math3.random.RandomGenerator, double, double, double)
    {
        org.apache.commons.math3.random.RandomGenerator $r0;
        double $d0, $d1, $d2, d3, d4, d5, d6, d7, $d8, $d9, $d10, $d11;
        byte $b0;
        boolean $z0;

        $r0 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        $d0 := @parameter1: double;

        $d1 := @parameter2: double;

        $d2 := @parameter3: double;

        d3 = $d1 + $d2;

        $d8 = d3 - 2.0;

        d4 = 2.0 * $d1;

        d4 = d4 * $d2;

        d4 = d4 - d3;

        $d8 = $d8 / d4;

        $d8 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d8);

        d4 = 1.0 / $d8;

        d4 = $d1 + d4;

     label1:
        d7 = interfaceinvoke $r0.<org.apache.commons.math3.random.RandomGenerator: double nextDouble()>();

        d5 = interfaceinvoke $r0.<org.apache.commons.math3.random.RandomGenerator: double nextDouble()>();

        $d9 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(d7);

        d6 = neg d7;

        d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double log1p(double)>(d6);

        $d9 = $d9 - d6;

        d6 = $d8 * $d9;

        $d9 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>(d6);

        $d9 = $d1 * $d9;

        d7 = d7 * d7;

        d7 = d7 * d5;

        d5 = d4 * d6;

        d5 = d5 - 1.3862944;

        d6 = $d1 + d5;

        d6 = d6 - $d9;

        $d10 = 2.609438 + d6;

        $d11 = 5.0 * d7;

        $b0 = $d10 cmpl $d11;

        if $b0 < 0 goto label3;

     label2:
        d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double min(double,double)>($d9, 1.7976931348623157E308);

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double)>($d1, $d0);

        if $z0 == 0 goto label4;

        $d0 = $d2 + d3;

        $d0 = d3 / $d0;

        return $d0;

     label3:
        d7 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(d7);

        $b0 = d6 cmpl d7;

        if $b0 >= 0 goto label2;

        d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(d3);

        $d10 = $d2 + $d9;

        $d10 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d10);

        d6 = d6 - $d10;

        d6 = d6 * d3;

        d5 = d6 + d5;

        $b0 = d5 cmpg d7;

        if $b0 < 0 goto label1;

        goto label2;

     label4:
        $d0 = $d2 + d3;

        $d0 = $d2 / $d0;

        return $d0;
    }
    private static double algorithmBC(org.apache.commons.math3.random.RandomGenerator, double, double, double)
    {
        org.apache.commons.math3.random.RandomGenerator $r0;
        double $d0, $d1, $d2, d3, d4, d5, d6, d7, d8, $d9, $d10, $d11;
        byte $b0;
        boolean $z0;

        $r0 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        $d0 := @parameter1: double;

        $d1 := @parameter2: double;

        $d2 := @parameter3: double;

        d3 = $d1 + $d2;

        d4 = 1.0 / $d2;

        d6 = 1.0 + $d1;

        d5 = d6 - $d2;

        d6 = 0.0416667 * $d2;

        d6 = 0.0138889 + d6;

        d6 = d6 * d5;

        d8 = $d1 * d4;

        d8 = d8 - 0.777778;

        d6 = d6 / d8;

        d5 = 0.25 / d5;

        d5 = 0.5 + d5;

        d5 = d5 * $d2;

        d5 = 0.25 + d5;

     label1:
        $d9 = interfaceinvoke $r0.<org.apache.commons.math3.random.RandomGenerator: double nextDouble()>();

        $d10 = interfaceinvoke $r0.<org.apache.commons.math3.random.RandomGenerator: double nextDouble()>();

        d7 = $d9 * $d10;

        d8 = $d9 * d7;

        $b0 = $d9 cmpg 0.5;

        if $b0 >= 0 goto label4;

        $d10 = 0.25 * $d10;

        $d10 = $d10 + d8;

        d7 = $d10 - d7;

        $b0 = d7 cmpl d6;

        if $b0 >= 0 goto label1;

     label2:
        d7 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d9);

        $d9 = neg $d9;

        $d9 = staticinvoke <org.apache.commons.math3.util.FastMath: double log1p(double)>($d9);

        $d9 = d7 - $d9;

        d7 = d4 * $d9;

        $d9 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>(d7);

        $d9 = $d1 * $d9;

        $d10 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(d3);

        $d11 = $d2 + $d9;

        $d11 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d11);

        $d10 = $d10 - $d11;

        d7 = $d10 + d7;

        d7 = d7 * d3;

        d7 = d7 - 1.3862944;

        d8 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(d8);

        $b0 = d7 cmpl d8;

        if $b0 < 0 goto label1;

     label3:
        d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double min(double,double)>($d9, 1.7976931348623157E308);

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double)>($d1, $d0);

        if $z0 == 0 goto label6;

        $d0 = $d2 + d4;

        $d0 = d4 / $d0;

        return $d0;

     label4:
        $b0 = d8 cmpg 0.25;

        if $b0 > 0 goto label5;

        d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d9);

        d6 = neg $d9;

        d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double log1p(double)>(d6);

        d3 = d3 - d6;

        d4 = d4 * d3;

        d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>(d4);

        $d9 = $d1 * d4;

        goto label3;

     label5:
        $b0 = d8 cmpl d5;

        if $b0 < 0 goto label2;

        goto label1;

     label6:
        $d0 = $d2 + d4;

        $d0 = $d2 / $d0;

        return $d0;
    }
    static double sample(org.apache.commons.math3.random.RandomGenerator, double, double)
    {
        org.apache.commons.math3.random.RandomGenerator $r0;
        double $d0, $d1, $d2;
        byte $b0;

        $r0 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        $d0 := @parameter1: double;

        $d1 := @parameter2: double;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double min(double,double)>($d0, $d1);

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>($d0, $d1);

        $b0 = $d2 cmpl 1.0;

        if $b0 <= 0 goto label1;

        $d0 = staticinvoke <org.apache.commons.math3.distribution.BetaDistribution$ChengBetaSampler: double algorithmBB(org.apache.commons.math3.random.RandomGenerator,double,double,double)>($r0, $d0, $d2, $d1);

        return $d0;

     label1:
        $d0 = staticinvoke <org.apache.commons.math3.distribution.BetaDistribution$ChengBetaSampler: double algorithmBC(org.apache.commons.math3.random.RandomGenerator,double,double,double)>($r0, $d0, $d1, $d2);

        return $d0;
    }
