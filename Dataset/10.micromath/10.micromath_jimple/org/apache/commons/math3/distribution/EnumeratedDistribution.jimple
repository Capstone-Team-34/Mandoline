org.apache.commons.math3.distribution.EnumeratedDistribution extends java.lang.Object implements java.io.Serializable
private static final long serialVersionUID
private final double[] cumulativeProbabilities
private final double[] probabilities
protected final org.apache.commons.math3.random.RandomGenerator random
private final java.util.List singletons
    public void <init>(java.util.List) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.MathArithmeticException, org.apache.commons.math3.exception.NotFiniteNumberException, org.apache.commons.math3.exception.NotANumberException
    {
        org.apache.commons.math3.distribution.EnumeratedDistribution r0;
        java.util.List r1;
        org.apache.commons.math3.random.Well19937c $r2;

        r0 := @this: org.apache.commons.math3.distribution.EnumeratedDistribution;

        r1 := @parameter0: java.util.List;

        $r2 = new org.apache.commons.math3.random.Well19937c;

        specialinvoke $r2.<org.apache.commons.math3.random.Well19937c: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.distribution.EnumeratedDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,java.util.List)>($r2, r1);

        return;
    }
    public void <init>(org.apache.commons.math3.random.RandomGenerator, java.util.List) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.MathArithmeticException, org.apache.commons.math3.exception.NotFiniteNumberException, org.apache.commons.math3.exception.NotANumberException
    {
        org.apache.commons.math3.distribution.EnumeratedDistribution r0;
        org.apache.commons.math3.random.RandomGenerator $r1;
        java.util.List r2, $r7;
        double[] r3;
        java.util.ArrayList $r4;
        int $i0, $i1;
        java.lang.Object $r5;
        org.apache.commons.math3.util.Pair r6;
        java.lang.Double $r8;
        double $d0, $d1;
        byte $b2;
        org.apache.commons.math3.exception.NotPositiveException $r9;
        java.lang.Number $r10;
        boolean $z0;
        org.apache.commons.math3.exception.NotFiniteNumberException $r11;
        java.lang.Object[] $r12;
        org.apache.commons.math3.exception.NotANumberException $r13;

        r0 := @this: org.apache.commons.math3.distribution.EnumeratedDistribution;

        $r1 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        r2 := @parameter1: java.util.List;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.distribution.EnumeratedDistribution: org.apache.commons.math3.random.RandomGenerator random> = $r1;

        $r4 = new java.util.ArrayList;

        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>($i0);

        r0.<org.apache.commons.math3.distribution.EnumeratedDistribution: java.util.List singletons> = $r4;

        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        r3 = newarray (double)[$i0];

        $i0 = 0;

     label1:
        $i1 = interfaceinvoke r2.<java.util.List: int size()>();

        if $i0 >= $i1 goto label5;

        $r5 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>($i0);

        r6 = (org.apache.commons.math3.util.Pair) $r5;

        $r7 = r0.<org.apache.commons.math3.distribution.EnumeratedDistribution: java.util.List singletons>;

        $r5 = virtualinvoke r6.<org.apache.commons.math3.util.Pair: java.lang.Object getKey()>();

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r5);

        $r5 = virtualinvoke r6.<org.apache.commons.math3.util.Pair: java.lang.Object getValue()>();

        $r8 = (java.lang.Double) $r5;

        $d0 = virtualinvoke $r8.<java.lang.Double: double doubleValue()>();

        $b2 = $d0 cmpg 0.0;

        if $b2 >= 0 goto label2;

        $r9 = new org.apache.commons.math3.exception.NotPositiveException;

        $r5 = virtualinvoke r6.<org.apache.commons.math3.util.Pair: java.lang.Object getValue()>();

        $r10 = (java.lang.Number) $r5;

        specialinvoke $r9.<org.apache.commons.math3.exception.NotPositiveException: void <init>(java.lang.Number)>($r10);

        throw $r9;

     label2:
        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d0);

        if $z0 == 0 goto label3;

        $r11 = new org.apache.commons.math3.exception.NotFiniteNumberException;

        $r8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r12 = newarray (java.lang.Object)[0];

        specialinvoke $r11.<org.apache.commons.math3.exception.NotFiniteNumberException: void <init>(java.lang.Number,java.lang.Object[])>($r8, $r12);

        throw $r11;

     label3:
        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 == 0 goto label4;

        $r13 = new org.apache.commons.math3.exception.NotANumberException;

        specialinvoke $r13.<org.apache.commons.math3.exception.NotANumberException: void <init>()>();

        throw $r13;

     label4:
        r3[$i0] = $d0;

        $i0 = $i0 + 1;

        goto label1;

     label5:
        r3 = staticinvoke <org.apache.commons.math3.util.MathArrays: double[] normalizeArray(double[],double)>(r3, 1.0);

        r0.<org.apache.commons.math3.distribution.EnumeratedDistribution: double[] probabilities> = r3;

        r3 = r0.<org.apache.commons.math3.distribution.EnumeratedDistribution: double[] probabilities>;

        $i0 = lengthof r3;

        r3 = newarray (double)[$i0];

        r0.<org.apache.commons.math3.distribution.EnumeratedDistribution: double[] cumulativeProbabilities> = r3;

        $d0 = 0.0;

        $i0 = 0;

     label6:
        r3 = r0.<org.apache.commons.math3.distribution.EnumeratedDistribution: double[] probabilities>;

        $i1 = lengthof r3;

        if $i0 >= $i1 goto label7;

        r3 = r0.<org.apache.commons.math3.distribution.EnumeratedDistribution: double[] probabilities>;

        $d1 = r3[$i0];

        $d0 = $d0 + $d1;

        r3 = r0.<org.apache.commons.math3.distribution.EnumeratedDistribution: double[] cumulativeProbabilities>;

        r3[$i0] = $d0;

        $i0 = $i0 + 1;

        goto label6;

     label7:
        return;
    }
    public java.util.List getPmf()
    {
        org.apache.commons.math3.distribution.EnumeratedDistribution r0;
        java.util.ArrayList r1;
        double[] $r2;
        int $i0, $i1;
        org.apache.commons.math3.util.Pair $r3;
        java.util.List $r4;
        java.lang.Object $r5;
        double $d0;
        java.lang.Double $r6;

        r0 := @this: org.apache.commons.math3.distribution.EnumeratedDistribution;

        r1 = new java.util.ArrayList;

        $r2 = r0.<org.apache.commons.math3.distribution.EnumeratedDistribution: double[] probabilities>;

        $i0 = lengthof $r2;

        specialinvoke r1.<java.util.ArrayList: void <init>(int)>($i0);

        $i0 = 0;

     label1:
        $r2 = r0.<org.apache.commons.math3.distribution.EnumeratedDistribution: double[] probabilities>;

        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label2;

        $r3 = new org.apache.commons.math3.util.Pair;

        $r4 = r0.<org.apache.commons.math3.distribution.EnumeratedDistribution: java.util.List singletons>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>($i0);

        $r2 = r0.<org.apache.commons.math3.distribution.EnumeratedDistribution: double[] probabilities>;

        $d0 = $r2[$i0];

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        specialinvoke $r3.<org.apache.commons.math3.util.Pair: void <init>(java.lang.Object,java.lang.Object)>($r5, $r6);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r3);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return r1;
    }
    double probability(java.lang.Object)
    {
        org.apache.commons.math3.distribution.EnumeratedDistribution r0;
        java.lang.Object r1, $r4;
        double $d0, d1;
        int i0, $i1;
        double[] $r2;
        java.util.List $r3;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.distribution.EnumeratedDistribution;

        r1 := @parameter0: java.lang.Object;

        d1 = 0.0;

        i0 = 0;

     label1:
        $r2 = r0.<org.apache.commons.math3.distribution.EnumeratedDistribution: double[] probabilities>;

        $i1 = lengthof $r2;

        if i0 >= $i1 goto label5;

        if r1 != null goto label2;

        $r3 = r0.<org.apache.commons.math3.distribution.EnumeratedDistribution: java.util.List singletons>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i0);

        if $r4 == null goto label3;

     label2:
        if r1 == null goto label4;

        $r3 = r0.<org.apache.commons.math3.distribution.EnumeratedDistribution: java.util.List singletons>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i0);

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label4;

     label3:
        $r2 = r0.<org.apache.commons.math3.distribution.EnumeratedDistribution: double[] probabilities>;

        $d0 = $r2[i0];

        d1 = d1 + $d0;

     label4:
        i0 = i0 + 1;

        goto label1;

     label5:
        return d1;
    }
    public void reseedRandomGenerator(long)
    {
        org.apache.commons.math3.distribution.EnumeratedDistribution r0;
        long $l0;
        org.apache.commons.math3.random.RandomGenerator $r1;

        r0 := @this: org.apache.commons.math3.distribution.EnumeratedDistribution;

        $l0 := @parameter0: long;

        $r1 = r0.<org.apache.commons.math3.distribution.EnumeratedDistribution: org.apache.commons.math3.random.RandomGenerator random>;

        interfaceinvoke $r1.<org.apache.commons.math3.random.RandomGenerator: void setSeed(long)>($l0);

        return;
    }
    public java.lang.Object sample()
    {
        org.apache.commons.math3.distribution.EnumeratedDistribution r0;
        org.apache.commons.math3.random.RandomGenerator $r1;
        double $d0, $d1;
        double[] $r2;
        int $i0, i1;
        byte $b2;
        java.util.List $r3, $r5;
        java.lang.Object $r4;

        r0 := @this: org.apache.commons.math3.distribution.EnumeratedDistribution;

        $r1 = r0.<org.apache.commons.math3.distribution.EnumeratedDistribution: org.apache.commons.math3.random.RandomGenerator random>;

        $d0 = interfaceinvoke $r1.<org.apache.commons.math3.random.RandomGenerator: double nextDouble()>();

        $r2 = r0.<org.apache.commons.math3.distribution.EnumeratedDistribution: double[] cumulativeProbabilities>;

        $i0 = staticinvoke <java.util.Arrays: int binarySearch(double[],double)>($r2, $d0);

        i1 = $i0;

        if $i0 >= 0 goto label1;

        i1 = neg $i0;

        i1 = i1 + -1;

     label1:
        if i1 < 0 goto label2;

        $r2 = r0.<org.apache.commons.math3.distribution.EnumeratedDistribution: double[] probabilities>;

        $i0 = lengthof $r2;

        if i1 >= $i0 goto label2;

        $r2 = r0.<org.apache.commons.math3.distribution.EnumeratedDistribution: double[] cumulativeProbabilities>;

        $d1 = $r2[i1];

        $b2 = $d0 cmpg $d1;

        if $b2 >= 0 goto label2;

        $r3 = r0.<org.apache.commons.math3.distribution.EnumeratedDistribution: java.util.List singletons>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i1);

        return $r4;

     label2:
        $r3 = r0.<org.apache.commons.math3.distribution.EnumeratedDistribution: java.util.List singletons>;

        $r5 = r0.<org.apache.commons.math3.distribution.EnumeratedDistribution: java.util.List singletons>;

        i1 = interfaceinvoke $r5.<java.util.List: int size()>();

        i1 = i1 + -1;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i1);

        return $r4;
    }
    public java.lang.Object[] sample(int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.distribution.EnumeratedDistribution r0;
        int $i0, i1;
        java.lang.Object[] r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r3;
        java.lang.Integer $r4;
        java.lang.Object $r5;

        r0 := @this: org.apache.commons.math3.distribution.EnumeratedDistribution;

        $i0 := @parameter0: int;

        if $i0 > 0 goto label1;

        $r3 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NUMBER_OF_SAMPLES>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r3.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r2, $r4);

        throw $r3;

     label1:
        r1 = newarray (java.lang.Object)[$i0];

        i1 = 0;

     label2:
        if i1 >= $i0 goto label3;

        $r5 = virtualinvoke r0.<org.apache.commons.math3.distribution.EnumeratedDistribution: java.lang.Object sample()>();

        r1[i1] = $r5;

        i1 = i1 + 1;

        goto label2;

     label3:
        return r1;
    }
    public java.lang.Object[] sample(int, java.lang.Object[]) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.distribution.EnumeratedDistribution r0;
        int $i0, $i1;
        java.lang.Object[] r1;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3;
        java.lang.Integer $r4;
        org.apache.commons.math3.exception.NullArgumentException $r5;
        java.lang.Class $r6;
        java.lang.Object $r7;

        r0 := @this: org.apache.commons.math3.distribution.EnumeratedDistribution;

        $i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object[];

        if $i0 > 0 goto label1;

        $r2 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NUMBER_OF_SAMPLES>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r2.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r3, $r4);

        throw $r2;

     label1:
        if r1 != null goto label2;

        $r5 = new org.apache.commons.math3.exception.NullArgumentException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INPUT_ARRAY>;

        r1 = newarray (java.lang.Object)[0];

        specialinvoke $r5.<org.apache.commons.math3.exception.NullArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r3, r1);

        throw $r5;

     label2:
        $i1 = lengthof r1;

        if $i1 >= $i0 goto label5;

        $r6 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r6.<java.lang.Class: java.lang.Class getComponentType()>();

        $r7 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r6, $i0);

        r1 = (java.lang.Object[]) $r7;

     label3:
        $i1 = 0;

     label4:
        if $i1 >= $i0 goto label6;

        $r7 = virtualinvoke r0.<org.apache.commons.math3.distribution.EnumeratedDistribution: java.lang.Object sample()>();

        r1[$i1] = $r7;

        $i1 = $i1 + 1;

        goto label4;

     label5:
        goto label3;

     label6:
        return r1;
    }
