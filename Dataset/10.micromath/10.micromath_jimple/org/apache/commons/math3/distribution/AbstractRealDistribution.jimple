org.apache.commons.math3.distribution.AbstractRealDistribution extends java.lang.Object implements org.apache.commons.math3.distribution.RealDistribution java.io.Serializable
public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY
private static final long serialVersionUID
protected final org.apache.commons.math3.random.RandomGenerator random
protected org.apache.commons.math3.random.RandomDataImpl randomData
private double solverAbsoluteAccuracy
    protected void <init>()
    {
        org.apache.commons.math3.distribution.AbstractRealDistribution r0;
        org.apache.commons.math3.random.RandomDataImpl $r1;

        r0 := @this: org.apache.commons.math3.distribution.AbstractRealDistribution;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.commons.math3.random.RandomDataImpl;

        specialinvoke $r1.<org.apache.commons.math3.random.RandomDataImpl: void <init>()>();

        r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: org.apache.commons.math3.random.RandomDataImpl randomData> = $r1;

        r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: double solverAbsoluteAccuracy> = 1.0E-6;

        r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: org.apache.commons.math3.random.RandomGenerator random> = null;

        return;
    }
    protected void <init>(org.apache.commons.math3.random.RandomGenerator)
    {
        org.apache.commons.math3.distribution.AbstractRealDistribution r0;
        org.apache.commons.math3.random.RandomGenerator $r1;
        org.apache.commons.math3.random.RandomDataImpl $r2;

        r0 := @this: org.apache.commons.math3.distribution.AbstractRealDistribution;

        $r1 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new org.apache.commons.math3.random.RandomDataImpl;

        specialinvoke $r2.<org.apache.commons.math3.random.RandomDataImpl: void <init>()>();

        r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: org.apache.commons.math3.random.RandomDataImpl randomData> = $r2;

        r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: double solverAbsoluteAccuracy> = 1.0E-6;

        r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: org.apache.commons.math3.random.RandomGenerator random> = $r1;

        return;
    }
    public double cumulativeProbability(double, double) throws org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.distribution.AbstractRealDistribution r0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.distribution.AbstractRealDistribution;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: double probability(double,double)>($d0, $d1);

        return $d0;
    }
    protected double getSolverAbsoluteAccuracy()
    {
        org.apache.commons.math3.distribution.AbstractRealDistribution r0;
        double d0;

        r0 := @this: org.apache.commons.math3.distribution.AbstractRealDistribution;

        d0 = r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: double solverAbsoluteAccuracy>;

        return d0;
    }
    public double inverseCumulativeProbability(double) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.distribution.AbstractRealDistribution r0;
        double $d0, d1, $d2, d3, $d4, d5, $d6;
        org.apache.commons.math3.distribution.AbstractRealDistribution$1 r1;
        byte $b0;
        org.apache.commons.math3.exception.OutOfRangeException $r2;
        java.lang.Double $r3;
        java.lang.Integer $r4, $r5;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.distribution.AbstractRealDistribution;

        $d0 := @parameter0: double;

        $b0 = $d0 cmpg 0.0;

        if $b0 < 0 goto label01;

        $b0 = $d0 cmpl 1.0;

        if $b0 <= 0 goto label02;

     label01:
        $r2 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke $r2.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r3, $r4, $r5);

        throw $r2;

     label02:
        $d2 = virtualinvoke r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: double getSupportLowerBound()>();

        d3 = $d2;

        $b0 = $d0 cmpl 0.0;

        if $b0 != 0 goto label03;

        return $d2;

     label03:
        $d4 = virtualinvoke r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: double getSupportUpperBound()>();

        d5 = $d4;

        $b0 = $d0 cmpl 1.0;

        if $b0 == 0 goto label15;

        $d6 = virtualinvoke r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: double getNumericalMean()>();

        d1 = virtualinvoke r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: double getNumericalVariance()>();

        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d1);

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d6);

        if $z0 != 0 goto label08;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d6);

        if $z0 != 0 goto label08;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d1);

        if $z0 != 0 goto label08;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1);

        if $z0 != 0 goto label08;

        $z0 = 1;

     label04:
        $b0 = $d2 cmpl #-Infinity;

        if $b0 != 0 goto label05;

        if $z0 == 0 goto label09;

        d3 = 1.0 - $d0;

        d3 = d3 / $d0;

        d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d3);

        d3 = d3 * d1;

        d3 = $d6 - d3;

     label05:
        $b0 = $d4 cmpl #Infinity;

        if $b0 != 0 goto label06;

        if $z0 == 0 goto label11;

        d5 = 1.0 - $d0;

        d5 = $d0 / d5;

        d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d5);

        d5 = d5 * d1;

        d5 = $d6 + d5;

     label06:
        r1 = new org.apache.commons.math3.distribution.AbstractRealDistribution$1;

        specialinvoke r1.<org.apache.commons.math3.distribution.AbstractRealDistribution$1: void <init>(org.apache.commons.math3.distribution.AbstractRealDistribution,double)>(r0, $d0);

        $d0 = virtualinvoke r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: double getSolverAbsoluteAccuracy()>();

        d5 = staticinvoke <org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils: double solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)>(r1, d3, d5, $d0);

        $z0 = virtualinvoke r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: boolean isSupportConnected()>();

        if $z0 != 0 goto label14;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: double getSolverAbsoluteAccuracy()>();

        $d6 = d5 - $d0;

        d1 = virtualinvoke r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: double getSupportLowerBound()>();

        $b0 = $d6 cmpl d1;

        if $b0 < 0 goto label14;

        $d6 = virtualinvoke r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: double cumulativeProbability(double)>(d5);

        d1 = d5 - $d0;

        d1 = virtualinvoke r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: double cumulativeProbability(double)>(d1);

        $b0 = d1 cmpl $d6;

        if $b0 != 0 goto label14;

     label07:
        d1 = d5 - d3;

        $b0 = d1 cmpl $d0;

        if $b0 <= 0 goto label16;

        d1 = d3 + d5;

        d1 = 0.5 * d1;

        $d4 = virtualinvoke r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: double cumulativeProbability(double)>(d1);

        $b0 = $d4 cmpg $d6;

        if $b0 >= 0 goto label13;

        d3 = d1;

        goto label07;

     label08:
        $z0 = 0;

        goto label04;

     label09:
        d3 = -1.0;

     label10:
        $d2 = virtualinvoke r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: double cumulativeProbability(double)>(d3);

        $b0 = $d2 cmpl $d0;

        if $b0 < 0 goto label05;

        d3 = d3 * 2.0;

        goto label10;

     label11:
        d5 = 1.0;

     label12:
        $d6 = virtualinvoke r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: double cumulativeProbability(double)>(d5);

        $b0 = $d6 cmpg $d0;

        if $b0 >= 0 goto label06;

        d5 = d5 * 2.0;

        goto label12;

     label13:
        d5 = d1;

        goto label07;

     label14:
        return d5;

     label15:
        return $d4;

     label16:
        return d5;
    }
    public double logDensity(double)
    {
        org.apache.commons.math3.distribution.AbstractRealDistribution r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.distribution.AbstractRealDistribution;

        $d0 := @parameter0: double;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: double density(double)>($d0);

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d0);

        return $d0;
    }
    public double probability(double)
    {
        org.apache.commons.math3.distribution.AbstractRealDistribution r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.distribution.AbstractRealDistribution;

        $d0 := @parameter0: double;

        return 0.0;
    }
    public double probability(double, double)
    {
        org.apache.commons.math3.distribution.AbstractRealDistribution r0;
        double $d0, $d1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r1;
        byte $b0;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r2;
        java.lang.Double $r3, $r4;

        r0 := @this: org.apache.commons.math3.distribution.AbstractRealDistribution;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $b0 = $d0 cmpl $d1;

        if $b0 <= 0 goto label1;

        $r2 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r1 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT>;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        specialinvoke $r2.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r1, $r3, $r4, 1);

        throw $r2;

     label1:
        $d1 = virtualinvoke r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: double cumulativeProbability(double)>($d1);

        $d0 = virtualinvoke r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: double cumulativeProbability(double)>($d0);

        $d0 = $d1 - $d0;

        return $d0;
    }
    public void reseedRandomGenerator(long)
    {
        org.apache.commons.math3.distribution.AbstractRealDistribution r0;
        long $l0;
        org.apache.commons.math3.random.RandomGenerator $r1;
        org.apache.commons.math3.random.RandomDataImpl $r2;

        r0 := @this: org.apache.commons.math3.distribution.AbstractRealDistribution;

        $l0 := @parameter0: long;

        $r1 = r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: org.apache.commons.math3.random.RandomGenerator random>;

        interfaceinvoke $r1.<org.apache.commons.math3.random.RandomGenerator: void setSeed(long)>($l0);

        $r2 = r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: org.apache.commons.math3.random.RandomDataImpl randomData>;

        virtualinvoke $r2.<org.apache.commons.math3.random.RandomDataImpl: void reSeed(long)>($l0);

        return;
    }
    public double sample()
    {
        org.apache.commons.math3.distribution.AbstractRealDistribution r0;
        org.apache.commons.math3.random.RandomGenerator $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.distribution.AbstractRealDistribution;

        $r1 = r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: org.apache.commons.math3.random.RandomGenerator random>;

        $d0 = interfaceinvoke $r1.<org.apache.commons.math3.random.RandomGenerator: double nextDouble()>();

        $d0 = virtualinvoke r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: double inverseCumulativeProbability(double)>($d0);

        return $d0;
    }
    public double[] sample(int)
    {
        org.apache.commons.math3.distribution.AbstractRealDistribution r0;
        int $i0, i1;
        double[] r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r3;
        java.lang.Integer $r4;
        double $d0;

        r0 := @this: org.apache.commons.math3.distribution.AbstractRealDistribution;

        $i0 := @parameter0: int;

        if $i0 > 0 goto label1;

        $r3 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NUMBER_OF_SAMPLES>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r3.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r2, $r4);

        throw $r3;

     label1:
        r1 = newarray (double)[$i0];

        i1 = 0;

     label2:
        if i1 >= $i0 goto label3;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: double sample()>();

        r1[i1] = $d0;

        i1 = i1 + 1;

        goto label2;

     label3:
        return r1;
    }
