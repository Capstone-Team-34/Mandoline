org.apache.commons.math3.distribution.NakagamiDistribution extends org.apache.commons.math3.distribution.AbstractRealDistribution
public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY
private static final long serialVersionUID
private final double inverseAbsoluteAccuracy
private final double mu
private final double omega
    public void <init>(double, double)
    {
        org.apache.commons.math3.distribution.NakagamiDistribution r0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.distribution.NakagamiDistribution;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.distribution.NakagamiDistribution: void <init>(double,double,double)>($d0, $d1, 1.0E-9);

        return;
    }
    public void <init>(double, double, double)
    {
        org.apache.commons.math3.distribution.NakagamiDistribution r0;
        double $d0, $d1, $d2;
        org.apache.commons.math3.random.Well19937c $r1;

        r0 := @this: org.apache.commons.math3.distribution.NakagamiDistribution;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $r1 = new org.apache.commons.math3.random.Well19937c;

        specialinvoke $r1.<org.apache.commons.math3.random.Well19937c: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.distribution.NakagamiDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double,double,double)>($r1, $d0, $d1, $d2);

        return;
    }
    public void <init>(org.apache.commons.math3.random.RandomGenerator, double, double, double)
    {
        org.apache.commons.math3.distribution.NakagamiDistribution r0;
        org.apache.commons.math3.random.RandomGenerator $r1;
        double $d0, $d1, $d2;
        byte $b0;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r2;
        java.lang.Double $r3, $r4;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r5;
        org.apache.commons.math3.exception.util.LocalizedFormats $r6;

        r0 := @this: org.apache.commons.math3.distribution.NakagamiDistribution;

        $r1 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        $d0 := @parameter1: double;

        $d1 := @parameter2: double;

        $d2 := @parameter3: double;

        specialinvoke r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator)>($r1);

        $b0 = $d0 cmpg 0.5;

        if $b0 >= 0 goto label1;

        $r2 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.5);

        specialinvoke $r2.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r3, $r4, 1);

        throw $r2;

     label1:
        $b0 = $d1 cmpg 0.0;

        if $b0 > 0 goto label2;

        $r5 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r6 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NOT_POSITIVE_SCALE>;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        specialinvoke $r5.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r6, $r3);

        throw $r5;

     label2:
        r0.<org.apache.commons.math3.distribution.NakagamiDistribution: double mu> = $d0;

        r0.<org.apache.commons.math3.distribution.NakagamiDistribution: double omega> = $d1;

        r0.<org.apache.commons.math3.distribution.NakagamiDistribution: double inverseAbsoluteAccuracy> = $d2;

        return;
    }
    public double cumulativeProbability(double)
    {
        org.apache.commons.math3.distribution.NakagamiDistribution r0;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.distribution.NakagamiDistribution;

        $d0 := @parameter0: double;

        $d1 = r0.<org.apache.commons.math3.distribution.NakagamiDistribution: double mu>;

        $d2 = r0.<org.apache.commons.math3.distribution.NakagamiDistribution: double mu>;

        $d2 = $d2 * $d0;

        $d2 = $d2 * $d0;

        $d0 = r0.<org.apache.commons.math3.distribution.NakagamiDistribution: double omega>;

        $d0 = $d2 / $d0;

        $d0 = staticinvoke <org.apache.commons.math3.special.Gamma: double regularizedGammaP(double,double)>($d1, $d0);

        return $d0;
    }
    public double density(double)
    {
        org.apache.commons.math3.distribution.NakagamiDistribution r0;
        double $d0, $d1, $d2, $d3, $d4;
        byte $b0;

        r0 := @this: org.apache.commons.math3.distribution.NakagamiDistribution;

        $d0 := @parameter0: double;

        $b0 = $d0 cmpg 0.0;

        if $b0 > 0 goto label1;

        return 0.0;

     label1:
        $d2 = r0.<org.apache.commons.math3.distribution.NakagamiDistribution: double mu>;

        $d3 = r0.<org.apache.commons.math3.distribution.NakagamiDistribution: double mu>;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,double)>($d2, $d3);

        $d2 = $d2 * 2.0;

        $d3 = r0.<org.apache.commons.math3.distribution.NakagamiDistribution: double mu>;

        $d3 = staticinvoke <org.apache.commons.math3.special.Gamma: double gamma(double)>($d3);

        $d4 = r0.<org.apache.commons.math3.distribution.NakagamiDistribution: double omega>;

        $d1 = r0.<org.apache.commons.math3.distribution.NakagamiDistribution: double mu>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,double)>($d4, $d1);

        $d3 = $d3 * $d1;

        $d2 = $d2 / $d3;

        $d3 = r0.<org.apache.commons.math3.distribution.NakagamiDistribution: double mu>;

        $d3 = $d3 * 2.0;

        $d3 = $d3 - 1.0;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,double)>($d0, $d3);

        $d2 = $d2 * $d3;

        $d3 = r0.<org.apache.commons.math3.distribution.NakagamiDistribution: double mu>;

        $d3 = neg $d3;

        $d3 = $d3 * $d0;

        $d0 = $d3 * $d0;

        $d3 = r0.<org.apache.commons.math3.distribution.NakagamiDistribution: double omega>;

        $d0 = $d0 / $d3;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d0);

        $d0 = $d2 * $d0;

        return $d0;
    }
    public double getNumericalMean()
    {
        org.apache.commons.math3.distribution.NakagamiDistribution r0;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.distribution.NakagamiDistribution;

        $d1 = r0.<org.apache.commons.math3.distribution.NakagamiDistribution: double mu>;

        $d1 = $d1 + 0.5;

        $d1 = staticinvoke <org.apache.commons.math3.special.Gamma: double gamma(double)>($d1);

        $d0 = r0.<org.apache.commons.math3.distribution.NakagamiDistribution: double mu>;

        $d0 = staticinvoke <org.apache.commons.math3.special.Gamma: double gamma(double)>($d0);

        $d1 = $d1 / $d0;

        $d2 = r0.<org.apache.commons.math3.distribution.NakagamiDistribution: double omega>;

        $d0 = r0.<org.apache.commons.math3.distribution.NakagamiDistribution: double mu>;

        $d0 = $d2 / $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d0);

        $d1 = $d1 * $d0;

        return $d1;
    }
    public double getNumericalVariance()
    {
        org.apache.commons.math3.distribution.NakagamiDistribution r0;
        double d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.distribution.NakagamiDistribution;

        $d1 = r0.<org.apache.commons.math3.distribution.NakagamiDistribution: double mu>;

        $d1 = $d1 + 0.5;

        $d1 = staticinvoke <org.apache.commons.math3.special.Gamma: double gamma(double)>($d1);

        d0 = r0.<org.apache.commons.math3.distribution.NakagamiDistribution: double mu>;

        d0 = staticinvoke <org.apache.commons.math3.special.Gamma: double gamma(double)>(d0);

        d0 = $d1 / d0;

        $d1 = r0.<org.apache.commons.math3.distribution.NakagamiDistribution: double omega>;

        $d2 = r0.<org.apache.commons.math3.distribution.NakagamiDistribution: double mu>;

        $d2 = 1.0 / $d2;

        $d2 = $d2 * d0;

        d0 = $d2 * d0;

        d0 = 1.0 - d0;

        $d1 = $d1 * d0;

        return $d1;
    }
    public double getScale()
    {
        org.apache.commons.math3.distribution.NakagamiDistribution r0;
        double d0;

        r0 := @this: org.apache.commons.math3.distribution.NakagamiDistribution;

        d0 = r0.<org.apache.commons.math3.distribution.NakagamiDistribution: double omega>;

        return d0;
    }
    public double getShape()
    {
        org.apache.commons.math3.distribution.NakagamiDistribution r0;
        double d0;

        r0 := @this: org.apache.commons.math3.distribution.NakagamiDistribution;

        d0 = r0.<org.apache.commons.math3.distribution.NakagamiDistribution: double mu>;

        return d0;
    }
    protected double getSolverAbsoluteAccuracy()
    {
        org.apache.commons.math3.distribution.NakagamiDistribution r0;
        double d0;

        r0 := @this: org.apache.commons.math3.distribution.NakagamiDistribution;

        d0 = r0.<org.apache.commons.math3.distribution.NakagamiDistribution: double inverseAbsoluteAccuracy>;

        return d0;
    }
    public double getSupportLowerBound()
    {
        org.apache.commons.math3.distribution.NakagamiDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.NakagamiDistribution;

        return 0.0;
    }
    public double getSupportUpperBound()
    {
        org.apache.commons.math3.distribution.NakagamiDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.NakagamiDistribution;

        return #Infinity;
    }
    public boolean isSupportConnected()
    {
        org.apache.commons.math3.distribution.NakagamiDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.NakagamiDistribution;

        return 1;
    }
    public boolean isSupportLowerBoundInclusive()
    {
        org.apache.commons.math3.distribution.NakagamiDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.NakagamiDistribution;

        return 1;
    }
    public boolean isSupportUpperBoundInclusive()
    {
        org.apache.commons.math3.distribution.NakagamiDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.NakagamiDistribution;

        return 0;
    }
