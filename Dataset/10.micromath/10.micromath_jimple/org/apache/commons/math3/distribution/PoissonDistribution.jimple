org.apache.commons.math3.distribution.PoissonDistribution extends org.apache.commons.math3.distribution.AbstractIntegerDistribution
public static final double DEFAULT_EPSILON
public static final int DEFAULT_MAX_ITERATIONS
private static final long serialVersionUID
private final double epsilon
private final org.apache.commons.math3.distribution.ExponentialDistribution exponential
private final int maxIterations
private final double mean
private final org.apache.commons.math3.distribution.NormalDistribution normal
    public void <init>(double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.distribution.PoissonDistribution r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.distribution.PoissonDistribution;

        $d0 := @parameter0: double;

        specialinvoke r0.<org.apache.commons.math3.distribution.PoissonDistribution: void <init>(double,double,int)>($d0, 1.0E-12, 10000000);

        return;
    }
    public void <init>(double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.distribution.PoissonDistribution r0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.distribution.PoissonDistribution;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.distribution.PoissonDistribution: void <init>(double,double,int)>($d0, $d1, 10000000);

        return;
    }
    public void <init>(double, double, int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.distribution.PoissonDistribution r0;
        double $d0, $d1;
        int $i0;
        org.apache.commons.math3.random.Well19937c $r1;

        r0 := @this: org.apache.commons.math3.distribution.PoissonDistribution;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $i0 := @parameter2: int;

        $r1 = new org.apache.commons.math3.random.Well19937c;

        specialinvoke $r1.<org.apache.commons.math3.random.Well19937c: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.distribution.PoissonDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double,double,int)>($r1, $d0, $d1, $i0);

        return;
    }
    public void <init>(double, int)
    {
        org.apache.commons.math3.distribution.PoissonDistribution r0;
        double $d0;
        int $i0;

        r0 := @this: org.apache.commons.math3.distribution.PoissonDistribution;

        $d0 := @parameter0: double;

        $i0 := @parameter1: int;

        specialinvoke r0.<org.apache.commons.math3.distribution.PoissonDistribution: void <init>(double,double,int)>($d0, 1.0E-12, $i0);

        return;
    }
    public void <init>(org.apache.commons.math3.random.RandomGenerator, double, double, int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.distribution.PoissonDistribution r0;
        org.apache.commons.math3.random.RandomGenerator $r1;
        double $d0, $d1;
        int $i0;
        byte $b1;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3;
        java.lang.Double $r4;
        org.apache.commons.math3.distribution.NormalDistribution $r5;
        org.apache.commons.math3.distribution.ExponentialDistribution $r6;

        r0 := @this: org.apache.commons.math3.distribution.PoissonDistribution;

        $r1 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        $d0 := @parameter1: double;

        $d1 := @parameter2: double;

        $i0 := @parameter3: int;

        specialinvoke r0.<org.apache.commons.math3.distribution.AbstractIntegerDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator)>($r1);

        $b1 = $d0 cmpg 0.0;

        if $b1 > 0 goto label1;

        $r2 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats MEAN>;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        specialinvoke $r2.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r3, $r4);

        throw $r2;

     label1:
        r0.<org.apache.commons.math3.distribution.PoissonDistribution: double mean> = $d0;

        r0.<org.apache.commons.math3.distribution.PoissonDistribution: double epsilon> = $d1;

        r0.<org.apache.commons.math3.distribution.PoissonDistribution: int maxIterations> = $i0;

        $r5 = new org.apache.commons.math3.distribution.NormalDistribution;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d0);

        specialinvoke $r5.<org.apache.commons.math3.distribution.NormalDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double,double,double)>($r1, $d0, $d1, 1.0E-9);

        r0.<org.apache.commons.math3.distribution.PoissonDistribution: org.apache.commons.math3.distribution.NormalDistribution normal> = $r5;

        $r6 = new org.apache.commons.math3.distribution.ExponentialDistribution;

        specialinvoke $r6.<org.apache.commons.math3.distribution.ExponentialDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double,double)>($r1, 1.0, 1.0E-9);

        r0.<org.apache.commons.math3.distribution.PoissonDistribution: org.apache.commons.math3.distribution.ExponentialDistribution exponential> = $r6;

        return;
    }
    private long nextPoisson(double)
    {
        org.apache.commons.math3.distribution.PoissonDistribution r0;
        double $d0, d1, d2, d3, d4, d5, $d6, d7, $d8, $d9, $d10, d11, $d12, $d13, $d14;
        byte $b0;
        long l1, $l3;
        org.apache.commons.math3.random.RandomGenerator $r1;
        int $i2;
        org.apache.commons.math3.distribution.ExponentialDistribution $r2;
        boolean z0;

        r0 := @this: org.apache.commons.math3.distribution.PoissonDistribution;

        $d0 := @parameter0: double;

        $b0 = $d0 cmpg 40.0;

        if $b0 >= 0 goto label02;

        $d6 = neg $d0;

        $d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d6);

        l1 = 0L;

        d7 = 1.0;

     label01:
        d4 = (double) l1;

        $d8 = 1000.0 * $d0;

        $b0 = d4 cmpg $d8;

        if $b0 >= 0 goto label16;

        $r1 = r0.<org.apache.commons.math3.distribution.PoissonDistribution: org.apache.commons.math3.random.RandomGenerator random>;

        d4 = interfaceinvoke $r1.<org.apache.commons.math3.random.RandomGenerator: double nextDouble()>();

        d7 = d7 * d4;

        $b0 = d7 cmpl $d6;

        if $b0 < 0 goto label16;

        l1 = l1 + 1L;

        goto label01;

     label02:
        $d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double floor(double)>($d0);

        d4 = $d0 - $d6;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d6);

        $i2 = (int) $d6;

        d7 = staticinvoke <org.apache.commons.math3.util.CombinatoricsUtils: double factorialLog(int)>($i2);

        $b0 = d4 cmpg 4.9E-324;

        if $b0 >= 0 goto label09;

        l1 = 0L;

     label03:
        d4 = 32.0 * $d6;

        d4 = d4 / 3.141592653589793;

        d4 = d4 + 1.0;

        d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(d4);

        d4 = d4 * $d6;

        $d8 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d4);

        d4 = $d8 / 2.0;

        d5 = 2.0 * $d6;

        d5 = d5 + $d8;

        d1 = 3.141592653589793 * d5;

        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d1);

        d2 = 8.0 * $d6;

        d2 = 1.0 / d2;

        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>(d2);

        d1 = d1 * d2;

        d2 = d5 / $d8;

        d3 = neg $d8;

        $d9 = 1.0 + $d8;

        d3 = d3 * $d9;

        d3 = d3 / d5;

        d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>(d3);

        d2 = d2 * d3;

        d3 = d1 + d2;

        d3 = d3 + 1.0;

        d1 = d1 / d3;

        d2 = d2 / d3;

        d3 = 8.0 * $d6;

        d3 = 1.0 / d3;

     label04:
        $r1 = r0.<org.apache.commons.math3.distribution.PoissonDistribution: org.apache.commons.math3.random.RandomGenerator random>;

        $d9 = interfaceinvoke $r1.<org.apache.commons.math3.random.RandomGenerator: double nextDouble()>();

        $b0 = $d9 cmpg d1;

        if $b0 > 0 goto label11;

        $r1 = r0.<org.apache.commons.math3.distribution.PoissonDistribution: org.apache.commons.math3.random.RandomGenerator random>;

        $d10 = interfaceinvoke $r1.<org.apache.commons.math3.random.RandomGenerator: double nextGaussian()>();

        $d9 = $d6 + d4;

        $d9 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d9);

        $d9 = $d9 * $d10;

        d11 = $d9 - 0.5;

        $b0 = d11 cmpl $d8;

        if $b0 > 0 goto label04;

        $d9 = neg $d6;

        $b0 = d11 cmpg $d9;

        if $b0 < 0 goto label04;

        $b0 = d11 cmpg 0.0;

        if $b0 >= 0 goto label10;

        $d9 = staticinvoke <org.apache.commons.math3.util.FastMath: double floor(double)>(d11);

     label05:
        $r2 = r0.<org.apache.commons.math3.distribution.PoissonDistribution: org.apache.commons.math3.distribution.ExponentialDistribution exponential>;

        $d12 = virtualinvoke $r2.<org.apache.commons.math3.distribution.ExponentialDistribution: double sample()>();

        $d12 = neg $d12;

        $d10 = $d10 * $d10;

        $d10 = $d10 / 2.0;

        $d10 = $d12 - $d10;

        $d10 = $d10 + d3;

     label06:
        $b0 = d11 cmpg 0.0;

        if $b0 >= 0 goto label13;

        z0 = 1;

     label07:
        d11 = 1.0 + $d9;

        d11 = d11 * $d9;

        $d12 = 2.0 * $d6;

        $d12 = d11 / $d12;

        d11 = neg $d12;

        $b0 = $d10 cmpg d11;

        if $b0 >= 0 goto label14;

        if z0 != 0 goto label14;

        $d0 = $d9 + $d6;

     label08:
        $l3 = (long) $d0;

        l1 = l1 + $l3;

        return l1;

     label09:
        l1 = specialinvoke r0.<org.apache.commons.math3.distribution.PoissonDistribution: long nextPoisson(double)>(d4);

        goto label03;

     label10:
        $d9 = staticinvoke <org.apache.commons.math3.util.FastMath: double ceil(double)>(d11);

        goto label05;

     label11:
        $d10 = d1 + d2;

        $b0 = $d9 cmpl $d10;

        if $b0 <= 0 goto label12;

        $d0 = $d6;

        goto label08;

     label12:
        $d9 = d5 / $d8;

        $r2 = r0.<org.apache.commons.math3.distribution.PoissonDistribution: org.apache.commons.math3.distribution.ExponentialDistribution exponential>;

        $d10 = virtualinvoke $r2.<org.apache.commons.math3.distribution.ExponentialDistribution: double sample()>();

        $d9 = $d9 * $d10;

        d11 = $d8 + $d9;

        $d9 = staticinvoke <org.apache.commons.math3.util.FastMath: double ceil(double)>(d11);

        $r2 = r0.<org.apache.commons.math3.distribution.PoissonDistribution: org.apache.commons.math3.distribution.ExponentialDistribution exponential>;

        $d10 = virtualinvoke $r2.<org.apache.commons.math3.distribution.ExponentialDistribution: double sample()>();

        $d10 = neg $d10;

        $d12 = 1.0 + d11;

        $d12 = $d12 * $d8;

        $d12 = $d12 / d5;

        $d10 = $d10 - $d12;

        goto label06;

     label13:
        z0 = 0;

        goto label07;

     label14:
        d11 = 2.0 * $d9;

        d11 = d11 + 1.0;

        $d13 = 6.0 * $d6;

        d11 = d11 / $d13;

        d11 = d11 - 1.0;

        d11 = $d12 * d11;

        $d12 = $d12 * $d12;

        $d13 = (double) z0;

        $d14 = 1.0 + $d9;

        $d13 = $d13 * $d14;

        $d13 = $d13 + $d6;

        $d13 = 3.0 * $d13;

        $d12 = $d12 / $d13;

        $d12 = d11 - $d12;

        $b0 = $d10 cmpg $d12;

        if $b0 >= 0 goto label15;

        $d0 = $d9 + $d6;

        goto label08;

     label15:
        $b0 = $d10 cmpl d11;

        if $b0 > 0 goto label04;

        d11 = $d9 * $d0;

        $d12 = $d9 + $d6;

        $i2 = (int) $d12;

        $d12 = staticinvoke <org.apache.commons.math3.util.CombinatoricsUtils: double factorialLog(int)>($i2);

        d11 = d11 - $d12;

        d11 = d11 + d7;

        $b0 = $d10 cmpg d11;

        if $b0 >= 0 goto label04;

        $d0 = $d9 + $d6;

        goto label08;

     label16:
        return l1;
    }
    public double cumulativeProbability(int)
    {
        org.apache.commons.math3.distribution.PoissonDistribution r0;
        int $i0;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.distribution.PoissonDistribution;

        $i0 := @parameter0: int;

        if $i0 >= 0 goto label1;

        return 0.0;

     label1:
        if $i0 == 2147483647 goto label2;

        $d0 = (double) $i0;

        $d1 = 1.0 + $d0;

        $d2 = r0.<org.apache.commons.math3.distribution.PoissonDistribution: double mean>;

        $d0 = r0.<org.apache.commons.math3.distribution.PoissonDistribution: double epsilon>;

        $i0 = r0.<org.apache.commons.math3.distribution.PoissonDistribution: int maxIterations>;

        $d0 = staticinvoke <org.apache.commons.math3.special.Gamma: double regularizedGammaQ(double,double,double,int)>($d1, $d2, $d0, $i0);

        return $d0;

     label2:
        return 1.0;
    }
    public double getMean()
    {
        org.apache.commons.math3.distribution.PoissonDistribution r0;
        double d0;

        r0 := @this: org.apache.commons.math3.distribution.PoissonDistribution;

        d0 = r0.<org.apache.commons.math3.distribution.PoissonDistribution: double mean>;

        return d0;
    }
    public double getNumericalMean()
    {
        org.apache.commons.math3.distribution.PoissonDistribution r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.distribution.PoissonDistribution;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.distribution.PoissonDistribution: double getMean()>();

        return $d0;
    }
    public double getNumericalVariance()
    {
        org.apache.commons.math3.distribution.PoissonDistribution r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.distribution.PoissonDistribution;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.distribution.PoissonDistribution: double getMean()>();

        return $d0;
    }
    public int getSupportLowerBound()
    {
        org.apache.commons.math3.distribution.PoissonDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.PoissonDistribution;

        return 0;
    }
    public int getSupportUpperBound()
    {
        org.apache.commons.math3.distribution.PoissonDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.PoissonDistribution;

        return 2147483647;
    }
    public boolean isSupportConnected()
    {
        org.apache.commons.math3.distribution.PoissonDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.PoissonDistribution;

        return 1;
    }
    public double logProbability(int)
    {
        org.apache.commons.math3.distribution.PoissonDistribution r0;
        int $i0;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.distribution.PoissonDistribution;

        $i0 := @parameter0: int;

        if $i0 < 0 goto label1;

        if $i0 != 2147483647 goto label2;

     label1:
        return #-Infinity;

     label2:
        if $i0 != 0 goto label3;

        $d1 = r0.<org.apache.commons.math3.distribution.PoissonDistribution: double mean>;

        $d1 = neg $d1;

        return $d1;

     label3:
        $d1 = (double) $i0;

        $d1 = staticinvoke <org.apache.commons.math3.distribution.SaddlePointExpansion: double getStirlingError(double)>($d1);

        $d1 = neg $d1;

        $d2 = (double) $i0;

        $d0 = r0.<org.apache.commons.math3.distribution.PoissonDistribution: double mean>;

        $d0 = staticinvoke <org.apache.commons.math3.distribution.SaddlePointExpansion: double getDeviancePart(double,double)>($d2, $d0);

        $d1 = $d1 - $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(6.283185307179586);

        $d0 = $d0 * 0.5;

        $d1 = $d1 - $d0;

        $d0 = (double) $i0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d0);

        $d0 = $d0 * 0.5;

        $d1 = $d1 - $d0;

        return $d1;
    }
    public double normalApproximateProbability(int)
    {
        org.apache.commons.math3.distribution.PoissonDistribution r0;
        int $i0;
        double $d0;
        org.apache.commons.math3.distribution.NormalDistribution $r1;

        r0 := @this: org.apache.commons.math3.distribution.PoissonDistribution;

        $i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.math3.distribution.PoissonDistribution: org.apache.commons.math3.distribution.NormalDistribution normal>;

        $d0 = (double) $i0;

        $d0 = $d0 + 0.5;

        $d0 = virtualinvoke $r1.<org.apache.commons.math3.distribution.NormalDistribution: double cumulativeProbability(double)>($d0);

        return $d0;
    }
    public double probability(int)
    {
        org.apache.commons.math3.distribution.PoissonDistribution r0;
        int $i0;
        double $d0;
        byte $b1;

        r0 := @this: org.apache.commons.math3.distribution.PoissonDistribution;

        $i0 := @parameter0: int;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.distribution.PoissonDistribution: double logProbability(int)>($i0);

        $b1 = $d0 cmpl #-Infinity;

        if $b1 != 0 goto label1;

        return 0.0;

     label1:
        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d0);

        return $d0;
    }
    public int sample()
    {
        org.apache.commons.math3.distribution.PoissonDistribution r0;
        double $d0;
        long $l0;
        int $i1;

        r0 := @this: org.apache.commons.math3.distribution.PoissonDistribution;

        $d0 = r0.<org.apache.commons.math3.distribution.PoissonDistribution: double mean>;

        $l0 = specialinvoke r0.<org.apache.commons.math3.distribution.PoissonDistribution: long nextPoisson(double)>($d0);

        $l0 = staticinvoke <org.apache.commons.math3.util.FastMath: long min(long,long)>($l0, 2147483647L);

        $i1 = (int) $l0;

        return $i1;
    }
