org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow extends java.lang.Object implements java.lang.Comparable
private java.lang.Double mean
private final double[] row
    void <init>(double[])
    {
        org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow r0;
        double[] $r1;
        java.lang.Double $r2;
        int i0, $i1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow;

        $r1 := @parameter0: double[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow: double[] row> = $r1;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);

        r0.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow: java.lang.Double mean> = $r2;

        i0 = 0;

     label1:
        $i1 = lengthof $r1;

        if i0 >= $i1 goto label2;

        $r2 = r0.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow: java.lang.Double mean>;

        $d0 = virtualinvoke $r2.<java.lang.Double: double doubleValue()>();

        $d1 = $r1[i0];

        $d0 = $d0 + $d1;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        r0.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow: java.lang.Double mean> = $r2;

        i0 = i0 + 1;

        goto label1;

     label2:
        $r2 = r0.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow: java.lang.Double mean>;

        $d0 = virtualinvoke $r2.<java.lang.Double: double doubleValue()>();

        i0 = lengthof $r1;

        $d1 = (double) i0;

        $d0 = $d0 / $d1;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        r0.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow: java.lang.Double mean> = $r2;

        return;
    }
    public volatile int compareTo(java.lang.Object)
    {
        org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow r0, $r2;
        int $i0;
        java.lang.Object $r1;

        r0 := @this: org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow) $r1;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow: int compareTo(org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow)>($r2);

        return $i0;
    }
    public int compareTo(org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow)
    {
        org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow r0, $r1;
        java.lang.Double $r2, $r3;
        int $i0;

        r0 := @this: org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow;

        $r1 := @parameter0: org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow;

        $r3 = r0.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow: java.lang.Double mean>;

        $r2 = $r1.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow: java.lang.Double mean>;

        $i0 = virtualinvoke $r3.<java.lang.Double: int compareTo(java.lang.Double)>($r2);

        return $i0;
    }
    public boolean equals(java.lang.Object)
    {
        org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow r0;
        double[] $r1, $r3;
        boolean $z0;
        java.lang.Object r2;

        r0 := @this: org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow;

        r2 := @parameter0: java.lang.Object;

        if r0 != r2 goto label1;

        return 1;

     label1:
        $z0 = r2 instanceof org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow;

        if $z0 == 0 goto label2;

        $r3 = r0.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow: double[] row>;

        r0 = (org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow) r2;

        $r1 = r0.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow: double[] row>;

        $z0 = staticinvoke <org.apache.commons.math3.util.MathArrays: boolean equals(double[],double[])>($r3, $r1);

        return $z0;

     label2:
        return 0;
    }
    public double[] getRow()
    {
        org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow r0;
        double[] r1;

        r0 := @this: org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow;

        r1 = r0.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow: double[] row>;

        return r1;
    }
    public int hashCode()
    {
        org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow r0;
        int $i0;
        double[] $r1;

        r0 := @this: org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow;

        $r1 = r0.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow: double[] row>;

        $i0 = staticinvoke <java.util.Arrays: int hashCode(double[])>($r1);

        return $i0;
    }
