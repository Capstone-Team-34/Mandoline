org.apache.commons.math3.distribution.UniformRealDistribution extends org.apache.commons.math3.distribution.AbstractRealDistribution
public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY
private static final long serialVersionUID
private final double lower
private final double upper
    public void <init>()
    {
        org.apache.commons.math3.distribution.UniformRealDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.UniformRealDistribution;

        specialinvoke r0.<org.apache.commons.math3.distribution.UniformRealDistribution: void <init>(double,double)>(0.0, 1.0);

        return;
    }
    public void <init>(double, double) throws org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.distribution.UniformRealDistribution r0;
        double $d0, $d1;
        org.apache.commons.math3.random.Well19937c $r1;

        r0 := @this: org.apache.commons.math3.distribution.UniformRealDistribution;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $r1 = new org.apache.commons.math3.random.Well19937c;

        specialinvoke $r1.<org.apache.commons.math3.random.Well19937c: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.distribution.UniformRealDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double,double)>($r1, $d0, $d1);

        return;
    }
    public void <init>(double, double, double) throws org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.distribution.UniformRealDistribution r0;
        double $d0, $d1, $d2;
        org.apache.commons.math3.random.Well19937c $r1;

        r0 := @this: org.apache.commons.math3.distribution.UniformRealDistribution;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $r1 = new org.apache.commons.math3.random.Well19937c;

        specialinvoke $r1.<org.apache.commons.math3.random.Well19937c: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.distribution.UniformRealDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double,double)>($r1, $d0, $d1);

        return;
    }
    public void <init>(org.apache.commons.math3.random.RandomGenerator, double, double) throws org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.distribution.UniformRealDistribution r0;
        org.apache.commons.math3.random.RandomGenerator $r1;
        double $d0, $d1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        byte $b0;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r3;
        java.lang.Double $r4, $r5;

        r0 := @this: org.apache.commons.math3.distribution.UniformRealDistribution;

        $r1 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        $d0 := @parameter1: double;

        $d1 := @parameter2: double;

        specialinvoke r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator)>($r1);

        $b0 = $d0 cmpl $d1;

        if $b0 < 0 goto label1;

        $r3 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats LOWER_BOUND_NOT_BELOW_UPPER_BOUND>;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        specialinvoke $r3.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r2, $r4, $r5, 0);

        throw $r3;

     label1:
        r0.<org.apache.commons.math3.distribution.UniformRealDistribution: double lower> = $d0;

        r0.<org.apache.commons.math3.distribution.UniformRealDistribution: double upper> = $d1;

        return;
    }
    public void <init>(org.apache.commons.math3.random.RandomGenerator, double, double, double)
    {
        org.apache.commons.math3.distribution.UniformRealDistribution r0;
        org.apache.commons.math3.random.RandomGenerator $r1;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.distribution.UniformRealDistribution;

        $r1 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        $d0 := @parameter1: double;

        $d1 := @parameter2: double;

        $d2 := @parameter3: double;

        specialinvoke r0.<org.apache.commons.math3.distribution.UniformRealDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double,double)>($r1, $d0, $d1);

        return;
    }
    public double cumulativeProbability(double)
    {
        org.apache.commons.math3.distribution.UniformRealDistribution r0;
        double $d0, $d1, $d2;
        byte $b0;

        r0 := @this: org.apache.commons.math3.distribution.UniformRealDistribution;

        $d0 := @parameter0: double;

        $d1 = r0.<org.apache.commons.math3.distribution.UniformRealDistribution: double lower>;

        $b0 = $d0 cmpg $d1;

        if $b0 > 0 goto label1;

        return 0.0;

     label1:
        $d1 = r0.<org.apache.commons.math3.distribution.UniformRealDistribution: double upper>;

        $b0 = $d0 cmpl $d1;

        if $b0 < 0 goto label2;

        return 1.0;

     label2:
        $d1 = r0.<org.apache.commons.math3.distribution.UniformRealDistribution: double lower>;

        $d0 = $d0 - $d1;

        $d2 = r0.<org.apache.commons.math3.distribution.UniformRealDistribution: double upper>;

        $d1 = r0.<org.apache.commons.math3.distribution.UniformRealDistribution: double lower>;

        $d1 = $d2 - $d1;

        $d0 = $d0 / $d1;

        return $d0;
    }
    public double density(double)
    {
        org.apache.commons.math3.distribution.UniformRealDistribution r0;
        double $d0, $d1;
        byte $b0;

        r0 := @this: org.apache.commons.math3.distribution.UniformRealDistribution;

        $d0 := @parameter0: double;

        $d1 = r0.<org.apache.commons.math3.distribution.UniformRealDistribution: double lower>;

        $b0 = $d0 cmpg $d1;

        if $b0 < 0 goto label1;

        $d1 = r0.<org.apache.commons.math3.distribution.UniformRealDistribution: double upper>;

        $b0 = $d0 cmpl $d1;

        if $b0 <= 0 goto label2;

     label1:
        return 0.0;

     label2:
        $d1 = r0.<org.apache.commons.math3.distribution.UniformRealDistribution: double upper>;

        $d0 = r0.<org.apache.commons.math3.distribution.UniformRealDistribution: double lower>;

        $d0 = $d1 - $d0;

        $d0 = 1.0 / $d0;

        return $d0;
    }
    public double getNumericalMean()
    {
        org.apache.commons.math3.distribution.UniformRealDistribution r0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.distribution.UniformRealDistribution;

        $d1 = r0.<org.apache.commons.math3.distribution.UniformRealDistribution: double lower>;

        $d0 = r0.<org.apache.commons.math3.distribution.UniformRealDistribution: double upper>;

        $d0 = $d1 + $d0;

        $d0 = 0.5 * $d0;

        return $d0;
    }
    public double getNumericalVariance()
    {
        org.apache.commons.math3.distribution.UniformRealDistribution r0;
        double d0, $d1;

        r0 := @this: org.apache.commons.math3.distribution.UniformRealDistribution;

        d0 = r0.<org.apache.commons.math3.distribution.UniformRealDistribution: double upper>;

        $d1 = r0.<org.apache.commons.math3.distribution.UniformRealDistribution: double lower>;

        d0 = d0 - $d1;

        d0 = d0 * d0;

        d0 = d0 / 12.0;

        return d0;
    }
    public double getSupportLowerBound()
    {
        org.apache.commons.math3.distribution.UniformRealDistribution r0;
        double d0;

        r0 := @this: org.apache.commons.math3.distribution.UniformRealDistribution;

        d0 = r0.<org.apache.commons.math3.distribution.UniformRealDistribution: double lower>;

        return d0;
    }
    public double getSupportUpperBound()
    {
        org.apache.commons.math3.distribution.UniformRealDistribution r0;
        double d0;

        r0 := @this: org.apache.commons.math3.distribution.UniformRealDistribution;

        d0 = r0.<org.apache.commons.math3.distribution.UniformRealDistribution: double upper>;

        return d0;
    }
    public double inverseCumulativeProbability(double) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.distribution.UniformRealDistribution r0;
        double $d0, $d1, $d2;
        byte $b0;
        org.apache.commons.math3.exception.OutOfRangeException $r1;
        java.lang.Double $r2;
        java.lang.Integer $r3, $r4;

        r0 := @this: org.apache.commons.math3.distribution.UniformRealDistribution;

        $d0 := @parameter0: double;

        $b0 = $d0 cmpg 0.0;

        if $b0 < 0 goto label1;

        $b0 = $d0 cmpl 1.0;

        if $b0 <= 0 goto label2;

     label1:
        $r1 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke $r1.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r2, $r3, $r4);

        throw $r1;

     label2:
        $d1 = r0.<org.apache.commons.math3.distribution.UniformRealDistribution: double upper>;

        $d2 = r0.<org.apache.commons.math3.distribution.UniformRealDistribution: double lower>;

        $d1 = $d1 - $d2;

        $d0 = $d1 * $d0;

        $d1 = r0.<org.apache.commons.math3.distribution.UniformRealDistribution: double lower>;

        $d0 = $d0 + $d1;

        return $d0;
    }
    public boolean isSupportConnected()
    {
        org.apache.commons.math3.distribution.UniformRealDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.UniformRealDistribution;

        return 1;
    }
    public boolean isSupportLowerBoundInclusive()
    {
        org.apache.commons.math3.distribution.UniformRealDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.UniformRealDistribution;

        return 1;
    }
    public boolean isSupportUpperBoundInclusive()
    {
        org.apache.commons.math3.distribution.UniformRealDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.UniformRealDistribution;

        return 1;
    }
    public double sample()
    {
        org.apache.commons.math3.distribution.UniformRealDistribution r0;
        double $d0, $d1, $d2;
        org.apache.commons.math3.random.RandomGenerator $r1;

        r0 := @this: org.apache.commons.math3.distribution.UniformRealDistribution;

        $r1 = r0.<org.apache.commons.math3.distribution.UniformRealDistribution: org.apache.commons.math3.random.RandomGenerator random>;

        $d0 = interfaceinvoke $r1.<org.apache.commons.math3.random.RandomGenerator: double nextDouble()>();

        $d1 = r0.<org.apache.commons.math3.distribution.UniformRealDistribution: double upper>;

        $d1 = $d1 * $d0;

        $d2 = 1.0 - $d0;

        $d0 = r0.<org.apache.commons.math3.distribution.UniformRealDistribution: double lower>;

        $d0 = $d2 * $d0;

        $d1 = $d1 + $d0;

        return $d1;
    }
