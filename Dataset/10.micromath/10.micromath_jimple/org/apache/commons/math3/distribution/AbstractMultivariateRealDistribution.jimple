org.apache.commons.math3.distribution.AbstractMultivariateRealDistribution extends java.lang.Object implements org.apache.commons.math3.distribution.MultivariateRealDistribution
private final int dimension
protected final org.apache.commons.math3.random.RandomGenerator random
    protected void <init>(org.apache.commons.math3.random.RandomGenerator, int)
    {
        org.apache.commons.math3.distribution.AbstractMultivariateRealDistribution r0;
        org.apache.commons.math3.random.RandomGenerator $r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.distribution.AbstractMultivariateRealDistribution;

        $r1 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        $i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.distribution.AbstractMultivariateRealDistribution: org.apache.commons.math3.random.RandomGenerator random> = $r1;

        r0.<org.apache.commons.math3.distribution.AbstractMultivariateRealDistribution: int dimension> = $i0;

        return;
    }
    public int getDimension()
    {
        org.apache.commons.math3.distribution.AbstractMultivariateRealDistribution r0;
        int i0;

        r0 := @this: org.apache.commons.math3.distribution.AbstractMultivariateRealDistribution;

        i0 = r0.<org.apache.commons.math3.distribution.AbstractMultivariateRealDistribution: int dimension>;

        return i0;
    }
    public void reseedRandomGenerator(long)
    {
        org.apache.commons.math3.distribution.AbstractMultivariateRealDistribution r0;
        long $l0;
        org.apache.commons.math3.random.RandomGenerator $r1;

        r0 := @this: org.apache.commons.math3.distribution.AbstractMultivariateRealDistribution;

        $l0 := @parameter0: long;

        $r1 = r0.<org.apache.commons.math3.distribution.AbstractMultivariateRealDistribution: org.apache.commons.math3.random.RandomGenerator random>;

        interfaceinvoke $r1.<org.apache.commons.math3.random.RandomGenerator: void setSeed(long)>($l0);

        return;
    }
public abstract double[] sample() { 
// no body
} 
    public double[][] sample(int)
    {
        org.apache.commons.math3.distribution.AbstractMultivariateRealDistribution r0;
        int $i0, $i1;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        java.lang.Integer $r3;
        int[] $r4;
        java.lang.Class $r5;
        java.lang.Object $r6;
        double[][] r7;
        double[] $r8;

        r0 := @this: org.apache.commons.math3.distribution.AbstractMultivariateRealDistribution;

        $i0 := @parameter0: int;

        if $i0 > 0 goto label1;

        $r1 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NUMBER_OF_SAMPLES>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r1.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r2, $r3);

        throw $r1;

     label1:
        $i1 = r0.<org.apache.commons.math3.distribution.AbstractMultivariateRealDistribution: int dimension>;

        $r4 = newarray (int)[2];

        $r4[0] = $i0;

        $r4[1] = $i1;

        $r5 = <java.lang.Double: java.lang.Class TYPE>;

        $r6 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r5, $r4);

        r7 = (double[][]) $r6;

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label3;

        $r8 = virtualinvoke r0.<org.apache.commons.math3.distribution.AbstractMultivariateRealDistribution: double[] sample()>();

        r7[$i1] = $r8;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        return r7;
    }
