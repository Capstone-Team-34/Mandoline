org.apache.commons.math3.distribution.PascalDistribution extends org.apache.commons.math3.distribution.AbstractIntegerDistribution
private static final long serialVersionUID
private final double log1mProbabilityOfSuccess
private final double logProbabilityOfSuccess
private final int numberOfSuccesses
private final double probabilityOfSuccess
    public void <init>(int, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.distribution.PascalDistribution r0;
        int $i0;
        double $d0;
        org.apache.commons.math3.random.Well19937c $r1;

        r0 := @this: org.apache.commons.math3.distribution.PascalDistribution;

        $i0 := @parameter0: int;

        $d0 := @parameter1: double;

        $r1 = new org.apache.commons.math3.random.Well19937c;

        specialinvoke $r1.<org.apache.commons.math3.random.Well19937c: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.distribution.PascalDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,int,double)>($r1, $i0, $d0);

        return;
    }
    public void <init>(org.apache.commons.math3.random.RandomGenerator, int, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.distribution.PascalDistribution r0;
        org.apache.commons.math3.random.RandomGenerator $r1;
        int $i0;
        double $d0, $d1;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3;
        java.lang.Integer $r4, $r7;
        byte $b1;
        org.apache.commons.math3.exception.OutOfRangeException $r5;
        java.lang.Double $r6;

        r0 := @this: org.apache.commons.math3.distribution.PascalDistribution;

        $r1 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        $i0 := @parameter1: int;

        $d0 := @parameter2: double;

        specialinvoke r0.<org.apache.commons.math3.distribution.AbstractIntegerDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator)>($r1);

        if $i0 > 0 goto label1;

        $r2 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NUMBER_OF_SUCCESSES>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r2.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r3, $r4);

        throw $r2;

     label1:
        $b1 = $d0 cmpg 0.0;

        if $b1 < 0 goto label2;

        $b1 = $d0 cmpl 1.0;

        if $b1 <= 0 goto label3;

     label2:
        $r5 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke $r5.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r6, $r4, $r7);

        throw $r5;

     label3:
        r0.<org.apache.commons.math3.distribution.PascalDistribution: int numberOfSuccesses> = $i0;

        r0.<org.apache.commons.math3.distribution.PascalDistribution: double probabilityOfSuccess> = $d0;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d0);

        r0.<org.apache.commons.math3.distribution.PascalDistribution: double logProbabilityOfSuccess> = $d1;

        $d0 = neg $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double log1p(double)>($d0);

        r0.<org.apache.commons.math3.distribution.PascalDistribution: double log1mProbabilityOfSuccess> = $d0;

        return;
    }
    public double cumulativeProbability(int)
    {
        org.apache.commons.math3.distribution.PascalDistribution r0;
        int $i0, $i1;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.distribution.PascalDistribution;

        $i0 := @parameter0: int;

        if $i0 >= 0 goto label1;

        return 0.0;

     label1:
        $d0 = r0.<org.apache.commons.math3.distribution.PascalDistribution: double probabilityOfSuccess>;

        $i1 = r0.<org.apache.commons.math3.distribution.PascalDistribution: int numberOfSuccesses>;

        $d1 = (double) $i1;

        $d2 = (double) $i0;

        $d2 = $d2 + 1.0;

        $d0 = staticinvoke <org.apache.commons.math3.special.Beta: double regularizedBeta(double,double,double)>($d0, $d1, $d2);

        return $d0;
    }
    public int getNumberOfSuccesses()
    {
        org.apache.commons.math3.distribution.PascalDistribution r0;
        int i0;

        r0 := @this: org.apache.commons.math3.distribution.PascalDistribution;

        i0 = r0.<org.apache.commons.math3.distribution.PascalDistribution: int numberOfSuccesses>;

        return i0;
    }
    public double getNumericalMean()
    {
        org.apache.commons.math3.distribution.PascalDistribution r0;
        double d0, $d1, $d2;
        int $i0;

        r0 := @this: org.apache.commons.math3.distribution.PascalDistribution;

        $d1 = virtualinvoke r0.<org.apache.commons.math3.distribution.PascalDistribution: double getProbabilityOfSuccess()>();

        $i0 = virtualinvoke r0.<org.apache.commons.math3.distribution.PascalDistribution: int getNumberOfSuccesses()>();

        d0 = (double) $i0;

        $d2 = 1.0 - $d1;

        d0 = $d2 * d0;

        $d1 = d0 / $d1;

        return $d1;
    }
    public double getNumericalVariance()
    {
        org.apache.commons.math3.distribution.PascalDistribution r0;
        double d0, $d1, $d2;
        int $i0;

        r0 := @this: org.apache.commons.math3.distribution.PascalDistribution;

        $d1 = virtualinvoke r0.<org.apache.commons.math3.distribution.PascalDistribution: double getProbabilityOfSuccess()>();

        $i0 = virtualinvoke r0.<org.apache.commons.math3.distribution.PascalDistribution: int getNumberOfSuccesses()>();

        d0 = (double) $i0;

        $d2 = 1.0 - $d1;

        d0 = $d2 * d0;

        $d1 = $d1 * $d1;

        $d1 = d0 / $d1;

        return $d1;
    }
    public double getProbabilityOfSuccess()
    {
        org.apache.commons.math3.distribution.PascalDistribution r0;
        double d0;

        r0 := @this: org.apache.commons.math3.distribution.PascalDistribution;

        d0 = r0.<org.apache.commons.math3.distribution.PascalDistribution: double probabilityOfSuccess>;

        return d0;
    }
    public int getSupportLowerBound()
    {
        org.apache.commons.math3.distribution.PascalDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.PascalDistribution;

        return 0;
    }
    public int getSupportUpperBound()
    {
        org.apache.commons.math3.distribution.PascalDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.PascalDistribution;

        return 2147483647;
    }
    public boolean isSupportConnected()
    {
        org.apache.commons.math3.distribution.PascalDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.PascalDistribution;

        return 1;
    }
    public double logProbability(int)
    {
        org.apache.commons.math3.distribution.PascalDistribution r0;
        int $i0, $i1, $i2;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.distribution.PascalDistribution;

        $i0 := @parameter0: int;

        if $i0 >= 0 goto label1;

        return #-Infinity;

     label1:
        $i1 = r0.<org.apache.commons.math3.distribution.PascalDistribution: int numberOfSuccesses>;

        $i1 = $i1 + $i0;

        $i1 = $i1 + -1;

        $i2 = r0.<org.apache.commons.math3.distribution.PascalDistribution: int numberOfSuccesses>;

        $i2 = $i2 + -1;

        $d0 = staticinvoke <org.apache.commons.math3.util.CombinatoricsUtils: double binomialCoefficientLog(int,int)>($i1, $i2);

        $d1 = r0.<org.apache.commons.math3.distribution.PascalDistribution: double logProbabilityOfSuccess>;

        $i1 = r0.<org.apache.commons.math3.distribution.PascalDistribution: int numberOfSuccesses>;

        $d2 = (double) $i1;

        $d1 = $d1 * $d2;

        $d0 = $d0 + $d1;

        $d1 = r0.<org.apache.commons.math3.distribution.PascalDistribution: double log1mProbabilityOfSuccess>;

        $d2 = (double) $i0;

        $d1 = $d1 * $d2;

        $d0 = $d0 + $d1;

        return $d0;
    }
    public double probability(int)
    {
        org.apache.commons.math3.distribution.PascalDistribution r0;
        int $i0, $i1, $i2;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.distribution.PascalDistribution;

        $i0 := @parameter0: int;

        if $i0 >= 0 goto label1;

        return 0.0;

     label1:
        $i1 = r0.<org.apache.commons.math3.distribution.PascalDistribution: int numberOfSuccesses>;

        $i1 = $i1 + $i0;

        $i1 = $i1 + -1;

        $i2 = r0.<org.apache.commons.math3.distribution.PascalDistribution: int numberOfSuccesses>;

        $i2 = $i2 + -1;

        $d0 = staticinvoke <org.apache.commons.math3.util.CombinatoricsUtils: double binomialCoefficientDouble(int,int)>($i1, $i2);

        $d1 = r0.<org.apache.commons.math3.distribution.PascalDistribution: double probabilityOfSuccess>;

        $i1 = r0.<org.apache.commons.math3.distribution.PascalDistribution: int numberOfSuccesses>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,int)>($d1, $i1);

        $d0 = $d0 * $d1;

        $d1 = r0.<org.apache.commons.math3.distribution.PascalDistribution: double probabilityOfSuccess>;

        $d1 = 1.0 - $d1;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,int)>($d1, $i0);

        $d0 = $d0 * $d1;

        return $d0;
    }
