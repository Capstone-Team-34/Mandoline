org.apache.commons.math3.distribution.EnumeratedIntegerDistribution extends org.apache.commons.math3.distribution.AbstractIntegerDistribution
private static final long serialVersionUID
protected final org.apache.commons.math3.distribution.EnumeratedDistribution innerDistribution
    public void <init>(org.apache.commons.math3.random.RandomGenerator, int[])
    {
        org.apache.commons.math3.distribution.EnumeratedIntegerDistribution r0;
        org.apache.commons.math3.random.RandomGenerator $r1;
        int[] $r2;
        java.util.HashMap r3;
        double d0, $d1;
        int i0, i1, i2;
        double[] r4;
        java.lang.Integer $r5, r7;
        java.lang.Object $r6;
        java.util.Set $r8;
        java.util.Iterator $r9;
        boolean $z0;
        java.util.Map$Entry r10;
        org.apache.commons.math3.distribution.EnumeratedDistribution $r11;
        java.util.List $r12;

        r0 := @this: org.apache.commons.math3.distribution.EnumeratedIntegerDistribution;

        $r1 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        $r2 := @parameter1: int[];

        specialinvoke r0.<org.apache.commons.math3.distribution.AbstractIntegerDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator)>($r1);

        r3 = new java.util.HashMap;

        specialinvoke r3.<java.util.HashMap: void <init>()>();

        i0 = lengthof $r2;

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        i1 = $r2[i2];

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r6 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        r7 = (java.lang.Integer) $r6;

        if r7 != null goto label2;

        r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

     label2:
        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        i1 = virtualinvoke r7.<java.lang.Integer: int intValue()>();

        i1 = i1 + 1;

        r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r7);

        i2 = i2 + 1;

        goto label1;

     label3:
        i0 = interfaceinvoke r3.<java.util.Map: int size()>();

        i2 = lengthof $r2;

        d0 = (double) i2;

        $r2 = newarray (int)[i0];

        r4 = newarray (double)[i0];

        i0 = 0;

        $r8 = interfaceinvoke r3.<java.util.Map: java.util.Set entrySet()>();

        $r9 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r6 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r10 = (java.util.Map$Entry) $r6;

        $r6 = interfaceinvoke r10.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r5 = (java.lang.Integer) $r6;

        i2 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        $r2[i0] = i2;

        $r6 = interfaceinvoke r10.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r5 = (java.lang.Integer) $r6;

        i2 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        $d1 = (double) i2;

        $d1 = $d1 / d0;

        r4[i0] = $d1;

        i0 = i0 + 1;

        goto label4;

     label5:
        $r11 = new org.apache.commons.math3.distribution.EnumeratedDistribution;

        $r12 = staticinvoke <org.apache.commons.math3.distribution.EnumeratedIntegerDistribution: java.util.List createDistribution(int[],double[])>($r2, r4);

        specialinvoke $r11.<org.apache.commons.math3.distribution.EnumeratedDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,java.util.List)>($r1, $r12);

        r0.<org.apache.commons.math3.distribution.EnumeratedIntegerDistribution: org.apache.commons.math3.distribution.EnumeratedDistribution innerDistribution> = $r11;

        return;
    }
    public void <init>(org.apache.commons.math3.random.RandomGenerator, int[], double[]) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.MathArithmeticException, org.apache.commons.math3.exception.NotFiniteNumberException, org.apache.commons.math3.exception.NotANumberException
    {
        org.apache.commons.math3.distribution.EnumeratedIntegerDistribution r0;
        org.apache.commons.math3.random.RandomGenerator $r1;
        int[] $r2;
        double[] $r3;
        org.apache.commons.math3.distribution.EnumeratedDistribution $r4;
        java.util.List $r5;

        r0 := @this: org.apache.commons.math3.distribution.EnumeratedIntegerDistribution;

        $r1 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        $r2 := @parameter1: int[];

        $r3 := @parameter2: double[];

        specialinvoke r0.<org.apache.commons.math3.distribution.AbstractIntegerDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator)>($r1);

        $r4 = new org.apache.commons.math3.distribution.EnumeratedDistribution;

        $r5 = staticinvoke <org.apache.commons.math3.distribution.EnumeratedIntegerDistribution: java.util.List createDistribution(int[],double[])>($r2, $r3);

        specialinvoke $r4.<org.apache.commons.math3.distribution.EnumeratedDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,java.util.List)>($r1, $r5);

        r0.<org.apache.commons.math3.distribution.EnumeratedIntegerDistribution: org.apache.commons.math3.distribution.EnumeratedDistribution innerDistribution> = $r4;

        return;
    }
    public void <init>(int[])
    {
        org.apache.commons.math3.distribution.EnumeratedIntegerDistribution r0;
        int[] $r1;
        org.apache.commons.math3.random.Well19937c $r2;

        r0 := @this: org.apache.commons.math3.distribution.EnumeratedIntegerDistribution;

        $r1 := @parameter0: int[];

        $r2 = new org.apache.commons.math3.random.Well19937c;

        specialinvoke $r2.<org.apache.commons.math3.random.Well19937c: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.distribution.EnumeratedIntegerDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,int[])>($r2, $r1);

        return;
    }
    public void <init>(int[], double[]) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.MathArithmeticException, org.apache.commons.math3.exception.NotFiniteNumberException, org.apache.commons.math3.exception.NotANumberException
    {
        org.apache.commons.math3.distribution.EnumeratedIntegerDistribution r0;
        int[] $r1;
        double[] $r2;
        org.apache.commons.math3.random.Well19937c $r3;

        r0 := @this: org.apache.commons.math3.distribution.EnumeratedIntegerDistribution;

        $r1 := @parameter0: int[];

        $r2 := @parameter1: double[];

        $r3 = new org.apache.commons.math3.random.Well19937c;

        specialinvoke $r3.<org.apache.commons.math3.random.Well19937c: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.distribution.EnumeratedIntegerDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,int[],double[])>($r3, $r1, $r2);

        return;
    }
    private static java.util.List createDistribution(int[], double[])
    {
        int[] $r0;
        double[] $r1;
        java.util.ArrayList r2;
        int $i0, $i1;
        org.apache.commons.math3.exception.DimensionMismatchException $r3;
        org.apache.commons.math3.util.Pair $r4;
        java.lang.Integer $r5;
        double $d0;
        java.lang.Double $r6;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: double[];

        $i0 = lengthof $r0;

        $i1 = lengthof $r1;

        if $i0 == $i1 goto label1;

        $r3 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i0 = lengthof $r1;

        $i1 = lengthof $r0;

        specialinvoke $r3.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i0, $i1);

        throw $r3;

     label1:
        r2 = new java.util.ArrayList;

        $i0 = lengthof $r0;

        specialinvoke r2.<java.util.ArrayList: void <init>(int)>($i0);

        $i0 = 0;

     label2:
        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label3;

        $r4 = new org.apache.commons.math3.util.Pair;

        $i1 = $r0[$i0];

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $d0 = $r1[$i0];

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        specialinvoke $r4.<org.apache.commons.math3.util.Pair: void <init>(java.lang.Object,java.lang.Object)>($r5, $r6);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r4);

        $i0 = $i0 + 1;

        goto label2;

     label3:
        return r2;
    }
    public double cumulativeProbability(int)
    {
        org.apache.commons.math3.distribution.EnumeratedIntegerDistribution r0;
        int $i0, $i1;
        double d0, $d1;
        org.apache.commons.math3.distribution.EnumeratedDistribution $r1;
        java.util.List $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        org.apache.commons.math3.util.Pair r5;
        java.lang.Integer $r6;
        java.lang.Double $r7;

        r0 := @this: org.apache.commons.math3.distribution.EnumeratedIntegerDistribution;

        $i0 := @parameter0: int;

        d0 = 0.0;

        $r1 = r0.<org.apache.commons.math3.distribution.EnumeratedIntegerDistribution: org.apache.commons.math3.distribution.EnumeratedDistribution innerDistribution>;

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.distribution.EnumeratedDistribution: java.util.List getPmf()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.commons.math3.util.Pair) $r4;

        $r4 = virtualinvoke r5.<org.apache.commons.math3.util.Pair: java.lang.Object getKey()>();

        $r6 = (java.lang.Integer) $r4;

        $i1 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        if $i1 > $i0 goto label1;

        $r4 = virtualinvoke r5.<org.apache.commons.math3.util.Pair: java.lang.Object getValue()>();

        $r7 = (java.lang.Double) $r4;

        $d1 = virtualinvoke $r7.<java.lang.Double: double doubleValue()>();

        d0 = d0 + $d1;

        goto label1;

     label2:
        return d0;
    }
    public double getNumericalMean()
    {
        org.apache.commons.math3.distribution.EnumeratedIntegerDistribution r0;
        double d0, $d1, $d2;
        org.apache.commons.math3.distribution.EnumeratedDistribution $r1;
        java.util.List $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        org.apache.commons.math3.util.Pair r5;
        java.lang.Double $r6;
        java.lang.Integer $r7;
        int $i0;

        r0 := @this: org.apache.commons.math3.distribution.EnumeratedIntegerDistribution;

        d0 = 0.0;

        $r1 = r0.<org.apache.commons.math3.distribution.EnumeratedIntegerDistribution: org.apache.commons.math3.distribution.EnumeratedDistribution innerDistribution>;

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.distribution.EnumeratedDistribution: java.util.List getPmf()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.commons.math3.util.Pair) $r4;

        $r4 = virtualinvoke r5.<org.apache.commons.math3.util.Pair: java.lang.Object getValue()>();

        $r6 = (java.lang.Double) $r4;

        $d1 = virtualinvoke $r6.<java.lang.Double: double doubleValue()>();

        $r4 = virtualinvoke r5.<org.apache.commons.math3.util.Pair: java.lang.Object getKey()>();

        $r7 = (java.lang.Integer) $r4;

        $i0 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        $d2 = (double) $i0;

        $d1 = $d2 * $d1;

        d0 = d0 + $d1;

        goto label1;

     label2:
        return d0;
    }
    public double getNumericalVariance()
    {
        org.apache.commons.math3.distribution.EnumeratedIntegerDistribution r0;
        double d0, d1, $d2, $d3;
        org.apache.commons.math3.distribution.EnumeratedDistribution $r1;
        java.util.List $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        org.apache.commons.math3.util.Pair r5;
        java.lang.Double $r6;
        java.lang.Integer $r7;
        int $i0;

        r0 := @this: org.apache.commons.math3.distribution.EnumeratedIntegerDistribution;

        d0 = 0.0;

        d1 = 0.0;

        $r1 = r0.<org.apache.commons.math3.distribution.EnumeratedIntegerDistribution: org.apache.commons.math3.distribution.EnumeratedDistribution innerDistribution>;

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.distribution.EnumeratedDistribution: java.util.List getPmf()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.commons.math3.util.Pair) $r4;

        $r4 = virtualinvoke r5.<org.apache.commons.math3.util.Pair: java.lang.Object getValue()>();

        $r6 = (java.lang.Double) $r4;

        $d2 = virtualinvoke $r6.<java.lang.Double: double doubleValue()>();

        $r4 = virtualinvoke r5.<org.apache.commons.math3.util.Pair: java.lang.Object getKey()>();

        $r7 = (java.lang.Integer) $r4;

        $i0 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        $d3 = (double) $i0;

        $d2 = $d3 * $d2;

        d0 = d0 + $d2;

        $r4 = virtualinvoke r5.<org.apache.commons.math3.util.Pair: java.lang.Object getValue()>();

        $r6 = (java.lang.Double) $r4;

        $d2 = virtualinvoke $r6.<java.lang.Double: double doubleValue()>();

        $r4 = virtualinvoke r5.<org.apache.commons.math3.util.Pair: java.lang.Object getKey()>();

        $r7 = (java.lang.Integer) $r4;

        $i0 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        $d3 = (double) $i0;

        $d2 = $d2 * $d3;

        $r4 = virtualinvoke r5.<org.apache.commons.math3.util.Pair: java.lang.Object getKey()>();

        $r7 = (java.lang.Integer) $r4;

        $i0 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        $d3 = (double) $i0;

        $d2 = $d3 * $d2;

        d1 = d1 + $d2;

        goto label1;

     label2:
        d0 = d0 * d0;

        d1 = d1 - d0;

        return d1;
    }
    public int getSupportLowerBound()
    {
        org.apache.commons.math3.distribution.EnumeratedIntegerDistribution r0;
        int i0, $i1;
        org.apache.commons.math3.distribution.EnumeratedDistribution $r1;
        java.util.List $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        org.apache.commons.math3.util.Pair r5;
        java.lang.Integer $r6;
        java.lang.Double $r7;
        double $d0;
        byte $b2;

        r0 := @this: org.apache.commons.math3.distribution.EnumeratedIntegerDistribution;

        i0 = 2147483647;

        $r1 = r0.<org.apache.commons.math3.distribution.EnumeratedIntegerDistribution: org.apache.commons.math3.distribution.EnumeratedDistribution innerDistribution>;

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.distribution.EnumeratedDistribution: java.util.List getPmf()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.commons.math3.util.Pair) $r4;

        $r4 = virtualinvoke r5.<org.apache.commons.math3.util.Pair: java.lang.Object getKey()>();

        $r6 = (java.lang.Integer) $r4;

        $i1 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        if $i1 >= i0 goto label1;

        $r4 = virtualinvoke r5.<org.apache.commons.math3.util.Pair: java.lang.Object getValue()>();

        $r7 = (java.lang.Double) $r4;

        $d0 = virtualinvoke $r7.<java.lang.Double: double doubleValue()>();

        $b2 = $d0 cmpl 0.0;

        if $b2 <= 0 goto label1;

        $r4 = virtualinvoke r5.<org.apache.commons.math3.util.Pair: java.lang.Object getKey()>();

        $r6 = (java.lang.Integer) $r4;

        i0 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        goto label1;

     label2:
        return i0;
    }
    public int getSupportUpperBound()
    {
        org.apache.commons.math3.distribution.EnumeratedIntegerDistribution r0;
        int i0, $i1;
        org.apache.commons.math3.distribution.EnumeratedDistribution $r1;
        java.util.List $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        org.apache.commons.math3.util.Pair r5;
        java.lang.Integer $r6;
        java.lang.Double $r7;
        double $d0;
        byte $b2;

        r0 := @this: org.apache.commons.math3.distribution.EnumeratedIntegerDistribution;

        i0 = -2147483648;

        $r1 = r0.<org.apache.commons.math3.distribution.EnumeratedIntegerDistribution: org.apache.commons.math3.distribution.EnumeratedDistribution innerDistribution>;

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.distribution.EnumeratedDistribution: java.util.List getPmf()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.commons.math3.util.Pair) $r4;

        $r4 = virtualinvoke r5.<org.apache.commons.math3.util.Pair: java.lang.Object getKey()>();

        $r6 = (java.lang.Integer) $r4;

        $i1 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        if $i1 <= i0 goto label1;

        $r4 = virtualinvoke r5.<org.apache.commons.math3.util.Pair: java.lang.Object getValue()>();

        $r7 = (java.lang.Double) $r4;

        $d0 = virtualinvoke $r7.<java.lang.Double: double doubleValue()>();

        $b2 = $d0 cmpl 0.0;

        if $b2 <= 0 goto label1;

        $r4 = virtualinvoke r5.<org.apache.commons.math3.util.Pair: java.lang.Object getKey()>();

        $r6 = (java.lang.Integer) $r4;

        i0 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        goto label1;

     label2:
        return i0;
    }
    public boolean isSupportConnected()
    {
        org.apache.commons.math3.distribution.EnumeratedIntegerDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.EnumeratedIntegerDistribution;

        return 1;
    }
    public double probability(int)
    {
        org.apache.commons.math3.distribution.EnumeratedIntegerDistribution r0;
        int $i0;
        org.apache.commons.math3.distribution.EnumeratedDistribution $r1;
        java.lang.Integer $r2;
        double $d0;

        r0 := @this: org.apache.commons.math3.distribution.EnumeratedIntegerDistribution;

        $i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.math3.distribution.EnumeratedIntegerDistribution: org.apache.commons.math3.distribution.EnumeratedDistribution innerDistribution>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $d0 = virtualinvoke $r1.<org.apache.commons.math3.distribution.EnumeratedDistribution: double probability(java.lang.Object)>($r2);

        return $d0;
    }
    public int sample()
    {
        org.apache.commons.math3.distribution.EnumeratedIntegerDistribution r0;
        org.apache.commons.math3.distribution.EnumeratedDistribution $r1;
        java.lang.Object $r2;
        java.lang.Integer $r3;
        int $i0;

        r0 := @this: org.apache.commons.math3.distribution.EnumeratedIntegerDistribution;

        $r1 = r0.<org.apache.commons.math3.distribution.EnumeratedIntegerDistribution: org.apache.commons.math3.distribution.EnumeratedDistribution innerDistribution>;

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.distribution.EnumeratedDistribution: java.lang.Object sample()>();

        $r3 = (java.lang.Integer) $r2;

        $i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        return $i0;
    }
