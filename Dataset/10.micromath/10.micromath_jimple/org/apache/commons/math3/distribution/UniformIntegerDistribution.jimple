org.apache.commons.math3.distribution.UniformIntegerDistribution extends org.apache.commons.math3.distribution.AbstractIntegerDistribution
private static final long serialVersionUID
private final int lower
private final int upper
    public void <init>(int, int) throws org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.distribution.UniformIntegerDistribution r0;
        int $i0, $i1;
        org.apache.commons.math3.random.Well19937c $r1;

        r0 := @this: org.apache.commons.math3.distribution.UniformIntegerDistribution;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = new org.apache.commons.math3.random.Well19937c;

        specialinvoke $r1.<org.apache.commons.math3.random.Well19937c: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.distribution.UniformIntegerDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,int,int)>($r1, $i0, $i1);

        return;
    }
    public void <init>(org.apache.commons.math3.random.RandomGenerator, int, int) throws org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.distribution.UniformIntegerDistribution r0;
        org.apache.commons.math3.random.RandomGenerator $r1;
        int $i0, $i1;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3;
        java.lang.Integer $r4, $r5;

        r0 := @this: org.apache.commons.math3.distribution.UniformIntegerDistribution;

        $r1 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        specialinvoke r0.<org.apache.commons.math3.distribution.AbstractIntegerDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator)>($r1);

        if $i0 <= $i1 goto label1;

        $r2 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats LOWER_BOUND_NOT_BELOW_UPPER_BOUND>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        specialinvoke $r2.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r3, $r4, $r5, 1);

        throw $r2;

     label1:
        r0.<org.apache.commons.math3.distribution.UniformIntegerDistribution: int lower> = $i0;

        r0.<org.apache.commons.math3.distribution.UniformIntegerDistribution: int upper> = $i1;

        return;
    }
    public double cumulativeProbability(int)
    {
        org.apache.commons.math3.distribution.UniformIntegerDistribution r0;
        int $i0, $i1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.distribution.UniformIntegerDistribution;

        $i0 := @parameter0: int;

        $i1 = r0.<org.apache.commons.math3.distribution.UniformIntegerDistribution: int lower>;

        if $i0 >= $i1 goto label1;

        return 0.0;

     label1:
        $i1 = r0.<org.apache.commons.math3.distribution.UniformIntegerDistribution: int upper>;

        if $i0 > $i1 goto label2;

        $i1 = r0.<org.apache.commons.math3.distribution.UniformIntegerDistribution: int lower>;

        $i0 = $i0 - $i1;

        $d0 = (double) $i0;

        $d0 = $d0 + 1.0;

        $i1 = r0.<org.apache.commons.math3.distribution.UniformIntegerDistribution: int upper>;

        $i0 = r0.<org.apache.commons.math3.distribution.UniformIntegerDistribution: int lower>;

        $i0 = $i1 - $i0;

        $d1 = (double) $i0;

        $d1 = 1.0 + $d1;

        $d0 = $d0 / $d1;

        return $d0;

     label2:
        return 1.0;
    }
    public double getNumericalMean()
    {
        org.apache.commons.math3.distribution.UniformIntegerDistribution r0;
        int $i0, $i1;
        double $d0;

        r0 := @this: org.apache.commons.math3.distribution.UniformIntegerDistribution;

        $i1 = r0.<org.apache.commons.math3.distribution.UniformIntegerDistribution: int lower>;

        $i0 = r0.<org.apache.commons.math3.distribution.UniformIntegerDistribution: int upper>;

        $i0 = $i1 + $i0;

        $d0 = (double) $i0;

        $d0 = 0.5 * $d0;

        return $d0;
    }
    public double getNumericalVariance()
    {
        org.apache.commons.math3.distribution.UniformIntegerDistribution r0;
        double d0;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.distribution.UniformIntegerDistribution;

        $i1 = r0.<org.apache.commons.math3.distribution.UniformIntegerDistribution: int upper>;

        $i0 = r0.<org.apache.commons.math3.distribution.UniformIntegerDistribution: int lower>;

        $i0 = $i1 - $i0;

        $i0 = $i0 + 1;

        d0 = (double) $i0;

        d0 = d0 * d0;

        d0 = d0 - 1.0;

        d0 = d0 / 12.0;

        return d0;
    }
    public int getSupportLowerBound()
    {
        org.apache.commons.math3.distribution.UniformIntegerDistribution r0;
        int i0;

        r0 := @this: org.apache.commons.math3.distribution.UniformIntegerDistribution;

        i0 = r0.<org.apache.commons.math3.distribution.UniformIntegerDistribution: int lower>;

        return i0;
    }
    public int getSupportUpperBound()
    {
        org.apache.commons.math3.distribution.UniformIntegerDistribution r0;
        int i0;

        r0 := @this: org.apache.commons.math3.distribution.UniformIntegerDistribution;

        i0 = r0.<org.apache.commons.math3.distribution.UniformIntegerDistribution: int upper>;

        return i0;
    }
    public boolean isSupportConnected()
    {
        org.apache.commons.math3.distribution.UniformIntegerDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.UniformIntegerDistribution;

        return 1;
    }
    public double probability(int)
    {
        org.apache.commons.math3.distribution.UniformIntegerDistribution r0;
        int $i0, $i1;
        double $d0;

        r0 := @this: org.apache.commons.math3.distribution.UniformIntegerDistribution;

        $i0 := @parameter0: int;

        $i1 = r0.<org.apache.commons.math3.distribution.UniformIntegerDistribution: int lower>;

        if $i0 < $i1 goto label1;

        $i1 = r0.<org.apache.commons.math3.distribution.UniformIntegerDistribution: int upper>;

        if $i0 <= $i1 goto label2;

     label1:
        return 0.0;

     label2:
        $i1 = r0.<org.apache.commons.math3.distribution.UniformIntegerDistribution: int upper>;

        $i0 = r0.<org.apache.commons.math3.distribution.UniformIntegerDistribution: int lower>;

        $i0 = $i1 - $i0;

        $i0 = $i0 + 1;

        $d0 = (double) $i0;

        $d0 = 1.0 / $d0;

        return $d0;
    }
    public int sample()
    {
        org.apache.commons.math3.distribution.UniformIntegerDistribution r0;
        int i0, $i1;
        org.apache.commons.math3.random.RandomGenerator $r1;

        r0 := @this: org.apache.commons.math3.distribution.UniformIntegerDistribution;

        $i1 = r0.<org.apache.commons.math3.distribution.UniformIntegerDistribution: int upper>;

        i0 = r0.<org.apache.commons.math3.distribution.UniformIntegerDistribution: int lower>;

        $i1 = $i1 - i0;

        i0 = $i1 + 1;

        if i0 > 0 goto label2;

     label1:
        $r1 = r0.<org.apache.commons.math3.distribution.UniformIntegerDistribution: org.apache.commons.math3.random.RandomGenerator random>;

        $i1 = interfaceinvoke $r1.<org.apache.commons.math3.random.RandomGenerator: int nextInt()>();

        i0 = r0.<org.apache.commons.math3.distribution.UniformIntegerDistribution: int lower>;

        if $i1 < i0 goto label1;

        i0 = r0.<org.apache.commons.math3.distribution.UniformIntegerDistribution: int upper>;

        if $i1 > i0 goto label1;

        return $i1;

     label2:
        $i1 = r0.<org.apache.commons.math3.distribution.UniformIntegerDistribution: int lower>;

        $r1 = r0.<org.apache.commons.math3.distribution.UniformIntegerDistribution: org.apache.commons.math3.random.RandomGenerator random>;

        i0 = interfaceinvoke $r1.<org.apache.commons.math3.random.RandomGenerator: int nextInt(int)>(i0);

        $i1 = $i1 + i0;

        return $i1;
    }
