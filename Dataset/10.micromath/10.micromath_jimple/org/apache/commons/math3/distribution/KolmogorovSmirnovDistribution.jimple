org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution extends java.lang.Object implements java.io.Serializable
private static final long serialVersionUID
private int n
    public void <init>(int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution r0;
        int $i0;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        java.lang.Integer $r3;

        r0 := @this: org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution;

        $i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if $i0 > 0 goto label1;

        $r1 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NOT_POSITIVE_NUMBER_OF_SAMPLES>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r1.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r2, $r3);

        throw $r1;

     label1:
        r0.<org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution: int n> = $i0;

        return;
    }
    private org.apache.commons.math3.linear.FieldMatrix createH(double) throws org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.fraction.FractionConversionException
    {
        org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution r0;
        double $d0, $d1, $d2;
        org.apache.commons.math3.fraction.FractionConversionException r1, r2;
        org.apache.commons.math3.fraction.BigFraction[] r3, $r12, $r13;
        int i0, i1, i3, $i4, $i5;
        byte $b2;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r4;
        java.lang.Double $r5, $r6;
        org.apache.commons.math3.fraction.BigFraction r7, $r11, $r14;
        int[] $r8;
        java.lang.Object $r9;
        org.apache.commons.math3.fraction.BigFraction[][] r10;
        org.apache.commons.math3.linear.Array2DRowFieldMatrix $r15;
        org.apache.commons.math3.fraction.BigFractionField $r16;

        r0 := @this: org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution;

        $d0 := @parameter0: double;

        i1 = r0.<org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution: int n>;

        $d1 = (double) i1;

        $d1 = $d1 * $d0;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double ceil(double)>($d1);

        i0 = (int) $d1;

        i1 = i0 * 2;

        i1 = i1 + -1;

        $d1 = (double) i0;

        i0 = r0.<org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution: int n>;

        $d2 = (double) i0;

        $d0 = $d2 * $d0;

        $d0 = $d1 - $d0;

        $b2 = $d0 cmpl 1.0;

        if $b2 < 0 goto label01;

        $r4 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        specialinvoke $r4.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r5, $r6, 0);

        throw $r4;

     label01:
        r7 = new org.apache.commons.math3.fraction.BigFraction;

     label02:
        specialinvoke r7.<org.apache.commons.math3.fraction.BigFraction: void <init>(double,double,int)>($d0, 1.0E-20, 10000);

     label03:
        $r8 = newarray (int)[2];

        $r8[0] = i1;

        $r8[1] = i1;

        $r9 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>(class "Lorg/apache/commons/math3/fraction/BigFraction;", $r8);

        r10 = (org.apache.commons.math3.fraction.BigFraction[][]) $r9;

        i0 = 0;

     label04:
        if i0 >= i1 goto label13;

        i3 = 0;

     label05:
        if i3 >= i1 goto label12;

        $i4 = i0 - i3;

        $i4 = $i4 + 1;

        if $i4 >= 0 goto label11;

        r3 = r10[i0];

        $r11 = <org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction ZERO>;

        r3[i3] = $r11;

     label06:
        i3 = i3 + 1;

        goto label05;

     label07:
        r1 := @caughtexception;

        r7 = new org.apache.commons.math3.fraction.BigFraction;

     label08:
        specialinvoke r7.<org.apache.commons.math3.fraction.BigFraction: void <init>(double,double,int)>($d0, 1.0E-10, 10000);

     label09:
        goto label03;

     label10:
        r2 := @caughtexception;

        r7 = new org.apache.commons.math3.fraction.BigFraction;

        specialinvoke r7.<org.apache.commons.math3.fraction.BigFraction: void <init>(double,double,int)>($d0, 1.0E-5, 10000);

        goto label03;

     label11:
        r3 = r10[i0];

        $r11 = <org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction ONE>;

        r3[i3] = $r11;

        goto label06;

     label12:
        i0 = i0 + 1;

        goto label04;

     label13:
        r3 = newarray (org.apache.commons.math3.fraction.BigFraction)[i1];

        r3[0] = r7;

        i0 = 1;

     label14:
        if i0 >= i1 goto label15;

        i3 = i0 + -1;

        $r11 = r3[i3];

        $r11 = virtualinvoke r7.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction multiply(org.apache.commons.math3.fraction.BigFraction)>($r11);

        r3[i0] = $r11;

        i0 = i0 + 1;

        goto label14;

     label15:
        i0 = 0;

     label16:
        if i0 >= i1 goto label17;

        $r12 = r10[i0];

        $r13 = r10[i0];

        $r11 = $r13[0];

        $r14 = r3[i0];

        $r11 = virtualinvoke $r11.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction subtract(org.apache.commons.math3.fraction.BigFraction)>($r14);

        $r12[0] = $r11;

        i3 = i1 + -1;

        $r12 = r10[i3];

        i3 = i1 + -1;

        $r13 = r10[i3];

        $r11 = $r13[i0];

        i3 = i1 - i0;

        i3 = i3 + -1;

        $r14 = r3[i3];

        $r11 = virtualinvoke $r11.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction subtract(org.apache.commons.math3.fraction.BigFraction)>($r14);

        $r12[i0] = $r11;

        i0 = i0 + 1;

        goto label16;

     label17:
        $r11 = <org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction ONE_HALF>;

        i0 = virtualinvoke r7.<org.apache.commons.math3.fraction.BigFraction: int compareTo(org.apache.commons.math3.fraction.BigFraction)>($r11);

        if i0 != 1 goto label18;

        i0 = i1 + -1;

        r3 = r10[i0];

        i0 = i1 + -1;

        $r12 = r10[i0];

        $r11 = $r12[0];

        r7 = virtualinvoke r7.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction multiply(int)>(2);

        r7 = virtualinvoke r7.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction subtract(int)>(1);

        r7 = virtualinvoke r7.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction pow(int)>(i1);

        r7 = virtualinvoke $r11.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction add(org.apache.commons.math3.fraction.BigFraction)>(r7);

        r3[0] = r7;

     label18:
        i0 = 0;

     label19:
        if i0 >= i1 goto label24;

        i3 = 0;

     label20:
        $i4 = i0 + 1;

        if i3 >= $i4 goto label23;

        $i4 = i0 - i3;

        $i4 = $i4 + 1;

        if $i4 <= 0 goto label22;

        $i4 = 2;

     label21:
        $i5 = i0 - i3;

        $i5 = $i5 + 1;

        if $i4 > $i5 goto label22;

        r3 = r10[i0];

        $r12 = r10[i0];

        r7 = $r12[i3];

        r7 = virtualinvoke r7.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction divide(int)>($i4);

        r3[i3] = r7;

        $i4 = $i4 + 1;

        goto label21;

     label22:
        i3 = i3 + 1;

        goto label20;

     label23:
        i0 = i0 + 1;

        goto label19;

     label24:
        $r15 = new org.apache.commons.math3.linear.Array2DRowFieldMatrix;

        $r16 = staticinvoke <org.apache.commons.math3.fraction.BigFractionField: org.apache.commons.math3.fraction.BigFractionField getInstance()>();

        specialinvoke $r15.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: void <init>(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][])>($r16, r10);

        return $r15;

        catch org.apache.commons.math3.fraction.FractionConversionException from label02 to label03 with label07;
        catch org.apache.commons.math3.fraction.FractionConversionException from label08 to label09 with label10;
    }
    private double exactK(double) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution r0;
        double $d0, $d1;
        int i0, $i1;
        org.apache.commons.math3.linear.FieldMatrix $r1;
        org.apache.commons.math3.FieldElement $r2;
        org.apache.commons.math3.fraction.BigFraction r3;
        java.math.BigDecimal $r4;

        r0 := @this: org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution;

        $d0 := @parameter0: double;

        i0 = r0.<org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution: int n>;

        $d1 = (double) i0;

        $d1 = $d1 * $d0;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double ceil(double)>($d1);

        i0 = (int) $d1;

        $r1 = specialinvoke r0.<org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution: org.apache.commons.math3.linear.FieldMatrix createH(double)>($d0);

        $i1 = r0.<org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution: int n>;

        $r1 = interfaceinvoke $r1.<org.apache.commons.math3.linear.FieldMatrix: org.apache.commons.math3.linear.FieldMatrix power(int)>($i1);

        $i1 = i0 + -1;

        i0 = i0 + -1;

        $r2 = interfaceinvoke $r1.<org.apache.commons.math3.linear.FieldMatrix: org.apache.commons.math3.FieldElement getEntry(int,int)>($i1, i0);

        r3 = (org.apache.commons.math3.fraction.BigFraction) $r2;

        i0 = 1;

     label1:
        $i1 = r0.<org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution: int n>;

        if i0 > $i1 goto label2;

        r3 = virtualinvoke r3.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction multiply(int)>(i0);

        $i1 = r0.<org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution: int n>;

        r3 = virtualinvoke r3.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction divide(int)>($i1);

        i0 = i0 + 1;

        goto label1;

     label2:
        $r4 = virtualinvoke r3.<org.apache.commons.math3.fraction.BigFraction: java.math.BigDecimal bigDecimalValue(int,int)>(20, 4);

        $d0 = virtualinvoke $r4.<java.math.BigDecimal: double doubleValue()>();

        return $d0;
    }
    private double roundedK(double) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution r0;
        double $d0, $d1, $d2;
        org.apache.commons.math3.linear.Array2DRowRealMatrix r1;
        int i0, $i1, i2, i3;
        org.apache.commons.math3.linear.FieldMatrix $r2;
        org.apache.commons.math3.FieldElement $r3;
        org.apache.commons.math3.fraction.BigFraction $r4;
        org.apache.commons.math3.linear.RealMatrix $r5;

        r0 := @this: org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution;

        $d0 := @parameter0: double;

        i0 = r0.<org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution: int n>;

        $d1 = (double) i0;

        $d1 = $d1 * $d0;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double ceil(double)>($d1);

        i0 = (int) $d1;

        $r2 = specialinvoke r0.<org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution: org.apache.commons.math3.linear.FieldMatrix createH(double)>($d0);

        $i1 = interfaceinvoke $r2.<org.apache.commons.math3.linear.FieldMatrix: int getRowDimension()>();

        r1 = new org.apache.commons.math3.linear.Array2DRowRealMatrix;

        specialinvoke r1.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void <init>(int,int)>($i1, $i1);

        i2 = 0;

     label1:
        if i2 >= $i1 goto label4;

        i3 = 0;

     label2:
        if i3 >= $i1 goto label3;

        $r3 = interfaceinvoke $r2.<org.apache.commons.math3.linear.FieldMatrix: org.apache.commons.math3.FieldElement getEntry(int,int)>(i2, i3);

        $r4 = (org.apache.commons.math3.fraction.BigFraction) $r3;

        $d0 = virtualinvoke $r4.<org.apache.commons.math3.fraction.BigFraction: double doubleValue()>();

        interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: void setEntry(int,int,double)>(i2, i3, $d0);

        i3 = i3 + 1;

        goto label2;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        $i1 = r0.<org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution: int n>;

        $r5 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix power(int)>($i1);

        $i1 = i0 + -1;

        i0 = i0 + -1;

        $d0 = interfaceinvoke $r5.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>($i1, i0);

        i0 = 1;

     label5:
        $i1 = r0.<org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution: int n>;

        if i0 > $i1 goto label6;

        $d2 = (double) i0;

        $i1 = r0.<org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution: int n>;

        $d1 = (double) $i1;

        $d1 = $d2 / $d1;

        $d0 = $d0 * $d1;

        i0 = i0 + 1;

        goto label5;

     label6:
        return $d0;
    }
    public double cdf(double) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution;

        $d0 := @parameter0: double;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution: double cdf(double,boolean)>($d0, 0);

        return $d0;
    }
    public double cdf(double, boolean) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution r0;
        double $d0, d1, d2;
        boolean $z0;
        int $i0, $i2;
        byte $b1;

        r0 := @this: org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution;

        $d0 := @parameter0: double;

        $z0 := @parameter1: boolean;

        $i0 = r0.<org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution: int n>;

        d2 = (double) $i0;

        d1 = 1.0 / d2;

        d2 = 0.5 * d1;

        $b1 = $d0 cmpg d2;

        if $b1 > 0 goto label1;

        return 0.0;

     label1:
        $b1 = d2 cmpg $d0;

        if $b1 >= 0 goto label3;

        $b1 = $d0 cmpg d1;

        if $b1 > 0 goto label3;

        d2 = 1.0;

        $d0 = 2.0 * $d0;

        $d0 = $d0 - d1;

        $i0 = 1;

     label2:
        $i2 = r0.<org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution: int n>;

        if $i0 > $i2 goto label8;

        d1 = (double) $i0;

        d1 = d1 * $d0;

        d2 = d2 * d1;

        $i0 = $i0 + 1;

        goto label2;

     label3:
        d2 = 1.0 - d1;

        $b1 = d2 cmpg $d0;

        if $b1 > 0 goto label4;

        $b1 = $d0 cmpg 1.0;

        if $b1 >= 0 goto label4;

        $d0 = 1.0 - $d0;

        $i0 = r0.<org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution: int n>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,int)>($d0, $i0);

        $d0 = 2.0 * $d0;

        $d0 = 1.0 - $d0;

        return $d0;

     label4:
        $b1 = 1.0 cmpg $d0;

        if $b1 > 0 goto label5;

        return 1.0;

     label5:
        if $z0 == 0 goto label7;

        $d0 = specialinvoke r0.<org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution: double exactK(double)>($d0);

     label6:
        return $d0;

     label7:
        $d0 = specialinvoke r0.<org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution: double roundedK(double)>($d0);

        goto label6;

     label8:
        return d2;
    }
    public double cdfExact(double) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution;

        $d0 := @parameter0: double;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution: double cdf(double,boolean)>($d0, 1);

        return $d0;
    }
