org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution extends org.apache.commons.math3.distribution.MixtureMultivariateRealDistribution
    public void <init>(java.util.List)
    {
        org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution r0;
        java.util.List r1;

        r0 := @this: org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<org.apache.commons.math3.distribution.MixtureMultivariateRealDistribution: void <init>(java.util.List)>(r1);

        return;
    }
    public void <init>(org.apache.commons.math3.random.RandomGenerator, java.util.List) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution r0;
        org.apache.commons.math3.random.RandomGenerator $r1;
        java.util.List r2;

        r0 := @this: org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution;

        $r1 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        r2 := @parameter1: java.util.List;

        specialinvoke r0.<org.apache.commons.math3.distribution.MixtureMultivariateRealDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,java.util.List)>($r1, r2);

        return;
    }
    public void <init>(double[], double[][], double[][][])
    {
        org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution r0;
        double[] $r1;
        double[][] $r2;
        double[][][] $r3;
        java.util.List $r4;

        r0 := @this: org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[][];

        $r3 := @parameter2: double[][][];

        $r4 = staticinvoke <org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution: java.util.List createComponents(double[],double[][],double[][][])>($r1, $r2, $r3);

        specialinvoke r0.<org.apache.commons.math3.distribution.MixtureMultivariateRealDistribution: void <init>(java.util.List)>($r4);

        return;
    }
    private static java.util.List createComponents(double[], double[][], double[][][])
    {
        double[] $r0, $r6;
        double[][] $r1, $r7;
        double[][][] $r2;
        org.apache.commons.math3.distribution.MultivariateNormalDistribution r3;
        java.util.ArrayList r4;
        java.lang.Double $r5;
        int $i0, $i1;
        org.apache.commons.math3.util.Pair $r8;
        double $d0;

        $r0 := @parameter0: double[];

        $r1 := @parameter1: double[][];

        $r2 := @parameter2: double[][][];

        r4 = new java.util.ArrayList;

        $i0 = lengthof $r0;

        specialinvoke r4.<java.util.ArrayList: void <init>(int)>($i0);

        $i0 = 0;

     label1:
        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label2;

        r3 = new org.apache.commons.math3.distribution.MultivariateNormalDistribution;

        $r6 = $r1[$i0];

        $r7 = $r2[$i0];

        specialinvoke r3.<org.apache.commons.math3.distribution.MultivariateNormalDistribution: void <init>(double[],double[][])>($r6, $r7);

        $r8 = new org.apache.commons.math3.util.Pair;

        $d0 = $r0[$i0];

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        specialinvoke $r8.<org.apache.commons.math3.util.Pair: void <init>(java.lang.Object,java.lang.Object)>($r5, r3);

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r8);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return r4;
    }
