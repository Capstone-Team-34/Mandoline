org.apache.commons.math3.distribution.MultivariateNormalDistribution extends org.apache.commons.math3.distribution.AbstractMultivariateRealDistribution
private final org.apache.commons.math3.linear.RealMatrix covarianceMatrix
private final double covarianceMatrixDeterminant
private final org.apache.commons.math3.linear.RealMatrix covarianceMatrixInverse
private final double[] means
private final org.apache.commons.math3.linear.RealMatrix samplingMatrix
    public void <init>(org.apache.commons.math3.random.RandomGenerator, double[], double[][]) throws org.apache.commons.math3.linear.SingularMatrixException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException
    {
        org.apache.commons.math3.distribution.MultivariateNormalDistribution r0;
        org.apache.commons.math3.random.RandomGenerator $r1;
        double[] $r2, $r7;
        double[][] $r3;
        org.apache.commons.math3.linear.EigenDecomposition r4;
        org.apache.commons.math3.linear.Array2DRowRealMatrix r5;
        int i0, $i1, $i2;
        org.apache.commons.math3.exception.DimensionMismatchException $r6;
        org.apache.commons.math3.linear.RealMatrix $r8;
        org.apache.commons.math3.linear.DecompositionSolver $r9;
        double $d0;
        byte $b3;
        org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException $r10;
        org.apache.commons.math3.linear.RealVector $r11;

        r0 := @this: org.apache.commons.math3.distribution.MultivariateNormalDistribution;

        $r1 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        $r2 := @parameter1: double[];

        $r3 := @parameter2: double[][];

        i0 = lengthof $r2;

        specialinvoke r0.<org.apache.commons.math3.distribution.AbstractMultivariateRealDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,int)>($r1, i0);

        i0 = lengthof $r2;

        $i1 = lengthof $r3;

        if $i1 == i0 goto label01;

        $r6 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i1 = lengthof $r3;

        specialinvoke $r6.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i1, i0);

        throw $r6;

     label01:
        $i1 = 0;

     label02:
        if $i1 >= i0 goto label04;

        $r7 = $r3[$i1];

        $i2 = lengthof $r7;

        if i0 == $i2 goto label03;

        $r6 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $r2 = $r3[$i1];

        $i1 = lengthof $r2;

        specialinvoke $r6.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i1, i0);

        throw $r6;

     label03:
        $i1 = $i1 + 1;

        goto label02;

     label04:
        $r2 = staticinvoke <org.apache.commons.math3.util.MathArrays: double[] copyOf(double[])>($r2);

        r0.<org.apache.commons.math3.distribution.MultivariateNormalDistribution: double[] means> = $r2;

        r5 = new org.apache.commons.math3.linear.Array2DRowRealMatrix;

        specialinvoke r5.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void <init>(double[][])>($r3);

        r0.<org.apache.commons.math3.distribution.MultivariateNormalDistribution: org.apache.commons.math3.linear.RealMatrix covarianceMatrix> = r5;

        r4 = new org.apache.commons.math3.linear.EigenDecomposition;

        $r8 = r0.<org.apache.commons.math3.distribution.MultivariateNormalDistribution: org.apache.commons.math3.linear.RealMatrix covarianceMatrix>;

        specialinvoke r4.<org.apache.commons.math3.linear.EigenDecomposition: void <init>(org.apache.commons.math3.linear.RealMatrix)>($r8);

        $r9 = virtualinvoke r4.<org.apache.commons.math3.linear.EigenDecomposition: org.apache.commons.math3.linear.DecompositionSolver getSolver()>();

        $r8 = interfaceinvoke $r9.<org.apache.commons.math3.linear.DecompositionSolver: org.apache.commons.math3.linear.RealMatrix getInverse()>();

        r0.<org.apache.commons.math3.distribution.MultivariateNormalDistribution: org.apache.commons.math3.linear.RealMatrix covarianceMatrixInverse> = $r8;

        $d0 = virtualinvoke r4.<org.apache.commons.math3.linear.EigenDecomposition: double getDeterminant()>();

        r0.<org.apache.commons.math3.distribution.MultivariateNormalDistribution: double covarianceMatrixDeterminant> = $d0;

        $r2 = virtualinvoke r4.<org.apache.commons.math3.linear.EigenDecomposition: double[] getRealEigenvalues()>();

        $i1 = 0;

     label05:
        $i2 = lengthof $r2;

        if $i1 >= $i2 goto label07;

        $d0 = $r2[$i1];

        $b3 = $d0 cmpg 0.0;

        if $b3 >= 0 goto label06;

        $r10 = new org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException;

        $d0 = $r2[$i1];

        specialinvoke $r10.<org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException: void <init>(double,int,double)>($d0, $i1, 0.0);

        throw $r10;

     label06:
        $i1 = $i1 + 1;

        goto label05;

     label07:
        r5 = new org.apache.commons.math3.linear.Array2DRowRealMatrix;

        specialinvoke r5.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void <init>(int,int)>(i0, i0);

        $i1 = 0;

     label08:
        if $i1 >= i0 goto label09;

        $r11 = virtualinvoke r4.<org.apache.commons.math3.linear.EigenDecomposition: org.apache.commons.math3.linear.RealVector getEigenvector(int)>($i1);

        $r7 = virtualinvoke $r11.<org.apache.commons.math3.linear.RealVector: double[] toArray()>();

        virtualinvoke r5.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void setColumn(int,double[])>($i1, $r7);

        $i1 = $i1 + 1;

        goto label08;

     label09:
        $r8 = virtualinvoke r5.<org.apache.commons.math3.linear.Array2DRowRealMatrix: org.apache.commons.math3.linear.RealMatrix transpose()>();

        $i1 = 0;

     label10:
        if $i1 >= i0 goto label13;

        $d0 = $r2[$i1];

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d0);

        $i2 = 0;

     label11:
        if $i2 >= i0 goto label12;

        interfaceinvoke $r8.<org.apache.commons.math3.linear.RealMatrix: void multiplyEntry(int,int,double)>($i1, $i2, $d0);

        $i2 = $i2 + 1;

        goto label11;

     label12:
        $i1 = $i1 + 1;

        goto label10;

     label13:
        $r8 = virtualinvoke r5.<org.apache.commons.math3.linear.Array2DRowRealMatrix: org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>($r8);

        r0.<org.apache.commons.math3.distribution.MultivariateNormalDistribution: org.apache.commons.math3.linear.RealMatrix samplingMatrix> = $r8;

        return;
    }
    public void <init>(double[], double[][]) throws org.apache.commons.math3.linear.SingularMatrixException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException
    {
        org.apache.commons.math3.distribution.MultivariateNormalDistribution r0;
        double[] $r1;
        double[][] $r2;
        org.apache.commons.math3.random.Well19937c $r3;

        r0 := @this: org.apache.commons.math3.distribution.MultivariateNormalDistribution;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[][];

        $r3 = new org.apache.commons.math3.random.Well19937c;

        specialinvoke $r3.<org.apache.commons.math3.random.Well19937c: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.distribution.MultivariateNormalDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double[],double[][])>($r3, $r1, $r2);

        return;
    }
    private double getExponentTerm(double[])
    {
        org.apache.commons.math3.distribution.MultivariateNormalDistribution r0;
        double[] $r1, r2, $r3;
        int $i0, $i1;
        double $d0, $d1, $d2;
        org.apache.commons.math3.linear.RealMatrix $r4;

        r0 := @this: org.apache.commons.math3.distribution.MultivariateNormalDistribution;

        $r1 := @parameter0: double[];

        $i0 = lengthof $r1;

        r2 = newarray (double)[$i0];

        $i0 = 0;

     label1:
        $i1 = lengthof r2;

        if $i0 >= $i1 goto label2;

        $d0 = $r1[$i0];

        $r3 = virtualinvoke r0.<org.apache.commons.math3.distribution.MultivariateNormalDistribution: double[] getMeans()>();

        $d1 = $r3[$i0];

        $d0 = $d0 - $d1;

        r2[$i0] = $d0;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $r4 = r0.<org.apache.commons.math3.distribution.MultivariateNormalDistribution: org.apache.commons.math3.linear.RealMatrix covarianceMatrixInverse>;

        $r1 = interfaceinvoke $r4.<org.apache.commons.math3.linear.RealMatrix: double[] preMultiply(double[])>(r2);

        $d0 = 0.0;

        $i0 = 0;

     label3:
        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label4;

        $d1 = $r1[$i0];

        $d2 = r2[$i0];

        $d1 = $d1 * $d2;

        $d0 = $d0 + $d1;

        $i0 = $i0 + 1;

        goto label3;

     label4:
        $d0 = -0.5 * $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d0);

        return $d0;
    }
    public double density(double[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.distribution.MultivariateNormalDistribution r0;
        double[] $r1;
        int $i0, $i1;
        org.apache.commons.math3.exception.DimensionMismatchException $r2;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.distribution.MultivariateNormalDistribution;

        $r1 := @parameter0: double[];

        $i0 = virtualinvoke r0.<org.apache.commons.math3.distribution.MultivariateNormalDistribution: int getDimension()>();

        $i1 = lengthof $r1;

        if $i1 == $i0 goto label1;

        $r2 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i1 = lengthof $r1;

        specialinvoke $r2.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i1, $i0);

        throw $r2;

     label1:
        $d0 = (double) $i0;

        $d0 = $d0 * -0.5;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,double)>(6.283185307179586, $d0);

        $d1 = r0.<org.apache.commons.math3.distribution.MultivariateNormalDistribution: double covarianceMatrixDeterminant>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,double)>($d1, -0.5);

        $d0 = $d0 * $d1;

        $d1 = specialinvoke r0.<org.apache.commons.math3.distribution.MultivariateNormalDistribution: double getExponentTerm(double[])>($r1);

        $d0 = $d0 * $d1;

        return $d0;
    }
    public org.apache.commons.math3.linear.RealMatrix getCovariances()
    {
        org.apache.commons.math3.distribution.MultivariateNormalDistribution r0;
        org.apache.commons.math3.linear.RealMatrix $r1;

        r0 := @this: org.apache.commons.math3.distribution.MultivariateNormalDistribution;

        $r1 = r0.<org.apache.commons.math3.distribution.MultivariateNormalDistribution: org.apache.commons.math3.linear.RealMatrix covarianceMatrix>;

        $r1 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix copy()>();

        return $r1;
    }
    public double[] getMeans()
    {
        org.apache.commons.math3.distribution.MultivariateNormalDistribution r0;
        double[] $r1;

        r0 := @this: org.apache.commons.math3.distribution.MultivariateNormalDistribution;

        $r1 = r0.<org.apache.commons.math3.distribution.MultivariateNormalDistribution: double[] means>;

        $r1 = staticinvoke <org.apache.commons.math3.util.MathArrays: double[] copyOf(double[])>($r1);

        return $r1;
    }
    public double[] getStandardDeviations()
    {
        org.apache.commons.math3.distribution.MultivariateNormalDistribution r0;
        double[] r1, $r4;
        int $i0, i1;
        org.apache.commons.math3.linear.RealMatrix $r2;
        double[][] $r3;
        double $d0;

        r0 := @this: org.apache.commons.math3.distribution.MultivariateNormalDistribution;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.distribution.MultivariateNormalDistribution: int getDimension()>();

        r1 = newarray (double)[$i0];

        $r2 = r0.<org.apache.commons.math3.distribution.MultivariateNormalDistribution: org.apache.commons.math3.linear.RealMatrix covarianceMatrix>;

        $r3 = interfaceinvoke $r2.<org.apache.commons.math3.linear.RealMatrix: double[][] getData()>();

        i1 = 0;

     label1:
        if i1 >= $i0 goto label2;

        $r4 = $r3[i1];

        $d0 = $r4[i1];

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d0);

        r1[i1] = $d0;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r1;
    }
    public double[] sample()
    {
        org.apache.commons.math3.distribution.MultivariateNormalDistribution r0;
        double[] r1, $r4;
        int $i0, i1;
        org.apache.commons.math3.random.RandomGenerator $r2;
        double $d0, $d1;
        org.apache.commons.math3.linear.RealMatrix $r3;

        r0 := @this: org.apache.commons.math3.distribution.MultivariateNormalDistribution;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.distribution.MultivariateNormalDistribution: int getDimension()>();

        r1 = newarray (double)[$i0];

        i1 = 0;

     label1:
        if i1 >= $i0 goto label2;

        $r2 = r0.<org.apache.commons.math3.distribution.MultivariateNormalDistribution: org.apache.commons.math3.random.RandomGenerator random>;

        $d0 = interfaceinvoke $r2.<org.apache.commons.math3.random.RandomGenerator: double nextGaussian()>();

        r1[i1] = $d0;

        i1 = i1 + 1;

        goto label1;

     label2:
        $r3 = r0.<org.apache.commons.math3.distribution.MultivariateNormalDistribution: org.apache.commons.math3.linear.RealMatrix samplingMatrix>;

        r1 = interfaceinvoke $r3.<org.apache.commons.math3.linear.RealMatrix: double[] operate(double[])>(r1);

        i1 = 0;

     label3:
        if i1 >= $i0 goto label4;

        $d0 = r1[i1];

        $r4 = r0.<org.apache.commons.math3.distribution.MultivariateNormalDistribution: double[] means>;

        $d1 = $r4[i1];

        $d0 = $d0 + $d1;

        r1[i1] = $d0;

        i1 = i1 + 1;

        goto label3;

     label4:
        return r1;
    }
