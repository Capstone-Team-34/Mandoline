org.apache.commons.math3.distribution.ExponentialDistribution extends org.apache.commons.math3.distribution.AbstractRealDistribution
public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY
private static final double[] EXPONENTIAL_SA_QI
private static final long serialVersionUID
private final double logMean
private final double mean
private final double solverAbsoluteAccuracy
    static void <clinit>()
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        double $d0, d1, $d2, $d3;
        int i0;
        byte $b1;
        long $l2;
        double[] $r1;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(2.0);

        d1 = 0.0;

        i0 = 1;

        r0 = new org.apache.commons.math3.util.ResizableDoubleArray;

        specialinvoke r0.<org.apache.commons.math3.util.ResizableDoubleArray: void <init>(int)>(20);

     label1:
        $b1 = d1 cmpg 1.0;

        if $b1 >= 0 goto label2;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,int)>($d0, i0);

        $l2 = staticinvoke <org.apache.commons.math3.util.CombinatoricsUtils: long factorial(int)>(i0);

        $d3 = (double) $l2;

        $d2 = $d2 / $d3;

        d1 = d1 + $d2;

        virtualinvoke r0.<org.apache.commons.math3.util.ResizableDoubleArray: void addElement(double)>(d1);

        i0 = i0 + 1;

        goto label1;

     label2:
        $r1 = virtualinvoke r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] getElements()>();

        <org.apache.commons.math3.distribution.ExponentialDistribution: double[] EXPONENTIAL_SA_QI> = $r1;

        return;
    }
    public void <init>(double)
    {
        org.apache.commons.math3.distribution.ExponentialDistribution r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.distribution.ExponentialDistribution;

        $d0 := @parameter0: double;

        specialinvoke r0.<org.apache.commons.math3.distribution.ExponentialDistribution: void <init>(double,double)>($d0, 1.0E-9);

        return;
    }
    public void <init>(double, double)
    {
        org.apache.commons.math3.distribution.ExponentialDistribution r0;
        double $d0, $d1;
        org.apache.commons.math3.random.Well19937c $r1;

        r0 := @this: org.apache.commons.math3.distribution.ExponentialDistribution;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $r1 = new org.apache.commons.math3.random.Well19937c;

        specialinvoke $r1.<org.apache.commons.math3.random.Well19937c: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.distribution.ExponentialDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double,double)>($r1, $d0, $d1);

        return;
    }
    public void <init>(org.apache.commons.math3.random.RandomGenerator, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.distribution.ExponentialDistribution r0;
        org.apache.commons.math3.random.RandomGenerator $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.distribution.ExponentialDistribution;

        $r1 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        $d0 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.distribution.ExponentialDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double,double)>($r1, $d0, 1.0E-9);

        return;
    }
    public void <init>(org.apache.commons.math3.random.RandomGenerator, double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.distribution.ExponentialDistribution r0;
        org.apache.commons.math3.random.RandomGenerator $r1;
        double $d0, $d1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        byte $b0;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r3;
        java.lang.Double $r4;

        r0 := @this: org.apache.commons.math3.distribution.ExponentialDistribution;

        $r1 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        $d0 := @parameter1: double;

        $d1 := @parameter2: double;

        specialinvoke r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator)>($r1);

        $b0 = $d0 cmpg 0.0;

        if $b0 > 0 goto label1;

        $r3 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats MEAN>;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        specialinvoke $r3.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r2, $r4);

        throw $r3;

     label1:
        r0.<org.apache.commons.math3.distribution.ExponentialDistribution: double mean> = $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d0);

        r0.<org.apache.commons.math3.distribution.ExponentialDistribution: double logMean> = $d0;

        r0.<org.apache.commons.math3.distribution.ExponentialDistribution: double solverAbsoluteAccuracy> = $d1;

        return;
    }
    public double cumulativeProbability(double)
    {
        org.apache.commons.math3.distribution.ExponentialDistribution r0;
        double $d0, $d1;
        byte $b0;

        r0 := @this: org.apache.commons.math3.distribution.ExponentialDistribution;

        $d0 := @parameter0: double;

        $b0 = $d0 cmpg 0.0;

        if $b0 > 0 goto label1;

        return 0.0;

     label1:
        $d1 = neg $d0;

        $d0 = r0.<org.apache.commons.math3.distribution.ExponentialDistribution: double mean>;

        $d0 = $d1 / $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d0);

        $d0 = 1.0 - $d0;

        return $d0;
    }
    public double density(double)
    {
        org.apache.commons.math3.distribution.ExponentialDistribution r0;
        double $d0;
        byte $b0;

        r0 := @this: org.apache.commons.math3.distribution.ExponentialDistribution;

        $d0 := @parameter0: double;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.distribution.ExponentialDistribution: double logDensity(double)>($d0);

        $b0 = $d0 cmpl #-Infinity;

        if $b0 != 0 goto label1;

        return 0.0;

     label1:
        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d0);

        return $d0;
    }
    public double getMean()
    {
        org.apache.commons.math3.distribution.ExponentialDistribution r0;
        double d0;

        r0 := @this: org.apache.commons.math3.distribution.ExponentialDistribution;

        d0 = r0.<org.apache.commons.math3.distribution.ExponentialDistribution: double mean>;

        return d0;
    }
    public double getNumericalMean()
    {
        org.apache.commons.math3.distribution.ExponentialDistribution r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.distribution.ExponentialDistribution;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.distribution.ExponentialDistribution: double getMean()>();

        return $d0;
    }
    public double getNumericalVariance()
    {
        org.apache.commons.math3.distribution.ExponentialDistribution r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.distribution.ExponentialDistribution;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.distribution.ExponentialDistribution: double getMean()>();

        $d0 = $d0 * $d0;

        return $d0;
    }
    protected double getSolverAbsoluteAccuracy()
    {
        org.apache.commons.math3.distribution.ExponentialDistribution r0;
        double d0;

        r0 := @this: org.apache.commons.math3.distribution.ExponentialDistribution;

        d0 = r0.<org.apache.commons.math3.distribution.ExponentialDistribution: double solverAbsoluteAccuracy>;

        return d0;
    }
    public double getSupportLowerBound()
    {
        org.apache.commons.math3.distribution.ExponentialDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.ExponentialDistribution;

        return 0.0;
    }
    public double getSupportUpperBound()
    {
        org.apache.commons.math3.distribution.ExponentialDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.ExponentialDistribution;

        return #Infinity;
    }
    public double inverseCumulativeProbability(double) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.distribution.ExponentialDistribution r0;
        double $d0, $d1;
        byte $b0;
        org.apache.commons.math3.exception.OutOfRangeException $r1;
        java.lang.Double $r2, $r3, $r4;

        r0 := @this: org.apache.commons.math3.distribution.ExponentialDistribution;

        $d0 := @parameter0: double;

        $b0 = $d0 cmpg 0.0;

        if $b0 < 0 goto label1;

        $b0 = $d0 cmpl 1.0;

        if $b0 <= 0 goto label2;

     label1:
        $r1 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        specialinvoke $r1.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r2, $r3, $r4);

        throw $r1;

     label2:
        $b0 = $d0 cmpl 1.0;

        if $b0 != 0 goto label3;

        return #Infinity;

     label3:
        $d1 = r0.<org.apache.commons.math3.distribution.ExponentialDistribution: double mean>;

        $d1 = neg $d1;

        $d0 = 1.0 - $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d0);

        $d0 = $d1 * $d0;

        return $d0;
    }
    public boolean isSupportConnected()
    {
        org.apache.commons.math3.distribution.ExponentialDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.ExponentialDistribution;

        return 1;
    }
    public boolean isSupportLowerBoundInclusive()
    {
        org.apache.commons.math3.distribution.ExponentialDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.ExponentialDistribution;

        return 1;
    }
    public boolean isSupportUpperBoundInclusive()
    {
        org.apache.commons.math3.distribution.ExponentialDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.ExponentialDistribution;

        return 0;
    }
    public double logDensity(double)
    {
        org.apache.commons.math3.distribution.ExponentialDistribution r0;
        double $d0, $d1;
        byte $b0;

        r0 := @this: org.apache.commons.math3.distribution.ExponentialDistribution;

        $d0 := @parameter0: double;

        $b0 = $d0 cmpg 0.0;

        if $b0 >= 0 goto label1;

        return #-Infinity;

     label1:
        $d0 = neg $d0;

        $d1 = r0.<org.apache.commons.math3.distribution.ExponentialDistribution: double mean>;

        $d0 = $d0 / $d1;

        $d1 = r0.<org.apache.commons.math3.distribution.ExponentialDistribution: double logMean>;

        $d0 = $d0 - $d1;

        return $d0;
    }
    public double sample()
    {
        org.apache.commons.math3.distribution.ExponentialDistribution r0;
        double d0, $d1, $d2, $d3;
        org.apache.commons.math3.random.RandomGenerator $r1;
        byte $b0;
        double[] $r2;
        int i1;

        r0 := @this: org.apache.commons.math3.distribution.ExponentialDistribution;

        d0 = 0.0;

        $r1 = r0.<org.apache.commons.math3.distribution.ExponentialDistribution: org.apache.commons.math3.random.RandomGenerator random>;

        $d1 = interfaceinvoke $r1.<org.apache.commons.math3.random.RandomGenerator: double nextDouble()>();

     label1:
        $b0 = $d1 cmpg 0.5;

        if $b0 >= 0 goto label2;

        $r2 = <org.apache.commons.math3.distribution.ExponentialDistribution: double[] EXPONENTIAL_SA_QI>;

        $d2 = $r2[0];

        d0 = d0 + $d2;

        $d1 = $d1 * 2.0;

        goto label1;

     label2:
        $d2 = $d1 - 1.0;

        $d1 = $d1 + $d2;

        $r2 = <org.apache.commons.math3.distribution.ExponentialDistribution: double[] EXPONENTIAL_SA_QI>;

        $d2 = $r2[0];

        $b0 = $d1 cmpg $d2;

        if $b0 > 0 goto label3;

        $d2 = r0.<org.apache.commons.math3.distribution.ExponentialDistribution: double mean>;

        d0 = d0 + $d1;

        d0 = $d2 * d0;

        return d0;

     label3:
        i1 = 0;

        $r1 = r0.<org.apache.commons.math3.distribution.ExponentialDistribution: org.apache.commons.math3.random.RandomGenerator random>;

        $d2 = interfaceinvoke $r1.<org.apache.commons.math3.random.RandomGenerator: double nextDouble()>();

     label4:
        i1 = i1 + 1;

        $r1 = r0.<org.apache.commons.math3.distribution.ExponentialDistribution: org.apache.commons.math3.random.RandomGenerator random>;

        $d3 = interfaceinvoke $r1.<org.apache.commons.math3.random.RandomGenerator: double nextDouble()>();

        $b0 = $d3 cmpg $d2;

        if $b0 >= 0 goto label5;

        $d2 = $d3;

     label5:
        $r2 = <org.apache.commons.math3.distribution.ExponentialDistribution: double[] EXPONENTIAL_SA_QI>;

        $d3 = $r2[i1];

        $b0 = $d1 cmpl $d3;

        if $b0 > 0 goto label4;

        $d1 = r0.<org.apache.commons.math3.distribution.ExponentialDistribution: double mean>;

        $r2 = <org.apache.commons.math3.distribution.ExponentialDistribution: double[] EXPONENTIAL_SA_QI>;

        $d3 = $r2[0];

        $d2 = $d3 * $d2;

        d0 = $d2 + d0;

        d0 = $d1 * d0;

        return d0;
    }
