org.apache.commons.math3.distribution.WeibullDistribution extends org.apache.commons.math3.distribution.AbstractRealDistribution
public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY
private static final long serialVersionUID
private double numericalMean
private boolean numericalMeanIsCalculated
private double numericalVariance
private boolean numericalVarianceIsCalculated
private final double scale
private final double shape
private final double solverAbsoluteAccuracy
    public void <init>(double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.distribution.WeibullDistribution r0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.distribution.WeibullDistribution;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.distribution.WeibullDistribution: void <init>(double,double,double)>($d0, $d1, 1.0E-9);

        return;
    }
    public void <init>(double, double, double)
    {
        org.apache.commons.math3.distribution.WeibullDistribution r0;
        double $d0, $d1, $d2;
        org.apache.commons.math3.random.Well19937c $r1;

        r0 := @this: org.apache.commons.math3.distribution.WeibullDistribution;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $r1 = new org.apache.commons.math3.random.Well19937c;

        specialinvoke $r1.<org.apache.commons.math3.random.Well19937c: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.distribution.WeibullDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double,double,double)>($r1, $d0, $d1, $d2);

        return;
    }
    public void <init>(org.apache.commons.math3.random.RandomGenerator, double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.distribution.WeibullDistribution r0;
        org.apache.commons.math3.random.RandomGenerator $r1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.distribution.WeibullDistribution;

        $r1 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        $d0 := @parameter1: double;

        $d1 := @parameter2: double;

        specialinvoke r0.<org.apache.commons.math3.distribution.WeibullDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double,double,double)>($r1, $d0, $d1, 1.0E-9);

        return;
    }
    public void <init>(org.apache.commons.math3.random.RandomGenerator, double, double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.distribution.WeibullDistribution r0;
        org.apache.commons.math3.random.RandomGenerator $r1;
        double $d0, $d1, $d2;
        byte $b0;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3;
        java.lang.Double $r4;

        r0 := @this: org.apache.commons.math3.distribution.WeibullDistribution;

        $r1 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        $d0 := @parameter1: double;

        $d1 := @parameter2: double;

        $d2 := @parameter3: double;

        specialinvoke r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator)>($r1);

        r0.<org.apache.commons.math3.distribution.WeibullDistribution: double numericalMean> = #NaN;

        r0.<org.apache.commons.math3.distribution.WeibullDistribution: boolean numericalMeanIsCalculated> = 0;

        r0.<org.apache.commons.math3.distribution.WeibullDistribution: double numericalVariance> = #NaN;

        r0.<org.apache.commons.math3.distribution.WeibullDistribution: boolean numericalVarianceIsCalculated> = 0;

        $b0 = $d0 cmpg 0.0;

        if $b0 > 0 goto label1;

        $r2 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats SHAPE>;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        specialinvoke $r2.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r3, $r4);

        throw $r2;

     label1:
        $b0 = $d1 cmpg 0.0;

        if $b0 > 0 goto label2;

        $r2 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats SCALE>;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        specialinvoke $r2.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r3, $r4);

        throw $r2;

     label2:
        r0.<org.apache.commons.math3.distribution.WeibullDistribution: double scale> = $d1;

        r0.<org.apache.commons.math3.distribution.WeibullDistribution: double shape> = $d0;

        r0.<org.apache.commons.math3.distribution.WeibullDistribution: double solverAbsoluteAccuracy> = $d2;

        return;
    }
    protected double calculateNumericalMean()
    {
        org.apache.commons.math3.distribution.WeibullDistribution r0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.distribution.WeibullDistribution;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.distribution.WeibullDistribution: double getShape()>();

        $d1 = virtualinvoke r0.<org.apache.commons.math3.distribution.WeibullDistribution: double getScale()>();

        $d0 = 1.0 / $d0;

        $d0 = $d0 + 1.0;

        $d0 = staticinvoke <org.apache.commons.math3.special.Gamma: double logGamma(double)>($d0);

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d0);

        $d1 = $d0 * $d1;

        return $d1;
    }
    protected double calculateNumericalVariance()
    {
        org.apache.commons.math3.distribution.WeibullDistribution r0;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.distribution.WeibullDistribution;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.distribution.WeibullDistribution: double getShape()>();

        $d1 = virtualinvoke r0.<org.apache.commons.math3.distribution.WeibullDistribution: double getScale()>();

        $d2 = virtualinvoke r0.<org.apache.commons.math3.distribution.WeibullDistribution: double getNumericalMean()>();

        $d1 = $d1 * $d1;

        $d0 = 2.0 / $d0;

        $d0 = 1.0 + $d0;

        $d0 = staticinvoke <org.apache.commons.math3.special.Gamma: double logGamma(double)>($d0);

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d0);

        $d1 = $d1 * $d0;

        $d2 = $d2 * $d2;

        $d2 = $d1 - $d2;

        return $d2;
    }
    public double cumulativeProbability(double)
    {
        org.apache.commons.math3.distribution.WeibullDistribution r0;
        double $d0, $d1;
        byte $b0;

        r0 := @this: org.apache.commons.math3.distribution.WeibullDistribution;

        $d0 := @parameter0: double;

        $b0 = $d0 cmpg 0.0;

        if $b0 > 0 goto label1;

        return 0.0;

     label1:
        $d1 = r0.<org.apache.commons.math3.distribution.WeibullDistribution: double scale>;

        $d1 = $d0 / $d1;

        $d0 = r0.<org.apache.commons.math3.distribution.WeibullDistribution: double shape>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,double)>($d1, $d0);

        $d0 = neg $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d0);

        $d0 = 1.0 - $d0;

        return $d0;
    }
    public double density(double)
    {
        org.apache.commons.math3.distribution.WeibullDistribution r0;
        double $d0, $d1, $d2, $d3;
        byte $b0;

        r0 := @this: org.apache.commons.math3.distribution.WeibullDistribution;

        $d0 := @parameter0: double;

        $b0 = $d0 cmpg 0.0;

        if $b0 >= 0 goto label1;

        return 0.0;

     label1:
        $d1 = r0.<org.apache.commons.math3.distribution.WeibullDistribution: double scale>;

        $d0 = $d0 / $d1;

        $d1 = r0.<org.apache.commons.math3.distribution.WeibullDistribution: double shape>;

        $d1 = $d1 - 1.0;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,double)>($d0, $d1);

        $d0 = $d1 * $d0;

        $d2 = r0.<org.apache.commons.math3.distribution.WeibullDistribution: double shape>;

        $d3 = r0.<org.apache.commons.math3.distribution.WeibullDistribution: double scale>;

        $d2 = $d2 / $d3;

        $d1 = $d2 * $d1;

        $d0 = neg $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d0);

        $d0 = $d1 * $d0;

        return $d0;
    }
    public double getNumericalMean()
    {
        org.apache.commons.math3.distribution.WeibullDistribution r0;
        double $d0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.distribution.WeibullDistribution;

        $z0 = r0.<org.apache.commons.math3.distribution.WeibullDistribution: boolean numericalMeanIsCalculated>;

        if $z0 != 0 goto label1;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.distribution.WeibullDistribution: double calculateNumericalMean()>();

        r0.<org.apache.commons.math3.distribution.WeibullDistribution: double numericalMean> = $d0;

        r0.<org.apache.commons.math3.distribution.WeibullDistribution: boolean numericalMeanIsCalculated> = 1;

     label1:
        $d0 = r0.<org.apache.commons.math3.distribution.WeibullDistribution: double numericalMean>;

        return $d0;
    }
    public double getNumericalVariance()
    {
        org.apache.commons.math3.distribution.WeibullDistribution r0;
        double $d0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.distribution.WeibullDistribution;

        $z0 = r0.<org.apache.commons.math3.distribution.WeibullDistribution: boolean numericalVarianceIsCalculated>;

        if $z0 != 0 goto label1;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.distribution.WeibullDistribution: double calculateNumericalVariance()>();

        r0.<org.apache.commons.math3.distribution.WeibullDistribution: double numericalVariance> = $d0;

        r0.<org.apache.commons.math3.distribution.WeibullDistribution: boolean numericalVarianceIsCalculated> = 1;

     label1:
        $d0 = r0.<org.apache.commons.math3.distribution.WeibullDistribution: double numericalVariance>;

        return $d0;
    }
    public double getScale()
    {
        org.apache.commons.math3.distribution.WeibullDistribution r0;
        double d0;

        r0 := @this: org.apache.commons.math3.distribution.WeibullDistribution;

        d0 = r0.<org.apache.commons.math3.distribution.WeibullDistribution: double scale>;

        return d0;
    }
    public double getShape()
    {
        org.apache.commons.math3.distribution.WeibullDistribution r0;
        double d0;

        r0 := @this: org.apache.commons.math3.distribution.WeibullDistribution;

        d0 = r0.<org.apache.commons.math3.distribution.WeibullDistribution: double shape>;

        return d0;
    }
    protected double getSolverAbsoluteAccuracy()
    {
        org.apache.commons.math3.distribution.WeibullDistribution r0;
        double d0;

        r0 := @this: org.apache.commons.math3.distribution.WeibullDistribution;

        d0 = r0.<org.apache.commons.math3.distribution.WeibullDistribution: double solverAbsoluteAccuracy>;

        return d0;
    }
    public double getSupportLowerBound()
    {
        org.apache.commons.math3.distribution.WeibullDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.WeibullDistribution;

        return 0.0;
    }
    public double getSupportUpperBound()
    {
        org.apache.commons.math3.distribution.WeibullDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.WeibullDistribution;

        return #Infinity;
    }
    public double inverseCumulativeProbability(double)
    {
        org.apache.commons.math3.distribution.WeibullDistribution r0;
        double $d0, $d1, $d2;
        byte $b0;
        org.apache.commons.math3.exception.OutOfRangeException $r1;
        java.lang.Double $r2, $r3, $r4;

        r0 := @this: org.apache.commons.math3.distribution.WeibullDistribution;

        $d0 := @parameter0: double;

        $b0 = $d0 cmpg 0.0;

        if $b0 < 0 goto label1;

        $b0 = $d0 cmpl 1.0;

        if $b0 <= 0 goto label2;

     label1:
        $r1 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        specialinvoke $r1.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r2, $r3, $r4);

        throw $r1;

     label2:
        $b0 = $d0 cmpl 0.0;

        if $b0 != 0 goto label3;

        return 0.0;

     label3:
        $b0 = $d0 cmpl 1.0;

        if $b0 != 0 goto label4;

        return #Infinity;

     label4:
        $d1 = r0.<org.apache.commons.math3.distribution.WeibullDistribution: double scale>;

        $d0 = neg $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double log1p(double)>($d0);

        $d0 = neg $d0;

        $d2 = r0.<org.apache.commons.math3.distribution.WeibullDistribution: double shape>;

        $d2 = 1.0 / $d2;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,double)>($d0, $d2);

        $d0 = $d1 * $d0;

        return $d0;
    }
    public boolean isSupportConnected()
    {
        org.apache.commons.math3.distribution.WeibullDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.WeibullDistribution;

        return 1;
    }
    public boolean isSupportLowerBoundInclusive()
    {
        org.apache.commons.math3.distribution.WeibullDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.WeibullDistribution;

        return 1;
    }
    public boolean isSupportUpperBoundInclusive()
    {
        org.apache.commons.math3.distribution.WeibullDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.WeibullDistribution;

        return 0;
    }
    public double logDensity(double)
    {
        org.apache.commons.math3.distribution.WeibullDistribution r0;
        double $d0, d1, $d2, $d3;
        byte $b0;

        r0 := @this: org.apache.commons.math3.distribution.WeibullDistribution;

        $d0 := @parameter0: double;

        $b0 = $d0 cmpg 0.0;

        if $b0 >= 0 goto label1;

        return #-Infinity;

     label1:
        d1 = r0.<org.apache.commons.math3.distribution.WeibullDistribution: double scale>;

        d1 = $d0 / d1;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(d1);

        $d2 = r0.<org.apache.commons.math3.distribution.WeibullDistribution: double shape>;

        $d2 = $d2 - 1.0;

        $d0 = $d0 * $d2;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d0);

        d1 = $d2 * d1;

        $d2 = r0.<org.apache.commons.math3.distribution.WeibullDistribution: double shape>;

        $d3 = r0.<org.apache.commons.math3.distribution.WeibullDistribution: double scale>;

        $d2 = $d2 / $d3;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d2);

        $d0 = $d2 + $d0;

        $d0 = $d0 - d1;

        return $d0;
    }
