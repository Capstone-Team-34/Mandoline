org.apache.commons.math3.distribution.NormalDistribution extends org.apache.commons.math3.distribution.AbstractRealDistribution
public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY
private static final double SQRT2
private static final long serialVersionUID
private final double logStandardDeviationPlusHalfLog2Pi
private final double mean
private final double solverAbsoluteAccuracy
private final double standardDeviation
    static void <clinit>()
    {
        double $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(2.0);

        <org.apache.commons.math3.distribution.NormalDistribution: double SQRT2> = $d0;

        return;
    }
    public void <init>()
    {
        org.apache.commons.math3.distribution.NormalDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.NormalDistribution;

        specialinvoke r0.<org.apache.commons.math3.distribution.NormalDistribution: void <init>(double,double)>(0.0, 1.0);

        return;
    }
    public void <init>(double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.distribution.NormalDistribution r0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.distribution.NormalDistribution;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.distribution.NormalDistribution: void <init>(double,double,double)>($d0, $d1, 1.0E-9);

        return;
    }
    public void <init>(double, double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.distribution.NormalDistribution r0;
        double $d0, $d1, $d2;
        org.apache.commons.math3.random.Well19937c $r1;

        r0 := @this: org.apache.commons.math3.distribution.NormalDistribution;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $r1 = new org.apache.commons.math3.random.Well19937c;

        specialinvoke $r1.<org.apache.commons.math3.random.Well19937c: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.distribution.NormalDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double,double,double)>($r1, $d0, $d1, $d2);

        return;
    }
    public void <init>(org.apache.commons.math3.random.RandomGenerator, double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.distribution.NormalDistribution r0;
        org.apache.commons.math3.random.RandomGenerator $r1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.distribution.NormalDistribution;

        $r1 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        $d0 := @parameter1: double;

        $d1 := @parameter2: double;

        specialinvoke r0.<org.apache.commons.math3.distribution.NormalDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double,double,double)>($r1, $d0, $d1, 1.0E-9);

        return;
    }
    public void <init>(org.apache.commons.math3.random.RandomGenerator, double, double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.distribution.NormalDistribution r0;
        org.apache.commons.math3.random.RandomGenerator $r1;
        double $d0, $d1, $d2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        byte $b0;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r3;
        java.lang.Double $r4;

        r0 := @this: org.apache.commons.math3.distribution.NormalDistribution;

        $r1 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        $d0 := @parameter1: double;

        $d1 := @parameter2: double;

        $d2 := @parameter3: double;

        specialinvoke r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator)>($r1);

        $b0 = $d1 cmpg 0.0;

        if $b0 > 0 goto label1;

        $r3 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats STANDARD_DEVIATION>;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        specialinvoke $r3.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r2, $r4);

        throw $r3;

     label1:
        r0.<org.apache.commons.math3.distribution.NormalDistribution: double mean> = $d0;

        r0.<org.apache.commons.math3.distribution.NormalDistribution: double standardDeviation> = $d1;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d1);

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(6.283185307179586);

        $d1 = 0.5 * $d1;

        $d0 = $d0 + $d1;

        r0.<org.apache.commons.math3.distribution.NormalDistribution: double logStandardDeviationPlusHalfLog2Pi> = $d0;

        r0.<org.apache.commons.math3.distribution.NormalDistribution: double solverAbsoluteAccuracy> = $d2;

        return;
    }
    public double cumulativeProbability(double)
    {
        org.apache.commons.math3.distribution.NormalDistribution r0;
        double $d0, $d1, $d2;
        byte $b0;

        r0 := @this: org.apache.commons.math3.distribution.NormalDistribution;

        $d0 := @parameter0: double;

        $d1 = r0.<org.apache.commons.math3.distribution.NormalDistribution: double mean>;

        $d0 = $d0 - $d1;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        $d2 = r0.<org.apache.commons.math3.distribution.NormalDistribution: double standardDeviation>;

        $d2 = 40.0 * $d2;

        $b0 = $d1 cmpl $d2;

        if $b0 <= 0 goto label2;

        $b0 = $d0 cmpg 0.0;

        if $b0 >= 0 goto label1;

        return 0.0;

     label1:
        return 1.0;

     label2:
        $d0 = neg $d0;

        $d1 = r0.<org.apache.commons.math3.distribution.NormalDistribution: double standardDeviation>;

        $d2 = <org.apache.commons.math3.distribution.NormalDistribution: double SQRT2>;

        $d1 = $d1 * $d2;

        $d0 = $d0 / $d1;

        $d0 = staticinvoke <org.apache.commons.math3.special.Erf: double erfc(double)>($d0);

        $d0 = 0.5 * $d0;

        return $d0;
    }
    public double cumulativeProbability(double, double) throws org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.distribution.NormalDistribution r0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.distribution.NormalDistribution;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.distribution.NormalDistribution: double probability(double,double)>($d0, $d1);

        return $d0;
    }
    public double density(double)
    {
        org.apache.commons.math3.distribution.NormalDistribution r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.distribution.NormalDistribution;

        $d0 := @parameter0: double;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.distribution.NormalDistribution: double logDensity(double)>($d0);

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d0);

        return $d0;
    }
    public double getMean()
    {
        org.apache.commons.math3.distribution.NormalDistribution r0;
        double d0;

        r0 := @this: org.apache.commons.math3.distribution.NormalDistribution;

        d0 = r0.<org.apache.commons.math3.distribution.NormalDistribution: double mean>;

        return d0;
    }
    public double getNumericalMean()
    {
        org.apache.commons.math3.distribution.NormalDistribution r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.distribution.NormalDistribution;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.distribution.NormalDistribution: double getMean()>();

        return $d0;
    }
    public double getNumericalVariance()
    {
        org.apache.commons.math3.distribution.NormalDistribution r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.distribution.NormalDistribution;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.distribution.NormalDistribution: double getStandardDeviation()>();

        $d0 = $d0 * $d0;

        return $d0;
    }
    protected double getSolverAbsoluteAccuracy()
    {
        org.apache.commons.math3.distribution.NormalDistribution r0;
        double d0;

        r0 := @this: org.apache.commons.math3.distribution.NormalDistribution;

        d0 = r0.<org.apache.commons.math3.distribution.NormalDistribution: double solverAbsoluteAccuracy>;

        return d0;
    }
    public double getStandardDeviation()
    {
        org.apache.commons.math3.distribution.NormalDistribution r0;
        double d0;

        r0 := @this: org.apache.commons.math3.distribution.NormalDistribution;

        d0 = r0.<org.apache.commons.math3.distribution.NormalDistribution: double standardDeviation>;

        return d0;
    }
    public double getSupportLowerBound()
    {
        org.apache.commons.math3.distribution.NormalDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.NormalDistribution;

        return #-Infinity;
    }
    public double getSupportUpperBound()
    {
        org.apache.commons.math3.distribution.NormalDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.NormalDistribution;

        return #Infinity;
    }
    public double inverseCumulativeProbability(double) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.distribution.NormalDistribution r0;
        double $d0, $d1, $d2, $d3;
        byte $b0;
        org.apache.commons.math3.exception.OutOfRangeException $r1;
        java.lang.Double $r2;
        java.lang.Integer $r3, $r4;

        r0 := @this: org.apache.commons.math3.distribution.NormalDistribution;

        $d0 := @parameter0: double;

        $b0 = $d0 cmpg 0.0;

        if $b0 < 0 goto label1;

        $b0 = $d0 cmpl 1.0;

        if $b0 <= 0 goto label2;

     label1:
        $r1 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke $r1.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r2, $r3, $r4);

        throw $r1;

     label2:
        $d1 = r0.<org.apache.commons.math3.distribution.NormalDistribution: double mean>;

        $d2 = r0.<org.apache.commons.math3.distribution.NormalDistribution: double standardDeviation>;

        $d3 = <org.apache.commons.math3.distribution.NormalDistribution: double SQRT2>;

        $d2 = $d2 * $d3;

        $d0 = 2.0 * $d0;

        $d0 = $d0 - 1.0;

        $d0 = staticinvoke <org.apache.commons.math3.special.Erf: double erfInv(double)>($d0);

        $d0 = $d2 * $d0;

        $d0 = $d1 + $d0;

        return $d0;
    }
    public boolean isSupportConnected()
    {
        org.apache.commons.math3.distribution.NormalDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.NormalDistribution;

        return 1;
    }
    public boolean isSupportLowerBoundInclusive()
    {
        org.apache.commons.math3.distribution.NormalDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.NormalDistribution;

        return 0;
    }
    public boolean isSupportUpperBoundInclusive()
    {
        org.apache.commons.math3.distribution.NormalDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.NormalDistribution;

        return 0;
    }
    public double logDensity(double)
    {
        org.apache.commons.math3.distribution.NormalDistribution r0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.distribution.NormalDistribution;

        $d0 := @parameter0: double;

        $d1 = r0.<org.apache.commons.math3.distribution.NormalDistribution: double mean>;

        $d0 = $d0 - $d1;

        $d1 = r0.<org.apache.commons.math3.distribution.NormalDistribution: double standardDeviation>;

        $d0 = $d0 / $d1;

        $d1 = -0.5 * $d0;

        $d1 = $d1 * $d0;

        $d0 = r0.<org.apache.commons.math3.distribution.NormalDistribution: double logStandardDeviationPlusHalfLog2Pi>;

        $d0 = $d1 - $d0;

        return $d0;
    }
    public double probability(double, double) throws org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.distribution.NormalDistribution r0;
        double $d0, $d1, d2, $d3;
        org.apache.commons.math3.exception.util.LocalizedFormats $r1;
        byte $b0;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r2;
        java.lang.Double $r3, $r4;

        r0 := @this: org.apache.commons.math3.distribution.NormalDistribution;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $b0 = $d0 cmpl $d1;

        if $b0 <= 0 goto label1;

        $r2 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r1 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT>;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        specialinvoke $r2.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r1, $r3, $r4, 1);

        throw $r2;

     label1:
        d2 = r0.<org.apache.commons.math3.distribution.NormalDistribution: double standardDeviation>;

        $d3 = <org.apache.commons.math3.distribution.NormalDistribution: double SQRT2>;

        d2 = d2 * $d3;

        $d3 = r0.<org.apache.commons.math3.distribution.NormalDistribution: double mean>;

        $d0 = $d0 - $d3;

        $d0 = $d0 / d2;

        $d3 = r0.<org.apache.commons.math3.distribution.NormalDistribution: double mean>;

        $d1 = $d1 - $d3;

        $d1 = $d1 / d2;

        $d0 = staticinvoke <org.apache.commons.math3.special.Erf: double erf(double,double)>($d0, $d1);

        $d0 = 0.5 * $d0;

        return $d0;
    }
    public double sample()
    {
        org.apache.commons.math3.distribution.NormalDistribution r0;
        double $d0, $d1;
        org.apache.commons.math3.random.RandomGenerator $r1;

        r0 := @this: org.apache.commons.math3.distribution.NormalDistribution;

        $d1 = r0.<org.apache.commons.math3.distribution.NormalDistribution: double standardDeviation>;

        $r1 = r0.<org.apache.commons.math3.distribution.NormalDistribution: org.apache.commons.math3.random.RandomGenerator random>;

        $d0 = interfaceinvoke $r1.<org.apache.commons.math3.random.RandomGenerator: double nextGaussian()>();

        $d0 = $d1 * $d0;

        $d1 = r0.<org.apache.commons.math3.distribution.NormalDistribution: double mean>;

        $d0 = $d0 + $d1;

        return $d0;
    }
