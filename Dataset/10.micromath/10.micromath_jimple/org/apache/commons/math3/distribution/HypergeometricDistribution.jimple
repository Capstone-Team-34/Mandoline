org.apache.commons.math3.distribution.HypergeometricDistribution extends org.apache.commons.math3.distribution.AbstractIntegerDistribution
private static final long serialVersionUID
private final int numberOfSuccesses
private double numericalVariance
private boolean numericalVarianceIsCalculated
private final int populationSize
private final int sampleSize
    public void <init>(int, int, int) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.distribution.HypergeometricDistribution r0;
        int $i0, $i1, $i2;
        org.apache.commons.math3.random.Well19937c $r1;

        r0 := @this: org.apache.commons.math3.distribution.HypergeometricDistribution;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $r1 = new org.apache.commons.math3.random.Well19937c;

        specialinvoke $r1.<org.apache.commons.math3.random.Well19937c: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,int,int,int)>($r1, $i0, $i1, $i2);

        return;
    }
    public void <init>(org.apache.commons.math3.random.RandomGenerator, int, int, int) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.distribution.HypergeometricDistribution r0;
        org.apache.commons.math3.random.RandomGenerator $r1;
        int $i0, $i1, $i2;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3;
        java.lang.Integer $r4, $r7;
        org.apache.commons.math3.exception.NotPositiveException $r5;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r6;

        r0 := @this: org.apache.commons.math3.distribution.HypergeometricDistribution;

        $r1 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        specialinvoke r0.<org.apache.commons.math3.distribution.AbstractIntegerDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator)>($r1);

        r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: double numericalVariance> = #NaN;

        r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: boolean numericalVarianceIsCalculated> = 0;

        if $i0 > 0 goto label1;

        $r2 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats POPULATION_SIZE>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r2.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r3, $r4);

        throw $r2;

     label1:
        if $i1 >= 0 goto label2;

        $r5 = new org.apache.commons.math3.exception.NotPositiveException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NUMBER_OF_SUCCESSES>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        specialinvoke $r5.<org.apache.commons.math3.exception.NotPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r3, $r4);

        throw $r5;

     label2:
        if $i2 >= 0 goto label3;

        $r5 = new org.apache.commons.math3.exception.NotPositiveException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NUMBER_OF_SAMPLES>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        specialinvoke $r5.<org.apache.commons.math3.exception.NotPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r3, $r4);

        throw $r5;

     label3:
        if $i1 <= $i0 goto label4;

        $r6 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r6.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r3, $r4, $r7, 1);

        throw $r6;

     label4:
        if $i2 <= $i0 goto label5;

        $r6 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r6.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r3, $r4, $r7, 1);

        throw $r6;

     label5:
        r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int numberOfSuccesses> = $i1;

        r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int populationSize> = $i0;

        r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int sampleSize> = $i2;

        return;
    }
    private int[] getDomain(int, int, int)
    {
        org.apache.commons.math3.distribution.HypergeometricDistribution r0;
        int $i0, $i1, $i2;
        int[] $r1;

        r0 := @this: org.apache.commons.math3.distribution.HypergeometricDistribution;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $r1 = newarray (int)[2];

        $i0 = specialinvoke r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int getLowerDomain(int,int,int)>($i0, $i1, $i2);

        $r1[0] = $i0;

        $i0 = specialinvoke r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int getUpperDomain(int,int)>($i1, $i2);

        $r1[1] = $i0;

        return $r1;
    }
    private int getLowerDomain(int, int, int)
    {
        org.apache.commons.math3.distribution.HypergeometricDistribution r0;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.commons.math3.distribution.HypergeometricDistribution;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i0 = $i0 - $i2;

        $i0 = $i1 - $i0;

        $i0 = staticinvoke <org.apache.commons.math3.util.FastMath: int max(int,int)>(0, $i0);

        return $i0;
    }
    private int getUpperDomain(int, int)
    {
        org.apache.commons.math3.distribution.HypergeometricDistribution r0;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.distribution.HypergeometricDistribution;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i0 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i1, $i0);

        return $i0;
    }
    private double innerCumulativeProbability(int, int, int)
    {
        org.apache.commons.math3.distribution.HypergeometricDistribution r0;
        int $i0, $i1, $i2;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.distribution.HypergeometricDistribution;

        $i2 := @parameter0: int;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: double probability(int)>($i2);

     label1:
        if $i2 == $i0 goto label2;

        $i2 = $i2 + $i1;

        $d1 = virtualinvoke r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: double probability(int)>($i2);

        $d0 = $d0 + $d1;

        goto label1;

     label2:
        return $d0;
    }
    protected double calculateNumericalVariance()
    {
        org.apache.commons.math3.distribution.HypergeometricDistribution r0;
        double d0, d1, d2, $d3;
        int $i0;

        r0 := @this: org.apache.commons.math3.distribution.HypergeometricDistribution;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int getPopulationSize()>();

        d0 = (double) $i0;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int getNumberOfSuccesses()>();

        d1 = (double) $i0;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int getSampleSize()>();

        d2 = (double) $i0;

        $d3 = d2 * d1;

        d2 = d0 - d2;

        $d3 = $d3 * d2;

        d1 = d0 - d1;

        d1 = $d3 * d1;

        $d3 = d0 * d0;

        d0 = d0 - 1.0;

        d0 = $d3 * d0;

        d0 = d1 / d0;

        return d0;
    }
    public double cumulativeProbability(int)
    {
        org.apache.commons.math3.distribution.HypergeometricDistribution r0;
        int $i0, $i1, $i2, $i3;
        int[] $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.distribution.HypergeometricDistribution;

        $i0 := @parameter0: int;

        $i3 = r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int populationSize>;

        $i1 = r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int numberOfSuccesses>;

        $i2 = r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int sampleSize>;

        $r1 = specialinvoke r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int[] getDomain(int,int,int)>($i3, $i1, $i2);

        $i1 = $r1[0];

        if $i0 >= $i1 goto label1;

        return 0.0;

     label1:
        $i1 = $r1[1];

        if $i0 < $i1 goto label2;

        return 1.0;

     label2:
        $i1 = $r1[0];

        $d0 = specialinvoke r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: double innerCumulativeProbability(int,int,int)>($i1, $i0, 1);

        return $d0;
    }
    public int getNumberOfSuccesses()
    {
        org.apache.commons.math3.distribution.HypergeometricDistribution r0;
        int i0;

        r0 := @this: org.apache.commons.math3.distribution.HypergeometricDistribution;

        i0 = r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int numberOfSuccesses>;

        return i0;
    }
    public double getNumericalMean()
    {
        org.apache.commons.math3.distribution.HypergeometricDistribution r0;
        int $i0;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.distribution.HypergeometricDistribution;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int getSampleSize()>();

        $d0 = (double) $i0;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int getNumberOfSuccesses()>();

        $d1 = (double) $i0;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int getPopulationSize()>();

        $d2 = (double) $i0;

        $d1 = $d1 / $d2;

        $d0 = $d0 * $d1;

        return $d0;
    }
    public double getNumericalVariance()
    {
        org.apache.commons.math3.distribution.HypergeometricDistribution r0;
        double $d0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.distribution.HypergeometricDistribution;

        $z0 = r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: boolean numericalVarianceIsCalculated>;

        if $z0 != 0 goto label1;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: double calculateNumericalVariance()>();

        r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: double numericalVariance> = $d0;

        r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: boolean numericalVarianceIsCalculated> = 1;

     label1:
        $d0 = r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: double numericalVariance>;

        return $d0;
    }
    public int getPopulationSize()
    {
        org.apache.commons.math3.distribution.HypergeometricDistribution r0;
        int i0;

        r0 := @this: org.apache.commons.math3.distribution.HypergeometricDistribution;

        i0 = r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int populationSize>;

        return i0;
    }
    public int getSampleSize()
    {
        org.apache.commons.math3.distribution.HypergeometricDistribution r0;
        int i0;

        r0 := @this: org.apache.commons.math3.distribution.HypergeometricDistribution;

        i0 = r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int sampleSize>;

        return i0;
    }
    public int getSupportLowerBound()
    {
        org.apache.commons.math3.distribution.HypergeometricDistribution r0;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.distribution.HypergeometricDistribution;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int getSampleSize()>();

        $i1 = virtualinvoke r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int getNumberOfSuccesses()>();

        $i0 = $i0 + $i1;

        $i1 = virtualinvoke r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int getPopulationSize()>();

        $i0 = $i0 - $i1;

        $i0 = staticinvoke <org.apache.commons.math3.util.FastMath: int max(int,int)>(0, $i0);

        return $i0;
    }
    public int getSupportUpperBound()
    {
        org.apache.commons.math3.distribution.HypergeometricDistribution r0;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.distribution.HypergeometricDistribution;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int getNumberOfSuccesses()>();

        $i1 = virtualinvoke r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int getSampleSize()>();

        $i0 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i0, $i1);

        return $i0;
    }
    public boolean isSupportConnected()
    {
        org.apache.commons.math3.distribution.HypergeometricDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.HypergeometricDistribution;

        return 1;
    }
    public double logProbability(int)
    {
        org.apache.commons.math3.distribution.HypergeometricDistribution r0;
        int $i0, $i1, $i2, $i3;
        double d0, d1, $d2, $d3;
        int[] $r1;

        r0 := @this: org.apache.commons.math3.distribution.HypergeometricDistribution;

        $i0 := @parameter0: int;

        $i1 = r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int populationSize>;

        $i2 = r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int numberOfSuccesses>;

        $i3 = r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int sampleSize>;

        $r1 = specialinvoke r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int[] getDomain(int,int,int)>($i1, $i2, $i3);

        $i1 = $r1[0];

        if $i0 < $i1 goto label1;

        $i1 = $r1[1];

        if $i0 <= $i1 goto label2;

     label1:
        return #-Infinity;

     label2:
        $i1 = r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int sampleSize>;

        d0 = (double) $i1;

        $i1 = r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int populationSize>;

        $d2 = (double) $i1;

        d0 = d0 / $d2;

        $i1 = r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int populationSize>;

        $i2 = r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int sampleSize>;

        $i1 = $i1 - $i2;

        $d2 = (double) $i1;

        $i1 = r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int populationSize>;

        $d3 = (double) $i1;

        d1 = $d2 / $d3;

        $i1 = r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int numberOfSuccesses>;

        $d2 = staticinvoke <org.apache.commons.math3.distribution.SaddlePointExpansion: double logBinomialProbability(int,int,double,double)>($i0, $i1, d0, d1);

        $i1 = r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int sampleSize>;

        $i0 = $i1 - $i0;

        $i1 = r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int populationSize>;

        $i2 = r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int numberOfSuccesses>;

        $i1 = $i1 - $i2;

        $d3 = staticinvoke <org.apache.commons.math3.distribution.SaddlePointExpansion: double logBinomialProbability(int,int,double,double)>($i0, $i1, d0, d1);

        $i0 = r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int sampleSize>;

        $i1 = r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int populationSize>;

        d0 = staticinvoke <org.apache.commons.math3.distribution.SaddlePointExpansion: double logBinomialProbability(int,int,double,double)>($i0, $i1, d0, d1);

        $d2 = $d2 + $d3;

        d0 = $d2 - d0;

        return d0;
    }
    public double probability(int)
    {
        org.apache.commons.math3.distribution.HypergeometricDistribution r0;
        int $i0;
        double $d0;
        byte $b1;

        r0 := @this: org.apache.commons.math3.distribution.HypergeometricDistribution;

        $i0 := @parameter0: int;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: double logProbability(int)>($i0);

        $b1 = $d0 cmpl #-Infinity;

        if $b1 != 0 goto label1;

        return 0.0;

     label1:
        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d0);

        return $d0;
    }
    public double upperCumulativeProbability(int)
    {
        org.apache.commons.math3.distribution.HypergeometricDistribution r0;
        int $i0, $i1, $i2, $i3;
        int[] $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.distribution.HypergeometricDistribution;

        $i0 := @parameter0: int;

        $i2 = r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int populationSize>;

        $i3 = r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int numberOfSuccesses>;

        $i1 = r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int sampleSize>;

        $r1 = specialinvoke r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int[] getDomain(int,int,int)>($i2, $i3, $i1);

        $i1 = $r1[0];

        if $i0 > $i1 goto label1;

        return 1.0;

     label1:
        $i1 = $r1[1];

        if $i0 <= $i1 goto label2;

        return 0.0;

     label2:
        $i1 = $r1[1];

        $d0 = specialinvoke r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: double innerCumulativeProbability(int,int,int)>($i1, $i0, -1);

        return $d0;
    }
