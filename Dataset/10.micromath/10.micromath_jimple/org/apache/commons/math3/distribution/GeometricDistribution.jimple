org.apache.commons.math3.distribution.GeometricDistribution extends org.apache.commons.math3.distribution.AbstractIntegerDistribution
private static final long serialVersionUID
private final double log1mProbabilityOfSuccess
private final double logProbabilityOfSuccess
private final double probabilityOfSuccess
    public void <init>(double)
    {
        org.apache.commons.math3.distribution.GeometricDistribution r0;
        double $d0;
        org.apache.commons.math3.random.Well19937c $r1;

        r0 := @this: org.apache.commons.math3.distribution.GeometricDistribution;

        $d0 := @parameter0: double;

        $r1 = new org.apache.commons.math3.random.Well19937c;

        specialinvoke $r1.<org.apache.commons.math3.random.Well19937c: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.distribution.GeometricDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double)>($r1, $d0);

        return;
    }
    public void <init>(org.apache.commons.math3.random.RandomGenerator, double)
    {
        org.apache.commons.math3.distribution.GeometricDistribution r0;
        org.apache.commons.math3.random.RandomGenerator $r1;
        double $d0, $d1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        byte $b0;
        org.apache.commons.math3.exception.OutOfRangeException $r3;
        java.lang.Double $r4;
        java.lang.Integer $r5, $r6;

        r0 := @this: org.apache.commons.math3.distribution.GeometricDistribution;

        $r1 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        $d0 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.distribution.AbstractIntegerDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator)>($r1);

        $b0 = $d0 cmpg 0.0;

        if $b0 <= 0 goto label1;

        $b0 = $d0 cmpl 1.0;

        if $b0 <= 0 goto label2;

     label1:
        $r3 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OUT_OF_RANGE_LEFT>;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke $r3.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)>($r2, $r4, $r5, $r6);

        throw $r3;

     label2:
        r0.<org.apache.commons.math3.distribution.GeometricDistribution: double probabilityOfSuccess> = $d0;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d0);

        r0.<org.apache.commons.math3.distribution.GeometricDistribution: double logProbabilityOfSuccess> = $d1;

        $d0 = neg $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double log1p(double)>($d0);

        r0.<org.apache.commons.math3.distribution.GeometricDistribution: double log1mProbabilityOfSuccess> = $d0;

        return;
    }
    public double cumulativeProbability(int)
    {
        org.apache.commons.math3.distribution.GeometricDistribution r0;
        int $i0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.distribution.GeometricDistribution;

        $i0 := @parameter0: int;

        if $i0 >= 0 goto label1;

        return 0.0;

     label1:
        $d0 = r0.<org.apache.commons.math3.distribution.GeometricDistribution: double log1mProbabilityOfSuccess>;

        $i0 = $i0 + 1;

        $d1 = (double) $i0;

        $d0 = $d0 * $d1;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double expm1(double)>($d0);

        $d0 = neg $d0;

        return $d0;
    }
    public double getNumericalMean()
    {
        org.apache.commons.math3.distribution.GeometricDistribution r0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.distribution.GeometricDistribution;

        $d0 = r0.<org.apache.commons.math3.distribution.GeometricDistribution: double probabilityOfSuccess>;

        $d0 = 1.0 - $d0;

        $d1 = r0.<org.apache.commons.math3.distribution.GeometricDistribution: double probabilityOfSuccess>;

        $d0 = $d0 / $d1;

        return $d0;
    }
    public double getNumericalVariance()
    {
        org.apache.commons.math3.distribution.GeometricDistribution r0;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.distribution.GeometricDistribution;

        $d1 = r0.<org.apache.commons.math3.distribution.GeometricDistribution: double probabilityOfSuccess>;

        $d1 = 1.0 - $d1;

        $d2 = r0.<org.apache.commons.math3.distribution.GeometricDistribution: double probabilityOfSuccess>;

        $d0 = r0.<org.apache.commons.math3.distribution.GeometricDistribution: double probabilityOfSuccess>;

        $d0 = $d2 * $d0;

        $d1 = $d1 / $d0;

        return $d1;
    }
    public double getProbabilityOfSuccess()
    {
        org.apache.commons.math3.distribution.GeometricDistribution r0;
        double d0;

        r0 := @this: org.apache.commons.math3.distribution.GeometricDistribution;

        d0 = r0.<org.apache.commons.math3.distribution.GeometricDistribution: double probabilityOfSuccess>;

        return d0;
    }
    public int getSupportLowerBound()
    {
        org.apache.commons.math3.distribution.GeometricDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.GeometricDistribution;

        return 0;
    }
    public int getSupportUpperBound()
    {
        org.apache.commons.math3.distribution.GeometricDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.GeometricDistribution;

        return 2147483647;
    }
    public int inverseCumulativeProbability(double) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.distribution.GeometricDistribution r0;
        double $d0, $d1;
        byte $b0;
        org.apache.commons.math3.exception.OutOfRangeException $r1;
        java.lang.Double $r2;
        java.lang.Integer $r3, $r4;
        int $i1;

        r0 := @this: org.apache.commons.math3.distribution.GeometricDistribution;

        $d0 := @parameter0: double;

        $b0 = $d0 cmpg 0.0;

        if $b0 < 0 goto label1;

        $b0 = $d0 cmpl 1.0;

        if $b0 <= 0 goto label2;

     label1:
        $r1 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke $r1.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r2, $r3, $r4);

        throw $r1;

     label2:
        $b0 = $d0 cmpl 1.0;

        if $b0 != 0 goto label3;

        return 2147483647;

     label3:
        $b0 = $d0 cmpl 0.0;

        if $b0 == 0 goto label4;

        $d0 = neg $d0;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double log1p(double)>($d0);

        $d0 = r0.<org.apache.commons.math3.distribution.GeometricDistribution: double log1mProbabilityOfSuccess>;

        $d0 = $d1 / $d0;

        $d0 = $d0 - 1.0;

        $d0 = staticinvoke <java.lang.Math: double ceil(double)>($d0);

        $i1 = (int) $d0;

        $i1 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i1);

        return $i1;

     label4:
        return 0;
    }
    public boolean isSupportConnected()
    {
        org.apache.commons.math3.distribution.GeometricDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.GeometricDistribution;

        return 1;
    }
    public double logProbability(int)
    {
        org.apache.commons.math3.distribution.GeometricDistribution r0;
        int $i0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.distribution.GeometricDistribution;

        $i0 := @parameter0: int;

        if $i0 >= 0 goto label1;

        return #-Infinity;

     label1:
        $d0 = (double) $i0;

        $d1 = r0.<org.apache.commons.math3.distribution.GeometricDistribution: double log1mProbabilityOfSuccess>;

        $d0 = $d0 * $d1;

        $d1 = r0.<org.apache.commons.math3.distribution.GeometricDistribution: double logProbabilityOfSuccess>;

        $d0 = $d0 + $d1;

        return $d0;
    }
    public double probability(int)
    {
        org.apache.commons.math3.distribution.GeometricDistribution r0;
        int $i0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.distribution.GeometricDistribution;

        $i0 := @parameter0: int;

        if $i0 >= 0 goto label1;

        return 0.0;

     label1:
        $d0 = r0.<org.apache.commons.math3.distribution.GeometricDistribution: double log1mProbabilityOfSuccess>;

        $d1 = (double) $i0;

        $d0 = $d0 * $d1;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d0);

        $d1 = r0.<org.apache.commons.math3.distribution.GeometricDistribution: double probabilityOfSuccess>;

        $d0 = $d0 * $d1;

        return $d0;
    }
