org.apache.commons.math3.distribution.TDistribution extends org.apache.commons.math3.distribution.AbstractRealDistribution
public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY
private static final long serialVersionUID
private final double degreesOfFreedom
private final double factor
private final double solverAbsoluteAccuracy
    public void <init>(double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.distribution.TDistribution r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.distribution.TDistribution;

        $d0 := @parameter0: double;

        specialinvoke r0.<org.apache.commons.math3.distribution.TDistribution: void <init>(double,double)>($d0, 1.0E-9);

        return;
    }
    public void <init>(double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.distribution.TDistribution r0;
        double $d0, $d1;
        org.apache.commons.math3.random.Well19937c $r1;

        r0 := @this: org.apache.commons.math3.distribution.TDistribution;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $r1 = new org.apache.commons.math3.random.Well19937c;

        specialinvoke $r1.<org.apache.commons.math3.random.Well19937c: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.distribution.TDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double,double)>($r1, $d0, $d1);

        return;
    }
    public void <init>(org.apache.commons.math3.random.RandomGenerator, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.distribution.TDistribution r0;
        org.apache.commons.math3.random.RandomGenerator $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.distribution.TDistribution;

        $r1 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        $d0 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.distribution.TDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double,double)>($r1, $d0, 1.0E-9);

        return;
    }
    public void <init>(org.apache.commons.math3.random.RandomGenerator, double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.distribution.TDistribution r0;
        org.apache.commons.math3.random.RandomGenerator $r1;
        double $d0, $d1, $d2, $d3;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        byte $b0;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r3;
        java.lang.Double $r4;

        r0 := @this: org.apache.commons.math3.distribution.TDistribution;

        $r1 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        $d0 := @parameter1: double;

        $d1 := @parameter2: double;

        specialinvoke r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator)>($r1);

        $b0 = $d0 cmpg 0.0;

        if $b0 > 0 goto label1;

        $r3 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats DEGREES_OF_FREEDOM>;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        specialinvoke $r3.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r2, $r4);

        throw $r3;

     label1:
        r0.<org.apache.commons.math3.distribution.TDistribution: double degreesOfFreedom> = $d0;

        r0.<org.apache.commons.math3.distribution.TDistribution: double solverAbsoluteAccuracy> = $d1;

        $d1 = 1.0 + $d0;

        $d1 = $d1 / 2.0;

        $d1 = staticinvoke <org.apache.commons.math3.special.Gamma: double logGamma(double)>($d1);

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(3.141592653589793);

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d0);

        $d2 = $d2 + $d3;

        $d2 = 0.5 * $d2;

        $d1 = $d1 - $d2;

        $d0 = $d0 / 2.0;

        $d0 = staticinvoke <org.apache.commons.math3.special.Gamma: double logGamma(double)>($d0);

        $d0 = $d1 - $d0;

        r0.<org.apache.commons.math3.distribution.TDistribution: double factor> = $d0;

        return;
    }
    public double cumulativeProbability(double)
    {
        org.apache.commons.math3.distribution.TDistribution r0;
        double $d0, $d1, $d2, $d3;
        byte $b0;

        r0 := @this: org.apache.commons.math3.distribution.TDistribution;

        $d0 := @parameter0: double;

        $b0 = $d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        return 0.5;

     label1:
        $d1 = r0.<org.apache.commons.math3.distribution.TDistribution: double degreesOfFreedom>;

        $d2 = r0.<org.apache.commons.math3.distribution.TDistribution: double degreesOfFreedom>;

        $d3 = $d0 * $d0;

        $d2 = $d2 + $d3;

        $d1 = $d1 / $d2;

        $d2 = r0.<org.apache.commons.math3.distribution.TDistribution: double degreesOfFreedom>;

        $d2 = 0.5 * $d2;

        $d1 = staticinvoke <org.apache.commons.math3.special.Beta: double regularizedBeta(double,double,double)>($d1, $d2, 0.5);

        $b0 = $d0 cmpg 0.0;

        if $b0 >= 0 goto label2;

        $d0 = 0.5 * $d1;

        return $d0;

     label2:
        $d0 = 0.5 * $d1;

        $d0 = 1.0 - $d0;

        return $d0;
    }
    public double density(double)
    {
        org.apache.commons.math3.distribution.TDistribution r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.distribution.TDistribution;

        $d0 := @parameter0: double;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.distribution.TDistribution: double logDensity(double)>($d0);

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d0);

        return $d0;
    }
    public double getDegreesOfFreedom()
    {
        org.apache.commons.math3.distribution.TDistribution r0;
        double d0;

        r0 := @this: org.apache.commons.math3.distribution.TDistribution;

        d0 = r0.<org.apache.commons.math3.distribution.TDistribution: double degreesOfFreedom>;

        return d0;
    }
    public double getNumericalMean()
    {
        org.apache.commons.math3.distribution.TDistribution r0;
        double $d0;
        byte $b0;

        r0 := @this: org.apache.commons.math3.distribution.TDistribution;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.distribution.TDistribution: double getDegreesOfFreedom()>();

        $b0 = $d0 cmpl 1.0;

        if $b0 <= 0 goto label1;

        return 0.0;

     label1:
        return #NaN;
    }
    public double getNumericalVariance()
    {
        org.apache.commons.math3.distribution.TDistribution r0;
        double $d0, $d1;
        byte $b0;

        r0 := @this: org.apache.commons.math3.distribution.TDistribution;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.distribution.TDistribution: double getDegreesOfFreedom()>();

        $b0 = $d0 cmpl 2.0;

        if $b0 <= 0 goto label1;

        $d1 = $d0 - 2.0;

        $d0 = $d0 / $d1;

        return $d0;

     label1:
        $b0 = $d0 cmpl 1.0;

        if $b0 <= 0 goto label2;

        $b0 = $d0 cmpg 2.0;

        if $b0 > 0 goto label2;

        return #Infinity;

     label2:
        return #NaN;
    }
    protected double getSolverAbsoluteAccuracy()
    {
        org.apache.commons.math3.distribution.TDistribution r0;
        double d0;

        r0 := @this: org.apache.commons.math3.distribution.TDistribution;

        d0 = r0.<org.apache.commons.math3.distribution.TDistribution: double solverAbsoluteAccuracy>;

        return d0;
    }
    public double getSupportLowerBound()
    {
        org.apache.commons.math3.distribution.TDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.TDistribution;

        return #-Infinity;
    }
    public double getSupportUpperBound()
    {
        org.apache.commons.math3.distribution.TDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.TDistribution;

        return #Infinity;
    }
    public boolean isSupportConnected()
    {
        org.apache.commons.math3.distribution.TDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.TDistribution;

        return 1;
    }
    public boolean isSupportLowerBoundInclusive()
    {
        org.apache.commons.math3.distribution.TDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.TDistribution;

        return 0;
    }
    public boolean isSupportUpperBoundInclusive()
    {
        org.apache.commons.math3.distribution.TDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.TDistribution;

        return 0;
    }
    public double logDensity(double)
    {
        org.apache.commons.math3.distribution.TDistribution r0;
        double $d0, d1, d2, $d3;

        r0 := @this: org.apache.commons.math3.distribution.TDistribution;

        $d0 := @parameter0: double;

        d1 = r0.<org.apache.commons.math3.distribution.TDistribution: double degreesOfFreedom>;

        $d3 = d1 + 1.0;

        d2 = $d3 / 2.0;

        $d3 = r0.<org.apache.commons.math3.distribution.TDistribution: double factor>;

        $d0 = $d0 * $d0;

        $d0 = $d0 / d1;

        $d0 = $d0 + 1.0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d0);

        $d0 = $d0 * d2;

        $d0 = $d3 - $d0;

        return $d0;
    }
