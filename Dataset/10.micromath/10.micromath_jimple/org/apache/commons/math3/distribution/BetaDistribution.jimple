org.apache.commons.math3.distribution.BetaDistribution extends org.apache.commons.math3.distribution.AbstractRealDistribution
public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY
private static final long serialVersionUID
private final double alpha
private final double beta
private final double solverAbsoluteAccuracy
private double z
    public void <init>(double, double)
    {
        org.apache.commons.math3.distribution.BetaDistribution r0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.distribution.BetaDistribution;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.distribution.BetaDistribution: void <init>(double,double,double)>($d0, $d1, 1.0E-9);

        return;
    }
    public void <init>(double, double, double)
    {
        org.apache.commons.math3.distribution.BetaDistribution r0;
        double $d0, $d1, $d2;
        org.apache.commons.math3.random.Well19937c $r1;

        r0 := @this: org.apache.commons.math3.distribution.BetaDistribution;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $r1 = new org.apache.commons.math3.random.Well19937c;

        specialinvoke $r1.<org.apache.commons.math3.random.Well19937c: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.distribution.BetaDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double,double,double)>($r1, $d0, $d1, $d2);

        return;
    }
    public void <init>(org.apache.commons.math3.random.RandomGenerator, double, double)
    {
        org.apache.commons.math3.distribution.BetaDistribution r0;
        org.apache.commons.math3.random.RandomGenerator $r1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.distribution.BetaDistribution;

        $r1 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        $d0 := @parameter1: double;

        $d1 := @parameter2: double;

        specialinvoke r0.<org.apache.commons.math3.distribution.BetaDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double,double,double)>($r1, $d0, $d1, 1.0E-9);

        return;
    }
    public void <init>(org.apache.commons.math3.random.RandomGenerator, double, double, double)
    {
        org.apache.commons.math3.distribution.BetaDistribution r0;
        org.apache.commons.math3.random.RandomGenerator $r1;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.distribution.BetaDistribution;

        $r1 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        $d0 := @parameter1: double;

        $d1 := @parameter2: double;

        $d2 := @parameter3: double;

        specialinvoke r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator)>($r1);

        r0.<org.apache.commons.math3.distribution.BetaDistribution: double alpha> = $d0;

        r0.<org.apache.commons.math3.distribution.BetaDistribution: double beta> = $d1;

        r0.<org.apache.commons.math3.distribution.BetaDistribution: double z> = #NaN;

        r0.<org.apache.commons.math3.distribution.BetaDistribution: double solverAbsoluteAccuracy> = $d2;

        return;
    }
    private void recomputeZ()
    {
        org.apache.commons.math3.distribution.BetaDistribution r0;
        double $d0, $d1, $d2;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.distribution.BetaDistribution;

        $d1 = r0.<org.apache.commons.math3.distribution.BetaDistribution: double z>;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d1);

        if $z0 == 0 goto label1;

        $d1 = r0.<org.apache.commons.math3.distribution.BetaDistribution: double alpha>;

        $d1 = staticinvoke <org.apache.commons.math3.special.Gamma: double logGamma(double)>($d1);

        $d0 = r0.<org.apache.commons.math3.distribution.BetaDistribution: double beta>;

        $d0 = staticinvoke <org.apache.commons.math3.special.Gamma: double logGamma(double)>($d0);

        $d1 = $d1 + $d0;

        $d2 = r0.<org.apache.commons.math3.distribution.BetaDistribution: double alpha>;

        $d0 = r0.<org.apache.commons.math3.distribution.BetaDistribution: double beta>;

        $d0 = $d2 + $d0;

        $d0 = staticinvoke <org.apache.commons.math3.special.Gamma: double logGamma(double)>($d0);

        $d1 = $d1 - $d0;

        r0.<org.apache.commons.math3.distribution.BetaDistribution: double z> = $d1;

     label1:
        return;
    }
    public double cumulativeProbability(double)
    {
        org.apache.commons.math3.distribution.BetaDistribution r0;
        double $d0, $d1, $d2;
        byte $b0;

        r0 := @this: org.apache.commons.math3.distribution.BetaDistribution;

        $d0 := @parameter0: double;

        $b0 = $d0 cmpg 0.0;

        if $b0 > 0 goto label1;

        return 0.0;

     label1:
        $b0 = $d0 cmpl 1.0;

        if $b0 < 0 goto label2;

        return 1.0;

     label2:
        $d1 = r0.<org.apache.commons.math3.distribution.BetaDistribution: double alpha>;

        $d2 = r0.<org.apache.commons.math3.distribution.BetaDistribution: double beta>;

        $d0 = staticinvoke <org.apache.commons.math3.special.Beta: double regularizedBeta(double,double,double)>($d0, $d1, $d2);

        return $d0;
    }
    public double density(double)
    {
        org.apache.commons.math3.distribution.BetaDistribution r0;
        double $d0;
        byte $b0;

        r0 := @this: org.apache.commons.math3.distribution.BetaDistribution;

        $d0 := @parameter0: double;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.distribution.BetaDistribution: double logDensity(double)>($d0);

        $b0 = $d0 cmpl #-Infinity;

        if $b0 != 0 goto label1;

        return 0.0;

     label1:
        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d0);

        return $d0;
    }
    public double getAlpha()
    {
        org.apache.commons.math3.distribution.BetaDistribution r0;
        double d0;

        r0 := @this: org.apache.commons.math3.distribution.BetaDistribution;

        d0 = r0.<org.apache.commons.math3.distribution.BetaDistribution: double alpha>;

        return d0;
    }
    public double getBeta()
    {
        org.apache.commons.math3.distribution.BetaDistribution r0;
        double d0;

        r0 := @this: org.apache.commons.math3.distribution.BetaDistribution;

        d0 = r0.<org.apache.commons.math3.distribution.BetaDistribution: double beta>;

        return d0;
    }
    public double getNumericalMean()
    {
        org.apache.commons.math3.distribution.BetaDistribution r0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.distribution.BetaDistribution;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.distribution.BetaDistribution: double getAlpha()>();

        $d1 = virtualinvoke r0.<org.apache.commons.math3.distribution.BetaDistribution: double getBeta()>();

        $d1 = $d1 + $d0;

        $d0 = $d0 / $d1;

        return $d0;
    }
    public double getNumericalVariance()
    {
        org.apache.commons.math3.distribution.BetaDistribution r0;
        double d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.distribution.BetaDistribution;

        $d1 = virtualinvoke r0.<org.apache.commons.math3.distribution.BetaDistribution: double getAlpha()>();

        $d2 = virtualinvoke r0.<org.apache.commons.math3.distribution.BetaDistribution: double getBeta()>();

        d0 = $d1 + $d2;

        $d1 = $d1 * $d2;

        $d2 = d0 * d0;

        d0 = 1.0 + d0;

        d0 = $d2 * d0;

        d0 = $d1 / d0;

        return d0;
    }
    protected double getSolverAbsoluteAccuracy()
    {
        org.apache.commons.math3.distribution.BetaDistribution r0;
        double d0;

        r0 := @this: org.apache.commons.math3.distribution.BetaDistribution;

        d0 = r0.<org.apache.commons.math3.distribution.BetaDistribution: double solverAbsoluteAccuracy>;

        return d0;
    }
    public double getSupportLowerBound()
    {
        org.apache.commons.math3.distribution.BetaDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.BetaDistribution;

        return 0.0;
    }
    public double getSupportUpperBound()
    {
        org.apache.commons.math3.distribution.BetaDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.BetaDistribution;

        return 1.0;
    }
    public boolean isSupportConnected()
    {
        org.apache.commons.math3.distribution.BetaDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.BetaDistribution;

        return 1;
    }
    public boolean isSupportLowerBoundInclusive()
    {
        org.apache.commons.math3.distribution.BetaDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.BetaDistribution;

        return 0;
    }
    public boolean isSupportUpperBoundInclusive()
    {
        org.apache.commons.math3.distribution.BetaDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.BetaDistribution;

        return 0;
    }
    public double logDensity(double)
    {
        org.apache.commons.math3.distribution.BetaDistribution r0;
        double $d0, $d1, $d2;
        byte $b0;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        java.lang.Double $r3;
        java.lang.Integer $r4;

        r0 := @this: org.apache.commons.math3.distribution.BetaDistribution;

        $d0 := @parameter0: double;

        specialinvoke r0.<org.apache.commons.math3.distribution.BetaDistribution: void recomputeZ()>();

        $b0 = $d0 cmpg 0.0;

        if $b0 < 0 goto label1;

        $b0 = $d0 cmpl 1.0;

        if $b0 <= 0 goto label2;

     label1:
        return #-Infinity;

     label2:
        $b0 = $d0 cmpl 0.0;

        if $b0 != 0 goto label4;

        $d0 = r0.<org.apache.commons.math3.distribution.BetaDistribution: double alpha>;

        $b0 = $d0 cmpg 1.0;

        if $b0 >= 0 goto label3;

        $r1 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA>;

        $d0 = r0.<org.apache.commons.math3.distribution.BetaDistribution: double alpha>;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke $r1.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r2, $r3, $r4, 0);

        throw $r1;

     label3:
        return #-Infinity;

     label4:
        $b0 = $d0 cmpl 1.0;

        if $b0 != 0 goto label6;

        $d0 = r0.<org.apache.commons.math3.distribution.BetaDistribution: double beta>;

        $b0 = $d0 cmpg 1.0;

        if $b0 >= 0 goto label5;

        $r1 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA>;

        $d0 = r0.<org.apache.commons.math3.distribution.BetaDistribution: double beta>;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke $r1.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r2, $r3, $r4, 0);

        throw $r1;

     label5:
        return #-Infinity;

     label6:
        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d0);

        $d0 = neg $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double log1p(double)>($d0);

        $d2 = r0.<org.apache.commons.math3.distribution.BetaDistribution: double alpha>;

        $d2 = $d2 - 1.0;

        $d1 = $d2 * $d1;

        $d2 = r0.<org.apache.commons.math3.distribution.BetaDistribution: double beta>;

        $d2 = $d2 - 1.0;

        $d0 = $d2 * $d0;

        $d0 = $d1 + $d0;

        $d1 = r0.<org.apache.commons.math3.distribution.BetaDistribution: double z>;

        $d0 = $d0 - $d1;

        return $d0;
    }
    public double sample()
    {
        org.apache.commons.math3.distribution.BetaDistribution r0;
        double $d0, $d1;
        org.apache.commons.math3.random.RandomGenerator $r1;

        r0 := @this: org.apache.commons.math3.distribution.BetaDistribution;

        $r1 = r0.<org.apache.commons.math3.distribution.BetaDistribution: org.apache.commons.math3.random.RandomGenerator random>;

        $d0 = r0.<org.apache.commons.math3.distribution.BetaDistribution: double alpha>;

        $d1 = r0.<org.apache.commons.math3.distribution.BetaDistribution: double beta>;

        $d0 = staticinvoke <org.apache.commons.math3.distribution.BetaDistribution$ChengBetaSampler: double sample(org.apache.commons.math3.random.RandomGenerator,double,double)>($r1, $d0, $d1);

        return $d0;
    }
