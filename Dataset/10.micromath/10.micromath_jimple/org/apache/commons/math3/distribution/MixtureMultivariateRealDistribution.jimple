org.apache.commons.math3.distribution.MixtureMultivariateRealDistribution extends org.apache.commons.math3.distribution.AbstractMultivariateRealDistribution
private final java.util.List distribution
private final double[] weight
    public void <init>(java.util.List)
    {
        org.apache.commons.math3.distribution.MixtureMultivariateRealDistribution r0;
        java.util.List r1;
        org.apache.commons.math3.random.Well19937c $r2;

        r0 := @this: org.apache.commons.math3.distribution.MixtureMultivariateRealDistribution;

        r1 := @parameter0: java.util.List;

        $r2 = new org.apache.commons.math3.random.Well19937c;

        specialinvoke $r2.<org.apache.commons.math3.random.Well19937c: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.distribution.MixtureMultivariateRealDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,java.util.List)>($r2, r1);

        return;
    }
    public void <init>(org.apache.commons.math3.random.RandomGenerator, java.util.List)
    {
        org.apache.commons.math3.distribution.MixtureMultivariateRealDistribution r0;
        org.apache.commons.math3.random.RandomGenerator $r1;
        java.util.List r2, $r15;
        java.lang.Object $r3;
        org.apache.commons.math3.util.Pair $r4;
        org.apache.commons.math3.distribution.MultivariateRealDistribution $r5;
        int $i0, $i1, i2, $i3;
        double d0, $d1;
        org.apache.commons.math3.exception.DimensionMismatchException $r6;
        java.lang.Double $r7;
        byte $b4;
        org.apache.commons.math3.exception.NotPositiveException $r8;
        java.lang.Number $r9;
        boolean $z0;
        org.apache.commons.math3.exception.MathArithmeticException $r10;
        org.apache.commons.math3.exception.util.LocalizedFormats $r11;
        java.lang.Object[] $r12;
        java.util.ArrayList $r13;
        double[] $r14;

        r0 := @this: org.apache.commons.math3.distribution.MixtureMultivariateRealDistribution;

        $r1 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        r2 := @parameter1: java.util.List;

        $r3 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(0);

        $r4 = (org.apache.commons.math3.util.Pair) $r3;

        $r3 = virtualinvoke $r4.<org.apache.commons.math3.util.Pair: java.lang.Object getSecond()>();

        $r5 = (org.apache.commons.math3.distribution.MultivariateRealDistribution) $r3;

        $i0 = interfaceinvoke $r5.<org.apache.commons.math3.distribution.MultivariateRealDistribution: int getDimension()>();

        specialinvoke r0.<org.apache.commons.math3.distribution.AbstractMultivariateRealDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,int)>($r1, $i0);

        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        $i1 = virtualinvoke r0.<org.apache.commons.math3.distribution.MixtureMultivariateRealDistribution: int getDimension()>();

        d0 = 0.0;

        i2 = 0;

     label1:
        if i2 >= $i0 goto label4;

        $r3 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i2);

        $r4 = (org.apache.commons.math3.util.Pair) $r3;

        $r3 = virtualinvoke $r4.<org.apache.commons.math3.util.Pair: java.lang.Object getSecond()>();

        $r5 = (org.apache.commons.math3.distribution.MultivariateRealDistribution) $r3;

        $i3 = interfaceinvoke $r5.<org.apache.commons.math3.distribution.MultivariateRealDistribution: int getDimension()>();

        if $i3 == $i1 goto label2;

        $r6 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $r3 = virtualinvoke $r4.<org.apache.commons.math3.util.Pair: java.lang.Object getSecond()>();

        $r5 = (org.apache.commons.math3.distribution.MultivariateRealDistribution) $r3;

        $i0 = interfaceinvoke $r5.<org.apache.commons.math3.distribution.MultivariateRealDistribution: int getDimension()>();

        specialinvoke $r6.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i0, $i1);

        throw $r6;

     label2:
        $r3 = virtualinvoke $r4.<org.apache.commons.math3.util.Pair: java.lang.Object getFirst()>();

        $r7 = (java.lang.Double) $r3;

        $d1 = virtualinvoke $r7.<java.lang.Double: double doubleValue()>();

        $b4 = $d1 cmpg 0.0;

        if $b4 >= 0 goto label3;

        $r8 = new org.apache.commons.math3.exception.NotPositiveException;

        $r3 = virtualinvoke $r4.<org.apache.commons.math3.util.Pair: java.lang.Object getFirst()>();

        $r9 = (java.lang.Number) $r3;

        specialinvoke $r8.<org.apache.commons.math3.exception.NotPositiveException: void <init>(java.lang.Number)>($r9);

        throw $r8;

     label3:
        $r3 = virtualinvoke $r4.<org.apache.commons.math3.util.Pair: java.lang.Object getFirst()>();

        $r7 = (java.lang.Double) $r3;

        $d1 = virtualinvoke $r7.<java.lang.Double: double doubleValue()>();

        d0 = d0 + $d1;

        i2 = i2 + 1;

        goto label1;

     label4:
        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d0);

        if $z0 == 0 goto label5;

        $r10 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r11 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OVERFLOW>;

        $r12 = newarray (java.lang.Object)[0];

        specialinvoke $r10.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r11, $r12);

        throw $r10;

     label5:
        $r13 = new java.util.ArrayList;

        specialinvoke $r13.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.math3.distribution.MixtureMultivariateRealDistribution: java.util.List distribution> = $r13;

        $r14 = newarray (double)[$i0];

        r0.<org.apache.commons.math3.distribution.MixtureMultivariateRealDistribution: double[] weight> = $r14;

        $i1 = 0;

     label6:
        if $i1 >= $i0 goto label7;

        $r3 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>($i1);

        $r4 = (org.apache.commons.math3.util.Pair) $r3;

        $r14 = r0.<org.apache.commons.math3.distribution.MixtureMultivariateRealDistribution: double[] weight>;

        $r3 = virtualinvoke $r4.<org.apache.commons.math3.util.Pair: java.lang.Object getFirst()>();

        $r7 = (java.lang.Double) $r3;

        $d1 = virtualinvoke $r7.<java.lang.Double: double doubleValue()>();

        $d1 = $d1 / d0;

        $r14[$i1] = $d1;

        $r15 = r0.<org.apache.commons.math3.distribution.MixtureMultivariateRealDistribution: java.util.List distribution>;

        $r3 = virtualinvoke $r4.<org.apache.commons.math3.util.Pair: java.lang.Object getSecond()>();

        interfaceinvoke $r15.<java.util.List: boolean add(java.lang.Object)>($r3);

        $i1 = $i1 + 1;

        goto label6;

     label7:
        return;
    }
    public double density(double[])
    {
        org.apache.commons.math3.distribution.MixtureMultivariateRealDistribution r0;
        double[] $r1, $r2;
        double d0, $d1, $d2;
        int i0, $i1;
        java.util.List $r3;
        java.lang.Object $r4;
        org.apache.commons.math3.distribution.MultivariateRealDistribution $r5;

        r0 := @this: org.apache.commons.math3.distribution.MixtureMultivariateRealDistribution;

        $r1 := @parameter0: double[];

        d0 = 0.0;

        i0 = 0;

     label1:
        $r2 = r0.<org.apache.commons.math3.distribution.MixtureMultivariateRealDistribution: double[] weight>;

        $i1 = lengthof $r2;

        if i0 >= $i1 goto label2;

        $r2 = r0.<org.apache.commons.math3.distribution.MixtureMultivariateRealDistribution: double[] weight>;

        $d1 = $r2[i0];

        $r3 = r0.<org.apache.commons.math3.distribution.MixtureMultivariateRealDistribution: java.util.List distribution>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i0);

        $r5 = (org.apache.commons.math3.distribution.MultivariateRealDistribution) $r4;

        $d2 = interfaceinvoke $r5.<org.apache.commons.math3.distribution.MultivariateRealDistribution: double density(double[])>($r1);

        $d1 = $d1 * $d2;

        d0 = d0 + $d1;

        i0 = i0 + 1;

        goto label1;

     label2:
        return d0;
    }
    public java.util.List getComponents()
    {
        org.apache.commons.math3.distribution.MixtureMultivariateRealDistribution r0;
        java.util.ArrayList r1;
        double[] $r2;
        int $i0, $i1;
        org.apache.commons.math3.util.Pair $r3;
        double $d0;
        java.lang.Double $r4;
        java.util.List $r5;
        java.lang.Object $r6;

        r0 := @this: org.apache.commons.math3.distribution.MixtureMultivariateRealDistribution;

        r1 = new java.util.ArrayList;

        $r2 = r0.<org.apache.commons.math3.distribution.MixtureMultivariateRealDistribution: double[] weight>;

        $i0 = lengthof $r2;

        specialinvoke r1.<java.util.ArrayList: void <init>(int)>($i0);

        $i0 = 0;

     label1:
        $r2 = r0.<org.apache.commons.math3.distribution.MixtureMultivariateRealDistribution: double[] weight>;

        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label2;

        $r3 = new org.apache.commons.math3.util.Pair;

        $r2 = r0.<org.apache.commons.math3.distribution.MixtureMultivariateRealDistribution: double[] weight>;

        $d0 = $r2[$i0];

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r5 = r0.<org.apache.commons.math3.distribution.MixtureMultivariateRealDistribution: java.util.List distribution>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>($i0);

        specialinvoke $r3.<org.apache.commons.math3.util.Pair: void <init>(java.lang.Object,java.lang.Object)>($r4, $r6);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r3);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return r1;
    }
    public void reseedRandomGenerator(long)
    {
        org.apache.commons.math3.distribution.MixtureMultivariateRealDistribution r0;
        long $l0, $l3;
        int i1, $i2;
        java.util.List $r1;
        java.lang.Object $r2;
        org.apache.commons.math3.distribution.MultivariateRealDistribution $r3;

        r0 := @this: org.apache.commons.math3.distribution.MixtureMultivariateRealDistribution;

        $l0 := @parameter0: long;

        specialinvoke r0.<org.apache.commons.math3.distribution.AbstractMultivariateRealDistribution: void reseedRandomGenerator(long)>($l0);

        i1 = 0;

     label1:
        $r1 = r0.<org.apache.commons.math3.distribution.MixtureMultivariateRealDistribution: java.util.List distribution>;

        $i2 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i1 >= $i2 goto label2;

        $r1 = r0.<org.apache.commons.math3.distribution.MixtureMultivariateRealDistribution: java.util.List distribution>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i1);

        $r3 = (org.apache.commons.math3.distribution.MultivariateRealDistribution) $r2;

        $i2 = i1 + 1;

        $l3 = (long) $i2;

        $l3 = $l3 + $l0;

        interfaceinvoke $r3.<org.apache.commons.math3.distribution.MultivariateRealDistribution: void reseedRandomGenerator(long)>($l3);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
    public double[] sample()
    {
        org.apache.commons.math3.distribution.MixtureMultivariateRealDistribution r0;
        double[] r1, $r3;
        org.apache.commons.math3.random.RandomGenerator $r2;
        double $d0, d1, $d2;
        int i0, $i1;
        byte $b2;
        java.util.List $r4;
        java.lang.Object $r5;
        org.apache.commons.math3.distribution.MultivariateRealDistribution $r6;

        r0 := @this: org.apache.commons.math3.distribution.MixtureMultivariateRealDistribution;

        r1 = null;

        $r2 = r0.<org.apache.commons.math3.distribution.MixtureMultivariateRealDistribution: org.apache.commons.math3.random.RandomGenerator random>;

        $d0 = interfaceinvoke $r2.<org.apache.commons.math3.random.RandomGenerator: double nextDouble()>();

        d1 = 0.0;

        i0 = 0;

     label1:
        $r3 = r0.<org.apache.commons.math3.distribution.MixtureMultivariateRealDistribution: double[] weight>;

        $i1 = lengthof $r3;

        if i0 >= $i1 goto label2;

        $r3 = r0.<org.apache.commons.math3.distribution.MixtureMultivariateRealDistribution: double[] weight>;

        $d2 = $r3[i0];

        d1 = d1 + $d2;

        $b2 = $d0 cmpg d1;

        if $b2 > 0 goto label3;

        $r4 = r0.<org.apache.commons.math3.distribution.MixtureMultivariateRealDistribution: java.util.List distribution>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i0);

        $r6 = (org.apache.commons.math3.distribution.MultivariateRealDistribution) $r5;

        r1 = interfaceinvoke $r6.<org.apache.commons.math3.distribution.MultivariateRealDistribution: double[] sample()>();

     label2:
        if r1 != null goto label4;

        $r4 = r0.<org.apache.commons.math3.distribution.MixtureMultivariateRealDistribution: java.util.List distribution>;

        r1 = r0.<org.apache.commons.math3.distribution.MixtureMultivariateRealDistribution: double[] weight>;

        i0 = lengthof r1;

        i0 = i0 + -1;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i0);

        $r6 = (org.apache.commons.math3.distribution.MultivariateRealDistribution) $r5;

        r1 = interfaceinvoke $r6.<org.apache.commons.math3.distribution.MultivariateRealDistribution: double[] sample()>();

        return r1;

     label3:
        i0 = i0 + 1;

        goto label1;

     label4:
        return r1;
    }
