org.apache.commons.math3.distribution.GammaDistribution extends org.apache.commons.math3.distribution.AbstractRealDistribution
public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY
private static final long serialVersionUID
private final double densityPrefactor1
private final double densityPrefactor2
private final double logDensityPrefactor1
private final double logDensityPrefactor2
private final double maxLogY
private final double minY
private final double scale
private final double shape
private final double shiftedShape
private final double solverAbsoluteAccuracy
    public void <init>(double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.distribution.GammaDistribution r0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.distribution.GammaDistribution;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.distribution.GammaDistribution: void <init>(double,double,double)>($d0, $d1, 1.0E-9);

        return;
    }
    public void <init>(double, double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.distribution.GammaDistribution r0;
        double $d0, $d1, $d2;
        org.apache.commons.math3.random.Well19937c $r1;

        r0 := @this: org.apache.commons.math3.distribution.GammaDistribution;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $r1 = new org.apache.commons.math3.random.Well19937c;

        specialinvoke $r1.<org.apache.commons.math3.random.Well19937c: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.distribution.GammaDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double,double,double)>($r1, $d0, $d1, $d2);

        return;
    }
    public void <init>(org.apache.commons.math3.random.RandomGenerator, double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.distribution.GammaDistribution r0;
        org.apache.commons.math3.random.RandomGenerator $r1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.distribution.GammaDistribution;

        $r1 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        $d0 := @parameter1: double;

        $d1 := @parameter2: double;

        specialinvoke r0.<org.apache.commons.math3.distribution.GammaDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double,double,double)>($r1, $d0, $d1, 1.0E-9);

        return;
    }
    public void <init>(org.apache.commons.math3.random.RandomGenerator, double, double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.distribution.GammaDistribution r0;
        org.apache.commons.math3.random.RandomGenerator $r1;
        double $d0, $d1, $d2, $d3, $d4;
        byte $b0;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3;
        java.lang.Double $r4;

        r0 := @this: org.apache.commons.math3.distribution.GammaDistribution;

        $r1 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        $d0 := @parameter1: double;

        $d1 := @parameter2: double;

        $d2 := @parameter3: double;

        specialinvoke r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator)>($r1);

        $b0 = $d0 cmpg 0.0;

        if $b0 > 0 goto label1;

        $r2 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats SHAPE>;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        specialinvoke $r2.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r3, $r4);

        throw $r2;

     label1:
        $b0 = $d1 cmpg 0.0;

        if $b0 > 0 goto label2;

        $r2 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats SCALE>;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        specialinvoke $r2.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r3, $r4);

        throw $r2;

     label2:
        r0.<org.apache.commons.math3.distribution.GammaDistribution: double shape> = $d0;

        r0.<org.apache.commons.math3.distribution.GammaDistribution: double scale> = $d1;

        r0.<org.apache.commons.math3.distribution.GammaDistribution: double solverAbsoluteAccuracy> = $d2;

        $d2 = 4.7421875 + $d0;

        $d2 = $d2 + 0.5;

        r0.<org.apache.commons.math3.distribution.GammaDistribution: double shiftedShape> = $d2;

        $d2 = r0.<org.apache.commons.math3.distribution.GammaDistribution: double shiftedShape>;

        $d2 = 6.283185307179586 * $d2;

        $d2 = 2.718281828459045 / $d2;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d2);

        $d3 = $d3 * $d0;

        $d4 = staticinvoke <org.apache.commons.math3.special.Gamma: double lanczos(double)>($d0);

        $d3 = $d3 / $d4;

        r0.<org.apache.commons.math3.distribution.GammaDistribution: double densityPrefactor2> = $d3;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d0);

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d2);

        $d2 = 0.5 * $d2;

        $d2 = $d3 + $d2;

        $d3 = staticinvoke <org.apache.commons.math3.special.Gamma: double lanczos(double)>($d0);

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d3);

        $d2 = $d2 - $d3;

        r0.<org.apache.commons.math3.distribution.GammaDistribution: double logDensityPrefactor2> = $d2;

        $d2 = r0.<org.apache.commons.math3.distribution.GammaDistribution: double densityPrefactor2>;

        $d2 = $d2 / $d1;

        $d3 = r0.<org.apache.commons.math3.distribution.GammaDistribution: double shiftedShape>;

        $d4 = neg $d0;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,double)>($d3, $d4);

        $d2 = $d2 * $d3;

        $d3 = 4.7421875 + $d0;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d3);

        $d2 = $d2 * $d3;

        r0.<org.apache.commons.math3.distribution.GammaDistribution: double densityPrefactor1> = $d2;

        $d2 = r0.<org.apache.commons.math3.distribution.GammaDistribution: double logDensityPrefactor2>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d1);

        $d1 = $d2 - $d1;

        $d2 = r0.<org.apache.commons.math3.distribution.GammaDistribution: double shiftedShape>;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d2);

        $d2 = $d2 * $d0;

        $d1 = $d1 - $d2;

        $d1 = $d1 + $d0;

        $d1 = $d1 + 4.7421875;

        r0.<org.apache.commons.math3.distribution.GammaDistribution: double logDensityPrefactor1> = $d1;

        $d1 = 4.7421875 + $d0;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(1.7976931348623157E308);

        $d1 = $d1 - $d2;

        r0.<org.apache.commons.math3.distribution.GammaDistribution: double minY> = $d1;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(1.7976931348623157E308);

        $d0 = $d0 - 1.0;

        $d0 = $d1 / $d0;

        r0.<org.apache.commons.math3.distribution.GammaDistribution: double maxLogY> = $d0;

        return;
    }
    public double cumulativeProbability(double)
    {
        org.apache.commons.math3.distribution.GammaDistribution r0;
        double $d0, $d1, $d2;
        byte $b0;

        r0 := @this: org.apache.commons.math3.distribution.GammaDistribution;

        $d0 := @parameter0: double;

        $b0 = $d0 cmpg 0.0;

        if $b0 > 0 goto label1;

        return 0.0;

     label1:
        $d1 = r0.<org.apache.commons.math3.distribution.GammaDistribution: double shape>;

        $d2 = r0.<org.apache.commons.math3.distribution.GammaDistribution: double scale>;

        $d0 = $d0 / $d2;

        $d0 = staticinvoke <org.apache.commons.math3.special.Gamma: double regularizedGammaP(double,double)>($d1, $d0);

        return $d0;
    }
    public double density(double)
    {
        org.apache.commons.math3.distribution.GammaDistribution r0;
        double $d0, d1, d2, d3, $d4;
        byte $b0;

        r0 := @this: org.apache.commons.math3.distribution.GammaDistribution;

        $d0 := @parameter0: double;

        $b0 = $d0 cmpg 0.0;

        if $b0 >= 0 goto label1;

        return 0.0;

     label1:
        d3 = r0.<org.apache.commons.math3.distribution.GammaDistribution: double scale>;

        d3 = $d0 / d3;

        d2 = r0.<org.apache.commons.math3.distribution.GammaDistribution: double minY>;

        $b0 = d3 cmpg d2;

        if $b0 <= 0 goto label2;

        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(d3);

        d1 = r0.<org.apache.commons.math3.distribution.GammaDistribution: double maxLogY>;

        $b0 = d2 cmpl d1;

        if $b0 < 0 goto label3;

     label2:
        d2 = r0.<org.apache.commons.math3.distribution.GammaDistribution: double shiftedShape>;

        d2 = d3 - d2;

        d1 = r0.<org.apache.commons.math3.distribution.GammaDistribution: double shiftedShape>;

        d1 = d2 / d1;

        d2 = r0.<org.apache.commons.math3.distribution.GammaDistribution: double shape>;

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double log1p(double)>(d1);

        d1 = $d4 - d1;

        d2 = d2 * d1;

        d3 = neg d3;

        d3 = d3 * 5.2421875;

        d1 = r0.<org.apache.commons.math3.distribution.GammaDistribution: double shiftedShape>;

        d3 = d3 / d1;

        d3 = d3 + 4.7421875;

        d3 = d3 + d2;

        d2 = r0.<org.apache.commons.math3.distribution.GammaDistribution: double densityPrefactor2>;

        $d0 = d2 / $d0;

        d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>(d3);

        $d0 = $d0 * d3;

        return $d0;

     label3:
        $d0 = r0.<org.apache.commons.math3.distribution.GammaDistribution: double densityPrefactor1>;

        d2 = neg d3;

        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>(d2);

        $d0 = $d0 * d2;

        d2 = r0.<org.apache.commons.math3.distribution.GammaDistribution: double shape>;

        d2 = d2 - 1.0;

        d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,double)>(d3, d2);

        $d0 = $d0 * d3;

        return $d0;
    }
    public double getAlpha()
    {
        org.apache.commons.math3.distribution.GammaDistribution r0;
        double d0;

        r0 := @this: org.apache.commons.math3.distribution.GammaDistribution;

        d0 = r0.<org.apache.commons.math3.distribution.GammaDistribution: double shape>;

        return d0;
    }
    public double getBeta()
    {
        org.apache.commons.math3.distribution.GammaDistribution r0;
        double d0;

        r0 := @this: org.apache.commons.math3.distribution.GammaDistribution;

        d0 = r0.<org.apache.commons.math3.distribution.GammaDistribution: double scale>;

        return d0;
    }
    public double getNumericalMean()
    {
        org.apache.commons.math3.distribution.GammaDistribution r0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.distribution.GammaDistribution;

        $d1 = r0.<org.apache.commons.math3.distribution.GammaDistribution: double shape>;

        $d0 = r0.<org.apache.commons.math3.distribution.GammaDistribution: double scale>;

        $d0 = $d1 * $d0;

        return $d0;
    }
    public double getNumericalVariance()
    {
        org.apache.commons.math3.distribution.GammaDistribution r0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.distribution.GammaDistribution;

        $d0 = r0.<org.apache.commons.math3.distribution.GammaDistribution: double shape>;

        $d1 = r0.<org.apache.commons.math3.distribution.GammaDistribution: double scale>;

        $d0 = $d0 * $d1;

        $d1 = r0.<org.apache.commons.math3.distribution.GammaDistribution: double scale>;

        $d0 = $d0 * $d1;

        return $d0;
    }
    public double getScale()
    {
        org.apache.commons.math3.distribution.GammaDistribution r0;
        double d0;

        r0 := @this: org.apache.commons.math3.distribution.GammaDistribution;

        d0 = r0.<org.apache.commons.math3.distribution.GammaDistribution: double scale>;

        return d0;
    }
    public double getShape()
    {
        org.apache.commons.math3.distribution.GammaDistribution r0;
        double d0;

        r0 := @this: org.apache.commons.math3.distribution.GammaDistribution;

        d0 = r0.<org.apache.commons.math3.distribution.GammaDistribution: double shape>;

        return d0;
    }
    protected double getSolverAbsoluteAccuracy()
    {
        org.apache.commons.math3.distribution.GammaDistribution r0;
        double d0;

        r0 := @this: org.apache.commons.math3.distribution.GammaDistribution;

        d0 = r0.<org.apache.commons.math3.distribution.GammaDistribution: double solverAbsoluteAccuracy>;

        return d0;
    }
    public double getSupportLowerBound()
    {
        org.apache.commons.math3.distribution.GammaDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.GammaDistribution;

        return 0.0;
    }
    public double getSupportUpperBound()
    {
        org.apache.commons.math3.distribution.GammaDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.GammaDistribution;

        return #Infinity;
    }
    public boolean isSupportConnected()
    {
        org.apache.commons.math3.distribution.GammaDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.GammaDistribution;

        return 1;
    }
    public boolean isSupportLowerBoundInclusive()
    {
        org.apache.commons.math3.distribution.GammaDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.GammaDistribution;

        return 1;
    }
    public boolean isSupportUpperBoundInclusive()
    {
        org.apache.commons.math3.distribution.GammaDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.GammaDistribution;

        return 0;
    }
    public double logDensity(double)
    {
        org.apache.commons.math3.distribution.GammaDistribution r0;
        double $d0, d1, d2, d3, $d4;
        byte $b0;

        r0 := @this: org.apache.commons.math3.distribution.GammaDistribution;

        $d0 := @parameter0: double;

        $b0 = $d0 cmpg 0.0;

        if $b0 >= 0 goto label1;

        return #-Infinity;

     label1:
        d3 = r0.<org.apache.commons.math3.distribution.GammaDistribution: double scale>;

        d3 = $d0 / d3;

        d2 = r0.<org.apache.commons.math3.distribution.GammaDistribution: double minY>;

        $b0 = d3 cmpg d2;

        if $b0 <= 0 goto label2;

        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(d3);

        d1 = r0.<org.apache.commons.math3.distribution.GammaDistribution: double maxLogY>;

        $b0 = d2 cmpl d1;

        if $b0 < 0 goto label3;

     label2:
        d2 = r0.<org.apache.commons.math3.distribution.GammaDistribution: double shiftedShape>;

        d2 = d3 - d2;

        d1 = r0.<org.apache.commons.math3.distribution.GammaDistribution: double shiftedShape>;

        d1 = d2 / d1;

        d2 = r0.<org.apache.commons.math3.distribution.GammaDistribution: double shape>;

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double log1p(double)>(d1);

        d1 = $d4 - d1;

        d2 = d2 * d1;

        d3 = neg d3;

        d3 = d3 * 5.2421875;

        d1 = r0.<org.apache.commons.math3.distribution.GammaDistribution: double shiftedShape>;

        d3 = d3 / d1;

        d3 = d3 + 4.7421875;

        d3 = d3 + d2;

        d2 = r0.<org.apache.commons.math3.distribution.GammaDistribution: double logDensityPrefactor2>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d0);

        $d0 = d2 - $d0;

        $d0 = $d0 + d3;

        return $d0;

     label3:
        $d0 = r0.<org.apache.commons.math3.distribution.GammaDistribution: double logDensityPrefactor1>;

        $d0 = $d0 - d3;

        d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(d3);

        d2 = r0.<org.apache.commons.math3.distribution.GammaDistribution: double shape>;

        d2 = d2 - 1.0;

        d3 = d3 * d2;

        $d0 = $d0 + d3;

        return $d0;
    }
    public double sample()
    {
        org.apache.commons.math3.distribution.GammaDistribution r0;
        double d0, d1, d2, d3, $d4, $d5, $d6;
        byte $b0;
        org.apache.commons.math3.random.RandomGenerator $r1;

        r0 := @this: org.apache.commons.math3.distribution.GammaDistribution;

        d1 = r0.<org.apache.commons.math3.distribution.GammaDistribution: double shape>;

        $b0 = d1 cmpg 1.0;

        if $b0 >= 0 goto label3;

     label1:
        $r1 = r0.<org.apache.commons.math3.distribution.GammaDistribution: org.apache.commons.math3.random.RandomGenerator random>;

        d1 = interfaceinvoke $r1.<org.apache.commons.math3.random.RandomGenerator: double nextDouble()>();

        d0 = r0.<org.apache.commons.math3.distribution.GammaDistribution: double shape>;

        d0 = d0 / 2.718281828459045;

        d0 = 1.0 + d0;

        d1 = d0 * d1;

        $b0 = d1 cmpg 1.0;

        if $b0 > 0 goto label2;

        d0 = r0.<org.apache.commons.math3.distribution.GammaDistribution: double shape>;

        d0 = 1.0 / d0;

        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,double)>(d1, d0);

        $r1 = r0.<org.apache.commons.math3.distribution.GammaDistribution: org.apache.commons.math3.random.RandomGenerator random>;

        d0 = interfaceinvoke $r1.<org.apache.commons.math3.random.RandomGenerator: double nextDouble()>();

        d2 = neg d1;

        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>(d2);

        $b0 = d0 cmpl d2;

        if $b0 > 0 goto label1;

        d0 = r0.<org.apache.commons.math3.distribution.GammaDistribution: double scale>;

        d1 = d0 * d1;

        return d1;

     label2:
        d1 = d0 - d1;

        d0 = r0.<org.apache.commons.math3.distribution.GammaDistribution: double shape>;

        d1 = d1 / d0;

        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(d1);

        d1 = -1.0 * d1;

        $r1 = r0.<org.apache.commons.math3.distribution.GammaDistribution: org.apache.commons.math3.random.RandomGenerator random>;

        d0 = interfaceinvoke $r1.<org.apache.commons.math3.random.RandomGenerator: double nextDouble()>();

        d2 = r0.<org.apache.commons.math3.distribution.GammaDistribution: double shape>;

        d2 = d2 - 1.0;

        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,double)>(d1, d2);

        $b0 = d0 cmpl d2;

        if $b0 > 0 goto label1;

        d0 = r0.<org.apache.commons.math3.distribution.GammaDistribution: double scale>;

        d1 = d0 * d1;

        return d1;

     label3:
        d1 = r0.<org.apache.commons.math3.distribution.GammaDistribution: double shape>;

        d1 = d1 - 0.3333333333333333;

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d1);

        d0 = 3.0 * d0;

        d0 = 1.0 / d0;

     label4:
        $r1 = r0.<org.apache.commons.math3.distribution.GammaDistribution: org.apache.commons.math3.random.RandomGenerator random>;

        $d4 = interfaceinvoke $r1.<org.apache.commons.math3.random.RandomGenerator: double nextGaussian()>();

        d2 = d0 * $d4;

        d2 = 1.0 + d2;

        d3 = d0 * $d4;

        d3 = 1.0 + d3;

        d2 = d2 * d3;

        d3 = d0 * $d4;

        d3 = 1.0 + d3;

        d2 = d2 * d3;

        $b0 = d2 cmpg 0.0;

        if $b0 <= 0 goto label4;

        d3 = $d4 * $d4;

        $r1 = r0.<org.apache.commons.math3.distribution.GammaDistribution: org.apache.commons.math3.random.RandomGenerator random>;

        $d4 = interfaceinvoke $r1.<org.apache.commons.math3.random.RandomGenerator: double nextDouble()>();

        $d5 = 0.0331 * d3;

        $d5 = $d5 * d3;

        $d5 = 1.0 - $d5;

        $b0 = $d4 cmpg $d5;

        if $b0 >= 0 goto label5;

        d0 = r0.<org.apache.commons.math3.distribution.GammaDistribution: double scale>;

        d1 = d0 * d1;

        d1 = d1 * d2;

        return d1;

     label5:
        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d4);

        d3 = 0.5 * d3;

        $d5 = 1.0 - d2;

        $d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(d2);

        $d5 = $d5 + $d6;

        $d5 = $d5 * d1;

        d3 = d3 + $d5;

        $b0 = $d4 cmpg d3;

        if $b0 >= 0 goto label4;

        d0 = r0.<org.apache.commons.math3.distribution.GammaDistribution: double scale>;

        d1 = d0 * d1;

        d1 = d1 * d2;

        return d1;
    }
