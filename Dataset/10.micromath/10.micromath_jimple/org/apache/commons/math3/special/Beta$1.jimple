org.apache.commons.math3.special.Beta$1 extends org.apache.commons.math3.util.ContinuedFraction
final double val$a
final double val$b
    void <init>(double, double)
    {
        org.apache.commons.math3.special.Beta$1 r0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.special.Beta$1;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        r0.<org.apache.commons.math3.special.Beta$1: double val$b> = $d0;

        r0.<org.apache.commons.math3.special.Beta$1: double val$a> = $d1;

        specialinvoke r0.<org.apache.commons.math3.util.ContinuedFraction: void <init>()>();

        return;
    }
    protected double getA(int, double)
    {
        org.apache.commons.math3.special.Beta$1 r0;
        int $i0;
        double $d0;

        r0 := @this: org.apache.commons.math3.special.Beta$1;

        $i0 := @parameter0: int;

        $d0 := @parameter1: double;

        return 1.0;
    }
    protected double getB(int, double)
    {
        org.apache.commons.math3.special.Beta$1 r0;
        int $i0, $i1;
        double $d0, $d1, $d2, $d3, $d4;

        r0 := @this: org.apache.commons.math3.special.Beta$1;

        $i0 := @parameter0: int;

        $d0 := @parameter1: double;

        $i1 = $i0 % 2;

        if $i1 != 0 goto label1;

        $d1 = (double) $i0;

        $d1 = $d1 / 2.0;

        $d2 = r0.<org.apache.commons.math3.special.Beta$1: double val$b>;

        $d2 = $d2 - $d1;

        $d2 = $d2 * $d1;

        $d0 = $d2 * $d0;

        $d2 = r0.<org.apache.commons.math3.special.Beta$1: double val$a>;

        $d3 = 2.0 * $d1;

        $d2 = $d2 + $d3;

        $d2 = $d2 - 1.0;

        $d3 = r0.<org.apache.commons.math3.special.Beta$1: double val$a>;

        $d1 = 2.0 * $d1;

        $d1 = $d3 + $d1;

        $d1 = $d2 * $d1;

        $d0 = $d0 / $d1;

        return $d0;

     label1:
        $d1 = (double) $i0;

        $d1 = $d1 - 1.0;

        $d1 = $d1 / 2.0;

        $d2 = r0.<org.apache.commons.math3.special.Beta$1: double val$a>;

        $d2 = $d2 + $d1;

        $d3 = r0.<org.apache.commons.math3.special.Beta$1: double val$a>;

        $d4 = r0.<org.apache.commons.math3.special.Beta$1: double val$b>;

        $d3 = $d3 + $d4;

        $d3 = $d3 + $d1;

        $d2 = $d2 * $d3;

        $d0 = $d2 * $d0;

        $d0 = neg $d0;

        $d2 = r0.<org.apache.commons.math3.special.Beta$1: double val$a>;

        $d3 = 2.0 * $d1;

        $d2 = $d2 + $d3;

        $d3 = r0.<org.apache.commons.math3.special.Beta$1: double val$a>;

        $d1 = 2.0 * $d1;

        $d1 = $d3 + $d1;

        $d1 = $d1 + 1.0;

        $d1 = $d2 * $d1;

        $d0 = $d0 / $d1;

        return $d0;
    }
