org.apache.commons.math3.special.BesselJ extends java.lang.Object implements org.apache.commons.math3.analysis.UnivariateFunction
private static final double ENMTEN
private static final double ENSIG
private static final double ENTEN
private static final double[] FACT
private static final double PI2
private static final double RTNSIG
private static final double TOWPI1
private static final double TWOPI
private static final double TWOPI2
private static final double X_MAX
private static final double X_MIN
private final double order
    static void <clinit>()
    {
        double[] $r0;

        $r0 = newarray (double)[25];

        $r0[0] = 1.0;

        $r0[1] = 1.0;

        $r0[2] = 2.0;

        $r0[3] = 6.0;

        $r0[4] = 24.0;

        $r0[5] = 120.0;

        $r0[6] = 720.0;

        $r0[7] = 5040.0;

        $r0[8] = 40320.0;

        $r0[9] = 362880.0;

        $r0[10] = 3628800.0;

        $r0[11] = 3.99168E7;

        $r0[12] = 4.790016E8;

        $r0[13] = 6.2270208E9;

        $r0[14] = 8.71782912E10;

        $r0[15] = 1.307674368E12;

        $r0[16] = 2.0922789888E13;

        $r0[17] = 3.55687428096E14;

        $r0[18] = 6.402373705728E15;

        $r0[19] = 1.21645100408832E17;

        $r0[20] = 2.43290200817664E18;

        $r0[21] = 5.109094217170944E19;

        $r0[22] = 1.1240007277776077E21;

        $r0[23] = 2.585201673888498E22;

        $r0[24] = 6.204484017332394E23;

        <org.apache.commons.math3.special.BesselJ: double[] FACT> = $r0;

        return;
    }
    public void <init>(double)
    {
        org.apache.commons.math3.special.BesselJ r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.special.BesselJ;

        $d0 := @parameter0: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.special.BesselJ: double order> = $d0;

        return;
    }
    public static org.apache.commons.math3.special.BesselJ$BesselJResult rjBesl(double, double, int)
    {
        double $d0, $d1, d2, d3, d4, $d5, d6, d7, $d8, $d9, $d10, d11, $d12, $d13, $d14;
        int $i0, i1, $i2, i4, i5, $i6, $i7, $i8;
        double[] r0, $r1;
        byte $b3;
        boolean z0, z1;
        org.apache.commons.math3.special.BesselJ$BesselJResult $r2;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $i0 := @parameter2: int;

        r0 = newarray (double)[$i0];

        $i2 = (int) $d0;

        if $i0 <= 0 goto label57;

        $b3 = $d0 cmpl 0.0;

        if $b3 < 0 goto label57;

        $b3 = $d0 cmpg 10000.0;

        if $b3 > 0 goto label57;

        $b3 = $d1 cmpl 0.0;

        if $b3 < 0 goto label57;

        $b3 = $d1 cmpg 1.0;

        if $b3 >= 0 goto label57;

        i4 = $i0;

        i5 = 0;

     label01:
        if i5 >= $i0 goto label02;

        r0[i5] = 0.0;

        i5 = i5 + 1;

        goto label01;

     label02:
        $b3 = $d0 cmpg 1.0E-4;

        if $b3 >= 0 goto label14;

        d2 = 1.0;

        d6 = 1.0 + $d1;

        d3 = 0.0;

        $b3 = $d0 cmpl 8.9E-308;

        if $b3 <= 0 goto label03;

        d3 = 0.5 * $d0;

     label03:
        $b3 = $d1 cmpl 0.0;

        if $b3 == 0 goto label04;

        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,double)>(d3, $d1);

        $d5 = staticinvoke <org.apache.commons.math3.special.Gamma: double gamma(double)>($d1);

        $d1 = $d5 * $d1;

        d2 = d2 / $d1;

     label04:
        $d1 = 0.0;

        $d5 = 1.0 + $d0;

        $b3 = $d5 cmpl 1.0;

        if $b3 <= 0 goto label05;

        $d1 = neg d3;

        $d1 = $d1 * d3;

     label05:
        $d5 = d2 * $d1;

        $d5 = $d5 / d6;

        $d5 = $d5 + d2;

        r0[0] = $d5;

        $b3 = $d0 cmpl 0.0;

        if $b3 == 0 goto label06;

        $d5 = r0[0];

        $b3 = $d5 cmpl 0.0;

        if $b3 != 0 goto label06;

        i4 = 0;

     label06:
        if $i0 == 1 goto label59;

        $b3 = $d0 cmpg 0.0;

        if $b3 > 0 goto label08;

        i5 = 1;

     label07:
        if i5 >= $i0 goto label59;

        r0[i5] = 0.0;

        i5 = i5 + 1;

        goto label07;

     label08:
        $b3 = $d1 cmpl 0.0;

        if $b3 == 0 goto label13;

        $d0 = 8.9E-308 / $d1;

     label09:
        i5 = 1;

     label10:
        if i5 >= $i0 goto label59;

        d2 = d2 / d6;

        d6 = d6 + 1.0;

        d2 = d2 * d3;

        $d5 = $d0 * d6;

        $b3 = d2 cmpg $d5;

        if $b3 > 0 goto label11;

        d2 = 0.0;

     label11:
        $d5 = d2 * $d1;

        $d5 = $d5 / d6;

        $d5 = $d5 + d2;

        r0[i5] = $d5;

        $d5 = r0[i5];

        $b3 = $d5 cmpl 0.0;

        if $b3 != 0 goto label12;

        if i4 <= i5 goto label12;

        i4 = i5;

     label12:
        i5 = i5 + 1;

        goto label10;

     label13:
        $d0 = 1.78E-307 / $d0;

        goto label09;

     label14:
        $b3 = $d0 cmpl 25.0;

        if $b3 <= 0 goto label24;

        i5 = $i2 + 1;

        if $i0 > i5 goto label24;

        d6 = 0.6366197723675814 / $d0;

        d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d6);

        d2 = 0.125 / $d0;

        d2 = d2 * d2;

        $b3 = $d0 cmpl 130.0;

        if $b3 < 0 goto label18;

        $b3 = 4;

     label15:
        d3 = (double) $b3;

        d3 = 4.0 * d3;

        $d5 = $d0 / 6.283185307179586;

        $d5 = $d5 + 0.5;

        i5 = (int) $d5;

        $d5 = (double) i5;

        d4 = 6.28125 * $d5;

        d4 = $d0 - d4;

        $d5 = 0.001935307179586477 * $d5;

        $d5 = d4 - $d5;

        d4 = 0.5 + $d1;

        d4 = d4 / 0.6366197723675814;

        d4 = $d5 - d4;

        $d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double sin(double)>(d4);

        d7 = staticinvoke <org.apache.commons.math3.util.FastMath: double cos(double)>(d4);

        d4 = 2.0 * $d1;

        i5 = 1;

     label16:
        if i5 > 2 goto label22;

        $d8 = d3 - 1.0;

        $d8 = $d8 - d4;

        $d9 = d3 - 1.0;

        $d9 = $d9 + d4;

        $d8 = $d8 * $d9;

        $d8 = $d8 * d2;

        $d9 = $d8 * 0.5;

        $d8 = d3 - 3.0;

        $d8 = d4 - $d8;

        $d10 = d3 - 3.0;

        $d10 = $d10 + d4;

        d11 = $d8 * $d10;

        $d8 = $d9 * d11;

        $r1 = <org.apache.commons.math3.special.BesselJ: double[] FACT>;

        $i2 = $b3 * 2;

        $d10 = $r1[$i2];

        $d8 = $d8 / $d10;

        $d10 = 1.0 + d3;

        $d10 = d4 - $d10;

        $d12 = 1.0 + d3;

        $d12 = $d12 + d4;

        $d10 = $d10 * $d12;

        $d9 = $d9 * $d10;

        $r1 = <org.apache.commons.math3.special.BesselJ: double[] FACT>;

        $i2 = $b3 * 2;

        $i2 = $i2 + 1;

        $d10 = $r1[$i2];

        $d10 = $d9 / $d10;

        $d9 = d3;

        $i2 = $b3 * 2;

        i1 = 2;

     label17:
        if i1 > $b3 goto label20;

        $d9 = $d9 - 4.0;

        $d12 = $d9 - 1.0;

        $d12 = $d12 - d4;

        $d13 = $d9 - 1.0;

        $d13 = $d13 + d4;

        $d12 = $d12 * $d13;

        $d13 = $d9 - 3.0;

        $d13 = d4 - $d13;

        $d14 = $d9 - 3.0;

        $d14 = $d14 + d4;

        $d13 = $d13 * $d14;

        $r1 = <org.apache.commons.math3.special.BesselJ: double[] FACT>;

        $i6 = $i2 + -2;

        $d14 = $r1[$i6];

        $d14 = 1.0 / $d14;

        $d8 = $d14 + $d8;

        $d8 = $d8 * $d12;

        $d8 = $d8 * $d13;

        $d8 = $d8 * d2;

        $r1 = <org.apache.commons.math3.special.BesselJ: double[] FACT>;

        $i6 = $i2 + -1;

        $d14 = $r1[$i6];

        $d14 = 1.0 / $d14;

        $d10 = $d14 + $d10;

        $d10 = $d10 * $d12;

        $d10 = $d10 * d11;

        $d10 = $d10 * d2;

        $i2 = $i2 + -2;

        d11 = $d13;

        i1 = i1 + 1;

        goto label17;

     label18:
        $b3 = $d0 cmpl 35.0;

        if $b3 < 0 goto label19;

        $b3 = 8;

        goto label15;

     label19:
        $b3 = 11;

        goto label15;

     label20:
        $d8 = $d8 + 1.0;

        $d9 = 1.0 + $d10;

        $d10 = d4 * d4;

        $d10 = $d10 - 1.0;

        $d9 = $d9 * $d10;

        $d10 = 0.125 / $d0;

        $d9 = $d9 * $d10;

        $i2 = i5 + -1;

        $d8 = $d8 * d7;

        $d9 = $d9 * $d5;

        $d8 = $d8 - $d9;

        $d8 = $d8 * d6;

        r0[$i2] = $d8;

        if $i0 != 1 goto label21;

        $r2 = new org.apache.commons.math3.special.BesselJ$BesselJResult;

        i4 = lengthof r0;

        r0 = staticinvoke <org.apache.commons.math3.util.MathArrays: double[] copyOf(double[],int)>(r0, i4);

        specialinvoke $r2.<org.apache.commons.math3.special.BesselJ$BesselJResult: void <init>(double[],int)>(r0, $i0);

        return $r2;

     label21:
        $d8 = $d5;

        $d5 = neg d7;

        d7 = $d8;

        d4 = d4 + 2.0;

        i5 = i5 + 1;

        goto label16;

     label22:
        if $i0 <= 2 goto label59;

        $d1 = 2.0 * $d1;

        $d1 = $d1 + 2.0;

        i5 = 2;

     label23:
        if i5 >= $i0 goto label59;

        $i2 = i5 + -1;

        d6 = r0[$i2];

        d6 = d6 * $d1;

        d6 = d6 / $d0;

        $i2 = i5 + -2;

        d2 = r0[$i2];

        d6 = d6 - d2;

        r0[i5] = d6;

        $d1 = $d1 + 2.0;

        i5 = i5 + 1;

        goto label23;

     label24:
        i1 = $i0 - $i2;

        i5 = $i2 + 1;

        d6 = (double) i5;

        d6 = d6 + $d1;

        d2 = 2.0 * d6;

        d6 = 1.0;

        $d5 = d2 / $d0;

        d3 = 2.0E16;

        z0 = 0;

        if i1 < 3 goto label30;

        i1 = $i2 + 2;

        $i2 = $i0 + -1;

        $i6 = i1 + -1;

        d2 = (double) $i6;

        d2 = d2 + $d1;

        d2 = 2.0 * d2;

     label25:
        if i1 > $i2 goto label29;

        i5 = i1;

        d2 = d2 + 2.0;

        d4 = d6;

        d6 = $d5;

        $d5 = d2 * $d5;

        $d5 = $d5 / $d0;

        $d5 = $d5 - d4;

        $b3 = $d5 cmpl 1.0E292;

        if $b3 <= 0 goto label42;

        $d5 = $d5 / 1.0E308;

        d6 = d6 / 1.0E308;

        d7 = $d5;

        d4 = d6;

        i1 = i1 + 1;

     label26:
        i5 = i5 + 1;

        d2 = d2 + 2.0;

        d3 = d6;

        d6 = $d5;

        $d5 = d2 * $d5;

        $d5 = $d5 / $d0;

        $d5 = $d5 - d3;

        $b3 = $d5 cmpg 1.0;

        if $b3 <= 0 goto label26;

        $d5 = d2 / $d0;

        d3 = d3 * d6;

        $d5 = $d5 * $d5;

        $d5 = 0.5 / $d5;

        $d5 = 0.5 - $d5;

        d3 = d3 * $d5;

        d3 = d3 / 1.0E16;

        $d5 = d6 * 1.0E308;

        i5 = i5 + -1;

        d2 = d2 - 2.0;

        i4 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i0, i5);

        $i2 = i4;

     label27:
        if i1 > i4 goto label28;

        $d8 = d4;

        d4 = d7;

        d7 = d2 * d7;

        d7 = d7 / $d0;

        d7 = d7 - $d8;

        $d8 = d7 * d4;

        $b3 = $d8 cmpl d3;

        if $b3 <= 0 goto label41;

     label28:
        z0 = 1;

     label29:
        if z0 != 0 goto label30;

        i5 = $i2;

        d2 = (double) $i2;

        d2 = d2 + $d1;

        d2 = 2.0 * d2;

        d4 = 1.0E16 * d6;

        d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d4);

        d7 = 2.0 * $d5;

        d7 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d7);

        d4 = d4 * d7;

        d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>(d3, d4);

     label30:
        if z0 != 0 goto label32;

     label31:
        i5 = i5 + 1;

        d2 = d2 + 2.0;

        d4 = d6;

        d6 = $d5;

        $d5 = d2 * $d5;

        $d5 = $d5 / $d0;

        $d5 = $d5 - d4;

        $b3 = $d5 cmpg d3;

        if $b3 < 0 goto label31;

     label32:
        i5 = i5 + 1;

        d3 = d2 + 2.0;

        d4 = 0.0;

        $d5 = 1.0 / $d5;

        $i2 = i5 * 2;

        i1 = i5 / 2;

        i1 = i1 * 4;

        $i2 = $i2 - i1;

        d6 = 0.0;

        i1 = i5 / 2;

        d2 = (double) i1;

        d7 = d2 - 1.0;

        d7 = d7 + $d1;

        $d8 = 2.0 * d2;

        $d8 = $d8 + $d1;

        if $i2 == 0 goto label33;

        d6 = $d5 * d7;

        d6 = d6 * $d8;

        d6 = d6 / d2;

     label33:
        i1 = i5 - $i0;

        z0 = 0;

        z1 = 0;

        $i6 = 1;

     label34:
        if $i6 > i1 goto label35;

        i5 = i5 + -1;

        d3 = d3 - 2.0;

        d7 = d4;

        d4 = $d5;

        $d5 = d3 * $d5;

        $d5 = $d5 / $d0;

        $d5 = $d5 - d7;

        $i2 = 2 - $i2;

        if $i2 == 0 goto label45;

        d2 = d2 - 1.0;

        d7 = 2.0 * d2;

        $d8 = d7 + $d1;

        if i5 != 1 goto label43;

     label35:
        $i6 = i5 + -1;

        r0[$i6] = $d5;

        if i1 < 0 goto label37;

        if $i0 > 1 goto label46;

        $d5 = $d1;

        d4 = 1.0 + $d1;

        $b3 = d4 cmpl 1.0;

        if $b3 != 0 goto label36;

        $d5 = 1.0;

     label36:
        d4 = r0[0];

        $d5 = d4 * $d5;

        d6 = d6 + $d5;

        z0 = 1;

     label37:
        if z0 != 0 goto label49;

        if z1 != 0 goto label49;

        i1 = i5 + -2;

        if i1 == 0 goto label49;

        $i6 = 1;

     label38:
        if $i6 > i1 goto label49;

        i5 = i5 + -1;

        d3 = d3 - 2.0;

        $i7 = i5 + -1;

        $d5 = r0[i5];

        $d5 = $d5 * d3;

        $d5 = $d5 / $d0;

        $i8 = i5 + 1;

        d4 = r0[$i8];

        $d5 = $d5 - d4;

        r0[$i7] = $d5;

        $i2 = 2 - $i2;

        if $i2 == 0 goto label40;

        d2 = d2 - 1.0;

        $d5 = 2.0 * d2;

        d4 = $d5 + $d1;

        $d5 = d2 - 1.0;

        $d5 = $d5 + $d1;

        $b3 = $d5 cmpl 0.0;

        if $b3 != 0 goto label39;

        $d5 = 1.0;

     label39:
        $i7 = i5 + -1;

        d7 = r0[$i7];

        d4 = d7 * d4;

        d6 = d4 + d6;

        d6 = d6 * $d5;

        d6 = d6 / d2;

     label40:
        $i6 = $i6 + 1;

        goto label38;

     label41:
        i1 = i1 + 1;

        goto label27;

     label42:
        i1 = i1 + 1;

        goto label25;

     label43:
        d7 = d2 - 1.0;

        d7 = d7 + $d1;

        $b3 = d7 cmpl 0.0;

        if $b3 != 0 goto label44;

        d7 = 1.0;

     label44:
        $d8 = $d5 * $d8;

        d6 = $d8 + d6;

        d6 = d6 * d7;

        d6 = d6 / d2;

     label45:
        $i6 = $i6 + 1;

        goto label34;

     label46:
        i5 = i5 + -1;

        d3 = d3 - 2.0;

        i1 = i5 + -1;

        $d5 = d3 * $d5;

        $d5 = $d5 / $d0;

        $d5 = $d5 - d4;

        r0[i1] = $d5;

        if i5 != 1 goto label47;

        z1 = 1;

        goto label37;

     label47:
        $i2 = 2 - $i2;

        if $i2 == 0 goto label37;

        d2 = d2 - 1.0;

        $d5 = 2.0 * d2;

        d4 = $d5 + $d1;

        $d5 = d2 - 1.0;

        $d5 = $d5 + $d1;

        $b3 = $d5 cmpl 0.0;

        if $b3 != 0 goto label48;

        $d5 = 1.0;

     label48:
        i1 = i5 + -1;

        d7 = r0[i1];

        d4 = d7 * d4;

        d6 = d4 + d6;

        d6 = d6 * $d5;

        d6 = d6 / d2;

        goto label37;

     label49:
        if z0 != 0 goto label52;

        if z1 != 0 goto label50;

        d3 = 1.0 + $d1;

        d3 = 2.0 * d3;

        $d5 = r0[1];

        d3 = d3 * $d5;

        d3 = d3 / $d0;

        $d5 = r0[2];

        d3 = d3 - $d5;

        r0[0] = d3;

     label50:
        d2 = d2 - 1.0;

        d2 = 2.0 * d2;

        d2 = d2 + $d1;

        $b3 = d2 cmpl 0.0;

        if $b3 != 0 goto label51;

        d2 = 1.0;

     label51:
        d3 = r0[0];

        d2 = d3 * d2;

        d6 = d6 + d2;

     label52:
        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d1);

        $b3 = d2 cmpl 1.0E-16;

        if $b3 <= 0 goto label53;

        d2 = staticinvoke <org.apache.commons.math3.special.Gamma: double gamma(double)>($d1);

        $d0 = 0.5 * $d0;

        $d1 = neg $d1;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,double)>($d0, $d1);

        $d0 = d2 * $d0;

        d6 = d6 * $d0;

     label53:
        $d0 = 8.9E-308;

        $b3 = d6 cmpl 1.0;

        if $b3 <= 0 goto label54;

        $d0 = 8.9E-308 * d6;

     label54:
        i5 = 0;

     label55:
        if i5 >= $i0 goto label59;

        $d1 = r0[i5];

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d1);

        $b3 = $d1 cmpg $d0;

        if $b3 >= 0 goto label56;

        r0[i5] = 0.0;

     label56:
        $d1 = r0[i5];

        $d1 = $d1 / d6;

        r0[i5] = $d1;

        i5 = i5 + 1;

        goto label55;

     label57:
        i4 = lengthof r0;

        if i4 <= 0 goto label58;

        $d0 = (double) 0L;

        r0[0] = $d0;

     label58:
        $i0 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i0, 0);

        i4 = $i0 + -1;

     label59:
        $r2 = new org.apache.commons.math3.special.BesselJ$BesselJResult;

        $i0 = lengthof r0;

        r0 = staticinvoke <org.apache.commons.math3.util.MathArrays: double[] copyOf(double[],int)>(r0, $i0);

        specialinvoke $r2.<org.apache.commons.math3.special.BesselJ$BesselJResult: void <init>(double[],int)>(r0, i4);

        return $r2;
    }
    public static double value(double, double) throws org.apache.commons.math3.exception.MathIllegalArgumentException, org.apache.commons.math3.exception.ConvergenceException
    {
        double $d0, $d1, d2;
        int i0, i1, $i2;
        org.apache.commons.math3.special.BesselJ$BesselJResult $r0;
        double[] $r1;
        org.apache.commons.math3.exception.MathIllegalArgumentException $r2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3;
        java.lang.Object[] $r4;
        java.lang.Double $r5;
        byte $b3;
        org.apache.commons.math3.exception.ConvergenceException $r6;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        i0 = (int) $d0;

        d2 = (double) i0;

        d2 = $d0 - d2;

        i1 = i0 + 1;

        $r0 = staticinvoke <org.apache.commons.math3.special.BesselJ: org.apache.commons.math3.special.BesselJ$BesselJResult rjBesl(double,double,int)>($d1, d2, i1);

        $i2 = staticinvoke <org.apache.commons.math3.special.BesselJ$BesselJResult: int access$000(org.apache.commons.math3.special.BesselJ$BesselJResult)>($r0);

        if $i2 < i1 goto label1;

        $r1 = staticinvoke <org.apache.commons.math3.special.BesselJ$BesselJResult: double[] access$100(org.apache.commons.math3.special.BesselJ$BesselJResult)>($r0);

        $d0 = $r1[i0];

        return $d0;

     label1:
        i1 = staticinvoke <org.apache.commons.math3.special.BesselJ$BesselJResult: int access$000(org.apache.commons.math3.special.BesselJ$BesselJResult)>($r0);

        if i1 >= 0 goto label2;

        $r2 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats BESSEL_FUNCTION_BAD_ARGUMENT>;

        $r4 = newarray (java.lang.Object)[2];

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r4[0] = $r5;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        $r4[1] = $r5;

        specialinvoke $r2.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r3, $r4);

        throw $r2;

     label2:
        $r1 = staticinvoke <org.apache.commons.math3.special.BesselJ$BesselJResult: double[] access$100(org.apache.commons.math3.special.BesselJ$BesselJResult)>($r0);

        i1 = staticinvoke <org.apache.commons.math3.special.BesselJ$BesselJResult: int access$000(org.apache.commons.math3.special.BesselJ$BesselJResult)>($r0);

        i1 = i1 + -1;

        d2 = $r1[i1];

        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d2);

        $b3 = d2 cmpg 1.0E-100;

        if $b3 >= 0 goto label3;

        $r1 = staticinvoke <org.apache.commons.math3.special.BesselJ$BesselJResult: double[] access$100(org.apache.commons.math3.special.BesselJ$BesselJResult)>($r0);

        $d0 = $r1[i0];

        return $d0;

     label3:
        $r6 = new org.apache.commons.math3.exception.ConvergenceException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats BESSEL_FUNCTION_FAILED_CONVERGENCE>;

        $r4 = newarray (java.lang.Object)[2];

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r4[0] = $r5;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        $r4[1] = $r5;

        specialinvoke $r6.<org.apache.commons.math3.exception.ConvergenceException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r3, $r4);

        throw $r6;
    }
    public double value(double) throws org.apache.commons.math3.exception.MathIllegalArgumentException, org.apache.commons.math3.exception.ConvergenceException
    {
        org.apache.commons.math3.special.BesselJ r0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.special.BesselJ;

        $d0 := @parameter0: double;

        $d1 = r0.<org.apache.commons.math3.special.BesselJ: double order>;

        $d0 = staticinvoke <org.apache.commons.math3.special.BesselJ: double value(double,double)>($d1, $d0);

        return $d0;
    }
