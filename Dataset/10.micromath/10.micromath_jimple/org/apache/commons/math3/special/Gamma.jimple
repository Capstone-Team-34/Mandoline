org.apache.commons.math3.special.Gamma extends java.lang.Object
private static final double C_LIMIT
private static final double DEFAULT_EPSILON
public static final double GAMMA
private static final double HALF_LOG_2_PI
private static final double INV_GAMMA1P_M1_A0
private static final double INV_GAMMA1P_M1_A1
private static final double INV_GAMMA1P_M1_B1
private static final double INV_GAMMA1P_M1_B2
private static final double INV_GAMMA1P_M1_B3
private static final double INV_GAMMA1P_M1_B4
private static final double INV_GAMMA1P_M1_B5
private static final double INV_GAMMA1P_M1_B6
private static final double INV_GAMMA1P_M1_B7
private static final double INV_GAMMA1P_M1_B8
private static final double INV_GAMMA1P_M1_C
private static final double INV_GAMMA1P_M1_C0
private static final double INV_GAMMA1P_M1_C1
private static final double INV_GAMMA1P_M1_C10
private static final double INV_GAMMA1P_M1_C11
private static final double INV_GAMMA1P_M1_C12
private static final double INV_GAMMA1P_M1_C13
private static final double INV_GAMMA1P_M1_C2
private static final double INV_GAMMA1P_M1_C3
private static final double INV_GAMMA1P_M1_C4
private static final double INV_GAMMA1P_M1_C5
private static final double INV_GAMMA1P_M1_C6
private static final double INV_GAMMA1P_M1_C7
private static final double INV_GAMMA1P_M1_C8
private static final double INV_GAMMA1P_M1_C9
private static final double INV_GAMMA1P_M1_P0
private static final double INV_GAMMA1P_M1_P1
private static final double INV_GAMMA1P_M1_P2
private static final double INV_GAMMA1P_M1_P3
private static final double INV_GAMMA1P_M1_P4
private static final double INV_GAMMA1P_M1_P5
private static final double INV_GAMMA1P_M1_P6
private static final double INV_GAMMA1P_M1_Q1
private static final double INV_GAMMA1P_M1_Q2
private static final double INV_GAMMA1P_M1_Q3
private static final double INV_GAMMA1P_M1_Q4
private static final double[] LANCZOS
public static final double LANCZOS_G
private static final double SQRT_TWO_PI
private static final double S_LIMIT
    static void <clinit>()
    {
        double $d0;
        double[] $r0;

        $r0 = newarray (double)[15];

        $r0[0] = 0.9999999999999971;

        $r0[1] = 57.15623566586292;

        $r0[2] = -59.59796035547549;

        $r0[3] = 14.136097974741746;

        $r0[4] = -0.4919138160976202;

        $r0[5] = 3.399464998481189E-5;

        $r0[6] = 4.652362892704858E-5;

        $r0[7] = -9.837447530487956E-5;

        $r0[8] = 1.580887032249125E-4;

        $r0[9] = -2.1026444172410488E-4;

        $r0[10] = 2.1743961811521265E-4;

        $r0[11] = -1.643181065367639E-4;

        $r0[12] = 8.441822398385275E-5;

        $r0[13] = -2.6190838401581408E-5;

        $r0[14] = 3.6899182659531625E-6;

        <org.apache.commons.math3.special.Gamma: double[] LANCZOS> = $r0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(6.283185307179586);

        $d0 = 0.5 * $d0;

        <org.apache.commons.math3.special.Gamma: double HALF_LOG_2_PI> = $d0;

        return;
    }
    private void <init>()
    {
        org.apache.commons.math3.special.Gamma r0;

        r0 := @this: org.apache.commons.math3.special.Gamma;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static double digamma(double)
    {
        double d0, d1, $d2;
        boolean $z0;
        byte $b0;

        d1 := @parameter0: double;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1);

        if $z0 != 0 goto label4;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d1);

        if $z0 == 0 goto label1;

        return d1;

     label1:
        $b0 = d1 cmpl 0.0;

        if $b0 <= 0 goto label2;

        $b0 = d1 cmpg 1.0E-5;

        if $b0 > 0 goto label2;

        d1 = 1.0 / d1;

        d1 = -0.5772156649015329 - d1;

        return d1;

     label2:
        $b0 = d1 cmpl 49.0;

        if $b0 < 0 goto label3;

        d0 = d1 * d1;

        d0 = 1.0 / d0;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(d1);

        d1 = 0.5 / d1;

        d1 = $d2 - d1;

        $d2 = d0 / 252.0;

        $d2 = 0.008333333333333333 - $d2;

        $d2 = $d2 * d0;

        $d2 = 0.08333333333333333 + $d2;

        d0 = $d2 * d0;

        d1 = d1 - d0;

        return d1;

     label3:
        d0 = d1 + 1.0;

        d0 = staticinvoke <org.apache.commons.math3.special.Gamma: double digamma(double)>(d0);

        d1 = 1.0 / d1;

        d1 = d0 - d1;

     label4:
        return d1;
    }
    public static double gamma(double)
    {
        double $d0, d1, d2, $d3, $d4;
        byte $b0;

        $d0 := @parameter0: double;

        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double rint(double)>($d0);

        $b0 = $d0 cmpl d1;

        if $b0 != 0 goto label1;

        $b0 = $d0 cmpg 0.0;

        if $b0 > 0 goto label1;

        return #NaN;

     label1:
        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        $b0 = d1 cmpg 20.0;

        if $b0 > 0 goto label7;

        $b0 = $d0 cmpl 1.0;

        if $b0 < 0 goto label4;

        d1 = 1.0;

     label2:
        $b0 = $d0 cmpl 2.5;

        if $b0 <= 0 goto label3;

        $d0 = $d0 - 1.0;

        d1 = d1 * $d0;

        goto label2;

     label3:
        $d0 = $d0 - 1.0;

        $d0 = staticinvoke <org.apache.commons.math3.special.Gamma: double invGamma1pm1(double)>($d0);

        $d0 = 1.0 + $d0;

        $d0 = d1 / $d0;

        return $d0;

     label4:
        d1 = $d0;

     label5:
        $b0 = $d0 cmpg -0.5;

        if $b0 >= 0 goto label6;

        $d0 = $d0 + 1.0;

        d1 = d1 * $d0;

        goto label5;

     label6:
        $d0 = staticinvoke <org.apache.commons.math3.special.Gamma: double invGamma1pm1(double)>($d0);

        $d0 = 1.0 + $d0;

        $d0 = $d0 * d1;

        $d0 = 1.0 / $d0;

        return $d0;

     label7:
        d2 = 4.7421875 + d1;

        d2 = d2 + 0.5;

        $d3 = 2.5066282746310007 / d1;

        $d4 = 0.5 + d1;

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,double)>(d2, $d4);

        $d3 = $d3 * $d4;

        d2 = neg d2;

        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>(d2);

        d2 = $d3 * d2;

        d1 = staticinvoke <org.apache.commons.math3.special.Gamma: double lanczos(double)>(d1);

        d1 = d2 * d1;

        $b0 = $d0 cmpl 0.0;

        if $b0 <= 0 goto label8;

        return d1;

     label8:
        d2 = 3.141592653589793 * $d0;

        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double sin(double)>(d2);

        $d0 = d2 * $d0;

        $d0 = $d0 * d1;

        $d0 = -3.141592653589793 / $d0;

        return $d0;
    }
    public static double invGamma1pm1(double)
    {
        double $d0, d1, d2, $d3;
        byte $b0;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r0;
        java.lang.Double $r1, $r2;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r3;

        $d0 := @parameter0: double;

        $b0 = $d0 cmpg -0.5;

        if $b0 >= 0 goto label1;

        $r0 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(-0.5);

        specialinvoke $r0.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r1, $r2, 1);

        throw $r0;

     label1:
        $b0 = $d0 cmpl 1.5;

        if $b0 <= 0 goto label2;

        $r3 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.5);

        specialinvoke $r3.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r1, $r2, 1);

        throw $r3;

     label2:
        $b0 = $d0 cmpg 0.5;

        if $b0 > 0 goto label4;

        d2 = $d0;

     label3:
        $b0 = d2 cmpg 0.0;

        if $b0 >= 0 goto label6;

        d1 = 6.247308301164655E-9 * d2;

        d1 = 6.116095104481416E-9 + d1;

        $d3 = d2 * 1.9575583661463974E-10;

        $d3 = -6.077618957228252E-8 + $d3;

        $d3 = d2 * $d3;

        $d3 = 9.926418406727737E-7 + $d3;

        $d3 = d2 * $d3;

        $d3 = -6.4304548177935305E-6 + $d3;

        $d3 = d2 * $d3;

        $d3 = -8.514194324403149E-6 + $d3;

        $d3 = d2 * $d3;

        $d3 = 4.939449793824468E-4 + $d3;

        $d3 = d2 * $d3;

        $d3 = 0.026620534842894922 + $d3;

        $d3 = d2 * $d3;

        $d3 = 0.203610414066807 + $d3;

        $d3 = d2 * $d3;

        $d3 = 1.0 + $d3;

        d1 = d1 / $d3;

        d1 = d1 * d2;

        d1 = -2.056338416977607E-7 + d1;

        d1 = d2 * d1;

        d1 = 1.133027231981696E-6 + d1;

        d1 = d2 * d1;

        d1 = -1.2504934821426706E-6 + d1;

        d1 = d2 * d1;

        d1 = -2.013485478078824E-5 + d1;

        d1 = d2 * d1;

        d1 = 1.280502823881162E-4 + d1;

        d1 = d2 * d1;

        d1 = -2.1524167411495098E-4 + d1;

        d1 = d2 * d1;

        d1 = -0.0011651675918590652 + d1;

        d1 = d2 * d1;

        d1 = 0.0072189432466631 + d1;

        d1 = d2 * d1;

        d1 = -0.009621971527876973 + d1;

        d1 = d2 * d1;

        d1 = -0.04219773455554433 + d1;

        d1 = d2 * d1;

        d1 = 0.16653861138229148 + d1;

        d1 = d2 * d1;

        d1 = -0.04200263503409524 + d1;

        d1 = d2 * d1;

        d1 = -0.6558780715202539 + d1;

        d1 = d2 * d1;

        d1 = -0.42278433509846713 + d1;

        $b0 = $d0 cmpl 0.5;

        if $b0 <= 0 goto label5;

        d2 = d2 * d1;

        $d0 = d2 / $d0;

        return $d0;

     label4:
        d2 = $d0 - 0.5;

        d2 = d2 - 0.5;

        goto label3;

     label5:
        d2 = 0.5 + d1;

        d2 = d2 + 0.5;

        $d0 = $d0 * d2;

        return $d0;

     label6:
        d1 = d2 * 4.343529937408594E-15;

        d1 = -1.2494415722763663E-13 + d1;

        d1 = d2 * d1;

        d1 = 1.5728330277104463E-12 + d1;

        d1 = d2 * d1;

        d1 = 4.686843322948848E-11 + d1;

        d1 = d2 * d1;

        d1 = 6.820161668496171E-10 + d1;

        d1 = d2 * d1;

        d1 = 6.8716741130671986E-9 + d1;

        d1 = d2 * d1;

        d1 = 6.116095104481416E-9 + d1;

        $d3 = d2 * 2.6923694661863613E-4;

        $d3 = 0.004956830093825887 + $d3;

        $d3 = d2 * $d3;

        $d3 = 0.054642130860422966 + $d3;

        $d3 = d2 * $d3;

        $d3 = 0.3056961078365221 + $d3;

        $d3 = d2 * $d3;

        $d3 = 1.0 + $d3;

        d1 = d1 / $d3;

        d1 = d1 * d2;

        d1 = -2.056338416977607E-7 + d1;

        d1 = d2 * d1;

        d1 = 1.133027231981696E-6 + d1;

        d1 = d2 * d1;

        d1 = -1.2504934821426706E-6 + d1;

        d1 = d2 * d1;

        d1 = -2.013485478078824E-5 + d1;

        d1 = d2 * d1;

        d1 = 1.280502823881162E-4 + d1;

        d1 = d2 * d1;

        d1 = -2.1524167411495098E-4 + d1;

        d1 = d2 * d1;

        d1 = -0.0011651675918590652 + d1;

        d1 = d2 * d1;

        d1 = 0.0072189432466631 + d1;

        d1 = d2 * d1;

        d1 = -0.009621971527876973 + d1;

        d1 = d2 * d1;

        d1 = -0.04219773455554433 + d1;

        d1 = d2 * d1;

        d1 = 0.16653861138229148 + d1;

        d1 = d2 * d1;

        d1 = -0.04200263503409524 + d1;

        d1 = d2 * d1;

        d1 = -0.6558780715202539 + d1;

        d1 = d2 * d1;

        d1 = 0.5772156649015329 + d1;

        $b0 = $d0 cmpl 0.5;

        if $b0 <= 0 goto label7;

        $d0 = d2 / $d0;

        d2 = d1 - 0.5;

        d2 = d2 - 0.5;

        $d0 = $d0 * d2;

        return $d0;

     label7:
        $d0 = $d0 * d1;

        return $d0;
    }
    public static double lanczos(double)
    {
        double $d0, d1, $d2, $d3;
        double[] $r0;
        int $i0;

        $d0 := @parameter0: double;

        d1 = 0.0;

        $r0 = <org.apache.commons.math3.special.Gamma: double[] LANCZOS>;

        $i0 = lengthof $r0;

        $i0 = $i0 + -1;

     label1:
        if $i0 <= 0 goto label2;

        $r0 = <org.apache.commons.math3.special.Gamma: double[] LANCZOS>;

        $d2 = $r0[$i0];

        $d3 = (double) $i0;

        $d3 = $d3 + $d0;

        $d2 = $d2 / $d3;

        d1 = d1 + $d2;

        $i0 = $i0 + -1;

        goto label1;

     label2:
        $r0 = <org.apache.commons.math3.special.Gamma: double[] LANCZOS>;

        $d0 = $r0[0];

        $d0 = $d0 + d1;

        return $d0;
    }
    public static double logGamma(double)
    {
        double $d0, d1, $d2, $d3, $d4;
        int i0, i2;
        boolean $z0;
        byte $b1;

        $d0 := @parameter0: double;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 != 0 goto label1;

        $b1 = $d0 cmpg 0.0;

        if $b1 > 0 goto label2;

     label1:
        return #NaN;

     label2:
        $b1 = $d0 cmpg 0.5;

        if $b1 >= 0 goto label3;

        $d2 = staticinvoke <org.apache.commons.math3.special.Gamma: double logGamma1p(double)>($d0);

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d0);

        $d0 = $d2 - $d0;

        return $d0;

     label3:
        $b1 = $d0 cmpg 2.5;

        if $b1 > 0 goto label4;

        $d0 = $d0 - 0.5;

        $d0 = $d0 - 0.5;

        $d0 = staticinvoke <org.apache.commons.math3.special.Gamma: double logGamma1p(double)>($d0);

        return $d0;

     label4:
        $b1 = $d0 cmpg 8.0;

        if $b1 > 0 goto label7;

        $d2 = $d0 - 1.5;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double floor(double)>($d2);

        i0 = (int) $d2;

        $d2 = 1.0;

        i2 = 1;

     label5:
        if i2 > i0 goto label6;

        d1 = (double) i2;

        d1 = $d0 - d1;

        $d2 = $d2 * d1;

        i2 = i2 + 1;

        goto label5;

     label6:
        i0 = i0 + 1;

        d1 = (double) i0;

        $d0 = $d0 - d1;

        $d0 = staticinvoke <org.apache.commons.math3.special.Gamma: double logGamma1p(double)>($d0);

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d2);

        $d0 = $d0 + $d2;

        return $d0;

     label7:
        $d2 = staticinvoke <org.apache.commons.math3.special.Gamma: double lanczos(double)>($d0);

        d1 = 4.7421875 + $d0;

        d1 = d1 + 0.5;

        $d3 = $d0 + 0.5;

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(d1);

        $d3 = $d3 * $d4;

        d1 = $d3 - d1;

        $d3 = <org.apache.commons.math3.special.Gamma: double HALF_LOG_2_PI>;

        d1 = d1 + $d3;

        $d0 = $d2 / $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d0);

        $d0 = d1 + $d0;

        return $d0;
    }
    public static double logGamma1p(double) throws org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        double $d0;
        byte $b0;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r0;
        java.lang.Double $r1, $r2;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r3;

        $d0 := @parameter0: double;

        $b0 = $d0 cmpg -0.5;

        if $b0 >= 0 goto label1;

        $r0 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(-0.5);

        specialinvoke $r0.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r1, $r2, 1);

        throw $r0;

     label1:
        $b0 = $d0 cmpl 1.5;

        if $b0 <= 0 goto label2;

        $r3 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.5);

        specialinvoke $r3.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r1, $r2, 1);

        throw $r3;

     label2:
        $d0 = staticinvoke <org.apache.commons.math3.special.Gamma: double invGamma1pm1(double)>($d0);

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double log1p(double)>($d0);

        $d0 = neg $d0;

        return $d0;
    }
    public static double regularizedGammaP(double, double)
    {
        double $d0, $d1;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d0 = staticinvoke <org.apache.commons.math3.special.Gamma: double regularizedGammaP(double,double,double,int)>($d0, $d1, 1.0E-14, 2147483647);

        return $d0;
    }
    public static double regularizedGammaP(double, double, double, int)
    {
        double $d0, $d1, $d2, $d3, d4, d5, $d6;
        int $i0;
        boolean $z0;
        byte $b1;
        org.apache.commons.math3.exception.MaxCountExceededException $r0;
        java.lang.Integer $r1;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $i0 := @parameter3: int;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 != 0 goto label1;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d1);

        if $z0 != 0 goto label1;

        $b1 = $d0 cmpg 0.0;

        if $b1 <= 0 goto label1;

        $b1 = $d1 cmpg 0.0;

        if $b1 >= 0 goto label2;

     label1:
        return #NaN;

     label2:
        $b1 = $d1 cmpl 0.0;

        if $b1 != 0 goto label3;

        return 0.0;

     label3:
        $d3 = 1.0 + $d0;

        $b1 = $d1 cmpl $d3;

        if $b1 < 0 goto label4;

        $d0 = staticinvoke <org.apache.commons.math3.special.Gamma: double regularizedGammaQ(double,double,double,int)>($d0, $d1, $d2, $i0);

        $d0 = 1.0 - $d0;

        return $d0;

     label4:
        d4 = 0.0;

        d5 = 1.0 / $d0;

        $d3 = d5;

     label5:
        $d6 = d5 / $d3;

        $d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d6);

        $b1 = $d6 cmpl $d2;

        if $b1 <= 0 goto label6;

        $d6 = (double) $i0;

        $b1 = d4 cmpg $d6;

        if $b1 >= 0 goto label6;

        $b1 = $d3 cmpg #Infinity;

        if $b1 >= 0 goto label6;

        d4 = d4 + 1.0;

        $d6 = $d0 + d4;

        $d6 = $d1 / $d6;

        d5 = d5 * $d6;

        $d3 = $d3 + d5;

        goto label5;

     label6:
        $d2 = (double) $i0;

        $b1 = d4 cmpl $d2;

        if $b1 < 0 goto label7;

        $r0 = new org.apache.commons.math3.exception.MaxCountExceededException;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r0.<org.apache.commons.math3.exception.MaxCountExceededException: void <init>(java.lang.Number)>($r1);

        throw $r0;

     label7:
        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d3);

        if $z0 == 0 goto label8;

        return 1.0;

     label8:
        $d2 = neg $d1;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d1);

        $d1 = $d1 * $d0;

        $d1 = $d2 + $d1;

        $d0 = staticinvoke <org.apache.commons.math3.special.Gamma: double logGamma(double)>($d0);

        $d0 = $d1 - $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d0);

        $d0 = $d0 * $d3;

        return $d0;
    }
    public static double regularizedGammaQ(double, double)
    {
        double $d0, $d1;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d0 = staticinvoke <org.apache.commons.math3.special.Gamma: double regularizedGammaQ(double,double,double,int)>($d0, $d1, 1.0E-14, 2147483647);

        return $d0;
    }
    public static double regularizedGammaQ(double, double, double, int)
    {
        double $d0, $d1, $d2, $d3;
        int $i0;
        org.apache.commons.math3.special.Gamma$1 r0;
        boolean $z0;
        byte $b1;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $i0 := @parameter3: int;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 != 0 goto label1;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d1);

        if $z0 != 0 goto label1;

        $b1 = $d0 cmpg 0.0;

        if $b1 <= 0 goto label1;

        $b1 = $d1 cmpg 0.0;

        if $b1 >= 0 goto label2;

     label1:
        return #NaN;

     label2:
        $b1 = $d1 cmpl 0.0;

        if $b1 != 0 goto label3;

        return 1.0;

     label3:
        $d3 = 1.0 + $d0;

        $b1 = $d1 cmpg $d3;

        if $b1 >= 0 goto label4;

        $d0 = staticinvoke <org.apache.commons.math3.special.Gamma: double regularizedGammaP(double,double,double,int)>($d0, $d1, $d2, $i0);

        $d0 = 1.0 - $d0;

        return $d0;

     label4:
        r0 = new org.apache.commons.math3.special.Gamma$1;

        specialinvoke r0.<org.apache.commons.math3.special.Gamma$1: void <init>(double)>($d0);

        $d2 = virtualinvoke r0.<org.apache.commons.math3.util.ContinuedFraction: double evaluate(double,double,int)>($d1, $d2, $i0);

        $d2 = 1.0 / $d2;

        $d3 = neg $d1;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d1);

        $d1 = $d1 * $d0;

        $d1 = $d3 + $d1;

        $d0 = staticinvoke <org.apache.commons.math3.special.Gamma: double logGamma(double)>($d0);

        $d0 = $d1 - $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d0);

        $d0 = $d2 * $d0;

        return $d0;
    }
    public static double trigamma(double)
    {
        double d0, d1, $d2, $d3;
        boolean $z0;
        byte $b0;

        d1 := @parameter0: double;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1);

        if $z0 != 0 goto label4;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d1);

        if $z0 == 0 goto label1;

        return d1;

     label1:
        $b0 = d1 cmpl 0.0;

        if $b0 <= 0 goto label2;

        $b0 = d1 cmpg 1.0E-5;

        if $b0 > 0 goto label2;

        d1 = d1 * d1;

        d1 = 1.0 / d1;

        return d1;

     label2:
        $b0 = d1 cmpl 49.0;

        if $b0 < 0 goto label3;

        $d2 = d1 * d1;

        d0 = 1.0 / $d2;

        $d2 = 1.0 / d1;

        $d3 = d0 / 2.0;

        $d2 = $d2 + $d3;

        d1 = d0 / d1;

        $d3 = d0 / 42.0;

        $d3 = 0.03333333333333333 + $d3;

        d0 = $d3 * d0;

        d0 = 0.16666666666666666 - d0;

        d1 = d1 * d0;

        d1 = $d2 + d1;

        return d1;

     label3:
        $d2 = d1 + 1.0;

        $d2 = staticinvoke <org.apache.commons.math3.special.Gamma: double trigamma(double)>($d2);

        d1 = d1 * d1;

        d1 = 1.0 / d1;

        d1 = $d2 + d1;

     label4:
        return d1;
    }
