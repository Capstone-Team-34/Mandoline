org.apache.commons.math3.special.Beta extends java.lang.Object
private static final double DEFAULT_EPSILON
private static final double[] DELTA
private static final double HALF_LOG_TWO_PI
    static void <clinit>()
    {
        double[] $r0;

        $r0 = newarray (double)[15];

        $r0[0] = 0.08333333333333333;

        $r0[1] = -2.777777777777778E-5;

        $r0[2] = 7.936507936507937E-8;

        $r0[3] = -5.952380952380953E-10;

        $r0[4] = 8.417508417508329E-12;

        $r0[5] = -1.917526917518546E-13;

        $r0[6] = 6.410256405103255E-15;

        $r0[7] = -2.955065141253382E-16;

        $r0[8] = 1.7964371635940225E-17;

        $r0[9] = -1.3922896466162779E-18;

        $r0[10] = 1.338028550140209E-19;

        $r0[11] = -1.542460098679661E-20;

        $r0[12] = 1.9770199298095743E-21;

        $r0[13] = -2.3406566479399704E-22;

        $r0[14] = 1.713480149663986E-23;

        <org.apache.commons.math3.special.Beta: double[] DELTA> = $r0;

        return;
    }
    private void <init>()
    {
        org.apache.commons.math3.special.Beta r0;

        r0 := @this: org.apache.commons.math3.special.Beta;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    private static double deltaMinusDeltaSum(double, double) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        double $d0, $d1, d2, d3, $d4, $d5;
        double[] r0, $r4, $r5;
        byte $b0;
        java.lang.Double $r1, $r3;
        java.lang.Integer $r2;
        int $i1, $i2;
        org.apache.commons.math3.exception.OutOfRangeException $r6;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r7;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $b0 = $d0 cmpg 0.0;

        if $b0 < 0 goto label1;

        $b0 = $d0 cmpl $d1;

        if $b0 <= 0 goto label2;

     label1:
        $r6 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        specialinvoke $r6.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r1, $r2, $r3);

        throw $r6;

     label2:
        $b0 = $d1 cmpg 10.0;

        if $b0 >= 0 goto label3;

        $r7 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);

        specialinvoke $r7.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r1, $r2, 1);

        throw $r7;

     label3:
        d2 = $d0 / $d1;

        $d0 = 1.0 + d2;

        $d0 = d2 / $d0;

        d2 = 1.0 + d2;

        d2 = 1.0 / d2;

        d3 = d2 * d2;

        r0 = <org.apache.commons.math3.special.Beta: double[] DELTA>;

        $i1 = lengthof r0;

        r0 = newarray (double)[$i1];

        $d4 = (double) 4607182418800017408L;

        r0[0] = $d4;

        $i1 = 1;

     label4:
        $i2 = lengthof r0;

        if $i1 >= $i2 goto label5;

        $i2 = $i1 + -1;

        $d4 = r0[$i2];

        $d4 = $d4 * d3;

        $d4 = $d4 + d2;

        $d4 = 1.0 + $d4;

        r0[$i1] = $d4;

        $i1 = $i1 + 1;

        goto label4;

     label5:
        d2 = 10.0 / $d1;

        d2 = d2 * d2;

        $r4 = <org.apache.commons.math3.special.Beta: double[] DELTA>;

        $r5 = <org.apache.commons.math3.special.Beta: double[] DELTA>;

        $i1 = lengthof $r5;

        $i1 = $i1 + -1;

        d3 = $r4[$i1];

        $i1 = lengthof r0;

        $i1 = $i1 + -1;

        $d4 = r0[$i1];

        d3 = d3 * $d4;

        $r4 = <org.apache.commons.math3.special.Beta: double[] DELTA>;

        $i1 = lengthof $r4;

        $i1 = $i1 + -2;

     label6:
        if $i1 < 0 goto label7;

        d3 = d2 * d3;

        $r4 = <org.apache.commons.math3.special.Beta: double[] DELTA>;

        $d5 = $r4[$i1];

        $d4 = r0[$i1];

        $d4 = $d5 * $d4;

        d3 = d3 + $d4;

        $i1 = $i1 + -1;

        goto label6;

     label7:
        $d0 = d3 * $d0;

        $d0 = $d0 / $d1;

        return $d0;
    }
    public static double logBeta(double, double)
    {
        double $d0, $d1, d2, d3, d4;
        int i0, i2;
        boolean $z0;
        byte $b1;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 != 0 goto label01;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d1);

        if $z0 != 0 goto label01;

        $b1 = $d0 cmpg 0.0;

        if $b1 <= 0 goto label01;

        $b1 = $d1 cmpg 0.0;

        if $b1 > 0 goto label02;

     label01:
        return #NaN;

     label02:
        d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double min(double,double)>($d0, $d1);

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>($d0, $d1);

        $b1 = d3 cmpl 10.0;

        if $b1 < 0 goto label04;

        $d1 = staticinvoke <org.apache.commons.math3.special.Beta: double sumDeltaMinusDeltaSum(double,double)>(d3, $d0);

        d4 = d3 / $d0;

        d2 = 1.0 + d4;

        d2 = d4 / d2;

        d3 = d3 - 0.5;

        d3 = neg d3;

        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(d2);

        d3 = d3 * d2;

        d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double log1p(double)>(d4);

        d4 = $d0 * d4;

        $b1 = d3 cmpg d4;

        if $b1 > 0 goto label03;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d0);

        $d0 = -0.5 * $d0;

        $d0 = $d0 + 0.9189385332046727;

        $d0 = $d0 + $d1;

        $d0 = $d0 - d3;

        $d0 = $d0 - d4;

        return $d0;

     label03:
        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d0);

        $d0 = -0.5 * $d0;

        $d0 = $d0 + 0.9189385332046727;

        $d0 = $d0 + $d1;

        $d0 = $d0 - d4;

        $d0 = $d0 - d3;

        return $d0;

     label04:
        $b1 = d3 cmpl 2.0;

        if $b1 <= 0 goto label13;

        $b1 = $d0 cmpl 1000.0;

        if $b1 <= 0 goto label07;

        $d1 = d3 - 1.0;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double floor(double)>($d1);

        i0 = (int) $d1;

        d4 = 1.0;

        $d1 = d3;

        i2 = 0;

     label05:
        if i2 >= i0 goto label06;

        $d1 = $d1 - 1.0;

        d3 = $d1 / $d0;

        d3 = 1.0 + d3;

        d3 = $d1 / d3;

        d4 = d4 * d3;

        i2 = i2 + 1;

        goto label05;

     label06:
        d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(d4);

        d4 = (double) i0;

        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d0);

        d4 = d4 * d2;

        d3 = d3 - d4;

        d4 = staticinvoke <org.apache.commons.math3.special.Gamma: double logGamma(double)>($d1);

        $d0 = staticinvoke <org.apache.commons.math3.special.Beta: double logGammaMinusLogGammaSum(double,double)>($d1, $d0);

        $d0 = d4 + $d0;

        $d0 = d3 + $d0;

        return $d0;

     label07:
        d4 = 1.0;

        $d1 = d3;

     label08:
        $b1 = $d1 cmpl 2.0;

        if $b1 <= 0 goto label09;

        $d1 = $d1 - 1.0;

        d3 = $d1 / $d0;

        d2 = 1.0 + d3;

        d3 = d3 / d2;

        d4 = d4 * d3;

        goto label08;

     label09:
        $b1 = $d0 cmpg 10.0;

        if $b1 >= 0 goto label12;

        d3 = 1.0;

     label10:
        $b1 = $d0 cmpl 2.0;

        if $b1 <= 0 goto label11;

        $d0 = $d0 - 1.0;

        d2 = $d1 + $d0;

        d2 = $d0 / d2;

        d3 = d3 * d2;

        goto label10;

     label11:
        d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(d4);

        d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(d3);

        d3 = d4 + d3;

        d4 = staticinvoke <org.apache.commons.math3.special.Gamma: double logGamma(double)>($d1);

        d2 = staticinvoke <org.apache.commons.math3.special.Gamma: double logGamma(double)>($d0);

        $d0 = staticinvoke <org.apache.commons.math3.special.Beta: double logGammaSum(double,double)>($d1, $d0);

        $d0 = d2 - $d0;

        $d0 = d4 + $d0;

        $d0 = d3 + $d0;

        return $d0;

     label12:
        d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(d4);

        d4 = staticinvoke <org.apache.commons.math3.special.Gamma: double logGamma(double)>($d1);

        d3 = d3 + d4;

        $d0 = staticinvoke <org.apache.commons.math3.special.Beta: double logGammaMinusLogGammaSum(double,double)>($d1, $d0);

        $d0 = d3 + $d0;

        return $d0;

     label13:
        $b1 = d3 cmpl 1.0;

        if $b1 < 0 goto label18;

        $b1 = $d0 cmpl 2.0;

        if $b1 <= 0 goto label17;

        $b1 = $d0 cmpg 10.0;

        if $b1 >= 0 goto label16;

        $d1 = 1.0;

     label14:
        $b1 = $d0 cmpl 2.0;

        if $b1 <= 0 goto label15;

        $d0 = $d0 - 1.0;

        d4 = d3 + $d0;

        d4 = $d0 / d4;

        $d1 = $d1 * d4;

        goto label14;

     label15:
        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d1);

        d4 = staticinvoke <org.apache.commons.math3.special.Gamma: double logGamma(double)>(d3);

        d2 = staticinvoke <org.apache.commons.math3.special.Gamma: double logGamma(double)>($d0);

        $d0 = staticinvoke <org.apache.commons.math3.special.Beta: double logGammaSum(double,double)>(d3, $d0);

        $d0 = d2 - $d0;

        $d0 = d4 + $d0;

        $d0 = $d1 + $d0;

        return $d0;

     label16:
        $d1 = staticinvoke <org.apache.commons.math3.special.Gamma: double logGamma(double)>(d3);

        $d0 = staticinvoke <org.apache.commons.math3.special.Beta: double logGammaMinusLogGammaSum(double,double)>(d3, $d0);

        $d0 = $d1 + $d0;

        return $d0;

     label17:
        $d1 = staticinvoke <org.apache.commons.math3.special.Gamma: double logGamma(double)>(d3);

        d4 = staticinvoke <org.apache.commons.math3.special.Gamma: double logGamma(double)>($d0);

        $d1 = $d1 + d4;

        $d0 = staticinvoke <org.apache.commons.math3.special.Beta: double logGammaSum(double,double)>(d3, $d0);

        $d0 = $d1 - $d0;

        return $d0;

     label18:
        $b1 = $d0 cmpl 10.0;

        if $b1 < 0 goto label19;

        $d1 = staticinvoke <org.apache.commons.math3.special.Gamma: double logGamma(double)>(d3);

        $d0 = staticinvoke <org.apache.commons.math3.special.Beta: double logGammaMinusLogGammaSum(double,double)>(d3, $d0);

        $d0 = $d1 + $d0;

        return $d0;

     label19:
        $d1 = staticinvoke <org.apache.commons.math3.special.Gamma: double gamma(double)>(d3);

        d4 = staticinvoke <org.apache.commons.math3.special.Gamma: double gamma(double)>($d0);

        $d1 = $d1 * d4;

        $d0 = d3 + $d0;

        $d0 = staticinvoke <org.apache.commons.math3.special.Gamma: double gamma(double)>($d0);

        $d0 = $d1 / $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d0);

        return $d0;
    }
    public static double logBeta(double, double, double, int)
    {
        double $d0, $d1, $d2;
        int $i0;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $i0 := @parameter3: int;

        $d0 = staticinvoke <org.apache.commons.math3.special.Beta: double logBeta(double,double)>($d0, $d1);

        return $d0;
    }
    private static double logGammaMinusLogGammaSum(double, double) throws org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        double $d0, $d1, d2, $d3, $d4;
        byte $b0;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r0;
        java.lang.Double $r1, $r2;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $b0 = $d0 cmpg 0.0;

        if $b0 >= 0 goto label1;

        $r0 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);

        specialinvoke $r0.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r1, $r2, 1);

        throw $r0;

     label1:
        $b0 = $d1 cmpg 10.0;

        if $b0 >= 0 goto label2;

        $r0 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(10.0);

        specialinvoke $r0.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r1, $r2, 1);

        throw $r0;

     label2:
        $b0 = $d0 cmpg $d1;

        if $b0 > 0 goto label4;

        $d3 = $d0 - 0.5;

        d2 = $d1 + $d3;

        $d3 = staticinvoke <org.apache.commons.math3.special.Beta: double deltaMinusDeltaSum(double,double)>($d0, $d1);

     label3:
        $d4 = $d0 / $d1;

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double log1p(double)>($d4);

        d2 = d2 * $d4;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d1);

        $d1 = $d1 - 1.0;

        $d0 = $d0 * $d1;

        $b0 = d2 cmpg $d0;

        if $b0 > 0 goto label5;

        $d1 = $d3 - d2;

        $d0 = $d1 - $d0;

        return $d0;

     label4:
        $d3 = $d1 - 0.5;

        d2 = $d0 + $d3;

        $d3 = staticinvoke <org.apache.commons.math3.special.Beta: double deltaMinusDeltaSum(double,double)>($d1, $d0);

        goto label3;

     label5:
        $d0 = $d3 - $d0;

        $d0 = $d0 - d2;

        return $d0;
    }
    private static double logGammaSum(double, double) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        double $d0, $d1, $d2;
        byte $b0;
        org.apache.commons.math3.exception.OutOfRangeException $r0;
        java.lang.Double $r1, $r2, $r3;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $b0 = $d0 cmpg 1.0;

        if $b0 < 0 goto label1;

        $b0 = $d0 cmpl 2.0;

        if $b0 <= 0 goto label2;

     label1:
        $r0 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(2.0);

        specialinvoke $r0.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r1, $r2, $r3);

        throw $r0;

     label2:
        $b0 = $d1 cmpg 1.0;

        if $b0 < 0 goto label3;

        $b0 = $d1 cmpl 2.0;

        if $b0 <= 0 goto label4;

     label3:
        $r0 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(2.0);

        specialinvoke $r0.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r1, $r2, $r3);

        throw $r0;

     label4:
        $d0 = $d0 - 1.0;

        $d1 = $d1 - 1.0;

        $d0 = $d0 + $d1;

        $b0 = $d0 cmpg 0.5;

        if $b0 > 0 goto label5;

        $d0 = 1.0 + $d0;

        $d0 = staticinvoke <org.apache.commons.math3.special.Gamma: double logGamma1p(double)>($d0);

        return $d0;

     label5:
        $b0 = $d0 cmpg 1.5;

        if $b0 > 0 goto label6;

        $d1 = staticinvoke <org.apache.commons.math3.special.Gamma: double logGamma1p(double)>($d0);

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double log1p(double)>($d0);

        $d0 = $d1 + $d0;

        return $d0;

     label6:
        $d1 = $d0 - 1.0;

        $d1 = staticinvoke <org.apache.commons.math3.special.Gamma: double logGamma1p(double)>($d1);

        $d2 = 1.0 + $d0;

        $d0 = $d2 * $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d0);

        $d0 = $d1 + $d0;

        return $d0;
    }
    public static double regularizedBeta(double, double, double)
    {
        double $d0, $d1, $d2;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $d0 = staticinvoke <org.apache.commons.math3.special.Beta: double regularizedBeta(double,double,double,double,int)>($d0, $d1, $d2, 1.0E-14, 2147483647);

        return $d0;
    }
    public static double regularizedBeta(double, double, double, double)
    {
        double $d0, $d1, $d2, $d3;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $d3 := @parameter3: double;

        $d0 = staticinvoke <org.apache.commons.math3.special.Beta: double regularizedBeta(double,double,double,double,int)>($d0, $d1, $d2, $d3, 2147483647);

        return $d0;
    }
    public static double regularizedBeta(double, double, double, double, int)
    {
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;
        int $i0;
        org.apache.commons.math3.special.Beta$1 r0;
        boolean $z0;
        byte $b1;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $d3 := @parameter3: double;

        $i0 := @parameter4: int;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 != 0 goto label1;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d1);

        if $z0 != 0 goto label1;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d2);

        if $z0 != 0 goto label1;

        $b1 = $d0 cmpg 0.0;

        if $b1 < 0 goto label1;

        $b1 = $d0 cmpl 1.0;

        if $b1 > 0 goto label1;

        $b1 = $d1 cmpg 0.0;

        if $b1 <= 0 goto label1;

        $b1 = $d2 cmpg 0.0;

        if $b1 > 0 goto label2;

     label1:
        return #NaN;

     label2:
        $d4 = 1.0 + $d1;

        $d5 = 2.0 + $d2;

        $d5 = $d5 + $d1;

        $d4 = $d4 / $d5;

        $b1 = $d0 cmpl $d4;

        if $b1 <= 0 goto label3;

        $d4 = 1.0 - $d0;

        $d5 = 1.0 + $d2;

        $d6 = 2.0 + $d2;

        $d6 = $d6 + $d1;

        $d5 = $d5 / $d6;

        $b1 = $d4 cmpg $d5;

        if $b1 > 0 goto label3;

        $d0 = 1.0 - $d0;

        $d0 = staticinvoke <org.apache.commons.math3.special.Beta: double regularizedBeta(double,double,double,double,int)>($d0, $d2, $d1, $d3, $i0);

        $d0 = 1.0 - $d0;

        return $d0;

     label3:
        r0 = new org.apache.commons.math3.special.Beta$1;

        specialinvoke r0.<org.apache.commons.math3.special.Beta$1: void <init>(double,double)>($d2, $d1);

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d0);

        $d4 = $d4 * $d1;

        $d5 = neg $d0;

        $d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double log1p(double)>($d5);

        $d5 = $d5 * $d2;

        $d4 = $d4 + $d5;

        $d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d1);

        $d4 = $d4 - $d5;

        $d1 = staticinvoke <org.apache.commons.math3.special.Beta: double logBeta(double,double)>($d1, $d2);

        $d1 = $d4 - $d1;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d1);

        $d1 = $d1 * 1.0;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.util.ContinuedFraction: double evaluate(double,double,int)>($d0, $d3, $i0);

        $d0 = $d1 / $d0;

        return $d0;
    }
    public static double regularizedBeta(double, double, double, int)
    {
        double $d0, $d1, $d2;
        int $i0;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $i0 := @parameter3: int;

        $d0 = staticinvoke <org.apache.commons.math3.special.Beta: double regularizedBeta(double,double,double,double,int)>($d0, $d1, $d2, 1.0E-14, $i0);

        return $d0;
    }
    private static double sumDeltaMinusDeltaSum(double, double)
    {
        double $d0, $d1, $d2, d3, $d4;
        byte $b0;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r0;
        java.lang.Double $r1, $r2;
        double[] $r3, $r4;
        int $i1;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $b0 = $d0 cmpg 10.0;

        if $b0 >= 0 goto label1;

        $r0 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(10.0);

        specialinvoke $r0.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r1, $r2, 1);

        throw $r0;

     label1:
        $b0 = $d1 cmpg 10.0;

        if $b0 >= 0 goto label2;

        $r0 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(10.0);

        specialinvoke $r0.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r1, $r2, 1);

        throw $r0;

     label2:
        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double min(double,double)>($d0, $d1);

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>($d0, $d1);

        $d1 = 10.0 / $d2;

        $d1 = $d1 * $d1;

        $r3 = <org.apache.commons.math3.special.Beta: double[] DELTA>;

        $r4 = <org.apache.commons.math3.special.Beta: double[] DELTA>;

        $i1 = lengthof $r4;

        $i1 = $i1 + -1;

        d3 = $r3[$i1];

        $r3 = <org.apache.commons.math3.special.Beta: double[] DELTA>;

        $i1 = lengthof $r3;

        $i1 = $i1 + -2;

     label3:
        if $i1 < 0 goto label4;

        d3 = $d1 * d3;

        $r3 = <org.apache.commons.math3.special.Beta: double[] DELTA>;

        $d4 = $r3[$i1];

        d3 = d3 + $d4;

        $i1 = $i1 + -1;

        goto label3;

     label4:
        $d1 = d3 / $d2;

        $d0 = staticinvoke <org.apache.commons.math3.special.Beta: double deltaMinusDeltaSum(double,double)>($d2, $d0);

        $d0 = $d1 + $d0;

        return $d0;
    }
