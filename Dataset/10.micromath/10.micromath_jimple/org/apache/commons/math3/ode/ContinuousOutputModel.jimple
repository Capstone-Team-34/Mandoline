org.apache.commons.math3.ode.ContinuousOutputModel extends java.lang.Object implements org.apache.commons.math3.ode.sampling.StepHandler java.io.Serializable
private static final long serialVersionUID
private double finalTime
private boolean forward
private int index
private double initialTime
private java.util.List steps
    public void <init>()
    {
        org.apache.commons.math3.ode.ContinuousOutputModel r0;
        java.util.ArrayList $r1;

        r0 := @this: org.apache.commons.math3.ode.ContinuousOutputModel;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.math3.ode.ContinuousOutputModel: java.util.List steps> = $r1;

        r0.<org.apache.commons.math3.ode.ContinuousOutputModel: double initialTime> = #NaN;

        r0.<org.apache.commons.math3.ode.ContinuousOutputModel: double finalTime> = #NaN;

        r0.<org.apache.commons.math3.ode.ContinuousOutputModel: boolean forward> = 1;

        r0.<org.apache.commons.math3.ode.ContinuousOutputModel: int index> = 0;

        return;
    }
    private int locatePoint(double, org.apache.commons.math3.ode.sampling.StepInterpolator)
    {
        org.apache.commons.math3.ode.ContinuousOutputModel r0;
        double $d0, $d1;
        org.apache.commons.math3.ode.sampling.StepInterpolator $r1;
        boolean $z0;
        byte $b0;

        r0 := @this: org.apache.commons.math3.ode.ContinuousOutputModel;

        $d0 := @parameter0: double;

        $r1 := @parameter1: org.apache.commons.math3.ode.sampling.StepInterpolator;

        $z0 = r0.<org.apache.commons.math3.ode.ContinuousOutputModel: boolean forward>;

        if $z0 == 0 goto label3;

        $d1 = interfaceinvoke $r1.<org.apache.commons.math3.ode.sampling.StepInterpolator: double getPreviousTime()>();

        $b0 = $d0 cmpg $d1;

        if $b0 >= 0 goto label1;

        return -1;

     label1:
        $d1 = interfaceinvoke $r1.<org.apache.commons.math3.ode.sampling.StepInterpolator: double getCurrentTime()>();

        $b0 = $d0 cmpl $d1;

        if $b0 <= 0 goto label2;

        return 1;

     label2:
        return 0;

     label3:
        $d1 = interfaceinvoke $r1.<org.apache.commons.math3.ode.sampling.StepInterpolator: double getPreviousTime()>();

        $b0 = $d0 cmpl $d1;

        if $b0 > 0 goto label5;

        $d1 = interfaceinvoke $r1.<org.apache.commons.math3.ode.sampling.StepInterpolator: double getCurrentTime()>();

        $b0 = $d0 cmpg $d1;

        if $b0 >= 0 goto label4;

        return 1;

     label4:
        return 0;

     label5:
        return -1;
    }
    public void append(org.apache.commons.math3.ode.ContinuousOutputModel) throws org.apache.commons.math3.exception.MathIllegalArgumentException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.ode.ContinuousOutputModel r0, $r1;
        double d0, d1, $d2;
        java.util.List $r2;
        int $i0, $i1;
        boolean $z0, $z1;
        java.util.Iterator $r3;
        java.lang.Object $r4;
        org.apache.commons.math3.ode.sampling.StepInterpolator r5;
        double[] $r6;
        org.apache.commons.math3.exception.DimensionMismatchException $r7;
        org.apache.commons.math3.exception.MathIllegalArgumentException $r8;
        org.apache.commons.math3.exception.util.LocalizedFormats $r9;
        java.lang.Object[] $r10;
        byte $b2;
        java.lang.Double $r11;

        r0 := @this: org.apache.commons.math3.ode.ContinuousOutputModel;

        $r1 := @parameter0: org.apache.commons.math3.ode.ContinuousOutputModel;

        $r2 = $r1.<org.apache.commons.math3.ode.ContinuousOutputModel: java.util.List steps>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        return;

     label1:
        $r2 = r0.<org.apache.commons.math3.ode.ContinuousOutputModel: java.util.List steps>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 != 0 goto label4;

        d0 = $r1.<org.apache.commons.math3.ode.ContinuousOutputModel: double initialTime>;

        r0.<org.apache.commons.math3.ode.ContinuousOutputModel: double initialTime> = d0;

        $z0 = $r1.<org.apache.commons.math3.ode.ContinuousOutputModel: boolean forward>;

        r0.<org.apache.commons.math3.ode.ContinuousOutputModel: boolean forward> = $z0;

     label2:
        $r2 = $r1.<org.apache.commons.math3.ode.ContinuousOutputModel: java.util.List steps>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.commons.math3.ode.sampling.StepInterpolator) $r4;

        $r2 = r0.<org.apache.commons.math3.ode.ContinuousOutputModel: java.util.List steps>;

        r5 = interfaceinvoke r5.<org.apache.commons.math3.ode.sampling.StepInterpolator: org.apache.commons.math3.ode.sampling.StepInterpolator copy()>();

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r5);

        goto label3;

     label4:
        $r6 = virtualinvoke r0.<org.apache.commons.math3.ode.ContinuousOutputModel: double[] getInterpolatedState()>();

        $i0 = lengthof $r6;

        $r6 = virtualinvoke $r1.<org.apache.commons.math3.ode.ContinuousOutputModel: double[] getInterpolatedState()>();

        $i1 = lengthof $r6;

        if $i0 == $i1 goto label5;

        $r7 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $r6 = virtualinvoke $r1.<org.apache.commons.math3.ode.ContinuousOutputModel: double[] getInterpolatedState()>();

        $i0 = lengthof $r6;

        $r6 = virtualinvoke r0.<org.apache.commons.math3.ode.ContinuousOutputModel: double[] getInterpolatedState()>();

        $i1 = lengthof $r6;

        specialinvoke $r7.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i0, $i1);

        throw $r7;

     label5:
        $z0 = r0.<org.apache.commons.math3.ode.ContinuousOutputModel: boolean forward>;

        $z1 = $r1.<org.apache.commons.math3.ode.ContinuousOutputModel: boolean forward>;

        $z0 = $z0 ^ $z1;

        if $z0 == 0 goto label6;

        $r8 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r9 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats PROPAGATION_DIRECTION_MISMATCH>;

        $r10 = newarray (java.lang.Object)[0];

        specialinvoke $r8.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r9, $r10);

        throw $r8;

     label6:
        $r2 = r0.<org.apache.commons.math3.ode.ContinuousOutputModel: java.util.List steps>;

        $i0 = r0.<org.apache.commons.math3.ode.ContinuousOutputModel: int index>;

        $r4 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i0);

        r5 = (org.apache.commons.math3.ode.sampling.StepInterpolator) $r4;

        d0 = interfaceinvoke r5.<org.apache.commons.math3.ode.sampling.StepInterpolator: double getCurrentTime()>();

        d1 = interfaceinvoke r5.<org.apache.commons.math3.ode.sampling.StepInterpolator: double getPreviousTime()>();

        d1 = d0 - d1;

        $d2 = virtualinvoke $r1.<org.apache.commons.math3.ode.ContinuousOutputModel: double getInitialTime()>();

        d0 = $d2 - d0;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d0);

        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d1);

        d1 = 0.001 * d1;

        $b2 = $d2 cmpl d1;

        if $b2 <= 0 goto label2;

        $r8 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r9 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats HOLE_BETWEEN_MODELS_TIME_RANGES>;

        $r10 = newarray (java.lang.Object)[1];

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d0);

        $r11 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r10[0] = $r11;

        specialinvoke $r8.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r9, $r10);

        throw $r8;

     label7:
        $r2 = r0.<org.apache.commons.math3.ode.ContinuousOutputModel: java.util.List steps>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i0 = $i0 + -1;

        r0.<org.apache.commons.math3.ode.ContinuousOutputModel: int index> = $i0;

        $r2 = r0.<org.apache.commons.math3.ode.ContinuousOutputModel: java.util.List steps>;

        $i0 = r0.<org.apache.commons.math3.ode.ContinuousOutputModel: int index>;

        $r4 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i0);

        r5 = (org.apache.commons.math3.ode.sampling.StepInterpolator) $r4;

        d0 = interfaceinvoke r5.<org.apache.commons.math3.ode.sampling.StepInterpolator: double getCurrentTime()>();

        r0.<org.apache.commons.math3.ode.ContinuousOutputModel: double finalTime> = d0;

        return;
    }
    public double getFinalTime()
    {
        org.apache.commons.math3.ode.ContinuousOutputModel r0;
        double d0;

        r0 := @this: org.apache.commons.math3.ode.ContinuousOutputModel;

        d0 = r0.<org.apache.commons.math3.ode.ContinuousOutputModel: double finalTime>;

        return d0;
    }
    public double getInitialTime()
    {
        org.apache.commons.math3.ode.ContinuousOutputModel r0;
        double d0;

        r0 := @this: org.apache.commons.math3.ode.ContinuousOutputModel;

        d0 = r0.<org.apache.commons.math3.ode.ContinuousOutputModel: double initialTime>;

        return d0;
    }
    public double[] getInterpolatedDerivatives() throws org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.ode.ContinuousOutputModel r0;
        int $i0;
        java.util.List $r1;
        java.lang.Object $r2;
        org.apache.commons.math3.ode.sampling.StepInterpolator $r3;
        double[] $r4;

        r0 := @this: org.apache.commons.math3.ode.ContinuousOutputModel;

        $r1 = r0.<org.apache.commons.math3.ode.ContinuousOutputModel: java.util.List steps>;

        $i0 = r0.<org.apache.commons.math3.ode.ContinuousOutputModel: int index>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        $r3 = (org.apache.commons.math3.ode.sampling.StepInterpolator) $r2;

        $r4 = interfaceinvoke $r3.<org.apache.commons.math3.ode.sampling.StepInterpolator: double[] getInterpolatedDerivatives()>();

        return $r4;
    }
    public double[] getInterpolatedSecondaryDerivatives(int) throws org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.ode.ContinuousOutputModel r0;
        int $i0, $i1;
        java.util.List $r1;
        java.lang.Object $r2;
        org.apache.commons.math3.ode.sampling.StepInterpolator $r3;
        double[] $r4;

        r0 := @this: org.apache.commons.math3.ode.ContinuousOutputModel;

        $i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.math3.ode.ContinuousOutputModel: java.util.List steps>;

        $i1 = r0.<org.apache.commons.math3.ode.ContinuousOutputModel: int index>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i1);

        $r3 = (org.apache.commons.math3.ode.sampling.StepInterpolator) $r2;

        $r4 = interfaceinvoke $r3.<org.apache.commons.math3.ode.sampling.StepInterpolator: double[] getInterpolatedSecondaryDerivatives(int)>($i0);

        return $r4;
    }
    public double[] getInterpolatedSecondaryState(int) throws org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.ode.ContinuousOutputModel r0;
        int $i0, $i1;
        java.util.List $r1;
        java.lang.Object $r2;
        org.apache.commons.math3.ode.sampling.StepInterpolator $r3;
        double[] $r4;

        r0 := @this: org.apache.commons.math3.ode.ContinuousOutputModel;

        $i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.math3.ode.ContinuousOutputModel: java.util.List steps>;

        $i1 = r0.<org.apache.commons.math3.ode.ContinuousOutputModel: int index>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i1);

        $r3 = (org.apache.commons.math3.ode.sampling.StepInterpolator) $r2;

        $r4 = interfaceinvoke $r3.<org.apache.commons.math3.ode.sampling.StepInterpolator: double[] getInterpolatedSecondaryState(int)>($i0);

        return $r4;
    }
    public double[] getInterpolatedState() throws org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.ode.ContinuousOutputModel r0;
        int $i0;
        java.util.List $r1;
        java.lang.Object $r2;
        org.apache.commons.math3.ode.sampling.StepInterpolator $r3;
        double[] $r4;

        r0 := @this: org.apache.commons.math3.ode.ContinuousOutputModel;

        $r1 = r0.<org.apache.commons.math3.ode.ContinuousOutputModel: java.util.List steps>;

        $i0 = r0.<org.apache.commons.math3.ode.ContinuousOutputModel: int index>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        $r3 = (org.apache.commons.math3.ode.sampling.StepInterpolator) $r2;

        $r4 = interfaceinvoke $r3.<org.apache.commons.math3.ode.sampling.StepInterpolator: double[] getInterpolatedState()>();

        return $r4;
    }
    public double getInterpolatedTime()
    {
        org.apache.commons.math3.ode.ContinuousOutputModel r0;
        int $i0;
        java.util.List $r1;
        java.lang.Object $r2;
        org.apache.commons.math3.ode.sampling.StepInterpolator $r3;
        double $d0;

        r0 := @this: org.apache.commons.math3.ode.ContinuousOutputModel;

        $r1 = r0.<org.apache.commons.math3.ode.ContinuousOutputModel: java.util.List steps>;

        $i0 = r0.<org.apache.commons.math3.ode.ContinuousOutputModel: int index>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        $r3 = (org.apache.commons.math3.ode.sampling.StepInterpolator) $r2;

        $d0 = interfaceinvoke $r3.<org.apache.commons.math3.ode.sampling.StepInterpolator: double getInterpolatedTime()>();

        return $d0;
    }
    public void handleStep(org.apache.commons.math3.ode.sampling.StepInterpolator, boolean) throws org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.ode.ContinuousOutputModel r0;
        org.apache.commons.math3.ode.sampling.StepInterpolator $r1, $r3;
        boolean $z0, $z1;
        java.util.List $r2;
        int $i0;
        double $d0;

        r0 := @this: org.apache.commons.math3.ode.ContinuousOutputModel;

        $r1 := @parameter0: org.apache.commons.math3.ode.sampling.StepInterpolator;

        $z0 := @parameter1: boolean;

        $r2 = r0.<org.apache.commons.math3.ode.ContinuousOutputModel: java.util.List steps>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        $d0 = interfaceinvoke $r1.<org.apache.commons.math3.ode.sampling.StepInterpolator: double getPreviousTime()>();

        r0.<org.apache.commons.math3.ode.ContinuousOutputModel: double initialTime> = $d0;

        $z1 = interfaceinvoke $r1.<org.apache.commons.math3.ode.sampling.StepInterpolator: boolean isForward()>();

        r0.<org.apache.commons.math3.ode.ContinuousOutputModel: boolean forward> = $z1;

     label1:
        $r2 = r0.<org.apache.commons.math3.ode.ContinuousOutputModel: java.util.List steps>;

        $r3 = interfaceinvoke $r1.<org.apache.commons.math3.ode.sampling.StepInterpolator: org.apache.commons.math3.ode.sampling.StepInterpolator copy()>();

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r3);

        if $z0 == 0 goto label2;

        $d0 = interfaceinvoke $r1.<org.apache.commons.math3.ode.sampling.StepInterpolator: double getCurrentTime()>();

        r0.<org.apache.commons.math3.ode.ContinuousOutputModel: double finalTime> = $d0;

        $r2 = r0.<org.apache.commons.math3.ode.ContinuousOutputModel: java.util.List steps>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i0 = $i0 + -1;

        r0.<org.apache.commons.math3.ode.ContinuousOutputModel: int index> = $i0;

     label2:
        return;
    }
    public void init(double, double[], double)
    {
        org.apache.commons.math3.ode.ContinuousOutputModel r0;
        double $d0, $d1;
        double[] $r1;
        java.util.List $r2;

        r0 := @this: org.apache.commons.math3.ode.ContinuousOutputModel;

        $d0 := @parameter0: double;

        $r1 := @parameter1: double[];

        $d1 := @parameter2: double;

        r0.<org.apache.commons.math3.ode.ContinuousOutputModel: double initialTime> = #NaN;

        r0.<org.apache.commons.math3.ode.ContinuousOutputModel: double finalTime> = #NaN;

        r0.<org.apache.commons.math3.ode.ContinuousOutputModel: boolean forward> = 1;

        r0.<org.apache.commons.math3.ode.ContinuousOutputModel: int index> = 0;

        $r2 = r0.<org.apache.commons.math3.ode.ContinuousOutputModel: java.util.List steps>;

        interfaceinvoke $r2.<java.util.List: void clear()>();

        return;
    }
    public void setInterpolatedTime(double)
    {
        org.apache.commons.math3.ode.ContinuousOutputModel r0;
        double $d0, d1, d2, d3, d4, d5, d6, $d7, $d8, $d9, $d10;
        int i0, i1, $i2, $i4, $i5;
        java.util.List $r1;
        java.lang.Object $r2;
        org.apache.commons.math3.ode.sampling.StepInterpolator r3, r4;
        byte $b3;

        r0 := @this: org.apache.commons.math3.ode.ContinuousOutputModel;

        $d0 := @parameter0: double;

        i1 = 0;

        $r1 = r0.<org.apache.commons.math3.ode.ContinuousOutputModel: java.util.List steps>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        r3 = (org.apache.commons.math3.ode.sampling.StepInterpolator) $r2;

        $d7 = interfaceinvoke r3.<org.apache.commons.math3.ode.sampling.StepInterpolator: double getPreviousTime()>();

        $d8 = interfaceinvoke r3.<org.apache.commons.math3.ode.sampling.StepInterpolator: double getCurrentTime()>();

        $d7 = $d7 + $d8;

        $d7 = 0.5 * $d7;

        $r1 = r0.<org.apache.commons.math3.ode.ContinuousOutputModel: java.util.List steps>;

        $i2 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i2 = $i2 + -1;

        $r1 = r0.<org.apache.commons.math3.ode.ContinuousOutputModel: java.util.List steps>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i2);

        r4 = (org.apache.commons.math3.ode.sampling.StepInterpolator) $r2;

        $d8 = interfaceinvoke r4.<org.apache.commons.math3.ode.sampling.StepInterpolator: double getPreviousTime()>();

        d2 = interfaceinvoke r4.<org.apache.commons.math3.ode.sampling.StepInterpolator: double getCurrentTime()>();

        $d8 = $d8 + d2;

        $d8 = 0.5 * $d8;

        i0 = specialinvoke r0.<org.apache.commons.math3.ode.ContinuousOutputModel: int locatePoint(double,org.apache.commons.math3.ode.sampling.StepInterpolator)>($d0, r3);

        if i0 > 0 goto label01;

        r0.<org.apache.commons.math3.ode.ContinuousOutputModel: int index> = 0;

        interfaceinvoke r3.<org.apache.commons.math3.ode.sampling.StepInterpolator: void setInterpolatedTime(double)>($d0);

        return;

     label01:
        i0 = specialinvoke r0.<org.apache.commons.math3.ode.ContinuousOutputModel: int locatePoint(double,org.apache.commons.math3.ode.sampling.StepInterpolator)>($d0, r4);

        if i0 < 0 goto label02;

        r0.<org.apache.commons.math3.ode.ContinuousOutputModel: int index> = $i2;

        interfaceinvoke r4.<org.apache.commons.math3.ode.sampling.StepInterpolator: void setInterpolatedTime(double)>($d0);

        return;

     label02:
        i0 = $i2 - i1;

        if i0 <= 5 goto label10;

        $r1 = r0.<org.apache.commons.math3.ode.ContinuousOutputModel: java.util.List steps>;

        i0 = r0.<org.apache.commons.math3.ode.ContinuousOutputModel: int index>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        r3 = (org.apache.commons.math3.ode.sampling.StepInterpolator) $r2;

        i0 = specialinvoke r0.<org.apache.commons.math3.ode.ContinuousOutputModel: int locatePoint(double,org.apache.commons.math3.ode.sampling.StepInterpolator)>($d0, r3);

        if i0 >= 0 goto label06;

        $i2 = r0.<org.apache.commons.math3.ode.ContinuousOutputModel: int index>;

        $d8 = interfaceinvoke r3.<org.apache.commons.math3.ode.sampling.StepInterpolator: double getPreviousTime()>();

        d2 = interfaceinvoke r3.<org.apache.commons.math3.ode.sampling.StepInterpolator: double getCurrentTime()>();

        $d8 = $d8 + d2;

        $d8 = 0.5 * $d8;

     label03:
        i0 = i1 + $i2;

        i0 = i0 / 2;

        $r1 = r0.<org.apache.commons.math3.ode.ContinuousOutputModel: java.util.List steps>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        r3 = (org.apache.commons.math3.ode.sampling.StepInterpolator) $r2;

        d2 = interfaceinvoke r3.<org.apache.commons.math3.ode.sampling.StepInterpolator: double getPreviousTime()>();

        d1 = interfaceinvoke r3.<org.apache.commons.math3.ode.sampling.StepInterpolator: double getCurrentTime()>();

        d2 = d2 + d1;

        d5 = 0.5 * d2;

        d2 = d5 - $d7;

        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d2);

        $b3 = d2 cmpg 1.0E-6;

        if $b3 < 0 goto label04;

        d2 = $d8 - d5;

        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d2);

        $b3 = d2 cmpg 1.0E-6;

        if $b3 >= 0 goto label08;

     label04:
        r0.<org.apache.commons.math3.ode.ContinuousOutputModel: int index> = i0;

     label05:
        i0 = i1 + 1;

        $i4 = i1 * 9;

        $i4 = $i4 + $i2;

        $i4 = $i4 / 10;

        i0 = staticinvoke <org.apache.commons.math3.util.FastMath: int max(int,int)>(i0, $i4);

        $i4 = $i2 + -1;

        $i5 = $i2 * 9;

        $i5 = $i5 + i1;

        $i5 = $i5 / 10;

        $i4 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i4, $i5);

        $i5 = r0.<org.apache.commons.math3.ode.ContinuousOutputModel: int index>;

        if $i5 >= i0 goto label09;

        r0.<org.apache.commons.math3.ode.ContinuousOutputModel: int index> = i0;

        goto label02;

     label06:
        if i0 <= 0 goto label07;

        i1 = r0.<org.apache.commons.math3.ode.ContinuousOutputModel: int index>;

        $d7 = interfaceinvoke r3.<org.apache.commons.math3.ode.sampling.StepInterpolator: double getPreviousTime()>();

        d2 = interfaceinvoke r3.<org.apache.commons.math3.ode.sampling.StepInterpolator: double getCurrentTime()>();

        $d7 = $d7 + d2;

        $d7 = 0.5 * $d7;

        goto label03;

     label07:
        interfaceinvoke r3.<org.apache.commons.math3.ode.sampling.StepInterpolator: void setInterpolatedTime(double)>($d0);

        return;

     label08:
        d1 = $d8 - d5;

        d3 = d5 - $d7;

        d2 = $d8 - $d7;

        d4 = $d0 - $d8;

        d5 = $d0 - d5;

        d6 = $d0 - $d7;

        $d9 = d5 * d6;

        $d9 = $d9 * d3;

        $d10 = (double) $i2;

        $d9 = $d9 * $d10;

        d6 = d4 * d6;

        d6 = d6 * d2;

        $d10 = (double) i0;

        d6 = d6 * $d10;

        $d9 = $d9 - d6;

        d4 = d4 * d5;

        d4 = d4 * d1;

        d5 = (double) i1;

        d4 = d4 * d5;

        d4 = $d9 + d4;

        d1 = d1 * d3;

        d2 = d1 * d2;

        d2 = d4 / d2;

        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double rint(double)>(d2);

        i0 = (int) d2;

        r0.<org.apache.commons.math3.ode.ContinuousOutputModel: int index> = i0;

        goto label05;

     label09:
        i0 = r0.<org.apache.commons.math3.ode.ContinuousOutputModel: int index>;

        if i0 <= $i4 goto label02;

        r0.<org.apache.commons.math3.ode.ContinuousOutputModel: int index> = $i4;

        goto label02;

     label10:
        r0.<org.apache.commons.math3.ode.ContinuousOutputModel: int index> = i1;

     label11:
        i1 = r0.<org.apache.commons.math3.ode.ContinuousOutputModel: int index>;

        if i1 > $i2 goto label12;

        $r1 = r0.<org.apache.commons.math3.ode.ContinuousOutputModel: java.util.List steps>;

        i1 = r0.<org.apache.commons.math3.ode.ContinuousOutputModel: int index>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i1);

        r3 = (org.apache.commons.math3.ode.sampling.StepInterpolator) $r2;

        i1 = specialinvoke r0.<org.apache.commons.math3.ode.ContinuousOutputModel: int locatePoint(double,org.apache.commons.math3.ode.sampling.StepInterpolator)>($d0, r3);

        if i1 <= 0 goto label12;

        i1 = r0.<org.apache.commons.math3.ode.ContinuousOutputModel: int index>;

        i1 = i1 + 1;

        r0.<org.apache.commons.math3.ode.ContinuousOutputModel: int index> = i1;

        goto label11;

     label12:
        $r1 = r0.<org.apache.commons.math3.ode.ContinuousOutputModel: java.util.List steps>;

        $i2 = r0.<org.apache.commons.math3.ode.ContinuousOutputModel: int index>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i2);

        r3 = (org.apache.commons.math3.ode.sampling.StepInterpolator) $r2;

        interfaceinvoke r3.<org.apache.commons.math3.ode.sampling.StepInterpolator: void setInterpolatedTime(double)>($d0);

        return;
    }
