org.apache.commons.math3.ode.sampling.StepNormalizer extends java.lang.Object implements org.apache.commons.math3.ode.sampling.StepHandler
private final org.apache.commons.math3.ode.sampling.StepNormalizerBounds bounds
private double firstTime
private boolean forward
private double h
private final org.apache.commons.math3.ode.sampling.FixedStepHandler handler
private double[] lastDerivatives
private double[] lastState
private double lastTime
private final org.apache.commons.math3.ode.sampling.StepNormalizerMode mode
    public void <init>(double, org.apache.commons.math3.ode.sampling.FixedStepHandler)
    {
        org.apache.commons.math3.ode.sampling.StepNormalizer r0;
        double $d0;
        org.apache.commons.math3.ode.sampling.FixedStepHandler $r1;
        org.apache.commons.math3.ode.sampling.StepNormalizerMode $r2;
        org.apache.commons.math3.ode.sampling.StepNormalizerBounds $r3;

        r0 := @this: org.apache.commons.math3.ode.sampling.StepNormalizer;

        $d0 := @parameter0: double;

        $r1 := @parameter1: org.apache.commons.math3.ode.sampling.FixedStepHandler;

        $r2 = <org.apache.commons.math3.ode.sampling.StepNormalizerMode: org.apache.commons.math3.ode.sampling.StepNormalizerMode INCREMENT>;

        $r3 = <org.apache.commons.math3.ode.sampling.StepNormalizerBounds: org.apache.commons.math3.ode.sampling.StepNormalizerBounds FIRST>;

        specialinvoke r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: void <init>(double,org.apache.commons.math3.ode.sampling.FixedStepHandler,org.apache.commons.math3.ode.sampling.StepNormalizerMode,org.apache.commons.math3.ode.sampling.StepNormalizerBounds)>($d0, $r1, $r2, $r3);

        return;
    }
    public void <init>(double, org.apache.commons.math3.ode.sampling.FixedStepHandler, org.apache.commons.math3.ode.sampling.StepNormalizerBounds)
    {
        org.apache.commons.math3.ode.sampling.StepNormalizer r0;
        double $d0;
        org.apache.commons.math3.ode.sampling.FixedStepHandler $r1;
        org.apache.commons.math3.ode.sampling.StepNormalizerBounds $r2;
        org.apache.commons.math3.ode.sampling.StepNormalizerMode $r3;

        r0 := @this: org.apache.commons.math3.ode.sampling.StepNormalizer;

        $d0 := @parameter0: double;

        $r1 := @parameter1: org.apache.commons.math3.ode.sampling.FixedStepHandler;

        $r2 := @parameter2: org.apache.commons.math3.ode.sampling.StepNormalizerBounds;

        $r3 = <org.apache.commons.math3.ode.sampling.StepNormalizerMode: org.apache.commons.math3.ode.sampling.StepNormalizerMode INCREMENT>;

        specialinvoke r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: void <init>(double,org.apache.commons.math3.ode.sampling.FixedStepHandler,org.apache.commons.math3.ode.sampling.StepNormalizerMode,org.apache.commons.math3.ode.sampling.StepNormalizerBounds)>($d0, $r1, $r3, $r2);

        return;
    }
    public void <init>(double, org.apache.commons.math3.ode.sampling.FixedStepHandler, org.apache.commons.math3.ode.sampling.StepNormalizerMode)
    {
        org.apache.commons.math3.ode.sampling.StepNormalizer r0;
        double $d0;
        org.apache.commons.math3.ode.sampling.FixedStepHandler $r1;
        org.apache.commons.math3.ode.sampling.StepNormalizerMode $r2;
        org.apache.commons.math3.ode.sampling.StepNormalizerBounds $r3;

        r0 := @this: org.apache.commons.math3.ode.sampling.StepNormalizer;

        $d0 := @parameter0: double;

        $r1 := @parameter1: org.apache.commons.math3.ode.sampling.FixedStepHandler;

        $r2 := @parameter2: org.apache.commons.math3.ode.sampling.StepNormalizerMode;

        $r3 = <org.apache.commons.math3.ode.sampling.StepNormalizerBounds: org.apache.commons.math3.ode.sampling.StepNormalizerBounds FIRST>;

        specialinvoke r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: void <init>(double,org.apache.commons.math3.ode.sampling.FixedStepHandler,org.apache.commons.math3.ode.sampling.StepNormalizerMode,org.apache.commons.math3.ode.sampling.StepNormalizerBounds)>($d0, $r1, $r2, $r3);

        return;
    }
    public void <init>(double, org.apache.commons.math3.ode.sampling.FixedStepHandler, org.apache.commons.math3.ode.sampling.StepNormalizerMode, org.apache.commons.math3.ode.sampling.StepNormalizerBounds)
    {
        org.apache.commons.math3.ode.sampling.StepNormalizer r0;
        double $d0;
        org.apache.commons.math3.ode.sampling.FixedStepHandler $r1;
        org.apache.commons.math3.ode.sampling.StepNormalizerMode $r2;
        org.apache.commons.math3.ode.sampling.StepNormalizerBounds $r3;

        r0 := @this: org.apache.commons.math3.ode.sampling.StepNormalizer;

        $d0 := @parameter0: double;

        $r1 := @parameter1: org.apache.commons.math3.ode.sampling.FixedStepHandler;

        $r2 := @parameter2: org.apache.commons.math3.ode.sampling.StepNormalizerMode;

        $r3 := @parameter3: org.apache.commons.math3.ode.sampling.StepNormalizerBounds;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double h> = $d0;

        r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: org.apache.commons.math3.ode.sampling.FixedStepHandler handler> = $r1;

        r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: org.apache.commons.math3.ode.sampling.StepNormalizerMode mode> = $r2;

        r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: org.apache.commons.math3.ode.sampling.StepNormalizerBounds bounds> = $r3;

        r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double firstTime> = #NaN;

        r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double lastTime> = #NaN;

        r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double[] lastState> = null;

        r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double[] lastDerivatives> = null;

        r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: boolean forward> = 1;

        return;
    }
    private void doNormalizedStep(boolean)
    {
        org.apache.commons.math3.ode.sampling.StepNormalizer r0;
        boolean $z0, $z1;
        org.apache.commons.math3.ode.sampling.FixedStepHandler $r1;
        double[] $r2, $r3;
        org.apache.commons.math3.ode.sampling.StepNormalizerBounds $r4;
        double $d0, $d1;
        byte $b0;

        r0 := @this: org.apache.commons.math3.ode.sampling.StepNormalizer;

        $z0 := @parameter0: boolean;

        $r4 = r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: org.apache.commons.math3.ode.sampling.StepNormalizerBounds bounds>;

        $z1 = virtualinvoke $r4.<org.apache.commons.math3.ode.sampling.StepNormalizerBounds: boolean firstIncluded()>();

        if $z1 != 0 goto label1;

        $d0 = r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double firstTime>;

        $d1 = r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double lastTime>;

        $b0 = $d0 cmpl $d1;

        if $b0 != 0 goto label1;

        return;

     label1:
        $r1 = r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: org.apache.commons.math3.ode.sampling.FixedStepHandler handler>;

        $d0 = r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double lastTime>;

        $r2 = r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double[] lastState>;

        $r3 = r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double[] lastDerivatives>;

        interfaceinvoke $r1.<org.apache.commons.math3.ode.sampling.FixedStepHandler: void handleStep(double,double[],double[],boolean)>($d0, $r2, $r3, $z0);

        return;
    }
    private boolean isNextInStep(double, org.apache.commons.math3.ode.sampling.StepInterpolator)
    {
        org.apache.commons.math3.ode.sampling.StepNormalizer r0;
        double $d0, $d1;
        org.apache.commons.math3.ode.sampling.StepInterpolator $r1;
        boolean $z0;
        byte $b0;

        r0 := @this: org.apache.commons.math3.ode.sampling.StepNormalizer;

        $d0 := @parameter0: double;

        $r1 := @parameter1: org.apache.commons.math3.ode.sampling.StepInterpolator;

        $z0 = r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: boolean forward>;

        if $z0 == 0 goto label2;

        $d1 = interfaceinvoke $r1.<org.apache.commons.math3.ode.sampling.StepInterpolator: double getCurrentTime()>();

        $b0 = $d0 cmpg $d1;

        if $b0 > 0 goto label1;

        return 1;

     label1:
        return 0;

     label2:
        $d1 = interfaceinvoke $r1.<org.apache.commons.math3.ode.sampling.StepInterpolator: double getCurrentTime()>();

        $b0 = $d0 cmpl $d1;

        if $b0 >= 0 goto label3;

        return 0;

     label3:
        return 1;
    }
    private void storeStep(org.apache.commons.math3.ode.sampling.StepInterpolator, double) throws org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.ode.sampling.StepNormalizer r0;
        org.apache.commons.math3.ode.sampling.StepInterpolator $r1;
        double $d0;
        double[] $r2, $r3, $r4;
        int $i0;

        r0 := @this: org.apache.commons.math3.ode.sampling.StepNormalizer;

        $r1 := @parameter0: org.apache.commons.math3.ode.sampling.StepInterpolator;

        $d0 := @parameter1: double;

        r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double lastTime> = $d0;

        $d0 = r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double lastTime>;

        interfaceinvoke $r1.<org.apache.commons.math3.ode.sampling.StepInterpolator: void setInterpolatedTime(double)>($d0);

        $r2 = interfaceinvoke $r1.<org.apache.commons.math3.ode.sampling.StepInterpolator: double[] getInterpolatedState()>();

        $r3 = r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double[] lastState>;

        $r4 = r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double[] lastState>;

        $i0 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r3, 0, $i0);

        $r2 = interfaceinvoke $r1.<org.apache.commons.math3.ode.sampling.StepInterpolator: double[] getInterpolatedDerivatives()>();

        $r3 = r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double[] lastDerivatives>;

        $r4 = r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double[] lastDerivatives>;

        $i0 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r3, 0, $i0);

        return;
    }
    public void handleStep(org.apache.commons.math3.ode.sampling.StepInterpolator, boolean) throws org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.ode.sampling.StepNormalizer r0;
        org.apache.commons.math3.ode.sampling.StepInterpolator $r1;
        boolean $z0, $z1, $z2;
        double[] $r2;
        double $d0, $d1;
        java.lang.Object $r3;
        byte $b0;
        org.apache.commons.math3.ode.sampling.StepNormalizerMode $r4, $r5;
        org.apache.commons.math3.ode.sampling.StepNormalizerBounds $r6;

        r0 := @this: org.apache.commons.math3.ode.sampling.StepNormalizer;

        $r1 := @parameter0: org.apache.commons.math3.ode.sampling.StepInterpolator;

        $z0 := @parameter1: boolean;

        $z1 = 0;

        $r2 = r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double[] lastState>;

        if $r2 != null goto label02;

        $d0 = interfaceinvoke $r1.<org.apache.commons.math3.ode.sampling.StepInterpolator: double getPreviousTime()>();

        r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double firstTime> = $d0;

        $d0 = interfaceinvoke $r1.<org.apache.commons.math3.ode.sampling.StepInterpolator: double getPreviousTime()>();

        r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double lastTime> = $d0;

        $d0 = r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double lastTime>;

        interfaceinvoke $r1.<org.apache.commons.math3.ode.sampling.StepInterpolator: void setInterpolatedTime(double)>($d0);

        $r2 = interfaceinvoke $r1.<org.apache.commons.math3.ode.sampling.StepInterpolator: double[] getInterpolatedState()>();

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (double[]) $r3;

        r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double[] lastState> = $r2;

        $r2 = interfaceinvoke $r1.<org.apache.commons.math3.ode.sampling.StepInterpolator: double[] getInterpolatedDerivatives()>();

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (double[]) $r3;

        r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double[] lastDerivatives> = $r2;

        $d0 = interfaceinvoke $r1.<org.apache.commons.math3.ode.sampling.StepInterpolator: double getCurrentTime()>();

        $d1 = r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double lastTime>;

        $b0 = $d0 cmpl $d1;

        if $b0 < 0 goto label06;

        $z2 = 1;

     label01:
        r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: boolean forward> = $z2;

        $z2 = r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: boolean forward>;

        if $z2 != 0 goto label02;

        $d0 = r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double h>;

        $d0 = neg $d0;

        r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double h> = $d0;

     label02:
        $r4 = r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: org.apache.commons.math3.ode.sampling.StepNormalizerMode mode>;

        $r5 = <org.apache.commons.math3.ode.sampling.StepNormalizerMode: org.apache.commons.math3.ode.sampling.StepNormalizerMode INCREMENT>;

        if $r4 != $r5 goto label07;

        $d0 = r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double lastTime>;

        $d1 = r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double h>;

        $d0 = $d0 + $d1;

     label03:
        $r4 = r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: org.apache.commons.math3.ode.sampling.StepNormalizerMode mode>;

        $r5 = <org.apache.commons.math3.ode.sampling.StepNormalizerMode: org.apache.commons.math3.ode.sampling.StepNormalizerMode MULTIPLES>;

        if $r4 != $r5 goto label04;

        $d1 = r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double lastTime>;

        $z2 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,int)>($d0, $d1, 1);

        if $z2 == 0 goto label04;

        $d1 = r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double h>;

        $d0 = $d0 + $d1;

     label04:
        $z2 = specialinvoke r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: boolean isNextInStep(double,org.apache.commons.math3.ode.sampling.StepInterpolator)>($d0, $r1);

     label05:
        if $z2 == 0 goto label08;

        specialinvoke r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: void doNormalizedStep(boolean)>(0);

        specialinvoke r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: void storeStep(org.apache.commons.math3.ode.sampling.StepInterpolator,double)>($r1, $d0);

        $d1 = r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double h>;

        $d0 = $d0 + $d1;

        $z2 = specialinvoke r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: boolean isNextInStep(double,org.apache.commons.math3.ode.sampling.StepInterpolator)>($d0, $r1);

        goto label05;

     label06:
        $z2 = 0;

        goto label01;

     label07:
        $d0 = r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double lastTime>;

        $d1 = r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double h>;

        $d0 = $d0 / $d1;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double floor(double)>($d0);

        $d0 = $d0 + 1.0;

        $d1 = r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double h>;

        $d0 = $d0 * $d1;

        goto label03;

     label08:
        if $z0 == 0 goto label12;

        $r6 = r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: org.apache.commons.math3.ode.sampling.StepNormalizerBounds bounds>;

        $z0 = virtualinvoke $r6.<org.apache.commons.math3.ode.sampling.StepNormalizerBounds: boolean lastIncluded()>();

        if $z0 == 0 goto label11;

        $d0 = r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double lastTime>;

        $d1 = interfaceinvoke $r1.<org.apache.commons.math3.ode.sampling.StepInterpolator: double getCurrentTime()>();

        $b0 = $d0 cmpl $d1;

        if $b0 == 0 goto label11;

        $z0 = 1;

     label09:
        if $z0 != 0 goto label10;

        $z1 = 1;

     label10:
        specialinvoke r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: void doNormalizedStep(boolean)>($z1);

        if $z0 == 0 goto label12;

        $d0 = interfaceinvoke $r1.<org.apache.commons.math3.ode.sampling.StepInterpolator: double getCurrentTime()>();

        specialinvoke r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: void storeStep(org.apache.commons.math3.ode.sampling.StepInterpolator,double)>($r1, $d0);

        specialinvoke r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: void doNormalizedStep(boolean)>(1);

        return;

     label11:
        $z0 = 0;

        goto label09;

     label12:
        return;
    }
    public void init(double, double[], double)
    {
        org.apache.commons.math3.ode.sampling.StepNormalizer r0;
        double $d0, $d1;
        double[] $r1;
        org.apache.commons.math3.ode.sampling.FixedStepHandler $r2;

        r0 := @this: org.apache.commons.math3.ode.sampling.StepNormalizer;

        $d0 := @parameter0: double;

        $r1 := @parameter1: double[];

        $d1 := @parameter2: double;

        r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double firstTime> = #NaN;

        r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double lastTime> = #NaN;

        r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double[] lastState> = null;

        r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double[] lastDerivatives> = null;

        r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: boolean forward> = 1;

        $r2 = r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: org.apache.commons.math3.ode.sampling.FixedStepHandler handler>;

        interfaceinvoke $r2.<org.apache.commons.math3.ode.sampling.FixedStepHandler: void init(double,double[],double)>($d0, $r1, $d1);

        return;
    }
