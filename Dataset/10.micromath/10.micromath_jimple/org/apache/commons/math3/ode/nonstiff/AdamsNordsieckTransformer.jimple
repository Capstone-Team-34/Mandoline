org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer extends java.lang.Object
private static final java.util.Map CACHE
private final double[] c1
private final org.apache.commons.math3.linear.Array2DRowRealMatrix update
    static void <clinit>()
    {
        java.util.HashMap $r0;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer: java.util.Map CACHE> = $r0;

        return;
    }
    private void <init>(int)
    {
        org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer r0;
        int $i0, $i1, $i2;
        org.apache.commons.math3.fraction.BigFraction[] r1, $r11;
        org.apache.commons.math3.linear.FieldMatrix $r2;
        org.apache.commons.math3.linear.FieldLUDecomposition $r3;
        org.apache.commons.math3.linear.FieldDecompositionSolver $r4;
        org.apache.commons.math3.fraction.BigFraction $r5;
        org.apache.commons.math3.linear.ArrayFieldVector $r6;
        org.apache.commons.math3.linear.FieldVector $r7;
        org.apache.commons.math3.FieldElement[] $r8;
        org.apache.commons.math3.FieldElement[][] $r9;
        org.apache.commons.math3.fraction.BigFraction[][] r10;
        org.apache.commons.math3.linear.Array2DRowFieldMatrix $r12;
        org.apache.commons.math3.linear.Array2DRowRealMatrix $r13;
        double[] $r14;
        double $d0;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer;

        $i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = $i0 + -1;

        $r2 = specialinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer: org.apache.commons.math3.linear.FieldMatrix buildP(int)>($i0);

        $r3 = new org.apache.commons.math3.linear.FieldLUDecomposition;

        specialinvoke $r3.<org.apache.commons.math3.linear.FieldLUDecomposition: void <init>(org.apache.commons.math3.linear.FieldMatrix)>($r2);

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.linear.FieldLUDecomposition: org.apache.commons.math3.linear.FieldDecompositionSolver getSolver()>();

        r1 = newarray (org.apache.commons.math3.fraction.BigFraction)[$i0];

        $r5 = <org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction ONE>;

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>(r1, $r5);

        $r6 = new org.apache.commons.math3.linear.ArrayFieldVector;

        specialinvoke $r6.<org.apache.commons.math3.linear.ArrayFieldVector: void <init>(org.apache.commons.math3.FieldElement[],boolean)>(r1, 0);

        $r7 = interfaceinvoke $r4.<org.apache.commons.math3.linear.FieldDecompositionSolver: org.apache.commons.math3.linear.FieldVector solve(org.apache.commons.math3.linear.FieldVector)>($r6);

        $r8 = interfaceinvoke $r7.<org.apache.commons.math3.linear.FieldVector: org.apache.commons.math3.FieldElement[] toArray()>();

        r1 = (org.apache.commons.math3.fraction.BigFraction[]) $r8;

        $r9 = interfaceinvoke $r2.<org.apache.commons.math3.linear.FieldMatrix: org.apache.commons.math3.FieldElement[][] getData()>();

        r10 = (org.apache.commons.math3.fraction.BigFraction[][]) $r9;

        $i1 = lengthof r10;

        $i1 = $i1 + -1;

     label1:
        if $i1 <= 0 goto label2;

        $i2 = $i1 + -1;

        $r11 = r10[$i2];

        r10[$i1] = $r11;

        $i1 = $i1 + -1;

        goto label1;

     label2:
        $r11 = newarray (org.apache.commons.math3.fraction.BigFraction)[$i0];

        r10[0] = $r11;

        $r11 = r10[0];

        $r5 = <org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction ZERO>;

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>($r11, $r5);

        $r12 = new org.apache.commons.math3.linear.Array2DRowFieldMatrix;

        specialinvoke $r12.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: void <init>(org.apache.commons.math3.FieldElement[][],boolean)>(r10, 0);

        $r2 = interfaceinvoke $r4.<org.apache.commons.math3.linear.FieldDecompositionSolver: org.apache.commons.math3.linear.FieldMatrix solve(org.apache.commons.math3.linear.FieldMatrix)>($r12);

        $r13 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.Array2DRowRealMatrix bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)>($r2);

        r0.<org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer: org.apache.commons.math3.linear.Array2DRowRealMatrix update> = $r13;

        $r14 = newarray (double)[$i0];

        r0.<org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer: double[] c1> = $r14;

        $i1 = 0;

     label3:
        if $i1 >= $i0 goto label4;

        $r14 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer: double[] c1>;

        $r5 = r1[$i1];

        $d0 = virtualinvoke $r5.<org.apache.commons.math3.fraction.BigFraction: double doubleValue()>();

        $r14[$i1] = $d0;

        $i1 = $i1 + 1;

        goto label3;

     label4:
        return;
    }
    private org.apache.commons.math3.linear.FieldMatrix buildP(int)
    {
        org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer r0;
        int $i0, i1, i2, i3, $i4, $i5;
        org.apache.commons.math3.fraction.BigFraction[] r1;
        int[] $r2;
        java.lang.Object $r3;
        org.apache.commons.math3.fraction.BigFraction[][] r4;
        org.apache.commons.math3.fraction.BigFraction $r5;
        org.apache.commons.math3.linear.Array2DRowFieldMatrix $r6;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer;

        $i0 := @parameter0: int;

        $r2 = newarray (int)[2];

        $r2[0] = $i0;

        $r2[1] = $i0;

        $r3 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>(class "Lorg/apache/commons/math3/fraction/BigFraction;", $r2);

        r4 = (org.apache.commons.math3.fraction.BigFraction[][]) $r3;

        $i0 = 1;

     label1:
        i1 = lengthof r4;

        if $i0 > i1 goto label4;

        i1 = $i0 + -1;

        r1 = r4[i1];

        i1 = neg $i0;

        i2 = i1;

        i3 = 1;

     label2:
        $i4 = lengthof r1;

        if i3 > $i4 goto label3;

        $i4 = i3 + -1;

        $r5 = new org.apache.commons.math3.fraction.BigFraction;

        $i5 = i3 + 1;

        $i5 = $i5 * i2;

        specialinvoke $r5.<org.apache.commons.math3.fraction.BigFraction: void <init>(int)>($i5);

        r1[$i4] = $r5;

        i2 = i2 * i1;

        i3 = i3 + 1;

        goto label2;

     label3:
        $i0 = $i0 + 1;

        goto label1;

     label4:
        $r6 = new org.apache.commons.math3.linear.Array2DRowFieldMatrix;

        specialinvoke $r6.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: void <init>(org.apache.commons.math3.FieldElement[][],boolean)>(r4, 0);

        return $r6;
    }
    public static org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer getInstance(int)
    {
        int $i0;
        java.util.Map $r0, $r1;
        java.lang.Integer $r2;
        java.lang.Object $r3;
        org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer r4;
        java.lang.Throwable $r5;

        $i0 := @parameter0: int;

        $r0 = <org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer: java.util.Map CACHE>;

        entermonitor $r0;

     label1:
        $r1 = <org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer: java.util.Map CACHE>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        r4 = (org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer) $r3;

        if r4 != null goto label2;

        r4 = new org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer;

        specialinvoke r4.<org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer: void <init>(int)>($i0);

        $r1 = <org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer: java.util.Map CACHE>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, r4);

     label2:
        exitmonitor $r0;

     label3:
        return r4;

     label4:
        $r5 := @caughtexception;

        exitmonitor $r0;

     label5:
        throw $r5;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }
    public int getNSteps()
    {
        org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer r0;
        double[] $r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer;

        $r1 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer: double[] c1>;

        $i0 = lengthof $r1;

        return $i0;
    }
    public org.apache.commons.math3.linear.Array2DRowRealMatrix initializeHighOrderDerivatives(double, double[], double[][], double[][])
    {
        org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer r0;
        double $d0, d1, d2, d3, $d4;
        double[] $r1, r4, r7, r8, r9, r10, r16;
        double[][] $r2, $r3, r14, r15;
        org.apache.commons.math3.linear.QRDecomposition r5;
        org.apache.commons.math3.linear.Array2DRowRealMatrix r6;
        int $i0, $i1, $i2;
        int[] $r11;
        java.lang.Class $r12;
        java.lang.Object $r13;
        org.apache.commons.math3.linear.DecompositionSolver $r17;
        org.apache.commons.math3.linear.RealMatrix $r18;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer;

        $d0 := @parameter0: double;

        $r1 := @parameter1: double[];

        $r2 := @parameter2: double[][];

        $r3 := @parameter3: double[][];

        r7 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer: double[] c1>;

        $i0 = lengthof r7;

        $i0 = $i0 + 1;

        r7 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer: double[] c1>;

        $i1 = lengthof r7;

        $i1 = $i1 + 1;

        $r11 = newarray (int)[2];

        $r11[0] = $i0;

        $r11[1] = $i1;

        $r12 = <java.lang.Double: java.lang.Class TYPE>;

        $r13 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r12, $r11);

        r14 = (double[][]) $r13;

        r7 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer: double[] c1>;

        $i0 = lengthof r7;

        $i0 = $i0 + 1;

        r7 = $r2[0];

        $i1 = lengthof r7;

        $r11 = newarray (int)[2];

        $r11[0] = $i0;

        $r11[1] = $i1;

        $r12 = <java.lang.Double: java.lang.Class TYPE>;

        $r13 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r12, $r11);

        r15 = (double[][]) $r13;

        r7 = $r2[0];

        r8 = $r3[0];

        $i0 = 1;

     label01:
        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label12;

        d1 = $r1[$i0];

        d2 = $r1[0];

        d1 = d1 - d2;

        d2 = d1 / $d0;

        d3 = 1.0 / $d0;

        $i1 = $i0 * 2;

        $i1 = $i1 + -2;

        r4 = r14[$i1];

        $i1 = $i0 * 2;

        $i1 = $i1 + -1;

        $i2 = lengthof r14;

        if $i1 >= $i2 goto label05;

        $i1 = $i0 * 2;

        $i1 = $i1 + -1;

        r9 = r14[$i1];

     label02:
        $i1 = 0;

     label03:
        $i2 = lengthof r4;

        if $i1 >= $i2 goto label06;

        d3 = d3 * d2;

        $d4 = d1 * d3;

        r4[$i1] = $d4;

        if r9 == null goto label04;

        $i2 = $i1 + 2;

        $d4 = (double) $i2;

        $d4 = $d4 * d3;

        r9[$i1] = $d4;

     label04:
        $i1 = $i1 + 1;

        goto label03;

     label05:
        r9 = null;

        goto label02;

     label06:
        r10 = $r2[$i0];

        r9 = $r3[$i0];

        $i1 = $i0 * 2;

        $i1 = $i1 + -2;

        r4 = r15[$i1];

        $i1 = $i0 * 2;

        $i1 = $i1 + -1;

        $i2 = lengthof r15;

        if $i1 >= $i2 goto label10;

        $i1 = $i0 * 2;

        $i1 = $i1 + -1;

        r16 = r15[$i1];

     label07:
        $i1 = 0;

     label08:
        $i2 = lengthof r10;

        if $i1 >= $i2 goto label11;

        d2 = r10[$i1];

        d3 = r7[$i1];

        d2 = d2 - d3;

        d3 = r8[$i1];

        d3 = d3 * d1;

        d2 = d2 - d3;

        r4[$i1] = d2;

        if r16 == null goto label09;

        d2 = r9[$i1];

        d3 = r8[$i1];

        d2 = d2 - d3;

        r16[$i1] = d2;

     label09:
        $i1 = $i1 + 1;

        goto label08;

     label10:
        r16 = null;

        goto label07;

     label11:
        $i0 = $i0 + 1;

        goto label01;

     label12:
        r5 = new org.apache.commons.math3.linear.QRDecomposition;

        r6 = new org.apache.commons.math3.linear.Array2DRowRealMatrix;

        specialinvoke r6.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void <init>(double[][],boolean)>(r14, 0);

        specialinvoke r5.<org.apache.commons.math3.linear.QRDecomposition: void <init>(org.apache.commons.math3.linear.RealMatrix)>(r6);

        $r17 = virtualinvoke r5.<org.apache.commons.math3.linear.QRDecomposition: org.apache.commons.math3.linear.DecompositionSolver getSolver()>();

        r6 = new org.apache.commons.math3.linear.Array2DRowRealMatrix;

        specialinvoke r6.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void <init>(double[][],boolean)>(r15, 0);

        $r18 = interfaceinvoke $r17.<org.apache.commons.math3.linear.DecompositionSolver: org.apache.commons.math3.linear.RealMatrix solve(org.apache.commons.math3.linear.RealMatrix)>(r6);

        r6 = new org.apache.commons.math3.linear.Array2DRowRealMatrix;

        $i0 = interfaceinvoke $r18.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $i0 = $i0 + -1;

        $i1 = interfaceinvoke $r18.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        specialinvoke r6.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void <init>(int,int)>($i0, $i1);

        $i0 = 0;

     label13:
        $i1 = virtualinvoke r6.<org.apache.commons.math3.linear.Array2DRowRealMatrix: int getRowDimension()>();

        if $i0 >= $i1 goto label16;

        $i1 = 0;

     label14:
        $i2 = virtualinvoke r6.<org.apache.commons.math3.linear.Array2DRowRealMatrix: int getColumnDimension()>();

        if $i1 >= $i2 goto label15;

        $d0 = interfaceinvoke $r18.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>($i0, $i1);

        virtualinvoke r6.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void setEntry(int,int,double)>($i0, $i1, $d0);

        $i1 = $i1 + 1;

        goto label14;

     label15:
        $i0 = $i0 + 1;

        goto label13;

     label16:
        return r6;
    }
    public org.apache.commons.math3.linear.Array2DRowRealMatrix updateHighOrderDerivativesPhase1(org.apache.commons.math3.linear.Array2DRowRealMatrix)
    {
        org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer r0;
        org.apache.commons.math3.linear.Array2DRowRealMatrix $r1, $r2;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer;

        $r1 := @parameter0: org.apache.commons.math3.linear.Array2DRowRealMatrix;

        $r2 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer: org.apache.commons.math3.linear.Array2DRowRealMatrix update>;

        $r1 = virtualinvoke $r2.<org.apache.commons.math3.linear.Array2DRowRealMatrix: org.apache.commons.math3.linear.Array2DRowRealMatrix multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix)>($r1);

        return $r1;
    }
    public void updateHighOrderDerivativesPhase2(double[], double[], org.apache.commons.math3.linear.Array2DRowRealMatrix)
    {
        org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer r0;
        double[] $r1, $r2, r4, $r6;
        org.apache.commons.math3.linear.Array2DRowRealMatrix $r3;
        double d0, $d1, $d2, $d3;
        double[][] $r5;
        int i0, $i1, $i2;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[];

        $r3 := @parameter2: org.apache.commons.math3.linear.Array2DRowRealMatrix;

        $r5 = virtualinvoke $r3.<org.apache.commons.math3.linear.Array2DRowRealMatrix: double[][] getDataRef()>();

        i0 = 0;

     label1:
        $i1 = lengthof $r5;

        if i0 >= $i1 goto label4;

        r4 = $r5[i0];

        $r6 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer: double[] c1>;

        d0 = $r6[i0];

        $i1 = 0;

     label2:
        $i2 = lengthof r4;

        if $i1 >= $i2 goto label3;

        $d2 = r4[$i1];

        $d3 = $r1[$i1];

        $d1 = $r2[$i1];

        $d1 = $d3 - $d1;

        $d1 = $d1 * d0;

        $d2 = $d2 + $d1;

        r4[$i1] = $d2;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        i0 = i0 + 1;

        goto label1;

     label4:
        return;
    }
