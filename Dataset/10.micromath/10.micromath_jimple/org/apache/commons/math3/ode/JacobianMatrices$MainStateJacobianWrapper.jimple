org.apache.commons.math3.ode.JacobianMatrices$MainStateJacobianWrapper extends java.lang.Object implements org.apache.commons.math3.ode.MainStateJacobianProvider
private final double[] hY
private final org.apache.commons.math3.ode.FirstOrderDifferentialEquations ode
    void <init>(org.apache.commons.math3.ode.FirstOrderDifferentialEquations, double[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.ode.JacobianMatrices$MainStateJacobianWrapper r0;
        org.apache.commons.math3.ode.FirstOrderDifferentialEquations $r1;
        double[] $r2, $r4;
        int $i0, $i1;
        java.lang.Object $r3;
        org.apache.commons.math3.exception.DimensionMismatchException $r5;

        r0 := @this: org.apache.commons.math3.ode.JacobianMatrices$MainStateJacobianWrapper;

        $r1 := @parameter0: org.apache.commons.math3.ode.FirstOrderDifferentialEquations;

        $r2 := @parameter1: double[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.ode.JacobianMatrices$MainStateJacobianWrapper: org.apache.commons.math3.ode.FirstOrderDifferentialEquations ode> = $r1;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r4 = (double[]) $r3;

        r0.<org.apache.commons.math3.ode.JacobianMatrices$MainStateJacobianWrapper: double[] hY> = $r4;

        $i0 = lengthof $r2;

        $i1 = interfaceinvoke $r1.<org.apache.commons.math3.ode.FirstOrderDifferentialEquations: int getDimension()>();

        if $i0 == $i1 goto label1;

        $r5 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i1 = interfaceinvoke $r1.<org.apache.commons.math3.ode.FirstOrderDifferentialEquations: int getDimension()>();

        $i0 = lengthof $r2;

        specialinvoke $r5.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i1, $i0);

        throw $r5;

     label1:
        return;
    }
    static org.apache.commons.math3.ode.FirstOrderDifferentialEquations access$000(org.apache.commons.math3.ode.JacobianMatrices$MainStateJacobianWrapper)
    {
        org.apache.commons.math3.ode.JacobianMatrices$MainStateJacobianWrapper $r0;
        org.apache.commons.math3.ode.FirstOrderDifferentialEquations r1;

        $r0 := @parameter0: org.apache.commons.math3.ode.JacobianMatrices$MainStateJacobianWrapper;

        r1 = $r0.<org.apache.commons.math3.ode.JacobianMatrices$MainStateJacobianWrapper: org.apache.commons.math3.ode.FirstOrderDifferentialEquations ode>;

        return r1;
    }
    public void computeDerivatives(double, double[], double[]) throws org.apache.commons.math3.exception.MaxCountExceededException, org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.ode.JacobianMatrices$MainStateJacobianWrapper r0;
        double $d0;
        double[] $r1, $r2;
        org.apache.commons.math3.ode.FirstOrderDifferentialEquations $r3;

        r0 := @this: org.apache.commons.math3.ode.JacobianMatrices$MainStateJacobianWrapper;

        $d0 := @parameter0: double;

        $r1 := @parameter1: double[];

        $r2 := @parameter2: double[];

        $r3 = r0.<org.apache.commons.math3.ode.JacobianMatrices$MainStateJacobianWrapper: org.apache.commons.math3.ode.FirstOrderDifferentialEquations ode>;

        interfaceinvoke $r3.<org.apache.commons.math3.ode.FirstOrderDifferentialEquations: void computeDerivatives(double,double[],double[])>($d0, $r1, $r2);

        return;
    }
    public void computeMainStateJacobian(double, double[], double[], double[][]) throws org.apache.commons.math3.exception.MaxCountExceededException, org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.ode.JacobianMatrices$MainStateJacobianWrapper r0;
        double $d0, d1, $d2, $d3;
        double[] $r1, $r2, r4, $r5, $r7;
        double[][] $r3;
        int $i0, i1, i2;
        org.apache.commons.math3.ode.FirstOrderDifferentialEquations $r6;

        r0 := @this: org.apache.commons.math3.ode.JacobianMatrices$MainStateJacobianWrapper;

        $d0 := @parameter0: double;

        $r1 := @parameter1: double[];

        $r2 := @parameter2: double[];

        $r3 := @parameter3: double[][];

        $r6 = r0.<org.apache.commons.math3.ode.JacobianMatrices$MainStateJacobianWrapper: org.apache.commons.math3.ode.FirstOrderDifferentialEquations ode>;

        $i0 = interfaceinvoke $r6.<org.apache.commons.math3.ode.FirstOrderDifferentialEquations: int getDimension()>();

        r4 = newarray (double)[$i0];

        i1 = 0;

     label1:
        if i1 >= $i0 goto label4;

        d1 = $r1[i1];

        $d2 = $r1[i1];

        $r5 = r0.<org.apache.commons.math3.ode.JacobianMatrices$MainStateJacobianWrapper: double[] hY>;

        $d3 = $r5[i1];

        $d2 = $d2 + $d3;

        $r1[i1] = $d2;

        $r6 = r0.<org.apache.commons.math3.ode.JacobianMatrices$MainStateJacobianWrapper: org.apache.commons.math3.ode.FirstOrderDifferentialEquations ode>;

        interfaceinvoke $r6.<org.apache.commons.math3.ode.FirstOrderDifferentialEquations: void computeDerivatives(double,double[],double[])>($d0, $r1, r4);

        i2 = 0;

     label2:
        if i2 >= $i0 goto label3;

        $r7 = $r3[i2];

        $d2 = r4[i2];

        $d3 = $r2[i2];

        $d2 = $d2 - $d3;

        $r5 = r0.<org.apache.commons.math3.ode.JacobianMatrices$MainStateJacobianWrapper: double[] hY>;

        $d3 = $r5[i1];

        $d2 = $d2 / $d3;

        $r7[i1] = $d2;

        i2 = i2 + 1;

        goto label2;

     label3:
        $r1[i1] = d1;

        i1 = i1 + 1;

        goto label1;

     label4:
        return;
    }
    public int getDimension()
    {
        org.apache.commons.math3.ode.JacobianMatrices$MainStateJacobianWrapper r0;
        int $i0;
        org.apache.commons.math3.ode.FirstOrderDifferentialEquations $r1;

        r0 := @this: org.apache.commons.math3.ode.JacobianMatrices$MainStateJacobianWrapper;

        $r1 = r0.<org.apache.commons.math3.ode.JacobianMatrices$MainStateJacobianWrapper: org.apache.commons.math3.ode.FirstOrderDifferentialEquations ode>;

        $i0 = interfaceinvoke $r1.<org.apache.commons.math3.ode.FirstOrderDifferentialEquations: int getDimension()>();

        return $i0;
    }
