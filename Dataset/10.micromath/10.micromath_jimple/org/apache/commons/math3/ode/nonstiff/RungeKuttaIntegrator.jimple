org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator extends org.apache.commons.math3.ode.AbstractIntegrator
private final double[][] a
private final double[] b
private final double[] c
private final org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator prototype
private final double step
    protected void <init>(java.lang.String, double[], double[][], double[], org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator, double)
    {
        org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator r0;
        java.lang.String $r1;
        double[] $r2, $r4;
        double[][] $r3;
        org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator $r5;
        double $d0;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: double[];

        $r3 := @parameter2: double[][];

        $r4 := @parameter3: double[];

        $r5 := @parameter4: org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator;

        $d0 := @parameter5: double;

        specialinvoke r0.<org.apache.commons.math3.ode.AbstractIntegrator: void <init>(java.lang.String)>($r1);

        r0.<org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator: double[] c> = $r2;

        r0.<org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator: double[][] a> = $r3;

        r0.<org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator: double[] b> = $r4;

        r0.<org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator: org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator prototype> = $r5;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        r0.<org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator: double step> = $d0;

        return;
    }
    public void integrate(org.apache.commons.math3.ode.ExpandableStatefulODE, double) throws org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.MaxCountExceededException, org.apache.commons.math3.exception.NoBracketingException
    {
        org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator r0;
        org.apache.commons.math3.ode.ExpandableStatefulODE $r1;
        double $d0, d1, $d2, $d3;
        double[][] r2, $r13;
        double[] r3, $r4, r6, r7, $r12;
        int i0, i2, $i3, $i4, $i5;
        byte $b1;
        boolean z0, $z1;
        java.lang.Object $r5;
        org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator $r8;
        org.apache.commons.math3.ode.sampling.StepInterpolator $r9;
        org.apache.commons.math3.ode.EquationsMapper $r10;
        org.apache.commons.math3.ode.EquationsMapper[] $r11;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator;

        $r1 := @parameter0: org.apache.commons.math3.ode.ExpandableStatefulODE;

        $d0 := @parameter1: double;

        virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator: void sanityChecks(org.apache.commons.math3.ode.ExpandableStatefulODE,double)>($r1, $d0);

        virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator: void setEquations(org.apache.commons.math3.ode.ExpandableStatefulODE)>($r1);

        d1 = virtualinvoke $r1.<org.apache.commons.math3.ode.ExpandableStatefulODE: double getTime()>();

        $b1 = $d0 cmpl d1;

        if $b1 <= 0 goto label03;

        z0 = 1;

     label01:
        $r4 = virtualinvoke $r1.<org.apache.commons.math3.ode.ExpandableStatefulODE: double[] getCompleteState()>();

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.Object clone()>();

        r6 = (double[]) $r5;

        r3 = r0.<org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator: double[] c>;

        i0 = lengthof r3;

        i0 = i0 + 1;

        r2 = newarray (double[])[i0];

        i2 = 0;

     label02:
        if i2 >= i0 goto label04;

        $i3 = lengthof $r4;

        r3 = newarray (double)[$i3];

        r2[i2] = r3;

        i2 = i2 + 1;

        goto label02;

     label03:
        z0 = 0;

        goto label01;

     label04:
        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.Object clone()>();

        r7 = (double[]) $r5;

        i2 = lengthof $r4;

        r3 = newarray (double)[i2];

        $r8 = r0.<org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator: org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator prototype>;

        $r9 = virtualinvoke $r8.<org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator: org.apache.commons.math3.ode.sampling.StepInterpolator copy()>();

        $r8 = (org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator) $r9;

        $r10 = virtualinvoke $r1.<org.apache.commons.math3.ode.ExpandableStatefulODE: org.apache.commons.math3.ode.EquationsMapper getPrimaryMapper()>();

        $r11 = virtualinvoke $r1.<org.apache.commons.math3.ode.ExpandableStatefulODE: org.apache.commons.math3.ode.EquationsMapper[] getSecondaryMappers()>();

        virtualinvoke $r8.<org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator: void reinitialize(org.apache.commons.math3.ode.AbstractIntegrator,double[],double[][],boolean,org.apache.commons.math3.ode.EquationsMapper,org.apache.commons.math3.ode.EquationsMapper[])>(r0, r7, r2, z0, $r10, $r11);

        d1 = virtualinvoke $r1.<org.apache.commons.math3.ode.ExpandableStatefulODE: double getTime()>();

        virtualinvoke $r8.<org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator: void storeTime(double)>(d1);

        d1 = virtualinvoke $r1.<org.apache.commons.math3.ode.ExpandableStatefulODE: double getTime()>();

        r0.<org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator: double stepStart> = d1;

        if z0 == 0 goto label11;

        d1 = r0.<org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator: double stepStart>;

        $d2 = r0.<org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator: double step>;

        d1 = d1 + $d2;

        $b1 = d1 cmpl $d0;

        if $b1 < 0 goto label10;

        d1 = r0.<org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator: double stepStart>;

        d1 = $d0 - d1;

        r0.<org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator: double stepSize> = d1;

     label05:
        d1 = virtualinvoke $r1.<org.apache.commons.math3.ode.ExpandableStatefulODE: double getTime()>();

        virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator: void initIntegration(double,double[],double)>(d1, $r4, $d0);

        r0.<org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator: boolean isLastStep> = 0;

     label06:
        virtualinvoke $r8.<org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator: void shift()>();

        d1 = r0.<org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator: double stepStart>;

        $r12 = r2[0];

        virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator: void computeDerivatives(double,double[],double[])>(d1, r6, $r12);

        i2 = 1;

     label07:
        if i2 >= i0 goto label15;

        $i3 = 0;

     label08:
        $i4 = lengthof $r4;

        if $i3 >= $i4 goto label14;

        $r13 = r0.<org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator: double[][] a>;

        $i4 = i2 + -1;

        $r12 = $r13[$i4];

        d1 = $r12[0];

        $r12 = r2[0];

        $d2 = $r12[$i3];

        d1 = d1 * $d2;

        $i4 = 1;

     label09:
        if $i4 >= i2 goto label13;

        $r13 = r0.<org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator: double[][] a>;

        $i5 = i2 + -1;

        $r12 = $r13[$i5];

        $d2 = $r12[$i4];

        $r12 = r2[$i4];

        $d3 = $r12[$i3];

        $d2 = $d2 * $d3;

        d1 = d1 + $d2;

        $i4 = $i4 + 1;

        goto label09;

     label10:
        d1 = r0.<org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator: double step>;

        r0.<org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator: double stepSize> = d1;

        goto label05;

     label11:
        d1 = r0.<org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator: double stepStart>;

        $d2 = r0.<org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator: double step>;

        d1 = d1 - $d2;

        $b1 = d1 cmpg $d0;

        if $b1 > 0 goto label12;

        d1 = r0.<org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator: double stepStart>;

        d1 = $d0 - d1;

        r0.<org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator: double stepSize> = d1;

        goto label05;

     label12:
        d1 = r0.<org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator: double step>;

        d1 = neg d1;

        r0.<org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator: double stepSize> = d1;

        goto label05;

     label13:
        $d2 = r6[$i3];

        $d3 = r0.<org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator: double stepSize>;

        d1 = $d3 * d1;

        d1 = $d2 + d1;

        r7[$i3] = d1;

        $i3 = $i3 + 1;

        goto label08;

     label14:
        d1 = r0.<org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator: double stepStart>;

        $r12 = r0.<org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator: double[] c>;

        $i3 = i2 + -1;

        $d2 = $r12[$i3];

        $d3 = r0.<org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator: double stepSize>;

        $d2 = $d2 * $d3;

        d1 = d1 + $d2;

        $r12 = r2[i2];

        virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator: void computeDerivatives(double,double[],double[])>(d1, r7, $r12);

        i2 = i2 + 1;

        goto label07;

     label15:
        i2 = 0;

     label16:
        $i3 = lengthof $r4;

        if i2 >= $i3 goto label19;

        $r12 = r0.<org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator: double[] b>;

        d1 = $r12[0];

        $r12 = r2[0];

        $d2 = $r12[i2];

        d1 = d1 * $d2;

        $i3 = 1;

     label17:
        if $i3 >= i0 goto label18;

        $r12 = r0.<org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator: double[] b>;

        $d2 = $r12[$i3];

        $r12 = r2[$i3];

        $d3 = $r12[i2];

        $d2 = $d2 * $d3;

        d1 = d1 + $d2;

        $i3 = $i3 + 1;

        goto label17;

     label18:
        $d2 = r6[i2];

        $d3 = r0.<org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator: double stepSize>;

        d1 = $d3 * d1;

        d1 = $d2 + d1;

        r7[i2] = d1;

        i2 = i2 + 1;

        goto label16;

     label19:
        d1 = r0.<org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator: double stepStart>;

        $d2 = r0.<org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator: double stepSize>;

        d1 = d1 + $d2;

        virtualinvoke $r8.<org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator: void storeTime(double)>(d1);

        i2 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r7, 0, r6, 0, i2);

        i2 = i0 + -1;

        $r12 = r2[i2];

        i2 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r12, 0, r3, 0, i2);

        d1 = virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator: double acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)>($r8, r6, r3, $d0);

        r0.<org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator: double stepStart> = d1;

        $z1 = r0.<org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator: boolean isLastStep>;

        if $z1 != 0 goto label21;

        d1 = r0.<org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator: double stepStart>;

        virtualinvoke $r8.<org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator: void storeTime(double)>(d1);

        d1 = r0.<org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator: double stepStart>;

        $d2 = r0.<org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator: double stepSize>;

        d1 = d1 + $d2;

        if z0 == 0 goto label23;

        $b1 = d1 cmpl $d0;

        if $b1 < 0 goto label22;

        $z1 = 1;

     label20:
        if $z1 == 0 goto label21;

        d1 = r0.<org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator: double stepStart>;

        d1 = $d0 - d1;

        r0.<org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator: double stepSize> = d1;

     label21:
        $z1 = r0.<org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator: boolean isLastStep>;

        if $z1 == 0 goto label06;

        $d0 = r0.<org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator: double stepStart>;

        virtualinvoke $r1.<org.apache.commons.math3.ode.ExpandableStatefulODE: void setTime(double)>($d0);

        virtualinvoke $r1.<org.apache.commons.math3.ode.ExpandableStatefulODE: void setCompleteState(double[])>(r6);

        r0.<org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator: double stepStart> = #NaN;

        r0.<org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator: double stepSize> = #NaN;

        return;

     label22:
        $z1 = 0;

        goto label20;

     label23:
        $b1 = d1 cmpg $d0;

        if $b1 > 0 goto label24;

        $z1 = 1;

        goto label20;

     label24:
        $z1 = 0;

        goto label20;
    }
    public double[] singleStep(org.apache.commons.math3.ode.FirstOrderDifferentialEquations, double, double[], double)
    {
        org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator r0;
        org.apache.commons.math3.ode.FirstOrderDifferentialEquations $r1;
        double $d0, $d1, $d2, $d3, $d4;
        double[] $r2, r5, $r6, $r7;
        int i0, i1, $i2, $i3, $i4;
        double[][] r3, $r8;
        java.lang.Object $r4;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator;

        $r1 := @parameter0: org.apache.commons.math3.ode.FirstOrderDifferentialEquations;

        $d0 := @parameter1: double;

        $r2 := @parameter2: double[];

        $d1 := @parameter3: double;

        $r4 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        r5 = (double[]) $r4;

        $r6 = r0.<org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator: double[] c>;

        i0 = lengthof $r6;

        i0 = i0 + 1;

        r3 = newarray (double[])[i0];

        i1 = 0;

     label01:
        if i1 >= i0 goto label02;

        $i2 = lengthof $r2;

        $r6 = newarray (double)[$i2];

        r3[i1] = $r6;

        i1 = i1 + 1;

        goto label01;

     label02:
        $r4 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r6 = (double[]) $r4;

        $d1 = $d1 - $d0;

        $r7 = r3[0];

        interfaceinvoke $r1.<org.apache.commons.math3.ode.FirstOrderDifferentialEquations: void computeDerivatives(double,double[],double[])>($d0, r5, $r7);

        i1 = 1;

     label03:
        if i1 >= i0 goto label08;

        $i2 = 0;

     label04:
        $i3 = lengthof $r2;

        if $i2 >= $i3 goto label07;

        $r8 = r0.<org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator: double[][] a>;

        $i3 = i1 + -1;

        $r7 = $r8[$i3];

        $d2 = $r7[0];

        $r7 = r3[0];

        $d3 = $r7[$i2];

        $d2 = $d2 * $d3;

        $i3 = 1;

     label05:
        if $i3 >= i1 goto label06;

        $r8 = r0.<org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator: double[][] a>;

        $i4 = i1 + -1;

        $r7 = $r8[$i4];

        $d3 = $r7[$i3];

        $r7 = r3[$i3];

        $d4 = $r7[$i2];

        $d3 = $d3 * $d4;

        $d2 = $d2 + $d3;

        $i3 = $i3 + 1;

        goto label05;

     label06:
        $d3 = r5[$i2];

        $d2 = $d1 * $d2;

        $d2 = $d3 + $d2;

        $r6[$i2] = $d2;

        $i2 = $i2 + 1;

        goto label04;

     label07:
        $r7 = r0.<org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator: double[] c>;

        $i2 = i1 + -1;

        $d2 = $r7[$i2];

        $d2 = $d2 * $d1;

        $d2 = $d2 + $d0;

        $r7 = r3[i1];

        interfaceinvoke $r1.<org.apache.commons.math3.ode.FirstOrderDifferentialEquations: void computeDerivatives(double,double[],double[])>($d2, $r6, $r7);

        i1 = i1 + 1;

        goto label03;

     label08:
        i1 = 0;

     label09:
        $i2 = lengthof $r2;

        if i1 >= $i2 goto label12;

        $r6 = r0.<org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator: double[] b>;

        $d0 = $r6[0];

        $r6 = r3[0];

        $d2 = $r6[i1];

        $d0 = $d0 * $d2;

        $i2 = 1;

     label10:
        if $i2 >= i0 goto label11;

        $r6 = r0.<org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator: double[] b>;

        $d2 = $r6[$i2];

        $r6 = r3[$i2];

        $d3 = $r6[i1];

        $d2 = $d2 * $d3;

        $d0 = $d0 + $d2;

        $i2 = $i2 + 1;

        goto label10;

     label11:
        $d2 = r5[i1];

        $d0 = $d1 * $d0;

        $d0 = $d2 + $d0;

        r5[i1] = $d0;

        i1 = i1 + 1;

        goto label09;

     label12:
        return r5;
    }
