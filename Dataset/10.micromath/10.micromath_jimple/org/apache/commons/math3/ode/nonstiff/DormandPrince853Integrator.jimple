org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator extends org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator
private static final double E1_01
private static final double E1_06
private static final double E1_07
private static final double E1_08
private static final double E1_09
private static final double E1_10
private static final double E1_11
private static final double E1_12
private static final double E2_01
private static final double E2_06
private static final double E2_07
private static final double E2_08
private static final double E2_09
private static final double E2_10
private static final double E2_11
private static final double E2_12
private static final java.lang.String METHOD_NAME
private static final double[][] STATIC_A
private static final double[] STATIC_B
private static final double[] STATIC_C
    static void <clinit>()
    {
        double[] $r0;
        double $d0;
        double[][] $r1;

        $r0 = newarray (double)[12];

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(6.0);

        $d0 = 2.0 * $d0;

        $d0 = 12.0 - $d0;

        $d0 = $d0 / 135.0;

        $r0[0] = $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(6.0);

        $d0 = 6.0 - $d0;

        $d0 = $d0 / 45.0;

        $r0[1] = $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(6.0);

        $d0 = 6.0 - $d0;

        $d0 = $d0 / 30.0;

        $r0[2] = $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(6.0);

        $d0 = 6.0 + $d0;

        $d0 = $d0 / 30.0;

        $r0[3] = $d0;

        $d0 = (double) 4599676419421066581L;

        $r0[4] = $d0;

        $d0 = (double) 4598175219545276416L;

        $r0[5] = $d0;

        $d0 = (double) 4599214511766977300L;

        $r0[6] = $d0;

        $d0 = (double) 4604041446752210293L;

        $r0[7] = $d0;

        $d0 = (double) 4603579539098121011L;

        $r0[8] = $d0;

        $d0 = (double) 4605895676049340123L;

        $r0[9] = $d0;

        $d0 = (double) 4607182418800017408L;

        $r0[10] = $d0;

        $d0 = (double) 4607182418800017408L;

        $r0[11] = $d0;

        <org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator: double[] STATIC_C> = $r0;

        $r1 = newarray (double[])[12];

        $r0 = newarray (double)[1];

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(6.0);

        $d0 = 2.0 * $d0;

        $d0 = 12.0 - $d0;

        $d0 = $d0 / 135.0;

        $r0[0] = $d0;

        $r1[0] = $r0;

        $r0 = newarray (double)[2];

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(6.0);

        $d0 = 6.0 - $d0;

        $d0 = $d0 / 180.0;

        $r0[0] = $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(6.0);

        $d0 = 6.0 - $d0;

        $d0 = $d0 / 60.0;

        $r0[1] = $d0;

        $r1[1] = $r0;

        $r0 = newarray (double)[3];

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(6.0);

        $d0 = 6.0 - $d0;

        $d0 = $d0 / 120.0;

        $r0[0] = $d0;

        $d0 = (double) 0L;

        $r0[1] = $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(6.0);

        $d0 = 6.0 - $d0;

        $d0 = $d0 / 40.0;

        $r0[2] = $d0;

        $r1[2] = $r0;

        $r0 = newarray (double)[4];

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(6.0);

        $d0 = 107.0 * $d0;

        $d0 = 462.0 + $d0;

        $d0 = $d0 / 3000.0;

        $r0[0] = $d0;

        $d0 = (double) 0L;

        $r0[1] = $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(6.0);

        $d0 = 197.0 * $d0;

        $d0 = -402.0 - $d0;

        $d0 = $d0 / 1000.0;

        $r0[2] = $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(6.0);

        $d0 = 73.0 * $d0;

        $d0 = 168.0 + $d0;

        $d0 = $d0 / 375.0;

        $r0[3] = $d0;

        $r1[3] = $r0;

        $r0 = newarray (double)[5];

        $d0 = (double) 4585498420594159464L;

        $r0[0] = $d0;

        $d0 = (double) 0L;

        $r0[1] = $d0;

        $d0 = (double) 0L;

        $r0[2] = $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(6.0);

        $d0 = 16.0 + $d0;

        $d0 = $d0 / 108.0;

        $r0[3] = $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(6.0);

        $d0 = 16.0 - $d0;

        $d0 = $d0 / 108.0;

        $r0[4] = $d0;

        $r1[4] = $r0;

        $r0 = newarray (double)[6];

        $d0 = (double) 4585508845593296896L;

        $r0[0] = $d0;

        $d0 = (double) 0L;

        $r0[1] = $d0;

        $d0 = (double) 0L;

        $r0[2] = $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(6.0);

        $d0 = 23.0 * $d0;

        $d0 = 118.0 + $d0;

        $d0 = $d0 / 1024.0;

        $r0[3] = $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(6.0);

        $d0 = 23.0 * $d0;

        $d0 = 118.0 - $d0;

        $d0 = $d0 / 1024.0;

        $r0[4] = $d0;

        $d0 = (double) -4642648265865560064L;

        $r0[5] = $d0;

        $r1[5] = $r0;

        $r0 = newarray (double)[7];

        $d0 = (double) 4585506341608982418L;

        $r0[0] = $d0;

        $d0 = (double) 0L;

        $r0[1] = $d0;

        $d0 = (double) 0L;

        $r0[2] = $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(6.0);

        $d0 = 4784.0 * $d0;

        $d0 = 51544.0 + $d0;

        $d0 = $d0 / 371293.0;

        $r0[3] = $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(6.0);

        $d0 = 4784.0 * $d0;

        $d0 = 51544.0 - $d0;

        $d0 = $d0 / 371293.0;

        $r0[4] = $d0;

        $d0 = (double) -4643387360464284881L;

        $r0[5] = $d0;

        $d0 = (double) 4575923136506825585L;

        $r0[6] = $d0;

        $r1[6] = $r0;

        $r0 = newarray (double)[8];

        $d0 = (double) 4603796711307499539L;

        $r0[0] = $d0;

        $d0 = (double) 0L;

        $r0[1] = $d0;

        $d0 = (double) 0L;

        $r0[2] = $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(6.0);

        $d0 = 3.18801444819E11 * $d0;

        $d0 = -1.324889724104E12 - $d0;

        $d0 = $d0 / 6.265569375E11;

        $r0[3] = $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(6.0);

        $d0 = 3.18801444819E11 * $d0;

        $d0 = -1.324889724104E12 + $d0;

        $d0 = $d0 / 6.265569375E11;

        $r0[4] = $d0;

        $d0 = (double) 4628459703302428757L;

        $r0[5] = $d0;

        $d0 = (double) 4626366083376524649L;

        $r0[6] = $d0;

        $d0 = (double) -4592054562476768519L;

        $r0[7] = $d0;

        $r1[7] = $r0;

        $r0 = newarray (double)[9];

        $d0 = (double) 4602276423202354773L;

        $r0[0] = $d0;

        $d0 = (double) 0L;

        $r0[1] = $d0;

        $d0 = (double) 0L;

        $r0[2] = $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(6.0);

        $d0 = 1137963.0 * $d0;

        $d0 = -4521408.0 - $d0;

        $d0 = $d0 / 2937500.0;

        $r0[3] = $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(6.0);

        $d0 = 1137963.0 * $d0;

        $d0 = -4521408.0 + $d0;

        $d0 = $d0 / 2937500.0;

        $r0[4] = $d0;

        $d0 = (double) 4626668945919071726L;

        $r0[5] = $d0;

        $d0 = (double) 4624791061916702904L;

        $r0[6] = $d0;

        $d0 = (double) -4593490320341659207L;

        $r0[7] = $d0;

        $d0 = (double) -4641854745530292106L;

        $r0[8] = $d0;

        $r1[8] = $r0;

        $r0 = newarray (double)[10];

        $d0 = (double) -4616755788711642725L;

        $r0[0] = $d0;

        $d0 = (double) 0L;

        $r0[1] = $d0;

        $d0 = (double) 0L;

        $r0[2] = $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(6.0);

        $d0 = 94326.0 * $d0;

        $d0 = 354216.0 + $d0;

        $d0 = $d0 / 112847.0;

        $r0[3] = $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(6.0);

        $d0 = 94326.0 * $d0;

        $d0 = 354216.0 - $d0;

        $d0 = $d0 / 112847.0;

        $r0[4] = $d0;

        $d0 = (double) -4602594496581923812L;

        $r0[5] = $d0;

        $d0 = (double) -4597465884122319448L;

        $r0[6] = $d0;

        $d0 = (double) 4627093814283830842L;

        $r0[7] = $d0;

        $d0 = (double) 4612797519318945949L;

        $r0[8] = $d0;

        $d0 = (double) -4609328914384595156L;

        $r0[9] = $d0;

        $r1[9] = $r0;

        $r0 = newarray (double)[11];

        $d0 = (double) 4612301458166643932L;

        $r0[0] = $d0;

        $d0 = (double) 0L;

        $r0[1] = $d0;

        $d0 = (double) 0L;

        $r0[2] = $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(6.0);

        $d0 = 960905.0 * $d0;

        $d0 = -3457480.0 - $d0;

        $d0 = $d0 / 551636.0;

        $r0[3] = $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(6.0);

        $d0 = 960905.0 * $d0;

        $d0 = -3457480.0 + $d0;

        $d0 = $d0 / 551636.0;

        $r0[4] = $d0;

        $d0 = (double) -4597623829244727290L;

        $r0[5] = $d0;

        $d0 = (double) 4628560129304136193L;

        $r0[6] = $d0;

        $d0 = (double) -4609751726266979309L;

        $r0[7] = $d0;

        $d0 = (double) -4602187444402572375L;

        $r0[8] = $d0;

        $d0 = (double) 4623147998770632801L;

        $r0[9] = $d0;

        $d0 = (double) 4603970386207695362L;

        $r0[10] = $d0;

        $r1[10] = $r0;

        $r0 = newarray (double)[12];

        $r0[0] = 0.054293734116568765;

        $r0[1] = 0.0;

        $r0[2] = 0.0;

        $r0[3] = 0.0;

        $r0[4] = 0.0;

        $r0[5] = 4.450312892752409;

        $r0[6] = 1.8915178993145003;

        $r0[7] = -5.801203960010585;

        $r0[8] = 0.3111643669578199;

        $r0[9] = -0.1521609496625161;

        $r0[10] = 0.20136540080403034;

        $r0[11] = 0.04471061572777259;

        $r1[11] = $r0;

        <org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator: double[][] STATIC_A> = $r1;

        $r0 = newarray (double)[13];

        $r0[0] = 0.054293734116568765;

        $r0[1] = 0.0;

        $r0[2] = 0.0;

        $r0[3] = 0.0;

        $r0[4] = 0.0;

        $r0[5] = 4.450312892752409;

        $r0[6] = 1.8915178993145003;

        $r0[7] = -5.801203960010585;

        $r0[8] = 0.3111643669578199;

        $r0[9] = -0.1521609496625161;

        $r0[10] = 0.20136540080403034;

        $r0[11] = 0.04471061572777259;

        $r0[12] = 0.0;

        <org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator: double[] STATIC_B> = $r0;

        return;
    }
    public void <init>(double, double, double, double)
    {
        org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator r0;
        double $d0, $d1, $d2, $d3;
        double[] $r1, $r3;
        double[][] $r2;
        org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator $r4;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $d3 := @parameter3: double;

        $r1 = <org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator: double[] STATIC_C>;

        $r2 = <org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator: double[][] STATIC_A>;

        $r3 = <org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator: double[] STATIC_B>;

        $r4 = new org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator;

        specialinvoke $r4.<org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: void <init>(java.lang.String,boolean,double[],double[][],double[],org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator,double,double,double,double)>("Dormand-Prince 8 (5, 3)", 1, $r1, $r2, $r3, $r4, $d0, $d1, $d2, $d3);

        return;
    }
    public void <init>(double, double, double[], double[])
    {
        org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator r0;
        double $d0, $d1;
        double[] $r1, $r2, $r3, $r5;
        double[][] $r4;
        org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator $r6;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $r1 := @parameter2: double[];

        $r2 := @parameter3: double[];

        $r3 = <org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator: double[] STATIC_C>;

        $r4 = <org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator: double[][] STATIC_A>;

        $r5 = <org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator: double[] STATIC_B>;

        $r6 = new org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator;

        specialinvoke $r6.<org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: void <init>(java.lang.String,boolean,double[],double[][],double[],org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator,double,double,double[],double[])>("Dormand-Prince 8 (5, 3)", 1, $r3, $r4, $r5, $r6, $d0, $d1, $r1, $r2);

        return;
    }
    protected double estimateError(double[][], double[], double[], double)
    {
        org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator r0;
        double[][] $r1;
        double[] $r2, $r3, $r4;
        double $d0, d1, d2, d3, d4, $d5, $d6, $d7;
        int i0, $i1;
        byte $b2;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;

        $r1 := @parameter0: double[][];

        $r2 := @parameter1: double[];

        $r3 := @parameter2: double[];

        $d0 := @parameter3: double;

        d3 = 0.0;

        d4 = 0.0;

        i0 = 0;

     label1:
        $i1 = r0.<org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator: int mainSetDimension>;

        if i0 >= $i1 goto label4;

        $r4 = $r1[0];

        d1 = $r4[i0];

        d1 = 0.01312004499419488 * d1;

        $r4 = $r1[5];

        d2 = $r4[i0];

        d2 = -1.2251564463762044 * d2;

        d1 = d1 + d2;

        $r4 = $r1[6];

        d2 = $r4[i0];

        d2 = -0.4957589496572502 * d2;

        d1 = d1 + d2;

        $r4 = $r1[7];

        d2 = $r4[i0];

        d2 = 1.6643771824549864 * d2;

        d1 = d1 + d2;

        $r4 = $r1[8];

        d2 = $r4[i0];

        d2 = -0.35032884874997366 * d2;

        d1 = d1 + d2;

        $r4 = $r1[9];

        d2 = $r4[i0];

        d2 = 0.3341791187130175 * d2;

        d1 = d1 + d2;

        $r4 = $r1[10];

        d2 = $r4[i0];

        d2 = 0.08192320648511571 * d2;

        d1 = d1 + d2;

        $r4 = $r1[11];

        d2 = $r4[i0];

        d2 = -0.022355307863886294 * d2;

        d1 = d1 + d2;

        $r4 = $r1[0];

        d2 = $r4[i0];

        d2 = -0.18980075407240762 * d2;

        $r4 = $r1[5];

        $d5 = $r4[i0];

        $d5 = 4.450312892752409 * $d5;

        d2 = d2 + $d5;

        $r4 = $r1[6];

        $d5 = $r4[i0];

        $d5 = 1.8915178993145003 * $d5;

        d2 = d2 + $d5;

        $r4 = $r1[7];

        $d5 = $r4[i0];

        $d5 = -5.801203960010585 * $d5;

        d2 = d2 + $d5;

        $r4 = $r1[8];

        $d5 = $r4[i0];

        $d5 = -0.42268232132379197 * $d5;

        d2 = d2 + $d5;

        $r4 = $r1[9];

        $d5 = $r4[i0];

        $d5 = -0.1521609496625161 * $d5;

        d2 = d2 + $d5;

        $r4 = $r1[10];

        $d5 = $r4[i0];

        $d5 = 0.20136540080403034 * $d5;

        d2 = d2 + $d5;

        $r4 = $r1[11];

        $d5 = $r4[i0];

        $d5 = 0.022651792198360825 * $d5;

        d2 = d2 + $d5;

        $d5 = $r2[i0];

        $d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d5);

        $d6 = $r3[i0];

        $d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d6);

        $d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>($d5, $d6);

        $r4 = r0.<org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator: double[] vecAbsoluteTolerance>;

        if $r4 != null goto label3;

        $d6 = r0.<org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator: double scalAbsoluteTolerance>;

        $d7 = r0.<org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator: double scalRelativeTolerance>;

        $d5 = $d7 * $d5;

        $d5 = $d6 + $d5;

     label2:
        d1 = d1 / $d5;

        d1 = d1 * d1;

        d3 = d3 + d1;

        d1 = d2 / $d5;

        d1 = d1 * d1;

        d4 = d4 + d1;

        i0 = i0 + 1;

        goto label1;

     label3:
        $r4 = r0.<org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator: double[] vecAbsoluteTolerance>;

        $d6 = $r4[i0];

        $r4 = r0.<org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator: double[] vecRelativeTolerance>;

        $d7 = $r4[i0];

        $d5 = $d7 * $d5;

        $d5 = $d6 + $d5;

        goto label2;

     label4:
        d4 = 0.01 * d4;

        d4 = d3 + d4;

        $b2 = d4 cmpg 0.0;

        if $b2 > 0 goto label5;

        d4 = 1.0;

     label5:
        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        $d0 = $d0 * d3;

        i0 = r0.<org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator: int mainSetDimension>;

        d3 = (double) i0;

        d3 = d3 * d4;

        d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d3);

        $d0 = $d0 / d3;

        return $d0;
    }
    public int getOrder()
    {
        org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator r0;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;

        return 8;
    }
