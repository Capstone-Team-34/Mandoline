org.apache.commons.math3.ode.nonstiff.AdamsNordsieckFieldTransformer extends java.lang.Object
private static final java.util.Map CACHE
private final org.apache.commons.math3.RealFieldElement[] c1
private final org.apache.commons.math3.Field field
private final org.apache.commons.math3.linear.Array2DRowFieldMatrix update
    static void <clinit>()
    {
        java.util.HashMap $r0;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <org.apache.commons.math3.ode.nonstiff.AdamsNordsieckFieldTransformer: java.util.Map CACHE> = $r0;

        return;
    }
    private void <init>(org.apache.commons.math3.Field, int)
    {
        org.apache.commons.math3.ode.nonstiff.AdamsNordsieckFieldTransformer r0;
        org.apache.commons.math3.Field r1;
        int $i0, $i1, $i2;
        org.apache.commons.math3.linear.FieldMatrix $r2;
        org.apache.commons.math3.linear.FieldLUDecomposition $r3;
        org.apache.commons.math3.linear.FieldDecompositionSolver $r4;
        java.lang.Object[] $r5;
        org.apache.commons.math3.RealFieldElement[] r6;
        java.lang.Object $r7;
        org.apache.commons.math3.linear.ArrayFieldVector $r8;
        org.apache.commons.math3.linear.FieldVector $r9;
        org.apache.commons.math3.FieldElement[] $r10;
        org.apache.commons.math3.FieldElement[][] $r11;
        org.apache.commons.math3.RealFieldElement[][] r12;
        org.apache.commons.math3.linear.Array2DRowFieldMatrix $r13, $r14;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.AdamsNordsieckFieldTransformer;

        r1 := @parameter0: org.apache.commons.math3.Field;

        $i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.ode.nonstiff.AdamsNordsieckFieldTransformer: org.apache.commons.math3.Field field> = r1;

        $i0 = $i0 + -1;

        $r2 = specialinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsNordsieckFieldTransformer: org.apache.commons.math3.linear.FieldMatrix buildP(int)>($i0);

        $r3 = new org.apache.commons.math3.linear.FieldLUDecomposition;

        specialinvoke $r3.<org.apache.commons.math3.linear.FieldLUDecomposition: void <init>(org.apache.commons.math3.linear.FieldMatrix)>($r2);

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.linear.FieldLUDecomposition: org.apache.commons.math3.linear.FieldDecompositionSolver getSolver()>();

        $r5 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[] buildArray(org.apache.commons.math3.Field,int)>(r1, $i0);

        r6 = (org.apache.commons.math3.RealFieldElement[]) $r5;

        $r7 = interfaceinvoke r1.<org.apache.commons.math3.Field: java.lang.Object getOne()>();

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>(r6, $r7);

        $r8 = new org.apache.commons.math3.linear.ArrayFieldVector;

        specialinvoke $r8.<org.apache.commons.math3.linear.ArrayFieldVector: void <init>(org.apache.commons.math3.FieldElement[],boolean)>(r6, 0);

        $r9 = interfaceinvoke $r4.<org.apache.commons.math3.linear.FieldDecompositionSolver: org.apache.commons.math3.linear.FieldVector solve(org.apache.commons.math3.linear.FieldVector)>($r8);

        $r10 = interfaceinvoke $r9.<org.apache.commons.math3.linear.FieldVector: org.apache.commons.math3.FieldElement[] toArray()>();

        r6 = (org.apache.commons.math3.RealFieldElement[]) $r10;

        r0.<org.apache.commons.math3.ode.nonstiff.AdamsNordsieckFieldTransformer: org.apache.commons.math3.RealFieldElement[] c1> = r6;

        $r11 = interfaceinvoke $r2.<org.apache.commons.math3.linear.FieldMatrix: org.apache.commons.math3.FieldElement[][] getData()>();

        r12 = (org.apache.commons.math3.RealFieldElement[][]) $r11;

        $i1 = lengthof r12;

        $i1 = $i1 + -1;

     label1:
        if $i1 <= 0 goto label2;

        $i2 = $i1 + -1;

        r6 = r12[$i2];

        r12[$i1] = r6;

        $i1 = $i1 + -1;

        goto label1;

     label2:
        $r5 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[] buildArray(org.apache.commons.math3.Field,int)>(r1, $i0);

        r6 = (org.apache.commons.math3.RealFieldElement[]) $r5;

        r12[0] = r6;

        r6 = r12[0];

        $r7 = interfaceinvoke r1.<org.apache.commons.math3.Field: java.lang.Object getZero()>();

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>(r6, $r7);

        $r13 = new org.apache.commons.math3.linear.Array2DRowFieldMatrix;

        $r14 = new org.apache.commons.math3.linear.Array2DRowFieldMatrix;

        specialinvoke $r14.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: void <init>(org.apache.commons.math3.FieldElement[][],boolean)>(r12, 0);

        $r2 = interfaceinvoke $r4.<org.apache.commons.math3.linear.FieldDecompositionSolver: org.apache.commons.math3.linear.FieldMatrix solve(org.apache.commons.math3.linear.FieldMatrix)>($r14);

        $r11 = interfaceinvoke $r2.<org.apache.commons.math3.linear.FieldMatrix: org.apache.commons.math3.FieldElement[][] getData()>();

        specialinvoke $r13.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: void <init>(org.apache.commons.math3.FieldElement[][])>($r11);

        r0.<org.apache.commons.math3.ode.nonstiff.AdamsNordsieckFieldTransformer: org.apache.commons.math3.linear.Array2DRowFieldMatrix update> = $r13;

        return;
    }
    private org.apache.commons.math3.linear.FieldMatrix buildP(int)
    {
        org.apache.commons.math3.ode.nonstiff.AdamsNordsieckFieldTransformer r0;
        int $i0, i1, i2, $i3, $i4;
        org.apache.commons.math3.RealFieldElement[] r1;
        double $d0;
        org.apache.commons.math3.Field $r2;
        java.lang.Object[][] $r3;
        org.apache.commons.math3.RealFieldElement[][] r4;
        java.lang.Object $r5;
        org.apache.commons.math3.RealFieldElement $r6, $r7;
        org.apache.commons.math3.linear.Array2DRowFieldMatrix $r8;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.AdamsNordsieckFieldTransformer;

        $i0 := @parameter0: int;

        $r2 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsNordsieckFieldTransformer: org.apache.commons.math3.Field field>;

        $r3 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[][] buildArray(org.apache.commons.math3.Field,int,int)>($r2, $i0, $i0);

        r4 = (org.apache.commons.math3.RealFieldElement[][]) $r3;

        $i0 = 1;

     label1:
        i1 = lengthof r4;

        if $i0 > i1 goto label4;

        i1 = $i0 + -1;

        r1 = r4[i1];

        i1 = neg $i0;

        $r2 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsNordsieckFieldTransformer: org.apache.commons.math3.Field field>;

        $r5 = interfaceinvoke $r2.<org.apache.commons.math3.Field: java.lang.Object getZero()>();

        $r6 = (org.apache.commons.math3.RealFieldElement) $r5;

        $d0 = (double) i1;

        $r5 = interfaceinvoke $r6.<org.apache.commons.math3.RealFieldElement: java.lang.Object add(double)>($d0);

        $r6 = (org.apache.commons.math3.RealFieldElement) $r5;

        i2 = 1;

     label2:
        $i3 = lengthof r1;

        if i2 > $i3 goto label3;

        $i3 = i2 + -1;

        $i4 = i2 + 1;

        $r5 = interfaceinvoke $r6.<org.apache.commons.math3.RealFieldElement: java.lang.Object multiply(int)>($i4);

        $r7 = (org.apache.commons.math3.RealFieldElement) $r5;

        r1[$i3] = $r7;

        $r5 = interfaceinvoke $r6.<org.apache.commons.math3.RealFieldElement: java.lang.Object multiply(int)>(i1);

        $r6 = (org.apache.commons.math3.RealFieldElement) $r5;

        i2 = i2 + 1;

        goto label2;

     label3:
        $i0 = $i0 + 1;

        goto label1;

     label4:
        $r8 = new org.apache.commons.math3.linear.Array2DRowFieldMatrix;

        specialinvoke $r8.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: void <init>(org.apache.commons.math3.FieldElement[][],boolean)>(r4, 0);

        return $r8;
    }
    public static org.apache.commons.math3.ode.nonstiff.AdamsNordsieckFieldTransformer getInstance(org.apache.commons.math3.Field, int)
    {
        org.apache.commons.math3.Field r0;
        int $i0;
        java.util.Map $r1, $r2, $r5;
        java.lang.Integer $r3;
        java.lang.Object $r4;
        org.apache.commons.math3.ode.nonstiff.AdamsNordsieckFieldTransformer r6, $r9;
        java.lang.Throwable $r7;
        java.util.HashMap $r8;

        r0 := @parameter0: org.apache.commons.math3.Field;

        $i0 := @parameter1: int;

        $r1 = <org.apache.commons.math3.ode.nonstiff.AdamsNordsieckFieldTransformer: java.util.Map CACHE>;

        entermonitor $r1;

     label1:
        $r2 = <org.apache.commons.math3.ode.nonstiff.AdamsNordsieckFieldTransformer: java.util.Map CACHE>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        $r2 = (java.util.Map) $r4;

        if $r2 != null goto label2;

        $r8 = new java.util.HashMap;

        $r2 = $r8;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        $r5 = <org.apache.commons.math3.ode.nonstiff.AdamsNordsieckFieldTransformer: java.util.Map CACHE>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r8);

     label2:
        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r6 = (org.apache.commons.math3.ode.nonstiff.AdamsNordsieckFieldTransformer) $r4;

        if r6 != null goto label3;

        $r9 = new org.apache.commons.math3.ode.nonstiff.AdamsNordsieckFieldTransformer;

        r6 = $r9;

        specialinvoke $r9.<org.apache.commons.math3.ode.nonstiff.AdamsNordsieckFieldTransformer: void <init>(org.apache.commons.math3.Field,int)>(r0, $i0);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r9);

     label3:
        exitmonitor $r1;

     label4:
        return r6;

     label5:
        $r7 := @caughtexception;

        exitmonitor $r1;

     label6:
        throw $r7;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }
    public org.apache.commons.math3.linear.Array2DRowFieldMatrix initializeHighOrderDerivatives(org.apache.commons.math3.RealFieldElement, org.apache.commons.math3.RealFieldElement[], org.apache.commons.math3.RealFieldElement[][], org.apache.commons.math3.RealFieldElement[][])
    {
        org.apache.commons.math3.ode.nonstiff.AdamsNordsieckFieldTransformer r0;
        org.apache.commons.math3.RealFieldElement r1, $r16, $r17, r19, $r20;
        org.apache.commons.math3.RealFieldElement[] r2, r5, r8, r9, r10, r11, r21;
        org.apache.commons.math3.RealFieldElement[][] r3, r4, r14, r15;
        org.apache.commons.math3.linear.FieldLUDecomposition r6;
        org.apache.commons.math3.linear.Array2DRowFieldMatrix r7;
        org.apache.commons.math3.Field $r12;
        int $i0, $i1, $i2;
        java.lang.Object[][] $r13;
        java.lang.Object $r18;
        org.apache.commons.math3.linear.FieldDecompositionSolver $r22;
        org.apache.commons.math3.linear.FieldMatrix $r23;
        org.apache.commons.math3.FieldElement $r24;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.AdamsNordsieckFieldTransformer;

        r1 := @parameter0: org.apache.commons.math3.RealFieldElement;

        r2 := @parameter1: org.apache.commons.math3.RealFieldElement[];

        r3 := @parameter2: org.apache.commons.math3.RealFieldElement[][];

        r4 := @parameter3: org.apache.commons.math3.RealFieldElement[][];

        $r12 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsNordsieckFieldTransformer: org.apache.commons.math3.Field field>;

        r8 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsNordsieckFieldTransformer: org.apache.commons.math3.RealFieldElement[] c1>;

        $i0 = lengthof r8;

        $i0 = $i0 + 1;

        r8 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsNordsieckFieldTransformer: org.apache.commons.math3.RealFieldElement[] c1>;

        $i1 = lengthof r8;

        $i1 = $i1 + 1;

        $r13 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[][] buildArray(org.apache.commons.math3.Field,int,int)>($r12, $i0, $i1);

        r14 = (org.apache.commons.math3.RealFieldElement[][]) $r13;

        $r12 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsNordsieckFieldTransformer: org.apache.commons.math3.Field field>;

        r8 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsNordsieckFieldTransformer: org.apache.commons.math3.RealFieldElement[] c1>;

        $i0 = lengthof r8;

        $i0 = $i0 + 1;

        r8 = r3[0];

        $i1 = lengthof r8;

        $r13 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[][] buildArray(org.apache.commons.math3.Field,int,int)>($r12, $i0, $i1);

        r15 = (org.apache.commons.math3.RealFieldElement[][]) $r13;

        r8 = r3[0];

        r9 = r4[0];

        $i0 = 1;

     label01:
        $i1 = lengthof r3;

        if $i0 >= $i1 goto label12;

        $r16 = r2[$i0];

        $r17 = r2[0];

        $r18 = interfaceinvoke $r16.<org.apache.commons.math3.RealFieldElement: java.lang.Object subtract(java.lang.Object)>($r17);

        $r16 = (org.apache.commons.math3.RealFieldElement) $r18;

        $r18 = interfaceinvoke $r16.<org.apache.commons.math3.RealFieldElement: java.lang.Object divide(java.lang.Object)>(r1);

        $r17 = (org.apache.commons.math3.RealFieldElement) $r18;

        $r18 = interfaceinvoke r1.<org.apache.commons.math3.RealFieldElement: java.lang.Object reciprocal()>();

        r19 = (org.apache.commons.math3.RealFieldElement) $r18;

        $i1 = $i0 * 2;

        $i1 = $i1 + -2;

        r5 = r14[$i1];

        $i1 = $i0 * 2;

        $i1 = $i1 + -1;

        $i2 = lengthof r14;

        if $i1 >= $i2 goto label05;

        $i1 = $i0 * 2;

        $i1 = $i1 + -1;

        r10 = r14[$i1];

     label02:
        $i1 = 0;

     label03:
        $i2 = lengthof r5;

        if $i1 >= $i2 goto label06;

        $r18 = interfaceinvoke r19.<org.apache.commons.math3.RealFieldElement: java.lang.Object multiply(java.lang.Object)>($r17);

        r19 = (org.apache.commons.math3.RealFieldElement) $r18;

        $r18 = interfaceinvoke $r16.<org.apache.commons.math3.RealFieldElement: java.lang.Object multiply(java.lang.Object)>(r19);

        $r20 = (org.apache.commons.math3.RealFieldElement) $r18;

        r5[$i1] = $r20;

        if r10 == null goto label04;

        $i2 = $i1 + 2;

        $r18 = interfaceinvoke r19.<org.apache.commons.math3.RealFieldElement: java.lang.Object multiply(int)>($i2);

        $r20 = (org.apache.commons.math3.RealFieldElement) $r18;

        r10[$i1] = $r20;

     label04:
        $i1 = $i1 + 1;

        goto label03;

     label05:
        r10 = null;

        goto label02;

     label06:
        r11 = r3[$i0];

        r10 = r4[$i0];

        $i1 = $i0 * 2;

        $i1 = $i1 + -2;

        r5 = r15[$i1];

        $i1 = $i0 * 2;

        $i1 = $i1 + -1;

        $i2 = lengthof r15;

        if $i1 >= $i2 goto label10;

        $i1 = $i0 * 2;

        $i1 = $i1 + -1;

        r21 = r15[$i1];

     label07:
        $i1 = 0;

     label08:
        $i2 = lengthof r11;

        if $i1 >= $i2 goto label11;

        $r17 = r11[$i1];

        r19 = r8[$i1];

        $r18 = interfaceinvoke $r17.<org.apache.commons.math3.RealFieldElement: java.lang.Object subtract(java.lang.Object)>(r19);

        $r17 = (org.apache.commons.math3.RealFieldElement) $r18;

        r19 = r9[$i1];

        $r18 = interfaceinvoke $r16.<org.apache.commons.math3.RealFieldElement: java.lang.Object multiply(java.lang.Object)>(r19);

        $r18 = interfaceinvoke $r17.<org.apache.commons.math3.RealFieldElement: java.lang.Object subtract(java.lang.Object)>($r18);

        $r17 = (org.apache.commons.math3.RealFieldElement) $r18;

        r5[$i1] = $r17;

        if r21 == null goto label09;

        $r17 = r10[$i1];

        r19 = r9[$i1];

        $r18 = interfaceinvoke $r17.<org.apache.commons.math3.RealFieldElement: java.lang.Object subtract(java.lang.Object)>(r19);

        $r17 = (org.apache.commons.math3.RealFieldElement) $r18;

        r21[$i1] = $r17;

     label09:
        $i1 = $i1 + 1;

        goto label08;

     label10:
        r21 = null;

        goto label07;

     label11:
        $i0 = $i0 + 1;

        goto label01;

     label12:
        r6 = new org.apache.commons.math3.linear.FieldLUDecomposition;

        r7 = new org.apache.commons.math3.linear.Array2DRowFieldMatrix;

        specialinvoke r7.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: void <init>(org.apache.commons.math3.FieldElement[][],boolean)>(r14, 0);

        specialinvoke r6.<org.apache.commons.math3.linear.FieldLUDecomposition: void <init>(org.apache.commons.math3.linear.FieldMatrix)>(r7);

        $r22 = virtualinvoke r6.<org.apache.commons.math3.linear.FieldLUDecomposition: org.apache.commons.math3.linear.FieldDecompositionSolver getSolver()>();

        r7 = new org.apache.commons.math3.linear.Array2DRowFieldMatrix;

        specialinvoke r7.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: void <init>(org.apache.commons.math3.FieldElement[][],boolean)>(r15, 0);

        $r23 = interfaceinvoke $r22.<org.apache.commons.math3.linear.FieldDecompositionSolver: org.apache.commons.math3.linear.FieldMatrix solve(org.apache.commons.math3.linear.FieldMatrix)>(r7);

        r7 = new org.apache.commons.math3.linear.Array2DRowFieldMatrix;

        $r12 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsNordsieckFieldTransformer: org.apache.commons.math3.Field field>;

        $i0 = interfaceinvoke $r23.<org.apache.commons.math3.linear.FieldMatrix: int getRowDimension()>();

        $i0 = $i0 + -1;

        $i1 = interfaceinvoke $r23.<org.apache.commons.math3.linear.FieldMatrix: int getColumnDimension()>();

        specialinvoke r7.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: void <init>(org.apache.commons.math3.Field,int,int)>($r12, $i0, $i1);

        $i0 = 0;

     label13:
        $i1 = virtualinvoke r7.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: int getRowDimension()>();

        if $i0 >= $i1 goto label16;

        $i1 = 0;

     label14:
        $i2 = virtualinvoke r7.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: int getColumnDimension()>();

        if $i1 >= $i2 goto label15;

        $r24 = interfaceinvoke $r23.<org.apache.commons.math3.linear.FieldMatrix: org.apache.commons.math3.FieldElement getEntry(int,int)>($i0, $i1);

        virtualinvoke r7.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: void setEntry(int,int,org.apache.commons.math3.FieldElement)>($i0, $i1, $r24);

        $i1 = $i1 + 1;

        goto label14;

     label15:
        $i0 = $i0 + 1;

        goto label13;

     label16:
        return r7;
    }
    public org.apache.commons.math3.linear.Array2DRowFieldMatrix updateHighOrderDerivativesPhase1(org.apache.commons.math3.linear.Array2DRowFieldMatrix)
    {
        org.apache.commons.math3.ode.nonstiff.AdamsNordsieckFieldTransformer r0;
        org.apache.commons.math3.linear.Array2DRowFieldMatrix r1, $r2;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.AdamsNordsieckFieldTransformer;

        r1 := @parameter0: org.apache.commons.math3.linear.Array2DRowFieldMatrix;

        $r2 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsNordsieckFieldTransformer: org.apache.commons.math3.linear.Array2DRowFieldMatrix update>;

        r1 = virtualinvoke $r2.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: org.apache.commons.math3.linear.Array2DRowFieldMatrix multiply(org.apache.commons.math3.linear.Array2DRowFieldMatrix)>(r1);

        return r1;
    }
    public void updateHighOrderDerivativesPhase2(org.apache.commons.math3.RealFieldElement[], org.apache.commons.math3.RealFieldElement[], org.apache.commons.math3.linear.Array2DRowFieldMatrix)
    {
        org.apache.commons.math3.ode.nonstiff.AdamsNordsieckFieldTransformer r0;
        org.apache.commons.math3.RealFieldElement[] r1, r2, r5, $r9;
        org.apache.commons.math3.linear.Array2DRowFieldMatrix r3;
        org.apache.commons.math3.RealFieldElement r4, $r6, $r10, $r11;
        org.apache.commons.math3.FieldElement[][] $r7;
        org.apache.commons.math3.RealFieldElement[][] r8;
        int i0, $i1, $i2;
        java.lang.Object $r12;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.AdamsNordsieckFieldTransformer;

        r1 := @parameter0: org.apache.commons.math3.RealFieldElement[];

        r2 := @parameter1: org.apache.commons.math3.RealFieldElement[];

        r3 := @parameter2: org.apache.commons.math3.linear.Array2DRowFieldMatrix;

        $r7 = virtualinvoke r3.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: org.apache.commons.math3.FieldElement[][] getDataRef()>();

        r8 = (org.apache.commons.math3.RealFieldElement[][]) $r7;

        i0 = 0;

     label1:
        $i1 = lengthof r8;

        if i0 >= $i1 goto label4;

        r5 = r8[i0];

        $r9 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsNordsieckFieldTransformer: org.apache.commons.math3.RealFieldElement[] c1>;

        r4 = $r9[i0];

        $i1 = 0;

     label2:
        $i2 = lengthof r5;

        if $i1 >= $i2 goto label3;

        $r10 = r5[$i1];

        $r11 = r1[$i1];

        $r6 = r2[$i1];

        $r12 = interfaceinvoke $r11.<org.apache.commons.math3.RealFieldElement: java.lang.Object subtract(java.lang.Object)>($r6);

        $r12 = interfaceinvoke r4.<org.apache.commons.math3.RealFieldElement: java.lang.Object multiply(java.lang.Object)>($r12);

        $r12 = interfaceinvoke $r10.<org.apache.commons.math3.RealFieldElement: java.lang.Object add(java.lang.Object)>($r12);

        $r6 = (org.apache.commons.math3.RealFieldElement) $r12;

        r5[$i1] = $r6;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        i0 = i0 + 1;

        goto label1;

     label4:
        return;
    }
