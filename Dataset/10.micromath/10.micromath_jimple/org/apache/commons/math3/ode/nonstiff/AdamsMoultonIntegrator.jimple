org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator extends org.apache.commons.math3.ode.nonstiff.AdamsIntegrator
private static final java.lang.String METHOD_NAME
    public void <init>(int, double, double, double, double) throws org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator r0;
        int $i0, $i1;
        double $d0, $d1, $d2, $d3;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator;

        $i0 := @parameter0: int;

        $d0 := @parameter1: double;

        $d1 := @parameter2: double;

        $d2 := @parameter3: double;

        $d3 := @parameter4: double;

        $i1 = $i0 + 1;

        specialinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsIntegrator: void <init>(java.lang.String,int,int,double,double,double,double)>("Adams-Moulton", $i0, $i1, $d0, $d1, $d2, $d3);

        return;
    }
    public void <init>(int, double, double, double[], double[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator r0;
        int $i0, $i1;
        double $d0, $d1;
        double[] $r1, $r2;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator;

        $i0 := @parameter0: int;

        $d0 := @parameter1: double;

        $d1 := @parameter2: double;

        $r1 := @parameter3: double[];

        $r2 := @parameter4: double[];

        $i1 = $i0 + 1;

        specialinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsIntegrator: void <init>(java.lang.String,int,int,double,double,double[],double[])>("Adams-Moulton", $i0, $i1, $d0, $d1, $r1, $r2);

        return;
    }
    public void integrate(org.apache.commons.math3.ode.ExpandableStatefulODE, double) throws org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.MaxCountExceededException, org.apache.commons.math3.exception.NoBracketingException
    {
        org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator r0;
        org.apache.commons.math3.ode.ExpandableStatefulODE $r1, $r13;
        double $d0, d1, d2, $d3, $d4, $d5;
        org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator r2;
        org.apache.commons.math3.ode.EquationsMapper r3;
        byte $b0;
        boolean z0, $z1;
        double[] $r4, r6, $r7, $r8, $r9, $r11;
        java.lang.Object $r5;
        int $i1, $i2, i3;
        org.apache.commons.math3.ode.EquationsMapper[] $r10;
        org.apache.commons.math3.linear.Array2DRowRealMatrix $r12, $r14;
        org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator$Corrector $r15;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator;

        $r1 := @parameter0: org.apache.commons.math3.ode.ExpandableStatefulODE;

        $d0 := @parameter1: double;

        virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: void sanityChecks(org.apache.commons.math3.ode.ExpandableStatefulODE,double)>($r1, $d0);

        virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: void setEquations(org.apache.commons.math3.ode.ExpandableStatefulODE)>($r1);

        d2 = virtualinvoke $r1.<org.apache.commons.math3.ode.ExpandableStatefulODE: double getTime()>();

        $b0 = $d0 cmpl d2;

        if $b0 <= 0 goto label05;

        z0 = 1;

     label01:
        $r4 = virtualinvoke $r1.<org.apache.commons.math3.ode.ExpandableStatefulODE: double[] getCompleteState()>();

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.Object clone()>();

        r6 = (double[]) $r5;

        $i1 = lengthof r6;

        $r7 = newarray (double)[$i1];

        $i1 = lengthof r6;

        $r8 = newarray (double)[$i1];

        $i1 = lengthof r6;

        $r9 = newarray (double)[$i1];

        r2 = new org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator;

        specialinvoke r2.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: void <init>()>();

        r3 = virtualinvoke $r1.<org.apache.commons.math3.ode.ExpandableStatefulODE: org.apache.commons.math3.ode.EquationsMapper getPrimaryMapper()>();

        $r10 = virtualinvoke $r1.<org.apache.commons.math3.ode.ExpandableStatefulODE: org.apache.commons.math3.ode.EquationsMapper[] getSecondaryMappers()>();

        virtualinvoke r2.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: void reinitialize(double[],boolean,org.apache.commons.math3.ode.EquationsMapper,org.apache.commons.math3.ode.EquationsMapper[])>(r6, z0, r3, $r10);

        d2 = virtualinvoke $r1.<org.apache.commons.math3.ode.ExpandableStatefulODE: double getTime()>();

        virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: void initIntegration(double,double[],double)>(d2, $r4, $d0);

        d2 = virtualinvoke $r1.<org.apache.commons.math3.ode.ExpandableStatefulODE: double getTime()>();

        virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: void start(double,double[],double)>(d2, r6, $d0);

        d2 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double stepStart>;

        d1 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double stepSize>;

        $r11 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double[] scaled>;

        $r12 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: org.apache.commons.math3.linear.Array2DRowRealMatrix nordsieck>;

        virtualinvoke r2.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: void reinitialize(double,double,double[],org.apache.commons.math3.linear.Array2DRowRealMatrix)>(d2, d1, $r11, $r12);

        d2 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double stepStart>;

        virtualinvoke r2.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: void storeTime(double)>(d2);

        d1 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double stepSize>;

        d2 = d1;

        virtualinvoke r2.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: void rescale(double)>(d1);

        r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: boolean isLastStep> = 0;

        $r12 = null;

     label02:
        d1 = 10.0;

     label03:
        $b0 = d1 cmpl 1.0;

        if $b0 < 0 goto label09;

        r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double stepSize> = d2;

        d1 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double stepStart>;

        $d3 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double stepSize>;

        d1 = d1 + $d3;

        virtualinvoke r2.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: void setInterpolatedTime(double)>(d1);

        $r13 = virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: org.apache.commons.math3.ode.ExpandableStatefulODE getExpandable()>();

        r3 = virtualinvoke $r13.<org.apache.commons.math3.ode.ExpandableStatefulODE: org.apache.commons.math3.ode.EquationsMapper getPrimaryMapper()>();

        $r11 = virtualinvoke r2.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: double[] getInterpolatedState()>();

        virtualinvoke r3.<org.apache.commons.math3.ode.EquationsMapper: void insertEquationData(double[],double[])>($r11, $r8);

        $i1 = 0;

        $r10 = virtualinvoke $r13.<org.apache.commons.math3.ode.ExpandableStatefulODE: org.apache.commons.math3.ode.EquationsMapper[] getSecondaryMappers()>();

        $i2 = lengthof $r10;

        i3 = 0;

     label04:
        if i3 >= $i2 goto label06;

        r3 = $r10[i3];

        $r11 = virtualinvoke r2.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: double[] getInterpolatedSecondaryState(int)>($i1);

        virtualinvoke r3.<org.apache.commons.math3.ode.EquationsMapper: void insertEquationData(double[],double[])>($r11, $r8);

        $i1 = $i1 + 1;

        i3 = i3 + 1;

        goto label04;

     label05:
        z0 = 0;

        goto label01;

     label06:
        virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: void computeDerivatives(double,double[],double[])>(d1, $r8, $r7);

        $i1 = 0;

     label07:
        $i2 = lengthof $r4;

        if $i1 >= $i2 goto label08;

        d1 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double stepSize>;

        $d3 = $r7[$i1];

        d1 = d1 * $d3;

        $r9[$i1] = d1;

        $i1 = $i1 + 1;

        goto label07;

     label08:
        $r12 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: org.apache.commons.math3.linear.Array2DRowRealMatrix nordsieck>;

        $r14 = virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: org.apache.commons.math3.linear.Array2DRowRealMatrix updateHighOrderDerivativesPhase1(org.apache.commons.math3.linear.Array2DRowRealMatrix)>($r12);

        $r12 = $r14;

        $r11 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double[] scaled>;

        virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: void updateHighOrderDerivativesPhase2(double[],double[],org.apache.commons.math3.linear.Array2DRowRealMatrix)>($r11, $r9, $r14);

        $r15 = new org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator$Corrector;

        specialinvoke $r15.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator$Corrector: void <init>(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator,double[],double[],double[])>(r0, r6, $r9, $r8);

        $d3 = virtualinvoke $r14.<org.apache.commons.math3.linear.Array2DRowRealMatrix: double walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)>($r15);

        d1 = $d3;

        $b0 = $d3 cmpl 1.0;

        if $b0 < 0 goto label03;

        d2 = virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double computeStepGrowShrinkFactor(double)>($d3);

        $d3 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double stepSize>;

        d2 = $d3 * d2;

        $d3 = virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double filterStep(double,boolean,boolean)>(d2, z0, 0);

        d2 = $d3;

        virtualinvoke r2.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: void rescale(double)>($d3);

        goto label03;

     label09:
        $d3 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double stepStart>;

        $d4 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double stepSize>;

        $d3 = $d3 + $d4;

        virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: void computeDerivatives(double,double[],double[])>($d3, $r8, $r7);

        $i1 = lengthof $r4;

        $r11 = newarray (double)[$i1];

        $i1 = 0;

     label10:
        $i2 = lengthof $r4;

        if $i1 >= $i2 goto label11;

        $d4 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double stepSize>;

        $d5 = $r7[$i1];

        $d4 = $d4 * $d5;

        $r11[$i1] = $d4;

        $i1 = $i1 + 1;

        goto label10;

     label11:
        virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: void updateHighOrderDerivativesPhase2(double[],double[],org.apache.commons.math3.linear.Array2DRowRealMatrix)>($r9, $r11, $r12);

        $i1 = lengthof r6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, 0, r6, 0, $i1);

        $d4 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double stepSize>;

        virtualinvoke r2.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: void reinitialize(double,double,double[],org.apache.commons.math3.linear.Array2DRowRealMatrix)>($d3, $d4, $r11, $r12);

        $d4 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double stepStart>;

        virtualinvoke r2.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: void storeTime(double)>($d4);

        virtualinvoke r2.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: void shift()>();

        virtualinvoke r2.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: void storeTime(double)>($d3);

        $d3 = virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)>(r2, r6, $r7, $d0);

        r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double stepStart> = $d3;

        r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double[] scaled> = $r11;

        r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: org.apache.commons.math3.linear.Array2DRowRealMatrix nordsieck> = $r12;

        $z1 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: boolean isLastStep>;

        if $z1 != 0 goto label16;

        d2 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double stepStart>;

        virtualinvoke r2.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: void storeTime(double)>(d2);

        $z1 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: boolean resetOccurred>;

        if $z1 == 0 goto label12;

        d2 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double stepStart>;

        virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: void start(double,double[],double)>(d2, r6, $d0);

        d2 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double stepStart>;

        $d3 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double stepSize>;

        $r11 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double[] scaled>;

        $r14 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: org.apache.commons.math3.linear.Array2DRowRealMatrix nordsieck>;

        virtualinvoke r2.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: void reinitialize(double,double,double[],org.apache.commons.math3.linear.Array2DRowRealMatrix)>(d2, $d3, $r11, $r14);

     label12:
        d2 = virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double computeStepGrowShrinkFactor(double)>(d1);

        d1 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double stepSize>;

        d2 = d1 * d2;

        d1 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double stepStart>;

        d1 = d1 + d2;

        if z0 == 0 goto label18;

        $b0 = d1 cmpl $d0;

        if $b0 < 0 goto label17;

        $z1 = 1;

     label13:
        d1 = virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double filterStep(double,boolean,boolean)>(d2, z0, $z1);

        d2 = d1;

        $d3 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double stepStart>;

        d1 = $d3 + d1;

        if z0 == 0 goto label21;

        $b0 = d1 cmpl $d0;

        if $b0 < 0 goto label20;

        $z1 = 1;

     label14:
        if $z1 == 0 goto label15;

        d2 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double stepStart>;

        d2 = $d0 - d2;

     label15:
        virtualinvoke r2.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: void rescale(double)>(d2);

     label16:
        $z1 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: boolean isLastStep>;

        if $z1 == 0 goto label02;

        $d0 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double stepStart>;

        virtualinvoke $r1.<org.apache.commons.math3.ode.ExpandableStatefulODE: void setTime(double)>($d0);

        virtualinvoke $r1.<org.apache.commons.math3.ode.ExpandableStatefulODE: void setCompleteState(double[])>(r6);

        virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: void resetInternalState()>();

        return;

     label17:
        $z1 = 0;

        goto label13;

     label18:
        $b0 = d1 cmpg $d0;

        if $b0 > 0 goto label19;

        $z1 = 1;

        goto label13;

     label19:
        $z1 = 0;

        goto label13;

     label20:
        $z1 = 0;

        goto label14;

     label21:
        $b0 = d1 cmpg $d0;

        if $b0 > 0 goto label22;

        $z1 = 1;

        goto label14;

     label22:
        $z1 = 0;

        goto label14;
    }
