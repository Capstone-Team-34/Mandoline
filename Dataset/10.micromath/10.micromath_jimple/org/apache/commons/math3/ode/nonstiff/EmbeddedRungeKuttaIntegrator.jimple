org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator extends org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator
private final double[][] a
private final double[] b
private final double[] c
private final double exp
private final boolean fsal
private double maxGrowth
private double minReduction
private final org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator prototype
private double safety
    protected void <init>(java.lang.String, boolean, double[], double[][], double[], org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator, double, double, double, double)
    {
        org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator r0;
        java.lang.String $r1;
        boolean $z0;
        double[] $r2, $r4;
        double[][] $r3;
        org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator $r5;
        double $d0, $d1, $d2, $d3;
        int $i0;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator;

        $r1 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $r2 := @parameter2: double[];

        $r3 := @parameter3: double[][];

        $r4 := @parameter4: double[];

        $r5 := @parameter5: org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator;

        $d0 := @parameter6: double;

        $d1 := @parameter7: double;

        $d2 := @parameter8: double;

        $d3 := @parameter9: double;

        specialinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator: void <init>(java.lang.String,double,double,double,double)>($r1, $d0, $d1, $d2, $d3);

        r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: boolean fsal> = $z0;

        r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double[] c> = $r2;

        r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double[][] a> = $r3;

        r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double[] b> = $r4;

        r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator prototype> = $r5;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: int getOrder()>();

        $d0 = (double) $i0;

        $d0 = -1.0 / $d0;

        r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double exp> = $d0;

        virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: void setSafety(double)>(0.9);

        virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: void setMinReduction(double)>(0.2);

        virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: void setMaxGrowth(double)>(10.0);

        return;
    }
    protected void <init>(java.lang.String, boolean, double[], double[][], double[], org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator, double, double, double[], double[])
    {
        org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator r0;
        java.lang.String $r1;
        boolean $z0;
        double[] $r2, $r4, $r6, $r7;
        double[][] $r3;
        org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator $r5;
        double $d0, $d1;
        int $i0;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator;

        $r1 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $r2 := @parameter2: double[];

        $r3 := @parameter3: double[][];

        $r4 := @parameter4: double[];

        $r5 := @parameter5: org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator;

        $d0 := @parameter6: double;

        $d1 := @parameter7: double;

        $r6 := @parameter8: double[];

        $r7 := @parameter9: double[];

        specialinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator: void <init>(java.lang.String,double,double,double[],double[])>($r1, $d0, $d1, $r6, $r7);

        r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: boolean fsal> = $z0;

        r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double[] c> = $r2;

        r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double[][] a> = $r3;

        r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double[] b> = $r4;

        r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator prototype> = $r5;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: int getOrder()>();

        $d0 = (double) $i0;

        $d0 = -1.0 / $d0;

        r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double exp> = $d0;

        virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: void setSafety(double)>(0.9);

        virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: void setMinReduction(double)>(0.2);

        virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: void setMaxGrowth(double)>(10.0);

        return;
    }
protected abstract double estimateError(double[][], double[], double[], double) { 
// no body
} 
    public double getMaxGrowth()
    {
        org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator r0;
        double d0;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator;

        d0 = r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double maxGrowth>;

        return d0;
    }
    public double getMinReduction()
    {
        org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator r0;
        double d0;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator;

        d0 = r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double minReduction>;

        return d0;
    }
public abstract int getOrder() { 
// no body
} 
    public double getSafety()
    {
        org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator r0;
        double d0;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator;

        d0 = r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double safety>;

        return d0;
    }
    public void integrate(org.apache.commons.math3.ode.ExpandableStatefulODE, double) throws org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.MaxCountExceededException, org.apache.commons.math3.exception.NoBracketingException
    {
        org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator r0;
        org.apache.commons.math3.ode.ExpandableStatefulODE $r1;
        double $d0, d1, d2, $d3, $d4, $d5, $d6;
        double[] $r2, $r3, r5, $r6, $r10, $r15, $r16;
        int i0, $i2, $i3, $i4, $i5;
        byte $b1;
        boolean z0, z1, $z2;
        java.lang.Object $r4;
        int[] $r7;
        java.lang.Class $r8;
        double[][] r9, $r17;
        org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator $r11;
        org.apache.commons.math3.ode.sampling.StepInterpolator $r12;
        org.apache.commons.math3.ode.EquationsMapper $r13;
        org.apache.commons.math3.ode.EquationsMapper[] $r14;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator;

        $r1 := @parameter0: org.apache.commons.math3.ode.ExpandableStatefulODE;

        $d0 := @parameter1: double;

        virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: void sanityChecks(org.apache.commons.math3.ode.ExpandableStatefulODE,double)>($r1, $d0);

        virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: void setEquations(org.apache.commons.math3.ode.ExpandableStatefulODE)>($r1);

        d2 = virtualinvoke $r1.<org.apache.commons.math3.ode.ExpandableStatefulODE: double getTime()>();

        $b1 = $d0 cmpl d2;

        if $b1 <= 0 goto label07;

        z0 = 1;

     label01:
        $r3 = virtualinvoke $r1.<org.apache.commons.math3.ode.ExpandableStatefulODE: double[] getCompleteState()>();

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Object clone()>();

        r5 = (double[]) $r4;

        $r6 = r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double[] c>;

        i0 = lengthof $r6;

        i0 = i0 + 1;

        $i2 = lengthof r5;

        $r7 = newarray (int)[2];

        $r7[0] = i0;

        $r7[1] = $i2;

        $r8 = <java.lang.Double: java.lang.Class TYPE>;

        $r4 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r8, $r7);

        r9 = (double[][]) $r4;

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Object clone()>();

        $r6 = (double[]) $r4;

        $i2 = lengthof r5;

        $r10 = newarray (double)[$i2];

        $r11 = r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator prototype>;

        $r12 = virtualinvoke $r11.<org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator: org.apache.commons.math3.ode.sampling.StepInterpolator copy()>();

        $r11 = (org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator) $r12;

        $r13 = virtualinvoke $r1.<org.apache.commons.math3.ode.ExpandableStatefulODE: org.apache.commons.math3.ode.EquationsMapper getPrimaryMapper()>();

        $r14 = virtualinvoke $r1.<org.apache.commons.math3.ode.ExpandableStatefulODE: org.apache.commons.math3.ode.EquationsMapper[] getSecondaryMappers()>();

        virtualinvoke $r11.<org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator: void reinitialize(org.apache.commons.math3.ode.AbstractIntegrator,double[],double[][],boolean,org.apache.commons.math3.ode.EquationsMapper,org.apache.commons.math3.ode.EquationsMapper[])>(r0, $r6, r9, z0, $r13, $r14);

        d2 = virtualinvoke $r1.<org.apache.commons.math3.ode.ExpandableStatefulODE: double getTime()>();

        virtualinvoke $r11.<org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator: void storeTime(double)>(d2);

        d2 = virtualinvoke $r1.<org.apache.commons.math3.ode.ExpandableStatefulODE: double getTime()>();

        r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double stepStart> = d2;

        d2 = 0.0;

        z1 = 1;

        d1 = virtualinvoke $r1.<org.apache.commons.math3.ode.ExpandableStatefulODE: double getTime()>();

        virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: void initIntegration(double,double[],double)>(d1, $r3, $d0);

        r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: boolean isLastStep> = 0;

     label02:
        virtualinvoke $r11.<org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator: void shift()>();

        d1 = 10.0;

     label03:
        $b1 = d1 cmpl 1.0;

        if $b1 < 0 goto label24;

        if z1 != 0 goto label04;

        $z2 = r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: boolean fsal>;

        if $z2 != 0 goto label05;

     label04:
        d1 = r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double stepStart>;

        $r15 = r9[0];

        virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: void computeDerivatives(double,double[],double[])>(d1, r5, $r15);

     label05:
        if z1 == 0 goto label11;

        $i2 = r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: int mainSetDimension>;

        $r15 = newarray (double)[$i2];

        $r2 = r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double[] vecAbsoluteTolerance>;

        if $r2 != null goto label08;

        $i2 = 0;

     label06:
        $i3 = lengthof $r15;

        if $i2 >= $i3 goto label10;

        d2 = r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double scalAbsoluteTolerance>;

        d1 = r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double scalRelativeTolerance>;

        $d3 = r5[$i2];

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d3);

        d1 = d1 * $d3;

        d2 = d2 + d1;

        $r15[$i2] = d2;

        $i2 = $i2 + 1;

        goto label06;

     label07:
        z0 = 0;

        goto label01;

     label08:
        $i2 = 0;

     label09:
        $i3 = lengthof $r15;

        if $i2 >= $i3 goto label10;

        $r2 = r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double[] vecAbsoluteTolerance>;

        d2 = $r2[$i2];

        $r2 = r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double[] vecRelativeTolerance>;

        d1 = $r2[$i2];

        $d3 = r5[$i2];

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d3);

        d1 = d1 * $d3;

        d2 = d2 + d1;

        $r15[$i2] = d2;

        $i2 = $i2 + 1;

        goto label09;

     label10:
        $i2 = virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: int getOrder()>();

        d2 = r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double stepStart>;

        $r16 = r9[0];

        $r2 = r9[1];

        d2 = virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double initializeStep(boolean,int,double[],double,double[],double[],double[],double[])>(z0, $i2, $r15, d2, r5, $r16, $r6, $r2);

        z1 = 0;

     label11:
        r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double stepSize> = d2;

        if z0 == 0 goto label16;

        d1 = r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double stepStart>;

        $d3 = r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double stepSize>;

        d1 = d1 + $d3;

        $b1 = d1 cmpl $d0;

        if $b1 < 0 goto label12;

        d1 = r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double stepStart>;

        d1 = $d0 - d1;

        r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double stepSize> = d1;

     label12:
        $i2 = 1;

     label13:
        if $i2 >= i0 goto label19;

        $i3 = 0;

     label14:
        $i4 = lengthof $r3;

        if $i3 >= $i4 goto label18;

        $r17 = r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double[][] a>;

        $i4 = $i2 + -1;

        $r15 = $r17[$i4];

        d1 = $r15[0];

        $r15 = r9[0];

        $d3 = $r15[$i3];

        d1 = d1 * $d3;

        $i4 = 1;

     label15:
        if $i4 >= $i2 goto label17;

        $r17 = r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double[][] a>;

        $i5 = $i2 + -1;

        $r15 = $r17[$i5];

        $d3 = $r15[$i4];

        $r15 = r9[$i4];

        $d4 = $r15[$i3];

        $d3 = $d3 * $d4;

        d1 = d1 + $d3;

        $i4 = $i4 + 1;

        goto label15;

     label16:
        d1 = r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double stepStart>;

        $d3 = r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double stepSize>;

        d1 = d1 + $d3;

        $b1 = d1 cmpg $d0;

        if $b1 > 0 goto label12;

        d1 = r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double stepStart>;

        d1 = $d0 - d1;

        r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double stepSize> = d1;

        goto label12;

     label17:
        $d3 = r5[$i3];

        $d4 = r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double stepSize>;

        d1 = $d4 * d1;

        d1 = $d3 + d1;

        $r6[$i3] = d1;

        $i3 = $i3 + 1;

        goto label14;

     label18:
        d1 = r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double stepStart>;

        $r15 = r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double[] c>;

        $i3 = $i2 + -1;

        $d3 = $r15[$i3];

        $d4 = r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double stepSize>;

        $d3 = $d3 * $d4;

        d1 = d1 + $d3;

        $r15 = r9[$i2];

        virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: void computeDerivatives(double,double[],double[])>(d1, $r6, $r15);

        $i2 = $i2 + 1;

        goto label13;

     label19:
        $i2 = 0;

     label20:
        $i3 = lengthof $r3;

        if $i2 >= $i3 goto label23;

        $r15 = r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double[] b>;

        d1 = $r15[0];

        $r15 = r9[0];

        $d3 = $r15[$i2];

        d1 = d1 * $d3;

        $i3 = 1;

     label21:
        if $i3 >= i0 goto label22;

        $r15 = r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double[] b>;

        $d3 = $r15[$i3];

        $r15 = r9[$i3];

        $d4 = $r15[$i2];

        $d3 = $d3 * $d4;

        d1 = d1 + $d3;

        $i3 = $i3 + 1;

        goto label21;

     label22:
        $d3 = r5[$i2];

        $d4 = r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double stepSize>;

        d1 = $d4 * d1;

        d1 = $d3 + d1;

        $r6[$i2] = d1;

        $i2 = $i2 + 1;

        goto label20;

     label23:
        d1 = r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double stepSize>;

        $d4 = virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double estimateError(double[][],double[],double[],double)>(r9, r5, $r6, d1);

        d1 = $d4;

        $b1 = $d4 cmpl 1.0;

        if $b1 < 0 goto label03;

        d2 = r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double maxGrowth>;

        $d3 = r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double minReduction>;

        $d5 = r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double safety>;

        $d6 = r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double exp>;

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,double)>($d4, $d6);

        $d4 = $d5 * $d4;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>($d3, $d4);

        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double min(double,double)>(d2, $d3);

        $d3 = r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double stepSize>;

        d2 = $d3 * d2;

        d2 = virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double filterStep(double,boolean,boolean)>(d2, z0, 0);

        goto label03;

     label24:
        $d3 = r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double stepStart>;

        $d4 = r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double stepSize>;

        $d3 = $d3 + $d4;

        virtualinvoke $r11.<org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator: void storeTime(double)>($d3);

        $i2 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, r5, 0, $i2);

        $i2 = i0 + -1;

        $r15 = r9[$i2];

        $i2 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r15, 0, $r10, 0, $i2);

        $d3 = virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)>($r11, r5, $r10, $d0);

        r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double stepStart> = $d3;

        $i2 = lengthof r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r5, 0, $r6, 0, $i2);

        $z2 = r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: boolean isLastStep>;

        if $z2 != 0 goto label28;

        d2 = r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double stepStart>;

        virtualinvoke $r11.<org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator: void storeTime(double)>(d2);

        $z2 = r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: boolean fsal>;

        if $z2 == 0 goto label25;

        $r15 = r9[0];

        $i2 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, 0, $r15, 0, $i2);

     label25:
        d2 = r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double maxGrowth>;

        $d3 = r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double minReduction>;

        $d4 = r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double safety>;

        $d5 = r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double exp>;

        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,double)>(d1, $d5);

        d1 = $d4 * d1;

        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>($d3, d1);

        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double min(double,double)>(d2, d1);

        d1 = r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double stepSize>;

        d2 = d1 * d2;

        d1 = r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double stepStart>;

        d1 = d1 + d2;

        if z0 == 0 goto label30;

        $b1 = d1 cmpl $d0;

        if $b1 < 0 goto label29;

        $z2 = 1;

     label26:
        d1 = virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double filterStep(double,boolean,boolean)>(d2, z0, $z2);

        d2 = d1;

        $d3 = r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double stepStart>;

        d1 = $d3 + d1;

        if z0 == 0 goto label33;

        $b1 = d1 cmpl $d0;

        if $b1 < 0 goto label32;

        $z2 = 1;

     label27:
        if $z2 == 0 goto label28;

        d2 = r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double stepStart>;

        d2 = $d0 - d2;

     label28:
        $z2 = r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: boolean isLastStep>;

        if $z2 == 0 goto label02;

        $d0 = r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double stepStart>;

        virtualinvoke $r1.<org.apache.commons.math3.ode.ExpandableStatefulODE: void setTime(double)>($d0);

        virtualinvoke $r1.<org.apache.commons.math3.ode.ExpandableStatefulODE: void setCompleteState(double[])>(r5);

        virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: void resetInternalState()>();

        return;

     label29:
        $z2 = 0;

        goto label26;

     label30:
        $b1 = d1 cmpg $d0;

        if $b1 > 0 goto label31;

        $z2 = 1;

        goto label26;

     label31:
        $z2 = 0;

        goto label26;

     label32:
        $z2 = 0;

        goto label27;

     label33:
        $b1 = d1 cmpg $d0;

        if $b1 > 0 goto label34;

        $z2 = 1;

        goto label27;

     label34:
        $z2 = 0;

        goto label27;
    }
    public void setMaxGrowth(double)
    {
        org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator;

        $d0 := @parameter0: double;

        r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double maxGrowth> = $d0;

        return;
    }
    public void setMinReduction(double)
    {
        org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator;

        $d0 := @parameter0: double;

        r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double minReduction> = $d0;

        return;
    }
    public void setSafety(double)
    {
        org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator;

        $d0 := @parameter0: double;

        r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double safety> = $d0;

        return;
    }
