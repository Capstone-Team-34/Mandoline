org.apache.commons.math3.ode.FirstOrderConverter extends java.lang.Object implements org.apache.commons.math3.ode.FirstOrderDifferentialEquations
private final int dimension
private final org.apache.commons.math3.ode.SecondOrderDifferentialEquations equations
private final double[] z
private final double[] zDDot
private final double[] zDot
    public void <init>(org.apache.commons.math3.ode.SecondOrderDifferentialEquations)
    {
        org.apache.commons.math3.ode.FirstOrderConverter r0;
        org.apache.commons.math3.ode.SecondOrderDifferentialEquations $r1;
        int $i0;
        double[] $r2;

        r0 := @this: org.apache.commons.math3.ode.FirstOrderConverter;

        $r1 := @parameter0: org.apache.commons.math3.ode.SecondOrderDifferentialEquations;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.ode.FirstOrderConverter: org.apache.commons.math3.ode.SecondOrderDifferentialEquations equations> = $r1;

        $i0 = interfaceinvoke $r1.<org.apache.commons.math3.ode.SecondOrderDifferentialEquations: int getDimension()>();

        r0.<org.apache.commons.math3.ode.FirstOrderConverter: int dimension> = $i0;

        $i0 = r0.<org.apache.commons.math3.ode.FirstOrderConverter: int dimension>;

        $r2 = newarray (double)[$i0];

        r0.<org.apache.commons.math3.ode.FirstOrderConverter: double[] z> = $r2;

        $i0 = r0.<org.apache.commons.math3.ode.FirstOrderConverter: int dimension>;

        $r2 = newarray (double)[$i0];

        r0.<org.apache.commons.math3.ode.FirstOrderConverter: double[] zDot> = $r2;

        $i0 = r0.<org.apache.commons.math3.ode.FirstOrderConverter: int dimension>;

        $r2 = newarray (double)[$i0];

        r0.<org.apache.commons.math3.ode.FirstOrderConverter: double[] zDDot> = $r2;

        return;
    }
    public void computeDerivatives(double, double[], double[])
    {
        org.apache.commons.math3.ode.FirstOrderConverter r0;
        double $d0;
        double[] $r1, $r2, $r3, $r4;
        int $i0, $i1;
        org.apache.commons.math3.ode.SecondOrderDifferentialEquations $r5;

        r0 := @this: org.apache.commons.math3.ode.FirstOrderConverter;

        $d0 := @parameter0: double;

        $r1 := @parameter1: double[];

        $r2 := @parameter2: double[];

        $r3 = r0.<org.apache.commons.math3.ode.FirstOrderConverter: double[] z>;

        $i0 = r0.<org.apache.commons.math3.ode.FirstOrderConverter: int dimension>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r3, 0, $i0);

        $i0 = r0.<org.apache.commons.math3.ode.FirstOrderConverter: int dimension>;

        $r3 = r0.<org.apache.commons.math3.ode.FirstOrderConverter: double[] zDot>;

        $i1 = r0.<org.apache.commons.math3.ode.FirstOrderConverter: int dimension>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i0, $r3, 0, $i1);

        $r5 = r0.<org.apache.commons.math3.ode.FirstOrderConverter: org.apache.commons.math3.ode.SecondOrderDifferentialEquations equations>;

        $r1 = r0.<org.apache.commons.math3.ode.FirstOrderConverter: double[] z>;

        $r3 = r0.<org.apache.commons.math3.ode.FirstOrderConverter: double[] zDot>;

        $r4 = r0.<org.apache.commons.math3.ode.FirstOrderConverter: double[] zDDot>;

        interfaceinvoke $r5.<org.apache.commons.math3.ode.SecondOrderDifferentialEquations: void computeSecondDerivatives(double,double[],double[],double[])>($d0, $r1, $r3, $r4);

        $r1 = r0.<org.apache.commons.math3.ode.FirstOrderConverter: double[] zDot>;

        $i0 = r0.<org.apache.commons.math3.ode.FirstOrderConverter: int dimension>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r2, 0, $i0);

        $r1 = r0.<org.apache.commons.math3.ode.FirstOrderConverter: double[] zDDot>;

        $i0 = r0.<org.apache.commons.math3.ode.FirstOrderConverter: int dimension>;

        $i1 = r0.<org.apache.commons.math3.ode.FirstOrderConverter: int dimension>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r2, $i0, $i1);

        return;
    }
    public int getDimension()
    {
        org.apache.commons.math3.ode.FirstOrderConverter r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.ode.FirstOrderConverter;

        $i0 = r0.<org.apache.commons.math3.ode.FirstOrderConverter: int dimension>;

        $i0 = $i0 * 2;

        return $i0;
    }
