org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator extends org.apache.commons.math3.ode.nonstiff.AdamsIntegrator
private static final java.lang.String METHOD_NAME
    public void <init>(int, double, double, double, double) throws org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator r0;
        int $i0;
        double $d0, $d1, $d2, $d3;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator;

        $i0 := @parameter0: int;

        $d0 := @parameter1: double;

        $d1 := @parameter2: double;

        $d2 := @parameter3: double;

        $d3 := @parameter4: double;

        specialinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsIntegrator: void <init>(java.lang.String,int,int,double,double,double,double)>("Adams-Bashforth", $i0, $i0, $d0, $d1, $d2, $d3);

        return;
    }
    public void <init>(int, double, double, double[], double[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator r0;
        int $i0;
        double $d0, $d1;
        double[] $r1, $r2;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator;

        $i0 := @parameter0: int;

        $d0 := @parameter1: double;

        $d1 := @parameter2: double;

        $r1 := @parameter3: double[];

        $r2 := @parameter4: double[];

        specialinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsIntegrator: void <init>(java.lang.String,int,int,double,double,double[],double[])>("Adams-Bashforth", $i0, $i0, $d0, $d1, $r1, $r2);

        return;
    }
    private double errorEstimation(double[], double[], double[], org.apache.commons.math3.linear.RealMatrix)
    {
        org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator r0;
        double[] $r1, $r2, $r3, $r5;
        org.apache.commons.math3.linear.RealMatrix $r4;
        double d0, d1, $d2, $d3, $d4;
        int i0, $i1;
        byte b2;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[];

        $r3 := @parameter2: double[];

        $r4 := @parameter3: org.apache.commons.math3.linear.RealMatrix;

        d1 = 0.0;

        i0 = 0;

     label1:
        $i1 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: int mainSetDimension>;

        if i0 >= $i1 goto label8;

        d0 = $r2[i0];

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d0);

        $r5 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double[] vecAbsoluteTolerance>;

        if $r5 != null goto label5;

        $d2 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double scalAbsoluteTolerance>;

        $d3 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double scalRelativeTolerance>;

        d0 = $d3 * d0;

        d0 = $d2 + d0;

     label2:
        $d2 = 0.0;

        $i1 = interfaceinvoke $r4.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $i1 = $i1 % 2;

        if $i1 != 0 goto label6;

        b2 = -1;

     label3:
        $i1 = interfaceinvoke $r4.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $i1 = $i1 + -1;

     label4:
        if $i1 < 0 goto label7;

        $d3 = (double) b2;

        $d4 = interfaceinvoke $r4.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>($i1, i0);

        $d3 = $d3 * $d4;

        $d2 = $d2 + $d3;

        b2 = neg b2;

        $i1 = $i1 + -1;

        goto label4;

     label5:
        $r5 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double[] vecAbsoluteTolerance>;

        $d2 = $r5[i0];

        $r5 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double[] vecRelativeTolerance>;

        $d3 = $r5[i0];

        d0 = $d3 * d0;

        d0 = $d2 + d0;

        goto label2;

     label6:
        b2 = 1;

        goto label3;

     label7:
        $d3 = $r3[i0];

        $d2 = $d2 - $d3;

        $d3 = $r2[i0];

        $d4 = $r1[i0];

        $d3 = $d3 - $d4;

        $d2 = $d3 + $d2;

        d0 = $d2 / d0;

        d0 = d0 * d0;

        d1 = d1 + d0;

        i0 = i0 + 1;

        goto label1;

     label8:
        i0 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: int mainSetDimension>;

        d0 = (double) i0;

        d1 = d1 / d0;

        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d1);

        return d1;
    }
    public void integrate(org.apache.commons.math3.ode.ExpandableStatefulODE, double) throws org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.MaxCountExceededException, org.apache.commons.math3.exception.NoBracketingException
    {
        org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator r0;
        org.apache.commons.math3.ode.ExpandableStatefulODE $r1, $r10;
        double $d0, d1, d2, $d3, $d4;
        org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator r2;
        org.apache.commons.math3.ode.EquationsMapper r3;
        byte $b0;
        boolean z0, $z1;
        double[] $r4, $r5, $r7, $r9, $r11;
        int $i1, $i2, i3;
        org.apache.commons.math3.ode.EquationsMapper[] $r6;
        org.apache.commons.math3.linear.Array2DRowRealMatrix $r8, $r12;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator;

        $r1 := @parameter0: org.apache.commons.math3.ode.ExpandableStatefulODE;

        $d0 := @parameter1: double;

        virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: void sanityChecks(org.apache.commons.math3.ode.ExpandableStatefulODE,double)>($r1, $d0);

        virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: void setEquations(org.apache.commons.math3.ode.ExpandableStatefulODE)>($r1);

        d2 = virtualinvoke $r1.<org.apache.commons.math3.ode.ExpandableStatefulODE: double getTime()>();

        $b0 = $d0 cmpl d2;

        if $b0 <= 0 goto label05;

        z0 = 1;

     label01:
        $r4 = virtualinvoke $r1.<org.apache.commons.math3.ode.ExpandableStatefulODE: double[] getCompleteState()>();

        $i1 = lengthof $r4;

        $r5 = newarray (double)[$i1];

        r2 = new org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator;

        specialinvoke r2.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: void <init>()>();

        r3 = virtualinvoke $r1.<org.apache.commons.math3.ode.ExpandableStatefulODE: org.apache.commons.math3.ode.EquationsMapper getPrimaryMapper()>();

        $r6 = virtualinvoke $r1.<org.apache.commons.math3.ode.ExpandableStatefulODE: org.apache.commons.math3.ode.EquationsMapper[] getSecondaryMappers()>();

        virtualinvoke r2.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: void reinitialize(double[],boolean,org.apache.commons.math3.ode.EquationsMapper,org.apache.commons.math3.ode.EquationsMapper[])>($r4, z0, r3, $r6);

        d2 = virtualinvoke $r1.<org.apache.commons.math3.ode.ExpandableStatefulODE: double getTime()>();

        virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: void initIntegration(double,double[],double)>(d2, $r4, $d0);

        d2 = virtualinvoke $r1.<org.apache.commons.math3.ode.ExpandableStatefulODE: double getTime()>();

        virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: void start(double,double[],double)>(d2, $r4, $d0);

        d2 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double stepStart>;

        d1 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double stepSize>;

        $r7 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double[] scaled>;

        $r8 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: org.apache.commons.math3.linear.Array2DRowRealMatrix nordsieck>;

        virtualinvoke r2.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: void reinitialize(double,double,double[],org.apache.commons.math3.linear.Array2DRowRealMatrix)>(d2, d1, $r7, $r8);

        d2 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double stepStart>;

        virtualinvoke r2.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: void storeTime(double)>(d2);

        d1 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double stepSize>;

        d2 = d1;

        virtualinvoke r2.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: void rescale(double)>(d1);

        r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: boolean isLastStep> = 0;

     label02:
        virtualinvoke r2.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: void shift()>();

        $i1 = lengthof $r4;

        $r7 = newarray (double)[$i1];

        $i1 = lengthof $r4;

        $r9 = newarray (double)[$i1];

        $r8 = null;

        d1 = 10.0;

     label03:
        $b0 = d1 cmpl 1.0;

        if $b0 < 0 goto label09;

        d1 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double stepStart>;

        d1 = d1 + d2;

        virtualinvoke r2.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: void storeTime(double)>(d1);

        $r10 = virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: org.apache.commons.math3.ode.ExpandableStatefulODE getExpandable()>();

        r3 = virtualinvoke $r10.<org.apache.commons.math3.ode.ExpandableStatefulODE: org.apache.commons.math3.ode.EquationsMapper getPrimaryMapper()>();

        $r11 = virtualinvoke r2.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: double[] getInterpolatedState()>();

        virtualinvoke r3.<org.apache.commons.math3.ode.EquationsMapper: void insertEquationData(double[],double[])>($r11, $r7);

        $i1 = 0;

        $r6 = virtualinvoke $r10.<org.apache.commons.math3.ode.ExpandableStatefulODE: org.apache.commons.math3.ode.EquationsMapper[] getSecondaryMappers()>();

        $i2 = lengthof $r6;

        i3 = 0;

     label04:
        if i3 >= $i2 goto label06;

        r3 = $r6[i3];

        $r11 = virtualinvoke r2.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: double[] getInterpolatedSecondaryState(int)>($i1);

        virtualinvoke r3.<org.apache.commons.math3.ode.EquationsMapper: void insertEquationData(double[],double[])>($r11, $r7);

        $i1 = $i1 + 1;

        i3 = i3 + 1;

        goto label04;

     label05:
        z0 = 0;

        goto label01;

     label06:
        virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: void computeDerivatives(double,double[],double[])>(d1, $r7, $r5);

        $i1 = 0;

     label07:
        $i2 = lengthof $r9;

        if $i1 >= $i2 goto label08;

        d1 = $r5[$i1];

        d1 = d1 * d2;

        $r9[$i1] = d1;

        $i1 = $i1 + 1;

        goto label07;

     label08:
        $r8 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: org.apache.commons.math3.linear.Array2DRowRealMatrix nordsieck>;

        $r12 = virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: org.apache.commons.math3.linear.Array2DRowRealMatrix updateHighOrderDerivativesPhase1(org.apache.commons.math3.linear.Array2DRowRealMatrix)>($r8);

        $r8 = $r12;

        $r11 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double[] scaled>;

        virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: void updateHighOrderDerivativesPhase2(double[],double[],org.apache.commons.math3.linear.Array2DRowRealMatrix)>($r11, $r9, $r12);

        $d3 = specialinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double errorEstimation(double[],double[],double[],org.apache.commons.math3.linear.RealMatrix)>($r4, $r7, $r9, $r12);

        d1 = $d3;

        $b0 = $d3 cmpl 1.0;

        if $b0 < 0 goto label03;

        $d3 = virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double computeStepGrowShrinkFactor(double)>($d3);

        d2 = d2 * $d3;

        $d3 = virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double filterStep(double,boolean,boolean)>(d2, z0, 0);

        d2 = $d3;

        virtualinvoke r2.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: void rescale(double)>($d3);

        goto label03;

     label09:
        r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double stepSize> = d2;

        $d3 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double stepStart>;

        $d4 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double stepSize>;

        $d3 = $d3 + $d4;

        $d4 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double stepSize>;

        virtualinvoke r2.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: void reinitialize(double,double,double[],org.apache.commons.math3.linear.Array2DRowRealMatrix)>($d3, $d4, $r9, $r8);

        virtualinvoke r2.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: void storeTime(double)>($d3);

        $i1 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, $r4, 0, $i1);

        $d4 = virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)>(r2, $r4, $r5, $d0);

        r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double stepStart> = $d4;

        r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double[] scaled> = $r9;

        r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: org.apache.commons.math3.linear.Array2DRowRealMatrix nordsieck> = $r8;

        $d4 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double stepSize>;

        $r7 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double[] scaled>;

        $r8 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: org.apache.commons.math3.linear.Array2DRowRealMatrix nordsieck>;

        virtualinvoke r2.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: void reinitialize(double,double,double[],org.apache.commons.math3.linear.Array2DRowRealMatrix)>($d3, $d4, $r7, $r8);

        $z1 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: boolean isLastStep>;

        if $z1 != 0 goto label14;

        d2 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double stepStart>;

        virtualinvoke r2.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: void storeTime(double)>(d2);

        $z1 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: boolean resetOccurred>;

        if $z1 == 0 goto label10;

        d2 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double stepStart>;

        virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: void start(double,double[],double)>(d2, $r4, $d0);

        d2 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double stepStart>;

        $d3 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double stepSize>;

        $r7 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double[] scaled>;

        $r8 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: org.apache.commons.math3.linear.Array2DRowRealMatrix nordsieck>;

        virtualinvoke r2.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: void reinitialize(double,double,double[],org.apache.commons.math3.linear.Array2DRowRealMatrix)>(d2, $d3, $r7, $r8);

     label10:
        d2 = virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double computeStepGrowShrinkFactor(double)>(d1);

        d1 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double stepSize>;

        d2 = d1 * d2;

        d1 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double stepStart>;

        d1 = d1 + d2;

        if z0 == 0 goto label16;

        $b0 = d1 cmpl $d0;

        if $b0 < 0 goto label15;

        $z1 = 1;

     label11:
        d1 = virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double filterStep(double,boolean,boolean)>(d2, z0, $z1);

        d2 = d1;

        $d3 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double stepStart>;

        d1 = $d3 + d1;

        if z0 == 0 goto label19;

        $b0 = d1 cmpl $d0;

        if $b0 < 0 goto label18;

        $z1 = 1;

     label12:
        if $z1 == 0 goto label13;

        d2 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double stepStart>;

        d2 = $d0 - d2;

     label13:
        virtualinvoke r2.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: void rescale(double)>(d2);

     label14:
        $z1 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: boolean isLastStep>;

        if $z1 == 0 goto label02;

        $d0 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double stepStart>;

        virtualinvoke $r1.<org.apache.commons.math3.ode.ExpandableStatefulODE: void setTime(double)>($d0);

        virtualinvoke $r1.<org.apache.commons.math3.ode.ExpandableStatefulODE: void setCompleteState(double[])>($r4);

        virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: void resetInternalState()>();

        return;

     label15:
        $z1 = 0;

        goto label11;

     label16:
        $b0 = d1 cmpg $d0;

        if $b0 > 0 goto label17;

        $z1 = 1;

        goto label11;

     label17:
        $z1 = 0;

        goto label11;

     label18:
        $z1 = 0;

        goto label12;

     label19:
        $b0 = d1 cmpg $d0;

        if $b0 > 0 goto label20;

        $z1 = 1;

        goto label12;

     label20:
        $z1 = 0;

        goto label12;
    }
