org.apache.commons.math3.ode.nonstiff.LutherIntegrator extends org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator
private static final double Q
private static final double[][] STATIC_A
private static final double[] STATIC_B
private static final double[] STATIC_C
    static void <clinit>()
    {
        double $d0;
        double[] $r0;
        double[][] $r1;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(21.0);

        <org.apache.commons.math3.ode.nonstiff.LutherIntegrator: double Q> = $d0;

        $r0 = newarray (double)[6];

        $r0[0] = 1.0;

        $r0[1] = 0.5;

        $r0[2] = 0.6666666666666666;

        $d0 = <org.apache.commons.math3.ode.nonstiff.LutherIntegrator: double Q>;

        $d0 = 7.0 - $d0;

        $d0 = $d0 / 14.0;

        $r0[3] = $d0;

        $d0 = <org.apache.commons.math3.ode.nonstiff.LutherIntegrator: double Q>;

        $d0 = 7.0 + $d0;

        $d0 = $d0 / 14.0;

        $r0[4] = $d0;

        $d0 = (double) 4607182418800017408L;

        $r0[5] = $d0;

        <org.apache.commons.math3.ode.nonstiff.LutherIntegrator: double[] STATIC_C> = $r0;

        $r1 = newarray (double[])[6];

        $r0 = newarray (double)[1];

        $r0[0] = 1.0;

        $r1[0] = $r0;

        $r0 = newarray (double)[2];

        $r0[0] = 0.375;

        $r0[1] = 0.125;

        $r1[1] = $r0;

        $r0 = newarray (double)[3];

        $r0[0] = 0.2962962962962963;

        $r0[1] = 0.07407407407407407;

        $r0[2] = 0.2962962962962963;

        $r1[2] = $r0;

        $r0 = newarray (double)[4];

        $d0 = <org.apache.commons.math3.ode.nonstiff.LutherIntegrator: double Q>;

        $d0 = 9.0 * $d0;

        $d0 = -21.0 + $d0;

        $d0 = $d0 / 392.0;

        $r0[0] = $d0;

        $d0 = <org.apache.commons.math3.ode.nonstiff.LutherIntegrator: double Q>;

        $d0 = 8.0 * $d0;

        $d0 = -56.0 + $d0;

        $d0 = $d0 / 392.0;

        $r0[1] = $d0;

        $d0 = <org.apache.commons.math3.ode.nonstiff.LutherIntegrator: double Q>;

        $d0 = 48.0 * $d0;

        $d0 = 336.0 - $d0;

        $d0 = $d0 / 392.0;

        $r0[2] = $d0;

        $d0 = <org.apache.commons.math3.ode.nonstiff.LutherIntegrator: double Q>;

        $d0 = 3.0 * $d0;

        $d0 = -63.0 + $d0;

        $d0 = $d0 / 392.0;

        $r0[3] = $d0;

        $r1[3] = $r0;

        $r0 = newarray (double)[5];

        $d0 = <org.apache.commons.math3.ode.nonstiff.LutherIntegrator: double Q>;

        $d0 = 255.0 * $d0;

        $d0 = -1155.0 - $d0;

        $d0 = $d0 / 1960.0;

        $r0[0] = $d0;

        $d0 = <org.apache.commons.math3.ode.nonstiff.LutherIntegrator: double Q>;

        $d0 = 40.0 * $d0;

        $d0 = -280.0 - $d0;

        $d0 = $d0 / 1960.0;

        $r0[1] = $d0;

        $d0 = <org.apache.commons.math3.ode.nonstiff.LutherIntegrator: double Q>;

        $d0 = 320.0 * $d0;

        $d0 = 0.0 - $d0;

        $d0 = $d0 / 1960.0;

        $r0[2] = $d0;

        $d0 = <org.apache.commons.math3.ode.nonstiff.LutherIntegrator: double Q>;

        $d0 = 363.0 * $d0;

        $d0 = 63.0 + $d0;

        $d0 = $d0 / 1960.0;

        $r0[3] = $d0;

        $d0 = <org.apache.commons.math3.ode.nonstiff.LutherIntegrator: double Q>;

        $d0 = 392.0 * $d0;

        $d0 = 2352.0 + $d0;

        $d0 = $d0 / 1960.0;

        $r0[4] = $d0;

        $r1[4] = $r0;

        $r0 = newarray (double)[6];

        $d0 = <org.apache.commons.math3.ode.nonstiff.LutherIntegrator: double Q>;

        $d0 = 105.0 * $d0;

        $d0 = 330.0 + $d0;

        $d0 = $d0 / 180.0;

        $r0[0] = $d0;

        $d0 = <org.apache.commons.math3.ode.nonstiff.LutherIntegrator: double Q>;

        $d0 = 0.0 * $d0;

        $d0 = 120.0 + $d0;

        $d0 = $d0 / 180.0;

        $r0[1] = $d0;

        $d0 = <org.apache.commons.math3.ode.nonstiff.LutherIntegrator: double Q>;

        $d0 = 280.0 * $d0;

        $d0 = -200.0 + $d0;

        $d0 = $d0 / 180.0;

        $r0[2] = $d0;

        $d0 = <org.apache.commons.math3.ode.nonstiff.LutherIntegrator: double Q>;

        $d0 = 189.0 * $d0;

        $d0 = 126.0 - $d0;

        $d0 = $d0 / 180.0;

        $r0[3] = $d0;

        $d0 = <org.apache.commons.math3.ode.nonstiff.LutherIntegrator: double Q>;

        $d0 = 126.0 * $d0;

        $d0 = -686.0 - $d0;

        $d0 = $d0 / 180.0;

        $r0[4] = $d0;

        $d0 = <org.apache.commons.math3.ode.nonstiff.LutherIntegrator: double Q>;

        $d0 = 70.0 * $d0;

        $d0 = 490.0 - $d0;

        $d0 = $d0 / 180.0;

        $r0[5] = $d0;

        $r1[5] = $r0;

        <org.apache.commons.math3.ode.nonstiff.LutherIntegrator: double[][] STATIC_A> = $r1;

        $r0 = newarray (double)[7];

        $r0[0] = 0.05;

        $r0[1] = 0.0;

        $r0[2] = 0.35555555555555557;

        $r0[3] = 0.0;

        $r0[4] = 0.2722222222222222;

        $r0[5] = 0.2722222222222222;

        $r0[6] = 0.05;

        <org.apache.commons.math3.ode.nonstiff.LutherIntegrator: double[] STATIC_B> = $r0;

        return;
    }
    public void <init>(double)
    {
        org.apache.commons.math3.ode.nonstiff.LutherIntegrator r0;
        double $d0;
        double[] $r1, $r3;
        double[][] $r2;
        org.apache.commons.math3.ode.nonstiff.LutherStepInterpolator $r4;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.LutherIntegrator;

        $d0 := @parameter0: double;

        $r1 = <org.apache.commons.math3.ode.nonstiff.LutherIntegrator: double[] STATIC_C>;

        $r2 = <org.apache.commons.math3.ode.nonstiff.LutherIntegrator: double[][] STATIC_A>;

        $r3 = <org.apache.commons.math3.ode.nonstiff.LutherIntegrator: double[] STATIC_B>;

        $r4 = new org.apache.commons.math3.ode.nonstiff.LutherStepInterpolator;

        specialinvoke $r4.<org.apache.commons.math3.ode.nonstiff.LutherStepInterpolator: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator: void <init>(java.lang.String,double[],double[][],double[],org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator,double)>("Luther", $r1, $r2, $r3, $r4, $d0);

        return;
    }
