org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator extends org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator
private static final long serialVersionUID
    public void <init>()
    {
        org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator r0;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator;

        specialinvoke r0.<org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator: void <init>()>();

        return;
    }
    void <init>(org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator)
    {
        org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator r0, $r1;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator;

        $r1 := @parameter0: org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator;

        specialinvoke r0.<org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator: void <init>(org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator)>($r1);

        return;
    }
    protected void computeInterpolatedStateAndDerivatives(double, double)
    {
        org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator r0;
        double $d0, $d1, d2, d3, d4, d5, d6, $d7, $d8, $d9, $d10;
        double[] $r1, $r3;
        byte $b0;
        int i1, $i2;
        double[][] $r2;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        d3 = 1.0 - $d0;

        d2 = 2.0 * $d0;

        d4 = 1.0 - d2;

        d2 = d3 * d4;

        $d7 = 2.0 * $d0;

        d3 = $d7 * d3;

        $d7 = neg $d0;

        d4 = $d7 * d4;

        $r1 = r0.<org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator: double[] previousState>;

        if $r1 == null goto label2;

        $b0 = $d0 cmpg 0.5;

        if $b0 > 0 goto label2;

        $d1 = 4.0 * $d0;

        d6 = $d1 * $d0;

        $d1 = r0.<org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator: double h>;

        $d1 = $d1 * $d0;

        d5 = $d1 / 6.0;

        $d1 = 9.0 * $d0;

        $d1 = 6.0 - $d1;

        $d1 = $d1 + d6;

        $d1 = d5 * $d1;

        $d7 = 6.0 * $d0;

        $d7 = $d7 - d6;

        $d7 = d5 * $d7;

        $d0 = -3.0 * $d0;

        $d0 = $d0 + d6;

        $d0 = d5 * $d0;

        i1 = 0;

     label1:
        $r1 = r0.<org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator: double[] interpolatedState>;

        $i2 = lengthof $r1;

        if i1 >= $i2 goto label4;

        $r2 = r0.<org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator: double[][] yDotK>;

        $r1 = $r2[0];

        d5 = $r1[i1];

        $r2 = r0.<org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator: double[][] yDotK>;

        $r1 = $r2[1];

        d6 = $r1[i1];

        $r2 = r0.<org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator: double[][] yDotK>;

        $r1 = $r2[2];

        $d8 = $r1[i1];

        $d8 = d6 + $d8;

        $r2 = r0.<org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator: double[][] yDotK>;

        $r1 = $r2[3];

        d6 = $r1[i1];

        $r1 = r0.<org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator: double[] interpolatedState>;

        $r3 = r0.<org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator: double[] previousState>;

        $d9 = $r3[i1];

        $d10 = $d1 * d5;

        $d9 = $d9 + $d10;

        $d10 = $d7 * $d8;

        $d9 = $d9 + $d10;

        $d10 = $d0 * d6;

        $d9 = $d9 + $d10;

        $r1[i1] = $d9;

        $r1 = r0.<org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator: double[] interpolatedDerivatives>;

        d5 = d2 * d5;

        $d8 = d3 * $d8;

        d5 = d5 + $d8;

        d6 = d4 * d6;

        d6 = d5 + d6;

        $r1[i1] = d6;

        i1 = i1 + 1;

        goto label1;

     label2:
        d5 = 4.0 * $d0;

        d6 = $d1 / 6.0;

        $d1 = neg d5;

        $d1 = $d1 + 5.0;

        $d1 = $d1 * $d0;

        $d1 = $d1 - 1.0;

        $d1 = d6 * $d1;

        $d7 = d5 - 2.0;

        $d7 = $d7 * $d0;

        $d7 = $d7 - 2.0;

        $d7 = d6 * $d7;

        d5 = neg d5;

        d5 = d5 - 1.0;

        $d0 = d5 * $d0;

        $d0 = $d0 - 1.0;

        $d0 = d6 * $d0;

        i1 = 0;

     label3:
        $r1 = r0.<org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator: double[] interpolatedState>;

        $i2 = lengthof $r1;

        if i1 >= $i2 goto label4;

        $r2 = r0.<org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator: double[][] yDotK>;

        $r1 = $r2[0];

        d5 = $r1[i1];

        $r2 = r0.<org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator: double[][] yDotK>;

        $r1 = $r2[1];

        d6 = $r1[i1];

        $r2 = r0.<org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator: double[][] yDotK>;

        $r1 = $r2[2];

        $d8 = $r1[i1];

        $d8 = d6 + $d8;

        $r2 = r0.<org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator: double[][] yDotK>;

        $r1 = $r2[3];

        d6 = $r1[i1];

        $r1 = r0.<org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator: double[] interpolatedState>;

        $r3 = r0.<org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator: double[] currentState>;

        $d9 = $r3[i1];

        $d10 = $d1 * d5;

        $d9 = $d9 + $d10;

        $d10 = $d7 * $d8;

        $d9 = $d9 + $d10;

        $d10 = $d0 * d6;

        $d9 = $d9 + $d10;

        $r1[i1] = $d9;

        $r1 = r0.<org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator: double[] interpolatedDerivatives>;

        d5 = d2 * d5;

        $d8 = d3 * $d8;

        d5 = d5 + $d8;

        d6 = d4 * d6;

        d6 = d5 + d6;

        $r1[i1] = d6;

        i1 = i1 + 1;

        goto label3;

     label4:
        return;
    }
    protected org.apache.commons.math3.ode.sampling.StepInterpolator doCopy()
    {
        org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator r0, $r1;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator;

        $r1 = new org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator;

        specialinvoke $r1.<org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator: void <init>(org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator)>(r0);

        return $r1;
    }
