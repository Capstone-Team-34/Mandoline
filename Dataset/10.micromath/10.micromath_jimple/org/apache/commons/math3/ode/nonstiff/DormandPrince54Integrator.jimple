org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator extends org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator
private static final double E1
private static final double E3
private static final double E4
private static final double E5
private static final double E6
private static final double E7
private static final java.lang.String METHOD_NAME
private static final double[][] STATIC_A
private static final double[] STATIC_B
private static final double[] STATIC_C
    static void <clinit>()
    {
        double[] $r0;
        double[][] $r1;

        $r0 = newarray (double)[6];

        $r0[0] = 0.2;

        $r0[1] = 0.3;

        $r0[2] = 0.8;

        $r0[3] = 0.8888888888888888;

        $r0[4] = 1.0;

        $r0[5] = 1.0;

        <org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator: double[] STATIC_C> = $r0;

        $r1 = newarray (double[])[6];

        $r0 = newarray (double)[1];

        $r0[0] = 0.2;

        $r1[0] = $r0;

        $r0 = newarray (double)[2];

        $r0[0] = 0.075;

        $r0[1] = 0.225;

        $r1[1] = $r0;

        $r0 = newarray (double)[3];

        $r0[0] = 0.9777777777777777;

        $r0[1] = -3.7333333333333334;

        $r0[2] = 3.5555555555555554;

        $r1[2] = $r0;

        $r0 = newarray (double)[4];

        $r0[0] = 2.9525986892242035;

        $r0[1] = -11.595793324188385;

        $r0[2] = 9.822892851699436;

        $r0[3] = -0.2908093278463649;

        $r1[3] = $r0;

        $r0 = newarray (double)[5];

        $r0[0] = 2.8462752525252526;

        $r0[1] = -10.757575757575758;

        $r0[2] = 8.906422717743473;

        $r0[3] = 0.2784090909090909;

        $r0[4] = -0.2735313036020583;

        $r1[4] = $r0;

        $r0 = newarray (double)[6];

        $r0[0] = 0.09114583333333333;

        $r0[1] = 0.0;

        $r0[2] = 0.44923629829290207;

        $r0[3] = 0.6510416666666666;

        $r0[4] = -0.322376179245283;

        $r0[5] = 0.13095238095238096;

        $r1[5] = $r0;

        <org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator: double[][] STATIC_A> = $r1;

        $r0 = newarray (double)[7];

        $r0[0] = 0.09114583333333333;

        $r0[1] = 0.0;

        $r0[2] = 0.44923629829290207;

        $r0[3] = 0.6510416666666666;

        $r0[4] = -0.322376179245283;

        $r0[5] = 0.13095238095238096;

        $r0[6] = 0.0;

        <org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator: double[] STATIC_B> = $r0;

        return;
    }
    public void <init>(double, double, double, double)
    {
        org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator r0;
        double $d0, $d1, $d2, $d3;
        double[] $r1, $r3;
        double[][] $r2;
        org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator $r4;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $d3 := @parameter3: double;

        $r1 = <org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator: double[] STATIC_C>;

        $r2 = <org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator: double[][] STATIC_A>;

        $r3 = <org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator: double[] STATIC_B>;

        $r4 = new org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator;

        specialinvoke $r4.<org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: void <init>(java.lang.String,boolean,double[],double[][],double[],org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator,double,double,double,double)>("Dormand-Prince 5(4)", 1, $r1, $r2, $r3, $r4, $d0, $d1, $d2, $d3);

        return;
    }
    public void <init>(double, double, double[], double[])
    {
        org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator r0;
        double $d0, $d1;
        double[] $r1, $r2, $r3, $r5;
        double[][] $r4;
        org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator $r6;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $r1 := @parameter2: double[];

        $r2 := @parameter3: double[];

        $r3 = <org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator: double[] STATIC_C>;

        $r4 = <org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator: double[][] STATIC_A>;

        $r5 = <org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator: double[] STATIC_B>;

        $r6 = new org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator;

        specialinvoke $r6.<org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator: void <init>(java.lang.String,boolean,double[],double[][],double[],org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator,double,double,double[],double[])>("Dormand-Prince 5(4)", 1, $r3, $r4, $r5, $r6, $d0, $d1, $r1, $r2);

        return;
    }
    protected double estimateError(double[][], double[], double[], double)
    {
        org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator r0;
        double[][] $r1;
        double[] $r2, $r3, $r4;
        double $d0, d1, d2, $d3, $d4, $d5;
        int i0, $i1;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;

        $r1 := @parameter0: double[][];

        $r2 := @parameter1: double[];

        $r3 := @parameter2: double[];

        $d0 := @parameter3: double;

        d2 = 0.0;

        i0 = 0;

     label1:
        $i1 = r0.<org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator: int mainSetDimension>;

        if i0 >= $i1 goto label4;

        $r4 = $r1[0];

        d1 = $r4[i0];

        d1 = 0.0012326388888888888 * d1;

        $r4 = $r1[2];

        $d3 = $r4[i0];

        $d3 = -0.0042527702905061394 * $d3;

        d1 = d1 + $d3;

        $r4 = $r1[3];

        $d3 = $r4[i0];

        $d3 = 0.03697916666666667 * $d3;

        d1 = d1 + $d3;

        $r4 = $r1[4];

        $d3 = $r4[i0];

        $d3 = -0.05086379716981132 * $d3;

        d1 = d1 + $d3;

        $r4 = $r1[5];

        $d3 = $r4[i0];

        $d3 = 0.0419047619047619 * $d3;

        d1 = d1 + $d3;

        $r4 = $r1[6];

        $d3 = $r4[i0];

        $d3 = -0.025 * $d3;

        d1 = d1 + $d3;

        $d3 = $r2[i0];

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d3);

        $d4 = $r3[i0];

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d4);

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>($d3, $d4);

        $r4 = r0.<org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator: double[] vecAbsoluteTolerance>;

        if $r4 != null goto label3;

        $d4 = r0.<org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator: double scalAbsoluteTolerance>;

        $d5 = r0.<org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator: double scalRelativeTolerance>;

        $d3 = $d5 * $d3;

        $d3 = $d4 + $d3;

     label2:
        d1 = $d0 * d1;

        d1 = d1 / $d3;

        d1 = d1 * d1;

        d2 = d2 + d1;

        i0 = i0 + 1;

        goto label1;

     label3:
        $r4 = r0.<org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator: double[] vecAbsoluteTolerance>;

        $d4 = $r4[i0];

        $r4 = r0.<org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator: double[] vecRelativeTolerance>;

        $d5 = $r4[i0];

        $d3 = $d5 * $d3;

        $d3 = $d4 + $d3;

        goto label2;

     label4:
        i0 = r0.<org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator: int mainSetDimension>;

        $d0 = (double) i0;

        $d0 = d2 / $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d0);

        return $d0;
    }
    public int getOrder()
    {
        org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator r0;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;

        return 5;
    }
