org.apache.commons.math3.ode.MultistepIntegrator extends org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator
private double exp
private double maxGrowth
private double minReduction
private final int nSteps
protected org.apache.commons.math3.linear.Array2DRowRealMatrix nordsieck
private double safety
protected double[] scaled
private org.apache.commons.math3.ode.FirstOrderIntegrator starter
    protected void <init>(java.lang.String, int, int, double, double, double, double) throws org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.ode.MultistepIntegrator r0;
        java.lang.String $r1;
        int $i0, $i1;
        double $d0, $d1, $d2, $d3;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3;
        java.lang.Integer $r4, $r5;
        org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator $r6;

        r0 := @this: org.apache.commons.math3.ode.MultistepIntegrator;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $d0 := @parameter3: double;

        $d1 := @parameter4: double;

        $d2 := @parameter5: double;

        $d3 := @parameter6: double;

        specialinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator: void <init>(java.lang.String,double,double,double,double)>($r1, $d0, $d1, $d2, $d3);

        if $i0 >= 2 goto label1;

        $r2 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INTEGRATION_METHOD_NEEDS_AT_LEAST_TWO_PREVIOUS_POINTS>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        specialinvoke $r2.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r3, $r4, $r5, 1);

        throw $r2;

     label1:
        $r6 = new org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;

        specialinvoke $r6.<org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator: void <init>(double,double,double,double)>($d0, $d1, $d2, $d3);

        r0.<org.apache.commons.math3.ode.MultistepIntegrator: org.apache.commons.math3.ode.FirstOrderIntegrator starter> = $r6;

        r0.<org.apache.commons.math3.ode.MultistepIntegrator: int nSteps> = $i0;

        $d0 = (double) $i1;

        $d0 = -1.0 / $d0;

        r0.<org.apache.commons.math3.ode.MultistepIntegrator: double exp> = $d0;

        virtualinvoke r0.<org.apache.commons.math3.ode.MultistepIntegrator: void setSafety(double)>(0.9);

        virtualinvoke r0.<org.apache.commons.math3.ode.MultistepIntegrator: void setMinReduction(double)>(0.2);

        $d0 = r0.<org.apache.commons.math3.ode.MultistepIntegrator: double exp>;

        $d0 = neg $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,double)>(2.0, $d0);

        virtualinvoke r0.<org.apache.commons.math3.ode.MultistepIntegrator: void setMaxGrowth(double)>($d0);

        return;
    }
    protected void <init>(java.lang.String, int, int, double, double, double[], double[])
    {
        org.apache.commons.math3.ode.MultistepIntegrator r0;
        java.lang.String $r1;
        int $i0, $i1;
        double $d0, $d1;
        double[] $r2, $r3;
        org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator $r4;

        r0 := @this: org.apache.commons.math3.ode.MultistepIntegrator;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $d0 := @parameter3: double;

        $d1 := @parameter4: double;

        $r2 := @parameter5: double[];

        $r3 := @parameter6: double[];

        specialinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator: void <init>(java.lang.String,double,double,double[],double[])>($r1, $d0, $d1, $r2, $r3);

        $r4 = new org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;

        specialinvoke $r4.<org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator: void <init>(double,double,double[],double[])>($d0, $d1, $r2, $r3);

        r0.<org.apache.commons.math3.ode.MultistepIntegrator: org.apache.commons.math3.ode.FirstOrderIntegrator starter> = $r4;

        r0.<org.apache.commons.math3.ode.MultistepIntegrator: int nSteps> = $i0;

        $d0 = (double) $i1;

        $d0 = -1.0 / $d0;

        r0.<org.apache.commons.math3.ode.MultistepIntegrator: double exp> = $d0;

        virtualinvoke r0.<org.apache.commons.math3.ode.MultistepIntegrator: void setSafety(double)>(0.9);

        virtualinvoke r0.<org.apache.commons.math3.ode.MultistepIntegrator: void setMinReduction(double)>(0.2);

        $d0 = r0.<org.apache.commons.math3.ode.MultistepIntegrator: double exp>;

        $d0 = neg $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,double)>(2.0, $d0);

        virtualinvoke r0.<org.apache.commons.math3.ode.MultistepIntegrator: void setMaxGrowth(double)>($d0);

        return;
    }
    protected double computeStepGrowShrinkFactor(double)
    {
        org.apache.commons.math3.ode.MultistepIntegrator r0;
        double $d0, $d1, $d2, $d3, $d4;

        r0 := @this: org.apache.commons.math3.ode.MultistepIntegrator;

        $d0 := @parameter0: double;

        $d1 = r0.<org.apache.commons.math3.ode.MultistepIntegrator: double maxGrowth>;

        $d2 = r0.<org.apache.commons.math3.ode.MultistepIntegrator: double minReduction>;

        $d3 = r0.<org.apache.commons.math3.ode.MultistepIntegrator: double safety>;

        $d4 = r0.<org.apache.commons.math3.ode.MultistepIntegrator: double exp>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,double)>($d0, $d4);

        $d0 = $d3 * $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>($d2, $d0);

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double min(double,double)>($d1, $d0);

        return $d0;
    }
    public double getMaxGrowth()
    {
        org.apache.commons.math3.ode.MultistepIntegrator r0;
        double d0;

        r0 := @this: org.apache.commons.math3.ode.MultistepIntegrator;

        d0 = r0.<org.apache.commons.math3.ode.MultistepIntegrator: double maxGrowth>;

        return d0;
    }
    public double getMinReduction()
    {
        org.apache.commons.math3.ode.MultistepIntegrator r0;
        double d0;

        r0 := @this: org.apache.commons.math3.ode.MultistepIntegrator;

        d0 = r0.<org.apache.commons.math3.ode.MultistepIntegrator: double minReduction>;

        return d0;
    }
    public int getNSteps()
    {
        org.apache.commons.math3.ode.MultistepIntegrator r0;
        int i0;

        r0 := @this: org.apache.commons.math3.ode.MultistepIntegrator;

        i0 = r0.<org.apache.commons.math3.ode.MultistepIntegrator: int nSteps>;

        return i0;
    }
    public double getSafety()
    {
        org.apache.commons.math3.ode.MultistepIntegrator r0;
        double d0;

        r0 := @this: org.apache.commons.math3.ode.MultistepIntegrator;

        d0 = r0.<org.apache.commons.math3.ode.MultistepIntegrator: double safety>;

        return d0;
    }
    public org.apache.commons.math3.ode.ODEIntegrator getStarterIntegrator()
    {
        org.apache.commons.math3.ode.MultistepIntegrator r0;
        org.apache.commons.math3.ode.FirstOrderIntegrator r1;

        r0 := @this: org.apache.commons.math3.ode.MultistepIntegrator;

        r1 = r0.<org.apache.commons.math3.ode.MultistepIntegrator: org.apache.commons.math3.ode.FirstOrderIntegrator starter>;

        return r1;
    }
protected abstract org.apache.commons.math3.linear.Array2DRowRealMatrix initializeHighOrderDerivatives(double, double[], double[][], double[][]) { 
// no body
} 
    public void setMaxGrowth(double)
    {
        org.apache.commons.math3.ode.MultistepIntegrator r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.ode.MultistepIntegrator;

        $d0 := @parameter0: double;

        r0.<org.apache.commons.math3.ode.MultistepIntegrator: double maxGrowth> = $d0;

        return;
    }
    public void setMinReduction(double)
    {
        org.apache.commons.math3.ode.MultistepIntegrator r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.ode.MultistepIntegrator;

        $d0 := @parameter0: double;

        r0.<org.apache.commons.math3.ode.MultistepIntegrator: double minReduction> = $d0;

        return;
    }
    public void setSafety(double)
    {
        org.apache.commons.math3.ode.MultistepIntegrator r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.ode.MultistepIntegrator;

        $d0 := @parameter0: double;

        r0.<org.apache.commons.math3.ode.MultistepIntegrator: double safety> = $d0;

        return;
    }
    public void setStarterIntegrator(org.apache.commons.math3.ode.FirstOrderIntegrator)
    {
        org.apache.commons.math3.ode.MultistepIntegrator r0;
        org.apache.commons.math3.ode.FirstOrderIntegrator $r1;

        r0 := @this: org.apache.commons.math3.ode.MultistepIntegrator;

        $r1 := @parameter0: org.apache.commons.math3.ode.FirstOrderIntegrator;

        r0.<org.apache.commons.math3.ode.MultistepIntegrator: org.apache.commons.math3.ode.FirstOrderIntegrator starter> = $r1;

        return;
    }
    protected void start(double, double[], double) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.MaxCountExceededException, org.apache.commons.math3.exception.NoBracketingException
    {
        org.apache.commons.math3.ode.MultistepIntegrator r0;
        double $d0, $d1;
        double[] $r1, $r2;
        int $i0, $i1;
        org.apache.commons.math3.ode.MultistepIntegrator$InitializationCompletedMarkerException r3;
        org.apache.commons.math3.ode.FirstOrderIntegrator $r4;
        org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer $r5;
        boolean $z0;
        org.apache.commons.math3.ode.AbstractIntegrator $r6;
        org.apache.commons.math3.ode.ExpandableStatefulODE $r7;
        org.apache.commons.math3.exception.MathIllegalStateException $r8;
        org.apache.commons.math3.exception.util.LocalizedFormats $r9;
        java.lang.Object[] $r10;
        org.apache.commons.math3.util.IntegerSequence$Incrementor $r11;
        org.apache.commons.math3.ode.MultistepIntegrator$1 $r12;

        r0 := @this: org.apache.commons.math3.ode.MultistepIntegrator;

        $d0 := @parameter0: double;

        $r1 := @parameter1: double[];

        $d1 := @parameter2: double;

        $r4 = r0.<org.apache.commons.math3.ode.MultistepIntegrator: org.apache.commons.math3.ode.FirstOrderIntegrator starter>;

        interfaceinvoke $r4.<org.apache.commons.math3.ode.FirstOrderIntegrator: void clearEventHandlers()>();

        $r4 = r0.<org.apache.commons.math3.ode.MultistepIntegrator: org.apache.commons.math3.ode.FirstOrderIntegrator starter>;

        interfaceinvoke $r4.<org.apache.commons.math3.ode.FirstOrderIntegrator: void clearStepHandlers()>();

        $r4 = r0.<org.apache.commons.math3.ode.MultistepIntegrator: org.apache.commons.math3.ode.FirstOrderIntegrator starter>;

        $r5 = new org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer;

        $i0 = r0.<org.apache.commons.math3.ode.MultistepIntegrator: int nSteps>;

        $i0 = $i0 + 3;

        $i1 = $i0 / 2;

        $i0 = lengthof $r1;

        specialinvoke $r5.<org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer: void <init>(org.apache.commons.math3.ode.MultistepIntegrator,int,int)>(r0, $i1, $i0);

        interfaceinvoke $r4.<org.apache.commons.math3.ode.FirstOrderIntegrator: void addStepHandler(org.apache.commons.math3.ode.sampling.StepHandler)>($r5);

        $r4 = r0.<org.apache.commons.math3.ode.MultistepIntegrator: org.apache.commons.math3.ode.FirstOrderIntegrator starter>;

        $z0 = $r4 instanceof org.apache.commons.math3.ode.AbstractIntegrator;

        if $z0 == 0 goto label06;

        $r4 = r0.<org.apache.commons.math3.ode.MultistepIntegrator: org.apache.commons.math3.ode.FirstOrderIntegrator starter>;

        $r6 = (org.apache.commons.math3.ode.AbstractIntegrator) $r4;

     label01:
        $r7 = virtualinvoke r0.<org.apache.commons.math3.ode.MultistepIntegrator: org.apache.commons.math3.ode.ExpandableStatefulODE getExpandable()>();

        virtualinvoke $r6.<org.apache.commons.math3.ode.AbstractIntegrator: void integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)>($r7, $d1);

     label02:
        $r8 = new org.apache.commons.math3.exception.MathIllegalStateException;

        $r9 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats MULTISTEP_STARTER_STOPPED_EARLY>;

        $r10 = newarray (java.lang.Object)[0];

     label03:
        specialinvoke $r8.<org.apache.commons.math3.exception.MathIllegalStateException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r9, $r10);

     label04:
        throw $r8;

     label05:
        r3 := @caughtexception;

        $r11 = virtualinvoke r0.<org.apache.commons.math3.ode.MultistepIntegrator: org.apache.commons.math3.util.IntegerSequence$Incrementor getCounter()>();

        $r4 = r0.<org.apache.commons.math3.ode.MultistepIntegrator: org.apache.commons.math3.ode.FirstOrderIntegrator starter>;

        $i0 = interfaceinvoke $r4.<org.apache.commons.math3.ode.FirstOrderIntegrator: int getEvaluations()>();

        virtualinvoke $r11.<org.apache.commons.math3.util.IntegerSequence$Incrementor: void increment(int)>($i0);

        $r4 = r0.<org.apache.commons.math3.ode.MultistepIntegrator: org.apache.commons.math3.ode.FirstOrderIntegrator starter>;

        interfaceinvoke $r4.<org.apache.commons.math3.ode.FirstOrderIntegrator: void clearStepHandlers()>();

        return;

     label06:
        $r4 = r0.<org.apache.commons.math3.ode.MultistepIntegrator: org.apache.commons.math3.ode.FirstOrderIntegrator starter>;

        $r12 = new org.apache.commons.math3.ode.MultistepIntegrator$1;

     label07:
        specialinvoke $r12.<org.apache.commons.math3.ode.MultistepIntegrator$1: void <init>(org.apache.commons.math3.ode.MultistepIntegrator)>(r0);

     label08:
        $i0 = lengthof $r1;

        $r2 = newarray (double)[$i0];

     label09:
        interfaceinvoke $r4.<org.apache.commons.math3.ode.FirstOrderIntegrator: double integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])>($r12, $d0, $r1, $d1, $r2);

     label10:
        goto label02;

        catch org.apache.commons.math3.ode.MultistepIntegrator$InitializationCompletedMarkerException from label01 to label02 with label05;
        catch org.apache.commons.math3.ode.MultistepIntegrator$InitializationCompletedMarkerException from label03 to label04 with label05;
        catch org.apache.commons.math3.ode.MultistepIntegrator$InitializationCompletedMarkerException from label07 to label08 with label05;
        catch org.apache.commons.math3.ode.MultistepIntegrator$InitializationCompletedMarkerException from label09 to label10 with label05;
    }
