org.apache.commons.math3.ode.nonstiff.EulerStepInterpolator extends org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator
private static final long serialVersionUID
    public void <init>()
    {
        org.apache.commons.math3.ode.nonstiff.EulerStepInterpolator r0;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.EulerStepInterpolator;

        specialinvoke r0.<org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator: void <init>()>();

        return;
    }
    void <init>(org.apache.commons.math3.ode.nonstiff.EulerStepInterpolator)
    {
        org.apache.commons.math3.ode.nonstiff.EulerStepInterpolator r0, $r1;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.EulerStepInterpolator;

        $r1 := @parameter0: org.apache.commons.math3.ode.nonstiff.EulerStepInterpolator;

        specialinvoke r0.<org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator: void <init>(org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator)>($r1);

        return;
    }
    protected void computeInterpolatedStateAndDerivatives(double, double)
    {
        org.apache.commons.math3.ode.nonstiff.EulerStepInterpolator r0;
        double $d0, $d1, $d2, $d3;
        double[] $r1, $r2, $r4;
        byte $b0;
        int i1, $i2;
        double[][] $r3;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.EulerStepInterpolator;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $r1 = r0.<org.apache.commons.math3.ode.nonstiff.EulerStepInterpolator: double[] previousState>;

        if $r1 == null goto label3;

        $b0 = $d0 cmpg 0.5;

        if $b0 > 0 goto label3;

        i1 = 0;

     label1:
        $r1 = r0.<org.apache.commons.math3.ode.nonstiff.EulerStepInterpolator: double[] interpolatedState>;

        $i2 = lengthof $r1;

        if i1 >= $i2 goto label2;

        $r1 = r0.<org.apache.commons.math3.ode.nonstiff.EulerStepInterpolator: double[] interpolatedState>;

        $r2 = r0.<org.apache.commons.math3.ode.nonstiff.EulerStepInterpolator: double[] previousState>;

        $d1 = $r2[i1];

        $d2 = r0.<org.apache.commons.math3.ode.nonstiff.EulerStepInterpolator: double h>;

        $d2 = $d2 * $d0;

        $r3 = r0.<org.apache.commons.math3.ode.nonstiff.EulerStepInterpolator: double[][] yDotK>;

        $r2 = $r3[0];

        $d3 = $r2[i1];

        $d2 = $d2 * $d3;

        $d1 = $d1 + $d2;

        $r1[i1] = $d1;

        i1 = i1 + 1;

        goto label1;

     label2:
        $r3 = r0.<org.apache.commons.math3.ode.nonstiff.EulerStepInterpolator: double[][] yDotK>;

        $r1 = $r3[0];

        $r2 = r0.<org.apache.commons.math3.ode.nonstiff.EulerStepInterpolator: double[] interpolatedDerivatives>;

        $r4 = r0.<org.apache.commons.math3.ode.nonstiff.EulerStepInterpolator: double[] interpolatedDerivatives>;

        i1 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r2, 0, i1);

        return;

     label3:
        i1 = 0;

     label4:
        $r1 = r0.<org.apache.commons.math3.ode.nonstiff.EulerStepInterpolator: double[] interpolatedState>;

        $i2 = lengthof $r1;

        if i1 >= $i2 goto label5;

        $r1 = r0.<org.apache.commons.math3.ode.nonstiff.EulerStepInterpolator: double[] interpolatedState>;

        $r2 = r0.<org.apache.commons.math3.ode.nonstiff.EulerStepInterpolator: double[] currentState>;

        $d0 = $r2[i1];

        $r3 = r0.<org.apache.commons.math3.ode.nonstiff.EulerStepInterpolator: double[][] yDotK>;

        $r2 = $r3[0];

        $d2 = $r2[i1];

        $d2 = $d2 * $d1;

        $d0 = $d0 - $d2;

        $r1[i1] = $d0;

        i1 = i1 + 1;

        goto label4;

     label5:
        $r3 = r0.<org.apache.commons.math3.ode.nonstiff.EulerStepInterpolator: double[][] yDotK>;

        $r1 = $r3[0];

        $r2 = r0.<org.apache.commons.math3.ode.nonstiff.EulerStepInterpolator: double[] interpolatedDerivatives>;

        $r4 = r0.<org.apache.commons.math3.ode.nonstiff.EulerStepInterpolator: double[] interpolatedDerivatives>;

        i1 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r2, 0, i1);

        return;
    }
    protected org.apache.commons.math3.ode.sampling.StepInterpolator doCopy()
    {
        org.apache.commons.math3.ode.nonstiff.EulerStepInterpolator r0, $r1;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.EulerStepInterpolator;

        $r1 = new org.apache.commons.math3.ode.nonstiff.EulerStepInterpolator;

        specialinvoke $r1.<org.apache.commons.math3.ode.nonstiff.EulerStepInterpolator: void <init>(org.apache.commons.math3.ode.nonstiff.EulerStepInterpolator)>(r0);

        return $r1;
    }
