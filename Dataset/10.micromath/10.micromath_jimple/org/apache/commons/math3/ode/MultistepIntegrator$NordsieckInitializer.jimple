org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer extends java.lang.Object implements org.apache.commons.math3.ode.sampling.StepHandler
private int count
private final double[] t
final org.apache.commons.math3.ode.MultistepIntegrator this$0
private final double[][] y
private final double[][] yDot
    void <init>(org.apache.commons.math3.ode.MultistepIntegrator, int, int)
    {
        org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer r0;
        org.apache.commons.math3.ode.MultistepIntegrator $r1;
        int $i0, $i1;
        double[] $r2;
        int[] $r3;
        java.lang.Class $r4;
        java.lang.Object $r5;
        double[][] $r6;

        r0 := @this: org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer;

        $r1 := @parameter0: org.apache.commons.math3.ode.MultistepIntegrator;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        r0.<org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer: org.apache.commons.math3.ode.MultistepIntegrator this$0> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer: int count> = 0;

        $r2 = newarray (double)[$i0];

        r0.<org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer: double[] t> = $r2;

        $r3 = newarray (int)[2];

        $r3[0] = $i0;

        $r3[1] = $i1;

        $r4 = <java.lang.Double: java.lang.Class TYPE>;

        $r5 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r4, $r3);

        $r6 = (double[][]) $r5;

        r0.<org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer: double[][] y> = $r6;

        $r3 = newarray (int)[2];

        $r3[0] = $i0;

        $r3[1] = $i1;

        $r4 = <java.lang.Double: java.lang.Class TYPE>;

        $r5 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r4, $r3);

        $r6 = (double[][]) $r5;

        r0.<org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer: double[][] yDot> = $r6;

        return;
    }
    public void handleStep(org.apache.commons.math3.ode.sampling.StepInterpolator, boolean) throws org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer r0;
        org.apache.commons.math3.ode.sampling.StepInterpolator $r1;
        boolean $z0;
        double[][] $r2, $r12;
        double $d0, $d1;
        int $i0, $i1, i2, $i3;
        double[] $r3, $r7;
        org.apache.commons.math3.ode.MultistepIntegrator $r4, $r10, $r11;
        org.apache.commons.math3.ode.ExpandableStatefulODE $r5;
        org.apache.commons.math3.ode.EquationsMapper $r6;
        org.apache.commons.math3.ode.EquationsMapper[] $r8;
        java.lang.Object $r9;
        org.apache.commons.math3.linear.Array2DRowRealMatrix $r13;
        org.apache.commons.math3.ode.MultistepIntegrator$InitializationCompletedMarkerException $r14;

        r0 := @this: org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer;

        $r1 := @parameter0: org.apache.commons.math3.ode.sampling.StepInterpolator;

        $z0 := @parameter1: boolean;

        $d0 = interfaceinvoke $r1.<org.apache.commons.math3.ode.sampling.StepInterpolator: double getPreviousTime()>();

        $d1 = interfaceinvoke $r1.<org.apache.commons.math3.ode.sampling.StepInterpolator: double getCurrentTime()>();

        $i0 = r0.<org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer: int count>;

        if $i0 != 0 goto label2;

        interfaceinvoke $r1.<org.apache.commons.math3.ode.sampling.StepInterpolator: void setInterpolatedTime(double)>($d0);

        $r3 = r0.<org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer: double[] t>;

        $r3[0] = $d0;

        $r4 = r0.<org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer: org.apache.commons.math3.ode.MultistepIntegrator this$0>;

        $r5 = virtualinvoke $r4.<org.apache.commons.math3.ode.MultistepIntegrator: org.apache.commons.math3.ode.ExpandableStatefulODE getExpandable()>();

        $r6 = virtualinvoke $r5.<org.apache.commons.math3.ode.ExpandableStatefulODE: org.apache.commons.math3.ode.EquationsMapper getPrimaryMapper()>();

        $r3 = interfaceinvoke $r1.<org.apache.commons.math3.ode.sampling.StepInterpolator: double[] getInterpolatedState()>();

        $r2 = r0.<org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer: double[][] y>;

        $i0 = r0.<org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer: int count>;

        $r7 = $r2[$i0];

        virtualinvoke $r6.<org.apache.commons.math3.ode.EquationsMapper: void insertEquationData(double[],double[])>($r3, $r7);

        $r3 = interfaceinvoke $r1.<org.apache.commons.math3.ode.sampling.StepInterpolator: double[] getInterpolatedDerivatives()>();

        $r2 = r0.<org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer: double[][] yDot>;

        $i0 = r0.<org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer: int count>;

        $r7 = $r2[$i0];

        virtualinvoke $r6.<org.apache.commons.math3.ode.EquationsMapper: void insertEquationData(double[],double[])>($r3, $r7);

        $i0 = 0;

        $r8 = virtualinvoke $r5.<org.apache.commons.math3.ode.ExpandableStatefulODE: org.apache.commons.math3.ode.EquationsMapper[] getSecondaryMappers()>();

        $i1 = lengthof $r8;

        i2 = 0;

     label1:
        if i2 >= $i1 goto label2;

        $r6 = $r8[i2];

        $r3 = interfaceinvoke $r1.<org.apache.commons.math3.ode.sampling.StepInterpolator: double[] getInterpolatedSecondaryState(int)>($i0);

        $r2 = r0.<org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer: double[][] y>;

        $i3 = r0.<org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer: int count>;

        $r7 = $r2[$i3];

        virtualinvoke $r6.<org.apache.commons.math3.ode.EquationsMapper: void insertEquationData(double[],double[])>($r3, $r7);

        $r3 = interfaceinvoke $r1.<org.apache.commons.math3.ode.sampling.StepInterpolator: double[] getInterpolatedSecondaryDerivatives(int)>($i0);

        $r2 = r0.<org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer: double[][] yDot>;

        $i3 = r0.<org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer: int count>;

        $r7 = $r2[$i3];

        virtualinvoke $r6.<org.apache.commons.math3.ode.EquationsMapper: void insertEquationData(double[],double[])>($r3, $r7);

        $i0 = $i0 + 1;

        i2 = i2 + 1;

        goto label1;

     label2:
        $i0 = r0.<org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer: int count>;

        $i0 = $i0 + 1;

        r0.<org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer: int count> = $i0;

        interfaceinvoke $r1.<org.apache.commons.math3.ode.sampling.StepInterpolator: void setInterpolatedTime(double)>($d1);

        $r3 = r0.<org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer: double[] t>;

        $i0 = r0.<org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer: int count>;

        $r3[$i0] = $d1;

        $r4 = r0.<org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer: org.apache.commons.math3.ode.MultistepIntegrator this$0>;

        $r5 = virtualinvoke $r4.<org.apache.commons.math3.ode.MultistepIntegrator: org.apache.commons.math3.ode.ExpandableStatefulODE getExpandable()>();

        $r6 = virtualinvoke $r5.<org.apache.commons.math3.ode.ExpandableStatefulODE: org.apache.commons.math3.ode.EquationsMapper getPrimaryMapper()>();

        $r3 = interfaceinvoke $r1.<org.apache.commons.math3.ode.sampling.StepInterpolator: double[] getInterpolatedState()>();

        $r2 = r0.<org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer: double[][] y>;

        $i0 = r0.<org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer: int count>;

        $r7 = $r2[$i0];

        virtualinvoke $r6.<org.apache.commons.math3.ode.EquationsMapper: void insertEquationData(double[],double[])>($r3, $r7);

        $r3 = interfaceinvoke $r1.<org.apache.commons.math3.ode.sampling.StepInterpolator: double[] getInterpolatedDerivatives()>();

        $r2 = r0.<org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer: double[][] yDot>;

        $i0 = r0.<org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer: int count>;

        $r7 = $r2[$i0];

        virtualinvoke $r6.<org.apache.commons.math3.ode.EquationsMapper: void insertEquationData(double[],double[])>($r3, $r7);

        $i0 = 0;

        $r8 = virtualinvoke $r5.<org.apache.commons.math3.ode.ExpandableStatefulODE: org.apache.commons.math3.ode.EquationsMapper[] getSecondaryMappers()>();

        $i1 = lengthof $r8;

        i2 = 0;

     label3:
        if i2 >= $i1 goto label4;

        $r6 = $r8[i2];

        $r3 = interfaceinvoke $r1.<org.apache.commons.math3.ode.sampling.StepInterpolator: double[] getInterpolatedSecondaryState(int)>($i0);

        $r2 = r0.<org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer: double[][] y>;

        $i3 = r0.<org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer: int count>;

        $r7 = $r2[$i3];

        virtualinvoke $r6.<org.apache.commons.math3.ode.EquationsMapper: void insertEquationData(double[],double[])>($r3, $r7);

        $r3 = interfaceinvoke $r1.<org.apache.commons.math3.ode.sampling.StepInterpolator: double[] getInterpolatedSecondaryDerivatives(int)>($i0);

        $r2 = r0.<org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer: double[][] yDot>;

        $i3 = r0.<org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer: int count>;

        $r7 = $r2[$i3];

        virtualinvoke $r6.<org.apache.commons.math3.ode.EquationsMapper: void insertEquationData(double[],double[])>($r3, $r7);

        $i0 = $i0 + 1;

        i2 = i2 + 1;

        goto label3;

     label4:
        $i0 = r0.<org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer: int count>;

        $r3 = r0.<org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer: double[] t>;

        $i1 = lengthof $r3;

        $i1 = $i1 + -1;

        if $i0 != $i1 goto label7;

        $r4 = r0.<org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer: org.apache.commons.math3.ode.MultistepIntegrator this$0>;

        $r3 = r0.<org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer: double[] t>;

        $d0 = $r3[0];

        $r4.<org.apache.commons.math3.ode.MultistepIntegrator: double stepStart> = $d0;

        $r4 = r0.<org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer: org.apache.commons.math3.ode.MultistepIntegrator this$0>;

        $r3 = r0.<org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer: double[] t>;

        $r7 = r0.<org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer: double[] t>;

        $i0 = lengthof $r7;

        $i0 = $i0 + -1;

        $d0 = $r3[$i0];

        $r3 = r0.<org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer: double[] t>;

        $d1 = $r3[0];

        $d0 = $d0 - $d1;

        $r3 = r0.<org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer: double[] t>;

        $i0 = lengthof $r3;

        $i0 = $i0 + -1;

        $d1 = (double) $i0;

        $d0 = $d0 / $d1;

        $r4.<org.apache.commons.math3.ode.MultistepIntegrator: double stepSize> = $d0;

        $r4 = r0.<org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer: org.apache.commons.math3.ode.MultistepIntegrator this$0>;

        $r2 = r0.<org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer: double[][] yDot>;

        $r3 = $r2[0];

        $r9 = virtualinvoke $r3.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (double[]) $r9;

        $r4.<org.apache.commons.math3.ode.MultistepIntegrator: double[] scaled> = $r3;

        $i0 = 0;

     label5:
        $r4 = r0.<org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer: org.apache.commons.math3.ode.MultistepIntegrator this$0>;

        $r3 = $r4.<org.apache.commons.math3.ode.MultistepIntegrator: double[] scaled>;

        $i1 = lengthof $r3;

        if $i0 >= $i1 goto label6;

        $r4 = r0.<org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer: org.apache.commons.math3.ode.MultistepIntegrator this$0>;

        $r3 = $r4.<org.apache.commons.math3.ode.MultistepIntegrator: double[] scaled>;

        $d0 = $r3[$i0];

        $r4 = r0.<org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer: org.apache.commons.math3.ode.MultistepIntegrator this$0>;

        $d1 = $r4.<org.apache.commons.math3.ode.MultistepIntegrator: double stepSize>;

        $d0 = $d0 * $d1;

        $r3[$i0] = $d0;

        $i0 = $i0 + 1;

        goto label5;

     label6:
        $r4 = r0.<org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer: org.apache.commons.math3.ode.MultistepIntegrator this$0>;

        $r10 = r0.<org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer: org.apache.commons.math3.ode.MultistepIntegrator this$0>;

        $r11 = r0.<org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer: org.apache.commons.math3.ode.MultistepIntegrator this$0>;

        $d0 = $r11.<org.apache.commons.math3.ode.MultistepIntegrator: double stepSize>;

        $r3 = r0.<org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer: double[] t>;

        $r12 = r0.<org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer: double[][] y>;

        $r2 = r0.<org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer: double[][] yDot>;

        $r13 = virtualinvoke $r10.<org.apache.commons.math3.ode.MultistepIntegrator: org.apache.commons.math3.linear.Array2DRowRealMatrix initializeHighOrderDerivatives(double,double[],double[][],double[][])>($d0, $r3, $r12, $r2);

        $r4.<org.apache.commons.math3.ode.MultistepIntegrator: org.apache.commons.math3.linear.Array2DRowRealMatrix nordsieck> = $r13;

        $r14 = new org.apache.commons.math3.ode.MultistepIntegrator$InitializationCompletedMarkerException;

        specialinvoke $r14.<org.apache.commons.math3.ode.MultistepIntegrator$InitializationCompletedMarkerException: void <init>()>();

        throw $r14;

     label7:
        return;
    }
    public void init(double, double[], double)
    {
        org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer r0;
        double $d0, $d1;
        double[] $r1;

        r0 := @this: org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer;

        $d0 := @parameter0: double;

        $r1 := @parameter1: double[];

        $d1 := @parameter2: double;

        return;
    }
