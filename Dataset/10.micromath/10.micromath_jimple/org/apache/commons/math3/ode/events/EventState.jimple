org.apache.commons.math3.ode.events.EventState extends java.lang.Object
private final double convergence
private org.apache.commons.math3.ode.ExpandableStatefulODE expandable
private boolean forward
private double g0
private boolean g0Positive
private final org.apache.commons.math3.ode.events.EventHandler handler
private boolean increasing
private final double maxCheckInterval
private final int maxIterationCount
private org.apache.commons.math3.ode.events.EventHandler$Action nextAction
private boolean pendingEvent
private double pendingEventTime
private double previousEventTime
private final org.apache.commons.math3.analysis.solvers.UnivariateSolver solver
private double t0
    public void <init>(org.apache.commons.math3.ode.events.EventHandler, double, double, int, org.apache.commons.math3.analysis.solvers.UnivariateSolver)
    {
        org.apache.commons.math3.ode.events.EventState r0;
        org.apache.commons.math3.ode.events.EventHandler $r1;
        double $d0, $d1;
        int $i0;
        org.apache.commons.math3.analysis.solvers.UnivariateSolver $r2;
        org.apache.commons.math3.ode.events.EventHandler$Action $r3;

        r0 := @this: org.apache.commons.math3.ode.events.EventState;

        $r1 := @parameter0: org.apache.commons.math3.ode.events.EventHandler;

        $d0 := @parameter1: double;

        $d1 := @parameter2: double;

        $i0 := @parameter3: int;

        $r2 := @parameter4: org.apache.commons.math3.analysis.solvers.UnivariateSolver;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.ode.events.EventState: org.apache.commons.math3.ode.events.EventHandler handler> = $r1;

        r0.<org.apache.commons.math3.ode.events.EventState: double maxCheckInterval> = $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d1);

        r0.<org.apache.commons.math3.ode.events.EventState: double convergence> = $d0;

        r0.<org.apache.commons.math3.ode.events.EventState: int maxIterationCount> = $i0;

        r0.<org.apache.commons.math3.ode.events.EventState: org.apache.commons.math3.analysis.solvers.UnivariateSolver solver> = $r2;

        r0.<org.apache.commons.math3.ode.events.EventState: org.apache.commons.math3.ode.ExpandableStatefulODE expandable> = null;

        r0.<org.apache.commons.math3.ode.events.EventState: double t0> = #NaN;

        r0.<org.apache.commons.math3.ode.events.EventState: double g0> = #NaN;

        r0.<org.apache.commons.math3.ode.events.EventState: boolean g0Positive> = 1;

        r0.<org.apache.commons.math3.ode.events.EventState: boolean pendingEvent> = 0;

        r0.<org.apache.commons.math3.ode.events.EventState: double pendingEventTime> = #NaN;

        r0.<org.apache.commons.math3.ode.events.EventState: double previousEventTime> = #NaN;

        r0.<org.apache.commons.math3.ode.events.EventState: boolean increasing> = 1;

        $r3 = <org.apache.commons.math3.ode.events.EventHandler$Action: org.apache.commons.math3.ode.events.EventHandler$Action CONTINUE>;

        r0.<org.apache.commons.math3.ode.events.EventState: org.apache.commons.math3.ode.events.EventHandler$Action nextAction> = $r3;

        return;
    }
    static double[] access$000(org.apache.commons.math3.ode.events.EventState, org.apache.commons.math3.ode.sampling.StepInterpolator)
    {
        org.apache.commons.math3.ode.events.EventState $r0;
        org.apache.commons.math3.ode.sampling.StepInterpolator $r1;
        double[] $r2;

        $r0 := @parameter0: org.apache.commons.math3.ode.events.EventState;

        $r1 := @parameter1: org.apache.commons.math3.ode.sampling.StepInterpolator;

        $r2 = specialinvoke $r0.<org.apache.commons.math3.ode.events.EventState: double[] getCompleteState(org.apache.commons.math3.ode.sampling.StepInterpolator)>($r1);

        return $r2;
    }
    static org.apache.commons.math3.ode.events.EventHandler access$100(org.apache.commons.math3.ode.events.EventState)
    {
        org.apache.commons.math3.ode.events.EventState $r0;
        org.apache.commons.math3.ode.events.EventHandler r1;

        $r0 := @parameter0: org.apache.commons.math3.ode.events.EventState;

        r1 = $r0.<org.apache.commons.math3.ode.events.EventState: org.apache.commons.math3.ode.events.EventHandler handler>;

        return r1;
    }
    private double[] getCompleteState(org.apache.commons.math3.ode.sampling.StepInterpolator)
    {
        org.apache.commons.math3.ode.events.EventState r0;
        org.apache.commons.math3.ode.sampling.StepInterpolator $r1;
        double[] r2, $r5;
        int i0, i1, i2;
        org.apache.commons.math3.ode.EquationsMapper r3;
        org.apache.commons.math3.ode.ExpandableStatefulODE $r4;
        org.apache.commons.math3.ode.EquationsMapper[] $r6;

        r0 := @this: org.apache.commons.math3.ode.events.EventState;

        $r1 := @parameter0: org.apache.commons.math3.ode.sampling.StepInterpolator;

        $r4 = r0.<org.apache.commons.math3.ode.events.EventState: org.apache.commons.math3.ode.ExpandableStatefulODE expandable>;

        i0 = virtualinvoke $r4.<org.apache.commons.math3.ode.ExpandableStatefulODE: int getTotalDimension()>();

        r2 = newarray (double)[i0];

        $r4 = r0.<org.apache.commons.math3.ode.events.EventState: org.apache.commons.math3.ode.ExpandableStatefulODE expandable>;

        r3 = virtualinvoke $r4.<org.apache.commons.math3.ode.ExpandableStatefulODE: org.apache.commons.math3.ode.EquationsMapper getPrimaryMapper()>();

        $r5 = interfaceinvoke $r1.<org.apache.commons.math3.ode.sampling.StepInterpolator: double[] getInterpolatedState()>();

        virtualinvoke r3.<org.apache.commons.math3.ode.EquationsMapper: void insertEquationData(double[],double[])>($r5, r2);

        $r4 = r0.<org.apache.commons.math3.ode.events.EventState: org.apache.commons.math3.ode.ExpandableStatefulODE expandable>;

        $r6 = virtualinvoke $r4.<org.apache.commons.math3.ode.ExpandableStatefulODE: org.apache.commons.math3.ode.EquationsMapper[] getSecondaryMappers()>();

        i0 = lengthof $r6;

        i1 = 0;

        i2 = 0;

     label1:
        if i1 >= i0 goto label2;

        r3 = $r6[i1];

        $r5 = interfaceinvoke $r1.<org.apache.commons.math3.ode.sampling.StepInterpolator: double[] getInterpolatedSecondaryState(int)>(i2);

        virtualinvoke r3.<org.apache.commons.math3.ode.EquationsMapper: void insertEquationData(double[],double[])>($r5, r2);

        i1 = i1 + 1;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r2;
    }
    public boolean evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator) throws org.apache.commons.math3.exception.MaxCountExceededException, org.apache.commons.math3.exception.NoBracketingException
    {
        org.apache.commons.math3.ode.events.EventState r0;
        org.apache.commons.math3.ode.sampling.StepInterpolator $r1;
        org.apache.commons.math3.ode.events.EventState$1 r2;
        org.apache.commons.math3.ode.events.EventState$LocalMaxCountExceededException r3;
        double d0, $d1, $d2, $d3, d4, $d5, $d6, $d7;
        boolean $z0, $z1;
        byte $b0;
        int $i1, i2, $i3, $i4;
        org.apache.commons.math3.ode.events.EventHandler $r4;
        double[] $r5;
        org.apache.commons.math3.analysis.solvers.UnivariateSolver $r6;
        org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver r7;
        org.apache.commons.math3.analysis.solvers.AllowedSolution $r8;
        org.apache.commons.math3.analysis.solvers.PegasusSolver r9;
        org.apache.commons.math3.exception.MaxCountExceededException $r10;

        r0 := @this: org.apache.commons.math3.ode.events.EventState;

        $r1 := @parameter0: org.apache.commons.math3.ode.sampling.StepInterpolator;

     label01:
        $z0 = interfaceinvoke $r1.<org.apache.commons.math3.ode.sampling.StepInterpolator: boolean isForward()>();

     label02:
        r0.<org.apache.commons.math3.ode.events.EventState: boolean forward> = $z0;

     label03:
        $d1 = interfaceinvoke $r1.<org.apache.commons.math3.ode.sampling.StepInterpolator: double getCurrentTime()>();

     label04:
        d0 = r0.<org.apache.commons.math3.ode.events.EventState: double t0>;

        d0 = $d1 - d0;

     label05:
        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d0);

     label06:
        $d3 = r0.<org.apache.commons.math3.ode.events.EventState: double convergence>;

        $b0 = $d2 cmpg $d3;

        if $b0 >= 0 goto label07;

        return 0;

     label07:
        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d0);

     label08:
        $d3 = r0.<org.apache.commons.math3.ode.events.EventState: double maxCheckInterval>;

        $d2 = $d2 / $d3;

     label09:
        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double ceil(double)>($d2);

     label10:
        $i1 = (int) $d2;

     label11:
        $i1 = staticinvoke <org.apache.commons.math3.util.FastMath: int max(int,int)>(1, $i1);

     label12:
        $d2 = (double) $i1;

        d0 = d0 / $d2;

        r2 = new org.apache.commons.math3.ode.events.EventState$1;

     label13:
        specialinvoke r2.<org.apache.commons.math3.ode.events.EventState$1: void <init>(org.apache.commons.math3.ode.events.EventState,org.apache.commons.math3.ode.sampling.StepInterpolator)>(r0, $r1);

     label14:
        $d3 = r0.<org.apache.commons.math3.ode.events.EventState: double t0>;

        d4 = r0.<org.apache.commons.math3.ode.events.EventState: double g0>;

        i2 = 0;

     label15:
        if i2 >= $i1 goto label74;

        $i3 = $i1 + -1;

        if i2 != $i3 goto label38;

        $d2 = $d1;

     label16:
        interfaceinvoke $r1.<org.apache.commons.math3.ode.sampling.StepInterpolator: void setInterpolatedTime(double)>($d2);

     label17:
        $r4 = r0.<org.apache.commons.math3.ode.events.EventState: org.apache.commons.math3.ode.events.EventHandler handler>;

     label18:
        $r5 = specialinvoke r0.<org.apache.commons.math3.ode.events.EventState: double[] getCompleteState(org.apache.commons.math3.ode.sampling.StepInterpolator)>($r1);

        $d5 = interfaceinvoke $r4.<org.apache.commons.math3.ode.events.EventHandler: double g(double,double[])>($d2, $r5);

     label19:
        $z0 = r0.<org.apache.commons.math3.ode.events.EventState: boolean g0Positive>;

        $b0 = $d5 cmpl 0.0;

        if $b0 < 0 goto label39;

        $z1 = 1;

     label20:
        $z0 = $z1 ^ $z0;

        if $z0 == 0 goto label73;

        $b0 = $d5 cmpl d4;

        if $b0 < 0 goto label40;

        $z0 = 1;

     label21:
        r0.<org.apache.commons.math3.ode.events.EventState: boolean increasing> = $z0;

        $r6 = r0.<org.apache.commons.math3.ode.events.EventState: org.apache.commons.math3.analysis.solvers.UnivariateSolver solver>;

        $z0 = $r6 instanceof org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver;

        if $z0 == 0 goto label44;

        $r6 = r0.<org.apache.commons.math3.ode.events.EventState: org.apache.commons.math3.analysis.solvers.UnivariateSolver solver>;

        r7 = (org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver) $r6;

        $z0 = r0.<org.apache.commons.math3.ode.events.EventState: boolean forward>;

        if $z0 == 0 goto label41;

        $i3 = r0.<org.apache.commons.math3.ode.events.EventState: int maxIterationCount>;

        $r8 = <org.apache.commons.math3.analysis.solvers.AllowedSolution: org.apache.commons.math3.analysis.solvers.AllowedSolution RIGHT_SIDE>;

     label22:
        $d6 = interfaceinvoke r7.<org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver: double solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)>($i3, r2, $d3, $d2, $r8);

     label23:
        d4 = r0.<org.apache.commons.math3.ode.events.EventState: double previousEventTime>;

     label24:
        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d4);

     label25:
        if $z0 != 0 goto label66;

        d4 = $d6 - $d3;

     label26:
        d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d4);

     label27:
        $d7 = r0.<org.apache.commons.math3.ode.events.EventState: double convergence>;

        $b0 = d4 cmpg $d7;

        if $b0 > 0 goto label66;

        d4 = r0.<org.apache.commons.math3.ode.events.EventState: double previousEventTime>;

        d4 = $d6 - d4;

     label28:
        d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d4);

     label29:
        $d7 = r0.<org.apache.commons.math3.ode.events.EventState: double convergence>;

        $b0 = d4 cmpg $d7;

        if $b0 > 0 goto label66;

     label30:
        $z0 = r0.<org.apache.commons.math3.ode.events.EventState: boolean forward>;

        if $z0 == 0 goto label61;

        $d5 = r0.<org.apache.commons.math3.ode.events.EventState: double convergence>;

        $d3 = $d3 + $d5;

     label31:
        $d5 = interfaceinvoke r2.<org.apache.commons.math3.analysis.UnivariateFunction: double value(double)>($d3);

     label32:
        d4 = $d5;

        $z0 = r0.<org.apache.commons.math3.ode.events.EventState: boolean g0Positive>;

        $b0 = $d5 cmpl 0.0;

        if $b0 < 0 goto label62;

        $z1 = 1;

     label33:
        $z0 = $z1 ^ $z0;

        if $z0 == 0 goto label35;

        $z0 = r0.<org.apache.commons.math3.ode.events.EventState: boolean forward>;

        $b0 = $d3 cmpl $d2;

        if $b0 < 0 goto label63;

        $z1 = 1;

     label34:
        $z0 = $z1 ^ $z0;

        if $z0 != 0 goto label30;

     label35:
        $z0 = r0.<org.apache.commons.math3.ode.events.EventState: boolean forward>;

        $b0 = $d3 cmpl $d2;

        if $b0 < 0 goto label64;

        $z1 = 1;

     label36:
        $z0 = $z1 ^ $z0;

        if $z0 == 0 goto label65;

        i2 = i2 + -1;

     label37:
        i2 = i2 + 1;

        goto label15;

     label38:
        $d2 = r0.<org.apache.commons.math3.ode.events.EventState: double t0>;

        $i3 = i2 + 1;

        $d5 = (double) $i3;

        $d5 = $d5 * d0;

        $d2 = $d2 + $d5;

        goto label16;

     label39:
        $z1 = 0;

        goto label20;

     label40:
        $z0 = 0;

        goto label21;

     label41:
        $i3 = r0.<org.apache.commons.math3.ode.events.EventState: int maxIterationCount>;

        $r8 = <org.apache.commons.math3.analysis.solvers.AllowedSolution: org.apache.commons.math3.analysis.solvers.AllowedSolution LEFT_SIDE>;

     label42:
        $d6 = interfaceinvoke r7.<org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver: double solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)>($i3, r2, $d2, $d3, $r8);

     label43:
        goto label23;

     label44:
        $z0 = r0.<org.apache.commons.math3.ode.events.EventState: boolean forward>;

        if $z0 == 0 goto label55;

        $r6 = r0.<org.apache.commons.math3.ode.events.EventState: org.apache.commons.math3.analysis.solvers.UnivariateSolver solver>;

        $i3 = r0.<org.apache.commons.math3.ode.events.EventState: int maxIterationCount>;

     label45:
        $d6 = interfaceinvoke $r6.<org.apache.commons.math3.analysis.solvers.UnivariateSolver: double solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)>($i3, r2, $d3, $d2);

     label46:
        $i3 = r0.<org.apache.commons.math3.ode.events.EventState: int maxIterationCount>;

        $r6 = r0.<org.apache.commons.math3.ode.events.EventState: org.apache.commons.math3.analysis.solvers.UnivariateSolver solver>;

     label47:
        $i4 = interfaceinvoke $r6.<org.apache.commons.math3.analysis.solvers.UnivariateSolver: int getEvaluations()>();

     label48:
        $i3 = $i3 - $i4;

        r9 = new org.apache.commons.math3.analysis.solvers.PegasusSolver;

        $r6 = r0.<org.apache.commons.math3.ode.events.EventState: org.apache.commons.math3.analysis.solvers.UnivariateSolver solver>;

     label49:
        d4 = interfaceinvoke $r6.<org.apache.commons.math3.analysis.solvers.UnivariateSolver: double getRelativeAccuracy()>();

     label50:
        $r6 = r0.<org.apache.commons.math3.ode.events.EventState: org.apache.commons.math3.analysis.solvers.UnivariateSolver solver>;

     label51:
        $d7 = interfaceinvoke $r6.<org.apache.commons.math3.analysis.solvers.UnivariateSolver: double getAbsoluteAccuracy()>();

        specialinvoke r9.<org.apache.commons.math3.analysis.solvers.PegasusSolver: void <init>(double,double)>(d4, $d7);

     label52:
        $z0 = r0.<org.apache.commons.math3.ode.events.EventState: boolean forward>;

        if $z0 == 0 goto label58;

        $r8 = <org.apache.commons.math3.analysis.solvers.AllowedSolution: org.apache.commons.math3.analysis.solvers.AllowedSolution RIGHT_SIDE>;

     label53:
        $d6 = staticinvoke <org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils: double forceSide(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)>($i3, r2, r9, $d6, $d3, $d2, $r8);

     label54:
        goto label23;

     label55:
        $r6 = r0.<org.apache.commons.math3.ode.events.EventState: org.apache.commons.math3.analysis.solvers.UnivariateSolver solver>;

        $i3 = r0.<org.apache.commons.math3.ode.events.EventState: int maxIterationCount>;

     label56:
        $d6 = interfaceinvoke $r6.<org.apache.commons.math3.analysis.solvers.UnivariateSolver: double solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)>($i3, r2, $d2, $d3);

     label57:
        goto label46;

     label58:
        $r8 = <org.apache.commons.math3.analysis.solvers.AllowedSolution: org.apache.commons.math3.analysis.solvers.AllowedSolution LEFT_SIDE>;

     label59:
        $d6 = staticinvoke <org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils: double forceSide(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)>($i3, r2, r9, $d6, $d2, $d3, $r8);

     label60:
        goto label23;

     label61:
        $d5 = r0.<org.apache.commons.math3.ode.events.EventState: double convergence>;

        $d3 = $d3 - $d5;

        goto label31;

     label62:
        $z1 = 0;

        goto label33;

     label63:
        $z1 = 0;

        goto label34;

     label64:
        $z1 = 0;

        goto label36;

     label65:
        r0.<org.apache.commons.math3.ode.events.EventState: double pendingEventTime> = $d6;

        r0.<org.apache.commons.math3.ode.events.EventState: boolean pendingEvent> = 1;

        return 1;

     label66:
        $d3 = r0.<org.apache.commons.math3.ode.events.EventState: double previousEventTime>;

     label67:
        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d3);

     label68:
        if $z0 != 0 goto label71;

        $d3 = r0.<org.apache.commons.math3.ode.events.EventState: double previousEventTime>;

        $d3 = $d3 - $d6;

     label69:
        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d3);

     label70:
        d4 = r0.<org.apache.commons.math3.ode.events.EventState: double convergence>;

        $b0 = $d3 cmpl d4;

        if $b0 <= 0 goto label72;

     label71:
        r0.<org.apache.commons.math3.ode.events.EventState: double pendingEventTime> = $d6;

        r0.<org.apache.commons.math3.ode.events.EventState: boolean pendingEvent> = 1;

        return 1;

     label72:
        $d3 = $d2;

        d4 = $d5;

        goto label37;

     label73:
        $d3 = $d2;

        d4 = $d5;

        goto label37;

     label74:
        r0.<org.apache.commons.math3.ode.events.EventState: boolean pendingEvent> = 0;

        r0.<org.apache.commons.math3.ode.events.EventState: double pendingEventTime> = #NaN;

        return 0;

     label75:
        r3 := @caughtexception;

        $r10 = virtualinvoke r3.<org.apache.commons.math3.ode.events.EventState$LocalMaxCountExceededException: org.apache.commons.math3.exception.MaxCountExceededException getException()>();

        throw $r10;

        catch org.apache.commons.math3.ode.events.EventState$LocalMaxCountExceededException from label01 to label02 with label75;
        catch org.apache.commons.math3.ode.events.EventState$LocalMaxCountExceededException from label03 to label04 with label75;
        catch org.apache.commons.math3.ode.events.EventState$LocalMaxCountExceededException from label05 to label06 with label75;
        catch org.apache.commons.math3.ode.events.EventState$LocalMaxCountExceededException from label07 to label08 with label75;
        catch org.apache.commons.math3.ode.events.EventState$LocalMaxCountExceededException from label09 to label10 with label75;
        catch org.apache.commons.math3.ode.events.EventState$LocalMaxCountExceededException from label11 to label12 with label75;
        catch org.apache.commons.math3.ode.events.EventState$LocalMaxCountExceededException from label13 to label14 with label75;
        catch org.apache.commons.math3.ode.events.EventState$LocalMaxCountExceededException from label16 to label17 with label75;
        catch org.apache.commons.math3.ode.events.EventState$LocalMaxCountExceededException from label18 to label19 with label75;
        catch org.apache.commons.math3.ode.events.EventState$LocalMaxCountExceededException from label22 to label23 with label75;
        catch org.apache.commons.math3.ode.events.EventState$LocalMaxCountExceededException from label24 to label25 with label75;
        catch org.apache.commons.math3.ode.events.EventState$LocalMaxCountExceededException from label26 to label27 with label75;
        catch org.apache.commons.math3.ode.events.EventState$LocalMaxCountExceededException from label28 to label29 with label75;
        catch org.apache.commons.math3.ode.events.EventState$LocalMaxCountExceededException from label31 to label32 with label75;
        catch org.apache.commons.math3.ode.events.EventState$LocalMaxCountExceededException from label42 to label43 with label75;
        catch org.apache.commons.math3.ode.events.EventState$LocalMaxCountExceededException from label45 to label46 with label75;
        catch org.apache.commons.math3.ode.events.EventState$LocalMaxCountExceededException from label47 to label48 with label75;
        catch org.apache.commons.math3.ode.events.EventState$LocalMaxCountExceededException from label49 to label50 with label75;
        catch org.apache.commons.math3.ode.events.EventState$LocalMaxCountExceededException from label51 to label52 with label75;
        catch org.apache.commons.math3.ode.events.EventState$LocalMaxCountExceededException from label53 to label54 with label75;
        catch org.apache.commons.math3.ode.events.EventState$LocalMaxCountExceededException from label56 to label57 with label75;
        catch org.apache.commons.math3.ode.events.EventState$LocalMaxCountExceededException from label59 to label60 with label75;
        catch org.apache.commons.math3.ode.events.EventState$LocalMaxCountExceededException from label67 to label68 with label75;
        catch org.apache.commons.math3.ode.events.EventState$LocalMaxCountExceededException from label69 to label70 with label75;
    }
    public double getConvergence()
    {
        org.apache.commons.math3.ode.events.EventState r0;
        double d0;

        r0 := @this: org.apache.commons.math3.ode.events.EventState;

        d0 = r0.<org.apache.commons.math3.ode.events.EventState: double convergence>;

        return d0;
    }
    public org.apache.commons.math3.ode.events.EventHandler getEventHandler()
    {
        org.apache.commons.math3.ode.events.EventState r0;
        org.apache.commons.math3.ode.events.EventHandler r1;

        r0 := @this: org.apache.commons.math3.ode.events.EventState;

        r1 = r0.<org.apache.commons.math3.ode.events.EventState: org.apache.commons.math3.ode.events.EventHandler handler>;

        return r1;
    }
    public double getEventTime()
    {
        org.apache.commons.math3.ode.events.EventState r0;
        boolean $z0;
        double d0;

        r0 := @this: org.apache.commons.math3.ode.events.EventState;

        $z0 = r0.<org.apache.commons.math3.ode.events.EventState: boolean pendingEvent>;

        if $z0 == 0 goto label1;

        d0 = r0.<org.apache.commons.math3.ode.events.EventState: double pendingEventTime>;

        return d0;

     label1:
        $z0 = r0.<org.apache.commons.math3.ode.events.EventState: boolean forward>;

        if $z0 == 0 goto label2;

        return #Infinity;

     label2:
        return #-Infinity;
    }
    public double getMaxCheckInterval()
    {
        org.apache.commons.math3.ode.events.EventState r0;
        double d0;

        r0 := @this: org.apache.commons.math3.ode.events.EventState;

        d0 = r0.<org.apache.commons.math3.ode.events.EventState: double maxCheckInterval>;

        return d0;
    }
    public int getMaxIterationCount()
    {
        org.apache.commons.math3.ode.events.EventState r0;
        int i0;

        r0 := @this: org.apache.commons.math3.ode.events.EventState;

        i0 = r0.<org.apache.commons.math3.ode.events.EventState: int maxIterationCount>;

        return i0;
    }
    public void reinitializeBegin(org.apache.commons.math3.ode.sampling.StepInterpolator) throws org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.ode.events.EventState r0;
        org.apache.commons.math3.ode.sampling.StepInterpolator $r1;
        double d0, $d1, $d2;
        org.apache.commons.math3.ode.events.EventHandler $r2;
        double[] $r3;
        byte $b0;
        org.apache.commons.math3.analysis.solvers.UnivariateSolver $r4;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.ode.events.EventState;

        $r1 := @parameter0: org.apache.commons.math3.ode.sampling.StepInterpolator;

        d0 = interfaceinvoke $r1.<org.apache.commons.math3.ode.sampling.StepInterpolator: double getPreviousTime()>();

        r0.<org.apache.commons.math3.ode.events.EventState: double t0> = d0;

        d0 = r0.<org.apache.commons.math3.ode.events.EventState: double t0>;

        interfaceinvoke $r1.<org.apache.commons.math3.ode.sampling.StepInterpolator: void setInterpolatedTime(double)>(d0);

        $r2 = r0.<org.apache.commons.math3.ode.events.EventState: org.apache.commons.math3.ode.events.EventHandler handler>;

        d0 = r0.<org.apache.commons.math3.ode.events.EventState: double t0>;

        $r3 = specialinvoke r0.<org.apache.commons.math3.ode.events.EventState: double[] getCompleteState(org.apache.commons.math3.ode.sampling.StepInterpolator)>($r1);

        d0 = interfaceinvoke $r2.<org.apache.commons.math3.ode.events.EventHandler: double g(double,double[])>(d0, $r3);

        r0.<org.apache.commons.math3.ode.events.EventState: double g0> = d0;

        d0 = r0.<org.apache.commons.math3.ode.events.EventState: double g0>;

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        $r4 = r0.<org.apache.commons.math3.ode.events.EventState: org.apache.commons.math3.analysis.solvers.UnivariateSolver solver>;

        d0 = interfaceinvoke $r4.<org.apache.commons.math3.analysis.solvers.UnivariateSolver: double getAbsoluteAccuracy()>();

        $r4 = r0.<org.apache.commons.math3.ode.events.EventState: org.apache.commons.math3.analysis.solvers.UnivariateSolver solver>;

        $d2 = interfaceinvoke $r4.<org.apache.commons.math3.analysis.solvers.UnivariateSolver: double getRelativeAccuracy()>();

        $d1 = r0.<org.apache.commons.math3.ode.events.EventState: double t0>;

        $d1 = $d2 * $d1;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d1);

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>(d0, $d1);

        d0 = r0.<org.apache.commons.math3.ode.events.EventState: double t0>;

        $d1 = 0.5 * $d1;

        d0 = d0 + $d1;

        interfaceinvoke $r1.<org.apache.commons.math3.ode.sampling.StepInterpolator: void setInterpolatedTime(double)>(d0);

        $r2 = r0.<org.apache.commons.math3.ode.events.EventState: org.apache.commons.math3.ode.events.EventHandler handler>;

        $r3 = specialinvoke r0.<org.apache.commons.math3.ode.events.EventState: double[] getCompleteState(org.apache.commons.math3.ode.sampling.StepInterpolator)>($r1);

        d0 = interfaceinvoke $r2.<org.apache.commons.math3.ode.events.EventHandler: double g(double,double[])>(d0, $r3);

        r0.<org.apache.commons.math3.ode.events.EventState: double g0> = d0;

     label1:
        d0 = r0.<org.apache.commons.math3.ode.events.EventState: double g0>;

        $b0 = d0 cmpl 0.0;

        if $b0 < 0 goto label3;

        $z0 = 1;

     label2:
        r0.<org.apache.commons.math3.ode.events.EventState: boolean g0Positive> = $z0;

        return;

     label3:
        $z0 = 0;

        goto label2;
    }
    public boolean reset(double, double[])
    {
        org.apache.commons.math3.ode.events.EventState r0;
        double $d0, $d1, $d2;
        double[] $r1;
        boolean $z0;
        byte $b0;
        org.apache.commons.math3.ode.events.EventHandler$Action $r2, $r3;
        org.apache.commons.math3.ode.events.EventHandler $r4;

        r0 := @this: org.apache.commons.math3.ode.events.EventState;

        $d0 := @parameter0: double;

        $r1 := @parameter1: double[];

        $z0 = r0.<org.apache.commons.math3.ode.events.EventState: boolean pendingEvent>;

        if $z0 == 0 goto label4;

        $d1 = r0.<org.apache.commons.math3.ode.events.EventState: double pendingEventTime>;

        $d1 = $d1 - $d0;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d1);

        $d1 = r0.<org.apache.commons.math3.ode.events.EventState: double convergence>;

        $b0 = $d2 cmpg $d1;

        if $b0 <= 0 goto label1;

        return 0;

     label1:
        $r2 = r0.<org.apache.commons.math3.ode.events.EventState: org.apache.commons.math3.ode.events.EventHandler$Action nextAction>;

        $r3 = <org.apache.commons.math3.ode.events.EventHandler$Action: org.apache.commons.math3.ode.events.EventHandler$Action RESET_STATE>;

        if $r2 != $r3 goto label2;

        $r4 = r0.<org.apache.commons.math3.ode.events.EventState: org.apache.commons.math3.ode.events.EventHandler handler>;

        interfaceinvoke $r4.<org.apache.commons.math3.ode.events.EventHandler: void resetState(double,double[])>($d0, $r1);

     label2:
        r0.<org.apache.commons.math3.ode.events.EventState: boolean pendingEvent> = 0;

        r0.<org.apache.commons.math3.ode.events.EventState: double pendingEventTime> = #NaN;

        $r2 = r0.<org.apache.commons.math3.ode.events.EventState: org.apache.commons.math3.ode.events.EventHandler$Action nextAction>;

        $r3 = <org.apache.commons.math3.ode.events.EventHandler$Action: org.apache.commons.math3.ode.events.EventHandler$Action RESET_STATE>;

        if $r2 == $r3 goto label3;

        $r2 = r0.<org.apache.commons.math3.ode.events.EventState: org.apache.commons.math3.ode.events.EventHandler$Action nextAction>;

        $r3 = <org.apache.commons.math3.ode.events.EventHandler$Action: org.apache.commons.math3.ode.events.EventHandler$Action RESET_DERIVATIVES>;

        if $r2 != $r3 goto label4;

     label3:
        return 1;

     label4:
        return 0;
    }
    public void setExpandable(org.apache.commons.math3.ode.ExpandableStatefulODE)
    {
        org.apache.commons.math3.ode.events.EventState r0;
        org.apache.commons.math3.ode.ExpandableStatefulODE $r1;

        r0 := @this: org.apache.commons.math3.ode.events.EventState;

        $r1 := @parameter0: org.apache.commons.math3.ode.ExpandableStatefulODE;

        r0.<org.apache.commons.math3.ode.events.EventState: org.apache.commons.math3.ode.ExpandableStatefulODE expandable> = $r1;

        return;
    }
    public void stepAccepted(double, double[])
    {
        org.apache.commons.math3.ode.events.EventState r0;
        double $d0, $d1, $d2;
        double[] $r1;
        boolean $z0, $z1, $z2;
        org.apache.commons.math3.ode.events.EventHandler $r2;
        byte $b0;
        org.apache.commons.math3.ode.events.EventHandler$Action $r3;

        r0 := @this: org.apache.commons.math3.ode.events.EventState;

        $d0 := @parameter0: double;

        $r1 := @parameter1: double[];

        $z0 = 1;

        r0.<org.apache.commons.math3.ode.events.EventState: double t0> = $d0;

        $r2 = r0.<org.apache.commons.math3.ode.events.EventState: org.apache.commons.math3.ode.events.EventHandler handler>;

        $d1 = interfaceinvoke $r2.<org.apache.commons.math3.ode.events.EventHandler: double g(double,double[])>($d0, $r1);

        r0.<org.apache.commons.math3.ode.events.EventState: double g0> = $d1;

        $z1 = r0.<org.apache.commons.math3.ode.events.EventState: boolean pendingEvent>;

        if $z1 == 0 goto label3;

        $d1 = r0.<org.apache.commons.math3.ode.events.EventState: double pendingEventTime>;

        $d1 = $d1 - $d0;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d1);

        $d2 = r0.<org.apache.commons.math3.ode.events.EventState: double convergence>;

        $b0 = $d1 cmpg $d2;

        if $b0 > 0 goto label3;

        r0.<org.apache.commons.math3.ode.events.EventState: double previousEventTime> = $d0;

        $z1 = r0.<org.apache.commons.math3.ode.events.EventState: boolean increasing>;

        r0.<org.apache.commons.math3.ode.events.EventState: boolean g0Positive> = $z1;

        $r2 = r0.<org.apache.commons.math3.ode.events.EventState: org.apache.commons.math3.ode.events.EventHandler handler>;

        $z1 = r0.<org.apache.commons.math3.ode.events.EventState: boolean increasing>;

        $z2 = r0.<org.apache.commons.math3.ode.events.EventState: boolean forward>;

        $z1 = $z1 ^ $z2;

        if $z1 != 0 goto label2;

     label1:
        $r3 = interfaceinvoke $r2.<org.apache.commons.math3.ode.events.EventHandler: org.apache.commons.math3.ode.events.EventHandler$Action eventOccurred(double,double[],boolean)>($d0, $r1, $z0);

        r0.<org.apache.commons.math3.ode.events.EventState: org.apache.commons.math3.ode.events.EventHandler$Action nextAction> = $r3;

        return;

     label2:
        $z0 = 0;

        goto label1;

     label3:
        $d0 = r0.<org.apache.commons.math3.ode.events.EventState: double g0>;

        $b0 = $d0 cmpl 0.0;

        if $b0 < 0 goto label5;

     label4:
        r0.<org.apache.commons.math3.ode.events.EventState: boolean g0Positive> = $z0;

        $r3 = <org.apache.commons.math3.ode.events.EventHandler$Action: org.apache.commons.math3.ode.events.EventHandler$Action CONTINUE>;

        r0.<org.apache.commons.math3.ode.events.EventState: org.apache.commons.math3.ode.events.EventHandler$Action nextAction> = $r3;

        return;

     label5:
        $z0 = 0;

        goto label4;
    }
    public boolean stop()
    {
        org.apache.commons.math3.ode.events.EventState r0;
        org.apache.commons.math3.ode.events.EventHandler$Action $r1, $r2;

        r0 := @this: org.apache.commons.math3.ode.events.EventState;

        $r2 = r0.<org.apache.commons.math3.ode.events.EventState: org.apache.commons.math3.ode.events.EventHandler$Action nextAction>;

        $r1 = <org.apache.commons.math3.ode.events.EventHandler$Action: org.apache.commons.math3.ode.events.EventHandler$Action STOP>;

        if $r2 != $r1 goto label1;

        return 1;

     label1:
        return 0;
    }
