org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator extends org.apache.commons.math3.ode.sampling.AbstractStepInterpolator
private static final long serialVersionUID
private org.apache.commons.math3.linear.Array2DRowRealMatrix nordsieck
private double referenceTime
private double[] scaled
private double scalingH
protected double[] stateVariation
    public void <init>()
    {
        org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator r0;

        r0 := @this: org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator;

        specialinvoke r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: void <init>()>();

        return;
    }
    public void <init>(org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator)
    {
        org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator r0, $r1;
        double $d0;
        double[] $r2;
        java.lang.Object $r3;
        org.apache.commons.math3.linear.Array2DRowRealMatrix $r4, $r5;
        double[][] $r6;

        r0 := @this: org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator;

        $r1 := @parameter0: org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator;

        specialinvoke r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: void <init>(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator)>($r1);

        $d0 = $r1.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: double scalingH>;

        r0.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: double scalingH> = $d0;

        $d0 = $r1.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: double referenceTime>;

        r0.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: double referenceTime> = $d0;

        $r2 = $r1.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: double[] scaled>;

        if $r2 == null goto label1;

        $r2 = $r1.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: double[] scaled>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (double[]) $r3;

        r0.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: double[] scaled> = $r2;

     label1:
        $r4 = $r1.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: org.apache.commons.math3.linear.Array2DRowRealMatrix nordsieck>;

        if $r4 == null goto label2;

        $r4 = new org.apache.commons.math3.linear.Array2DRowRealMatrix;

        $r5 = $r1.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: org.apache.commons.math3.linear.Array2DRowRealMatrix nordsieck>;

        $r6 = virtualinvoke $r5.<org.apache.commons.math3.linear.Array2DRowRealMatrix: double[][] getDataRef()>();

        specialinvoke $r4.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void <init>(double[][],boolean)>($r6, 1);

        r0.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: org.apache.commons.math3.linear.Array2DRowRealMatrix nordsieck> = $r4;

     label2:
        $r2 = $r1.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: double[] stateVariation>;

        if $r2 == null goto label3;

        $r2 = $r1.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: double[] stateVariation>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (double[]) $r3;

        r0.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: double[] stateVariation> = $r2;

     label3:
        return;
    }
    protected void computeInterpolatedStateAndDerivatives(double, double)
    {
        org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator r0;
        double $d0, $d1, d2, $d3, $d4, $d5;
        double[] r1, $r4;
        int i0, i1, i2, $i3;
        org.apache.commons.math3.linear.Array2DRowRealMatrix $r2;
        double[][] $r3;

        r0 := @this: org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d0 = r0.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: double interpolatedTime>;

        $d1 = r0.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: double referenceTime>;

        $d0 = $d0 - $d1;

        $d1 = r0.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: double scalingH>;

        $d1 = $d0 / $d1;

        r1 = r0.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: double[] stateVariation>;

        staticinvoke <java.util.Arrays: void fill(double[],double)>(r1, 0.0);

        r1 = r0.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: double[] interpolatedDerivatives>;

        staticinvoke <java.util.Arrays: void fill(double[],double)>(r1, 0.0);

        $r2 = r0.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: org.apache.commons.math3.linear.Array2DRowRealMatrix nordsieck>;

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.linear.Array2DRowRealMatrix: double[][] getDataRef()>();

        i0 = lengthof $r3;

        i1 = i0 + -1;

     label1:
        if i1 < 0 goto label4;

        i0 = i1 + 2;

        r1 = $r3[i1];

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,int)>($d1, i0);

        i2 = 0;

     label2:
        $i3 = lengthof r1;

        if i2 >= $i3 goto label3;

        d2 = r1[i2];

        d2 = d2 * $d3;

        $r4 = r0.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: double[] stateVariation>;

        $d4 = $r4[i2];

        $d4 = $d4 + d2;

        $r4[i2] = $d4;

        $r4 = r0.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: double[] interpolatedDerivatives>;

        $d4 = $r4[i2];

        $d5 = (double) i0;

        d2 = $d5 * d2;

        d2 = $d4 + d2;

        $r4[i2] = d2;

        i2 = i2 + 1;

        goto label2;

     label3:
        i1 = i1 + -1;

        goto label1;

     label4:
        i0 = 0;

     label5:
        r1 = r0.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: double[] currentState>;

        i1 = lengthof r1;

        if i0 >= i1 goto label6;

        r1 = r0.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: double[] stateVariation>;

        $d3 = r1[i0];

        $r4 = r0.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: double[] scaled>;

        d2 = $r4[i0];

        d2 = d2 * $d1;

        $d3 = $d3 + d2;

        r1[i0] = $d3;

        r1 = r0.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: double[] interpolatedState>;

        $r4 = r0.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: double[] currentState>;

        $d3 = $r4[i0];

        $r4 = r0.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: double[] stateVariation>;

        d2 = $r4[i0];

        $d3 = $d3 + d2;

        r1[i0] = $d3;

        r1 = r0.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: double[] interpolatedDerivatives>;

        $r4 = r0.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: double[] interpolatedDerivatives>;

        $d3 = $r4[i0];

        $r4 = r0.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: double[] scaled>;

        d2 = $r4[i0];

        d2 = d2 * $d1;

        $d3 = $d3 + d2;

        $d3 = $d3 / $d0;

        r1[i0] = $d3;

        i0 = i0 + 1;

        goto label5;

     label6:
        return;
    }
    protected org.apache.commons.math3.ode.sampling.StepInterpolator doCopy()
    {
        org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator r0, $r1;

        r0 := @this: org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator;

        $r1 = new org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator;

        specialinvoke $r1.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: void <init>(org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator)>(r0);

        return $r1;
    }
    public double[] getInterpolatedStateVariation() throws org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator r0;
        double[] r1;

        r0 := @this: org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator;

        virtualinvoke r0.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: double[] getInterpolatedState()>();

        r1 = r0.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: double[] stateVariation>;

        return r1;
    }
    public void readExternal(java.io.ObjectInput) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator r0;
        java.io.ObjectInput $r1;
        double $d0, $d1;
        double[] $r2;
        int i0, i1;
        boolean $z0, $z1;
        java.lang.Object $r3;
        org.apache.commons.math3.linear.Array2DRowRealMatrix $r4;

        r0 := @this: org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator;

        $r1 := @parameter0: java.io.ObjectInput;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: double readBaseExternal(java.io.ObjectInput)>($r1);

        $d1 = interfaceinvoke $r1.<java.io.ObjectInput: double readDouble()>();

        r0.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: double scalingH> = $d1;

        $d1 = interfaceinvoke $r1.<java.io.ObjectInput: double readDouble()>();

        r0.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: double referenceTime> = $d1;

        $r2 = r0.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: double[] currentState>;

        if $r2 != null goto label3;

        i0 = -1;

     label1:
        $z0 = interfaceinvoke $r1.<java.io.ObjectInput: boolean readBoolean()>();

        if $z0 == 0 goto label4;

        $r2 = newarray (double)[i0];

        r0.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: double[] scaled> = $r2;

        i1 = 0;

     label2:
        if i1 >= i0 goto label5;

        $r2 = r0.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: double[] scaled>;

        $d1 = interfaceinvoke $r1.<java.io.ObjectInput: double readDouble()>();

        $r2[i1] = $d1;

        i1 = i1 + 1;

        goto label2;

     label3:
        $r2 = r0.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: double[] currentState>;

        i0 = lengthof $r2;

        goto label1;

     label4:
        r0.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: double[] scaled> = null;

     label5:
        $z1 = interfaceinvoke $r1.<java.io.ObjectInput: boolean readBoolean()>();

        if $z1 == 0 goto label7;

        $r3 = interfaceinvoke $r1.<java.io.ObjectInput: java.lang.Object readObject()>();

        $r4 = (org.apache.commons.math3.linear.Array2DRowRealMatrix) $r3;

        r0.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: org.apache.commons.math3.linear.Array2DRowRealMatrix nordsieck> = $r4;

     label6:
        if $z0 == 0 goto label8;

        if $z1 == 0 goto label8;

        $r2 = newarray (double)[i0];

        r0.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: double[] stateVariation> = $r2;

        virtualinvoke r0.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: void setInterpolatedTime(double)>($d0);

        return;

     label7:
        r0.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: org.apache.commons.math3.linear.Array2DRowRealMatrix nordsieck> = null;

        goto label6;

     label8:
        r0.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: double[] stateVariation> = null;

        return;
    }
    public void reinitialize(double, double, double[], org.apache.commons.math3.linear.Array2DRowRealMatrix)
    {
        org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator r0;
        double $d0, $d1;
        double[] $r1;
        org.apache.commons.math3.linear.Array2DRowRealMatrix $r2;

        r0 := @this: org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $r1 := @parameter2: double[];

        $r2 := @parameter3: org.apache.commons.math3.linear.Array2DRowRealMatrix;

        r0.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: double referenceTime> = $d0;

        r0.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: double scalingH> = $d1;

        r0.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: double[] scaled> = $r1;

        r0.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: org.apache.commons.math3.linear.Array2DRowRealMatrix nordsieck> = $r2;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: double getInterpolatedTime()>();

        virtualinvoke r0.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: void setInterpolatedTime(double)>($d0);

        return;
    }
    public void reinitialize(double[], boolean, org.apache.commons.math3.ode.EquationsMapper, org.apache.commons.math3.ode.EquationsMapper[])
    {
        org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator r0;
        double[] $r1;
        boolean $z0;
        org.apache.commons.math3.ode.EquationsMapper $r2;
        org.apache.commons.math3.ode.EquationsMapper[] $r3;
        int $i0;

        r0 := @this: org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator;

        $r1 := @parameter0: double[];

        $z0 := @parameter1: boolean;

        $r2 := @parameter2: org.apache.commons.math3.ode.EquationsMapper;

        $r3 := @parameter3: org.apache.commons.math3.ode.EquationsMapper[];

        specialinvoke r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: void reinitialize(double[],boolean,org.apache.commons.math3.ode.EquationsMapper,org.apache.commons.math3.ode.EquationsMapper[])>($r1, $z0, $r2, $r3);

        $i0 = lengthof $r1;

        $r1 = newarray (double)[$i0];

        r0.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: double[] stateVariation> = $r1;

        return;
    }
    public void rescale(double)
    {
        org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator r0;
        double $d0, d1, $d2, $d3;
        double[] r1;
        double[][] $r2;
        int i0, $i1, $i2;
        org.apache.commons.math3.linear.Array2DRowRealMatrix $r3;

        r0 := @this: org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator;

        $d0 := @parameter0: double;

        d1 = r0.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: double scalingH>;

        d1 = $d0 / d1;

        i0 = 0;

     label1:
        r1 = r0.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: double[] scaled>;

        $i1 = lengthof r1;

        if i0 >= $i1 goto label2;

        r1 = r0.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: double[] scaled>;

        $d2 = r1[i0];

        $d2 = $d2 * d1;

        r1[i0] = $d2;

        i0 = i0 + 1;

        goto label1;

     label2:
        $r3 = r0.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: org.apache.commons.math3.linear.Array2DRowRealMatrix nordsieck>;

        $r2 = virtualinvoke $r3.<org.apache.commons.math3.linear.Array2DRowRealMatrix: double[][] getDataRef()>();

        $d2 = d1;

        i0 = 0;

     label3:
        $i1 = lengthof $r2;

        if i0 >= $i1 goto label6;

        $d2 = $d2 * d1;

        r1 = $r2[i0];

        $i1 = 0;

     label4:
        $i2 = lengthof r1;

        if $i1 >= $i2 goto label5;

        $d3 = r1[$i1];

        $d3 = $d3 * $d2;

        r1[$i1] = $d3;

        $i1 = $i1 + 1;

        goto label4;

     label5:
        i0 = i0 + 1;

        goto label3;

     label6:
        r0.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: double scalingH> = $d0;

        return;
    }
    public void writeExternal(java.io.ObjectOutput) throws java.io.IOException
    {
        org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator r0;
        java.io.ObjectOutput $r1;
        double $d0;
        double[] $r2;
        int i0, i1;
        org.apache.commons.math3.linear.Array2DRowRealMatrix $r3;

        r0 := @this: org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator;

        $r1 := @parameter0: java.io.ObjectOutput;

        virtualinvoke r0.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: void writeBaseExternal(java.io.ObjectOutput)>($r1);

        $d0 = r0.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: double scalingH>;

        interfaceinvoke $r1.<java.io.ObjectOutput: void writeDouble(double)>($d0);

        $d0 = r0.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: double referenceTime>;

        interfaceinvoke $r1.<java.io.ObjectOutput: void writeDouble(double)>($d0);

        $r2 = r0.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: double[] currentState>;

        if $r2 != null goto label3;

        i0 = -1;

     label1:
        $r2 = r0.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: double[] scaled>;

        if $r2 != null goto label4;

        interfaceinvoke $r1.<java.io.ObjectOutput: void writeBoolean(boolean)>(0);

     label2:
        $r3 = r0.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: org.apache.commons.math3.linear.Array2DRowRealMatrix nordsieck>;

        if $r3 != null goto label6;

        interfaceinvoke $r1.<java.io.ObjectOutput: void writeBoolean(boolean)>(0);

        return;

     label3:
        $r2 = r0.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: double[] currentState>;

        i0 = lengthof $r2;

        goto label1;

     label4:
        interfaceinvoke $r1.<java.io.ObjectOutput: void writeBoolean(boolean)>(1);

        i1 = 0;

     label5:
        if i1 >= i0 goto label2;

        $r2 = r0.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: double[] scaled>;

        $d0 = $r2[i1];

        interfaceinvoke $r1.<java.io.ObjectOutput: void writeDouble(double)>($d0);

        i1 = i1 + 1;

        goto label5;

     label6:
        interfaceinvoke $r1.<java.io.ObjectOutput: void writeBoolean(boolean)>(1);

        $r3 = r0.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: org.apache.commons.math3.linear.Array2DRowRealMatrix nordsieck>;

        interfaceinvoke $r1.<java.io.ObjectOutput: void writeObject(java.lang.Object)>($r3);

        return;
    }
