org.apache.commons.math3.ode.sampling.AbstractStepInterpolator extends java.lang.Object implements org.apache.commons.math3.ode.sampling.StepInterpolator
protected double[] currentState
private boolean dirtyState
private boolean finalized
private boolean forward
private double globalCurrentTime
private double globalPreviousTime
protected double h
protected double[] interpolatedDerivatives
protected double[] interpolatedPrimaryDerivatives
protected double[] interpolatedPrimaryState
protected double[][] interpolatedSecondaryDerivatives
protected double[][] interpolatedSecondaryState
protected double[] interpolatedState
protected double interpolatedTime
private org.apache.commons.math3.ode.EquationsMapper primaryMapper
private org.apache.commons.math3.ode.EquationsMapper[] secondaryMappers
private double softCurrentTime
private double softPreviousTime
    protected void <init>()
    {
        org.apache.commons.math3.ode.sampling.AbstractStepInterpolator r0;

        r0 := @this: org.apache.commons.math3.ode.sampling.AbstractStepInterpolator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double globalPreviousTime> = #NaN;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double globalCurrentTime> = #NaN;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double softPreviousTime> = #NaN;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double softCurrentTime> = #NaN;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double h> = #NaN;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double interpolatedTime> = #NaN;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] currentState> = null;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: boolean finalized> = 0;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: boolean forward> = 1;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: boolean dirtyState> = 1;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: org.apache.commons.math3.ode.EquationsMapper primaryMapper> = null;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: org.apache.commons.math3.ode.EquationsMapper[] secondaryMappers> = null;

        specialinvoke r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: void allocateInterpolatedArrays(int)>(-1);

        return;
    }
    protected void <init>(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator)
    {
        org.apache.commons.math3.ode.sampling.AbstractStepInterpolator r0, $r1;
        double $d0;
        double[] $r2;
        boolean $z0;
        org.apache.commons.math3.ode.EquationsMapper $r3;
        org.apache.commons.math3.ode.EquationsMapper[] $r4;
        java.lang.Object $r5;
        double[][] $r6, $r7;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.ode.sampling.AbstractStepInterpolator;

        $r1 := @parameter0: org.apache.commons.math3.ode.sampling.AbstractStepInterpolator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $d0 = $r1.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double globalPreviousTime>;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double globalPreviousTime> = $d0;

        $d0 = $r1.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double globalCurrentTime>;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double globalCurrentTime> = $d0;

        $d0 = $r1.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double softPreviousTime>;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double softPreviousTime> = $d0;

        $d0 = $r1.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double softCurrentTime>;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double softCurrentTime> = $d0;

        $d0 = $r1.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double h>;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double h> = $d0;

        $d0 = $r1.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double interpolatedTime>;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double interpolatedTime> = $d0;

        $r2 = $r1.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] currentState>;

        if $r2 != null goto label3;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] currentState> = null;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: org.apache.commons.math3.ode.EquationsMapper primaryMapper> = null;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: org.apache.commons.math3.ode.EquationsMapper[] secondaryMappers> = null;

        specialinvoke r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: void allocateInterpolatedArrays(int)>(-1);

     label1:
        $z0 = $r1.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: boolean finalized>;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: boolean finalized> = $z0;

        $z0 = $r1.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: boolean forward>;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: boolean forward> = $z0;

        $z0 = $r1.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: boolean dirtyState>;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: boolean dirtyState> = $z0;

        $r3 = $r1.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: org.apache.commons.math3.ode.EquationsMapper primaryMapper>;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: org.apache.commons.math3.ode.EquationsMapper primaryMapper> = $r3;

        $r4 = $r1.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: org.apache.commons.math3.ode.EquationsMapper[] secondaryMappers>;

        if $r4 != null goto label5;

        $r4 = null;

     label2:
        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: org.apache.commons.math3.ode.EquationsMapper[] secondaryMappers> = $r4;

        return;

     label3:
        $r2 = $r1.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] currentState>;

        $r5 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (double[]) $r5;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] currentState> = $r2;

        $r2 = $r1.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] interpolatedState>;

        $r5 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (double[]) $r5;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] interpolatedState> = $r2;

        $r2 = $r1.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] interpolatedDerivatives>;

        $r5 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (double[]) $r5;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] interpolatedDerivatives> = $r2;

        $r2 = $r1.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] interpolatedPrimaryState>;

        $r5 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (double[]) $r5;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] interpolatedPrimaryState> = $r2;

        $r2 = $r1.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] interpolatedPrimaryDerivatives>;

        $r5 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (double[]) $r5;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] interpolatedPrimaryDerivatives> = $r2;

        $r6 = $r1.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[][] interpolatedSecondaryState>;

        $i0 = lengthof $r6;

        $r6 = newarray (double[])[$i0];

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[][] interpolatedSecondaryState> = $r6;

        $r6 = $r1.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[][] interpolatedSecondaryDerivatives>;

        $i0 = lengthof $r6;

        $r6 = newarray (double[])[$i0];

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[][] interpolatedSecondaryDerivatives> = $r6;

        $i0 = 0;

     label4:
        $r6 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[][] interpolatedSecondaryState>;

        $i1 = lengthof $r6;

        if $i0 >= $i1 goto label1;

        $r6 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[][] interpolatedSecondaryState>;

        $r7 = $r1.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[][] interpolatedSecondaryState>;

        $r2 = $r7[$i0];

        $r5 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (double[]) $r5;

        $r6[$i0] = $r2;

        $r6 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[][] interpolatedSecondaryDerivatives>;

        $r7 = $r1.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[][] interpolatedSecondaryDerivatives>;

        $r2 = $r7[$i0];

        $r5 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (double[]) $r5;

        $r6[$i0] = $r2;

        $i0 = $i0 + 1;

        goto label4;

     label5:
        $r4 = $r1.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: org.apache.commons.math3.ode.EquationsMapper[] secondaryMappers>;

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.Object clone()>();

        $r4 = (org.apache.commons.math3.ode.EquationsMapper[]) $r5;

        goto label2;
    }
    protected void <init>(double[], boolean, org.apache.commons.math3.ode.EquationsMapper, org.apache.commons.math3.ode.EquationsMapper[])
    {
        org.apache.commons.math3.ode.sampling.AbstractStepInterpolator r0;
        double[] $r1;
        boolean $z0;
        org.apache.commons.math3.ode.EquationsMapper $r2;
        org.apache.commons.math3.ode.EquationsMapper[] $r3;
        java.lang.Object $r4;
        int $i0;

        r0 := @this: org.apache.commons.math3.ode.sampling.AbstractStepInterpolator;

        $r1 := @parameter0: double[];

        $z0 := @parameter1: boolean;

        $r2 := @parameter2: org.apache.commons.math3.ode.EquationsMapper;

        $r3 := @parameter3: org.apache.commons.math3.ode.EquationsMapper[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double globalPreviousTime> = #NaN;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double globalCurrentTime> = #NaN;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double softPreviousTime> = #NaN;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double softCurrentTime> = #NaN;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double h> = #NaN;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double interpolatedTime> = #NaN;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] currentState> = $r1;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: boolean finalized> = 0;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: boolean forward> = $z0;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: boolean dirtyState> = 1;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: org.apache.commons.math3.ode.EquationsMapper primaryMapper> = $r2;

        if $r3 != null goto label2;

        $r3 = null;

     label1:
        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: org.apache.commons.math3.ode.EquationsMapper[] secondaryMappers> = $r3;

        $i0 = lengthof $r1;

        specialinvoke r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: void allocateInterpolatedArrays(int)>($i0);

        return;

     label2:
        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (org.apache.commons.math3.ode.EquationsMapper[]) $r4;

        goto label1;
    }
    private void allocateInterpolatedArrays(int)
    {
        org.apache.commons.math3.ode.sampling.AbstractStepInterpolator r0;
        int $i0, $i1;
        double[] $r1;
        org.apache.commons.math3.ode.EquationsMapper $r2;
        org.apache.commons.math3.ode.EquationsMapper[] $r3;
        double[][] $r4;

        r0 := @this: org.apache.commons.math3.ode.sampling.AbstractStepInterpolator;

        $i0 := @parameter0: int;

        if $i0 >= 0 goto label1;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] interpolatedState> = null;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] interpolatedDerivatives> = null;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] interpolatedPrimaryState> = null;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] interpolatedPrimaryDerivatives> = null;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[][] interpolatedSecondaryState> = null;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[][] interpolatedSecondaryDerivatives> = null;

        return;

     label1:
        $r1 = newarray (double)[$i0];

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] interpolatedState> = $r1;

        $r1 = newarray (double)[$i0];

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] interpolatedDerivatives> = $r1;

        $r2 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: org.apache.commons.math3.ode.EquationsMapper primaryMapper>;

        $i0 = virtualinvoke $r2.<org.apache.commons.math3.ode.EquationsMapper: int getDimension()>();

        $r1 = newarray (double)[$i0];

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] interpolatedPrimaryState> = $r1;

        $r2 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: org.apache.commons.math3.ode.EquationsMapper primaryMapper>;

        $i0 = virtualinvoke $r2.<org.apache.commons.math3.ode.EquationsMapper: int getDimension()>();

        $r1 = newarray (double)[$i0];

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] interpolatedPrimaryDerivatives> = $r1;

        $r3 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: org.apache.commons.math3.ode.EquationsMapper[] secondaryMappers>;

        if $r3 != null goto label2;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[][] interpolatedSecondaryState> = null;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[][] interpolatedSecondaryDerivatives> = null;

        return;

     label2:
        $r3 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: org.apache.commons.math3.ode.EquationsMapper[] secondaryMappers>;

        $i0 = lengthof $r3;

        $r4 = newarray (double[])[$i0];

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[][] interpolatedSecondaryState> = $r4;

        $r3 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: org.apache.commons.math3.ode.EquationsMapper[] secondaryMappers>;

        $i0 = lengthof $r3;

        $r4 = newarray (double[])[$i0];

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[][] interpolatedSecondaryDerivatives> = $r4;

        $i0 = 0;

     label3:
        $r3 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: org.apache.commons.math3.ode.EquationsMapper[] secondaryMappers>;

        $i1 = lengthof $r3;

        if $i0 >= $i1 goto label4;

        $r4 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[][] interpolatedSecondaryState>;

        $r3 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: org.apache.commons.math3.ode.EquationsMapper[] secondaryMappers>;

        $r2 = $r3[$i0];

        $i1 = virtualinvoke $r2.<org.apache.commons.math3.ode.EquationsMapper: int getDimension()>();

        $r1 = newarray (double)[$i1];

        $r4[$i0] = $r1;

        $r4 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[][] interpolatedSecondaryDerivatives>;

        $r3 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: org.apache.commons.math3.ode.EquationsMapper[] secondaryMappers>;

        $r2 = $r3[$i0];

        $i1 = virtualinvoke $r2.<org.apache.commons.math3.ode.EquationsMapper: int getDimension()>();

        $r1 = newarray (double)[$i1];

        $r4[$i0] = $r1;

        $i0 = $i0 + 1;

        goto label3;

     label4:
        return;
    }
    private void evaluateCompleteInterpolatedState() throws org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.ode.sampling.AbstractStepInterpolator r0;
        double d0, d1, $d2;
        boolean $z0;
        byte $b0;

        r0 := @this: org.apache.commons.math3.ode.sampling.AbstractStepInterpolator;

        d1 = 0.0;

        $z0 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: boolean dirtyState>;

        if $z0 == 0 goto label3;

        d0 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double globalCurrentTime>;

        $d2 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double interpolatedTime>;

        d0 = d0 - $d2;

        $d2 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double h>;

        $b0 = $d2 cmpl 0.0;

        if $b0 != 0 goto label2;

     label1:
        virtualinvoke r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: void computeInterpolatedStateAndDerivatives(double,double)>(d1, d0);

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: boolean dirtyState> = 0;

        return;

     label2:
        d1 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double h>;

        d1 = d1 - d0;

        $d2 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double h>;

        d1 = d1 / $d2;

        goto label1;

     label3:
        return;
    }
protected abstract void computeInterpolatedStateAndDerivatives(double, double) throws org.apache.commons.math3.exception.MaxCountExceededException { 
// no body
} 
    public org.apache.commons.math3.ode.sampling.StepInterpolator copy() throws org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.ode.sampling.AbstractStepInterpolator r0;
        org.apache.commons.math3.ode.sampling.StepInterpolator $r1;

        r0 := @this: org.apache.commons.math3.ode.sampling.AbstractStepInterpolator;

        virtualinvoke r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: void finalizeStep()>();

        $r1 = virtualinvoke r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: org.apache.commons.math3.ode.sampling.StepInterpolator doCopy()>();

        return $r1;
    }
protected abstract org.apache.commons.math3.ode.sampling.StepInterpolator doCopy() { 
// no body
} 
    protected void doFinalize() throws org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.ode.sampling.AbstractStepInterpolator r0;

        r0 := @this: org.apache.commons.math3.ode.sampling.AbstractStepInterpolator;

        return;
    }
    public final void finalizeStep() throws org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.ode.sampling.AbstractStepInterpolator r0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.ode.sampling.AbstractStepInterpolator;

        $z0 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: boolean finalized>;

        if $z0 != 0 goto label1;

        virtualinvoke r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: void doFinalize()>();

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: boolean finalized> = 1;

     label1:
        return;
    }
    public double getCurrentTime()
    {
        org.apache.commons.math3.ode.sampling.AbstractStepInterpolator r0;
        double d0;

        r0 := @this: org.apache.commons.math3.ode.sampling.AbstractStepInterpolator;

        d0 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double softCurrentTime>;

        return d0;
    }
    public double getGlobalCurrentTime()
    {
        org.apache.commons.math3.ode.sampling.AbstractStepInterpolator r0;
        double d0;

        r0 := @this: org.apache.commons.math3.ode.sampling.AbstractStepInterpolator;

        d0 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double globalCurrentTime>;

        return d0;
    }
    public double getGlobalPreviousTime()
    {
        org.apache.commons.math3.ode.sampling.AbstractStepInterpolator r0;
        double d0;

        r0 := @this: org.apache.commons.math3.ode.sampling.AbstractStepInterpolator;

        d0 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double globalPreviousTime>;

        return d0;
    }
    public double[] getInterpolatedDerivatives() throws org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.ode.sampling.AbstractStepInterpolator r0;
        double[] $r1, $r2;
        org.apache.commons.math3.ode.EquationsMapper $r3;

        r0 := @this: org.apache.commons.math3.ode.sampling.AbstractStepInterpolator;

        specialinvoke r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: void evaluateCompleteInterpolatedState()>();

        $r3 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: org.apache.commons.math3.ode.EquationsMapper primaryMapper>;

        $r1 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] interpolatedDerivatives>;

        $r2 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] interpolatedPrimaryDerivatives>;

        virtualinvoke $r3.<org.apache.commons.math3.ode.EquationsMapper: void extractEquationData(double[],double[])>($r1, $r2);

        $r1 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] interpolatedPrimaryDerivatives>;

        return $r1;
    }
    public double[] getInterpolatedSecondaryDerivatives(int) throws org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.ode.sampling.AbstractStepInterpolator r0;
        int $i0;
        double[] $r1, $r5;
        org.apache.commons.math3.ode.EquationsMapper[] $r2;
        org.apache.commons.math3.ode.EquationsMapper $r3;
        double[][] $r4;

        r0 := @this: org.apache.commons.math3.ode.sampling.AbstractStepInterpolator;

        $i0 := @parameter0: int;

        specialinvoke r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: void evaluateCompleteInterpolatedState()>();

        $r2 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: org.apache.commons.math3.ode.EquationsMapper[] secondaryMappers>;

        $r3 = $r2[$i0];

        $r1 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] interpolatedDerivatives>;

        $r4 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[][] interpolatedSecondaryDerivatives>;

        $r5 = $r4[$i0];

        virtualinvoke $r3.<org.apache.commons.math3.ode.EquationsMapper: void extractEquationData(double[],double[])>($r1, $r5);

        $r4 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[][] interpolatedSecondaryDerivatives>;

        $r1 = $r4[$i0];

        return $r1;
    }
    public double[] getInterpolatedSecondaryState(int) throws org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.ode.sampling.AbstractStepInterpolator r0;
        int $i0;
        double[] $r1, $r5;
        org.apache.commons.math3.ode.EquationsMapper[] $r2;
        org.apache.commons.math3.ode.EquationsMapper $r3;
        double[][] $r4;

        r0 := @this: org.apache.commons.math3.ode.sampling.AbstractStepInterpolator;

        $i0 := @parameter0: int;

        specialinvoke r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: void evaluateCompleteInterpolatedState()>();

        $r2 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: org.apache.commons.math3.ode.EquationsMapper[] secondaryMappers>;

        $r3 = $r2[$i0];

        $r1 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] interpolatedState>;

        $r4 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[][] interpolatedSecondaryState>;

        $r5 = $r4[$i0];

        virtualinvoke $r3.<org.apache.commons.math3.ode.EquationsMapper: void extractEquationData(double[],double[])>($r1, $r5);

        $r4 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[][] interpolatedSecondaryState>;

        $r1 = $r4[$i0];

        return $r1;
    }
    public double[] getInterpolatedState() throws org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.ode.sampling.AbstractStepInterpolator r0;
        double[] $r1, $r2;
        org.apache.commons.math3.ode.EquationsMapper $r3;

        r0 := @this: org.apache.commons.math3.ode.sampling.AbstractStepInterpolator;

        specialinvoke r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: void evaluateCompleteInterpolatedState()>();

        $r3 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: org.apache.commons.math3.ode.EquationsMapper primaryMapper>;

        $r1 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] interpolatedState>;

        $r2 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] interpolatedPrimaryState>;

        virtualinvoke $r3.<org.apache.commons.math3.ode.EquationsMapper: void extractEquationData(double[],double[])>($r1, $r2);

        $r1 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] interpolatedPrimaryState>;

        return $r1;
    }
    public double getInterpolatedTime()
    {
        org.apache.commons.math3.ode.sampling.AbstractStepInterpolator r0;
        double d0;

        r0 := @this: org.apache.commons.math3.ode.sampling.AbstractStepInterpolator;

        d0 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double interpolatedTime>;

        return d0;
    }
    public double getPreviousTime()
    {
        org.apache.commons.math3.ode.sampling.AbstractStepInterpolator r0;
        double d0;

        r0 := @this: org.apache.commons.math3.ode.sampling.AbstractStepInterpolator;

        d0 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double softPreviousTime>;

        return d0;
    }
    public boolean isForward()
    {
        org.apache.commons.math3.ode.sampling.AbstractStepInterpolator r0;
        boolean z0;

        r0 := @this: org.apache.commons.math3.ode.sampling.AbstractStepInterpolator;

        z0 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: boolean forward>;

        return z0;
    }
    protected double readBaseExternal(java.io.ObjectInput) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.apache.commons.math3.ode.sampling.AbstractStepInterpolator r0;
        java.io.ObjectInput $r1;
        org.apache.commons.math3.ode.EquationsMapper[] $r2;
        int $i0, $i1, $i2;
        double $d0;
        boolean $z0;
        java.lang.Object $r3;
        org.apache.commons.math3.ode.EquationsMapper $r4;
        double[] $r5;

        r0 := @this: org.apache.commons.math3.ode.sampling.AbstractStepInterpolator;

        $r1 := @parameter0: java.io.ObjectInput;

        $i0 = interfaceinvoke $r1.<java.io.ObjectInput: int readInt()>();

        $d0 = interfaceinvoke $r1.<java.io.ObjectInput: double readDouble()>();

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double globalPreviousTime> = $d0;

        $d0 = interfaceinvoke $r1.<java.io.ObjectInput: double readDouble()>();

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double globalCurrentTime> = $d0;

        $d0 = interfaceinvoke $r1.<java.io.ObjectInput: double readDouble()>();

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double softPreviousTime> = $d0;

        $d0 = interfaceinvoke $r1.<java.io.ObjectInput: double readDouble()>();

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double softCurrentTime> = $d0;

        $d0 = interfaceinvoke $r1.<java.io.ObjectInput: double readDouble()>();

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double h> = $d0;

        $z0 = interfaceinvoke $r1.<java.io.ObjectInput: boolean readBoolean()>();

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: boolean forward> = $z0;

        $r3 = interfaceinvoke $r1.<java.io.ObjectInput: java.lang.Object readObject()>();

        $r4 = (org.apache.commons.math3.ode.EquationsMapper) $r3;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: org.apache.commons.math3.ode.EquationsMapper primaryMapper> = $r4;

        $i1 = interfaceinvoke $r1.<java.io.ObjectInput: int read()>();

        $r2 = newarray (org.apache.commons.math3.ode.EquationsMapper)[$i1];

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: org.apache.commons.math3.ode.EquationsMapper[] secondaryMappers> = $r2;

        $i1 = 0;

     label1:
        $r2 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: org.apache.commons.math3.ode.EquationsMapper[] secondaryMappers>;

        $i2 = lengthof $r2;

        if $i1 >= $i2 goto label2;

        $r2 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: org.apache.commons.math3.ode.EquationsMapper[] secondaryMappers>;

        $r3 = interfaceinvoke $r1.<java.io.ObjectInput: java.lang.Object readObject()>();

        $r4 = (org.apache.commons.math3.ode.EquationsMapper) $r3;

        $r2[$i1] = $r4;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: boolean dirtyState> = 1;

        if $i0 >= 0 goto label4;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] currentState> = null;

     label3:
        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double interpolatedTime> = #NaN;

        specialinvoke r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: void allocateInterpolatedArrays(int)>($i0);

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: boolean finalized> = 1;

        $d0 = interfaceinvoke $r1.<java.io.ObjectInput: double readDouble()>();

        return $d0;

     label4:
        $r5 = newarray (double)[$i0];

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] currentState> = $r5;

        $i1 = 0;

     label5:
        $r5 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] currentState>;

        $i2 = lengthof $r5;

        if $i1 >= $i2 goto label3;

        $r5 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] currentState>;

        $d0 = interfaceinvoke $r1.<java.io.ObjectInput: double readDouble()>();

        $r5[$i1] = $d0;

        $i1 = $i1 + 1;

        goto label5;
    }
public abstract void readExternal(java.io.ObjectInput) throws java.io.IOException, java.lang.ClassNotFoundException { 
// no body
} 
    protected void reinitialize(double[], boolean, org.apache.commons.math3.ode.EquationsMapper, org.apache.commons.math3.ode.EquationsMapper[])
    {
        org.apache.commons.math3.ode.sampling.AbstractStepInterpolator r0;
        double[] $r1;
        boolean $z0;
        org.apache.commons.math3.ode.EquationsMapper $r2;
        org.apache.commons.math3.ode.EquationsMapper[] $r3;
        java.lang.Object $r4;
        int $i0;

        r0 := @this: org.apache.commons.math3.ode.sampling.AbstractStepInterpolator;

        $r1 := @parameter0: double[];

        $z0 := @parameter1: boolean;

        $r2 := @parameter2: org.apache.commons.math3.ode.EquationsMapper;

        $r3 := @parameter3: org.apache.commons.math3.ode.EquationsMapper[];

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double globalPreviousTime> = #NaN;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double globalCurrentTime> = #NaN;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double softPreviousTime> = #NaN;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double softCurrentTime> = #NaN;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double h> = #NaN;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double interpolatedTime> = #NaN;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] currentState> = $r1;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: boolean finalized> = 0;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: boolean forward> = $z0;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: boolean dirtyState> = 1;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: org.apache.commons.math3.ode.EquationsMapper primaryMapper> = $r2;

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (org.apache.commons.math3.ode.EquationsMapper[]) $r4;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: org.apache.commons.math3.ode.EquationsMapper[] secondaryMappers> = $r3;

        $i0 = lengthof $r1;

        specialinvoke r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: void allocateInterpolatedArrays(int)>($i0);

        return;
    }
    public void setInterpolatedTime(double)
    {
        org.apache.commons.math3.ode.sampling.AbstractStepInterpolator r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.ode.sampling.AbstractStepInterpolator;

        $d0 := @parameter0: double;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double interpolatedTime> = $d0;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: boolean dirtyState> = 1;

        return;
    }
    public void setSoftCurrentTime(double)
    {
        org.apache.commons.math3.ode.sampling.AbstractStepInterpolator r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.ode.sampling.AbstractStepInterpolator;

        $d0 := @parameter0: double;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double softCurrentTime> = $d0;

        return;
    }
    public void setSoftPreviousTime(double)
    {
        org.apache.commons.math3.ode.sampling.AbstractStepInterpolator r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.ode.sampling.AbstractStepInterpolator;

        $d0 := @parameter0: double;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double softPreviousTime> = $d0;

        return;
    }
    public void shift()
    {
        org.apache.commons.math3.ode.sampling.AbstractStepInterpolator r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.ode.sampling.AbstractStepInterpolator;

        $d0 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double globalCurrentTime>;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double globalPreviousTime> = $d0;

        $d0 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double globalPreviousTime>;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double softPreviousTime> = $d0;

        $d0 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double globalCurrentTime>;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double softCurrentTime> = $d0;

        return;
    }
    public void storeTime(double)
    {
        org.apache.commons.math3.ode.sampling.AbstractStepInterpolator r0;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.ode.sampling.AbstractStepInterpolator;

        $d0 := @parameter0: double;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double globalCurrentTime> = $d0;

        $d1 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double globalCurrentTime>;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double softCurrentTime> = $d1;

        $d2 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double globalCurrentTime>;

        $d1 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double globalPreviousTime>;

        $d1 = $d2 - $d1;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double h> = $d1;

        virtualinvoke r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: void setInterpolatedTime(double)>($d0);

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: boolean finalized> = 0;

        return;
    }
    protected void writeBaseExternal(java.io.ObjectOutput) throws java.io.IOException
    {
        org.apache.commons.math3.ode.sampling.AbstractStepInterpolator r0;
        java.io.ObjectOutput $r1;
        org.apache.commons.math3.ode.EquationsMapper[] r2;
        java.io.IOException r3;
        int i0, i1;
        org.apache.commons.math3.ode.EquationsMapper r4;
        org.apache.commons.math3.exception.MaxCountExceededException r5;
        java.lang.String $r6;
        double[] $r7;
        double $d0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.ode.sampling.AbstractStepInterpolator;

        $r1 := @parameter0: java.io.ObjectOutput;

        $r7 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] currentState>;

        if $r7 != null goto label3;

        interfaceinvoke $r1.<java.io.ObjectOutput: void writeInt(int)>(-1);

     label1:
        $d0 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double globalPreviousTime>;

        interfaceinvoke $r1.<java.io.ObjectOutput: void writeDouble(double)>($d0);

        $d0 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double globalCurrentTime>;

        interfaceinvoke $r1.<java.io.ObjectOutput: void writeDouble(double)>($d0);

        $d0 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double softPreviousTime>;

        interfaceinvoke $r1.<java.io.ObjectOutput: void writeDouble(double)>($d0);

        $d0 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double softCurrentTime>;

        interfaceinvoke $r1.<java.io.ObjectOutput: void writeDouble(double)>($d0);

        $d0 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double h>;

        interfaceinvoke $r1.<java.io.ObjectOutput: void writeDouble(double)>($d0);

        $z0 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: boolean forward>;

        interfaceinvoke $r1.<java.io.ObjectOutput: void writeBoolean(boolean)>($z0);

        r4 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: org.apache.commons.math3.ode.EquationsMapper primaryMapper>;

        interfaceinvoke $r1.<java.io.ObjectOutput: void writeObject(java.lang.Object)>(r4);

        r2 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: org.apache.commons.math3.ode.EquationsMapper[] secondaryMappers>;

        i0 = lengthof r2;

        interfaceinvoke $r1.<java.io.ObjectOutput: void write(int)>(i0);

        r2 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: org.apache.commons.math3.ode.EquationsMapper[] secondaryMappers>;

        i0 = lengthof r2;

        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        r4 = r2[i1];

        interfaceinvoke $r1.<java.io.ObjectOutput: void writeObject(java.lang.Object)>(r4);

        i1 = i1 + 1;

        goto label2;

     label3:
        $r7 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] currentState>;

        i0 = lengthof $r7;

        interfaceinvoke $r1.<java.io.ObjectOutput: void writeInt(int)>(i0);

        goto label1;

     label4:
        $r7 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] currentState>;

        if $r7 == null goto label6;

        i0 = 0;

     label5:
        $r7 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] currentState>;

        i1 = lengthof $r7;

        if i0 >= i1 goto label6;

        $r7 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] currentState>;

        $d0 = $r7[i0];

        interfaceinvoke $r1.<java.io.ObjectOutput: void writeDouble(double)>($d0);

        i0 = i0 + 1;

        goto label5;

     label6:
        $d0 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double interpolatedTime>;

        interfaceinvoke $r1.<java.io.ObjectOutput: void writeDouble(double)>($d0);

     label7:
        virtualinvoke r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: void finalizeStep()>();

     label8:
        return;

     label9:
        r5 := @caughtexception;

        r3 = new java.io.IOException;

        $r6 = virtualinvoke r5.<org.apache.commons.math3.exception.MaxCountExceededException: java.lang.String getLocalizedMessage()>();

        specialinvoke r3.<java.io.IOException: void <init>(java.lang.String)>($r6);

        virtualinvoke r3.<java.io.IOException: java.lang.Throwable initCause(java.lang.Throwable)>(r5);

        throw r3;

        catch org.apache.commons.math3.exception.MaxCountExceededException from label7 to label8 with label9;
    }
public abstract void writeExternal(java.io.ObjectOutput) throws java.io.IOException { 
// no body
} 
