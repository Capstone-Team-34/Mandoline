org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator$Corrector extends java.lang.Object implements org.apache.commons.math3.linear.RealMatrixPreservingVisitor
private final double[] after
private final double[] before
private final double[] previous
private final double[] scaled
final org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator this$0
    void <init>(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator, double[], double[], double[])
    {
        org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator$Corrector r0;
        org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator $r1;
        double[] $r2, $r3, $r4;
        java.lang.Object $r5;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator$Corrector;

        $r1 := @parameter0: org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator;

        $r2 := @parameter1: double[];

        $r3 := @parameter2: double[];

        $r4 := @parameter3: double[];

        r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator$Corrector: org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator this$0> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator$Corrector: double[] previous> = $r2;

        r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator$Corrector: double[] scaled> = $r3;

        r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator$Corrector: double[] after> = $r4;

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (double[]) $r5;

        r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator$Corrector: double[] before> = $r2;

        return;
    }
    public double end()
    {
        org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator$Corrector r0;
        double d0, d1, $d2, $d3;
        int i0, $i1;
        double[] $r1, $r2;
        org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator $r3;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator$Corrector;

        d1 = 0.0;

        i0 = 0;

     label1:
        $r1 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator$Corrector: double[] after>;

        $i1 = lengthof $r1;

        if i0 >= $i1 goto label5;

        $r1 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator$Corrector: double[] after>;

        d0 = $r1[i0];

        $r2 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator$Corrector: double[] previous>;

        $d2 = $r2[i0];

        $r2 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator$Corrector: double[] scaled>;

        $d3 = $r2[i0];

        $d2 = $d2 + $d3;

        d0 = d0 + $d2;

        $r1[i0] = d0;

        $r3 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator$Corrector: org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator this$0>;

        $i1 = $r3.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: int mainSetDimension>;

        if i0 >= $i1 goto label3;

        $r1 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator$Corrector: double[] previous>;

        d0 = $r1[i0];

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d0);

        $r1 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator$Corrector: double[] after>;

        $d2 = $r1[i0];

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d2);

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>(d0, $d2);

        $r3 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator$Corrector: org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator this$0>;

        $r1 = $r3.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double[] vecAbsoluteTolerance>;

        if $r1 != null goto label4;

        $r3 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator$Corrector: org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator this$0>;

        $d2 = $r3.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double scalAbsoluteTolerance>;

        $r3 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator$Corrector: org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator this$0>;

        $d3 = $r3.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double scalRelativeTolerance>;

        d0 = $d3 * d0;

        d0 = $d2 + d0;

     label2:
        $r1 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator$Corrector: double[] after>;

        $d2 = $r1[i0];

        $r1 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator$Corrector: double[] before>;

        $d3 = $r1[i0];

        $d2 = $d2 - $d3;

        d0 = $d2 / d0;

        d0 = d0 * d0;

        d1 = d1 + d0;

     label3:
        i0 = i0 + 1;

        goto label1;

     label4:
        $r3 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator$Corrector: org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator this$0>;

        $r1 = $r3.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double[] vecAbsoluteTolerance>;

        $d2 = $r1[i0];

        $r3 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator$Corrector: org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator this$0>;

        $r1 = $r3.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double[] vecRelativeTolerance>;

        $d3 = $r1[i0];

        d0 = $d3 * d0;

        d0 = $d2 + d0;

        goto label2;

     label5:
        $r3 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator$Corrector: org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator this$0>;

        i0 = $r3.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: int mainSetDimension>;

        d0 = (double) i0;

        d1 = d1 / d0;

        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d1);

        return d1;
    }
    public void start(int, int, int, int, int, int)
    {
        org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator$Corrector r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        double[] $r1;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator$Corrector;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $i4 := @parameter4: int;

        $i5 := @parameter5: int;

        $r1 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator$Corrector: double[] after>;

        staticinvoke <java.util.Arrays: void fill(double[],double)>($r1, 0.0);

        return;
    }
    public void visit(int, int, double)
    {
        org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator$Corrector r0;
        int $i0, $i1;
        double $d0, $d1;
        double[] $r1;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator$Corrector;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $d0 := @parameter2: double;

        $i0 = $i0 & 1;

        if $i0 != 0 goto label1;

        $r1 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator$Corrector: double[] after>;

        $d1 = $r1[$i1];

        $d0 = $d1 - $d0;

        $r1[$i1] = $d0;

        return;

     label1:
        $r1 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator$Corrector: double[] after>;

        $d1 = $r1[$i1];

        $d0 = $d1 + $d0;

        $r1[$i1] = $d0;

        return;
    }
