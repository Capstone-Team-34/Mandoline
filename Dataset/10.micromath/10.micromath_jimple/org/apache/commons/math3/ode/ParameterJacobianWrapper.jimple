org.apache.commons.math3.ode.ParameterJacobianWrapper extends java.lang.Object implements org.apache.commons.math3.ode.ParameterJacobianProvider
private final org.apache.commons.math3.ode.FirstOrderDifferentialEquations fode
private final java.util.Map hParam
private final org.apache.commons.math3.ode.ParameterizedODE pode
    void <init>(org.apache.commons.math3.ode.FirstOrderDifferentialEquations, org.apache.commons.math3.ode.ParameterizedODE, org.apache.commons.math3.ode.ParameterConfiguration[])
    {
        org.apache.commons.math3.ode.ParameterJacobianWrapper r0;
        org.apache.commons.math3.ode.FirstOrderDifferentialEquations $r1;
        org.apache.commons.math3.ode.ParameterizedODE $r2;
        org.apache.commons.math3.ode.ParameterConfiguration[] $r3;
        int i0, i1;
        org.apache.commons.math3.ode.ParameterConfiguration r4;
        java.util.HashMap $r5;
        java.lang.String $r6;
        boolean $z0;
        java.util.Map $r7;
        double $d0;
        java.lang.Double $r8;

        r0 := @this: org.apache.commons.math3.ode.ParameterJacobianWrapper;

        $r1 := @parameter0: org.apache.commons.math3.ode.FirstOrderDifferentialEquations;

        $r2 := @parameter1: org.apache.commons.math3.ode.ParameterizedODE;

        $r3 := @parameter2: org.apache.commons.math3.ode.ParameterConfiguration[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.ode.ParameterJacobianWrapper: org.apache.commons.math3.ode.FirstOrderDifferentialEquations fode> = $r1;

        r0.<org.apache.commons.math3.ode.ParameterJacobianWrapper: org.apache.commons.math3.ode.ParameterizedODE pode> = $r2;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r0.<org.apache.commons.math3.ode.ParameterJacobianWrapper: java.util.Map hParam> = $r5;

        i0 = lengthof $r3;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r4 = $r3[i1];

        $r6 = virtualinvoke r4.<org.apache.commons.math3.ode.ParameterConfiguration: java.lang.String getParameterName()>();

        $z0 = interfaceinvoke $r2.<org.apache.commons.math3.ode.ParameterizedODE: boolean isSupported(java.lang.String)>($r6);

        if $z0 == 0 goto label2;

        $r7 = r0.<org.apache.commons.math3.ode.ParameterJacobianWrapper: java.util.Map hParam>;

        $d0 = virtualinvoke r4.<org.apache.commons.math3.ode.ParameterConfiguration: double getHP()>();

        $r8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r8);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }
    public void computeParameterJacobian(double, double[], double[], java.lang.String, double[]) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.ode.ParameterJacobianWrapper r0;
        double $d0, $d1, $d2, $d3;
        double[] $r1, $r2, $r4, r5;
        java.lang.String $r3;
        org.apache.commons.math3.ode.FirstOrderDifferentialEquations $r6;
        int $i0, i1;
        org.apache.commons.math3.ode.ParameterizedODE $r7;
        boolean $z0;
        java.util.Map $r8;
        java.lang.Object $r9;
        java.lang.Double $r10;

        r0 := @this: org.apache.commons.math3.ode.ParameterJacobianWrapper;

        $d0 := @parameter0: double;

        $r1 := @parameter1: double[];

        $r2 := @parameter2: double[];

        $r3 := @parameter3: java.lang.String;

        $r4 := @parameter4: double[];

        $r6 = r0.<org.apache.commons.math3.ode.ParameterJacobianWrapper: org.apache.commons.math3.ode.FirstOrderDifferentialEquations fode>;

        $i0 = interfaceinvoke $r6.<org.apache.commons.math3.ode.FirstOrderDifferentialEquations: int getDimension()>();

        $r7 = r0.<org.apache.commons.math3.ode.ParameterJacobianWrapper: org.apache.commons.math3.ode.ParameterizedODE pode>;

        $z0 = interfaceinvoke $r7.<org.apache.commons.math3.ode.ParameterizedODE: boolean isSupported(java.lang.String)>($r3);

        if $z0 == 0 goto label3;

        r5 = newarray (double)[$i0];

        $r7 = r0.<org.apache.commons.math3.ode.ParameterJacobianWrapper: org.apache.commons.math3.ode.ParameterizedODE pode>;

        $d1 = interfaceinvoke $r7.<org.apache.commons.math3.ode.ParameterizedODE: double getParameter(java.lang.String)>($r3);

        $r8 = r0.<org.apache.commons.math3.ode.ParameterJacobianWrapper: java.util.Map hParam>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        $r10 = (java.lang.Double) $r9;

        $d2 = virtualinvoke $r10.<java.lang.Double: double doubleValue()>();

        $r7 = r0.<org.apache.commons.math3.ode.ParameterJacobianWrapper: org.apache.commons.math3.ode.ParameterizedODE pode>;

        $d3 = $d1 + $d2;

        interfaceinvoke $r7.<org.apache.commons.math3.ode.ParameterizedODE: void setParameter(java.lang.String,double)>($r3, $d3);

        $r6 = r0.<org.apache.commons.math3.ode.ParameterJacobianWrapper: org.apache.commons.math3.ode.FirstOrderDifferentialEquations fode>;

        interfaceinvoke $r6.<org.apache.commons.math3.ode.FirstOrderDifferentialEquations: void computeDerivatives(double,double[],double[])>($d0, $r1, r5);

        i1 = 0;

     label1:
        if i1 >= $i0 goto label2;

        $d3 = r5[i1];

        $d0 = $r2[i1];

        $d0 = $d3 - $d0;

        $d0 = $d0 / $d2;

        $r4[i1] = $d0;

        i1 = i1 + 1;

        goto label1;

     label2:
        $r7 = r0.<org.apache.commons.math3.ode.ParameterJacobianWrapper: org.apache.commons.math3.ode.ParameterizedODE pode>;

        interfaceinvoke $r7.<org.apache.commons.math3.ode.ParameterizedODE: void setParameter(java.lang.String,double)>($r3, $d1);

        return;

     label3:
        staticinvoke <java.util.Arrays: void fill(double[],int,int,double)>($r4, 0, $i0, 0.0);

        return;
    }
    public java.util.Collection getParametersNames()
    {
        org.apache.commons.math3.ode.ParameterJacobianWrapper r0;
        java.util.Collection $r1;
        org.apache.commons.math3.ode.ParameterizedODE $r2;

        r0 := @this: org.apache.commons.math3.ode.ParameterJacobianWrapper;

        $r2 = r0.<org.apache.commons.math3.ode.ParameterJacobianWrapper: org.apache.commons.math3.ode.ParameterizedODE pode>;

        $r1 = interfaceinvoke $r2.<org.apache.commons.math3.ode.ParameterizedODE: java.util.Collection getParametersNames()>();

        return $r1;
    }
    public boolean isSupported(java.lang.String)
    {
        org.apache.commons.math3.ode.ParameterJacobianWrapper r0;
        java.lang.String $r1;
        boolean $z0;
        org.apache.commons.math3.ode.ParameterizedODE $r2;

        r0 := @this: org.apache.commons.math3.ode.ParameterJacobianWrapper;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.commons.math3.ode.ParameterJacobianWrapper: org.apache.commons.math3.ode.ParameterizedODE pode>;

        $z0 = interfaceinvoke $r2.<org.apache.commons.math3.ode.ParameterizedODE: boolean isSupported(java.lang.String)>($r1);

        return $z0;
    }
