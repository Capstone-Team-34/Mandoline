org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator extends org.apache.commons.math3.ode.AbstractIntegrator
private double initialStep
protected int mainSetDimension
private double maxStep
private double minStep
protected double scalAbsoluteTolerance
protected double scalRelativeTolerance
protected double[] vecAbsoluteTolerance
protected double[] vecRelativeTolerance
    public void <init>(java.lang.String, double, double, double, double)
    {
        org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator r0;
        java.lang.String $r1;
        double $d0, $d1, $d2, $d3;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator;

        $r1 := @parameter0: java.lang.String;

        $d0 := @parameter1: double;

        $d1 := @parameter2: double;

        $d2 := @parameter3: double;

        $d3 := @parameter4: double;

        specialinvoke r0.<org.apache.commons.math3.ode.AbstractIntegrator: void <init>(java.lang.String)>($r1);

        virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator: void setStepSizeControl(double,double,double,double)>($d0, $d1, $d2, $d3);

        virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator: void resetInternalState()>();

        return;
    }
    public void <init>(java.lang.String, double, double, double[], double[])
    {
        org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator r0;
        java.lang.String $r1;
        double $d0, $d1;
        double[] $r2, $r3;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator;

        $r1 := @parameter0: java.lang.String;

        $d0 := @parameter1: double;

        $d1 := @parameter2: double;

        $r2 := @parameter3: double[];

        $r3 := @parameter4: double[];

        specialinvoke r0.<org.apache.commons.math3.ode.AbstractIntegrator: void <init>(java.lang.String)>($r1);

        virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator: void setStepSizeControl(double,double,double[],double[])>($d0, $d1, $r2, $r3);

        virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator: void resetInternalState()>();

        return;
    }
    protected double filterStep(double, boolean, boolean) throws org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator r0;
        double $d0, d1, $d2, $d3;
        boolean $z0, $z1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r1;
        byte $b0;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r2;
        java.lang.Double $r3, $r4;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator;

        $d0 := @parameter0: double;

        $z0 := @parameter1: boolean;

        $z1 := @parameter2: boolean;

        d1 = $d0;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        $d3 = r0.<org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator: double minStep>;

        $b0 = $d2 cmpg $d3;

        if $b0 >= 0 goto label1;

        if $z1 == 0 goto label3;

        if $z0 == 0 goto label2;

        d1 = r0.<org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator: double minStep>;

     label1:
        $d0 = r0.<org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator: double maxStep>;

        $b0 = d1 cmpl $d0;

        if $b0 <= 0 goto label4;

        $d0 = r0.<org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator: double maxStep>;

        return $d0;

     label2:
        $d0 = r0.<org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator: double minStep>;

        d1 = neg $d0;

        goto label1;

     label3:
        $r2 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r1 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $d0 = r0.<org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator: double minStep>;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        specialinvoke $r2.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r1, $r3, $r4, 1);

        throw $r2;

     label4:
        $d0 = r0.<org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator: double maxStep>;

        $d0 = neg $d0;

        $b0 = d1 cmpg $d0;

        if $b0 >= 0 goto label5;

        $d0 = r0.<org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator: double maxStep>;

        $d0 = neg $d0;

        return $d0;

     label5:
        return d1;
    }
    public double getCurrentStepStart()
    {
        org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator r0;
        double d0;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator;

        d0 = r0.<org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator: double stepStart>;

        return d0;
    }
    public double getMaxStep()
    {
        org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator r0;
        double d0;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator;

        d0 = r0.<org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator: double maxStep>;

        return d0;
    }
    public double getMinStep()
    {
        org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator r0;
        double d0;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator;

        d0 = r0.<org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator: double minStep>;

        return d0;
    }
    public double initializeStep(boolean, int, double[], double, double[], double[], double[], double[]) throws org.apache.commons.math3.exception.MaxCountExceededException, org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator r0;
        boolean $z0;
        int $i0, i2, $i3;
        double[] $r1, $r2, $r3, $r4, $r5;
        double $d0, $d1, d2, $d3, $d4, $d5;
        byte $b1;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator;

        $z0 := @parameter0: boolean;

        $i0 := @parameter1: int;

        $r1 := @parameter2: double[];

        $d0 := @parameter3: double;

        $r2 := @parameter4: double[];

        $r3 := @parameter5: double[];

        $r4 := @parameter6: double[];

        $r5 := @parameter7: double[];

        $d1 = r0.<org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator: double initialStep>;

        $b1 = $d1 cmpl 0.0;

        if $b1 <= 0 goto label02;

        if $z0 == 0 goto label01;

        $d0 = r0.<org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator: double initialStep>;

        return $d0;

     label01:
        $d0 = r0.<org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator: double initialStep>;

        $d0 = neg $d0;

        return $d0;

     label02:
        d2 = 0.0;

        $d1 = 0.0;

        i2 = 0;

     label03:
        $i3 = lengthof $r1;

        if i2 >= $i3 goto label04;

        $d3 = $r2[i2];

        $d4 = $r1[i2];

        $d3 = $d3 / $d4;

        $d3 = $d3 * $d3;

        d2 = d2 + $d3;

        $d3 = $r3[i2];

        $d4 = $r1[i2];

        $d3 = $d3 / $d4;

        $d3 = $d3 * $d3;

        $d1 = $d1 + $d3;

        i2 = i2 + 1;

        goto label03;

     label04:
        $b1 = d2 cmpg 1.0E-10;

        if $b1 < 0 goto label05;

        $b1 = $d1 cmpg 1.0E-10;

        if $b1 >= 0 goto label09;

     label05:
        d2 = 1.0E-6;

     label06:
        if $z0 != 0 goto label07;

        d2 = neg d2;

     label07:
        i2 = 0;

     label08:
        $i3 = lengthof $r2;

        if i2 >= $i3 goto label10;

        $d3 = $r2[i2];

        $d4 = $r3[i2];

        $d4 = $d4 * d2;

        $d3 = $d3 + $d4;

        $r4[i2] = $d3;

        i2 = i2 + 1;

        goto label08;

     label09:
        d2 = d2 / $d1;

        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d2);

        d2 = 0.01 * d2;

        goto label06;

     label10:
        $d3 = $d0 + d2;

        virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator: void computeDerivatives(double,double[],double[])>($d3, $r4, $r5);

        $d3 = 0.0;

        i2 = 0;

     label11:
        $i3 = lengthof $r1;

        if i2 >= $i3 goto label12;

        $d4 = $r5[i2];

        $d5 = $r3[i2];

        $d4 = $d4 - $d5;

        $d5 = $r1[i2];

        $d4 = $d4 / $d5;

        $d4 = $d4 * $d4;

        $d3 = $d3 + $d4;

        i2 = i2 + 1;

        goto label11;

     label12:
        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d3);

        $d3 = $d3 / d2;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d1);

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>($d1, $d3);

        $b1 = $d1 cmpg 1.0E-15;

        if $b1 >= 0 goto label17;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d2);

        $d1 = 0.001 * $d1;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>(1.0E-6, $d1);

     label13:
        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d2);

        d2 = 100.0 * d2;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double min(double,double)>(d2, $d1);

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        $d0 = 1.0E-12 * $d0;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>($d1, $d0);

        $d0 = $d1;

        d2 = virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator: double getMinStep()>();

        $b1 = $d1 cmpg d2;

        if $b1 >= 0 goto label14;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator: double getMinStep()>();

     label14:
        $d1 = virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator: double getMaxStep()>();

        $b1 = $d0 cmpl $d1;

        if $b1 <= 0 goto label15;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator: double getMaxStep()>();

     label15:
        if $z0 != 0 goto label16;

        $d0 = neg $d0;

     label16:
        return $d0;

     label17:
        $d1 = 0.01 / $d1;

        $d3 = (double) $i0;

        $d3 = 1.0 / $d3;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,double)>($d1, $d3);

        goto label13;
    }
public abstract void integrate(org.apache.commons.math3.ode.ExpandableStatefulODE, double) throws org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.MaxCountExceededException, org.apache.commons.math3.exception.NoBracketingException { 
// no body
} 
    protected void resetInternalState()
    {
        org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator r0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator;

        r0.<org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator: double stepStart> = #NaN;

        $d1 = r0.<org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator: double minStep>;

        $d0 = r0.<org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator: double maxStep>;

        $d0 = $d1 * $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d0);

        r0.<org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator: double stepSize> = $d0;

        return;
    }
    protected void sanityChecks(org.apache.commons.math3.ode.ExpandableStatefulODE, double) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator r0;
        org.apache.commons.math3.ode.ExpandableStatefulODE $r1;
        double $d0;
        org.apache.commons.math3.ode.EquationsMapper $r2;
        int $i0, $i1;
        double[] $r3;
        org.apache.commons.math3.exception.DimensionMismatchException $r4;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator;

        $r1 := @parameter0: org.apache.commons.math3.ode.ExpandableStatefulODE;

        $d0 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.ode.AbstractIntegrator: void sanityChecks(org.apache.commons.math3.ode.ExpandableStatefulODE,double)>($r1, $d0);

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.ode.ExpandableStatefulODE: org.apache.commons.math3.ode.EquationsMapper getPrimaryMapper()>();

        $i0 = virtualinvoke $r2.<org.apache.commons.math3.ode.EquationsMapper: int getDimension()>();

        r0.<org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator: int mainSetDimension> = $i0;

        $r3 = r0.<org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator: double[] vecAbsoluteTolerance>;

        if $r3 == null goto label1;

        $r3 = r0.<org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator: double[] vecAbsoluteTolerance>;

        $i0 = lengthof $r3;

        $i1 = r0.<org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator: int mainSetDimension>;

        if $i0 == $i1 goto label1;

        $r4 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i0 = r0.<org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator: int mainSetDimension>;

        $r3 = r0.<org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator: double[] vecAbsoluteTolerance>;

        $i1 = lengthof $r3;

        specialinvoke $r4.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i0, $i1);

        throw $r4;

     label1:
        $r3 = r0.<org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator: double[] vecRelativeTolerance>;

        if $r3 == null goto label2;

        $r3 = r0.<org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator: double[] vecRelativeTolerance>;

        $i0 = lengthof $r3;

        $i1 = r0.<org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator: int mainSetDimension>;

        if $i0 == $i1 goto label2;

        $r4 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i0 = r0.<org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator: int mainSetDimension>;

        $r3 = r0.<org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator: double[] vecRelativeTolerance>;

        $i1 = lengthof $r3;

        specialinvoke $r4.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i0, $i1);

        throw $r4;

     label2:
        return;
    }
    public void setInitialStepSize(double)
    {
        org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator r0;
        double $d0, $d1;
        byte $b0;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator;

        $d0 := @parameter0: double;

        $d1 = r0.<org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator: double minStep>;

        $b0 = $d0 cmpg $d1;

        if $b0 < 0 goto label1;

        $d1 = r0.<org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator: double maxStep>;

        $b0 = $d0 cmpl $d1;

        if $b0 <= 0 goto label2;

     label1:
        r0.<org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator: double initialStep> = -1.0;

        return;

     label2:
        r0.<org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator: double initialStep> = $d0;

        return;
    }
    public void setStepSizeControl(double, double, double, double)
    {
        org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator r0;
        double $d0, $d1, $d2, $d3;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $d3 := @parameter3: double;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        r0.<org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator: double minStep> = $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d1);

        r0.<org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator: double maxStep> = $d0;

        r0.<org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator: double initialStep> = -1.0;

        r0.<org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator: double scalAbsoluteTolerance> = $d2;

        r0.<org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator: double scalRelativeTolerance> = $d3;

        r0.<org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator: double[] vecAbsoluteTolerance> = null;

        r0.<org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator: double[] vecRelativeTolerance> = null;

        return;
    }
    public void setStepSizeControl(double, double, double[], double[])
    {
        org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator r0;
        double $d0, $d1;
        double[] $r1, $r2;
        java.lang.Object $r3;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $r1 := @parameter2: double[];

        $r2 := @parameter3: double[];

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        r0.<org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator: double minStep> = $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d1);

        r0.<org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator: double maxStep> = $d0;

        r0.<org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator: double initialStep> = -1.0;

        r0.<org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator: double scalAbsoluteTolerance> = 0.0;

        r0.<org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator: double scalRelativeTolerance> = 0.0;

        $r3 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r1 = (double[]) $r3;

        r0.<org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator: double[] vecAbsoluteTolerance> = $r1;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r1 = (double[]) $r3;

        r0.<org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator: double[] vecRelativeTolerance> = $r1;

        return;
    }
