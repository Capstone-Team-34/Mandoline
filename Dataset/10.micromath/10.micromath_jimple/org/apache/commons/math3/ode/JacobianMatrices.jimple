org.apache.commons.math3.ode.JacobianMatrices extends java.lang.Object
private boolean dirtyParameter
private org.apache.commons.math3.ode.ExpandableStatefulODE efode
private int index
private java.util.List jacobianProviders
private org.apache.commons.math3.ode.MainStateJacobianProvider jode
private double[] matricesData
private int paramDim
private org.apache.commons.math3.ode.ParameterizedODE pode
private org.apache.commons.math3.ode.ParameterConfiguration[] selectedParameters
private int stateDim
    public transient void <init>(org.apache.commons.math3.ode.FirstOrderDifferentialEquations, double[], java.lang.String[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.ode.JacobianMatrices r0;
        org.apache.commons.math3.ode.FirstOrderDifferentialEquations $r1;
        double[] $r2;
        java.lang.String[] $r3;
        org.apache.commons.math3.ode.JacobianMatrices$MainStateJacobianWrapper $r4;

        r0 := @this: org.apache.commons.math3.ode.JacobianMatrices;

        $r1 := @parameter0: org.apache.commons.math3.ode.FirstOrderDifferentialEquations;

        $r2 := @parameter1: double[];

        $r3 := @parameter2: java.lang.String[];

        $r4 = new org.apache.commons.math3.ode.JacobianMatrices$MainStateJacobianWrapper;

        specialinvoke $r4.<org.apache.commons.math3.ode.JacobianMatrices$MainStateJacobianWrapper: void <init>(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double[])>($r1, $r2);

        specialinvoke r0.<org.apache.commons.math3.ode.JacobianMatrices: void <init>(org.apache.commons.math3.ode.MainStateJacobianProvider,java.lang.String[])>($r4, $r3);

        return;
    }
    public transient void <init>(org.apache.commons.math3.ode.MainStateJacobianProvider, java.lang.String[])
    {
        org.apache.commons.math3.ode.JacobianMatrices r0;
        org.apache.commons.math3.ode.MainStateJacobianProvider $r1;
        java.lang.String[] $r2;
        java.lang.String $r3;
        int $i0, $i1;
        java.util.ArrayList $r4;
        double[] $r5;
        org.apache.commons.math3.ode.ParameterConfiguration[] $r6;
        org.apache.commons.math3.ode.ParameterConfiguration $r7;

        r0 := @this: org.apache.commons.math3.ode.JacobianMatrices;

        $r1 := @parameter0: org.apache.commons.math3.ode.MainStateJacobianProvider;

        $r2 := @parameter1: java.lang.String[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.ode.JacobianMatrices: org.apache.commons.math3.ode.ExpandableStatefulODE efode> = null;

        r0.<org.apache.commons.math3.ode.JacobianMatrices: int index> = -1;

        r0.<org.apache.commons.math3.ode.JacobianMatrices: org.apache.commons.math3.ode.MainStateJacobianProvider jode> = $r1;

        r0.<org.apache.commons.math3.ode.JacobianMatrices: org.apache.commons.math3.ode.ParameterizedODE pode> = null;

        $i0 = interfaceinvoke $r1.<org.apache.commons.math3.ode.MainStateJacobianProvider: int getDimension()>();

        r0.<org.apache.commons.math3.ode.JacobianMatrices: int stateDim> = $i0;

        if $r2 != null goto label3;

        r0.<org.apache.commons.math3.ode.JacobianMatrices: org.apache.commons.math3.ode.ParameterConfiguration[] selectedParameters> = null;

        r0.<org.apache.commons.math3.ode.JacobianMatrices: int paramDim> = 0;

     label1:
        r0.<org.apache.commons.math3.ode.JacobianMatrices: boolean dirtyParameter> = 0;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.math3.ode.JacobianMatrices: java.util.List jacobianProviders> = $r4;

        $i0 = r0.<org.apache.commons.math3.ode.JacobianMatrices: int stateDim>;

        $i1 = r0.<org.apache.commons.math3.ode.JacobianMatrices: int paramDim>;

        $i0 = $i0 + $i1;

        $i1 = r0.<org.apache.commons.math3.ode.JacobianMatrices: int stateDim>;

        $i0 = $i0 * $i1;

        $r5 = newarray (double)[$i0];

        r0.<org.apache.commons.math3.ode.JacobianMatrices: double[] matricesData> = $r5;

        $i0 = 0;

     label2:
        $i1 = r0.<org.apache.commons.math3.ode.JacobianMatrices: int stateDim>;

        if $i0 >= $i1 goto label6;

        $r5 = r0.<org.apache.commons.math3.ode.JacobianMatrices: double[] matricesData>;

        $i1 = r0.<org.apache.commons.math3.ode.JacobianMatrices: int stateDim>;

        $i1 = $i1 + 1;

        $i1 = $i1 * $i0;

        $r5[$i1] = 1.0;

        $i0 = $i0 + 1;

        goto label2;

     label3:
        $i0 = lengthof $r2;

        $r6 = newarray (org.apache.commons.math3.ode.ParameterConfiguration)[$i0];

        r0.<org.apache.commons.math3.ode.JacobianMatrices: org.apache.commons.math3.ode.ParameterConfiguration[] selectedParameters> = $r6;

        $i0 = 0;

     label4:
        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label5;

        $r6 = r0.<org.apache.commons.math3.ode.JacobianMatrices: org.apache.commons.math3.ode.ParameterConfiguration[] selectedParameters>;

        $r7 = new org.apache.commons.math3.ode.ParameterConfiguration;

        $r3 = $r2[$i0];

        specialinvoke $r7.<org.apache.commons.math3.ode.ParameterConfiguration: void <init>(java.lang.String,double)>($r3, #NaN);

        $r6[$i0] = $r7;

        $i0 = $i0 + 1;

        goto label4;

     label5:
        $i0 = lengthof $r2;

        r0.<org.apache.commons.math3.ode.JacobianMatrices: int paramDim> = $i0;

        goto label1;

     label6:
        return;
    }
    static int access$200(org.apache.commons.math3.ode.JacobianMatrices)
    {
        org.apache.commons.math3.ode.JacobianMatrices $r0;
        int i0;

        $r0 := @parameter0: org.apache.commons.math3.ode.JacobianMatrices;

        i0 = $r0.<org.apache.commons.math3.ode.JacobianMatrices: int stateDim>;

        return i0;
    }
    static int access$300(org.apache.commons.math3.ode.JacobianMatrices)
    {
        org.apache.commons.math3.ode.JacobianMatrices $r0;
        int i0;

        $r0 := @parameter0: org.apache.commons.math3.ode.JacobianMatrices;

        i0 = $r0.<org.apache.commons.math3.ode.JacobianMatrices: int paramDim>;

        return i0;
    }
    static boolean access$400(org.apache.commons.math3.ode.JacobianMatrices)
    {
        org.apache.commons.math3.ode.JacobianMatrices $r0;
        boolean z0;

        $r0 := @parameter0: org.apache.commons.math3.ode.JacobianMatrices;

        z0 = $r0.<org.apache.commons.math3.ode.JacobianMatrices: boolean dirtyParameter>;

        return z0;
    }
    static boolean access$402(org.apache.commons.math3.ode.JacobianMatrices, boolean)
    {
        org.apache.commons.math3.ode.JacobianMatrices $r0;
        boolean $z0;

        $r0 := @parameter0: org.apache.commons.math3.ode.JacobianMatrices;

        $z0 := @parameter1: boolean;

        $r0.<org.apache.commons.math3.ode.JacobianMatrices: boolean dirtyParameter> = $z0;

        return $z0;
    }
    static org.apache.commons.math3.ode.MainStateJacobianProvider access$500(org.apache.commons.math3.ode.JacobianMatrices)
    {
        org.apache.commons.math3.ode.JacobianMatrices $r0;
        org.apache.commons.math3.ode.MainStateJacobianProvider r1;

        $r0 := @parameter0: org.apache.commons.math3.ode.JacobianMatrices;

        r1 = $r0.<org.apache.commons.math3.ode.JacobianMatrices: org.apache.commons.math3.ode.MainStateJacobianProvider jode>;

        return r1;
    }
    static org.apache.commons.math3.ode.ParameterizedODE access$600(org.apache.commons.math3.ode.JacobianMatrices)
    {
        org.apache.commons.math3.ode.JacobianMatrices $r0;
        org.apache.commons.math3.ode.ParameterizedODE r1;

        $r0 := @parameter0: org.apache.commons.math3.ode.JacobianMatrices;

        r1 = $r0.<org.apache.commons.math3.ode.JacobianMatrices: org.apache.commons.math3.ode.ParameterizedODE pode>;

        return r1;
    }
    static org.apache.commons.math3.ode.ParameterConfiguration[] access$700(org.apache.commons.math3.ode.JacobianMatrices)
    {
        org.apache.commons.math3.ode.JacobianMatrices $r0;
        org.apache.commons.math3.ode.ParameterConfiguration[] r1;

        $r0 := @parameter0: org.apache.commons.math3.ode.JacobianMatrices;

        r1 = $r0.<org.apache.commons.math3.ode.JacobianMatrices: org.apache.commons.math3.ode.ParameterConfiguration[] selectedParameters>;

        return r1;
    }
    static java.util.List access$800(org.apache.commons.math3.ode.JacobianMatrices)
    {
        org.apache.commons.math3.ode.JacobianMatrices $r0;
        java.util.List r1;

        $r0 := @parameter0: org.apache.commons.math3.ode.JacobianMatrices;

        r1 = $r0.<org.apache.commons.math3.ode.JacobianMatrices: java.util.List jacobianProviders>;

        return r1;
    }
    private void checkDimension(int, java.lang.Object) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.ode.JacobianMatrices r0;
        int $i0, $i1;
        java.lang.Object $r1;
        org.apache.commons.math3.exception.DimensionMismatchException $r2;

        r0 := @this: org.apache.commons.math3.ode.JacobianMatrices;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.Object;

        if $r1 != null goto label2;

        $i1 = 0;

     label1:
        if $i1 == $i0 goto label3;

        $r2 = new org.apache.commons.math3.exception.DimensionMismatchException;

        specialinvoke $r2.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i1, $i0);

        throw $r2;

     label2:
        $i1 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>($r1);

        goto label1;

     label3:
        return;
    }
    public void addParameterJacobianProvider(org.apache.commons.math3.ode.ParameterJacobianProvider)
    {
        org.apache.commons.math3.ode.JacobianMatrices r0;
        org.apache.commons.math3.ode.ParameterJacobianProvider $r1;
        java.util.List $r2;

        r0 := @this: org.apache.commons.math3.ode.JacobianMatrices;

        $r1 := @parameter0: org.apache.commons.math3.ode.ParameterJacobianProvider;

        $r2 = r0.<org.apache.commons.math3.ode.JacobianMatrices: java.util.List jacobianProviders>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r1);

        return;
    }
    public void getCurrentMainSetJacobian(double[][])
    {
        org.apache.commons.math3.ode.JacobianMatrices r0;
        double[][] $r1;
        int $i0, $i1, i2;
        double[] $r2, $r4;
        org.apache.commons.math3.ode.ExpandableStatefulODE $r3;

        r0 := @this: org.apache.commons.math3.ode.JacobianMatrices;

        $r1 := @parameter0: double[][];

        $r3 = r0.<org.apache.commons.math3.ode.JacobianMatrices: org.apache.commons.math3.ode.ExpandableStatefulODE efode>;

        $i1 = r0.<org.apache.commons.math3.ode.JacobianMatrices: int index>;

        $r2 = virtualinvoke $r3.<org.apache.commons.math3.ode.ExpandableStatefulODE: double[] getSecondaryState(int)>($i1);

        $i1 = 0;

        i2 = 0;

     label1:
        $i0 = r0.<org.apache.commons.math3.ode.JacobianMatrices: int stateDim>;

        if i2 >= $i0 goto label2;

        $r4 = $r1[i2];

        $i0 = r0.<org.apache.commons.math3.ode.JacobianMatrices: int stateDim>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i1, $r4, 0, $i0);

        $i0 = r0.<org.apache.commons.math3.ode.JacobianMatrices: int stateDim>;

        $i1 = $i1 + $i0;

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }
    public void getCurrentParameterJacobian(java.lang.String, double[])
    {
        org.apache.commons.math3.ode.JacobianMatrices r0;
        java.lang.String $r1, $r7;
        double[] $r2, $r6;
        org.apache.commons.math3.ode.ParameterConfiguration[] r3;
        int i0, $i1, i2, $i3;
        org.apache.commons.math3.ode.ParameterConfiguration r4;
        org.apache.commons.math3.ode.ExpandableStatefulODE $r5;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.ode.JacobianMatrices;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: double[];

        $r5 = r0.<org.apache.commons.math3.ode.JacobianMatrices: org.apache.commons.math3.ode.ExpandableStatefulODE efode>;

        $i1 = r0.<org.apache.commons.math3.ode.JacobianMatrices: int index>;

        $r6 = virtualinvoke $r5.<org.apache.commons.math3.ode.ExpandableStatefulODE: double[] getSecondaryState(int)>($i1);

        $i1 = r0.<org.apache.commons.math3.ode.JacobianMatrices: int stateDim>;

        i0 = r0.<org.apache.commons.math3.ode.JacobianMatrices: int stateDim>;

        $i1 = $i1 * i0;

        r3 = r0.<org.apache.commons.math3.ode.JacobianMatrices: org.apache.commons.math3.ode.ParameterConfiguration[] selectedParameters>;

        i0 = lengthof r3;

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        r4 = r3[i2];

        $r7 = virtualinvoke r4.<org.apache.commons.math3.ode.ParameterConfiguration: java.lang.String getParameterName()>();

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        i0 = r0.<org.apache.commons.math3.ode.JacobianMatrices: int stateDim>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, $i1, $r2, 0, i0);

        return;

     label2:
        $i3 = r0.<org.apache.commons.math3.ode.JacobianMatrices: int stateDim>;

        $i1 = $i1 + $i3;

        i2 = i2 + 1;

        goto label1;

     label3:
        return;
    }
    public void registerVariationalEquations(org.apache.commons.math3.ode.ExpandableStatefulODE) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.ode.JacobianMatrices$MismatchedEquations
    {
        org.apache.commons.math3.ode.JacobianMatrices r0;
        org.apache.commons.math3.ode.ExpandableStatefulODE $r1;
        org.apache.commons.math3.ode.MainStateJacobianProvider $r2;
        boolean $z0;
        org.apache.commons.math3.ode.JacobianMatrices$MainStateJacobianWrapper $r3;
        org.apache.commons.math3.ode.FirstOrderDifferentialEquations $r4, $r5;
        org.apache.commons.math3.ode.JacobianMatrices$MismatchedEquations $r6;
        org.apache.commons.math3.ode.JacobianMatrices$JacobiansSecondaryEquations $r7;
        int $i0;
        double[] $r8;

        r0 := @this: org.apache.commons.math3.ode.JacobianMatrices;

        $r1 := @parameter0: org.apache.commons.math3.ode.ExpandableStatefulODE;

        $r2 = r0.<org.apache.commons.math3.ode.JacobianMatrices: org.apache.commons.math3.ode.MainStateJacobianProvider jode>;

        $z0 = $r2 instanceof org.apache.commons.math3.ode.JacobianMatrices$MainStateJacobianWrapper;

        if $z0 == 0 goto label2;

        $r2 = r0.<org.apache.commons.math3.ode.JacobianMatrices: org.apache.commons.math3.ode.MainStateJacobianProvider jode>;

        $r3 = (org.apache.commons.math3.ode.JacobianMatrices$MainStateJacobianWrapper) $r2;

        $r4 = staticinvoke <org.apache.commons.math3.ode.JacobianMatrices$MainStateJacobianWrapper: org.apache.commons.math3.ode.FirstOrderDifferentialEquations access$000(org.apache.commons.math3.ode.JacobianMatrices$MainStateJacobianWrapper)>($r3);

     label1:
        $r5 = virtualinvoke $r1.<org.apache.commons.math3.ode.ExpandableStatefulODE: org.apache.commons.math3.ode.FirstOrderDifferentialEquations getPrimary()>();

        if $r5 == $r4 goto label3;

        $r6 = new org.apache.commons.math3.ode.JacobianMatrices$MismatchedEquations;

        specialinvoke $r6.<org.apache.commons.math3.ode.JacobianMatrices$MismatchedEquations: void <init>()>();

        throw $r6;

     label2:
        $r4 = r0.<org.apache.commons.math3.ode.JacobianMatrices: org.apache.commons.math3.ode.MainStateJacobianProvider jode>;

        goto label1;

     label3:
        r0.<org.apache.commons.math3.ode.JacobianMatrices: org.apache.commons.math3.ode.ExpandableStatefulODE efode> = $r1;

        $r1 = r0.<org.apache.commons.math3.ode.JacobianMatrices: org.apache.commons.math3.ode.ExpandableStatefulODE efode>;

        $r7 = new org.apache.commons.math3.ode.JacobianMatrices$JacobiansSecondaryEquations;

        specialinvoke $r7.<org.apache.commons.math3.ode.JacobianMatrices$JacobiansSecondaryEquations: void <init>(org.apache.commons.math3.ode.JacobianMatrices,org.apache.commons.math3.ode.JacobianMatrices$1)>(r0, null);

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.ode.ExpandableStatefulODE: int addSecondaryEquations(org.apache.commons.math3.ode.SecondaryEquations)>($r7);

        r0.<org.apache.commons.math3.ode.JacobianMatrices: int index> = $i0;

        $r1 = r0.<org.apache.commons.math3.ode.JacobianMatrices: org.apache.commons.math3.ode.ExpandableStatefulODE efode>;

        $i0 = r0.<org.apache.commons.math3.ode.JacobianMatrices: int index>;

        $r8 = r0.<org.apache.commons.math3.ode.JacobianMatrices: double[] matricesData>;

        virtualinvoke $r1.<org.apache.commons.math3.ode.ExpandableStatefulODE: void setSecondaryState(int,double[])>($i0, $r8);

        return;
    }
    public void setInitialMainStateJacobian(double[][]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.ode.JacobianMatrices r0;
        double[][] $r1;
        int i0, i1, i2, $i3;
        double[] r2, $r3;
        org.apache.commons.math3.ode.ExpandableStatefulODE $r4;

        r0 := @this: org.apache.commons.math3.ode.JacobianMatrices;

        $r1 := @parameter0: double[][];

        i0 = r0.<org.apache.commons.math3.ode.JacobianMatrices: int stateDim>;

        specialinvoke r0.<org.apache.commons.math3.ode.JacobianMatrices: void checkDimension(int,java.lang.Object)>(i0, $r1);

        i0 = r0.<org.apache.commons.math3.ode.JacobianMatrices: int stateDim>;

        r2 = $r1[0];

        specialinvoke r0.<org.apache.commons.math3.ode.JacobianMatrices: void checkDimension(int,java.lang.Object)>(i0, r2);

        i1 = 0;

        i0 = lengthof $r1;

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        r2 = $r1[i2];

        $r3 = r0.<org.apache.commons.math3.ode.JacobianMatrices: double[] matricesData>;

        $i3 = r0.<org.apache.commons.math3.ode.JacobianMatrices: int stateDim>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, $r3, i1, $i3);

        $i3 = r0.<org.apache.commons.math3.ode.JacobianMatrices: int stateDim>;

        i1 = i1 + $i3;

        i2 = i2 + 1;

        goto label1;

     label2:
        $r4 = r0.<org.apache.commons.math3.ode.JacobianMatrices: org.apache.commons.math3.ode.ExpandableStatefulODE efode>;

        if $r4 == null goto label3;

        $r4 = r0.<org.apache.commons.math3.ode.JacobianMatrices: org.apache.commons.math3.ode.ExpandableStatefulODE efode>;

        i0 = r0.<org.apache.commons.math3.ode.JacobianMatrices: int index>;

        r2 = r0.<org.apache.commons.math3.ode.JacobianMatrices: double[] matricesData>;

        virtualinvoke $r4.<org.apache.commons.math3.ode.ExpandableStatefulODE: void setSecondaryState(int,double[])>(i0, r2);

     label3:
        return;
    }
    public void setInitialParameterJacobian(java.lang.String, double[]) throws org.apache.commons.math3.ode.UnknownParameterException, org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.ode.JacobianMatrices r0;
        java.lang.String $r1, $r5;
        double[] $r2, $r6;
        org.apache.commons.math3.ode.ParameterConfiguration[] r3;
        int i0, $i1, i2, $i3;
        org.apache.commons.math3.ode.ParameterConfiguration r4;
        boolean $z0;
        org.apache.commons.math3.ode.ExpandableStatefulODE $r7;
        org.apache.commons.math3.ode.UnknownParameterException $r8;

        r0 := @this: org.apache.commons.math3.ode.JacobianMatrices;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: double[];

        $i1 = r0.<org.apache.commons.math3.ode.JacobianMatrices: int stateDim>;

        specialinvoke r0.<org.apache.commons.math3.ode.JacobianMatrices: void checkDimension(int,java.lang.Object)>($i1, $r2);

        $i1 = r0.<org.apache.commons.math3.ode.JacobianMatrices: int stateDim>;

        i0 = r0.<org.apache.commons.math3.ode.JacobianMatrices: int stateDim>;

        $i1 = $i1 * i0;

        r3 = r0.<org.apache.commons.math3.ode.JacobianMatrices: org.apache.commons.math3.ode.ParameterConfiguration[] selectedParameters>;

        i0 = lengthof r3;

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        r4 = r3[i2];

        $r5 = virtualinvoke r4.<org.apache.commons.math3.ode.ParameterConfiguration: java.lang.String getParameterName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label2;

        $r6 = r0.<org.apache.commons.math3.ode.JacobianMatrices: double[] matricesData>;

        i0 = r0.<org.apache.commons.math3.ode.JacobianMatrices: int stateDim>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r6, $i1, i0);

        $r7 = r0.<org.apache.commons.math3.ode.JacobianMatrices: org.apache.commons.math3.ode.ExpandableStatefulODE efode>;

        if $r7 == null goto label4;

        $r7 = r0.<org.apache.commons.math3.ode.JacobianMatrices: org.apache.commons.math3.ode.ExpandableStatefulODE efode>;

        $i1 = r0.<org.apache.commons.math3.ode.JacobianMatrices: int index>;

        $r2 = r0.<org.apache.commons.math3.ode.JacobianMatrices: double[] matricesData>;

        virtualinvoke $r7.<org.apache.commons.math3.ode.ExpandableStatefulODE: void setSecondaryState(int,double[])>($i1, $r2);

        return;

     label2:
        $i3 = r0.<org.apache.commons.math3.ode.JacobianMatrices: int stateDim>;

        $i1 = $i1 + $i3;

        i2 = i2 + 1;

        goto label1;

     label3:
        $r8 = new org.apache.commons.math3.ode.UnknownParameterException;

        specialinvoke $r8.<org.apache.commons.math3.ode.UnknownParameterException: void <init>(java.lang.String)>($r1);

        throw $r8;

     label4:
        return;
    }
    public void setParameterStep(java.lang.String, double) throws org.apache.commons.math3.ode.UnknownParameterException
    {
        org.apache.commons.math3.ode.JacobianMatrices r0;
        java.lang.String $r1, $r4;
        double $d0;
        org.apache.commons.math3.ode.ParameterConfiguration[] r2;
        int i0, i1;
        org.apache.commons.math3.ode.ParameterConfiguration r3;
        boolean $z0;
        org.apache.commons.math3.ode.UnknownParameterException $r5;

        r0 := @this: org.apache.commons.math3.ode.JacobianMatrices;

        $r1 := @parameter0: java.lang.String;

        $d0 := @parameter1: double;

        r2 = r0.<org.apache.commons.math3.ode.JacobianMatrices: org.apache.commons.math3.ode.ParameterConfiguration[] selectedParameters>;

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r3 = r2[i1];

        $r4 = virtualinvoke r3.<org.apache.commons.math3.ode.ParameterConfiguration: java.lang.String getParameterName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        virtualinvoke r3.<org.apache.commons.math3.ode.ParameterConfiguration: void setHP(double)>($d0);

        r0.<org.apache.commons.math3.ode.JacobianMatrices: boolean dirtyParameter> = 1;

        return;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r5 = new org.apache.commons.math3.ode.UnknownParameterException;

        specialinvoke $r5.<org.apache.commons.math3.ode.UnknownParameterException: void <init>(java.lang.String)>($r1);

        throw $r5;
    }
    public void setParameterizedODE(org.apache.commons.math3.ode.ParameterizedODE)
    {
        org.apache.commons.math3.ode.JacobianMatrices r0;
        org.apache.commons.math3.ode.ParameterizedODE $r1;

        r0 := @this: org.apache.commons.math3.ode.JacobianMatrices;

        $r1 := @parameter0: org.apache.commons.math3.ode.ParameterizedODE;

        r0.<org.apache.commons.math3.ode.JacobianMatrices: org.apache.commons.math3.ode.ParameterizedODE pode> = $r1;

        r0.<org.apache.commons.math3.ode.JacobianMatrices: boolean dirtyParameter> = 1;

        return;
    }
