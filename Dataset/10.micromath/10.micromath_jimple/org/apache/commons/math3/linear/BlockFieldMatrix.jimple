org.apache.commons.math3.linear.BlockFieldMatrix extends org.apache.commons.math3.linear.AbstractFieldMatrix implements java.io.Serializable
public static final int BLOCK_SIZE
private static final long serialVersionUID
private final int blockColumns
private final int blockRows
private final org.apache.commons.math3.FieldElement[][] blocks
private final int columns
private final int rows
    public void <init>(int, int, org.apache.commons.math3.FieldElement[][], boolean) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0;
        int $i0, $i1, i2, i3, $i4, $i5;
        org.apache.commons.math3.FieldElement[][] r1, $r4;
        boolean $z0;
        org.apache.commons.math3.Field $r2;
        java.lang.Object[][] $r3;
        org.apache.commons.math3.FieldElement[] $r5;
        org.apache.commons.math3.exception.DimensionMismatchException $r6;
        java.lang.Object $r7;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        r1 := @parameter2: org.apache.commons.math3.FieldElement[][];

        $z0 := @parameter3: boolean;

        $r2 = staticinvoke <org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.Field extractField(org.apache.commons.math3.FieldElement[][])>(r1);

        specialinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: void <init>(org.apache.commons.math3.Field,int,int)>($r2, $i0, $i1);

        r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows> = $i0;

        r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns> = $i1;

        $i0 = $i0 + 36;

        $i0 = $i0 + -1;

        $i0 = $i0 / 36;

        r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockRows> = $i0;

        $i0 = $i1 + 36;

        $i0 = $i0 + -1;

        $i0 = $i0 / 36;

        r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns> = $i0;

        if $z0 == 0 goto label4;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.Field getField()>();

        $i0 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockRows>;

        $i1 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        $i0 = $i0 * $i1;

        $r3 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[][] buildArray(org.apache.commons.math3.Field,int,int)>($r2, $i0, -1);

        $r4 = (org.apache.commons.math3.FieldElement[][]) $r3;

        r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks> = $r4;

     label1:
        $i1 = 0;

        i2 = 0;

     label2:
        $i0 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockRows>;

        if i2 >= $i0 goto label8;

        $i0 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockHeight(int)>(i2);

        i3 = 0;

     label3:
        $i4 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        if i3 >= $i4 goto label7;

        $r5 = r1[$i1];

        $i4 = lengthof $r5;

        $i5 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockWidth(int)>(i3);

        $i5 = $i5 * $i0;

        if $i4 == $i5 goto label5;

        $r6 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $r5 = r1[$i1];

        $i1 = lengthof $r5;

        i2 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockWidth(int)>(i3);

        $i0 = i2 * $i0;

        specialinvoke $r6.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i1, $i0);

        throw $r6;

     label4:
        r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks> = r1;

        goto label1;

     label5:
        if $z0 == 0 goto label6;

        $r4 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $r5 = r1[$i1];

        $r7 = virtualinvoke $r5.<java.lang.Object: java.lang.Object clone()>();

        $r5 = (org.apache.commons.math3.FieldElement[]) $r7;

        $r4[$i1] = $r5;

     label6:
        i3 = i3 + 1;

        $i1 = $i1 + 1;

        goto label3;

     label7:
        i2 = i2 + 1;

        goto label2;

     label8:
        return;
    }
    public void <init>(org.apache.commons.math3.Field, int, int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0;
        org.apache.commons.math3.Field r1;
        int $i0, $i1, $i2;
        org.apache.commons.math3.FieldElement[][] $r2;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.Field;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        specialinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: void <init>(org.apache.commons.math3.Field,int,int)>(r1, $i0, $i1);

        r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows> = $i0;

        r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns> = $i1;

        $i2 = $i0 + 36;

        $i2 = $i2 + -1;

        $i2 = $i2 / 36;

        r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockRows> = $i2;

        $i2 = $i1 + 36;

        $i2 = $i2 + -1;

        $i2 = $i2 / 36;

        r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns> = $i2;

        $r2 = staticinvoke <org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] createBlocksLayout(org.apache.commons.math3.Field,int,int)>(r1, $i0, $i1);

        r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks> = $r2;

        return;
    }
    public void <init>(org.apache.commons.math3.FieldElement[][]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0;
        org.apache.commons.math3.FieldElement[][] r1;
        int $i0, $i1;
        org.apache.commons.math3.FieldElement[] $r2;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.FieldElement[][];

        $i0 = lengthof r1;

        $r2 = r1[0];

        $i1 = lengthof $r2;

        r1 = staticinvoke <org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] toBlocksLayout(org.apache.commons.math3.FieldElement[][])>(r1);

        specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void <init>(int,int,org.apache.commons.math3.FieldElement[][],boolean)>($i0, $i1, r1, 0);

        return;
    }
    private int blockHeight(int)
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        $i0 := @parameter0: int;

        $i1 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockRows>;

        $i1 = $i1 + -1;

        if $i0 != $i1 goto label1;

        $i1 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        $i0 = $i0 * 36;

        $i0 = $i1 - $i0;

        return $i0;

     label1:
        return 36;
    }
    private int blockWidth(int)
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        $i0 := @parameter0: int;

        $i1 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        $i1 = $i1 + -1;

        if $i0 != $i1 goto label1;

        $i1 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        $i0 = $i0 * 36;

        $i0 = $i1 - $i0;

        return $i0;

     label1:
        return 36;
    }
    private void copyBlockPart(org.apache.commons.math3.FieldElement[], int, int, int, int, int, org.apache.commons.math3.FieldElement[], int, int, int)
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0;
        org.apache.commons.math3.FieldElement[] r1, r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.FieldElement[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        $i4 := @parameter5: int;

        r2 := @parameter6: org.apache.commons.math3.FieldElement[];

        $i5 := @parameter7: int;

        $i6 := @parameter8: int;

        $i7 := @parameter9: int;

        $i4 = $i4 - $i3;

        $i8 = $i1 * $i0;

        $i3 = $i8 + $i3;

        $i6 = $i6 * $i5;

        $i6 = $i6 + $i7;

     label1:
        if $i1 >= $i2 goto label2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, $i3, r2, $i6, $i4);

        $i3 = $i3 + $i0;

        $i6 = $i6 + $i5;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return;
    }
    public static org.apache.commons.math3.FieldElement[][] createBlocksLayout(org.apache.commons.math3.Field, int, int)
    {
        org.apache.commons.math3.Field r0;
        int $i0, $i1, i2, i3, i4, i5, $i6, i7, $i8, $i9;
        java.lang.Object[][] $r1;
        org.apache.commons.math3.FieldElement[][] r2;
        java.lang.Object[] $r3;
        org.apache.commons.math3.FieldElement[] $r4;

        r0 := @parameter0: org.apache.commons.math3.Field;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        i3 = $i0 + 36;

        i3 = i3 + -1;

        i3 = i3 / 36;

        i2 = $i1 + 36;

        i2 = i2 + -1;

        i2 = i2 / 36;

        $i6 = i3 * i2;

        $r1 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[][] buildArray(org.apache.commons.math3.Field,int,int)>(r0, $i6, -1);

        r2 = (org.apache.commons.math3.FieldElement[][]) $r1;

        $i6 = 0;

        i7 = 0;

     label1:
        if i7 >= i3 goto label4;

        i4 = i7 * 36;

        $i8 = i4 + 36;

        $i8 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i8, $i0);

        i4 = $i8 - i4;

        $i8 = 0;

     label2:
        if $i8 >= i2 goto label3;

        i5 = $i8 * 36;

        $i9 = i5 + 36;

        $i9 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i9, $i1);

        i5 = $i9 - i5;

        i5 = i4 * i5;

        $r3 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[] buildArray(org.apache.commons.math3.Field,int)>(r0, i5);

        $r4 = (org.apache.commons.math3.FieldElement[]) $r3;

        r2[$i6] = $r4;

        $i6 = $i6 + 1;

        $i8 = $i8 + 1;

        goto label2;

     label3:
        i7 = i7 + 1;

        goto label1;

     label4:
        return r2;
    }
    public static org.apache.commons.math3.FieldElement[][] toBlocksLayout(org.apache.commons.math3.FieldElement[][]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.FieldElement[][] r0, r5;
        int i0, i1, i2, i3, i4, i5, i6, i7, $i8, i9, $i10, i11, $i12, i13;
        org.apache.commons.math3.FieldElement[] $r1, $r7;
        org.apache.commons.math3.exception.DimensionMismatchException $r2;
        org.apache.commons.math3.Field $r3;
        java.lang.Object[][] $r4;
        java.lang.Object[] $r6;

        r0 := @parameter0: org.apache.commons.math3.FieldElement[][];

        $i8 = lengthof r0;

        $r1 = r0[0];

        i2 = lengthof $r1;

        i1 = $i8 + 36;

        i1 = i1 + -1;

        i1 = i1 / 36;

        i0 = i2 + 36;

        i0 = i0 + -1;

        i0 = i0 / 36;

        i6 = 0;

     label1:
        i5 = lengthof r0;

        if i6 >= i5 goto label3;

        $r1 = r0[i6];

        i5 = lengthof $r1;

        if i5 == i2 goto label2;

        $r2 = new org.apache.commons.math3.exception.DimensionMismatchException;

        specialinvoke $r2.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>(i2, i5);

        throw $r2;

     label2:
        i6 = i6 + 1;

        goto label1;

     label3:
        $r3 = staticinvoke <org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.Field extractField(org.apache.commons.math3.FieldElement[][])>(r0);

        i6 = i1 * i0;

        $r4 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[][] buildArray(org.apache.commons.math3.Field,int,int)>($r3, i6, -1);

        r5 = (org.apache.commons.math3.FieldElement[][]) $r4;

        i5 = 0;

        i9 = 0;

     label4:
        if i9 >= i1 goto label9;

        i6 = i9 * 36;

        i3 = i6 + 36;

        $i10 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>(i3, $i8);

        i3 = $i10 - i6;

        i11 = 0;

     label5:
        if i11 >= i0 goto label8;

        i7 = i11 * 36;

        i4 = i7 + 36;

        i4 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>(i4, i2);

        i4 = i4 - i7;

        $i12 = i3 * i4;

        $r6 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[] buildArray(org.apache.commons.math3.Field,int)>($r3, $i12);

        $r1 = (org.apache.commons.math3.FieldElement[]) $r6;

        r5[i5] = $r1;

        $i12 = 0;

        i13 = i6;

     label6:
        if i13 >= $i10 goto label7;

        $r7 = r0[i13];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, i7, $r1, $i12, i4);

        $i12 = $i12 + i4;

        i13 = i13 + 1;

        goto label6;

     label7:
        i5 = i5 + 1;

        i11 = i11 + 1;

        goto label5;

     label8:
        i9 = i9 + 1;

        goto label4;

     label9:
        return r5;
    }
    public org.apache.commons.math3.linear.BlockFieldMatrix add(org.apache.commons.math3.linear.BlockFieldMatrix) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0, r1, r3;
        org.apache.commons.math3.FieldElement[] r2, r4, r5;
        int $i0, $i1, $i2;
        org.apache.commons.math3.Field $r6;
        org.apache.commons.math3.FieldElement[][] $r7;
        org.apache.commons.math3.FieldElement $r8, $r9;
        java.lang.Object $r10;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.BlockFieldMatrix;

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void checkAdditionCompatible(org.apache.commons.math3.linear.FieldMatrix)>(r1);

        r3 = new org.apache.commons.math3.linear.BlockFieldMatrix;

        $r6 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.Field getField()>();

        $i1 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        $i0 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        specialinvoke r3.<org.apache.commons.math3.linear.BlockFieldMatrix: void <init>(org.apache.commons.math3.Field,int,int)>($r6, $i1, $i0);

        $i0 = 0;

     label1:
        $r7 = r3.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $i1 = lengthof $r7;

        if $i0 >= $i1 goto label4;

        $r7 = r3.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        r4 = $r7[$i0];

        $r7 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        r5 = $r7[$i0];

        $r7 = r1.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        r2 = $r7[$i0];

        $i1 = 0;

     label2:
        $i2 = lengthof r4;

        if $i1 >= $i2 goto label3;

        $r8 = r5[$i1];

        $r9 = r2[$i1];

        $r10 = interfaceinvoke $r8.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>($r9);

        $r8 = (org.apache.commons.math3.FieldElement) $r10;

        r4[$i1] = $r8;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $i0 = $i0 + 1;

        goto label1;

     label4:
        return r3;
    }
    public org.apache.commons.math3.linear.FieldMatrix add(org.apache.commons.math3.linear.FieldMatrix) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0, $r5;
        org.apache.commons.math3.linear.FieldMatrix r1;
        java.lang.ClassCastException r2;
        org.apache.commons.math3.FieldElement[] r3, r4;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, i8;
        org.apache.commons.math3.Field $r6;
        org.apache.commons.math3.FieldElement[][] $r7;
        org.apache.commons.math3.FieldElement $r8, $r9;
        java.lang.Object $r10;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldMatrix;

     label01:
        $r5 = (org.apache.commons.math3.linear.BlockFieldMatrix) r1;

        $r5 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.linear.BlockFieldMatrix add(org.apache.commons.math3.linear.BlockFieldMatrix)>($r5);

     label02:
        return $r5;

     label03:
        r2 := @caughtexception;

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void checkAdditionCompatible(org.apache.commons.math3.linear.FieldMatrix)>(r1);

        $r5 = new org.apache.commons.math3.linear.BlockFieldMatrix;

        $r6 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.Field getField()>();

        $i2 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        $i3 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        specialinvoke $r5.<org.apache.commons.math3.linear.BlockFieldMatrix: void <init>(org.apache.commons.math3.Field,int,int)>($r6, $i2, $i3);

        $i2 = 0;

        $i3 = 0;

     label04:
        $i4 = $r5.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockRows>;

        if $i3 >= $i4 goto label11;

        $i4 = 0;

     label05:
        i0 = $r5.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        if $i4 >= i0 goto label10;

        $r7 = $r5.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        r3 = $r7[$i2];

        $r7 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        r4 = $r7[$i2];

        i0 = $i3 * 36;

        i1 = i0 + 36;

        $i5 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        $i5 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>(i1, $i5);

        i1 = $i4 * 36;

        $i6 = i1 + 36;

        $i7 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        $i6 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i6, $i7);

        $i7 = 0;

     label06:
        if i0 >= $i5 goto label09;

        i8 = i1;

     label07:
        if i8 >= $i6 goto label08;

        $r8 = r4[$i7];

        $r9 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrix: org.apache.commons.math3.FieldElement getEntry(int,int)>(i0, i8);

        $r10 = interfaceinvoke $r8.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>($r9);

        $r8 = (org.apache.commons.math3.FieldElement) $r10;

        r3[$i7] = $r8;

        $i7 = $i7 + 1;

        i8 = i8 + 1;

        goto label07;

     label08:
        i0 = i0 + 1;

        goto label06;

     label09:
        $i2 = $i2 + 1;

        $i4 = $i4 + 1;

        goto label05;

     label10:
        $i3 = $i3 + 1;

        goto label04;

     label11:
        return $r5;

        catch java.lang.ClassCastException from label01 to label02 with label03;
    }
    public void addToEntry(int, int, org.apache.commons.math3.FieldElement) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0;
        int $i0, $i1, i2, i3, $i4;
        org.apache.commons.math3.FieldElement r1, $r4;
        org.apache.commons.math3.FieldElement[] r2;
        org.apache.commons.math3.FieldElement[][] $r3;
        java.lang.Object $r5;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        r1 := @parameter2: org.apache.commons.math3.FieldElement;

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void checkRowIndex(int)>($i0);

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void checkColumnIndex(int)>($i1);

        i2 = $i0 / 36;

        i3 = $i1 / 36;

        $i4 = i2 * 36;

        $i0 = $i0 - $i4;

        $i4 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockWidth(int)>(i3);

        $i0 = $i0 * $i4;

        $i4 = i3 * 36;

        $i1 = $i1 - $i4;

        $i0 = $i0 + $i1;

        $r3 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $i1 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        $i1 = $i1 * i2;

        $i1 = $i1 + i3;

        r2 = $r3[$i1];

        $r4 = r2[$i0];

        $r5 = interfaceinvoke $r4.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>(r1);

        r1 = (org.apache.commons.math3.FieldElement) $r5;

        r2[$i0] = r1;

        return;
    }
    public org.apache.commons.math3.linear.FieldMatrix copy()
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0, r1;
        org.apache.commons.math3.Field $r2;
        int $i0, $i1;
        org.apache.commons.math3.FieldElement[][] $r3;
        org.apache.commons.math3.FieldElement[] $r4, $r5, $r6;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        r1 = new org.apache.commons.math3.linear.BlockFieldMatrix;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.Field getField()>();

        $i0 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        $i1 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        specialinvoke r1.<org.apache.commons.math3.linear.BlockFieldMatrix: void <init>(org.apache.commons.math3.Field,int,int)>($r2, $i0, $i1);

        $i0 = 0;

     label1:
        $r3 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $i1 = lengthof $r3;

        if $i0 >= $i1 goto label2;

        $r3 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $r4 = $r3[$i0];

        $r3 = r1.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $r5 = $r3[$i0];

        $r3 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $r6 = $r3[$i0];

        $i1 = lengthof $r6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r5, 0, $i1);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return r1;
    }
    public org.apache.commons.math3.linear.FieldMatrix createMatrix(int, int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0, $r1;
        int $i0, $i1;
        org.apache.commons.math3.Field $r2;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = new org.apache.commons.math3.linear.BlockFieldMatrix;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.Field getField()>();

        specialinvoke $r1.<org.apache.commons.math3.linear.BlockFieldMatrix: void <init>(org.apache.commons.math3.Field,int,int)>($r2, $i0, $i1);

        return $r1;
    }
    public org.apache.commons.math3.FieldElement[] getColumn(int) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0;
        int $i0, i1, $i2, i3, i4, $i5, $i6, $i7;
        org.apache.commons.math3.FieldElement[] r1, r4;
        org.apache.commons.math3.Field $r2;
        java.lang.Object[] $r3;
        org.apache.commons.math3.FieldElement[][] $r5;
        org.apache.commons.math3.FieldElement $r6;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        $i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void checkColumnIndex(int)>($i0);

        $r2 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.Field getField()>();

        i1 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        $r3 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[] buildArray(org.apache.commons.math3.Field,int)>($r2, i1);

        r4 = (org.apache.commons.math3.FieldElement[]) $r3;

        i1 = $i0 / 36;

        $i2 = i1 * 36;

        $i0 = $i0 - $i2;

        $i2 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockWidth(int)>(i1);

        i3 = 0;

        i4 = 0;

     label1:
        $i5 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockRows>;

        if i4 >= $i5 goto label4;

        $i5 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockHeight(int)>(i4);

        $r5 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $i6 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        $i6 = $i6 * i4;

        $i6 = $i6 + i1;

        r1 = $r5[$i6];

        $i6 = 0;

     label2:
        if $i6 >= $i5 goto label3;

        $i7 = $i6 * $i2;

        $i7 = $i7 + $i0;

        $r6 = r1[$i7];

        r4[i3] = $r6;

        $i6 = $i6 + 1;

        i3 = i3 + 1;

        goto label2;

     label3:
        i4 = i4 + 1;

        goto label1;

     label4:
        return r4;
    }
    public int getColumnDimension()
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0;
        int i0;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        i0 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        return i0;
    }
    public org.apache.commons.math3.linear.FieldMatrix getColumnMatrix(int) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0, r2;
        int $i0, i1, i2, $i3, i4, i5, i6, $i7, $i8, $i9;
        org.apache.commons.math3.FieldElement[] r1, r5;
        org.apache.commons.math3.Field $r3;
        org.apache.commons.math3.FieldElement[][] $r4;
        org.apache.commons.math3.FieldElement $r6;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        $i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void checkColumnIndex(int)>($i0);

        r2 = new org.apache.commons.math3.linear.BlockFieldMatrix;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.Field getField()>();

        i1 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        specialinvoke r2.<org.apache.commons.math3.linear.BlockFieldMatrix: void <init>(org.apache.commons.math3.Field,int,int)>($r3, i1, 1);

        i1 = $i0 / 36;

        $i3 = i1 * 36;

        $i0 = $i0 - $i3;

        $i3 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockWidth(int)>(i1);

        i4 = 0;

        i5 = 0;

        $r4 = r2.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        r5 = $r4[0];

        i6 = 0;

     label1:
        $i7 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockRows>;

        if i6 >= $i7 goto label5;

        $i7 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockHeight(int)>(i6);

        $r4 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $i8 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        $i8 = $i8 * i6;

        $i8 = $i8 + i1;

        r1 = $r4[$i8];

        $i8 = 0;

     label2:
        if $i8 >= $i7 goto label4;

        i2 = lengthof r5;

        if i5 < i2 goto label3;

        $r4 = r2.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        i4 = i4 + 1;

        r5 = $r4[i4];

        i5 = 0;

     label3:
        $i9 = $i8 * $i3;

        $i9 = $i9 + $i0;

        $r6 = r1[$i9];

        r5[i5] = $r6;

        $i8 = $i8 + 1;

        i5 = i5 + 1;

        goto label2;

     label4:
        i6 = i6 + 1;

        goto label1;

     label5:
        return r2;
    }
    public org.apache.commons.math3.linear.FieldVector getColumnVector(int) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0;
        int $i0, i1, $i2, i3, i4, $i5, $i6, $i7;
        org.apache.commons.math3.FieldElement[] r1, r4;
        org.apache.commons.math3.Field $r2;
        java.lang.Object[] $r3;
        org.apache.commons.math3.FieldElement[][] $r5;
        org.apache.commons.math3.FieldElement $r6;
        org.apache.commons.math3.linear.ArrayFieldVector $r7;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        $i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void checkColumnIndex(int)>($i0);

        $r2 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.Field getField()>();

        i1 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        $r3 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[] buildArray(org.apache.commons.math3.Field,int)>($r2, i1);

        r4 = (org.apache.commons.math3.FieldElement[]) $r3;

        i1 = $i0 / 36;

        $i2 = i1 * 36;

        $i0 = $i0 - $i2;

        $i2 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockWidth(int)>(i1);

        i3 = 0;

        i4 = 0;

     label1:
        $i5 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockRows>;

        if i4 >= $i5 goto label4;

        $i5 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockHeight(int)>(i4);

        $r5 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $i6 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        $i6 = $i6 * i4;

        $i6 = $i6 + i1;

        r1 = $r5[$i6];

        $i6 = 0;

     label2:
        if $i6 >= $i5 goto label3;

        $i7 = $i6 * $i2;

        $i7 = $i7 + $i0;

        $r6 = r1[$i7];

        r4[i3] = $r6;

        $i6 = $i6 + 1;

        i3 = i3 + 1;

        goto label2;

     label3:
        i4 = i4 + 1;

        goto label1;

     label4:
        $r7 = new org.apache.commons.math3.linear.ArrayFieldVector;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.Field getField()>();

        specialinvoke $r7.<org.apache.commons.math3.linear.ArrayFieldVector: void <init>(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[],boolean)>($r2, r4, 0);

        return $r7;
    }
    public org.apache.commons.math3.FieldElement[][] getData()
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0;
        int i0, i1, i2, $i3, $i4, $i5, i6, $i7, i8, i9;
        org.apache.commons.math3.FieldElement[] r1, $r6;
        org.apache.commons.math3.Field $r2;
        java.lang.Object[][] $r3;
        org.apache.commons.math3.FieldElement[][] r4, $r5;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.Field getField()>();

        i1 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int getRowDimension()>();

        $i3 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int getColumnDimension()>();

        $r3 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[][] buildArray(org.apache.commons.math3.Field,int,int)>($r2, i1, $i3);

        r4 = (org.apache.commons.math3.FieldElement[][]) $r3;

        i1 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        $i3 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        $i3 = $i3 + -1;

        $i3 = $i3 * 36;

        i1 = i1 - $i3;

        $i3 = 0;

     label1:
        $i4 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockRows>;

        if $i3 >= $i4 goto label6;

        i2 = $i3 * 36;

        $i4 = i2 + 36;

        $i5 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        $i4 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i4, $i5);

        $i5 = 0;

        i6 = 0;

     label2:
        if i2 >= $i4 goto label5;

        r1 = r4[i2];

        $i7 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        $i7 = $i3 * $i7;

        i8 = 0;

        i9 = 0;

     label3:
        i0 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        i0 = i0 + -1;

        if i9 >= i0 goto label4;

        $r5 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $r6 = $r5[$i7];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, $i5, r1, i8, 36);

        i8 = i8 + 36;

        i9 = i9 + 1;

        $i7 = $i7 + 1;

        goto label3;

     label4:
        $r5 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $r6 = $r5[$i7];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, i6, r1, i8, i1);

        $i5 = $i5 + 36;

        i6 = i6 + i1;

        i2 = i2 + 1;

        goto label2;

     label5:
        $i3 = $i3 + 1;

        goto label1;

     label6:
        return r4;
    }
    public org.apache.commons.math3.FieldElement getEntry(int, int) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0;
        int $i0, $i1, i2, i3, $i4;
        org.apache.commons.math3.FieldElement[][] $r1;
        org.apache.commons.math3.FieldElement[] $r2;
        org.apache.commons.math3.FieldElement $r3;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void checkRowIndex(int)>($i0);

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void checkColumnIndex(int)>($i1);

        i2 = $i0 / 36;

        i3 = $i1 / 36;

        $i4 = i2 * 36;

        $i4 = $i0 - $i4;

        $i0 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockWidth(int)>(i3);

        $i0 = $i4 * $i0;

        $i4 = i3 * 36;

        $i1 = $i1 - $i4;

        $i0 = $i0 + $i1;

        $r1 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $i1 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        $i1 = $i1 * i2;

        $i1 = $i1 + i3;

        $r2 = $r1[$i1];

        $r3 = $r2[$i0];

        return $r3;
    }
    public org.apache.commons.math3.FieldElement[] getRow(int) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0;
        int $i0, i1, $i2, i3, $i4, $i5;
        org.apache.commons.math3.FieldElement[] r1, r4;
        org.apache.commons.math3.Field $r2;
        java.lang.Object[] $r3;
        org.apache.commons.math3.FieldElement[][] $r5;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        $i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void checkRowIndex(int)>($i0);

        $r2 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.Field getField()>();

        i1 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        $r3 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[] buildArray(org.apache.commons.math3.Field,int)>($r2, i1);

        r4 = (org.apache.commons.math3.FieldElement[]) $r3;

        i1 = $i0 / 36;

        $i2 = i1 * 36;

        $i0 = $i0 - $i2;

        $i2 = 0;

        i3 = 0;

     label1:
        $i4 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        if i3 >= $i4 goto label2;

        $i4 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockWidth(int)>(i3);

        $r5 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $i5 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        $i5 = $i5 * i1;

        $i5 = $i5 + i3;

        r1 = $r5[$i5];

        $i5 = $i0 * $i4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, $i5, r4, $i2, $i4);

        $i2 = $i2 + $i4;

        i3 = i3 + 1;

        goto label1;

     label2:
        return r4;
    }
    public int getRowDimension()
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0;
        int i0;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        i0 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        return i0;
    }
    public org.apache.commons.math3.linear.FieldMatrix getRowMatrix(int) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0, r2;
        int $i0, i1, i2, $i3, i4, i5, $i6, $i7;
        org.apache.commons.math3.FieldElement[] r1, r5;
        org.apache.commons.math3.Field $r3;
        org.apache.commons.math3.FieldElement[][] $r4;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        $i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void checkRowIndex(int)>($i0);

        r2 = new org.apache.commons.math3.linear.BlockFieldMatrix;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.Field getField()>();

        i2 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        specialinvoke r2.<org.apache.commons.math3.linear.BlockFieldMatrix: void <init>(org.apache.commons.math3.Field,int,int)>($r3, 1, i2);

        i2 = $i0 / 36;

        $i3 = i2 * 36;

        $i0 = $i0 - $i3;

        $i3 = 0;

        i4 = 0;

        $r4 = r2.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        r5 = $r4[0];

        i5 = 0;

     label1:
        $i6 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        if i5 >= $i6 goto label4;

        $i6 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockWidth(int)>(i5);

        $r4 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        i1 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        i1 = i1 * i2;

        i1 = i1 + i5;

        r1 = $r4[i1];

        i1 = lengthof r5;

        i1 = i1 - i4;

        if $i6 <= i1 goto label3;

        $i7 = $i0 * $i6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, $i7, r5, i4, i1);

        $r4 = r2.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $i3 = $i3 + 1;

        r5 = $r4[$i3];

        i4 = $i0 * $i6;

        $i7 = $i6 - i1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i4, r5, 0, $i7);

        i4 = $i6 - i1;

     label2:
        i5 = i5 + 1;

        goto label1;

     label3:
        i1 = $i0 * $i6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i1, r5, i4, $i6);

        i4 = i4 + $i6;

        goto label2;

     label4:
        return r2;
    }
    public org.apache.commons.math3.linear.FieldVector getRowVector(int) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0;
        int $i0, i1, $i2, i3, $i4, $i5;
        org.apache.commons.math3.FieldElement[] r1, r4;
        org.apache.commons.math3.Field $r2;
        java.lang.Object[] $r3;
        org.apache.commons.math3.FieldElement[][] $r5;
        org.apache.commons.math3.linear.ArrayFieldVector $r6;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        $i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void checkRowIndex(int)>($i0);

        $r2 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.Field getField()>();

        i1 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        $r3 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[] buildArray(org.apache.commons.math3.Field,int)>($r2, i1);

        r4 = (org.apache.commons.math3.FieldElement[]) $r3;

        i1 = $i0 / 36;

        $i2 = i1 * 36;

        $i0 = $i0 - $i2;

        $i2 = 0;

        i3 = 0;

     label1:
        $i4 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        if i3 >= $i4 goto label2;

        $i4 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockWidth(int)>(i3);

        $r5 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $i5 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        $i5 = $i5 * i1;

        $i5 = $i5 + i3;

        r1 = $r5[$i5];

        $i5 = $i0 * $i4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, $i5, r4, $i2, $i4);

        $i2 = $i2 + $i4;

        i3 = i3 + 1;

        goto label1;

     label2:
        $r6 = new org.apache.commons.math3.linear.ArrayFieldVector;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.Field getField()>();

        specialinvoke $r6.<org.apache.commons.math3.linear.ArrayFieldVector: void <init>(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[],boolean)>($r2, r4, 0);

        return $r6;
    }
    public org.apache.commons.math3.linear.FieldMatrix getSubMatrix(int, int, int, int) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0, r2;
        int $i0, $i1, $i2, $i3, i4, i5, i6, i7, i8, $i9, i10, i11, $i12, $i13, $i14;
        org.apache.commons.math3.FieldElement[] r1, $r5;
        org.apache.commons.math3.Field $r3;
        org.apache.commons.math3.FieldElement[][] $r4;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void checkSubMatrixIndex(int,int,int,int)>($i0, $i1, $i2, $i3);

        r2 = new org.apache.commons.math3.linear.BlockFieldMatrix;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.Field getField()>();

        $i1 = $i1 - $i0;

        $i1 = $i1 + 1;

        $i3 = $i3 - $i2;

        $i3 = $i3 + 1;

        specialinvoke r2.<org.apache.commons.math3.linear.BlockFieldMatrix: void <init>(org.apache.commons.math3.Field,int,int)>($r3, $i1, $i3);

        $i3 = $i0 / 36;

        $i0 = $i0 % 36;

        $i1 = $i2 / 36;

        $i2 = $i2 % 36;

        i8 = 0;

     label1:
        $i9 = r2.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockRows>;

        if i8 >= $i9 goto label8;

        $i9 = specialinvoke r2.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockHeight(int)>(i8);

        i10 = $i1;

        i11 = 0;

     label2:
        $i12 = r2.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        if i11 >= $i12 goto label7;

        $i12 = specialinvoke r2.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockWidth(int)>(i11);

        i7 = r2.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        i7 = i7 * i8;

        i7 = i7 + i11;

        $r4 = r2.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        r1 = $r4[i7];

        i7 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        i7 = i7 * $i3;

        i6 = i7 + i10;

        i7 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockWidth(int)>(i10);

        i4 = $i9 + $i0;

        i5 = i4 + -36;

        i4 = $i12 + $i2;

        i4 = i4 + -36;

        if i5 <= 0 goto label5;

        if i4 <= 0 goto label4;

        $i13 = i10 + 1;

        $i13 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockWidth(int)>($i13);

        $r4 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $r5 = $r4[i6];

        specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void copyBlockPart(org.apache.commons.math3.FieldElement[],int,int,int,int,int,org.apache.commons.math3.FieldElement[],int,int,int)>($r5, i7, $i0, 36, $i2, 36, r1, $i12, 0, 0);

        $r4 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $i14 = i6 + 1;

        $r5 = $r4[$i14];

        $i14 = $i12 - i4;

        specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void copyBlockPart(org.apache.commons.math3.FieldElement[],int,int,int,int,int,org.apache.commons.math3.FieldElement[],int,int,int)>($r5, $i13, $i0, 36, 0, i4, r1, $i12, 0, $i14);

        $r4 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $i14 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        $i14 = $i14 + i6;

        $r5 = $r4[$i14];

        $i14 = $i9 - i5;

        specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void copyBlockPart(org.apache.commons.math3.FieldElement[],int,int,int,int,int,org.apache.commons.math3.FieldElement[],int,int,int)>($r5, i7, 0, i5, $i2, 36, r1, $i12, $i14, 0);

        $r4 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        i7 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        i7 = i7 + i6;

        i7 = i7 + 1;

        $r5 = $r4[i7];

        i7 = $i9 - i5;

        i6 = $i12 - i4;

        specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void copyBlockPart(org.apache.commons.math3.FieldElement[],int,int,int,int,int,org.apache.commons.math3.FieldElement[],int,int,int)>($r5, $i13, 0, i5, 0, i4, r1, $i12, i7, i6);

     label3:
        i10 = i10 + 1;

        i11 = i11 + 1;

        goto label2;

     label4:
        $r4 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $r5 = $r4[i6];

        i4 = $i12 + $i2;

        specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void copyBlockPart(org.apache.commons.math3.FieldElement[],int,int,int,int,int,org.apache.commons.math3.FieldElement[],int,int,int)>($r5, i7, $i0, 36, $i2, i4, r1, $i12, 0, 0);

        $r4 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        i4 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        i4 = i4 + i6;

        $r5 = $r4[i4];

        i4 = $i12 + $i2;

        i6 = $i9 - i5;

        specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void copyBlockPart(org.apache.commons.math3.FieldElement[],int,int,int,int,int,org.apache.commons.math3.FieldElement[],int,int,int)>($r5, i7, 0, i5, $i2, i4, r1, $i12, i6, 0);

        goto label3;

     label5:
        if i4 <= 0 goto label6;

        i5 = i10 + 1;

        i5 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockWidth(int)>(i5);

        $r4 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $r5 = $r4[i6];

        $i13 = $i9 + $i0;

        specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void copyBlockPart(org.apache.commons.math3.FieldElement[],int,int,int,int,int,org.apache.commons.math3.FieldElement[],int,int,int)>($r5, i7, $i0, $i13, $i2, 36, r1, $i12, 0, 0);

        $r4 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        i7 = i6 + 1;

        $r5 = $r4[i7];

        i7 = $i9 + $i0;

        i6 = $i12 - i4;

        specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void copyBlockPart(org.apache.commons.math3.FieldElement[],int,int,int,int,int,org.apache.commons.math3.FieldElement[],int,int,int)>($r5, i5, $i0, i7, 0, i4, r1, $i12, 0, i6);

        goto label3;

     label6:
        $r4 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $r5 = $r4[i6];

        i4 = $i9 + $i0;

        i5 = $i12 + $i2;

        specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void copyBlockPart(org.apache.commons.math3.FieldElement[],int,int,int,int,int,org.apache.commons.math3.FieldElement[],int,int,int)>($r5, i7, $i0, i4, $i2, i5, r1, $i12, 0, 0);

        goto label3;

     label7:
        $i3 = $i3 + 1;

        i8 = i8 + 1;

        goto label1;

     label8:
        return r2;
    }
    public org.apache.commons.math3.linear.BlockFieldMatrix multiply(org.apache.commons.math3.linear.BlockFieldMatrix) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0, r1, r3;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, i11, $i12, $i13, i14, i15, i16, i17, $i18;
        org.apache.commons.math3.FieldElement[] r2, r4, r5;
        org.apache.commons.math3.Field $r6;
        java.lang.Object $r7;
        org.apache.commons.math3.FieldElement r8, r10, $r11, $r12;
        org.apache.commons.math3.FieldElement[][] $r9;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.BlockFieldMatrix;

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void checkMultiplicationCompatible(org.apache.commons.math3.linear.FieldMatrix)>(r1);

        r3 = new org.apache.commons.math3.linear.BlockFieldMatrix;

        $r6 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.Field getField()>();

        $i6 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        $i7 = r1.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        specialinvoke r3.<org.apache.commons.math3.linear.BlockFieldMatrix: void <init>(org.apache.commons.math3.Field,int,int)>($r6, $i6, $i7);

        $r6 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.Field getField()>();

        $r7 = interfaceinvoke $r6.<org.apache.commons.math3.Field: java.lang.Object getZero()>();

        r8 = (org.apache.commons.math3.FieldElement) $r7;

        $i6 = 0;

        $i7 = 0;

     label01:
        i5 = r3.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockRows>;

        if $i7 >= i5 goto label13;

        i5 = $i7 * 36;

        $i8 = i5 + 36;

        $i9 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        $i8 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i8, $i9);

        $i9 = 0;

     label02:
        i0 = r3.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        if $i9 >= i0 goto label12;

        $i10 = specialinvoke r3.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockWidth(int)>($i9);

        i0 = $i10 + $i10;

        i1 = i0 + $i10;

        i2 = i1 + $i10;

        $r9 = r3.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        r4 = $r9[$i6];

        i11 = 0;

     label03:
        $i12 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        if i11 >= $i12 goto label11;

        $i12 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockWidth(int)>(i11);

        $r9 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $i13 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        $i13 = $i13 * $i7;

        $i13 = $i13 + i11;

        r5 = $r9[$i13];

        $r9 = r1.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $i13 = r1.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        $i13 = $i13 * i11;

        $i13 = $i13 + $i9;

        r2 = $r9[$i13];

        $i13 = 0;

        i14 = i5;

     label04:
        if i14 >= $i8 goto label10;

        i3 = i14 - i5;

        i4 = i3 * $i12;

        i3 = i4 + $i12;

        i15 = 0;

     label05:
        if i15 >= $i10 goto label09;

        r10 = r8;

        i16 = i4;

        i17 = i15;

     label06:
        $i18 = i3 + -3;

        if i16 >= $i18 goto label14;

        $r11 = r5[i16];

        $r12 = r2[i17];

        $r7 = interfaceinvoke $r11.<org.apache.commons.math3.FieldElement: java.lang.Object multiply(java.lang.Object)>($r12);

        $r7 = interfaceinvoke r10.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>($r7);

        r10 = (org.apache.commons.math3.FieldElement) $r7;

        $i18 = i16 + 1;

        $r11 = r5[$i18];

        $i18 = i17 + $i10;

        $r12 = r2[$i18];

        $r7 = interfaceinvoke $r11.<org.apache.commons.math3.FieldElement: java.lang.Object multiply(java.lang.Object)>($r12);

        $r7 = interfaceinvoke r10.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>($r7);

        r10 = (org.apache.commons.math3.FieldElement) $r7;

        $i18 = i16 + 2;

        $r11 = r5[$i18];

        $i18 = i17 + i0;

        $r12 = r2[$i18];

        $r7 = interfaceinvoke $r11.<org.apache.commons.math3.FieldElement: java.lang.Object multiply(java.lang.Object)>($r12);

        $r7 = interfaceinvoke r10.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>($r7);

        r10 = (org.apache.commons.math3.FieldElement) $r7;

        $i18 = i16 + 3;

        $r11 = r5[$i18];

        $i18 = i17 + i1;

        $r12 = r2[$i18];

        $r7 = interfaceinvoke $r11.<org.apache.commons.math3.FieldElement: java.lang.Object multiply(java.lang.Object)>($r12);

        $r7 = interfaceinvoke r10.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>($r7);

        r10 = (org.apache.commons.math3.FieldElement) $r7;

        i16 = i16 + 4;

        i17 = i17 + i2;

        goto label06;

     label07:
        if $i18 >= i3 goto label08;

        $r11 = r5[$i18];

        $r12 = r2[i17];

        $r7 = interfaceinvoke $r11.<org.apache.commons.math3.FieldElement: java.lang.Object multiply(java.lang.Object)>($r12);

        $r7 = interfaceinvoke r10.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>($r7);

        r10 = (org.apache.commons.math3.FieldElement) $r7;

        i17 = i17 + $i10;

        $i18 = $i18 + 1;

        goto label07;

     label08:
        $r11 = r4[$i13];

        $r7 = interfaceinvoke $r11.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>(r10);

        r10 = (org.apache.commons.math3.FieldElement) $r7;

        r4[$i13] = r10;

        $i13 = $i13 + 1;

        i15 = i15 + 1;

        goto label05;

     label09:
        i14 = i14 + 1;

        goto label04;

     label10:
        i11 = i11 + 1;

        goto label03;

     label11:
        $i6 = $i6 + 1;

        $i9 = $i9 + 1;

        goto label02;

     label12:
        $i7 = $i7 + 1;

        goto label01;

     label13:
        return r3;

     label14:
        $i18 = i16;

        goto label07;
    }
    public org.apache.commons.math3.linear.FieldMatrix multiply(org.apache.commons.math3.linear.FieldMatrix) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0, $r5;
        org.apache.commons.math3.linear.FieldMatrix r1;
        java.lang.ClassCastException r2;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i14, i15, i16;
        org.apache.commons.math3.FieldElement[] r3, r4;
        org.apache.commons.math3.Field $r6;
        java.lang.Object $r7;
        org.apache.commons.math3.FieldElement r8, r10, $r11, $r12;
        org.apache.commons.math3.FieldElement[][] $r9;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldMatrix;

     label01:
        $r5 = (org.apache.commons.math3.linear.BlockFieldMatrix) r1;

        $r5 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.linear.BlockFieldMatrix multiply(org.apache.commons.math3.linear.BlockFieldMatrix)>($r5);

     label02:
        return $r5;

     label03:
        r2 := @caughtexception;

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void checkMultiplicationCompatible(org.apache.commons.math3.linear.FieldMatrix)>(r1);

        $r5 = new org.apache.commons.math3.linear.BlockFieldMatrix;

        $r6 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.Field getField()>();

        $i5 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        $i6 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrix: int getColumnDimension()>();

        specialinvoke $r5.<org.apache.commons.math3.linear.BlockFieldMatrix: void <init>(org.apache.commons.math3.Field,int,int)>($r6, $i5, $i6);

        $r6 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.Field getField()>();

        $r7 = interfaceinvoke $r6.<org.apache.commons.math3.Field: java.lang.Object getZero()>();

        r8 = (org.apache.commons.math3.FieldElement) $r7;

        $i5 = 0;

        $i6 = 0;

     label04:
        i2 = $r5.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockRows>;

        if $i6 >= i2 goto label15;

        i2 = $i6 * 36;

        $i7 = i2 + 36;

        $i8 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        $i7 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i7, $i8);

        $i8 = 0;

     label05:
        i3 = $r5.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        if $i8 >= i3 goto label14;

        i3 = $i8 * 36;

        $i9 = i3 + 36;

        $i10 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrix: int getColumnDimension()>();

        $i9 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i9, $i10);

        $r9 = $r5.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        r3 = $r9[$i5];

        $i10 = 0;

     label06:
        $i11 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        if $i10 >= $i11 goto label13;

        $i11 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockWidth(int)>($i10);

        $r9 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        i4 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        i4 = i4 * $i6;

        i4 = i4 + $i10;

        r4 = $r9[i4];

        i4 = $i10 * 36;

        i12 = 0;

        i13 = i2;

     label07:
        if i13 >= $i7 goto label12;

        i0 = i13 - i2;

        i1 = i0 * $i11;

        i0 = i1 + $i11;

        i14 = i3;

     label08:
        if i14 >= $i9 goto label11;

        r10 = r8;

        i15 = i4;

        i16 = i1;

     label09:
        if i16 >= i0 goto label10;

        $r11 = r4[i16];

        $r12 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrix: org.apache.commons.math3.FieldElement getEntry(int,int)>(i15, i14);

        $r7 = interfaceinvoke $r11.<org.apache.commons.math3.FieldElement: java.lang.Object multiply(java.lang.Object)>($r12);

        $r7 = interfaceinvoke r10.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>($r7);

        r10 = (org.apache.commons.math3.FieldElement) $r7;

        i15 = i15 + 1;

        i16 = i16 + 1;

        goto label09;

     label10:
        $r11 = r3[i12];

        $r7 = interfaceinvoke $r11.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>(r10);

        r10 = (org.apache.commons.math3.FieldElement) $r7;

        r3[i12] = r10;

        i12 = i12 + 1;

        i14 = i14 + 1;

        goto label08;

     label11:
        i13 = i13 + 1;

        goto label07;

     label12:
        $i10 = $i10 + 1;

        goto label06;

     label13:
        $i5 = $i5 + 1;

        $i8 = $i8 + 1;

        goto label05;

     label14:
        $i6 = $i6 + 1;

        goto label04;

     label15:
        return $r5;

        catch java.lang.ClassCastException from label01 to label02 with label03;
    }
    public void multiplyEntry(int, int, org.apache.commons.math3.FieldElement) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0;
        int $i0, $i1, i2, i3, $i4;
        org.apache.commons.math3.FieldElement r1, $r4;
        org.apache.commons.math3.FieldElement[] r2;
        org.apache.commons.math3.FieldElement[][] $r3;
        java.lang.Object $r5;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        r1 := @parameter2: org.apache.commons.math3.FieldElement;

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void checkRowIndex(int)>($i0);

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void checkColumnIndex(int)>($i1);

        i2 = $i0 / 36;

        i3 = $i1 / 36;

        $i4 = i2 * 36;

        $i0 = $i0 - $i4;

        $i4 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockWidth(int)>(i3);

        $i0 = $i0 * $i4;

        $i4 = i3 * 36;

        $i1 = $i1 - $i4;

        $i0 = $i0 + $i1;

        $r3 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $i1 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        $i1 = $i1 * i2;

        $i1 = $i1 + i3;

        r2 = $r3[$i1];

        $r4 = r2[$i0];

        $r5 = interfaceinvoke $r4.<org.apache.commons.math3.FieldElement: java.lang.Object multiply(java.lang.Object)>(r1);

        r1 = (org.apache.commons.math3.FieldElement) $r5;

        r2[$i0] = r1;

        return;
    }
    public org.apache.commons.math3.FieldElement[] operate(org.apache.commons.math3.FieldElement[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0;
        org.apache.commons.math3.FieldElement[] r1, r2, r6;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, i7, i8, $i9;
        org.apache.commons.math3.exception.DimensionMismatchException $r3;
        org.apache.commons.math3.Field $r4;
        java.lang.Object[] $r5;
        java.lang.Object $r7;
        org.apache.commons.math3.FieldElement r8, r10, $r11, $r12;
        org.apache.commons.math3.FieldElement[][] $r9;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.FieldElement[];

        $i2 = lengthof r1;

        i0 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        if $i2 == i0 goto label01;

        $r3 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i2 = lengthof r1;

        i0 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        specialinvoke $r3.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i2, i0);

        throw $r3;

     label01:
        $r4 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.Field getField()>();

        $i2 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        $r5 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[] buildArray(org.apache.commons.math3.Field,int)>($r4, $i2);

        r6 = (org.apache.commons.math3.FieldElement[]) $r5;

        $r4 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.Field getField()>();

        $r7 = interfaceinvoke $r4.<org.apache.commons.math3.Field: java.lang.Object getZero()>();

        r8 = (org.apache.commons.math3.FieldElement) $r7;

        $i2 = 0;

     label02:
        i0 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockRows>;

        if $i2 >= i0 goto label10;

        i0 = $i2 * 36;

        $i3 = i0 + 36;

        $i4 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        $i3 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i3, $i4);

        $i4 = 0;

     label03:
        i1 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        if $i4 >= i1 goto label09;

        $r9 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        i1 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        i1 = i1 * $i2;

        i1 = i1 + $i4;

        r2 = $r9[i1];

        i1 = $i4 * 36;

        $i5 = i1 + 36;

        $i6 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        $i5 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i5, $i6);

        i7 = 0;

        $i6 = i0;

     label04:
        if $i6 >= $i3 goto label08;

        r10 = r8;

        i8 = i1;

     label05:
        $i9 = $i5 + -3;

        if i8 >= $i9 goto label11;

        $r11 = r2[i7];

        $r12 = r1[i8];

        $r7 = interfaceinvoke $r11.<org.apache.commons.math3.FieldElement: java.lang.Object multiply(java.lang.Object)>($r12);

        $r7 = interfaceinvoke r10.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>($r7);

        r10 = (org.apache.commons.math3.FieldElement) $r7;

        $i9 = i7 + 1;

        $r11 = r2[$i9];

        $i9 = i8 + 1;

        $r12 = r1[$i9];

        $r7 = interfaceinvoke $r11.<org.apache.commons.math3.FieldElement: java.lang.Object multiply(java.lang.Object)>($r12);

        $r7 = interfaceinvoke r10.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>($r7);

        r10 = (org.apache.commons.math3.FieldElement) $r7;

        $i9 = i7 + 2;

        $r11 = r2[$i9];

        $i9 = i8 + 2;

        $r12 = r1[$i9];

        $r7 = interfaceinvoke $r11.<org.apache.commons.math3.FieldElement: java.lang.Object multiply(java.lang.Object)>($r12);

        $r7 = interfaceinvoke r10.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>($r7);

        r10 = (org.apache.commons.math3.FieldElement) $r7;

        $i9 = i7 + 3;

        $r11 = r2[$i9];

        $i9 = i8 + 3;

        $r12 = r1[$i9];

        $r7 = interfaceinvoke $r11.<org.apache.commons.math3.FieldElement: java.lang.Object multiply(java.lang.Object)>($r12);

        $r7 = interfaceinvoke r10.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>($r7);

        r10 = (org.apache.commons.math3.FieldElement) $r7;

        i7 = i7 + 4;

        i8 = i8 + 4;

        goto label05;

     label06:
        if i8 >= $i5 goto label07;

        $r11 = r2[$i9];

        $r12 = r1[i8];

        $r7 = interfaceinvoke $r11.<org.apache.commons.math3.FieldElement: java.lang.Object multiply(java.lang.Object)>($r12);

        $r7 = interfaceinvoke r10.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>($r7);

        r10 = (org.apache.commons.math3.FieldElement) $r7;

        i8 = i8 + 1;

        $i9 = $i9 + 1;

        goto label06;

     label07:
        $r11 = r6[$i6];

        $r7 = interfaceinvoke $r11.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>(r10);

        r10 = (org.apache.commons.math3.FieldElement) $r7;

        r6[$i6] = r10;

        $i6 = $i6 + 1;

        i7 = $i9;

        goto label04;

     label08:
        $i4 = $i4 + 1;

        goto label03;

     label09:
        $i2 = $i2 + 1;

        goto label02;

     label10:
        return r6;

     label11:
        $i9 = i7;

        goto label06;
    }
    public org.apache.commons.math3.FieldElement[] preMultiply(org.apache.commons.math3.FieldElement[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0;
        org.apache.commons.math3.FieldElement[] r1, r2, r6;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12, $i13;
        org.apache.commons.math3.exception.DimensionMismatchException $r3;
        org.apache.commons.math3.Field $r4;
        java.lang.Object[] $r5;
        java.lang.Object $r7;
        org.apache.commons.math3.FieldElement r8, r10, $r11, $r12;
        org.apache.commons.math3.FieldElement[][] $r9;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.FieldElement[];

        $i5 = lengthof r1;

        i0 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        if $i5 == i0 goto label01;

        $r3 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i5 = lengthof r1;

        i0 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        specialinvoke $r3.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i5, i0);

        throw $r3;

     label01:
        $r4 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.Field getField()>();

        $i5 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        $r5 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[] buildArray(org.apache.commons.math3.Field,int)>($r4, $i5);

        r6 = (org.apache.commons.math3.FieldElement[]) $r5;

        $r4 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.Field getField()>();

        $r7 = interfaceinvoke $r4.<org.apache.commons.math3.Field: java.lang.Object getZero()>();

        r8 = (org.apache.commons.math3.FieldElement) $r7;

        $i5 = 0;

     label02:
        i0 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        if $i5 >= i0 goto label10;

        $i6 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockWidth(int)>($i5);

        i0 = $i6 + $i6;

        i1 = i0 + $i6;

        i2 = i1 + $i6;

        i4 = $i5 * 36;

        $i7 = i4 + 36;

        $i8 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        $i7 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i7, $i8);

        $i8 = 0;

     label03:
        i3 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockRows>;

        if $i8 >= i3 goto label09;

        $r9 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        i3 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        i3 = i3 * $i8;

        i3 = i3 + $i5;

        r2 = $r9[i3];

        i3 = $i8 * 36;

        $i9 = i3 + 36;

        $i10 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        $i9 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i9, $i10);

        $i10 = i4;

     label04:
        if $i10 >= $i7 goto label08;

        i11 = $i10 - i4;

        r10 = r8;

        i12 = i3;

     label05:
        $i13 = $i9 + -3;

        if i12 >= $i13 goto label11;

        $r11 = r2[i11];

        $r12 = r1[i12];

        $r7 = interfaceinvoke $r11.<org.apache.commons.math3.FieldElement: java.lang.Object multiply(java.lang.Object)>($r12);

        $r7 = interfaceinvoke r10.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>($r7);

        r10 = (org.apache.commons.math3.FieldElement) $r7;

        $i13 = i11 + $i6;

        $r11 = r2[$i13];

        $i13 = i12 + 1;

        $r12 = r1[$i13];

        $r7 = interfaceinvoke $r11.<org.apache.commons.math3.FieldElement: java.lang.Object multiply(java.lang.Object)>($r12);

        $r7 = interfaceinvoke r10.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>($r7);

        r10 = (org.apache.commons.math3.FieldElement) $r7;

        $i13 = i11 + i0;

        $r11 = r2[$i13];

        $i13 = i12 + 2;

        $r12 = r1[$i13];

        $r7 = interfaceinvoke $r11.<org.apache.commons.math3.FieldElement: java.lang.Object multiply(java.lang.Object)>($r12);

        $r7 = interfaceinvoke r10.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>($r7);

        r10 = (org.apache.commons.math3.FieldElement) $r7;

        $i13 = i11 + i1;

        $r11 = r2[$i13];

        $i13 = i12 + 3;

        $r12 = r1[$i13];

        $r7 = interfaceinvoke $r11.<org.apache.commons.math3.FieldElement: java.lang.Object multiply(java.lang.Object)>($r12);

        $r7 = interfaceinvoke r10.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>($r7);

        r10 = (org.apache.commons.math3.FieldElement) $r7;

        i11 = i11 + i2;

        i12 = i12 + 4;

        goto label05;

     label06:
        if $i13 >= $i9 goto label07;

        $r11 = r2[i11];

        $r12 = r1[$i13];

        $r7 = interfaceinvoke $r11.<org.apache.commons.math3.FieldElement: java.lang.Object multiply(java.lang.Object)>($r12);

        $r7 = interfaceinvoke r10.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>($r7);

        r10 = (org.apache.commons.math3.FieldElement) $r7;

        i11 = i11 + $i6;

        $i13 = $i13 + 1;

        goto label06;

     label07:
        $r11 = r6[$i10];

        $r7 = interfaceinvoke $r11.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>(r10);

        r10 = (org.apache.commons.math3.FieldElement) $r7;

        r6[$i10] = r10;

        $i10 = $i10 + 1;

        goto label04;

     label08:
        $i8 = $i8 + 1;

        goto label03;

     label09:
        $i5 = $i5 + 1;

        goto label02;

     label10:
        return r6;

     label11:
        $i13 = i12;

        goto label06;
    }
    public org.apache.commons.math3.linear.FieldMatrix scalarAdd(org.apache.commons.math3.FieldElement)
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0, r2;
        org.apache.commons.math3.FieldElement r1, $r7;
        org.apache.commons.math3.FieldElement[] r3, r4;
        int $i0, $i1, $i2;
        org.apache.commons.math3.Field $r5;
        org.apache.commons.math3.FieldElement[][] $r6;
        java.lang.Object $r8;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.FieldElement;

        r2 = new org.apache.commons.math3.linear.BlockFieldMatrix;

        $r5 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.Field getField()>();

        $i0 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        $i1 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        specialinvoke r2.<org.apache.commons.math3.linear.BlockFieldMatrix: void <init>(org.apache.commons.math3.Field,int,int)>($r5, $i0, $i1);

        $i0 = 0;

     label1:
        $r6 = r2.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $i1 = lengthof $r6;

        if $i0 >= $i1 goto label4;

        $r6 = r2.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        r3 = $r6[$i0];

        $r6 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        r4 = $r6[$i0];

        $i1 = 0;

     label2:
        $i2 = lengthof r3;

        if $i1 >= $i2 goto label3;

        $r7 = r4[$i1];

        $r8 = interfaceinvoke $r7.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>(r1);

        $r7 = (org.apache.commons.math3.FieldElement) $r8;

        r3[$i1] = $r7;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $i0 = $i0 + 1;

        goto label1;

     label4:
        return r2;
    }
    public org.apache.commons.math3.linear.FieldMatrix scalarMultiply(org.apache.commons.math3.FieldElement)
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0, r2;
        org.apache.commons.math3.FieldElement r1, $r7;
        org.apache.commons.math3.FieldElement[] r3, r4;
        int $i0, $i1, $i2;
        org.apache.commons.math3.Field $r5;
        org.apache.commons.math3.FieldElement[][] $r6;
        java.lang.Object $r8;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.FieldElement;

        r2 = new org.apache.commons.math3.linear.BlockFieldMatrix;

        $r5 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.Field getField()>();

        $i0 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        $i1 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        specialinvoke r2.<org.apache.commons.math3.linear.BlockFieldMatrix: void <init>(org.apache.commons.math3.Field,int,int)>($r5, $i0, $i1);

        $i0 = 0;

     label1:
        $r6 = r2.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $i1 = lengthof $r6;

        if $i0 >= $i1 goto label4;

        $r6 = r2.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        r3 = $r6[$i0];

        $r6 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        r4 = $r6[$i0];

        $i1 = 0;

     label2:
        $i2 = lengthof r3;

        if $i1 >= $i2 goto label3;

        $r7 = r4[$i1];

        $r8 = interfaceinvoke $r7.<org.apache.commons.math3.FieldElement: java.lang.Object multiply(java.lang.Object)>(r1);

        $r7 = (org.apache.commons.math3.FieldElement) $r8;

        r3[$i1] = $r7;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $i0 = $i0 + 1;

        goto label1;

     label4:
        return r2;
    }
    public void setColumn(int, org.apache.commons.math3.FieldElement[]) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException, org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0;
        int $i0, i1, $i2, i3, i4, $i5, $i6, $i7;
        org.apache.commons.math3.FieldElement[] r1, r2;
        org.apache.commons.math3.linear.MatrixDimensionMismatchException $r3;
        org.apache.commons.math3.FieldElement[][] $r4;
        org.apache.commons.math3.FieldElement $r5;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        $i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.FieldElement[];

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void checkColumnIndex(int)>($i0);

        i1 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int getRowDimension()>();

        $i2 = lengthof r1;

        if $i2 == i1 goto label1;

        $r3 = new org.apache.commons.math3.linear.MatrixDimensionMismatchException;

        $i0 = lengthof r1;

        specialinvoke $r3.<org.apache.commons.math3.linear.MatrixDimensionMismatchException: void <init>(int,int,int,int)>($i0, 1, i1, 1);

        throw $r3;

     label1:
        i1 = $i0 / 36;

        $i2 = i1 * 36;

        $i0 = $i0 - $i2;

        $i2 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockWidth(int)>(i1);

        i3 = 0;

        i4 = 0;

     label2:
        $i5 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockRows>;

        if i4 >= $i5 goto label5;

        $i5 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockHeight(int)>(i4);

        $r4 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $i6 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        $i6 = $i6 * i4;

        $i6 = $i6 + i1;

        r2 = $r4[$i6];

        $i6 = 0;

     label3:
        if $i6 >= $i5 goto label4;

        $i7 = $i6 * $i2;

        $i7 = $i7 + $i0;

        $r5 = r1[i3];

        r2[$i7] = $r5;

        $i6 = $i6 + 1;

        i3 = i3 + 1;

        goto label3;

     label4:
        i4 = i4 + 1;

        goto label2;

     label5:
        return;
    }
    void setColumnMatrix(int, org.apache.commons.math3.linear.BlockFieldMatrix) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException, org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0, r1;
        int $i0, i1, i2, $i3, i4, i5, i6, $i7, $i8, $i9;
        org.apache.commons.math3.FieldElement[] r2, r5;
        org.apache.commons.math3.linear.MatrixDimensionMismatchException $r3;
        org.apache.commons.math3.FieldElement[][] $r4;
        org.apache.commons.math3.FieldElement $r6;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        $i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.linear.BlockFieldMatrix;

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void checkColumnIndex(int)>($i0);

        i1 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int getRowDimension()>();

        $i3 = virtualinvoke r1.<org.apache.commons.math3.linear.BlockFieldMatrix: int getRowDimension()>();

        if $i3 != i1 goto label1;

        $i3 = virtualinvoke r1.<org.apache.commons.math3.linear.BlockFieldMatrix: int getColumnDimension()>();

        if $i3 == 1 goto label2;

     label1:
        $r3 = new org.apache.commons.math3.linear.MatrixDimensionMismatchException;

        $i0 = virtualinvoke r1.<org.apache.commons.math3.linear.BlockFieldMatrix: int getRowDimension()>();

        $i3 = virtualinvoke r1.<org.apache.commons.math3.linear.BlockFieldMatrix: int getColumnDimension()>();

        specialinvoke $r3.<org.apache.commons.math3.linear.MatrixDimensionMismatchException: void <init>(int,int,int,int)>($i0, $i3, i1, 1);

        throw $r3;

     label2:
        i1 = $i0 / 36;

        $i3 = i1 * 36;

        $i0 = $i0 - $i3;

        $i3 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockWidth(int)>(i1);

        i4 = 0;

        i5 = 0;

        $r4 = r1.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        r5 = $r4[0];

        i6 = 0;

     label3:
        $i7 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockRows>;

        if i6 >= $i7 goto label7;

        $i7 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockHeight(int)>(i6);

        $r4 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $i8 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        $i8 = $i8 * i6;

        $i8 = $i8 + i1;

        r2 = $r4[$i8];

        $i8 = 0;

     label4:
        if $i8 >= $i7 goto label6;

        i2 = lengthof r5;

        if i5 < i2 goto label5;

        $r4 = r1.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        i4 = i4 + 1;

        r5 = $r4[i4];

        i5 = 0;

     label5:
        i2 = $i8 * $i3;

        $i9 = i2 + $i0;

        $r6 = r5[i5];

        r2[$i9] = $r6;

        $i8 = $i8 + 1;

        i5 = i5 + 1;

        goto label4;

     label6:
        i6 = i6 + 1;

        goto label3;

     label7:
        return;
    }
    public void setColumnMatrix(int, org.apache.commons.math3.linear.FieldMatrix) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException, org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0, $r3;
        int $i0;
        org.apache.commons.math3.linear.FieldMatrix r1;
        java.lang.ClassCastException r2;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        $i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.linear.FieldMatrix;

     label1:
        $r3 = (org.apache.commons.math3.linear.BlockFieldMatrix) r1;

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void setColumnMatrix(int,org.apache.commons.math3.linear.BlockFieldMatrix)>($i0, $r3);

     label2:
        return;

     label3:
        r2 := @caughtexception;

        specialinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: void setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)>($i0, r1);

        return;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }
    public void setColumnVector(int, org.apache.commons.math3.linear.FieldVector) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.linear.MatrixDimensionMismatchException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0;
        int $i0;
        org.apache.commons.math3.linear.FieldVector r1;
        java.lang.ClassCastException r2;
        org.apache.commons.math3.FieldElement[] $r3;
        org.apache.commons.math3.linear.ArrayFieldVector $r4;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        $i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.linear.FieldVector;

     label1:
        $r4 = (org.apache.commons.math3.linear.ArrayFieldVector) r1;

        $r3 = virtualinvoke $r4.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] getDataRef()>();

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void setColumn(int,org.apache.commons.math3.FieldElement[])>($i0, $r3);

     label2:
        return;

     label3:
        r2 := @caughtexception;

        specialinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: void setColumnVector(int,org.apache.commons.math3.linear.FieldVector)>($i0, r1);

        return;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }
    public void setEntry(int, int, org.apache.commons.math3.FieldElement) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0;
        int $i0, $i1, i2, i3, $i4;
        org.apache.commons.math3.FieldElement r1;
        org.apache.commons.math3.FieldElement[][] $r2;
        org.apache.commons.math3.FieldElement[] $r3;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        r1 := @parameter2: org.apache.commons.math3.FieldElement;

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void checkRowIndex(int)>($i0);

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void checkColumnIndex(int)>($i1);

        i2 = $i0 / 36;

        i3 = $i1 / 36;

        $i4 = i2 * 36;

        $i4 = $i0 - $i4;

        $i0 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockWidth(int)>(i3);

        $i0 = $i4 * $i0;

        $i4 = i3 * 36;

        $i1 = $i1 - $i4;

        $i0 = $i0 + $i1;

        $r2 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $i1 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        $i1 = $i1 * i2;

        $i1 = $i1 + i3;

        $r3 = $r2[$i1];

        $r3[$i0] = r1;

        return;
    }
    public void setRow(int, org.apache.commons.math3.FieldElement[]) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.linear.MatrixDimensionMismatchException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0;
        int $i0, i1, $i2, i3, $i4, $i5;
        org.apache.commons.math3.FieldElement[] r1, r2;
        org.apache.commons.math3.linear.MatrixDimensionMismatchException $r3;
        org.apache.commons.math3.FieldElement[][] $r4;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        $i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.FieldElement[];

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void checkRowIndex(int)>($i0);

        i1 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int getColumnDimension()>();

        $i2 = lengthof r1;

        if $i2 == i1 goto label1;

        $r3 = new org.apache.commons.math3.linear.MatrixDimensionMismatchException;

        $i0 = lengthof r1;

        specialinvoke $r3.<org.apache.commons.math3.linear.MatrixDimensionMismatchException: void <init>(int,int,int,int)>(1, $i0, 1, i1);

        throw $r3;

     label1:
        i1 = $i0 / 36;

        $i2 = i1 * 36;

        $i0 = $i0 - $i2;

        $i2 = 0;

        i3 = 0;

     label2:
        $i4 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        if i3 >= $i4 goto label3;

        $i4 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockWidth(int)>(i3);

        $r4 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $i5 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        $i5 = $i5 * i1;

        $i5 = $i5 + i3;

        r2 = $r4[$i5];

        $i5 = $i0 * $i4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, $i2, r2, $i5, $i4);

        $i2 = $i2 + $i4;

        i3 = i3 + 1;

        goto label2;

     label3:
        return;
    }
    public void setRowMatrix(int, org.apache.commons.math3.linear.BlockFieldMatrix) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException, org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0, r1;
        int $i0, i1, i2, $i3, i4, i5, $i6, $i7;
        org.apache.commons.math3.FieldElement[] r2, r5;
        org.apache.commons.math3.linear.MatrixDimensionMismatchException $r3;
        org.apache.commons.math3.FieldElement[][] $r4;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        $i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.linear.BlockFieldMatrix;

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void checkRowIndex(int)>($i0);

        i2 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int getColumnDimension()>();

        $i3 = virtualinvoke r1.<org.apache.commons.math3.linear.BlockFieldMatrix: int getRowDimension()>();

        if $i3 != 1 goto label1;

        $i3 = virtualinvoke r1.<org.apache.commons.math3.linear.BlockFieldMatrix: int getColumnDimension()>();

        if $i3 == i2 goto label2;

     label1:
        $r3 = new org.apache.commons.math3.linear.MatrixDimensionMismatchException;

        $i0 = virtualinvoke r1.<org.apache.commons.math3.linear.BlockFieldMatrix: int getRowDimension()>();

        $i3 = virtualinvoke r1.<org.apache.commons.math3.linear.BlockFieldMatrix: int getColumnDimension()>();

        specialinvoke $r3.<org.apache.commons.math3.linear.MatrixDimensionMismatchException: void <init>(int,int,int,int)>($i0, $i3, 1, i2);

        throw $r3;

     label2:
        i2 = $i0 / 36;

        $i3 = i2 * 36;

        $i0 = $i0 - $i3;

        $i3 = 0;

        i4 = 0;

        $r4 = r1.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        r5 = $r4[0];

        i5 = 0;

     label3:
        $i6 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        if i5 >= $i6 goto label6;

        $i6 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockWidth(int)>(i5);

        $r4 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        i1 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        i1 = i1 * i2;

        i1 = i1 + i5;

        r2 = $r4[i1];

        i1 = lengthof r5;

        i1 = i1 - i4;

        if $i6 <= i1 goto label5;

        $i7 = $i0 * $i6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r5, i4, r2, $i7, i1);

        $r4 = r1.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $i3 = $i3 + 1;

        r5 = $r4[$i3];

        i4 = $i0 * $i6;

        $i7 = $i6 - i1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r5, 0, r2, i4, $i7);

        i4 = $i6 - i1;

     label4:
        i5 = i5 + 1;

        goto label3;

     label5:
        i1 = $i0 * $i6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r5, i4, r2, i1, $i6);

        i4 = i4 + $i6;

        goto label4;

     label6:
        return;
    }
    public void setRowMatrix(int, org.apache.commons.math3.linear.FieldMatrix) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException, org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0, $r3;
        int $i0;
        org.apache.commons.math3.linear.FieldMatrix r1;
        java.lang.ClassCastException r2;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        $i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.linear.FieldMatrix;

     label1:
        $r3 = (org.apache.commons.math3.linear.BlockFieldMatrix) r1;

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void setRowMatrix(int,org.apache.commons.math3.linear.BlockFieldMatrix)>($i0, $r3);

     label2:
        return;

     label3:
        r2 := @caughtexception;

        specialinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: void setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)>($i0, r1);

        return;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }
    public void setRowVector(int, org.apache.commons.math3.linear.FieldVector) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException, org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0;
        int $i0;
        org.apache.commons.math3.linear.FieldVector r1;
        java.lang.ClassCastException r2;
        org.apache.commons.math3.FieldElement[] $r3;
        org.apache.commons.math3.linear.ArrayFieldVector $r4;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        $i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.linear.FieldVector;

     label1:
        $r4 = (org.apache.commons.math3.linear.ArrayFieldVector) r1;

        $r3 = virtualinvoke $r4.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] getDataRef()>();

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void setRow(int,org.apache.commons.math3.FieldElement[])>($i0, $r3);

     label2:
        return;

     label3:
        r2 := @caughtexception;

        specialinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: void setRowVector(int,org.apache.commons.math3.linear.FieldVector)>($i0, r1);

        return;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }
    public void setSubMatrix(org.apache.commons.math3.FieldElement[][], int, int) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0;
        org.apache.commons.math3.FieldElement[][] r1, $r6;
        int $i0, $i1, i2, i3, i4, i5, i6, i7, i8, i9, $i10, i11, $i12, $i13, i14, $i15, $i16, $i17, $i18, $i19;
        org.apache.commons.math3.FieldElement[] r2, $r7;
        org.apache.commons.math3.exception.NoDataException $r3;
        org.apache.commons.math3.exception.util.LocalizedFormats $r4;
        org.apache.commons.math3.exception.DimensionMismatchException $r5;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.FieldElement[][];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r1);

        r2 = r1[0];

        i3 = lengthof r2;

        if i3 != 0 goto label01;

        $r3 = new org.apache.commons.math3.exception.NoDataException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats AT_LEAST_ONE_COLUMN>;

        specialinvoke $r3.<org.apache.commons.math3.exception.NoDataException: void <init>(org.apache.commons.math3.exception.util.Localizable)>($r4);

        throw $r3;

     label01:
        i7 = lengthof r1;

        i7 = i7 + $i0;

        i7 = i7 + -1;

        i6 = $i1 + i3;

        i6 = i6 + -1;

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void checkSubMatrixIndex(int,int,int,int)>($i0, i7, $i1, i6);

        i4 = lengthof r1;

        i2 = 0;

     label02:
        if i2 >= i4 goto label04;

        r2 = r1[i2];

        i5 = lengthof r2;

        if i5 == i3 goto label03;

        $r5 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i0 = lengthof r2;

        specialinvoke $r5.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>(i3, $i0);

        throw $r5;

     label03:
        i2 = i2 + 1;

        goto label02;

     label04:
        i3 = i7 + 36;

        i3 = i3 / 36;

        i4 = $i1 / 36;

        i2 = i6 + 36;

        i2 = i2 / 36;

        i11 = $i0 / 36;

     label05:
        if i11 >= i3 goto label10;

        $i12 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockHeight(int)>(i11);

        i5 = i11 * 36;

        $i13 = staticinvoke <org.apache.commons.math3.util.FastMath: int max(int,int)>($i0, i5);

        i8 = i7 + 1;

        $i12 = i5 + $i12;

        $i12 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>(i8, $i12);

        i14 = i4;

     label06:
        if i14 >= i2 goto label09;

        $i15 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockWidth(int)>(i14);

        i8 = i14 * 36;

        $i16 = staticinvoke <org.apache.commons.math3.util.FastMath: int max(int,int)>($i1, i8);

        i9 = i6 + 1;

        $i17 = i8 + $i15;

        i9 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>(i9, $i17);

        i9 = i9 - $i16;

        $r6 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $i17 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        $i17 = $i17 * i11;

        $i17 = $i17 + i14;

        r2 = $r6[$i17];

        $i17 = $i13;

     label07:
        if $i17 >= $i12 goto label08;

        $i18 = $i17 - $i0;

        $r7 = r1[$i18];

        $i18 = $i16 - $i1;

        $i10 = $i17 - i5;

        $i19 = $i10 * $i15;

        $i10 = $i16 - i8;

        $i10 = $i19 + $i10;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, $i18, r2, $i10, i9);

        $i17 = $i17 + 1;

        goto label07;

     label08:
        i14 = i14 + 1;

        goto label06;

     label09:
        i11 = i11 + 1;

        goto label05;

     label10:
        return;
    }
    public org.apache.commons.math3.linear.BlockFieldMatrix subtract(org.apache.commons.math3.linear.BlockFieldMatrix) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0, r1, r3;
        org.apache.commons.math3.FieldElement[] r2, r4, r5;
        int $i0, $i1, $i2;
        org.apache.commons.math3.Field $r6;
        org.apache.commons.math3.FieldElement[][] $r7;
        org.apache.commons.math3.FieldElement $r8, $r9;
        java.lang.Object $r10;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.BlockFieldMatrix;

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void checkSubtractionCompatible(org.apache.commons.math3.linear.FieldMatrix)>(r1);

        r3 = new org.apache.commons.math3.linear.BlockFieldMatrix;

        $r6 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.Field getField()>();

        $i1 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        $i0 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        specialinvoke r3.<org.apache.commons.math3.linear.BlockFieldMatrix: void <init>(org.apache.commons.math3.Field,int,int)>($r6, $i1, $i0);

        $i0 = 0;

     label1:
        $r7 = r3.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $i1 = lengthof $r7;

        if $i0 >= $i1 goto label4;

        $r7 = r3.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        r4 = $r7[$i0];

        $r7 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        r5 = $r7[$i0];

        $r7 = r1.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        r2 = $r7[$i0];

        $i1 = 0;

     label2:
        $i2 = lengthof r4;

        if $i1 >= $i2 goto label3;

        $r8 = r5[$i1];

        $r9 = r2[$i1];

        $r10 = interfaceinvoke $r8.<org.apache.commons.math3.FieldElement: java.lang.Object subtract(java.lang.Object)>($r9);

        $r8 = (org.apache.commons.math3.FieldElement) $r10;

        r4[$i1] = $r8;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $i0 = $i0 + 1;

        goto label1;

     label4:
        return r3;
    }
    public org.apache.commons.math3.linear.FieldMatrix subtract(org.apache.commons.math3.linear.FieldMatrix) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0, $r5;
        org.apache.commons.math3.linear.FieldMatrix r1;
        java.lang.ClassCastException r2;
        org.apache.commons.math3.FieldElement[] r3, r4;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, i8;
        org.apache.commons.math3.Field $r6;
        org.apache.commons.math3.FieldElement[][] $r7;
        org.apache.commons.math3.FieldElement $r8, $r9;
        java.lang.Object $r10;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldMatrix;

     label01:
        $r5 = (org.apache.commons.math3.linear.BlockFieldMatrix) r1;

        $r5 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.linear.BlockFieldMatrix subtract(org.apache.commons.math3.linear.BlockFieldMatrix)>($r5);

     label02:
        return $r5;

     label03:
        r2 := @caughtexception;

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void checkSubtractionCompatible(org.apache.commons.math3.linear.FieldMatrix)>(r1);

        $r5 = new org.apache.commons.math3.linear.BlockFieldMatrix;

        $r6 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.Field getField()>();

        $i2 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        $i3 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        specialinvoke $r5.<org.apache.commons.math3.linear.BlockFieldMatrix: void <init>(org.apache.commons.math3.Field,int,int)>($r6, $i2, $i3);

        $i2 = 0;

        $i3 = 0;

     label04:
        $i4 = $r5.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockRows>;

        if $i3 >= $i4 goto label11;

        $i4 = 0;

     label05:
        i0 = $r5.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        if $i4 >= i0 goto label10;

        $r7 = $r5.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        r3 = $r7[$i2];

        $r7 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        r4 = $r7[$i2];

        i0 = $i3 * 36;

        i1 = i0 + 36;

        $i5 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        $i5 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>(i1, $i5);

        i1 = $i4 * 36;

        $i6 = i1 + 36;

        $i7 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        $i6 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i6, $i7);

        $i7 = 0;

     label06:
        if i0 >= $i5 goto label09;

        i8 = i1;

     label07:
        if i8 >= $i6 goto label08;

        $r8 = r4[$i7];

        $r9 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrix: org.apache.commons.math3.FieldElement getEntry(int,int)>(i0, i8);

        $r10 = interfaceinvoke $r8.<org.apache.commons.math3.FieldElement: java.lang.Object subtract(java.lang.Object)>($r9);

        $r8 = (org.apache.commons.math3.FieldElement) $r10;

        r3[$i7] = $r8;

        $i7 = $i7 + 1;

        i8 = i8 + 1;

        goto label07;

     label08:
        i0 = i0 + 1;

        goto label06;

     label09:
        $i2 = $i2 + 1;

        $i4 = $i4 + 1;

        goto label05;

     label10:
        $i3 = $i3 + 1;

        goto label04;

     label11:
        return $r5;

        catch java.lang.ClassCastException from label01 to label02 with label03;
    }
    public org.apache.commons.math3.linear.FieldMatrix transpose()
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0, r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10, i11;
        org.apache.commons.math3.FieldElement[] r2, r3;
        org.apache.commons.math3.Field $r4;
        org.apache.commons.math3.FieldElement[][] $r5;
        org.apache.commons.math3.FieldElement $r6;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        $i3 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int getRowDimension()>();

        $i4 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int getColumnDimension()>();

        r1 = new org.apache.commons.math3.linear.BlockFieldMatrix;

        $r4 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.Field getField()>();

        specialinvoke r1.<org.apache.commons.math3.linear.BlockFieldMatrix: void <init>(org.apache.commons.math3.Field,int,int)>($r4, $i4, $i3);

        $i3 = 0;

        $i4 = 0;

     label1:
        $i5 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        if $i4 >= $i5 goto label8;

        $i5 = 0;

     label2:
        i1 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockRows>;

        if $i5 >= i1 goto label7;

        $r5 = r1.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        r2 = $r5[$i3];

        $r5 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        i1 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        i1 = i1 * $i5;

        i1 = i1 + $i4;

        r3 = $r5[i1];

        i1 = $i4 * 36;

        i2 = i1 + 36;

        $i6 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        $i6 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>(i2, $i6);

        i2 = $i5 * 36;

        i0 = i2 + 36;

        $i7 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        $i7 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>(i0, $i7);

        i8 = 0;

        i9 = i1;

     label3:
        if i9 >= $i6 goto label6;

        i0 = $i6 - i1;

        i10 = i9 - i1;

        i11 = i2;

     label4:
        if i11 >= $i7 goto label5;

        $r6 = r3[i10];

        r2[i8] = $r6;

        i8 = i8 + 1;

        i10 = i10 + i0;

        i11 = i11 + 1;

        goto label4;

     label5:
        i9 = i9 + 1;

        goto label3;

     label6:
        $i3 = $i3 + 1;

        $i5 = $i5 + 1;

        goto label2;

     label7:
        $i4 = $i4 + 1;

        goto label1;

     label8:
        return r1;
    }
    public org.apache.commons.math3.FieldElement walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0;
        org.apache.commons.math3.linear.FieldMatrixChangingVisitor r1;
        int $i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, i8, i9;
        org.apache.commons.math3.FieldElement[] r2;
        org.apache.commons.math3.FieldElement[][] $r3;
        org.apache.commons.math3.FieldElement $r4;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldMatrixChangingVisitor;

        $i4 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        $i0 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        $i1 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        $i1 = $i1 + -1;

        $i2 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        $i2 = $i2 + -1;

        interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixChangingVisitor: void start(int,int,int,int,int,int)>($i4, $i0, 0, $i1, 0, $i2);

        $i0 = 0;

        $i4 = 0;

     label1:
        $i1 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockRows>;

        if $i4 >= $i1 goto label8;

        $i1 = $i4 * 36;

        $i2 = $i1 + 36;

        $i5 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        $i2 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i2, $i5);

        $i5 = 0;

     label2:
        i3 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        if $i5 >= i3 goto label7;

        i3 = $i5 * 36;

        $i6 = i3 + 36;

        $i7 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        $i6 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i6, $i7);

        $r3 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        r2 = $r3[$i0];

        $i7 = 0;

        i8 = $i1;

     label3:
        if i8 >= $i2 goto label6;

        i9 = i3;

     label4:
        if i9 >= $i6 goto label5;

        $r4 = r2[$i7];

        $r4 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixChangingVisitor: org.apache.commons.math3.FieldElement visit(int,int,org.apache.commons.math3.FieldElement)>(i8, i9, $r4);

        r2[$i7] = $r4;

        $i7 = $i7 + 1;

        i9 = i9 + 1;

        goto label4;

     label5:
        i8 = i8 + 1;

        goto label3;

     label6:
        $i0 = $i0 + 1;

        $i5 = $i5 + 1;

        goto label2;

     label7:
        $i4 = $i4 + 1;

        goto label1;

     label8:
        $r4 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixChangingVisitor: org.apache.commons.math3.FieldElement end()>();

        return $r4;
    }
    public org.apache.commons.math3.FieldElement walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor, int, int, int, int) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0;
        org.apache.commons.math3.linear.FieldMatrixChangingVisitor r1;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15;
        org.apache.commons.math3.FieldElement[] r2;
        org.apache.commons.math3.FieldElement[][] $r3;
        org.apache.commons.math3.FieldElement $r4;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldMatrixChangingVisitor;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void checkSubMatrixIndex(int,int,int,int)>($i0, $i1, $i2, $i3);

        i5 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        $i4 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixChangingVisitor: void start(int,int,int,int,int,int)>(i5, $i4, $i0, $i1, $i2, $i3);

        $i4 = $i0 / 36;

     label1:
        i5 = $i1 / 36;

        i5 = i5 + 1;

        if $i4 >= i5 goto label8;

        i5 = $i4 * 36;

        $i7 = staticinvoke <org.apache.commons.math3.util.FastMath: int max(int,int)>($i0, i5);

        $i8 = $i4 + 1;

        $i8 = $i8 * 36;

        $i9 = $i1 + 1;

        $i8 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i8, $i9);

        $i9 = $i2 / 36;

     label2:
        i6 = $i3 / 36;

        i6 = i6 + 1;

        if $i9 >= i6 goto label7;

        $i10 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockWidth(int)>($i9);

        i6 = $i9 * 36;

        $i11 = staticinvoke <org.apache.commons.math3.util.FastMath: int max(int,int)>($i2, i6);

        $i12 = $i9 + 1;

        $i12 = $i12 * 36;

        $i13 = $i3 + 1;

        $i12 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i12, $i13);

        $r3 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $i13 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        $i13 = $i13 * $i4;

        $i13 = $i13 + $i9;

        r2 = $r3[$i13];

        $i13 = $i7;

     label3:
        if $i13 >= $i8 goto label6;

        $i14 = $i13 - i5;

        $i14 = $i14 * $i10;

        $i14 = $i14 + $i11;

        $i14 = $i14 - i6;

        i15 = $i11;

     label4:
        if i15 >= $i12 goto label5;

        $r4 = r2[$i14];

        $r4 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixChangingVisitor: org.apache.commons.math3.FieldElement visit(int,int,org.apache.commons.math3.FieldElement)>($i13, i15, $r4);

        r2[$i14] = $r4;

        $i14 = $i14 + 1;

        i15 = i15 + 1;

        goto label4;

     label5:
        $i13 = $i13 + 1;

        goto label3;

     label6:
        $i9 = $i9 + 1;

        goto label2;

     label7:
        $i4 = $i4 + 1;

        goto label1;

     label8:
        $r4 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixChangingVisitor: org.apache.commons.math3.FieldElement end()>();

        return $r4;
    }
    public org.apache.commons.math3.FieldElement walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0;
        org.apache.commons.math3.linear.FieldMatrixPreservingVisitor r1;
        int $i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, i8, i9;
        org.apache.commons.math3.FieldElement[] r2;
        org.apache.commons.math3.FieldElement[][] $r3;
        org.apache.commons.math3.FieldElement $r4;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldMatrixPreservingVisitor;

        $i4 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        $i0 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        $i1 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        $i1 = $i1 + -1;

        $i2 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        $i2 = $i2 + -1;

        interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixPreservingVisitor: void start(int,int,int,int,int,int)>($i4, $i0, 0, $i1, 0, $i2);

        $i0 = 0;

        $i4 = 0;

     label1:
        $i1 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockRows>;

        if $i4 >= $i1 goto label8;

        $i1 = $i4 * 36;

        $i2 = $i1 + 36;

        $i5 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        $i2 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i2, $i5);

        $i5 = 0;

     label2:
        i3 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        if $i5 >= i3 goto label7;

        i3 = $i5 * 36;

        $i6 = i3 + 36;

        $i7 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        $i6 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i6, $i7);

        $r3 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        r2 = $r3[$i0];

        $i7 = 0;

        i8 = $i1;

     label3:
        if i8 >= $i2 goto label6;

        i9 = i3;

     label4:
        if i9 >= $i6 goto label5;

        $r4 = r2[$i7];

        interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixPreservingVisitor: void visit(int,int,org.apache.commons.math3.FieldElement)>(i8, i9, $r4);

        $i7 = $i7 + 1;

        i9 = i9 + 1;

        goto label4;

     label5:
        i8 = i8 + 1;

        goto label3;

     label6:
        $i0 = $i0 + 1;

        $i5 = $i5 + 1;

        goto label2;

     label7:
        $i4 = $i4 + 1;

        goto label1;

     label8:
        $r4 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixPreservingVisitor: org.apache.commons.math3.FieldElement end()>();

        return $r4;
    }
    public org.apache.commons.math3.FieldElement walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor, int, int, int, int) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0;
        org.apache.commons.math3.linear.FieldMatrixPreservingVisitor r1;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15;
        org.apache.commons.math3.FieldElement[] r2;
        org.apache.commons.math3.FieldElement[][] $r3;
        org.apache.commons.math3.FieldElement $r4;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldMatrixPreservingVisitor;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void checkSubMatrixIndex(int,int,int,int)>($i0, $i1, $i2, $i3);

        i5 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        $i4 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixPreservingVisitor: void start(int,int,int,int,int,int)>(i5, $i4, $i0, $i1, $i2, $i3);

        $i4 = $i0 / 36;

     label1:
        i5 = $i1 / 36;

        i5 = i5 + 1;

        if $i4 >= i5 goto label8;

        i5 = $i4 * 36;

        $i7 = staticinvoke <org.apache.commons.math3.util.FastMath: int max(int,int)>($i0, i5);

        $i8 = $i4 + 1;

        $i8 = $i8 * 36;

        $i9 = $i1 + 1;

        $i8 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i8, $i9);

        $i9 = $i2 / 36;

     label2:
        i6 = $i3 / 36;

        i6 = i6 + 1;

        if $i9 >= i6 goto label7;

        $i10 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockWidth(int)>($i9);

        i6 = $i9 * 36;

        $i11 = staticinvoke <org.apache.commons.math3.util.FastMath: int max(int,int)>($i2, i6);

        $i12 = $i9 + 1;

        $i12 = $i12 * 36;

        $i13 = $i3 + 1;

        $i12 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i12, $i13);

        $r3 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $i13 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        $i13 = $i13 * $i4;

        $i13 = $i13 + $i9;

        r2 = $r3[$i13];

        $i13 = $i7;

     label3:
        if $i13 >= $i8 goto label6;

        $i14 = $i13 - i5;

        $i14 = $i14 * $i10;

        $i14 = $i14 + $i11;

        $i14 = $i14 - i6;

        i15 = $i11;

     label4:
        if i15 >= $i12 goto label5;

        $r4 = r2[$i14];

        interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixPreservingVisitor: void visit(int,int,org.apache.commons.math3.FieldElement)>($i13, i15, $r4);

        $i14 = $i14 + 1;

        i15 = i15 + 1;

        goto label4;

     label5:
        $i13 = $i13 + 1;

        goto label3;

     label6:
        $i9 = $i9 + 1;

        goto label2;

     label7:
        $i4 = $i4 + 1;

        goto label1;

     label8:
        $r4 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixPreservingVisitor: org.apache.commons.math3.FieldElement end()>();

        return $r4;
    }
    public org.apache.commons.math3.FieldElement walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0;
        org.apache.commons.math3.linear.FieldMatrixChangingVisitor r1;
        int $i0, $i1, $i2, i3, i4, i5, $i6, $i7, $i8;
        org.apache.commons.math3.FieldElement[] r2;
        org.apache.commons.math3.FieldElement[][] $r3;
        org.apache.commons.math3.FieldElement $r4;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldMatrixChangingVisitor;

        i3 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        $i0 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        $i1 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        $i1 = $i1 + -1;

        $i2 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        $i2 = $i2 + -1;

        interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixChangingVisitor: void start(int,int,int,int,int,int)>(i3, $i0, 0, $i1, 0, $i2);

        $i0 = 0;

     label1:
        i3 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockRows>;

        if $i0 >= i3 goto label8;

        i3 = $i0 * 36;

        $i1 = i3 + 36;

        $i2 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        $i1 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i1, $i2);

        $i2 = i3;

     label2:
        if $i2 >= $i1 goto label7;

        i5 = 0;

     label3:
        i4 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        if i5 >= i4 goto label6;

        $i6 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockWidth(int)>(i5);

        i4 = i5 * 36;

        $i7 = i4 + 36;

        $i8 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        $i7 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i7, $i8);

        $r3 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $i8 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        $i8 = $i8 * $i0;

        $i8 = $i8 + i5;

        r2 = $r3[$i8];

        $i8 = $i2 - i3;

        $i6 = $i8 * $i6;

     label4:
        if i4 >= $i7 goto label5;

        $r4 = r2[$i6];

        $r4 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixChangingVisitor: org.apache.commons.math3.FieldElement visit(int,int,org.apache.commons.math3.FieldElement)>($i2, i4, $r4);

        r2[$i6] = $r4;

        $i6 = $i6 + 1;

        i4 = i4 + 1;

        goto label4;

     label5:
        i5 = i5 + 1;

        goto label3;

     label6:
        $i2 = $i2 + 1;

        goto label2;

     label7:
        $i0 = $i0 + 1;

        goto label1;

     label8:
        $r4 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixChangingVisitor: org.apache.commons.math3.FieldElement end()>();

        return $r4;
    }
    public org.apache.commons.math3.FieldElement walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor, int, int, int, int) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0;
        org.apache.commons.math3.linear.FieldMatrixChangingVisitor r1;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        org.apache.commons.math3.FieldElement[] r2;
        org.apache.commons.math3.FieldElement[][] $r3;
        org.apache.commons.math3.FieldElement $r4;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldMatrixChangingVisitor;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void checkSubMatrixIndex(int,int,int,int)>($i0, $i1, $i2, $i3);

        i5 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        $i4 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixChangingVisitor: void start(int,int,int,int,int,int)>(i5, $i4, $i0, $i1, $i2, $i3);

        $i4 = $i0 / 36;

     label1:
        i5 = $i1 / 36;

        i5 = i5 + 1;

        if $i4 >= i5 goto label8;

        i5 = $i4 * 36;

        $i7 = staticinvoke <org.apache.commons.math3.util.FastMath: int max(int,int)>($i0, i5);

        $i8 = $i4 + 1;

        $i8 = $i8 * 36;

        $i9 = $i1 + 1;

        $i8 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i8, $i9);

     label2:
        if $i7 >= $i8 goto label7;

        $i9 = $i2 / 36;

     label3:
        $i10 = $i3 / 36;

        $i10 = $i10 + 1;

        if $i9 >= $i10 goto label6;

        $i11 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockWidth(int)>($i9);

        i6 = $i9 * 36;

        $i10 = staticinvoke <org.apache.commons.math3.util.FastMath: int max(int,int)>($i2, i6);

        $i12 = $i9 + 1;

        $i12 = $i12 * 36;

        $i13 = $i3 + 1;

        $i12 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i12, $i13);

        $r3 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $i13 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        $i13 = $i13 * $i4;

        $i13 = $i13 + $i9;

        r2 = $r3[$i13];

        $i13 = $i7 - i5;

        $i11 = $i13 * $i11;

        $i11 = $i11 + $i10;

        i6 = $i11 - i6;

     label4:
        if $i10 >= $i12 goto label5;

        $r4 = r2[i6];

        $r4 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixChangingVisitor: org.apache.commons.math3.FieldElement visit(int,int,org.apache.commons.math3.FieldElement)>($i7, $i10, $r4);

        r2[i6] = $r4;

        i6 = i6 + 1;

        $i10 = $i10 + 1;

        goto label4;

     label5:
        $i9 = $i9 + 1;

        goto label3;

     label6:
        $i7 = $i7 + 1;

        goto label2;

     label7:
        $i4 = $i4 + 1;

        goto label1;

     label8:
        $r4 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixChangingVisitor: org.apache.commons.math3.FieldElement end()>();

        return $r4;
    }
    public org.apache.commons.math3.FieldElement walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0;
        org.apache.commons.math3.linear.FieldMatrixPreservingVisitor r1;
        int $i0, $i1, $i2, i3, i4, i5, $i6, $i7, $i8;
        org.apache.commons.math3.FieldElement[] r2;
        org.apache.commons.math3.FieldElement[][] $r3;
        org.apache.commons.math3.FieldElement $r4;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldMatrixPreservingVisitor;

        i3 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        $i0 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        $i1 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        $i1 = $i1 + -1;

        $i2 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        $i2 = $i2 + -1;

        interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixPreservingVisitor: void start(int,int,int,int,int,int)>(i3, $i0, 0, $i1, 0, $i2);

        $i0 = 0;

     label1:
        i3 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockRows>;

        if $i0 >= i3 goto label8;

        i3 = $i0 * 36;

        $i1 = i3 + 36;

        $i2 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        $i1 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i1, $i2);

        $i2 = i3;

     label2:
        if $i2 >= $i1 goto label7;

        i5 = 0;

     label3:
        i4 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        if i5 >= i4 goto label6;

        $i6 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockWidth(int)>(i5);

        i4 = i5 * 36;

        $i7 = i4 + 36;

        $i8 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        $i7 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i7, $i8);

        $r3 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $i8 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        $i8 = $i8 * $i0;

        $i8 = $i8 + i5;

        r2 = $r3[$i8];

        $i8 = $i2 - i3;

        $i6 = $i8 * $i6;

     label4:
        if i4 >= $i7 goto label5;

        $r4 = r2[$i6];

        interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixPreservingVisitor: void visit(int,int,org.apache.commons.math3.FieldElement)>($i2, i4, $r4);

        $i6 = $i6 + 1;

        i4 = i4 + 1;

        goto label4;

     label5:
        i5 = i5 + 1;

        goto label3;

     label6:
        $i2 = $i2 + 1;

        goto label2;

     label7:
        $i0 = $i0 + 1;

        goto label1;

     label8:
        $r4 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixPreservingVisitor: org.apache.commons.math3.FieldElement end()>();

        return $r4;
    }
    public org.apache.commons.math3.FieldElement walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor, int, int, int, int) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0;
        org.apache.commons.math3.linear.FieldMatrixPreservingVisitor r1;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        org.apache.commons.math3.FieldElement[] r2;
        org.apache.commons.math3.FieldElement[][] $r3;
        org.apache.commons.math3.FieldElement $r4;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldMatrixPreservingVisitor;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void checkSubMatrixIndex(int,int,int,int)>($i0, $i1, $i2, $i3);

        i5 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        $i4 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixPreservingVisitor: void start(int,int,int,int,int,int)>(i5, $i4, $i0, $i1, $i2, $i3);

        $i4 = $i0 / 36;

     label1:
        i5 = $i1 / 36;

        i5 = i5 + 1;

        if $i4 >= i5 goto label8;

        i5 = $i4 * 36;

        $i7 = staticinvoke <org.apache.commons.math3.util.FastMath: int max(int,int)>($i0, i5);

        $i8 = $i4 + 1;

        $i8 = $i8 * 36;

        $i9 = $i1 + 1;

        $i8 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i8, $i9);

     label2:
        if $i7 >= $i8 goto label7;

        $i9 = $i2 / 36;

     label3:
        $i10 = $i3 / 36;

        $i10 = $i10 + 1;

        if $i9 >= $i10 goto label6;

        $i11 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockWidth(int)>($i9);

        i6 = $i9 * 36;

        $i10 = staticinvoke <org.apache.commons.math3.util.FastMath: int max(int,int)>($i2, i6);

        $i12 = $i9 + 1;

        $i12 = $i12 * 36;

        $i13 = $i3 + 1;

        $i12 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i12, $i13);

        $r3 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $i13 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        $i13 = $i13 * $i4;

        $i13 = $i13 + $i9;

        r2 = $r3[$i13];

        $i13 = $i7 - i5;

        $i11 = $i13 * $i11;

        $i11 = $i11 + $i10;

        i6 = $i11 - i6;

     label4:
        if $i10 >= $i12 goto label5;

        $r4 = r2[i6];

        interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixPreservingVisitor: void visit(int,int,org.apache.commons.math3.FieldElement)>($i7, $i10, $r4);

        i6 = i6 + 1;

        $i10 = $i10 + 1;

        goto label4;

     label5:
        $i9 = $i9 + 1;

        goto label3;

     label6:
        $i7 = $i7 + 1;

        goto label2;

     label7:
        $i4 = $i4 + 1;

        goto label1;

     label8:
        $r4 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixPreservingVisitor: org.apache.commons.math3.FieldElement end()>();

        return $r4;
    }
