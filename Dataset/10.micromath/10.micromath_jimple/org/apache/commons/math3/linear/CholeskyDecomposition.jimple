org.apache.commons.math3.linear.CholeskyDecomposition extends java.lang.Object
public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD
public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD
private org.apache.commons.math3.linear.RealMatrix cachedL
private org.apache.commons.math3.linear.RealMatrix cachedLT
private double[][] lTData
    public void <init>(org.apache.commons.math3.linear.RealMatrix)
    {
        org.apache.commons.math3.linear.CholeskyDecomposition r0;
        org.apache.commons.math3.linear.RealMatrix $r1;

        r0 := @this: org.apache.commons.math3.linear.CholeskyDecomposition;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        specialinvoke r0.<org.apache.commons.math3.linear.CholeskyDecomposition: void <init>(org.apache.commons.math3.linear.RealMatrix,double,double)>($r1, 1.0E-15, 1.0E-10);

        return;
    }
    public void <init>(org.apache.commons.math3.linear.RealMatrix, double, double)
    {
        org.apache.commons.math3.linear.CholeskyDecomposition r0;
        org.apache.commons.math3.linear.RealMatrix $r1;
        double $d0, $d1, d2, d3, d4, $d5;
        double[] r2, r3;
        boolean $z0;
        org.apache.commons.math3.linear.NonSquareMatrixException $r4;
        int $i0, $i1, i2, i4;
        double[][] $r5;
        byte $b3;
        org.apache.commons.math3.linear.NonSymmetricMatrixException $r6;
        org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException $r7;

        r0 := @this: org.apache.commons.math3.linear.CholeskyDecomposition;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        $d0 := @parameter1: double;

        $d1 := @parameter2: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: boolean isSquare()>();

        if $z0 != 0 goto label01;

        $r4 = new org.apache.commons.math3.linear.NonSquareMatrixException;

        $i0 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $i1 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        specialinvoke $r4.<org.apache.commons.math3.linear.NonSquareMatrixException: void <init>(int,int)>($i0, $i1);

        throw $r4;

     label01:
        $i0 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $r5 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: double[][] getData()>();

        r0.<org.apache.commons.math3.linear.CholeskyDecomposition: double[][] lTData> = $r5;

        r0.<org.apache.commons.math3.linear.CholeskyDecomposition: org.apache.commons.math3.linear.RealMatrix cachedL> = null;

        r0.<org.apache.commons.math3.linear.CholeskyDecomposition: org.apache.commons.math3.linear.RealMatrix cachedLT> = null;

        $i1 = 0;

     label02:
        if $i1 >= $i0 goto label06;

        $r5 = r0.<org.apache.commons.math3.linear.CholeskyDecomposition: double[][] lTData>;

        r2 = $r5[$i1];

        i2 = $i1 + 1;

     label03:
        if i2 >= $i0 goto label05;

        $r5 = r0.<org.apache.commons.math3.linear.CholeskyDecomposition: double[][] lTData>;

        r3 = $r5[i2];

        d2 = r2[i2];

        d3 = r3[$i1];

        d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d2);

        $d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d3);

        d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>(d4, $d5);

        d4 = $d0 * d4;

        d2 = d2 - d3;

        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d2);

        $b3 = d2 cmpl d4;

        if $b3 <= 0 goto label04;

        $r6 = new org.apache.commons.math3.linear.NonSymmetricMatrixException;

        specialinvoke $r6.<org.apache.commons.math3.linear.NonSymmetricMatrixException: void <init>(int,int,double)>($i1, i2, $d0);

        throw $r6;

     label04:
        r3[$i1] = 0.0;

        i2 = i2 + 1;

        goto label03;

     label05:
        $i1 = $i1 + 1;

        goto label02;

     label06:
        $i1 = 0;

     label07:
        if $i1 >= $i0 goto label13;

        $r5 = r0.<org.apache.commons.math3.linear.CholeskyDecomposition: double[][] lTData>;

        r2 = $r5[$i1];

        $d0 = r2[$i1];

        $b3 = $d0 cmpg $d1;

        if $b3 > 0 goto label08;

        $r7 = new org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException;

        $d0 = r2[$i1];

        specialinvoke $r7.<org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException: void <init>(double,int,double)>($d0, $i1, $d1);

        throw $r7;

     label08:
        $d0 = r2[$i1];

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d0);

        r2[$i1] = $d0;

        $d0 = r2[$i1];

        $d0 = 1.0 / $d0;

        i2 = $i0 + -1;

     label09:
        if i2 <= $i1 goto label12;

        d2 = r2[i2];

        d2 = d2 * $d0;

        r2[i2] = d2;

        $r5 = r0.<org.apache.commons.math3.linear.CholeskyDecomposition: double[][] lTData>;

        r3 = $r5[i2];

        i4 = i2;

     label10:
        if i4 >= $i0 goto label11;

        d2 = r3[i4];

        d4 = r2[i2];

        d3 = r2[i4];

        d3 = d4 * d3;

        d2 = d2 - d3;

        r3[i4] = d2;

        i4 = i4 + 1;

        goto label10;

     label11:
        i2 = i2 + -1;

        goto label09;

     label12:
        $i1 = $i1 + 1;

        goto label07;

     label13:
        return;
    }
    public double getDeterminant()
    {
        org.apache.commons.math3.linear.CholeskyDecomposition r0;
        double d0, d1;
        int i0, $i1;
        double[][] $r1;
        double[] $r2;

        r0 := @this: org.apache.commons.math3.linear.CholeskyDecomposition;

        d1 = 1.0;

        i0 = 0;

     label1:
        $r1 = r0.<org.apache.commons.math3.linear.CholeskyDecomposition: double[][] lTData>;

        $i1 = lengthof $r1;

        if i0 >= $i1 goto label2;

        $r1 = r0.<org.apache.commons.math3.linear.CholeskyDecomposition: double[][] lTData>;

        $r2 = $r1[i0];

        d0 = $r2[i0];

        d0 = d0 * d0;

        d1 = d1 * d0;

        i0 = i0 + 1;

        goto label1;

     label2:
        return d1;
    }
    public org.apache.commons.math3.linear.RealMatrix getL()
    {
        org.apache.commons.math3.linear.CholeskyDecomposition r0;
        org.apache.commons.math3.linear.RealMatrix $r1;

        r0 := @this: org.apache.commons.math3.linear.CholeskyDecomposition;

        $r1 = r0.<org.apache.commons.math3.linear.CholeskyDecomposition: org.apache.commons.math3.linear.RealMatrix cachedL>;

        if $r1 != null goto label1;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.linear.CholeskyDecomposition: org.apache.commons.math3.linear.RealMatrix getLT()>();

        $r1 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix transpose()>();

        r0.<org.apache.commons.math3.linear.CholeskyDecomposition: org.apache.commons.math3.linear.RealMatrix cachedL> = $r1;

     label1:
        $r1 = r0.<org.apache.commons.math3.linear.CholeskyDecomposition: org.apache.commons.math3.linear.RealMatrix cachedL>;

        return $r1;
    }
    public org.apache.commons.math3.linear.RealMatrix getLT()
    {
        org.apache.commons.math3.linear.CholeskyDecomposition r0;
        org.apache.commons.math3.linear.RealMatrix $r1;
        double[][] $r2;

        r0 := @this: org.apache.commons.math3.linear.CholeskyDecomposition;

        $r1 = r0.<org.apache.commons.math3.linear.CholeskyDecomposition: org.apache.commons.math3.linear.RealMatrix cachedLT>;

        if $r1 != null goto label1;

        $r2 = r0.<org.apache.commons.math3.linear.CholeskyDecomposition: double[][] lTData>;

        $r1 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix createRealMatrix(double[][])>($r2);

        r0.<org.apache.commons.math3.linear.CholeskyDecomposition: org.apache.commons.math3.linear.RealMatrix cachedLT> = $r1;

     label1:
        $r1 = r0.<org.apache.commons.math3.linear.CholeskyDecomposition: org.apache.commons.math3.linear.RealMatrix cachedLT>;

        return $r1;
    }
    public org.apache.commons.math3.linear.DecompositionSolver getSolver()
    {
        org.apache.commons.math3.linear.CholeskyDecomposition r0;
        org.apache.commons.math3.linear.CholeskyDecomposition$Solver $r1;
        double[][] $r2;

        r0 := @this: org.apache.commons.math3.linear.CholeskyDecomposition;

        $r1 = new org.apache.commons.math3.linear.CholeskyDecomposition$Solver;

        $r2 = r0.<org.apache.commons.math3.linear.CholeskyDecomposition: double[][] lTData>;

        specialinvoke $r1.<org.apache.commons.math3.linear.CholeskyDecomposition$Solver: void <init>(double[][],org.apache.commons.math3.linear.CholeskyDecomposition$1)>($r2, null);

        return $r1;
    }
