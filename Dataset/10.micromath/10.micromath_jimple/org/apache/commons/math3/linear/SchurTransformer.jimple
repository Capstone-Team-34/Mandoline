org.apache.commons.math3.linear.SchurTransformer extends java.lang.Object
private static final int MAX_ITERATIONS
private org.apache.commons.math3.linear.RealMatrix cachedP
private org.apache.commons.math3.linear.RealMatrix cachedPt
private org.apache.commons.math3.linear.RealMatrix cachedT
private final double epsilon
private final double[][] matrixP
private final double[][] matrixT
    void <init>(org.apache.commons.math3.linear.RealMatrix)
    {
        org.apache.commons.math3.linear.SchurTransformer r0;
        org.apache.commons.math3.linear.RealMatrix $r1;
        org.apache.commons.math3.linear.HessenbergTransformer r2;
        double $d0;
        boolean $z0;
        org.apache.commons.math3.linear.NonSquareMatrixException $r3;
        int $i0, $i1;
        double[][] $r4;

        r0 := @this: org.apache.commons.math3.linear.SchurTransformer;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $d0 = <org.apache.commons.math3.util.Precision: double EPSILON>;

        r0.<org.apache.commons.math3.linear.SchurTransformer: double epsilon> = $d0;

        $z0 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: boolean isSquare()>();

        if $z0 != 0 goto label1;

        $r3 = new org.apache.commons.math3.linear.NonSquareMatrixException;

        $i0 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $i1 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        specialinvoke $r3.<org.apache.commons.math3.linear.NonSquareMatrixException: void <init>(int,int)>($i0, $i1);

        throw $r3;

     label1:
        r2 = new org.apache.commons.math3.linear.HessenbergTransformer;

        specialinvoke r2.<org.apache.commons.math3.linear.HessenbergTransformer: void <init>(org.apache.commons.math3.linear.RealMatrix)>($r1);

        $r1 = virtualinvoke r2.<org.apache.commons.math3.linear.HessenbergTransformer: org.apache.commons.math3.linear.RealMatrix getH()>();

        $r4 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: double[][] getData()>();

        r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT> = $r4;

        $r1 = virtualinvoke r2.<org.apache.commons.math3.linear.HessenbergTransformer: org.apache.commons.math3.linear.RealMatrix getP()>();

        $r4 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: double[][] getData()>();

        r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixP> = $r4;

        r0.<org.apache.commons.math3.linear.SchurTransformer: org.apache.commons.math3.linear.RealMatrix cachedT> = null;

        r0.<org.apache.commons.math3.linear.SchurTransformer: org.apache.commons.math3.linear.RealMatrix cachedP> = null;

        r0.<org.apache.commons.math3.linear.SchurTransformer: org.apache.commons.math3.linear.RealMatrix cachedPt> = null;

        specialinvoke r0.<org.apache.commons.math3.linear.SchurTransformer: void transform()>();

        return;
    }
    private void computeShift(int, int, int, org.apache.commons.math3.linear.SchurTransformer$ShiftInfo)
    {
        org.apache.commons.math3.linear.SchurTransformer r0;
        int $i0, $i1, $i2;
        org.apache.commons.math3.linear.SchurTransformer$ShiftInfo $r1;
        double[][] $r2;
        double[] $r3;
        double $d0, $d1, $d2, $d3, $d4;
        byte $b3;

        r0 := @this: org.apache.commons.math3.linear.SchurTransformer;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $r1 := @parameter3: org.apache.commons.math3.linear.SchurTransformer$ShiftInfo;

        $r2 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $r3 = $r2[$i1];

        $d0 = $r3[$i1];

        $r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double x> = $d0;

        $r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double w> = 0.0;

        $r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double y> = 0.0;

        if $i0 >= $i1 goto label1;

        $r2 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $i0 = $i1 + -1;

        $r3 = $r2[$i0];

        $i0 = $i1 + -1;

        $d0 = $r3[$i0];

        $r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double y> = $d0;

        $r2 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $r3 = $r2[$i1];

        $i0 = $i1 + -1;

        $d0 = $r3[$i0];

        $r2 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $i0 = $i1 + -1;

        $r3 = $r2[$i0];

        $d1 = $r3[$i1];

        $d0 = $d0 * $d1;

        $r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double w> = $d0;

     label1:
        if $i2 != 10 goto label4;

        $d0 = $r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double exShift>;

        $d1 = $r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double x>;

        $d0 = $d0 + $d1;

        $r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double exShift> = $d0;

        $i0 = 0;

     label2:
        if $i0 > $i1 goto label3;

        $r2 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $r3 = $r2[$i0];

        $d0 = $r3[$i0];

        $d1 = $r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double x>;

        $d0 = $d0 - $d1;

        $r3[$i0] = $d0;

        $i0 = $i0 + 1;

        goto label2;

     label3:
        $r2 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $r3 = $r2[$i1];

        $i0 = $i1 + -1;

        $d0 = $r3[$i0];

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        $r2 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $i0 = $i1 + -1;

        $r3 = $r2[$i0];

        $i0 = $i1 + -2;

        $d1 = $r3[$i0];

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d1);

        $d0 = $d0 + $d1;

        $d1 = 0.75 * $d0;

        $r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double x> = $d1;

        $d1 = 0.75 * $d0;

        $r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double y> = $d1;

        $d1 = -0.4375 * $d0;

        $d0 = $d1 * $d0;

        $r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double w> = $d0;

     label4:
        if $i2 != 30 goto label8;

        $d0 = $r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double y>;

        $d1 = $r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double x>;

        $d0 = $d0 - $d1;

        $d0 = $d0 / 2.0;

        $d0 = $d0 * $d0;

        $d1 = $r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double w>;

        $d0 = $d0 + $d1;

        $b3 = $d0 cmpl 0.0;

        if $b3 <= 0 goto label8;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d0);

        $d0 = $d1;

        $d2 = $r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double y>;

        $d3 = $r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double x>;

        $b3 = $d2 cmpg $d3;

        if $b3 >= 0 goto label5;

        $d0 = neg $d1;

     label5:
        $d1 = $r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double x>;

        $d2 = $r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double w>;

        $d3 = $r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double y>;

        $d4 = $r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double x>;

        $d3 = $d3 - $d4;

        $d3 = $d3 / 2.0;

        $d0 = $d3 + $d0;

        $d0 = $d2 / $d0;

        $d0 = $d1 - $d0;

        $i0 = 0;

     label6:
        if $i0 > $i1 goto label7;

        $r2 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $r3 = $r2[$i0];

        $d1 = $r3[$i0];

        $d1 = $d1 - $d0;

        $r3[$i0] = $d1;

        $i0 = $i0 + 1;

        goto label6;

     label7:
        $d1 = $r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double exShift>;

        $d0 = $d1 + $d0;

        $r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double exShift> = $d0;

        $r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double w> = 0.964;

        $r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double y> = 0.964;

        $r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double x> = 0.964;

     label8:
        return;
    }
    private int findSmallSubDiagonalElement(int, double)
    {
        org.apache.commons.math3.linear.SchurTransformer r0;
        int $i0, $i1;
        double $d0, $d1, $d2, $d3;
        double[][] $r1;
        double[] $r2;
        byte $b2;

        r0 := @this: org.apache.commons.math3.linear.SchurTransformer;

        $i0 := @parameter0: int;

        $d0 := @parameter1: double;

     label1:
        if $i0 <= 0 goto label4;

        $r1 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $i1 = $i0 + -1;

        $r2 = $r1[$i1];

        $i1 = $i0 + -1;

        $d1 = $r2[$i1];

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d1);

        $r1 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $r2 = $r1[$i0];

        $d2 = $r2[$i0];

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d2);

        $d1 = $d1 + $d2;

        $b2 = $d1 cmpl 0.0;

        if $b2 != 0 goto label2;

        $d1 = $d0;

     label2:
        $r1 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $r2 = $r1[$i0];

        $i1 = $i0 + -1;

        $d2 = $r2[$i1];

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d2);

        $d3 = r0.<org.apache.commons.math3.linear.SchurTransformer: double epsilon>;

        $d1 = $d3 * $d1;

        $b2 = $d2 cmpg $d1;

        if $b2 >= 0 goto label3;

        return $i0;

     label3:
        $i0 = $i0 + -1;

        goto label1;

     label4:
        return $i0;
    }
    private double getNorm()
    {
        org.apache.commons.math3.linear.SchurTransformer r0;
        double d0, $d1;
        int i0, $i1, $i2;
        double[][] $r1;
        double[] $r2;

        r0 := @this: org.apache.commons.math3.linear.SchurTransformer;

        d0 = 0.0;

        i0 = 0;

     label1:
        $r1 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $i1 = lengthof $r1;

        if i0 >= $i1 goto label4;

        $i1 = i0 + -1;

        $i1 = staticinvoke <org.apache.commons.math3.util.FastMath: int max(int,int)>($i1, 0);

     label2:
        $r1 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $i2 = lengthof $r1;

        if $i1 >= $i2 goto label3;

        $r1 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $r2 = $r1[i0];

        $d1 = $r2[$i1];

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d1);

        d0 = d0 + $d1;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        i0 = i0 + 1;

        goto label1;

     label4:
        return d0;
    }
    private int initQRStep(int, int, org.apache.commons.math3.linear.SchurTransformer$ShiftInfo, double[])
    {
        org.apache.commons.math3.linear.SchurTransformer r0;
        int $i0, $i1, $i2;
        org.apache.commons.math3.linear.SchurTransformer$ShiftInfo $r1;
        double[] $r2, $r4;
        double d0, d1, d2, $d3, $d4;
        double[][] $r3;
        byte $b3;

        r0 := @this: org.apache.commons.math3.linear.SchurTransformer;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 := @parameter2: org.apache.commons.math3.linear.SchurTransformer$ShiftInfo;

        $r2 := @parameter3: double[];

        $i1 = $i1 + -2;

     label1:
        if $i1 < $i0 goto label3;

        $r3 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $r4 = $r3[$i1];

        d1 = $r4[$i1];

        d0 = $r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double x>;

        d0 = d0 - d1;

        d2 = $r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double y>;

        d2 = d2 - d1;

        $d3 = d0 * d2;

        $d4 = $r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double w>;

        $d3 = $d3 - $d4;

        $r3 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $i2 = $i1 + 1;

        $r4 = $r3[$i2];

        $d4 = $r4[$i1];

        $d3 = $d3 / $d4;

        $r3 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $r4 = $r3[$i1];

        $i2 = $i1 + 1;

        $d4 = $r4[$i2];

        $d3 = $d3 + $d4;

        $r2[0] = $d3;

        $r3 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $i2 = $i1 + 1;

        $r4 = $r3[$i2];

        $i2 = $i1 + 1;

        $d3 = $r4[$i2];

        $d3 = $d3 - d1;

        d0 = $d3 - d0;

        d0 = d0 - d2;

        $r2[1] = d0;

        $r3 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $i2 = $i1 + 2;

        $r4 = $r3[$i2];

        $i2 = $i1 + 1;

        d0 = $r4[$i2];

        $r2[2] = d0;

        if $i1 != $i0 goto label2;

        return $i1;

     label2:
        $r3 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $r4 = $r3[$i1];

        $i2 = $i1 + -1;

        d0 = $r4[$i2];

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d0);

        d2 = $r2[1];

        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d2);

        $d3 = $r2[2];

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d3);

        d2 = d2 + $d3;

        d0 = d0 * d2;

        d2 = $r2[0];

        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d2);

        $r3 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $i2 = $i1 + -1;

        $r4 = $r3[$i2];

        $i2 = $i1 + -1;

        $d3 = $r4[$i2];

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d3);

        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d1);

        d1 = $d3 + d1;

        $r3 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $i2 = $i1 + 1;

        $r4 = $r3[$i2];

        $i2 = $i1 + 1;

        $d3 = $r4[$i2];

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d3);

        d1 = d1 + $d3;

        d1 = d2 * d1;

        d2 = r0.<org.apache.commons.math3.linear.SchurTransformer: double epsilon>;

        d1 = d2 * d1;

        $b3 = d0 cmpg d1;

        if $b3 < 0 goto label3;

        $i1 = $i1 + -1;

        goto label1;

     label3:
        return $i1;
    }
    private void performDoubleQRStep(int, int, int, org.apache.commons.math3.linear.SchurTransformer$ShiftInfo, double[])
    {
        org.apache.commons.math3.linear.SchurTransformer r0;
        int $i0, $i1, $i2, i3, i4, i5, $i7, $i8;
        org.apache.commons.math3.linear.SchurTransformer$ShiftInfo $r1;
        double[] $r2, $r4;
        double d0, d1, d2, d3, $d4, $d5;
        double[][] $r3;
        boolean z0, $z1;
        byte $b6;

        r0 := @this: org.apache.commons.math3.linear.SchurTransformer;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $r1 := @parameter3: org.apache.commons.math3.linear.SchurTransformer$ShiftInfo;

        $r2 := @parameter4: double[];

        $r3 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        i4 = lengthof $r3;

        d1 = $r2[0];

        d2 = $r2[1];

        d3 = $r2[2];

        i5 = $i1;

     label01:
        i3 = $i2 + -1;

        if i5 > i3 goto label20;

        i3 = $i2 + -1;

        if i5 == i3 goto label05;

        z0 = 1;

     label02:
        if i5 == $i1 goto label08;

        $r3 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $r2 = $r3[i5];

        i3 = i5 + -1;

        d1 = $r2[i3];

        $r3 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        i3 = i5 + 1;

        $r2 = $r3[i3];

        i3 = i5 + -1;

        d2 = $r2[i3];

        if z0 == 0 goto label06;

        $r3 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        i3 = i5 + 2;

        $r2 = $r3[i3];

        i3 = i5 + -1;

        d3 = $r2[i3];

     label03:
        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d1);

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d2);

        d0 = d0 + $d4;

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d3);

        d0 = d0 + $d4;

        $r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double x> = d0;

        d0 = $r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double x>;

        $d4 = r0.<org.apache.commons.math3.linear.SchurTransformer: double epsilon>;

        $z1 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,double)>(d0, 0.0, $d4);

        if $z1 == 0 goto label07;

     label04:
        i5 = i5 + 1;

        goto label01;

     label05:
        z0 = 0;

        goto label02;

     label06:
        d3 = 0.0;

        goto label03;

     label07:
        d0 = $r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double x>;

        d1 = d1 / d0;

        d0 = $r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double x>;

        d2 = d2 / d0;

        d0 = $r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double x>;

        d3 = d3 / d0;

     label08:
        d0 = d1 * d1;

        $d4 = d2 * d2;

        d0 = d0 + $d4;

        $d4 = d3 * d3;

        d0 = d0 + $d4;

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d0);

        d0 = $d4;

        $b6 = d1 cmpg 0.0;

        if $b6 >= 0 goto label09;

        d0 = neg $d4;

     label09:
        $b6 = d0 cmpl 0.0;

        if $b6 == 0 goto label04;

        if i5 == $i1 goto label13;

        $r3 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $r2 = $r3[i5];

        i3 = i5 + -1;

        $d4 = neg d0;

        $d5 = $r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double x>;

        $d4 = $d4 * $d5;

        $r2[i3] = $d4;

     label10:
        d1 = d1 + d0;

        $d4 = d1 / d0;

        $r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double x> = $d4;

        $d4 = d2 / d0;

        $r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double y> = $d4;

        d0 = d3 / d0;

        d2 = d2 / d1;

        d3 = d3 / d1;

        i3 = i5;

     label11:
        if i3 >= i4 goto label14;

        $r3 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $r2 = $r3[i5];

        d1 = $r2[i3];

        $r3 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $i7 = i5 + 1;

        $r2 = $r3[$i7];

        $d4 = $r2[i3];

        $d4 = $d4 * d2;

        d1 = d1 + $d4;

        if z0 == 0 goto label12;

        $r3 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $i7 = i5 + 2;

        $r2 = $r3[$i7];

        $d4 = $r2[i3];

        $d4 = $d4 * d3;

        d1 = d1 + $d4;

        $r3 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $i7 = i5 + 2;

        $r2 = $r3[$i7];

        $d4 = $r2[i3];

        $d5 = d1 * d0;

        $d4 = $d4 - $d5;

        $r2[i3] = $d4;

     label12:
        $r3 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $r2 = $r3[i5];

        $d4 = $r2[i3];

        $d5 = $r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double x>;

        $d5 = $d5 * d1;

        $d4 = $d4 - $d5;

        $r2[i3] = $d4;

        $r3 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $i7 = i5 + 1;

        $r2 = $r3[$i7];

        $d4 = $r2[i3];

        $d5 = $r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double y>;

        $d5 = $d5 * d1;

        $d4 = $d4 - $d5;

        $r2[i3] = $d4;

        i3 = i3 + 1;

        goto label11;

     label13:
        if $i0 == $i1 goto label10;

        $r3 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $r2 = $r3[i5];

        i3 = i5 + -1;

        $r3 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $r4 = $r3[i5];

        $i7 = i5 + -1;

        $d4 = $r4[$i7];

        $d4 = neg $d4;

        $r2[i3] = $d4;

        goto label10;

     label14:
        i3 = 0;

     label15:
        $i7 = i5 + 3;

        $i7 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i2, $i7);

        if i3 > $i7 goto label17;

        d1 = $r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double x>;

        $r3 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $r2 = $r3[i3];

        $d4 = $r2[i5];

        d1 = d1 * $d4;

        $d4 = $r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double y>;

        $r3 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $r2 = $r3[i3];

        $i7 = i5 + 1;

        $d5 = $r2[$i7];

        $d4 = $d4 * $d5;

        d1 = d1 + $d4;

        if z0 == 0 goto label16;

        $r3 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $r2 = $r3[i3];

        $i7 = i5 + 2;

        $d4 = $r2[$i7];

        $d4 = $d4 * d0;

        d1 = d1 + $d4;

        $r3 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $r2 = $r3[i3];

        $i7 = i5 + 2;

        $d4 = $r2[$i7];

        $d5 = d1 * d3;

        $d4 = $d4 - $d5;

        $r2[$i7] = $d4;

     label16:
        $r3 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $r2 = $r3[i3];

        $d4 = $r2[i5];

        $d4 = $d4 - d1;

        $r2[i5] = $d4;

        $r3 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $r2 = $r3[i3];

        $i7 = i5 + 1;

        $d4 = $r2[$i7];

        $d5 = d1 * d2;

        $d4 = $d4 - $d5;

        $r2[$i7] = $d4;

        i3 = i3 + 1;

        goto label15;

     label17:
        $r3 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        i3 = lengthof $r3;

        i3 = i3 + -1;

        $i7 = 0;

     label18:
        if $i7 > i3 goto label04;

        d1 = $r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double x>;

        $r3 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixP>;

        $r2 = $r3[$i7];

        $d4 = $r2[i5];

        d1 = d1 * $d4;

        $d4 = $r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double y>;

        $r3 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixP>;

        $r2 = $r3[$i7];

        $i8 = i5 + 1;

        $d5 = $r2[$i8];

        $d4 = $d4 * $d5;

        d1 = d1 + $d4;

        if z0 == 0 goto label19;

        $r3 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixP>;

        $r2 = $r3[$i7];

        $i8 = i5 + 2;

        $d4 = $r2[$i8];

        $d4 = $d4 * d0;

        d1 = d1 + $d4;

        $r3 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixP>;

        $r2 = $r3[$i7];

        $i8 = i5 + 2;

        $d4 = $r2[$i8];

        $d5 = d1 * d3;

        $d4 = $d4 - $d5;

        $r2[$i8] = $d4;

     label19:
        $r3 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixP>;

        $r2 = $r3[$i7];

        $d4 = $r2[i5];

        $d4 = $d4 - d1;

        $r2[i5] = $d4;

        $r3 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixP>;

        $r2 = $r3[$i7];

        $i8 = i5 + 1;

        $d4 = $r2[$i8];

        $d5 = d1 * d2;

        $d4 = $d4 - $d5;

        $r2[$i8] = $d4;

        $i7 = $i7 + 1;

        goto label18;

     label20:
        $i0 = $i1 + 2;

     label21:
        if $i0 > $i2 goto label23;

        $r3 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $r2 = $r3[$i0];

        i4 = $i0 + -2;

        $r2[i4] = 0.0;

        i4 = $i1 + 2;

        if $i0 <= i4 goto label22;

        $r3 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $r2 = $r3[$i0];

        i4 = $i0 + -3;

        $r2[i4] = 0.0;

     label22:
        $i0 = $i0 + 1;

        goto label21;

     label23:
        return;
    }
    private void transform()
    {
        org.apache.commons.math3.linear.SchurTransformer r0;
        org.apache.commons.math3.linear.SchurTransformer$ShiftInfo r1;
        double[] r2, $r4;
        int i0, i1, i2, $i3, $i4;
        double d0, d1, $d2, $d3, $d4, $d5;
        double[][] $r3;
        byte $b5;
        org.apache.commons.math3.exception.MaxCountExceededException $r5;
        org.apache.commons.math3.exception.util.LocalizedFormats $r6;
        java.lang.Integer $r7;
        java.lang.Object[] $r8;

        r0 := @this: org.apache.commons.math3.linear.SchurTransformer;

        $r3 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        i0 = lengthof $r3;

        $d2 = specialinvoke r0.<org.apache.commons.math3.linear.SchurTransformer: double getNorm()>();

        r1 = new org.apache.commons.math3.linear.SchurTransformer$ShiftInfo;

        specialinvoke r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: void <init>(org.apache.commons.math3.linear.SchurTransformer$1)>(null);

        i1 = 0;

        i2 = i0 + -1;

     label01:
        if i2 < 0 goto label13;

        $i3 = specialinvoke r0.<org.apache.commons.math3.linear.SchurTransformer: int findSmallSubDiagonalElement(int,double)>(i2, $d2);

        if $i3 != i2 goto label02;

        $r3 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        r2 = $r3[i2];

        d1 = r2[i2];

        $d3 = r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double exShift>;

        d1 = d1 + $d3;

        r2[i2] = d1;

        i2 = i2 + -1;

        i1 = 0;

        goto label01;

     label02:
        $i4 = i2 + -1;

        if $i3 != $i4 goto label11;

        $r3 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        i1 = i2 + -1;

        r2 = $r3[i1];

        i1 = i2 + -1;

        d1 = r2[i1];

        $r3 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        r2 = $r3[i2];

        $d3 = r2[i2];

        d1 = d1 - $d3;

        d1 = d1 / 2.0;

        $d3 = d1 * d1;

        $r3 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        r2 = $r3[i2];

        i1 = i2 + -1;

        d0 = r2[i1];

        $r3 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        i1 = i2 + -1;

        r2 = $r3[i1];

        $d4 = r2[i2];

        d0 = d0 * $d4;

        $d3 = $d3 + d0;

        $r3 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        r2 = $r3[i2];

        d0 = r2[i2];

        $d4 = r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double exShift>;

        d0 = d0 + $d4;

        r2[i2] = d0;

        $r3 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        i1 = i2 + -1;

        r2 = $r3[i1];

        i1 = i2 + -1;

        d0 = r2[i1];

        $d4 = r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double exShift>;

        d0 = d0 + $d4;

        r2[i1] = d0;

        $b5 = $d3 cmpl 0.0;

        if $b5 < 0 goto label10;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d3);

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d3);

        $b5 = d1 cmpl 0.0;

        if $b5 < 0 goto label05;

        $d3 = $d3 + d1;

     label03:
        $r3 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        r2 = $r3[i2];

        i1 = i2 + -1;

        d1 = r2[i1];

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d1);

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d3);

        d0 = d0 + $d4;

        d1 = d1 / d0;

        $d3 = $d3 / d0;

        d0 = d1 * d1;

        $d4 = $d3 * $d3;

        d0 = d0 + $d4;

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d0);

        d1 = d1 / d0;

        $d3 = $d3 / d0;

        i1 = i2 + -1;

     label04:
        if i1 >= i0 goto label06;

        $r3 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $i3 = i2 + -1;

        r2 = $r3[$i3];

        d0 = r2[i1];

        $r3 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $i3 = i2 + -1;

        r2 = $r3[$i3];

        $d4 = $d3 * d0;

        $r3 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $r4 = $r3[i2];

        $d5 = $r4[i1];

        $d5 = $d5 * d1;

        $d4 = $d4 + $d5;

        r2[i1] = $d4;

        $r3 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        r2 = $r3[i2];

        $r3 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $r4 = $r3[i2];

        $d4 = $r4[i1];

        $d4 = $d4 * $d3;

        d0 = d1 * d0;

        d0 = $d4 - d0;

        r2[i1] = d0;

        i1 = i1 + 1;

        goto label04;

     label05:
        $d3 = d1 - $d3;

        goto label03;

     label06:
        i1 = 0;

     label07:
        if i1 > i2 goto label08;

        $r3 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        r2 = $r3[i1];

        $i3 = i2 + -1;

        d0 = r2[$i3];

        $r3 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        r2 = $r3[i1];

        $i3 = i2 + -1;

        $d4 = $d3 * d0;

        $r3 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $r4 = $r3[i1];

        $d5 = $r4[i2];

        $d5 = $d5 * d1;

        $d4 = $d4 + $d5;

        r2[$i3] = $d4;

        $r3 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        r2 = $r3[i1];

        $r3 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $r4 = $r3[i1];

        $d4 = $r4[i2];

        $d4 = $d4 * $d3;

        d0 = d1 * d0;

        d0 = $d4 - d0;

        r2[i2] = d0;

        i1 = i1 + 1;

        goto label07;

     label08:
        i1 = 0;

     label09:
        $i3 = i0 + -1;

        if i1 > $i3 goto label10;

        $r3 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixP>;

        r2 = $r3[i1];

        $i3 = i2 + -1;

        d0 = r2[$i3];

        $r3 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixP>;

        r2 = $r3[i1];

        $i3 = i2 + -1;

        $d4 = $d3 * d0;

        $r3 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixP>;

        $r4 = $r3[i1];

        $d5 = $r4[i2];

        $d5 = $d5 * d1;

        $d4 = $d4 + $d5;

        r2[$i3] = $d4;

        $r3 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixP>;

        r2 = $r3[i1];

        $r3 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixP>;

        $r4 = $r3[i1];

        $d4 = $r4[i2];

        $d4 = $d4 * $d3;

        d0 = d1 * d0;

        d0 = $d4 - d0;

        r2[i2] = d0;

        i1 = i1 + 1;

        goto label09;

     label10:
        i2 = i2 + -2;

        i1 = 0;

        goto label01;

     label11:
        specialinvoke r0.<org.apache.commons.math3.linear.SchurTransformer: void computeShift(int,int,int,org.apache.commons.math3.linear.SchurTransformer$ShiftInfo)>($i3, i2, i1, r1);

        i1 = i1 + 1;

        if i1 <= 100 goto label12;

        $r5 = new org.apache.commons.math3.exception.MaxCountExceededException;

        $r6 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats CONVERGENCE_FAILED>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(100);

        $r8 = newarray (java.lang.Object)[0];

        specialinvoke $r5.<org.apache.commons.math3.exception.MaxCountExceededException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])>($r6, $r7, $r8);

        throw $r5;

     label12:
        r2 = newarray (double)[3];

        $i4 = specialinvoke r0.<org.apache.commons.math3.linear.SchurTransformer: int initQRStep(int,int,org.apache.commons.math3.linear.SchurTransformer$ShiftInfo,double[])>($i3, i2, r1, r2);

        specialinvoke r0.<org.apache.commons.math3.linear.SchurTransformer: void performDoubleQRStep(int,int,int,org.apache.commons.math3.linear.SchurTransformer$ShiftInfo,double[])>($i3, $i4, i2, r1, r2);

        goto label01;

     label13:
        return;
    }
    public org.apache.commons.math3.linear.RealMatrix getP()
    {
        org.apache.commons.math3.linear.SchurTransformer r0;
        org.apache.commons.math3.linear.RealMatrix $r1;
        double[][] $r2;

        r0 := @this: org.apache.commons.math3.linear.SchurTransformer;

        $r1 = r0.<org.apache.commons.math3.linear.SchurTransformer: org.apache.commons.math3.linear.RealMatrix cachedP>;

        if $r1 != null goto label1;

        $r2 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixP>;

        $r1 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix createRealMatrix(double[][])>($r2);

        r0.<org.apache.commons.math3.linear.SchurTransformer: org.apache.commons.math3.linear.RealMatrix cachedP> = $r1;

     label1:
        $r1 = r0.<org.apache.commons.math3.linear.SchurTransformer: org.apache.commons.math3.linear.RealMatrix cachedP>;

        return $r1;
    }
    public org.apache.commons.math3.linear.RealMatrix getPT()
    {
        org.apache.commons.math3.linear.SchurTransformer r0;
        org.apache.commons.math3.linear.RealMatrix $r1;

        r0 := @this: org.apache.commons.math3.linear.SchurTransformer;

        $r1 = r0.<org.apache.commons.math3.linear.SchurTransformer: org.apache.commons.math3.linear.RealMatrix cachedPt>;

        if $r1 != null goto label1;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.linear.SchurTransformer: org.apache.commons.math3.linear.RealMatrix getP()>();

        $r1 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix transpose()>();

        r0.<org.apache.commons.math3.linear.SchurTransformer: org.apache.commons.math3.linear.RealMatrix cachedPt> = $r1;

     label1:
        $r1 = r0.<org.apache.commons.math3.linear.SchurTransformer: org.apache.commons.math3.linear.RealMatrix cachedPt>;

        return $r1;
    }
    public org.apache.commons.math3.linear.RealMatrix getT()
    {
        org.apache.commons.math3.linear.SchurTransformer r0;
        org.apache.commons.math3.linear.RealMatrix $r1;
        double[][] $r2;

        r0 := @this: org.apache.commons.math3.linear.SchurTransformer;

        $r1 = r0.<org.apache.commons.math3.linear.SchurTransformer: org.apache.commons.math3.linear.RealMatrix cachedT>;

        if $r1 != null goto label1;

        $r2 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $r1 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix createRealMatrix(double[][])>($r2);

        r0.<org.apache.commons.math3.linear.SchurTransformer: org.apache.commons.math3.linear.RealMatrix cachedT> = $r1;

     label1:
        $r1 = r0.<org.apache.commons.math3.linear.SchurTransformer: org.apache.commons.math3.linear.RealMatrix cachedT>;

        return $r1;
    }
