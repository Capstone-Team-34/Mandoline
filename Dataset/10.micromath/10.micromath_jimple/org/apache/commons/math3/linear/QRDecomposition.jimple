org.apache.commons.math3.linear.QRDecomposition extends java.lang.Object
private org.apache.commons.math3.linear.RealMatrix cachedH
private org.apache.commons.math3.linear.RealMatrix cachedQ
private org.apache.commons.math3.linear.RealMatrix cachedQT
private org.apache.commons.math3.linear.RealMatrix cachedR
private double[][] qrt
private double[] rDiag
private final double threshold
    public void <init>(org.apache.commons.math3.linear.RealMatrix)
    {
        org.apache.commons.math3.linear.QRDecomposition r0;
        org.apache.commons.math3.linear.RealMatrix $r1;

        r0 := @this: org.apache.commons.math3.linear.QRDecomposition;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        specialinvoke r0.<org.apache.commons.math3.linear.QRDecomposition: void <init>(org.apache.commons.math3.linear.RealMatrix,double)>($r1, 0.0);

        return;
    }
    public void <init>(org.apache.commons.math3.linear.RealMatrix, double)
    {
        org.apache.commons.math3.linear.QRDecomposition r0;
        org.apache.commons.math3.linear.RealMatrix $r1;
        double $d0;
        int $i0, $i1;
        double[][] $r2;
        double[] $r3;

        r0 := @this: org.apache.commons.math3.linear.QRDecomposition;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        $d0 := @parameter1: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.linear.QRDecomposition: double threshold> = $d0;

        $i0 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $i1 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        $r1 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix transpose()>();

        $r2 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: double[][] getData()>();

        r0.<org.apache.commons.math3.linear.QRDecomposition: double[][] qrt> = $r2;

        $i0 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i0, $i1);

        $r3 = newarray (double)[$i0];

        r0.<org.apache.commons.math3.linear.QRDecomposition: double[] rDiag> = $r3;

        r0.<org.apache.commons.math3.linear.QRDecomposition: org.apache.commons.math3.linear.RealMatrix cachedQ> = null;

        r0.<org.apache.commons.math3.linear.QRDecomposition: org.apache.commons.math3.linear.RealMatrix cachedQT> = null;

        r0.<org.apache.commons.math3.linear.QRDecomposition: org.apache.commons.math3.linear.RealMatrix cachedR> = null;

        r0.<org.apache.commons.math3.linear.QRDecomposition: org.apache.commons.math3.linear.RealMatrix cachedH> = null;

        $r2 = r0.<org.apache.commons.math3.linear.QRDecomposition: double[][] qrt>;

        virtualinvoke r0.<org.apache.commons.math3.linear.QRDecomposition: void decompose(double[][])>($r2);

        return;
    }
    protected void decompose(double[][])
    {
        org.apache.commons.math3.linear.QRDecomposition r0;
        double[][] $r1;
        int $i0, i1, $i2;
        double[] $r2;

        r0 := @this: org.apache.commons.math3.linear.QRDecomposition;

        $r1 := @parameter0: double[][];

        i1 = 0;

     label1:
        $i0 = lengthof $r1;

        $r2 = $r1[0];

        $i2 = lengthof $r2;

        $i0 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i0, $i2);

        if i1 >= $i0 goto label2;

        virtualinvoke r0.<org.apache.commons.math3.linear.QRDecomposition: void performHouseholderReflection(int,double[][])>(i1, $r1);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
    public org.apache.commons.math3.linear.RealMatrix getH()
    {
        org.apache.commons.math3.linear.QRDecomposition r0;
        int i0, i1, i2, i3, $i4;
        org.apache.commons.math3.linear.RealMatrix $r1;
        double[][] $r2, $r7;
        double[] $r3, $r8;
        int[] $r4;
        java.lang.Class $r5;
        java.lang.Object $r6;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.linear.QRDecomposition;

        $r1 = r0.<org.apache.commons.math3.linear.QRDecomposition: org.apache.commons.math3.linear.RealMatrix cachedH>;

        if $r1 != null goto label5;

        $r2 = r0.<org.apache.commons.math3.linear.QRDecomposition: double[][] qrt>;

        i1 = lengthof $r2;

        $r2 = r0.<org.apache.commons.math3.linear.QRDecomposition: double[][] qrt>;

        $r3 = $r2[0];

        i0 = lengthof $r3;

        $r4 = newarray (int)[2];

        $r4[0] = i0;

        $r4[1] = i1;

        $r5 = <java.lang.Double: java.lang.Class TYPE>;

        $r6 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r5, $r4);

        $r2 = (double[][]) $r6;

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        i3 = 0;

     label2:
        $i4 = i2 + 1;

        $i4 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i4, i1);

        if i3 >= $i4 goto label3;

        $r3 = $r2[i2];

        $r7 = r0.<org.apache.commons.math3.linear.QRDecomposition: double[][] qrt>;

        $r8 = $r7[i3];

        $d0 = $r8[i2];

        $r8 = r0.<org.apache.commons.math3.linear.QRDecomposition: double[] rDiag>;

        $d1 = $r8[i3];

        $d1 = neg $d1;

        $d0 = $d0 / $d1;

        $r3[i3] = $d0;

        i3 = i3 + 1;

        goto label2;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        $r1 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix createRealMatrix(double[][])>($r2);

        r0.<org.apache.commons.math3.linear.QRDecomposition: org.apache.commons.math3.linear.RealMatrix cachedH> = $r1;

     label5:
        $r1 = r0.<org.apache.commons.math3.linear.QRDecomposition: org.apache.commons.math3.linear.RealMatrix cachedH>;

        return $r1;
    }
    public org.apache.commons.math3.linear.RealMatrix getQ()
    {
        org.apache.commons.math3.linear.QRDecomposition r0;
        org.apache.commons.math3.linear.RealMatrix $r1;

        r0 := @this: org.apache.commons.math3.linear.QRDecomposition;

        $r1 = r0.<org.apache.commons.math3.linear.QRDecomposition: org.apache.commons.math3.linear.RealMatrix cachedQ>;

        if $r1 != null goto label1;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.linear.QRDecomposition: org.apache.commons.math3.linear.RealMatrix getQT()>();

        $r1 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix transpose()>();

        r0.<org.apache.commons.math3.linear.QRDecomposition: org.apache.commons.math3.linear.RealMatrix cachedQ> = $r1;

     label1:
        $r1 = r0.<org.apache.commons.math3.linear.QRDecomposition: org.apache.commons.math3.linear.RealMatrix cachedQ>;

        return $r1;
    }
    public org.apache.commons.math3.linear.RealMatrix getQT()
    {
        org.apache.commons.math3.linear.QRDecomposition r0;
        int i0, i1, i2, $i3;
        double[] r1, $r8;
        double $d0, $d1, $d2, $d3;
        org.apache.commons.math3.linear.RealMatrix $r2;
        double[][] $r3, $r7;
        int[] $r4;
        java.lang.Class $r5;
        java.lang.Object $r6;
        byte $b4;

        r0 := @this: org.apache.commons.math3.linear.QRDecomposition;

        $r2 = r0.<org.apache.commons.math3.linear.QRDecomposition: org.apache.commons.math3.linear.RealMatrix cachedQT>;

        if $r2 != null goto label11;

        $r3 = r0.<org.apache.commons.math3.linear.QRDecomposition: double[][] qrt>;

        i1 = lengthof $r3;

        $r3 = r0.<org.apache.commons.math3.linear.QRDecomposition: double[][] qrt>;

        r1 = $r3[0];

        i0 = lengthof r1;

        $r4 = newarray (int)[2];

        $r4[0] = i0;

        $r4[1] = i0;

        $r5 = <java.lang.Double: java.lang.Class TYPE>;

        $r6 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r5, $r4);

        $r3 = (double[][]) $r6;

        i2 = i0 + -1;

     label01:
        $i3 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>(i0, i1);

        if i2 < $i3 goto label02;

        r1 = $r3[i2];

        r1[i2] = 1.0;

        i2 = i2 + -1;

        goto label01;

     label02:
        i1 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>(i0, i1);

        i1 = i1 + -1;

     label03:
        if i1 < 0 goto label10;

        $r7 = r0.<org.apache.commons.math3.linear.QRDecomposition: double[][] qrt>;

        r1 = $r7[i1];

        $r8 = $r3[i1];

        $r8[i1] = 1.0;

        $d1 = r1[i1];

        $b4 = $d1 cmpl 0.0;

        if $b4 == 0 goto label09;

        i2 = i1;

     label04:
        if i2 >= i0 goto label09;

        $d1 = 0.0;

        $i3 = i1;

     label05:
        if $i3 >= i0 goto label06;

        $r8 = $r3[i2];

        $d2 = $r8[$i3];

        $d0 = r1[$i3];

        $d2 = $d2 * $d0;

        $d1 = $d1 - $d2;

        $i3 = $i3 + 1;

        goto label05;

     label06:
        $r8 = r0.<org.apache.commons.math3.linear.QRDecomposition: double[] rDiag>;

        $d2 = $r8[i1];

        $d0 = r1[i1];

        $d2 = $d2 * $d0;

        $d1 = $d1 / $d2;

        $i3 = i1;

     label07:
        if $i3 >= i0 goto label08;

        $r8 = $r3[i2];

        $d2 = $r8[$i3];

        $d3 = neg $d1;

        $d0 = r1[$i3];

        $d0 = $d3 * $d0;

        $d2 = $d2 + $d0;

        $r8[$i3] = $d2;

        $i3 = $i3 + 1;

        goto label07;

     label08:
        i2 = i2 + 1;

        goto label04;

     label09:
        i1 = i1 + -1;

        goto label03;

     label10:
        $r2 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix createRealMatrix(double[][])>($r3);

        r0.<org.apache.commons.math3.linear.QRDecomposition: org.apache.commons.math3.linear.RealMatrix cachedQT> = $r2;

     label11:
        $r2 = r0.<org.apache.commons.math3.linear.QRDecomposition: org.apache.commons.math3.linear.RealMatrix cachedQT>;

        return $r2;
    }
    public org.apache.commons.math3.linear.RealMatrix getR()
    {
        org.apache.commons.math3.linear.QRDecomposition r0;
        int i0, i1, i2;
        org.apache.commons.math3.linear.RealMatrix $r1;
        double[][] $r2, $r8;
        double[] $r3, $r7;
        int[] $r4;
        java.lang.Class $r5;
        java.lang.Object $r6;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.QRDecomposition;

        $r1 = r0.<org.apache.commons.math3.linear.QRDecomposition: org.apache.commons.math3.linear.RealMatrix cachedR>;

        if $r1 != null goto label5;

        $r2 = r0.<org.apache.commons.math3.linear.QRDecomposition: double[][] qrt>;

        i1 = lengthof $r2;

        $r2 = r0.<org.apache.commons.math3.linear.QRDecomposition: double[][] qrt>;

        $r3 = $r2[0];

        i0 = lengthof $r3;

        $r4 = newarray (int)[2];

        $r4[0] = i0;

        $r4[1] = i1;

        $r5 = <java.lang.Double: java.lang.Class TYPE>;

        $r6 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r5, $r4);

        $r2 = (double[][]) $r6;

        i0 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>(i0, i1);

        i0 = i0 + -1;

     label1:
        if i0 < 0 goto label4;

        $r3 = $r2[i0];

        $r7 = r0.<org.apache.commons.math3.linear.QRDecomposition: double[] rDiag>;

        $d0 = $r7[i0];

        $r3[i0] = $d0;

        i2 = i0 + 1;

     label2:
        if i2 >= i1 goto label3;

        $r3 = $r2[i0];

        $r8 = r0.<org.apache.commons.math3.linear.QRDecomposition: double[][] qrt>;

        $r7 = $r8[i2];

        $d0 = $r7[i0];

        $r3[i2] = $d0;

        i2 = i2 + 1;

        goto label2;

     label3:
        i0 = i0 + -1;

        goto label1;

     label4:
        $r1 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix createRealMatrix(double[][])>($r2);

        r0.<org.apache.commons.math3.linear.QRDecomposition: org.apache.commons.math3.linear.RealMatrix cachedR> = $r1;

     label5:
        $r1 = r0.<org.apache.commons.math3.linear.QRDecomposition: org.apache.commons.math3.linear.RealMatrix cachedR>;

        return $r1;
    }
    public org.apache.commons.math3.linear.DecompositionSolver getSolver()
    {
        org.apache.commons.math3.linear.QRDecomposition r0;
        org.apache.commons.math3.linear.QRDecomposition$Solver $r1;
        double[][] $r2;
        double[] $r3;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.QRDecomposition;

        $r1 = new org.apache.commons.math3.linear.QRDecomposition$Solver;

        $r2 = r0.<org.apache.commons.math3.linear.QRDecomposition: double[][] qrt>;

        $r3 = r0.<org.apache.commons.math3.linear.QRDecomposition: double[] rDiag>;

        $d0 = r0.<org.apache.commons.math3.linear.QRDecomposition: double threshold>;

        specialinvoke $r1.<org.apache.commons.math3.linear.QRDecomposition$Solver: void <init>(double[][],double[],double,org.apache.commons.math3.linear.QRDecomposition$1)>($r2, $r3, $d0, null);

        return $r1;
    }
    protected void performHouseholderReflection(int, double[][])
    {
        org.apache.commons.math3.linear.QRDecomposition r0;
        int $i0, i1, $i2, $i4;
        double[][] $r1;
        double d0, d1, $d2, $d3;
        double[] r2, r3;
        byte $b3;

        r0 := @this: org.apache.commons.math3.linear.QRDecomposition;

        $i0 := @parameter0: int;

        $r1 := @parameter1: double[][];

        r3 = $r1[$i0];

        d1 = 0.0;

        i1 = $i0;

     label01:
        $i2 = lengthof r3;

        if i1 >= $i2 goto label02;

        d0 = r3[i1];

        d0 = d0 * d0;

        d1 = d1 + d0;

        i1 = i1 + 1;

        goto label01;

     label02:
        d0 = r3[$i0];

        $b3 = d0 cmpl 0.0;

        if $b3 <= 0 goto label06;

        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d1);

        d1 = neg d1;

     label03:
        r2 = r0.<org.apache.commons.math3.linear.QRDecomposition: double[] rDiag>;

        r2[$i0] = d1;

        $b3 = d1 cmpl 0.0;

        if $b3 == 0 goto label10;

        d0 = r3[$i0];

        d0 = d0 - d1;

        r3[$i0] = d0;

        i1 = $i0 + 1;

     label04:
        $i2 = lengthof $r1;

        if i1 >= $i2 goto label10;

        r2 = $r1[i1];

        d0 = 0.0;

        $i2 = $i0;

     label05:
        $i4 = lengthof r2;

        if $i2 >= $i4 goto label07;

        $d2 = r2[$i2];

        $d3 = r3[$i2];

        $d2 = $d2 * $d3;

        d0 = d0 - $d2;

        $i2 = $i2 + 1;

        goto label05;

     label06:
        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d1);

        goto label03;

     label07:
        $d2 = r3[$i0];

        $d2 = $d2 * d1;

        d0 = d0 / $d2;

        $i2 = $i0;

     label08:
        $i4 = lengthof r2;

        if $i2 >= $i4 goto label09;

        $d2 = r2[$i2];

        $d3 = r3[$i2];

        $d3 = $d3 * d0;

        $d2 = $d2 - $d3;

        r2[$i2] = $d2;

        $i2 = $i2 + 1;

        goto label08;

     label09:
        i1 = i1 + 1;

        goto label04;

     label10:
        return;
    }
