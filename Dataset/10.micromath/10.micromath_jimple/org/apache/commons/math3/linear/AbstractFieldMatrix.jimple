org.apache.commons.math3.linear.AbstractFieldMatrix extends java.lang.Object implements org.apache.commons.math3.linear.FieldMatrix
private final org.apache.commons.math3.Field field
    protected void <init>()
    {
        org.apache.commons.math3.linear.AbstractFieldMatrix r0;

        r0 := @this: org.apache.commons.math3.linear.AbstractFieldMatrix;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.Field field> = null;

        return;
    }
    protected void <init>(org.apache.commons.math3.Field)
    {
        org.apache.commons.math3.linear.AbstractFieldMatrix r0;
        org.apache.commons.math3.Field r1;

        r0 := @this: org.apache.commons.math3.linear.AbstractFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.Field;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.Field field> = r1;

        return;
    }
    protected void <init>(org.apache.commons.math3.Field, int, int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.linear.AbstractFieldMatrix r0;
        org.apache.commons.math3.Field r1;
        int $i0, $i1;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3;
        java.lang.Integer $r4;

        r0 := @this: org.apache.commons.math3.linear.AbstractFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.Field;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if $i0 > 0 goto label1;

        $r2 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats DIMENSION>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r2.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r3, $r4);

        throw $r2;

     label1:
        if $i1 > 0 goto label2;

        $r2 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats DIMENSION>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        specialinvoke $r2.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r3, $r4);

        throw $r2;

     label2:
        r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.Field field> = r1;

        return;
    }
    protected static org.apache.commons.math3.FieldElement[] buildArray(org.apache.commons.math3.Field, int)
    {
        org.apache.commons.math3.Field r0;
        int $i0;
        java.lang.Object[] $r1;
        org.apache.commons.math3.FieldElement[] $r2;

        r0 := @parameter0: org.apache.commons.math3.Field;

        $i0 := @parameter1: int;

        $r1 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[] buildArray(org.apache.commons.math3.Field,int)>(r0, $i0);

        $r2 = (org.apache.commons.math3.FieldElement[]) $r1;

        return $r2;
    }
    protected static org.apache.commons.math3.FieldElement[][] buildArray(org.apache.commons.math3.Field, int, int)
    {
        org.apache.commons.math3.Field r0;
        int $i0, $i1;
        java.lang.Object[][] $r1;
        org.apache.commons.math3.FieldElement[][] $r2;

        r0 := @parameter0: org.apache.commons.math3.Field;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r1 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[][] buildArray(org.apache.commons.math3.Field,int,int)>(r0, $i0, $i1);

        $r2 = (org.apache.commons.math3.FieldElement[][]) $r1;

        return $r2;
    }
    protected static org.apache.commons.math3.Field extractField(org.apache.commons.math3.FieldElement[]) throws org.apache.commons.math3.exception.NoDataException
    {
        org.apache.commons.math3.FieldElement[] r0;
        org.apache.commons.math3.exception.util.LocalizedFormats $r1;
        org.apache.commons.math3.Field $r2;
        int $i0;
        org.apache.commons.math3.exception.NoDataException $r3;
        org.apache.commons.math3.FieldElement $r4;

        r0 := @parameter0: org.apache.commons.math3.FieldElement[];

        $i0 = lengthof r0;

        if $i0 != 0 goto label1;

        $r3 = new org.apache.commons.math3.exception.NoDataException;

        $r1 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats AT_LEAST_ONE_ROW>;

        specialinvoke $r3.<org.apache.commons.math3.exception.NoDataException: void <init>(org.apache.commons.math3.exception.util.Localizable)>($r1);

        throw $r3;

     label1:
        $r4 = r0[0];

        $r2 = interfaceinvoke $r4.<org.apache.commons.math3.FieldElement: org.apache.commons.math3.Field getField()>();

        return $r2;
    }
    protected static org.apache.commons.math3.Field extractField(org.apache.commons.math3.FieldElement[][]) throws org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.FieldElement[][] r0;
        org.apache.commons.math3.Field $r1;
        org.apache.commons.math3.exception.NullArgumentException $r2;
        int $i0;
        org.apache.commons.math3.exception.NoDataException $r3;
        org.apache.commons.math3.exception.util.LocalizedFormats $r4;
        org.apache.commons.math3.FieldElement[] $r5;
        org.apache.commons.math3.FieldElement $r6;

        r0 := @parameter0: org.apache.commons.math3.FieldElement[][];

        if r0 != null goto label1;

        $r2 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r2.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r2;

     label1:
        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

        $r3 = new org.apache.commons.math3.exception.NoDataException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats AT_LEAST_ONE_ROW>;

        specialinvoke $r3.<org.apache.commons.math3.exception.NoDataException: void <init>(org.apache.commons.math3.exception.util.Localizable)>($r4);

        throw $r3;

     label2:
        $r5 = r0[0];

        $i0 = lengthof $r5;

        if $i0 != 0 goto label3;

        $r3 = new org.apache.commons.math3.exception.NoDataException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats AT_LEAST_ONE_COLUMN>;

        specialinvoke $r3.<org.apache.commons.math3.exception.NoDataException: void <init>(org.apache.commons.math3.exception.util.Localizable)>($r4);

        throw $r3;

     label3:
        $r5 = r0[0];

        $r6 = $r5[0];

        $r1 = interfaceinvoke $r6.<org.apache.commons.math3.FieldElement: org.apache.commons.math3.Field getField()>();

        return $r1;
    }
    public org.apache.commons.math3.linear.FieldMatrix add(org.apache.commons.math3.linear.FieldMatrix) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException
    {
        org.apache.commons.math3.linear.AbstractFieldMatrix r0;
        org.apache.commons.math3.linear.FieldMatrix r1, $r2;
        int $i0, $i1, i2, i3;
        org.apache.commons.math3.FieldElement $r3, $r4;
        java.lang.Object $r5;

        r0 := @this: org.apache.commons.math3.linear.AbstractFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldMatrix;

        virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: void checkAdditionCompatible(org.apache.commons.math3.linear.FieldMatrix)>(r1);

        $i0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getRowDimension()>();

        $i1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getColumnDimension()>();

        $r2 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.linear.FieldMatrix createMatrix(int,int)>($i0, $i1);

        i2 = 0;

     label1:
        if i2 >= $i0 goto label4;

        i3 = 0;

     label2:
        if i3 >= $i1 goto label3;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.FieldElement getEntry(int,int)>(i2, i3);

        $r4 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrix: org.apache.commons.math3.FieldElement getEntry(int,int)>(i2, i3);

        $r5 = interfaceinvoke $r3.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>($r4);

        $r3 = (org.apache.commons.math3.FieldElement) $r5;

        interfaceinvoke $r2.<org.apache.commons.math3.linear.FieldMatrix: void setEntry(int,int,org.apache.commons.math3.FieldElement)>(i2, i3, $r3);

        i3 = i3 + 1;

        goto label2;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return $r2;
    }
public abstract void addToEntry(int, int, org.apache.commons.math3.FieldElement) throws org.apache.commons.math3.exception.OutOfRangeException { 
// no body
} 
    protected void checkAdditionCompatible(org.apache.commons.math3.linear.FieldMatrix) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException
    {
        org.apache.commons.math3.linear.AbstractFieldMatrix r0;
        org.apache.commons.math3.linear.FieldMatrix r1;
        int $i0, $i1, $i2, $i3;
        org.apache.commons.math3.linear.MatrixDimensionMismatchException $r2;

        r0 := @this: org.apache.commons.math3.linear.AbstractFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldMatrix;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getRowDimension()>();

        $i1 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrix: int getRowDimension()>();

        if $i0 != $i1 goto label1;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getColumnDimension()>();

        $i1 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrix: int getColumnDimension()>();

        if $i0 == $i1 goto label2;

     label1:
        $r2 = new org.apache.commons.math3.linear.MatrixDimensionMismatchException;

        $i0 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrix: int getRowDimension()>();

        $i1 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrix: int getColumnDimension()>();

        $i2 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getRowDimension()>();

        $i3 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getColumnDimension()>();

        specialinvoke $r2.<org.apache.commons.math3.linear.MatrixDimensionMismatchException: void <init>(int,int,int,int)>($i0, $i1, $i2, $i3);

        throw $r2;

     label2:
        return;
    }
    protected void checkColumnIndex(int) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.AbstractFieldMatrix r0;
        int $i0, $i1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r1;
        org.apache.commons.math3.exception.OutOfRangeException $r2;
        java.lang.Integer $r3, $r4, $r5;

        r0 := @this: org.apache.commons.math3.linear.AbstractFieldMatrix;

        $i0 := @parameter0: int;

        if $i0 < 0 goto label1;

        $i1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getColumnDimension()>();

        if $i0 < $i1 goto label2;

     label1:
        $r2 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r1 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats COLUMN_INDEX>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $i0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getColumnDimension()>();

        $i0 = $i0 + -1;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r2.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)>($r1, $r3, $r4, $r5);

        throw $r2;

     label2:
        return;
    }
    protected void checkMultiplicationCompatible(org.apache.commons.math3.linear.FieldMatrix) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.AbstractFieldMatrix r0;
        org.apache.commons.math3.linear.FieldMatrix r1;
        int $i0, $i1;
        org.apache.commons.math3.exception.DimensionMismatchException $r2;

        r0 := @this: org.apache.commons.math3.linear.AbstractFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldMatrix;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getColumnDimension()>();

        $i1 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrix: int getRowDimension()>();

        if $i0 == $i1 goto label1;

        $r2 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i0 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrix: int getRowDimension()>();

        $i1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getColumnDimension()>();

        specialinvoke $r2.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i0, $i1);

        throw $r2;

     label1:
        return;
    }
    protected void checkRowIndex(int) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.AbstractFieldMatrix r0;
        int $i0, $i1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r1;
        org.apache.commons.math3.exception.OutOfRangeException $r2;
        java.lang.Integer $r3, $r4, $r5;

        r0 := @this: org.apache.commons.math3.linear.AbstractFieldMatrix;

        $i0 := @parameter0: int;

        if $i0 < 0 goto label1;

        $i1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getRowDimension()>();

        if $i0 < $i1 goto label2;

     label1:
        $r2 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r1 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats ROW_INDEX>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $i0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getRowDimension()>();

        $i0 = $i0 + -1;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r2.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)>($r1, $r3, $r4, $r5);

        throw $r2;

     label2:
        return;
    }
    protected void checkSubMatrixIndex(int, int, int, int) throws org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.AbstractFieldMatrix r0;
        int $i0, $i1, $i2, $i3;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        java.lang.Integer $r3, $r4;

        r0 := @this: org.apache.commons.math3.linear.AbstractFieldMatrix;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: void checkRowIndex(int)>($i0);

        virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: void checkRowIndex(int)>($i1);

        if $i1 >= $i0 goto label1;

        $r1 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INITIAL_ROW_AFTER_FINAL_ROW>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r1.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r2, $r3, $r4, 1);

        throw $r1;

     label1:
        virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: void checkColumnIndex(int)>($i2);

        virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: void checkColumnIndex(int)>($i3);

        if $i3 >= $i2 goto label2;

        $r1 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INITIAL_COLUMN_AFTER_FINAL_COLUMN>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        specialinvoke $r1.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r2, $r3, $r4, 1);

        throw $r1;

     label2:
        return;
    }
    protected void checkSubMatrixIndex(int[], int[]) throws org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.AbstractFieldMatrix r0;
        int[] $r1, $r2;
        int i0, i1, i2;
        org.apache.commons.math3.exception.NullArgumentException $r3;
        org.apache.commons.math3.exception.NoDataException $r4;

        r0 := @this: org.apache.commons.math3.linear.AbstractFieldMatrix;

        $r1 := @parameter0: int[];

        $r2 := @parameter1: int[];

        if $r1 == null goto label1;

        if $r2 != null goto label2;

     label1:
        $r3 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r3.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r3;

     label2:
        i0 = lengthof $r1;

        if i0 == 0 goto label3;

        i0 = lengthof $r2;

        if i0 != 0 goto label4;

     label3:
        $r4 = new org.apache.commons.math3.exception.NoDataException;

        specialinvoke $r4.<org.apache.commons.math3.exception.NoDataException: void <init>()>();

        throw $r4;

     label4:
        i1 = lengthof $r1;

        i2 = 0;

     label5:
        if i2 >= i1 goto label6;

        i0 = $r1[i2];

        virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: void checkRowIndex(int)>(i0);

        i2 = i2 + 1;

        goto label5;

     label6:
        i1 = lengthof $r2;

        i2 = 0;

     label7:
        if i2 >= i1 goto label8;

        i0 = $r2[i2];

        virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: void checkColumnIndex(int)>(i0);

        i2 = i2 + 1;

        goto label7;

     label8:
        return;
    }
    protected void checkSubtractionCompatible(org.apache.commons.math3.linear.FieldMatrix) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException
    {
        org.apache.commons.math3.linear.AbstractFieldMatrix r0;
        org.apache.commons.math3.linear.FieldMatrix r1;
        int $i0, $i1, $i2, $i3;
        org.apache.commons.math3.linear.MatrixDimensionMismatchException $r2;

        r0 := @this: org.apache.commons.math3.linear.AbstractFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldMatrix;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getRowDimension()>();

        $i1 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrix: int getRowDimension()>();

        if $i0 != $i1 goto label1;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getColumnDimension()>();

        $i1 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrix: int getColumnDimension()>();

        if $i0 == $i1 goto label2;

     label1:
        $r2 = new org.apache.commons.math3.linear.MatrixDimensionMismatchException;

        $i0 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrix: int getRowDimension()>();

        $i1 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrix: int getColumnDimension()>();

        $i2 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getRowDimension()>();

        $i3 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getColumnDimension()>();

        specialinvoke $r2.<org.apache.commons.math3.linear.MatrixDimensionMismatchException: void <init>(int,int,int,int)>($i0, $i1, $i2, $i3);

        throw $r2;

     label2:
        return;
    }
public abstract org.apache.commons.math3.linear.FieldMatrix copy() { 
// no body
} 
    public void copySubMatrix(int, int, int, int, org.apache.commons.math3.FieldElement[][]) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.AbstractFieldMatrix r0;
        int $i0, $i1, $i2, $i3, i4, i5, $i6;
        org.apache.commons.math3.FieldElement[][] r1;
        java.lang.Object $r2;
        org.apache.commons.math3.FieldElement[] $r3;
        org.apache.commons.math3.linear.MatrixDimensionMismatchException $r4;
        org.apache.commons.math3.linear.AbstractFieldMatrix$2 $r5;
        org.apache.commons.math3.Field $r6;
        org.apache.commons.math3.FieldElement $r7;

        r0 := @this: org.apache.commons.math3.linear.AbstractFieldMatrix;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        r1 := @parameter4: org.apache.commons.math3.FieldElement[][];

        virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: void checkSubMatrixIndex(int,int,int,int)>($i0, $i1, $i2, $i3);

        i5 = $i1 + 1;

        i5 = i5 - $i0;

        i4 = $i3 + 1;

        i4 = i4 - $i2;

        $i6 = lengthof r1;

        if $i6 < i5 goto label1;

        $r3 = r1[0];

        $i6 = lengthof $r3;

        if $i6 >= i4 goto label2;

     label1:
        $r4 = new org.apache.commons.math3.linear.MatrixDimensionMismatchException;

        $i0 = lengthof r1;

        $r3 = r1[0];

        $i1 = lengthof $r3;

        specialinvoke $r4.<org.apache.commons.math3.linear.MatrixDimensionMismatchException: void <init>(int,int,int,int)>($i0, $i1, i5, i4);

        throw $r4;

     label2:
        $r5 = new org.apache.commons.math3.linear.AbstractFieldMatrix$2;

        $r6 = r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.Field field>;

        $r2 = interfaceinvoke $r6.<org.apache.commons.math3.Field: java.lang.Object getZero()>();

        $r7 = (org.apache.commons.math3.FieldElement) $r2;

        specialinvoke $r5.<org.apache.commons.math3.linear.AbstractFieldMatrix$2: void <init>(org.apache.commons.math3.linear.AbstractFieldMatrix,org.apache.commons.math3.FieldElement,org.apache.commons.math3.FieldElement[][])>(r0, $r7, r1);

        virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.FieldElement walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)>($r5, $i0, $i1, $i2, $i3);

        return;
    }
    public void copySubMatrix(int[], int[], org.apache.commons.math3.FieldElement[][]) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException, org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.AbstractFieldMatrix r0;
        int[] $r1, $r2;
        org.apache.commons.math3.FieldElement[][] r3;
        org.apache.commons.math3.FieldElement[] r4;
        int $i0, $i1, $i2, $i3;
        org.apache.commons.math3.FieldElement $r5;
        org.apache.commons.math3.linear.MatrixDimensionMismatchException $r6;

        r0 := @this: org.apache.commons.math3.linear.AbstractFieldMatrix;

        $r1 := @parameter0: int[];

        $r2 := @parameter1: int[];

        r3 := @parameter2: org.apache.commons.math3.FieldElement[][];

        virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: void checkSubMatrixIndex(int[],int[])>($r1, $r2);

        $i0 = lengthof r3;

        $i1 = lengthof $r1;

        if $i0 < $i1 goto label1;

        r4 = r3[0];

        $i0 = lengthof r4;

        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label2;

     label1:
        $r6 = new org.apache.commons.math3.linear.MatrixDimensionMismatchException;

        $i2 = lengthof r3;

        r4 = r3[0];

        $i3 = lengthof r4;

        $i0 = lengthof $r1;

        $i1 = lengthof $r2;

        specialinvoke $r6.<org.apache.commons.math3.linear.MatrixDimensionMismatchException: void <init>(int,int,int,int)>($i2, $i3, $i0, $i1);

        throw $r6;

     label2:
        $i0 = 0;

     label3:
        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label6;

        r4 = r3[$i0];

        $i1 = 0;

     label4:
        $i2 = lengthof $r2;

        if $i1 >= $i2 goto label5;

        $i2 = $r1[$i0];

        $i3 = $r2[$i1];

        $r5 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.FieldElement getEntry(int,int)>($i2, $i3);

        r4[$i1] = $r5;

        $i1 = $i1 + 1;

        goto label4;

     label5:
        $i0 = $i0 + 1;

        goto label3;

     label6:
        return;
    }
public abstract org.apache.commons.math3.linear.FieldMatrix createMatrix(int, int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException { 
// no body
} 
    public boolean equals(java.lang.Object)
    {
        org.apache.commons.math3.linear.AbstractFieldMatrix r0;
        java.lang.Object $r1;
        boolean $z0;
        org.apache.commons.math3.linear.FieldMatrix r2;
        int $i0, $i1, $i2, i3;
        org.apache.commons.math3.FieldElement $r3, $r4;

        r0 := @this: org.apache.commons.math3.linear.AbstractFieldMatrix;

        $r1 := @parameter0: java.lang.Object;

        if $r1 != r0 goto label1;

        return 1;

     label1:
        $z0 = $r1 instanceof org.apache.commons.math3.linear.FieldMatrix;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (org.apache.commons.math3.linear.FieldMatrix) $r1;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getRowDimension()>();

        $i1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getColumnDimension()>();

        $i2 = interfaceinvoke r2.<org.apache.commons.math3.linear.FieldMatrix: int getColumnDimension()>();

        if $i2 != $i1 goto label3;

        $i2 = interfaceinvoke r2.<org.apache.commons.math3.linear.FieldMatrix: int getRowDimension()>();

        if $i2 == $i0 goto label4;

     label3:
        return 0;

     label4:
        $i2 = 0;

     label5:
        if $i2 >= $i0 goto label9;

        i3 = 0;

     label6:
        if i3 >= $i1 goto label8;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.FieldElement getEntry(int,int)>($i2, i3);

        $r4 = interfaceinvoke r2.<org.apache.commons.math3.linear.FieldMatrix: org.apache.commons.math3.FieldElement getEntry(int,int)>($i2, i3);

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label7;

        return 0;

     label7:
        i3 = i3 + 1;

        goto label6;

     label8:
        $i2 = $i2 + 1;

        goto label5;

     label9:
        return 1;
    }
    public org.apache.commons.math3.FieldElement[] getColumn(int) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.AbstractFieldMatrix r0;
        int $i0, $i1, i2;
        org.apache.commons.math3.Field $r1;
        java.lang.Object[] $r2;
        org.apache.commons.math3.FieldElement[] r3;
        org.apache.commons.math3.FieldElement $r4;

        r0 := @this: org.apache.commons.math3.linear.AbstractFieldMatrix;

        $i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: void checkColumnIndex(int)>($i0);

        $i1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getRowDimension()>();

        $r1 = r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.Field field>;

        $r2 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[] buildArray(org.apache.commons.math3.Field,int)>($r1, $i1);

        r3 = (org.apache.commons.math3.FieldElement[]) $r2;

        i2 = 0;

     label1:
        if i2 >= $i1 goto label2;

        $r4 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.FieldElement getEntry(int,int)>(i2, $i0);

        r3[i2] = $r4;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r3;
    }
public abstract int getColumnDimension() { 
// no body
} 
    public org.apache.commons.math3.linear.FieldMatrix getColumnMatrix(int) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.AbstractFieldMatrix r0;
        int $i0, $i1, i2;
        org.apache.commons.math3.linear.FieldMatrix $r1;
        org.apache.commons.math3.FieldElement $r2;

        r0 := @this: org.apache.commons.math3.linear.AbstractFieldMatrix;

        $i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: void checkColumnIndex(int)>($i0);

        $i1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getRowDimension()>();

        $r1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.linear.FieldMatrix createMatrix(int,int)>($i1, 1);

        i2 = 0;

     label1:
        if i2 >= $i1 goto label2;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.FieldElement getEntry(int,int)>(i2, $i0);

        interfaceinvoke $r1.<org.apache.commons.math3.linear.FieldMatrix: void setEntry(int,int,org.apache.commons.math3.FieldElement)>(i2, 0, $r2);

        i2 = i2 + 1;

        goto label1;

     label2:
        return $r1;
    }
    public org.apache.commons.math3.linear.FieldVector getColumnVector(int) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.AbstractFieldMatrix r0;
        int $i0;
        org.apache.commons.math3.linear.ArrayFieldVector $r1;
        org.apache.commons.math3.Field $r2;
        org.apache.commons.math3.FieldElement[] $r3;

        r0 := @this: org.apache.commons.math3.linear.AbstractFieldMatrix;

        $i0 := @parameter0: int;

        $r1 = new org.apache.commons.math3.linear.ArrayFieldVector;

        $r2 = r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.Field field>;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.FieldElement[] getColumn(int)>($i0);

        specialinvoke $r1.<org.apache.commons.math3.linear.ArrayFieldVector: void <init>(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[],boolean)>($r2, $r3, 0);

        return $r1;
    }
    public org.apache.commons.math3.FieldElement[][] getData()
    {
        org.apache.commons.math3.linear.AbstractFieldMatrix r0;
        org.apache.commons.math3.FieldElement[] r1;
        org.apache.commons.math3.Field $r2;
        int $i0, $i1, $i2;
        java.lang.Object[][] $r3;
        org.apache.commons.math3.FieldElement[][] r4;
        org.apache.commons.math3.FieldElement $r5;

        r0 := @this: org.apache.commons.math3.linear.AbstractFieldMatrix;

        $r2 = r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.Field field>;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getRowDimension()>();

        $i1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getColumnDimension()>();

        $r3 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[][] buildArray(org.apache.commons.math3.Field,int,int)>($r2, $i0, $i1);

        r4 = (org.apache.commons.math3.FieldElement[][]) $r3;

        $i0 = 0;

     label1:
        $i1 = lengthof r4;

        if $i0 >= $i1 goto label4;

        r1 = r4[$i0];

        $i1 = 0;

     label2:
        $i2 = lengthof r1;

        if $i1 >= $i2 goto label3;

        $r5 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.FieldElement getEntry(int,int)>($i0, $i1);

        r1[$i1] = $r5;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $i0 = $i0 + 1;

        goto label1;

     label4:
        return r4;
    }
public abstract org.apache.commons.math3.FieldElement getEntry(int, int) throws org.apache.commons.math3.exception.OutOfRangeException { 
// no body
} 
    public org.apache.commons.math3.Field getField()
    {
        org.apache.commons.math3.linear.AbstractFieldMatrix r0;
        org.apache.commons.math3.Field r1;

        r0 := @this: org.apache.commons.math3.linear.AbstractFieldMatrix;

        r1 = r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.Field field>;

        return r1;
    }
    public org.apache.commons.math3.FieldElement[] getRow(int) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.AbstractFieldMatrix r0;
        int $i0, $i1, i2;
        org.apache.commons.math3.Field $r1;
        java.lang.Object[] $r2;
        org.apache.commons.math3.FieldElement[] r3;
        org.apache.commons.math3.FieldElement $r4;

        r0 := @this: org.apache.commons.math3.linear.AbstractFieldMatrix;

        $i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: void checkRowIndex(int)>($i0);

        $i1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getColumnDimension()>();

        $r1 = r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.Field field>;

        $r2 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[] buildArray(org.apache.commons.math3.Field,int)>($r1, $i1);

        r3 = (org.apache.commons.math3.FieldElement[]) $r2;

        i2 = 0;

     label1:
        if i2 >= $i1 goto label2;

        $r4 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.FieldElement getEntry(int,int)>($i0, i2);

        r3[i2] = $r4;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r3;
    }
public abstract int getRowDimension() { 
// no body
} 
    public org.apache.commons.math3.linear.FieldMatrix getRowMatrix(int) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.AbstractFieldMatrix r0;
        int $i0, $i1, i2;
        org.apache.commons.math3.linear.FieldMatrix $r1;
        org.apache.commons.math3.FieldElement $r2;

        r0 := @this: org.apache.commons.math3.linear.AbstractFieldMatrix;

        $i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: void checkRowIndex(int)>($i0);

        $i1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getColumnDimension()>();

        $r1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.linear.FieldMatrix createMatrix(int,int)>(1, $i1);

        i2 = 0;

     label1:
        if i2 >= $i1 goto label2;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.FieldElement getEntry(int,int)>($i0, i2);

        interfaceinvoke $r1.<org.apache.commons.math3.linear.FieldMatrix: void setEntry(int,int,org.apache.commons.math3.FieldElement)>(0, i2, $r2);

        i2 = i2 + 1;

        goto label1;

     label2:
        return $r1;
    }
    public org.apache.commons.math3.linear.FieldVector getRowVector(int) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.AbstractFieldMatrix r0;
        int $i0;
        org.apache.commons.math3.linear.ArrayFieldVector $r1;
        org.apache.commons.math3.Field $r2;
        org.apache.commons.math3.FieldElement[] $r3;

        r0 := @this: org.apache.commons.math3.linear.AbstractFieldMatrix;

        $i0 := @parameter0: int;

        $r1 = new org.apache.commons.math3.linear.ArrayFieldVector;

        $r2 = r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.Field field>;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.FieldElement[] getRow(int)>($i0);

        specialinvoke $r1.<org.apache.commons.math3.linear.ArrayFieldVector: void <init>(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[],boolean)>($r2, $r3, 0);

        return $r1;
    }
    public org.apache.commons.math3.linear.FieldMatrix getSubMatrix(int, int, int, int) throws org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.AbstractFieldMatrix r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        org.apache.commons.math3.linear.FieldMatrix $r1;
        org.apache.commons.math3.FieldElement $r2;

        r0 := @this: org.apache.commons.math3.linear.AbstractFieldMatrix;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: void checkSubMatrixIndex(int,int,int,int)>($i0, $i1, $i2, $i3);

        $i4 = $i1 - $i0;

        $i4 = $i4 + 1;

        $i5 = $i3 - $i2;

        $i5 = $i5 + 1;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.linear.FieldMatrix createMatrix(int,int)>($i4, $i5);

        $i4 = $i0;

     label1:
        if $i4 > $i1 goto label4;

        $i5 = $i2;

     label2:
        if $i5 > $i3 goto label3;

        $i6 = $i4 - $i0;

        $i7 = $i5 - $i2;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.FieldElement getEntry(int,int)>($i4, $i5);

        interfaceinvoke $r1.<org.apache.commons.math3.linear.FieldMatrix: void setEntry(int,int,org.apache.commons.math3.FieldElement)>($i6, $i7, $r2);

        $i5 = $i5 + 1;

        goto label2;

     label3:
        $i4 = $i4 + 1;

        goto label1;

     label4:
        return $r1;
    }
    public org.apache.commons.math3.linear.FieldMatrix getSubMatrix(int[], int[]) throws org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.AbstractFieldMatrix r0;
        int[] $r1, $r2;
        int $i0, $i1;
        org.apache.commons.math3.linear.FieldMatrix $r3;
        org.apache.commons.math3.linear.AbstractFieldMatrix$1 $r4;
        org.apache.commons.math3.Field $r5;
        java.lang.Object $r6;
        org.apache.commons.math3.FieldElement $r7;

        r0 := @this: org.apache.commons.math3.linear.AbstractFieldMatrix;

        $r1 := @parameter0: int[];

        $r2 := @parameter1: int[];

        virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: void checkSubMatrixIndex(int[],int[])>($r1, $r2);

        $i0 = lengthof $r1;

        $i1 = lengthof $r2;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.linear.FieldMatrix createMatrix(int,int)>($i0, $i1);

        $r4 = new org.apache.commons.math3.linear.AbstractFieldMatrix$1;

        $r5 = r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.Field field>;

        $r6 = interfaceinvoke $r5.<org.apache.commons.math3.Field: java.lang.Object getZero()>();

        $r7 = (org.apache.commons.math3.FieldElement) $r6;

        specialinvoke $r4.<org.apache.commons.math3.linear.AbstractFieldMatrix$1: void <init>(org.apache.commons.math3.linear.AbstractFieldMatrix,org.apache.commons.math3.FieldElement,int[],int[])>(r0, $r7, $r1, $r2);

        interfaceinvoke $r3.<org.apache.commons.math3.linear.FieldMatrix: org.apache.commons.math3.FieldElement walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)>($r4);

        return $r3;
    }
    public org.apache.commons.math3.FieldElement getTrace() throws org.apache.commons.math3.linear.NonSquareMatrixException
    {
        org.apache.commons.math3.linear.AbstractFieldMatrix r0;
        int $i0, $i1;
        org.apache.commons.math3.linear.NonSquareMatrixException $r1;
        org.apache.commons.math3.Field $r2;
        java.lang.Object $r3;
        org.apache.commons.math3.FieldElement r4, $r5;

        r0 := @this: org.apache.commons.math3.linear.AbstractFieldMatrix;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getRowDimension()>();

        $i1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getColumnDimension()>();

        if $i0 == $i1 goto label1;

        $r1 = new org.apache.commons.math3.linear.NonSquareMatrixException;

        specialinvoke $r1.<org.apache.commons.math3.linear.NonSquareMatrixException: void <init>(int,int)>($i0, $i1);

        throw $r1;

     label1:
        $r2 = r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.Field field>;

        $r3 = interfaceinvoke $r2.<org.apache.commons.math3.Field: java.lang.Object getZero()>();

        r4 = (org.apache.commons.math3.FieldElement) $r3;

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label3;

        $r5 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.FieldElement getEntry(int,int)>($i1, $i1);

        $r3 = interfaceinvoke r4.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>($r5);

        r4 = (org.apache.commons.math3.FieldElement) $r3;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        return r4;
    }
    public int hashCode()
    {
        org.apache.commons.math3.linear.AbstractFieldMatrix r0;
        int $i0, $i1, i2, i3, i4, $i5, $i6;
        org.apache.commons.math3.FieldElement $r1;

        r0 := @this: org.apache.commons.math3.linear.AbstractFieldMatrix;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getRowDimension()>();

        $i1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getColumnDimension()>();

        i2 = 9999422 + $i0;

        i2 = i2 * 31;

        i3 = i2 + $i1;

        i2 = 0;

     label1:
        if i2 >= $i0 goto label4;

        i4 = 0;

     label2:
        if i4 >= $i1 goto label3;

        i3 = i3 * 31;

        $i5 = i2 + 1;

        $i5 = $i5 * 11;

        $i6 = i4 + 1;

        $i6 = $i6 * 17;

        $i5 = $i5 + $i6;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.FieldElement getEntry(int,int)>(i2, i4);

        $i6 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $i5 = $i5 * $i6;

        i3 = i3 + $i5;

        i4 = i4 + 1;

        goto label2;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return i3;
    }
    public boolean isSquare()
    {
        org.apache.commons.math3.linear.AbstractFieldMatrix r0;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.linear.AbstractFieldMatrix;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getColumnDimension()>();

        $i1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getRowDimension()>();

        if $i0 != $i1 goto label1;

        return 1;

     label1:
        return 0;
    }
    public org.apache.commons.math3.linear.FieldMatrix multiply(org.apache.commons.math3.linear.FieldMatrix) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.AbstractFieldMatrix r0;
        org.apache.commons.math3.linear.FieldMatrix r1, $r2;
        int $i0, $i1, $i2, i3, i4, i5;
        org.apache.commons.math3.Field $r3;
        java.lang.Object $r4;
        org.apache.commons.math3.FieldElement r5, $r6, $r7;

        r0 := @this: org.apache.commons.math3.linear.AbstractFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldMatrix;

        virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: void checkMultiplicationCompatible(org.apache.commons.math3.linear.FieldMatrix)>(r1);

        $i0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getRowDimension()>();

        $i1 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrix: int getColumnDimension()>();

        $i2 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getColumnDimension()>();

        $r2 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.linear.FieldMatrix createMatrix(int,int)>($i0, $i1);

        i3 = 0;

     label1:
        if i3 >= $i0 goto label6;

        i4 = 0;

     label2:
        if i4 >= $i1 goto label5;

        $r3 = r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.Field field>;

        $r4 = interfaceinvoke $r3.<org.apache.commons.math3.Field: java.lang.Object getZero()>();

        r5 = (org.apache.commons.math3.FieldElement) $r4;

        i5 = 0;

     label3:
        if i5 >= $i2 goto label4;

        $r6 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.FieldElement getEntry(int,int)>(i3, i5);

        $r7 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrix: org.apache.commons.math3.FieldElement getEntry(int,int)>(i5, i4);

        $r4 = interfaceinvoke $r6.<org.apache.commons.math3.FieldElement: java.lang.Object multiply(java.lang.Object)>($r7);

        $r4 = interfaceinvoke r5.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>($r4);

        r5 = (org.apache.commons.math3.FieldElement) $r4;

        i5 = i5 + 1;

        goto label3;

     label4:
        interfaceinvoke $r2.<org.apache.commons.math3.linear.FieldMatrix: void setEntry(int,int,org.apache.commons.math3.FieldElement)>(i3, i4, r5);

        i4 = i4 + 1;

        goto label2;

     label5:
        i3 = i3 + 1;

        goto label1;

     label6:
        return $r2;
    }
public abstract void multiplyEntry(int, int, org.apache.commons.math3.FieldElement) throws org.apache.commons.math3.exception.OutOfRangeException { 
// no body
} 
    public org.apache.commons.math3.linear.FieldVector operate(org.apache.commons.math3.linear.FieldVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.AbstractFieldMatrix r0;
        org.apache.commons.math3.linear.FieldVector r1;
        java.lang.ClassCastException r2;
        org.apache.commons.math3.Field $r3;
        org.apache.commons.math3.linear.ArrayFieldVector $r4, $r5;
        org.apache.commons.math3.FieldElement[] $r6;
        int $i0, $i1, $i2, i3;
        org.apache.commons.math3.exception.DimensionMismatchException $r7;
        java.lang.Object[] $r8;
        java.lang.Object $r9;
        org.apache.commons.math3.FieldElement r10, $r11, $r12;

        r0 := @this: org.apache.commons.math3.linear.AbstractFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldVector;

        $r4 = new org.apache.commons.math3.linear.ArrayFieldVector;

        $r3 = r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.Field field>;

     label1:
        $r5 = (org.apache.commons.math3.linear.ArrayFieldVector) r1;

        $r6 = virtualinvoke $r5.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] getDataRef()>();

        $r6 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.FieldElement[] operate(org.apache.commons.math3.FieldElement[])>($r6);

        specialinvoke $r4.<org.apache.commons.math3.linear.ArrayFieldVector: void <init>(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[],boolean)>($r3, $r6, 0);

     label2:
        return $r4;

     label3:
        r2 := @caughtexception;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getRowDimension()>();

        $i1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getColumnDimension()>();

        $i2 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVector: int getDimension()>();

        if $i2 == $i1 goto label4;

        $r7 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i0 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVector: int getDimension()>();

        specialinvoke $r7.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i0, $i1);

        throw $r7;

     label4:
        $r3 = r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.Field field>;

        $r8 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[] buildArray(org.apache.commons.math3.Field,int)>($r3, $i0);

        $r6 = (org.apache.commons.math3.FieldElement[]) $r8;

        $i2 = 0;

     label5:
        if $i2 >= $i0 goto label8;

        $r3 = r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.Field field>;

        $r9 = interfaceinvoke $r3.<org.apache.commons.math3.Field: java.lang.Object getZero()>();

        r10 = (org.apache.commons.math3.FieldElement) $r9;

        i3 = 0;

     label6:
        if i3 >= $i1 goto label7;

        $r11 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.FieldElement getEntry(int,int)>($i2, i3);

        $r12 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVector: org.apache.commons.math3.FieldElement getEntry(int)>(i3);

        $r9 = interfaceinvoke $r11.<org.apache.commons.math3.FieldElement: java.lang.Object multiply(java.lang.Object)>($r12);

        $r9 = interfaceinvoke r10.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>($r9);

        r10 = (org.apache.commons.math3.FieldElement) $r9;

        i3 = i3 + 1;

        goto label6;

     label7:
        $r6[$i2] = r10;

        $i2 = $i2 + 1;

        goto label5;

     label8:
        $r4 = new org.apache.commons.math3.linear.ArrayFieldVector;

        $r3 = r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.Field field>;

        specialinvoke $r4.<org.apache.commons.math3.linear.ArrayFieldVector: void <init>(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[],boolean)>($r3, $r6, 0);

        return $r4;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }
    public org.apache.commons.math3.FieldElement[] operate(org.apache.commons.math3.FieldElement[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.AbstractFieldMatrix r0;
        org.apache.commons.math3.FieldElement[] r1, r5;
        int $i0, $i1, $i2, i3;
        org.apache.commons.math3.exception.DimensionMismatchException $r2;
        org.apache.commons.math3.Field $r3;
        java.lang.Object[] $r4;
        java.lang.Object $r6;
        org.apache.commons.math3.FieldElement r7, $r8, $r9;

        r0 := @this: org.apache.commons.math3.linear.AbstractFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.FieldElement[];

        $i0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getRowDimension()>();

        $i1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getColumnDimension()>();

        $i2 = lengthof r1;

        if $i2 == $i1 goto label1;

        $r2 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i0 = lengthof r1;

        specialinvoke $r2.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i0, $i1);

        throw $r2;

     label1:
        $r3 = r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.Field field>;

        $r4 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[] buildArray(org.apache.commons.math3.Field,int)>($r3, $i0);

        r5 = (org.apache.commons.math3.FieldElement[]) $r4;

        $i2 = 0;

     label2:
        if $i2 >= $i0 goto label5;

        $r3 = r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.Field field>;

        $r6 = interfaceinvoke $r3.<org.apache.commons.math3.Field: java.lang.Object getZero()>();

        r7 = (org.apache.commons.math3.FieldElement) $r6;

        i3 = 0;

     label3:
        if i3 >= $i1 goto label4;

        $r8 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.FieldElement getEntry(int,int)>($i2, i3);

        $r9 = r1[i3];

        $r6 = interfaceinvoke $r8.<org.apache.commons.math3.FieldElement: java.lang.Object multiply(java.lang.Object)>($r9);

        $r6 = interfaceinvoke r7.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>($r6);

        r7 = (org.apache.commons.math3.FieldElement) $r6;

        i3 = i3 + 1;

        goto label3;

     label4:
        r5[$i2] = r7;

        $i2 = $i2 + 1;

        goto label2;

     label5:
        return r5;
    }
    public org.apache.commons.math3.linear.FieldMatrix power(int) throws org.apache.commons.math3.linear.NonSquareMatrixException, org.apache.commons.math3.exception.NotPositiveException
    {
        org.apache.commons.math3.linear.AbstractFieldMatrix r0;
        int $i0, i1;
        java.util.ArrayList r1, r2;
        org.apache.commons.math3.exception.NotPositiveException $r3;
        java.lang.Integer $r4;
        boolean $z0;
        org.apache.commons.math3.linear.NonSquareMatrixException $r5;
        org.apache.commons.math3.Field $r6;
        org.apache.commons.math3.linear.FieldMatrix $r7, $r12;
        java.lang.String $r8;
        char[] $r9;
        char $c2;
        java.lang.Object $r10;
        java.util.Iterator $r11;

        r0 := @this: org.apache.commons.math3.linear.AbstractFieldMatrix;

        $i0 := @parameter0: int;

        if $i0 >= 0 goto label01;

        $r3 = new org.apache.commons.math3.exception.NotPositiveException;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r3.<org.apache.commons.math3.exception.NotPositiveException: void <init>(java.lang.Number)>($r4);

        throw $r3;

     label01:
        $z0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: boolean isSquare()>();

        if $z0 != 0 goto label02;

        $r5 = new org.apache.commons.math3.linear.NonSquareMatrixException;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getRowDimension()>();

        i1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getColumnDimension()>();

        specialinvoke $r5.<org.apache.commons.math3.linear.NonSquareMatrixException: void <init>(int,int)>($i0, i1);

        throw $r5;

     label02:
        if $i0 != 0 goto label03;

        $r6 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.Field getField()>();

        $i0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getRowDimension()>();

        $r7 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.FieldMatrix createFieldIdentityMatrix(org.apache.commons.math3.Field,int)>($r6, $i0);

        return $r7;

     label03:
        if $i0 != 1 goto label04;

        $r7 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.linear.FieldMatrix copy()>();

        return $r7;

     label04:
        $i0 = $i0 + -1;

        $r8 = staticinvoke <java.lang.Integer: java.lang.String toBinaryString(int)>($i0);

        $r9 = virtualinvoke $r8.<java.lang.String: char[] toCharArray()>();

        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>()>();

        $i0 = 0;

     label05:
        i1 = lengthof $r9;

        if $i0 >= i1 goto label07;

        $c2 = $r9[$i0];

        if $c2 != 49 goto label06;

        i1 = lengthof $r9;

        i1 = i1 - $i0;

        i1 = i1 + -1;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

     label06:
        $i0 = $i0 + 1;

        goto label05;

     label07:
        r2 = new java.util.ArrayList;

        $i0 = lengthof $r9;

        specialinvoke r2.<java.util.ArrayList: void <init>(int)>($i0);

        $r7 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.linear.FieldMatrix copy()>();

        virtualinvoke r2.<java.util.ArrayList: void add(int,java.lang.Object)>(0, $r7);

        $i0 = 1;

     label08:
        i1 = lengthof $r9;

        if $i0 >= i1 goto label09;

        i1 = $i0 + -1;

        $r10 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r7 = (org.apache.commons.math3.linear.FieldMatrix) $r10;

        $r7 = interfaceinvoke $r7.<org.apache.commons.math3.linear.FieldMatrix: org.apache.commons.math3.linear.FieldMatrix multiply(org.apache.commons.math3.linear.FieldMatrix)>($r7);

        virtualinvoke r2.<java.util.ArrayList: void add(int,java.lang.Object)>($i0, $r7);

        $i0 = $i0 + 1;

        goto label08;

     label09:
        $r7 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.linear.FieldMatrix copy()>();

        $r11 = virtualinvoke r1.<java.util.ArrayList: java.util.Iterator iterator()>();

     label10:
        $z0 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label11;

        $r10 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (java.lang.Integer) $r10;

        $i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        $r10 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r12 = (org.apache.commons.math3.linear.FieldMatrix) $r10;

        $r7 = interfaceinvoke $r7.<org.apache.commons.math3.linear.FieldMatrix: org.apache.commons.math3.linear.FieldMatrix multiply(org.apache.commons.math3.linear.FieldMatrix)>($r12);

        goto label10;

     label11:
        return $r7;
    }
    public org.apache.commons.math3.linear.FieldMatrix preMultiply(org.apache.commons.math3.linear.FieldMatrix) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.AbstractFieldMatrix r0;
        org.apache.commons.math3.linear.FieldMatrix r1;

        r0 := @this: org.apache.commons.math3.linear.AbstractFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldMatrix;

        r1 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrix: org.apache.commons.math3.linear.FieldMatrix multiply(org.apache.commons.math3.linear.FieldMatrix)>(r0);

        return r1;
    }
    public org.apache.commons.math3.linear.FieldVector preMultiply(org.apache.commons.math3.linear.FieldVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.AbstractFieldMatrix r0;
        org.apache.commons.math3.linear.FieldVector r1;
        java.lang.ClassCastException r2;
        org.apache.commons.math3.Field $r3;
        org.apache.commons.math3.linear.ArrayFieldVector $r4, $r5;
        org.apache.commons.math3.FieldElement[] $r6;
        int $i0, $i1, $i2, i3;
        org.apache.commons.math3.exception.DimensionMismatchException $r7;
        java.lang.Object[] $r8;
        java.lang.Object $r9;
        org.apache.commons.math3.FieldElement r10, $r11, $r12;

        r0 := @this: org.apache.commons.math3.linear.AbstractFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldVector;

        $r4 = new org.apache.commons.math3.linear.ArrayFieldVector;

        $r3 = r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.Field field>;

     label1:
        $r5 = (org.apache.commons.math3.linear.ArrayFieldVector) r1;

        $r6 = virtualinvoke $r5.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] getDataRef()>();

        $r6 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.FieldElement[] preMultiply(org.apache.commons.math3.FieldElement[])>($r6);

        specialinvoke $r4.<org.apache.commons.math3.linear.ArrayFieldVector: void <init>(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[],boolean)>($r3, $r6, 0);

     label2:
        return $r4;

     label3:
        r2 := @caughtexception;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getRowDimension()>();

        $i1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getColumnDimension()>();

        $i2 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVector: int getDimension()>();

        if $i2 == $i0 goto label4;

        $r7 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i1 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVector: int getDimension()>();

        specialinvoke $r7.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i1, $i0);

        throw $r7;

     label4:
        $r3 = r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.Field field>;

        $r8 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[] buildArray(org.apache.commons.math3.Field,int)>($r3, $i1);

        $r6 = (org.apache.commons.math3.FieldElement[]) $r8;

        $i2 = 0;

     label5:
        if $i2 >= $i1 goto label8;

        $r3 = r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.Field field>;

        $r9 = interfaceinvoke $r3.<org.apache.commons.math3.Field: java.lang.Object getZero()>();

        r10 = (org.apache.commons.math3.FieldElement) $r9;

        i3 = 0;

     label6:
        if i3 >= $i0 goto label7;

        $r11 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.FieldElement getEntry(int,int)>(i3, $i2);

        $r12 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVector: org.apache.commons.math3.FieldElement getEntry(int)>(i3);

        $r9 = interfaceinvoke $r11.<org.apache.commons.math3.FieldElement: java.lang.Object multiply(java.lang.Object)>($r12);

        $r9 = interfaceinvoke r10.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>($r9);

        r10 = (org.apache.commons.math3.FieldElement) $r9;

        i3 = i3 + 1;

        goto label6;

     label7:
        $r6[$i2] = r10;

        $i2 = $i2 + 1;

        goto label5;

     label8:
        $r4 = new org.apache.commons.math3.linear.ArrayFieldVector;

        $r3 = r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.Field field>;

        specialinvoke $r4.<org.apache.commons.math3.linear.ArrayFieldVector: void <init>(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[],boolean)>($r3, $r6, 0);

        return $r4;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }
    public org.apache.commons.math3.FieldElement[] preMultiply(org.apache.commons.math3.FieldElement[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.AbstractFieldMatrix r0;
        org.apache.commons.math3.FieldElement[] r1, r5;
        int $i0, $i1, $i2, i3;
        org.apache.commons.math3.exception.DimensionMismatchException $r2;
        org.apache.commons.math3.Field $r3;
        java.lang.Object[] $r4;
        java.lang.Object $r6;
        org.apache.commons.math3.FieldElement r7, $r8, $r9;

        r0 := @this: org.apache.commons.math3.linear.AbstractFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.FieldElement[];

        $i0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getRowDimension()>();

        $i1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getColumnDimension()>();

        $i2 = lengthof r1;

        if $i2 == $i0 goto label1;

        $r2 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i1 = lengthof r1;

        specialinvoke $r2.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i1, $i0);

        throw $r2;

     label1:
        $r3 = r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.Field field>;

        $r4 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[] buildArray(org.apache.commons.math3.Field,int)>($r3, $i1);

        r5 = (org.apache.commons.math3.FieldElement[]) $r4;

        $i2 = 0;

     label2:
        if $i2 >= $i1 goto label5;

        $r3 = r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.Field field>;

        $r6 = interfaceinvoke $r3.<org.apache.commons.math3.Field: java.lang.Object getZero()>();

        r7 = (org.apache.commons.math3.FieldElement) $r6;

        i3 = 0;

     label3:
        if i3 >= $i0 goto label4;

        $r8 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.FieldElement getEntry(int,int)>(i3, $i2);

        $r9 = r1[i3];

        $r6 = interfaceinvoke $r8.<org.apache.commons.math3.FieldElement: java.lang.Object multiply(java.lang.Object)>($r9);

        $r6 = interfaceinvoke r7.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>($r6);

        r7 = (org.apache.commons.math3.FieldElement) $r6;

        i3 = i3 + 1;

        goto label3;

     label4:
        r5[$i2] = r7;

        $i2 = $i2 + 1;

        goto label2;

     label5:
        return r5;
    }
    public org.apache.commons.math3.linear.FieldMatrix scalarAdd(org.apache.commons.math3.FieldElement)
    {
        org.apache.commons.math3.linear.AbstractFieldMatrix r0;
        org.apache.commons.math3.FieldElement r1, $r3;
        int $i0, $i1, i2, i3;
        org.apache.commons.math3.linear.FieldMatrix $r2;
        java.lang.Object $r4;

        r0 := @this: org.apache.commons.math3.linear.AbstractFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.FieldElement;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getRowDimension()>();

        $i1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getColumnDimension()>();

        $r2 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.linear.FieldMatrix createMatrix(int,int)>($i0, $i1);

        i2 = 0;

     label1:
        if i2 >= $i0 goto label4;

        i3 = 0;

     label2:
        if i3 >= $i1 goto label3;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.FieldElement getEntry(int,int)>(i2, i3);

        $r4 = interfaceinvoke $r3.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>(r1);

        $r3 = (org.apache.commons.math3.FieldElement) $r4;

        interfaceinvoke $r2.<org.apache.commons.math3.linear.FieldMatrix: void setEntry(int,int,org.apache.commons.math3.FieldElement)>(i2, i3, $r3);

        i3 = i3 + 1;

        goto label2;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return $r2;
    }
    public org.apache.commons.math3.linear.FieldMatrix scalarMultiply(org.apache.commons.math3.FieldElement)
    {
        org.apache.commons.math3.linear.AbstractFieldMatrix r0;
        org.apache.commons.math3.FieldElement r1, $r3;
        int $i0, $i1, i2, i3;
        org.apache.commons.math3.linear.FieldMatrix $r2;
        java.lang.Object $r4;

        r0 := @this: org.apache.commons.math3.linear.AbstractFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.FieldElement;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getRowDimension()>();

        $i1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getColumnDimension()>();

        $r2 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.linear.FieldMatrix createMatrix(int,int)>($i0, $i1);

        i2 = 0;

     label1:
        if i2 >= $i0 goto label4;

        i3 = 0;

     label2:
        if i3 >= $i1 goto label3;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.FieldElement getEntry(int,int)>(i2, i3);

        $r4 = interfaceinvoke $r3.<org.apache.commons.math3.FieldElement: java.lang.Object multiply(java.lang.Object)>(r1);

        $r3 = (org.apache.commons.math3.FieldElement) $r4;

        interfaceinvoke $r2.<org.apache.commons.math3.linear.FieldMatrix: void setEntry(int,int,org.apache.commons.math3.FieldElement)>(i2, i3, $r3);

        i3 = i3 + 1;

        goto label2;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return $r2;
    }
    public void setColumn(int, org.apache.commons.math3.FieldElement[]) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.linear.MatrixDimensionMismatchException
    {
        org.apache.commons.math3.linear.AbstractFieldMatrix r0;
        int $i0, $i1, $i2;
        org.apache.commons.math3.FieldElement[] r1;
        org.apache.commons.math3.linear.MatrixDimensionMismatchException $r2;
        org.apache.commons.math3.FieldElement $r3;

        r0 := @this: org.apache.commons.math3.linear.AbstractFieldMatrix;

        $i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.FieldElement[];

        virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: void checkColumnIndex(int)>($i0);

        $i1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getRowDimension()>();

        $i2 = lengthof r1;

        if $i2 == $i1 goto label1;

        $r2 = new org.apache.commons.math3.linear.MatrixDimensionMismatchException;

        $i0 = lengthof r1;

        specialinvoke $r2.<org.apache.commons.math3.linear.MatrixDimensionMismatchException: void <init>(int,int,int,int)>($i0, 1, $i1, 1);

        throw $r2;

     label1:
        $i2 = 0;

     label2:
        if $i2 >= $i1 goto label3;

        $r3 = r1[$i2];

        virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: void setEntry(int,int,org.apache.commons.math3.FieldElement)>($i2, $i0, $r3);

        $i2 = $i2 + 1;

        goto label2;

     label3:
        return;
    }
    public void setColumnMatrix(int, org.apache.commons.math3.linear.FieldMatrix) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.linear.MatrixDimensionMismatchException
    {
        org.apache.commons.math3.linear.AbstractFieldMatrix r0;
        int $i0, $i1, $i2;
        org.apache.commons.math3.linear.FieldMatrix r1;
        org.apache.commons.math3.linear.MatrixDimensionMismatchException $r2;
        org.apache.commons.math3.FieldElement $r3;

        r0 := @this: org.apache.commons.math3.linear.AbstractFieldMatrix;

        $i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.linear.FieldMatrix;

        virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: void checkColumnIndex(int)>($i0);

        $i1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getRowDimension()>();

        $i2 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrix: int getRowDimension()>();

        if $i2 != $i1 goto label1;

        $i2 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrix: int getColumnDimension()>();

        if $i2 == 1 goto label2;

     label1:
        $r2 = new org.apache.commons.math3.linear.MatrixDimensionMismatchException;

        $i0 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrix: int getRowDimension()>();

        $i2 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrix: int getColumnDimension()>();

        specialinvoke $r2.<org.apache.commons.math3.linear.MatrixDimensionMismatchException: void <init>(int,int,int,int)>($i0, $i2, $i1, 1);

        throw $r2;

     label2:
        $i2 = 0;

     label3:
        if $i2 >= $i1 goto label4;

        $r3 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrix: org.apache.commons.math3.FieldElement getEntry(int,int)>($i2, 0);

        virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: void setEntry(int,int,org.apache.commons.math3.FieldElement)>($i2, $i0, $r3);

        $i2 = $i2 + 1;

        goto label3;

     label4:
        return;
    }
    public void setColumnVector(int, org.apache.commons.math3.linear.FieldVector) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.linear.MatrixDimensionMismatchException
    {
        org.apache.commons.math3.linear.AbstractFieldMatrix r0;
        int $i0, $i1, $i2;
        org.apache.commons.math3.linear.FieldVector r1;
        org.apache.commons.math3.linear.MatrixDimensionMismatchException $r2;
        org.apache.commons.math3.FieldElement $r3;

        r0 := @this: org.apache.commons.math3.linear.AbstractFieldMatrix;

        $i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.linear.FieldVector;

        virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: void checkColumnIndex(int)>($i0);

        $i1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getRowDimension()>();

        $i2 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVector: int getDimension()>();

        if $i2 == $i1 goto label1;

        $r2 = new org.apache.commons.math3.linear.MatrixDimensionMismatchException;

        $i0 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVector: int getDimension()>();

        specialinvoke $r2.<org.apache.commons.math3.linear.MatrixDimensionMismatchException: void <init>(int,int,int,int)>($i0, 1, $i1, 1);

        throw $r2;

     label1:
        $i2 = 0;

     label2:
        if $i2 >= $i1 goto label3;

        $r3 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVector: org.apache.commons.math3.FieldElement getEntry(int)>($i2);

        virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: void setEntry(int,int,org.apache.commons.math3.FieldElement)>($i2, $i0, $r3);

        $i2 = $i2 + 1;

        goto label2;

     label3:
        return;
    }
public abstract void setEntry(int, int, org.apache.commons.math3.FieldElement) throws org.apache.commons.math3.exception.OutOfRangeException { 
// no body
} 
    public void setRow(int, org.apache.commons.math3.FieldElement[]) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.linear.MatrixDimensionMismatchException
    {
        org.apache.commons.math3.linear.AbstractFieldMatrix r0;
        int $i0, $i1, $i2;
        org.apache.commons.math3.FieldElement[] r1;
        org.apache.commons.math3.linear.MatrixDimensionMismatchException $r2;
        org.apache.commons.math3.FieldElement $r3;

        r0 := @this: org.apache.commons.math3.linear.AbstractFieldMatrix;

        $i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.FieldElement[];

        virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: void checkRowIndex(int)>($i0);

        $i1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getColumnDimension()>();

        $i2 = lengthof r1;

        if $i2 == $i1 goto label1;

        $r2 = new org.apache.commons.math3.linear.MatrixDimensionMismatchException;

        $i0 = lengthof r1;

        specialinvoke $r2.<org.apache.commons.math3.linear.MatrixDimensionMismatchException: void <init>(int,int,int,int)>(1, $i0, 1, $i1);

        throw $r2;

     label1:
        $i2 = 0;

     label2:
        if $i2 >= $i1 goto label3;

        $r3 = r1[$i2];

        virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: void setEntry(int,int,org.apache.commons.math3.FieldElement)>($i0, $i2, $r3);

        $i2 = $i2 + 1;

        goto label2;

     label3:
        return;
    }
    public void setRowMatrix(int, org.apache.commons.math3.linear.FieldMatrix) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.linear.MatrixDimensionMismatchException
    {
        org.apache.commons.math3.linear.AbstractFieldMatrix r0;
        int $i0, $i1, $i2;
        org.apache.commons.math3.linear.FieldMatrix r1;
        org.apache.commons.math3.linear.MatrixDimensionMismatchException $r2;
        org.apache.commons.math3.FieldElement $r3;

        r0 := @this: org.apache.commons.math3.linear.AbstractFieldMatrix;

        $i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.linear.FieldMatrix;

        virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: void checkRowIndex(int)>($i0);

        $i1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getColumnDimension()>();

        $i2 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrix: int getRowDimension()>();

        if $i2 != 1 goto label1;

        $i2 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrix: int getColumnDimension()>();

        if $i2 == $i1 goto label2;

     label1:
        $r2 = new org.apache.commons.math3.linear.MatrixDimensionMismatchException;

        $i0 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrix: int getRowDimension()>();

        $i2 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrix: int getColumnDimension()>();

        specialinvoke $r2.<org.apache.commons.math3.linear.MatrixDimensionMismatchException: void <init>(int,int,int,int)>($i0, $i2, 1, $i1);

        throw $r2;

     label2:
        $i2 = 0;

     label3:
        if $i2 >= $i1 goto label4;

        $r3 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrix: org.apache.commons.math3.FieldElement getEntry(int,int)>(0, $i2);

        virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: void setEntry(int,int,org.apache.commons.math3.FieldElement)>($i0, $i2, $r3);

        $i2 = $i2 + 1;

        goto label3;

     label4:
        return;
    }
    public void setRowVector(int, org.apache.commons.math3.linear.FieldVector) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.linear.MatrixDimensionMismatchException
    {
        org.apache.commons.math3.linear.AbstractFieldMatrix r0;
        int $i0, $i1, $i2;
        org.apache.commons.math3.linear.FieldVector r1;
        org.apache.commons.math3.linear.MatrixDimensionMismatchException $r2;
        org.apache.commons.math3.FieldElement $r3;

        r0 := @this: org.apache.commons.math3.linear.AbstractFieldMatrix;

        $i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.linear.FieldVector;

        virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: void checkRowIndex(int)>($i0);

        $i1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getColumnDimension()>();

        $i2 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVector: int getDimension()>();

        if $i2 == $i1 goto label1;

        $r2 = new org.apache.commons.math3.linear.MatrixDimensionMismatchException;

        $i0 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVector: int getDimension()>();

        specialinvoke $r2.<org.apache.commons.math3.linear.MatrixDimensionMismatchException: void <init>(int,int,int,int)>(1, $i0, 1, $i1);

        throw $r2;

     label1:
        $i2 = 0;

     label2:
        if $i2 >= $i1 goto label3;

        $r3 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVector: org.apache.commons.math3.FieldElement getEntry(int)>($i2);

        virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: void setEntry(int,int,org.apache.commons.math3.FieldElement)>($i0, $i2, $r3);

        $i2 = $i2 + 1;

        goto label2;

     label3:
        return;
    }
    public void setSubMatrix(org.apache.commons.math3.FieldElement[][], int, int) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.linear.AbstractFieldMatrix r0;
        org.apache.commons.math3.FieldElement[][] r1;
        int $i0, $i1, i2, i3, i4, $i5, $i6, $i7;
        org.apache.commons.math3.exception.NullArgumentException $r2;
        org.apache.commons.math3.exception.NoDataException $r3;
        org.apache.commons.math3.exception.util.LocalizedFormats $r4;
        org.apache.commons.math3.FieldElement[] $r5;
        org.apache.commons.math3.exception.DimensionMismatchException $r6;
        org.apache.commons.math3.FieldElement $r7;

        r0 := @this: org.apache.commons.math3.linear.AbstractFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.FieldElement[][];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if r1 != null goto label01;

        $r2 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r2.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r2;

     label01:
        i3 = lengthof r1;

        if i3 != 0 goto label02;

        $r3 = new org.apache.commons.math3.exception.NoDataException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats AT_LEAST_ONE_ROW>;

        specialinvoke $r3.<org.apache.commons.math3.exception.NoDataException: void <init>(org.apache.commons.math3.exception.util.Localizable)>($r4);

        throw $r3;

     label02:
        $r5 = r1[0];

        i2 = lengthof $r5;

        if i2 != 0 goto label03;

        $r3 = new org.apache.commons.math3.exception.NoDataException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats AT_LEAST_ONE_COLUMN>;

        specialinvoke $r3.<org.apache.commons.math3.exception.NoDataException: void <init>(org.apache.commons.math3.exception.util.Localizable)>($r4);

        throw $r3;

     label03:
        i4 = 1;

     label04:
        if i4 >= i3 goto label06;

        $r5 = r1[i4];

        $i5 = lengthof $r5;

        if $i5 == i2 goto label05;

        $r6 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $r5 = r1[i4];

        $i0 = lengthof $r5;

        specialinvoke $r6.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>(i2, $i0);

        throw $r6;

     label05:
        i4 = i4 + 1;

        goto label04;

     label06:
        virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: void checkRowIndex(int)>($i0);

        virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: void checkColumnIndex(int)>($i1);

        i4 = i3 + $i0;

        i4 = i4 + -1;

        virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: void checkRowIndex(int)>(i4);

        i4 = i2 + $i1;

        i4 = i4 + -1;

        virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: void checkColumnIndex(int)>(i4);

        i4 = 0;

     label07:
        if i4 >= i3 goto label10;

        $i5 = 0;

     label08:
        if $i5 >= i2 goto label09;

        $i6 = $i0 + i4;

        $i7 = $i1 + $i5;

        $r5 = r1[i4];

        $r7 = $r5[$i5];

        virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: void setEntry(int,int,org.apache.commons.math3.FieldElement)>($i6, $i7, $r7);

        $i5 = $i5 + 1;

        goto label08;

     label09:
        i4 = i4 + 1;

        goto label07;

     label10:
        return;
    }
    public org.apache.commons.math3.linear.FieldMatrix subtract(org.apache.commons.math3.linear.FieldMatrix) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException
    {
        org.apache.commons.math3.linear.AbstractFieldMatrix r0;
        org.apache.commons.math3.linear.FieldMatrix r1, $r2;
        int $i0, $i1, i2, i3;
        org.apache.commons.math3.FieldElement $r3, $r4;
        java.lang.Object $r5;

        r0 := @this: org.apache.commons.math3.linear.AbstractFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldMatrix;

        virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: void checkSubtractionCompatible(org.apache.commons.math3.linear.FieldMatrix)>(r1);

        $i0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getRowDimension()>();

        $i1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getColumnDimension()>();

        $r2 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.linear.FieldMatrix createMatrix(int,int)>($i0, $i1);

        i2 = 0;

     label1:
        if i2 >= $i0 goto label4;

        i3 = 0;

     label2:
        if i3 >= $i1 goto label3;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.FieldElement getEntry(int,int)>(i2, i3);

        $r4 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrix: org.apache.commons.math3.FieldElement getEntry(int,int)>(i2, i3);

        $r5 = interfaceinvoke $r3.<org.apache.commons.math3.FieldElement: java.lang.Object subtract(java.lang.Object)>($r4);

        $r3 = (org.apache.commons.math3.FieldElement) $r5;

        interfaceinvoke $r2.<org.apache.commons.math3.linear.FieldMatrix: void setEntry(int,int,org.apache.commons.math3.FieldElement)>(i2, i3, $r3);

        i3 = i3 + 1;

        goto label2;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return $r2;
    }
    public java.lang.String toString()
    {
        org.apache.commons.math3.linear.AbstractFieldMatrix r0;
        java.lang.StringBuffer r1, $r4;
        int $i0, $i1, $i2, i3;
        java.lang.Class $r2;
        java.lang.String $r3;
        org.apache.commons.math3.FieldElement $r5;

        r0 := @this: org.apache.commons.math3.linear.AbstractFieldMatrix;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getRowDimension()>();

        $i1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getColumnDimension()>();

        r1 = new java.lang.StringBuffer;

        specialinvoke r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $i2 = virtualinvoke $r3.<java.lang.String: int lastIndexOf(int)>(46);

        $i2 = $i2 + 1;

        $r3 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int)>($i2);

        $r4 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("{");

        $i2 = 0;

     label1:
        if $i2 >= $i0 goto label6;

        if $i2 <= 0 goto label2;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

     label2:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("{");

        i3 = 0;

     label3:
        if i3 >= $i1 goto label5;

        if i3 <= 0 goto label4;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

     label4:
        $r5 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.FieldElement getEntry(int,int)>($i2, i3);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r5);

        i3 = i3 + 1;

        goto label3;

     label5:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("}");

        $i2 = $i2 + 1;

        goto label1;

     label6:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("}");

        $r3 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }
    public org.apache.commons.math3.linear.FieldMatrix transpose()
    {
        org.apache.commons.math3.linear.AbstractFieldMatrix r0;
        org.apache.commons.math3.linear.AbstractFieldMatrix$3 $r1;
        int $i0, $i1;
        org.apache.commons.math3.linear.FieldMatrix $r2;
        org.apache.commons.math3.Field $r3;
        java.lang.Object $r4;
        org.apache.commons.math3.FieldElement $r5;

        r0 := @this: org.apache.commons.math3.linear.AbstractFieldMatrix;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getRowDimension()>();

        $i1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getColumnDimension()>();

        $r2 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.linear.FieldMatrix createMatrix(int,int)>($i1, $i0);

        $r1 = new org.apache.commons.math3.linear.AbstractFieldMatrix$3;

        $r3 = r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.Field field>;

        $r4 = interfaceinvoke $r3.<org.apache.commons.math3.Field: java.lang.Object getZero()>();

        $r5 = (org.apache.commons.math3.FieldElement) $r4;

        specialinvoke $r1.<org.apache.commons.math3.linear.AbstractFieldMatrix$3: void <init>(org.apache.commons.math3.linear.AbstractFieldMatrix,org.apache.commons.math3.FieldElement,org.apache.commons.math3.linear.FieldMatrix)>(r0, $r5, $r2);

        virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.FieldElement walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)>($r1);

        return $r2;
    }
    public org.apache.commons.math3.FieldElement walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)
    {
        org.apache.commons.math3.linear.AbstractFieldMatrix r0;
        org.apache.commons.math3.linear.FieldMatrixChangingVisitor r1;
        int $i0, $i1, $i2, $i3;
        org.apache.commons.math3.FieldElement $r2;

        r0 := @this: org.apache.commons.math3.linear.AbstractFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldMatrixChangingVisitor;

        $i2 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getRowDimension()>();

        $i3 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getColumnDimension()>();

        $i0 = $i2 + -1;

        $i1 = $i3 + -1;

        interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixChangingVisitor: void start(int,int,int,int,int,int)>($i2, $i3, 0, $i0, 0, $i1);

        $i0 = 0;

     label1:
        if $i0 >= $i3 goto label4;

        $i1 = 0;

     label2:
        if $i1 >= $i2 goto label3;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.FieldElement getEntry(int,int)>($i1, $i0);

        $r2 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixChangingVisitor: org.apache.commons.math3.FieldElement visit(int,int,org.apache.commons.math3.FieldElement)>($i1, $i0, $r2);

        virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: void setEntry(int,int,org.apache.commons.math3.FieldElement)>($i1, $i0, $r2);

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $i0 = $i0 + 1;

        goto label1;

     label4:
        $r2 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixChangingVisitor: org.apache.commons.math3.FieldElement end()>();

        return $r2;
    }
    public org.apache.commons.math3.FieldElement walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor, int, int, int, int) throws org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.AbstractFieldMatrix r0;
        org.apache.commons.math3.linear.FieldMatrixChangingVisitor r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.apache.commons.math3.FieldElement $r2;

        r0 := @this: org.apache.commons.math3.linear.AbstractFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldMatrixChangingVisitor;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: void checkSubMatrixIndex(int,int,int,int)>($i0, $i1, $i2, $i3);

        $i4 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getRowDimension()>();

        $i5 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getColumnDimension()>();

        interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixChangingVisitor: void start(int,int,int,int,int,int)>($i4, $i5, $i0, $i1, $i2, $i3);

     label1:
        if $i2 > $i3 goto label4;

        $i4 = $i0;

     label2:
        if $i4 > $i1 goto label3;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.FieldElement getEntry(int,int)>($i4, $i2);

        $r2 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixChangingVisitor: org.apache.commons.math3.FieldElement visit(int,int,org.apache.commons.math3.FieldElement)>($i4, $i2, $r2);

        virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: void setEntry(int,int,org.apache.commons.math3.FieldElement)>($i4, $i2, $r2);

        $i4 = $i4 + 1;

        goto label2;

     label3:
        $i2 = $i2 + 1;

        goto label1;

     label4:
        $r2 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixChangingVisitor: org.apache.commons.math3.FieldElement end()>();

        return $r2;
    }
    public org.apache.commons.math3.FieldElement walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)
    {
        org.apache.commons.math3.linear.AbstractFieldMatrix r0;
        org.apache.commons.math3.linear.FieldMatrixPreservingVisitor r1;
        int $i0, $i1, $i2, $i3;
        org.apache.commons.math3.FieldElement $r2;

        r0 := @this: org.apache.commons.math3.linear.AbstractFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldMatrixPreservingVisitor;

        $i2 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getRowDimension()>();

        $i3 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getColumnDimension()>();

        $i0 = $i2 + -1;

        $i1 = $i3 + -1;

        interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixPreservingVisitor: void start(int,int,int,int,int,int)>($i2, $i3, 0, $i0, 0, $i1);

        $i0 = 0;

     label1:
        if $i0 >= $i3 goto label4;

        $i1 = 0;

     label2:
        if $i1 >= $i2 goto label3;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.FieldElement getEntry(int,int)>($i1, $i0);

        interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixPreservingVisitor: void visit(int,int,org.apache.commons.math3.FieldElement)>($i1, $i0, $r2);

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $i0 = $i0 + 1;

        goto label1;

     label4:
        $r2 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixPreservingVisitor: org.apache.commons.math3.FieldElement end()>();

        return $r2;
    }
    public org.apache.commons.math3.FieldElement walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor, int, int, int, int) throws org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.AbstractFieldMatrix r0;
        org.apache.commons.math3.linear.FieldMatrixPreservingVisitor r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.apache.commons.math3.FieldElement $r2;

        r0 := @this: org.apache.commons.math3.linear.AbstractFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldMatrixPreservingVisitor;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: void checkSubMatrixIndex(int,int,int,int)>($i0, $i1, $i2, $i3);

        $i4 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getRowDimension()>();

        $i5 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getColumnDimension()>();

        interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixPreservingVisitor: void start(int,int,int,int,int,int)>($i4, $i5, $i0, $i1, $i2, $i3);

     label1:
        if $i2 > $i3 goto label4;

        $i4 = $i0;

     label2:
        if $i4 > $i1 goto label3;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.FieldElement getEntry(int,int)>($i4, $i2);

        interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixPreservingVisitor: void visit(int,int,org.apache.commons.math3.FieldElement)>($i4, $i2, $r2);

        $i4 = $i4 + 1;

        goto label2;

     label3:
        $i2 = $i2 + 1;

        goto label1;

     label4:
        $r2 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixPreservingVisitor: org.apache.commons.math3.FieldElement end()>();

        return $r2;
    }
    public org.apache.commons.math3.FieldElement walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)
    {
        org.apache.commons.math3.linear.AbstractFieldMatrix r0;
        org.apache.commons.math3.linear.FieldMatrixChangingVisitor r1;
        org.apache.commons.math3.FieldElement $r2;

        r0 := @this: org.apache.commons.math3.linear.AbstractFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldMatrixChangingVisitor;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.FieldElement walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)>(r1);

        return $r2;
    }
    public org.apache.commons.math3.FieldElement walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor, int, int, int, int) throws org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.AbstractFieldMatrix r0;
        org.apache.commons.math3.linear.FieldMatrixChangingVisitor r1;
        int $i0, $i1, $i2, $i3;
        org.apache.commons.math3.FieldElement $r2;

        r0 := @this: org.apache.commons.math3.linear.AbstractFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldMatrixChangingVisitor;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.FieldElement walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor,int,int,int,int)>(r1, $i0, $i1, $i2, $i3);

        return $r2;
    }
    public org.apache.commons.math3.FieldElement walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)
    {
        org.apache.commons.math3.linear.AbstractFieldMatrix r0;
        org.apache.commons.math3.linear.FieldMatrixPreservingVisitor r1;
        org.apache.commons.math3.FieldElement $r2;

        r0 := @this: org.apache.commons.math3.linear.AbstractFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldMatrixPreservingVisitor;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.FieldElement walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)>(r1);

        return $r2;
    }
    public org.apache.commons.math3.FieldElement walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor, int, int, int, int) throws org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.AbstractFieldMatrix r0;
        org.apache.commons.math3.linear.FieldMatrixPreservingVisitor r1;
        int $i0, $i1, $i2, $i3;
        org.apache.commons.math3.FieldElement $r2;

        r0 := @this: org.apache.commons.math3.linear.AbstractFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldMatrixPreservingVisitor;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.FieldElement walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor,int,int,int,int)>(r1, $i0, $i1, $i2, $i3);

        return $r2;
    }
    public org.apache.commons.math3.FieldElement walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)
    {
        org.apache.commons.math3.linear.AbstractFieldMatrix r0;
        org.apache.commons.math3.linear.FieldMatrixChangingVisitor r1;
        int $i0, $i1, $i2, $i3;
        org.apache.commons.math3.FieldElement $r2;

        r0 := @this: org.apache.commons.math3.linear.AbstractFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldMatrixChangingVisitor;

        $i2 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getRowDimension()>();

        $i3 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getColumnDimension()>();

        $i0 = $i2 + -1;

        $i1 = $i3 + -1;

        interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixChangingVisitor: void start(int,int,int,int,int,int)>($i2, $i3, 0, $i0, 0, $i1);

        $i0 = 0;

     label1:
        if $i0 >= $i2 goto label4;

        $i1 = 0;

     label2:
        if $i1 >= $i3 goto label3;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.FieldElement getEntry(int,int)>($i0, $i1);

        $r2 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixChangingVisitor: org.apache.commons.math3.FieldElement visit(int,int,org.apache.commons.math3.FieldElement)>($i0, $i1, $r2);

        virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: void setEntry(int,int,org.apache.commons.math3.FieldElement)>($i0, $i1, $r2);

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $i0 = $i0 + 1;

        goto label1;

     label4:
        $r2 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixChangingVisitor: org.apache.commons.math3.FieldElement end()>();

        return $r2;
    }
    public org.apache.commons.math3.FieldElement walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor, int, int, int, int) throws org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.AbstractFieldMatrix r0;
        org.apache.commons.math3.linear.FieldMatrixChangingVisitor r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.apache.commons.math3.FieldElement $r2;

        r0 := @this: org.apache.commons.math3.linear.AbstractFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldMatrixChangingVisitor;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: void checkSubMatrixIndex(int,int,int,int)>($i0, $i1, $i2, $i3);

        $i4 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getRowDimension()>();

        $i5 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getColumnDimension()>();

        interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixChangingVisitor: void start(int,int,int,int,int,int)>($i4, $i5, $i0, $i1, $i2, $i3);

     label1:
        if $i0 > $i1 goto label4;

        $i4 = $i2;

     label2:
        if $i4 > $i3 goto label3;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.FieldElement getEntry(int,int)>($i0, $i4);

        $r2 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixChangingVisitor: org.apache.commons.math3.FieldElement visit(int,int,org.apache.commons.math3.FieldElement)>($i0, $i4, $r2);

        virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: void setEntry(int,int,org.apache.commons.math3.FieldElement)>($i0, $i4, $r2);

        $i4 = $i4 + 1;

        goto label2;

     label3:
        $i0 = $i0 + 1;

        goto label1;

     label4:
        $r2 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixChangingVisitor: org.apache.commons.math3.FieldElement end()>();

        return $r2;
    }
    public org.apache.commons.math3.FieldElement walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)
    {
        org.apache.commons.math3.linear.AbstractFieldMatrix r0;
        org.apache.commons.math3.linear.FieldMatrixPreservingVisitor r1;
        int $i0, $i1, $i2, $i3;
        org.apache.commons.math3.FieldElement $r2;

        r0 := @this: org.apache.commons.math3.linear.AbstractFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldMatrixPreservingVisitor;

        $i2 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getRowDimension()>();

        $i3 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getColumnDimension()>();

        $i0 = $i2 + -1;

        $i1 = $i3 + -1;

        interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixPreservingVisitor: void start(int,int,int,int,int,int)>($i2, $i3, 0, $i0, 0, $i1);

        $i0 = 0;

     label1:
        if $i0 >= $i2 goto label4;

        $i1 = 0;

     label2:
        if $i1 >= $i3 goto label3;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.FieldElement getEntry(int,int)>($i0, $i1);

        interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixPreservingVisitor: void visit(int,int,org.apache.commons.math3.FieldElement)>($i0, $i1, $r2);

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $i0 = $i0 + 1;

        goto label1;

     label4:
        $r2 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixPreservingVisitor: org.apache.commons.math3.FieldElement end()>();

        return $r2;
    }
    public org.apache.commons.math3.FieldElement walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor, int, int, int, int) throws org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.AbstractFieldMatrix r0;
        org.apache.commons.math3.linear.FieldMatrixPreservingVisitor r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.apache.commons.math3.FieldElement $r2;

        r0 := @this: org.apache.commons.math3.linear.AbstractFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldMatrixPreservingVisitor;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: void checkSubMatrixIndex(int,int,int,int)>($i0, $i1, $i2, $i3);

        $i4 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getRowDimension()>();

        $i5 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: int getColumnDimension()>();

        interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixPreservingVisitor: void start(int,int,int,int,int,int)>($i4, $i5, $i0, $i1, $i2, $i3);

     label1:
        if $i0 > $i1 goto label4;

        $i4 = $i2;

     label2:
        if $i4 > $i3 goto label3;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: org.apache.commons.math3.FieldElement getEntry(int,int)>($i0, $i4);

        interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixPreservingVisitor: void visit(int,int,org.apache.commons.math3.FieldElement)>($i0, $i4, $r2);

        $i4 = $i4 + 1;

        goto label2;

     label3:
        $i0 = $i0 + 1;

        goto label1;

     label4:
        $r2 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixPreservingVisitor: org.apache.commons.math3.FieldElement end()>();

        return $r2;
    }
