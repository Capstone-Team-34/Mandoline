org.apache.commons.math3.linear.ConjugateGradient extends org.apache.commons.math3.linear.PreconditionedIterativeLinearSolver
public static final java.lang.String OPERATOR
public static final java.lang.String VECTOR
private boolean check
private final double delta
    public void <init>(int, double, boolean)
    {
        org.apache.commons.math3.linear.ConjugateGradient r0;
        int $i0;
        double $d0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.linear.ConjugateGradient;

        $i0 := @parameter0: int;

        $d0 := @parameter1: double;

        $z0 := @parameter2: boolean;

        specialinvoke r0.<org.apache.commons.math3.linear.PreconditionedIterativeLinearSolver: void <init>(int)>($i0);

        r0.<org.apache.commons.math3.linear.ConjugateGradient: double delta> = $d0;

        r0.<org.apache.commons.math3.linear.ConjugateGradient: boolean check> = $z0;

        return;
    }
    public void <init>(org.apache.commons.math3.util.IterationManager, double, boolean) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.linear.ConjugateGradient r0;
        org.apache.commons.math3.util.IterationManager $r1;
        double $d0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.linear.ConjugateGradient;

        $r1 := @parameter0: org.apache.commons.math3.util.IterationManager;

        $d0 := @parameter1: double;

        $z0 := @parameter2: boolean;

        specialinvoke r0.<org.apache.commons.math3.linear.PreconditionedIterativeLinearSolver: void <init>(org.apache.commons.math3.util.IterationManager)>($r1);

        r0.<org.apache.commons.math3.linear.ConjugateGradient: double delta> = $d0;

        r0.<org.apache.commons.math3.linear.ConjugateGradient: boolean check> = $z0;

        return;
    }
    public final boolean getCheck()
    {
        org.apache.commons.math3.linear.ConjugateGradient r0;
        boolean z0;

        r0 := @this: org.apache.commons.math3.linear.ConjugateGradient;

        z0 = r0.<org.apache.commons.math3.linear.ConjugateGradient: boolean check>;

        return z0;
    }
    public org.apache.commons.math3.linear.RealVector solveInPlace(org.apache.commons.math3.linear.RealLinearOperator, org.apache.commons.math3.linear.RealLinearOperator, org.apache.commons.math3.linear.RealVector, org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.linear.NonPositiveDefiniteOperatorException, org.apache.commons.math3.linear.NonSquareOperatorException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.linear.ConjugateGradient r0;
        org.apache.commons.math3.linear.RealLinearOperator $r1, $r2;
        org.apache.commons.math3.linear.RealVector $r3, $r4, $r6, $r7, $r8, $r9, r10, $r14;
        double $d0, d1, $d2, $d3;
        org.apache.commons.math3.util.IterationManager $r5;
        org.apache.commons.math3.linear.DefaultIterativeLinearSolverEvent r11;
        int $i0;
        byte $b1;
        boolean $z0;
        org.apache.commons.math3.linear.NonPositiveDefiniteOperatorException r12;
        org.apache.commons.math3.exception.util.ExceptionContext $r13;

        r0 := @this: org.apache.commons.math3.linear.ConjugateGradient;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealLinearOperator;

        $r2 := @parameter1: org.apache.commons.math3.linear.RealLinearOperator;

        $r3 := @parameter2: org.apache.commons.math3.linear.RealVector;

        $r4 := @parameter3: org.apache.commons.math3.linear.RealVector;

        staticinvoke <org.apache.commons.math3.linear.ConjugateGradient: void checkParameters(org.apache.commons.math3.linear.RealLinearOperator,org.apache.commons.math3.linear.RealLinearOperator,org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.linear.RealVector)>($r1, $r2, $r3, $r4);

        $r5 = virtualinvoke r0.<org.apache.commons.math3.linear.ConjugateGradient: org.apache.commons.math3.util.IterationManager getIterationManager()>();

        virtualinvoke $r5.<org.apache.commons.math3.util.IterationManager: void resetIterationCount()>();

        d1 = r0.<org.apache.commons.math3.linear.ConjugateGradient: double delta>;

        $d2 = virtualinvoke $r3.<org.apache.commons.math3.linear.RealVector: double getNorm()>();

        d1 = d1 * $d2;

        $r6 = staticinvoke <org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector unmodifiableRealVector(org.apache.commons.math3.linear.RealVector)>($r3);

        virtualinvoke $r5.<org.apache.commons.math3.util.IterationManager: void incrementIterationCount()>();

        $r7 = staticinvoke <org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector unmodifiableRealVector(org.apache.commons.math3.linear.RealVector)>($r4);

        $r8 = virtualinvoke $r4.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector copy()>();

        $r9 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealLinearOperator: org.apache.commons.math3.linear.RealVector operate(org.apache.commons.math3.linear.RealVector)>($r8);

        $r3 = virtualinvoke $r3.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector combine(double,double,org.apache.commons.math3.linear.RealVector)>(1.0, -1.0, $r9);

        $r9 = staticinvoke <org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector unmodifiableRealVector(org.apache.commons.math3.linear.RealVector)>($r3);

        $d0 = virtualinvoke $r3.<org.apache.commons.math3.linear.RealVector: double getNorm()>();

        $d2 = $d0;

        if $r2 != null goto label2;

        r10 = $r3;

     label1:
        r11 = new org.apache.commons.math3.linear.DefaultIterativeLinearSolverEvent;

        $i0 = virtualinvoke $r5.<org.apache.commons.math3.util.IterationManager: int getIterations()>();

        specialinvoke r11.<org.apache.commons.math3.linear.DefaultIterativeLinearSolverEvent: void <init>(java.lang.Object,int,org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.linear.RealVector,double)>(r0, $i0, $r7, $r6, $r9, $d0);

        virtualinvoke $r5.<org.apache.commons.math3.util.IterationManager: void fireInitializationEvent(org.apache.commons.math3.util.IterationEvent)>(r11);

        $b1 = $d0 cmpg d1;

        if $b1 > 0 goto label3;

        virtualinvoke $r5.<org.apache.commons.math3.util.IterationManager: void fireTerminationEvent(org.apache.commons.math3.util.IterationEvent)>(r11);

        return $r4;

     label2:
        r10 = null;

        goto label1;

     label3:
        $d0 = 0.0;

     label4:
        virtualinvoke $r5.<org.apache.commons.math3.util.IterationManager: void incrementIterationCount()>();

        r11 = new org.apache.commons.math3.linear.DefaultIterativeLinearSolverEvent;

        $i0 = virtualinvoke $r5.<org.apache.commons.math3.util.IterationManager: int getIterations()>();

        specialinvoke r11.<org.apache.commons.math3.linear.DefaultIterativeLinearSolverEvent: void <init>(java.lang.Object,int,org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.linear.RealVector,double)>(r0, $i0, $r7, $r6, $r9, $d2);

        virtualinvoke $r5.<org.apache.commons.math3.util.IterationManager: void fireIterationStartedEvent(org.apache.commons.math3.util.IterationEvent)>(r11);

        if $r2 == null goto label5;

        r10 = virtualinvoke $r2.<org.apache.commons.math3.linear.RealLinearOperator: org.apache.commons.math3.linear.RealVector operate(org.apache.commons.math3.linear.RealVector)>($r3);

     label5:
        $d2 = virtualinvoke $r3.<org.apache.commons.math3.linear.RealVector: double dotProduct(org.apache.commons.math3.linear.RealVector)>(r10);

        $z0 = r0.<org.apache.commons.math3.linear.ConjugateGradient: boolean check>;

        if $z0 == 0 goto label6;

        $b1 = $d2 cmpg 0.0;

        if $b1 > 0 goto label6;

        r12 = new org.apache.commons.math3.linear.NonPositiveDefiniteOperatorException;

        specialinvoke r12.<org.apache.commons.math3.linear.NonPositiveDefiniteOperatorException: void <init>()>();

        $r13 = virtualinvoke r12.<org.apache.commons.math3.linear.NonPositiveDefiniteOperatorException: org.apache.commons.math3.exception.util.ExceptionContext getContext()>();

        virtualinvoke $r13.<org.apache.commons.math3.exception.util.ExceptionContext: void setValue(java.lang.String,java.lang.Object)>("operator", $r2);

        virtualinvoke $r13.<org.apache.commons.math3.exception.util.ExceptionContext: void setValue(java.lang.String,java.lang.Object)>("vector", $r3);

        throw r12;

     label6:
        $i0 = virtualinvoke $r5.<org.apache.commons.math3.util.IterationManager: int getIterations()>();

        if $i0 != 2 goto label8;

        virtualinvoke $r8.<org.apache.commons.math3.linear.RealVector: void setSubVector(int,org.apache.commons.math3.linear.RealVector)>(0, r10);

     label7:
        $r14 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealLinearOperator: org.apache.commons.math3.linear.RealVector operate(org.apache.commons.math3.linear.RealVector)>($r8);

        $d0 = virtualinvoke $r8.<org.apache.commons.math3.linear.RealVector: double dotProduct(org.apache.commons.math3.linear.RealVector)>($r14);

        $z0 = r0.<org.apache.commons.math3.linear.ConjugateGradient: boolean check>;

        if $z0 == 0 goto label9;

        $b1 = $d0 cmpg 0.0;

        if $b1 > 0 goto label9;

        r12 = new org.apache.commons.math3.linear.NonPositiveDefiniteOperatorException;

        specialinvoke r12.<org.apache.commons.math3.linear.NonPositiveDefiniteOperatorException: void <init>()>();

        $r13 = virtualinvoke r12.<org.apache.commons.math3.linear.NonPositiveDefiniteOperatorException: org.apache.commons.math3.exception.util.ExceptionContext getContext()>();

        virtualinvoke $r13.<org.apache.commons.math3.exception.util.ExceptionContext: void setValue(java.lang.String,java.lang.Object)>("operator", $r1);

        virtualinvoke $r13.<org.apache.commons.math3.exception.util.ExceptionContext: void setValue(java.lang.String,java.lang.Object)>("vector", $r8);

        throw r12;

     label8:
        $d0 = $d2 / $d0;

        virtualinvoke $r8.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)>($d0, 1.0, r10);

        goto label7;

     label9:
        $d0 = $d2 / $d0;

        virtualinvoke $r4.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)>(1.0, $d0, $r8);

        $d0 = neg $d0;

        virtualinvoke $r3.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)>(1.0, $d0, $r14);

        $d0 = $d2;

        $d3 = virtualinvoke $r3.<org.apache.commons.math3.linear.RealVector: double getNorm()>();

        $d2 = $d3;

        r11 = new org.apache.commons.math3.linear.DefaultIterativeLinearSolverEvent;

        $i0 = virtualinvoke $r5.<org.apache.commons.math3.util.IterationManager: int getIterations()>();

        specialinvoke r11.<org.apache.commons.math3.linear.DefaultIterativeLinearSolverEvent: void <init>(java.lang.Object,int,org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.linear.RealVector,double)>(r0, $i0, $r7, $r6, $r9, $d3);

        virtualinvoke $r5.<org.apache.commons.math3.util.IterationManager: void fireIterationPerformedEvent(org.apache.commons.math3.util.IterationEvent)>(r11);

        $b1 = $d3 cmpg d1;

        if $b1 > 0 goto label4;

        virtualinvoke $r5.<org.apache.commons.math3.util.IterationManager: void fireTerminationEvent(org.apache.commons.math3.util.IterationEvent)>(r11);

        return $r4;
    }
