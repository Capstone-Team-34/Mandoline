org.apache.commons.math3.linear.SingularValueDecomposition extends java.lang.Object
private static final double EPS
private static final double TINY
private org.apache.commons.math3.linear.RealMatrix cachedS
private final org.apache.commons.math3.linear.RealMatrix cachedU
private org.apache.commons.math3.linear.RealMatrix cachedUt
private final org.apache.commons.math3.linear.RealMatrix cachedV
private org.apache.commons.math3.linear.RealMatrix cachedVt
private final int m
private final int n
private final double[] singularValues
private final double tol
private final boolean transposed
    public void <init>(org.apache.commons.math3.linear.RealMatrix)
    {
        org.apache.commons.math3.linear.SingularValueDecomposition r0;
        org.apache.commons.math3.linear.RealMatrix $r1, $r3;
        double[] r2, $r10, $r11, $r12;
        double d0, d1, d2, d3, d4, $d5, d6;
        int i0, $i1, $i2, $i3, $i4, $i6, $i7;
        double[][] $r4, r8, r9;
        int[] $r5;
        java.lang.Class $r6;
        java.lang.Object $r7;
        byte $b5;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.linear.SingularValueDecomposition;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i2 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        i0 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        if $i2 >= i0 goto label004;

        r0.<org.apache.commons.math3.linear.SingularValueDecomposition: boolean transposed> = 1;

        $r3 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix transpose()>();

        $r4 = interfaceinvoke $r3.<org.apache.commons.math3.linear.RealMatrix: double[][] getData()>();

        $i2 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        r0.<org.apache.commons.math3.linear.SingularValueDecomposition: int m> = $i2;

        $i2 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        r0.<org.apache.commons.math3.linear.SingularValueDecomposition: int n> = $i2;

     label001:
        $i2 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: int n>;

        r2 = newarray (double)[$i2];

        r0.<org.apache.commons.math3.linear.SingularValueDecomposition: double[] singularValues> = r2;

        $i2 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: int m>;

        i0 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: int n>;

        $r5 = newarray (int)[2];

        $r5[0] = $i2;

        $r5[1] = i0;

        $r6 = <java.lang.Double: java.lang.Class TYPE>;

        $r7 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r6, $r5);

        r8 = (double[][]) $r7;

        $i2 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: int n>;

        i0 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: int n>;

        $r5 = newarray (int)[2];

        $r5[0] = $i2;

        $r5[1] = i0;

        $r6 = <java.lang.Double: java.lang.Class TYPE>;

        $r7 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r6, $r5);

        r9 = (double[][]) $r7;

        $i2 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: int n>;

        r2 = newarray (double)[$i2];

        $i2 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: int m>;

        $r10 = newarray (double)[$i2];

        $i2 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: int m>;

        $i2 = $i2 + -1;

        i0 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: int n>;

        $i3 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i2, i0);

        $i2 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: int n>;

        $i2 = $i2 + -2;

        i0 = staticinvoke <org.apache.commons.math3.util.FastMath: int max(int,int)>(0, $i2);

        $i2 = 0;

     label002:
        $i1 = staticinvoke <org.apache.commons.math3.util.FastMath: int max(int,int)>($i3, i0);

        if $i2 >= $i1 goto label037;

        if $i2 >= $i3 goto label010;

        $r11 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: double[] singularValues>;

        $r11[$i2] = 0.0;

        $i1 = $i2;

     label003:
        $i4 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: int m>;

        if $i1 >= $i4 goto label005;

        $r11 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: double[] singularValues>;

        $r12 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: double[] singularValues>;

        d3 = $r12[$i2];

        $r12 = $r4[$i1];

        d4 = $r12[$i2];

        d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double hypot(double,double)>(d3, d4);

        $r11[$i2] = d3;

        $i1 = $i1 + 1;

        goto label003;

     label004:
        r0.<org.apache.commons.math3.linear.SingularValueDecomposition: boolean transposed> = 0;

        $r4 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: double[][] getData()>();

        $i2 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        r0.<org.apache.commons.math3.linear.SingularValueDecomposition: int m> = $i2;

        $i2 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        r0.<org.apache.commons.math3.linear.SingularValueDecomposition: int n> = $i2;

        goto label001;

     label005:
        $r11 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: double[] singularValues>;

        d3 = $r11[$i2];

        $b5 = d3 cmpl 0.0;

        if $b5 == 0 goto label009;

        $r11 = $r4[$i2];

        d3 = $r11[$i2];

        $b5 = d3 cmpg 0.0;

        if $b5 >= 0 goto label006;

        $r11 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: double[] singularValues>;

        $r12 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: double[] singularValues>;

        d3 = $r12[$i2];

        d3 = neg d3;

        $r11[$i2] = d3;

     label006:
        $i1 = $i2;

     label007:
        $i4 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: int m>;

        if $i1 >= $i4 goto label008;

        $r11 = $r4[$i1];

        d3 = $r11[$i2];

        $r12 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: double[] singularValues>;

        d4 = $r12[$i2];

        d3 = d3 / d4;

        $r11[$i2] = d3;

        $i1 = $i1 + 1;

        goto label007;

     label008:
        $r11 = $r4[$i2];

        d3 = $r11[$i2];

        d3 = d3 + 1.0;

        $r11[$i2] = d3;

     label009:
        $r11 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: double[] singularValues>;

        $r12 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: double[] singularValues>;

        d3 = $r12[$i2];

        d3 = neg d3;

        $r11[$i2] = d3;

     label010:
        $i1 = $i2 + 1;

     label011:
        $i4 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: int n>;

        if $i1 >= $i4 goto label016;

        if $i2 >= $i3 goto label015;

        $r11 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: double[] singularValues>;

        d3 = $r11[$i2];

        $b5 = d3 cmpl 0.0;

        if $b5 == 0 goto label015;

        d3 = 0.0;

        $i4 = $i2;

     label012:
        $i6 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: int m>;

        if $i4 >= $i6 goto label013;

        $r11 = $r4[$i4];

        d4 = $r11[$i2];

        $r11 = $r4[$i4];

        d1 = $r11[$i1];

        d4 = d4 * d1;

        d3 = d3 + d4;

        $i4 = $i4 + 1;

        goto label012;

     label013:
        d3 = neg d3;

        $r11 = $r4[$i2];

        d4 = $r11[$i2];

        d3 = d3 / d4;

        $i4 = $i2;

     label014:
        $i6 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: int m>;

        if $i4 >= $i6 goto label015;

        $r11 = $r4[$i4];

        d4 = $r11[$i1];

        $r12 = $r4[$i4];

        d1 = $r12[$i2];

        d1 = d1 * d3;

        d4 = d4 + d1;

        $r11[$i1] = d4;

        $i4 = $i4 + 1;

        goto label014;

     label015:
        $r11 = $r4[$i2];

        d3 = $r11[$i1];

        r2[$i1] = d3;

        $i1 = $i1 + 1;

        goto label011;

     label016:
        if $i2 >= $i3 goto label018;

        $i1 = $i2;

     label017:
        $i4 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: int m>;

        if $i1 >= $i4 goto label018;

        $r11 = r8[$i1];

        $r12 = $r4[$i1];

        d3 = $r12[$i2];

        $r11[$i2] = d3;

        $i1 = $i1 + 1;

        goto label017;

     label018:
        if $i2 >= i0 goto label036;

        r2[$i2] = 0.0;

        $i1 = $i2 + 1;

     label019:
        $i4 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: int n>;

        if $i1 >= $i4 goto label020;

        d3 = r2[$i2];

        d4 = r2[$i1];

        d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double hypot(double,double)>(d3, d4);

        r2[$i2] = d3;

        $i1 = $i1 + 1;

        goto label019;

     label020:
        d3 = r2[$i2];

        $b5 = d3 cmpl 0.0;

        if $b5 == 0 goto label024;

        $i1 = $i2 + 1;

        d3 = r2[$i1];

        $b5 = d3 cmpg 0.0;

        if $b5 >= 0 goto label021;

        d3 = r2[$i2];

        d3 = neg d3;

        r2[$i2] = d3;

     label021:
        $i1 = $i2 + 1;

     label022:
        $i4 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: int n>;

        if $i1 >= $i4 goto label023;

        d3 = r2[$i1];

        d4 = r2[$i2];

        d3 = d3 / d4;

        r2[$i1] = d3;

        $i1 = $i1 + 1;

        goto label022;

     label023:
        $i1 = $i2 + 1;

        d3 = r2[$i1];

        d3 = d3 + 1.0;

        r2[$i1] = d3;

     label024:
        d3 = r2[$i2];

        d3 = neg d3;

        r2[$i2] = d3;

        $i1 = $i2 + 1;

        $i4 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: int m>;

        if $i1 >= $i4 goto label034;

        d3 = r2[$i2];

        $b5 = d3 cmpl 0.0;

        if $b5 == 0 goto label034;

        $i1 = $i2 + 1;

     label025:
        $i4 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: int m>;

        if $i1 >= $i4 goto label026;

        $r10[$i1] = 0.0;

        $i1 = $i1 + 1;

        goto label025;

     label026:
        $i1 = $i2 + 1;

     label027:
        $i4 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: int n>;

        if $i1 >= $i4 goto label030;

        $i4 = $i2 + 1;

     label028:
        $i6 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: int m>;

        if $i4 >= $i6 goto label029;

        d3 = $r10[$i4];

        d4 = r2[$i1];

        $r11 = $r4[$i4];

        d1 = $r11[$i1];

        d4 = d4 * d1;

        d3 = d3 + d4;

        $r10[$i4] = d3;

        $i4 = $i4 + 1;

        goto label028;

     label029:
        $i1 = $i1 + 1;

        goto label027;

     label030:
        $i1 = $i2 + 1;

     label031:
        $i4 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: int n>;

        if $i1 >= $i4 goto label034;

        d3 = r2[$i1];

        d3 = neg d3;

        $i4 = $i2 + 1;

        d4 = r2[$i4];

        d3 = d3 / d4;

        $i4 = $i2 + 1;

     label032:
        $i6 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: int m>;

        if $i4 >= $i6 goto label033;

        $r11 = $r4[$i4];

        d4 = $r11[$i1];

        d1 = $r10[$i4];

        d1 = d1 * d3;

        d4 = d4 + d1;

        $r11[$i1] = d4;

        $i4 = $i4 + 1;

        goto label032;

     label033:
        $i1 = $i1 + 1;

        goto label031;

     label034:
        $i1 = $i2 + 1;

     label035:
        $i4 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: int n>;

        if $i1 >= $i4 goto label036;

        $r11 = r9[$i1];

        d3 = r2[$i1];

        $r11[$i2] = d3;

        $i1 = $i1 + 1;

        goto label035;

     label036:
        $i2 = $i2 + 1;

        goto label002;

     label037:
        $i1 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: int n>;

        $i2 = $i1;

        $i4 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: int n>;

        if $i3 >= $i4 goto label038;

        $r10 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: double[] singularValues>;

        $r11 = $r4[$i3];

        d3 = $r11[$i3];

        $r10[$i3] = d3;

     label038:
        $i4 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: int m>;

        if $i4 >= $i1 goto label039;

        $r10 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: double[] singularValues>;

        $i4 = $i1 + -1;

        $r10[$i4] = 0.0;

     label039:
        $i4 = i0 + 1;

        if $i4 >= $i1 goto label040;

        $r10 = $r4[i0];

        $i4 = $i1 + -1;

        d3 = $r10[$i4];

        r2[i0] = d3;

     label040:
        $i4 = $i1 + -1;

        r2[$i4] = 0.0;

        $i4 = $i3;

     label041:
        $i6 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: int n>;

        if $i4 >= $i6 goto label044;

        $i6 = 0;

     label042:
        $i7 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: int m>;

        if $i6 >= $i7 goto label043;

        $r10 = r8[$i6];

        $r10[$i4] = 0.0;

        $i6 = $i6 + 1;

        goto label042;

     label043:
        $r10 = r8[$i4];

        $r10[$i4] = 1.0;

        $i4 = $i4 + 1;

        goto label041;

     label044:
        $i3 = $i3 + -1;

     label045:
        if $i3 < 0 goto label059;

        $r10 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: double[] singularValues>;

        d3 = $r10[$i3];

        $b5 = d3 cmpl 0.0;

        if $b5 == 0 goto label055;

        $i4 = $i3 + 1;

     label046:
        $i6 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: int n>;

        if $i4 >= $i6 goto label051;

        d3 = 0.0;

        $i6 = $i3;

     label047:
        $i7 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: int m>;

        if $i6 >= $i7 goto label048;

        $r10 = r8[$i6];

        d4 = $r10[$i3];

        $r10 = r8[$i6];

        d1 = $r10[$i4];

        d4 = d4 * d1;

        d3 = d3 + d4;

        $i6 = $i6 + 1;

        goto label047;

     label048:
        d3 = neg d3;

        $r10 = r8[$i3];

        d4 = $r10[$i3];

        d3 = d3 / d4;

        $i6 = $i3;

     label049:
        $i7 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: int m>;

        if $i6 >= $i7 goto label050;

        $r10 = r8[$i6];

        d4 = $r10[$i4];

        $r11 = r8[$i6];

        d1 = $r11[$i3];

        d1 = d1 * d3;

        d4 = d4 + d1;

        $r10[$i4] = d4;

        $i6 = $i6 + 1;

        goto label049;

     label050:
        $i4 = $i4 + 1;

        goto label046;

     label051:
        $i4 = $i3;

     label052:
        $i6 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: int m>;

        if $i4 >= $i6 goto label053;

        $r10 = r8[$i4];

        $r11 = r8[$i4];

        d3 = $r11[$i3];

        d3 = neg d3;

        $r10[$i3] = d3;

        $i4 = $i4 + 1;

        goto label052;

     label053:
        $r10 = r8[$i3];

        $r11 = r8[$i3];

        d3 = $r11[$i3];

        d3 = 1.0 + d3;

        $r10[$i3] = d3;

        $i4 = 0;

     label054:
        $i6 = $i3 + -1;

        if $i4 >= $i6 goto label058;

        $r10 = r8[$i4];

        $r10[$i3] = 0.0;

        $i4 = $i4 + 1;

        goto label054;

     label055:
        $i4 = 0;

     label056:
        $i6 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: int m>;

        if $i4 >= $i6 goto label057;

        $r10 = r8[$i4];

        $r10[$i3] = 0.0;

        $i4 = $i4 + 1;

        goto label056;

     label057:
        $r10 = r8[$i3];

        $r10[$i3] = 1.0;

     label058:
        $i3 = $i3 + -1;

        goto label045;

     label059:
        $i3 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: int n>;

        $i3 = $i3 + -1;

     label060:
        if $i3 < 0 goto label069;

        if $i3 >= i0 goto label066;

        d3 = r2[$i3];

        $b5 = d3 cmpl 0.0;

        if $b5 == 0 goto label066;

        $i4 = $i3 + 1;

     label061:
        $i6 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: int n>;

        if $i4 >= $i6 goto label066;

        d3 = 0.0;

        $i6 = $i3 + 1;

     label062:
        $i7 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: int n>;

        if $i6 >= $i7 goto label063;

        $r10 = r9[$i6];

        d4 = $r10[$i3];

        $r10 = r9[$i6];

        d1 = $r10[$i4];

        d4 = d4 * d1;

        d3 = d3 + d4;

        $i6 = $i6 + 1;

        goto label062;

     label063:
        d3 = neg d3;

        $i6 = $i3 + 1;

        $r10 = r9[$i6];

        d4 = $r10[$i3];

        d3 = d3 / d4;

        $i6 = $i3 + 1;

     label064:
        $i7 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: int n>;

        if $i6 >= $i7 goto label065;

        $r10 = r9[$i6];

        d4 = $r10[$i4];

        $r11 = r9[$i6];

        d1 = $r11[$i3];

        d1 = d1 * d3;

        d4 = d4 + d1;

        $r10[$i4] = d4;

        $i6 = $i6 + 1;

        goto label064;

     label065:
        $i4 = $i4 + 1;

        goto label061;

     label066:
        $i4 = 0;

     label067:
        $i6 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: int n>;

        if $i4 >= $i6 goto label068;

        $r10 = r9[$i4];

        $r10[$i3] = 0.0;

        $i4 = $i4 + 1;

        goto label067;

     label068:
        $r10 = r9[$i3];

        $r10[$i3] = 1.0;

        $i3 = $i3 + -1;

        goto label060;

     label069:
        i0 = $i1 + -1;

     label070:
        if $i2 <= 0 goto label117;

        $i3 = $i2 + -2;

     label071:
        if $i3 < 0 goto label072;

        $r10 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: double[] singularValues>;

        d3 = $r10[$i3];

        d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d3);

        $r10 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: double[] singularValues>;

        $i1 = $i3 + 1;

        d4 = $r10[$i1];

        d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d4);

        d3 = d3 + d4;

        d3 = 2.220446049250313E-16 * d3;

        d3 = 1.6033346880071782E-291 + d3;

        d4 = r2[$i3];

        d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d4);

        $b5 = d4 cmpl d3;

        if $b5 > 0 goto label077;

        r2[$i3] = 0.0;

     label072:
        $i1 = $i2 + -2;

        if $i3 != $i1 goto label078;

        $b5 = 4;

     label073:
        $i3 = $i3 + 1;

        lookupswitch($b5)
        {
            case 1: goto label089;
            case 2: goto label094;
            case 3: goto label098;
            default: goto label074;
        };

     label074:
        $r10 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: double[] singularValues>;

        d3 = $r10[$i3];

        $b5 = d3 cmpg 0.0;

        if $b5 > 0 goto label111;

        $r10 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: double[] singularValues>;

        $r11 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: double[] singularValues>;

        d3 = $r11[$i3];

        $b5 = d3 cmpg 0.0;

        if $b5 >= 0 goto label109;

        $r11 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: double[] singularValues>;

        d3 = $r11[$i3];

        d3 = neg d3;

     label075:
        $r10[$i3] = d3;

        $i1 = 0;

     label076:
        if $i1 > i0 goto label111;

        $r10 = r9[$i1];

        $r11 = r9[$i1];

        d3 = $r11[$i3];

        d3 = neg d3;

        $r10[$i3] = d3;

        $i1 = $i1 + 1;

        goto label076;

     label077:
        $i3 = $i3 + -1;

        goto label071;

     label078:
        $i1 = $i2 + -1;

     label079:
        if $i1 < $i3 goto label080;

        if $i1 != $i3 goto label081;

     label080:
        if $i1 != $i3 goto label087;

        $b5 = 3;

        goto label073;

     label081:
        if $i1 == $i2 goto label084;

        d3 = r2[$i1];

        d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d3);

     label082:
        $i4 = $i3 + 1;

        if $i1 == $i4 goto label085;

        $i4 = $i1 + -1;

        d4 = r2[$i4];

        d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d4);

     label083:
        d4 = d3 + d4;

        $r10 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: double[] singularValues>;

        d3 = $r10[$i1];

        d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d3);

        d4 = 2.220446049250313E-16 * d4;

        d4 = 1.6033346880071782E-291 + d4;

        $b5 = d3 cmpg d4;

        if $b5 > 0 goto label086;

        $r10 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: double[] singularValues>;

        $r10[$i1] = 0.0;

        goto label080;

     label084:
        d3 = 0.0;

        goto label082;

     label085:
        d4 = 0.0;

        goto label083;

     label086:
        $i1 = $i1 + -1;

        goto label079;

     label087:
        $i4 = $i2 + -1;

        if $i1 != $i4 goto label088;

        $b5 = 1;

        goto label073;

     label088:
        $b5 = 2;

        $i3 = $i1;

        goto label073;

     label089:
        $i1 = $i2 + -2;

        d3 = r2[$i1];

        $i1 = $i2 + -2;

        r2[$i1] = 0.0;

        $i1 = $i2 + -2;

     label090:
        if $i1 < $i3 goto label070;

        $r10 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: double[] singularValues>;

        d4 = $r10[$i1];

        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double hypot(double,double)>(d4, d3);

        $r10 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: double[] singularValues>;

        d4 = $r10[$i1];

        d4 = d4 / d2;

        d1 = d3 / d2;

        $r10 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: double[] singularValues>;

        $r10[$i1] = d2;

        if $i1 == $i3 goto label091;

        d3 = neg d1;

        $i4 = $i1 + -1;

        d2 = r2[$i4];

        d3 = d3 * d2;

        $i4 = $i1 + -1;

        $i6 = $i1 + -1;

        d2 = r2[$i6];

        d2 = d2 * d4;

        r2[$i4] = d2;

     label091:
        $i4 = 0;

     label092:
        $i6 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: int n>;

        if $i4 >= $i6 goto label093;

        $r10 = r9[$i4];

        d2 = $r10[$i1];

        d2 = d2 * d4;

        $r10 = r9[$i4];

        $i6 = $i2 + -1;

        d0 = $r10[$i6];

        d0 = d0 * d1;

        d2 = d2 + d0;

        $r10 = r9[$i4];

        $i6 = $i2 + -1;

        d0 = neg d1;

        $r11 = r9[$i4];

        $d5 = $r11[$i1];

        d0 = d0 * $d5;

        $r11 = r9[$i4];

        $i7 = $i2 + -1;

        $d5 = $r11[$i7];

        $d5 = $d5 * d4;

        d0 = d0 + $d5;

        $r10[$i6] = d0;

        $r10 = r9[$i4];

        $r10[$i1] = d2;

        $i4 = $i4 + 1;

        goto label092;

     label093:
        $i1 = $i1 + -1;

        goto label090;

     label094:
        $i1 = $i3 + -1;

        d3 = r2[$i1];

        $i1 = $i3 + -1;

        r2[$i1] = 0.0;

        $i1 = $i3;

     label095:
        if $i1 >= $i2 goto label070;

        $r10 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: double[] singularValues>;

        d4 = $r10[$i1];

        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double hypot(double,double)>(d4, d3);

        $r10 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: double[] singularValues>;

        d4 = $r10[$i1];

        d4 = d4 / d2;

        d1 = d3 / d2;

        $r10 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: double[] singularValues>;

        $r10[$i1] = d2;

        d3 = neg d1;

        d2 = r2[$i1];

        d3 = d3 * d2;

        d2 = r2[$i1];

        d2 = d2 * d4;

        r2[$i1] = d2;

        $i4 = 0;

     label096:
        $i6 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: int m>;

        if $i4 >= $i6 goto label097;

        $r10 = r8[$i4];

        d2 = $r10[$i1];

        d2 = d2 * d4;

        $r10 = r8[$i4];

        $i6 = $i3 + -1;

        d0 = $r10[$i6];

        d0 = d0 * d1;

        d2 = d2 + d0;

        $r10 = r8[$i4];

        $i6 = $i3 + -1;

        d0 = neg d1;

        $r11 = r8[$i4];

        $d5 = $r11[$i1];

        d0 = d0 * $d5;

        $r11 = r8[$i4];

        $i7 = $i3 + -1;

        $d5 = $r11[$i7];

        $d5 = $d5 * d4;

        d0 = d0 + $d5;

        $r10[$i6] = d0;

        $r10 = r8[$i4];

        $r10[$i1] = d2;

        $i4 = $i4 + 1;

        goto label096;

     label097:
        $i1 = $i1 + 1;

        goto label095;

     label098:
        $r10 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: double[] singularValues>;

        $i1 = $i2 + -1;

        d3 = $r10[$i1];

        d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d3);

        $r10 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: double[] singularValues>;

        $i1 = $i2 + -2;

        d4 = $r10[$i1];

        d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d4);

        d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>(d3, d4);

        $i1 = $i2 + -2;

        d4 = r2[$i1];

        d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d4);

        d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>(d3, d4);

        $r10 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: double[] singularValues>;

        d4 = $r10[$i3];

        d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d4);

        d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>(d3, d4);

        d4 = r2[$i3];

        d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d4);

        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>(d3, d4);

        $r10 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: double[] singularValues>;

        $i1 = $i2 + -1;

        d3 = $r10[$i1];

        d4 = d3 / d2;

        $r10 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: double[] singularValues>;

        $i1 = $i2 + -2;

        d3 = $r10[$i1];

        d0 = d3 / d2;

        $i1 = $i2 + -2;

        d3 = r2[$i1];

        d1 = d3 / d2;

        $r10 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: double[] singularValues>;

        d3 = $r10[$i3];

        d3 = d3 / d2;

        $d5 = r2[$i3];

        d2 = $d5 / d2;

        $d5 = d0 + d4;

        d0 = d0 - d4;

        d0 = $d5 * d0;

        $d5 = d1 * d1;

        d0 = d0 + $d5;

        d0 = d0 / 2.0;

        $d5 = d4 * d1;

        d1 = d4 * d1;

        d1 = $d5 * d1;

        $d5 = 0.0;

        $b5 = d0 cmpl 0.0;

        if $b5 != 0 goto label099;

        $b5 = d1 cmpl 0.0;

        if $b5 == 0 goto label101;

     label099:
        $d5 = d0 * d0;

        $d5 = $d5 + d1;

        $d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d5);

        d6 = $d5;

        $b5 = d0 cmpg 0.0;

        if $b5 >= 0 goto label100;

        d6 = neg $d5;

     label100:
        d0 = d0 + d6;

        $d5 = d1 / d0;

     label101:
        d1 = d3 + d4;

        d4 = d3 - d4;

        d4 = d1 * d4;

        d1 = d4 + $d5;

        d2 = d3 * d2;

        $i1 = $i3;

     label102:
        $i4 = $i2 + -1;

        if $i1 >= $i4 goto label108;

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double hypot(double,double)>(d1, d2);

        d3 = d1 / d0;

        d4 = d2 / d0;

        if $i1 == $i3 goto label103;

        $i4 = $i1 + -1;

        r2[$i4] = d0;

     label103:
        $r10 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: double[] singularValues>;

        d1 = $r10[$i1];

        d1 = d1 * d3;

        d2 = r2[$i1];

        d2 = d2 * d4;

        d1 = d1 + d2;

        d2 = r2[$i1];

        d2 = d2 * d3;

        $r10 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: double[] singularValues>;

        d0 = $r10[$i1];

        d0 = d0 * d4;

        d2 = d2 - d0;

        r2[$i1] = d2;

        $r10 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: double[] singularValues>;

        $i4 = $i1 + 1;

        d2 = $r10[$i4];

        d2 = d4 * d2;

        $r10 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: double[] singularValues>;

        $i4 = $i1 + 1;

        $r11 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: double[] singularValues>;

        $i6 = $i1 + 1;

        d0 = $r11[$i6];

        d0 = d0 * d3;

        $r10[$i4] = d0;

        $i4 = 0;

     label104:
        $i6 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: int n>;

        if $i4 >= $i6 goto label105;

        $r10 = r9[$i4];

        d0 = $r10[$i1];

        d0 = d0 * d3;

        $r10 = r9[$i4];

        $i6 = $i1 + 1;

        $d5 = $r10[$i6];

        $d5 = $d5 * d4;

        d0 = d0 + $d5;

        $r10 = r9[$i4];

        $i6 = $i1 + 1;

        $d5 = neg d4;

        $r11 = r9[$i4];

        d6 = $r11[$i1];

        $d5 = $d5 * d6;

        $r11 = r9[$i4];

        $i7 = $i1 + 1;

        d6 = $r11[$i7];

        d6 = d6 * d3;

        $d5 = $d5 + d6;

        $r10[$i6] = $d5;

        $r10 = r9[$i4];

        $r10[$i1] = d0;

        $i4 = $i4 + 1;

        goto label104;

     label105:
        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double hypot(double,double)>(d1, d2);

        d3 = d1 / d0;

        d4 = d2 / d0;

        $r10 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: double[] singularValues>;

        $r10[$i1] = d0;

        d1 = r2[$i1];

        d1 = d1 * d3;

        $r10 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: double[] singularValues>;

        $i4 = $i1 + 1;

        d2 = $r10[$i4];

        d2 = d2 * d4;

        d1 = d1 + d2;

        $r10 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: double[] singularValues>;

        $i4 = $i1 + 1;

        d2 = neg d4;

        d0 = r2[$i1];

        d2 = d2 * d0;

        $r11 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: double[] singularValues>;

        $i6 = $i1 + 1;

        d0 = $r11[$i6];

        d0 = d0 * d3;

        d2 = d2 + d0;

        $r10[$i4] = d2;

        $i4 = $i1 + 1;

        d2 = r2[$i4];

        d2 = d4 * d2;

        $i4 = $i1 + 1;

        $i6 = $i1 + 1;

        d0 = r2[$i6];

        d0 = d0 * d3;

        r2[$i4] = d0;

        $i4 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: int m>;

        $i4 = $i4 + -1;

        if $i1 >= $i4 goto label107;

        $i4 = 0;

     label106:
        $i6 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: int m>;

        if $i4 >= $i6 goto label107;

        $r10 = r8[$i4];

        d0 = $r10[$i1];

        d0 = d0 * d3;

        $r10 = r8[$i4];

        $i6 = $i1 + 1;

        $d5 = $r10[$i6];

        $d5 = $d5 * d4;

        d0 = d0 + $d5;

        $r10 = r8[$i4];

        $i6 = $i1 + 1;

        $d5 = neg d4;

        $r11 = r8[$i4];

        d6 = $r11[$i1];

        $d5 = $d5 * d6;

        $r11 = r8[$i4];

        $i7 = $i1 + 1;

        d6 = $r11[$i7];

        d6 = d6 * d3;

        $d5 = $d5 + d6;

        $r10[$i6] = $d5;

        $r10 = r8[$i4];

        $r10[$i1] = d0;

        $i4 = $i4 + 1;

        goto label106;

     label107:
        $i1 = $i1 + 1;

        goto label102;

     label108:
        $i3 = $i2 + -2;

        r2[$i3] = d1;

        goto label070;

     label109:
        d3 = 0.0;

        goto label075;

     label110:
        $i3 = $i3 + 1;

     label111:
        if $i3 >= i0 goto label112;

        $r10 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: double[] singularValues>;

        d3 = $r10[$i3];

        $r10 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: double[] singularValues>;

        $i1 = $i3 + 1;

        d4 = $r10[$i1];

        $b5 = d3 cmpl d4;

        if $b5 < 0 goto label113;

     label112:
        $i2 = $i2 + -1;

        goto label070;

     label113:
        $r10 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: double[] singularValues>;

        d3 = $r10[$i3];

        $r10 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: double[] singularValues>;

        $r11 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: double[] singularValues>;

        $i1 = $i3 + 1;

        d4 = $r11[$i1];

        $r10[$i3] = d4;

        $r10 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: double[] singularValues>;

        $i1 = $i3 + 1;

        $r10[$i1] = d3;

        $i1 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: int n>;

        $i1 = $i1 + -1;

        if $i3 >= $i1 goto label115;

        $i1 = 0;

     label114:
        $i4 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: int n>;

        if $i1 >= $i4 goto label115;

        $r10 = r9[$i1];

        $i4 = $i3 + 1;

        d3 = $r10[$i4];

        $r10 = r9[$i1];

        $i4 = $i3 + 1;

        $r11 = r9[$i1];

        d4 = $r11[$i3];

        $r10[$i4] = d4;

        $r10 = r9[$i1];

        $r10[$i3] = d3;

        $i1 = $i1 + 1;

        goto label114;

     label115:
        $i1 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: int m>;

        $i1 = $i1 + -1;

        if $i3 >= $i1 goto label110;

        $i1 = 0;

     label116:
        $i4 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: int m>;

        if $i1 >= $i4 goto label110;

        $r10 = r8[$i1];

        $i4 = $i3 + 1;

        d3 = $r10[$i4];

        $r10 = r8[$i1];

        $i4 = $i3 + 1;

        $r11 = r8[$i1];

        d4 = $r11[$i3];

        $r10[$i4] = d4;

        $r10 = r8[$i1];

        $r10[$i3] = d3;

        $i1 = $i1 + 1;

        goto label116;

     label117:
        $i2 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: int m>;

        d3 = (double) $i2;

        r2 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: double[] singularValues>;

        d4 = r2[0];

        d3 = d3 * d4;

        d3 = d3 * 2.220446049250313E-16;

        d4 = <org.apache.commons.math3.util.Precision: double SAFE_MIN>;

        d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d4);

        d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>(d3, d4);

        r0.<org.apache.commons.math3.linear.SingularValueDecomposition: double tol> = d3;

        $z0 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: boolean transposed>;

        if $z0 != 0 goto label118;

        $r1 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix createRealMatrix(double[][])>(r8);

        r0.<org.apache.commons.math3.linear.SingularValueDecomposition: org.apache.commons.math3.linear.RealMatrix cachedU> = $r1;

        $r1 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix createRealMatrix(double[][])>(r9);

        r0.<org.apache.commons.math3.linear.SingularValueDecomposition: org.apache.commons.math3.linear.RealMatrix cachedV> = $r1;

        return;

     label118:
        $r1 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix createRealMatrix(double[][])>(r9);

        r0.<org.apache.commons.math3.linear.SingularValueDecomposition: org.apache.commons.math3.linear.RealMatrix cachedU> = $r1;

        $r1 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix createRealMatrix(double[][])>(r8);

        r0.<org.apache.commons.math3.linear.SingularValueDecomposition: org.apache.commons.math3.linear.RealMatrix cachedV> = $r1;

        return;
    }
    static double[] access$000(org.apache.commons.math3.linear.SingularValueDecomposition)
    {
        org.apache.commons.math3.linear.SingularValueDecomposition $r0;
        double[] r1;

        $r0 := @parameter0: org.apache.commons.math3.linear.SingularValueDecomposition;

        r1 = $r0.<org.apache.commons.math3.linear.SingularValueDecomposition: double[] singularValues>;

        return r1;
    }
    public double getConditionNumber()
    {
        org.apache.commons.math3.linear.SingularValueDecomposition r0;
        double[] $r1;
        double $d0, $d1;
        int $i0;

        r0 := @this: org.apache.commons.math3.linear.SingularValueDecomposition;

        $r1 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: double[] singularValues>;

        $d0 = $r1[0];

        $r1 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: double[] singularValues>;

        $i0 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: int n>;

        $i0 = $i0 + -1;

        $d1 = $r1[$i0];

        $d0 = $d0 / $d1;

        return $d0;
    }
    public org.apache.commons.math3.linear.RealMatrix getCovariance(double)
    {
        org.apache.commons.math3.linear.SingularValueDecomposition r0;
        double $d0, $d1;
        int $i0, i1;
        org.apache.commons.math3.linear.Array2DRowRealMatrix r1;
        double[] $r2;
        byte $b2;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r3;
        org.apache.commons.math3.exception.util.LocalizedFormats $r4;
        java.lang.Double $r5, $r6;
        int[] $r7;
        java.lang.Class $r8;
        java.lang.Object $r9;
        double[][] r10;
        org.apache.commons.math3.linear.RealMatrix $r11;
        org.apache.commons.math3.linear.SingularValueDecomposition$1 $r12;

        r0 := @this: org.apache.commons.math3.linear.SingularValueDecomposition;

        $d0 := @parameter0: double;

        $r2 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: double[] singularValues>;

        $i0 = lengthof $r2;

        i1 = 0;

     label1:
        if i1 >= $i0 goto label2;

        $r2 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: double[] singularValues>;

        $d1 = $r2[i1];

        $b2 = $d1 cmpl $d0;

        if $b2 < 0 goto label2;

        i1 = i1 + 1;

        goto label1;

     label2:
        if i1 != 0 goto label3;

        $r3 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats TOO_LARGE_CUTOFF_SINGULAR_VALUE>;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r2 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: double[] singularValues>;

        $d0 = $r2[0];

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        specialinvoke $r3.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r4, $r5, $r6, 1);

        throw $r3;

     label3:
        $r7 = newarray (int)[2];

        $r7[0] = i1;

        $r7[1] = $i0;

        $r8 = <java.lang.Double: java.lang.Class TYPE>;

        $r9 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r8, $r7);

        r10 = (double[][]) $r9;

        $r11 = virtualinvoke r0.<org.apache.commons.math3.linear.SingularValueDecomposition: org.apache.commons.math3.linear.RealMatrix getVT()>();

        $r12 = new org.apache.commons.math3.linear.SingularValueDecomposition$1;

        specialinvoke $r12.<org.apache.commons.math3.linear.SingularValueDecomposition$1: void <init>(org.apache.commons.math3.linear.SingularValueDecomposition,double[][])>(r0, r10);

        i1 = i1 + -1;

        $i0 = $i0 + -1;

        interfaceinvoke $r11.<org.apache.commons.math3.linear.RealMatrix: double walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)>($r12, 0, i1, 0, $i0);

        r1 = new org.apache.commons.math3.linear.Array2DRowRealMatrix;

        specialinvoke r1.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void <init>(double[][],boolean)>(r10, 0);

        $r11 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix transpose()>();

        $r11 = interfaceinvoke $r11.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>(r1);

        return $r11;
    }
    public double getInverseConditionNumber()
    {
        org.apache.commons.math3.linear.SingularValueDecomposition r0;
        double[] $r1;
        int $i0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.linear.SingularValueDecomposition;

        $r1 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: double[] singularValues>;

        $i0 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: int n>;

        $i0 = $i0 + -1;

        $d0 = $r1[$i0];

        $r1 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: double[] singularValues>;

        $d1 = $r1[0];

        $d0 = $d0 / $d1;

        return $d0;
    }
    public double getNorm()
    {
        org.apache.commons.math3.linear.SingularValueDecomposition r0;
        double[] $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.SingularValueDecomposition;

        $r1 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: double[] singularValues>;

        $d0 = $r1[0];

        return $d0;
    }
    public int getRank()
    {
        org.apache.commons.math3.linear.SingularValueDecomposition r0;
        double $d0, $d1;
        int i0, i1, $i2;
        double[] $r1;
        byte $b3;

        r0 := @this: org.apache.commons.math3.linear.SingularValueDecomposition;

        i0 = 0;

        i1 = 0;

     label1:
        $r1 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: double[] singularValues>;

        $i2 = lengthof $r1;

        if i1 >= $i2 goto label3;

        $r1 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: double[] singularValues>;

        $d1 = $r1[i1];

        $d0 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: double tol>;

        $b3 = $d1 cmpl $d0;

        if $b3 <= 0 goto label2;

        i0 = i0 + 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return i0;
    }
    public org.apache.commons.math3.linear.RealMatrix getS()
    {
        org.apache.commons.math3.linear.SingularValueDecomposition r0;
        org.apache.commons.math3.linear.RealMatrix $r1;
        double[] $r2;

        r0 := @this: org.apache.commons.math3.linear.SingularValueDecomposition;

        $r1 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: org.apache.commons.math3.linear.RealMatrix cachedS>;

        if $r1 != null goto label1;

        $r2 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: double[] singularValues>;

        $r1 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix createRealDiagonalMatrix(double[])>($r2);

        r0.<org.apache.commons.math3.linear.SingularValueDecomposition: org.apache.commons.math3.linear.RealMatrix cachedS> = $r1;

     label1:
        $r1 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: org.apache.commons.math3.linear.RealMatrix cachedS>;

        return $r1;
    }
    public double[] getSingularValues()
    {
        org.apache.commons.math3.linear.SingularValueDecomposition r0;
        java.lang.Object $r1;
        double[] $r2;

        r0 := @this: org.apache.commons.math3.linear.SingularValueDecomposition;

        $r2 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: double[] singularValues>;

        $r1 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (double[]) $r1;

        return $r2;
    }
    public org.apache.commons.math3.linear.DecompositionSolver getSolver()
    {
        org.apache.commons.math3.linear.SingularValueDecomposition r0;
        org.apache.commons.math3.linear.SingularValueDecomposition$Solver $r1;
        double[] $r2;
        double $d0;
        org.apache.commons.math3.linear.RealMatrix $r3, $r4;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.linear.SingularValueDecomposition;

        $r1 = new org.apache.commons.math3.linear.SingularValueDecomposition$Solver;

        $r2 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: double[] singularValues>;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.linear.SingularValueDecomposition: org.apache.commons.math3.linear.RealMatrix getUT()>();

        $r4 = virtualinvoke r0.<org.apache.commons.math3.linear.SingularValueDecomposition: org.apache.commons.math3.linear.RealMatrix getV()>();

        $i0 = virtualinvoke r0.<org.apache.commons.math3.linear.SingularValueDecomposition: int getRank()>();

        $i1 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: int m>;

        if $i0 != $i1 goto label2;

        $z0 = 1;

     label1:
        $d0 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: double tol>;

        specialinvoke $r1.<org.apache.commons.math3.linear.SingularValueDecomposition$Solver: void <init>(double[],org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealMatrix,boolean,double,org.apache.commons.math3.linear.SingularValueDecomposition$1)>($r2, $r3, $r4, $z0, $d0, null);

        return $r1;

     label2:
        $z0 = 0;

        goto label1;
    }
    public org.apache.commons.math3.linear.RealMatrix getU()
    {
        org.apache.commons.math3.linear.SingularValueDecomposition r0;
        org.apache.commons.math3.linear.RealMatrix r1;

        r0 := @this: org.apache.commons.math3.linear.SingularValueDecomposition;

        r1 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: org.apache.commons.math3.linear.RealMatrix cachedU>;

        return r1;
    }
    public org.apache.commons.math3.linear.RealMatrix getUT()
    {
        org.apache.commons.math3.linear.SingularValueDecomposition r0;
        org.apache.commons.math3.linear.RealMatrix $r1;

        r0 := @this: org.apache.commons.math3.linear.SingularValueDecomposition;

        $r1 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: org.apache.commons.math3.linear.RealMatrix cachedUt>;

        if $r1 != null goto label1;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.linear.SingularValueDecomposition: org.apache.commons.math3.linear.RealMatrix getU()>();

        $r1 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix transpose()>();

        r0.<org.apache.commons.math3.linear.SingularValueDecomposition: org.apache.commons.math3.linear.RealMatrix cachedUt> = $r1;

     label1:
        $r1 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: org.apache.commons.math3.linear.RealMatrix cachedUt>;

        return $r1;
    }
    public org.apache.commons.math3.linear.RealMatrix getV()
    {
        org.apache.commons.math3.linear.SingularValueDecomposition r0;
        org.apache.commons.math3.linear.RealMatrix r1;

        r0 := @this: org.apache.commons.math3.linear.SingularValueDecomposition;

        r1 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: org.apache.commons.math3.linear.RealMatrix cachedV>;

        return r1;
    }
    public org.apache.commons.math3.linear.RealMatrix getVT()
    {
        org.apache.commons.math3.linear.SingularValueDecomposition r0;
        org.apache.commons.math3.linear.RealMatrix $r1;

        r0 := @this: org.apache.commons.math3.linear.SingularValueDecomposition;

        $r1 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: org.apache.commons.math3.linear.RealMatrix cachedVt>;

        if $r1 != null goto label1;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.linear.SingularValueDecomposition: org.apache.commons.math3.linear.RealMatrix getV()>();

        $r1 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix transpose()>();

        r0.<org.apache.commons.math3.linear.SingularValueDecomposition: org.apache.commons.math3.linear.RealMatrix cachedVt> = $r1;

     label1:
        $r1 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition: org.apache.commons.math3.linear.RealMatrix cachedVt>;

        return $r1;
    }
