org.apache.commons.math3.linear.TriDiagonalTransformer extends java.lang.Object
private org.apache.commons.math3.linear.RealMatrix cachedQ
private org.apache.commons.math3.linear.RealMatrix cachedQt
private org.apache.commons.math3.linear.RealMatrix cachedT
private final double[][] householderVectors
private final double[] main
private final double[] secondary
    void <init>(org.apache.commons.math3.linear.RealMatrix)
    {
        org.apache.commons.math3.linear.TriDiagonalTransformer r0;
        org.apache.commons.math3.linear.RealMatrix $r1;
        boolean $z0;
        org.apache.commons.math3.linear.NonSquareMatrixException $r2;
        int $i0, $i1;
        double[][] $r3;
        double[] $r4;

        r0 := @this: org.apache.commons.math3.linear.TriDiagonalTransformer;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: boolean isSquare()>();

        if $z0 != 0 goto label1;

        $r2 = new org.apache.commons.math3.linear.NonSquareMatrixException;

        $i0 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $i1 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        specialinvoke $r2.<org.apache.commons.math3.linear.NonSquareMatrixException: void <init>(int,int)>($i0, $i1);

        throw $r2;

     label1:
        $i0 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $r3 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: double[][] getData()>();

        r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: double[][] householderVectors> = $r3;

        $r4 = newarray (double)[$i0];

        r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: double[] main> = $r4;

        $i0 = $i0 + -1;

        $r4 = newarray (double)[$i0];

        r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: double[] secondary> = $r4;

        r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: org.apache.commons.math3.linear.RealMatrix cachedQ> = null;

        r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: org.apache.commons.math3.linear.RealMatrix cachedQt> = null;

        r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: org.apache.commons.math3.linear.RealMatrix cachedT> = null;

        specialinvoke r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: void transform()>();

        return;
    }
    private void transform()
    {
        org.apache.commons.math3.linear.TriDiagonalTransformer r0;
        double d0, d1, d2, $d3, $d4;
        double[] r1, $r3, $r4;
        double[][] $r2;
        int $i0, i1, $i2, i4;
        byte $b3;

        r0 := @this: org.apache.commons.math3.linear.TriDiagonalTransformer;

        $r2 = r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: double[][] householderVectors>;

        $i0 = lengthof $r2;

        $r3 = newarray (double)[$i0];

        i1 = 0;

     label01:
        $i2 = $i0 + -1;

        if i1 >= $i2 goto label18;

        $r2 = r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: double[][] householderVectors>;

        r1 = $r2[i1];

        $r4 = r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: double[] main>;

        d0 = r1[i1];

        $r4[i1] = d0;

        d0 = 0.0;

        $i2 = i1 + 1;

     label02:
        if $i2 >= $i0 goto label03;

        d1 = r1[$i2];

        d1 = d1 * d1;

        d0 = d0 + d1;

        $i2 = $i2 + 1;

        goto label02;

     label03:
        $i2 = i1 + 1;

        d1 = r1[$i2];

        $b3 = d1 cmpl 0.0;

        if $b3 <= 0 goto label07;

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d0);

        d0 = neg d0;

     label04:
        $r4 = r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: double[] secondary>;

        $r4[i1] = d0;

        $b3 = d0 cmpl 0.0;

        if $b3 == 0 goto label17;

        $i2 = i1 + 1;

        d1 = r1[$i2];

        d1 = d1 - d0;

        r1[$i2] = d1;

        $i2 = i1 + 1;

        d1 = r1[$i2];

        d0 = d1 * d0;

        d0 = -1.0 / d0;

        $i2 = i1 + 1;

        staticinvoke <java.util.Arrays: void fill(double[],int,int,double)>($r3, $i2, $i0, 0.0);

        $i2 = i1 + 1;

     label05:
        if $i2 >= $i0 goto label09;

        $r2 = r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: double[][] householderVectors>;

        $r4 = $r2[$i2];

        d1 = r1[$i2];

        $d3 = $r4[$i2];

        $d3 = $d3 * d1;

        i4 = $i2 + 1;

     label06:
        if i4 >= $i0 goto label08;

        d2 = $r4[i4];

        $d4 = r1[i4];

        $d4 = $d4 * d2;

        $d3 = $d3 + $d4;

        $d4 = $r3[i4];

        d2 = d2 * d1;

        d2 = $d4 + d2;

        $r3[i4] = d2;

        i4 = i4 + 1;

        goto label06;

     label07:
        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d0);

        goto label04;

     label08:
        d1 = $r3[$i2];

        d1 = d1 + $d3;

        d1 = d1 * d0;

        $r3[$i2] = d1;

        $i2 = $i2 + 1;

        goto label05;

     label09:
        d1 = 0.0;

        $i2 = i1 + 1;

     label10:
        if $i2 >= $i0 goto label11;

        $d3 = $r3[$i2];

        d2 = r1[$i2];

        $d3 = $d3 * d2;

        d1 = d1 + $d3;

        $i2 = $i2 + 1;

        goto label10;

     label11:
        d0 = d0 / 2.0;

        d0 = d1 * d0;

        $i2 = i1 + 1;

     label12:
        if $i2 >= $i0 goto label13;

        d1 = $r3[$i2];

        $d3 = r1[$i2];

        $d3 = $d3 * d0;

        d1 = d1 - $d3;

        $r3[$i2] = d1;

        $i2 = $i2 + 1;

        goto label12;

     label13:
        $i2 = i1 + 1;

     label14:
        if $i2 >= $i0 goto label17;

        $r2 = r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: double[][] householderVectors>;

        $r4 = $r2[$i2];

        i4 = $i2;

     label15:
        if i4 >= $i0 goto label16;

        d0 = $r4[i4];

        d1 = r1[$i2];

        $d3 = $r3[i4];

        d1 = d1 * $d3;

        d2 = $r3[$i2];

        $d3 = r1[i4];

        $d3 = d2 * $d3;

        d1 = d1 + $d3;

        d0 = d0 - d1;

        $r4[i4] = d0;

        i4 = i4 + 1;

        goto label15;

     label16:
        $i2 = $i2 + 1;

        goto label14;

     label17:
        i1 = i1 + 1;

        goto label01;

     label18:
        r1 = r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: double[] main>;

        i1 = $i0 + -1;

        $r2 = r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: double[][] householderVectors>;

        $i2 = $i0 + -1;

        $r3 = $r2[$i2];

        $i0 = $i0 + -1;

        d0 = $r3[$i0];

        r1[i1] = d0;

        return;
    }
    double[][] getHouseholderVectorsRef()
    {
        org.apache.commons.math3.linear.TriDiagonalTransformer r0;
        double[][] r1;

        r0 := @this: org.apache.commons.math3.linear.TriDiagonalTransformer;

        r1 = r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: double[][] householderVectors>;

        return r1;
    }
    double[] getMainDiagonalRef()
    {
        org.apache.commons.math3.linear.TriDiagonalTransformer r0;
        double[] r1;

        r0 := @this: org.apache.commons.math3.linear.TriDiagonalTransformer;

        r1 = r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: double[] main>;

        return r1;
    }
    public org.apache.commons.math3.linear.RealMatrix getQ()
    {
        org.apache.commons.math3.linear.TriDiagonalTransformer r0;
        org.apache.commons.math3.linear.RealMatrix $r1;

        r0 := @this: org.apache.commons.math3.linear.TriDiagonalTransformer;

        $r1 = r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: org.apache.commons.math3.linear.RealMatrix cachedQ>;

        if $r1 != null goto label1;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: org.apache.commons.math3.linear.RealMatrix getQT()>();

        $r1 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix transpose()>();

        r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: org.apache.commons.math3.linear.RealMatrix cachedQ> = $r1;

     label1:
        $r1 = r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: org.apache.commons.math3.linear.RealMatrix cachedQ>;

        return $r1;
    }
    public org.apache.commons.math3.linear.RealMatrix getQT()
    {
        org.apache.commons.math3.linear.TriDiagonalTransformer r0;
        double[] r1, $r8;
        double d0, $d1, $d2, $d3;
        int i0, i1, $i2, i4;
        org.apache.commons.math3.linear.RealMatrix $r2;
        double[][] $r3, $r7;
        int[] $r4;
        java.lang.Class $r5;
        java.lang.Object $r6;
        byte $b3;

        r0 := @this: org.apache.commons.math3.linear.TriDiagonalTransformer;

        $r2 = r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: org.apache.commons.math3.linear.RealMatrix cachedQt>;

        if $r2 != null goto label11;

        $r3 = r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: double[][] householderVectors>;

        i0 = lengthof $r3;

        $r4 = newarray (int)[2];

        $r4[0] = i0;

        $r4[1] = i0;

        $r5 = <java.lang.Double: java.lang.Class TYPE>;

        $r6 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r5, $r4);

        $r3 = (double[][]) $r6;

        i1 = i0 + -1;

     label01:
        if i1 < 1 goto label10;

        $r7 = r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: double[][] householderVectors>;

        $i2 = i1 + -1;

        r1 = $r7[$i2];

        $r8 = $r3[i1];

        $r8[i1] = 1.0;

        d0 = r1[i1];

        $b3 = d0 cmpl 0.0;

        if $b3 == 0 goto label09;

        $r8 = r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: double[] secondary>;

        $i2 = i1 + -1;

        d0 = $r8[$i2];

        $d1 = r1[i1];

        d0 = d0 * $d1;

        d0 = 1.0 / d0;

        $r8 = r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: double[] secondary>;

        $i2 = i1 + -1;

        $d1 = $r8[$i2];

        $d1 = 1.0 / $d1;

        $r8 = $r3[i1];

        $d2 = r1[i1];

        $d2 = $d2 * $d1;

        $d2 = 1.0 + $d2;

        $r8[i1] = $d2;

        $i2 = i1 + 1;

     label02:
        if $i2 >= i0 goto label03;

        $r8 = $r3[i1];

        $d2 = r1[$i2];

        $d2 = $d2 * $d1;

        $r8[$i2] = $d2;

        $i2 = $i2 + 1;

        goto label02;

     label03:
        $i2 = i1 + 1;

     label04:
        if $i2 >= i0 goto label09;

        $d1 = 0.0;

        i4 = i1 + 1;

     label05:
        if i4 >= i0 goto label06;

        $r8 = $r3[$i2];

        $d2 = $r8[i4];

        $d3 = r1[i4];

        $d2 = $d2 * $d3;

        $d1 = $d1 + $d2;

        i4 = i4 + 1;

        goto label05;

     label06:
        $d1 = $d1 * d0;

        $r8 = $r3[$i2];

        $d2 = r1[i1];

        $d2 = $d2 * $d1;

        $r8[i1] = $d2;

        i4 = i1 + 1;

     label07:
        if i4 >= i0 goto label08;

        $r8 = $r3[$i2];

        $d2 = $r8[i4];

        $d3 = r1[i4];

        $d3 = $d3 * $d1;

        $d2 = $d2 + $d3;

        $r8[i4] = $d2;

        i4 = i4 + 1;

        goto label07;

     label08:
        $i2 = $i2 + 1;

        goto label04;

     label09:
        i1 = i1 + -1;

        goto label01;

     label10:
        r1 = $r3[0];

        d0 = (double) 4607182418800017408L;

        r1[0] = d0;

        $r2 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix createRealMatrix(double[][])>($r3);

        r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: org.apache.commons.math3.linear.RealMatrix cachedQt> = $r2;

     label11:
        $r2 = r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: org.apache.commons.math3.linear.RealMatrix cachedQt>;

        return $r2;
    }
    double[] getSecondaryDiagonalRef()
    {
        org.apache.commons.math3.linear.TriDiagonalTransformer r0;
        double[] r1;

        r0 := @this: org.apache.commons.math3.linear.TriDiagonalTransformer;

        r1 = r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: double[] secondary>;

        return r1;
    }
    public org.apache.commons.math3.linear.RealMatrix getT()
    {
        org.apache.commons.math3.linear.TriDiagonalTransformer r0;
        int i0, i1, $i2, $i3;
        org.apache.commons.math3.linear.RealMatrix $r1;
        double[] $r2, $r7;
        int[] $r3;
        java.lang.Class $r4;
        java.lang.Object $r5;
        double[][] r6;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.TriDiagonalTransformer;

        $r1 = r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: org.apache.commons.math3.linear.RealMatrix cachedT>;

        if $r1 != null goto label5;

        $r2 = r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: double[] main>;

        i0 = lengthof $r2;

        $r3 = newarray (int)[2];

        $r3[0] = i0;

        $r3[1] = i0;

        $r4 = <java.lang.Double: java.lang.Class TYPE>;

        $r5 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r4, $r3);

        r6 = (double[][]) $r5;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        $r2 = r6[i1];

        $r7 = r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: double[] main>;

        $d0 = $r7[i1];

        $r2[i1] = $d0;

        if i1 <= 0 goto label2;

        $r2 = r6[i1];

        $i2 = i1 + -1;

        $r7 = r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: double[] secondary>;

        $i3 = i1 + -1;

        $d0 = $r7[$i3];

        $r2[$i2] = $d0;

     label2:
        $r2 = r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: double[] main>;

        $i2 = lengthof $r2;

        $i2 = $i2 + -1;

        if i1 >= $i2 goto label3;

        $r2 = r6[i1];

        $i2 = i1 + 1;

        $r7 = r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: double[] secondary>;

        $d0 = $r7[i1];

        $r2[$i2] = $d0;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        $r1 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix createRealMatrix(double[][])>(r6);

        r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: org.apache.commons.math3.linear.RealMatrix cachedT> = $r1;

     label5:
        $r1 = r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: org.apache.commons.math3.linear.RealMatrix cachedT>;

        return $r1;
    }
