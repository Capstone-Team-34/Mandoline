org.apache.commons.math3.linear.BlockRealMatrix extends org.apache.commons.math3.linear.AbstractRealMatrix implements java.io.Serializable
public static final int BLOCK_SIZE
private static final long serialVersionUID
private final int blockColumns
private final int blockRows
private final double[][] blocks
private final int columns
private final int rows
    public void <init>(int, int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.linear.BlockRealMatrix r0;
        int $i0, $i1, $i2;
        double[][] $r1;

        r0 := @this: org.apache.commons.math3.linear.BlockRealMatrix;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        specialinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: void <init>(int,int)>($i0, $i1);

        r0.<org.apache.commons.math3.linear.BlockRealMatrix: int rows> = $i0;

        r0.<org.apache.commons.math3.linear.BlockRealMatrix: int columns> = $i1;

        $i2 = $i0 + 52;

        $i2 = $i2 + -1;

        $i2 = $i2 / 52;

        r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockRows> = $i2;

        $i2 = $i1 + 52;

        $i2 = $i2 + -1;

        $i2 = $i2 / 52;

        r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockColumns> = $i2;

        $r1 = staticinvoke <org.apache.commons.math3.linear.BlockRealMatrix: double[][] createBlocksLayout(int,int)>($i0, $i1);

        r0.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks> = $r1;

        return;
    }
    public void <init>(int, int, double[][], boolean) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.linear.BlockRealMatrix r0;
        int $i0, $i1, i2, i3, $i4, $i5;
        double[][] $r1, $r2;
        boolean $z0;
        double[] $r3;
        org.apache.commons.math3.exception.DimensionMismatchException $r4;
        java.lang.Object $r5;

        r0 := @this: org.apache.commons.math3.linear.BlockRealMatrix;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 := @parameter2: double[][];

        $z0 := @parameter3: boolean;

        specialinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: void <init>(int,int)>($i0, $i1);

        r0.<org.apache.commons.math3.linear.BlockRealMatrix: int rows> = $i0;

        r0.<org.apache.commons.math3.linear.BlockRealMatrix: int columns> = $i1;

        $i0 = $i0 + 52;

        $i0 = $i0 + -1;

        $i0 = $i0 / 52;

        r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockRows> = $i0;

        $i0 = $i1 + 52;

        $i0 = $i0 + -1;

        $i0 = $i0 / 52;

        r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockColumns> = $i0;

        if $z0 == 0 goto label4;

        $i0 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockRows>;

        $i1 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockColumns>;

        $i0 = $i0 * $i1;

        $r2 = newarray (double[])[$i0];

        r0.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks> = $r2;

     label1:
        $i1 = 0;

        i2 = 0;

     label2:
        $i0 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockRows>;

        if i2 >= $i0 goto label8;

        $i0 = specialinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockHeight(int)>(i2);

        i3 = 0;

     label3:
        $i4 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockColumns>;

        if i3 >= $i4 goto label7;

        $r3 = $r1[$i1];

        $i4 = lengthof $r3;

        $i5 = specialinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockWidth(int)>(i3);

        $i5 = $i5 * $i0;

        if $i4 == $i5 goto label5;

        $r4 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $r3 = $r1[$i1];

        $i1 = lengthof $r3;

        i2 = specialinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockWidth(int)>(i3);

        $i0 = i2 * $i0;

        specialinvoke $r4.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i1, $i0);

        throw $r4;

     label4:
        r0.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks> = $r1;

        goto label1;

     label5:
        if $z0 == 0 goto label6;

        $r2 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        $r3 = $r1[$i1];

        $r5 = virtualinvoke $r3.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (double[]) $r5;

        $r2[$i1] = $r3;

     label6:
        i3 = i3 + 1;

        $i1 = $i1 + 1;

        goto label3;

     label7:
        i2 = i2 + 1;

        goto label2;

     label8:
        return;
    }
    public void <init>(double[][]) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.linear.BlockRealMatrix r0;
        double[][] $r1;
        int $i0, $i1;
        double[] $r2;

        r0 := @this: org.apache.commons.math3.linear.BlockRealMatrix;

        $r1 := @parameter0: double[][];

        $i0 = lengthof $r1;

        $r2 = $r1[0];

        $i1 = lengthof $r2;

        $r1 = staticinvoke <org.apache.commons.math3.linear.BlockRealMatrix: double[][] toBlocksLayout(double[][])>($r1);

        specialinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: void <init>(int,int,double[][],boolean)>($i0, $i1, $r1, 0);

        return;
    }
    private int blockHeight(int)
    {
        org.apache.commons.math3.linear.BlockRealMatrix r0;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.linear.BlockRealMatrix;

        $i0 := @parameter0: int;

        $i1 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockRows>;

        $i1 = $i1 + -1;

        if $i0 != $i1 goto label1;

        $i1 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int rows>;

        $i0 = $i0 * 52;

        $i0 = $i1 - $i0;

        return $i0;

     label1:
        return 52;
    }
    private int blockWidth(int)
    {
        org.apache.commons.math3.linear.BlockRealMatrix r0;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.linear.BlockRealMatrix;

        $i0 := @parameter0: int;

        $i1 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockColumns>;

        $i1 = $i1 + -1;

        if $i0 != $i1 goto label1;

        $i1 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int columns>;

        $i0 = $i0 * 52;

        $i0 = $i1 - $i0;

        return $i0;

     label1:
        return 52;
    }
    private void copyBlockPart(double[], int, int, int, int, int, double[], int, int, int)
    {
        org.apache.commons.math3.linear.BlockRealMatrix r0;
        double[] $r1, $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;

        r0 := @this: org.apache.commons.math3.linear.BlockRealMatrix;

        $r1 := @parameter0: double[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        $i4 := @parameter5: int;

        $r2 := @parameter6: double[];

        $i5 := @parameter7: int;

        $i6 := @parameter8: int;

        $i7 := @parameter9: int;

        $i4 = $i4 - $i3;

        $i8 = $i1 * $i0;

        $i3 = $i8 + $i3;

        $i6 = $i6 * $i5;

        $i6 = $i6 + $i7;

     label1:
        if $i1 >= $i2 goto label2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i3, $r2, $i6, $i4);

        $i3 = $i3 + $i0;

        $i6 = $i6 + $i5;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return;
    }
    public static double[][] createBlocksLayout(int, int)
    {
        int $i0, $i1, i2, i3, i4, i5, $i6, i7, $i8, $i9;
        double[][] r0;
        double[] $r1;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        i3 = $i0 + 52;

        i3 = i3 + -1;

        i3 = i3 / 52;

        i2 = $i1 + 52;

        i2 = i2 + -1;

        i2 = i2 / 52;

        $i6 = i3 * i2;

        r0 = newarray (double[])[$i6];

        $i6 = 0;

        i7 = 0;

     label1:
        if i7 >= i3 goto label4;

        i4 = i7 * 52;

        $i8 = i4 + 52;

        $i8 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i8, $i0);

        i4 = $i8 - i4;

        $i8 = 0;

     label2:
        if $i8 >= i2 goto label3;

        i5 = $i8 * 52;

        $i9 = i5 + 52;

        $i9 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i9, $i1);

        i5 = $i9 - i5;

        i5 = i4 * i5;

        $r1 = newarray (double)[i5];

        r0[$i6] = $r1;

        $i6 = $i6 + 1;

        $i8 = $i8 + 1;

        goto label2;

     label3:
        i7 = i7 + 1;

        goto label1;

     label4:
        return r0;
    }
    public static double[][] toBlocksLayout(double[][]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        double[][] $r0, r2;
        double[] r1, $r4;
        int i0, i1, i2, i3, i4, i5, i6, i7, $i8, i9, $i10, i11, $i12, i13;
        org.apache.commons.math3.exception.DimensionMismatchException $r3;

        $r0 := @parameter0: double[][];

        $i8 = lengthof $r0;

        r1 = $r0[0];

        i2 = lengthof r1;

        i1 = $i8 + 52;

        i1 = i1 + -1;

        i1 = i1 / 52;

        i0 = i2 + 52;

        i0 = i0 + -1;

        i0 = i0 / 52;

        i6 = 0;

     label1:
        i5 = lengthof $r0;

        if i6 >= i5 goto label3;

        r1 = $r0[i6];

        i5 = lengthof r1;

        if i5 == i2 goto label2;

        $r3 = new org.apache.commons.math3.exception.DimensionMismatchException;

        specialinvoke $r3.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>(i2, i5);

        throw $r3;

     label2:
        i6 = i6 + 1;

        goto label1;

     label3:
        i6 = i1 * i0;

        r2 = newarray (double[])[i6];

        i5 = 0;

        i9 = 0;

     label4:
        if i9 >= i1 goto label9;

        i6 = i9 * 52;

        i3 = i6 + 52;

        $i10 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>(i3, $i8);

        i3 = $i10 - i6;

        i11 = 0;

     label5:
        if i11 >= i0 goto label8;

        i7 = i11 * 52;

        i4 = i7 + 52;

        i4 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>(i4, i2);

        i4 = i4 - i7;

        $i12 = i3 * i4;

        r1 = newarray (double)[$i12];

        r2[i5] = r1;

        $i12 = 0;

        i13 = i6;

     label6:
        if i13 >= $i10 goto label7;

        $r4 = $r0[i13];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, i7, r1, $i12, i4);

        $i12 = $i12 + i4;

        i13 = i13 + 1;

        goto label6;

     label7:
        i5 = i5 + 1;

        i11 = i11 + 1;

        goto label5;

     label8:
        i9 = i9 + 1;

        goto label4;

     label9:
        return r2;
    }
    public org.apache.commons.math3.linear.BlockRealMatrix add(org.apache.commons.math3.linear.BlockRealMatrix) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException
    {
        org.apache.commons.math3.linear.BlockRealMatrix r0, $r1, r3;
        double[] r2, r4, r5;
        int $i0, $i1, $i2;
        double $d0, $d1;
        double[][] $r6;

        r0 := @this: org.apache.commons.math3.linear.BlockRealMatrix;

        $r1 := @parameter0: org.apache.commons.math3.linear.BlockRealMatrix;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkAdditionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)>(r0, $r1);

        r3 = new org.apache.commons.math3.linear.BlockRealMatrix;

        $i1 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int rows>;

        $i0 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int columns>;

        specialinvoke r3.<org.apache.commons.math3.linear.BlockRealMatrix: void <init>(int,int)>($i1, $i0);

        $i0 = 0;

     label1:
        $r6 = r3.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        $i1 = lengthof $r6;

        if $i0 >= $i1 goto label4;

        $r6 = r3.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        r4 = $r6[$i0];

        $r6 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        r5 = $r6[$i0];

        $r6 = $r1.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        r2 = $r6[$i0];

        $i1 = 0;

     label2:
        $i2 = lengthof r4;

        if $i1 >= $i2 goto label3;

        $d1 = r5[$i1];

        $d0 = r2[$i1];

        $d0 = $d1 + $d0;

        r4[$i1] = $d0;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $i0 = $i0 + 1;

        goto label1;

     label4:
        return r3;
    }
    public org.apache.commons.math3.linear.BlockRealMatrix add(org.apache.commons.math3.linear.RealMatrix) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException
    {
        org.apache.commons.math3.linear.BlockRealMatrix r0, $r5;
        org.apache.commons.math3.linear.RealMatrix $r1;
        java.lang.ClassCastException r2;
        double[] r3, r4;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, i8;
        double[][] $r6;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.linear.BlockRealMatrix;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

     label01:
        $r5 = (org.apache.commons.math3.linear.BlockRealMatrix) $r1;

        $r5 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: org.apache.commons.math3.linear.BlockRealMatrix add(org.apache.commons.math3.linear.BlockRealMatrix)>($r5);

     label02:
        return $r5;

     label03:
        r2 := @caughtexception;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkAdditionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)>(r0, $r1);

        $r5 = new org.apache.commons.math3.linear.BlockRealMatrix;

        $i2 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int rows>;

        $i3 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int columns>;

        specialinvoke $r5.<org.apache.commons.math3.linear.BlockRealMatrix: void <init>(int,int)>($i2, $i3);

        $i2 = 0;

        $i3 = 0;

     label04:
        $i4 = $r5.<org.apache.commons.math3.linear.BlockRealMatrix: int blockRows>;

        if $i3 >= $i4 goto label11;

        $i4 = 0;

     label05:
        i0 = $r5.<org.apache.commons.math3.linear.BlockRealMatrix: int blockColumns>;

        if $i4 >= i0 goto label10;

        $r6 = $r5.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        r3 = $r6[$i2];

        $r6 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        r4 = $r6[$i2];

        i0 = $i3 * 52;

        i1 = i0 + 52;

        $i5 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int rows>;

        $i5 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>(i1, $i5);

        i1 = $i4 * 52;

        $i6 = i1 + 52;

        $i7 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int columns>;

        $i6 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i6, $i7);

        $i7 = 0;

     label06:
        if i0 >= $i5 goto label09;

        i8 = i1;

     label07:
        if i8 >= $i6 goto label08;

        $d0 = r4[$i7];

        $d1 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>(i0, i8);

        $d0 = $d0 + $d1;

        r3[$i7] = $d0;

        $i7 = $i7 + 1;

        i8 = i8 + 1;

        goto label07;

     label08:
        i0 = i0 + 1;

        goto label06;

     label09:
        $i2 = $i2 + 1;

        $i4 = $i4 + 1;

        goto label05;

     label10:
        $i3 = $i3 + 1;

        goto label04;

     label11:
        return $r5;

        catch java.lang.ClassCastException from label01 to label02 with label03;
    }
    public volatile org.apache.commons.math3.linear.RealMatrix add(org.apache.commons.math3.linear.RealMatrix) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException
    {
        org.apache.commons.math3.linear.BlockRealMatrix r0;
        org.apache.commons.math3.linear.RealMatrix $r1;

        r0 := @this: org.apache.commons.math3.linear.BlockRealMatrix;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        r0 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: org.apache.commons.math3.linear.BlockRealMatrix add(org.apache.commons.math3.linear.RealMatrix)>($r1);

        return r0;
    }
    public void addToEntry(int, int, double) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.BlockRealMatrix r0;
        int $i0, $i1, i2, i3, $i4;
        double $d0, $d1;
        double[][] $r1;
        double[] $r2;

        r0 := @this: org.apache.commons.math3.linear.BlockRealMatrix;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $d0 := @parameter2: double;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)>(r0, $i0, $i1);

        i2 = $i0 / 52;

        i3 = $i1 / 52;

        $i4 = i2 * 52;

        $i4 = $i0 - $i4;

        $i0 = specialinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockWidth(int)>(i3);

        $i0 = $i4 * $i0;

        $i4 = i3 * 52;

        $i1 = $i1 - $i4;

        $i0 = $i0 + $i1;

        $r1 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        $i1 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockColumns>;

        $i1 = $i1 * i2;

        $i1 = $i1 + i3;

        $r2 = $r1[$i1];

        $d1 = $r2[$i0];

        $d0 = $d1 + $d0;

        $r2[$i0] = $d0;

        return;
    }
    public org.apache.commons.math3.linear.BlockRealMatrix copy()
    {
        org.apache.commons.math3.linear.BlockRealMatrix r0, r1;
        int $i0, $i1;
        double[][] $r2;
        double[] $r3, $r4, $r5;

        r0 := @this: org.apache.commons.math3.linear.BlockRealMatrix;

        r1 = new org.apache.commons.math3.linear.BlockRealMatrix;

        $i0 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int rows>;

        $i1 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int columns>;

        specialinvoke r1.<org.apache.commons.math3.linear.BlockRealMatrix: void <init>(int,int)>($i0, $i1);

        $i0 = 0;

     label1:
        $r2 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label2;

        $r2 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        $r3 = $r2[$i0];

        $r2 = r1.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        $r4 = $r2[$i0];

        $r2 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        $r5 = $r2[$i0];

        $i1 = lengthof $r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r4, 0, $i1);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return r1;
    }
    public volatile org.apache.commons.math3.linear.RealMatrix copy()
    {
        org.apache.commons.math3.linear.BlockRealMatrix r0;

        r0 := @this: org.apache.commons.math3.linear.BlockRealMatrix;

        r0 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: org.apache.commons.math3.linear.BlockRealMatrix copy()>();

        return r0;
    }
    public org.apache.commons.math3.linear.BlockRealMatrix createMatrix(int, int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.linear.BlockRealMatrix r0;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.linear.BlockRealMatrix;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        r0 = new org.apache.commons.math3.linear.BlockRealMatrix;

        specialinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: void <init>(int,int)>($i0, $i1);

        return r0;
    }
    public volatile org.apache.commons.math3.linear.RealMatrix createMatrix(int, int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.linear.BlockRealMatrix r0;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.linear.BlockRealMatrix;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        r0 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: org.apache.commons.math3.linear.BlockRealMatrix createMatrix(int,int)>($i0, $i1);

        return r0;
    }
    public double[] getColumn(int) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.BlockRealMatrix r0;
        int $i0, i1, $i2, i3, i4, $i5, $i6, $i7;
        double[] r1, r2;
        double[][] $r3;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.BlockRealMatrix;

        $i0 := @parameter0: int;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)>(r0, $i0);

        i1 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int rows>;

        r2 = newarray (double)[i1];

        i1 = $i0 / 52;

        $i2 = i1 * 52;

        $i0 = $i0 - $i2;

        $i2 = specialinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockWidth(int)>(i1);

        i3 = 0;

        i4 = 0;

     label1:
        $i5 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockRows>;

        if i4 >= $i5 goto label4;

        $i5 = specialinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockHeight(int)>(i4);

        $r3 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        $i6 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockColumns>;

        $i6 = $i6 * i4;

        $i6 = $i6 + i1;

        r1 = $r3[$i6];

        $i6 = 0;

     label2:
        if $i6 >= $i5 goto label3;

        $i7 = $i6 * $i2;

        $i7 = $i7 + $i0;

        $d0 = r1[$i7];

        r2[i3] = $d0;

        $i6 = $i6 + 1;

        i3 = i3 + 1;

        goto label2;

     label3:
        i4 = i4 + 1;

        goto label1;

     label4:
        return r2;
    }
    public int getColumnDimension()
    {
        org.apache.commons.math3.linear.BlockRealMatrix r0;
        int i0;

        r0 := @this: org.apache.commons.math3.linear.BlockRealMatrix;

        i0 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int columns>;

        return i0;
    }
    public org.apache.commons.math3.linear.BlockRealMatrix getColumnMatrix(int) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.BlockRealMatrix r0, r2;
        int $i0, i1, i2, $i3, i4, i5, i6, $i7, $i8, $i9;
        double[] r1, r4;
        double[][] $r3;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.BlockRealMatrix;

        $i0 := @parameter0: int;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)>(r0, $i0);

        r2 = new org.apache.commons.math3.linear.BlockRealMatrix;

        i1 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int rows>;

        specialinvoke r2.<org.apache.commons.math3.linear.BlockRealMatrix: void <init>(int,int)>(i1, 1);

        i1 = $i0 / 52;

        $i3 = i1 * 52;

        $i0 = $i0 - $i3;

        $i3 = specialinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockWidth(int)>(i1);

        i4 = 0;

        i5 = 0;

        $r3 = r2.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        r4 = $r3[0];

        i6 = 0;

     label1:
        $i7 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockRows>;

        if i6 >= $i7 goto label5;

        $i7 = specialinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockHeight(int)>(i6);

        $r3 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        $i8 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockColumns>;

        $i8 = $i8 * i6;

        $i8 = $i8 + i1;

        r1 = $r3[$i8];

        $i8 = 0;

     label2:
        if $i8 >= $i7 goto label4;

        i2 = lengthof r4;

        if i5 < i2 goto label3;

        $r3 = r2.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        i4 = i4 + 1;

        r4 = $r3[i4];

        i5 = 0;

     label3:
        $i9 = $i8 * $i3;

        $i9 = $i9 + $i0;

        $d0 = r1[$i9];

        r4[i5] = $d0;

        $i8 = $i8 + 1;

        i5 = i5 + 1;

        goto label2;

     label4:
        i6 = i6 + 1;

        goto label1;

     label5:
        return r2;
    }
    public volatile org.apache.commons.math3.linear.RealMatrix getColumnMatrix(int) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.BlockRealMatrix r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.linear.BlockRealMatrix;

        $i0 := @parameter0: int;

        r0 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: org.apache.commons.math3.linear.BlockRealMatrix getColumnMatrix(int)>($i0);

        return r0;
    }
    public org.apache.commons.math3.linear.RealVector getColumnVector(int) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.BlockRealMatrix r0;
        int $i0, i1, $i2, i3, i4, $i5, $i6, $i7;
        double[] r1, r2;
        double[][] $r3;
        double $d0;
        org.apache.commons.math3.linear.ArrayRealVector $r4;

        r0 := @this: org.apache.commons.math3.linear.BlockRealMatrix;

        $i0 := @parameter0: int;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)>(r0, $i0);

        i1 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int rows>;

        r2 = newarray (double)[i1];

        i1 = $i0 / 52;

        $i2 = i1 * 52;

        $i0 = $i0 - $i2;

        $i2 = specialinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockWidth(int)>(i1);

        i3 = 0;

        i4 = 0;

     label1:
        $i5 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockRows>;

        if i4 >= $i5 goto label4;

        $i5 = specialinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockHeight(int)>(i4);

        $r3 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        $i6 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockColumns>;

        $i6 = $i6 * i4;

        $i6 = $i6 + i1;

        r1 = $r3[$i6];

        $i6 = 0;

     label2:
        if $i6 >= $i5 goto label3;

        $i7 = $i6 * $i2;

        $i7 = $i7 + $i0;

        $d0 = r1[$i7];

        r2[i3] = $d0;

        $i6 = $i6 + 1;

        i3 = i3 + 1;

        goto label2;

     label3:
        i4 = i4 + 1;

        goto label1;

     label4:
        $r4 = new org.apache.commons.math3.linear.ArrayRealVector;

        specialinvoke $r4.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(double[],boolean)>(r2, 0);

        return $r4;
    }
    public double[][] getData()
    {
        org.apache.commons.math3.linear.BlockRealMatrix r0;
        int i0, i1, i2, $i3, $i4, $i5, i6, $i7, i8, i9;
        double[] r1, $r7;
        int[] $r2;
        java.lang.Class $r3;
        java.lang.Object $r4;
        double[][] r5, $r6;

        r0 := @this: org.apache.commons.math3.linear.BlockRealMatrix;

        i1 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: int getRowDimension()>();

        $i3 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: int getColumnDimension()>();

        $r2 = newarray (int)[2];

        $r2[0] = i1;

        $r2[1] = $i3;

        $r3 = <java.lang.Double: java.lang.Class TYPE>;

        $r4 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r3, $r2);

        r5 = (double[][]) $r4;

        i1 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int columns>;

        $i3 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockColumns>;

        $i3 = $i3 + -1;

        $i3 = $i3 * 52;

        i1 = i1 - $i3;

        $i3 = 0;

     label1:
        $i4 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockRows>;

        if $i3 >= $i4 goto label6;

        i2 = $i3 * 52;

        $i4 = i2 + 52;

        $i5 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int rows>;

        $i4 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i4, $i5);

        $i5 = 0;

        i6 = 0;

     label2:
        if i2 >= $i4 goto label5;

        r1 = r5[i2];

        $i7 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockColumns>;

        $i7 = $i3 * $i7;

        i8 = 0;

        i9 = 0;

     label3:
        i0 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockColumns>;

        i0 = i0 + -1;

        if i9 >= i0 goto label4;

        $r6 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        $r7 = $r6[$i7];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, $i5, r1, i8, 52);

        i8 = i8 + 52;

        i9 = i9 + 1;

        $i7 = $i7 + 1;

        goto label3;

     label4:
        $r6 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        $r7 = $r6[$i7];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, i6, r1, i8, i1);

        $i5 = $i5 + 52;

        i6 = i6 + i1;

        i2 = i2 + 1;

        goto label2;

     label5:
        $i3 = $i3 + 1;

        goto label1;

     label6:
        return r5;
    }
    public double getEntry(int, int) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.BlockRealMatrix r0;
        int $i0, $i1, i2, i3, $i4;
        double[][] $r1;
        double[] $r2;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.BlockRealMatrix;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)>(r0, $i0, $i1);

        i2 = $i0 / 52;

        i3 = $i1 / 52;

        $i4 = i2 * 52;

        $i4 = $i0 - $i4;

        $i0 = specialinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockWidth(int)>(i3);

        $i0 = $i4 * $i0;

        $i4 = i3 * 52;

        $i1 = $i1 - $i4;

        $i0 = $i0 + $i1;

        $r1 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        $i1 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockColumns>;

        $i1 = $i1 * i2;

        $i1 = $i1 + i3;

        $r2 = $r1[$i1];

        $d0 = $r2[$i0];

        return $d0;
    }
    public double getFrobeniusNorm()
    {
        org.apache.commons.math3.linear.BlockRealMatrix r0;
        double[] r1;
        double d0, $d1;
        int i0, i1, i2;
        double[][] $r2;

        r0 := @this: org.apache.commons.math3.linear.BlockRealMatrix;

        $d1 = 0.0;

        i1 = 0;

     label1:
        $r2 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        i0 = lengthof $r2;

        if i1 >= i0 goto label4;

        $r2 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        r1 = $r2[i1];

        i0 = lengthof r1;

        i2 = 0;

     label2:
        if i2 >= i0 goto label3;

        d0 = r1[i2];

        d0 = d0 * d0;

        $d1 = $d1 + d0;

        i2 = i2 + 1;

        goto label2;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d1);

        return $d1;
    }
    public double getNorm()
    {
        org.apache.commons.math3.linear.BlockRealMatrix r0;
        double[] r1, r2;
        double d0, d1, $d2;
        int i0, $i1, i2, $i3, $i4, i5, $i6;
        double[][] $r3;

        r0 := @this: org.apache.commons.math3.linear.BlockRealMatrix;

        r2 = newarray (double)[52];

        d0 = 0.0;

        i0 = 0;

     label01:
        $i1 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockColumns>;

        if i0 >= $i1 goto label10;

        $i1 = specialinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockWidth(int)>(i0);

        staticinvoke <java.util.Arrays: void fill(double[],int,int,double)>(r2, 0, $i1, 0.0);

        i2 = 0;

     label02:
        $i3 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockRows>;

        if i2 >= $i3 goto label07;

        $i3 = specialinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockHeight(int)>(i2);

        $r3 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        $i4 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockColumns>;

        $i4 = $i4 * i2;

        $i4 = $i4 + i0;

        r1 = $r3[$i4];

        $i4 = 0;

     label03:
        if $i4 >= $i1 goto label06;

        d1 = 0.0;

        i5 = 0;

     label04:
        if i5 >= $i3 goto label05;

        $i6 = i5 * $i1;

        $i6 = $i6 + $i4;

        $d2 = r1[$i6];

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d2);

        d1 = d1 + $d2;

        i5 = i5 + 1;

        goto label04;

     label05:
        $d2 = r2[$i4];

        d1 = $d2 + d1;

        r2[$i4] = d1;

        $i4 = $i4 + 1;

        goto label03;

     label06:
        i2 = i2 + 1;

        goto label02;

     label07:
        i2 = 0;

     label08:
        if i2 >= $i1 goto label09;

        d1 = r2[i2];

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>(d0, d1);

        i2 = i2 + 1;

        goto label08;

     label09:
        i0 = i0 + 1;

        goto label01;

     label10:
        return d0;
    }
    public double[] getRow(int) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.BlockRealMatrix r0;
        int $i0, i1, $i2, $i3, i4, $i5;
        double[] r1, r2;
        double[][] $r3;

        r0 := @this: org.apache.commons.math3.linear.BlockRealMatrix;

        $i0 := @parameter0: int;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)>(r0, $i0);

        i1 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int columns>;

        r2 = newarray (double)[i1];

        i1 = $i0 / 52;

        $i3 = i1 * 52;

        $i0 = $i0 - $i3;

        $i3 = 0;

        i4 = 0;

     label1:
        $i2 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockColumns>;

        if i4 >= $i2 goto label2;

        $i2 = specialinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockWidth(int)>(i4);

        $r3 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        $i5 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockColumns>;

        $i5 = $i5 * i1;

        $i5 = $i5 + i4;

        r1 = $r3[$i5];

        $i5 = $i0 * $i2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, $i5, r2, $i3, $i2);

        $i3 = $i3 + $i2;

        i4 = i4 + 1;

        goto label1;

     label2:
        return r2;
    }
    public int getRowDimension()
    {
        org.apache.commons.math3.linear.BlockRealMatrix r0;
        int i0;

        r0 := @this: org.apache.commons.math3.linear.BlockRealMatrix;

        i0 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int rows>;

        return i0;
    }
    public org.apache.commons.math3.linear.BlockRealMatrix getRowMatrix(int) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.BlockRealMatrix r0, r2;
        int $i0, i1, i2, $i3, $i4, $i5, i6, $i7;
        double[] r1, r4;
        double[][] $r3;

        r0 := @this: org.apache.commons.math3.linear.BlockRealMatrix;

        $i0 := @parameter0: int;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)>(r0, $i0);

        r2 = new org.apache.commons.math3.linear.BlockRealMatrix;

        i2 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int columns>;

        specialinvoke r2.<org.apache.commons.math3.linear.BlockRealMatrix: void <init>(int,int)>(1, i2);

        i2 = $i0 / 52;

        $i5 = i2 * 52;

        $i0 = $i0 - $i5;

        $i5 = 0;

        $i3 = 0;

        $r3 = r2.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        r4 = $r3[0];

        i6 = 0;

     label1:
        $i4 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockColumns>;

        if i6 >= $i4 goto label4;

        $i4 = specialinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockWidth(int)>(i6);

        $r3 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        i1 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockColumns>;

        i1 = i1 * i2;

        i1 = i1 + i6;

        r1 = $r3[i1];

        i1 = lengthof r4;

        i1 = i1 - $i3;

        if $i4 <= i1 goto label3;

        $i7 = $i0 * $i4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, $i7, r4, $i3, i1);

        $r3 = r2.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        $i5 = $i5 + 1;

        r4 = $r3[$i5];

        $i7 = $i0 * $i4;

        $i3 = $i4 - i1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, $i7, r4, 0, $i3);

        $i3 = $i4 - i1;

     label2:
        i6 = i6 + 1;

        goto label1;

     label3:
        i1 = $i0 * $i4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i1, r4, $i3, $i4);

        $i3 = $i3 + $i4;

        goto label2;

     label4:
        return r2;
    }
    public volatile org.apache.commons.math3.linear.RealMatrix getRowMatrix(int) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.BlockRealMatrix r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.linear.BlockRealMatrix;

        $i0 := @parameter0: int;

        r0 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: org.apache.commons.math3.linear.BlockRealMatrix getRowMatrix(int)>($i0);

        return r0;
    }
    public org.apache.commons.math3.linear.RealVector getRowVector(int) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.BlockRealMatrix r0;
        int $i0, i1, $i2, $i3, i4, $i5;
        double[] r1, r2;
        double[][] $r3;
        org.apache.commons.math3.linear.ArrayRealVector $r4;

        r0 := @this: org.apache.commons.math3.linear.BlockRealMatrix;

        $i0 := @parameter0: int;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)>(r0, $i0);

        i1 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int columns>;

        r2 = newarray (double)[i1];

        i1 = $i0 / 52;

        $i3 = i1 * 52;

        $i0 = $i0 - $i3;

        $i3 = 0;

        i4 = 0;

     label1:
        $i2 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockColumns>;

        if i4 >= $i2 goto label2;

        $i2 = specialinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockWidth(int)>(i4);

        $r3 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        $i5 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockColumns>;

        $i5 = $i5 * i1;

        $i5 = $i5 + i4;

        r1 = $r3[$i5];

        $i5 = $i0 * $i2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, $i5, r2, $i3, $i2);

        $i3 = $i3 + $i2;

        i4 = i4 + 1;

        goto label1;

     label2:
        $r4 = new org.apache.commons.math3.linear.ArrayRealVector;

        specialinvoke $r4.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(double[],boolean)>(r2, 0);

        return $r4;
    }
    public org.apache.commons.math3.linear.BlockRealMatrix getSubMatrix(int, int, int, int) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.linear.BlockRealMatrix r0, r2;
        int $i0, $i1, $i2, $i3, i4, i5, i6, i7, i8, $i9, i10, i11, $i12, $i13, $i14;
        double[] r1, $r4;
        double[][] $r3;

        r0 := @this: org.apache.commons.math3.linear.BlockRealMatrix;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)>(r0, $i0, $i1, $i2, $i3);

        r2 = new org.apache.commons.math3.linear.BlockRealMatrix;

        $i1 = $i1 - $i0;

        $i1 = $i1 + 1;

        $i3 = $i3 - $i2;

        $i3 = $i3 + 1;

        specialinvoke r2.<org.apache.commons.math3.linear.BlockRealMatrix: void <init>(int,int)>($i1, $i3);

        $i3 = $i0 / 52;

        $i0 = $i0 % 52;

        $i1 = $i2 / 52;

        $i2 = $i2 % 52;

        i8 = 0;

     label1:
        $i9 = r2.<org.apache.commons.math3.linear.BlockRealMatrix: int blockRows>;

        if i8 >= $i9 goto label8;

        $i9 = specialinvoke r2.<org.apache.commons.math3.linear.BlockRealMatrix: int blockHeight(int)>(i8);

        i10 = $i1;

        i11 = 0;

     label2:
        $i12 = r2.<org.apache.commons.math3.linear.BlockRealMatrix: int blockColumns>;

        if i11 >= $i12 goto label7;

        $i12 = specialinvoke r2.<org.apache.commons.math3.linear.BlockRealMatrix: int blockWidth(int)>(i11);

        i7 = r2.<org.apache.commons.math3.linear.BlockRealMatrix: int blockColumns>;

        i7 = i7 * i8;

        i7 = i7 + i11;

        $r3 = r2.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        r1 = $r3[i7];

        i7 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockColumns>;

        i7 = i7 * $i3;

        i6 = i7 + i10;

        i7 = specialinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockWidth(int)>(i10);

        i4 = $i9 + $i0;

        i5 = i4 + -52;

        i4 = $i12 + $i2;

        i4 = i4 + -52;

        if i5 <= 0 goto label5;

        if i4 <= 0 goto label4;

        $i13 = i10 + 1;

        $i13 = specialinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockWidth(int)>($i13);

        $r3 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        $r4 = $r3[i6];

        specialinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: void copyBlockPart(double[],int,int,int,int,int,double[],int,int,int)>($r4, i7, $i0, 52, $i2, 52, r1, $i12, 0, 0);

        $r3 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        $i14 = i6 + 1;

        $r4 = $r3[$i14];

        $i14 = $i12 - i4;

        specialinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: void copyBlockPart(double[],int,int,int,int,int,double[],int,int,int)>($r4, $i13, $i0, 52, 0, i4, r1, $i12, 0, $i14);

        $r3 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        $i14 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockColumns>;

        $i14 = $i14 + i6;

        $r4 = $r3[$i14];

        $i14 = $i9 - i5;

        specialinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: void copyBlockPart(double[],int,int,int,int,int,double[],int,int,int)>($r4, i7, 0, i5, $i2, 52, r1, $i12, $i14, 0);

        $r3 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        i7 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockColumns>;

        i7 = i7 + i6;

        i7 = i7 + 1;

        $r4 = $r3[i7];

        i7 = $i9 - i5;

        i6 = $i12 - i4;

        specialinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: void copyBlockPart(double[],int,int,int,int,int,double[],int,int,int)>($r4, $i13, 0, i5, 0, i4, r1, $i12, i7, i6);

     label3:
        i10 = i10 + 1;

        i11 = i11 + 1;

        goto label2;

     label4:
        $r3 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        $r4 = $r3[i6];

        i4 = $i12 + $i2;

        specialinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: void copyBlockPart(double[],int,int,int,int,int,double[],int,int,int)>($r4, i7, $i0, 52, $i2, i4, r1, $i12, 0, 0);

        $r3 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        i4 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockColumns>;

        i4 = i4 + i6;

        $r4 = $r3[i4];

        i4 = $i12 + $i2;

        i6 = $i9 - i5;

        specialinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: void copyBlockPart(double[],int,int,int,int,int,double[],int,int,int)>($r4, i7, 0, i5, $i2, i4, r1, $i12, i6, 0);

        goto label3;

     label5:
        if i4 <= 0 goto label6;

        i5 = i10 + 1;

        i5 = specialinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockWidth(int)>(i5);

        $r3 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        $r4 = $r3[i6];

        $i13 = $i9 + $i0;

        specialinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: void copyBlockPart(double[],int,int,int,int,int,double[],int,int,int)>($r4, i7, $i0, $i13, $i2, 52, r1, $i12, 0, 0);

        $r3 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        i7 = i6 + 1;

        $r4 = $r3[i7];

        i7 = $i9 + $i0;

        i6 = $i12 - i4;

        specialinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: void copyBlockPart(double[],int,int,int,int,int,double[],int,int,int)>($r4, i5, $i0, i7, 0, i4, r1, $i12, 0, i6);

        goto label3;

     label6:
        $r3 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        $r4 = $r3[i6];

        i4 = $i9 + $i0;

        i5 = $i12 + $i2;

        specialinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: void copyBlockPart(double[],int,int,int,int,int,double[],int,int,int)>($r4, i7, $i0, i4, $i2, i5, r1, $i12, 0, 0);

        goto label3;

     label7:
        $i3 = $i3 + 1;

        i8 = i8 + 1;

        goto label1;

     label8:
        return r2;
    }
    public volatile org.apache.commons.math3.linear.RealMatrix getSubMatrix(int, int, int, int) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.linear.BlockRealMatrix r0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.apache.commons.math3.linear.BlockRealMatrix;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        r0 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: org.apache.commons.math3.linear.BlockRealMatrix getSubMatrix(int,int,int,int)>($i0, $i1, $i2, $i3);

        return r0;
    }
    public org.apache.commons.math3.linear.BlockRealMatrix multiply(org.apache.commons.math3.linear.BlockRealMatrix) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.BlockRealMatrix r0, $r1, r3;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, i11, $i12, $i13, i14, i15, i16, i17, $i18;
        double[] r2, r4, r5;
        double[][] $r6;
        double d0, $d1, $d2, $d3;

        r0 := @this: org.apache.commons.math3.linear.BlockRealMatrix;

        $r1 := @parameter0: org.apache.commons.math3.linear.BlockRealMatrix;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)>(r0, $r1);

        r3 = new org.apache.commons.math3.linear.BlockRealMatrix;

        $i6 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int rows>;

        $i7 = $r1.<org.apache.commons.math3.linear.BlockRealMatrix: int columns>;

        specialinvoke r3.<org.apache.commons.math3.linear.BlockRealMatrix: void <init>(int,int)>($i6, $i7);

        $i6 = 0;

        $i7 = 0;

     label01:
        i5 = r3.<org.apache.commons.math3.linear.BlockRealMatrix: int blockRows>;

        if $i7 >= i5 goto label13;

        i5 = $i7 * 52;

        $i8 = i5 + 52;

        $i9 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int rows>;

        $i8 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i8, $i9);

        $i9 = 0;

     label02:
        i0 = r3.<org.apache.commons.math3.linear.BlockRealMatrix: int blockColumns>;

        if $i9 >= i0 goto label12;

        $i10 = specialinvoke r3.<org.apache.commons.math3.linear.BlockRealMatrix: int blockWidth(int)>($i9);

        i0 = $i10 + $i10;

        i1 = i0 + $i10;

        i2 = i1 + $i10;

        $r6 = r3.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        r4 = $r6[$i6];

        i11 = 0;

     label03:
        $i12 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockColumns>;

        if i11 >= $i12 goto label11;

        $i12 = specialinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockWidth(int)>(i11);

        $r6 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        $i13 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockColumns>;

        $i13 = $i13 * $i7;

        $i13 = $i13 + i11;

        r5 = $r6[$i13];

        $r6 = $r1.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        $i13 = $r1.<org.apache.commons.math3.linear.BlockRealMatrix: int blockColumns>;

        $i13 = $i13 * i11;

        $i13 = $i13 + $i9;

        r2 = $r6[$i13];

        $i13 = 0;

        i14 = i5;

     label04:
        if i14 >= $i8 goto label10;

        i3 = i14 - i5;

        i4 = i3 * $i12;

        i3 = i4 + $i12;

        i15 = 0;

     label05:
        if i15 >= $i10 goto label09;

        d0 = 0.0;

        i16 = i4;

        i17 = i15;

     label06:
        $i18 = i3 + -3;

        if i16 >= $i18 goto label14;

        $d1 = r5[i16];

        $d2 = r2[i17];

        $d1 = $d1 * $d2;

        $i18 = i16 + 1;

        $d2 = r5[$i18];

        $i18 = i17 + $i10;

        $d3 = r2[$i18];

        $d2 = $d2 * $d3;

        $d1 = $d1 + $d2;

        $i18 = i16 + 2;

        $d2 = r5[$i18];

        $i18 = i17 + i0;

        $d3 = r2[$i18];

        $d2 = $d2 * $d3;

        $d1 = $d1 + $d2;

        $i18 = i16 + 3;

        $d2 = r5[$i18];

        $i18 = i17 + i1;

        $d3 = r2[$i18];

        $d2 = $d2 * $d3;

        $d1 = $d1 + $d2;

        d0 = d0 + $d1;

        i16 = i16 + 4;

        i17 = i17 + i2;

        goto label06;

     label07:
        if $i18 >= i3 goto label08;

        $d1 = r5[$i18];

        $d2 = r2[i17];

        $d1 = $d1 * $d2;

        d0 = d0 + $d1;

        i17 = i17 + $i10;

        $i18 = $i18 + 1;

        goto label07;

     label08:
        $d1 = r4[$i13];

        d0 = $d1 + d0;

        r4[$i13] = d0;

        $i13 = $i13 + 1;

        i15 = i15 + 1;

        goto label05;

     label09:
        i14 = i14 + 1;

        goto label04;

     label10:
        i11 = i11 + 1;

        goto label03;

     label11:
        $i6 = $i6 + 1;

        $i9 = $i9 + 1;

        goto label02;

     label12:
        $i7 = $i7 + 1;

        goto label01;

     label13:
        return r3;

     label14:
        $i18 = i16;

        goto label07;
    }
    public org.apache.commons.math3.linear.BlockRealMatrix multiply(org.apache.commons.math3.linear.RealMatrix) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.BlockRealMatrix r0, $r5;
        org.apache.commons.math3.linear.RealMatrix $r1;
        java.lang.ClassCastException r2;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i14, i15, i16;
        double[] r3, r4;
        double[][] $r6;
        double d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.linear.BlockRealMatrix;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

     label01:
        $r5 = (org.apache.commons.math3.linear.BlockRealMatrix) $r1;

        $r5 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: org.apache.commons.math3.linear.BlockRealMatrix multiply(org.apache.commons.math3.linear.BlockRealMatrix)>($r5);

     label02:
        return $r5;

     label03:
        r2 := @caughtexception;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)>(r0, $r1);

        $r5 = new org.apache.commons.math3.linear.BlockRealMatrix;

        $i5 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int rows>;

        $i6 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        specialinvoke $r5.<org.apache.commons.math3.linear.BlockRealMatrix: void <init>(int,int)>($i5, $i6);

        $i5 = 0;

        $i6 = 0;

     label04:
        i2 = $r5.<org.apache.commons.math3.linear.BlockRealMatrix: int blockRows>;

        if $i6 >= i2 goto label15;

        i2 = $i6 * 52;

        $i7 = i2 + 52;

        $i8 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int rows>;

        $i7 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i7, $i8);

        $i8 = 0;

     label05:
        i3 = $r5.<org.apache.commons.math3.linear.BlockRealMatrix: int blockColumns>;

        if $i8 >= i3 goto label14;

        i3 = $i8 * 52;

        $i9 = i3 + 52;

        $i10 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        $i9 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i9, $i10);

        $r6 = $r5.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        r3 = $r6[$i5];

        $i10 = 0;

     label06:
        $i11 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockColumns>;

        if $i10 >= $i11 goto label13;

        $i11 = specialinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockWidth(int)>($i10);

        $r6 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        i4 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockColumns>;

        i4 = i4 * $i6;

        i4 = i4 + $i10;

        r4 = $r6[i4];

        i4 = $i10 * 52;

        i12 = 0;

        i13 = i2;

     label07:
        if i13 >= $i7 goto label12;

        i0 = i13 - i2;

        i1 = i0 * $i11;

        i0 = i1 + $i11;

        i14 = i3;

     label08:
        if i14 >= $i9 goto label11;

        d0 = 0.0;

        i15 = i4;

        i16 = i1;

     label09:
        if i16 >= i0 goto label10;

        $d1 = r4[i16];

        $d2 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>(i15, i14);

        $d1 = $d1 * $d2;

        d0 = d0 + $d1;

        i15 = i15 + 1;

        i16 = i16 + 1;

        goto label09;

     label10:
        $d1 = r3[i12];

        d0 = $d1 + d0;

        r3[i12] = d0;

        i12 = i12 + 1;

        i14 = i14 + 1;

        goto label08;

     label11:
        i13 = i13 + 1;

        goto label07;

     label12:
        $i10 = $i10 + 1;

        goto label06;

     label13:
        $i5 = $i5 + 1;

        $i8 = $i8 + 1;

        goto label05;

     label14:
        $i6 = $i6 + 1;

        goto label04;

     label15:
        return $r5;

        catch java.lang.ClassCastException from label01 to label02 with label03;
    }
    public volatile org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.BlockRealMatrix r0;
        org.apache.commons.math3.linear.RealMatrix $r1;

        r0 := @this: org.apache.commons.math3.linear.BlockRealMatrix;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        r0 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: org.apache.commons.math3.linear.BlockRealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>($r1);

        return r0;
    }
    public void multiplyEntry(int, int, double) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.BlockRealMatrix r0;
        int $i0, $i1, i2, i3, $i4;
        double $d0, $d1;
        double[][] $r1;
        double[] $r2;

        r0 := @this: org.apache.commons.math3.linear.BlockRealMatrix;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $d0 := @parameter2: double;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)>(r0, $i0, $i1);

        i2 = $i0 / 52;

        i3 = $i1 / 52;

        $i4 = i2 * 52;

        $i4 = $i0 - $i4;

        $i0 = specialinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockWidth(int)>(i3);

        $i0 = $i4 * $i0;

        $i4 = i3 * 52;

        $i1 = $i1 - $i4;

        $i0 = $i0 + $i1;

        $r1 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        $i1 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockColumns>;

        $i1 = $i1 * i2;

        $i1 = $i1 + i3;

        $r2 = $r1[$i1];

        $d1 = $r2[$i0];

        $d0 = $d1 * $d0;

        $r2[$i0] = $d0;

        return;
    }
    public double[] operate(double[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.BlockRealMatrix r0;
        double[] $r1, r2, r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, i7, i8, $i9;
        org.apache.commons.math3.exception.DimensionMismatchException $r4;
        double[][] $r5;
        double d0, $d1, $d2, $d3;

        r0 := @this: org.apache.commons.math3.linear.BlockRealMatrix;

        $r1 := @parameter0: double[];

        $i2 = lengthof $r1;

        i0 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int columns>;

        if $i2 == i0 goto label01;

        $r4 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i2 = lengthof $r1;

        i0 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int columns>;

        specialinvoke $r4.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i2, i0);

        throw $r4;

     label01:
        $i2 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int rows>;

        r3 = newarray (double)[$i2];

        $i2 = 0;

     label02:
        i0 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockRows>;

        if $i2 >= i0 goto label10;

        i0 = $i2 * 52;

        $i3 = i0 + 52;

        $i4 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int rows>;

        $i3 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i3, $i4);

        $i4 = 0;

     label03:
        i1 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockColumns>;

        if $i4 >= i1 goto label09;

        $r5 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        i1 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockColumns>;

        i1 = i1 * $i2;

        i1 = i1 + $i4;

        r2 = $r5[i1];

        i1 = $i4 * 52;

        $i5 = i1 + 52;

        $i6 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int columns>;

        $i5 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i5, $i6);

        i7 = 0;

        $i6 = i0;

     label04:
        if $i6 >= $i3 goto label08;

        d0 = 0.0;

        i8 = i1;

     label05:
        $i9 = $i5 + -3;

        if i8 >= $i9 goto label11;

        $d1 = r2[i7];

        $d2 = $r1[i8];

        $d1 = $d1 * $d2;

        $i9 = i7 + 1;

        $d2 = r2[$i9];

        $i9 = i8 + 1;

        $d3 = $r1[$i9];

        $d2 = $d2 * $d3;

        $d1 = $d1 + $d2;

        $i9 = i7 + 2;

        $d2 = r2[$i9];

        $i9 = i8 + 2;

        $d3 = $r1[$i9];

        $d2 = $d2 * $d3;

        $d1 = $d1 + $d2;

        $i9 = i7 + 3;

        $d2 = r2[$i9];

        $i9 = i8 + 3;

        $d3 = $r1[$i9];

        $d2 = $d2 * $d3;

        $d1 = $d1 + $d2;

        d0 = d0 + $d1;

        i7 = i7 + 4;

        i8 = i8 + 4;

        goto label05;

     label06:
        if i8 >= $i5 goto label07;

        $d1 = r2[$i9];

        $d2 = $r1[i8];

        $d1 = $d1 * $d2;

        d0 = d0 + $d1;

        i8 = i8 + 1;

        $i9 = $i9 + 1;

        goto label06;

     label07:
        $d1 = r3[$i6];

        d0 = $d1 + d0;

        r3[$i6] = d0;

        $i6 = $i6 + 1;

        i7 = $i9;

        goto label04;

     label08:
        $i4 = $i4 + 1;

        goto label03;

     label09:
        $i2 = $i2 + 1;

        goto label02;

     label10:
        return r3;

     label11:
        $i9 = i7;

        goto label06;
    }
    public double[] preMultiply(double[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.BlockRealMatrix r0;
        double[] $r1, r2, r3;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12, $i13;
        org.apache.commons.math3.exception.DimensionMismatchException $r4;
        double[][] $r5;
        double d0, $d1, $d2, $d3;

        r0 := @this: org.apache.commons.math3.linear.BlockRealMatrix;

        $r1 := @parameter0: double[];

        $i5 = lengthof $r1;

        i0 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int rows>;

        if $i5 == i0 goto label01;

        $r4 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i5 = lengthof $r1;

        i0 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int rows>;

        specialinvoke $r4.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i5, i0);

        throw $r4;

     label01:
        $i5 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int columns>;

        r3 = newarray (double)[$i5];

        $i5 = 0;

     label02:
        i0 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockColumns>;

        if $i5 >= i0 goto label10;

        $i6 = specialinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockWidth(int)>($i5);

        i0 = $i6 + $i6;

        i1 = i0 + $i6;

        i2 = i1 + $i6;

        i4 = $i5 * 52;

        $i7 = i4 + 52;

        $i8 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int columns>;

        $i7 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i7, $i8);

        $i8 = 0;

     label03:
        i3 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockRows>;

        if $i8 >= i3 goto label09;

        $r5 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        i3 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockColumns>;

        i3 = i3 * $i8;

        i3 = i3 + $i5;

        r2 = $r5[i3];

        i3 = $i8 * 52;

        $i9 = i3 + 52;

        $i10 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int rows>;

        $i9 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i9, $i10);

        $i10 = i4;

     label04:
        if $i10 >= $i7 goto label08;

        i11 = $i10 - i4;

        d0 = 0.0;

        i12 = i3;

     label05:
        $i13 = $i9 + -3;

        if i12 >= $i13 goto label11;

        $d1 = r2[i11];

        $d2 = $r1[i12];

        $d1 = $d1 * $d2;

        $i13 = i11 + $i6;

        $d2 = r2[$i13];

        $i13 = i12 + 1;

        $d3 = $r1[$i13];

        $d2 = $d2 * $d3;

        $d1 = $d1 + $d2;

        $i13 = i11 + i0;

        $d2 = r2[$i13];

        $i13 = i12 + 2;

        $d3 = $r1[$i13];

        $d2 = $d2 * $d3;

        $d1 = $d1 + $d2;

        $i13 = i11 + i1;

        $d2 = r2[$i13];

        $i13 = i12 + 3;

        $d3 = $r1[$i13];

        $d2 = $d2 * $d3;

        $d1 = $d1 + $d2;

        d0 = d0 + $d1;

        i11 = i11 + i2;

        i12 = i12 + 4;

        goto label05;

     label06:
        if $i13 >= $i9 goto label07;

        $d1 = r2[i11];

        $d2 = $r1[$i13];

        $d1 = $d1 * $d2;

        d0 = d0 + $d1;

        i11 = i11 + $i6;

        $i13 = $i13 + 1;

        goto label06;

     label07:
        $d1 = r3[$i10];

        d0 = $d1 + d0;

        r3[$i10] = d0;

        $i10 = $i10 + 1;

        goto label04;

     label08:
        $i8 = $i8 + 1;

        goto label03;

     label09:
        $i5 = $i5 + 1;

        goto label02;

     label10:
        return r3;

     label11:
        $i13 = i12;

        goto label06;
    }
    public org.apache.commons.math3.linear.BlockRealMatrix scalarAdd(double)
    {
        org.apache.commons.math3.linear.BlockRealMatrix r0, r1;
        double $d0, $d1;
        double[] r2, r3;
        int $i0, $i1, $i2;
        double[][] $r4;

        r0 := @this: org.apache.commons.math3.linear.BlockRealMatrix;

        $d0 := @parameter0: double;

        r1 = new org.apache.commons.math3.linear.BlockRealMatrix;

        $i0 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int rows>;

        $i1 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int columns>;

        specialinvoke r1.<org.apache.commons.math3.linear.BlockRealMatrix: void <init>(int,int)>($i0, $i1);

        $i0 = 0;

     label1:
        $r4 = r1.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        $i1 = lengthof $r4;

        if $i0 >= $i1 goto label4;

        $r4 = r1.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        r2 = $r4[$i0];

        $r4 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        r3 = $r4[$i0];

        $i1 = 0;

     label2:
        $i2 = lengthof r2;

        if $i1 >= $i2 goto label3;

        $d1 = r3[$i1];

        $d1 = $d1 + $d0;

        r2[$i1] = $d1;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $i0 = $i0 + 1;

        goto label1;

     label4:
        return r1;
    }
    public volatile org.apache.commons.math3.linear.RealMatrix scalarAdd(double)
    {
        org.apache.commons.math3.linear.BlockRealMatrix r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.BlockRealMatrix;

        $d0 := @parameter0: double;

        r0 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: org.apache.commons.math3.linear.BlockRealMatrix scalarAdd(double)>($d0);

        return r0;
    }
    public org.apache.commons.math3.linear.RealMatrix scalarMultiply(double)
    {
        org.apache.commons.math3.linear.BlockRealMatrix r0, r1;
        double $d0, $d1;
        double[] r2, r3;
        int $i0, $i1, $i2;
        double[][] $r4;

        r0 := @this: org.apache.commons.math3.linear.BlockRealMatrix;

        $d0 := @parameter0: double;

        r1 = new org.apache.commons.math3.linear.BlockRealMatrix;

        $i0 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int rows>;

        $i1 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int columns>;

        specialinvoke r1.<org.apache.commons.math3.linear.BlockRealMatrix: void <init>(int,int)>($i0, $i1);

        $i0 = 0;

     label1:
        $r4 = r1.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        $i1 = lengthof $r4;

        if $i0 >= $i1 goto label4;

        $r4 = r1.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        r2 = $r4[$i0];

        $r4 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        r3 = $r4[$i0];

        $i1 = 0;

     label2:
        $i2 = lengthof r2;

        if $i1 >= $i2 goto label3;

        $d1 = r3[$i1];

        $d1 = $d1 * $d0;

        r2[$i1] = $d1;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $i0 = $i0 + 1;

        goto label1;

     label4:
        return r1;
    }
    public void setColumn(int, double[]) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.linear.MatrixDimensionMismatchException
    {
        org.apache.commons.math3.linear.BlockRealMatrix r0;
        int $i0, i1, $i2, i3, i4, $i5, $i6, $i7;
        double[] $r1, r2;
        org.apache.commons.math3.linear.MatrixDimensionMismatchException $r3;
        double[][] $r4;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.BlockRealMatrix;

        $i0 := @parameter0: int;

        $r1 := @parameter1: double[];

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)>(r0, $i0);

        i1 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: int getRowDimension()>();

        $i2 = lengthof $r1;

        if $i2 == i1 goto label1;

        $r3 = new org.apache.commons.math3.linear.MatrixDimensionMismatchException;

        $i0 = lengthof $r1;

        specialinvoke $r3.<org.apache.commons.math3.linear.MatrixDimensionMismatchException: void <init>(int,int,int,int)>($i0, 1, i1, 1);

        throw $r3;

     label1:
        i1 = $i0 / 52;

        $i2 = i1 * 52;

        $i0 = $i0 - $i2;

        $i2 = specialinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockWidth(int)>(i1);

        i3 = 0;

        i4 = 0;

     label2:
        $i5 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockRows>;

        if i4 >= $i5 goto label5;

        $i5 = specialinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockHeight(int)>(i4);

        $r4 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        $i6 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockColumns>;

        $i6 = $i6 * i4;

        $i6 = $i6 + i1;

        r2 = $r4[$i6];

        $i6 = 0;

     label3:
        if $i6 >= $i5 goto label4;

        $i7 = $i6 * $i2;

        $i7 = $i7 + $i0;

        $d0 = $r1[i3];

        r2[$i7] = $d0;

        $i6 = $i6 + 1;

        i3 = i3 + 1;

        goto label3;

     label4:
        i4 = i4 + 1;

        goto label2;

     label5:
        return;
    }
    void setColumnMatrix(int, org.apache.commons.math3.linear.BlockRealMatrix) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.linear.MatrixDimensionMismatchException
    {
        org.apache.commons.math3.linear.BlockRealMatrix r0, $r1;
        int $i0, i1, i2, $i3, i4, i5, i6, $i7, $i8, $i9;
        double[] r2, r5;
        org.apache.commons.math3.linear.MatrixDimensionMismatchException $r3;
        double[][] $r4;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.BlockRealMatrix;

        $i0 := @parameter0: int;

        $r1 := @parameter1: org.apache.commons.math3.linear.BlockRealMatrix;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)>(r0, $i0);

        i1 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: int getRowDimension()>();

        $i3 = virtualinvoke $r1.<org.apache.commons.math3.linear.BlockRealMatrix: int getRowDimension()>();

        if $i3 != i1 goto label1;

        $i3 = virtualinvoke $r1.<org.apache.commons.math3.linear.BlockRealMatrix: int getColumnDimension()>();

        if $i3 == 1 goto label2;

     label1:
        $r3 = new org.apache.commons.math3.linear.MatrixDimensionMismatchException;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.linear.BlockRealMatrix: int getRowDimension()>();

        $i3 = virtualinvoke $r1.<org.apache.commons.math3.linear.BlockRealMatrix: int getColumnDimension()>();

        specialinvoke $r3.<org.apache.commons.math3.linear.MatrixDimensionMismatchException: void <init>(int,int,int,int)>($i0, $i3, i1, 1);

        throw $r3;

     label2:
        i1 = $i0 / 52;

        $i3 = i1 * 52;

        $i0 = $i0 - $i3;

        $i3 = specialinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockWidth(int)>(i1);

        i4 = 0;

        i5 = 0;

        $r4 = $r1.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        r5 = $r4[0];

        i6 = 0;

     label3:
        $i7 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockRows>;

        if i6 >= $i7 goto label7;

        $i7 = specialinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockHeight(int)>(i6);

        $r4 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        $i8 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockColumns>;

        $i8 = $i8 * i6;

        $i8 = $i8 + i1;

        r2 = $r4[$i8];

        $i8 = 0;

     label4:
        if $i8 >= $i7 goto label6;

        i2 = lengthof r5;

        if i5 < i2 goto label5;

        $r4 = $r1.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        i4 = i4 + 1;

        r5 = $r4[i4];

        i5 = 0;

     label5:
        i2 = $i8 * $i3;

        $i9 = i2 + $i0;

        $d0 = r5[i5];

        r2[$i9] = $d0;

        $i8 = $i8 + 1;

        i5 = i5 + 1;

        goto label4;

     label6:
        i6 = i6 + 1;

        goto label3;

     label7:
        return;
    }
    public void setColumnMatrix(int, org.apache.commons.math3.linear.RealMatrix) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.linear.MatrixDimensionMismatchException
    {
        org.apache.commons.math3.linear.BlockRealMatrix r0, $r3;
        int $i0;
        org.apache.commons.math3.linear.RealMatrix $r1;
        java.lang.ClassCastException r2;

        r0 := @this: org.apache.commons.math3.linear.BlockRealMatrix;

        $i0 := @parameter0: int;

        $r1 := @parameter1: org.apache.commons.math3.linear.RealMatrix;

     label1:
        $r3 = (org.apache.commons.math3.linear.BlockRealMatrix) $r1;

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: void setColumnMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)>($i0, $r3);

     label2:
        return;

     label3:
        r2 := @caughtexception;

        specialinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: void setColumnMatrix(int,org.apache.commons.math3.linear.RealMatrix)>($i0, $r1);

        return;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }
    public void setColumnVector(int, org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.linear.MatrixDimensionMismatchException
    {
        org.apache.commons.math3.linear.BlockRealMatrix r0;
        int $i0;
        org.apache.commons.math3.linear.RealVector $r1;
        java.lang.ClassCastException r2;
        double[] $r3;
        org.apache.commons.math3.linear.ArrayRealVector $r4;

        r0 := @this: org.apache.commons.math3.linear.BlockRealMatrix;

        $i0 := @parameter0: int;

        $r1 := @parameter1: org.apache.commons.math3.linear.RealVector;

     label1:
        $r4 = (org.apache.commons.math3.linear.ArrayRealVector) $r1;

        $r3 = virtualinvoke $r4.<org.apache.commons.math3.linear.ArrayRealVector: double[] getDataRef()>();

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: void setColumn(int,double[])>($i0, $r3);

     label2:
        return;

     label3:
        r2 := @caughtexception;

        specialinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: void setColumnVector(int,org.apache.commons.math3.linear.RealVector)>($i0, $r1);

        return;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }
    public void setEntry(int, int, double) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.BlockRealMatrix r0;
        int $i0, $i1, i2, i3, $i4;
        double $d0;
        double[][] $r1;
        double[] $r2;

        r0 := @this: org.apache.commons.math3.linear.BlockRealMatrix;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $d0 := @parameter2: double;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)>(r0, $i0, $i1);

        i2 = $i0 / 52;

        i3 = $i1 / 52;

        $i4 = i2 * 52;

        $i4 = $i0 - $i4;

        $i0 = specialinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockWidth(int)>(i3);

        $i0 = $i4 * $i0;

        $i4 = i3 * 52;

        $i1 = $i1 - $i4;

        $i0 = $i0 + $i1;

        $r1 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        $i1 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockColumns>;

        $i1 = $i1 * i2;

        $i1 = $i1 + i3;

        $r2 = $r1[$i1];

        $r2[$i0] = $d0;

        return;
    }
    public void setRow(int, double[]) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.linear.MatrixDimensionMismatchException
    {
        org.apache.commons.math3.linear.BlockRealMatrix r0;
        int $i0, i1, $i2, i3, $i4, $i5;
        double[] $r1, r2;
        org.apache.commons.math3.linear.MatrixDimensionMismatchException $r3;
        double[][] $r4;

        r0 := @this: org.apache.commons.math3.linear.BlockRealMatrix;

        $i0 := @parameter0: int;

        $r1 := @parameter1: double[];

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)>(r0, $i0);

        i1 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: int getColumnDimension()>();

        $i2 = lengthof $r1;

        if $i2 == i1 goto label1;

        $r3 = new org.apache.commons.math3.linear.MatrixDimensionMismatchException;

        $i0 = lengthof $r1;

        specialinvoke $r3.<org.apache.commons.math3.linear.MatrixDimensionMismatchException: void <init>(int,int,int,int)>(1, $i0, 1, i1);

        throw $r3;

     label1:
        i1 = $i0 / 52;

        $i2 = i1 * 52;

        $i0 = $i0 - $i2;

        $i2 = 0;

        i3 = 0;

     label2:
        $i4 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockColumns>;

        if i3 >= $i4 goto label3;

        $i4 = specialinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockWidth(int)>(i3);

        $r4 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        $i5 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockColumns>;

        $i5 = $i5 * i1;

        $i5 = $i5 + i3;

        r2 = $r4[$i5];

        $i5 = $i0 * $i4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i2, r2, $i5, $i4);

        $i2 = $i2 + $i4;

        i3 = i3 + 1;

        goto label2;

     label3:
        return;
    }
    public void setRowMatrix(int, org.apache.commons.math3.linear.BlockRealMatrix) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.linear.MatrixDimensionMismatchException
    {
        org.apache.commons.math3.linear.BlockRealMatrix r0, $r1;
        int $i0, i1, i2, $i3, i4, i5, $i6, $i7;
        double[] r2, r5;
        org.apache.commons.math3.linear.MatrixDimensionMismatchException $r3;
        double[][] $r4;

        r0 := @this: org.apache.commons.math3.linear.BlockRealMatrix;

        $i0 := @parameter0: int;

        $r1 := @parameter1: org.apache.commons.math3.linear.BlockRealMatrix;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)>(r0, $i0);

        i2 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: int getColumnDimension()>();

        $i3 = virtualinvoke $r1.<org.apache.commons.math3.linear.BlockRealMatrix: int getRowDimension()>();

        if $i3 != 1 goto label1;

        $i3 = virtualinvoke $r1.<org.apache.commons.math3.linear.BlockRealMatrix: int getColumnDimension()>();

        if $i3 == i2 goto label2;

     label1:
        $r3 = new org.apache.commons.math3.linear.MatrixDimensionMismatchException;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.linear.BlockRealMatrix: int getRowDimension()>();

        $i3 = virtualinvoke $r1.<org.apache.commons.math3.linear.BlockRealMatrix: int getColumnDimension()>();

        specialinvoke $r3.<org.apache.commons.math3.linear.MatrixDimensionMismatchException: void <init>(int,int,int,int)>($i0, $i3, 1, i2);

        throw $r3;

     label2:
        i2 = $i0 / 52;

        $i3 = i2 * 52;

        $i0 = $i0 - $i3;

        $i3 = 0;

        i4 = 0;

        $r4 = $r1.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        r5 = $r4[0];

        i5 = 0;

     label3:
        $i6 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockColumns>;

        if i5 >= $i6 goto label6;

        $i6 = specialinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockWidth(int)>(i5);

        $r4 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        i1 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockColumns>;

        i1 = i1 * i2;

        i1 = i1 + i5;

        r2 = $r4[i1];

        i1 = lengthof r5;

        i1 = i1 - i4;

        if $i6 <= i1 goto label5;

        $i7 = $i0 * $i6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r5, i4, r2, $i7, i1);

        $r4 = $r1.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        $i3 = $i3 + 1;

        r5 = $r4[$i3];

        i4 = $i0 * $i6;

        $i7 = $i6 - i1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r5, 0, r2, i4, $i7);

        i4 = $i6 - i1;

     label4:
        i5 = i5 + 1;

        goto label3;

     label5:
        i1 = $i0 * $i6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r5, i4, r2, i1, $i6);

        i4 = i4 + $i6;

        goto label4;

     label6:
        return;
    }
    public void setRowMatrix(int, org.apache.commons.math3.linear.RealMatrix) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.linear.MatrixDimensionMismatchException
    {
        org.apache.commons.math3.linear.BlockRealMatrix r0, $r3;
        int $i0;
        org.apache.commons.math3.linear.RealMatrix $r1;
        java.lang.ClassCastException r2;

        r0 := @this: org.apache.commons.math3.linear.BlockRealMatrix;

        $i0 := @parameter0: int;

        $r1 := @parameter1: org.apache.commons.math3.linear.RealMatrix;

     label1:
        $r3 = (org.apache.commons.math3.linear.BlockRealMatrix) $r1;

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: void setRowMatrix(int,org.apache.commons.math3.linear.BlockRealMatrix)>($i0, $r3);

     label2:
        return;

     label3:
        r2 := @caughtexception;

        specialinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: void setRowMatrix(int,org.apache.commons.math3.linear.RealMatrix)>($i0, $r1);

        return;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }
    public void setRowVector(int, org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.linear.MatrixDimensionMismatchException
    {
        org.apache.commons.math3.linear.BlockRealMatrix r0;
        int $i0;
        org.apache.commons.math3.linear.RealVector $r1;
        java.lang.ClassCastException r2;
        double[] $r3;
        org.apache.commons.math3.linear.ArrayRealVector $r4;

        r0 := @this: org.apache.commons.math3.linear.BlockRealMatrix;

        $i0 := @parameter0: int;

        $r1 := @parameter1: org.apache.commons.math3.linear.RealVector;

     label1:
        $r4 = (org.apache.commons.math3.linear.ArrayRealVector) $r1;

        $r3 = virtualinvoke $r4.<org.apache.commons.math3.linear.ArrayRealVector: double[] getDataRef()>();

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: void setRow(int,double[])>($i0, $r3);

     label2:
        return;

     label3:
        r2 := @caughtexception;

        specialinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: void setRowVector(int,org.apache.commons.math3.linear.RealVector)>($i0, $r1);

        return;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }
    public void setSubMatrix(double[][], int, int) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.BlockRealMatrix r0;
        double[][] $r1, $r6;
        int $i0, $i1, i2, i3, i4, i5, i6, i7, i8, i9, $i10, i11, $i12, $i13, i14, $i15, $i16, $i17, $i18, $i19;
        double[] r2, $r7;
        org.apache.commons.math3.exception.NoDataException $r3;
        org.apache.commons.math3.exception.util.LocalizedFormats $r4;
        org.apache.commons.math3.exception.DimensionMismatchException $r5;

        r0 := @this: org.apache.commons.math3.linear.BlockRealMatrix;

        $r1 := @parameter0: double[][];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>($r1);

        r2 = $r1[0];

        i3 = lengthof r2;

        if i3 != 0 goto label01;

        $r3 = new org.apache.commons.math3.exception.NoDataException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats AT_LEAST_ONE_COLUMN>;

        specialinvoke $r3.<org.apache.commons.math3.exception.NoDataException: void <init>(org.apache.commons.math3.exception.util.Localizable)>($r4);

        throw $r3;

     label01:
        i7 = lengthof $r1;

        i7 = i7 + $i0;

        i7 = i7 + -1;

        i6 = $i1 + i3;

        i6 = i6 + -1;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)>(r0, $i0, i7, $i1, i6);

        i4 = lengthof $r1;

        i2 = 0;

     label02:
        if i2 >= i4 goto label04;

        r2 = $r1[i2];

        i5 = lengthof r2;

        if i5 == i3 goto label03;

        $r5 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i0 = lengthof r2;

        specialinvoke $r5.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>(i3, $i0);

        throw $r5;

     label03:
        i2 = i2 + 1;

        goto label02;

     label04:
        i3 = i7 + 52;

        i3 = i3 / 52;

        i4 = $i1 / 52;

        i2 = i6 + 52;

        i2 = i2 / 52;

        i11 = $i0 / 52;

     label05:
        if i11 >= i3 goto label10;

        $i12 = specialinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockHeight(int)>(i11);

        i5 = i11 * 52;

        $i13 = staticinvoke <org.apache.commons.math3.util.FastMath: int max(int,int)>($i0, i5);

        i8 = i7 + 1;

        $i12 = i5 + $i12;

        $i12 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>(i8, $i12);

        i14 = i4;

     label06:
        if i14 >= i2 goto label09;

        $i15 = specialinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockWidth(int)>(i14);

        i8 = i14 * 52;

        $i16 = staticinvoke <org.apache.commons.math3.util.FastMath: int max(int,int)>($i1, i8);

        i9 = i6 + 1;

        $i17 = i8 + $i15;

        i9 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>(i9, $i17);

        i9 = i9 - $i16;

        $r6 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        $i17 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockColumns>;

        $i17 = $i17 * i11;

        $i17 = $i17 + i14;

        r2 = $r6[$i17];

        $i17 = $i13;

     label07:
        if $i17 >= $i12 goto label08;

        $i18 = $i17 - $i0;

        $r7 = $r1[$i18];

        $i18 = $i16 - $i1;

        $i10 = $i17 - i5;

        $i19 = $i10 * $i15;

        $i10 = $i16 - i8;

        $i10 = $i19 + $i10;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, $i18, r2, $i10, i9);

        $i17 = $i17 + 1;

        goto label07;

     label08:
        i14 = i14 + 1;

        goto label06;

     label09:
        i11 = i11 + 1;

        goto label05;

     label10:
        return;
    }
    public org.apache.commons.math3.linear.BlockRealMatrix subtract(org.apache.commons.math3.linear.BlockRealMatrix) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException
    {
        org.apache.commons.math3.linear.BlockRealMatrix r0, $r1, r3;
        double[] r2, r4, r5;
        int $i0, $i1, $i2;
        double $d0, $d1;
        double[][] $r6;

        r0 := @this: org.apache.commons.math3.linear.BlockRealMatrix;

        $r1 := @parameter0: org.apache.commons.math3.linear.BlockRealMatrix;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkSubtractionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)>(r0, $r1);

        r3 = new org.apache.commons.math3.linear.BlockRealMatrix;

        $i1 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int rows>;

        $i0 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int columns>;

        specialinvoke r3.<org.apache.commons.math3.linear.BlockRealMatrix: void <init>(int,int)>($i1, $i0);

        $i0 = 0;

     label1:
        $r6 = r3.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        $i1 = lengthof $r6;

        if $i0 >= $i1 goto label4;

        $r6 = r3.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        r4 = $r6[$i0];

        $r6 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        r5 = $r6[$i0];

        $r6 = $r1.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        r2 = $r6[$i0];

        $i1 = 0;

     label2:
        $i2 = lengthof r4;

        if $i1 >= $i2 goto label3;

        $d1 = r5[$i1];

        $d0 = r2[$i1];

        $d0 = $d1 - $d0;

        r4[$i1] = $d0;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $i0 = $i0 + 1;

        goto label1;

     label4:
        return r3;
    }
    public org.apache.commons.math3.linear.BlockRealMatrix subtract(org.apache.commons.math3.linear.RealMatrix) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException
    {
        org.apache.commons.math3.linear.BlockRealMatrix r0, $r5;
        org.apache.commons.math3.linear.RealMatrix $r1;
        java.lang.ClassCastException r2;
        double[] r3, r4;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, i8;
        double[][] $r6;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.linear.BlockRealMatrix;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

     label01:
        $r5 = (org.apache.commons.math3.linear.BlockRealMatrix) $r1;

        $r5 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: org.apache.commons.math3.linear.BlockRealMatrix subtract(org.apache.commons.math3.linear.BlockRealMatrix)>($r5);

     label02:
        return $r5;

     label03:
        r2 := @caughtexception;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkSubtractionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)>(r0, $r1);

        $r5 = new org.apache.commons.math3.linear.BlockRealMatrix;

        $i2 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int rows>;

        $i3 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int columns>;

        specialinvoke $r5.<org.apache.commons.math3.linear.BlockRealMatrix: void <init>(int,int)>($i2, $i3);

        $i2 = 0;

        $i3 = 0;

     label04:
        $i4 = $r5.<org.apache.commons.math3.linear.BlockRealMatrix: int blockRows>;

        if $i3 >= $i4 goto label11;

        $i4 = 0;

     label05:
        i0 = $r5.<org.apache.commons.math3.linear.BlockRealMatrix: int blockColumns>;

        if $i4 >= i0 goto label10;

        $r6 = $r5.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        r3 = $r6[$i2];

        $r6 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        r4 = $r6[$i2];

        i0 = $i3 * 52;

        i1 = i0 + 52;

        $i5 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int rows>;

        $i5 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>(i1, $i5);

        i1 = $i4 * 52;

        $i6 = i1 + 52;

        $i7 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int columns>;

        $i6 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i6, $i7);

        $i7 = 0;

     label06:
        if i0 >= $i5 goto label09;

        i8 = i1;

     label07:
        if i8 >= $i6 goto label08;

        $d0 = r4[$i7];

        $d1 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>(i0, i8);

        $d0 = $d0 - $d1;

        r3[$i7] = $d0;

        $i7 = $i7 + 1;

        i8 = i8 + 1;

        goto label07;

     label08:
        i0 = i0 + 1;

        goto label06;

     label09:
        $i2 = $i2 + 1;

        $i4 = $i4 + 1;

        goto label05;

     label10:
        $i3 = $i3 + 1;

        goto label04;

     label11:
        return $r5;

        catch java.lang.ClassCastException from label01 to label02 with label03;
    }
    public volatile org.apache.commons.math3.linear.RealMatrix subtract(org.apache.commons.math3.linear.RealMatrix) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException
    {
        org.apache.commons.math3.linear.BlockRealMatrix r0;
        org.apache.commons.math3.linear.RealMatrix $r1;

        r0 := @this: org.apache.commons.math3.linear.BlockRealMatrix;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        r0 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: org.apache.commons.math3.linear.BlockRealMatrix subtract(org.apache.commons.math3.linear.RealMatrix)>($r1);

        return r0;
    }
    public org.apache.commons.math3.linear.BlockRealMatrix transpose()
    {
        org.apache.commons.math3.linear.BlockRealMatrix r0, r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10, i11;
        double[] r2, r3;
        double[][] $r4;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.BlockRealMatrix;

        $i3 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: int getRowDimension()>();

        $i4 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: int getColumnDimension()>();

        r1 = new org.apache.commons.math3.linear.BlockRealMatrix;

        specialinvoke r1.<org.apache.commons.math3.linear.BlockRealMatrix: void <init>(int,int)>($i4, $i3);

        $i3 = 0;

        $i4 = 0;

     label1:
        $i5 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockColumns>;

        if $i4 >= $i5 goto label8;

        $i5 = 0;

     label2:
        i1 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockRows>;

        if $i5 >= i1 goto label7;

        $r4 = r1.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        r2 = $r4[$i3];

        $r4 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        i1 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockColumns>;

        i1 = i1 * $i5;

        i1 = i1 + $i4;

        r3 = $r4[i1];

        i1 = $i4 * 52;

        i2 = i1 + 52;

        $i6 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int columns>;

        $i6 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>(i2, $i6);

        i2 = $i5 * 52;

        i0 = i2 + 52;

        $i7 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int rows>;

        $i7 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>(i0, $i7);

        i8 = 0;

        i9 = i1;

     label3:
        if i9 >= $i6 goto label6;

        i0 = $i6 - i1;

        i10 = i9 - i1;

        i11 = i2;

     label4:
        if i11 >= $i7 goto label5;

        $d0 = r3[i10];

        r2[i8] = $d0;

        i8 = i8 + 1;

        i10 = i10 + i0;

        i11 = i11 + 1;

        goto label4;

     label5:
        i9 = i9 + 1;

        goto label3;

     label6:
        $i3 = $i3 + 1;

        $i5 = $i5 + 1;

        goto label2;

     label7:
        $i4 = $i4 + 1;

        goto label1;

     label8:
        return r1;
    }
    public volatile org.apache.commons.math3.linear.RealMatrix transpose()
    {
        org.apache.commons.math3.linear.BlockRealMatrix r0;

        r0 := @this: org.apache.commons.math3.linear.BlockRealMatrix;

        r0 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: org.apache.commons.math3.linear.BlockRealMatrix transpose()>();

        return r0;
    }
    public double walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)
    {
        org.apache.commons.math3.linear.BlockRealMatrix r0;
        org.apache.commons.math3.linear.RealMatrixChangingVisitor $r1;
        int $i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, i8, i9;
        double[] r2;
        double[][] $r3;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.BlockRealMatrix;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealMatrixChangingVisitor;

        $i4 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int rows>;

        $i0 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int columns>;

        $i1 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int rows>;

        $i1 = $i1 + -1;

        $i2 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int columns>;

        $i2 = $i2 + -1;

        interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrixChangingVisitor: void start(int,int,int,int,int,int)>($i4, $i0, 0, $i1, 0, $i2);

        $i0 = 0;

        $i4 = 0;

     label1:
        $i1 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockRows>;

        if $i4 >= $i1 goto label8;

        $i1 = $i4 * 52;

        $i2 = $i1 + 52;

        $i5 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int rows>;

        $i2 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i2, $i5);

        $i5 = 0;

     label2:
        i3 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockColumns>;

        if $i5 >= i3 goto label7;

        i3 = $i5 * 52;

        $i6 = i3 + 52;

        $i7 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int columns>;

        $i6 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i6, $i7);

        $r3 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        r2 = $r3[$i0];

        $i7 = 0;

        i8 = $i1;

     label3:
        if i8 >= $i2 goto label6;

        i9 = i3;

     label4:
        if i9 >= $i6 goto label5;

        $d0 = r2[$i7];

        $d0 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrixChangingVisitor: double visit(int,int,double)>(i8, i9, $d0);

        r2[$i7] = $d0;

        $i7 = $i7 + 1;

        i9 = i9 + 1;

        goto label4;

     label5:
        i8 = i8 + 1;

        goto label3;

     label6:
        $i0 = $i0 + 1;

        $i5 = $i5 + 1;

        goto label2;

     label7:
        $i4 = $i4 + 1;

        goto label1;

     label8:
        $d0 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrixChangingVisitor: double end()>();

        return $d0;
    }
    public double walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor, int, int, int, int) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.linear.BlockRealMatrix r0;
        org.apache.commons.math3.linear.RealMatrixChangingVisitor $r1;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15;
        double[] r2;
        double[][] $r3;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.BlockRealMatrix;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealMatrixChangingVisitor;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)>(r0, $i0, $i1, $i2, $i3);

        i5 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int rows>;

        $i4 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int columns>;

        interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrixChangingVisitor: void start(int,int,int,int,int,int)>(i5, $i4, $i0, $i1, $i2, $i3);

        $i4 = $i0 / 52;

     label1:
        i5 = $i1 / 52;

        i5 = i5 + 1;

        if $i4 >= i5 goto label8;

        i5 = $i4 * 52;

        $i7 = staticinvoke <org.apache.commons.math3.util.FastMath: int max(int,int)>($i0, i5);

        $i8 = $i4 + 1;

        $i8 = $i8 * 52;

        $i9 = $i1 + 1;

        $i8 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i8, $i9);

        $i9 = $i2 / 52;

     label2:
        i6 = $i3 / 52;

        i6 = i6 + 1;

        if $i9 >= i6 goto label7;

        $i10 = specialinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockWidth(int)>($i9);

        i6 = $i9 * 52;

        $i11 = staticinvoke <org.apache.commons.math3.util.FastMath: int max(int,int)>($i2, i6);

        $i12 = $i9 + 1;

        $i12 = $i12 * 52;

        $i13 = $i3 + 1;

        $i12 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i12, $i13);

        $r3 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        $i13 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockColumns>;

        $i13 = $i13 * $i4;

        $i13 = $i13 + $i9;

        r2 = $r3[$i13];

        $i13 = $i7;

     label3:
        if $i13 >= $i8 goto label6;

        $i14 = $i13 - i5;

        $i14 = $i14 * $i10;

        $i14 = $i14 + $i11;

        $i14 = $i14 - i6;

        i15 = $i11;

     label4:
        if i15 >= $i12 goto label5;

        $d0 = r2[$i14];

        $d0 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrixChangingVisitor: double visit(int,int,double)>($i13, i15, $d0);

        r2[$i14] = $d0;

        $i14 = $i14 + 1;

        i15 = i15 + 1;

        goto label4;

     label5:
        $i13 = $i13 + 1;

        goto label3;

     label6:
        $i9 = $i9 + 1;

        goto label2;

     label7:
        $i4 = $i4 + 1;

        goto label1;

     label8:
        $d0 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrixChangingVisitor: double end()>();

        return $d0;
    }
    public double walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)
    {
        org.apache.commons.math3.linear.BlockRealMatrix r0;
        org.apache.commons.math3.linear.RealMatrixPreservingVisitor $r1;
        int $i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, i8, i9;
        double[] r2;
        double[][] $r3;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.BlockRealMatrix;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealMatrixPreservingVisitor;

        $i4 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int rows>;

        $i0 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int columns>;

        $i1 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int rows>;

        $i1 = $i1 + -1;

        $i2 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int columns>;

        $i2 = $i2 + -1;

        interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrixPreservingVisitor: void start(int,int,int,int,int,int)>($i4, $i0, 0, $i1, 0, $i2);

        $i0 = 0;

        $i4 = 0;

     label1:
        $i1 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockRows>;

        if $i4 >= $i1 goto label8;

        $i1 = $i4 * 52;

        $i2 = $i1 + 52;

        $i5 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int rows>;

        $i2 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i2, $i5);

        $i5 = 0;

     label2:
        i3 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockColumns>;

        if $i5 >= i3 goto label7;

        i3 = $i5 * 52;

        $i6 = i3 + 52;

        $i7 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int columns>;

        $i6 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i6, $i7);

        $r3 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        r2 = $r3[$i0];

        $i7 = 0;

        i8 = $i1;

     label3:
        if i8 >= $i2 goto label6;

        i9 = i3;

     label4:
        if i9 >= $i6 goto label5;

        $d0 = r2[$i7];

        interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrixPreservingVisitor: void visit(int,int,double)>(i8, i9, $d0);

        $i7 = $i7 + 1;

        i9 = i9 + 1;

        goto label4;

     label5:
        i8 = i8 + 1;

        goto label3;

     label6:
        $i0 = $i0 + 1;

        $i5 = $i5 + 1;

        goto label2;

     label7:
        $i4 = $i4 + 1;

        goto label1;

     label8:
        $d0 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrixPreservingVisitor: double end()>();

        return $d0;
    }
    public double walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor, int, int, int, int) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.linear.BlockRealMatrix r0;
        org.apache.commons.math3.linear.RealMatrixPreservingVisitor $r1;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15;
        double[] r2;
        double[][] $r3;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.BlockRealMatrix;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealMatrixPreservingVisitor;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)>(r0, $i0, $i1, $i2, $i3);

        i5 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int rows>;

        $i4 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int columns>;

        interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrixPreservingVisitor: void start(int,int,int,int,int,int)>(i5, $i4, $i0, $i1, $i2, $i3);

        $i4 = $i0 / 52;

     label1:
        i5 = $i1 / 52;

        i5 = i5 + 1;

        if $i4 >= i5 goto label8;

        i5 = $i4 * 52;

        $i7 = staticinvoke <org.apache.commons.math3.util.FastMath: int max(int,int)>($i0, i5);

        $i8 = $i4 + 1;

        $i8 = $i8 * 52;

        $i9 = $i1 + 1;

        $i8 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i8, $i9);

        $i9 = $i2 / 52;

     label2:
        i6 = $i3 / 52;

        i6 = i6 + 1;

        if $i9 >= i6 goto label7;

        $i10 = specialinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockWidth(int)>($i9);

        i6 = $i9 * 52;

        $i11 = staticinvoke <org.apache.commons.math3.util.FastMath: int max(int,int)>($i2, i6);

        $i12 = $i9 + 1;

        $i12 = $i12 * 52;

        $i13 = $i3 + 1;

        $i12 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i12, $i13);

        $r3 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        $i13 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockColumns>;

        $i13 = $i13 * $i4;

        $i13 = $i13 + $i9;

        r2 = $r3[$i13];

        $i13 = $i7;

     label3:
        if $i13 >= $i8 goto label6;

        $i14 = $i13 - i5;

        $i14 = $i14 * $i10;

        $i14 = $i14 + $i11;

        $i14 = $i14 - i6;

        i15 = $i11;

     label4:
        if i15 >= $i12 goto label5;

        $d0 = r2[$i14];

        interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrixPreservingVisitor: void visit(int,int,double)>($i13, i15, $d0);

        $i14 = $i14 + 1;

        i15 = i15 + 1;

        goto label4;

     label5:
        $i13 = $i13 + 1;

        goto label3;

     label6:
        $i9 = $i9 + 1;

        goto label2;

     label7:
        $i4 = $i4 + 1;

        goto label1;

     label8:
        $d0 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrixPreservingVisitor: double end()>();

        return $d0;
    }
    public double walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)
    {
        org.apache.commons.math3.linear.BlockRealMatrix r0;
        org.apache.commons.math3.linear.RealMatrixChangingVisitor $r1;
        int $i0, $i1, $i2, i3, i4, i5, $i6, $i7, $i8;
        double[] r2;
        double[][] $r3;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.BlockRealMatrix;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealMatrixChangingVisitor;

        i3 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int rows>;

        $i0 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int columns>;

        $i1 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int rows>;

        $i1 = $i1 + -1;

        $i2 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int columns>;

        $i2 = $i2 + -1;

        interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrixChangingVisitor: void start(int,int,int,int,int,int)>(i3, $i0, 0, $i1, 0, $i2);

        $i0 = 0;

     label1:
        i3 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockRows>;

        if $i0 >= i3 goto label8;

        i3 = $i0 * 52;

        $i1 = i3 + 52;

        $i2 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int rows>;

        $i1 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i1, $i2);

        $i2 = i3;

     label2:
        if $i2 >= $i1 goto label7;

        i5 = 0;

     label3:
        i4 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockColumns>;

        if i5 >= i4 goto label6;

        $i6 = specialinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockWidth(int)>(i5);

        i4 = i5 * 52;

        $i7 = i4 + 52;

        $i8 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int columns>;

        $i7 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i7, $i8);

        $r3 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        $i8 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockColumns>;

        $i8 = $i8 * $i0;

        $i8 = $i8 + i5;

        r2 = $r3[$i8];

        $i8 = $i2 - i3;

        $i6 = $i8 * $i6;

     label4:
        if i4 >= $i7 goto label5;

        $d0 = r2[$i6];

        $d0 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrixChangingVisitor: double visit(int,int,double)>($i2, i4, $d0);

        r2[$i6] = $d0;

        $i6 = $i6 + 1;

        i4 = i4 + 1;

        goto label4;

     label5:
        i5 = i5 + 1;

        goto label3;

     label6:
        $i2 = $i2 + 1;

        goto label2;

     label7:
        $i0 = $i0 + 1;

        goto label1;

     label8:
        $d0 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrixChangingVisitor: double end()>();

        return $d0;
    }
    public double walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor, int, int, int, int) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.linear.BlockRealMatrix r0;
        org.apache.commons.math3.linear.RealMatrixChangingVisitor $r1;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        double[] r2;
        double[][] $r3;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.BlockRealMatrix;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealMatrixChangingVisitor;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)>(r0, $i0, $i1, $i2, $i3);

        i5 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int rows>;

        $i4 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int columns>;

        interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrixChangingVisitor: void start(int,int,int,int,int,int)>(i5, $i4, $i0, $i1, $i2, $i3);

        $i4 = $i0 / 52;

     label1:
        i5 = $i1 / 52;

        i5 = i5 + 1;

        if $i4 >= i5 goto label8;

        i5 = $i4 * 52;

        $i7 = staticinvoke <org.apache.commons.math3.util.FastMath: int max(int,int)>($i0, i5);

        $i8 = $i4 + 1;

        $i8 = $i8 * 52;

        $i9 = $i1 + 1;

        $i8 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i8, $i9);

     label2:
        if $i7 >= $i8 goto label7;

        $i9 = $i2 / 52;

     label3:
        $i10 = $i3 / 52;

        $i10 = $i10 + 1;

        if $i9 >= $i10 goto label6;

        $i11 = specialinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockWidth(int)>($i9);

        i6 = $i9 * 52;

        $i10 = staticinvoke <org.apache.commons.math3.util.FastMath: int max(int,int)>($i2, i6);

        $i12 = $i9 + 1;

        $i12 = $i12 * 52;

        $i13 = $i3 + 1;

        $i12 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i12, $i13);

        $r3 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        $i13 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockColumns>;

        $i13 = $i13 * $i4;

        $i13 = $i13 + $i9;

        r2 = $r3[$i13];

        $i13 = $i7 - i5;

        $i11 = $i13 * $i11;

        $i11 = $i11 + $i10;

        i6 = $i11 - i6;

     label4:
        if $i10 >= $i12 goto label5;

        $d0 = r2[i6];

        $d0 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrixChangingVisitor: double visit(int,int,double)>($i7, $i10, $d0);

        r2[i6] = $d0;

        i6 = i6 + 1;

        $i10 = $i10 + 1;

        goto label4;

     label5:
        $i9 = $i9 + 1;

        goto label3;

     label6:
        $i7 = $i7 + 1;

        goto label2;

     label7:
        $i4 = $i4 + 1;

        goto label1;

     label8:
        $d0 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrixChangingVisitor: double end()>();

        return $d0;
    }
    public double walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)
    {
        org.apache.commons.math3.linear.BlockRealMatrix r0;
        org.apache.commons.math3.linear.RealMatrixPreservingVisitor $r1;
        int $i0, $i1, $i2, i3, i4, i5, $i6, $i7, $i8;
        double[] r2;
        double[][] $r3;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.BlockRealMatrix;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealMatrixPreservingVisitor;

        i3 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int rows>;

        $i0 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int columns>;

        $i1 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int rows>;

        $i1 = $i1 + -1;

        $i2 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int columns>;

        $i2 = $i2 + -1;

        interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrixPreservingVisitor: void start(int,int,int,int,int,int)>(i3, $i0, 0, $i1, 0, $i2);

        $i0 = 0;

     label1:
        i3 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockRows>;

        if $i0 >= i3 goto label8;

        i3 = $i0 * 52;

        $i1 = i3 + 52;

        $i2 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int rows>;

        $i1 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i1, $i2);

        $i2 = i3;

     label2:
        if $i2 >= $i1 goto label7;

        i5 = 0;

     label3:
        i4 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockColumns>;

        if i5 >= i4 goto label6;

        $i6 = specialinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockWidth(int)>(i5);

        i4 = i5 * 52;

        $i7 = i4 + 52;

        $i8 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int columns>;

        $i7 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i7, $i8);

        $r3 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        $i8 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockColumns>;

        $i8 = $i8 * $i0;

        $i8 = $i8 + i5;

        r2 = $r3[$i8];

        $i8 = $i2 - i3;

        $i6 = $i8 * $i6;

     label4:
        if i4 >= $i7 goto label5;

        $d0 = r2[$i6];

        interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrixPreservingVisitor: void visit(int,int,double)>($i2, i4, $d0);

        $i6 = $i6 + 1;

        i4 = i4 + 1;

        goto label4;

     label5:
        i5 = i5 + 1;

        goto label3;

     label6:
        $i2 = $i2 + 1;

        goto label2;

     label7:
        $i0 = $i0 + 1;

        goto label1;

     label8:
        $d0 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrixPreservingVisitor: double end()>();

        return $d0;
    }
    public double walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor, int, int, int, int) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.linear.BlockRealMatrix r0;
        org.apache.commons.math3.linear.RealMatrixPreservingVisitor $r1;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        double[] r2;
        double[][] $r3;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.BlockRealMatrix;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealMatrixPreservingVisitor;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)>(r0, $i0, $i1, $i2, $i3);

        i5 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int rows>;

        $i4 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int columns>;

        interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrixPreservingVisitor: void start(int,int,int,int,int,int)>(i5, $i4, $i0, $i1, $i2, $i3);

        $i4 = $i0 / 52;

     label1:
        i5 = $i1 / 52;

        i5 = i5 + 1;

        if $i4 >= i5 goto label8;

        i5 = $i4 * 52;

        $i7 = staticinvoke <org.apache.commons.math3.util.FastMath: int max(int,int)>($i0, i5);

        $i8 = $i4 + 1;

        $i8 = $i8 * 52;

        $i9 = $i1 + 1;

        $i8 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i8, $i9);

     label2:
        if $i7 >= $i8 goto label7;

        $i9 = $i2 / 52;

     label3:
        $i10 = $i3 / 52;

        $i10 = $i10 + 1;

        if $i9 >= $i10 goto label6;

        $i11 = specialinvoke r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockWidth(int)>($i9);

        i6 = $i9 * 52;

        $i10 = staticinvoke <org.apache.commons.math3.util.FastMath: int max(int,int)>($i2, i6);

        $i12 = $i9 + 1;

        $i12 = $i12 * 52;

        $i13 = $i3 + 1;

        $i12 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i12, $i13);

        $r3 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: double[][] blocks>;

        $i13 = r0.<org.apache.commons.math3.linear.BlockRealMatrix: int blockColumns>;

        $i13 = $i13 * $i4;

        $i13 = $i13 + $i9;

        r2 = $r3[$i13];

        $i13 = $i7 - i5;

        $i11 = $i13 * $i11;

        $i11 = $i11 + $i10;

        i6 = $i11 - i6;

     label4:
        if $i10 >= $i12 goto label5;

        $d0 = r2[i6];

        interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrixPreservingVisitor: void visit(int,int,double)>($i7, $i10, $d0);

        i6 = i6 + 1;

        $i10 = $i10 + 1;

        goto label4;

     label5:
        $i9 = $i9 + 1;

        goto label3;

     label6:
        $i7 = $i7 + 1;

        goto label2;

     label7:
        $i4 = $i4 + 1;

        goto label1;

     label8:
        $d0 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrixPreservingVisitor: double end()>();

        return $d0;
    }
