org.apache.commons.math3.linear.QRDecomposition$Solver extends java.lang.Object implements org.apache.commons.math3.linear.DecompositionSolver
private final double[][] qrt
private final double[] rDiag
private final double threshold
    private void <init>(double[][], double[], double)
    {
        org.apache.commons.math3.linear.QRDecomposition$Solver r0;
        double[][] $r1;
        double[] $r2;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.QRDecomposition$Solver;

        $r1 := @parameter0: double[][];

        $r2 := @parameter1: double[];

        $d0 := @parameter2: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.linear.QRDecomposition$Solver: double[][] qrt> = $r1;

        r0.<org.apache.commons.math3.linear.QRDecomposition$Solver: double[] rDiag> = $r2;

        r0.<org.apache.commons.math3.linear.QRDecomposition$Solver: double threshold> = $d0;

        return;
    }
    void <init>(double[][], double[], double, org.apache.commons.math3.linear.QRDecomposition$1)
    {
        org.apache.commons.math3.linear.QRDecomposition$Solver r0;
        double[][] $r1;
        double[] $r2;
        double $d0;
        org.apache.commons.math3.linear.QRDecomposition$1 $r3;

        r0 := @this: org.apache.commons.math3.linear.QRDecomposition$Solver;

        $r1 := @parameter0: double[][];

        $r2 := @parameter1: double[];

        $d0 := @parameter2: double;

        $r3 := @parameter3: org.apache.commons.math3.linear.QRDecomposition$1;

        specialinvoke r0.<org.apache.commons.math3.linear.QRDecomposition$Solver: void <init>(double[][],double[],double)>($r1, $r2, $d0);

        return;
    }
    public org.apache.commons.math3.linear.RealMatrix getInverse()
    {
        org.apache.commons.math3.linear.QRDecomposition$Solver r0;
        double[][] $r1;
        double[] $r2;
        int $i0;
        org.apache.commons.math3.linear.RealMatrix $r3;

        r0 := @this: org.apache.commons.math3.linear.QRDecomposition$Solver;

        $r1 = r0.<org.apache.commons.math3.linear.QRDecomposition$Solver: double[][] qrt>;

        $r2 = $r1[0];

        $i0 = lengthof $r2;

        $r3 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix createRealIdentityMatrix(int)>($i0);

        $r3 = virtualinvoke r0.<org.apache.commons.math3.linear.QRDecomposition$Solver: org.apache.commons.math3.linear.RealMatrix solve(org.apache.commons.math3.linear.RealMatrix)>($r3);

        return $r3;
    }
    public boolean isNonSingular()
    {
        org.apache.commons.math3.linear.QRDecomposition$Solver r0;
        double[] r1;
        double d0, $d1;
        int i0, i1;
        byte $b2;

        r0 := @this: org.apache.commons.math3.linear.QRDecomposition$Solver;

        r1 = r0.<org.apache.commons.math3.linear.QRDecomposition$Solver: double[] rDiag>;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        d0 = r1[i1];

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d0);

        d0 = r0.<org.apache.commons.math3.linear.QRDecomposition$Solver: double threshold>;

        $b2 = $d1 cmpg d0;

        if $b2 > 0 goto label2;

        return 0;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 1;
    }
    public org.apache.commons.math3.linear.RealMatrix solve(org.apache.commons.math3.linear.RealMatrix)
    {
        org.apache.commons.math3.linear.QRDecomposition$Solver r0;
        org.apache.commons.math3.linear.RealMatrix $r1;
        int i0, $i1, i2, i3, i4, $i5, $i6, $i7, $i8;
        double[] r2, r3, r4, r5;
        double d0, $d1, $d2, $d3;
        double[][] $r6, r12, $r13;
        org.apache.commons.math3.exception.DimensionMismatchException $r7;
        boolean $z0;
        org.apache.commons.math3.linear.SingularMatrixException $r8;
        int[] $r9;
        java.lang.Class $r10;
        java.lang.Object $r11;
        org.apache.commons.math3.linear.BlockRealMatrix $r14;

        r0 := @this: org.apache.commons.math3.linear.QRDecomposition$Solver;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        $r6 = r0.<org.apache.commons.math3.linear.QRDecomposition$Solver: double[][] qrt>;

        $i5 = lengthof $r6;

        $r6 = r0.<org.apache.commons.math3.linear.QRDecomposition$Solver: double[][] qrt>;

        r2 = $r6[0];

        $i6 = lengthof r2;

        $i7 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        if $i7 == $i6 goto label01;

        $r7 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i5 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        specialinvoke $r7.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i5, $i6);

        throw $r7;

     label01:
        $z0 = virtualinvoke r0.<org.apache.commons.math3.linear.QRDecomposition$Solver: boolean isNonSingular()>();

        if $z0 != 0 goto label02;

        $r8 = new org.apache.commons.math3.linear.SingularMatrixException;

        specialinvoke $r8.<org.apache.commons.math3.linear.SingularMatrixException: void <init>()>();

        throw $r8;

     label02:
        $i7 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        i2 = $i7 + 52;

        i2 = i2 + -1;

        i2 = i2 / 52;

        $r6 = staticinvoke <org.apache.commons.math3.linear.BlockRealMatrix: double[][] createBlocksLayout(int,int)>($i5, $i7);

        $i8 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $r9 = newarray (int)[2];

        $r9[0] = $i8;

        $r9[1] = 52;

        $r10 = <java.lang.Double: java.lang.Class TYPE>;

        $r11 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r10, $r9);

        r12 = (double[][]) $r11;

        r2 = newarray (double)[52];

        $i8 = 0;

     label03:
        if $i8 >= i2 goto label24;

        i0 = $i8 * 52;

        i4 = i0 + 52;

        $i1 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>(i4, $i7);

        i4 = $i1 - i0;

        i3 = $i6 + -1;

        $i1 = $i1 + -1;

        interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: void copySubMatrix(int,int,int,int,double[][])>(0, i3, i0, $i1, r12);

        i0 = 0;

     label04:
        i3 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i6, $i5);

        if i0 >= i3 goto label15;

        $r13 = r0.<org.apache.commons.math3.linear.QRDecomposition$Solver: double[][] qrt>;

        r4 = $r13[i0];

        r3 = r0.<org.apache.commons.math3.linear.QRDecomposition$Solver: double[] rDiag>;

        $d1 = r3[i0];

        d0 = r4[i0];

        d0 = $d1 * d0;

        d0 = 1.0 / d0;

        staticinvoke <java.util.Arrays: void fill(double[],int,int,double)>(r2, 0, i4, 0.0);

        i3 = i0;

     label05:
        if i3 >= $i6 goto label08;

        $d1 = r4[i3];

        r3 = r12[i3];

        $i1 = 0;

     label06:
        if $i1 >= i4 goto label07;

        $d2 = r2[$i1];

        $d3 = r3[$i1];

        $d3 = $d3 * $d1;

        $d2 = $d2 + $d3;

        r2[$i1] = $d2;

        $i1 = $i1 + 1;

        goto label06;

     label07:
        i3 = i3 + 1;

        goto label05;

     label08:
        i3 = 0;

     label09:
        if i3 >= i4 goto label10;

        $d1 = r2[i3];

        $d1 = $d1 * d0;

        r2[i3] = $d1;

        i3 = i3 + 1;

        goto label09;

     label10:
        i3 = i0;

     label11:
        if i3 >= $i6 goto label14;

        d0 = r4[i3];

        r3 = r12[i3];

        $i1 = 0;

     label12:
        if $i1 >= i4 goto label13;

        $d1 = r3[$i1];

        $d2 = r2[$i1];

        $d2 = $d2 * d0;

        $d1 = $d1 + $d2;

        r3[$i1] = $d1;

        $i1 = $i1 + 1;

        goto label12;

     label13:
        i3 = i3 + 1;

        goto label11;

     label14:
        i0 = i0 + 1;

        goto label04;

     label15:
        r4 = r0.<org.apache.commons.math3.linear.QRDecomposition$Solver: double[] rDiag>;

        i0 = lengthof r4;

        i0 = i0 + -1;

     label16:
        if i0 < 0 goto label23;

        $i1 = i0 / 52;

        i3 = $i1 * 52;

        r4 = r0.<org.apache.commons.math3.linear.QRDecomposition$Solver: double[] rDiag>;

        d0 = r4[i0];

        d0 = 1.0 / d0;

        r4 = r12[i0];

        $i1 = $i1 * i2;

        $i1 = $i1 + $i8;

        r3 = $r6[$i1];

        i3 = i0 - i3;

        $i1 = i3 * i4;

        i3 = 0;

     label17:
        if i3 >= i4 goto label18;

        $d1 = r4[i3];

        $d1 = $d1 * d0;

        r4[i3] = $d1;

        $d1 = r4[i3];

        r3[$i1] = $d1;

        i3 = i3 + 1;

        $i1 = $i1 + 1;

        goto label17;

     label18:
        $r13 = r0.<org.apache.commons.math3.linear.QRDecomposition$Solver: double[][] qrt>;

        r3 = $r13[i0];

        i3 = 0;

     label19:
        if i3 >= i0 goto label22;

        d0 = r3[i3];

        r5 = r12[i3];

        $i1 = 0;

     label20:
        if $i1 >= i4 goto label21;

        $d1 = r5[$i1];

        $d2 = r4[$i1];

        $d2 = $d2 * d0;

        $d1 = $d1 - $d2;

        r5[$i1] = $d1;

        $i1 = $i1 + 1;

        goto label20;

     label21:
        i3 = i3 + 1;

        goto label19;

     label22:
        i0 = i0 + -1;

        goto label16;

     label23:
        $i8 = $i8 + 1;

        goto label03;

     label24:
        $r14 = new org.apache.commons.math3.linear.BlockRealMatrix;

        specialinvoke $r14.<org.apache.commons.math3.linear.BlockRealMatrix: void <init>(int,int,double[][],boolean)>($i5, $i7, $r6, 0);

        return $r14;
    }
    public org.apache.commons.math3.linear.RealVector solve(org.apache.commons.math3.linear.RealVector)
    {
        org.apache.commons.math3.linear.QRDecomposition$Solver r0;
        org.apache.commons.math3.linear.RealVector $r1;
        int i0, i1, $i2, $i3;
        double[] r2, r3, $r7, $r8;
        double d0, $d1, $d2;
        double[][] $r4;
        org.apache.commons.math3.exception.DimensionMismatchException $r5;
        boolean $z0;
        org.apache.commons.math3.linear.SingularMatrixException $r6;
        org.apache.commons.math3.linear.ArrayRealVector $r9;

        r0 := @this: org.apache.commons.math3.linear.QRDecomposition$Solver;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealVector;

        $r4 = r0.<org.apache.commons.math3.linear.QRDecomposition$Solver: double[][] qrt>;

        i1 = lengthof $r4;

        $r4 = r0.<org.apache.commons.math3.linear.QRDecomposition$Solver: double[][] qrt>;

        r3 = $r4[0];

        i0 = lengthof r3;

        $i2 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        if $i2 == i0 goto label01;

        $r5 = new org.apache.commons.math3.exception.DimensionMismatchException;

        i1 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        specialinvoke $r5.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>(i1, i0);

        throw $r5;

     label01:
        $z0 = virtualinvoke r0.<org.apache.commons.math3.linear.QRDecomposition$Solver: boolean isNonSingular()>();

        if $z0 != 0 goto label02;

        $r6 = new org.apache.commons.math3.linear.SingularMatrixException;

        specialinvoke $r6.<org.apache.commons.math3.linear.SingularMatrixException: void <init>()>();

        throw $r6;

     label02:
        r3 = newarray (double)[i1];

        $r7 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: double[] toArray()>();

        $i2 = 0;

     label03:
        $i3 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>(i0, i1);

        if $i2 >= $i3 goto label08;

        $r4 = r0.<org.apache.commons.math3.linear.QRDecomposition$Solver: double[][] qrt>;

        r2 = $r4[$i2];

        d0 = 0.0;

        $i3 = $i2;

     label04:
        if $i3 >= i0 goto label05;

        $d1 = $r7[$i3];

        $d2 = r2[$i3];

        $d1 = $d1 * $d2;

        d0 = d0 + $d1;

        $i3 = $i3 + 1;

        goto label04;

     label05:
        $r8 = r0.<org.apache.commons.math3.linear.QRDecomposition$Solver: double[] rDiag>;

        $d1 = $r8[$i2];

        $d2 = r2[$i2];

        $d1 = $d1 * $d2;

        d0 = d0 / $d1;

        $i3 = $i2;

     label06:
        if $i3 >= i0 goto label07;

        $d1 = $r7[$i3];

        $d2 = r2[$i3];

        $d2 = $d2 * d0;

        $d1 = $d1 + $d2;

        $r7[$i3] = $d1;

        $i3 = $i3 + 1;

        goto label06;

     label07:
        $i2 = $i2 + 1;

        goto label03;

     label08:
        r2 = r0.<org.apache.commons.math3.linear.QRDecomposition$Solver: double[] rDiag>;

        i0 = lengthof r2;

        i0 = i0 + -1;

     label09:
        if i0 < 0 goto label12;

        d0 = $r7[i0];

        r2 = r0.<org.apache.commons.math3.linear.QRDecomposition$Solver: double[] rDiag>;

        $d1 = r2[i0];

        d0 = d0 / $d1;

        $r7[i0] = d0;

        d0 = $r7[i0];

        $r4 = r0.<org.apache.commons.math3.linear.QRDecomposition$Solver: double[][] qrt>;

        r2 = $r4[i0];

        r3[i0] = d0;

        i1 = 0;

     label10:
        if i1 >= i0 goto label11;

        $d1 = $r7[i1];

        $d2 = r2[i1];

        $d2 = $d2 * d0;

        $d1 = $d1 - $d2;

        $r7[i1] = $d1;

        i1 = i1 + 1;

        goto label10;

     label11:
        i0 = i0 + -1;

        goto label09;

     label12:
        $r9 = new org.apache.commons.math3.linear.ArrayRealVector;

        specialinvoke $r9.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(double[],boolean)>(r3, 0);

        return $r9;
    }
