org.apache.commons.math3.linear.BiDiagonalTransformer extends java.lang.Object
private org.apache.commons.math3.linear.RealMatrix cachedB
private org.apache.commons.math3.linear.RealMatrix cachedU
private org.apache.commons.math3.linear.RealMatrix cachedV
private final double[][] householderVectors
private final double[] main
private final double[] secondary
    void <init>(org.apache.commons.math3.linear.RealMatrix)
    {
        org.apache.commons.math3.linear.BiDiagonalTransformer r0;
        org.apache.commons.math3.linear.RealMatrix $r1;
        int $i0, $i1, $i2;
        double[][] $r2;
        double[] $r3;

        r0 := @this: org.apache.commons.math3.linear.BiDiagonalTransformer;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $i1 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        $i2 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i0, $i1);

        $r2 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: double[][] getData()>();

        r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[][] householderVectors> = $r2;

        $r3 = newarray (double)[$i2];

        r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[] main> = $r3;

        $i2 = $i2 + -1;

        $r3 = newarray (double)[$i2];

        r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[] secondary> = $r3;

        r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: org.apache.commons.math3.linear.RealMatrix cachedU> = null;

        r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: org.apache.commons.math3.linear.RealMatrix cachedB> = null;

        r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: org.apache.commons.math3.linear.RealMatrix cachedV> = null;

        if $i0 < $i1 goto label1;

        specialinvoke r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: void transformToUpperBiDiagonal()>();

        return;

     label1:
        specialinvoke r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: void transformToLowerBiDiagonal()>();

        return;
    }
    private void transformToLowerBiDiagonal()
    {
        org.apache.commons.math3.linear.BiDiagonalTransformer r0;
        double[] r1, $r3, $r4;
        double[][] $r2;
        int $i0, $i1, i2, i3, i5;
        double d0, d1, $d2, $d3;
        byte $b4;

        r0 := @this: org.apache.commons.math3.linear.BiDiagonalTransformer;

        $r2 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[][] householderVectors>;

        $i0 = lengthof $r2;

        $r2 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[][] householderVectors>;

        r1 = $r2[0];

        $i1 = lengthof r1;

        i2 = 0;

     label01:
        if i2 >= $i0 goto label22;

        $r2 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[][] householderVectors>;

        r1 = $r2[i2];

        d0 = 0.0;

        i3 = i2;

     label02:
        if i3 >= $i1 goto label03;

        d1 = r1[i3];

        d1 = d1 * d1;

        d0 = d0 + d1;

        i3 = i3 + 1;

        goto label02;

     label03:
        d1 = r1[i2];

        $b4 = d1 cmpl 0.0;

        if $b4 <= 0 goto label07;

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d0);

        d0 = neg d0;

     label04:
        $r3 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[] main>;

        $r3[i2] = d0;

        $b4 = d0 cmpl 0.0;

        if $b4 == 0 goto label11;

        d1 = r1[i2];

        d1 = d1 - d0;

        r1[i2] = d1;

        i3 = i2 + 1;

     label05:
        if i3 >= $i0 goto label11;

        $r2 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[][] householderVectors>;

        $r3 = $r2[i3];

        d1 = 0.0;

        i5 = i2;

     label06:
        if i5 >= $i1 goto label08;

        $d2 = $r3[i5];

        $d3 = r1[i5];

        $d2 = $d2 * $d3;

        d1 = d1 - $d2;

        i5 = i5 + 1;

        goto label06;

     label07:
        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d0);

        goto label04;

     label08:
        $r2 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[][] householderVectors>;

        $r4 = $r2[i2];

        $d2 = $r4[i2];

        $d2 = $d2 * d0;

        d1 = d1 / $d2;

        i5 = i2;

     label09:
        if i5 >= $i1 goto label10;

        $d2 = $r3[i5];

        $d3 = r1[i5];

        $d3 = $d3 * d1;

        $d2 = $d2 - $d3;

        $r3[i5] = $d2;

        i5 = i5 + 1;

        goto label09;

     label10:
        i3 = i3 + 1;

        goto label05;

     label11:
        i3 = $i0 + -1;

        if i2 >= i3 goto label21;

        $r2 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[][] householderVectors>;

        i3 = i2 + 1;

        r1 = $r2[i3];

        d0 = 0.0;

        i3 = i2 + 1;

     label12:
        if i3 >= $i0 goto label13;

        $r2 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[][] householderVectors>;

        $r3 = $r2[i3];

        d1 = $r3[i2];

        d1 = d1 * d1;

        d0 = d0 + d1;

        i3 = i3 + 1;

        goto label12;

     label13:
        d1 = r1[i2];

        $b4 = d1 cmpl 0.0;

        if $b4 <= 0 goto label17;

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d0);

        d0 = neg d0;

     label14:
        $r3 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[] secondary>;

        $r3[i2] = d0;

        $b4 = d0 cmpl 0.0;

        if $b4 == 0 goto label21;

        d1 = r1[i2];

        d1 = d1 - d0;

        r1[i2] = d1;

        i3 = i2 + 1;

     label15:
        if i3 >= $i1 goto label21;

        d1 = 0.0;

        i5 = i2 + 1;

     label16:
        if i5 >= $i0 goto label18;

        $r2 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[][] householderVectors>;

        $r3 = $r2[i5];

        $d2 = $r3[i3];

        $d3 = $r3[i2];

        $d2 = $d2 * $d3;

        d1 = d1 - $d2;

        i5 = i5 + 1;

        goto label16;

     label17:
        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d0);

        goto label14;

     label18:
        $d2 = r1[i2];

        $d2 = $d2 * d0;

        d1 = d1 / $d2;

        i5 = i2 + 1;

     label19:
        if i5 >= $i0 goto label20;

        $r2 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[][] householderVectors>;

        $r3 = $r2[i5];

        $d2 = $r3[i3];

        $d3 = $r3[i2];

        $d3 = $d3 * d1;

        $d2 = $d2 - $d3;

        $r3[i3] = $d2;

        i5 = i5 + 1;

        goto label19;

     label20:
        i3 = i3 + 1;

        goto label15;

     label21:
        i2 = i2 + 1;

        goto label01;

     label22:
        return;
    }
    private void transformToUpperBiDiagonal()
    {
        org.apache.commons.math3.linear.BiDiagonalTransformer r0;
        double[] r1, $r3;
        double[][] $r2;
        int $i0, $i1, i2, i3, i5;
        double d0, d1, $d2, $d3;
        byte $b4;

        r0 := @this: org.apache.commons.math3.linear.BiDiagonalTransformer;

        $r2 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[][] householderVectors>;

        $i0 = lengthof $r2;

        $r2 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[][] householderVectors>;

        r1 = $r2[0];

        $i1 = lengthof r1;

        i2 = 0;

     label01:
        if i2 >= $i1 goto label22;

        d0 = 0.0;

        i3 = i2;

     label02:
        if i3 >= $i0 goto label03;

        $r2 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[][] householderVectors>;

        r1 = $r2[i3];

        d1 = r1[i2];

        d1 = d1 * d1;

        d0 = d0 + d1;

        i3 = i3 + 1;

        goto label02;

     label03:
        $r2 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[][] householderVectors>;

        r1 = $r2[i2];

        d1 = r1[i2];

        $b4 = d1 cmpl 0.0;

        if $b4 <= 0 goto label07;

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d0);

        d0 = neg d0;

     label04:
        $r3 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[] main>;

        $r3[i2] = d0;

        $b4 = d0 cmpl 0.0;

        if $b4 == 0 goto label11;

        d1 = r1[i2];

        d1 = d1 - d0;

        r1[i2] = d1;

        i3 = i2 + 1;

     label05:
        if i3 >= $i1 goto label11;

        d1 = 0.0;

        i5 = i2;

     label06:
        if i5 >= $i0 goto label08;

        $r2 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[][] householderVectors>;

        $r3 = $r2[i5];

        $d2 = $r3[i3];

        $d3 = $r3[i2];

        $d2 = $d2 * $d3;

        d1 = d1 - $d2;

        i5 = i5 + 1;

        goto label06;

     label07:
        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d0);

        goto label04;

     label08:
        $r2 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[][] householderVectors>;

        $r3 = $r2[i2];

        $d2 = $r3[i2];

        $d2 = $d2 * d0;

        d1 = d1 / $d2;

        i5 = i2;

     label09:
        if i5 >= $i0 goto label10;

        $r2 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[][] householderVectors>;

        $r3 = $r2[i5];

        $d2 = $r3[i3];

        $d3 = $r3[i2];

        $d3 = $d3 * d1;

        $d2 = $d2 - $d3;

        $r3[i3] = $d2;

        i5 = i5 + 1;

        goto label09;

     label10:
        i3 = i3 + 1;

        goto label05;

     label11:
        i3 = $i1 + -1;

        if i2 >= i3 goto label21;

        d0 = 0.0;

        i3 = i2 + 1;

     label12:
        if i3 >= $i1 goto label13;

        d1 = r1[i3];

        d1 = d1 * d1;

        d0 = d0 + d1;

        i3 = i3 + 1;

        goto label12;

     label13:
        i3 = i2 + 1;

        d1 = r1[i3];

        $b4 = d1 cmpl 0.0;

        if $b4 <= 0 goto label17;

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d0);

        d0 = neg d0;

     label14:
        $r3 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[] secondary>;

        $r3[i2] = d0;

        $b4 = d0 cmpl 0.0;

        if $b4 == 0 goto label21;

        i3 = i2 + 1;

        d1 = r1[i3];

        d1 = d1 - d0;

        r1[i3] = d1;

        i3 = i2 + 1;

     label15:
        if i3 >= $i0 goto label21;

        $r2 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[][] householderVectors>;

        $r3 = $r2[i3];

        d1 = 0.0;

        i5 = i2 + 1;

     label16:
        if i5 >= $i1 goto label18;

        $d2 = $r3[i5];

        $d3 = r1[i5];

        $d2 = $d2 * $d3;

        d1 = d1 - $d2;

        i5 = i5 + 1;

        goto label16;

     label17:
        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d0);

        goto label14;

     label18:
        i5 = i2 + 1;

        $d2 = r1[i5];

        $d2 = $d2 * d0;

        d1 = d1 / $d2;

        i5 = i2 + 1;

     label19:
        if i5 >= $i1 goto label20;

        $d2 = $r3[i5];

        $d3 = r1[i5];

        $d3 = $d3 * d1;

        $d2 = $d2 - $d3;

        $r3[i5] = $d2;

        i5 = i5 + 1;

        goto label19;

     label20:
        i3 = i3 + 1;

        goto label15;

     label21:
        i2 = i2 + 1;

        goto label01;

     label22:
        return;
    }
    public org.apache.commons.math3.linear.RealMatrix getB()
    {
        org.apache.commons.math3.linear.BiDiagonalTransformer r0;
        int i0, i1, $i2, i3, $i4;
        org.apache.commons.math3.linear.RealMatrix $r1;
        double[][] $r2;
        double[] $r3, $r7;
        int[] $r4;
        java.lang.Class $r5;
        java.lang.Object $r6;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.BiDiagonalTransformer;

        $r1 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: org.apache.commons.math3.linear.RealMatrix cachedB>;

        if $r1 != null goto label5;

        $r2 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[][] householderVectors>;

        i0 = lengthof $r2;

        $r2 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[][] householderVectors>;

        $r3 = $r2[0];

        i1 = lengthof $r3;

        $r4 = newarray (int)[2];

        $r4[0] = i0;

        $r4[1] = i1;

        $r5 = <java.lang.Double: java.lang.Class TYPE>;

        $r6 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r5, $r4);

        $r2 = (double[][]) $r6;

        i3 = 0;

     label1:
        $r3 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[] main>;

        $i2 = lengthof $r3;

        if i3 >= $i2 goto label4;

        $r3 = $r2[i3];

        $r7 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[] main>;

        $d0 = $r7[i3];

        $r3[i3] = $d0;

        if i0 >= i1 goto label3;

        if i3 <= 0 goto label2;

        $r3 = $r2[i3];

        $i4 = i3 + -1;

        $r7 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[] secondary>;

        $i2 = i3 + -1;

        $d0 = $r7[$i2];

        $r3[$i4] = $d0;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        $r3 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[] main>;

        $i2 = lengthof $r3;

        $i2 = $i2 + -1;

        if i3 >= $i2 goto label2;

        $r3 = $r2[i3];

        $i2 = i3 + 1;

        $r7 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[] secondary>;

        $d0 = $r7[i3];

        $r3[$i2] = $d0;

        goto label2;

     label4:
        $r1 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix createRealMatrix(double[][])>($r2);

        r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: org.apache.commons.math3.linear.RealMatrix cachedB> = $r1;

     label5:
        $r1 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: org.apache.commons.math3.linear.RealMatrix cachedB>;

        return $r1;
    }
    double[][] getHouseholderVectorsRef()
    {
        org.apache.commons.math3.linear.BiDiagonalTransformer r0;
        double[][] r1;

        r0 := @this: org.apache.commons.math3.linear.BiDiagonalTransformer;

        r1 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[][] householderVectors>;

        return r1;
    }
    double[] getMainDiagonalRef()
    {
        org.apache.commons.math3.linear.BiDiagonalTransformer r0;
        double[] r1;

        r0 := @this: org.apache.commons.math3.linear.BiDiagonalTransformer;

        r1 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[] main>;

        return r1;
    }
    double[] getSecondaryDiagonalRef()
    {
        org.apache.commons.math3.linear.BiDiagonalTransformer r0;
        double[] r1;

        r0 := @this: org.apache.commons.math3.linear.BiDiagonalTransformer;

        r1 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[] secondary>;

        return r1;
    }
    public org.apache.commons.math3.linear.RealMatrix getU()
    {
        org.apache.commons.math3.linear.BiDiagonalTransformer r0;
        double[] r1, $r4, $r9, $r10;
        int i0, i1, i2, $i3, i6;
        org.apache.commons.math3.linear.RealMatrix $r2;
        double[][] $r3, $r8;
        byte b4, $b5;
        int[] $r5;
        java.lang.Class $r6;
        java.lang.Object $r7;
        double $d0, $d1, $d2, $d3;

        r0 := @this: org.apache.commons.math3.linear.BiDiagonalTransformer;

        $r2 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: org.apache.commons.math3.linear.RealMatrix cachedU>;

        if $r2 != null goto label16;

        $r3 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[][] householderVectors>;

        i0 = lengthof $r3;

        $r3 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[][] householderVectors>;

        $r4 = $r3[0];

        i1 = lengthof $r4;

        $r4 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[] main>;

        i2 = lengthof $r4;

        if i0 < i1 goto label04;

        b4 = 0;

     label01:
        if i0 < i1 goto label05;

        $r4 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[] main>;

     label02:
        $r5 = newarray (int)[2];

        $r5[0] = i0;

        $r5[1] = i0;

        $r6 = <java.lang.Double: java.lang.Class TYPE>;

        $r7 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r6, $r5);

        $r3 = (double[][]) $r7;

        i1 = i0 + -1;

     label03:
        if i1 < i2 goto label06;

        r1 = $r3[i1];

        r1[i1] = 1.0;

        i1 = i1 + -1;

        goto label03;

     label04:
        b4 = 1;

        goto label01;

     label05:
        $r4 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[] secondary>;

        goto label02;

     label06:
        i2 = i2 + -1;

     label07:
        if i2 < b4 goto label14;

        $r8 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[][] householderVectors>;

        r1 = $r8[i2];

        $r9 = $r3[i2];

        $r9[i2] = 1.0;

        i1 = i2 - b4;

        $d0 = r1[i1];

        $b5 = $d0 cmpl 0.0;

        if $b5 == 0 goto label13;

        i1 = i2;

     label08:
        if i1 >= i0 goto label13;

        $d0 = 0.0;

        i6 = i2;

     label09:
        if i6 >= i0 goto label10;

        $r9 = $r3[i6];

        $d1 = $r9[i1];

        $r8 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[][] householderVectors>;

        $r9 = $r8[i6];

        $i3 = i2 - b4;

        $d2 = $r9[$i3];

        $d1 = $d1 * $d2;

        $d0 = $d0 - $d1;

        i6 = i6 + 1;

        goto label09;

     label10:
        $i3 = i2 - b4;

        $d1 = $r4[$i3];

        $i3 = i2 - b4;

        $d2 = r1[$i3];

        $d1 = $d1 * $d2;

        $d0 = $d0 / $d1;

        $i3 = i2;

     label11:
        if $i3 >= i0 goto label12;

        $r9 = $r3[$i3];

        $d1 = $r9[i1];

        $d2 = neg $d0;

        $r8 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[][] householderVectors>;

        $r10 = $r8[$i3];

        i6 = i2 - b4;

        $d3 = $r10[i6];

        $d2 = $d2 * $d3;

        $d1 = $d1 + $d2;

        $r9[i1] = $d1;

        $i3 = $i3 + 1;

        goto label11;

     label12:
        i1 = i1 + 1;

        goto label08;

     label13:
        i2 = i2 + -1;

        goto label07;

     label14:
        if b4 <= 0 goto label15;

        $r4 = $r3[0];

        $d0 = (double) 4607182418800017408L;

        $r4[0] = $d0;

     label15:
        $r2 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix createRealMatrix(double[][])>($r3);

        r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: org.apache.commons.math3.linear.RealMatrix cachedU> = $r2;

     label16:
        $r2 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: org.apache.commons.math3.linear.RealMatrix cachedU>;

        return $r2;
    }
    public org.apache.commons.math3.linear.RealMatrix getV()
    {
        org.apache.commons.math3.linear.BiDiagonalTransformer r0;
        double[] r1, $r4, $r9;
        int i0, i1, i2, i5;
        double $d0, $d1, $d2, $d3;
        org.apache.commons.math3.linear.RealMatrix $r2;
        double[][] $r3, $r8;
        byte b3, $b4;
        int[] $r5;
        java.lang.Class $r6;
        java.lang.Object $r7;

        r0 := @this: org.apache.commons.math3.linear.BiDiagonalTransformer;

        $r2 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: org.apache.commons.math3.linear.RealMatrix cachedV>;

        if $r2 != null goto label16;

        $r3 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[][] householderVectors>;

        i0 = lengthof $r3;

        $r3 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[][] householderVectors>;

        $r4 = $r3[0];

        i1 = lengthof $r4;

        $r4 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[] main>;

        i2 = lengthof $r4;

        if i0 < i1 goto label04;

        b3 = 1;

     label01:
        if i0 < i1 goto label05;

        $r4 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[] secondary>;

     label02:
        $r5 = newarray (int)[2];

        $r5[0] = i1;

        $r5[1] = i1;

        $r6 = <java.lang.Double: java.lang.Class TYPE>;

        $r7 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r6, $r5);

        $r3 = (double[][]) $r7;

        i0 = i1 + -1;

     label03:
        if i0 < i2 goto label06;

        r1 = $r3[i0];

        r1[i0] = 1.0;

        i0 = i0 + -1;

        goto label03;

     label04:
        b3 = 0;

        goto label01;

     label05:
        $r4 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[] main>;

        goto label02;

     label06:
        i2 = i2 + -1;

     label07:
        if i2 < b3 goto label14;

        $r8 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[][] householderVectors>;

        i0 = i2 - b3;

        r1 = $r8[i0];

        $r9 = $r3[i2];

        $r9[i2] = 1.0;

        $d1 = r1[i2];

        $b4 = $d1 cmpl 0.0;

        if $b4 == 0 goto label13;

        i0 = i2;

     label08:
        if i0 >= i1 goto label13;

        $d1 = 0.0;

        i5 = i2;

     label09:
        if i5 >= i1 goto label10;

        $r9 = $r3[i5];

        $d2 = $r9[i0];

        $d0 = r1[i5];

        $d2 = $d2 * $d0;

        $d1 = $d1 - $d2;

        i5 = i5 + 1;

        goto label09;

     label10:
        i5 = i2 - b3;

        $d2 = $r4[i5];

        $d0 = r1[i2];

        $d2 = $d2 * $d0;

        $d1 = $d1 / $d2;

        i5 = i2;

     label11:
        if i5 >= i1 goto label12;

        $r9 = $r3[i5];

        $d2 = $r9[i0];

        $d3 = neg $d1;

        $d0 = r1[i5];

        $d0 = $d3 * $d0;

        $d2 = $d2 + $d0;

        $r9[i0] = $d2;

        i5 = i5 + 1;

        goto label11;

     label12:
        i0 = i0 + 1;

        goto label08;

     label13:
        i2 = i2 + -1;

        goto label07;

     label14:
        if b3 <= 0 goto label15;

        $r4 = $r3[0];

        $d1 = (double) 4607182418800017408L;

        $r4[0] = $d1;

     label15:
        $r2 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix createRealMatrix(double[][])>($r3);

        r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: org.apache.commons.math3.linear.RealMatrix cachedV> = $r2;

     label16:
        $r2 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: org.apache.commons.math3.linear.RealMatrix cachedV>;

        return $r2;
    }
    boolean isUpperBiDiagonal()
    {
        org.apache.commons.math3.linear.BiDiagonalTransformer r0;
        double[][] $r1;
        int $i0, $i1;
        double[] $r2;

        r0 := @this: org.apache.commons.math3.linear.BiDiagonalTransformer;

        $r1 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[][] householderVectors>;

        $i0 = lengthof $r1;

        $r1 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[][] householderVectors>;

        $r2 = $r1[0];

        $i1 = lengthof $r2;

        if $i0 < $i1 goto label1;

        return 1;

     label1:
        return 0;
    }
