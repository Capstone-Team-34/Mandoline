org.apache.commons.math3.linear.JacobiPreconditioner$1 extends org.apache.commons.math3.linear.RealLinearOperator
final org.apache.commons.math3.linear.JacobiPreconditioner this$0
final org.apache.commons.math3.linear.RealVector val$sqrtDiag
    void <init>(org.apache.commons.math3.linear.JacobiPreconditioner, org.apache.commons.math3.linear.RealVector)
    {
        org.apache.commons.math3.linear.JacobiPreconditioner$1 r0;
        org.apache.commons.math3.linear.JacobiPreconditioner $r1;
        org.apache.commons.math3.linear.RealVector $r2;

        r0 := @this: org.apache.commons.math3.linear.JacobiPreconditioner$1;

        $r1 := @parameter0: org.apache.commons.math3.linear.JacobiPreconditioner;

        $r2 := @parameter1: org.apache.commons.math3.linear.RealVector;

        r0.<org.apache.commons.math3.linear.JacobiPreconditioner$1: org.apache.commons.math3.linear.JacobiPreconditioner this$0> = $r1;

        r0.<org.apache.commons.math3.linear.JacobiPreconditioner$1: org.apache.commons.math3.linear.RealVector val$sqrtDiag> = $r2;

        specialinvoke r0.<org.apache.commons.math3.linear.RealLinearOperator: void <init>()>();

        return;
    }
    public int getColumnDimension()
    {
        org.apache.commons.math3.linear.JacobiPreconditioner$1 r0;
        int $i0;
        org.apache.commons.math3.linear.RealVector $r1;

        r0 := @this: org.apache.commons.math3.linear.JacobiPreconditioner$1;

        $r1 = r0.<org.apache.commons.math3.linear.JacobiPreconditioner$1: org.apache.commons.math3.linear.RealVector val$sqrtDiag>;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        return $i0;
    }
    public int getRowDimension()
    {
        org.apache.commons.math3.linear.JacobiPreconditioner$1 r0;
        int $i0;
        org.apache.commons.math3.linear.RealVector $r1;

        r0 := @this: org.apache.commons.math3.linear.JacobiPreconditioner$1;

        $r1 = r0.<org.apache.commons.math3.linear.JacobiPreconditioner$1: org.apache.commons.math3.linear.RealVector val$sqrtDiag>;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        return $i0;
    }
    public org.apache.commons.math3.linear.RealVector operate(org.apache.commons.math3.linear.RealVector)
    {
        org.apache.commons.math3.linear.JacobiPreconditioner$1 r0;
        org.apache.commons.math3.linear.RealVector $r1;
        org.apache.commons.math3.linear.ArrayRealVector $r2;
        double[] $r3, $r4;

        r0 := @this: org.apache.commons.math3.linear.JacobiPreconditioner$1;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealVector;

        $r2 = new org.apache.commons.math3.linear.ArrayRealVector;

        $r3 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: double[] toArray()>();

        $r1 = r0.<org.apache.commons.math3.linear.JacobiPreconditioner$1: org.apache.commons.math3.linear.RealVector val$sqrtDiag>;

        $r4 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: double[] toArray()>();

        $r3 = staticinvoke <org.apache.commons.math3.util.MathArrays: double[] ebeDivide(double[],double[])>($r3, $r4);

        specialinvoke $r2.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(double[],boolean)>($r3, 0);

        return $r2;
    }
