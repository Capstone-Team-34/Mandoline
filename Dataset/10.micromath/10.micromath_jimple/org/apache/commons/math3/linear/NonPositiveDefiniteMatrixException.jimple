org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException extends org.apache.commons.math3.exception.NumberIsTooSmallException
private static final long serialVersionUID
private final int index
private final double threshold
    public void <init>(double, int, double)
    {
        org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException r0;
        double $d0, $d1;
        int $i0;
        java.lang.Double $r1, $r2;
        org.apache.commons.math3.exception.util.ExceptionContext $r3;
        org.apache.commons.math3.exception.util.LocalizedFormats $r4;
        java.lang.Object[] $r5;
        java.lang.Integer $r6;

        r0 := @this: org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException;

        $d0 := @parameter0: double;

        $i0 := @parameter1: int;

        $d1 := @parameter2: double;

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        specialinvoke r0.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r1, $r2, 0);

        r0.<org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException: int index> = $i0;

        r0.<org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException: double threshold> = $d1;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException: org.apache.commons.math3.exception.util.ExceptionContext getContext()>();

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NOT_POSITIVE_DEFINITE_MATRIX>;

        $r5 = newarray (java.lang.Object)[0];

        virtualinvoke $r3.<org.apache.commons.math3.exception.util.ExceptionContext: void addMessage(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r4, $r5);

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats ARRAY_ELEMENT>;

        $r5 = newarray (java.lang.Object)[2];

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r5[0] = $r1;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r5[1] = $r6;

        virtualinvoke $r3.<org.apache.commons.math3.exception.util.ExceptionContext: void addMessage(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r4, $r5);

        return;
    }
    public int getColumn()
    {
        org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException r0;
        int i0;

        r0 := @this: org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException;

        i0 = r0.<org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException: int index>;

        return i0;
    }
    public int getRow()
    {
        org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException r0;
        int i0;

        r0 := @this: org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException;

        i0 = r0.<org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException: int index>;

        return i0;
    }
    public double getThreshold()
    {
        org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException r0;
        double d0;

        r0 := @this: org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException;

        d0 = r0.<org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException: double threshold>;

        return d0;
    }
