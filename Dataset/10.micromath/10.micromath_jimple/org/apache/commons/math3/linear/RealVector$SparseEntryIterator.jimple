org.apache.commons.math3.linear.RealVector$SparseEntryIterator extends java.lang.Object implements java.util.Iterator
private org.apache.commons.math3.linear.RealVector$Entry current
private final int dim
private org.apache.commons.math3.linear.RealVector$Entry next
final org.apache.commons.math3.linear.RealVector this$0
    protected void <init>(org.apache.commons.math3.linear.RealVector)
    {
        org.apache.commons.math3.linear.RealVector$SparseEntryIterator r0;
        org.apache.commons.math3.linear.RealVector $r1;
        int $i0;
        org.apache.commons.math3.linear.RealVector$Entry $r2;
        double $d0;
        byte $b1;

        r0 := @this: org.apache.commons.math3.linear.RealVector$SparseEntryIterator;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealVector;

        r0.<org.apache.commons.math3.linear.RealVector$SparseEntryIterator: org.apache.commons.math3.linear.RealVector this$0> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        r0.<org.apache.commons.math3.linear.RealVector$SparseEntryIterator: int dim> = $i0;

        $r2 = new org.apache.commons.math3.linear.RealVector$Entry;

        specialinvoke $r2.<org.apache.commons.math3.linear.RealVector$Entry: void <init>(org.apache.commons.math3.linear.RealVector)>($r1);

        r0.<org.apache.commons.math3.linear.RealVector$SparseEntryIterator: org.apache.commons.math3.linear.RealVector$Entry current> = $r2;

        $r2 = new org.apache.commons.math3.linear.RealVector$Entry;

        specialinvoke $r2.<org.apache.commons.math3.linear.RealVector$Entry: void <init>(org.apache.commons.math3.linear.RealVector)>($r1);

        r0.<org.apache.commons.math3.linear.RealVector$SparseEntryIterator: org.apache.commons.math3.linear.RealVector$Entry next> = $r2;

        $r2 = r0.<org.apache.commons.math3.linear.RealVector$SparseEntryIterator: org.apache.commons.math3.linear.RealVector$Entry next>;

        $d0 = virtualinvoke $r2.<org.apache.commons.math3.linear.RealVector$Entry: double getValue()>();

        $b1 = $d0 cmpl 0.0;

        if $b1 != 0 goto label1;

        $r2 = r0.<org.apache.commons.math3.linear.RealVector$SparseEntryIterator: org.apache.commons.math3.linear.RealVector$Entry next>;

        virtualinvoke r0.<org.apache.commons.math3.linear.RealVector$SparseEntryIterator: void advance(org.apache.commons.math3.linear.RealVector$Entry)>($r2);

     label1:
        return;
    }
    protected void advance(org.apache.commons.math3.linear.RealVector$Entry)
    {
        org.apache.commons.math3.linear.RealVector$SparseEntryIterator r0;
        org.apache.commons.math3.linear.RealVector$Entry $r1;
        int $i0, $i1;
        double $d0;
        byte $b2;

        r0 := @this: org.apache.commons.math3.linear.RealVector$SparseEntryIterator;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealVector$Entry;

        if $r1 != null goto label1;

        return;

     label1:
        $i0 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector$Entry: int getIndex()>();

        $i0 = $i0 + 1;

        virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector$Entry: void setIndex(int)>($i0);

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector$Entry: int getIndex()>();

        $i1 = r0.<org.apache.commons.math3.linear.RealVector$SparseEntryIterator: int dim>;

        if $i0 >= $i1 goto label2;

        $d0 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector$Entry: double getValue()>();

        $b2 = $d0 cmpl 0.0;

        if $b2 == 0 goto label1;

     label2:
        $i0 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector$Entry: int getIndex()>();

        $i1 = r0.<org.apache.commons.math3.linear.RealVector$SparseEntryIterator: int dim>;

        if $i0 < $i1 goto label3;

        virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector$Entry: void setIndex(int)>(-1);

     label3:
        return;
    }
    public boolean hasNext()
    {
        org.apache.commons.math3.linear.RealVector$SparseEntryIterator r0;
        int $i0;
        org.apache.commons.math3.linear.RealVector$Entry $r1;

        r0 := @this: org.apache.commons.math3.linear.RealVector$SparseEntryIterator;

        $r1 = r0.<org.apache.commons.math3.linear.RealVector$SparseEntryIterator: org.apache.commons.math3.linear.RealVector$Entry next>;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector$Entry: int getIndex()>();

        if $i0 < 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public volatile java.lang.Object next()
    {
        org.apache.commons.math3.linear.RealVector$SparseEntryIterator r0;
        org.apache.commons.math3.linear.RealVector$Entry $r1;

        r0 := @this: org.apache.commons.math3.linear.RealVector$SparseEntryIterator;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.linear.RealVector$SparseEntryIterator: org.apache.commons.math3.linear.RealVector$Entry next()>();

        return $r1;
    }
    public org.apache.commons.math3.linear.RealVector$Entry next()
    {
        org.apache.commons.math3.linear.RealVector$SparseEntryIterator r0;
        int $i0;
        org.apache.commons.math3.linear.RealVector$Entry $r1;
        java.util.NoSuchElementException $r2;

        r0 := @this: org.apache.commons.math3.linear.RealVector$SparseEntryIterator;

        $r1 = r0.<org.apache.commons.math3.linear.RealVector$SparseEntryIterator: org.apache.commons.math3.linear.RealVector$Entry next>;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector$Entry: int getIndex()>();

        if $i0 >= 0 goto label1;

        $r2 = new java.util.NoSuchElementException;

        specialinvoke $r2.<java.util.NoSuchElementException: void <init>()>();

        throw $r2;

     label1:
        $r1 = r0.<org.apache.commons.math3.linear.RealVector$SparseEntryIterator: org.apache.commons.math3.linear.RealVector$Entry current>;

        virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector$Entry: void setIndex(int)>($i0);

        $r1 = r0.<org.apache.commons.math3.linear.RealVector$SparseEntryIterator: org.apache.commons.math3.linear.RealVector$Entry next>;

        virtualinvoke r0.<org.apache.commons.math3.linear.RealVector$SparseEntryIterator: void advance(org.apache.commons.math3.linear.RealVector$Entry)>($r1);

        $r1 = r0.<org.apache.commons.math3.linear.RealVector$SparseEntryIterator: org.apache.commons.math3.linear.RealVector$Entry current>;

        return $r1;
    }
    public void remove() throws org.apache.commons.math3.exception.MathUnsupportedOperationException
    {
        org.apache.commons.math3.linear.RealVector$SparseEntryIterator r0;
        org.apache.commons.math3.exception.MathUnsupportedOperationException $r1;

        r0 := @this: org.apache.commons.math3.linear.RealVector$SparseEntryIterator;

        $r1 = new org.apache.commons.math3.exception.MathUnsupportedOperationException;

        specialinvoke $r1.<org.apache.commons.math3.exception.MathUnsupportedOperationException: void <init>()>();

        throw $r1;
    }
