org.apache.commons.math3.linear.EigenDecomposition extends java.lang.Object
private static final double EPSILON
private org.apache.commons.math3.linear.RealMatrix cachedD
private org.apache.commons.math3.linear.RealMatrix cachedV
private org.apache.commons.math3.linear.RealMatrix cachedVt
private org.apache.commons.math3.linear.ArrayRealVector[] eigenvectors
private double[] imagEigenvalues
private final boolean isSymmetric
private double[] main
private byte maxIter
private double[] realEigenvalues
private double[] secondary
private org.apache.commons.math3.linear.TriDiagonalTransformer transformer
    public void <init>(org.apache.commons.math3.linear.RealMatrix) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.linear.EigenDecomposition r0;
        org.apache.commons.math3.linear.RealMatrix $r1;
        double d0, $d1;
        int $i0, $i1;
        boolean $z0;
        org.apache.commons.math3.linear.TriDiagonalTransformer $r2;
        double[][] $r3;
        org.apache.commons.math3.linear.SchurTransformer $r4;

        r0 := @this: org.apache.commons.math3.linear.EigenDecomposition;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.linear.EigenDecomposition: byte maxIter> = 30;

        $i0 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $i0 = $i0 * 10;

        $i1 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        $i0 = $i0 * $i1;

        $d1 = (double) $i0;

        d0 = <org.apache.commons.math3.util.Precision: double EPSILON>;

        d0 = $d1 * d0;

        $z0 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: boolean isSymmetric(org.apache.commons.math3.linear.RealMatrix,double)>($r1, d0);

        r0.<org.apache.commons.math3.linear.EigenDecomposition: boolean isSymmetric> = $z0;

        $z0 = r0.<org.apache.commons.math3.linear.EigenDecomposition: boolean isSymmetric>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<org.apache.commons.math3.linear.EigenDecomposition: void transformToTridiagonal(org.apache.commons.math3.linear.RealMatrix)>($r1);

        $r2 = r0.<org.apache.commons.math3.linear.EigenDecomposition: org.apache.commons.math3.linear.TriDiagonalTransformer transformer>;

        $r1 = virtualinvoke $r2.<org.apache.commons.math3.linear.TriDiagonalTransformer: org.apache.commons.math3.linear.RealMatrix getQ()>();

        $r3 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: double[][] getData()>();

        specialinvoke r0.<org.apache.commons.math3.linear.EigenDecomposition: void findEigenVectors(double[][])>($r3);

        return;

     label1:
        $r4 = specialinvoke r0.<org.apache.commons.math3.linear.EigenDecomposition: org.apache.commons.math3.linear.SchurTransformer transformToSchur(org.apache.commons.math3.linear.RealMatrix)>($r1);

        specialinvoke r0.<org.apache.commons.math3.linear.EigenDecomposition: void findEigenVectorsFromSchur(org.apache.commons.math3.linear.SchurTransformer)>($r4);

        return;
    }
    public void <init>(org.apache.commons.math3.linear.RealMatrix, double) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.linear.EigenDecomposition r0;
        org.apache.commons.math3.linear.RealMatrix $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.EigenDecomposition;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        $d0 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.linear.EigenDecomposition: void <init>(org.apache.commons.math3.linear.RealMatrix)>($r1);

        return;
    }
    public void <init>(double[], double[])
    {
        org.apache.commons.math3.linear.EigenDecomposition r0;
        double[] $r1, $r2, $r4;
        int i0, i1;
        java.lang.Object $r3;
        int[] $r5;
        java.lang.Class $r6;
        double[][] r7;

        r0 := @this: org.apache.commons.math3.linear.EigenDecomposition;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.linear.EigenDecomposition: byte maxIter> = 30;

        r0.<org.apache.commons.math3.linear.EigenDecomposition: boolean isSymmetric> = 1;

        $r3 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r4 = (double[]) $r3;

        r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] main> = $r4;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (double[]) $r3;

        r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] secondary> = $r2;

        r0.<org.apache.commons.math3.linear.EigenDecomposition: org.apache.commons.math3.linear.TriDiagonalTransformer transformer> = null;

        i0 = lengthof $r1;

        $r5 = newarray (int)[2];

        $r5[0] = i0;

        $r5[1] = i0;

        $r6 = <java.lang.Double: java.lang.Class TYPE>;

        $r3 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r6, $r5);

        r7 = (double[][]) $r3;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r1 = r7[i1];

        $r1[i1] = 1.0;

        i1 = i1 + 1;

        goto label1;

     label2:
        specialinvoke r0.<org.apache.commons.math3.linear.EigenDecomposition: void findEigenVectors(double[][])>(r7);

        return;
    }
    public void <init>(double[], double[], double)
    {
        org.apache.commons.math3.linear.EigenDecomposition r0;
        double[] $r1, $r2;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.EigenDecomposition;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[];

        $d0 := @parameter2: double;

        specialinvoke r0.<org.apache.commons.math3.linear.EigenDecomposition: void <init>(double[],double[])>($r1, $r2);

        return;
    }
    private org.apache.commons.math3.complex.Complex cdiv(double, double, double, double)
    {
        org.apache.commons.math3.linear.EigenDecomposition r0;
        double $d0, $d1, $d2, $d3;
        org.apache.commons.math3.complex.Complex $r1, $r2;

        r0 := @this: org.apache.commons.math3.linear.EigenDecomposition;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $d3 := @parameter3: double;

        $r2 = new org.apache.commons.math3.complex.Complex;

        specialinvoke $r2.<org.apache.commons.math3.complex.Complex: void <init>(double,double)>($d0, $d1);

        $r1 = new org.apache.commons.math3.complex.Complex;

        specialinvoke $r1.<org.apache.commons.math3.complex.Complex: void <init>(double,double)>($d2, $d3);

        $r1 = virtualinvoke $r2.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex divide(org.apache.commons.math3.complex.Complex)>($r1);

        return $r1;
    }
    private void findEigenVectors(double[][])
    {
        org.apache.commons.math3.linear.EigenDecomposition r0;
        double[][] $r1;
        double d0, d1, $d2, $d3, $d4, d5, $d6, $d7;
        double[] r2, $r4, $r5;
        int i0, i1, $i2, i4, $i5, $i6, $i7;
        java.lang.Object $r3;
        byte $b3;
        org.apache.commons.math3.exception.MaxCountExceededException $r6;
        org.apache.commons.math3.exception.util.LocalizedFormats $r7;
        java.lang.Byte $r8;
        java.lang.Object[] $r9;
        org.apache.commons.math3.linear.ArrayRealVector[] $r10;
        org.apache.commons.math3.linear.ArrayRealVector $r11;

        r0 := @this: org.apache.commons.math3.linear.EigenDecomposition;

        $r1 := @parameter0: double[][];

        $r3 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r1 = (double[][]) $r3;

        r2 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] main>;

        i0 = lengthof r2;

        r2 = newarray (double)[i0];

        r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] realEigenvalues> = r2;

        r2 = newarray (double)[i0];

        r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] imagEigenvalues> = r2;

        r2 = newarray (double)[i0];

        i1 = 0;

     label01:
        $i2 = i0 + -1;

        if i1 >= $i2 goto label02;

        $r4 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] realEigenvalues>;

        $r5 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] main>;

        d0 = $r5[i1];

        $r4[i1] = d0;

        $r4 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] secondary>;

        d0 = $r4[i1];

        r2[i1] = d0;

        i1 = i1 + 1;

        goto label01;

     label02:
        $r4 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] realEigenvalues>;

        i1 = i0 + -1;

        $r5 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] main>;

        $i2 = i0 + -1;

        d0 = $r5[$i2];

        $r4[i1] = d0;

        i1 = i0 + -1;

        r2[i1] = 0.0;

        d0 = 0.0;

        i1 = 0;

     label03:
        if i1 >= i0 goto label06;

        $r4 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] realEigenvalues>;

        $d2 = $r4[i1];

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d2);

        $b3 = $d2 cmpl d0;

        if $b3 <= 0 goto label04;

        $r4 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] realEigenvalues>;

        d0 = $r4[i1];

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d0);

     label04:
        $d2 = r2[i1];

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d2);

        $b3 = $d2 cmpl d0;

        if $b3 <= 0 goto label05;

        d0 = r2[i1];

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d0);

     label05:
        i1 = i1 + 1;

        goto label03;

     label06:
        $b3 = d0 cmpl 0.0;

        if $b3 == 0 goto label10;

        i1 = 0;

     label07:
        if i1 >= i0 goto label10;

        $r4 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] realEigenvalues>;

        $d2 = $r4[i1];

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d2);

        $d3 = <org.apache.commons.math3.util.Precision: double EPSILON>;

        $d3 = $d3 * d0;

        $b3 = $d2 cmpg $d3;

        if $b3 > 0 goto label08;

        $r4 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] realEigenvalues>;

        $r4[i1] = 0.0;

     label08:
        $d2 = r2[i1];

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d2);

        $d3 = <org.apache.commons.math3.util.Precision: double EPSILON>;

        $d3 = $d3 * d0;

        $b3 = $d2 cmpg $d3;

        if $b3 > 0 goto label09;

        r2[i1] = 0.0;

     label09:
        i1 = i1 + 1;

        goto label07;

     label10:
        i1 = 0;

     label11:
        if i1 >= i0 goto label28;

        $i2 = 0;

     label12:
        i4 = i1;

     label13:
        $i5 = i0 + -1;

        if i4 >= $i5 goto label14;

        $r4 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] realEigenvalues>;

        d0 = $r4[i4];

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d0);

        $r4 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] realEigenvalues>;

        $i5 = i4 + 1;

        $d2 = $r4[$i5];

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d2);

        d0 = d0 + $d2;

        $d2 = r2[i4];

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d2);

        $d2 = $d2 + d0;

        $b3 = $d2 cmpl d0;

        if $b3 != 0 goto label15;

     label14:
        if i4 == i1 goto label21;

        $b3 = r0.<org.apache.commons.math3.linear.EigenDecomposition: byte maxIter>;

        if $i2 != $b3 goto label16;

        $r6 = new org.apache.commons.math3.exception.MaxCountExceededException;

        $r7 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats CONVERGENCE_FAILED>;

        $b3 = r0.<org.apache.commons.math3.linear.EigenDecomposition: byte maxIter>;

        $r8 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b3);

        $r9 = newarray (java.lang.Object)[0];

        specialinvoke $r6.<org.apache.commons.math3.exception.MaxCountExceededException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])>($r7, $r8, $r9);

        throw $r6;

     label15:
        i4 = i4 + 1;

        goto label13;

     label16:
        $i2 = $i2 + 1;

        $r4 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] realEigenvalues>;

        $i5 = i1 + 1;

        d0 = $r4[$i5];

        $r4 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] realEigenvalues>;

        $d2 = $r4[i1];

        d0 = d0 - $d2;

        $d2 = r2[i1];

        $d2 = 2.0 * $d2;

        $d2 = d0 / $d2;

        d0 = $d2 * $d2;

        d0 = 1.0 + d0;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d0);

        d0 = $d3;

        $b3 = $d2 cmpg 0.0;

        if $b3 >= 0 goto label22;

        $r4 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] realEigenvalues>;

        d1 = $r4[i4];

        $r4 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] realEigenvalues>;

        $d4 = $r4[i1];

        d1 = d1 - $d4;

        $d4 = r2[i1];

        $d2 = $d2 - $d3;

        $d2 = $d4 / $d2;

        $d3 = d1 + $d2;

     label17:
        $d2 = 0.0;

        d5 = 1.0;

        $d4 = 1.0;

        $i5 = i4 + -1;

     label18:
        if $i5 < i1 goto label20;

        d0 = r2[$i5];

        d5 = d5 * d0;

        d0 = r2[$i5];

        d1 = $d4 * d0;

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d5);

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d3);

        $b3 = d0 cmpl $d4;

        if $b3 < 0 goto label23;

        $d4 = $d3 / d5;

        d0 = $d4 * $d4;

        d0 = d0 + 1.0;

        $d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d0);

        d0 = $d6;

        $i6 = $i5 + 1;

        d5 = d5 * $d6;

        r2[$i6] = d5;

        d5 = 1.0 / $d6;

        $d4 = $d4 * d5;

     label19:
        $i6 = $i5 + 1;

        $d6 = r2[$i6];

        $b3 = $d6 cmpl 0.0;

        if $b3 != 0 goto label24;

        $r4 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] realEigenvalues>;

        $i6 = $i5 + 1;

        d1 = $r4[$i6];

        d1 = d1 - $d2;

        $r4[$i6] = d1;

        r2[i4] = 0.0;

     label20:
        $b3 = d0 cmpl 0.0;

        if $b3 != 0 goto label27;

        if $i5 < i1 goto label27;

     label21:
        if i4 != i1 goto label12;

        i1 = i1 + 1;

        goto label11;

     label22:
        $r4 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] realEigenvalues>;

        d1 = $r4[i4];

        $r4 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] realEigenvalues>;

        $d4 = $r4[i1];

        d1 = d1 - $d4;

        $d4 = r2[i1];

        $d2 = $d2 + $d3;

        $d2 = $d4 / $d2;

        $d3 = d1 + $d2;

        goto label17;

     label23:
        d5 = d5 / $d3;

        d0 = d5 * d5;

        d0 = d0 + 1.0;

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d0);

        d0 = $d4;

        $i6 = $i5 + 1;

        $d6 = $d3 * $d4;

        r2[$i6] = $d6;

        $d4 = 1.0 / $d4;

        d5 = d5 * $d4;

        goto label19;

     label24:
        $r4 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] realEigenvalues>;

        $i6 = $i5 + 1;

        d0 = $r4[$i6];

        $d3 = d0 - $d2;

        $r4 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] realEigenvalues>;

        d0 = $r4[$i5];

        d0 = d0 - $d3;

        d0 = d0 * d5;

        $d2 = 2.0 * $d4;

        $d2 = $d2 * d1;

        d0 = d0 + $d2;

        $d2 = d5 * d0;

        $r4 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] realEigenvalues>;

        $i6 = $i5 + 1;

        $d3 = $d3 + $d2;

        $r4[$i6] = $d3;

        $d3 = $d4 * d0;

        $d3 = $d3 - d1;

        $i6 = 0;

     label25:
        if $i6 >= i0 goto label26;

        $r4 = $r1[$i6];

        $i7 = $i5 + 1;

        d1 = $r4[$i7];

        $r4 = $r1[$i6];

        $i7 = $i5 + 1;

        $r5 = $r1[$i6];

        $d6 = $r5[$i5];

        $d6 = $d6 * d5;

        $d7 = $d4 * d1;

        $d6 = $d6 + $d7;

        $r4[$i7] = $d6;

        $r4 = $r1[$i6];

        $r5 = $r1[$i6];

        $d6 = $r5[$i5];

        $d6 = $d6 * $d4;

        d1 = d5 * d1;

        d1 = $d6 - d1;

        $r4[$i5] = d1;

        $i6 = $i6 + 1;

        goto label25;

     label26:
        $i5 = $i5 + -1;

        goto label18;

     label27:
        $r4 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] realEigenvalues>;

        d0 = $r4[i1];

        d0 = d0 - $d2;

        $r4[i1] = d0;

        r2[i1] = $d3;

        r2[i4] = 0.0;

        goto label21;

     label28:
        i1 = 0;

     label29:
        if i1 >= i0 goto label35;

        $i2 = i1;

        r2 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] realEigenvalues>;

        d0 = r2[i1];

        i4 = i1 + 1;

     label30:
        if i4 >= i0 goto label32;

        r2 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] realEigenvalues>;

        $d2 = r2[i4];

        $b3 = $d2 cmpl d0;

        if $b3 <= 0 goto label31;

        $i2 = i4;

        r2 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] realEigenvalues>;

        d0 = r2[i4];

     label31:
        i4 = i4 + 1;

        goto label30;

     label32:
        if $i2 == i1 goto label34;

        r2 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] realEigenvalues>;

        $r4 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] realEigenvalues>;

        $d2 = $r4[i1];

        r2[$i2] = $d2;

        r2 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] realEigenvalues>;

        r2[i1] = d0;

        i4 = 0;

     label33:
        if i4 >= i0 goto label34;

        r2 = $r1[i4];

        d0 = r2[i1];

        r2 = $r1[i4];

        $r4 = $r1[i4];

        $d2 = $r4[$i2];

        r2[i1] = $d2;

        r2 = $r1[i4];

        r2[$i2] = d0;

        i4 = i4 + 1;

        goto label33;

     label34:
        i1 = i1 + 1;

        goto label29;

     label35:
        d0 = 0.0;

        i1 = 0;

     label36:
        if i1 >= i0 goto label38;

        r2 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] realEigenvalues>;

        $d2 = r2[i1];

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d2);

        $b3 = $d2 cmpl d0;

        if $b3 <= 0 goto label37;

        r2 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] realEigenvalues>;

        d0 = r2[i1];

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d0);

     label37:
        i1 = i1 + 1;

        goto label36;

     label38:
        $b3 = d0 cmpl 0.0;

        if $b3 == 0 goto label41;

        i1 = 0;

     label39:
        if i1 >= i0 goto label41;

        r2 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] realEigenvalues>;

        $d2 = r2[i1];

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d2);

        $d3 = <org.apache.commons.math3.util.Precision: double EPSILON>;

        $d3 = $d3 * d0;

        $b3 = $d2 cmpg $d3;

        if $b3 >= 0 goto label40;

        r2 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] realEigenvalues>;

        r2[i1] = 0.0;

     label40:
        i1 = i1 + 1;

        goto label39;

     label41:
        $r10 = newarray (org.apache.commons.math3.linear.ArrayRealVector)[i0];

        r0.<org.apache.commons.math3.linear.EigenDecomposition: org.apache.commons.math3.linear.ArrayRealVector[] eigenvectors> = $r10;

        r2 = newarray (double)[i0];

        i1 = 0;

     label42:
        if i1 >= i0 goto label45;

        $i2 = 0;

     label43:
        if $i2 >= i0 goto label44;

        $r4 = $r1[$i2];

        d0 = $r4[i1];

        r2[$i2] = d0;

        $i2 = $i2 + 1;

        goto label43;

     label44:
        $r10 = r0.<org.apache.commons.math3.linear.EigenDecomposition: org.apache.commons.math3.linear.ArrayRealVector[] eigenvectors>;

        $r11 = new org.apache.commons.math3.linear.ArrayRealVector;

        specialinvoke $r11.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(double[])>(r2);

        $r10[i1] = $r11;

        i1 = i1 + 1;

        goto label42;

     label45:
        return;
    }
    private void findEigenVectorsFromSchur(org.apache.commons.math3.linear.SchurTransformer) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.linear.EigenDecomposition r0;
        org.apache.commons.math3.linear.SchurTransformer $r1;
        int $i0, $i1, i2, $i3, i4, $i6;
        double $d0, $d1, d2, $d3, $d4, d5, d6, d7, d8, d9, d10, $d11, $d12, $d13, $d14, $d15;
        org.apache.commons.math3.linear.RealMatrix $r2;
        double[][] $r3, $r4;
        double[] $r5, $r9;
        boolean $z0;
        org.apache.commons.math3.exception.MathArithmeticException $r6;
        org.apache.commons.math3.exception.util.LocalizedFormats $r7;
        java.lang.Object[] $r8;
        byte $b5;
        org.apache.commons.math3.complex.Complex $r10;
        org.apache.commons.math3.linear.ArrayRealVector[] $r11;
        org.apache.commons.math3.linear.ArrayRealVector $r12;

        r0 := @this: org.apache.commons.math3.linear.EigenDecomposition;

        $r1 := @parameter0: org.apache.commons.math3.linear.SchurTransformer;

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.linear.SchurTransformer: org.apache.commons.math3.linear.RealMatrix getT()>();

        $r3 = interfaceinvoke $r2.<org.apache.commons.math3.linear.RealMatrix: double[][] getData()>();

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.linear.SchurTransformer: org.apache.commons.math3.linear.RealMatrix getP()>();

        $r4 = interfaceinvoke $r2.<org.apache.commons.math3.linear.RealMatrix: double[][] getData()>();

        $i1 = lengthof $r3;

        d6 = 0.0;

        i2 = 0;

     label01:
        if i2 >= $i1 goto label04;

        $i3 = i2 + -1;

        $i3 = staticinvoke <org.apache.commons.math3.util.FastMath: int max(int,int)>($i3, 0);

     label02:
        if $i3 >= $i1 goto label03;

        $r5 = $r3[i2];

        d5 = $r5[$i3];

        d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d5);

        d6 = d6 + d5;

        $i3 = $i3 + 1;

        goto label02;

     label03:
        i2 = i2 + 1;

        goto label01;

     label04:
        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,double)>(d6, 0.0, 1.0E-12);

        if $z0 == 0 goto label05;

        $r6 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r7 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats ZERO_NORM>;

        $r8 = newarray (java.lang.Object)[0];

        specialinvoke $r6.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r7, $r8);

        throw $r6;

     label05:
        d7 = 0.0;

        d8 = 0.0;

        d9 = 0.0;

        i2 = $i1 + -1;

     label06:
        if i2 < 0 goto label31;

        $r5 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] realEigenvalues>;

        d5 = $r5[i2];

        $r5 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] imagEigenvalues>;

        d10 = $r5[i2];

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double)>(d10, 0.0);

        if $z0 == 0 goto label17;

        $i3 = i2;

        $r5 = $r3[i2];

        $r5[i2] = 1.0;

        i4 = i2 + -1;

     label07:
        if i4 < 0 goto label30;

        $r5 = $r3[i4];

        d7 = $r5[i4];

        d10 = d7 - d5;

        d7 = 0.0;

        $i0 = $i3;

     label08:
        if $i0 > i2 goto label09;

        $r5 = $r3[i4];

        $d3 = $r5[$i0];

        $r5 = $r3[$i0];

        $d4 = $r5[i2];

        $d3 = $d3 * $d4;

        d7 = d7 + $d3;

        $i0 = $i0 + 1;

        goto label08;

     label09:
        $r5 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] imagEigenvalues>;

        $d3 = $r5[i4];

        $i0 = staticinvoke <org.apache.commons.math3.util.Precision: int compareTo(double,double,double)>($d3, 0.0, 1.0E-12);

        if $i0 >= 0 goto label11;

        d9 = d10;

        d8 = d7;

     label10:
        i4 = i4 + -1;

        goto label07;

     label11:
        $i3 = i4;

        $r5 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] imagEigenvalues>;

        $d3 = $r5[i4];

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double)>($d3, 0.0);

        if $z0 == 0 goto label15;

        $b5 = d10 cmpl 0.0;

        if $b5 == 0 goto label14;

        $r5 = $r3[i4];

        $d3 = neg d7;

        d10 = $d3 / d10;

        $r5[i2] = d10;

     label12:
        $r5 = $r3[i4];

        d10 = $r5[i2];

        d10 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d10);

        $d3 = <org.apache.commons.math3.util.Precision: double EPSILON>;

        $d3 = $d3 * d10;

        $d3 = $d3 * d10;

        $b5 = $d3 cmpl 1.0;

        if $b5 <= 0 goto label10;

        $i0 = i4;

     label13:
        if $i0 > i2 goto label10;

        $r5 = $r3[$i0];

        $d3 = $r5[i2];

        $d3 = $d3 / d10;

        $r5[i2] = $d3;

        $i0 = $i0 + 1;

        goto label13;

     label14:
        $r5 = $r3[i4];

        d10 = neg d7;

        $d3 = <org.apache.commons.math3.util.Precision: double EPSILON>;

        $d3 = $d3 * d6;

        d10 = d10 / $d3;

        $r5[i2] = d10;

        goto label12;

     label15:
        $r5 = $r3[i4];

        $i0 = i4 + 1;

        $d3 = $r5[$i0];

        $i0 = i4 + 1;

        $r5 = $r3[$i0];

        $d4 = $r5[i4];

        $r5 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] realEigenvalues>;

        $d11 = $r5[i4];

        $d11 = $d11 - d5;

        $r5 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] realEigenvalues>;

        $d12 = $r5[i4];

        $d12 = $d12 - d5;

        $d11 = $d11 * $d12;

        $r5 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] imagEigenvalues>;

        $d12 = $r5[i4];

        $r5 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] imagEigenvalues>;

        $d13 = $r5[i4];

        $d12 = $d12 * $d13;

        $d11 = $d11 + $d12;

        $d12 = $d3 * d8;

        $d13 = d9 * d7;

        $d12 = $d12 - $d13;

        $d11 = $d12 / $d11;

        $r5 = $r3[i4];

        $r5[i2] = $d11;

        $d12 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d3);

        $d13 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d9);

        $b5 = $d12 cmpl $d13;

        if $b5 <= 0 goto label16;

        $i0 = i4 + 1;

        $r5 = $r3[$i0];

        $d4 = neg d7;

        d10 = d10 * $d11;

        d10 = $d4 - d10;

        d10 = d10 / $d3;

        $r5[i2] = d10;

        goto label12;

     label16:
        $i0 = i4 + 1;

        $r5 = $r3[$i0];

        d10 = neg d8;

        $d3 = $d4 * $d11;

        d10 = d10 - $d3;

        d10 = d10 / d9;

        $r5[i2] = d10;

        goto label12;

     label17:
        $b5 = d10 cmpg 0.0;

        if $b5 >= 0 goto label30;

        $i3 = i2 + -1;

        $r5 = $r3[i2];

        i4 = i2 + -1;

        $d3 = $r5[i4];

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d3);

        i4 = i2 + -1;

        $r5 = $r3[i4];

        $d4 = $r5[i2];

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d4);

        $b5 = $d3 cmpl $d4;

        if $b5 <= 0 goto label21;

        i4 = i2 + -1;

        $r5 = $r3[i4];

        i4 = i2 + -1;

        $r9 = $r3[i2];

        $i0 = i2 + -1;

        $d3 = $r9[$i0];

        $d3 = d10 / $d3;

        $r5[i4] = $d3;

        i4 = i2 + -1;

        $r5 = $r3[i4];

        $r9 = $r3[i2];

        $d3 = $r9[i2];

        $d3 = $d3 - d5;

        $d3 = neg $d3;

        $r9 = $r3[i2];

        i4 = i2 + -1;

        $d4 = $r9[i4];

        $d3 = $d3 / $d4;

        $r5[i2] = $d3;

     label18:
        $r5 = $r3[i2];

        i4 = i2 + -1;

        $r5[i4] = 0.0;

        $r5 = $r3[i2];

        $r5[i2] = 1.0;

        i4 = i2 + -2;

     label19:
        if i4 < 0 goto label30;

        $d12 = 0.0;

        $d3 = 0.0;

        $i0 = $i3;

     label20:
        if $i0 > i2 goto label22;

        $r5 = $r3[i4];

        $d4 = $r5[$i0];

        $r5 = $r3[$i0];

        $i6 = i2 + -1;

        $d11 = $r5[$i6];

        $d4 = $d4 * $d11;

        $d12 = $d12 + $d4;

        $r5 = $r3[i4];

        $d4 = $r5[$i0];

        $r5 = $r3[$i0];

        $d11 = $r5[i2];

        $d4 = $d4 * $d11;

        $d3 = $d3 + $d4;

        $i0 = $i0 + 1;

        goto label20;

     label21:
        i4 = i2 + -1;

        $r5 = $r3[i4];

        $d3 = $r5[i2];

        $d3 = neg $d3;

        i4 = i2 + -1;

        $r5 = $r3[i4];

        i4 = i2 + -1;

        $d4 = $r5[i4];

        $d4 = $d4 - d5;

        $r10 = specialinvoke r0.<org.apache.commons.math3.linear.EigenDecomposition: org.apache.commons.math3.complex.Complex cdiv(double,double,double,double)>(0.0, $d3, $d4, d10);

        i4 = i2 + -1;

        $r5 = $r3[i4];

        i4 = i2 + -1;

        $d3 = virtualinvoke $r10.<org.apache.commons.math3.complex.Complex: double getReal()>();

        $r5[i4] = $d3;

        i4 = i2 + -1;

        $r5 = $r3[i4];

        $d3 = virtualinvoke $r10.<org.apache.commons.math3.complex.Complex: double getImaginary()>();

        $r5[i2] = $d3;

        goto label18;

     label22:
        $r5 = $r3[i4];

        $d4 = $r5[i4];

        $d11 = $d4 - d5;

        $r5 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] imagEigenvalues>;

        $d4 = $r5[i4];

        $i0 = staticinvoke <org.apache.commons.math3.util.Precision: int compareTo(double,double,double)>($d4, 0.0, 1.0E-12);

        if $i0 >= 0 goto label24;

        d9 = $d11;

        d7 = $d12;

        d8 = $d3;

     label23:
        i4 = i4 + -1;

        goto label19;

     label24:
        $i3 = i4;

        $r5 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] imagEigenvalues>;

        $d4 = $r5[i4];

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double)>($d4, 0.0);

        if $z0 == 0 goto label27;

        $d4 = neg $d12;

        $d3 = neg $d3;

        $r10 = specialinvoke r0.<org.apache.commons.math3.linear.EigenDecomposition: org.apache.commons.math3.complex.Complex cdiv(double,double,double,double)>($d4, $d3, $d11, d10);

        $r5 = $r3[i4];

        $i0 = i2 + -1;

        $d3 = virtualinvoke $r10.<org.apache.commons.math3.complex.Complex: double getReal()>();

        $r5[$i0] = $d3;

        $r5 = $r3[i4];

        $d3 = virtualinvoke $r10.<org.apache.commons.math3.complex.Complex: double getImaginary()>();

        $r5[i2] = $d3;

     label25:
        $r5 = $r3[i4];

        $i0 = i2 + -1;

        $d3 = $r5[$i0];

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d3);

        $r5 = $r3[i4];

        $d4 = $r5[i2];

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d4);

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>($d3, $d4);

        $d4 = <org.apache.commons.math3.util.Precision: double EPSILON>;

        $d4 = $d4 * $d3;

        $d4 = $d4 * $d3;

        $b5 = $d4 cmpl 1.0;

        if $b5 <= 0 goto label23;

        $i0 = i4;

     label26:
        if $i0 > i2 goto label23;

        $r5 = $r3[$i0];

        $i6 = i2 + -1;

        $d4 = $r5[$i6];

        $d4 = $d4 / $d3;

        $r5[$i6] = $d4;

        $r5 = $r3[$i0];

        $d4 = $r5[i2];

        $d4 = $d4 / $d3;

        $r5[i2] = $d4;

        $i0 = $i0 + 1;

        goto label26;

     label27:
        $r5 = $r3[i4];

        $i0 = i4 + 1;

        $d4 = $r5[$i0];

        $i0 = i4 + 1;

        $r5 = $r3[$i0];

        $d13 = $r5[i4];

        $r5 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] realEigenvalues>;

        d2 = $r5[i4];

        d2 = d2 - d5;

        $r5 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] realEigenvalues>;

        $d14 = $r5[i4];

        $d14 = $d14 - d5;

        d2 = d2 * $d14;

        $r5 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] imagEigenvalues>;

        $d14 = $r5[i4];

        $r5 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] imagEigenvalues>;

        $d0 = $r5[i4];

        $d14 = $d14 * $d0;

        d2 = d2 + $d14;

        $d14 = d10 * d10;

        $d14 = d2 - $d14;

        $r5 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] realEigenvalues>;

        d2 = $r5[i4];

        d2 = d2 - d5;

        d2 = d2 * 2.0;

        d2 = d2 * d10;

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double)>($d14, 0.0);

        if $z0 == 0 goto label28;

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double)>(d2, 0.0);

        if $z0 == 0 goto label28;

        $d14 = <org.apache.commons.math3.util.Precision: double EPSILON>;

        $d14 = $d14 * d6;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d11);

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d10);

        $d0 = $d0 + $d1;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d4);

        $d0 = $d0 + $d1;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d13);

        $d0 = $d0 + $d1;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d9);

        $d0 = $d0 + $d1;

        $d14 = $d14 * $d0;

     label28:
        $d0 = $d4 * d7;

        $d1 = d9 * $d12;

        $d0 = $d0 - $d1;

        $d1 = d10 * $d3;

        $d0 = $d0 + $d1;

        $d1 = $d4 * d8;

        $d15 = d9 * $d3;

        $d1 = $d1 - $d15;

        $d15 = d10 * $d12;

        $d1 = $d1 - $d15;

        $r10 = specialinvoke r0.<org.apache.commons.math3.linear.EigenDecomposition: org.apache.commons.math3.complex.Complex cdiv(double,double,double,double)>($d0, $d1, $d14, d2);

        $r5 = $r3[i4];

        $i0 = i2 + -1;

        d2 = virtualinvoke $r10.<org.apache.commons.math3.complex.Complex: double getReal()>();

        $r5[$i0] = d2;

        $r5 = $r3[i4];

        d2 = virtualinvoke $r10.<org.apache.commons.math3.complex.Complex: double getImaginary()>();

        $r5[i2] = d2;

        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d4);

        $d14 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d9);

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d10);

        $d14 = $d14 + $d0;

        $b5 = d2 cmpl $d14;

        if $b5 <= 0 goto label29;

        $i0 = i4 + 1;

        $r5 = $r3[$i0];

        $i6 = i2 + -1;

        $d12 = neg $d12;

        $r9 = $r3[i4];

        $i0 = i2 + -1;

        $d13 = $r9[$i0];

        $d13 = $d13 * $d11;

        $d12 = $d12 - $d13;

        $r9 = $r3[i4];

        $d13 = $r9[i2];

        $d13 = $d13 * d10;

        $d12 = $d12 + $d13;

        $d12 = $d12 / $d4;

        $r5[$i6] = $d12;

        $i0 = i4 + 1;

        $r5 = $r3[$i0];

        $d3 = neg $d3;

        $r9 = $r3[i4];

        $d12 = $r9[i2];

        $d11 = $d12 * $d11;

        $d3 = $d3 - $d11;

        $r9 = $r3[i4];

        $i0 = i2 + -1;

        $d11 = $r9[$i0];

        $d11 = $d11 * d10;

        $d3 = $d3 - $d11;

        $d3 = $d3 / $d4;

        $r5[i2] = $d3;

        goto label25;

     label29:
        $d3 = neg d7;

        $r5 = $r3[i4];

        $i0 = i2 + -1;

        $d4 = $r5[$i0];

        $d4 = $d4 * $d13;

        $d3 = $d3 - $d4;

        $d4 = neg d8;

        $r5 = $r3[i4];

        $d11 = $r5[i2];

        $d11 = $d11 * $d13;

        $d4 = $d4 - $d11;

        $r10 = specialinvoke r0.<org.apache.commons.math3.linear.EigenDecomposition: org.apache.commons.math3.complex.Complex cdiv(double,double,double,double)>($d3, $d4, d9, d10);

        $i0 = i4 + 1;

        $r5 = $r3[$i0];

        $i0 = i2 + -1;

        $d3 = virtualinvoke $r10.<org.apache.commons.math3.complex.Complex: double getReal()>();

        $r5[$i0] = $d3;

        $i0 = i4 + 1;

        $r5 = $r3[$i0];

        $d3 = virtualinvoke $r10.<org.apache.commons.math3.complex.Complex: double getImaginary()>();

        $r5[i2] = $d3;

        goto label25;

     label30:
        i2 = i2 + -1;

        goto label06;

     label31:
        i2 = $i1 + -1;

     label32:
        if i2 < 0 goto label37;

        $i3 = 0;

     label33:
        i4 = $i1 + -1;

        if $i3 > i4 goto label36;

        d6 = 0.0;

        i4 = 0;

     label34:
        $i0 = $i1 + -1;

        $i0 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>(i2, $i0);

        if i4 > $i0 goto label35;

        $r5 = $r4[$i3];

        d5 = $r5[i4];

        $r5 = $r3[i4];

        d8 = $r5[i2];

        d5 = d5 * d8;

        d6 = d6 + d5;

        i4 = i4 + 1;

        goto label34;

     label35:
        $r5 = $r4[$i3];

        $r5[i2] = d6;

        $i3 = $i3 + 1;

        goto label33;

     label36:
        i2 = i2 + -1;

        goto label32;

     label37:
        $r11 = newarray (org.apache.commons.math3.linear.ArrayRealVector)[$i1];

        r0.<org.apache.commons.math3.linear.EigenDecomposition: org.apache.commons.math3.linear.ArrayRealVector[] eigenvectors> = $r11;

        $r5 = newarray (double)[$i1];

        i2 = 0;

     label38:
        if i2 >= $i1 goto label41;

        $i3 = 0;

     label39:
        if $i3 >= $i1 goto label40;

        $r9 = $r4[$i3];

        d6 = $r9[i2];

        $r5[$i3] = d6;

        $i3 = $i3 + 1;

        goto label39;

     label40:
        $r11 = r0.<org.apache.commons.math3.linear.EigenDecomposition: org.apache.commons.math3.linear.ArrayRealVector[] eigenvectors>;

        $r12 = new org.apache.commons.math3.linear.ArrayRealVector;

        specialinvoke $r12.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(double[])>($r5);

        $r11[i2] = $r12;

        i2 = i2 + 1;

        goto label38;

     label41:
        return;
    }
    private org.apache.commons.math3.linear.SchurTransformer transformToSchur(org.apache.commons.math3.linear.RealMatrix)
    {
        org.apache.commons.math3.linear.EigenDecomposition r0;
        org.apache.commons.math3.linear.RealMatrix $r1;
        int $i0, $i1;
        double d0, d1, $d2, $d3, $d4;
        org.apache.commons.math3.linear.SchurTransformer r2;
        double[][] $r3;
        double[] $r4, $r5;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.linear.EigenDecomposition;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        r2 = new org.apache.commons.math3.linear.SchurTransformer;

        specialinvoke r2.<org.apache.commons.math3.linear.SchurTransformer: void <init>(org.apache.commons.math3.linear.RealMatrix)>($r1);

        $r1 = virtualinvoke r2.<org.apache.commons.math3.linear.SchurTransformer: org.apache.commons.math3.linear.RealMatrix getT()>();

        $r3 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: double[][] getData()>();

        $i1 = lengthof $r3;

        $r4 = newarray (double)[$i1];

        r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] realEigenvalues> = $r4;

        $i1 = lengthof $r3;

        $r4 = newarray (double)[$i1];

        r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] imagEigenvalues> = $r4;

        $i1 = 0;

     label1:
        $r4 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] realEigenvalues>;

        $i0 = lengthof $r4;

        if $i1 >= $i0 goto label5;

        $r4 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] realEigenvalues>;

        $i0 = lengthof $r4;

        $i0 = $i0 + -1;

        if $i1 == $i0 goto label2;

        $i0 = $i1 + 1;

        $r4 = $r3[$i0];

        d1 = $r4[$i1];

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,double)>(d1, 0.0, 1.0E-12);

        if $z0 == 0 goto label4;

     label2:
        $r4 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] realEigenvalues>;

        $r5 = $r3[$i1];

        d1 = $r5[$i1];

        $r4[$i1] = d1;

     label3:
        $i1 = $i1 + 1;

        goto label1;

     label4:
        $i0 = $i1 + 1;

        $r4 = $r3[$i0];

        $i0 = $i1 + 1;

        d1 = $r4[$i0];

        $r4 = $r3[$i1];

        d0 = $r4[$i1];

        d0 = d0 - d1;

        d0 = 0.5 * d0;

        $d2 = d0 * d0;

        $i0 = $i1 + 1;

        $r4 = $r3[$i0];

        $d3 = $r4[$i1];

        $r4 = $r3[$i1];

        $i0 = $i1 + 1;

        $d4 = $r4[$i0];

        $d3 = $d3 * $d4;

        $d2 = $d2 + $d3;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d2);

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d2);

        $r4 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] realEigenvalues>;

        $d3 = d1 + d0;

        $r4[$i1] = $d3;

        $r4 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] imagEigenvalues>;

        $r4[$i1] = $d2;

        $r4 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] realEigenvalues>;

        $i0 = $i1 + 1;

        d1 = d1 + d0;

        $r4[$i0] = d1;

        $r4 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] imagEigenvalues>;

        $i0 = $i1 + 1;

        d1 = neg $d2;

        $r4[$i0] = d1;

        $i1 = $i1 + 1;

        goto label3;

     label5:
        return r2;
    }
    private void transformToTridiagonal(org.apache.commons.math3.linear.RealMatrix)
    {
        org.apache.commons.math3.linear.EigenDecomposition r0;
        org.apache.commons.math3.linear.RealMatrix $r1;
        org.apache.commons.math3.linear.TriDiagonalTransformer $r2;
        double[] $r3;

        r0 := @this: org.apache.commons.math3.linear.EigenDecomposition;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        $r2 = new org.apache.commons.math3.linear.TriDiagonalTransformer;

        specialinvoke $r2.<org.apache.commons.math3.linear.TriDiagonalTransformer: void <init>(org.apache.commons.math3.linear.RealMatrix)>($r1);

        r0.<org.apache.commons.math3.linear.EigenDecomposition: org.apache.commons.math3.linear.TriDiagonalTransformer transformer> = $r2;

        $r2 = r0.<org.apache.commons.math3.linear.EigenDecomposition: org.apache.commons.math3.linear.TriDiagonalTransformer transformer>;

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.linear.TriDiagonalTransformer: double[] getMainDiagonalRef()>();

        r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] main> = $r3;

        $r2 = r0.<org.apache.commons.math3.linear.EigenDecomposition: org.apache.commons.math3.linear.TriDiagonalTransformer transformer>;

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.linear.TriDiagonalTransformer: double[] getSecondaryDiagonalRef()>();

        r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] secondary> = $r3;

        return;
    }
    public org.apache.commons.math3.linear.RealMatrix getD()
    {
        org.apache.commons.math3.linear.EigenDecomposition r0;
        org.apache.commons.math3.linear.RealMatrix $r1;
        double[] $r2;
        int i0, $i1;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.EigenDecomposition;

        $r1 = r0.<org.apache.commons.math3.linear.EigenDecomposition: org.apache.commons.math3.linear.RealMatrix cachedD>;

        if $r1 != null goto label4;

        $r2 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] realEigenvalues>;

        $r1 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix createRealDiagonalMatrix(double[])>($r2);

        r0.<org.apache.commons.math3.linear.EigenDecomposition: org.apache.commons.math3.linear.RealMatrix cachedD> = $r1;

        i0 = 0;

     label1:
        $r2 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] imagEigenvalues>;

        $i1 = lengthof $r2;

        if i0 >= $i1 goto label4;

        $r2 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] imagEigenvalues>;

        $d0 = $r2[i0];

        $i1 = staticinvoke <org.apache.commons.math3.util.Precision: int compareTo(double,double,double)>($d0, 0.0, 1.0E-12);

        if $i1 <= 0 goto label3;

        $r1 = r0.<org.apache.commons.math3.linear.EigenDecomposition: org.apache.commons.math3.linear.RealMatrix cachedD>;

        $i1 = i0 + 1;

        $r2 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] imagEigenvalues>;

        $d0 = $r2[i0];

        interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: void setEntry(int,int,double)>(i0, $i1, $d0);

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        $r2 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] imagEigenvalues>;

        $d0 = $r2[i0];

        $i1 = staticinvoke <org.apache.commons.math3.util.Precision: int compareTo(double,double,double)>($d0, 0.0, 1.0E-12);

        if $i1 >= 0 goto label2;

        $r1 = r0.<org.apache.commons.math3.linear.EigenDecomposition: org.apache.commons.math3.linear.RealMatrix cachedD>;

        $i1 = i0 + -1;

        $r2 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] imagEigenvalues>;

        $d0 = $r2[i0];

        interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: void setEntry(int,int,double)>(i0, $i1, $d0);

        goto label2;

     label4:
        $r1 = r0.<org.apache.commons.math3.linear.EigenDecomposition: org.apache.commons.math3.linear.RealMatrix cachedD>;

        return $r1;
    }
    public double getDeterminant()
    {
        org.apache.commons.math3.linear.EigenDecomposition r0;
        double[] r1;
        double d0, d1;
        int i0, i1;

        r0 := @this: org.apache.commons.math3.linear.EigenDecomposition;

        d1 = 1.0;

        r1 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] realEigenvalues>;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        d0 = r1[i1];

        d1 = d1 * d0;

        i1 = i1 + 1;

        goto label1;

     label2:
        return d1;
    }
    public org.apache.commons.math3.linear.RealVector getEigenvector(int)
    {
        org.apache.commons.math3.linear.EigenDecomposition r0;
        int $i0;
        org.apache.commons.math3.linear.ArrayRealVector $r1;
        org.apache.commons.math3.linear.ArrayRealVector[] $r2;

        r0 := @this: org.apache.commons.math3.linear.EigenDecomposition;

        $i0 := @parameter0: int;

        $r2 = r0.<org.apache.commons.math3.linear.EigenDecomposition: org.apache.commons.math3.linear.ArrayRealVector[] eigenvectors>;

        $r1 = $r2[$i0];

        $r1 = virtualinvoke $r1.<org.apache.commons.math3.linear.ArrayRealVector: org.apache.commons.math3.linear.ArrayRealVector copy()>();

        return $r1;
    }
    public double getImagEigenvalue(int)
    {
        org.apache.commons.math3.linear.EigenDecomposition r0;
        int $i0;
        double[] $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.EigenDecomposition;

        $i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] imagEigenvalues>;

        $d0 = $r1[$i0];

        return $d0;
    }
    public double[] getImagEigenvalues()
    {
        org.apache.commons.math3.linear.EigenDecomposition r0;
        java.lang.Object $r1;
        double[] $r2;

        r0 := @this: org.apache.commons.math3.linear.EigenDecomposition;

        $r2 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] imagEigenvalues>;

        $r1 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (double[]) $r1;

        return $r2;
    }
    public double getRealEigenvalue(int)
    {
        org.apache.commons.math3.linear.EigenDecomposition r0;
        int $i0;
        double[] $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.EigenDecomposition;

        $i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] realEigenvalues>;

        $d0 = $r1[$i0];

        return $d0;
    }
    public double[] getRealEigenvalues()
    {
        org.apache.commons.math3.linear.EigenDecomposition r0;
        java.lang.Object $r1;
        double[] $r2;

        r0 := @this: org.apache.commons.math3.linear.EigenDecomposition;

        $r2 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] realEigenvalues>;

        $r1 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (double[]) $r1;

        return $r2;
    }
    public org.apache.commons.math3.linear.DecompositionSolver getSolver()
    {
        org.apache.commons.math3.linear.EigenDecomposition r0;
        double[] $r1, $r2;
        org.apache.commons.math3.linear.ArrayRealVector[] $r3;
        boolean $z0;
        org.apache.commons.math3.exception.MathUnsupportedOperationException $r4;
        org.apache.commons.math3.linear.EigenDecomposition$Solver $r5;

        r0 := @this: org.apache.commons.math3.linear.EigenDecomposition;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.linear.EigenDecomposition: boolean hasComplexEigenvalues()>();

        if $z0 == 0 goto label1;

        $r4 = new org.apache.commons.math3.exception.MathUnsupportedOperationException;

        specialinvoke $r4.<org.apache.commons.math3.exception.MathUnsupportedOperationException: void <init>()>();

        throw $r4;

     label1:
        $r5 = new org.apache.commons.math3.linear.EigenDecomposition$Solver;

        $r1 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] realEigenvalues>;

        $r2 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] imagEigenvalues>;

        $r3 = r0.<org.apache.commons.math3.linear.EigenDecomposition: org.apache.commons.math3.linear.ArrayRealVector[] eigenvectors>;

        specialinvoke $r5.<org.apache.commons.math3.linear.EigenDecomposition$Solver: void <init>(double[],double[],org.apache.commons.math3.linear.ArrayRealVector[],org.apache.commons.math3.linear.EigenDecomposition$1)>($r1, $r2, $r3, null);

        return $r5;
    }
    public org.apache.commons.math3.linear.RealMatrix getSquareRoot()
    {
        org.apache.commons.math3.linear.EigenDecomposition r0;
        double d0;
        double[] r1, $r3;
        boolean $z0;
        org.apache.commons.math3.exception.MathUnsupportedOperationException $r2;
        int $i0, $i1;
        byte $b2;
        org.apache.commons.math3.linear.RealMatrix $r4, $r5, $r6;

        r0 := @this: org.apache.commons.math3.linear.EigenDecomposition;

        $z0 = r0.<org.apache.commons.math3.linear.EigenDecomposition: boolean isSymmetric>;

        if $z0 != 0 goto label1;

        $r2 = new org.apache.commons.math3.exception.MathUnsupportedOperationException;

        specialinvoke $r2.<org.apache.commons.math3.exception.MathUnsupportedOperationException: void <init>()>();

        throw $r2;

     label1:
        r1 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] realEigenvalues>;

        $i0 = lengthof r1;

        r1 = newarray (double)[$i0];

        $i0 = 0;

     label2:
        $r3 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] realEigenvalues>;

        $i1 = lengthof $r3;

        if $i0 >= $i1 goto label4;

        $r3 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] realEigenvalues>;

        d0 = $r3[$i0];

        $b2 = d0 cmpg 0.0;

        if $b2 > 0 goto label3;

        $r2 = new org.apache.commons.math3.exception.MathUnsupportedOperationException;

        specialinvoke $r2.<org.apache.commons.math3.exception.MathUnsupportedOperationException: void <init>()>();

        throw $r2;

     label3:
        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d0);

        r1[$i0] = d0;

        $i0 = $i0 + 1;

        goto label2;

     label4:
        $r4 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix createRealDiagonalMatrix(double[])>(r1);

        $r5 = virtualinvoke r0.<org.apache.commons.math3.linear.EigenDecomposition: org.apache.commons.math3.linear.RealMatrix getV()>();

        $r6 = virtualinvoke r0.<org.apache.commons.math3.linear.EigenDecomposition: org.apache.commons.math3.linear.RealMatrix getVT()>();

        $r4 = interfaceinvoke $r5.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>($r4);

        $r6 = interfaceinvoke $r4.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>($r6);

        return $r6;
    }
    public org.apache.commons.math3.linear.RealMatrix getV()
    {
        org.apache.commons.math3.linear.EigenDecomposition r0;
        int i0, i1;
        org.apache.commons.math3.linear.RealMatrix $r1;
        org.apache.commons.math3.linear.ArrayRealVector[] $r2;
        org.apache.commons.math3.linear.ArrayRealVector $r3;

        r0 := @this: org.apache.commons.math3.linear.EigenDecomposition;

        $r1 = r0.<org.apache.commons.math3.linear.EigenDecomposition: org.apache.commons.math3.linear.RealMatrix cachedV>;

        if $r1 != null goto label2;

        $r2 = r0.<org.apache.commons.math3.linear.EigenDecomposition: org.apache.commons.math3.linear.ArrayRealVector[] eigenvectors>;

        i0 = lengthof $r2;

        $r1 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix createRealMatrix(int,int)>(i0, i0);

        r0.<org.apache.commons.math3.linear.EigenDecomposition: org.apache.commons.math3.linear.RealMatrix cachedV> = $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r1 = r0.<org.apache.commons.math3.linear.EigenDecomposition: org.apache.commons.math3.linear.RealMatrix cachedV>;

        $r2 = r0.<org.apache.commons.math3.linear.EigenDecomposition: org.apache.commons.math3.linear.ArrayRealVector[] eigenvectors>;

        $r3 = $r2[i1];

        interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: void setColumnVector(int,org.apache.commons.math3.linear.RealVector)>(i1, $r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r1 = r0.<org.apache.commons.math3.linear.EigenDecomposition: org.apache.commons.math3.linear.RealMatrix cachedV>;

        return $r1;
    }
    public org.apache.commons.math3.linear.RealMatrix getVT()
    {
        org.apache.commons.math3.linear.EigenDecomposition r0;
        int i0, i1;
        org.apache.commons.math3.linear.RealMatrix $r1;
        org.apache.commons.math3.linear.ArrayRealVector[] $r2;
        org.apache.commons.math3.linear.ArrayRealVector $r3;

        r0 := @this: org.apache.commons.math3.linear.EigenDecomposition;

        $r1 = r0.<org.apache.commons.math3.linear.EigenDecomposition: org.apache.commons.math3.linear.RealMatrix cachedVt>;

        if $r1 != null goto label2;

        $r2 = r0.<org.apache.commons.math3.linear.EigenDecomposition: org.apache.commons.math3.linear.ArrayRealVector[] eigenvectors>;

        i0 = lengthof $r2;

        $r1 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix createRealMatrix(int,int)>(i0, i0);

        r0.<org.apache.commons.math3.linear.EigenDecomposition: org.apache.commons.math3.linear.RealMatrix cachedVt> = $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r1 = r0.<org.apache.commons.math3.linear.EigenDecomposition: org.apache.commons.math3.linear.RealMatrix cachedVt>;

        $r2 = r0.<org.apache.commons.math3.linear.EigenDecomposition: org.apache.commons.math3.linear.ArrayRealVector[] eigenvectors>;

        $r3 = $r2[i1];

        interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: void setRowVector(int,org.apache.commons.math3.linear.RealVector)>(i1, $r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r1 = r0.<org.apache.commons.math3.linear.EigenDecomposition: org.apache.commons.math3.linear.RealMatrix cachedVt>;

        return $r1;
    }
    public boolean hasComplexEigenvalues()
    {
        org.apache.commons.math3.linear.EigenDecomposition r0;
        boolean $z0;
        int i0, $i1;
        double[] $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.EigenDecomposition;

        i0 = 0;

     label1:
        $r1 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] imagEigenvalues>;

        $i1 = lengthof $r1;

        if i0 >= $i1 goto label3;

        $r1 = r0.<org.apache.commons.math3.linear.EigenDecomposition: double[] imagEigenvalues>;

        $d0 = $r1[i0];

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,double)>($d0, 0.0, 1.0E-12);

        if $z0 != 0 goto label2;

        return 1;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return 0;
    }
