org.apache.commons.math3.linear.LUDecomposition$Solver extends java.lang.Object implements org.apache.commons.math3.linear.DecompositionSolver
private final double[][] lu
private final int[] pivot
private final boolean singular
    private void <init>(double[][], int[], boolean)
    {
        org.apache.commons.math3.linear.LUDecomposition$Solver r0;
        double[][] $r1;
        int[] $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.linear.LUDecomposition$Solver;

        $r1 := @parameter0: double[][];

        $r2 := @parameter1: int[];

        $z0 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.linear.LUDecomposition$Solver: double[][] lu> = $r1;

        r0.<org.apache.commons.math3.linear.LUDecomposition$Solver: int[] pivot> = $r2;

        r0.<org.apache.commons.math3.linear.LUDecomposition$Solver: boolean singular> = $z0;

        return;
    }
    void <init>(double[][], int[], boolean, org.apache.commons.math3.linear.LUDecomposition$1)
    {
        org.apache.commons.math3.linear.LUDecomposition$Solver r0;
        double[][] $r1;
        int[] $r2;
        boolean $z0;
        org.apache.commons.math3.linear.LUDecomposition$1 $r3;

        r0 := @this: org.apache.commons.math3.linear.LUDecomposition$Solver;

        $r1 := @parameter0: double[][];

        $r2 := @parameter1: int[];

        $z0 := @parameter2: boolean;

        $r3 := @parameter3: org.apache.commons.math3.linear.LUDecomposition$1;

        specialinvoke r0.<org.apache.commons.math3.linear.LUDecomposition$Solver: void <init>(double[][],int[],boolean)>($r1, $r2, $z0);

        return;
    }
    public org.apache.commons.math3.linear.RealMatrix getInverse()
    {
        org.apache.commons.math3.linear.LUDecomposition$Solver r0;
        int[] $r1;
        int $i0;
        org.apache.commons.math3.linear.RealMatrix $r2;

        r0 := @this: org.apache.commons.math3.linear.LUDecomposition$Solver;

        $r1 = r0.<org.apache.commons.math3.linear.LUDecomposition$Solver: int[] pivot>;

        $i0 = lengthof $r1;

        $r2 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix createRealIdentityMatrix(int)>($i0);

        $r2 = virtualinvoke r0.<org.apache.commons.math3.linear.LUDecomposition$Solver: org.apache.commons.math3.linear.RealMatrix solve(org.apache.commons.math3.linear.RealMatrix)>($r2);

        return $r2;
    }
    public boolean isNonSingular()
    {
        org.apache.commons.math3.linear.LUDecomposition$Solver r0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.linear.LUDecomposition$Solver;

        $z0 = r0.<org.apache.commons.math3.linear.LUDecomposition$Solver: boolean singular>;

        if $z0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public org.apache.commons.math3.linear.RealMatrix solve(org.apache.commons.math3.linear.RealMatrix)
    {
        org.apache.commons.math3.linear.LUDecomposition$Solver r0;
        org.apache.commons.math3.linear.RealMatrix $r1;
        double[] r2, r9, $r11;
        int i0, i1, $i2, i3, i4;
        double d0, $d1, $d2;
        int[] $r3;
        org.apache.commons.math3.exception.DimensionMismatchException $r4;
        boolean $z0;
        org.apache.commons.math3.linear.SingularMatrixException $r5;
        java.lang.Class $r6;
        java.lang.Object $r7;
        double[][] r8, $r10;
        org.apache.commons.math3.linear.Array2DRowRealMatrix $r12;

        r0 := @this: org.apache.commons.math3.linear.LUDecomposition$Solver;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        $r3 = r0.<org.apache.commons.math3.linear.LUDecomposition$Solver: int[] pivot>;

        i0 = lengthof $r3;

        $i2 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        if $i2 == i0 goto label01;

        $r4 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i2 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        specialinvoke $r4.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i2, i0);

        throw $r4;

     label01:
        $z0 = r0.<org.apache.commons.math3.linear.LUDecomposition$Solver: boolean singular>;

        if $z0 == 0 goto label02;

        $r5 = new org.apache.commons.math3.linear.SingularMatrixException;

        specialinvoke $r5.<org.apache.commons.math3.linear.SingularMatrixException: void <init>()>();

        throw $r5;

     label02:
        $i2 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        $r3 = newarray (int)[2];

        $r3[0] = i0;

        $r3[1] = $i2;

        $r6 = <java.lang.Double: java.lang.Class TYPE>;

        $r7 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r6, $r3);

        r8 = (double[][]) $r7;

        i3 = 0;

     label03:
        if i3 >= i0 goto label06;

        r2 = r8[i3];

        $r3 = r0.<org.apache.commons.math3.linear.LUDecomposition$Solver: int[] pivot>;

        i1 = $r3[i3];

        i4 = 0;

     label04:
        if i4 >= $i2 goto label05;

        d0 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>(i1, i4);

        r2[i4] = d0;

        i4 = i4 + 1;

        goto label04;

     label05:
        i3 = i3 + 1;

        goto label03;

     label06:
        i1 = 0;

     label07:
        if i1 >= i0 goto label12;

        r2 = r8[i1];

        i3 = i1 + 1;

     label08:
        if i3 >= i0 goto label11;

        r9 = r8[i3];

        $r10 = r0.<org.apache.commons.math3.linear.LUDecomposition$Solver: double[][] lu>;

        $r11 = $r10[i3];

        d0 = $r11[i1];

        i4 = 0;

     label09:
        if i4 >= $i2 goto label10;

        $d1 = r9[i4];

        $d2 = r2[i4];

        $d2 = $d2 * d0;

        $d1 = $d1 - $d2;

        r9[i4] = $d1;

        i4 = i4 + 1;

        goto label09;

     label10:
        i3 = i3 + 1;

        goto label08;

     label11:
        i1 = i1 + 1;

        goto label07;

     label12:
        i0 = i0 + -1;

     label13:
        if i0 < 0 goto label20;

        r2 = r8[i0];

        $r10 = r0.<org.apache.commons.math3.linear.LUDecomposition$Solver: double[][] lu>;

        r9 = $r10[i0];

        d0 = r9[i0];

        i1 = 0;

     label14:
        if i1 >= $i2 goto label15;

        $d1 = r2[i1];

        $d1 = $d1 / d0;

        r2[i1] = $d1;

        i1 = i1 + 1;

        goto label14;

     label15:
        i1 = 0;

     label16:
        if i1 >= i0 goto label19;

        r9 = r8[i1];

        $r10 = r0.<org.apache.commons.math3.linear.LUDecomposition$Solver: double[][] lu>;

        $r11 = $r10[i1];

        d0 = $r11[i0];

        i3 = 0;

     label17:
        if i3 >= $i2 goto label18;

        $d1 = r9[i3];

        $d2 = r2[i3];

        $d2 = $d2 * d0;

        $d1 = $d1 - $d2;

        r9[i3] = $d1;

        i3 = i3 + 1;

        goto label17;

     label18:
        i1 = i1 + 1;

        goto label16;

     label19:
        i0 = i0 + -1;

        goto label13;

     label20:
        $r12 = new org.apache.commons.math3.linear.Array2DRowRealMatrix;

        specialinvoke $r12.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void <init>(double[][],boolean)>(r8, 0);

        return $r12;
    }
    public org.apache.commons.math3.linear.RealVector solve(org.apache.commons.math3.linear.RealVector)
    {
        org.apache.commons.math3.linear.LUDecomposition$Solver r0;
        org.apache.commons.math3.linear.RealVector $r1;
        double[] r2, $r7;
        int i0, $i1, $i2;
        int[] $r3;
        org.apache.commons.math3.exception.DimensionMismatchException $r4;
        boolean $z0;
        org.apache.commons.math3.linear.SingularMatrixException $r5;
        double $d0, $d1, $d2;
        double[][] $r6;
        org.apache.commons.math3.linear.ArrayRealVector $r8;

        r0 := @this: org.apache.commons.math3.linear.LUDecomposition$Solver;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealVector;

        $r3 = r0.<org.apache.commons.math3.linear.LUDecomposition$Solver: int[] pivot>;

        i0 = lengthof $r3;

        $i1 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        if $i1 == i0 goto label01;

        $r4 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i1 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        specialinvoke $r4.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i1, i0);

        throw $r4;

     label01:
        $z0 = r0.<org.apache.commons.math3.linear.LUDecomposition$Solver: boolean singular>;

        if $z0 == 0 goto label02;

        $r5 = new org.apache.commons.math3.linear.SingularMatrixException;

        specialinvoke $r5.<org.apache.commons.math3.linear.SingularMatrixException: void <init>()>();

        throw $r5;

     label02:
        r2 = newarray (double)[i0];

        $i1 = 0;

     label03:
        if $i1 >= i0 goto label04;

        $r3 = r0.<org.apache.commons.math3.linear.LUDecomposition$Solver: int[] pivot>;

        $i2 = $r3[$i1];

        $d0 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>($i2);

        r2[$i1] = $d0;

        $i1 = $i1 + 1;

        goto label03;

     label04:
        $i1 = 0;

     label05:
        if $i1 >= i0 goto label08;

        $d0 = r2[$i1];

        $i2 = $i1 + 1;

     label06:
        if $i2 >= i0 goto label07;

        $d1 = r2[$i2];

        $r6 = r0.<org.apache.commons.math3.linear.LUDecomposition$Solver: double[][] lu>;

        $r7 = $r6[$i2];

        $d2 = $r7[$i1];

        $d2 = $d2 * $d0;

        $d1 = $d1 - $d2;

        r2[$i2] = $d1;

        $i2 = $i2 + 1;

        goto label06;

     label07:
        $i1 = $i1 + 1;

        goto label05;

     label08:
        i0 = i0 + -1;

     label09:
        if i0 < 0 goto label12;

        $d0 = r2[i0];

        $r6 = r0.<org.apache.commons.math3.linear.LUDecomposition$Solver: double[][] lu>;

        $r7 = $r6[i0];

        $d1 = $r7[i0];

        $d0 = $d0 / $d1;

        r2[i0] = $d0;

        $d0 = r2[i0];

        $i1 = 0;

     label10:
        if $i1 >= i0 goto label11;

        $d1 = r2[$i1];

        $r6 = r0.<org.apache.commons.math3.linear.LUDecomposition$Solver: double[][] lu>;

        $r7 = $r6[$i1];

        $d2 = $r7[i0];

        $d2 = $d2 * $d0;

        $d1 = $d1 - $d2;

        r2[$i1] = $d1;

        $i1 = $i1 + 1;

        goto label10;

     label11:
        i0 = i0 + -1;

        goto label09;

     label12:
        $r8 = new org.apache.commons.math3.linear.ArrayRealVector;

        specialinvoke $r8.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(double[],boolean)>(r2, 0);

        return $r8;
    }
