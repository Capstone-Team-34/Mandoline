org.apache.commons.math3.linear.CholeskyDecomposition$Solver extends java.lang.Object implements org.apache.commons.math3.linear.DecompositionSolver
private final double[][] lTData
    private void <init>(double[][])
    {
        org.apache.commons.math3.linear.CholeskyDecomposition$Solver r0;
        double[][] $r1;

        r0 := @this: org.apache.commons.math3.linear.CholeskyDecomposition$Solver;

        $r1 := @parameter0: double[][];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.linear.CholeskyDecomposition$Solver: double[][] lTData> = $r1;

        return;
    }
    void <init>(double[][], org.apache.commons.math3.linear.CholeskyDecomposition$1)
    {
        org.apache.commons.math3.linear.CholeskyDecomposition$Solver r0;
        double[][] $r1;
        org.apache.commons.math3.linear.CholeskyDecomposition$1 $r2;

        r0 := @this: org.apache.commons.math3.linear.CholeskyDecomposition$Solver;

        $r1 := @parameter0: double[][];

        $r2 := @parameter1: org.apache.commons.math3.linear.CholeskyDecomposition$1;

        specialinvoke r0.<org.apache.commons.math3.linear.CholeskyDecomposition$Solver: void <init>(double[][])>($r1);

        return;
    }
    public org.apache.commons.math3.linear.RealMatrix getInverse()
    {
        org.apache.commons.math3.linear.CholeskyDecomposition$Solver r0;
        double[][] $r1;
        int $i0;
        org.apache.commons.math3.linear.RealMatrix $r2;

        r0 := @this: org.apache.commons.math3.linear.CholeskyDecomposition$Solver;

        $r1 = r0.<org.apache.commons.math3.linear.CholeskyDecomposition$Solver: double[][] lTData>;

        $i0 = lengthof $r1;

        $r2 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix createRealIdentityMatrix(int)>($i0);

        $r2 = virtualinvoke r0.<org.apache.commons.math3.linear.CholeskyDecomposition$Solver: org.apache.commons.math3.linear.RealMatrix solve(org.apache.commons.math3.linear.RealMatrix)>($r2);

        return $r2;
    }
    public boolean isNonSingular()
    {
        org.apache.commons.math3.linear.CholeskyDecomposition$Solver r0;

        r0 := @this: org.apache.commons.math3.linear.CholeskyDecomposition$Solver;

        return 1;
    }
    public org.apache.commons.math3.linear.RealMatrix solve(org.apache.commons.math3.linear.RealMatrix)
    {
        org.apache.commons.math3.linear.CholeskyDecomposition$Solver r0;
        org.apache.commons.math3.linear.RealMatrix $r1;
        double[] r2, r6, r7;
        double d0, $d1, $d2;
        int i0, $i1, i2, i3, i4;
        double[][] $r3, $r5;
        org.apache.commons.math3.exception.DimensionMismatchException $r4;
        org.apache.commons.math3.linear.Array2DRowRealMatrix $r8;

        r0 := @this: org.apache.commons.math3.linear.CholeskyDecomposition$Solver;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        $r3 = r0.<org.apache.commons.math3.linear.CholeskyDecomposition$Solver: double[][] lTData>;

        i0 = lengthof $r3;

        $i1 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        if $i1 == i0 goto label01;

        $r4 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i1 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        specialinvoke $r4.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i1, i0);

        throw $r4;

     label01:
        $i1 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        $r3 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: double[][] getData()>();

        i2 = 0;

     label02:
        if i2 >= i0 goto label09;

        $r5 = r0.<org.apache.commons.math3.linear.CholeskyDecomposition$Solver: double[][] lTData>;

        r2 = $r5[i2];

        d0 = r2[i2];

        r6 = $r3[i2];

        i3 = 0;

     label03:
        if i3 >= $i1 goto label04;

        $d1 = r6[i3];

        $d1 = $d1 / d0;

        r6[i3] = $d1;

        i3 = i3 + 1;

        goto label03;

     label04:
        i3 = i2 + 1;

     label05:
        if i3 >= i0 goto label08;

        r7 = $r3[i3];

        d0 = r2[i3];

        i4 = 0;

     label06:
        if i4 >= $i1 goto label07;

        $d1 = r7[i4];

        $d2 = r6[i4];

        $d2 = $d2 * d0;

        $d1 = $d1 - $d2;

        r7[i4] = $d1;

        i4 = i4 + 1;

        goto label06;

     label07:
        i3 = i3 + 1;

        goto label05;

     label08:
        i2 = i2 + 1;

        goto label02;

     label09:
        i0 = i0 + -1;

     label10:
        if i0 < 0 goto label17;

        $r5 = r0.<org.apache.commons.math3.linear.CholeskyDecomposition$Solver: double[][] lTData>;

        r2 = $r5[i0];

        d0 = r2[i0];

        r2 = $r3[i0];

        i2 = 0;

     label11:
        if i2 >= $i1 goto label12;

        $d1 = r2[i2];

        $d1 = $d1 / d0;

        r2[i2] = $d1;

        i2 = i2 + 1;

        goto label11;

     label12:
        i2 = 0;

     label13:
        if i2 >= i0 goto label16;

        r6 = $r3[i2];

        $r5 = r0.<org.apache.commons.math3.linear.CholeskyDecomposition$Solver: double[][] lTData>;

        r7 = $r5[i2];

        d0 = r7[i0];

        i3 = 0;

     label14:
        if i3 >= $i1 goto label15;

        $d1 = r6[i3];

        $d2 = r2[i3];

        $d2 = $d2 * d0;

        $d1 = $d1 - $d2;

        r6[i3] = $d1;

        i3 = i3 + 1;

        goto label14;

     label15:
        i2 = i2 + 1;

        goto label13;

     label16:
        i0 = i0 + -1;

        goto label10;

     label17:
        $r8 = new org.apache.commons.math3.linear.Array2DRowRealMatrix;

        specialinvoke $r8.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void <init>(double[][])>($r3);

        return $r8;
    }
    public org.apache.commons.math3.linear.RealVector solve(org.apache.commons.math3.linear.RealVector)
    {
        org.apache.commons.math3.linear.CholeskyDecomposition$Solver r0;
        org.apache.commons.math3.linear.RealVector $r1;
        double[] r2, $r5;
        int i0, $i1, i2;
        double[][] $r3;
        org.apache.commons.math3.exception.DimensionMismatchException $r4;
        double $d0, $d1, $d2;
        org.apache.commons.math3.linear.ArrayRealVector $r6;

        r0 := @this: org.apache.commons.math3.linear.CholeskyDecomposition$Solver;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealVector;

        $r3 = r0.<org.apache.commons.math3.linear.CholeskyDecomposition$Solver: double[][] lTData>;

        i0 = lengthof $r3;

        $i1 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        if $i1 == i0 goto label1;

        $r4 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i1 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        specialinvoke $r4.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i1, i0);

        throw $r4;

     label1:
        $r5 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: double[] toArray()>();

        $i1 = 0;

     label2:
        if $i1 >= i0 goto label5;

        $r3 = r0.<org.apache.commons.math3.linear.CholeskyDecomposition$Solver: double[][] lTData>;

        r2 = $r3[$i1];

        $d0 = $r5[$i1];

        $d1 = r2[$i1];

        $d0 = $d0 / $d1;

        $r5[$i1] = $d0;

        $d0 = $r5[$i1];

        i2 = $i1 + 1;

     label3:
        if i2 >= i0 goto label4;

        $d1 = $r5[i2];

        $d2 = r2[i2];

        $d2 = $d2 * $d0;

        $d1 = $d1 - $d2;

        $r5[i2] = $d1;

        i2 = i2 + 1;

        goto label3;

     label4:
        $i1 = $i1 + 1;

        goto label2;

     label5:
        i0 = i0 + -1;

     label6:
        if i0 < 0 goto label9;

        $d0 = $r5[i0];

        $r3 = r0.<org.apache.commons.math3.linear.CholeskyDecomposition$Solver: double[][] lTData>;

        r2 = $r3[i0];

        $d1 = r2[i0];

        $d0 = $d0 / $d1;

        $r5[i0] = $d0;

        $d0 = $r5[i0];

        $i1 = 0;

     label7:
        if $i1 >= i0 goto label8;

        $d1 = $r5[$i1];

        $r3 = r0.<org.apache.commons.math3.linear.CholeskyDecomposition$Solver: double[][] lTData>;

        r2 = $r3[$i1];

        $d2 = r2[i0];

        $d2 = $d2 * $d0;

        $d1 = $d1 - $d2;

        $r5[$i1] = $d1;

        $i1 = $i1 + 1;

        goto label7;

     label8:
        i0 = i0 + -1;

        goto label6;

     label9:
        $r6 = new org.apache.commons.math3.linear.ArrayRealVector;

        specialinvoke $r6.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(double[],boolean)>($r5, 0);

        return $r6;
    }
