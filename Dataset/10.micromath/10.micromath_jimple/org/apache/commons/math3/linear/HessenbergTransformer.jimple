org.apache.commons.math3.linear.HessenbergTransformer extends java.lang.Object
private org.apache.commons.math3.linear.RealMatrix cachedH
private org.apache.commons.math3.linear.RealMatrix cachedP
private org.apache.commons.math3.linear.RealMatrix cachedPt
private final double[][] householderVectors
private final double[] ort
    void <init>(org.apache.commons.math3.linear.RealMatrix)
    {
        org.apache.commons.math3.linear.HessenbergTransformer r0;
        org.apache.commons.math3.linear.RealMatrix $r1;
        boolean $z0;
        org.apache.commons.math3.linear.NonSquareMatrixException $r2;
        int $i0, $i1;
        double[][] $r3;
        double[] $r4;

        r0 := @this: org.apache.commons.math3.linear.HessenbergTransformer;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: boolean isSquare()>();

        if $z0 != 0 goto label1;

        $r2 = new org.apache.commons.math3.linear.NonSquareMatrixException;

        $i0 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $i1 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        specialinvoke $r2.<org.apache.commons.math3.linear.NonSquareMatrixException: void <init>(int,int)>($i0, $i1);

        throw $r2;

     label1:
        $i0 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $r3 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: double[][] getData()>();

        r0.<org.apache.commons.math3.linear.HessenbergTransformer: double[][] householderVectors> = $r3;

        $r4 = newarray (double)[$i0];

        r0.<org.apache.commons.math3.linear.HessenbergTransformer: double[] ort> = $r4;

        r0.<org.apache.commons.math3.linear.HessenbergTransformer: org.apache.commons.math3.linear.RealMatrix cachedP> = null;

        r0.<org.apache.commons.math3.linear.HessenbergTransformer: org.apache.commons.math3.linear.RealMatrix cachedPt> = null;

        r0.<org.apache.commons.math3.linear.HessenbergTransformer: org.apache.commons.math3.linear.RealMatrix cachedH> = null;

        specialinvoke r0.<org.apache.commons.math3.linear.HessenbergTransformer: void transform()>();

        return;
    }
    private void transform()
    {
        org.apache.commons.math3.linear.HessenbergTransformer r0;
        int i0, i1, $i2, i3, $i4;
        double[][] $r1;
        double d0, $d1, d2, $d3, $d4, $d5;
        double[] $r2, $r3;
        boolean $z0;
        byte $b5;

        r0 := @this: org.apache.commons.math3.linear.HessenbergTransformer;

        $r1 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: double[][] householderVectors>;

        i1 = lengthof $r1;

        i0 = i1 + -1;

        i3 = 1;

     label01:
        $i2 = i0 + -1;

        if i3 > $i2 goto label21;

        d0 = 0.0;

        $i2 = i3;

     label02:
        if $i2 > i0 goto label03;

        $r1 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: double[][] householderVectors>;

        $r2 = $r1[$i2];

        $i4 = i3 + -1;

        $d1 = $r2[$i4];

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d1);

        d0 = d0 + $d1;

        $i2 = $i2 + 1;

        goto label02;

     label03:
        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double)>(d0, 0.0);

        if $z0 != 0 goto label20;

        d2 = 0.0;

        $i4 = i0;

     label04:
        if $i4 < i3 goto label05;

        $r2 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: double[] ort>;

        $r1 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: double[][] householderVectors>;

        $r3 = $r1[$i4];

        $i2 = i3 + -1;

        $d1 = $r3[$i2];

        $d1 = $d1 / d0;

        $r2[$i4] = $d1;

        $r2 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: double[] ort>;

        $d1 = $r2[$i4];

        $r2 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: double[] ort>;

        $d3 = $r2[$i4];

        $d1 = $d1 * $d3;

        d2 = d2 + $d1;

        $i4 = $i4 + -1;

        goto label04;

     label05:
        $r2 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: double[] ort>;

        $d1 = $r2[i3];

        $b5 = $d1 cmpl 0.0;

        if $b5 <= 0 goto label09;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d2);

        $d1 = neg $d1;

     label06:
        $r2 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: double[] ort>;

        $d3 = $r2[i3];

        $d3 = $d3 * $d1;

        d2 = d2 - $d3;

        $r2 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: double[] ort>;

        $d3 = $r2[i3];

        $d3 = $d3 - $d1;

        $r2[i3] = $d3;

        $i2 = i3;

     label07:
        if $i2 >= i1 goto label13;

        $d3 = 0.0;

        $i4 = i0;

     label08:
        if $i4 < i3 goto label10;

        $r2 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: double[] ort>;

        $d4 = $r2[$i4];

        $r1 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: double[][] householderVectors>;

        $r2 = $r1[$i4];

        $d5 = $r2[$i2];

        $d4 = $d4 * $d5;

        $d3 = $d3 + $d4;

        $i4 = $i4 + -1;

        goto label08;

     label09:
        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d2);

        goto label06;

     label10:
        $d3 = $d3 / d2;

        $i4 = i3;

     label11:
        if $i4 > i0 goto label12;

        $r1 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: double[][] householderVectors>;

        $r2 = $r1[$i4];

        $d4 = $r2[$i2];

        $r3 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: double[] ort>;

        $d5 = $r3[$i4];

        $d5 = $d5 * $d3;

        $d4 = $d4 - $d5;

        $r2[$i2] = $d4;

        $i4 = $i4 + 1;

        goto label11;

     label12:
        $i2 = $i2 + 1;

        goto label07;

     label13:
        $i2 = 0;

     label14:
        if $i2 > i0 goto label19;

        $d3 = 0.0;

        $i4 = i0;

     label15:
        if $i4 < i3 goto label16;

        $r2 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: double[] ort>;

        $d4 = $r2[$i4];

        $r1 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: double[][] householderVectors>;

        $r2 = $r1[$i2];

        $d5 = $r2[$i4];

        $d4 = $d4 * $d5;

        $d3 = $d3 + $d4;

        $i4 = $i4 + -1;

        goto label15;

     label16:
        $d3 = $d3 / d2;

        $i4 = i3;

     label17:
        if $i4 > i0 goto label18;

        $r1 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: double[][] householderVectors>;

        $r2 = $r1[$i2];

        $d4 = $r2[$i4];

        $r3 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: double[] ort>;

        $d5 = $r3[$i4];

        $d5 = $d5 * $d3;

        $d4 = $d4 - $d5;

        $r2[$i4] = $d4;

        $i4 = $i4 + 1;

        goto label17;

     label18:
        $i2 = $i2 + 1;

        goto label14;

     label19:
        $r2 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: double[] ort>;

        $r3 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: double[] ort>;

        d2 = $r3[i3];

        d2 = d2 * d0;

        $r2[i3] = d2;

        $r1 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: double[][] householderVectors>;

        $r2 = $r1[i3];

        $i2 = i3 + -1;

        d0 = d0 * $d1;

        $r2[$i2] = d0;

     label20:
        i3 = i3 + 1;

        goto label01;

     label21:
        return;
    }
    public org.apache.commons.math3.linear.RealMatrix getH()
    {
        org.apache.commons.math3.linear.HessenbergTransformer r0;
        int i0, $i1, i2, $i3;
        org.apache.commons.math3.linear.RealMatrix $r1;
        double[][] $r2, $r7;
        int[] $r3;
        java.lang.Class $r4;
        java.lang.Object $r5;
        double[] $r6, $r8;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.HessenbergTransformer;

        $r1 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: org.apache.commons.math3.linear.RealMatrix cachedH>;

        if $r1 != null goto label6;

        $r2 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: double[][] householderVectors>;

        i0 = lengthof $r2;

        $r3 = newarray (int)[2];

        $r3[0] = i0;

        $r3[1] = i0;

        $r4 = <java.lang.Double: java.lang.Class TYPE>;

        $r5 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r4, $r3);

        $r2 = (double[][]) $r5;

        i2 = 0;

     label1:
        if i2 >= i0 goto label5;

        if i2 <= 0 goto label2;

        $r6 = $r2[i2];

        $i3 = i2 + -1;

        $r7 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: double[][] householderVectors>;

        $r8 = $r7[i2];

        $i1 = i2 + -1;

        $d0 = $r8[$i1];

        $r6[$i3] = $d0;

     label2:
        $i1 = i2;

     label3:
        if $i1 >= i0 goto label4;

        $r6 = $r2[i2];

        $r7 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: double[][] householderVectors>;

        $r8 = $r7[i2];

        $d0 = $r8[$i1];

        $r6[$i1] = $d0;

        $i1 = $i1 + 1;

        goto label3;

     label4:
        i2 = i2 + 1;

        goto label1;

     label5:
        $r1 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix createRealMatrix(double[][])>($r2);

        r0.<org.apache.commons.math3.linear.HessenbergTransformer: org.apache.commons.math3.linear.RealMatrix cachedH> = $r1;

     label6:
        $r1 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: org.apache.commons.math3.linear.RealMatrix cachedH>;

        return $r1;
    }
    double[][] getHouseholderVectorsRef()
    {
        org.apache.commons.math3.linear.HessenbergTransformer r0;
        double[][] r1;

        r0 := @this: org.apache.commons.math3.linear.HessenbergTransformer;

        r1 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: double[][] householderVectors>;

        return r1;
    }
    public org.apache.commons.math3.linear.RealMatrix getP()
    {
        org.apache.commons.math3.linear.HessenbergTransformer r0;
        int i0, i1, $i2, i3;
        org.apache.commons.math3.linear.RealMatrix $r1;
        double[][] $r2, $r7;
        int[] $r3;
        java.lang.Class $r4;
        java.lang.Object $r5;
        double[] $r6, $r8;
        double $d0, $d1, $d2;
        byte $b4;

        r0 := @this: org.apache.commons.math3.linear.HessenbergTransformer;

        $r1 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: org.apache.commons.math3.linear.RealMatrix cachedP>;

        if $r1 != null goto label17;

        $r2 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: double[][] householderVectors>;

        i1 = lengthof $r2;

        i0 = i1 + -1;

        $r3 = newarray (int)[2];

        $r3[0] = i1;

        $r3[1] = i1;

        $r4 = <java.lang.Double: java.lang.Class TYPE>;

        $r5 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r4, $r3);

        $r2 = (double[][]) $r5;

        i3 = 0;

     label01:
        if i3 >= i1 goto label06;

        $i2 = 0;

     label02:
        if $i2 >= i1 goto label05;

        $r6 = $r2[i3];

        if i3 != $i2 goto label04;

        $d0 = 1.0;

     label03:
        $r6[$i2] = $d0;

        $i2 = $i2 + 1;

        goto label02;

     label04:
        $d0 = 0.0;

        goto label03;

     label05:
        i3 = i3 + 1;

        goto label01;

     label06:
        i1 = i0 + -1;

     label07:
        if i1 < 1 goto label16;

        $r7 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: double[][] householderVectors>;

        $r6 = $r7[i1];

        i3 = i1 + -1;

        $d0 = $r6[i3];

        $b4 = $d0 cmpl 0.0;

        if $b4 == 0 goto label15;

        i3 = i1 + 1;

     label08:
        if i3 > i0 goto label09;

        $r6 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: double[] ort>;

        $r7 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: double[][] householderVectors>;

        $r8 = $r7[i3];

        $i2 = i1 + -1;

        $d0 = $r8[$i2];

        $r6[i3] = $d0;

        i3 = i3 + 1;

        goto label08;

     label09:
        i3 = i1;

     label10:
        if i3 > i0 goto label15;

        $d0 = 0.0;

        $i2 = i1;

     label11:
        if $i2 > i0 goto label12;

        $r6 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: double[] ort>;

        $d1 = $r6[$i2];

        $r6 = $r2[$i2];

        $d2 = $r6[i3];

        $d1 = $d1 * $d2;

        $d0 = $d0 + $d1;

        $i2 = $i2 + 1;

        goto label11;

     label12:
        $r6 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: double[] ort>;

        $d1 = $r6[i1];

        $d0 = $d0 / $d1;

        $r7 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: double[][] householderVectors>;

        $r6 = $r7[i1];

        $i2 = i1 + -1;

        $d1 = $r6[$i2];

        $d0 = $d0 / $d1;

        $i2 = i1;

     label13:
        if $i2 > i0 goto label14;

        $r6 = $r2[$i2];

        $d1 = $r6[i3];

        $r8 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: double[] ort>;

        $d2 = $r8[$i2];

        $d2 = $d2 * $d0;

        $d1 = $d1 + $d2;

        $r6[i3] = $d1;

        $i2 = $i2 + 1;

        goto label13;

     label14:
        i3 = i3 + 1;

        goto label10;

     label15:
        i1 = i1 + -1;

        goto label07;

     label16:
        $r1 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix createRealMatrix(double[][])>($r2);

        r0.<org.apache.commons.math3.linear.HessenbergTransformer: org.apache.commons.math3.linear.RealMatrix cachedP> = $r1;

     label17:
        $r1 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: org.apache.commons.math3.linear.RealMatrix cachedP>;

        return $r1;
    }
    public org.apache.commons.math3.linear.RealMatrix getPT()
    {
        org.apache.commons.math3.linear.HessenbergTransformer r0;
        org.apache.commons.math3.linear.RealMatrix $r1;

        r0 := @this: org.apache.commons.math3.linear.HessenbergTransformer;

        $r1 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: org.apache.commons.math3.linear.RealMatrix cachedPt>;

        if $r1 != null goto label1;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.linear.HessenbergTransformer: org.apache.commons.math3.linear.RealMatrix getP()>();

        $r1 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix transpose()>();

        r0.<org.apache.commons.math3.linear.HessenbergTransformer: org.apache.commons.math3.linear.RealMatrix cachedPt> = $r1;

     label1:
        $r1 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: org.apache.commons.math3.linear.RealMatrix cachedPt>;

        return $r1;
    }
