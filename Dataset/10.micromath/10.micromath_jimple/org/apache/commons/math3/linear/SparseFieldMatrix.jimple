org.apache.commons.math3.linear.SparseFieldMatrix extends org.apache.commons.math3.linear.AbstractFieldMatrix
private final int columns
private final org.apache.commons.math3.util.OpenIntToFieldHashMap entries
private final int rows
    public void <init>(org.apache.commons.math3.Field)
    {
        org.apache.commons.math3.linear.SparseFieldMatrix r0;
        org.apache.commons.math3.Field r1;
        org.apache.commons.math3.util.OpenIntToFieldHashMap $r2;

        r0 := @this: org.apache.commons.math3.linear.SparseFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.Field;

        specialinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: void <init>(org.apache.commons.math3.Field)>(r1);

        r0.<org.apache.commons.math3.linear.SparseFieldMatrix: int rows> = 0;

        r0.<org.apache.commons.math3.linear.SparseFieldMatrix: int columns> = 0;

        $r2 = new org.apache.commons.math3.util.OpenIntToFieldHashMap;

        specialinvoke $r2.<org.apache.commons.math3.util.OpenIntToFieldHashMap: void <init>(org.apache.commons.math3.Field)>(r1);

        r0.<org.apache.commons.math3.linear.SparseFieldMatrix: org.apache.commons.math3.util.OpenIntToFieldHashMap entries> = $r2;

        return;
    }
    public void <init>(org.apache.commons.math3.Field, int, int)
    {
        org.apache.commons.math3.linear.SparseFieldMatrix r0;
        org.apache.commons.math3.Field r1;
        int $i0, $i1;
        org.apache.commons.math3.util.OpenIntToFieldHashMap $r2;

        r0 := @this: org.apache.commons.math3.linear.SparseFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.Field;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        specialinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: void <init>(org.apache.commons.math3.Field,int,int)>(r1, $i0, $i1);

        r0.<org.apache.commons.math3.linear.SparseFieldMatrix: int rows> = $i0;

        r0.<org.apache.commons.math3.linear.SparseFieldMatrix: int columns> = $i1;

        $r2 = new org.apache.commons.math3.util.OpenIntToFieldHashMap;

        specialinvoke $r2.<org.apache.commons.math3.util.OpenIntToFieldHashMap: void <init>(org.apache.commons.math3.Field)>(r1);

        r0.<org.apache.commons.math3.linear.SparseFieldMatrix: org.apache.commons.math3.util.OpenIntToFieldHashMap entries> = $r2;

        return;
    }
    public void <init>(org.apache.commons.math3.linear.FieldMatrix)
    {
        org.apache.commons.math3.linear.SparseFieldMatrix r0;
        org.apache.commons.math3.linear.FieldMatrix r1;
        org.apache.commons.math3.Field $r2;
        int $i0, $i1, $i2;
        org.apache.commons.math3.util.OpenIntToFieldHashMap $r3;
        org.apache.commons.math3.FieldElement $r4;

        r0 := @this: org.apache.commons.math3.linear.SparseFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldMatrix;

        $r2 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrix: org.apache.commons.math3.Field getField()>();

        $i0 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrix: int getRowDimension()>();

        $i1 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrix: int getColumnDimension()>();

        specialinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: void <init>(org.apache.commons.math3.Field,int,int)>($r2, $i0, $i1);

        $i0 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrix: int getRowDimension()>();

        r0.<org.apache.commons.math3.linear.SparseFieldMatrix: int rows> = $i0;

        $i0 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrix: int getColumnDimension()>();

        r0.<org.apache.commons.math3.linear.SparseFieldMatrix: int columns> = $i0;

        $r3 = new org.apache.commons.math3.util.OpenIntToFieldHashMap;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.linear.SparseFieldMatrix: org.apache.commons.math3.Field getField()>();

        specialinvoke $r3.<org.apache.commons.math3.util.OpenIntToFieldHashMap: void <init>(org.apache.commons.math3.Field)>($r2);

        r0.<org.apache.commons.math3.linear.SparseFieldMatrix: org.apache.commons.math3.util.OpenIntToFieldHashMap entries> = $r3;

        $i0 = 0;

     label1:
        $i1 = r0.<org.apache.commons.math3.linear.SparseFieldMatrix: int rows>;

        if $i0 >= $i1 goto label4;

        $i1 = 0;

     label2:
        $i2 = r0.<org.apache.commons.math3.linear.SparseFieldMatrix: int columns>;

        if $i1 >= $i2 goto label3;

        $r4 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrix: org.apache.commons.math3.FieldElement getEntry(int,int)>($i0, $i1);

        virtualinvoke r0.<org.apache.commons.math3.linear.SparseFieldMatrix: void setEntry(int,int,org.apache.commons.math3.FieldElement)>($i0, $i1, $r4);

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $i0 = $i0 + 1;

        goto label1;

     label4:
        return;
    }
    public void <init>(org.apache.commons.math3.linear.SparseFieldMatrix)
    {
        org.apache.commons.math3.linear.SparseFieldMatrix r0, r1;
        org.apache.commons.math3.Field $r2;
        int $i0, $i1;
        org.apache.commons.math3.util.OpenIntToFieldHashMap $r3, $r4;

        r0 := @this: org.apache.commons.math3.linear.SparseFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.SparseFieldMatrix;

        $r2 = virtualinvoke r1.<org.apache.commons.math3.linear.SparseFieldMatrix: org.apache.commons.math3.Field getField()>();

        $i0 = virtualinvoke r1.<org.apache.commons.math3.linear.SparseFieldMatrix: int getRowDimension()>();

        $i1 = virtualinvoke r1.<org.apache.commons.math3.linear.SparseFieldMatrix: int getColumnDimension()>();

        specialinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: void <init>(org.apache.commons.math3.Field,int,int)>($r2, $i0, $i1);

        $i0 = virtualinvoke r1.<org.apache.commons.math3.linear.SparseFieldMatrix: int getRowDimension()>();

        r0.<org.apache.commons.math3.linear.SparseFieldMatrix: int rows> = $i0;

        $i0 = virtualinvoke r1.<org.apache.commons.math3.linear.SparseFieldMatrix: int getColumnDimension()>();

        r0.<org.apache.commons.math3.linear.SparseFieldMatrix: int columns> = $i0;

        $r3 = new org.apache.commons.math3.util.OpenIntToFieldHashMap;

        $r4 = r1.<org.apache.commons.math3.linear.SparseFieldMatrix: org.apache.commons.math3.util.OpenIntToFieldHashMap entries>;

        specialinvoke $r3.<org.apache.commons.math3.util.OpenIntToFieldHashMap: void <init>(org.apache.commons.math3.util.OpenIntToFieldHashMap)>($r4);

        r0.<org.apache.commons.math3.linear.SparseFieldMatrix: org.apache.commons.math3.util.OpenIntToFieldHashMap entries> = $r3;

        return;
    }
    private int computeKey(int, int)
    {
        org.apache.commons.math3.linear.SparseFieldMatrix r0;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.commons.math3.linear.SparseFieldMatrix;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 = r0.<org.apache.commons.math3.linear.SparseFieldMatrix: int columns>;

        $i0 = $i2 * $i0;

        $i0 = $i0 + $i1;

        return $i0;
    }
    public void addToEntry(int, int, org.apache.commons.math3.FieldElement)
    {
        org.apache.commons.math3.linear.SparseFieldMatrix r0;
        int $i0, $i1;
        org.apache.commons.math3.FieldElement r1, $r3;
        org.apache.commons.math3.util.OpenIntToFieldHashMap $r2;
        java.lang.Object $r4;
        org.apache.commons.math3.Field $r5;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.linear.SparseFieldMatrix;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        r1 := @parameter2: org.apache.commons.math3.FieldElement;

        virtualinvoke r0.<org.apache.commons.math3.linear.SparseFieldMatrix: void checkRowIndex(int)>($i0);

        virtualinvoke r0.<org.apache.commons.math3.linear.SparseFieldMatrix: void checkColumnIndex(int)>($i1);

        $i0 = specialinvoke r0.<org.apache.commons.math3.linear.SparseFieldMatrix: int computeKey(int,int)>($i0, $i1);

        $r2 = r0.<org.apache.commons.math3.linear.SparseFieldMatrix: org.apache.commons.math3.util.OpenIntToFieldHashMap entries>;

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.util.OpenIntToFieldHashMap: org.apache.commons.math3.FieldElement get(int)>($i0);

        $r4 = interfaceinvoke $r3.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>(r1);

        r1 = (org.apache.commons.math3.FieldElement) $r4;

        $r5 = virtualinvoke r0.<org.apache.commons.math3.linear.SparseFieldMatrix: org.apache.commons.math3.Field getField()>();

        $r4 = interfaceinvoke $r5.<org.apache.commons.math3.Field: java.lang.Object getZero()>();

        $r3 = (org.apache.commons.math3.FieldElement) $r4;

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.commons.math3.linear.SparseFieldMatrix: org.apache.commons.math3.util.OpenIntToFieldHashMap entries>;

        virtualinvoke $r2.<org.apache.commons.math3.util.OpenIntToFieldHashMap: org.apache.commons.math3.FieldElement remove(int)>($i0);

        return;

     label1:
        $r2 = r0.<org.apache.commons.math3.linear.SparseFieldMatrix: org.apache.commons.math3.util.OpenIntToFieldHashMap entries>;

        virtualinvoke $r2.<org.apache.commons.math3.util.OpenIntToFieldHashMap: org.apache.commons.math3.FieldElement put(int,org.apache.commons.math3.FieldElement)>($i0, r1);

        return;
    }
    public org.apache.commons.math3.linear.FieldMatrix copy()
    {
        org.apache.commons.math3.linear.SparseFieldMatrix r0, $r1;

        r0 := @this: org.apache.commons.math3.linear.SparseFieldMatrix;

        $r1 = new org.apache.commons.math3.linear.SparseFieldMatrix;

        specialinvoke $r1.<org.apache.commons.math3.linear.SparseFieldMatrix: void <init>(org.apache.commons.math3.linear.SparseFieldMatrix)>(r0);

        return $r1;
    }
    public org.apache.commons.math3.linear.FieldMatrix createMatrix(int, int)
    {
        org.apache.commons.math3.linear.SparseFieldMatrix r0, $r1;
        int $i0, $i1;
        org.apache.commons.math3.Field $r2;

        r0 := @this: org.apache.commons.math3.linear.SparseFieldMatrix;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = new org.apache.commons.math3.linear.SparseFieldMatrix;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.linear.SparseFieldMatrix: org.apache.commons.math3.Field getField()>();

        specialinvoke $r1.<org.apache.commons.math3.linear.SparseFieldMatrix: void <init>(org.apache.commons.math3.Field,int,int)>($r2, $i0, $i1);

        return $r1;
    }
    public int getColumnDimension()
    {
        org.apache.commons.math3.linear.SparseFieldMatrix r0;
        int i0;

        r0 := @this: org.apache.commons.math3.linear.SparseFieldMatrix;

        i0 = r0.<org.apache.commons.math3.linear.SparseFieldMatrix: int columns>;

        return i0;
    }
    public org.apache.commons.math3.FieldElement getEntry(int, int)
    {
        org.apache.commons.math3.linear.SparseFieldMatrix r0;
        int $i0, $i1;
        org.apache.commons.math3.util.OpenIntToFieldHashMap $r1;
        org.apache.commons.math3.FieldElement $r2;

        r0 := @this: org.apache.commons.math3.linear.SparseFieldMatrix;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        virtualinvoke r0.<org.apache.commons.math3.linear.SparseFieldMatrix: void checkRowIndex(int)>($i0);

        virtualinvoke r0.<org.apache.commons.math3.linear.SparseFieldMatrix: void checkColumnIndex(int)>($i1);

        $r1 = r0.<org.apache.commons.math3.linear.SparseFieldMatrix: org.apache.commons.math3.util.OpenIntToFieldHashMap entries>;

        $i0 = specialinvoke r0.<org.apache.commons.math3.linear.SparseFieldMatrix: int computeKey(int,int)>($i0, $i1);

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.util.OpenIntToFieldHashMap: org.apache.commons.math3.FieldElement get(int)>($i0);

        return $r2;
    }
    public int getRowDimension()
    {
        org.apache.commons.math3.linear.SparseFieldMatrix r0;
        int i0;

        r0 := @this: org.apache.commons.math3.linear.SparseFieldMatrix;

        i0 = r0.<org.apache.commons.math3.linear.SparseFieldMatrix: int rows>;

        return i0;
    }
    public void multiplyEntry(int, int, org.apache.commons.math3.FieldElement)
    {
        org.apache.commons.math3.linear.SparseFieldMatrix r0;
        int $i0, $i1;
        org.apache.commons.math3.FieldElement r1, $r3;
        org.apache.commons.math3.util.OpenIntToFieldHashMap $r2;
        java.lang.Object $r4;
        org.apache.commons.math3.Field $r5;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.linear.SparseFieldMatrix;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        r1 := @parameter2: org.apache.commons.math3.FieldElement;

        virtualinvoke r0.<org.apache.commons.math3.linear.SparseFieldMatrix: void checkRowIndex(int)>($i0);

        virtualinvoke r0.<org.apache.commons.math3.linear.SparseFieldMatrix: void checkColumnIndex(int)>($i1);

        $i0 = specialinvoke r0.<org.apache.commons.math3.linear.SparseFieldMatrix: int computeKey(int,int)>($i0, $i1);

        $r2 = r0.<org.apache.commons.math3.linear.SparseFieldMatrix: org.apache.commons.math3.util.OpenIntToFieldHashMap entries>;

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.util.OpenIntToFieldHashMap: org.apache.commons.math3.FieldElement get(int)>($i0);

        $r4 = interfaceinvoke $r3.<org.apache.commons.math3.FieldElement: java.lang.Object multiply(java.lang.Object)>(r1);

        r1 = (org.apache.commons.math3.FieldElement) $r4;

        $r5 = virtualinvoke r0.<org.apache.commons.math3.linear.SparseFieldMatrix: org.apache.commons.math3.Field getField()>();

        $r4 = interfaceinvoke $r5.<org.apache.commons.math3.Field: java.lang.Object getZero()>();

        $r3 = (org.apache.commons.math3.FieldElement) $r4;

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.commons.math3.linear.SparseFieldMatrix: org.apache.commons.math3.util.OpenIntToFieldHashMap entries>;

        virtualinvoke $r2.<org.apache.commons.math3.util.OpenIntToFieldHashMap: org.apache.commons.math3.FieldElement remove(int)>($i0);

        return;

     label1:
        $r2 = r0.<org.apache.commons.math3.linear.SparseFieldMatrix: org.apache.commons.math3.util.OpenIntToFieldHashMap entries>;

        virtualinvoke $r2.<org.apache.commons.math3.util.OpenIntToFieldHashMap: org.apache.commons.math3.FieldElement put(int,org.apache.commons.math3.FieldElement)>($i0, r1);

        return;
    }
    public void setEntry(int, int, org.apache.commons.math3.FieldElement)
    {
        org.apache.commons.math3.linear.SparseFieldMatrix r0;
        int $i0, $i1;
        org.apache.commons.math3.FieldElement r1, $r4;
        org.apache.commons.math3.Field $r2;
        java.lang.Object $r3;
        boolean $z0;
        org.apache.commons.math3.util.OpenIntToFieldHashMap $r5;

        r0 := @this: org.apache.commons.math3.linear.SparseFieldMatrix;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        r1 := @parameter2: org.apache.commons.math3.FieldElement;

        virtualinvoke r0.<org.apache.commons.math3.linear.SparseFieldMatrix: void checkRowIndex(int)>($i0);

        virtualinvoke r0.<org.apache.commons.math3.linear.SparseFieldMatrix: void checkColumnIndex(int)>($i1);

        $r2 = virtualinvoke r0.<org.apache.commons.math3.linear.SparseFieldMatrix: org.apache.commons.math3.Field getField()>();

        $r3 = interfaceinvoke $r2.<org.apache.commons.math3.Field: java.lang.Object getZero()>();

        $r4 = (org.apache.commons.math3.FieldElement) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r5 = r0.<org.apache.commons.math3.linear.SparseFieldMatrix: org.apache.commons.math3.util.OpenIntToFieldHashMap entries>;

        $i0 = specialinvoke r0.<org.apache.commons.math3.linear.SparseFieldMatrix: int computeKey(int,int)>($i0, $i1);

        virtualinvoke $r5.<org.apache.commons.math3.util.OpenIntToFieldHashMap: org.apache.commons.math3.FieldElement remove(int)>($i0);

        return;

     label1:
        $r5 = r0.<org.apache.commons.math3.linear.SparseFieldMatrix: org.apache.commons.math3.util.OpenIntToFieldHashMap entries>;

        $i0 = specialinvoke r0.<org.apache.commons.math3.linear.SparseFieldMatrix: int computeKey(int,int)>($i0, $i1);

        virtualinvoke $r5.<org.apache.commons.math3.util.OpenIntToFieldHashMap: org.apache.commons.math3.FieldElement put(int,org.apache.commons.math3.FieldElement)>($i0, r1);

        return;
    }
