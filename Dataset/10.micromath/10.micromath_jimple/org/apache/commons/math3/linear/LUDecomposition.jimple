org.apache.commons.math3.linear.LUDecomposition extends java.lang.Object
private static final double DEFAULT_TOO_SMALL
private org.apache.commons.math3.linear.RealMatrix cachedL
private org.apache.commons.math3.linear.RealMatrix cachedP
private org.apache.commons.math3.linear.RealMatrix cachedU
private boolean even
private final double[][] lu
private final int[] pivot
private boolean singular
    public void <init>(org.apache.commons.math3.linear.RealMatrix)
    {
        org.apache.commons.math3.linear.LUDecomposition r0;
        org.apache.commons.math3.linear.RealMatrix $r1;

        r0 := @this: org.apache.commons.math3.linear.LUDecomposition;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        specialinvoke r0.<org.apache.commons.math3.linear.LUDecomposition: void <init>(org.apache.commons.math3.linear.RealMatrix,double)>($r1, 1.0E-11);

        return;
    }
    public void <init>(org.apache.commons.math3.linear.RealMatrix, double)
    {
        org.apache.commons.math3.linear.LUDecomposition r0;
        org.apache.commons.math3.linear.RealMatrix $r1;
        double $d0, d1, $d2, $d3, $d4;
        double[] r2, r3;
        int i0, $i1, $i2, i3, i4;
        boolean $z0;
        org.apache.commons.math3.linear.NonSquareMatrixException $r4;
        double[][] $r5;
        int[] $r6, $r7;
        byte $b5;

        r0 := @this: org.apache.commons.math3.linear.LUDecomposition;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        $d0 := @parameter1: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: boolean isSquare()>();

        if $z0 != 0 goto label01;

        $r4 = new org.apache.commons.math3.linear.NonSquareMatrixException;

        $i1 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $i2 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        specialinvoke $r4.<org.apache.commons.math3.linear.NonSquareMatrixException: void <init>(int,int)>($i1, $i2);

        throw $r4;

     label01:
        $i1 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        $r5 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: double[][] getData()>();

        r0.<org.apache.commons.math3.linear.LUDecomposition: double[][] lu> = $r5;

        $r6 = newarray (int)[$i1];

        r0.<org.apache.commons.math3.linear.LUDecomposition: int[] pivot> = $r6;

        r0.<org.apache.commons.math3.linear.LUDecomposition: org.apache.commons.math3.linear.RealMatrix cachedL> = null;

        r0.<org.apache.commons.math3.linear.LUDecomposition: org.apache.commons.math3.linear.RealMatrix cachedU> = null;

        r0.<org.apache.commons.math3.linear.LUDecomposition: org.apache.commons.math3.linear.RealMatrix cachedP> = null;

        $i2 = 0;

     label02:
        if $i2 >= $i1 goto label03;

        $r6 = r0.<org.apache.commons.math3.linear.LUDecomposition: int[] pivot>;

        $r6[$i2] = $i2;

        $i2 = $i2 + 1;

        goto label02;

     label03:
        r0.<org.apache.commons.math3.linear.LUDecomposition: boolean even> = 1;

        r0.<org.apache.commons.math3.linear.LUDecomposition: boolean singular> = 0;

        $i2 = 0;

     label04:
        if $i2 >= $i1 goto label22;

        i3 = 0;

     label05:
        if i3 >= $i2 goto label08;

        $r5 = r0.<org.apache.commons.math3.linear.LUDecomposition: double[][] lu>;

        r2 = $r5[i3];

        d1 = r2[$i2];

        i0 = 0;

     label06:
        if i0 >= i3 goto label07;

        $d2 = r2[i0];

        $r5 = r0.<org.apache.commons.math3.linear.LUDecomposition: double[][] lu>;

        r3 = $r5[i0];

        $d3 = r3[$i2];

        $d2 = $d2 * $d3;

        d1 = d1 - $d2;

        i0 = i0 + 1;

        goto label06;

     label07:
        r2[$i2] = d1;

        i3 = i3 + 1;

        goto label05;

     label08:
        i3 = $i2;

        d1 = #-Infinity;

        i0 = $i2;

     label09:
        if i0 >= $i1 goto label13;

        $r5 = r0.<org.apache.commons.math3.linear.LUDecomposition: double[][] lu>;

        r2 = $r5[i0];

        $d2 = r2[$i2];

        i4 = 0;

     label10:
        if i4 >= $i2 goto label11;

        $d3 = r2[i4];

        $r5 = r0.<org.apache.commons.math3.linear.LUDecomposition: double[][] lu>;

        r3 = $r5[i4];

        $d4 = r3[$i2];

        $d3 = $d3 * $d4;

        $d2 = $d2 - $d3;

        i4 = i4 + 1;

        goto label10;

     label11:
        r2[$i2] = $d2;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d2);

        $b5 = $d3 cmpl d1;

        if $b5 <= 0 goto label12;

        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d2);

        i3 = i0;

     label12:
        i0 = i0 + 1;

        goto label09;

     label13:
        $r5 = r0.<org.apache.commons.math3.linear.LUDecomposition: double[][] lu>;

        r2 = $r5[i3];

        d1 = r2[$i2];

        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d1);

        $b5 = d1 cmpg $d0;

        if $b5 >= 0 goto label14;

        r0.<org.apache.commons.math3.linear.LUDecomposition: boolean singular> = 1;

        return;

     label14:
        if i3 == $i2 goto label18;

        $r5 = r0.<org.apache.commons.math3.linear.LUDecomposition: double[][] lu>;

        r3 = $r5[i3];

        $r5 = r0.<org.apache.commons.math3.linear.LUDecomposition: double[][] lu>;

        r2 = $r5[$i2];

        i0 = 0;

     label15:
        if i0 >= $i1 goto label16;

        d1 = r3[i0];

        $d2 = r2[i0];

        r3[i0] = $d2;

        r2[i0] = d1;

        i0 = i0 + 1;

        goto label15;

     label16:
        $r6 = r0.<org.apache.commons.math3.linear.LUDecomposition: int[] pivot>;

        i0 = $r6[i3];

        $r6 = r0.<org.apache.commons.math3.linear.LUDecomposition: int[] pivot>;

        $r7 = r0.<org.apache.commons.math3.linear.LUDecomposition: int[] pivot>;

        i4 = $r7[$i2];

        $r6[i3] = i4;

        $r6 = r0.<org.apache.commons.math3.linear.LUDecomposition: int[] pivot>;

        $r6[$i2] = i0;

        $z0 = r0.<org.apache.commons.math3.linear.LUDecomposition: boolean even>;

        if $z0 != 0 goto label20;

        $z0 = 1;

     label17:
        r0.<org.apache.commons.math3.linear.LUDecomposition: boolean even> = $z0;

     label18:
        $r5 = r0.<org.apache.commons.math3.linear.LUDecomposition: double[][] lu>;

        r2 = $r5[$i2];

        d1 = r2[$i2];

        i3 = $i2 + 1;

     label19:
        if i3 >= $i1 goto label21;

        $r5 = r0.<org.apache.commons.math3.linear.LUDecomposition: double[][] lu>;

        r2 = $r5[i3];

        $d2 = r2[$i2];

        $d2 = $d2 / d1;

        r2[$i2] = $d2;

        i3 = i3 + 1;

        goto label19;

     label20:
        $z0 = 0;

        goto label17;

     label21:
        $i2 = $i2 + 1;

        goto label04;

     label22:
        return;
    }
    public double getDeterminant()
    {
        org.apache.commons.math3.linear.LUDecomposition r0;
        int i0, i1;
        boolean $z0;
        int[] $r1;
        double d0, $d1;
        double[][] $r2;
        double[] $r3;

        r0 := @this: org.apache.commons.math3.linear.LUDecomposition;

        $z0 = r0.<org.apache.commons.math3.linear.LUDecomposition: boolean singular>;

        if $z0 == 0 goto label1;

        return 0.0;

     label1:
        $r1 = r0.<org.apache.commons.math3.linear.LUDecomposition: int[] pivot>;

        i0 = lengthof $r1;

        $z0 = r0.<org.apache.commons.math3.linear.LUDecomposition: boolean even>;

        if $z0 == 0 goto label4;

        d0 = 1.0;

     label2:
        i1 = 0;

     label3:
        if i1 >= i0 goto label5;

        $r2 = r0.<org.apache.commons.math3.linear.LUDecomposition: double[][] lu>;

        $r3 = $r2[i1];

        $d1 = $r3[i1];

        d0 = d0 * $d1;

        i1 = i1 + 1;

        goto label3;

     label4:
        d0 = -1.0;

        goto label2;

     label5:
        return d0;
    }
    public org.apache.commons.math3.linear.RealMatrix getL()
    {
        org.apache.commons.math3.linear.LUDecomposition r0;
        double[] r1;
        int i0, i1, i2;
        org.apache.commons.math3.linear.RealMatrix $r2;
        boolean $z0;
        int[] $r3;
        double[][] $r4;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.LUDecomposition;

        $r2 = r0.<org.apache.commons.math3.linear.LUDecomposition: org.apache.commons.math3.linear.RealMatrix cachedL>;

        if $r2 != null goto label4;

        $z0 = r0.<org.apache.commons.math3.linear.LUDecomposition: boolean singular>;

        if $z0 != 0 goto label4;

        $r3 = r0.<org.apache.commons.math3.linear.LUDecomposition: int[] pivot>;

        i0 = lengthof $r3;

        $r2 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix createRealMatrix(int,int)>(i0, i0);

        r0.<org.apache.commons.math3.linear.LUDecomposition: org.apache.commons.math3.linear.RealMatrix cachedL> = $r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        $r4 = r0.<org.apache.commons.math3.linear.LUDecomposition: double[][] lu>;

        r1 = $r4[i1];

        i2 = 0;

     label2:
        if i2 >= i1 goto label3;

        $r2 = r0.<org.apache.commons.math3.linear.LUDecomposition: org.apache.commons.math3.linear.RealMatrix cachedL>;

        $d0 = r1[i2];

        interfaceinvoke $r2.<org.apache.commons.math3.linear.RealMatrix: void setEntry(int,int,double)>(i1, i2, $d0);

        i2 = i2 + 1;

        goto label2;

     label3:
        $r2 = r0.<org.apache.commons.math3.linear.LUDecomposition: org.apache.commons.math3.linear.RealMatrix cachedL>;

        interfaceinvoke $r2.<org.apache.commons.math3.linear.RealMatrix: void setEntry(int,int,double)>(i1, i1, 1.0);

        i1 = i1 + 1;

        goto label1;

     label4:
        $r2 = r0.<org.apache.commons.math3.linear.LUDecomposition: org.apache.commons.math3.linear.RealMatrix cachedL>;

        return $r2;
    }
    public org.apache.commons.math3.linear.RealMatrix getP()
    {
        org.apache.commons.math3.linear.LUDecomposition r0;
        int i0, i1, $i2;
        org.apache.commons.math3.linear.RealMatrix $r1;
        boolean $z0;
        int[] $r2;

        r0 := @this: org.apache.commons.math3.linear.LUDecomposition;

        $r1 = r0.<org.apache.commons.math3.linear.LUDecomposition: org.apache.commons.math3.linear.RealMatrix cachedP>;

        if $r1 != null goto label2;

        $z0 = r0.<org.apache.commons.math3.linear.LUDecomposition: boolean singular>;

        if $z0 != 0 goto label2;

        $r2 = r0.<org.apache.commons.math3.linear.LUDecomposition: int[] pivot>;

        i0 = lengthof $r2;

        $r1 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix createRealMatrix(int,int)>(i0, i0);

        r0.<org.apache.commons.math3.linear.LUDecomposition: org.apache.commons.math3.linear.RealMatrix cachedP> = $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r1 = r0.<org.apache.commons.math3.linear.LUDecomposition: org.apache.commons.math3.linear.RealMatrix cachedP>;

        $r2 = r0.<org.apache.commons.math3.linear.LUDecomposition: int[] pivot>;

        $i2 = $r2[i1];

        interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: void setEntry(int,int,double)>(i1, $i2, 1.0);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r1 = r0.<org.apache.commons.math3.linear.LUDecomposition: org.apache.commons.math3.linear.RealMatrix cachedP>;

        return $r1;
    }
    public int[] getPivot()
    {
        org.apache.commons.math3.linear.LUDecomposition r0;
        java.lang.Object $r1;
        int[] $r2;

        r0 := @this: org.apache.commons.math3.linear.LUDecomposition;

        $r2 = r0.<org.apache.commons.math3.linear.LUDecomposition: int[] pivot>;

        $r1 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (int[]) $r1;

        return $r2;
    }
    public org.apache.commons.math3.linear.DecompositionSolver getSolver()
    {
        org.apache.commons.math3.linear.LUDecomposition r0;
        org.apache.commons.math3.linear.LUDecomposition$Solver $r1;
        double[][] $r2;
        int[] $r3;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.linear.LUDecomposition;

        $r1 = new org.apache.commons.math3.linear.LUDecomposition$Solver;

        $r2 = r0.<org.apache.commons.math3.linear.LUDecomposition: double[][] lu>;

        $r3 = r0.<org.apache.commons.math3.linear.LUDecomposition: int[] pivot>;

        $z0 = r0.<org.apache.commons.math3.linear.LUDecomposition: boolean singular>;

        specialinvoke $r1.<org.apache.commons.math3.linear.LUDecomposition$Solver: void <init>(double[][],int[],boolean,org.apache.commons.math3.linear.LUDecomposition$1)>($r2, $r3, $z0, null);

        return $r1;
    }
    public org.apache.commons.math3.linear.RealMatrix getU()
    {
        org.apache.commons.math3.linear.LUDecomposition r0;
        double[] r1;
        int i0, i1, i2;
        double $d0;
        org.apache.commons.math3.linear.RealMatrix $r2;
        boolean $z0;
        int[] $r3;
        double[][] $r4;

        r0 := @this: org.apache.commons.math3.linear.LUDecomposition;

        $r2 = r0.<org.apache.commons.math3.linear.LUDecomposition: org.apache.commons.math3.linear.RealMatrix cachedU>;

        if $r2 != null goto label4;

        $z0 = r0.<org.apache.commons.math3.linear.LUDecomposition: boolean singular>;

        if $z0 != 0 goto label4;

        $r3 = r0.<org.apache.commons.math3.linear.LUDecomposition: int[] pivot>;

        i0 = lengthof $r3;

        $r2 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix createRealMatrix(int,int)>(i0, i0);

        r0.<org.apache.commons.math3.linear.LUDecomposition: org.apache.commons.math3.linear.RealMatrix cachedU> = $r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        $r4 = r0.<org.apache.commons.math3.linear.LUDecomposition: double[][] lu>;

        r1 = $r4[i1];

        i2 = i1;

     label2:
        if i2 >= i0 goto label3;

        $r2 = r0.<org.apache.commons.math3.linear.LUDecomposition: org.apache.commons.math3.linear.RealMatrix cachedU>;

        $d0 = r1[i2];

        interfaceinvoke $r2.<org.apache.commons.math3.linear.RealMatrix: void setEntry(int,int,double)>(i1, i2, $d0);

        i2 = i2 + 1;

        goto label2;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        $r2 = r0.<org.apache.commons.math3.linear.LUDecomposition: org.apache.commons.math3.linear.RealMatrix cachedU>;

        return $r2;
    }
