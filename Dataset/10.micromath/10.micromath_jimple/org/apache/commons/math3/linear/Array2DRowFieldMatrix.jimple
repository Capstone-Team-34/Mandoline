org.apache.commons.math3.linear.Array2DRowFieldMatrix extends org.apache.commons.math3.linear.AbstractFieldMatrix implements java.io.Serializable
private static final long serialVersionUID
private org.apache.commons.math3.FieldElement[][] data
    public void <init>(org.apache.commons.math3.Field)
    {
        org.apache.commons.math3.linear.Array2DRowFieldMatrix r0;
        org.apache.commons.math3.Field r1;

        r0 := @this: org.apache.commons.math3.linear.Array2DRowFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.Field;

        specialinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: void <init>(org.apache.commons.math3.Field)>(r1);

        return;
    }
    public void <init>(org.apache.commons.math3.Field, int, int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.linear.Array2DRowFieldMatrix r0;
        org.apache.commons.math3.Field r1;
        int $i0, $i1;
        java.lang.Object[][] $r2;
        org.apache.commons.math3.FieldElement[][] $r3;

        r0 := @this: org.apache.commons.math3.linear.Array2DRowFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.Field;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        specialinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: void <init>(org.apache.commons.math3.Field,int,int)>(r1, $i0, $i1);

        $r2 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[][] buildArray(org.apache.commons.math3.Field,int,int)>(r1, $i0, $i1);

        $r3 = (org.apache.commons.math3.FieldElement[][]) $r2;

        r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: org.apache.commons.math3.FieldElement[][] data> = $r3;

        return;
    }
    public void <init>(org.apache.commons.math3.Field, org.apache.commons.math3.FieldElement[])
    {
        org.apache.commons.math3.linear.Array2DRowFieldMatrix r0;
        org.apache.commons.math3.Field r1;
        org.apache.commons.math3.FieldElement[] r2, $r6;
        int i0, i1;
        org.apache.commons.math3.FieldElement $r3;
        java.lang.Object[][] $r4;
        org.apache.commons.math3.FieldElement[][] $r5;

        r0 := @this: org.apache.commons.math3.linear.Array2DRowFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.Field;

        r2 := @parameter1: org.apache.commons.math3.FieldElement[];

        specialinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: void <init>(org.apache.commons.math3.Field)>(r1);

        i0 = lengthof r2;

        r1 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: org.apache.commons.math3.Field getField()>();

        $r4 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[][] buildArray(org.apache.commons.math3.Field,int,int)>(r1, i0, 1);

        $r5 = (org.apache.commons.math3.FieldElement[][]) $r4;

        r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: org.apache.commons.math3.FieldElement[][] data> = $r5;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r5 = r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: org.apache.commons.math3.FieldElement[][] data>;

        $r6 = $r5[i1];

        $r3 = r2[i1];

        $r6[0] = $r3;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
    public void <init>(org.apache.commons.math3.Field, org.apache.commons.math3.FieldElement[][]) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NoDataException
    {
        org.apache.commons.math3.linear.Array2DRowFieldMatrix r0;
        org.apache.commons.math3.Field r1;
        org.apache.commons.math3.FieldElement[][] r2;

        r0 := @this: org.apache.commons.math3.linear.Array2DRowFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.Field;

        r2 := @parameter1: org.apache.commons.math3.FieldElement[][];

        specialinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: void <init>(org.apache.commons.math3.Field)>(r1);

        specialinvoke r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: void copyIn(org.apache.commons.math3.FieldElement[][])>(r2);

        return;
    }
    public void <init>(org.apache.commons.math3.Field, org.apache.commons.math3.FieldElement[][], boolean) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.linear.Array2DRowFieldMatrix r0;
        org.apache.commons.math3.Field r1;
        org.apache.commons.math3.FieldElement[][] r2;
        boolean $z0;
        int i0, i1, i2, $i3;
        org.apache.commons.math3.exception.NoDataException $r3;
        org.apache.commons.math3.exception.util.LocalizedFormats $r4;
        org.apache.commons.math3.FieldElement[] $r5;
        org.apache.commons.math3.exception.DimensionMismatchException $r6;

        r0 := @this: org.apache.commons.math3.linear.Array2DRowFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.Field;

        r2 := @parameter1: org.apache.commons.math3.FieldElement[][];

        $z0 := @parameter2: boolean;

        specialinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: void <init>(org.apache.commons.math3.Field)>(r1);

        if $z0 == 0 goto label1;

        specialinvoke r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: void copyIn(org.apache.commons.math3.FieldElement[][])>(r2);

        return;

     label1:
        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r2);

        i1 = lengthof r2;

        if i1 != 0 goto label2;

        $r3 = new org.apache.commons.math3.exception.NoDataException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats AT_LEAST_ONE_ROW>;

        specialinvoke $r3.<org.apache.commons.math3.exception.NoDataException: void <init>(org.apache.commons.math3.exception.util.Localizable)>($r4);

        throw $r3;

     label2:
        $r5 = r2[0];

        i0 = lengthof $r5;

        if i0 != 0 goto label3;

        $r3 = new org.apache.commons.math3.exception.NoDataException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats AT_LEAST_ONE_COLUMN>;

        specialinvoke $r3.<org.apache.commons.math3.exception.NoDataException: void <init>(org.apache.commons.math3.exception.util.Localizable)>($r4);

        throw $r3;

     label3:
        i2 = 1;

     label4:
        if i2 >= i1 goto label6;

        $r5 = r2[i2];

        $i3 = lengthof $r5;

        if $i3 == i0 goto label5;

        $r6 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $r5 = r2[i2];

        i1 = lengthof $r5;

        specialinvoke $r6.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>(i0, i1);

        throw $r6;

     label5:
        i2 = i2 + 1;

        goto label4;

     label6:
        r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: org.apache.commons.math3.FieldElement[][] data> = r2;

        return;
    }
    public void <init>(org.apache.commons.math3.FieldElement[]) throws org.apache.commons.math3.exception.NoDataException
    {
        org.apache.commons.math3.linear.Array2DRowFieldMatrix r0;
        org.apache.commons.math3.FieldElement[] r1;
        org.apache.commons.math3.Field $r2;

        r0 := @this: org.apache.commons.math3.linear.Array2DRowFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.FieldElement[];

        $r2 = staticinvoke <org.apache.commons.math3.linear.Array2DRowFieldMatrix: org.apache.commons.math3.Field extractField(org.apache.commons.math3.FieldElement[])>(r1);

        specialinvoke r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: void <init>(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[])>($r2, r1);

        return;
    }
    public void <init>(org.apache.commons.math3.FieldElement[][]) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NoDataException
    {
        org.apache.commons.math3.linear.Array2DRowFieldMatrix r0;
        org.apache.commons.math3.FieldElement[][] r1;
        org.apache.commons.math3.Field $r2;

        r0 := @this: org.apache.commons.math3.linear.Array2DRowFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.FieldElement[][];

        $r2 = staticinvoke <org.apache.commons.math3.linear.Array2DRowFieldMatrix: org.apache.commons.math3.Field extractField(org.apache.commons.math3.FieldElement[][])>(r1);

        specialinvoke r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: void <init>(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][])>($r2, r1);

        return;
    }
    public void <init>(org.apache.commons.math3.FieldElement[][], boolean) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.linear.Array2DRowFieldMatrix r0;
        org.apache.commons.math3.FieldElement[][] r1;
        boolean $z0;
        org.apache.commons.math3.Field $r2;

        r0 := @this: org.apache.commons.math3.linear.Array2DRowFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.FieldElement[][];

        $z0 := @parameter1: boolean;

        $r2 = staticinvoke <org.apache.commons.math3.linear.Array2DRowFieldMatrix: org.apache.commons.math3.Field extractField(org.apache.commons.math3.FieldElement[][])>(r1);

        specialinvoke r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: void <init>(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][],boolean)>($r2, r1, $z0);

        return;
    }
    private void copyIn(org.apache.commons.math3.FieldElement[][]) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.Array2DRowFieldMatrix r0;
        org.apache.commons.math3.FieldElement[][] r1;

        r0 := @this: org.apache.commons.math3.linear.Array2DRowFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.FieldElement[][];

        virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: void setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)>(r1, 0, 0);

        return;
    }
    private org.apache.commons.math3.FieldElement[][] copyOut()
    {
        org.apache.commons.math3.linear.Array2DRowFieldMatrix r0;
        int $i0, $i1, $i2;
        org.apache.commons.math3.Field $r1;
        java.lang.Object[][] $r2;
        org.apache.commons.math3.FieldElement[][] r3, $r4;
        org.apache.commons.math3.FieldElement[] $r5, $r6, $r7;

        r0 := @this: org.apache.commons.math3.linear.Array2DRowFieldMatrix;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: int getRowDimension()>();

        $r1 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: org.apache.commons.math3.Field getField()>();

        $i1 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: int getColumnDimension()>();

        $r2 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[][] buildArray(org.apache.commons.math3.Field,int,int)>($r1, $i0, $i1);

        r3 = (org.apache.commons.math3.FieldElement[][]) $r2;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $r4 = r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: org.apache.commons.math3.FieldElement[][] data>;

        $r5 = $r4[$i1];

        $r6 = r3[$i1];

        $r4 = r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: org.apache.commons.math3.FieldElement[][] data>;

        $r7 = $r4[$i1];

        $i2 = lengthof $r7;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, $r6, 0, $i2);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return r3;
    }
    public org.apache.commons.math3.linear.Array2DRowFieldMatrix add(org.apache.commons.math3.linear.Array2DRowFieldMatrix) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException
    {
        org.apache.commons.math3.linear.Array2DRowFieldMatrix r0, r1;
        org.apache.commons.math3.FieldElement[] r2, r3, r4;
        int $i0, $i1, i2, i3;
        org.apache.commons.math3.Field $r5;
        java.lang.Object[][] $r6;
        org.apache.commons.math3.FieldElement[][] r7, $r8;
        org.apache.commons.math3.FieldElement $r9, $r10;
        java.lang.Object $r11;

        r0 := @this: org.apache.commons.math3.linear.Array2DRowFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.Array2DRowFieldMatrix;

        virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: void checkAdditionCompatible(org.apache.commons.math3.linear.FieldMatrix)>(r1);

        $i0 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: int getRowDimension()>();

        $i1 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: int getColumnDimension()>();

        $r5 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: org.apache.commons.math3.Field getField()>();

        $r6 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[][] buildArray(org.apache.commons.math3.Field,int,int)>($r5, $i0, $i1);

        r7 = (org.apache.commons.math3.FieldElement[][]) $r6;

        i2 = 0;

     label1:
        if i2 >= $i0 goto label4;

        $r8 = r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: org.apache.commons.math3.FieldElement[][] data>;

        r2 = $r8[i2];

        $r8 = r1.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: org.apache.commons.math3.FieldElement[][] data>;

        r3 = $r8[i2];

        r4 = r7[i2];

        i3 = 0;

     label2:
        if i3 >= $i1 goto label3;

        $r9 = r2[i3];

        $r10 = r3[i3];

        $r11 = interfaceinvoke $r9.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>($r10);

        $r9 = (org.apache.commons.math3.FieldElement) $r11;

        r4[i3] = $r9;

        i3 = i3 + 1;

        goto label2;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        r1 = new org.apache.commons.math3.linear.Array2DRowFieldMatrix;

        $r5 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: org.apache.commons.math3.Field getField()>();

        specialinvoke r1.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: void <init>(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][],boolean)>($r5, r7, 0);

        return r1;
    }
    public void addToEntry(int, int, org.apache.commons.math3.FieldElement) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.Array2DRowFieldMatrix r0;
        int $i0, $i1;
        org.apache.commons.math3.FieldElement r1, $r6;
        org.apache.commons.math3.FieldElement[] $r2, $r5;
        java.lang.Object $r3;
        org.apache.commons.math3.FieldElement[][] $r4;

        r0 := @this: org.apache.commons.math3.linear.Array2DRowFieldMatrix;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        r1 := @parameter2: org.apache.commons.math3.FieldElement;

        virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: void checkRowIndex(int)>($i0);

        virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: void checkColumnIndex(int)>($i1);

        $r4 = r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: org.apache.commons.math3.FieldElement[][] data>;

        $r2 = $r4[$i0];

        $r4 = r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: org.apache.commons.math3.FieldElement[][] data>;

        $r5 = $r4[$i0];

        $r6 = $r5[$i1];

        $r3 = interfaceinvoke $r6.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>(r1);

        r1 = (org.apache.commons.math3.FieldElement) $r3;

        $r2[$i1] = r1;

        return;
    }
    public org.apache.commons.math3.linear.FieldMatrix copy()
    {
        org.apache.commons.math3.linear.Array2DRowFieldMatrix r0, $r1;
        org.apache.commons.math3.Field $r2;
        org.apache.commons.math3.FieldElement[][] $r3;

        r0 := @this: org.apache.commons.math3.linear.Array2DRowFieldMatrix;

        $r1 = new org.apache.commons.math3.linear.Array2DRowFieldMatrix;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: org.apache.commons.math3.Field getField()>();

        $r3 = specialinvoke r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: org.apache.commons.math3.FieldElement[][] copyOut()>();

        specialinvoke $r1.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: void <init>(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][],boolean)>($r2, $r3, 0);

        return $r1;
    }
    public org.apache.commons.math3.linear.FieldMatrix createMatrix(int, int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.linear.Array2DRowFieldMatrix r0, $r1;
        int $i0, $i1;
        org.apache.commons.math3.Field $r2;

        r0 := @this: org.apache.commons.math3.linear.Array2DRowFieldMatrix;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = new org.apache.commons.math3.linear.Array2DRowFieldMatrix;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: org.apache.commons.math3.Field getField()>();

        specialinvoke $r1.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: void <init>(org.apache.commons.math3.Field,int,int)>($r2, $i0, $i1);

        return $r1;
    }
    public int getColumnDimension()
    {
        org.apache.commons.math3.linear.Array2DRowFieldMatrix r0;
        org.apache.commons.math3.FieldElement[][] $r1;
        org.apache.commons.math3.FieldElement[] $r2;
        int $i0;

        r0 := @this: org.apache.commons.math3.linear.Array2DRowFieldMatrix;

        $r1 = r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: org.apache.commons.math3.FieldElement[][] data>;

        if $r1 == null goto label2;

        $r1 = r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: org.apache.commons.math3.FieldElement[][] data>;

        $r2 = $r1[0];

        if $r2 != null goto label1;

        return 0;

     label1:
        $r1 = r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: org.apache.commons.math3.FieldElement[][] data>;

        $r2 = $r1[0];

        $i0 = lengthof $r2;

        return $i0;

     label2:
        return 0;
    }
    public org.apache.commons.math3.FieldElement[][] getData()
    {
        org.apache.commons.math3.linear.Array2DRowFieldMatrix r0;
        org.apache.commons.math3.FieldElement[][] $r1;

        r0 := @this: org.apache.commons.math3.linear.Array2DRowFieldMatrix;

        $r1 = specialinvoke r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: org.apache.commons.math3.FieldElement[][] copyOut()>();

        return $r1;
    }
    public org.apache.commons.math3.FieldElement[][] getDataRef()
    {
        org.apache.commons.math3.linear.Array2DRowFieldMatrix r0;
        org.apache.commons.math3.FieldElement[][] r1;

        r0 := @this: org.apache.commons.math3.linear.Array2DRowFieldMatrix;

        r1 = r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: org.apache.commons.math3.FieldElement[][] data>;

        return r1;
    }
    public org.apache.commons.math3.FieldElement getEntry(int, int) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.Array2DRowFieldMatrix r0;
        int $i0, $i1;
        org.apache.commons.math3.FieldElement[][] $r1;
        org.apache.commons.math3.FieldElement[] $r2;
        org.apache.commons.math3.FieldElement $r3;

        r0 := @this: org.apache.commons.math3.linear.Array2DRowFieldMatrix;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: void checkRowIndex(int)>($i0);

        virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: void checkColumnIndex(int)>($i1);

        $r1 = r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: org.apache.commons.math3.FieldElement[][] data>;

        $r2 = $r1[$i0];

        $r3 = $r2[$i1];

        return $r3;
    }
    public int getRowDimension()
    {
        org.apache.commons.math3.linear.Array2DRowFieldMatrix r0;
        org.apache.commons.math3.FieldElement[][] $r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.linear.Array2DRowFieldMatrix;

        $r1 = r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: org.apache.commons.math3.FieldElement[][] data>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r1 = r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: org.apache.commons.math3.FieldElement[][] data>;

        $i0 = lengthof $r1;

        return $i0;
    }
    public org.apache.commons.math3.linear.Array2DRowFieldMatrix multiply(org.apache.commons.math3.linear.Array2DRowFieldMatrix) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.Array2DRowFieldMatrix r0, r1;
        org.apache.commons.math3.FieldElement[] r2, r3, $r11;
        int $i0, $i1, $i2, i3, i4, i5;
        org.apache.commons.math3.Field $r4;
        java.lang.Object[][] $r5;
        org.apache.commons.math3.FieldElement[][] r6, $r7;
        java.lang.Object $r8;
        org.apache.commons.math3.FieldElement r9, $r10, $r12;

        r0 := @this: org.apache.commons.math3.linear.Array2DRowFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.Array2DRowFieldMatrix;

        virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: void checkMultiplicationCompatible(org.apache.commons.math3.linear.FieldMatrix)>(r1);

        $i0 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: int getRowDimension()>();

        $i1 = virtualinvoke r1.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: int getColumnDimension()>();

        $i2 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: int getColumnDimension()>();

        $r4 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: org.apache.commons.math3.Field getField()>();

        $r5 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[][] buildArray(org.apache.commons.math3.Field,int,int)>($r4, $i0, $i1);

        r6 = (org.apache.commons.math3.FieldElement[][]) $r5;

        i3 = 0;

     label1:
        if i3 >= $i0 goto label6;

        $r7 = r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: org.apache.commons.math3.FieldElement[][] data>;

        r2 = $r7[i3];

        r3 = r6[i3];

        i4 = 0;

     label2:
        if i4 >= $i1 goto label5;

        $r4 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: org.apache.commons.math3.Field getField()>();

        $r8 = interfaceinvoke $r4.<org.apache.commons.math3.Field: java.lang.Object getZero()>();

        r9 = (org.apache.commons.math3.FieldElement) $r8;

        i5 = 0;

     label3:
        if i5 >= $i2 goto label4;

        $r10 = r2[i5];

        $r7 = r1.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: org.apache.commons.math3.FieldElement[][] data>;

        $r11 = $r7[i5];

        $r12 = $r11[i4];

        $r8 = interfaceinvoke $r10.<org.apache.commons.math3.FieldElement: java.lang.Object multiply(java.lang.Object)>($r12);

        $r8 = interfaceinvoke r9.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>($r8);

        r9 = (org.apache.commons.math3.FieldElement) $r8;

        i5 = i5 + 1;

        goto label3;

     label4:
        r3[i4] = r9;

        i4 = i4 + 1;

        goto label2;

     label5:
        i3 = i3 + 1;

        goto label1;

     label6:
        r1 = new org.apache.commons.math3.linear.Array2DRowFieldMatrix;

        $r4 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: org.apache.commons.math3.Field getField()>();

        specialinvoke r1.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: void <init>(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][],boolean)>($r4, r6, 0);

        return r1;
    }
    public void multiplyEntry(int, int, org.apache.commons.math3.FieldElement) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.Array2DRowFieldMatrix r0;
        int $i0, $i1;
        org.apache.commons.math3.FieldElement r1, $r6;
        org.apache.commons.math3.FieldElement[] $r2, $r5;
        java.lang.Object $r3;
        org.apache.commons.math3.FieldElement[][] $r4;

        r0 := @this: org.apache.commons.math3.linear.Array2DRowFieldMatrix;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        r1 := @parameter2: org.apache.commons.math3.FieldElement;

        virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: void checkRowIndex(int)>($i0);

        virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: void checkColumnIndex(int)>($i1);

        $r4 = r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: org.apache.commons.math3.FieldElement[][] data>;

        $r2 = $r4[$i0];

        $r4 = r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: org.apache.commons.math3.FieldElement[][] data>;

        $r5 = $r4[$i0];

        $r6 = $r5[$i1];

        $r3 = interfaceinvoke $r6.<org.apache.commons.math3.FieldElement: java.lang.Object multiply(java.lang.Object)>(r1);

        r1 = (org.apache.commons.math3.FieldElement) $r3;

        $r2[$i1] = r1;

        return;
    }
    public org.apache.commons.math3.FieldElement[] operate(org.apache.commons.math3.FieldElement[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.Array2DRowFieldMatrix r0;
        org.apache.commons.math3.FieldElement[] r1, r2, r6;
        int $i0, $i1, $i2, i3;
        org.apache.commons.math3.exception.DimensionMismatchException $r3;
        org.apache.commons.math3.Field $r4;
        java.lang.Object[] $r5;
        org.apache.commons.math3.FieldElement[][] $r7;
        java.lang.Object $r8;
        org.apache.commons.math3.FieldElement r9, $r10, $r11;

        r0 := @this: org.apache.commons.math3.linear.Array2DRowFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.FieldElement[];

        $i0 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: int getRowDimension()>();

        $i1 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: int getColumnDimension()>();

        $i2 = lengthof r1;

        if $i2 == $i1 goto label1;

        $r3 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i0 = lengthof r1;

        specialinvoke $r3.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i0, $i1);

        throw $r3;

     label1:
        $r4 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: org.apache.commons.math3.Field getField()>();

        $r5 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[] buildArray(org.apache.commons.math3.Field,int)>($r4, $i0);

        r6 = (org.apache.commons.math3.FieldElement[]) $r5;

        $i2 = 0;

     label2:
        if $i2 >= $i0 goto label5;

        $r7 = r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: org.apache.commons.math3.FieldElement[][] data>;

        r2 = $r7[$i2];

        $r4 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: org.apache.commons.math3.Field getField()>();

        $r8 = interfaceinvoke $r4.<org.apache.commons.math3.Field: java.lang.Object getZero()>();

        r9 = (org.apache.commons.math3.FieldElement) $r8;

        i3 = 0;

     label3:
        if i3 >= $i1 goto label4;

        $r10 = r2[i3];

        $r11 = r1[i3];

        $r8 = interfaceinvoke $r10.<org.apache.commons.math3.FieldElement: java.lang.Object multiply(java.lang.Object)>($r11);

        $r8 = interfaceinvoke r9.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>($r8);

        r9 = (org.apache.commons.math3.FieldElement) $r8;

        i3 = i3 + 1;

        goto label3;

     label4:
        r6[$i2] = r9;

        $i2 = $i2 + 1;

        goto label2;

     label5:
        return r6;
    }
    public org.apache.commons.math3.FieldElement[] preMultiply(org.apache.commons.math3.FieldElement[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.Array2DRowFieldMatrix r0;
        org.apache.commons.math3.FieldElement[] r1, r5, $r9;
        int $i0, $i1, $i2, i3;
        org.apache.commons.math3.exception.DimensionMismatchException $r2;
        org.apache.commons.math3.Field $r3;
        java.lang.Object[] $r4;
        java.lang.Object $r6;
        org.apache.commons.math3.FieldElement r7, $r10, $r11;
        org.apache.commons.math3.FieldElement[][] $r8;

        r0 := @this: org.apache.commons.math3.linear.Array2DRowFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.FieldElement[];

        $i0 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: int getRowDimension()>();

        $i1 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: int getColumnDimension()>();

        $i2 = lengthof r1;

        if $i2 == $i0 goto label1;

        $r2 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i1 = lengthof r1;

        specialinvoke $r2.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i1, $i0);

        throw $r2;

     label1:
        $r3 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: org.apache.commons.math3.Field getField()>();

        $r4 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[] buildArray(org.apache.commons.math3.Field,int)>($r3, $i1);

        r5 = (org.apache.commons.math3.FieldElement[]) $r4;

        $i2 = 0;

     label2:
        if $i2 >= $i1 goto label5;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: org.apache.commons.math3.Field getField()>();

        $r6 = interfaceinvoke $r3.<org.apache.commons.math3.Field: java.lang.Object getZero()>();

        r7 = (org.apache.commons.math3.FieldElement) $r6;

        i3 = 0;

     label3:
        if i3 >= $i0 goto label4;

        $r8 = r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: org.apache.commons.math3.FieldElement[][] data>;

        $r9 = $r8[i3];

        $r10 = $r9[$i2];

        $r11 = r1[i3];

        $r6 = interfaceinvoke $r10.<org.apache.commons.math3.FieldElement: java.lang.Object multiply(java.lang.Object)>($r11);

        $r6 = interfaceinvoke r7.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>($r6);

        r7 = (org.apache.commons.math3.FieldElement) $r6;

        i3 = i3 + 1;

        goto label3;

     label4:
        r5[$i2] = r7;

        $i2 = $i2 + 1;

        goto label2;

     label5:
        return r5;
    }
    public void setEntry(int, int, org.apache.commons.math3.FieldElement) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.Array2DRowFieldMatrix r0;
        int $i0, $i1;
        org.apache.commons.math3.FieldElement r1;
        org.apache.commons.math3.FieldElement[][] $r2;
        org.apache.commons.math3.FieldElement[] $r3;

        r0 := @this: org.apache.commons.math3.linear.Array2DRowFieldMatrix;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        r1 := @parameter2: org.apache.commons.math3.FieldElement;

        virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: void checkRowIndex(int)>($i0);

        virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: void checkColumnIndex(int)>($i1);

        $r2 = r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: org.apache.commons.math3.FieldElement[][] data>;

        $r3 = $r2[$i0];

        $r3[$i1] = r1;

        return;
    }
    public void setSubMatrix(org.apache.commons.math3.FieldElement[][], int, int) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.Array2DRowFieldMatrix r0;
        org.apache.commons.math3.FieldElement[][] r1, $r2;
        int $i0, $i1, i2, $i3, $i4;
        org.apache.commons.math3.exception.MathIllegalStateException $r3;
        org.apache.commons.math3.exception.util.LocalizedFormats $r4;
        java.lang.Object[] $r5;
        java.lang.Integer $r6;
        org.apache.commons.math3.exception.NoDataException $r7;
        org.apache.commons.math3.FieldElement[] $r8, $r12;
        org.apache.commons.math3.Field $r9;
        java.lang.Object[][] $r10;
        org.apache.commons.math3.exception.DimensionMismatchException $r11;

        r0 := @this: org.apache.commons.math3.linear.Array2DRowFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.FieldElement[][];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: org.apache.commons.math3.FieldElement[][] data>;

        if $r2 != null goto label7;

        if $i0 <= 0 goto label1;

        $r3 = new org.apache.commons.math3.exception.MathIllegalStateException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats FIRST_ROWS_NOT_INITIALIZED_YET>;

        $r5 = newarray (java.lang.Object)[1];

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r5[0] = $r6;

        specialinvoke $r3.<org.apache.commons.math3.exception.MathIllegalStateException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r4, $r5);

        throw $r3;

     label1:
        if $i1 <= 0 goto label2;

        $r3 = new org.apache.commons.math3.exception.MathIllegalStateException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats FIRST_COLUMNS_NOT_INITIALIZED_YET>;

        $r5 = newarray (java.lang.Object)[1];

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r5[0] = $r6;

        specialinvoke $r3.<org.apache.commons.math3.exception.MathIllegalStateException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r4, $r5);

        throw $r3;

     label2:
        i2 = lengthof r1;

        if i2 != 0 goto label3;

        $r7 = new org.apache.commons.math3.exception.NoDataException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats AT_LEAST_ONE_ROW>;

        specialinvoke $r7.<org.apache.commons.math3.exception.NoDataException: void <init>(org.apache.commons.math3.exception.util.Localizable)>($r4);

        throw $r7;

     label3:
        $r8 = r1[0];

        i2 = lengthof $r8;

        if i2 != 0 goto label4;

        $r7 = new org.apache.commons.math3.exception.NoDataException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats AT_LEAST_ONE_COLUMN>;

        specialinvoke $r7.<org.apache.commons.math3.exception.NoDataException: void <init>(org.apache.commons.math3.exception.util.Localizable)>($r4);

        throw $r7;

     label4:
        $r9 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: org.apache.commons.math3.Field getField()>();

        $i3 = lengthof r1;

        $r10 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[][] buildArray(org.apache.commons.math3.Field,int,int)>($r9, $i3, i2);

        $r2 = (org.apache.commons.math3.FieldElement[][]) $r10;

        r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: org.apache.commons.math3.FieldElement[][] data> = $r2;

        $i3 = 0;

     label5:
        $r2 = r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: org.apache.commons.math3.FieldElement[][] data>;

        $i4 = lengthof $r2;

        if $i3 >= $i4 goto label8;

        $r8 = r1[$i3];

        $i4 = lengthof $r8;

        if $i4 == i2 goto label6;

        $r11 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $r8 = r1[$i3];

        $i0 = lengthof $r8;

        specialinvoke $r11.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>(i2, $i0);

        throw $r11;

     label6:
        $r8 = r1[$i3];

        $r2 = r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: org.apache.commons.math3.FieldElement[][] data>;

        $i4 = $i3 + $i0;

        $r12 = $r2[$i4];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, 0, $r12, $i1, i2);

        $i3 = $i3 + 1;

        goto label5;

     label7:
        specialinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: void setSubMatrix(org.apache.commons.math3.FieldElement[][],int,int)>(r1, $i0, $i1);

     label8:
        return;
    }
    public org.apache.commons.math3.linear.Array2DRowFieldMatrix subtract(org.apache.commons.math3.linear.Array2DRowFieldMatrix) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException
    {
        org.apache.commons.math3.linear.Array2DRowFieldMatrix r0, r1;
        org.apache.commons.math3.FieldElement[] r2, r3, r4;
        int $i0, $i1, i2, i3;
        org.apache.commons.math3.Field $r5;
        java.lang.Object[][] $r6;
        org.apache.commons.math3.FieldElement[][] r7, $r8;
        org.apache.commons.math3.FieldElement $r9, $r10;
        java.lang.Object $r11;

        r0 := @this: org.apache.commons.math3.linear.Array2DRowFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.Array2DRowFieldMatrix;

        virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: void checkSubtractionCompatible(org.apache.commons.math3.linear.FieldMatrix)>(r1);

        $i0 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: int getRowDimension()>();

        $i1 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: int getColumnDimension()>();

        $r5 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: org.apache.commons.math3.Field getField()>();

        $r6 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[][] buildArray(org.apache.commons.math3.Field,int,int)>($r5, $i0, $i1);

        r7 = (org.apache.commons.math3.FieldElement[][]) $r6;

        i2 = 0;

     label1:
        if i2 >= $i0 goto label4;

        $r8 = r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: org.apache.commons.math3.FieldElement[][] data>;

        r2 = $r8[i2];

        $r8 = r1.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: org.apache.commons.math3.FieldElement[][] data>;

        r3 = $r8[i2];

        r4 = r7[i2];

        i3 = 0;

     label2:
        if i3 >= $i1 goto label3;

        $r9 = r2[i3];

        $r10 = r3[i3];

        $r11 = interfaceinvoke $r9.<org.apache.commons.math3.FieldElement: java.lang.Object subtract(java.lang.Object)>($r10);

        $r9 = (org.apache.commons.math3.FieldElement) $r11;

        r4[i3] = $r9;

        i3 = i3 + 1;

        goto label2;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        r1 = new org.apache.commons.math3.linear.Array2DRowFieldMatrix;

        $r5 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: org.apache.commons.math3.Field getField()>();

        specialinvoke r1.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: void <init>(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][],boolean)>($r5, r7, 0);

        return r1;
    }
    public org.apache.commons.math3.FieldElement walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)
    {
        org.apache.commons.math3.linear.Array2DRowFieldMatrix r0;
        org.apache.commons.math3.linear.FieldMatrixChangingVisitor r1;
        int $i0, $i1, $i2, $i3;
        org.apache.commons.math3.FieldElement[] r2;
        org.apache.commons.math3.FieldElement[][] $r3;
        org.apache.commons.math3.FieldElement $r4;

        r0 := @this: org.apache.commons.math3.linear.Array2DRowFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldMatrixChangingVisitor;

        $i2 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: int getRowDimension()>();

        $i3 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: int getColumnDimension()>();

        $i0 = $i2 + -1;

        $i1 = $i3 + -1;

        interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixChangingVisitor: void start(int,int,int,int,int,int)>($i2, $i3, 0, $i0, 0, $i1);

        $i0 = 0;

     label1:
        if $i0 >= $i3 goto label4;

        $i1 = 0;

     label2:
        if $i1 >= $i2 goto label3;

        $r3 = r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: org.apache.commons.math3.FieldElement[][] data>;

        r2 = $r3[$i1];

        $r4 = r2[$i0];

        $r4 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixChangingVisitor: org.apache.commons.math3.FieldElement visit(int,int,org.apache.commons.math3.FieldElement)>($i1, $i0, $r4);

        r2[$i0] = $r4;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $i0 = $i0 + 1;

        goto label1;

     label4:
        $r4 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixChangingVisitor: org.apache.commons.math3.FieldElement end()>();

        return $r4;
    }
    public org.apache.commons.math3.FieldElement walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor, int, int, int, int) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.linear.Array2DRowFieldMatrix r0;
        org.apache.commons.math3.linear.FieldMatrixChangingVisitor r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.apache.commons.math3.FieldElement[] r2;
        org.apache.commons.math3.FieldElement[][] $r3;
        org.apache.commons.math3.FieldElement $r4;

        r0 := @this: org.apache.commons.math3.linear.Array2DRowFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldMatrixChangingVisitor;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: void checkSubMatrixIndex(int,int,int,int)>($i0, $i1, $i2, $i3);

        $i4 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: int getRowDimension()>();

        $i5 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: int getColumnDimension()>();

        interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixChangingVisitor: void start(int,int,int,int,int,int)>($i4, $i5, $i0, $i1, $i2, $i3);

     label1:
        if $i2 > $i3 goto label4;

        $i4 = $i0;

     label2:
        if $i4 > $i1 goto label3;

        $r3 = r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: org.apache.commons.math3.FieldElement[][] data>;

        r2 = $r3[$i4];

        $r4 = r2[$i2];

        $r4 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixChangingVisitor: org.apache.commons.math3.FieldElement visit(int,int,org.apache.commons.math3.FieldElement)>($i4, $i2, $r4);

        r2[$i2] = $r4;

        $i4 = $i4 + 1;

        goto label2;

     label3:
        $i2 = $i2 + 1;

        goto label1;

     label4:
        $r4 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixChangingVisitor: org.apache.commons.math3.FieldElement end()>();

        return $r4;
    }
    public org.apache.commons.math3.FieldElement walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)
    {
        org.apache.commons.math3.linear.Array2DRowFieldMatrix r0;
        org.apache.commons.math3.linear.FieldMatrixPreservingVisitor r1;
        int $i0, $i1, $i2, $i3;
        org.apache.commons.math3.FieldElement[][] $r2;
        org.apache.commons.math3.FieldElement[] $r3;
        org.apache.commons.math3.FieldElement $r4;

        r0 := @this: org.apache.commons.math3.linear.Array2DRowFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldMatrixPreservingVisitor;

        $i2 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: int getRowDimension()>();

        $i3 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: int getColumnDimension()>();

        $i0 = $i2 + -1;

        $i1 = $i3 + -1;

        interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixPreservingVisitor: void start(int,int,int,int,int,int)>($i2, $i3, 0, $i0, 0, $i1);

        $i0 = 0;

     label1:
        if $i0 >= $i3 goto label4;

        $i1 = 0;

     label2:
        if $i1 >= $i2 goto label3;

        $r2 = r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: org.apache.commons.math3.FieldElement[][] data>;

        $r3 = $r2[$i1];

        $r4 = $r3[$i0];

        interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixPreservingVisitor: void visit(int,int,org.apache.commons.math3.FieldElement)>($i1, $i0, $r4);

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $i0 = $i0 + 1;

        goto label1;

     label4:
        $r4 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixPreservingVisitor: org.apache.commons.math3.FieldElement end()>();

        return $r4;
    }
    public org.apache.commons.math3.FieldElement walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor, int, int, int, int) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.linear.Array2DRowFieldMatrix r0;
        org.apache.commons.math3.linear.FieldMatrixPreservingVisitor r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.apache.commons.math3.FieldElement[][] $r2;
        org.apache.commons.math3.FieldElement[] $r3;
        org.apache.commons.math3.FieldElement $r4;

        r0 := @this: org.apache.commons.math3.linear.Array2DRowFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldMatrixPreservingVisitor;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: void checkSubMatrixIndex(int,int,int,int)>($i0, $i1, $i2, $i3);

        $i4 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: int getRowDimension()>();

        $i5 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: int getColumnDimension()>();

        interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixPreservingVisitor: void start(int,int,int,int,int,int)>($i4, $i5, $i0, $i1, $i2, $i3);

     label1:
        if $i2 > $i3 goto label4;

        $i4 = $i0;

     label2:
        if $i4 > $i1 goto label3;

        $r2 = r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: org.apache.commons.math3.FieldElement[][] data>;

        $r3 = $r2[$i4];

        $r4 = $r3[$i2];

        interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixPreservingVisitor: void visit(int,int,org.apache.commons.math3.FieldElement)>($i4, $i2, $r4);

        $i4 = $i4 + 1;

        goto label2;

     label3:
        $i2 = $i2 + 1;

        goto label1;

     label4:
        $r4 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixPreservingVisitor: org.apache.commons.math3.FieldElement end()>();

        return $r4;
    }
    public org.apache.commons.math3.FieldElement walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)
    {
        org.apache.commons.math3.linear.Array2DRowFieldMatrix r0;
        org.apache.commons.math3.linear.FieldMatrixChangingVisitor r1;
        int $i0, $i1, $i2, $i3;
        org.apache.commons.math3.FieldElement[] r2;
        org.apache.commons.math3.FieldElement[][] $r3;
        org.apache.commons.math3.FieldElement $r4;

        r0 := @this: org.apache.commons.math3.linear.Array2DRowFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldMatrixChangingVisitor;

        $i2 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: int getRowDimension()>();

        $i3 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: int getColumnDimension()>();

        $i0 = $i2 + -1;

        $i1 = $i3 + -1;

        interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixChangingVisitor: void start(int,int,int,int,int,int)>($i2, $i3, 0, $i0, 0, $i1);

        $i0 = 0;

     label1:
        if $i0 >= $i2 goto label4;

        $r3 = r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: org.apache.commons.math3.FieldElement[][] data>;

        r2 = $r3[$i0];

        $i1 = 0;

     label2:
        if $i1 >= $i3 goto label3;

        $r4 = r2[$i1];

        $r4 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixChangingVisitor: org.apache.commons.math3.FieldElement visit(int,int,org.apache.commons.math3.FieldElement)>($i0, $i1, $r4);

        r2[$i1] = $r4;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $i0 = $i0 + 1;

        goto label1;

     label4:
        $r4 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixChangingVisitor: org.apache.commons.math3.FieldElement end()>();

        return $r4;
    }
    public org.apache.commons.math3.FieldElement walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor, int, int, int, int) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.linear.Array2DRowFieldMatrix r0;
        org.apache.commons.math3.linear.FieldMatrixChangingVisitor r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.apache.commons.math3.FieldElement[] r2;
        org.apache.commons.math3.FieldElement[][] $r3;
        org.apache.commons.math3.FieldElement $r4;

        r0 := @this: org.apache.commons.math3.linear.Array2DRowFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldMatrixChangingVisitor;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: void checkSubMatrixIndex(int,int,int,int)>($i0, $i1, $i2, $i3);

        $i4 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: int getRowDimension()>();

        $i5 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: int getColumnDimension()>();

        interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixChangingVisitor: void start(int,int,int,int,int,int)>($i4, $i5, $i0, $i1, $i2, $i3);

     label1:
        if $i0 > $i1 goto label4;

        $r3 = r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: org.apache.commons.math3.FieldElement[][] data>;

        r2 = $r3[$i0];

        $i4 = $i2;

     label2:
        if $i4 > $i3 goto label3;

        $r4 = r2[$i4];

        $r4 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixChangingVisitor: org.apache.commons.math3.FieldElement visit(int,int,org.apache.commons.math3.FieldElement)>($i0, $i4, $r4);

        r2[$i4] = $r4;

        $i4 = $i4 + 1;

        goto label2;

     label3:
        $i0 = $i0 + 1;

        goto label1;

     label4:
        $r4 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixChangingVisitor: org.apache.commons.math3.FieldElement end()>();

        return $r4;
    }
    public org.apache.commons.math3.FieldElement walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)
    {
        org.apache.commons.math3.linear.Array2DRowFieldMatrix r0;
        org.apache.commons.math3.linear.FieldMatrixPreservingVisitor r1;
        int $i0, $i1, $i2, $i3;
        org.apache.commons.math3.FieldElement[] r2;
        org.apache.commons.math3.FieldElement[][] $r3;
        org.apache.commons.math3.FieldElement $r4;

        r0 := @this: org.apache.commons.math3.linear.Array2DRowFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldMatrixPreservingVisitor;

        $i2 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: int getRowDimension()>();

        $i3 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: int getColumnDimension()>();

        $i0 = $i2 + -1;

        $i1 = $i3 + -1;

        interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixPreservingVisitor: void start(int,int,int,int,int,int)>($i2, $i3, 0, $i0, 0, $i1);

        $i0 = 0;

     label1:
        if $i0 >= $i2 goto label4;

        $r3 = r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: org.apache.commons.math3.FieldElement[][] data>;

        r2 = $r3[$i0];

        $i1 = 0;

     label2:
        if $i1 >= $i3 goto label3;

        $r4 = r2[$i1];

        interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixPreservingVisitor: void visit(int,int,org.apache.commons.math3.FieldElement)>($i0, $i1, $r4);

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $i0 = $i0 + 1;

        goto label1;

     label4:
        $r4 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixPreservingVisitor: org.apache.commons.math3.FieldElement end()>();

        return $r4;
    }
    public org.apache.commons.math3.FieldElement walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor, int, int, int, int) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.linear.Array2DRowFieldMatrix r0;
        org.apache.commons.math3.linear.FieldMatrixPreservingVisitor r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.apache.commons.math3.FieldElement[] r2;
        org.apache.commons.math3.FieldElement[][] $r3;
        org.apache.commons.math3.FieldElement $r4;

        r0 := @this: org.apache.commons.math3.linear.Array2DRowFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldMatrixPreservingVisitor;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: void checkSubMatrixIndex(int,int,int,int)>($i0, $i1, $i2, $i3);

        $i4 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: int getRowDimension()>();

        $i5 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: int getColumnDimension()>();

        interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixPreservingVisitor: void start(int,int,int,int,int,int)>($i4, $i5, $i0, $i1, $i2, $i3);

     label1:
        if $i0 > $i1 goto label4;

        $r3 = r0.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: org.apache.commons.math3.FieldElement[][] data>;

        r2 = $r3[$i0];

        $i4 = $i2;

     label2:
        if $i4 > $i3 goto label3;

        $r4 = r2[$i4];

        interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixPreservingVisitor: void visit(int,int,org.apache.commons.math3.FieldElement)>($i0, $i4, $r4);

        $i4 = $i4 + 1;

        goto label2;

     label3:
        $i0 = $i0 + 1;

        goto label1;

     label4:
        $r4 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixPreservingVisitor: org.apache.commons.math3.FieldElement end()>();

        return $r4;
    }
