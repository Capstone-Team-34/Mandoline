org.apache.commons.math3.linear.RealMatrixFormat extends java.lang.Object
private static final java.lang.String DEFAULT_COLUMN_SEPARATOR
private static final java.lang.String DEFAULT_PREFIX
private static final java.lang.String DEFAULT_ROW_PREFIX
private static final java.lang.String DEFAULT_ROW_SEPARATOR
private static final java.lang.String DEFAULT_ROW_SUFFIX
private static final java.lang.String DEFAULT_SUFFIX
private final java.lang.String columnSeparator
private final java.text.NumberFormat format
private final java.lang.String prefix
private final java.lang.String rowPrefix
private final java.lang.String rowSeparator
private final java.lang.String rowSuffix
private final java.lang.String suffix
    public void <init>()
    {
        org.apache.commons.math3.linear.RealMatrixFormat r0;
        java.text.NumberFormat $r1;

        r0 := @this: org.apache.commons.math3.linear.RealMatrixFormat;

        $r1 = staticinvoke <org.apache.commons.math3.util.CompositeFormat: java.text.NumberFormat getDefaultNumberFormat()>();

        specialinvoke r0.<org.apache.commons.math3.linear.RealMatrixFormat: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)>("{", "}", "{", "}", ",", ",", $r1);

        return;
    }
    public void <init>(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        org.apache.commons.math3.linear.RealMatrixFormat r0;
        java.lang.String $r1, $r2, $r3, $r4, $r5, $r6;
        java.text.NumberFormat $r7;

        r0 := @this: org.apache.commons.math3.linear.RealMatrixFormat;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: java.lang.String;

        $r5 := @parameter4: java.lang.String;

        $r6 := @parameter5: java.lang.String;

        $r7 = staticinvoke <org.apache.commons.math3.util.CompositeFormat: java.text.NumberFormat getDefaultNumberFormat()>();

        specialinvoke r0.<org.apache.commons.math3.linear.RealMatrixFormat: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)>($r1, $r2, $r3, $r4, $r5, $r6, $r7);

        return;
    }
    public void <init>(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.text.NumberFormat)
    {
        org.apache.commons.math3.linear.RealMatrixFormat r0;
        java.lang.String $r1, $r2, $r3, $r4, $r5, $r6;
        java.text.NumberFormat $r7;

        r0 := @this: org.apache.commons.math3.linear.RealMatrixFormat;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: java.lang.String;

        $r5 := @parameter4: java.lang.String;

        $r6 := @parameter5: java.lang.String;

        $r7 := @parameter6: java.text.NumberFormat;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.linear.RealMatrixFormat: java.lang.String prefix> = $r1;

        r0.<org.apache.commons.math3.linear.RealMatrixFormat: java.lang.String suffix> = $r2;

        r0.<org.apache.commons.math3.linear.RealMatrixFormat: java.lang.String rowPrefix> = $r3;

        r0.<org.apache.commons.math3.linear.RealMatrixFormat: java.lang.String rowSuffix> = $r4;

        r0.<org.apache.commons.math3.linear.RealMatrixFormat: java.lang.String rowSeparator> = $r5;

        r0.<org.apache.commons.math3.linear.RealMatrixFormat: java.lang.String columnSeparator> = $r6;

        r0.<org.apache.commons.math3.linear.RealMatrixFormat: java.text.NumberFormat format> = $r7;

        $r7 = r0.<org.apache.commons.math3.linear.RealMatrixFormat: java.text.NumberFormat format>;

        virtualinvoke $r7.<java.text.NumberFormat: void setGroupingUsed(boolean)>(0);

        return;
    }
    public void <init>(java.text.NumberFormat)
    {
        org.apache.commons.math3.linear.RealMatrixFormat r0;
        java.text.NumberFormat $r1;

        r0 := @this: org.apache.commons.math3.linear.RealMatrixFormat;

        $r1 := @parameter0: java.text.NumberFormat;

        specialinvoke r0.<org.apache.commons.math3.linear.RealMatrixFormat: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)>("{", "}", "{", "}", ",", ",", $r1);

        return;
    }
    public static java.util.Locale[] getAvailableLocales()
    {
        java.util.Locale[] $r0;

        $r0 = staticinvoke <java.text.NumberFormat: java.util.Locale[] getAvailableLocales()>();

        return $r0;
    }
    public static org.apache.commons.math3.linear.RealMatrixFormat getInstance()
    {
        java.util.Locale $r0;
        org.apache.commons.math3.linear.RealMatrixFormat $r1;

        $r0 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r1 = staticinvoke <org.apache.commons.math3.linear.RealMatrixFormat: org.apache.commons.math3.linear.RealMatrixFormat getInstance(java.util.Locale)>($r0);

        return $r1;
    }
    public static org.apache.commons.math3.linear.RealMatrixFormat getInstance(java.util.Locale)
    {
        java.util.Locale $r0;
        org.apache.commons.math3.linear.RealMatrixFormat $r1;
        java.text.NumberFormat $r2;

        $r0 := @parameter0: java.util.Locale;

        $r1 = new org.apache.commons.math3.linear.RealMatrixFormat;

        $r2 = staticinvoke <org.apache.commons.math3.util.CompositeFormat: java.text.NumberFormat getDefaultNumberFormat(java.util.Locale)>($r0);

        specialinvoke $r1.<org.apache.commons.math3.linear.RealMatrixFormat: void <init>(java.text.NumberFormat)>($r2);

        return $r1;
    }
    public java.lang.String format(org.apache.commons.math3.linear.RealMatrix)
    {
        org.apache.commons.math3.linear.RealMatrixFormat r0;
        org.apache.commons.math3.linear.RealMatrix $r1;
        java.text.FieldPosition $r2;
        java.lang.StringBuffer $r3;
        java.lang.String $r4;

        r0 := @this: org.apache.commons.math3.linear.RealMatrixFormat;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r2 = new java.text.FieldPosition;

        specialinvoke $r2.<java.text.FieldPosition: void <init>(int)>(0);

        $r3 = virtualinvoke r0.<org.apache.commons.math3.linear.RealMatrixFormat: java.lang.StringBuffer format(org.apache.commons.math3.linear.RealMatrix,java.lang.StringBuffer,java.text.FieldPosition)>($r1, $r3, $r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }
    public java.lang.StringBuffer format(org.apache.commons.math3.linear.RealMatrix, java.lang.StringBuffer, java.text.FieldPosition)
    {
        org.apache.commons.math3.linear.RealMatrixFormat r0;
        org.apache.commons.math3.linear.RealMatrix $r1;
        java.lang.StringBuffer $r2;
        java.text.FieldPosition $r3;
        java.lang.String $r4;
        int $i0, i1, i2, $i3;
        double $d0;
        java.text.NumberFormat $r5;

        r0 := @this: org.apache.commons.math3.linear.RealMatrixFormat;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        $r2 := @parameter1: java.lang.StringBuffer;

        $r3 := @parameter2: java.text.FieldPosition;

        virtualinvoke $r3.<java.text.FieldPosition: void setBeginIndex(int)>(0);

        virtualinvoke $r3.<java.text.FieldPosition: void setEndIndex(int)>(0);

        $r4 = r0.<org.apache.commons.math3.linear.RealMatrixFormat: java.lang.String prefix>;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $i0 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        i1 = 0;

     label1:
        if i1 >= $i0 goto label6;

        $r4 = r0.<org.apache.commons.math3.linear.RealMatrixFormat: java.lang.String rowPrefix>;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        i2 = 0;

     label2:
        $i3 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        if i2 >= $i3 goto label4;

        if i2 <= 0 goto label3;

        $r4 = r0.<org.apache.commons.math3.linear.RealMatrixFormat: java.lang.String columnSeparator>;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

     label3:
        $d0 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>(i1, i2);

        $r5 = r0.<org.apache.commons.math3.linear.RealMatrixFormat: java.text.NumberFormat format>;

        staticinvoke <org.apache.commons.math3.util.CompositeFormat: java.lang.StringBuffer formatDouble(double,java.text.NumberFormat,java.lang.StringBuffer,java.text.FieldPosition)>($d0, $r5, $r2, $r3);

        i2 = i2 + 1;

        goto label2;

     label4:
        $r4 = r0.<org.apache.commons.math3.linear.RealMatrixFormat: java.lang.String rowSuffix>;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        i2 = $i0 + -1;

        if i1 >= i2 goto label5;

        $r4 = r0.<org.apache.commons.math3.linear.RealMatrixFormat: java.lang.String rowSeparator>;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

     label5:
        i1 = i1 + 1;

        goto label1;

     label6:
        $r4 = r0.<org.apache.commons.math3.linear.RealMatrixFormat: java.lang.String suffix>;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        return $r2;
    }
    public java.lang.String getColumnSeparator()
    {
        org.apache.commons.math3.linear.RealMatrixFormat r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.math3.linear.RealMatrixFormat;

        r1 = r0.<org.apache.commons.math3.linear.RealMatrixFormat: java.lang.String columnSeparator>;

        return r1;
    }
    public java.text.NumberFormat getFormat()
    {
        org.apache.commons.math3.linear.RealMatrixFormat r0;
        java.text.NumberFormat r1;

        r0 := @this: org.apache.commons.math3.linear.RealMatrixFormat;

        r1 = r0.<org.apache.commons.math3.linear.RealMatrixFormat: java.text.NumberFormat format>;

        return r1;
    }
    public java.lang.String getPrefix()
    {
        org.apache.commons.math3.linear.RealMatrixFormat r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.math3.linear.RealMatrixFormat;

        r1 = r0.<org.apache.commons.math3.linear.RealMatrixFormat: java.lang.String prefix>;

        return r1;
    }
    public java.lang.String getRowPrefix()
    {
        org.apache.commons.math3.linear.RealMatrixFormat r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.math3.linear.RealMatrixFormat;

        r1 = r0.<org.apache.commons.math3.linear.RealMatrixFormat: java.lang.String rowPrefix>;

        return r1;
    }
    public java.lang.String getRowSeparator()
    {
        org.apache.commons.math3.linear.RealMatrixFormat r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.math3.linear.RealMatrixFormat;

        r1 = r0.<org.apache.commons.math3.linear.RealMatrixFormat: java.lang.String rowSeparator>;

        return r1;
    }
    public java.lang.String getRowSuffix()
    {
        org.apache.commons.math3.linear.RealMatrixFormat r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.math3.linear.RealMatrixFormat;

        r1 = r0.<org.apache.commons.math3.linear.RealMatrixFormat: java.lang.String rowSuffix>;

        return r1;
    }
    public java.lang.String getSuffix()
    {
        org.apache.commons.math3.linear.RealMatrixFormat r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.math3.linear.RealMatrixFormat;

        r1 = r0.<org.apache.commons.math3.linear.RealMatrixFormat: java.lang.String suffix>;

        return r1;
    }
    public org.apache.commons.math3.linear.RealMatrix parse(java.lang.String)
    {
        org.apache.commons.math3.linear.RealMatrixFormat r0;
        java.lang.String $r1;
        java.text.ParsePosition r2;
        org.apache.commons.math3.linear.RealMatrix $r3;
        int $i0;
        org.apache.commons.math3.exception.MathParseException $r4;

        r0 := @this: org.apache.commons.math3.linear.RealMatrixFormat;

        $r1 := @parameter0: java.lang.String;

        r2 = new java.text.ParsePosition;

        specialinvoke r2.<java.text.ParsePosition: void <init>(int)>(0);

        $r3 = virtualinvoke r0.<org.apache.commons.math3.linear.RealMatrixFormat: org.apache.commons.math3.linear.RealMatrix parse(java.lang.String,java.text.ParsePosition)>($r1, r2);

        $i0 = virtualinvoke r2.<java.text.ParsePosition: int getIndex()>();

        if $i0 != 0 goto label1;

        $r4 = new org.apache.commons.math3.exception.MathParseException;

        $i0 = virtualinvoke r2.<java.text.ParsePosition: int getErrorIndex()>();

        specialinvoke $r4.<org.apache.commons.math3.exception.MathParseException: void <init>(java.lang.String,int,java.lang.Class)>($r1, $i0, class "Lorg/apache/commons/math3/linear/Array2DRowRealMatrix;");

        throw $r4;

     label1:
        return $r3;
    }
    public org.apache.commons.math3.linear.RealMatrix parse(java.lang.String, java.text.ParsePosition)
    {
        org.apache.commons.math3.linear.RealMatrixFormat r0;
        java.lang.String $r1, $r6, $r7, $r8, $r9, $r10, $r11;
        java.text.ParsePosition $r2;
        double[][] r3;
        java.util.ArrayList r4, r12;
        double[] $r5;
        int $i0, $i1, $i2;
        boolean $z0, $z1;
        java.text.NumberFormat $r13;
        java.lang.Number $r14;
        java.util.Iterator $r15;
        java.lang.Object $r16;
        java.util.List r17;
        double $d0;
        org.apache.commons.math3.linear.RealMatrix $r18;

        r0 := @this: org.apache.commons.math3.linear.RealMatrixFormat;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.text.ParsePosition;

        $i0 = virtualinvoke $r2.<java.text.ParsePosition: int getIndex()>();

        $r6 = r0.<org.apache.commons.math3.linear.RealMatrixFormat: java.lang.String prefix>;

        $r6 = virtualinvoke $r6.<java.lang.String: java.lang.String trim()>();

        $r7 = r0.<org.apache.commons.math3.linear.RealMatrixFormat: java.lang.String suffix>;

        $r7 = virtualinvoke $r7.<java.lang.String: java.lang.String trim()>();

        $r8 = r0.<org.apache.commons.math3.linear.RealMatrixFormat: java.lang.String rowPrefix>;

        $r8 = virtualinvoke $r8.<java.lang.String: java.lang.String trim()>();

        $r9 = r0.<org.apache.commons.math3.linear.RealMatrixFormat: java.lang.String rowSuffix>;

        $r9 = virtualinvoke $r9.<java.lang.String: java.lang.String trim()>();

        $r10 = r0.<org.apache.commons.math3.linear.RealMatrixFormat: java.lang.String columnSeparator>;

        $r10 = virtualinvoke $r10.<java.lang.String: java.lang.String trim()>();

        $r11 = r0.<org.apache.commons.math3.linear.RealMatrixFormat: java.lang.String rowSeparator>;

        $r11 = virtualinvoke $r11.<java.lang.String: java.lang.String trim()>();

        staticinvoke <org.apache.commons.math3.util.CompositeFormat: void parseAndIgnoreWhitespace(java.lang.String,java.text.ParsePosition)>($r1, $r2);

        $z0 = staticinvoke <org.apache.commons.math3.util.CompositeFormat: boolean parseFixedstring(java.lang.String,java.lang.String,java.text.ParsePosition)>($r1, $r6, $r2);

        if $z0 != 0 goto label01;

        return null;

     label01:
        r4 = new java.util.ArrayList;

        specialinvoke r4.<java.util.ArrayList: void <init>()>();

        r12 = new java.util.ArrayList;

        specialinvoke r12.<java.util.ArrayList: void <init>()>();

        $z0 = 1;

     label02:
        if $z0 == 0 goto label09;

        $z1 = interfaceinvoke r12.<java.util.List: boolean isEmpty()>();

        if $z1 != 0 goto label06;

        staticinvoke <org.apache.commons.math3.util.CompositeFormat: void parseAndIgnoreWhitespace(java.lang.String,java.text.ParsePosition)>($r1, $r2);

        $z1 = staticinvoke <org.apache.commons.math3.util.CompositeFormat: boolean parseFixedstring(java.lang.String,java.lang.String,java.text.ParsePosition)>($r1, $r10, $r2);

        if $z1 != 0 goto label05;

        $i1 = virtualinvoke $r9.<java.lang.String: int length()>();

        if $i1 == 0 goto label03;

        $z1 = staticinvoke <org.apache.commons.math3.util.CompositeFormat: boolean parseFixedstring(java.lang.String,java.lang.String,java.text.ParsePosition)>($r1, $r9, $r2);

        if $z1 != 0 goto label03;

        return null;

     label03:
        staticinvoke <org.apache.commons.math3.util.CompositeFormat: void parseAndIgnoreWhitespace(java.lang.String,java.text.ParsePosition)>($r1, $r2);

        $z1 = staticinvoke <org.apache.commons.math3.util.CompositeFormat: boolean parseFixedstring(java.lang.String,java.lang.String,java.text.ParsePosition)>($r1, $r11, $r2);

        if $z1 == 0 goto label04;

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>(r12);

        r12 = new java.util.ArrayList;

        specialinvoke r12.<java.util.ArrayList: void <init>()>();

        goto label02;

     label04:
        $z0 = 0;

     label05:
        if $z0 == 0 goto label02;

        staticinvoke <org.apache.commons.math3.util.CompositeFormat: void parseAndIgnoreWhitespace(java.lang.String,java.text.ParsePosition)>($r1, $r2);

        $r13 = r0.<org.apache.commons.math3.linear.RealMatrixFormat: java.text.NumberFormat format>;

        $r14 = staticinvoke <org.apache.commons.math3.util.CompositeFormat: java.lang.Number parseNumber(java.lang.String,java.text.NumberFormat,java.text.ParsePosition)>($r1, $r13, $r2);

        if $r14 == null goto label07;

        interfaceinvoke r12.<java.util.List: boolean add(java.lang.Object)>($r14);

        goto label02;

     label06:
        staticinvoke <org.apache.commons.math3.util.CompositeFormat: void parseAndIgnoreWhitespace(java.lang.String,java.text.ParsePosition)>($r1, $r2);

        $i1 = virtualinvoke $r8.<java.lang.String: int length()>();

        if $i1 == 0 goto label05;

        $z1 = staticinvoke <org.apache.commons.math3.util.CompositeFormat: boolean parseFixedstring(java.lang.String,java.lang.String,java.text.ParsePosition)>($r1, $r8, $r2);

        if $z1 != 0 goto label05;

        return null;

     label07:
        $z0 = interfaceinvoke r12.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label08;

        $z0 = 0;

        goto label02;

     label08:
        virtualinvoke $r2.<java.text.ParsePosition: void setIndex(int)>($i0);

        return null;

     label09:
        $z0 = interfaceinvoke r12.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label10;

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>(r12);

     label10:
        staticinvoke <org.apache.commons.math3.util.CompositeFormat: void parseAndIgnoreWhitespace(java.lang.String,java.text.ParsePosition)>($r1, $r2);

        $z0 = staticinvoke <org.apache.commons.math3.util.CompositeFormat: boolean parseFixedstring(java.lang.String,java.lang.String,java.text.ParsePosition)>($r1, $r7, $r2);

        if $z0 != 0 goto label11;

        return null;

     label11:
        $z0 = interfaceinvoke r4.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label12;

        virtualinvoke $r2.<java.text.ParsePosition: void setIndex(int)>($i0);

        return null;

     label12:
        $i0 = interfaceinvoke r4.<java.util.List: int size()>();

        r3 = newarray (double[])[$i0];

        $i0 = 0;

        $r15 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();

     label13:
        $z0 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label16;

        $r16 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        r17 = (java.util.List) $r16;

        $i1 = interfaceinvoke r17.<java.util.List: int size()>();

        $r5 = newarray (double)[$i1];

        r3[$i0] = $r5;

        $i1 = 0;

     label14:
        $i2 = interfaceinvoke r17.<java.util.List: int size()>();

        if $i1 >= $i2 goto label15;

        $r5 = r3[$i0];

        $r16 = interfaceinvoke r17.<java.util.List: java.lang.Object get(int)>($i1);

        $r14 = (java.lang.Number) $r16;

        $d0 = virtualinvoke $r14.<java.lang.Number: double doubleValue()>();

        $r5[$i1] = $d0;

        $i1 = $i1 + 1;

        goto label14;

     label15:
        $i0 = $i0 + 1;

        goto label13;

     label16:
        $r18 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix createRealMatrix(double[][])>(r3);

        return $r18;
    }
