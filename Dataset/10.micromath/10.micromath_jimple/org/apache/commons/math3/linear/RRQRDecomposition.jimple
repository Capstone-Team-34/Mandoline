org.apache.commons.math3.linear.RRQRDecomposition extends org.apache.commons.math3.linear.QRDecomposition
private org.apache.commons.math3.linear.RealMatrix cachedP
private int[] p
    public void <init>(org.apache.commons.math3.linear.RealMatrix)
    {
        org.apache.commons.math3.linear.RRQRDecomposition r0;
        org.apache.commons.math3.linear.RealMatrix $r1;

        r0 := @this: org.apache.commons.math3.linear.RRQRDecomposition;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        specialinvoke r0.<org.apache.commons.math3.linear.RRQRDecomposition: void <init>(org.apache.commons.math3.linear.RealMatrix,double)>($r1, 0.0);

        return;
    }
    public void <init>(org.apache.commons.math3.linear.RealMatrix, double)
    {
        org.apache.commons.math3.linear.RRQRDecomposition r0;
        org.apache.commons.math3.linear.RealMatrix $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.RRQRDecomposition;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        $d0 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.linear.QRDecomposition: void <init>(org.apache.commons.math3.linear.RealMatrix,double)>($r1, $d0);

        return;
    }
    protected void decompose(double[][])
    {
        org.apache.commons.math3.linear.RRQRDecomposition r0;
        double[][] $r1;
        int $i0, $i1;
        int[] $r2;

        r0 := @this: org.apache.commons.math3.linear.RRQRDecomposition;

        $r1 := @parameter0: double[][];

        $i0 = lengthof $r1;

        $r2 = newarray (int)[$i0];

        r0.<org.apache.commons.math3.linear.RRQRDecomposition: int[] p> = $r2;

        $i0 = 0;

     label1:
        $r2 = r0.<org.apache.commons.math3.linear.RRQRDecomposition: int[] p>;

        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label2;

        $r2 = r0.<org.apache.commons.math3.linear.RRQRDecomposition: int[] p>;

        $r2[$i0] = $i0;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        specialinvoke r0.<org.apache.commons.math3.linear.QRDecomposition: void decompose(double[][])>($r1);

        return;
    }
    public org.apache.commons.math3.linear.RealMatrix getP()
    {
        org.apache.commons.math3.linear.RRQRDecomposition r0;
        int i0, i1, $i2;
        org.apache.commons.math3.linear.RealMatrix $r1;
        int[] $r2;

        r0 := @this: org.apache.commons.math3.linear.RRQRDecomposition;

        $r1 = r0.<org.apache.commons.math3.linear.RRQRDecomposition: org.apache.commons.math3.linear.RealMatrix cachedP>;

        if $r1 != null goto label2;

        $r2 = r0.<org.apache.commons.math3.linear.RRQRDecomposition: int[] p>;

        i0 = lengthof $r2;

        $r1 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix createRealMatrix(int,int)>(i0, i0);

        r0.<org.apache.commons.math3.linear.RRQRDecomposition: org.apache.commons.math3.linear.RealMatrix cachedP> = $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r1 = r0.<org.apache.commons.math3.linear.RRQRDecomposition: org.apache.commons.math3.linear.RealMatrix cachedP>;

        $r2 = r0.<org.apache.commons.math3.linear.RRQRDecomposition: int[] p>;

        $i2 = $r2[i1];

        interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: void setEntry(int,int,double)>($i2, i1, 1.0);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r1 = r0.<org.apache.commons.math3.linear.RRQRDecomposition: org.apache.commons.math3.linear.RealMatrix cachedP>;

        return $r1;
    }
    public int getRank(double)
    {
        org.apache.commons.math3.linear.RRQRDecomposition r0;
        double $d0, $d1, d2, $d3;
        int $i0, $i1, $i2, i3, $i4;
        org.apache.commons.math3.linear.RealMatrix $r1, $r2;
        byte $b5;

        r0 := @this: org.apache.commons.math3.linear.RRQRDecomposition;

        $d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.linear.RRQRDecomposition: org.apache.commons.math3.linear.RealMatrix getR()>();

        $i1 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $i2 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        i3 = 1;

        $d1 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: double getFrobeniusNorm()>();

        d2 = $d1;

     label1:
        $i0 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i1, $i2);

        if i3 >= $i0 goto label3;

        $i4 = $i1 + -1;

        $i0 = $i2 + -1;

        $r2 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix getSubMatrix(int,int,int,int)>(i3, $i4, i3, $i0);

        $d3 = interfaceinvoke $r2.<org.apache.commons.math3.linear.RealMatrix: double getFrobeniusNorm()>();

        $b5 = $d3 cmpl 0.0;

        if $b5 == 0 goto label3;

        d2 = $d3 / d2;

        d2 = d2 * $d1;

        $b5 = d2 cmpg $d0;

        if $b5 >= 0 goto label2;

        return i3;

     label2:
        d2 = $d3;

        i3 = i3 + 1;

        goto label1;

     label3:
        return i3;
    }
    public org.apache.commons.math3.linear.DecompositionSolver getSolver()
    {
        org.apache.commons.math3.linear.RRQRDecomposition r0;
        org.apache.commons.math3.linear.RRQRDecomposition$Solver $r1;
        org.apache.commons.math3.linear.DecompositionSolver $r2;
        org.apache.commons.math3.linear.RealMatrix $r3;

        r0 := @this: org.apache.commons.math3.linear.RRQRDecomposition;

        $r1 = new org.apache.commons.math3.linear.RRQRDecomposition$Solver;

        $r2 = specialinvoke r0.<org.apache.commons.math3.linear.QRDecomposition: org.apache.commons.math3.linear.DecompositionSolver getSolver()>();

        $r3 = virtualinvoke r0.<org.apache.commons.math3.linear.RRQRDecomposition: org.apache.commons.math3.linear.RealMatrix getP()>();

        specialinvoke $r1.<org.apache.commons.math3.linear.RRQRDecomposition$Solver: void <init>(org.apache.commons.math3.linear.DecompositionSolver,org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RRQRDecomposition$1)>($r2, $r3, null);

        return $r1;
    }
    protected void performHouseholderReflection(int, double[][])
    {
        org.apache.commons.math3.linear.RRQRDecomposition r0;
        int $i0, i1, i2, $i3, $i4;
        double[][] $r1;
        double[] r2, $r3;
        double $d0, d1, d2, $d3;
        byte $b5;
        int[] $r4, $r5;

        r0 := @this: org.apache.commons.math3.linear.RRQRDecomposition;

        $i0 := @parameter0: int;

        $r1 := @parameter1: double[][];

        d1 = 0.0;

        i2 = $i0;

        i1 = $i0;

     label1:
        $i3 = lengthof $r1;

        if i1 >= $i3 goto label5;

        d2 = 0.0;

        $i3 = 0;

     label2:
        r2 = $r1[i1];

        $i4 = lengthof r2;

        if $i3 >= $i4 goto label3;

        r2 = $r1[i1];

        $d3 = r2[$i3];

        r2 = $r1[i1];

        $d0 = r2[$i3];

        $d0 = $d3 * $d0;

        d2 = d2 + $d0;

        $i3 = $i3 + 1;

        goto label2;

     label3:
        $b5 = d2 cmpl d1;

        if $b5 <= 0 goto label4;

        d1 = d2;

        i2 = i1;

     label4:
        i1 = i1 + 1;

        goto label1;

     label5:
        if i2 == $i0 goto label6;

        r2 = $r1[$i0];

        $r3 = $r1[i2];

        $r1[$i0] = $r3;

        $r1[i2] = r2;

        $r4 = r0.<org.apache.commons.math3.linear.RRQRDecomposition: int[] p>;

        i1 = $r4[$i0];

        $r4 = r0.<org.apache.commons.math3.linear.RRQRDecomposition: int[] p>;

        $r5 = r0.<org.apache.commons.math3.linear.RRQRDecomposition: int[] p>;

        $i3 = $r5[i2];

        $r4[$i0] = $i3;

        $r4 = r0.<org.apache.commons.math3.linear.RRQRDecomposition: int[] p>;

        $r4[i2] = i1;

     label6:
        specialinvoke r0.<org.apache.commons.math3.linear.QRDecomposition: void performHouseholderReflection(int,double[][])>($i0, $r1);

        return;
    }
