org.apache.commons.math3.linear.DiagonalMatrix extends org.apache.commons.math3.linear.AbstractRealMatrix implements java.io.Serializable
private static final long serialVersionUID
private final double[] data
    public void <init>(int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.linear.DiagonalMatrix r0;
        int $i0;
        double[] $r1;

        r0 := @this: org.apache.commons.math3.linear.DiagonalMatrix;

        $i0 := @parameter0: int;

        specialinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: void <init>(int,int)>($i0, $i0);

        $r1 = newarray (double)[$i0];

        r0.<org.apache.commons.math3.linear.DiagonalMatrix: double[] data> = $r1;

        return;
    }
    public void <init>(double[])
    {
        org.apache.commons.math3.linear.DiagonalMatrix r0;
        double[] $r1;

        r0 := @this: org.apache.commons.math3.linear.DiagonalMatrix;

        $r1 := @parameter0: double[];

        specialinvoke r0.<org.apache.commons.math3.linear.DiagonalMatrix: void <init>(double[],boolean)>($r1, 1);

        return;
    }
    public void <init>(double[], boolean) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.linear.DiagonalMatrix r0;
        double[] $r1;
        boolean $z0;
        java.lang.Object $r2;

        r0 := @this: org.apache.commons.math3.linear.DiagonalMatrix;

        $r1 := @parameter0: double[];

        $z0 := @parameter1: boolean;

        specialinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: void <init>()>();

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r1 = (double[]) $r2;

     label1:
        r0.<org.apache.commons.math3.linear.DiagonalMatrix: double[] data> = $r1;

        return;

     label2:
        goto label1;
    }
    private void ensureZero(double) throws org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.linear.DiagonalMatrix r0;
        double $d0;
        boolean $z0;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r1;
        java.lang.Double $r2;
        java.lang.Integer $r3;

        r0 := @this: org.apache.commons.math3.linear.DiagonalMatrix;

        $d0 := @parameter0: double;

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,int)>(0.0, $d0, 1);

        if $z0 != 0 goto label1;

        $r1 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        specialinvoke $r1.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r2, $r3, 1);

        throw $r1;

     label1:
        return;
    }
    public org.apache.commons.math3.linear.DiagonalMatrix add(org.apache.commons.math3.linear.DiagonalMatrix) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException
    {
        org.apache.commons.math3.linear.DiagonalMatrix r0, $r1;
        double[] r2, $r3;
        double $d0, $d1;
        int $i0, i1;

        r0 := @this: org.apache.commons.math3.linear.DiagonalMatrix;

        $r1 := @parameter0: org.apache.commons.math3.linear.DiagonalMatrix;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkAdditionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)>(r0, $r1);

        $i0 = virtualinvoke r0.<org.apache.commons.math3.linear.DiagonalMatrix: int getRowDimension()>();

        r2 = newarray (double)[$i0];

        i1 = 0;

     label1:
        if i1 >= $i0 goto label2;

        $r3 = r0.<org.apache.commons.math3.linear.DiagonalMatrix: double[] data>;

        $d1 = $r3[i1];

        $r3 = $r1.<org.apache.commons.math3.linear.DiagonalMatrix: double[] data>;

        $d0 = $r3[i1];

        $d0 = $d1 + $d0;

        r2[i1] = $d0;

        i1 = i1 + 1;

        goto label1;

     label2:
        r0 = new org.apache.commons.math3.linear.DiagonalMatrix;

        specialinvoke r0.<org.apache.commons.math3.linear.DiagonalMatrix: void <init>(double[],boolean)>(r2, 0);

        return r0;
    }
    public void addToEntry(int, int, double) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.linear.DiagonalMatrix r0;
        int $i0, $i1;
        double $d0, $d1;
        double[] $r1;

        r0 := @this: org.apache.commons.math3.linear.DiagonalMatrix;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $d0 := @parameter2: double;

        if $i0 != $i1 goto label1;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)>(r0, $i0);

        $r1 = r0.<org.apache.commons.math3.linear.DiagonalMatrix: double[] data>;

        $d1 = $r1[$i0];

        $d0 = $d1 + $d0;

        $r1[$i0] = $d0;

        return;

     label1:
        specialinvoke r0.<org.apache.commons.math3.linear.DiagonalMatrix: void ensureZero(double)>($d0);

        return;
    }
    public org.apache.commons.math3.linear.RealMatrix copy()
    {
        org.apache.commons.math3.linear.DiagonalMatrix r0, $r1;
        double[] $r2;

        r0 := @this: org.apache.commons.math3.linear.DiagonalMatrix;

        $r1 = new org.apache.commons.math3.linear.DiagonalMatrix;

        $r2 = r0.<org.apache.commons.math3.linear.DiagonalMatrix: double[] data>;

        specialinvoke $r1.<org.apache.commons.math3.linear.DiagonalMatrix: void <init>(double[])>($r2);

        return $r1;
    }
    public org.apache.commons.math3.linear.RealMatrix createMatrix(int, int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.DiagonalMatrix r0;
        int $i0, $i1;
        org.apache.commons.math3.exception.DimensionMismatchException $r1;

        r0 := @this: org.apache.commons.math3.linear.DiagonalMatrix;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        if $i0 == $i1 goto label1;

        $r1 = new org.apache.commons.math3.exception.DimensionMismatchException;

        specialinvoke $r1.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i0, $i1);

        throw $r1;

     label1:
        r0 = new org.apache.commons.math3.linear.DiagonalMatrix;

        specialinvoke r0.<org.apache.commons.math3.linear.DiagonalMatrix: void <init>(int)>($i0);

        return r0;
    }
    public int getColumnDimension()
    {
        org.apache.commons.math3.linear.DiagonalMatrix r0;
        double[] $r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.linear.DiagonalMatrix;

        $r1 = r0.<org.apache.commons.math3.linear.DiagonalMatrix: double[] data>;

        $i0 = lengthof $r1;

        return $i0;
    }
    public double[][] getData()
    {
        org.apache.commons.math3.linear.DiagonalMatrix r0;
        int $i0, i1;
        int[] $r1;
        java.lang.Class $r2;
        java.lang.Object $r3;
        double[][] r4;
        double[] $r5, $r6;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.DiagonalMatrix;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.linear.DiagonalMatrix: int getRowDimension()>();

        $r1 = newarray (int)[2];

        $r1[0] = $i0;

        $r1[1] = $i0;

        $r2 = <java.lang.Double: java.lang.Class TYPE>;

        $r3 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r2, $r1);

        r4 = (double[][]) $r3;

        i1 = 0;

     label1:
        if i1 >= $i0 goto label2;

        $r5 = r4[i1];

        $r6 = r0.<org.apache.commons.math3.linear.DiagonalMatrix: double[] data>;

        $d0 = $r6[i1];

        $r5[i1] = $d0;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r4;
    }
    public double[] getDataRef()
    {
        org.apache.commons.math3.linear.DiagonalMatrix r0;
        double[] r1;

        r0 := @this: org.apache.commons.math3.linear.DiagonalMatrix;

        r1 = r0.<org.apache.commons.math3.linear.DiagonalMatrix: double[] data>;

        return r1;
    }
    public double getEntry(int, int) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.DiagonalMatrix r0;
        int $i0, $i1;
        double[] $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.DiagonalMatrix;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)>(r0, $i0, $i1);

        if $i0 != $i1 goto label1;

        $r1 = r0.<org.apache.commons.math3.linear.DiagonalMatrix: double[] data>;

        $d0 = $r1[$i0];

        return $d0;

     label1:
        return 0.0;
    }
    public int getRowDimension()
    {
        org.apache.commons.math3.linear.DiagonalMatrix r0;
        double[] $r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.linear.DiagonalMatrix;

        $r1 = r0.<org.apache.commons.math3.linear.DiagonalMatrix: double[] data>;

        $i0 = lengthof $r1;

        return $i0;
    }
    public org.apache.commons.math3.linear.DiagonalMatrix inverse() throws org.apache.commons.math3.linear.SingularMatrixException
    {
        org.apache.commons.math3.linear.DiagonalMatrix r0;

        r0 := @this: org.apache.commons.math3.linear.DiagonalMatrix;

        r0 = virtualinvoke r0.<org.apache.commons.math3.linear.DiagonalMatrix: org.apache.commons.math3.linear.DiagonalMatrix inverse(double)>(0.0);

        return r0;
    }
    public org.apache.commons.math3.linear.DiagonalMatrix inverse(double) throws org.apache.commons.math3.linear.SingularMatrixException
    {
        org.apache.commons.math3.linear.DiagonalMatrix r0;
        double $d0;
        double[] r1, $r3;
        boolean $z0;
        org.apache.commons.math3.linear.SingularMatrixException $r2;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.linear.DiagonalMatrix;

        $d0 := @parameter0: double;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.linear.DiagonalMatrix: boolean isSingular(double)>($d0);

        if $z0 == 0 goto label1;

        $r2 = new org.apache.commons.math3.linear.SingularMatrixException;

        specialinvoke $r2.<org.apache.commons.math3.linear.SingularMatrixException: void <init>()>();

        throw $r2;

     label1:
        r1 = r0.<org.apache.commons.math3.linear.DiagonalMatrix: double[] data>;

        $i0 = lengthof r1;

        r1 = newarray (double)[$i0];

        $i0 = 0;

     label2:
        $r3 = r0.<org.apache.commons.math3.linear.DiagonalMatrix: double[] data>;

        $i1 = lengthof $r3;

        if $i0 >= $i1 goto label3;

        $r3 = r0.<org.apache.commons.math3.linear.DiagonalMatrix: double[] data>;

        $d0 = $r3[$i0];

        $d0 = 1.0 / $d0;

        r1[$i0] = $d0;

        $i0 = $i0 + 1;

        goto label2;

     label3:
        r0 = new org.apache.commons.math3.linear.DiagonalMatrix;

        specialinvoke r0.<org.apache.commons.math3.linear.DiagonalMatrix: void <init>(double[],boolean)>(r1, 0);

        return r0;
    }
    public boolean isSingular(double)
    {
        org.apache.commons.math3.linear.DiagonalMatrix r0;
        double $d0, $d1;
        boolean $z0;
        int i0, $i1;
        double[] $r1;

        r0 := @this: org.apache.commons.math3.linear.DiagonalMatrix;

        $d0 := @parameter0: double;

        i0 = 0;

     label1:
        $r1 = r0.<org.apache.commons.math3.linear.DiagonalMatrix: double[] data>;

        $i1 = lengthof $r1;

        if i0 >= $i1 goto label3;

        $r1 = r0.<org.apache.commons.math3.linear.DiagonalMatrix: double[] data>;

        $d1 = $r1[i0];

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,double)>($d1, 0.0, $d0);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return 0;
    }
    public org.apache.commons.math3.linear.DiagonalMatrix multiply(org.apache.commons.math3.linear.DiagonalMatrix) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.DiagonalMatrix r0, $r1;
        double[] r2, $r3;
        double $d0, $d1;
        int $i0, i1;

        r0 := @this: org.apache.commons.math3.linear.DiagonalMatrix;

        $r1 := @parameter0: org.apache.commons.math3.linear.DiagonalMatrix;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)>(r0, $r1);

        $i0 = virtualinvoke r0.<org.apache.commons.math3.linear.DiagonalMatrix: int getRowDimension()>();

        r2 = newarray (double)[$i0];

        i1 = 0;

     label1:
        if i1 >= $i0 goto label2;

        $r3 = r0.<org.apache.commons.math3.linear.DiagonalMatrix: double[] data>;

        $d1 = $r3[i1];

        $r3 = $r1.<org.apache.commons.math3.linear.DiagonalMatrix: double[] data>;

        $d0 = $r3[i1];

        $d0 = $d1 * $d0;

        r2[i1] = $d0;

        i1 = i1 + 1;

        goto label1;

     label2:
        r0 = new org.apache.commons.math3.linear.DiagonalMatrix;

        specialinvoke r0.<org.apache.commons.math3.linear.DiagonalMatrix: void <init>(double[],boolean)>(r2, 0);

        return r0;
    }
    public org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.DiagonalMatrix r0, r2;
        org.apache.commons.math3.linear.RealMatrix r1;
        boolean $z0;
        int $i0, $i1, i2, i3;
        int[] $r3;
        java.lang.Class $r4;
        java.lang.Object $r5;
        double[][] r6;
        double[] $r7, $r8;
        double $d0, $d1;
        org.apache.commons.math3.linear.Array2DRowRealMatrix $r9;

        r0 := @this: org.apache.commons.math3.linear.DiagonalMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        $z0 = r1 instanceof org.apache.commons.math3.linear.DiagonalMatrix;

        if $z0 == 0 goto label1;

        r2 = (org.apache.commons.math3.linear.DiagonalMatrix) r1;

        r0 = virtualinvoke r0.<org.apache.commons.math3.linear.DiagonalMatrix: org.apache.commons.math3.linear.DiagonalMatrix multiply(org.apache.commons.math3.linear.DiagonalMatrix)>(r2);

        return r0;

     label1:
        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)>(r0, r1);

        $i0 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $i1 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        $r3 = newarray (int)[2];

        $r3[0] = $i0;

        $r3[1] = $i1;

        $r4 = <java.lang.Double: java.lang.Class TYPE>;

        $r5 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r4, $r3);

        r6 = (double[][]) $r5;

        i2 = 0;

     label2:
        if i2 >= $i0 goto label5;

        i3 = 0;

     label3:
        if i3 >= $i1 goto label4;

        $r7 = r6[i2];

        $r8 = r0.<org.apache.commons.math3.linear.DiagonalMatrix: double[] data>;

        $d0 = $r8[i2];

        $d1 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>(i2, i3);

        $d0 = $d0 * $d1;

        $r7[i3] = $d0;

        i3 = i3 + 1;

        goto label3;

     label4:
        i2 = i2 + 1;

        goto label2;

     label5:
        $r9 = new org.apache.commons.math3.linear.Array2DRowRealMatrix;

        specialinvoke $r9.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void <init>(double[][],boolean)>(r6, 0);

        return $r9;
    }
    public void multiplyEntry(int, int, double) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.DiagonalMatrix r0;
        int $i0, $i1;
        double $d0, $d1;
        double[] $r1;

        r0 := @this: org.apache.commons.math3.linear.DiagonalMatrix;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $d0 := @parameter2: double;

        if $i0 != $i1 goto label1;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)>(r0, $i0);

        $r1 = r0.<org.apache.commons.math3.linear.DiagonalMatrix: double[] data>;

        $d1 = $r1[$i0];

        $d0 = $d1 * $d0;

        $r1[$i0] = $d0;

     label1:
        return;
    }
    public double[] operate(double[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.DiagonalMatrix r0, $r2;
        double[] $r1;

        r0 := @this: org.apache.commons.math3.linear.DiagonalMatrix;

        $r1 := @parameter0: double[];

        $r2 = new org.apache.commons.math3.linear.DiagonalMatrix;

        specialinvoke $r2.<org.apache.commons.math3.linear.DiagonalMatrix: void <init>(double[],boolean)>($r1, 0);

        r0 = virtualinvoke r0.<org.apache.commons.math3.linear.DiagonalMatrix: org.apache.commons.math3.linear.DiagonalMatrix multiply(org.apache.commons.math3.linear.DiagonalMatrix)>($r2);

        $r1 = virtualinvoke r0.<org.apache.commons.math3.linear.DiagonalMatrix: double[] getDataRef()>();

        return $r1;
    }
    public org.apache.commons.math3.linear.RealVector preMultiply(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.DiagonalMatrix r0;
        org.apache.commons.math3.linear.RealVector r1;
        boolean $z0;
        org.apache.commons.math3.linear.ArrayRealVector r2;
        double[] $r3;

        r0 := @this: org.apache.commons.math3.linear.DiagonalMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.RealVector;

        $z0 = r1 instanceof org.apache.commons.math3.linear.ArrayRealVector;

        if $z0 == 0 goto label2;

        r2 = (org.apache.commons.math3.linear.ArrayRealVector) r1;

        $r3 = virtualinvoke r2.<org.apache.commons.math3.linear.ArrayRealVector: double[] getDataRef()>();

     label1:
        $r3 = virtualinvoke r0.<org.apache.commons.math3.linear.DiagonalMatrix: double[] preMultiply(double[])>($r3);

        r1 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealVector createRealVector(double[])>($r3);

        return r1;

     label2:
        $r3 = virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: double[] toArray()>();

        goto label1;
    }
    public double[] preMultiply(double[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.DiagonalMatrix r0;
        double[] $r1;

        r0 := @this: org.apache.commons.math3.linear.DiagonalMatrix;

        $r1 := @parameter0: double[];

        $r1 = virtualinvoke r0.<org.apache.commons.math3.linear.DiagonalMatrix: double[] operate(double[])>($r1);

        return $r1;
    }
    public void setEntry(int, int, double) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.linear.DiagonalMatrix r0;
        int $i0, $i1;
        double $d0;
        double[] $r1;

        r0 := @this: org.apache.commons.math3.linear.DiagonalMatrix;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $d0 := @parameter2: double;

        if $i0 != $i1 goto label1;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)>(r0, $i0);

        $r1 = r0.<org.apache.commons.math3.linear.DiagonalMatrix: double[] data>;

        $r1[$i0] = $d0;

        return;

     label1:
        specialinvoke r0.<org.apache.commons.math3.linear.DiagonalMatrix: void ensureZero(double)>($d0);

        return;
    }
    public org.apache.commons.math3.linear.DiagonalMatrix subtract(org.apache.commons.math3.linear.DiagonalMatrix) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException
    {
        org.apache.commons.math3.linear.DiagonalMatrix r0, $r1;
        double[] r2, $r3;
        double $d0, $d1;
        int $i0, i1;

        r0 := @this: org.apache.commons.math3.linear.DiagonalMatrix;

        $r1 := @parameter0: org.apache.commons.math3.linear.DiagonalMatrix;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkSubtractionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)>(r0, $r1);

        $i0 = virtualinvoke r0.<org.apache.commons.math3.linear.DiagonalMatrix: int getRowDimension()>();

        r2 = newarray (double)[$i0];

        i1 = 0;

     label1:
        if i1 >= $i0 goto label2;

        $r3 = r0.<org.apache.commons.math3.linear.DiagonalMatrix: double[] data>;

        $d1 = $r3[i1];

        $r3 = $r1.<org.apache.commons.math3.linear.DiagonalMatrix: double[] data>;

        $d0 = $r3[i1];

        $d0 = $d1 - $d0;

        r2[i1] = $d0;

        i1 = i1 + 1;

        goto label1;

     label2:
        r0 = new org.apache.commons.math3.linear.DiagonalMatrix;

        specialinvoke r0.<org.apache.commons.math3.linear.DiagonalMatrix: void <init>(double[],boolean)>(r2, 0);

        return r0;
    }
