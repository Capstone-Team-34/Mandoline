org.apache.commons.math3.linear.OpenMapRealMatrix extends org.apache.commons.math3.linear.AbstractRealMatrix implements org.apache.commons.math3.linear.SparseRealMatrix java.io.Serializable
private static final long serialVersionUID
private final int columns
private final org.apache.commons.math3.util.OpenIntToDoubleHashMap entries
private final int rows
    public void <init>(int, int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.linear.OpenMapRealMatrix r0;
        int $i0, $i1;
        long l2, l3, $l4;
        byte $b5;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r1;
        java.lang.Long $r2;
        java.lang.Integer $r3;
        org.apache.commons.math3.util.OpenIntToDoubleHashMap $r4;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealMatrix;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        specialinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: void <init>(int,int)>($i0, $i1);

        l3 = (long) $i0;

        l2 = (long) $i1;

        $l4 = l3 * l2;

        $b5 = $l4 cmp 2147483647L;

        if $b5 < 0 goto label1;

        $r1 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        l2 = l3 * l2;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l2);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2147483647);

        specialinvoke $r1.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r2, $r3, 0);

        throw $r1;

     label1:
        r0.<org.apache.commons.math3.linear.OpenMapRealMatrix: int rows> = $i0;

        r0.<org.apache.commons.math3.linear.OpenMapRealMatrix: int columns> = $i1;

        $r4 = new org.apache.commons.math3.util.OpenIntToDoubleHashMap;

        specialinvoke $r4.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: void <init>(double)>(0.0);

        r0.<org.apache.commons.math3.linear.OpenMapRealMatrix: org.apache.commons.math3.util.OpenIntToDoubleHashMap entries> = $r4;

        return;
    }
    public void <init>(org.apache.commons.math3.linear.OpenMapRealMatrix)
    {
        org.apache.commons.math3.linear.OpenMapRealMatrix r0, $r1;
        org.apache.commons.math3.util.OpenIntToDoubleHashMap $r2, $r3;
        int $i0;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealMatrix;

        $r1 := @parameter0: org.apache.commons.math3.linear.OpenMapRealMatrix;

        specialinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: void <init>()>();

        $i0 = $r1.<org.apache.commons.math3.linear.OpenMapRealMatrix: int rows>;

        r0.<org.apache.commons.math3.linear.OpenMapRealMatrix: int rows> = $i0;

        $i0 = $r1.<org.apache.commons.math3.linear.OpenMapRealMatrix: int columns>;

        r0.<org.apache.commons.math3.linear.OpenMapRealMatrix: int columns> = $i0;

        $r3 = new org.apache.commons.math3.util.OpenIntToDoubleHashMap;

        $r2 = $r1.<org.apache.commons.math3.linear.OpenMapRealMatrix: org.apache.commons.math3.util.OpenIntToDoubleHashMap entries>;

        specialinvoke $r3.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: void <init>(org.apache.commons.math3.util.OpenIntToDoubleHashMap)>($r2);

        r0.<org.apache.commons.math3.linear.OpenMapRealMatrix: org.apache.commons.math3.util.OpenIntToDoubleHashMap entries> = $r3;

        return;
    }
    private int computeKey(int, int)
    {
        org.apache.commons.math3.linear.OpenMapRealMatrix r0;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealMatrix;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 = r0.<org.apache.commons.math3.linear.OpenMapRealMatrix: int columns>;

        $i0 = $i2 * $i0;

        $i0 = $i0 + $i1;

        return $i0;
    }
    public org.apache.commons.math3.linear.OpenMapRealMatrix add(org.apache.commons.math3.linear.OpenMapRealMatrix) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException
    {
        org.apache.commons.math3.linear.OpenMapRealMatrix r0, $r1, r2;
        int i0, i1, $i2;
        org.apache.commons.math3.util.OpenIntToDoubleHashMap $r3;
        org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator $r4;
        boolean $z0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealMatrix;

        $r1 := @parameter0: org.apache.commons.math3.linear.OpenMapRealMatrix;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkAdditionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)>(r0, $r1);

        r2 = new org.apache.commons.math3.linear.OpenMapRealMatrix;

        specialinvoke r2.<org.apache.commons.math3.linear.OpenMapRealMatrix: void <init>(org.apache.commons.math3.linear.OpenMapRealMatrix)>(r0);

        $r3 = $r1.<org.apache.commons.math3.linear.OpenMapRealMatrix: org.apache.commons.math3.util.OpenIntToDoubleHashMap entries>;

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator iterator()>();

     label1:
        $z0 = virtualinvoke $r4.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        virtualinvoke $r4.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: void advance()>();

        i1 = virtualinvoke $r4.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: int key()>();

        i0 = r0.<org.apache.commons.math3.linear.OpenMapRealMatrix: int columns>;

        i1 = i1 / i0;

        i0 = virtualinvoke $r4.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: int key()>();

        $i2 = r0.<org.apache.commons.math3.linear.OpenMapRealMatrix: int columns>;

        $i2 = $i2 * i1;

        i0 = i0 - $i2;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.linear.OpenMapRealMatrix: double getEntry(int,int)>(i1, i0);

        $d1 = virtualinvoke $r4.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: double value()>();

        $d0 = $d0 + $d1;

        virtualinvoke r2.<org.apache.commons.math3.linear.OpenMapRealMatrix: void setEntry(int,int,double)>(i1, i0, $d0);

        goto label1;

     label2:
        return r2;
    }
    public void addToEntry(int, int, double) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.OpenMapRealMatrix r0;
        int $i0, $i1;
        double $d0, $d1;
        org.apache.commons.math3.util.OpenIntToDoubleHashMap $r1;
        byte $b2;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealMatrix;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $d0 := @parameter2: double;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)>(r0, $i0);

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)>(r0, $i1);

        $i0 = specialinvoke r0.<org.apache.commons.math3.linear.OpenMapRealMatrix: int computeKey(int,int)>($i0, $i1);

        $r1 = r0.<org.apache.commons.math3.linear.OpenMapRealMatrix: org.apache.commons.math3.util.OpenIntToDoubleHashMap entries>;

        $d1 = virtualinvoke $r1.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: double get(int)>($i0);

        $d0 = $d1 + $d0;

        $b2 = $d0 cmpl 0.0;

        if $b2 != 0 goto label1;

        $r1 = r0.<org.apache.commons.math3.linear.OpenMapRealMatrix: org.apache.commons.math3.util.OpenIntToDoubleHashMap entries>;

        virtualinvoke $r1.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: double remove(int)>($i0);

        return;

     label1:
        $r1 = r0.<org.apache.commons.math3.linear.OpenMapRealMatrix: org.apache.commons.math3.util.OpenIntToDoubleHashMap entries>;

        virtualinvoke $r1.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: double put(int,double)>($i0, $d0);

        return;
    }
    public org.apache.commons.math3.linear.OpenMapRealMatrix copy()
    {
        org.apache.commons.math3.linear.OpenMapRealMatrix r0, $r1;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealMatrix;

        $r1 = new org.apache.commons.math3.linear.OpenMapRealMatrix;

        specialinvoke $r1.<org.apache.commons.math3.linear.OpenMapRealMatrix: void <init>(org.apache.commons.math3.linear.OpenMapRealMatrix)>(r0);

        return $r1;
    }
    public volatile org.apache.commons.math3.linear.RealMatrix copy()
    {
        org.apache.commons.math3.linear.OpenMapRealMatrix r0;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealMatrix;

        r0 = virtualinvoke r0.<org.apache.commons.math3.linear.OpenMapRealMatrix: org.apache.commons.math3.linear.OpenMapRealMatrix copy()>();

        return r0;
    }
    public org.apache.commons.math3.linear.OpenMapRealMatrix createMatrix(int, int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.linear.OpenMapRealMatrix r0;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealMatrix;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        r0 = new org.apache.commons.math3.linear.OpenMapRealMatrix;

        specialinvoke r0.<org.apache.commons.math3.linear.OpenMapRealMatrix: void <init>(int,int)>($i0, $i1);

        return r0;
    }
    public volatile org.apache.commons.math3.linear.RealMatrix createMatrix(int, int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.linear.OpenMapRealMatrix r0;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealMatrix;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        r0 = virtualinvoke r0.<org.apache.commons.math3.linear.OpenMapRealMatrix: org.apache.commons.math3.linear.OpenMapRealMatrix createMatrix(int,int)>($i0, $i1);

        return r0;
    }
    public int getColumnDimension()
    {
        org.apache.commons.math3.linear.OpenMapRealMatrix r0;
        int i0;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealMatrix;

        i0 = r0.<org.apache.commons.math3.linear.OpenMapRealMatrix: int columns>;

        return i0;
    }
    public double getEntry(int, int) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.OpenMapRealMatrix r0;
        int $i0, $i1;
        org.apache.commons.math3.util.OpenIntToDoubleHashMap $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealMatrix;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)>(r0, $i0);

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)>(r0, $i1);

        $r1 = r0.<org.apache.commons.math3.linear.OpenMapRealMatrix: org.apache.commons.math3.util.OpenIntToDoubleHashMap entries>;

        $i0 = specialinvoke r0.<org.apache.commons.math3.linear.OpenMapRealMatrix: int computeKey(int,int)>($i0, $i1);

        $d0 = virtualinvoke $r1.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: double get(int)>($i0);

        return $d0;
    }
    public int getRowDimension()
    {
        org.apache.commons.math3.linear.OpenMapRealMatrix r0;
        int i0;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealMatrix;

        i0 = r0.<org.apache.commons.math3.linear.OpenMapRealMatrix: int rows>;

        return i0;
    }
    public org.apache.commons.math3.linear.OpenMapRealMatrix multiply(org.apache.commons.math3.linear.OpenMapRealMatrix) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.linear.OpenMapRealMatrix r0, $r1, r2;
        int i0, i1, $i2, $i3, $i4, $i5;
        double d0, $d1, $d2;
        org.apache.commons.math3.util.OpenIntToDoubleHashMap $r3;
        org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator $r4;
        boolean $z0;
        byte $b6;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealMatrix;

        $r1 := @parameter0: org.apache.commons.math3.linear.OpenMapRealMatrix;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)>(r0, $r1);

        $i2 = virtualinvoke $r1.<org.apache.commons.math3.linear.OpenMapRealMatrix: int getColumnDimension()>();

        r2 = new org.apache.commons.math3.linear.OpenMapRealMatrix;

        i0 = r0.<org.apache.commons.math3.linear.OpenMapRealMatrix: int rows>;

        specialinvoke r2.<org.apache.commons.math3.linear.OpenMapRealMatrix: void <init>(int,int)>(i0, $i2);

        $r3 = r0.<org.apache.commons.math3.linear.OpenMapRealMatrix: org.apache.commons.math3.util.OpenIntToDoubleHashMap entries>;

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator iterator()>();

     label1:
        $z0 = virtualinvoke $r4.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        virtualinvoke $r4.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: void advance()>();

        $d1 = virtualinvoke $r4.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: double value()>();

        i1 = virtualinvoke $r4.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: int key()>();

        i0 = r0.<org.apache.commons.math3.linear.OpenMapRealMatrix: int columns>;

        i0 = i1 / i0;

        $i3 = r0.<org.apache.commons.math3.linear.OpenMapRealMatrix: int columns>;

        i1 = i1 % $i3;

        $i3 = 0;

     label2:
        if $i3 >= $i2 goto label1;

        $i4 = specialinvoke $r1.<org.apache.commons.math3.linear.OpenMapRealMatrix: int computeKey(int,int)>(i1, $i3);

        $r3 = $r1.<org.apache.commons.math3.linear.OpenMapRealMatrix: org.apache.commons.math3.util.OpenIntToDoubleHashMap entries>;

        $z0 = virtualinvoke $r3.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: boolean containsKey(int)>($i4);

        if $z0 == 0 goto label3;

        $i5 = specialinvoke r2.<org.apache.commons.math3.linear.OpenMapRealMatrix: int computeKey(int,int)>(i0, $i3);

        $r3 = r2.<org.apache.commons.math3.linear.OpenMapRealMatrix: org.apache.commons.math3.util.OpenIntToDoubleHashMap entries>;

        d0 = virtualinvoke $r3.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: double get(int)>($i5);

        $r3 = $r1.<org.apache.commons.math3.linear.OpenMapRealMatrix: org.apache.commons.math3.util.OpenIntToDoubleHashMap entries>;

        $d2 = virtualinvoke $r3.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: double get(int)>($i4);

        $d2 = $d2 * $d1;

        d0 = d0 + $d2;

        $b6 = d0 cmpl 0.0;

        if $b6 != 0 goto label4;

        $r3 = r2.<org.apache.commons.math3.linear.OpenMapRealMatrix: org.apache.commons.math3.util.OpenIntToDoubleHashMap entries>;

        virtualinvoke $r3.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: double remove(int)>($i5);

     label3:
        $i3 = $i3 + 1;

        goto label2;

     label4:
        $r3 = r2.<org.apache.commons.math3.linear.OpenMapRealMatrix: org.apache.commons.math3.util.OpenIntToDoubleHashMap entries>;

        virtualinvoke $r3.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: double put(int,double)>($i5, d0);

        goto label3;

     label5:
        return r2;
    }
    public org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.linear.OpenMapRealMatrix r0, $r3;
        org.apache.commons.math3.linear.RealMatrix $r1;
        java.lang.ClassCastException r2;
        int i0, i1, $i2, $i3;
        org.apache.commons.math3.linear.BlockRealMatrix r4;
        org.apache.commons.math3.util.OpenIntToDoubleHashMap $r5;
        org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator $r6;
        boolean $z0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealMatrix;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

     label1:
        $r3 = (org.apache.commons.math3.linear.OpenMapRealMatrix) $r1;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.linear.OpenMapRealMatrix: org.apache.commons.math3.linear.OpenMapRealMatrix multiply(org.apache.commons.math3.linear.OpenMapRealMatrix)>($r3);

     label2:
        return $r3;

     label3:
        r2 := @caughtexception;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)>(r0, $r1);

        $i2 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        r4 = new org.apache.commons.math3.linear.BlockRealMatrix;

        i0 = r0.<org.apache.commons.math3.linear.OpenMapRealMatrix: int rows>;

        specialinvoke r4.<org.apache.commons.math3.linear.BlockRealMatrix: void <init>(int,int)>(i0, $i2);

        $r5 = r0.<org.apache.commons.math3.linear.OpenMapRealMatrix: org.apache.commons.math3.util.OpenIntToDoubleHashMap entries>;

        $r6 = virtualinvoke $r5.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator iterator()>();

     label4:
        $z0 = virtualinvoke $r6.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        virtualinvoke $r6.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: void advance()>();

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: double value()>();

        i1 = virtualinvoke $r6.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: int key()>();

        i0 = r0.<org.apache.commons.math3.linear.OpenMapRealMatrix: int columns>;

        i0 = i1 / i0;

        $i3 = r0.<org.apache.commons.math3.linear.OpenMapRealMatrix: int columns>;

        i1 = i1 % $i3;

        $i3 = 0;

     label5:
        if $i3 >= $i2 goto label4;

        $d1 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>(i1, $i3);

        $d1 = $d1 * $d0;

        virtualinvoke r4.<org.apache.commons.math3.linear.BlockRealMatrix: void addToEntry(int,int,double)>(i0, $i3, $d1);

        $i3 = $i3 + 1;

        goto label5;

     label6:
        return r4;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }
    public void multiplyEntry(int, int, double) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.OpenMapRealMatrix r0;
        int $i0, $i1;
        double $d0, $d1;
        org.apache.commons.math3.util.OpenIntToDoubleHashMap $r1;
        byte $b2;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealMatrix;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $d0 := @parameter2: double;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)>(r0, $i0);

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)>(r0, $i1);

        $i0 = specialinvoke r0.<org.apache.commons.math3.linear.OpenMapRealMatrix: int computeKey(int,int)>($i0, $i1);

        $r1 = r0.<org.apache.commons.math3.linear.OpenMapRealMatrix: org.apache.commons.math3.util.OpenIntToDoubleHashMap entries>;

        $d1 = virtualinvoke $r1.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: double get(int)>($i0);

        $d0 = $d1 * $d0;

        $b2 = $d0 cmpl 0.0;

        if $b2 != 0 goto label1;

        $r1 = r0.<org.apache.commons.math3.linear.OpenMapRealMatrix: org.apache.commons.math3.util.OpenIntToDoubleHashMap entries>;

        virtualinvoke $r1.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: double remove(int)>($i0);

        return;

     label1:
        $r1 = r0.<org.apache.commons.math3.linear.OpenMapRealMatrix: org.apache.commons.math3.util.OpenIntToDoubleHashMap entries>;

        virtualinvoke $r1.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: double put(int,double)>($i0, $d0);

        return;
    }
    public void setEntry(int, int, double) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.OpenMapRealMatrix r0;
        int $i0, $i1;
        double $d0;
        byte $b2;
        org.apache.commons.math3.util.OpenIntToDoubleHashMap $r1;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealMatrix;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $d0 := @parameter2: double;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)>(r0, $i0);

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)>(r0, $i1);

        $b2 = $d0 cmpl 0.0;

        if $b2 != 0 goto label1;

        $r1 = r0.<org.apache.commons.math3.linear.OpenMapRealMatrix: org.apache.commons.math3.util.OpenIntToDoubleHashMap entries>;

        $i0 = specialinvoke r0.<org.apache.commons.math3.linear.OpenMapRealMatrix: int computeKey(int,int)>($i0, $i1);

        virtualinvoke $r1.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: double remove(int)>($i0);

        return;

     label1:
        $r1 = r0.<org.apache.commons.math3.linear.OpenMapRealMatrix: org.apache.commons.math3.util.OpenIntToDoubleHashMap entries>;

        $i0 = specialinvoke r0.<org.apache.commons.math3.linear.OpenMapRealMatrix: int computeKey(int,int)>($i0, $i1);

        virtualinvoke $r1.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: double put(int,double)>($i0, $d0);

        return;
    }
    public org.apache.commons.math3.linear.OpenMapRealMatrix subtract(org.apache.commons.math3.linear.OpenMapRealMatrix) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException
    {
        org.apache.commons.math3.linear.OpenMapRealMatrix r0, $r1, r2;
        int i0, i1, $i2;
        org.apache.commons.math3.util.OpenIntToDoubleHashMap $r3;
        org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator $r4;
        boolean $z0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealMatrix;

        $r1 := @parameter0: org.apache.commons.math3.linear.OpenMapRealMatrix;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkAdditionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)>(r0, $r1);

        r2 = new org.apache.commons.math3.linear.OpenMapRealMatrix;

        specialinvoke r2.<org.apache.commons.math3.linear.OpenMapRealMatrix: void <init>(org.apache.commons.math3.linear.OpenMapRealMatrix)>(r0);

        $r3 = $r1.<org.apache.commons.math3.linear.OpenMapRealMatrix: org.apache.commons.math3.util.OpenIntToDoubleHashMap entries>;

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator iterator()>();

     label1:
        $z0 = virtualinvoke $r4.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        virtualinvoke $r4.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: void advance()>();

        i1 = virtualinvoke $r4.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: int key()>();

        i0 = r0.<org.apache.commons.math3.linear.OpenMapRealMatrix: int columns>;

        i1 = i1 / i0;

        i0 = virtualinvoke $r4.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: int key()>();

        $i2 = r0.<org.apache.commons.math3.linear.OpenMapRealMatrix: int columns>;

        $i2 = $i2 * i1;

        i0 = i0 - $i2;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.linear.OpenMapRealMatrix: double getEntry(int,int)>(i1, i0);

        $d1 = virtualinvoke $r4.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: double value()>();

        $d0 = $d0 - $d1;

        virtualinvoke r2.<org.apache.commons.math3.linear.OpenMapRealMatrix: void setEntry(int,int,double)>(i1, i0, $d0);

        goto label1;

     label2:
        return r2;
    }
    public org.apache.commons.math3.linear.OpenMapRealMatrix subtract(org.apache.commons.math3.linear.RealMatrix) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException
    {
        org.apache.commons.math3.linear.OpenMapRealMatrix r0, $r3;
        org.apache.commons.math3.linear.RealMatrix $r1;
        java.lang.ClassCastException r2;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealMatrix;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

     label1:
        $r3 = (org.apache.commons.math3.linear.OpenMapRealMatrix) $r1;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.linear.OpenMapRealMatrix: org.apache.commons.math3.linear.OpenMapRealMatrix subtract(org.apache.commons.math3.linear.OpenMapRealMatrix)>($r3);

     label2:
        return $r3;

     label3:
        r2 := @caughtexception;

        $r1 = specialinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: org.apache.commons.math3.linear.RealMatrix subtract(org.apache.commons.math3.linear.RealMatrix)>($r1);

        r0 = (org.apache.commons.math3.linear.OpenMapRealMatrix) $r1;

        return r0;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }
    public volatile org.apache.commons.math3.linear.RealMatrix subtract(org.apache.commons.math3.linear.RealMatrix) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException
    {
        org.apache.commons.math3.linear.OpenMapRealMatrix r0;
        org.apache.commons.math3.linear.RealMatrix $r1;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealMatrix;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        r0 = virtualinvoke r0.<org.apache.commons.math3.linear.OpenMapRealMatrix: org.apache.commons.math3.linear.OpenMapRealMatrix subtract(org.apache.commons.math3.linear.RealMatrix)>($r1);

        return r0;
    }
