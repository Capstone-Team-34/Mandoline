org.apache.commons.math3.linear.EigenDecomposition$Solver extends java.lang.Object implements org.apache.commons.math3.linear.DecompositionSolver
private final org.apache.commons.math3.linear.ArrayRealVector[] eigenvectors
private double[] imagEigenvalues
private double[] realEigenvalues
    private void <init>(double[], double[], org.apache.commons.math3.linear.ArrayRealVector[])
    {
        org.apache.commons.math3.linear.EigenDecomposition$Solver r0;
        double[] $r1, $r2;
        org.apache.commons.math3.linear.ArrayRealVector[] $r3;

        r0 := @this: org.apache.commons.math3.linear.EigenDecomposition$Solver;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[];

        $r3 := @parameter2: org.apache.commons.math3.linear.ArrayRealVector[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.linear.EigenDecomposition$Solver: double[] realEigenvalues> = $r1;

        r0.<org.apache.commons.math3.linear.EigenDecomposition$Solver: double[] imagEigenvalues> = $r2;

        r0.<org.apache.commons.math3.linear.EigenDecomposition$Solver: org.apache.commons.math3.linear.ArrayRealVector[] eigenvectors> = $r3;

        return;
    }
    void <init>(double[], double[], org.apache.commons.math3.linear.ArrayRealVector[], org.apache.commons.math3.linear.EigenDecomposition$1)
    {
        org.apache.commons.math3.linear.EigenDecomposition$Solver r0;
        double[] $r1, $r2;
        org.apache.commons.math3.linear.ArrayRealVector[] $r3;
        org.apache.commons.math3.linear.EigenDecomposition$1 $r4;

        r0 := @this: org.apache.commons.math3.linear.EigenDecomposition$Solver;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[];

        $r3 := @parameter2: org.apache.commons.math3.linear.ArrayRealVector[];

        $r4 := @parameter3: org.apache.commons.math3.linear.EigenDecomposition$1;

        specialinvoke r0.<org.apache.commons.math3.linear.EigenDecomposition$Solver: void <init>(double[],double[],org.apache.commons.math3.linear.ArrayRealVector[])>($r1, $r2, $r3);

        return;
    }
    private double eigenvalueNorm(int)
    {
        org.apache.commons.math3.linear.EigenDecomposition$Solver r0;
        int $i0;
        double d0, d1;
        double[] $r1;

        r0 := @this: org.apache.commons.math3.linear.EigenDecomposition$Solver;

        $i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.math3.linear.EigenDecomposition$Solver: double[] realEigenvalues>;

        d1 = $r1[$i0];

        $r1 = r0.<org.apache.commons.math3.linear.EigenDecomposition$Solver: double[] imagEigenvalues>;

        d0 = $r1[$i0];

        d1 = d1 * d1;

        d0 = d0 * d0;

        d0 = d1 + d0;

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d0);

        return d0;
    }
    public org.apache.commons.math3.linear.RealMatrix getInverse()
    {
        org.apache.commons.math3.linear.EigenDecomposition$Solver r0;
        double[] r1, $r9;
        int i0, i1, i2, i3;
        boolean $z0;
        org.apache.commons.math3.linear.SingularMatrixException $r2;
        int[] $r3;
        java.lang.Class $r4;
        java.lang.Object $r5;
        double[][] r6;
        double d0, $d1, $d2;
        org.apache.commons.math3.linear.ArrayRealVector[] $r7;
        org.apache.commons.math3.linear.ArrayRealVector $r8;
        org.apache.commons.math3.linear.RealMatrix $r10;

        r0 := @this: org.apache.commons.math3.linear.EigenDecomposition$Solver;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.linear.EigenDecomposition$Solver: boolean isNonSingular()>();

        if $z0 != 0 goto label1;

        $r2 = new org.apache.commons.math3.linear.SingularMatrixException;

        specialinvoke $r2.<org.apache.commons.math3.linear.SingularMatrixException: void <init>()>();

        throw $r2;

     label1:
        r1 = r0.<org.apache.commons.math3.linear.EigenDecomposition$Solver: double[] realEigenvalues>;

        i0 = lengthof r1;

        $r3 = newarray (int)[2];

        $r3[0] = i0;

        $r3[1] = i0;

        $r4 = <java.lang.Double: java.lang.Class TYPE>;

        $r5 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r4, $r3);

        r6 = (double[][]) $r5;

        i1 = 0;

     label2:
        if i1 >= i0 goto label7;

        r1 = r6[i1];

        i2 = 0;

     label3:
        if i2 >= i0 goto label6;

        d0 = 0.0;

        i3 = 0;

     label4:
        if i3 >= i0 goto label5;

        $r7 = r0.<org.apache.commons.math3.linear.EigenDecomposition$Solver: org.apache.commons.math3.linear.ArrayRealVector[] eigenvectors>;

        $r8 = $r7[i3];

        $r9 = virtualinvoke $r8.<org.apache.commons.math3.linear.ArrayRealVector: double[] getDataRef()>();

        $d1 = $r9[i1];

        $d2 = $r9[i2];

        $d1 = $d1 * $d2;

        $r9 = r0.<org.apache.commons.math3.linear.EigenDecomposition$Solver: double[] realEigenvalues>;

        $d2 = $r9[i3];

        $d1 = $d1 / $d2;

        d0 = d0 + $d1;

        i3 = i3 + 1;

        goto label4;

     label5:
        r1[i2] = d0;

        i2 = i2 + 1;

        goto label3;

     label6:
        i1 = i1 + 1;

        goto label2;

     label7:
        $r10 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix createRealMatrix(double[][])>(r6);

        return $r10;
    }
    public boolean isNonSingular()
    {
        org.apache.commons.math3.linear.EigenDecomposition$Solver r0;
        double d0, $d1;
        int i0, $i1;
        double[] $r1;
        byte $b2;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.linear.EigenDecomposition$Solver;

        d0 = 0.0;

        i0 = 0;

     label1:
        $r1 = r0.<org.apache.commons.math3.linear.EigenDecomposition$Solver: double[] realEigenvalues>;

        $i1 = lengthof $r1;

        if i0 >= $i1 goto label2;

        $d1 = specialinvoke r0.<org.apache.commons.math3.linear.EigenDecomposition$Solver: double eigenvalueNorm(int)>(i0);

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>(d0, $d1);

        i0 = i0 + 1;

        goto label1;

     label2:
        $b2 = d0 cmpl 0.0;

        if $b2 != 0 goto label3;

        return 0;

     label3:
        i0 = 0;

     label4:
        $r1 = r0.<org.apache.commons.math3.linear.EigenDecomposition$Solver: double[] realEigenvalues>;

        $i1 = lengthof $r1;

        if i0 >= $i1 goto label6;

        $d1 = specialinvoke r0.<org.apache.commons.math3.linear.EigenDecomposition$Solver: double eigenvalueNorm(int)>(i0);

        $d1 = $d1 / d0;

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,double)>($d1, 0.0, 1.0E-12);

        if $z0 == 0 goto label5;

        return 0;

     label5:
        i0 = i0 + 1;

        goto label4;

     label6:
        return 1;
    }
    public org.apache.commons.math3.linear.RealMatrix solve(org.apache.commons.math3.linear.RealMatrix)
    {
        org.apache.commons.math3.linear.EigenDecomposition$Solver r0;
        org.apache.commons.math3.linear.RealMatrix $r1;
        int i0, $i1, i2, i3, i4;
        double[] r2, $r10, $r12;
        org.apache.commons.math3.linear.ArrayRealVector r3;
        boolean $z0;
        org.apache.commons.math3.linear.SingularMatrixException $r4;
        org.apache.commons.math3.exception.DimensionMismatchException $r5;
        int[] $r6;
        java.lang.Class $r7;
        java.lang.Object $r8;
        double[][] r9;
        double $d0, $d1, $d2;
        org.apache.commons.math3.linear.ArrayRealVector[] $r11;
        org.apache.commons.math3.linear.Array2DRowRealMatrix $r13;

        r0 := @this: org.apache.commons.math3.linear.EigenDecomposition$Solver;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.linear.EigenDecomposition$Solver: boolean isNonSingular()>();

        if $z0 != 0 goto label01;

        $r4 = new org.apache.commons.math3.linear.SingularMatrixException;

        specialinvoke $r4.<org.apache.commons.math3.linear.SingularMatrixException: void <init>()>();

        throw $r4;

     label01:
        r2 = r0.<org.apache.commons.math3.linear.EigenDecomposition$Solver: double[] realEigenvalues>;

        i0 = lengthof r2;

        $i1 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        if $i1 == i0 goto label02;

        $r5 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i1 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        specialinvoke $r5.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i1, i0);

        throw $r5;

     label02:
        $i1 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        $r6 = newarray (int)[2];

        $r6[0] = i0;

        $r6[1] = $i1;

        $r7 = <java.lang.Double: java.lang.Class TYPE>;

        $r8 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r7, $r6);

        r9 = (double[][]) $r8;

        r2 = newarray (double)[i0];

        i2 = 0;

     label03:
        if i2 >= $i1 goto label12;

        i3 = 0;

     label04:
        if i3 >= i0 goto label05;

        $d0 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>(i3, i2);

        r2[i3] = $d0;

        $r10 = r9[i3];

        $r10[i2] = 0.0;

        i3 = i3 + 1;

        goto label04;

     label05:
        i3 = 0;

     label06:
        if i3 >= i0 goto label11;

        $r11 = r0.<org.apache.commons.math3.linear.EigenDecomposition$Solver: org.apache.commons.math3.linear.ArrayRealVector[] eigenvectors>;

        r3 = $r11[i3];

        $r10 = virtualinvoke r3.<org.apache.commons.math3.linear.ArrayRealVector: double[] getDataRef()>();

        $d0 = 0.0;

        i4 = 0;

     label07:
        if i4 >= i0 goto label08;

        $d1 = virtualinvoke r3.<org.apache.commons.math3.linear.ArrayRealVector: double getEntry(int)>(i4);

        $d2 = r2[i4];

        $d1 = $d1 * $d2;

        $d0 = $d0 + $d1;

        i4 = i4 + 1;

        goto label07;

     label08:
        $r12 = r0.<org.apache.commons.math3.linear.EigenDecomposition$Solver: double[] realEigenvalues>;

        $d1 = $r12[i3];

        $d0 = $d0 / $d1;

        i4 = 0;

     label09:
        if i4 >= i0 goto label10;

        $r12 = r9[i4];

        $d1 = $r12[i2];

        $d2 = $r10[i4];

        $d2 = $d2 * $d0;

        $d1 = $d1 + $d2;

        $r12[i2] = $d1;

        i4 = i4 + 1;

        goto label09;

     label10:
        i3 = i3 + 1;

        goto label06;

     label11:
        i2 = i2 + 1;

        goto label03;

     label12:
        $r13 = new org.apache.commons.math3.linear.Array2DRowRealMatrix;

        specialinvoke $r13.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void <init>(double[][],boolean)>(r9, 0);

        return $r13;
    }
    public org.apache.commons.math3.linear.RealVector solve(org.apache.commons.math3.linear.RealVector)
    {
        org.apache.commons.math3.linear.EigenDecomposition$Solver r0;
        org.apache.commons.math3.linear.RealVector $r1;
        double[] r2, $r7, $r8;
        int i0, $i1, i2;
        double d0, $d1, $d2;
        org.apache.commons.math3.linear.ArrayRealVector r3;
        boolean $z0;
        org.apache.commons.math3.linear.SingularMatrixException $r4;
        org.apache.commons.math3.exception.DimensionMismatchException $r5;
        org.apache.commons.math3.linear.ArrayRealVector[] $r6;

        r0 := @this: org.apache.commons.math3.linear.EigenDecomposition$Solver;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealVector;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.linear.EigenDecomposition$Solver: boolean isNonSingular()>();

        if $z0 != 0 goto label1;

        $r4 = new org.apache.commons.math3.linear.SingularMatrixException;

        specialinvoke $r4.<org.apache.commons.math3.linear.SingularMatrixException: void <init>()>();

        throw $r4;

     label1:
        r2 = r0.<org.apache.commons.math3.linear.EigenDecomposition$Solver: double[] realEigenvalues>;

        i0 = lengthof r2;

        $i1 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        if $i1 == i0 goto label2;

        $r5 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i1 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        specialinvoke $r5.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i1, i0);

        throw $r5;

     label2:
        r2 = newarray (double)[i0];

        $i1 = 0;

     label3:
        if $i1 >= i0 goto label6;

        $r6 = r0.<org.apache.commons.math3.linear.EigenDecomposition$Solver: org.apache.commons.math3.linear.ArrayRealVector[] eigenvectors>;

        r3 = $r6[$i1];

        $r7 = virtualinvoke r3.<org.apache.commons.math3.linear.ArrayRealVector: double[] getDataRef()>();

        d0 = virtualinvoke r3.<org.apache.commons.math3.linear.ArrayRealVector: double dotProduct(org.apache.commons.math3.linear.RealVector)>($r1);

        $r8 = r0.<org.apache.commons.math3.linear.EigenDecomposition$Solver: double[] realEigenvalues>;

        $d1 = $r8[$i1];

        d0 = d0 / $d1;

        i2 = 0;

     label4:
        if i2 >= i0 goto label5;

        $d1 = r2[i2];

        $d2 = $r7[i2];

        $d2 = $d2 * d0;

        $d1 = $d1 + $d2;

        r2[i2] = $d1;

        i2 = i2 + 1;

        goto label4;

     label5:
        $i1 = $i1 + 1;

        goto label3;

     label6:
        r3 = new org.apache.commons.math3.linear.ArrayRealVector;

        specialinvoke r3.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(double[],boolean)>(r2, 0);

        return r3;
    }
