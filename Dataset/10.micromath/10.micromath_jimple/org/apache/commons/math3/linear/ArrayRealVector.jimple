org.apache.commons.math3.linear.ArrayRealVector extends org.apache.commons.math3.linear.RealVector implements java.io.Serializable
private static final org.apache.commons.math3.linear.RealVectorFormat DEFAULT_FORMAT
private static final long serialVersionUID
private double[] data
    static void <clinit>()
    {
        org.apache.commons.math3.linear.RealVectorFormat $r0;

        $r0 = staticinvoke <org.apache.commons.math3.linear.RealVectorFormat: org.apache.commons.math3.linear.RealVectorFormat getInstance()>();

        <org.apache.commons.math3.linear.ArrayRealVector: org.apache.commons.math3.linear.RealVectorFormat DEFAULT_FORMAT> = $r0;

        return;
    }
    public void <init>()
    {
        org.apache.commons.math3.linear.ArrayRealVector r0;
        double[] $r1;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        specialinvoke r0.<org.apache.commons.math3.linear.RealVector: void <init>()>();

        $r1 = newarray (double)[0];

        r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data> = $r1;

        return;
    }
    public void <init>(int)
    {
        org.apache.commons.math3.linear.ArrayRealVector r0;
        int $i0;
        double[] $r1;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        $i0 := @parameter0: int;

        specialinvoke r0.<org.apache.commons.math3.linear.RealVector: void <init>()>();

        $r1 = newarray (double)[$i0];

        r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data> = $r1;

        return;
    }
    public void <init>(int, double)
    {
        org.apache.commons.math3.linear.ArrayRealVector r0;
        int $i0;
        double $d0;
        double[] $r1;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        $i0 := @parameter0: int;

        $d0 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.linear.RealVector: void <init>()>();

        $r1 = newarray (double)[$i0];

        r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data> = $r1;

        $r1 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        staticinvoke <java.util.Arrays: void fill(double[],double)>($r1, $d0);

        return;
    }
    public void <init>(org.apache.commons.math3.linear.ArrayRealVector) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.linear.ArrayRealVector r0, $r1;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        $r1 := @parameter0: org.apache.commons.math3.linear.ArrayRealVector;

        specialinvoke r0.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(org.apache.commons.math3.linear.ArrayRealVector,boolean)>($r1, 1);

        return;
    }
    public void <init>(org.apache.commons.math3.linear.ArrayRealVector, org.apache.commons.math3.linear.ArrayRealVector)
    {
        org.apache.commons.math3.linear.ArrayRealVector r0, $r1, $r2;
        double[] $r3, $r4, $r5;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        $r1 := @parameter0: org.apache.commons.math3.linear.ArrayRealVector;

        $r2 := @parameter1: org.apache.commons.math3.linear.ArrayRealVector;

        specialinvoke r0.<org.apache.commons.math3.linear.RealVector: void <init>()>();

        $r3 = $r1.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $i0 = lengthof $r3;

        $r3 = $r2.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $i1 = lengthof $r3;

        $i0 = $i0 + $i1;

        $r3 = newarray (double)[$i0];

        r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data> = $r3;

        $r3 = $r1.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $r4 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $r5 = $r1.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $i0 = lengthof $r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r4, 0, $i0);

        $r3 = $r2.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $r4 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $r5 = $r1.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $i0 = lengthof $r5;

        $r5 = $r2.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $i1 = lengthof $r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r4, $i0, $i1);

        return;
    }
    public void <init>(org.apache.commons.math3.linear.ArrayRealVector, org.apache.commons.math3.linear.RealVector)
    {
        org.apache.commons.math3.linear.ArrayRealVector r0, $r1;
        org.apache.commons.math3.linear.RealVector $r2;
        int i0, $i1, $i2, $i3;
        double[] $r3, $r4;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        $r1 := @parameter0: org.apache.commons.math3.linear.ArrayRealVector;

        $r2 := @parameter1: org.apache.commons.math3.linear.RealVector;

        specialinvoke r0.<org.apache.commons.math3.linear.RealVector: void <init>()>();

        $r3 = $r1.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        i0 = lengthof $r3;

        $i1 = virtualinvoke $r2.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        $i2 = i0 + $i1;

        $r3 = newarray (double)[$i2];

        r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data> = $r3;

        $r3 = $r1.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $r4 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r4, 0, i0);

        $i2 = 0;

     label1:
        if $i2 >= $i1 goto label2;

        $r3 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $i3 = i0 + $i2;

        $d0 = virtualinvoke $r2.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>($i2);

        $r3[$i3] = $d0;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        return;
    }
    public void <init>(org.apache.commons.math3.linear.ArrayRealVector, boolean)
    {
        org.apache.commons.math3.linear.ArrayRealVector r0, $r1;
        boolean $z0;
        java.lang.Object $r2;
        double[] $r3;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        $r1 := @parameter0: org.apache.commons.math3.linear.ArrayRealVector;

        $z0 := @parameter1: boolean;

        specialinvoke r0.<org.apache.commons.math3.linear.RealVector: void <init>()>();

        if $z0 == 0 goto label2;

        $r3 = $r1.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $r2 = virtualinvoke $r3.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (double[]) $r2;

     label1:
        r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data> = $r3;

        return;

     label2:
        $r3 = $r1.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        goto label1;
    }
    public void <init>(org.apache.commons.math3.linear.ArrayRealVector, double[])
    {
        org.apache.commons.math3.linear.ArrayRealVector r0, $r1;
        double[] $r2, $r3, $r4;
        int i0, $i1, $i2;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        $r1 := @parameter0: org.apache.commons.math3.linear.ArrayRealVector;

        $r2 := @parameter1: double[];

        specialinvoke r0.<org.apache.commons.math3.linear.RealVector: void <init>()>();

        $i1 = virtualinvoke $r1.<org.apache.commons.math3.linear.ArrayRealVector: int getDimension()>();

        i0 = lengthof $r2;

        $i2 = $i1 + i0;

        $r3 = newarray (double)[$i2];

        r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data> = $r3;

        $r4 = $r1.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $r3 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r3, 0, $i1);

        $r3 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r3, $i1, i0);

        return;
    }
    public void <init>(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.linear.ArrayRealVector r0;
        org.apache.commons.math3.linear.RealVector $r1;
        org.apache.commons.math3.exception.NullArgumentException $r2;
        int $i0, $i1;
        double[] $r3;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealVector;

        specialinvoke r0.<org.apache.commons.math3.linear.RealVector: void <init>()>();

        if $r1 != null goto label1;

        $r2 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r2.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r2;

     label1:
        $i0 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        $r3 = newarray (double)[$i0];

        r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data> = $r3;

        $i0 = 0;

     label2:
        $r3 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $i1 = lengthof $r3;

        if $i0 >= $i1 goto label3;

        $r3 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $d0 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>($i0);

        $r3[$i0] = $d0;

        $i0 = $i0 + 1;

        goto label2;

     label3:
        return;
    }
    public void <init>(org.apache.commons.math3.linear.RealVector, org.apache.commons.math3.linear.ArrayRealVector)
    {
        org.apache.commons.math3.linear.ArrayRealVector r0, $r2;
        org.apache.commons.math3.linear.RealVector $r1;
        int i0, $i1, $i2;
        double[] $r3, $r4;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealVector;

        $r2 := @parameter1: org.apache.commons.math3.linear.ArrayRealVector;

        specialinvoke r0.<org.apache.commons.math3.linear.RealVector: void <init>()>();

        $i1 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        $r3 = $r2.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        i0 = lengthof $r3;

        $i2 = $i1 + i0;

        $r3 = newarray (double)[$i2];

        r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data> = $r3;

        $i2 = 0;

     label1:
        if $i2 >= $i1 goto label2;

        $r3 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $d0 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>($i2);

        $r3[$i2] = $d0;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        $r4 = $r2.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $r3 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r3, $i1, i0);

        return;
    }
    public void <init>(double[])
    {
        org.apache.commons.math3.linear.ArrayRealVector r0;
        double[] $r1;
        java.lang.Object $r2;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        $r1 := @parameter0: double[];

        specialinvoke r0.<org.apache.commons.math3.linear.RealVector: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r1 = (double[]) $r2;

        r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data> = $r1;

        return;
    }
    public void <init>(double[], int, int) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.linear.ArrayRealVector r0;
        double[] $r1, $r6;
        int $i0, $i1, $i2, $i3;
        org.apache.commons.math3.exception.NullArgumentException $r2;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r3;
        java.lang.Integer $r4, $r5;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        $r1 := @parameter0: double[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        specialinvoke r0.<org.apache.commons.math3.linear.RealVector: void <init>()>();

        if $r1 != null goto label1;

        $r2 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r2.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r2;

     label1:
        $i2 = lengthof $r1;

        $i3 = $i0 + $i1;

        if $i2 >= $i3 goto label2;

        $r3 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $i0 = $i0 + $i1;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $i0 = lengthof $r1;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r3.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r4, $r5, 1);

        throw $r3;

     label2:
        $r6 = newarray (double)[$i1];

        r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data> = $r6;

        $r6 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i0, $r6, 0, $i1);

        return;
    }
    public void <init>(double[], org.apache.commons.math3.linear.ArrayRealVector)
    {
        org.apache.commons.math3.linear.ArrayRealVector r0, $r2;
        double[] $r1, $r3;
        int i0, $i1, $i2;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: org.apache.commons.math3.linear.ArrayRealVector;

        specialinvoke r0.<org.apache.commons.math3.linear.RealVector: void <init>()>();

        i0 = lengthof $r1;

        $i1 = virtualinvoke $r2.<org.apache.commons.math3.linear.ArrayRealVector: int getDimension()>();

        $i2 = i0 + $i1;

        $r3 = newarray (double)[$i2];

        r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data> = $r3;

        $r3 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r3, 0, i0);

        $r3 = $r2.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $r1 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r1, i0, $i1);

        return;
    }
    public void <init>(double[], boolean) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.linear.ArrayRealVector r0;
        double[] $r1;
        boolean $z0;
        java.lang.Object $r2;
        org.apache.commons.math3.exception.NullArgumentException $r3;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        $r1 := @parameter0: double[];

        $z0 := @parameter1: boolean;

        specialinvoke r0.<org.apache.commons.math3.linear.RealVector: void <init>()>();

        if $r1 != null goto label1;

        $r3 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r3.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r3;

     label1:
        if $z0 == 0 goto label3;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r1 = (double[]) $r2;

     label2:
        r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data> = $r1;

        return;

     label3:
        goto label2;
    }
    public void <init>(double[], double[])
    {
        org.apache.commons.math3.linear.ArrayRealVector r0;
        double[] $r1, $r2, $r3;
        int i0, i1, $i2;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[];

        specialinvoke r0.<org.apache.commons.math3.linear.RealVector: void <init>()>();

        i0 = lengthof $r1;

        i1 = lengthof $r2;

        $i2 = i0 + i1;

        $r3 = newarray (double)[$i2];

        r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data> = $r3;

        $r3 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r3, 0, i0);

        $r1 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r1, i0, i1);

        return;
    }
    public void <init>(java.lang.Double[])
    {
        org.apache.commons.math3.linear.ArrayRealVector r0;
        java.lang.Double[] $r1;
        double $d0;
        int $i0, $i1;
        double[] $r2;
        java.lang.Double $r3;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        $r1 := @parameter0: java.lang.Double[];

        specialinvoke r0.<org.apache.commons.math3.linear.RealVector: void <init>()>();

        $i0 = lengthof $r1;

        $r2 = newarray (double)[$i0];

        r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data> = $r2;

        $i0 = 0;

     label1:
        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label2;

        $r2 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $r3 = $r1[$i0];

        $d0 = virtualinvoke $r3.<java.lang.Double: double doubleValue()>();

        $r2[$i0] = $d0;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }
    public void <init>(java.lang.Double[], int, int) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.linear.ArrayRealVector r0;
        java.lang.Double[] $r1;
        int $i0, $i1, $i2, $i3;
        org.apache.commons.math3.exception.NullArgumentException $r2;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r3;
        java.lang.Integer $r4, $r5;
        double[] $r6;
        java.lang.Double $r7;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        $r1 := @parameter0: java.lang.Double[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        specialinvoke r0.<org.apache.commons.math3.linear.RealVector: void <init>()>();

        if $r1 != null goto label1;

        $r2 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r2.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r2;

     label1:
        $i2 = lengthof $r1;

        $i3 = $i0 + $i1;

        if $i2 >= $i3 goto label2;

        $r3 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $i0 = $i0 + $i1;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $i0 = lengthof $r1;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r3.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r4, $r5, 1);

        throw $r3;

     label2:
        $r6 = newarray (double)[$i1];

        r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data> = $r6;

        $i2 = $i0;

     label3:
        $i3 = $i0 + $i1;

        if $i2 >= $i3 goto label4;

        $r6 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $i3 = $i2 - $i0;

        $r7 = $r1[$i2];

        $d0 = virtualinvoke $r7.<java.lang.Double: double doubleValue()>();

        $r6[$i3] = $d0;

        $i2 = $i2 + 1;

        goto label3;

     label4:
        return;
    }
    public org.apache.commons.math3.linear.ArrayRealVector add(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.ArrayRealVector r0, r4;
        int i0, i1;
        double[] r1, r2, $r5;
        org.apache.commons.math3.linear.RealVector r3;
        boolean $z0;
        double $d0, $d1;
        java.lang.Object $r6;
        java.util.Iterator $r7;
        org.apache.commons.math3.linear.RealVector$Entry r8;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        r3 := @parameter0: org.apache.commons.math3.linear.RealVector;

        $z0 = r3 instanceof org.apache.commons.math3.linear.ArrayRealVector;

        if $z0 == 0 goto label2;

        r4 = (org.apache.commons.math3.linear.ArrayRealVector) r3;

        r2 = r4.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        i0 = lengthof r2;

        virtualinvoke r0.<org.apache.commons.math3.linear.ArrayRealVector: void checkVectorDimensions(int)>(i0);

        r4 = new org.apache.commons.math3.linear.ArrayRealVector;

        specialinvoke r4.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(int)>(i0);

        r1 = r4.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        i1 = 0;

     label1:
        if i1 >= i0 goto label5;

        $r5 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $d0 = $r5[i1];

        $d1 = r2[i1];

        $d0 = $d0 + $d1;

        r1[i1] = $d0;

        i1 = i1 + 1;

        goto label1;

     label2:
        virtualinvoke r0.<org.apache.commons.math3.linear.ArrayRealVector: void checkVectorDimensions(org.apache.commons.math3.linear.RealVector)>(r3);

        r1 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $r6 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();

        r1 = (double[]) $r6;

        $r7 = virtualinvoke r3.<org.apache.commons.math3.linear.RealVector: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.apache.commons.math3.linear.RealVector$Entry) $r6;

        i0 = virtualinvoke r8.<org.apache.commons.math3.linear.RealVector$Entry: int getIndex()>();

        $d0 = r1[i0];

        $d1 = virtualinvoke r8.<org.apache.commons.math3.linear.RealVector$Entry: double getValue()>();

        $d0 = $d0 + $d1;

        r1[i0] = $d0;

        goto label3;

     label4:
        r0 = new org.apache.commons.math3.linear.ArrayRealVector;

        specialinvoke r0.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(double[],boolean)>(r1, 0);

        return r0;

     label5:
        return r4;
    }
    public volatile org.apache.commons.math3.linear.RealVector add(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.ArrayRealVector r0;
        org.apache.commons.math3.linear.RealVector $r1;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealVector;

        r0 = virtualinvoke r0.<org.apache.commons.math3.linear.ArrayRealVector: org.apache.commons.math3.linear.ArrayRealVector add(org.apache.commons.math3.linear.RealVector)>($r1);

        return r0;
    }
    public void addToEntry(int, double) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.ArrayRealVector r0;
        int $i0;
        double $d0, $d1;
        java.lang.IndexOutOfBoundsException r1;
        double[] $r2;
        org.apache.commons.math3.exception.OutOfRangeException $r3;
        org.apache.commons.math3.exception.util.LocalizedFormats $r4;
        java.lang.Integer $r5, $r6, $r7;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        $i0 := @parameter0: int;

        $d0 := @parameter1: double;

        $r2 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

     label1:
        $d1 = $r2[$i0];

     label2:
        $d0 = $d1 + $d0;

     label3:
        $r2[$i0] = $d0;

     label4:
        return;

     label5:
        r1 := @caughtexception;

        $r3 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INDEX>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r2 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $i0 = lengthof $r2;

        $i0 = $i0 + -1;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r3.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)>($r4, $r5, $r6, $r7);

        throw $r3;

        catch java.lang.IndexOutOfBoundsException from label1 to label2 with label5;
        catch java.lang.IndexOutOfBoundsException from label3 to label4 with label5;
    }
    public org.apache.commons.math3.linear.ArrayRealVector append(org.apache.commons.math3.linear.ArrayRealVector)
    {
        org.apache.commons.math3.linear.ArrayRealVector r0, $r1, $r2;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        $r1 := @parameter0: org.apache.commons.math3.linear.ArrayRealVector;

        $r2 = new org.apache.commons.math3.linear.ArrayRealVector;

        specialinvoke $r2.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(org.apache.commons.math3.linear.ArrayRealVector,org.apache.commons.math3.linear.ArrayRealVector)>(r0, $r1);

        return $r2;
    }
    public org.apache.commons.math3.linear.RealVector append(double)
    {
        org.apache.commons.math3.linear.ArrayRealVector r0;
        double $d0;
        double[] r1, $r2, $r3;
        int $i0;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        $d0 := @parameter0: double;

        r1 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $i0 = lengthof r1;

        $i0 = $i0 + 1;

        r1 = newarray (double)[$i0];

        $r2 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $r3 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $i0 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, 0, $i0);

        $r2 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $i0 = lengthof $r2;

        r1[$i0] = $d0;

        r0 = new org.apache.commons.math3.linear.ArrayRealVector;

        specialinvoke r0.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(double[],boolean)>(r1, 0);

        return r0;
    }
    public org.apache.commons.math3.linear.RealVector append(org.apache.commons.math3.linear.RealVector)
    {
        org.apache.commons.math3.linear.ArrayRealVector r0, $r3, $r4;
        org.apache.commons.math3.linear.RealVector $r1;
        java.lang.ClassCastException r2;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealVector;

        $r3 = new org.apache.commons.math3.linear.ArrayRealVector;

     label1:
        $r4 = (org.apache.commons.math3.linear.ArrayRealVector) $r1;

        specialinvoke $r3.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(org.apache.commons.math3.linear.ArrayRealVector,org.apache.commons.math3.linear.ArrayRealVector)>(r0, $r4);

     label2:
        return $r3;

     label3:
        r2 := @caughtexception;

        $r3 = new org.apache.commons.math3.linear.ArrayRealVector;

        specialinvoke $r3.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(org.apache.commons.math3.linear.ArrayRealVector,org.apache.commons.math3.linear.RealVector)>(r0, $r1);

        return $r3;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }
    protected void checkVectorDimensions(int) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.ArrayRealVector r0;
        int $i0, $i1;
        double[] $r1;
        org.apache.commons.math3.exception.DimensionMismatchException $r2;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        $i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $i1 = lengthof $r1;

        if $i1 == $i0 goto label1;

        $r2 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $r1 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $i1 = lengthof $r1;

        specialinvoke $r2.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i1, $i0);

        throw $r2;

     label1:
        return;
    }
    protected void checkVectorDimensions(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.ArrayRealVector r0;
        org.apache.commons.math3.linear.RealVector $r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealVector;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        virtualinvoke r0.<org.apache.commons.math3.linear.ArrayRealVector: void checkVectorDimensions(int)>($i0);

        return;
    }
    public org.apache.commons.math3.linear.ArrayRealVector combine(double, double, org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.ArrayRealVector r0;
        double $d0, $d1;
        org.apache.commons.math3.linear.RealVector $r1;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $r1 := @parameter2: org.apache.commons.math3.linear.RealVector;

        r0 = virtualinvoke r0.<org.apache.commons.math3.linear.ArrayRealVector: org.apache.commons.math3.linear.ArrayRealVector copy()>();

        r0 = virtualinvoke r0.<org.apache.commons.math3.linear.ArrayRealVector: org.apache.commons.math3.linear.ArrayRealVector combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)>($d0, $d1, $r1);

        return r0;
    }
    public volatile org.apache.commons.math3.linear.RealVector combine(double, double, org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.ArrayRealVector r0;
        double $d0, $d1;
        org.apache.commons.math3.linear.RealVector $r1;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $r1 := @parameter2: org.apache.commons.math3.linear.RealVector;

        r0 = virtualinvoke r0.<org.apache.commons.math3.linear.ArrayRealVector: org.apache.commons.math3.linear.ArrayRealVector combine(double,double,org.apache.commons.math3.linear.RealVector)>($d0, $d1, $r1);

        return r0;
    }
    public org.apache.commons.math3.linear.ArrayRealVector combineToSelf(double, double, org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.ArrayRealVector r0, r3;
        double $d0, $d1, $d2, $d3;
        double[] r1, $r4, $r5;
        org.apache.commons.math3.linear.RealVector r2;
        boolean $z0;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        r2 := @parameter2: org.apache.commons.math3.linear.RealVector;

        $z0 = r2 instanceof org.apache.commons.math3.linear.ArrayRealVector;

        if $z0 == 0 goto label2;

        r3 = (org.apache.commons.math3.linear.ArrayRealVector) r2;

        r1 = r3.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $i0 = lengthof r1;

        virtualinvoke r0.<org.apache.commons.math3.linear.ArrayRealVector: void checkVectorDimensions(int)>($i0);

        $i0 = 0;

     label1:
        $r4 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $i1 = lengthof $r4;

        if $i0 >= $i1 goto label4;

        $r4 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $r5 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $d3 = $r5[$i0];

        $d3 = $d3 * $d0;

        $d2 = r1[$i0];

        $d2 = $d2 * $d1;

        $d3 = $d3 + $d2;

        $r4[$i0] = $d3;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        virtualinvoke r0.<org.apache.commons.math3.linear.ArrayRealVector: void checkVectorDimensions(org.apache.commons.math3.linear.RealVector)>(r2);

        $i0 = 0;

     label3:
        r1 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $i1 = lengthof r1;

        if $i0 >= $i1 goto label4;

        r1 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $r4 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $d3 = $r4[$i0];

        $d3 = $d3 * $d0;

        $d2 = virtualinvoke r2.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>($i0);

        $d2 = $d2 * $d1;

        $d3 = $d3 + $d2;

        r1[$i0] = $d3;

        $i0 = $i0 + 1;

        goto label3;

     label4:
        return r0;
    }
    public volatile org.apache.commons.math3.linear.RealVector combineToSelf(double, double, org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.ArrayRealVector r0;
        double $d0, $d1;
        org.apache.commons.math3.linear.RealVector $r1;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $r1 := @parameter2: org.apache.commons.math3.linear.RealVector;

        r0 = virtualinvoke r0.<org.apache.commons.math3.linear.ArrayRealVector: org.apache.commons.math3.linear.ArrayRealVector combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)>($d0, $d1, $r1);

        return r0;
    }
    public org.apache.commons.math3.linear.ArrayRealVector copy()
    {
        org.apache.commons.math3.linear.ArrayRealVector r0, $r1;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        $r1 = new org.apache.commons.math3.linear.ArrayRealVector;

        specialinvoke $r1.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(org.apache.commons.math3.linear.ArrayRealVector,boolean)>(r0, 1);

        return $r1;
    }
    public volatile org.apache.commons.math3.linear.RealVector copy()
    {
        org.apache.commons.math3.linear.ArrayRealVector r0;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        r0 = virtualinvoke r0.<org.apache.commons.math3.linear.ArrayRealVector: org.apache.commons.math3.linear.ArrayRealVector copy()>();

        return r0;
    }
    public double dotProduct(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.ArrayRealVector r0, r3;
        double[] r1, $r4;
        double $d0, $d1, $d2;
        org.apache.commons.math3.linear.RealVector r2;
        boolean $z0;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        r2 := @parameter0: org.apache.commons.math3.linear.RealVector;

        $z0 = r2 instanceof org.apache.commons.math3.linear.ArrayRealVector;

        if $z0 == 0 goto label2;

        r3 = (org.apache.commons.math3.linear.ArrayRealVector) r2;

        r1 = r3.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $i0 = lengthof r1;

        virtualinvoke r0.<org.apache.commons.math3.linear.ArrayRealVector: void checkVectorDimensions(int)>($i0);

        $d1 = 0.0;

        $i0 = 0;

     label1:
        $r4 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $i1 = lengthof $r4;

        if $i0 >= $i1 goto label3;

        $r4 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $d2 = $r4[$i0];

        $d0 = r1[$i0];

        $d0 = $d2 * $d0;

        $d1 = $d1 + $d0;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $d1 = specialinvoke r0.<org.apache.commons.math3.linear.RealVector: double dotProduct(org.apache.commons.math3.linear.RealVector)>(r2);

     label3:
        return $d1;
    }
    public org.apache.commons.math3.linear.ArrayRealVector ebeDivide(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.ArrayRealVector r0, r4;
        int i0, i1;
        double[] r1, r2, $r5;
        org.apache.commons.math3.linear.RealVector r3;
        boolean $z0;
        double $d0, $d1;
        java.lang.Object $r6;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        r3 := @parameter0: org.apache.commons.math3.linear.RealVector;

        $z0 = r3 instanceof org.apache.commons.math3.linear.ArrayRealVector;

        if $z0 == 0 goto label2;

        r4 = (org.apache.commons.math3.linear.ArrayRealVector) r3;

        r2 = r4.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        i0 = lengthof r2;

        virtualinvoke r0.<org.apache.commons.math3.linear.ArrayRealVector: void checkVectorDimensions(int)>(i0);

        r4 = new org.apache.commons.math3.linear.ArrayRealVector;

        specialinvoke r4.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(int)>(i0);

        r1 = r4.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        i1 = 0;

     label1:
        if i1 >= i0 goto label5;

        $r5 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $d0 = $r5[i1];

        $d1 = r2[i1];

        $d0 = $d0 / $d1;

        r1[i1] = $d0;

        i1 = i1 + 1;

        goto label1;

     label2:
        virtualinvoke r0.<org.apache.commons.math3.linear.ArrayRealVector: void checkVectorDimensions(org.apache.commons.math3.linear.RealVector)>(r3);

        r1 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $r6 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();

        r1 = (double[]) $r6;

        i0 = 0;

     label3:
        r2 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        i1 = lengthof r2;

        if i0 >= i1 goto label4;

        $d0 = r1[i0];

        $d1 = virtualinvoke r3.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>(i0);

        $d0 = $d0 / $d1;

        r1[i0] = $d0;

        i0 = i0 + 1;

        goto label3;

     label4:
        r0 = new org.apache.commons.math3.linear.ArrayRealVector;

        specialinvoke r0.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(double[],boolean)>(r1, 0);

        return r0;

     label5:
        return r4;
    }
    public volatile org.apache.commons.math3.linear.RealVector ebeDivide(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.ArrayRealVector r0;
        org.apache.commons.math3.linear.RealVector $r1;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealVector;

        r0 = virtualinvoke r0.<org.apache.commons.math3.linear.ArrayRealVector: org.apache.commons.math3.linear.ArrayRealVector ebeDivide(org.apache.commons.math3.linear.RealVector)>($r1);

        return r0;
    }
    public org.apache.commons.math3.linear.ArrayRealVector ebeMultiply(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.ArrayRealVector r0, r4;
        int i0, i1;
        double[] r1, r2, $r5;
        org.apache.commons.math3.linear.RealVector r3;
        boolean $z0;
        double $d0, $d1;
        java.lang.Object $r6;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        r3 := @parameter0: org.apache.commons.math3.linear.RealVector;

        $z0 = r3 instanceof org.apache.commons.math3.linear.ArrayRealVector;

        if $z0 == 0 goto label2;

        r4 = (org.apache.commons.math3.linear.ArrayRealVector) r3;

        r2 = r4.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        i0 = lengthof r2;

        virtualinvoke r0.<org.apache.commons.math3.linear.ArrayRealVector: void checkVectorDimensions(int)>(i0);

        r4 = new org.apache.commons.math3.linear.ArrayRealVector;

        specialinvoke r4.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(int)>(i0);

        r1 = r4.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        i1 = 0;

     label1:
        if i1 >= i0 goto label5;

        $r5 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $d0 = $r5[i1];

        $d1 = r2[i1];

        $d0 = $d0 * $d1;

        r1[i1] = $d0;

        i1 = i1 + 1;

        goto label1;

     label2:
        virtualinvoke r0.<org.apache.commons.math3.linear.ArrayRealVector: void checkVectorDimensions(org.apache.commons.math3.linear.RealVector)>(r3);

        r1 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $r6 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();

        r1 = (double[]) $r6;

        i0 = 0;

     label3:
        r2 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        i1 = lengthof r2;

        if i0 >= i1 goto label4;

        $d0 = r1[i0];

        $d1 = virtualinvoke r3.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>(i0);

        $d0 = $d0 * $d1;

        r1[i0] = $d0;

        i0 = i0 + 1;

        goto label3;

     label4:
        r0 = new org.apache.commons.math3.linear.ArrayRealVector;

        specialinvoke r0.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(double[],boolean)>(r1, 0);

        return r0;

     label5:
        return r4;
    }
    public volatile org.apache.commons.math3.linear.RealVector ebeMultiply(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.ArrayRealVector r0;
        org.apache.commons.math3.linear.RealVector $r1;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealVector;

        r0 = virtualinvoke r0.<org.apache.commons.math3.linear.ArrayRealVector: org.apache.commons.math3.linear.ArrayRealVector ebeMultiply(org.apache.commons.math3.linear.RealVector)>($r1);

        return r0;
    }
    public boolean equals(java.lang.Object)
    {
        org.apache.commons.math3.linear.ArrayRealVector r0;
        java.lang.Object $r1;
        boolean $z0;
        org.apache.commons.math3.linear.RealVector r2;
        double[] $r3;
        int $i0, $i1;
        double $d0, $d1;
        byte $b2;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        $r1 := @parameter0: java.lang.Object;

        if r0 != $r1 goto label1;

        return 1;

     label1:
        $z0 = $r1 instanceof org.apache.commons.math3.linear.RealVector;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (org.apache.commons.math3.linear.RealVector) $r1;

        $r3 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $i0 = lengthof $r3;

        $i1 = virtualinvoke r2.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        if $i0 == $i1 goto label3;

        return 0;

     label3:
        $z0 = virtualinvoke r2.<org.apache.commons.math3.linear.RealVector: boolean isNaN()>();

        if $z0 == 0 goto label4;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.linear.ArrayRealVector: boolean isNaN()>();

        return $z0;

     label4:
        $i0 = 0;

     label5:
        $r3 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $i1 = lengthof $r3;

        if $i0 >= $i1 goto label7;

        $r3 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $d0 = $r3[$i0];

        $d1 = virtualinvoke r2.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>($i0);

        $b2 = $d0 cmpl $d1;

        if $b2 == 0 goto label6;

        return 0;

     label6:
        $i0 = $i0 + 1;

        goto label5;

     label7:
        return 1;
    }
    public double[] getDataRef()
    {
        org.apache.commons.math3.linear.ArrayRealVector r0;
        double[] r1;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        r1 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        return r1;
    }
    public int getDimension()
    {
        org.apache.commons.math3.linear.ArrayRealVector r0;
        double[] $r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        $r1 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $i0 = lengthof $r1;

        return $i0;
    }
    public double getDistance(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.ArrayRealVector r0, r3;
        double[] r1, $r4;
        org.apache.commons.math3.linear.RealVector r2;
        boolean $z0;
        int $i0, $i1;
        double d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        r2 := @parameter0: org.apache.commons.math3.linear.RealVector;

        $z0 = r2 instanceof org.apache.commons.math3.linear.ArrayRealVector;

        if $z0 == 0 goto label3;

        r3 = (org.apache.commons.math3.linear.ArrayRealVector) r2;

        r1 = r3.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $i0 = lengthof r1;

        virtualinvoke r0.<org.apache.commons.math3.linear.ArrayRealVector: void checkVectorDimensions(int)>($i0);

        d0 = 0.0;

        $i0 = 0;

     label1:
        $r4 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $i1 = lengthof $r4;

        if $i0 >= $i1 goto label2;

        $r4 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $d1 = $r4[$i0];

        $d2 = r1[$i0];

        $d1 = $d1 - $d2;

        $d1 = $d1 * $d1;

        d0 = d0 + $d1;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d0);

        return d0;

     label3:
        virtualinvoke r0.<org.apache.commons.math3.linear.ArrayRealVector: void checkVectorDimensions(org.apache.commons.math3.linear.RealVector)>(r2);

        d0 = 0.0;

        $i0 = 0;

     label4:
        r1 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $i1 = lengthof r1;

        if $i0 >= $i1 goto label5;

        r1 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $d1 = r1[$i0];

        $d2 = virtualinvoke r2.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>($i0);

        $d1 = $d1 - $d2;

        $d1 = $d1 * $d1;

        d0 = d0 + $d1;

        $i0 = $i0 + 1;

        goto label4;

     label5:
        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d0);

        return d0;
    }
    public double getEntry(int) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.ArrayRealVector r0;
        int $i0;
        java.lang.IndexOutOfBoundsException r1;
        double[] $r2;
        double $d0;
        org.apache.commons.math3.exception.OutOfRangeException $r3;
        org.apache.commons.math3.exception.util.LocalizedFormats $r4;
        java.lang.Integer $r5, $r6, $r7;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        $i0 := @parameter0: int;

        $r2 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

     label1:
        $d0 = $r2[$i0];

     label2:
        return $d0;

     label3:
        r1 := @caughtexception;

        $r3 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INDEX>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $i0 = virtualinvoke r0.<org.apache.commons.math3.linear.ArrayRealVector: int getDimension()>();

        $i0 = $i0 + -1;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r3.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)>($r4, $r5, $r6, $r7);

        throw $r3;

        catch java.lang.IndexOutOfBoundsException from label1 to label2 with label3;
    }
    public double getL1Distance(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.ArrayRealVector r0, r3;
        double[] r1, $r4;
        org.apache.commons.math3.linear.RealVector r2;
        boolean $z0;
        int $i0, $i1;
        double d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        r2 := @parameter0: org.apache.commons.math3.linear.RealVector;

        $z0 = r2 instanceof org.apache.commons.math3.linear.ArrayRealVector;

        if $z0 == 0 goto label2;

        r3 = (org.apache.commons.math3.linear.ArrayRealVector) r2;

        r1 = r3.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $i0 = lengthof r1;

        virtualinvoke r0.<org.apache.commons.math3.linear.ArrayRealVector: void checkVectorDimensions(int)>($i0);

        d0 = 0.0;

        $i0 = 0;

     label1:
        $r4 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $i1 = lengthof $r4;

        if $i0 >= $i1 goto label4;

        $r4 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $d1 = $r4[$i0];

        $d2 = r1[$i0];

        $d1 = $d1 - $d2;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d1);

        d0 = d0 + $d1;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        virtualinvoke r0.<org.apache.commons.math3.linear.ArrayRealVector: void checkVectorDimensions(org.apache.commons.math3.linear.RealVector)>(r2);

        d0 = 0.0;

        $i0 = 0;

     label3:
        r1 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $i1 = lengthof r1;

        if $i0 >= $i1 goto label4;

        r1 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $d1 = r1[$i0];

        $d2 = virtualinvoke r2.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>($i0);

        $d1 = $d1 - $d2;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d1);

        d0 = d0 + $d1;

        $i0 = $i0 + 1;

        goto label3;

     label4:
        return d0;
    }
    public double getL1Norm()
    {
        org.apache.commons.math3.linear.ArrayRealVector r0;
        double d0, d1;
        double[] r1;
        int i0, i1;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        d1 = 0.0;

        r1 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        d0 = r1[i1];

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d0);

        d1 = d1 + d0;

        i1 = i1 + 1;

        goto label1;

     label2:
        return d1;
    }
    public double getLInfDistance(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.ArrayRealVector r0, r3;
        double[] r1, $r4;
        org.apache.commons.math3.linear.RealVector r2;
        boolean $z0;
        int $i0, $i1;
        double d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        r2 := @parameter0: org.apache.commons.math3.linear.RealVector;

        $z0 = r2 instanceof org.apache.commons.math3.linear.ArrayRealVector;

        if $z0 == 0 goto label2;

        r3 = (org.apache.commons.math3.linear.ArrayRealVector) r2;

        r1 = r3.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $i0 = lengthof r1;

        virtualinvoke r0.<org.apache.commons.math3.linear.ArrayRealVector: void checkVectorDimensions(int)>($i0);

        d0 = 0.0;

        $i0 = 0;

     label1:
        $r4 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $i1 = lengthof $r4;

        if $i0 >= $i1 goto label4;

        $r4 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $d1 = $r4[$i0];

        $d2 = r1[$i0];

        $d1 = $d1 - $d2;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d1);

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>(d0, $d1);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        virtualinvoke r0.<org.apache.commons.math3.linear.ArrayRealVector: void checkVectorDimensions(org.apache.commons.math3.linear.RealVector)>(r2);

        d0 = 0.0;

        $i0 = 0;

     label3:
        r1 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $i1 = lengthof r1;

        if $i0 >= $i1 goto label4;

        r1 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $d1 = r1[$i0];

        $d2 = virtualinvoke r2.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>($i0);

        $d1 = $d1 - $d2;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d1);

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>(d0, $d1);

        $i0 = $i0 + 1;

        goto label3;

     label4:
        return d0;
    }
    public double getLInfNorm()
    {
        org.apache.commons.math3.linear.ArrayRealVector r0;
        double d0, d1;
        double[] r1;
        int i0, i1;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        d1 = 0.0;

        r1 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        d0 = r1[i1];

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d0);

        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>(d1, d0);

        i1 = i1 + 1;

        goto label1;

     label2:
        return d1;
    }
    public double getNorm()
    {
        org.apache.commons.math3.linear.ArrayRealVector r0;
        double d0, $d1;
        double[] r1;
        int i0, i1;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        $d1 = 0.0;

        r1 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        d0 = r1[i1];

        d0 = d0 * d0;

        $d1 = $d1 + d0;

        i1 = i1 + 1;

        goto label1;

     label2:
        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d1);

        return $d1;
    }
    public org.apache.commons.math3.linear.RealVector getSubVector(int, int) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.NotPositiveException
    {
        org.apache.commons.math3.linear.ArrayRealVector r0, r2;
        int $i0, $i1;
        java.lang.IndexOutOfBoundsException r1;
        java.lang.Integer $r3;
        org.apache.commons.math3.exception.NotPositiveException $r4;
        org.apache.commons.math3.exception.util.LocalizedFormats $r5;
        double[] $r6, $r7;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        if $i1 >= 0 goto label1;

        $r4 = new org.apache.commons.math3.exception.NotPositiveException;

        $r5 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        specialinvoke $r4.<org.apache.commons.math3.exception.NotPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r5, $r3);

        throw $r4;

     label1:
        r2 = new org.apache.commons.math3.linear.ArrayRealVector;

        specialinvoke r2.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(int)>($i1);

        $r6 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $r7 = r2.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

     label2:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, $i0, $r7, 0, $i1);

     label3:
        return r2;

     label4:
        r1 := @caughtexception;

        virtualinvoke r0.<org.apache.commons.math3.linear.ArrayRealVector: void checkIndex(int)>($i0);

        $i0 = $i0 + $i1;

        $i0 = $i0 + -1;

        virtualinvoke r0.<org.apache.commons.math3.linear.ArrayRealVector: void checkIndex(int)>($i0);

        return r2;

        catch java.lang.IndexOutOfBoundsException from label2 to label3 with label4;
    }
    public int hashCode()
    {
        org.apache.commons.math3.linear.ArrayRealVector r0;
        boolean $z0;
        double[] $r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.linear.ArrayRealVector: boolean isNaN()>();

        if $z0 == 0 goto label1;

        return 9;

     label1:
        $r1 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $i0 = staticinvoke <org.apache.commons.math3.util.MathUtils: int hash(double[])>($r1);

        return $i0;
    }
    public boolean isInfinite()
    {
        org.apache.commons.math3.linear.ArrayRealVector r0;
        double[] r1;
        int i0, i1;
        double d0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.linear.ArrayRealVector: boolean isNaN()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        r1 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        i0 = lengthof r1;

        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        d0 = r1[i1];

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d0);

        if $z0 == 0 goto label3;

        return 1;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return 0;
    }
    public boolean isNaN()
    {
        org.apache.commons.math3.linear.ArrayRealVector r0;
        double[] r1;
        int i0, i1;
        double d0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        r1 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        d0 = r1[i1];

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }
    public org.apache.commons.math3.linear.ArrayRealVector map(org.apache.commons.math3.analysis.UnivariateFunction)
    {
        org.apache.commons.math3.linear.ArrayRealVector r0;
        org.apache.commons.math3.analysis.UnivariateFunction $r1;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        $r1 := @parameter0: org.apache.commons.math3.analysis.UnivariateFunction;

        r0 = virtualinvoke r0.<org.apache.commons.math3.linear.ArrayRealVector: org.apache.commons.math3.linear.ArrayRealVector copy()>();

        r0 = virtualinvoke r0.<org.apache.commons.math3.linear.ArrayRealVector: org.apache.commons.math3.linear.ArrayRealVector mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)>($r1);

        return r0;
    }
    public volatile org.apache.commons.math3.linear.RealVector map(org.apache.commons.math3.analysis.UnivariateFunction)
    {
        org.apache.commons.math3.linear.ArrayRealVector r0;
        org.apache.commons.math3.analysis.UnivariateFunction $r1;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        $r1 := @parameter0: org.apache.commons.math3.analysis.UnivariateFunction;

        r0 = virtualinvoke r0.<org.apache.commons.math3.linear.ArrayRealVector: org.apache.commons.math3.linear.ArrayRealVector map(org.apache.commons.math3.analysis.UnivariateFunction)>($r1);

        return r0;
    }
    public org.apache.commons.math3.linear.RealVector mapAddToSelf(double)
    {
        org.apache.commons.math3.linear.ArrayRealVector r0;
        double $d0, $d1;
        int i0, $i1;
        double[] $r1;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        $d0 := @parameter0: double;

        i0 = 0;

     label1:
        $r1 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $i1 = lengthof $r1;

        if i0 >= $i1 goto label2;

        $r1 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $d1 = $r1[i0];

        $d1 = $d1 + $d0;

        $r1[i0] = $d1;

        i0 = i0 + 1;

        goto label1;

     label2:
        return r0;
    }
    public org.apache.commons.math3.linear.RealVector mapDivideToSelf(double)
    {
        org.apache.commons.math3.linear.ArrayRealVector r0;
        double $d0, $d1;
        int i0, $i1;
        double[] $r1;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        $d0 := @parameter0: double;

        i0 = 0;

     label1:
        $r1 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $i1 = lengthof $r1;

        if i0 >= $i1 goto label2;

        $r1 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $d1 = $r1[i0];

        $d1 = $d1 / $d0;

        $r1[i0] = $d1;

        i0 = i0 + 1;

        goto label1;

     label2:
        return r0;
    }
    public org.apache.commons.math3.linear.RealVector mapMultiplyToSelf(double)
    {
        org.apache.commons.math3.linear.ArrayRealVector r0;
        double $d0, $d1;
        int i0, $i1;
        double[] $r1;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        $d0 := @parameter0: double;

        i0 = 0;

     label1:
        $r1 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $i1 = lengthof $r1;

        if i0 >= $i1 goto label2;

        $r1 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $d1 = $r1[i0];

        $d1 = $d1 * $d0;

        $r1[i0] = $d1;

        i0 = i0 + 1;

        goto label1;

     label2:
        return r0;
    }
    public org.apache.commons.math3.linear.RealVector mapSubtractToSelf(double)
    {
        org.apache.commons.math3.linear.ArrayRealVector r0;
        double $d0, $d1;
        int i0, $i1;
        double[] $r1;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        $d0 := @parameter0: double;

        i0 = 0;

     label1:
        $r1 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $i1 = lengthof $r1;

        if i0 >= $i1 goto label2;

        $r1 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $d1 = $r1[i0];

        $d1 = $d1 - $d0;

        $r1[i0] = $d1;

        i0 = i0 + 1;

        goto label1;

     label2:
        return r0;
    }
    public org.apache.commons.math3.linear.ArrayRealVector mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)
    {
        org.apache.commons.math3.linear.ArrayRealVector r0;
        org.apache.commons.math3.analysis.UnivariateFunction $r1;
        double $d0;
        int i0, $i1;
        double[] $r2, $r3;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        $r1 := @parameter0: org.apache.commons.math3.analysis.UnivariateFunction;

        i0 = 0;

     label1:
        $r2 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $i1 = lengthof $r2;

        if i0 >= $i1 goto label2;

        $r2 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $r3 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $d0 = $r3[i0];

        $d0 = interfaceinvoke $r1.<org.apache.commons.math3.analysis.UnivariateFunction: double value(double)>($d0);

        $r2[i0] = $d0;

        i0 = i0 + 1;

        goto label1;

     label2:
        return r0;
    }
    public volatile org.apache.commons.math3.linear.RealVector mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)
    {
        org.apache.commons.math3.linear.ArrayRealVector r0;
        org.apache.commons.math3.analysis.UnivariateFunction $r1;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        $r1 := @parameter0: org.apache.commons.math3.analysis.UnivariateFunction;

        r0 = virtualinvoke r0.<org.apache.commons.math3.linear.ArrayRealVector: org.apache.commons.math3.linear.ArrayRealVector mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)>($r1);

        return r0;
    }
    public org.apache.commons.math3.linear.RealMatrix outerProduct(org.apache.commons.math3.linear.RealVector)
    {
        org.apache.commons.math3.linear.ArrayRealVector r0, r3;
        double[] r1, $r4;
        org.apache.commons.math3.linear.RealVector r2;
        boolean $z0;
        int i0, i1, i2, i3;
        org.apache.commons.math3.linear.RealMatrix $r5;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        r2 := @parameter0: org.apache.commons.math3.linear.RealVector;

        $z0 = r2 instanceof org.apache.commons.math3.linear.ArrayRealVector;

        if $z0 == 0 goto label4;

        r3 = (org.apache.commons.math3.linear.ArrayRealVector) r2;

        r1 = r3.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $r4 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        i0 = lengthof $r4;

        i1 = lengthof r1;

        $r5 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix createRealMatrix(int,int)>(i0, i1);

        i2 = 0;

     label1:
        if i2 >= i0 goto label8;

        i3 = 0;

     label2:
        if i3 >= i1 goto label3;

        $r4 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $d0 = $r4[i2];

        $d1 = r1[i3];

        $d0 = $d0 * $d1;

        interfaceinvoke $r5.<org.apache.commons.math3.linear.RealMatrix: void setEntry(int,int,double)>(i2, i3, $d0);

        i3 = i3 + 1;

        goto label2;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        r1 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        i0 = lengthof r1;

        i1 = virtualinvoke r2.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        $r5 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix createRealMatrix(int,int)>(i0, i1);

        i2 = 0;

     label5:
        if i2 >= i0 goto label8;

        i3 = 0;

     label6:
        if i3 >= i1 goto label7;

        r1 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $d0 = r1[i2];

        $d1 = virtualinvoke r2.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>(i3);

        $d0 = $d0 * $d1;

        interfaceinvoke $r5.<org.apache.commons.math3.linear.RealMatrix: void setEntry(int,int,double)>(i2, i3, $d0);

        i3 = i3 + 1;

        goto label6;

     label7:
        i2 = i2 + 1;

        goto label5;

     label8:
        return $r5;
    }
    public void set(double)
    {
        org.apache.commons.math3.linear.ArrayRealVector r0;
        double $d0;
        double[] $r1;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        $d0 := @parameter0: double;

        $r1 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        staticinvoke <java.util.Arrays: void fill(double[],double)>($r1, $d0);

        return;
    }
    public void setEntry(int, double) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.ArrayRealVector r0;
        int $i0;
        double $d0;
        java.lang.IndexOutOfBoundsException r1;
        double[] $r2;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        $i0 := @parameter0: int;

        $d0 := @parameter1: double;

        $r2 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

     label1:
        $r2[$i0] = $d0;

     label2:
        return;

     label3:
        r1 := @caughtexception;

        virtualinvoke r0.<org.apache.commons.math3.linear.ArrayRealVector: void checkIndex(int)>($i0);

        return;

        catch java.lang.IndexOutOfBoundsException from label1 to label2 with label3;
    }
    public void setSubVector(int, org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.ArrayRealVector r0, r3;
        int $i0, $i1, i2;
        java.lang.IndexOutOfBoundsException r1;
        org.apache.commons.math3.linear.RealVector r2;
        boolean $z0;
        double[] $r4;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        $i0 := @parameter0: int;

        r2 := @parameter1: org.apache.commons.math3.linear.RealVector;

        $z0 = r2 instanceof org.apache.commons.math3.linear.ArrayRealVector;

        if $z0 == 0 goto label1;

        r3 = (org.apache.commons.math3.linear.ArrayRealVector) r2;

        $r4 = r3.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        virtualinvoke r0.<org.apache.commons.math3.linear.ArrayRealVector: void setSubVector(int,double[])>($i0, $r4);

        return;

     label1:
        i2 = $i0;

     label2:
        $i1 = virtualinvoke r2.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

     label3:
        $i1 = $i1 + $i0;

        if i2 >= $i1 goto label7;

        $r4 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $i1 = i2 - $i0;

     label4:
        $d0 = virtualinvoke r2.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>($i1);

        $r4[i2] = $d0;

     label5:
        i2 = i2 + 1;

        goto label2;

     label6:
        r1 := @caughtexception;

        virtualinvoke r0.<org.apache.commons.math3.linear.ArrayRealVector: void checkIndex(int)>($i0);

        i2 = virtualinvoke r2.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        $i0 = i2 + $i0;

        $i0 = $i0 + -1;

        virtualinvoke r0.<org.apache.commons.math3.linear.ArrayRealVector: void checkIndex(int)>($i0);

     label7:
        return;

        catch java.lang.IndexOutOfBoundsException from label2 to label3 with label6;
        catch java.lang.IndexOutOfBoundsException from label4 to label5 with label6;
    }
    public void setSubVector(int, double[]) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.ArrayRealVector r0;
        int $i0, $i1;
        double[] $r1, $r3;
        java.lang.IndexOutOfBoundsException r2;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        $i0 := @parameter0: int;

        $r1 := @parameter1: double[];

        $r3 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $i1 = lengthof $r1;

     label1:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r3, $i0, $i1);

     label2:
        return;

     label3:
        r2 := @caughtexception;

        virtualinvoke r0.<org.apache.commons.math3.linear.ArrayRealVector: void checkIndex(int)>($i0);

        $i1 = lengthof $r1;

        $i0 = $i1 + $i0;

        $i0 = $i0 + -1;

        virtualinvoke r0.<org.apache.commons.math3.linear.ArrayRealVector: void checkIndex(int)>($i0);

        return;

        catch java.lang.IndexOutOfBoundsException from label1 to label2 with label3;
    }
    public org.apache.commons.math3.linear.ArrayRealVector subtract(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.ArrayRealVector r0, r4;
        int i0, i1;
        double[] r1, r2, $r5;
        org.apache.commons.math3.linear.RealVector r3;
        boolean $z0;
        double $d0, $d1;
        java.lang.Object $r6;
        java.util.Iterator $r7;
        org.apache.commons.math3.linear.RealVector$Entry r8;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        r3 := @parameter0: org.apache.commons.math3.linear.RealVector;

        $z0 = r3 instanceof org.apache.commons.math3.linear.ArrayRealVector;

        if $z0 == 0 goto label2;

        r4 = (org.apache.commons.math3.linear.ArrayRealVector) r3;

        r2 = r4.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        i0 = lengthof r2;

        virtualinvoke r0.<org.apache.commons.math3.linear.ArrayRealVector: void checkVectorDimensions(int)>(i0);

        r4 = new org.apache.commons.math3.linear.ArrayRealVector;

        specialinvoke r4.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(int)>(i0);

        r1 = r4.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        i1 = 0;

     label1:
        if i1 >= i0 goto label5;

        $r5 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $d0 = $r5[i1];

        $d1 = r2[i1];

        $d0 = $d0 - $d1;

        r1[i1] = $d0;

        i1 = i1 + 1;

        goto label1;

     label2:
        virtualinvoke r0.<org.apache.commons.math3.linear.ArrayRealVector: void checkVectorDimensions(org.apache.commons.math3.linear.RealVector)>(r3);

        r1 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $r6 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();

        r1 = (double[]) $r6;

        $r7 = virtualinvoke r3.<org.apache.commons.math3.linear.RealVector: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.apache.commons.math3.linear.RealVector$Entry) $r6;

        i0 = virtualinvoke r8.<org.apache.commons.math3.linear.RealVector$Entry: int getIndex()>();

        $d0 = r1[i0];

        $d1 = virtualinvoke r8.<org.apache.commons.math3.linear.RealVector$Entry: double getValue()>();

        $d0 = $d0 - $d1;

        r1[i0] = $d0;

        goto label3;

     label4:
        r0 = new org.apache.commons.math3.linear.ArrayRealVector;

        specialinvoke r0.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(double[],boolean)>(r1, 0);

        return r0;

     label5:
        return r4;
    }
    public volatile org.apache.commons.math3.linear.RealVector subtract(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.ArrayRealVector r0;
        org.apache.commons.math3.linear.RealVector $r1;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealVector;

        r0 = virtualinvoke r0.<org.apache.commons.math3.linear.ArrayRealVector: org.apache.commons.math3.linear.ArrayRealVector subtract(org.apache.commons.math3.linear.RealVector)>($r1);

        return r0;
    }
    public double[] toArray()
    {
        org.apache.commons.math3.linear.ArrayRealVector r0;
        java.lang.Object $r1;
        double[] $r2;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        $r2 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $r1 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (double[]) $r1;

        return $r2;
    }
    public java.lang.String toString()
    {
        org.apache.commons.math3.linear.ArrayRealVector r0;
        java.lang.String $r1;
        org.apache.commons.math3.linear.RealVectorFormat $r2;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        $r2 = <org.apache.commons.math3.linear.ArrayRealVector: org.apache.commons.math3.linear.RealVectorFormat DEFAULT_FORMAT>;

        $r1 = virtualinvoke $r2.<org.apache.commons.math3.linear.RealVectorFormat: java.lang.String format(org.apache.commons.math3.linear.RealVector)>(r0);

        return $r1;
    }
    public double walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)
    {
        org.apache.commons.math3.linear.ArrayRealVector r0;
        org.apache.commons.math3.linear.RealVectorChangingVisitor $r1;
        double[] $r2, $r3;
        int $i0, $i1;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealVectorChangingVisitor;

        $r2 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $i0 = lengthof $r2;

        $r2 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $i1 = lengthof $r2;

        $i1 = $i1 + -1;

        interfaceinvoke $r1.<org.apache.commons.math3.linear.RealVectorChangingVisitor: void start(int,int,int)>($i0, 0, $i1);

        $i0 = 0;

     label1:
        $r2 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label2;

        $r2 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $r3 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $d0 = $r3[$i0];

        $d0 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealVectorChangingVisitor: double visit(int,double)>($i0, $d0);

        $r2[$i0] = $d0;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $d0 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealVectorChangingVisitor: double end()>();

        return $d0;
    }
    public double walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor, int, int) throws org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.ArrayRealVector r0;
        org.apache.commons.math3.linear.RealVectorChangingVisitor $r1;
        int $i0, $i1, $i2;
        double[] $r2, $r3;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealVectorChangingVisitor;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        virtualinvoke r0.<org.apache.commons.math3.linear.ArrayRealVector: void checkIndices(int,int)>($i0, $i1);

        $r2 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $i2 = lengthof $r2;

        interfaceinvoke $r1.<org.apache.commons.math3.linear.RealVectorChangingVisitor: void start(int,int,int)>($i2, $i0, $i1);

     label1:
        if $i0 > $i1 goto label2;

        $r2 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $r3 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $d0 = $r3[$i0];

        $d0 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealVectorChangingVisitor: double visit(int,double)>($i0, $d0);

        $r2[$i0] = $d0;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $d0 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealVectorChangingVisitor: double end()>();

        return $d0;
    }
    public double walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)
    {
        org.apache.commons.math3.linear.ArrayRealVector r0;
        org.apache.commons.math3.linear.RealVectorPreservingVisitor $r1;
        double $d0;
        double[] $r2;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealVectorPreservingVisitor;

        $r2 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $i0 = lengthof $r2;

        $r2 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $i1 = lengthof $r2;

        $i1 = $i1 + -1;

        interfaceinvoke $r1.<org.apache.commons.math3.linear.RealVectorPreservingVisitor: void start(int,int,int)>($i0, 0, $i1);

        $i0 = 0;

     label1:
        $r2 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label2;

        $r2 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $d0 = $r2[$i0];

        interfaceinvoke $r1.<org.apache.commons.math3.linear.RealVectorPreservingVisitor: void visit(int,double)>($i0, $d0);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $d0 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealVectorPreservingVisitor: double end()>();

        return $d0;
    }
    public double walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor, int, int) throws org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.ArrayRealVector r0;
        org.apache.commons.math3.linear.RealVectorPreservingVisitor $r1;
        int $i0, $i1, $i2;
        double $d0;
        double[] $r2;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealVectorPreservingVisitor;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        virtualinvoke r0.<org.apache.commons.math3.linear.ArrayRealVector: void checkIndices(int,int)>($i0, $i1);

        $r2 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $i2 = lengthof $r2;

        interfaceinvoke $r1.<org.apache.commons.math3.linear.RealVectorPreservingVisitor: void start(int,int,int)>($i2, $i0, $i1);

     label1:
        if $i0 > $i1 goto label2;

        $r2 = r0.<org.apache.commons.math3.linear.ArrayRealVector: double[] data>;

        $d0 = $r2[$i0];

        interfaceinvoke $r1.<org.apache.commons.math3.linear.RealVectorPreservingVisitor: void visit(int,double)>($i0, $d0);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $d0 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealVectorPreservingVisitor: double end()>();

        return $d0;
    }
    public double walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)
    {
        org.apache.commons.math3.linear.ArrayRealVector r0;
        org.apache.commons.math3.linear.RealVectorChangingVisitor $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealVectorChangingVisitor;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.linear.ArrayRealVector: double walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)>($r1);

        return $d0;
    }
    public double walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor, int, int) throws org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.ArrayRealVector r0;
        org.apache.commons.math3.linear.RealVectorChangingVisitor $r1;
        int $i0, $i1;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealVectorChangingVisitor;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.linear.ArrayRealVector: double walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)>($r1, $i0, $i1);

        return $d0;
    }
    public double walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)
    {
        org.apache.commons.math3.linear.ArrayRealVector r0;
        org.apache.commons.math3.linear.RealVectorPreservingVisitor $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealVectorPreservingVisitor;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.linear.ArrayRealVector: double walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)>($r1);

        return $d0;
    }
    public double walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor, int, int) throws org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.ArrayRealVector r0;
        org.apache.commons.math3.linear.RealVectorPreservingVisitor $r1;
        int $i0, $i1;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.ArrayRealVector;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealVectorPreservingVisitor;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.linear.ArrayRealVector: double walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)>($r1, $i0, $i1);

        return $d0;
    }
