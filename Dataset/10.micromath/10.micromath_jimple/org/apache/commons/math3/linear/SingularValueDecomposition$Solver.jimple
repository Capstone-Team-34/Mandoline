org.apache.commons.math3.linear.SingularValueDecomposition$Solver extends java.lang.Object implements org.apache.commons.math3.linear.DecompositionSolver
private boolean nonSingular
private final org.apache.commons.math3.linear.RealMatrix pseudoInverse
    private void <init>(double[], org.apache.commons.math3.linear.RealMatrix, org.apache.commons.math3.linear.RealMatrix, boolean, double)
    {
        org.apache.commons.math3.linear.SingularValueDecomposition$Solver r0;
        double[] $r1, r4;
        org.apache.commons.math3.linear.RealMatrix $r2, $r3;
        boolean $z0;
        double $d0, $d1, $d2;
        double[][] $r5;
        int i0, $i1, $i3;
        byte $b2;
        org.apache.commons.math3.linear.Array2DRowRealMatrix $r6;

        r0 := @this: org.apache.commons.math3.linear.SingularValueDecomposition$Solver;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: org.apache.commons.math3.linear.RealMatrix;

        $r3 := @parameter2: org.apache.commons.math3.linear.RealMatrix;

        $z0 := @parameter3: boolean;

        $d0 := @parameter4: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r5 = interfaceinvoke $r2.<org.apache.commons.math3.linear.RealMatrix: double[][] getData()>();

        i0 = 0;

     label1:
        $i1 = lengthof $r1;

        if i0 >= $i1 goto label6;

        $d1 = $r1[i0];

        $b2 = $d1 cmpl $d0;

        if $b2 <= 0 goto label4;

        $d1 = $r1[i0];

        $d1 = 1.0 / $d1;

     label2:
        r4 = $r5[i0];

        $i1 = 0;

     label3:
        $i3 = lengthof r4;

        if $i1 >= $i3 goto label5;

        $d2 = r4[$i1];

        $d2 = $d2 * $d1;

        r4[$i1] = $d2;

        $i1 = $i1 + 1;

        goto label3;

     label4:
        $d1 = 0.0;

        goto label2;

     label5:
        i0 = i0 + 1;

        goto label1;

     label6:
        $r6 = new org.apache.commons.math3.linear.Array2DRowRealMatrix;

        specialinvoke $r6.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void <init>(double[][],boolean)>($r5, 0);

        $r2 = interfaceinvoke $r3.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>($r6);

        r0.<org.apache.commons.math3.linear.SingularValueDecomposition$Solver: org.apache.commons.math3.linear.RealMatrix pseudoInverse> = $r2;

        r0.<org.apache.commons.math3.linear.SingularValueDecomposition$Solver: boolean nonSingular> = $z0;

        return;
    }
    void <init>(double[], org.apache.commons.math3.linear.RealMatrix, org.apache.commons.math3.linear.RealMatrix, boolean, double, org.apache.commons.math3.linear.SingularValueDecomposition$1)
    {
        org.apache.commons.math3.linear.SingularValueDecomposition$Solver r0;
        double[] $r1;
        org.apache.commons.math3.linear.RealMatrix $r2, $r3;
        boolean $z0;
        double $d0;
        org.apache.commons.math3.linear.SingularValueDecomposition$1 $r4;

        r0 := @this: org.apache.commons.math3.linear.SingularValueDecomposition$Solver;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: org.apache.commons.math3.linear.RealMatrix;

        $r3 := @parameter2: org.apache.commons.math3.linear.RealMatrix;

        $z0 := @parameter3: boolean;

        $d0 := @parameter4: double;

        $r4 := @parameter5: org.apache.commons.math3.linear.SingularValueDecomposition$1;

        specialinvoke r0.<org.apache.commons.math3.linear.SingularValueDecomposition$Solver: void <init>(double[],org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RealMatrix,boolean,double)>($r1, $r2, $r3, $z0, $d0);

        return;
    }
    public org.apache.commons.math3.linear.RealMatrix getInverse()
    {
        org.apache.commons.math3.linear.SingularValueDecomposition$Solver r0;
        org.apache.commons.math3.linear.RealMatrix r1;

        r0 := @this: org.apache.commons.math3.linear.SingularValueDecomposition$Solver;

        r1 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition$Solver: org.apache.commons.math3.linear.RealMatrix pseudoInverse>;

        return r1;
    }
    public boolean isNonSingular()
    {
        org.apache.commons.math3.linear.SingularValueDecomposition$Solver r0;
        boolean z0;

        r0 := @this: org.apache.commons.math3.linear.SingularValueDecomposition$Solver;

        z0 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition$Solver: boolean nonSingular>;

        return z0;
    }
    public org.apache.commons.math3.linear.RealMatrix solve(org.apache.commons.math3.linear.RealMatrix)
    {
        org.apache.commons.math3.linear.SingularValueDecomposition$Solver r0;
        org.apache.commons.math3.linear.RealMatrix $r1, $r2;

        r0 := @this: org.apache.commons.math3.linear.SingularValueDecomposition$Solver;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        $r2 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition$Solver: org.apache.commons.math3.linear.RealMatrix pseudoInverse>;

        $r1 = interfaceinvoke $r2.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>($r1);

        return $r1;
    }
    public org.apache.commons.math3.linear.RealVector solve(org.apache.commons.math3.linear.RealVector)
    {
        org.apache.commons.math3.linear.SingularValueDecomposition$Solver r0;
        org.apache.commons.math3.linear.RealVector $r1;
        org.apache.commons.math3.linear.RealMatrix $r2;

        r0 := @this: org.apache.commons.math3.linear.SingularValueDecomposition$Solver;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealVector;

        $r2 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition$Solver: org.apache.commons.math3.linear.RealMatrix pseudoInverse>;

        $r1 = interfaceinvoke $r2.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealVector operate(org.apache.commons.math3.linear.RealVector)>($r1);

        return $r1;
    }
