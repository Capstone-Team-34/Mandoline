org.apache.commons.math3.linear.MatrixUtils extends java.lang.Object
public static final org.apache.commons.math3.linear.RealMatrixFormat DEFAULT_FORMAT
public static final org.apache.commons.math3.linear.RealMatrixFormat OCTAVE_FORMAT
    static void <clinit>()
    {
        org.apache.commons.math3.linear.RealMatrixFormat $r0;

        $r0 = staticinvoke <org.apache.commons.math3.linear.RealMatrixFormat: org.apache.commons.math3.linear.RealMatrixFormat getInstance()>();

        <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrixFormat DEFAULT_FORMAT> = $r0;

        $r0 = new org.apache.commons.math3.linear.RealMatrixFormat;

        specialinvoke $r0.<org.apache.commons.math3.linear.RealMatrixFormat: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("[", "]", "", "", "; ", ", ");

        <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrixFormat OCTAVE_FORMAT> = $r0;

        return;
    }
    private void <init>()
    {
        org.apache.commons.math3.linear.MatrixUtils r0;

        r0 := @this: org.apache.commons.math3.linear.MatrixUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static org.apache.commons.math3.linear.Array2DRowRealMatrix bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)
    {
        org.apache.commons.math3.linear.FieldMatrix r0;
        org.apache.commons.math3.linear.MatrixUtils$BigFractionMatrixConverter r1;
        org.apache.commons.math3.linear.Array2DRowRealMatrix $r2;

        r0 := @parameter0: org.apache.commons.math3.linear.FieldMatrix;

        r1 = new org.apache.commons.math3.linear.MatrixUtils$BigFractionMatrixConverter;

        specialinvoke r1.<org.apache.commons.math3.linear.MatrixUtils$BigFractionMatrixConverter: void <init>()>();

        interfaceinvoke r0.<org.apache.commons.math3.linear.FieldMatrix: org.apache.commons.math3.FieldElement walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)>(r1);

        $r2 = virtualinvoke r1.<org.apache.commons.math3.linear.MatrixUtils$BigFractionMatrixConverter: org.apache.commons.math3.linear.Array2DRowRealMatrix getConvertedMatrix()>();

        return $r2;
    }
    public static org.apache.commons.math3.linear.RealMatrix blockInverse(org.apache.commons.math3.linear.RealMatrix, int)
    {
        org.apache.commons.math3.linear.RealMatrix $r0, $r4, $r5, $r6, $r7, $r10, $r11;
        int $i0, i1, $i2, $i3;
        org.apache.commons.math3.linear.SingularValueDecomposition r1;
        org.apache.commons.math3.linear.Array2DRowRealMatrix r2;
        org.apache.commons.math3.linear.NonSquareMatrixException $r3;
        org.apache.commons.math3.linear.DecompositionSolver $r8;
        boolean $z0;
        org.apache.commons.math3.linear.SingularMatrixException $r9;
        double[][] $r12;

        $r0 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        $i0 := @parameter1: int;

        $i2 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        i1 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        if i1 == $i2 goto label1;

        $r3 = new org.apache.commons.math3.linear.NonSquareMatrixException;

        $i0 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $i2 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        specialinvoke $r3.<org.apache.commons.math3.linear.NonSquareMatrixException: void <init>(int,int)>($i0, $i2);

        throw $r3;

     label1:
        i1 = $i0 + 1;

        $r4 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix getSubMatrix(int,int,int,int)>(0, $i0, 0, $i0);

        $i3 = $i2 + -1;

        $r5 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix getSubMatrix(int,int,int,int)>(0, $i0, i1, $i3);

        $i3 = $i2 + -1;

        $r6 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix getSubMatrix(int,int,int,int)>(i1, $i3, 0, $i0);

        $i0 = $i2 + -1;

        $i3 = $i2 + -1;

        $r7 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix getSubMatrix(int,int,int,int)>(i1, $i0, i1, $i3);

        r1 = new org.apache.commons.math3.linear.SingularValueDecomposition;

        specialinvoke r1.<org.apache.commons.math3.linear.SingularValueDecomposition: void <init>(org.apache.commons.math3.linear.RealMatrix)>($r4);

        $r8 = virtualinvoke r1.<org.apache.commons.math3.linear.SingularValueDecomposition: org.apache.commons.math3.linear.DecompositionSolver getSolver()>();

        $z0 = interfaceinvoke $r8.<org.apache.commons.math3.linear.DecompositionSolver: boolean isNonSingular()>();

        if $z0 != 0 goto label2;

        $r9 = new org.apache.commons.math3.linear.SingularMatrixException;

        specialinvoke $r9.<org.apache.commons.math3.linear.SingularMatrixException: void <init>()>();

        throw $r9;

     label2:
        $r10 = interfaceinvoke $r8.<org.apache.commons.math3.linear.DecompositionSolver: org.apache.commons.math3.linear.RealMatrix getInverse()>();

        r1 = new org.apache.commons.math3.linear.SingularValueDecomposition;

        specialinvoke r1.<org.apache.commons.math3.linear.SingularValueDecomposition: void <init>(org.apache.commons.math3.linear.RealMatrix)>($r7);

        $r8 = virtualinvoke r1.<org.apache.commons.math3.linear.SingularValueDecomposition: org.apache.commons.math3.linear.DecompositionSolver getSolver()>();

        $z0 = interfaceinvoke $r8.<org.apache.commons.math3.linear.DecompositionSolver: boolean isNonSingular()>();

        if $z0 != 0 goto label3;

        $r9 = new org.apache.commons.math3.linear.SingularMatrixException;

        specialinvoke $r9.<org.apache.commons.math3.linear.SingularMatrixException: void <init>()>();

        throw $r9;

     label3:
        $r0 = interfaceinvoke $r8.<org.apache.commons.math3.linear.DecompositionSolver: org.apache.commons.math3.linear.RealMatrix getInverse()>();

        $r11 = interfaceinvoke $r5.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>($r0);

        $r11 = interfaceinvoke $r11.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>($r6);

        $r4 = interfaceinvoke $r4.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix subtract(org.apache.commons.math3.linear.RealMatrix)>($r11);

        r1 = new org.apache.commons.math3.linear.SingularValueDecomposition;

        specialinvoke r1.<org.apache.commons.math3.linear.SingularValueDecomposition: void <init>(org.apache.commons.math3.linear.RealMatrix)>($r4);

        $r8 = virtualinvoke r1.<org.apache.commons.math3.linear.SingularValueDecomposition: org.apache.commons.math3.linear.DecompositionSolver getSolver()>();

        $z0 = interfaceinvoke $r8.<org.apache.commons.math3.linear.DecompositionSolver: boolean isNonSingular()>();

        if $z0 != 0 goto label4;

        $r9 = new org.apache.commons.math3.linear.SingularMatrixException;

        specialinvoke $r9.<org.apache.commons.math3.linear.SingularMatrixException: void <init>()>();

        throw $r9;

     label4:
        $r4 = interfaceinvoke $r8.<org.apache.commons.math3.linear.DecompositionSolver: org.apache.commons.math3.linear.RealMatrix getInverse()>();

        $r11 = interfaceinvoke $r6.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>($r10);

        $r11 = interfaceinvoke $r11.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>($r5);

        $r7 = interfaceinvoke $r7.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix subtract(org.apache.commons.math3.linear.RealMatrix)>($r11);

        r1 = new org.apache.commons.math3.linear.SingularValueDecomposition;

        specialinvoke r1.<org.apache.commons.math3.linear.SingularValueDecomposition: void <init>(org.apache.commons.math3.linear.RealMatrix)>($r7);

        $r8 = virtualinvoke r1.<org.apache.commons.math3.linear.SingularValueDecomposition: org.apache.commons.math3.linear.DecompositionSolver getSolver()>();

        $z0 = interfaceinvoke $r8.<org.apache.commons.math3.linear.DecompositionSolver: boolean isNonSingular()>();

        if $z0 != 0 goto label5;

        $r9 = new org.apache.commons.math3.linear.SingularMatrixException;

        specialinvoke $r9.<org.apache.commons.math3.linear.SingularMatrixException: void <init>()>();

        throw $r9;

     label5:
        $r7 = interfaceinvoke $r8.<org.apache.commons.math3.linear.DecompositionSolver: org.apache.commons.math3.linear.RealMatrix getInverse()>();

        $r5 = interfaceinvoke $r10.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>($r5);

        $r5 = interfaceinvoke $r5.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>($r7);

        $r5 = interfaceinvoke $r5.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix scalarMultiply(double)>(-1.0);

        $r0 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>($r6);

        $r0 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>($r4);

        $r0 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix scalarMultiply(double)>(-1.0);

        r2 = new org.apache.commons.math3.linear.Array2DRowRealMatrix;

        specialinvoke r2.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void <init>(int,int)>($i2, $i2);

        $r12 = interfaceinvoke $r4.<org.apache.commons.math3.linear.RealMatrix: double[][] getData()>();

        interfaceinvoke r2.<org.apache.commons.math3.linear.RealMatrix: void setSubMatrix(double[][],int,int)>($r12, 0, 0);

        $r12 = interfaceinvoke $r5.<org.apache.commons.math3.linear.RealMatrix: double[][] getData()>();

        interfaceinvoke r2.<org.apache.commons.math3.linear.RealMatrix: void setSubMatrix(double[][],int,int)>($r12, 0, i1);

        $r12 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: double[][] getData()>();

        interfaceinvoke r2.<org.apache.commons.math3.linear.RealMatrix: void setSubMatrix(double[][],int,int)>($r12, i1, 0);

        $r12 = interfaceinvoke $r7.<org.apache.commons.math3.linear.RealMatrix: double[][] getData()>();

        interfaceinvoke r2.<org.apache.commons.math3.linear.RealMatrix: void setSubMatrix(double[][],int,int)>($r12, i1, i1);

        return r2;
    }
    public static void checkAdditionCompatible(org.apache.commons.math3.linear.AnyMatrix, org.apache.commons.math3.linear.AnyMatrix) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException
    {
        org.apache.commons.math3.linear.AnyMatrix $r0, $r1;
        int $i0, $i1, $i2, $i3;
        org.apache.commons.math3.linear.MatrixDimensionMismatchException $r2;

        $r0 := @parameter0: org.apache.commons.math3.linear.AnyMatrix;

        $r1 := @parameter1: org.apache.commons.math3.linear.AnyMatrix;

        $i0 = interfaceinvoke $r0.<org.apache.commons.math3.linear.AnyMatrix: int getRowDimension()>();

        $i1 = interfaceinvoke $r1.<org.apache.commons.math3.linear.AnyMatrix: int getRowDimension()>();

        if $i0 != $i1 goto label1;

        $i0 = interfaceinvoke $r0.<org.apache.commons.math3.linear.AnyMatrix: int getColumnDimension()>();

        $i1 = interfaceinvoke $r1.<org.apache.commons.math3.linear.AnyMatrix: int getColumnDimension()>();

        if $i0 == $i1 goto label2;

     label1:
        $r2 = new org.apache.commons.math3.linear.MatrixDimensionMismatchException;

        $i0 = interfaceinvoke $r0.<org.apache.commons.math3.linear.AnyMatrix: int getRowDimension()>();

        $i1 = interfaceinvoke $r0.<org.apache.commons.math3.linear.AnyMatrix: int getColumnDimension()>();

        $i2 = interfaceinvoke $r1.<org.apache.commons.math3.linear.AnyMatrix: int getRowDimension()>();

        $i3 = interfaceinvoke $r1.<org.apache.commons.math3.linear.AnyMatrix: int getColumnDimension()>();

        specialinvoke $r2.<org.apache.commons.math3.linear.MatrixDimensionMismatchException: void <init>(int,int,int,int)>($i0, $i1, $i2, $i3);

        throw $r2;

     label2:
        return;
    }
    public static void checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix, int) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.AnyMatrix $r0;
        int $i0, $i1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r1;
        org.apache.commons.math3.exception.OutOfRangeException $r2;
        java.lang.Integer $r3, $r4, $r5;

        $r0 := @parameter0: org.apache.commons.math3.linear.AnyMatrix;

        $i0 := @parameter1: int;

        if $i0 < 0 goto label1;

        $i1 = interfaceinvoke $r0.<org.apache.commons.math3.linear.AnyMatrix: int getColumnDimension()>();

        if $i0 < $i1 goto label2;

     label1:
        $r2 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r1 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats COLUMN_INDEX>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $i0 = interfaceinvoke $r0.<org.apache.commons.math3.linear.AnyMatrix: int getColumnDimension()>();

        $i0 = $i0 + -1;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r2.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)>($r1, $r3, $r4, $r5);

        throw $r2;

     label2:
        return;
    }
    public static void checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix, int, int) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.AnyMatrix $r0;
        int $i0, $i1;

        $r0 := @parameter0: org.apache.commons.math3.linear.AnyMatrix;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)>($r0, $i0);

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)>($r0, $i1);

        return;
    }
    public static void checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix, org.apache.commons.math3.linear.AnyMatrix) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.AnyMatrix $r0, $r1;
        int $i0, $i1;
        org.apache.commons.math3.exception.DimensionMismatchException $r2;

        $r0 := @parameter0: org.apache.commons.math3.linear.AnyMatrix;

        $r1 := @parameter1: org.apache.commons.math3.linear.AnyMatrix;

        $i0 = interfaceinvoke $r0.<org.apache.commons.math3.linear.AnyMatrix: int getColumnDimension()>();

        $i1 = interfaceinvoke $r1.<org.apache.commons.math3.linear.AnyMatrix: int getRowDimension()>();

        if $i0 == $i1 goto label1;

        $r2 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i0 = interfaceinvoke $r0.<org.apache.commons.math3.linear.AnyMatrix: int getColumnDimension()>();

        $i1 = interfaceinvoke $r1.<org.apache.commons.math3.linear.AnyMatrix: int getRowDimension()>();

        specialinvoke $r2.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i0, $i1);

        throw $r2;

     label1:
        return;
    }
    public static void checkRowIndex(org.apache.commons.math3.linear.AnyMatrix, int) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.AnyMatrix $r0;
        int $i0, $i1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r1;
        org.apache.commons.math3.exception.OutOfRangeException $r2;
        java.lang.Integer $r3, $r4, $r5;

        $r0 := @parameter0: org.apache.commons.math3.linear.AnyMatrix;

        $i0 := @parameter1: int;

        if $i0 < 0 goto label1;

        $i1 = interfaceinvoke $r0.<org.apache.commons.math3.linear.AnyMatrix: int getRowDimension()>();

        if $i0 < $i1 goto label2;

     label1:
        $r2 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r1 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats ROW_INDEX>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $i0 = interfaceinvoke $r0.<org.apache.commons.math3.linear.AnyMatrix: int getRowDimension()>();

        $i0 = $i0 + -1;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r2.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)>($r1, $r3, $r4, $r5);

        throw $r2;

     label2:
        return;
    }
    public static void checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix, int, int, int, int) throws org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.AnyMatrix $r0;
        int $i0, $i1, $i2, $i3;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        java.lang.Integer $r3, $r4;

        $r0 := @parameter0: org.apache.commons.math3.linear.AnyMatrix;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)>($r0, $i0);

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)>($r0, $i1);

        if $i1 >= $i0 goto label1;

        $r1 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INITIAL_ROW_AFTER_FINAL_ROW>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r1.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r2, $r3, $r4, 0);

        throw $r1;

     label1:
        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)>($r0, $i2);

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)>($r0, $i3);

        if $i3 >= $i2 goto label2;

        $r1 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INITIAL_COLUMN_AFTER_FINAL_COLUMN>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        specialinvoke $r1.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r2, $r3, $r4, 0);

        throw $r1;

     label2:
        return;
    }
    public static void checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix, int[], int[]) throws org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.AnyMatrix $r0;
        int[] $r1, $r2;
        int i0, i1, i2;
        org.apache.commons.math3.exception.NullArgumentException $r3;
        org.apache.commons.math3.exception.NoDataException $r4;
        org.apache.commons.math3.exception.util.LocalizedFormats $r5;

        $r0 := @parameter0: org.apache.commons.math3.linear.AnyMatrix;

        $r1 := @parameter1: int[];

        $r2 := @parameter2: int[];

        if $r1 != null goto label1;

        $r3 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r3.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r3;

     label1:
        if $r2 != null goto label2;

        $r3 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r3.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r3;

     label2:
        i0 = lengthof $r1;

        if i0 != 0 goto label3;

        $r4 = new org.apache.commons.math3.exception.NoDataException;

        $r5 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats EMPTY_SELECTED_ROW_INDEX_ARRAY>;

        specialinvoke $r4.<org.apache.commons.math3.exception.NoDataException: void <init>(org.apache.commons.math3.exception.util.Localizable)>($r5);

        throw $r4;

     label3:
        i0 = lengthof $r2;

        if i0 != 0 goto label4;

        $r4 = new org.apache.commons.math3.exception.NoDataException;

        $r5 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats EMPTY_SELECTED_COLUMN_INDEX_ARRAY>;

        specialinvoke $r4.<org.apache.commons.math3.exception.NoDataException: void <init>(org.apache.commons.math3.exception.util.Localizable)>($r5);

        throw $r4;

     label4:
        i1 = lengthof $r1;

        i2 = 0;

     label5:
        if i2 >= i1 goto label6;

        i0 = $r1[i2];

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)>($r0, i0);

        i2 = i2 + 1;

        goto label5;

     label6:
        i1 = lengthof $r2;

        i2 = 0;

     label7:
        if i2 >= i1 goto label8;

        i0 = $r2[i2];

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)>($r0, i0);

        i2 = i2 + 1;

        goto label7;

     label8:
        return;
    }
    public static void checkSubtractionCompatible(org.apache.commons.math3.linear.AnyMatrix, org.apache.commons.math3.linear.AnyMatrix) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException
    {
        org.apache.commons.math3.linear.AnyMatrix $r0, $r1;
        int $i0, $i1, $i2, $i3;
        org.apache.commons.math3.linear.MatrixDimensionMismatchException $r2;

        $r0 := @parameter0: org.apache.commons.math3.linear.AnyMatrix;

        $r1 := @parameter1: org.apache.commons.math3.linear.AnyMatrix;

        $i0 = interfaceinvoke $r0.<org.apache.commons.math3.linear.AnyMatrix: int getRowDimension()>();

        $i1 = interfaceinvoke $r1.<org.apache.commons.math3.linear.AnyMatrix: int getRowDimension()>();

        if $i0 != $i1 goto label1;

        $i0 = interfaceinvoke $r0.<org.apache.commons.math3.linear.AnyMatrix: int getColumnDimension()>();

        $i1 = interfaceinvoke $r1.<org.apache.commons.math3.linear.AnyMatrix: int getColumnDimension()>();

        if $i0 == $i1 goto label2;

     label1:
        $r2 = new org.apache.commons.math3.linear.MatrixDimensionMismatchException;

        $i0 = interfaceinvoke $r0.<org.apache.commons.math3.linear.AnyMatrix: int getRowDimension()>();

        $i1 = interfaceinvoke $r0.<org.apache.commons.math3.linear.AnyMatrix: int getColumnDimension()>();

        $i2 = interfaceinvoke $r1.<org.apache.commons.math3.linear.AnyMatrix: int getRowDimension()>();

        $i3 = interfaceinvoke $r1.<org.apache.commons.math3.linear.AnyMatrix: int getColumnDimension()>();

        specialinvoke $r2.<org.apache.commons.math3.linear.MatrixDimensionMismatchException: void <init>(int,int,int,int)>($i0, $i1, $i2, $i3);

        throw $r2;

     label2:
        return;
    }
    public static void checkSymmetric(org.apache.commons.math3.linear.RealMatrix, double)
    {
        org.apache.commons.math3.linear.RealMatrix $r0;
        double $d0;

        $r0 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        $d0 := @parameter1: double;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: boolean isSymmetricInternal(org.apache.commons.math3.linear.RealMatrix,double,boolean)>($r0, $d0, 1);

        return;
    }
    public static org.apache.commons.math3.linear.FieldMatrix createColumnFieldMatrix(org.apache.commons.math3.FieldElement[]) throws org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.FieldElement[] r0;
        int i0, i1;
        org.apache.commons.math3.exception.NullArgumentException $r1;
        org.apache.commons.math3.exception.NoDataException $r2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3;
        org.apache.commons.math3.FieldElement $r4;
        org.apache.commons.math3.Field $r5;
        org.apache.commons.math3.linear.FieldMatrix $r6;

        r0 := @parameter0: org.apache.commons.math3.FieldElement[];

        if r0 != null goto label1;

        $r1 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r1.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r1;

     label1:
        i0 = lengthof r0;

        if i0 != 0 goto label2;

        $r2 = new org.apache.commons.math3.exception.NoDataException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats AT_LEAST_ONE_ROW>;

        specialinvoke $r2.<org.apache.commons.math3.exception.NoDataException: void <init>(org.apache.commons.math3.exception.util.Localizable)>($r3);

        throw $r2;

     label2:
        $r4 = r0[0];

        $r5 = interfaceinvoke $r4.<org.apache.commons.math3.FieldElement: org.apache.commons.math3.Field getField()>();

        $r6 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.FieldMatrix createFieldMatrix(org.apache.commons.math3.Field,int,int)>($r5, i0, 1);

        i1 = 0;

     label3:
        if i1 >= i0 goto label4;

        $r4 = r0[i1];

        interfaceinvoke $r6.<org.apache.commons.math3.linear.FieldMatrix: void setEntry(int,int,org.apache.commons.math3.FieldElement)>(i1, 0, $r4);

        i1 = i1 + 1;

        goto label3;

     label4:
        return $r6;
    }
    public static org.apache.commons.math3.linear.RealMatrix createColumnRealMatrix(double[]) throws org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.NullArgumentException
    {
        double[] $r0;
        int i0, i1;
        double $d0;
        org.apache.commons.math3.linear.RealMatrix $r1;
        org.apache.commons.math3.exception.NullArgumentException $r2;

        $r0 := @parameter0: double[];

        if $r0 != null goto label1;

        $r2 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r2.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r2;

     label1:
        i0 = lengthof $r0;

        $r1 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix createRealMatrix(int,int)>(i0, 1);

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        $d0 = $r0[i1];

        interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: void setEntry(int,int,double)>(i1, 0, $d0);

        i1 = i1 + 1;

        goto label2;

     label3:
        return $r1;
    }
    public static org.apache.commons.math3.linear.FieldMatrix createFieldDiagonalMatrix(org.apache.commons.math3.FieldElement[])
    {
        org.apache.commons.math3.FieldElement[] r0;
        int $i0, $i1;
        org.apache.commons.math3.FieldElement $r1;
        org.apache.commons.math3.Field $r2;
        org.apache.commons.math3.linear.FieldMatrix $r3;

        r0 := @parameter0: org.apache.commons.math3.FieldElement[];

        $r1 = r0[0];

        $r2 = interfaceinvoke $r1.<org.apache.commons.math3.FieldElement: org.apache.commons.math3.Field getField()>();

        $i0 = lengthof r0;

        $i1 = lengthof r0;

        $r3 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.FieldMatrix createFieldMatrix(org.apache.commons.math3.Field,int,int)>($r2, $i0, $i1);

        $i0 = 0;

     label1:
        $i1 = lengthof r0;

        if $i0 >= $i1 goto label2;

        $r1 = r0[$i0];

        interfaceinvoke $r3.<org.apache.commons.math3.linear.FieldMatrix: void setEntry(int,int,org.apache.commons.math3.FieldElement)>($i0, $i0, $r1);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return $r3;
    }
    public static org.apache.commons.math3.linear.FieldMatrix createFieldIdentityMatrix(org.apache.commons.math3.Field, int)
    {
        org.apache.commons.math3.Field r0;
        int $i0, i1;
        org.apache.commons.math3.FieldElement[] r1;
        org.apache.commons.math3.linear.Array2DRowFieldMatrix $r2;
        java.lang.Object $r3;
        org.apache.commons.math3.FieldElement r4, r5;
        java.lang.Object[][] $r6;
        org.apache.commons.math3.FieldElement[][] r7;

        r0 := @parameter0: org.apache.commons.math3.Field;

        $i0 := @parameter1: int;

        $r3 = interfaceinvoke r0.<org.apache.commons.math3.Field: java.lang.Object getZero()>();

        r4 = (org.apache.commons.math3.FieldElement) $r3;

        $r3 = interfaceinvoke r0.<org.apache.commons.math3.Field: java.lang.Object getOne()>();

        r5 = (org.apache.commons.math3.FieldElement) $r3;

        $r6 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[][] buildArray(org.apache.commons.math3.Field,int,int)>(r0, $i0, $i0);

        r7 = (org.apache.commons.math3.FieldElement[][]) $r6;

        i1 = 0;

     label1:
        if i1 >= $i0 goto label2;

        r1 = r7[i1];

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>(r1, r4);

        r1[i1] = r5;

        i1 = i1 + 1;

        goto label1;

     label2:
        $r2 = new org.apache.commons.math3.linear.Array2DRowFieldMatrix;

        specialinvoke $r2.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: void <init>(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][],boolean)>(r0, r7, 0);

        return $r2;
    }
    public static org.apache.commons.math3.linear.FieldMatrix createFieldMatrix(org.apache.commons.math3.Field, int, int)
    {
        org.apache.commons.math3.Field r0;
        int $i0, $i1, $i2;
        org.apache.commons.math3.linear.Array2DRowFieldMatrix $r1;
        org.apache.commons.math3.linear.BlockFieldMatrix $r2;

        r0 := @parameter0: org.apache.commons.math3.Field;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 = $i0 * $i1;

        if $i2 > 4096 goto label1;

        $r1 = new org.apache.commons.math3.linear.Array2DRowFieldMatrix;

        specialinvoke $r1.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: void <init>(org.apache.commons.math3.Field,int,int)>(r0, $i0, $i1);

        return $r1;

     label1:
        $r2 = new org.apache.commons.math3.linear.BlockFieldMatrix;

        specialinvoke $r2.<org.apache.commons.math3.linear.BlockFieldMatrix: void <init>(org.apache.commons.math3.Field,int,int)>(r0, $i0, $i1);

        return $r2;
    }
    public static org.apache.commons.math3.linear.FieldMatrix createFieldMatrix(org.apache.commons.math3.FieldElement[][]) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.FieldElement[][] r0;
        org.apache.commons.math3.FieldElement[] $r1;
        org.apache.commons.math3.exception.NullArgumentException $r2;
        int $i0, $i1;
        org.apache.commons.math3.linear.Array2DRowFieldMatrix $r3;
        org.apache.commons.math3.linear.BlockFieldMatrix $r4;

        r0 := @parameter0: org.apache.commons.math3.FieldElement[][];

        if r0 == null goto label1;

        $r1 = r0[0];

        if $r1 != null goto label2;

     label1:
        $r2 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r2.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r2;

     label2:
        $i0 = lengthof r0;

        $r1 = r0[0];

        $i1 = lengthof $r1;

        $i0 = $i0 * $i1;

        if $i0 > 4096 goto label3;

        $r3 = new org.apache.commons.math3.linear.Array2DRowFieldMatrix;

        specialinvoke $r3.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: void <init>(org.apache.commons.math3.FieldElement[][])>(r0);

        return $r3;

     label3:
        $r4 = new org.apache.commons.math3.linear.BlockFieldMatrix;

        specialinvoke $r4.<org.apache.commons.math3.linear.BlockFieldMatrix: void <init>(org.apache.commons.math3.FieldElement[][])>(r0);

        return $r4;
    }
    public static org.apache.commons.math3.linear.FieldVector createFieldVector(org.apache.commons.math3.FieldElement[]) throws org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.ZeroException
    {
        org.apache.commons.math3.FieldElement[] r0;
        org.apache.commons.math3.Field $r1;
        org.apache.commons.math3.exception.NullArgumentException $r2;
        int $i0;
        org.apache.commons.math3.exception.ZeroException $r3;
        org.apache.commons.math3.exception.util.LocalizedFormats $r4;
        java.lang.Object[] $r5;
        org.apache.commons.math3.linear.ArrayFieldVector $r6;
        org.apache.commons.math3.FieldElement $r7;

        r0 := @parameter0: org.apache.commons.math3.FieldElement[];

        if r0 != null goto label1;

        $r2 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r2.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r2;

     label1:
        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

        $r3 = new org.apache.commons.math3.exception.ZeroException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT>;

        $r5 = newarray (java.lang.Object)[0];

        specialinvoke $r3.<org.apache.commons.math3.exception.ZeroException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r4, $r5);

        throw $r3;

     label2:
        $r6 = new org.apache.commons.math3.linear.ArrayFieldVector;

        $r7 = r0[0];

        $r1 = interfaceinvoke $r7.<org.apache.commons.math3.FieldElement: org.apache.commons.math3.Field getField()>();

        specialinvoke $r6.<org.apache.commons.math3.linear.ArrayFieldVector: void <init>(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[],boolean)>($r1, r0, 1);

        return $r6;
    }
    public static org.apache.commons.math3.linear.RealMatrix createRealDiagonalMatrix(double[])
    {
        double[] $r0;
        int $i0, $i1;
        org.apache.commons.math3.linear.RealMatrix $r1;
        double $d0;

        $r0 := @parameter0: double[];

        $i1 = lengthof $r0;

        $i0 = lengthof $r0;

        $r1 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix createRealMatrix(int,int)>($i1, $i0);

        $i0 = 0;

     label1:
        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label2;

        $d0 = $r0[$i0];

        interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: void setEntry(int,int,double)>($i0, $i0, $d0);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return $r1;
    }
    public static org.apache.commons.math3.linear.RealMatrix createRealIdentityMatrix(int)
    {
        int $i0, i1;
        org.apache.commons.math3.linear.RealMatrix $r0;

        $i0 := @parameter0: int;

        $r0 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix createRealMatrix(int,int)>($i0, $i0);

        i1 = 0;

     label1:
        if i1 >= $i0 goto label2;

        interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: void setEntry(int,int,double)>(i1, i1, 1.0);

        i1 = i1 + 1;

        goto label1;

     label2:
        return $r0;
    }
    public static org.apache.commons.math3.linear.RealMatrix createRealMatrix(int, int)
    {
        int $i0, $i1, $i2;
        org.apache.commons.math3.linear.Array2DRowRealMatrix $r0;
        org.apache.commons.math3.linear.BlockRealMatrix $r1;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 = $i0 * $i1;

        if $i2 > 4096 goto label1;

        $r0 = new org.apache.commons.math3.linear.Array2DRowRealMatrix;

        specialinvoke $r0.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void <init>(int,int)>($i0, $i1);

        return $r0;

     label1:
        $r1 = new org.apache.commons.math3.linear.BlockRealMatrix;

        specialinvoke $r1.<org.apache.commons.math3.linear.BlockRealMatrix: void <init>(int,int)>($i0, $i1);

        return $r1;
    }
    public static org.apache.commons.math3.linear.RealMatrix createRealMatrix(double[][]) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NoDataException
    {
        double[][] $r0;
        double[] $r1;
        org.apache.commons.math3.exception.NullArgumentException $r2;
        int $i0, $i1;
        org.apache.commons.math3.linear.Array2DRowRealMatrix $r3;
        org.apache.commons.math3.linear.BlockRealMatrix $r4;

        $r0 := @parameter0: double[][];

        if $r0 == null goto label1;

        $r1 = $r0[0];

        if $r1 != null goto label2;

     label1:
        $r2 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r2.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r2;

     label2:
        $i0 = lengthof $r0;

        $r1 = $r0[0];

        $i1 = lengthof $r1;

        $i0 = $i0 * $i1;

        if $i0 > 4096 goto label3;

        $r3 = new org.apache.commons.math3.linear.Array2DRowRealMatrix;

        specialinvoke $r3.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void <init>(double[][])>($r0);

        return $r3;

     label3:
        $r4 = new org.apache.commons.math3.linear.BlockRealMatrix;

        specialinvoke $r4.<org.apache.commons.math3.linear.BlockRealMatrix: void <init>(double[][])>($r0);

        return $r4;
    }
    public static org.apache.commons.math3.linear.RealVector createRealVector(double[]) throws org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.NullArgumentException
    {
        double[] $r0;
        org.apache.commons.math3.exception.NullArgumentException $r1;
        org.apache.commons.math3.linear.ArrayRealVector $r2;

        $r0 := @parameter0: double[];

        if $r0 != null goto label1;

        $r1 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r1.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r1;

     label1:
        $r2 = new org.apache.commons.math3.linear.ArrayRealVector;

        specialinvoke $r2.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(double[],boolean)>($r0, 1);

        return $r2;
    }
    public static org.apache.commons.math3.linear.FieldMatrix createRowFieldMatrix(org.apache.commons.math3.FieldElement[]) throws org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.FieldElement[] r0;
        int i0, i1;
        org.apache.commons.math3.exception.NullArgumentException $r1;
        org.apache.commons.math3.exception.NoDataException $r2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3;
        org.apache.commons.math3.FieldElement $r4;
        org.apache.commons.math3.Field $r5;
        org.apache.commons.math3.linear.FieldMatrix $r6;

        r0 := @parameter0: org.apache.commons.math3.FieldElement[];

        if r0 != null goto label1;

        $r1 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r1.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r1;

     label1:
        i0 = lengthof r0;

        if i0 != 0 goto label2;

        $r2 = new org.apache.commons.math3.exception.NoDataException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats AT_LEAST_ONE_COLUMN>;

        specialinvoke $r2.<org.apache.commons.math3.exception.NoDataException: void <init>(org.apache.commons.math3.exception.util.Localizable)>($r3);

        throw $r2;

     label2:
        $r4 = r0[0];

        $r5 = interfaceinvoke $r4.<org.apache.commons.math3.FieldElement: org.apache.commons.math3.Field getField()>();

        $r6 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.FieldMatrix createFieldMatrix(org.apache.commons.math3.Field,int,int)>($r5, 1, i0);

        i1 = 0;

     label3:
        if i1 >= i0 goto label4;

        $r4 = r0[i1];

        interfaceinvoke $r6.<org.apache.commons.math3.linear.FieldMatrix: void setEntry(int,int,org.apache.commons.math3.FieldElement)>(0, i1, $r4);

        i1 = i1 + 1;

        goto label3;

     label4:
        return $r6;
    }
    public static org.apache.commons.math3.linear.RealMatrix createRowRealMatrix(double[]) throws org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.NullArgumentException
    {
        double[] $r0;
        int i0, i1;
        double $d0;
        org.apache.commons.math3.linear.RealMatrix $r1;
        org.apache.commons.math3.exception.NullArgumentException $r2;

        $r0 := @parameter0: double[];

        if $r0 != null goto label1;

        $r2 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r2.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r2;

     label1:
        i0 = lengthof $r0;

        $r1 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix createRealMatrix(int,int)>(1, i0);

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        $d0 = $r0[i1];

        interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: void setEntry(int,int,double)>(0, i1, $d0);

        i1 = i1 + 1;

        goto label2;

     label3:
        return $r1;
    }
    public static void deserializeRealMatrix(java.lang.Object, java.lang.String, java.io.ObjectInputStream) throws java.lang.ClassNotFoundException, java.io.IOException
    {
        java.lang.Object $r0, $r9;
        java.lang.String $r1;
        java.io.ObjectInputStream $r2;
        double[] r3;
        java.lang.IllegalAccessException r4;
        org.apache.commons.math3.linear.Array2DRowRealMatrix r5;
        java.lang.NoSuchFieldException r6;
        int $i0, $i1, i2, i3;
        int[] $r7;
        java.lang.Class $r8;
        double[][] r10;
        double $d0;
        java.lang.reflect.Field $r11;
        java.io.IOException r12;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.io.ObjectInputStream;

     label01:
        $i0 = virtualinvoke $r2.<java.io.ObjectInputStream: int readInt()>();

        $i1 = virtualinvoke $r2.<java.io.ObjectInputStream: int readInt()>();

     label02:
        $r7 = newarray (int)[2];

        $r7[0] = $i0;

        $r7[1] = $i1;

        $r8 = <java.lang.Double: java.lang.Class TYPE>;

     label03:
        $r9 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r8, $r7);

     label04:
        r10 = (double[][]) $r9;

        i2 = 0;

     label05:
        if i2 >= $i0 goto label10;

        r3 = r10[i2];

        i3 = 0;

     label06:
        if i3 >= $i1 goto label09;

     label07:
        $d0 = virtualinvoke $r2.<java.io.ObjectInputStream: double readDouble()>();

     label08:
        r3[i3] = $d0;

        i3 = i3 + 1;

        goto label06;

     label09:
        i2 = i2 + 1;

        goto label05;

     label10:
        r5 = new org.apache.commons.math3.linear.Array2DRowRealMatrix;

     label11:
        specialinvoke r5.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void <init>(double[][],boolean)>(r10, 0);

        $r8 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $r11 = virtualinvoke $r8.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>($r1);

        virtualinvoke $r11.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        virtualinvoke $r11.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>($r0, r5);

     label12:
        return;

     label13:
        r6 := @caughtexception;

        r12 = new java.io.IOException;

        specialinvoke r12.<java.io.IOException: void <init>()>();

        virtualinvoke r12.<java.io.IOException: java.lang.Throwable initCause(java.lang.Throwable)>(r6);

        throw r12;

     label14:
        r4 := @caughtexception;

        r12 = new java.io.IOException;

        specialinvoke r12.<java.io.IOException: void <init>()>();

        virtualinvoke r12.<java.io.IOException: java.lang.Throwable initCause(java.lang.Throwable)>(r4);

        throw r12;

        catch java.lang.NoSuchFieldException from label01 to label02 with label13;
        catch java.lang.NoSuchFieldException from label03 to label04 with label13;
        catch java.lang.NoSuchFieldException from label07 to label08 with label13;
        catch java.lang.NoSuchFieldException from label11 to label12 with label13;
        catch java.lang.IllegalAccessException from label01 to label02 with label14;
        catch java.lang.IllegalAccessException from label03 to label04 with label14;
        catch java.lang.IllegalAccessException from label07 to label08 with label14;
        catch java.lang.IllegalAccessException from label11 to label12 with label14;
    }
    public static void deserializeRealVector(java.lang.Object, java.lang.String, java.io.ObjectInputStream) throws java.lang.ClassNotFoundException, java.io.IOException
    {
        java.lang.Object $r0;
        java.lang.String $r1;
        java.io.ObjectInputStream $r2;
        double[] r3;
        java.lang.IllegalAccessException r4;
        java.lang.NoSuchFieldException r5;
        org.apache.commons.math3.linear.ArrayRealVector r6;
        int $i0, i1;
        double $d0;
        java.lang.Class $r7;
        java.lang.reflect.Field $r8;
        java.io.IOException r9;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.io.ObjectInputStream;

     label01:
        $i0 = virtualinvoke $r2.<java.io.ObjectInputStream: int readInt()>();

     label02:
        r3 = newarray (double)[$i0];

        i1 = 0;

     label03:
        if i1 >= $i0 goto label06;

     label04:
        $d0 = virtualinvoke $r2.<java.io.ObjectInputStream: double readDouble()>();

     label05:
        r3[i1] = $d0;

        i1 = i1 + 1;

        goto label03;

     label06:
        r6 = new org.apache.commons.math3.linear.ArrayRealVector;

     label07:
        specialinvoke r6.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(double[],boolean)>(r3, 0);

        $r7 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>($r1);

        virtualinvoke $r8.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        virtualinvoke $r8.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>($r0, r6);

     label08:
        return;

     label09:
        r5 := @caughtexception;

        r9 = new java.io.IOException;

        specialinvoke r9.<java.io.IOException: void <init>()>();

        virtualinvoke r9.<java.io.IOException: java.lang.Throwable initCause(java.lang.Throwable)>(r5);

        throw r9;

     label10:
        r4 := @caughtexception;

        r9 = new java.io.IOException;

        specialinvoke r9.<java.io.IOException: void <init>()>();

        virtualinvoke r9.<java.io.IOException: java.lang.Throwable initCause(java.lang.Throwable)>(r4);

        throw r9;

        catch java.lang.NoSuchFieldException from label01 to label02 with label09;
        catch java.lang.NoSuchFieldException from label04 to label05 with label09;
        catch java.lang.NoSuchFieldException from label07 to label08 with label09;
        catch java.lang.IllegalAccessException from label01 to label02 with label10;
        catch java.lang.IllegalAccessException from label04 to label05 with label10;
        catch java.lang.IllegalAccessException from label07 to label08 with label10;
    }
    public static org.apache.commons.math3.linear.Array2DRowRealMatrix fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)
    {
        org.apache.commons.math3.linear.FieldMatrix r0;
        org.apache.commons.math3.linear.MatrixUtils$FractionMatrixConverter r1;
        org.apache.commons.math3.linear.Array2DRowRealMatrix $r2;

        r0 := @parameter0: org.apache.commons.math3.linear.FieldMatrix;

        r1 = new org.apache.commons.math3.linear.MatrixUtils$FractionMatrixConverter;

        specialinvoke r1.<org.apache.commons.math3.linear.MatrixUtils$FractionMatrixConverter: void <init>()>();

        interfaceinvoke r0.<org.apache.commons.math3.linear.FieldMatrix: org.apache.commons.math3.FieldElement walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)>(r1);

        $r2 = virtualinvoke r1.<org.apache.commons.math3.linear.MatrixUtils$FractionMatrixConverter: org.apache.commons.math3.linear.Array2DRowRealMatrix getConvertedMatrix()>();

        return $r2;
    }
    public static org.apache.commons.math3.linear.RealMatrix inverse(org.apache.commons.math3.linear.RealMatrix) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.linear.SingularMatrixException, org.apache.commons.math3.linear.NonSquareMatrixException
    {
        org.apache.commons.math3.linear.RealMatrix $r0;

        $r0 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        $r0 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix inverse(org.apache.commons.math3.linear.RealMatrix,double)>($r0, 0.0);

        return $r0;
    }
    public static org.apache.commons.math3.linear.RealMatrix inverse(org.apache.commons.math3.linear.RealMatrix, double) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.linear.SingularMatrixException, org.apache.commons.math3.linear.NonSquareMatrixException
    {
        double $d0;
        org.apache.commons.math3.linear.QRDecomposition r0;
        org.apache.commons.math3.linear.RealMatrix r1;
        boolean $z0;
        org.apache.commons.math3.linear.NonSquareMatrixException $r2;
        int $i0, $i1;
        org.apache.commons.math3.linear.DiagonalMatrix r3;
        org.apache.commons.math3.linear.DecompositionSolver $r4;

        r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        $d0 := @parameter1: double;

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r1);

        $z0 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: boolean isSquare()>();

        if $z0 != 0 goto label1;

        $r2 = new org.apache.commons.math3.linear.NonSquareMatrixException;

        $i0 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $i1 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        specialinvoke $r2.<org.apache.commons.math3.linear.NonSquareMatrixException: void <init>(int,int)>($i0, $i1);

        throw $r2;

     label1:
        $z0 = r1 instanceof org.apache.commons.math3.linear.DiagonalMatrix;

        if $z0 == 0 goto label2;

        r3 = (org.apache.commons.math3.linear.DiagonalMatrix) r1;

        r3 = virtualinvoke r3.<org.apache.commons.math3.linear.DiagonalMatrix: org.apache.commons.math3.linear.DiagonalMatrix inverse(double)>($d0);

        return r3;

     label2:
        r0 = new org.apache.commons.math3.linear.QRDecomposition;

        specialinvoke r0.<org.apache.commons.math3.linear.QRDecomposition: void <init>(org.apache.commons.math3.linear.RealMatrix,double)>(r1, $d0);

        $r4 = virtualinvoke r0.<org.apache.commons.math3.linear.QRDecomposition: org.apache.commons.math3.linear.DecompositionSolver getSolver()>();

        r1 = interfaceinvoke $r4.<org.apache.commons.math3.linear.DecompositionSolver: org.apache.commons.math3.linear.RealMatrix getInverse()>();

        return r1;
    }
    public static boolean isSymmetric(org.apache.commons.math3.linear.RealMatrix, double)
    {
        org.apache.commons.math3.linear.RealMatrix $r0;
        double $d0;
        boolean $z0;

        $r0 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        $d0 := @parameter1: double;

        $z0 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: boolean isSymmetricInternal(org.apache.commons.math3.linear.RealMatrix,double,boolean)>($r0, $d0, 0);

        return $z0;
    }
    private static boolean isSymmetricInternal(org.apache.commons.math3.linear.RealMatrix, double, boolean)
    {
        org.apache.commons.math3.linear.RealMatrix $r0;
        double $d0, $d1, $d2, $d3;
        boolean $z0;
        int $i0, $i1, i2;
        org.apache.commons.math3.linear.NonSquareMatrixException $r1;
        byte $b3;
        org.apache.commons.math3.linear.NonSymmetricMatrixException $r2;

        $r0 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        $d0 := @parameter1: double;

        $z0 := @parameter2: boolean;

        $i0 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $i1 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        if $i0 == $i1 goto label2;

        if $z0 == 0 goto label1;

        $r1 = new org.apache.commons.math3.linear.NonSquareMatrixException;

        $i1 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        specialinvoke $r1.<org.apache.commons.math3.linear.NonSquareMatrixException: void <init>(int,int)>($i0, $i1);

        throw $r1;

     label1:
        return 0;

     label2:
        $i1 = 0;

     label3:
        if $i1 >= $i0 goto label8;

        i2 = $i1 + 1;

     label4:
        if i2 >= $i0 goto label7;

        $d1 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>($i1, i2);

        $d2 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>(i2, $i1);

        $d3 = $d1 - $d2;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d3);

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d1);

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d2);

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>($d1, $d2);

        $d2 = $d2 * $d0;

        $b3 = $d3 cmpl $d2;

        if $b3 <= 0 goto label6;

        if $z0 == 0 goto label5;

        $r2 = new org.apache.commons.math3.linear.NonSymmetricMatrixException;

        specialinvoke $r2.<org.apache.commons.math3.linear.NonSymmetricMatrixException: void <init>(int,int,double)>($i1, i2, $d0);

        throw $r2;

     label5:
        return 0;

     label6:
        i2 = i2 + 1;

        goto label4;

     label7:
        $i1 = $i1 + 1;

        goto label3;

     label8:
        return 1;
    }
    public static void serializeRealMatrix(org.apache.commons.math3.linear.RealMatrix, java.io.ObjectOutputStream) throws java.io.IOException
    {
        org.apache.commons.math3.linear.RealMatrix $r0;
        java.io.ObjectOutputStream $r1;
        int $i0, $i1, i2, i3;
        double $d0;

        $r0 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        $r1 := @parameter1: java.io.ObjectOutputStream;

        $i0 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $i1 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        virtualinvoke $r1.<java.io.ObjectOutputStream: void writeInt(int)>($i0);

        virtualinvoke $r1.<java.io.ObjectOutputStream: void writeInt(int)>($i1);

        i2 = 0;

     label1:
        if i2 >= $i0 goto label4;

        i3 = 0;

     label2:
        if i3 >= $i1 goto label3;

        $d0 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>(i2, i3);

        virtualinvoke $r1.<java.io.ObjectOutputStream: void writeDouble(double)>($d0);

        i3 = i3 + 1;

        goto label2;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return;
    }
    public static void serializeRealVector(org.apache.commons.math3.linear.RealVector, java.io.ObjectOutputStream) throws java.io.IOException
    {
        org.apache.commons.math3.linear.RealVector $r0;
        java.io.ObjectOutputStream $r1;
        int $i0, i1;
        double $d0;

        $r0 := @parameter0: org.apache.commons.math3.linear.RealVector;

        $r1 := @parameter1: java.io.ObjectOutputStream;

        $i0 = virtualinvoke $r0.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        virtualinvoke $r1.<java.io.ObjectOutputStream: void writeInt(int)>($i0);

        i1 = 0;

     label1:
        if i1 >= $i0 goto label2;

        $d0 = virtualinvoke $r0.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>(i1);

        virtualinvoke $r1.<java.io.ObjectOutputStream: void writeDouble(double)>($d0);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
    public static void solveLowerTriangularSystem(org.apache.commons.math3.linear.RealMatrix, org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.MathArithmeticException, org.apache.commons.math3.linear.NonSquareMatrixException
    {
        org.apache.commons.math3.linear.RealMatrix $r0;
        org.apache.commons.math3.linear.RealVector $r1;
        double d0, $d1, $d2;
        int $i0, $i1, $i2;
        org.apache.commons.math3.exception.DimensionMismatchException $r2;
        org.apache.commons.math3.linear.NonSquareMatrixException $r3;
        byte $b3;
        org.apache.commons.math3.exception.MathArithmeticException $r4;
        org.apache.commons.math3.exception.util.LocalizedFormats $r5;
        java.lang.Object[] $r6;

        $r0 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        $r1 := @parameter1: org.apache.commons.math3.linear.RealVector;

        $i0 = 0;

        if $r0 == null goto label01;

        if $r1 == null goto label01;

        $i1 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $i2 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        if $i1 == $i2 goto label06;

     label01:
        $r2 = new org.apache.commons.math3.exception.DimensionMismatchException;

        if $r0 != null goto label04;

        $i1 = 0;

     label02:
        if $r1 != null goto label05;

     label03:
        specialinvoke $r2.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i1, $i0);

        throw $r2;

     label04:
        $i1 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        goto label02;

     label05:
        $i0 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        goto label03;

     label06:
        $i0 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        $i1 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        if $i0 == $i1 goto label07;

        $r3 = new org.apache.commons.math3.linear.NonSquareMatrixException;

        $i0 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $i1 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        specialinvoke $r3.<org.apache.commons.math3.linear.NonSquareMatrixException: void <init>(int,int)>($i0, $i1);

        throw $r3;

     label07:
        $i0 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $i1 = 0;

     label08:
        if $i1 >= $i0 goto label12;

        d0 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>($i1, $i1);

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d0);

        $d2 = <org.apache.commons.math3.util.Precision: double SAFE_MIN>;

        $b3 = $d1 cmpg $d2;

        if $b3 >= 0 goto label09;

        $r4 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r5 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats ZERO_DENOMINATOR>;

        $r6 = newarray (java.lang.Object)[0];

        specialinvoke $r4.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r5, $r6);

        throw $r4;

     label09:
        $d1 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>($i1);

        d0 = $d1 / d0;

        virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: void setEntry(int,double)>($i1, d0);

        $i2 = $i1 + 1;

     label10:
        if $i2 >= $i0 goto label11;

        $d1 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>($i2);

        $d2 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>($i2, $i1);

        $d2 = $d2 * d0;

        $d1 = $d1 - $d2;

        virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: void setEntry(int,double)>($i2, $d1);

        $i2 = $i2 + 1;

        goto label10;

     label11:
        $i1 = $i1 + 1;

        goto label08;

     label12:
        return;
    }
    public static void solveUpperTriangularSystem(org.apache.commons.math3.linear.RealMatrix, org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.MathArithmeticException, org.apache.commons.math3.linear.NonSquareMatrixException
    {
        org.apache.commons.math3.linear.RealMatrix $r0;
        org.apache.commons.math3.linear.RealVector $r1;
        double d0, $d1, $d2;
        int $i0, $i1, $i2;
        org.apache.commons.math3.exception.DimensionMismatchException $r2;
        org.apache.commons.math3.linear.NonSquareMatrixException $r3;
        byte $b3;
        org.apache.commons.math3.exception.MathArithmeticException $r4;
        org.apache.commons.math3.exception.util.LocalizedFormats $r5;
        java.lang.Object[] $r6;

        $r0 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        $r1 := @parameter1: org.apache.commons.math3.linear.RealVector;

        $i0 = 0;

        if $r0 == null goto label01;

        if $r1 == null goto label01;

        $i1 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $i2 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        if $i1 == $i2 goto label06;

     label01:
        $r2 = new org.apache.commons.math3.exception.DimensionMismatchException;

        if $r0 != null goto label04;

        $i1 = 0;

     label02:
        if $r1 != null goto label05;

     label03:
        specialinvoke $r2.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i1, $i0);

        throw $r2;

     label04:
        $i1 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        goto label02;

     label05:
        $i0 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        goto label03;

     label06:
        $i0 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        $i1 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        if $i0 == $i1 goto label07;

        $r3 = new org.apache.commons.math3.linear.NonSquareMatrixException;

        $i0 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $i1 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        specialinvoke $r3.<org.apache.commons.math3.linear.NonSquareMatrixException: void <init>(int,int)>($i0, $i1);

        throw $r3;

     label07:
        $i0 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $i0 = $i0 + -1;

     label08:
        if $i0 <= -1 goto label12;

        d0 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>($i0, $i0);

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d0);

        $d2 = <org.apache.commons.math3.util.Precision: double SAFE_MIN>;

        $b3 = $d1 cmpg $d2;

        if $b3 >= 0 goto label09;

        $r4 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r5 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats ZERO_DENOMINATOR>;

        $r6 = newarray (java.lang.Object)[0];

        specialinvoke $r4.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r5, $r6);

        throw $r4;

     label09:
        $d1 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>($i0);

        d0 = $d1 / d0;

        virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: void setEntry(int,double)>($i0, d0);

        $i1 = $i0 + -1;

     label10:
        if $i1 <= -1 goto label11;

        $d1 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>($i1);

        $d2 = interfaceinvoke $r0.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>($i1, $i0);

        $d2 = $d2 * d0;

        $d1 = $d1 - $d2;

        virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: void setEntry(int,double)>($i1, $d1);

        $i1 = $i1 + -1;

        goto label10;

     label11:
        $i0 = $i0 + -1;

        goto label08;

     label12:
        return;
    }
