org.apache.commons.math3.linear.NonSymmetricMatrixException extends org.apache.commons.math3.exception.MathIllegalArgumentException
private static final long serialVersionUID
private final int column
private final int row
private final double threshold
    public void <init>(int, int, double)
    {
        org.apache.commons.math3.linear.NonSymmetricMatrixException r0;
        int $i0, $i1;
        double $d0;
        org.apache.commons.math3.exception.util.LocalizedFormats $r1;
        java.lang.Object[] $r2;
        java.lang.Integer $r3;
        java.lang.Double $r4;

        r0 := @this: org.apache.commons.math3.linear.NonSymmetricMatrixException;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $d0 := @parameter2: double;

        $r1 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NON_SYMMETRIC_MATRIX>;

        $r2 = newarray (java.lang.Object)[3];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r2[0] = $r3;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r2[1] = $r3;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r2[2] = $r4;

        specialinvoke r0.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r1, $r2);

        r0.<org.apache.commons.math3.linear.NonSymmetricMatrixException: int row> = $i0;

        r0.<org.apache.commons.math3.linear.NonSymmetricMatrixException: int column> = $i1;

        r0.<org.apache.commons.math3.linear.NonSymmetricMatrixException: double threshold> = $d0;

        return;
    }
    public int getColumn()
    {
        org.apache.commons.math3.linear.NonSymmetricMatrixException r0;
        int i0;

        r0 := @this: org.apache.commons.math3.linear.NonSymmetricMatrixException;

        i0 = r0.<org.apache.commons.math3.linear.NonSymmetricMatrixException: int column>;

        return i0;
    }
    public int getRow()
    {
        org.apache.commons.math3.linear.NonSymmetricMatrixException r0;
        int i0;

        r0 := @this: org.apache.commons.math3.linear.NonSymmetricMatrixException;

        i0 = r0.<org.apache.commons.math3.linear.NonSymmetricMatrixException: int row>;

        return i0;
    }
    public double getThreshold()
    {
        org.apache.commons.math3.linear.NonSymmetricMatrixException r0;
        double d0;

        r0 := @this: org.apache.commons.math3.linear.NonSymmetricMatrixException;

        d0 = r0.<org.apache.commons.math3.linear.NonSymmetricMatrixException: double threshold>;

        return d0;
    }
