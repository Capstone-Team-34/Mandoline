org.apache.commons.math3.linear.SymmLQ$State extends java.lang.Object
static final double CBRT_MACH_PREC
static final double MACH_PREC
private final org.apache.commons.math3.linear.RealLinearOperator a
private final org.apache.commons.math3.linear.RealVector b
private boolean bIsNull
private double beta
private double beta1
private double bstep
private double cgnorm
private final boolean check
private double dbar
private final double delta
private double gammaZeta
private double gbar
private double gmax
private double gmin
private final boolean goodb
private boolean hasConverged
private double lqnorm
private final org.apache.commons.math3.linear.RealLinearOperator m
private final org.apache.commons.math3.linear.RealVector mb
private double minusEpsZeta
private double oldb
private org.apache.commons.math3.linear.RealVector r1
private org.apache.commons.math3.linear.RealVector r2
private double rnorm
private final double shift
private double snprod
private double tnorm
private org.apache.commons.math3.linear.RealVector wbar
private final org.apache.commons.math3.linear.RealVector xL
private org.apache.commons.math3.linear.RealVector y
private double ynorm2
    static void <clinit>()
    {
        double $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double ulp(double)>(1.0);

        <org.apache.commons.math3.linear.SymmLQ$State: double MACH_PREC> = $d0;

        $d0 = <org.apache.commons.math3.linear.SymmLQ$State: double MACH_PREC>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double cbrt(double)>($d0);

        <org.apache.commons.math3.linear.SymmLQ$State: double CBRT_MACH_PREC> = $d0;

        return;
    }
    void <init>(org.apache.commons.math3.linear.RealLinearOperator, org.apache.commons.math3.linear.RealLinearOperator, org.apache.commons.math3.linear.RealVector, boolean, double, double, boolean)
    {
        org.apache.commons.math3.linear.SymmLQ$State r0;
        org.apache.commons.math3.linear.RealLinearOperator $r1, $r2;
        boolean $z0, $z1;
        double $d0, $d1;
        org.apache.commons.math3.linear.RealVector r3;
        org.apache.commons.math3.linear.ArrayRealVector $r4;
        int $i0;

        r0 := @this: org.apache.commons.math3.linear.SymmLQ$State;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealLinearOperator;

        $r2 := @parameter1: org.apache.commons.math3.linear.RealLinearOperator;

        r3 := @parameter2: org.apache.commons.math3.linear.RealVector;

        $z0 := @parameter3: boolean;

        $d0 := @parameter4: double;

        $d1 := @parameter5: double;

        $z1 := @parameter6: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealLinearOperator a> = $r1;

        r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealLinearOperator m> = $r2;

        r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector b> = r3;

        $r4 = new org.apache.commons.math3.linear.ArrayRealVector;

        $i0 = virtualinvoke r3.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        specialinvoke $r4.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(int)>($i0);

        r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector xL> = $r4;

        r0.<org.apache.commons.math3.linear.SymmLQ$State: boolean goodb> = $z0;

        r0.<org.apache.commons.math3.linear.SymmLQ$State: double shift> = $d0;

        if $r2 != null goto label2;

     label1:
        r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector mb> = r3;

        r0.<org.apache.commons.math3.linear.SymmLQ$State: boolean hasConverged> = 0;

        r0.<org.apache.commons.math3.linear.SymmLQ$State: boolean check> = $z1;

        r0.<org.apache.commons.math3.linear.SymmLQ$State: double delta> = $d1;

        return;

     label2:
        r3 = virtualinvoke $r2.<org.apache.commons.math3.linear.RealLinearOperator: org.apache.commons.math3.linear.RealVector operate(org.apache.commons.math3.linear.RealVector)>(r3);

        goto label1;
    }
    private static void checkSymmetry(org.apache.commons.math3.linear.RealLinearOperator, org.apache.commons.math3.linear.RealVector, org.apache.commons.math3.linear.RealVector, org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.linear.NonSelfAdjointOperatorException
    {
        org.apache.commons.math3.linear.RealLinearOperator $r0;
        org.apache.commons.math3.linear.RealVector $r1, $r2, $r3;
        org.apache.commons.math3.linear.NonSelfAdjointOperatorException r4;
        double d0, $d1, $d2, $d3;
        byte $b0;
        org.apache.commons.math3.exception.util.ExceptionContext $r5;
        java.lang.Double $r6;

        $r0 := @parameter0: org.apache.commons.math3.linear.RealLinearOperator;

        $r1 := @parameter1: org.apache.commons.math3.linear.RealVector;

        $r2 := @parameter2: org.apache.commons.math3.linear.RealVector;

        $r3 := @parameter3: org.apache.commons.math3.linear.RealVector;

        $d1 = virtualinvoke $r2.<org.apache.commons.math3.linear.RealVector: double dotProduct(org.apache.commons.math3.linear.RealVector)>($r2);

        $d2 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: double dotProduct(org.apache.commons.math3.linear.RealVector)>($r3);

        d0 = <org.apache.commons.math3.linear.SymmLQ$State: double MACH_PREC>;

        $d3 = d0 + $d1;

        d0 = <org.apache.commons.math3.linear.SymmLQ$State: double CBRT_MACH_PREC>;

        d0 = $d3 * d0;

        $d1 = $d1 - $d2;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d1);

        $b0 = $d1 cmpl d0;

        if $b0 <= 0 goto label1;

        r4 = new org.apache.commons.math3.linear.NonSelfAdjointOperatorException;

        specialinvoke r4.<org.apache.commons.math3.linear.NonSelfAdjointOperatorException: void <init>()>();

        $r5 = virtualinvoke r4.<org.apache.commons.math3.linear.NonSelfAdjointOperatorException: org.apache.commons.math3.exception.util.ExceptionContext getContext()>();

        virtualinvoke $r5.<org.apache.commons.math3.exception.util.ExceptionContext: void setValue(java.lang.String,java.lang.Object)>("operator", $r0);

        virtualinvoke $r5.<org.apache.commons.math3.exception.util.ExceptionContext: void setValue(java.lang.String,java.lang.Object)>("vector1", $r1);

        virtualinvoke $r5.<org.apache.commons.math3.exception.util.ExceptionContext: void setValue(java.lang.String,java.lang.Object)>("vector2", $r2);

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        virtualinvoke $r5.<org.apache.commons.math3.exception.util.ExceptionContext: void setValue(java.lang.String,java.lang.Object)>("threshold", $r6);

        throw r4;

     label1:
        return;
    }
    private static void daxpbypz(double, org.apache.commons.math3.linear.RealVector, double, org.apache.commons.math3.linear.RealVector, org.apache.commons.math3.linear.RealVector)
    {
        double $d0, $d1, d2, $d3;
        org.apache.commons.math3.linear.RealVector $r0, $r1, $r2;
        int $i0, i1;

        $d0 := @parameter0: double;

        $r0 := @parameter1: org.apache.commons.math3.linear.RealVector;

        $d1 := @parameter2: double;

        $r1 := @parameter3: org.apache.commons.math3.linear.RealVector;

        $r2 := @parameter4: org.apache.commons.math3.linear.RealVector;

        $i0 = virtualinvoke $r2.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        i1 = 0;

     label1:
        if i1 >= $i0 goto label2;

        d2 = virtualinvoke $r0.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>(i1);

        d2 = d2 * $d0;

        $d3 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>(i1);

        $d3 = $d3 * $d1;

        d2 = d2 + $d3;

        $d3 = virtualinvoke $r2.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>(i1);

        d2 = d2 + $d3;

        virtualinvoke $r2.<org.apache.commons.math3.linear.RealVector: void setEntry(int,double)>(i1, d2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
    private static void daxpy(double, org.apache.commons.math3.linear.RealVector, org.apache.commons.math3.linear.RealVector)
    {
        double $d0, $d1, $d2;
        org.apache.commons.math3.linear.RealVector $r0, $r1;
        int $i0, i1;

        $d0 := @parameter0: double;

        $r0 := @parameter1: org.apache.commons.math3.linear.RealVector;

        $r1 := @parameter2: org.apache.commons.math3.linear.RealVector;

        $i0 = virtualinvoke $r0.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        i1 = 0;

     label1:
        if i1 >= $i0 goto label2;

        $d1 = virtualinvoke $r0.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>(i1);

        $d1 = $d1 * $d0;

        $d2 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>(i1);

        $d1 = $d1 + $d2;

        virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: void setEntry(int,double)>(i1, $d1);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
    private static void throwNPDLOException(org.apache.commons.math3.linear.RealLinearOperator, org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.linear.NonPositiveDefiniteOperatorException
    {
        org.apache.commons.math3.linear.RealLinearOperator $r0;
        org.apache.commons.math3.linear.RealVector $r1;
        org.apache.commons.math3.linear.NonPositiveDefiniteOperatorException r2;
        org.apache.commons.math3.exception.util.ExceptionContext $r3;

        $r0 := @parameter0: org.apache.commons.math3.linear.RealLinearOperator;

        $r1 := @parameter1: org.apache.commons.math3.linear.RealVector;

        r2 = new org.apache.commons.math3.linear.NonPositiveDefiniteOperatorException;

        specialinvoke r2.<org.apache.commons.math3.linear.NonPositiveDefiniteOperatorException: void <init>()>();

        $r3 = virtualinvoke r2.<org.apache.commons.math3.linear.NonPositiveDefiniteOperatorException: org.apache.commons.math3.exception.util.ExceptionContext getContext()>();

        virtualinvoke $r3.<org.apache.commons.math3.exception.util.ExceptionContext: void setValue(java.lang.String,java.lang.Object)>("operator", $r0);

        virtualinvoke $r3.<org.apache.commons.math3.exception.util.ExceptionContext: void setValue(java.lang.String,java.lang.Object)>("vector", $r1);

        throw r2;
    }
    private void updateNorms()
    {
        org.apache.commons.math3.linear.SymmLQ$State r0;
        double d0, d1, d2, d3, $d4, $d5;
        byte $b0;
        org.apache.commons.math3.linear.IllConditionedOperatorException $r1;
        org.apache.commons.math3.linear.SingularOperatorException $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.linear.SymmLQ$State;

        d2 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double tnorm>;

        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d2);

        d2 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double ynorm2>;

        d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d2);

        d2 = <org.apache.commons.math3.linear.SymmLQ$State: double MACH_PREC>;

        d0 = d1 * d2;

        d2 = d1 * d3;

        $d4 = <org.apache.commons.math3.linear.SymmLQ$State: double MACH_PREC>;

        d2 = d2 * $d4;

        d1 = d1 * d3;

        d3 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double delta>;

        d1 = d1 * d3;

        d3 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double gbar>;

        $b0 = d3 cmpl 0.0;

        if $b0 != 0 goto label3;

     label1:
        d3 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double gammaZeta>;

        $d4 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double gammaZeta>;

        d3 = d3 * $d4;

        $d4 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double minusEpsZeta>;

        $d5 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double minusEpsZeta>;

        $d4 = $d4 * $d5;

        d3 = d3 + $d4;

        d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d3);

        r0.<org.apache.commons.math3.linear.SymmLQ$State: double lqnorm> = d3;

        d3 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double snprod>;

        $d4 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta1>;

        d3 = d3 * $d4;

        $d4 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta>;

        d3 = $d4 * d3;

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d0);

        d3 = d3 / $d4;

        r0.<org.apache.commons.math3.linear.SymmLQ$State: double cgnorm> = d3;

        d3 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double lqnorm>;

        $d4 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double cgnorm>;

        $b0 = d3 cmpg $d4;

        if $b0 > 0 goto label4;

        d0 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double gmax>;

        d3 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double gmin>;

        d0 = d0 / d3;

     label2:
        d3 = <org.apache.commons.math3.linear.SymmLQ$State: double MACH_PREC>;

        d3 = d3 * d0;

        $b0 = d3 cmpl 0.1;

        if $b0 < 0 goto label5;

        $r1 = new org.apache.commons.math3.linear.IllConditionedOperatorException;

        specialinvoke $r1.<org.apache.commons.math3.linear.IllConditionedOperatorException: void <init>(double)>(d0);

        throw $r1;

     label3:
        d0 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double gbar>;

        goto label1;

     label4:
        d3 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double gmax>;

        $d4 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double gmin>;

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d0);

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double min(double,double)>($d4, d0);

        d0 = d3 / d0;

        goto label2;

     label5:
        d0 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta1>;

        $b0 = d0 cmpg d2;

        if $b0 > 0 goto label6;

        $r2 = new org.apache.commons.math3.linear.SingularOperatorException;

        specialinvoke $r2.<org.apache.commons.math3.linear.SingularOperatorException: void <init>()>();

        throw $r2;

     label6:
        d0 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double cgnorm>;

        d3 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double lqnorm>;

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double min(double,double)>(d0, d3);

        r0.<org.apache.commons.math3.linear.SymmLQ$State: double rnorm> = d0;

        d0 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double cgnorm>;

        $b0 = d0 cmpg d2;

        if $b0 <= 0 goto label7;

        d2 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double cgnorm>;

        $b0 = d2 cmpg d1;

        if $b0 > 0 goto label9;

     label7:
        $z0 = 1;

     label8:
        r0.<org.apache.commons.math3.linear.SymmLQ$State: boolean hasConverged> = $z0;

        return;

     label9:
        $z0 = 0;

        goto label8;
    }
    boolean bEqualsNullVector()
    {
        org.apache.commons.math3.linear.SymmLQ$State r0;
        boolean z0;

        r0 := @this: org.apache.commons.math3.linear.SymmLQ$State;

        z0 = r0.<org.apache.commons.math3.linear.SymmLQ$State: boolean bIsNull>;

        return z0;
    }
    boolean betaEqualsZero()
    {
        org.apache.commons.math3.linear.SymmLQ$State r0;
        double $d0, $d1;
        byte $b0;

        r0 := @this: org.apache.commons.math3.linear.SymmLQ$State;

        $d1 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta>;

        $d0 = <org.apache.commons.math3.linear.SymmLQ$State: double MACH_PREC>;

        $b0 = $d1 cmpg $d0;

        if $b0 >= 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    double getNormOfResidual()
    {
        org.apache.commons.math3.linear.SymmLQ$State r0;
        double d0;

        r0 := @this: org.apache.commons.math3.linear.SymmLQ$State;

        d0 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double rnorm>;

        return d0;
    }
    boolean hasConverged()
    {
        org.apache.commons.math3.linear.SymmLQ$State r0;
        boolean z0;

        r0 := @this: org.apache.commons.math3.linear.SymmLQ$State;

        z0 = r0.<org.apache.commons.math3.linear.SymmLQ$State: boolean hasConverged>;

        return z0;
    }
    void init()
    {
        org.apache.commons.math3.linear.SymmLQ$State r0;
        org.apache.commons.math3.linear.RealVector $r1, $r2, $r4;
        double $d0, $d1, $d2, $d3;
        org.apache.commons.math3.linear.RealLinearOperator $r3, $r5;
        boolean $z0;
        byte $b0;
        org.apache.commons.math3.linear.ArrayRealVector $r6;
        int $i1;

        r0 := @this: org.apache.commons.math3.linear.SymmLQ$State;

        $r2 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector xL>;

        virtualinvoke $r2.<org.apache.commons.math3.linear.RealVector: void set(double)>(0.0);

        $r2 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector b>;

        $r2 = virtualinvoke $r2.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector copy()>();

        r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector r1> = $r2;

        $r3 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealLinearOperator m>;

        if $r3 != null goto label04;

        $r2 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector b>;

        $r2 = virtualinvoke $r2.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector copy()>();

     label01:
        r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector y> = $r2;

        $r3 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealLinearOperator m>;

        if $r3 == null goto label02;

        $z0 = r0.<org.apache.commons.math3.linear.SymmLQ$State: boolean check>;

        if $z0 == 0 goto label02;

        $r3 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealLinearOperator m>;

        $r2 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector r1>;

        $r4 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector y>;

        $r5 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealLinearOperator m>;

        $r1 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector y>;

        $r1 = virtualinvoke $r5.<org.apache.commons.math3.linear.RealLinearOperator: org.apache.commons.math3.linear.RealVector operate(org.apache.commons.math3.linear.RealVector)>($r1);

        staticinvoke <org.apache.commons.math3.linear.SymmLQ$State: void checkSymmetry(org.apache.commons.math3.linear.RealLinearOperator,org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.linear.RealVector)>($r3, $r2, $r4, $r1);

     label02:
        $r2 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector r1>;

        $r4 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector y>;

        $d1 = virtualinvoke $r2.<org.apache.commons.math3.linear.RealVector: double dotProduct(org.apache.commons.math3.linear.RealVector)>($r4);

        r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta1> = $d1;

        $d1 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta1>;

        $b0 = $d1 cmpg 0.0;

        if $b0 >= 0 goto label03;

        $r3 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealLinearOperator m>;

        $r2 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector y>;

        staticinvoke <org.apache.commons.math3.linear.SymmLQ$State: void throwNPDLOException(org.apache.commons.math3.linear.RealLinearOperator,org.apache.commons.math3.linear.RealVector)>($r3, $r2);

     label03:
        $d1 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta1>;

        $b0 = $d1 cmpl 0.0;

        if $b0 != 0 goto label05;

        r0.<org.apache.commons.math3.linear.SymmLQ$State: boolean bIsNull> = 1;

        return;

     label04:
        $r3 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealLinearOperator m>;

        $r2 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector r1>;

        $r2 = virtualinvoke $r3.<org.apache.commons.math3.linear.RealLinearOperator: org.apache.commons.math3.linear.RealVector operate(org.apache.commons.math3.linear.RealVector)>($r2);

        goto label01;

     label05:
        r0.<org.apache.commons.math3.linear.SymmLQ$State: boolean bIsNull> = 0;

        $d1 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta1>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d1);

        r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta1> = $d1;

        $r2 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector y>;

        $d1 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta1>;

        $d1 = 1.0 / $d1;

        $r2 = virtualinvoke $r2.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector mapMultiply(double)>($d1);

        $r3 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealLinearOperator a>;

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.linear.RealLinearOperator: org.apache.commons.math3.linear.RealVector operate(org.apache.commons.math3.linear.RealVector)>($r2);

        r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector y> = $r4;

        $z0 = r0.<org.apache.commons.math3.linear.SymmLQ$State: boolean check>;

        if $z0 == 0 goto label06;

        $r3 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealLinearOperator a>;

        $r4 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector y>;

        $r5 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealLinearOperator a>;

        $r1 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector y>;

        $r1 = virtualinvoke $r5.<org.apache.commons.math3.linear.RealLinearOperator: org.apache.commons.math3.linear.RealVector operate(org.apache.commons.math3.linear.RealVector)>($r1);

        staticinvoke <org.apache.commons.math3.linear.SymmLQ$State: void checkSymmetry(org.apache.commons.math3.linear.RealLinearOperator,org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.linear.RealVector)>($r3, $r2, $r4, $r1);

     label06:
        $d1 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double shift>;

        $d1 = neg $d1;

        $r4 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector y>;

        staticinvoke <org.apache.commons.math3.linear.SymmLQ$State: void daxpy(double,org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.linear.RealVector)>($d1, $r2, $r4);

        $r4 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector y>;

        $d1 = virtualinvoke $r2.<org.apache.commons.math3.linear.RealVector: double dotProduct(org.apache.commons.math3.linear.RealVector)>($r4);

        $d2 = neg $d1;

        $d0 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta1>;

        $d2 = $d2 / $d0;

        $r4 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector r1>;

        $r1 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector y>;

        staticinvoke <org.apache.commons.math3.linear.SymmLQ$State: void daxpy(double,org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.linear.RealVector)>($d2, $r4, $r1);

        $r4 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector y>;

        $d0 = virtualinvoke $r2.<org.apache.commons.math3.linear.RealVector: double dotProduct(org.apache.commons.math3.linear.RealVector)>($r4);

        $d2 = virtualinvoke $r2.<org.apache.commons.math3.linear.RealVector: double dotProduct(org.apache.commons.math3.linear.RealVector)>($r2);

        $d0 = neg $d0;

        $d2 = $d0 / $d2;

        $r4 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector y>;

        staticinvoke <org.apache.commons.math3.linear.SymmLQ$State: void daxpy(double,org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.linear.RealVector)>($d2, $r2, $r4);

        $r4 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector y>;

        $r4 = virtualinvoke $r4.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector copy()>();

        r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector r2> = $r4;

        $r3 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealLinearOperator m>;

        if $r3 == null goto label07;

        $r3 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealLinearOperator m>;

        $r4 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector r2>;

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.linear.RealLinearOperator: org.apache.commons.math3.linear.RealVector operate(org.apache.commons.math3.linear.RealVector)>($r4);

        r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector y> = $r4;

     label07:
        $d2 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta1>;

        r0.<org.apache.commons.math3.linear.SymmLQ$State: double oldb> = $d2;

        $r4 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector r2>;

        $r1 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector y>;

        $d2 = virtualinvoke $r4.<org.apache.commons.math3.linear.RealVector: double dotProduct(org.apache.commons.math3.linear.RealVector)>($r1);

        r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta> = $d2;

        $d2 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta>;

        $b0 = $d2 cmpg 0.0;

        if $b0 >= 0 goto label08;

        $r3 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealLinearOperator m>;

        $r4 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector y>;

        staticinvoke <org.apache.commons.math3.linear.SymmLQ$State: void throwNPDLOException(org.apache.commons.math3.linear.RealLinearOperator,org.apache.commons.math3.linear.RealVector)>($r3, $r4);

     label08:
        $d2 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta>;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d2);

        r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta> = $d2;

        $d2 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta1>;

        r0.<org.apache.commons.math3.linear.SymmLQ$State: double cgnorm> = $d2;

        r0.<org.apache.commons.math3.linear.SymmLQ$State: double gbar> = $d1;

        $d2 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta>;

        r0.<org.apache.commons.math3.linear.SymmLQ$State: double dbar> = $d2;

        $d2 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta1>;

        r0.<org.apache.commons.math3.linear.SymmLQ$State: double gammaZeta> = $d2;

        r0.<org.apache.commons.math3.linear.SymmLQ$State: double minusEpsZeta> = 0.0;

        r0.<org.apache.commons.math3.linear.SymmLQ$State: double bstep> = 0.0;

        r0.<org.apache.commons.math3.linear.SymmLQ$State: double snprod> = 1.0;

        $d2 = $d1 * $d1;

        $d3 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta>;

        $d0 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta>;

        $d0 = $d3 * $d0;

        $d2 = $d2 + $d0;

        r0.<org.apache.commons.math3.linear.SymmLQ$State: double tnorm> = $d2;

        r0.<org.apache.commons.math3.linear.SymmLQ$State: double ynorm2> = 0.0;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d1);

        $d2 = <org.apache.commons.math3.linear.SymmLQ$State: double MACH_PREC>;

        $d1 = $d1 + $d2;

        r0.<org.apache.commons.math3.linear.SymmLQ$State: double gmax> = $d1;

        $d1 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double gmax>;

        r0.<org.apache.commons.math3.linear.SymmLQ$State: double gmin> = $d1;

        $z0 = r0.<org.apache.commons.math3.linear.SymmLQ$State: boolean goodb>;

        if $z0 == 0 goto label10;

        $r6 = new org.apache.commons.math3.linear.ArrayRealVector;

        $r3 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealLinearOperator a>;

        $i1 = virtualinvoke $r3.<org.apache.commons.math3.linear.RealLinearOperator: int getRowDimension()>();

        specialinvoke $r6.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(int)>($i1);

        r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector wbar> = $r6;

        $r2 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector wbar>;

        virtualinvoke $r2.<org.apache.commons.math3.linear.RealVector: void set(double)>(0.0);

     label09:
        specialinvoke r0.<org.apache.commons.math3.linear.SymmLQ$State: void updateNorms()>();

        return;

     label10:
        r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector wbar> = $r2;

        goto label09;
    }
    void refineSolution(org.apache.commons.math3.linear.RealVector)
    {
        org.apache.commons.math3.linear.SymmLQ$State r0;
        org.apache.commons.math3.linear.RealVector $r1, $r2;
        double d0, $d1, $d2, $d3, $d4;
        int $i0, i2;
        byte $b1;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.linear.SymmLQ$State;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealVector;

        $r2 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector xL>;

        $i0 = virtualinvoke $r2.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        d0 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double lqnorm>;

        $d1 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double cgnorm>;

        $b1 = d0 cmpg $d1;

        if $b1 >= 0 goto label3;

        $z0 = r0.<org.apache.commons.math3.linear.SymmLQ$State: boolean goodb>;

        if $z0 != 0 goto label1;

        $r2 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector xL>;

        virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: void setSubVector(int,org.apache.commons.math3.linear.RealVector)>(0, $r2);

        return;

     label1:
        d0 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double bstep>;

        $d1 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta1>;

        d0 = d0 / $d1;

        i2 = 0;

     label2:
        if i2 >= $i0 goto label9;

        $r2 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector mb>;

        $d2 = virtualinvoke $r2.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>(i2);

        $r2 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector xL>;

        $d1 = virtualinvoke $r2.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>(i2);

        $d2 = d0 * $d2;

        $d1 = $d2 + $d1;

        virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: void setEntry(int,double)>(i2, $d1);

        i2 = i2 + 1;

        goto label2;

     label3:
        d0 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double tnorm>;

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d0);

        $d1 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double gbar>;

        $b1 = $d1 cmpl 0.0;

        if $b1 != 0 goto label6;

        $d1 = <org.apache.commons.math3.linear.SymmLQ$State: double MACH_PREC>;

        d0 = d0 * $d1;

     label4:
        $d1 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double gammaZeta>;

        d0 = $d1 / d0;

        $d1 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double bstep>;

        $d2 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double snprod>;

        $d2 = $d2 * d0;

        $d1 = $d1 + $d2;

        $d2 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta1>;

        $d1 = $d1 / $d2;

        $z0 = r0.<org.apache.commons.math3.linear.SymmLQ$State: boolean goodb>;

        if $z0 != 0 goto label7;

        i2 = 0;

     label5:
        if i2 >= $i0 goto label9;

        $r2 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector xL>;

        $d1 = virtualinvoke $r2.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>(i2);

        $r2 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector wbar>;

        $d2 = virtualinvoke $r2.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>(i2);

        $d2 = d0 * $d2;

        $d1 = $d2 + $d1;

        virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: void setEntry(int,double)>(i2, $d1);

        i2 = i2 + 1;

        goto label5;

     label6:
        d0 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double gbar>;

        goto label4;

     label7:
        i2 = 0;

     label8:
        if i2 >= $i0 goto label9;

        $r2 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector xL>;

        $d3 = virtualinvoke $r2.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>(i2);

        $r2 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector wbar>;

        $d4 = virtualinvoke $r2.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>(i2);

        $r2 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector mb>;

        $d2 = virtualinvoke $r2.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>(i2);

        $d4 = d0 * $d4;

        $d3 = $d4 + $d3;

        $d2 = $d1 * $d2;

        $d2 = $d3 + $d2;

        virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: void setEntry(int,double)>(i2, $d2);

        i2 = i2 + 1;

        goto label8;

     label9:
        return;
    }
    void update()
    {
        org.apache.commons.math3.linear.SymmLQ$State r0;
        org.apache.commons.math3.linear.RealVector $r1, $r2, $r3;
        double d0, d1, d2, d3, d4, d5, d6, $d7, $d8, $d9, $d10, $d11;
        org.apache.commons.math3.linear.RealLinearOperator $r4;
        byte $b0;
        int $i1, i2;

        r0 := @this: org.apache.commons.math3.linear.SymmLQ$State;

        $r3 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector y>;

        d1 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta>;

        d1 = 1.0 / d1;

        $r3 = virtualinvoke $r3.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector mapMultiply(double)>(d1);

        $r4 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealLinearOperator a>;

        $r1 = virtualinvoke $r4.<org.apache.commons.math3.linear.RealLinearOperator: org.apache.commons.math3.linear.RealVector operate(org.apache.commons.math3.linear.RealVector)>($r3);

        r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector y> = $r1;

        d1 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double shift>;

        d1 = neg d1;

        $d7 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta>;

        $d7 = neg $d7;

        d2 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double oldb>;

        $d7 = $d7 / d2;

        $r1 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector r1>;

        $r2 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector y>;

        staticinvoke <org.apache.commons.math3.linear.SymmLQ$State: void daxpbypz(double,org.apache.commons.math3.linear.RealVector,double,org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.linear.RealVector)>(d1, $r3, $d7, $r1, $r2);

        $r1 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector y>;

        d2 = virtualinvoke $r3.<org.apache.commons.math3.linear.RealVector: double dotProduct(org.apache.commons.math3.linear.RealVector)>($r1);

        d1 = neg d2;

        $d7 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta>;

        d1 = d1 / $d7;

        $r1 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector r2>;

        $r2 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector y>;

        staticinvoke <org.apache.commons.math3.linear.SymmLQ$State: void daxpy(double,org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.linear.RealVector)>(d1, $r1, $r2);

        $r1 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector r2>;

        r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector r1> = $r1;

        $r1 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector y>;

        r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector r2> = $r1;

        $r4 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealLinearOperator m>;

        if $r4 == null goto label1;

        $r4 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealLinearOperator m>;

        $r1 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector r2>;

        $r1 = virtualinvoke $r4.<org.apache.commons.math3.linear.RealLinearOperator: org.apache.commons.math3.linear.RealVector operate(org.apache.commons.math3.linear.RealVector)>($r1);

        r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector y> = $r1;

     label1:
        d1 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta>;

        r0.<org.apache.commons.math3.linear.SymmLQ$State: double oldb> = d1;

        $r1 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector r2>;

        $r2 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector y>;

        d1 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: double dotProduct(org.apache.commons.math3.linear.RealVector)>($r2);

        r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta> = d1;

        d1 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta>;

        $b0 = d1 cmpg 0.0;

        if $b0 >= 0 goto label2;

        $r4 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealLinearOperator m>;

        $r1 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector y>;

        staticinvoke <org.apache.commons.math3.linear.SymmLQ$State: void throwNPDLOException(org.apache.commons.math3.linear.RealLinearOperator,org.apache.commons.math3.linear.RealVector)>($r4, $r1);

     label2:
        d1 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta>;

        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d1);

        r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta> = d1;

        d1 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double tnorm>;

        $d7 = d2 * d2;

        d3 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double oldb>;

        d4 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double oldb>;

        d3 = d3 * d4;

        $d7 = $d7 + d3;

        d3 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta>;

        d4 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta>;

        d3 = d3 * d4;

        $d7 = $d7 + d3;

        d1 = d1 + $d7;

        r0.<org.apache.commons.math3.linear.SymmLQ$State: double tnorm> = d1;

        d1 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double gbar>;

        $d7 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double gbar>;

        d1 = d1 * $d7;

        $d7 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double oldb>;

        d3 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double oldb>;

        $d7 = $d7 * d3;

        d1 = d1 + $d7;

        $d7 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d1);

        d1 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double gbar>;

        d0 = d1 / $d7;

        d1 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double oldb>;

        d3 = d1 / $d7;

        d1 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double dbar>;

        d1 = d1 * d0;

        d4 = d3 * d2;

        d1 = d1 + d4;

        d4 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double dbar>;

        d4 = d4 * d3;

        d2 = d0 * d2;

        d2 = d4 - d2;

        r0.<org.apache.commons.math3.linear.SymmLQ$State: double gbar> = d2;

        d2 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta>;

        d2 = d3 * d2;

        d4 = neg d0;

        d5 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta>;

        d4 = d4 * d5;

        r0.<org.apache.commons.math3.linear.SymmLQ$State: double dbar> = d4;

        d4 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double gammaZeta>;

        d4 = d4 / $d7;

        d5 = d4 * d0;

        d6 = d4 * d3;

        $r1 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector xL>;

        $i1 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        i2 = 0;

     label3:
        if i2 >= $i1 goto label4;

        $r1 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector xL>;

        $d8 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>(i2);

        $d9 = virtualinvoke $r3.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>(i2);

        $r1 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector wbar>;

        $d10 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>(i2);

        $r1 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector xL>;

        $d11 = $d10 * d5;

        $d8 = $d11 + $d8;

        $d11 = $d9 * d6;

        $d8 = $d8 + $d11;

        virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: void setEntry(int,double)>(i2, $d8);

        $r1 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector wbar>;

        $d10 = $d10 * d3;

        $d9 = $d9 * d0;

        $d9 = $d10 - $d9;

        virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: void setEntry(int,double)>(i2, $d9);

        i2 = i2 + 1;

        goto label3;

     label4:
        d5 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double bstep>;

        d6 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double snprod>;

        d0 = d6 * d0;

        d0 = d0 * d4;

        d0 = d5 + d0;

        r0.<org.apache.commons.math3.linear.SymmLQ$State: double bstep> = d0;

        d0 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double snprod>;

        d3 = d0 * d3;

        r0.<org.apache.commons.math3.linear.SymmLQ$State: double snprod> = d3;

        d3 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double gmax>;

        d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>(d3, $d7);

        r0.<org.apache.commons.math3.linear.SymmLQ$State: double gmax> = d3;

        d3 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double gmin>;

        $d7 = staticinvoke <org.apache.commons.math3.util.FastMath: double min(double,double)>(d3, $d7);

        r0.<org.apache.commons.math3.linear.SymmLQ$State: double gmin> = $d7;

        $d7 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double ynorm2>;

        d3 = d4 * d4;

        $d7 = $d7 + d3;

        r0.<org.apache.commons.math3.linear.SymmLQ$State: double ynorm2> = $d7;

        $d7 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double minusEpsZeta>;

        d1 = d1 * d4;

        d1 = $d7 - d1;

        r0.<org.apache.commons.math3.linear.SymmLQ$State: double gammaZeta> = d1;

        d1 = neg d2;

        d1 = d1 * d4;

        r0.<org.apache.commons.math3.linear.SymmLQ$State: double minusEpsZeta> = d1;

        specialinvoke r0.<org.apache.commons.math3.linear.SymmLQ$State: void updateNorms()>();

        return;
    }
