org.apache.commons.math3.linear.OpenMapRealVector extends org.apache.commons.math3.linear.SparseRealVector implements java.io.Serializable
public static final double DEFAULT_ZERO_TOLERANCE
private static final long serialVersionUID
private final org.apache.commons.math3.util.OpenIntToDoubleHashMap entries
private final double epsilon
private final int virtualSize
    public void <init>()
    {
        org.apache.commons.math3.linear.OpenMapRealVector r0;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealVector;

        specialinvoke r0.<org.apache.commons.math3.linear.OpenMapRealVector: void <init>(int,double)>(0, 1.0E-12);

        return;
    }
    public void <init>(int)
    {
        org.apache.commons.math3.linear.OpenMapRealVector r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealVector;

        $i0 := @parameter0: int;

        specialinvoke r0.<org.apache.commons.math3.linear.OpenMapRealVector: void <init>(int,double)>($i0, 1.0E-12);

        return;
    }
    public void <init>(int, double)
    {
        org.apache.commons.math3.linear.OpenMapRealVector r0;
        int $i0;
        double $d0;
        org.apache.commons.math3.util.OpenIntToDoubleHashMap $r1;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealVector;

        $i0 := @parameter0: int;

        $d0 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.linear.SparseRealVector: void <init>()>();

        r0.<org.apache.commons.math3.linear.OpenMapRealVector: int virtualSize> = $i0;

        $r1 = new org.apache.commons.math3.util.OpenIntToDoubleHashMap;

        specialinvoke $r1.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: void <init>(double)>(0.0);

        r0.<org.apache.commons.math3.linear.OpenMapRealVector: org.apache.commons.math3.util.OpenIntToDoubleHashMap entries> = $r1;

        r0.<org.apache.commons.math3.linear.OpenMapRealVector: double epsilon> = $d0;

        return;
    }
    public void <init>(int, int)
    {
        org.apache.commons.math3.linear.OpenMapRealVector r0;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealVector;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        specialinvoke r0.<org.apache.commons.math3.linear.OpenMapRealVector: void <init>(int,int,double)>($i0, $i1, 1.0E-12);

        return;
    }
    public void <init>(int, int, double)
    {
        org.apache.commons.math3.linear.OpenMapRealVector r0;
        int $i0, $i1;
        double $d0;
        org.apache.commons.math3.util.OpenIntToDoubleHashMap $r1;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealVector;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $d0 := @parameter2: double;

        specialinvoke r0.<org.apache.commons.math3.linear.SparseRealVector: void <init>()>();

        r0.<org.apache.commons.math3.linear.OpenMapRealVector: int virtualSize> = $i0;

        $r1 = new org.apache.commons.math3.util.OpenIntToDoubleHashMap;

        specialinvoke $r1.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: void <init>(int,double)>($i1, 0.0);

        r0.<org.apache.commons.math3.linear.OpenMapRealVector: org.apache.commons.math3.util.OpenIntToDoubleHashMap entries> = $r1;

        r0.<org.apache.commons.math3.linear.OpenMapRealVector: double epsilon> = $d0;

        return;
    }
    public void <init>(org.apache.commons.math3.linear.OpenMapRealVector)
    {
        org.apache.commons.math3.linear.OpenMapRealVector r0, $r1;
        int $i0;
        org.apache.commons.math3.util.OpenIntToDoubleHashMap $r2, $r3;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealVector;

        $r1 := @parameter0: org.apache.commons.math3.linear.OpenMapRealVector;

        specialinvoke r0.<org.apache.commons.math3.linear.SparseRealVector: void <init>()>();

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.linear.OpenMapRealVector: int getDimension()>();

        r0.<org.apache.commons.math3.linear.OpenMapRealVector: int virtualSize> = $i0;

        $r2 = new org.apache.commons.math3.util.OpenIntToDoubleHashMap;

        $r3 = specialinvoke $r1.<org.apache.commons.math3.linear.OpenMapRealVector: org.apache.commons.math3.util.OpenIntToDoubleHashMap getEntries()>();

        specialinvoke $r2.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: void <init>(org.apache.commons.math3.util.OpenIntToDoubleHashMap)>($r3);

        r0.<org.apache.commons.math3.linear.OpenMapRealVector: org.apache.commons.math3.util.OpenIntToDoubleHashMap entries> = $r2;

        $d0 = $r1.<org.apache.commons.math3.linear.OpenMapRealVector: double epsilon>;

        r0.<org.apache.commons.math3.linear.OpenMapRealVector: double epsilon> = $d0;

        return;
    }
    protected void <init>(org.apache.commons.math3.linear.OpenMapRealVector, int)
    {
        org.apache.commons.math3.linear.OpenMapRealVector r0, $r1;
        int $i0, $i1;
        org.apache.commons.math3.util.OpenIntToDoubleHashMap $r2, $r3;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealVector;

        $r1 := @parameter0: org.apache.commons.math3.linear.OpenMapRealVector;

        $i0 := @parameter1: int;

        specialinvoke r0.<org.apache.commons.math3.linear.SparseRealVector: void <init>()>();

        $i1 = virtualinvoke $r1.<org.apache.commons.math3.linear.OpenMapRealVector: int getDimension()>();

        $i0 = $i1 + $i0;

        r0.<org.apache.commons.math3.linear.OpenMapRealVector: int virtualSize> = $i0;

        $r3 = new org.apache.commons.math3.util.OpenIntToDoubleHashMap;

        $r2 = $r1.<org.apache.commons.math3.linear.OpenMapRealVector: org.apache.commons.math3.util.OpenIntToDoubleHashMap entries>;

        specialinvoke $r3.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: void <init>(org.apache.commons.math3.util.OpenIntToDoubleHashMap)>($r2);

        r0.<org.apache.commons.math3.linear.OpenMapRealVector: org.apache.commons.math3.util.OpenIntToDoubleHashMap entries> = $r3;

        $d0 = $r1.<org.apache.commons.math3.linear.OpenMapRealVector: double epsilon>;

        r0.<org.apache.commons.math3.linear.OpenMapRealVector: double epsilon> = $d0;

        return;
    }
    public void <init>(org.apache.commons.math3.linear.RealVector)
    {
        org.apache.commons.math3.linear.OpenMapRealVector r0;
        org.apache.commons.math3.linear.RealVector $r1;
        int $i0, $i1;
        org.apache.commons.math3.util.OpenIntToDoubleHashMap $r2;
        double $d0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealVector;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealVector;

        specialinvoke r0.<org.apache.commons.math3.linear.SparseRealVector: void <init>()>();

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        r0.<org.apache.commons.math3.linear.OpenMapRealVector: int virtualSize> = $i0;

        $r2 = new org.apache.commons.math3.util.OpenIntToDoubleHashMap;

        specialinvoke $r2.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: void <init>(double)>(0.0);

        r0.<org.apache.commons.math3.linear.OpenMapRealVector: org.apache.commons.math3.util.OpenIntToDoubleHashMap entries> = $r2;

        r0.<org.apache.commons.math3.linear.OpenMapRealVector: double epsilon> = 1.0E-12;

        $i0 = 0;

     label1:
        $i1 = r0.<org.apache.commons.math3.linear.OpenMapRealVector: int virtualSize>;

        if $i0 >= $i1 goto label3;

        $d0 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>($i0);

        $z0 = virtualinvoke r0.<org.apache.commons.math3.linear.OpenMapRealVector: boolean isDefaultValue(double)>($d0);

        if $z0 != 0 goto label2;

        $r2 = r0.<org.apache.commons.math3.linear.OpenMapRealVector: org.apache.commons.math3.util.OpenIntToDoubleHashMap entries>;

        virtualinvoke $r2.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: double put(int,double)>($i0, $d0);

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        return;
    }
    public void <init>(double[])
    {
        org.apache.commons.math3.linear.OpenMapRealVector r0;
        double[] $r1;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealVector;

        $r1 := @parameter0: double[];

        specialinvoke r0.<org.apache.commons.math3.linear.OpenMapRealVector: void <init>(double[],double)>($r1, 1.0E-12);

        return;
    }
    public void <init>(double[], double)
    {
        org.apache.commons.math3.linear.OpenMapRealVector r0;
        double[] $r1;
        double $d0;
        boolean $z0;
        int $i0, $i1;
        org.apache.commons.math3.util.OpenIntToDoubleHashMap $r2;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealVector;

        $r1 := @parameter0: double[];

        $d0 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.linear.SparseRealVector: void <init>()>();

        $i0 = lengthof $r1;

        r0.<org.apache.commons.math3.linear.OpenMapRealVector: int virtualSize> = $i0;

        $r2 = new org.apache.commons.math3.util.OpenIntToDoubleHashMap;

        specialinvoke $r2.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: void <init>(double)>(0.0);

        r0.<org.apache.commons.math3.linear.OpenMapRealVector: org.apache.commons.math3.util.OpenIntToDoubleHashMap entries> = $r2;

        r0.<org.apache.commons.math3.linear.OpenMapRealVector: double epsilon> = $d0;

        $i0 = 0;

     label1:
        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label3;

        $d0 = $r1[$i0];

        $z0 = virtualinvoke r0.<org.apache.commons.math3.linear.OpenMapRealVector: boolean isDefaultValue(double)>($d0);

        if $z0 != 0 goto label2;

        $r2 = r0.<org.apache.commons.math3.linear.OpenMapRealVector: org.apache.commons.math3.util.OpenIntToDoubleHashMap entries>;

        virtualinvoke $r2.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: double put(int,double)>($i0, $d0);

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        return;
    }
    public void <init>(java.lang.Double[])
    {
        org.apache.commons.math3.linear.OpenMapRealVector r0;
        java.lang.Double[] $r1;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealVector;

        $r1 := @parameter0: java.lang.Double[];

        specialinvoke r0.<org.apache.commons.math3.linear.OpenMapRealVector: void <init>(java.lang.Double[],double)>($r1, 1.0E-12);

        return;
    }
    public void <init>(java.lang.Double[], double)
    {
        org.apache.commons.math3.linear.OpenMapRealVector r0;
        java.lang.Double[] $r1;
        double $d0;
        int $i0, $i1;
        org.apache.commons.math3.util.OpenIntToDoubleHashMap $r2;
        java.lang.Double $r3;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealVector;

        $r1 := @parameter0: java.lang.Double[];

        $d0 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.linear.SparseRealVector: void <init>()>();

        $i0 = lengthof $r1;

        r0.<org.apache.commons.math3.linear.OpenMapRealVector: int virtualSize> = $i0;

        $r2 = new org.apache.commons.math3.util.OpenIntToDoubleHashMap;

        specialinvoke $r2.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: void <init>(double)>(0.0);

        r0.<org.apache.commons.math3.linear.OpenMapRealVector: org.apache.commons.math3.util.OpenIntToDoubleHashMap entries> = $r2;

        r0.<org.apache.commons.math3.linear.OpenMapRealVector: double epsilon> = $d0;

        $i0 = 0;

     label1:
        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label3;

        $r3 = $r1[$i0];

        $d0 = virtualinvoke $r3.<java.lang.Double: double doubleValue()>();

        $z0 = virtualinvoke r0.<org.apache.commons.math3.linear.OpenMapRealVector: boolean isDefaultValue(double)>($d0);

        if $z0 != 0 goto label2;

        $r2 = r0.<org.apache.commons.math3.linear.OpenMapRealVector: org.apache.commons.math3.util.OpenIntToDoubleHashMap entries>;

        virtualinvoke $r2.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: double put(int,double)>($i0, $d0);

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        return;
    }
    static org.apache.commons.math3.util.OpenIntToDoubleHashMap access$000(org.apache.commons.math3.linear.OpenMapRealVector)
    {
        org.apache.commons.math3.linear.OpenMapRealVector $r0;
        org.apache.commons.math3.util.OpenIntToDoubleHashMap r1;

        $r0 := @parameter0: org.apache.commons.math3.linear.OpenMapRealVector;

        r1 = $r0.<org.apache.commons.math3.linear.OpenMapRealVector: org.apache.commons.math3.util.OpenIntToDoubleHashMap entries>;

        return r1;
    }
    private org.apache.commons.math3.util.OpenIntToDoubleHashMap getEntries()
    {
        org.apache.commons.math3.linear.OpenMapRealVector r0;
        org.apache.commons.math3.util.OpenIntToDoubleHashMap r1;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealVector;

        r1 = r0.<org.apache.commons.math3.linear.OpenMapRealVector: org.apache.commons.math3.util.OpenIntToDoubleHashMap entries>;

        return r1;
    }
    private double getLInfDistance(org.apache.commons.math3.linear.OpenMapRealVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.OpenMapRealVector r0, $r1;
        int $i0;
        double d0, $d1, $d2;
        org.apache.commons.math3.util.OpenIntToDoubleHashMap $r2;
        org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator $r3;
        boolean $z0;
        byte $b1;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealVector;

        $r1 := @parameter0: org.apache.commons.math3.linear.OpenMapRealVector;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.linear.OpenMapRealVector: int getDimension()>();

        virtualinvoke r0.<org.apache.commons.math3.linear.OpenMapRealVector: void checkVectorDimensions(int)>($i0);

        d0 = 0.0;

        $r2 = r0.<org.apache.commons.math3.linear.OpenMapRealVector: org.apache.commons.math3.util.OpenIntToDoubleHashMap entries>;

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator iterator()>();

     label1:
        $z0 = virtualinvoke $r3.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        virtualinvoke $r3.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: void advance()>();

        $d1 = virtualinvoke $r3.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: double value()>();

        $i0 = virtualinvoke $r3.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: int key()>();

        $d2 = virtualinvoke $r1.<org.apache.commons.math3.linear.OpenMapRealVector: double getEntry(int)>($i0);

        $d1 = $d1 - $d2;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d1);

        $b1 = $d1 cmpl d0;

        if $b1 <= 0 goto label1;

        d0 = $d1;

        goto label1;

     label2:
        $r2 = specialinvoke $r1.<org.apache.commons.math3.linear.OpenMapRealVector: org.apache.commons.math3.util.OpenIntToDoubleHashMap getEntries()>();

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator iterator()>();

     label3:
        $z0 = virtualinvoke $r3.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        virtualinvoke $r3.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: void advance()>();

        $i0 = virtualinvoke $r3.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: int key()>();

        $r2 = r0.<org.apache.commons.math3.linear.OpenMapRealVector: org.apache.commons.math3.util.OpenIntToDoubleHashMap entries>;

        $z0 = virtualinvoke $r2.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: boolean containsKey(int)>($i0);

        if $z0 != 0 goto label3;

        $d1 = virtualinvoke $r3.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: double value()>();

        $b1 = $d1 cmpl d0;

        if $b1 <= 0 goto label3;

        d0 = virtualinvoke $r3.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: double value()>();

        goto label3;

     label4:
        return d0;
    }
    public org.apache.commons.math3.linear.OpenMapRealVector add(org.apache.commons.math3.linear.OpenMapRealVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.OpenMapRealVector r0, $r1, $r3;
        int $i0, $i1;
        org.apache.commons.math3.util.OpenIntToDoubleHashMap $r2;
        boolean z0;
        org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator $r4;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealVector;

        $r1 := @parameter0: org.apache.commons.math3.linear.OpenMapRealVector;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.linear.OpenMapRealVector: int getDimension()>();

        virtualinvoke r0.<org.apache.commons.math3.linear.OpenMapRealVector: void checkVectorDimensions(int)>($i0);

        $r2 = r0.<org.apache.commons.math3.linear.OpenMapRealVector: org.apache.commons.math3.util.OpenIntToDoubleHashMap entries>;

        $i0 = virtualinvoke $r2.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: int size()>();

        $r2 = $r1.<org.apache.commons.math3.linear.OpenMapRealVector: org.apache.commons.math3.util.OpenIntToDoubleHashMap entries>;

        $i1 = virtualinvoke $r2.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: int size()>();

        if $i0 <= $i1 goto label05;

        z0 = 1;

     label01:
        if z0 == 0 goto label06;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.linear.OpenMapRealVector: org.apache.commons.math3.linear.OpenMapRealVector copy()>();

     label02:
        if z0 == 0 goto label07;

        $r2 = $r1.<org.apache.commons.math3.linear.OpenMapRealVector: org.apache.commons.math3.util.OpenIntToDoubleHashMap entries>;

        $r4 = virtualinvoke $r2.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator iterator()>();

     label03:
        if z0 == 0 goto label08;

        $r2 = r0.<org.apache.commons.math3.linear.OpenMapRealVector: org.apache.commons.math3.util.OpenIntToDoubleHashMap entries>;

     label04:
        z0 = virtualinvoke $r4.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: boolean hasNext()>();

        if z0 == 0 goto label10;

        virtualinvoke $r4.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: void advance()>();

        $i0 = virtualinvoke $r4.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: int key()>();

        z0 = virtualinvoke $r2.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: boolean containsKey(int)>($i0);

        if z0 == 0 goto label09;

        $d0 = virtualinvoke $r2.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: double get(int)>($i0);

        $d1 = virtualinvoke $r4.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: double value()>();

        $d0 = $d0 + $d1;

        virtualinvoke $r3.<org.apache.commons.math3.linear.OpenMapRealVector: void setEntry(int,double)>($i0, $d0);

        goto label04;

     label05:
        z0 = 0;

        goto label01;

     label06:
        $r3 = virtualinvoke $r1.<org.apache.commons.math3.linear.OpenMapRealVector: org.apache.commons.math3.linear.OpenMapRealVector copy()>();

        goto label02;

     label07:
        $r2 = r0.<org.apache.commons.math3.linear.OpenMapRealVector: org.apache.commons.math3.util.OpenIntToDoubleHashMap entries>;

        $r4 = virtualinvoke $r2.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator iterator()>();

        goto label03;

     label08:
        $r2 = $r1.<org.apache.commons.math3.linear.OpenMapRealVector: org.apache.commons.math3.util.OpenIntToDoubleHashMap entries>;

        goto label04;

     label09:
        $d0 = virtualinvoke $r4.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: double value()>();

        virtualinvoke $r3.<org.apache.commons.math3.linear.OpenMapRealVector: void setEntry(int,double)>($i0, $d0);

        goto label04;

     label10:
        return $r3;
    }
    public org.apache.commons.math3.linear.RealVector add(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.OpenMapRealVector r0, r2;
        org.apache.commons.math3.linear.RealVector r1;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealVector;

        r1 := @parameter0: org.apache.commons.math3.linear.RealVector;

        $i0 = virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        virtualinvoke r0.<org.apache.commons.math3.linear.OpenMapRealVector: void checkVectorDimensions(int)>($i0);

        $z0 = r1 instanceof org.apache.commons.math3.linear.OpenMapRealVector;

        if $z0 == 0 goto label1;

        r2 = (org.apache.commons.math3.linear.OpenMapRealVector) r1;

        r0 = virtualinvoke r0.<org.apache.commons.math3.linear.OpenMapRealVector: org.apache.commons.math3.linear.OpenMapRealVector add(org.apache.commons.math3.linear.OpenMapRealVector)>(r2);

        return r0;

     label1:
        r1 = specialinvoke r0.<org.apache.commons.math3.linear.SparseRealVector: org.apache.commons.math3.linear.RealVector add(org.apache.commons.math3.linear.RealVector)>(r1);

        return r1;
    }
    public org.apache.commons.math3.linear.OpenMapRealVector append(double)
    {
        org.apache.commons.math3.linear.OpenMapRealVector r0, r1;
        double $d0;
        int $i0;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealVector;

        $d0 := @parameter0: double;

        r1 = new org.apache.commons.math3.linear.OpenMapRealVector;

        specialinvoke r1.<org.apache.commons.math3.linear.OpenMapRealVector: void <init>(org.apache.commons.math3.linear.OpenMapRealVector,int)>(r0, 1);

        $i0 = r0.<org.apache.commons.math3.linear.OpenMapRealVector: int virtualSize>;

        virtualinvoke r1.<org.apache.commons.math3.linear.OpenMapRealVector: void setEntry(int,double)>($i0, $d0);

        return r1;
    }
    public org.apache.commons.math3.linear.OpenMapRealVector append(org.apache.commons.math3.linear.OpenMapRealVector)
    {
        org.apache.commons.math3.linear.OpenMapRealVector r0, $r1, r2;
        int $i0, $i1;
        org.apache.commons.math3.util.OpenIntToDoubleHashMap $r3;
        org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator $r4;
        boolean $z0;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealVector;

        $r1 := @parameter0: org.apache.commons.math3.linear.OpenMapRealVector;

        r2 = new org.apache.commons.math3.linear.OpenMapRealVector;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.linear.OpenMapRealVector: int getDimension()>();

        specialinvoke r2.<org.apache.commons.math3.linear.OpenMapRealVector: void <init>(org.apache.commons.math3.linear.OpenMapRealVector,int)>(r0, $i0);

        $r3 = $r1.<org.apache.commons.math3.linear.OpenMapRealVector: org.apache.commons.math3.util.OpenIntToDoubleHashMap entries>;

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator iterator()>();

     label1:
        $z0 = virtualinvoke $r4.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        virtualinvoke $r4.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: void advance()>();

        $i1 = virtualinvoke $r4.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: int key()>();

        $i0 = r0.<org.apache.commons.math3.linear.OpenMapRealVector: int virtualSize>;

        $i0 = $i1 + $i0;

        $d0 = virtualinvoke $r4.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: double value()>();

        virtualinvoke r2.<org.apache.commons.math3.linear.OpenMapRealVector: void setEntry(int,double)>($i0, $d0);

        goto label1;

     label2:
        return r2;
    }
    public org.apache.commons.math3.linear.OpenMapRealVector append(org.apache.commons.math3.linear.RealVector)
    {
        org.apache.commons.math3.linear.OpenMapRealVector r0, r2;
        org.apache.commons.math3.linear.RealVector r1;
        boolean $z0;
        int $i0, $i1;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealVector;

        r1 := @parameter0: org.apache.commons.math3.linear.RealVector;

        $z0 = r1 instanceof org.apache.commons.math3.linear.OpenMapRealVector;

        if $z0 == 0 goto label1;

        r2 = (org.apache.commons.math3.linear.OpenMapRealVector) r1;

        r0 = virtualinvoke r0.<org.apache.commons.math3.linear.OpenMapRealVector: org.apache.commons.math3.linear.OpenMapRealVector append(org.apache.commons.math3.linear.OpenMapRealVector)>(r2);

        return r0;

     label1:
        r2 = new org.apache.commons.math3.linear.OpenMapRealVector;

        $i0 = virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        specialinvoke r2.<org.apache.commons.math3.linear.OpenMapRealVector: void <init>(org.apache.commons.math3.linear.OpenMapRealVector,int)>(r0, $i0);

        $i0 = 0;

     label2:
        $i1 = virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        if $i0 >= $i1 goto label3;

        $i1 = r0.<org.apache.commons.math3.linear.OpenMapRealVector: int virtualSize>;

        $i1 = $i1 + $i0;

        $d0 = virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>($i0);

        virtualinvoke r2.<org.apache.commons.math3.linear.OpenMapRealVector: void setEntry(int,double)>($i1, $d0);

        $i0 = $i0 + 1;

        goto label2;

     label3:
        return r2;
    }
    public volatile org.apache.commons.math3.linear.RealVector append(double)
    {
        org.apache.commons.math3.linear.OpenMapRealVector r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealVector;

        $d0 := @parameter0: double;

        r0 = virtualinvoke r0.<org.apache.commons.math3.linear.OpenMapRealVector: org.apache.commons.math3.linear.OpenMapRealVector append(double)>($d0);

        return r0;
    }
    public volatile org.apache.commons.math3.linear.RealVector append(org.apache.commons.math3.linear.RealVector)
    {
        org.apache.commons.math3.linear.OpenMapRealVector r0;
        org.apache.commons.math3.linear.RealVector $r1;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealVector;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealVector;

        r0 = virtualinvoke r0.<org.apache.commons.math3.linear.OpenMapRealVector: org.apache.commons.math3.linear.OpenMapRealVector append(org.apache.commons.math3.linear.RealVector)>($r1);

        return r0;
    }
    public org.apache.commons.math3.linear.OpenMapRealVector copy()
    {
        org.apache.commons.math3.linear.OpenMapRealVector r0, $r1;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealVector;

        $r1 = new org.apache.commons.math3.linear.OpenMapRealVector;

        specialinvoke $r1.<org.apache.commons.math3.linear.OpenMapRealVector: void <init>(org.apache.commons.math3.linear.OpenMapRealVector)>(r0);

        return $r1;
    }
    public volatile org.apache.commons.math3.linear.RealVector copy()
    {
        org.apache.commons.math3.linear.OpenMapRealVector r0;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealVector;

        r0 = virtualinvoke r0.<org.apache.commons.math3.linear.OpenMapRealVector: org.apache.commons.math3.linear.OpenMapRealVector copy()>();

        return r0;
    }
    public double dotProduct(org.apache.commons.math3.linear.OpenMapRealVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.OpenMapRealVector r0, $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealVector;

        $r1 := @parameter0: org.apache.commons.math3.linear.OpenMapRealVector;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.linear.OpenMapRealVector: double dotProduct(org.apache.commons.math3.linear.RealVector)>($r1);

        return $d0;
    }
    public org.apache.commons.math3.linear.OpenMapRealVector ebeDivide(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.OpenMapRealVector r0, r2;
        org.apache.commons.math3.linear.RealVector $r1;
        int $i0, i1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealVector;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealVector;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        virtualinvoke r0.<org.apache.commons.math3.linear.OpenMapRealVector: void checkVectorDimensions(int)>($i0);

        r2 = new org.apache.commons.math3.linear.OpenMapRealVector;

        specialinvoke r2.<org.apache.commons.math3.linear.OpenMapRealVector: void <init>(org.apache.commons.math3.linear.OpenMapRealVector)>(r0);

        $i0 = virtualinvoke r0.<org.apache.commons.math3.linear.OpenMapRealVector: int getDimension()>();

        i1 = 0;

     label1:
        if i1 >= $i0 goto label2;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.linear.OpenMapRealVector: double getEntry(int)>(i1);

        $d1 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>(i1);

        $d0 = $d0 / $d1;

        virtualinvoke r2.<org.apache.commons.math3.linear.OpenMapRealVector: void setEntry(int,double)>(i1, $d0);

        i1 = i1 + 1;

        goto label1;

     label2:
        return r2;
    }
    public volatile org.apache.commons.math3.linear.RealVector ebeDivide(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.OpenMapRealVector r0;
        org.apache.commons.math3.linear.RealVector $r1;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealVector;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealVector;

        r0 = virtualinvoke r0.<org.apache.commons.math3.linear.OpenMapRealVector: org.apache.commons.math3.linear.OpenMapRealVector ebeDivide(org.apache.commons.math3.linear.RealVector)>($r1);

        return r0;
    }
    public org.apache.commons.math3.linear.OpenMapRealVector ebeMultiply(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.OpenMapRealVector r0, r2;
        org.apache.commons.math3.linear.RealVector $r1;
        int $i0, $i1;
        org.apache.commons.math3.util.OpenIntToDoubleHashMap $r3;
        org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator $r4;
        boolean $z0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealVector;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealVector;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        virtualinvoke r0.<org.apache.commons.math3.linear.OpenMapRealVector: void checkVectorDimensions(int)>($i0);

        r2 = new org.apache.commons.math3.linear.OpenMapRealVector;

        specialinvoke r2.<org.apache.commons.math3.linear.OpenMapRealVector: void <init>(org.apache.commons.math3.linear.OpenMapRealVector)>(r0);

        $r3 = r0.<org.apache.commons.math3.linear.OpenMapRealVector: org.apache.commons.math3.util.OpenIntToDoubleHashMap entries>;

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator iterator()>();

     label1:
        $z0 = virtualinvoke $r4.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        virtualinvoke $r4.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: void advance()>();

        $i0 = virtualinvoke $r4.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: int key()>();

        $d0 = virtualinvoke $r4.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: double value()>();

        $i1 = virtualinvoke $r4.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: int key()>();

        $d1 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>($i1);

        $d0 = $d0 * $d1;

        virtualinvoke r2.<org.apache.commons.math3.linear.OpenMapRealVector: void setEntry(int,double)>($i0, $d0);

        goto label1;

     label2:
        return r2;
    }
    public volatile org.apache.commons.math3.linear.RealVector ebeMultiply(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.OpenMapRealVector r0;
        org.apache.commons.math3.linear.RealVector $r1;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealVector;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealVector;

        r0 = virtualinvoke r0.<org.apache.commons.math3.linear.OpenMapRealVector: org.apache.commons.math3.linear.OpenMapRealVector ebeMultiply(org.apache.commons.math3.linear.RealVector)>($r1);

        return r0;
    }
    public boolean equals(java.lang.Object)
    {
        org.apache.commons.math3.linear.OpenMapRealVector r0, r2;
        java.lang.Object $r1;
        int $i0, $i1;
        boolean $z0;
        double $d0;
        long $l2, $l3;
        byte $b4;
        org.apache.commons.math3.util.OpenIntToDoubleHashMap $r3;
        org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator $r4;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealVector;

        $r1 := @parameter0: java.lang.Object;

        if r0 != $r1 goto label1;

        return 1;

     label1:
        $z0 = $r1 instanceof org.apache.commons.math3.linear.OpenMapRealVector;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (org.apache.commons.math3.linear.OpenMapRealVector) $r1;

        $i1 = r0.<org.apache.commons.math3.linear.OpenMapRealVector: int virtualSize>;

        $i0 = r2.<org.apache.commons.math3.linear.OpenMapRealVector: int virtualSize>;

        if $i1 == $i0 goto label3;

        return 0;

     label3:
        $d0 = r0.<org.apache.commons.math3.linear.OpenMapRealVector: double epsilon>;

        $l2 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $d0 = r2.<org.apache.commons.math3.linear.OpenMapRealVector: double epsilon>;

        $l3 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $b4 = $l2 cmp $l3;

        if $b4 == 0 goto label4;

        return 0;

     label4:
        $r3 = r0.<org.apache.commons.math3.linear.OpenMapRealVector: org.apache.commons.math3.util.OpenIntToDoubleHashMap entries>;

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator iterator()>();

     label5:
        $z0 = virtualinvoke $r4.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        virtualinvoke $r4.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: void advance()>();

        $i0 = virtualinvoke $r4.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: int key()>();

        $d0 = virtualinvoke r2.<org.apache.commons.math3.linear.OpenMapRealVector: double getEntry(int)>($i0);

        $l2 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $d0 = virtualinvoke $r4.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: double value()>();

        $l3 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $b4 = $l2 cmp $l3;

        if $b4 == 0 goto label5;

        return 0;

     label6:
        $r3 = specialinvoke r2.<org.apache.commons.math3.linear.OpenMapRealVector: org.apache.commons.math3.util.OpenIntToDoubleHashMap getEntries()>();

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator iterator()>();

     label7:
        $z0 = virtualinvoke $r4.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        virtualinvoke $r4.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: void advance()>();

        $d0 = virtualinvoke $r4.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: double value()>();

        $l2 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $i0 = virtualinvoke $r4.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: int key()>();

        $d0 = virtualinvoke r0.<org.apache.commons.math3.linear.OpenMapRealVector: double getEntry(int)>($i0);

        $l3 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $b4 = $l2 cmp $l3;

        if $b4 == 0 goto label7;

        return 0;

     label8:
        return 1;
    }
    public int getDimension()
    {
        org.apache.commons.math3.linear.OpenMapRealVector r0;
        int i0;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealVector;

        i0 = r0.<org.apache.commons.math3.linear.OpenMapRealVector: int virtualSize>;

        return i0;
    }
    public double getDistance(org.apache.commons.math3.linear.OpenMapRealVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.OpenMapRealVector r0, $r1;
        double d0, d1, $d2;
        int $i0;
        org.apache.commons.math3.util.OpenIntToDoubleHashMap $r2;
        org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator $r3;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealVector;

        $r1 := @parameter0: org.apache.commons.math3.linear.OpenMapRealVector;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.linear.OpenMapRealVector: int getDimension()>();

        virtualinvoke r0.<org.apache.commons.math3.linear.OpenMapRealVector: void checkVectorDimensions(int)>($i0);

        $r2 = r0.<org.apache.commons.math3.linear.OpenMapRealVector: org.apache.commons.math3.util.OpenIntToDoubleHashMap entries>;

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator iterator()>();

        d1 = 0.0;

     label1:
        $z0 = virtualinvoke $r3.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        virtualinvoke $r3.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: void advance()>();

        $i0 = virtualinvoke $r3.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: int key()>();

        d0 = virtualinvoke $r3.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: double value()>();

        $d2 = virtualinvoke $r1.<org.apache.commons.math3.linear.OpenMapRealVector: double getEntry(int)>($i0);

        d0 = d0 - $d2;

        d0 = d0 * d0;

        d1 = d1 + d0;

        goto label1;

     label2:
        $r2 = specialinvoke $r1.<org.apache.commons.math3.linear.OpenMapRealVector: org.apache.commons.math3.util.OpenIntToDoubleHashMap getEntries()>();

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator iterator()>();

     label3:
        $z0 = virtualinvoke $r3.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        virtualinvoke $r3.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: void advance()>();

        $i0 = virtualinvoke $r3.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: int key()>();

        $r2 = r0.<org.apache.commons.math3.linear.OpenMapRealVector: org.apache.commons.math3.util.OpenIntToDoubleHashMap entries>;

        $z0 = virtualinvoke $r2.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: boolean containsKey(int)>($i0);

        if $z0 != 0 goto label3;

        d0 = virtualinvoke $r3.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: double value()>();

        d0 = d0 * d0;

        d1 = d1 + d0;

        goto label3;

     label4:
        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d1);

        return d1;
    }
    public double getDistance(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.OpenMapRealVector r0, r2;
        org.apache.commons.math3.linear.RealVector r1;
        int $i0;
        boolean $z0;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealVector;

        r1 := @parameter0: org.apache.commons.math3.linear.RealVector;

        $i0 = virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        virtualinvoke r0.<org.apache.commons.math3.linear.OpenMapRealVector: void checkVectorDimensions(int)>($i0);

        $z0 = r1 instanceof org.apache.commons.math3.linear.OpenMapRealVector;

        if $z0 == 0 goto label1;

        r2 = (org.apache.commons.math3.linear.OpenMapRealVector) r1;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.linear.OpenMapRealVector: double getDistance(org.apache.commons.math3.linear.OpenMapRealVector)>(r2);

        return $d0;

     label1:
        $d0 = specialinvoke r0.<org.apache.commons.math3.linear.SparseRealVector: double getDistance(org.apache.commons.math3.linear.RealVector)>(r1);

        return $d0;
    }
    public double getEntry(int) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.OpenMapRealVector r0;
        int $i0;
        double $d0;
        org.apache.commons.math3.util.OpenIntToDoubleHashMap $r1;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealVector;

        $i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.commons.math3.linear.OpenMapRealVector: void checkIndex(int)>($i0);

        $r1 = r0.<org.apache.commons.math3.linear.OpenMapRealVector: org.apache.commons.math3.util.OpenIntToDoubleHashMap entries>;

        $d0 = virtualinvoke $r1.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: double get(int)>($i0);

        return $d0;
    }
    public double getL1Distance(org.apache.commons.math3.linear.OpenMapRealVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.OpenMapRealVector r0, $r1;
        int $i0;
        double d0, $d1, $d2;
        org.apache.commons.math3.util.OpenIntToDoubleHashMap $r2;
        org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator $r3;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealVector;

        $r1 := @parameter0: org.apache.commons.math3.linear.OpenMapRealVector;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.linear.OpenMapRealVector: int getDimension()>();

        virtualinvoke r0.<org.apache.commons.math3.linear.OpenMapRealVector: void checkVectorDimensions(int)>($i0);

        d0 = 0.0;

        $r2 = r0.<org.apache.commons.math3.linear.OpenMapRealVector: org.apache.commons.math3.util.OpenIntToDoubleHashMap entries>;

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator iterator()>();

     label1:
        $z0 = virtualinvoke $r3.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        virtualinvoke $r3.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: void advance()>();

        $d1 = virtualinvoke $r3.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: double value()>();

        $i0 = virtualinvoke $r3.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: int key()>();

        $d2 = virtualinvoke $r1.<org.apache.commons.math3.linear.OpenMapRealVector: double getEntry(int)>($i0);

        $d1 = $d1 - $d2;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d1);

        d0 = d0 + $d1;

        goto label1;

     label2:
        $r2 = specialinvoke $r1.<org.apache.commons.math3.linear.OpenMapRealVector: org.apache.commons.math3.util.OpenIntToDoubleHashMap getEntries()>();

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator iterator()>();

     label3:
        $z0 = virtualinvoke $r3.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        virtualinvoke $r3.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: void advance()>();

        $i0 = virtualinvoke $r3.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: int key()>();

        $r2 = r0.<org.apache.commons.math3.linear.OpenMapRealVector: org.apache.commons.math3.util.OpenIntToDoubleHashMap entries>;

        $z0 = virtualinvoke $r2.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: boolean containsKey(int)>($i0);

        if $z0 != 0 goto label3;

        $d1 = virtualinvoke $r3.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: double value()>();

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d1);

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d1);

        d0 = d0 + $d1;

        goto label3;

     label4:
        return d0;
    }
    public double getL1Distance(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.OpenMapRealVector r0, r2;
        org.apache.commons.math3.linear.RealVector r1;
        int $i0;
        boolean $z0;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealVector;

        r1 := @parameter0: org.apache.commons.math3.linear.RealVector;

        $i0 = virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        virtualinvoke r0.<org.apache.commons.math3.linear.OpenMapRealVector: void checkVectorDimensions(int)>($i0);

        $z0 = r1 instanceof org.apache.commons.math3.linear.OpenMapRealVector;

        if $z0 == 0 goto label1;

        r2 = (org.apache.commons.math3.linear.OpenMapRealVector) r1;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.linear.OpenMapRealVector: double getL1Distance(org.apache.commons.math3.linear.OpenMapRealVector)>(r2);

        return $d0;

     label1:
        $d0 = specialinvoke r0.<org.apache.commons.math3.linear.SparseRealVector: double getL1Distance(org.apache.commons.math3.linear.RealVector)>(r1);

        return $d0;
    }
    public double getLInfDistance(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.OpenMapRealVector r0, r2;
        org.apache.commons.math3.linear.RealVector r1;
        int $i0;
        boolean $z0;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealVector;

        r1 := @parameter0: org.apache.commons.math3.linear.RealVector;

        $i0 = virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        virtualinvoke r0.<org.apache.commons.math3.linear.OpenMapRealVector: void checkVectorDimensions(int)>($i0);

        $z0 = r1 instanceof org.apache.commons.math3.linear.OpenMapRealVector;

        if $z0 == 0 goto label1;

        r2 = (org.apache.commons.math3.linear.OpenMapRealVector) r1;

        $d0 = specialinvoke r0.<org.apache.commons.math3.linear.OpenMapRealVector: double getLInfDistance(org.apache.commons.math3.linear.OpenMapRealVector)>(r2);

        return $d0;

     label1:
        $d0 = specialinvoke r0.<org.apache.commons.math3.linear.SparseRealVector: double getLInfDistance(org.apache.commons.math3.linear.RealVector)>(r1);

        return $d0;
    }
    public double getSparsity()
    {
        org.apache.commons.math3.linear.OpenMapRealVector r0;
        org.apache.commons.math3.util.OpenIntToDoubleHashMap $r1;
        int $i0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealVector;

        $r1 = r0.<org.apache.commons.math3.linear.OpenMapRealVector: org.apache.commons.math3.util.OpenIntToDoubleHashMap entries>;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: int size()>();

        $d0 = (double) $i0;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.linear.OpenMapRealVector: int getDimension()>();

        $d1 = (double) $i0;

        $d0 = $d0 / $d1;

        return $d0;
    }
    public org.apache.commons.math3.linear.OpenMapRealVector getSubVector(int, int) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.OpenMapRealVector r0, r1;
        int $i0, $i1, $i2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        org.apache.commons.math3.exception.NotPositiveException $r3;
        java.lang.Integer $r4;
        org.apache.commons.math3.util.OpenIntToDoubleHashMap $r5;
        org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator $r6;
        boolean $z0;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealVector;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        virtualinvoke r0.<org.apache.commons.math3.linear.OpenMapRealVector: void checkIndex(int)>($i0);

        if $i1 >= 0 goto label1;

        $r3 = new org.apache.commons.math3.exception.NotPositiveException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        specialinvoke $r3.<org.apache.commons.math3.exception.NotPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r2, $r4);

        throw $r3;

     label1:
        $i2 = $i0 + $i1;

        $i2 = $i2 + -1;

        virtualinvoke r0.<org.apache.commons.math3.linear.OpenMapRealVector: void checkIndex(int)>($i2);

        r1 = new org.apache.commons.math3.linear.OpenMapRealVector;

        specialinvoke r1.<org.apache.commons.math3.linear.OpenMapRealVector: void <init>(int)>($i1);

        $i1 = $i0 + $i1;

        $r5 = r0.<org.apache.commons.math3.linear.OpenMapRealVector: org.apache.commons.math3.util.OpenIntToDoubleHashMap entries>;

        $r6 = virtualinvoke $r5.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator iterator()>();

     label2:
        $z0 = virtualinvoke $r6.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        virtualinvoke $r6.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: void advance()>();

        $i2 = virtualinvoke $r6.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: int key()>();

        if $i2 < $i0 goto label2;

        if $i2 >= $i1 goto label2;

        $i2 = $i2 - $i0;

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: double value()>();

        virtualinvoke r1.<org.apache.commons.math3.linear.OpenMapRealVector: void setEntry(int,double)>($i2, $d0);

        goto label2;

     label3:
        return r1;
    }
    public volatile org.apache.commons.math3.linear.RealVector getSubVector(int, int) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.OpenMapRealVector r0;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealVector;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        r0 = virtualinvoke r0.<org.apache.commons.math3.linear.OpenMapRealVector: org.apache.commons.math3.linear.OpenMapRealVector getSubVector(int,int)>($i0, $i1);

        return r0;
    }
    public int hashCode()
    {
        org.apache.commons.math3.linear.OpenMapRealVector r0;
        double $d0;
        long $l0, $l1;
        int $i2, $i3;
        org.apache.commons.math3.util.OpenIntToDoubleHashMap $r1;
        org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealVector;

        $d0 = r0.<org.apache.commons.math3.linear.OpenMapRealVector: double epsilon>;

        $l0 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $l1 = $l0 >>> 32;

        $l0 = $l1 ^ $l0;

        $i2 = (int) $l0;

        $i2 = $i2 + 31;

        $i2 = $i2 * 31;

        $i3 = r0.<org.apache.commons.math3.linear.OpenMapRealVector: int virtualSize>;

        $i2 = $i2 + $i3;

        $r1 = r0.<org.apache.commons.math3.linear.OpenMapRealVector: org.apache.commons.math3.util.OpenIntToDoubleHashMap entries>;

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator iterator()>();

     label1:
        $z0 = virtualinvoke $r2.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        virtualinvoke $r2.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: void advance()>();

        $d0 = virtualinvoke $r2.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: double value()>();

        $l0 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $i2 = $i2 * 31;

        $l1 = $l0 >> 32;

        $l0 = $l1 ^ $l0;

        $i3 = (int) $l0;

        $i2 = $i2 + $i3;

        goto label1;

     label2:
        return $i2;
    }
    protected boolean isDefaultValue(double)
    {
        org.apache.commons.math3.linear.OpenMapRealVector r0;
        double $d0, $d1;
        byte $b0;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealVector;

        $d0 := @parameter0: double;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        $d0 = r0.<org.apache.commons.math3.linear.OpenMapRealVector: double epsilon>;

        $b0 = $d1 cmpg $d0;

        if $b0 >= 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean isInfinite()
    {
        org.apache.commons.math3.linear.OpenMapRealVector r0;
        boolean z0, $z1;
        org.apache.commons.math3.util.OpenIntToDoubleHashMap $r1;
        org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator $r2;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealVector;

        z0 = 0;

        $r1 = r0.<org.apache.commons.math3.linear.OpenMapRealVector: org.apache.commons.math3.util.OpenIntToDoubleHashMap entries>;

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator iterator()>();

     label1:
        $z1 = virtualinvoke $r2.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        virtualinvoke $r2.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: void advance()>();

        $d0 = virtualinvoke $r2.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: double value()>();

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z1 == 0 goto label2;

        return 0;

     label2:
        $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d0);

        if $z1 == 0 goto label1;

        z0 = 1;

        goto label1;

     label3:
        return z0;
    }
    public boolean isNaN()
    {
        org.apache.commons.math3.linear.OpenMapRealVector r0;
        org.apache.commons.math3.util.OpenIntToDoubleHashMap $r1;
        org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator $r2;
        boolean $z0;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealVector;

        $r1 = r0.<org.apache.commons.math3.linear.OpenMapRealVector: org.apache.commons.math3.util.OpenIntToDoubleHashMap entries>;

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator iterator()>();

     label1:
        $z0 = virtualinvoke $r2.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        virtualinvoke $r2.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: void advance()>();

        $d0 = virtualinvoke $r2.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: double value()>();

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 == 0 goto label1;

        return 1;

     label2:
        return 0;
    }
    public org.apache.commons.math3.linear.OpenMapRealVector mapAdd(double)
    {
        org.apache.commons.math3.linear.OpenMapRealVector r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealVector;

        $d0 := @parameter0: double;

        r0 = virtualinvoke r0.<org.apache.commons.math3.linear.OpenMapRealVector: org.apache.commons.math3.linear.OpenMapRealVector copy()>();

        r0 = virtualinvoke r0.<org.apache.commons.math3.linear.OpenMapRealVector: org.apache.commons.math3.linear.OpenMapRealVector mapAddToSelf(double)>($d0);

        return r0;
    }
    public volatile org.apache.commons.math3.linear.RealVector mapAdd(double)
    {
        org.apache.commons.math3.linear.OpenMapRealVector r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealVector;

        $d0 := @parameter0: double;

        r0 = virtualinvoke r0.<org.apache.commons.math3.linear.OpenMapRealVector: org.apache.commons.math3.linear.OpenMapRealVector mapAdd(double)>($d0);

        return r0;
    }
    public org.apache.commons.math3.linear.OpenMapRealVector mapAddToSelf(double)
    {
        org.apache.commons.math3.linear.OpenMapRealVector r0;
        double $d0, $d1;
        int $i0, i1;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealVector;

        $d0 := @parameter0: double;

        i1 = 0;

     label1:
        $i0 = r0.<org.apache.commons.math3.linear.OpenMapRealVector: int virtualSize>;

        if i1 >= $i0 goto label2;

        $d1 = virtualinvoke r0.<org.apache.commons.math3.linear.OpenMapRealVector: double getEntry(int)>(i1);

        $d1 = $d1 + $d0;

        virtualinvoke r0.<org.apache.commons.math3.linear.OpenMapRealVector: void setEntry(int,double)>(i1, $d1);

        i1 = i1 + 1;

        goto label1;

     label2:
        return r0;
    }
    public volatile org.apache.commons.math3.linear.RealVector mapAddToSelf(double)
    {
        org.apache.commons.math3.linear.OpenMapRealVector r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealVector;

        $d0 := @parameter0: double;

        r0 = virtualinvoke r0.<org.apache.commons.math3.linear.OpenMapRealVector: org.apache.commons.math3.linear.OpenMapRealVector mapAddToSelf(double)>($d0);

        return r0;
    }
    public void set(double)
    {
        org.apache.commons.math3.linear.OpenMapRealVector r0;
        double $d0;
        int $i0, i1;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealVector;

        $d0 := @parameter0: double;

        i1 = 0;

     label1:
        $i0 = r0.<org.apache.commons.math3.linear.OpenMapRealVector: int virtualSize>;

        if i1 >= $i0 goto label2;

        virtualinvoke r0.<org.apache.commons.math3.linear.OpenMapRealVector: void setEntry(int,double)>(i1, $d0);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
    public void setEntry(int, double) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.OpenMapRealVector r0;
        int $i0;
        double $d0;
        boolean $z0;
        org.apache.commons.math3.util.OpenIntToDoubleHashMap $r1;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealVector;

        $i0 := @parameter0: int;

        $d0 := @parameter1: double;

        virtualinvoke r0.<org.apache.commons.math3.linear.OpenMapRealVector: void checkIndex(int)>($i0);

        $z0 = virtualinvoke r0.<org.apache.commons.math3.linear.OpenMapRealVector: boolean isDefaultValue(double)>($d0);

        if $z0 != 0 goto label1;

        $r1 = r0.<org.apache.commons.math3.linear.OpenMapRealVector: org.apache.commons.math3.util.OpenIntToDoubleHashMap entries>;

        virtualinvoke $r1.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: double put(int,double)>($i0, $d0);

        return;

     label1:
        $r1 = r0.<org.apache.commons.math3.linear.OpenMapRealVector: org.apache.commons.math3.util.OpenIntToDoubleHashMap entries>;

        $z0 = virtualinvoke $r1.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: boolean containsKey(int)>($i0);

        if $z0 == 0 goto label2;

        $r1 = r0.<org.apache.commons.math3.linear.OpenMapRealVector: org.apache.commons.math3.util.OpenIntToDoubleHashMap entries>;

        virtualinvoke $r1.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: double remove(int)>($i0);

     label2:
        return;
    }
    public void setSubVector(int, org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.OpenMapRealVector r0;
        int $i0, $i1, $i2;
        org.apache.commons.math3.linear.RealVector $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealVector;

        $i0 := @parameter0: int;

        $r1 := @parameter1: org.apache.commons.math3.linear.RealVector;

        virtualinvoke r0.<org.apache.commons.math3.linear.OpenMapRealVector: void checkIndex(int)>($i0);

        $i1 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        $i1 = $i1 + $i0;

        $i1 = $i1 + -1;

        virtualinvoke r0.<org.apache.commons.math3.linear.OpenMapRealVector: void checkIndex(int)>($i1);

        $i1 = 0;

     label1:
        $i2 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        if $i1 >= $i2 goto label2;

        $i2 = $i1 + $i0;

        $d0 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>($i1);

        virtualinvoke r0.<org.apache.commons.math3.linear.OpenMapRealVector: void setEntry(int,double)>($i2, $d0);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return;
    }
    public java.util.Iterator sparseIterator()
    {
        org.apache.commons.math3.linear.OpenMapRealVector r0;
        org.apache.commons.math3.linear.OpenMapRealVector$OpenMapSparseIterator $r1;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealVector;

        $r1 = new org.apache.commons.math3.linear.OpenMapRealVector$OpenMapSparseIterator;

        specialinvoke $r1.<org.apache.commons.math3.linear.OpenMapRealVector$OpenMapSparseIterator: void <init>(org.apache.commons.math3.linear.OpenMapRealVector)>(r0);

        return $r1;
    }
    public org.apache.commons.math3.linear.OpenMapRealVector subtract(org.apache.commons.math3.linear.OpenMapRealVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.OpenMapRealVector r0, $r1, $r2;
        int $i0;
        org.apache.commons.math3.util.OpenIntToDoubleHashMap $r3;
        org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator $r4;
        boolean $z0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealVector;

        $r1 := @parameter0: org.apache.commons.math3.linear.OpenMapRealVector;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.linear.OpenMapRealVector: int getDimension()>();

        virtualinvoke r0.<org.apache.commons.math3.linear.OpenMapRealVector: void checkVectorDimensions(int)>($i0);

        $r2 = virtualinvoke r0.<org.apache.commons.math3.linear.OpenMapRealVector: org.apache.commons.math3.linear.OpenMapRealVector copy()>();

        $r3 = specialinvoke $r1.<org.apache.commons.math3.linear.OpenMapRealVector: org.apache.commons.math3.util.OpenIntToDoubleHashMap getEntries()>();

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator iterator()>();

     label1:
        $z0 = virtualinvoke $r4.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        virtualinvoke $r4.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: void advance()>();

        $i0 = virtualinvoke $r4.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: int key()>();

        $r3 = r0.<org.apache.commons.math3.linear.OpenMapRealVector: org.apache.commons.math3.util.OpenIntToDoubleHashMap entries>;

        $z0 = virtualinvoke $r3.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: boolean containsKey(int)>($i0);

        if $z0 == 0 goto label2;

        $r3 = r0.<org.apache.commons.math3.linear.OpenMapRealVector: org.apache.commons.math3.util.OpenIntToDoubleHashMap entries>;

        $d0 = virtualinvoke $r3.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: double get(int)>($i0);

        $d1 = virtualinvoke $r4.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: double value()>();

        $d0 = $d0 - $d1;

        virtualinvoke $r2.<org.apache.commons.math3.linear.OpenMapRealVector: void setEntry(int,double)>($i0, $d0);

        goto label1;

     label2:
        $d0 = virtualinvoke $r4.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: double value()>();

        $d0 = neg $d0;

        virtualinvoke $r2.<org.apache.commons.math3.linear.OpenMapRealVector: void setEntry(int,double)>($i0, $d0);

        goto label1;

     label3:
        return $r2;
    }
    public org.apache.commons.math3.linear.RealVector subtract(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.OpenMapRealVector r0, r2;
        org.apache.commons.math3.linear.RealVector r1;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealVector;

        r1 := @parameter0: org.apache.commons.math3.linear.RealVector;

        $i0 = virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        virtualinvoke r0.<org.apache.commons.math3.linear.OpenMapRealVector: void checkVectorDimensions(int)>($i0);

        $z0 = r1 instanceof org.apache.commons.math3.linear.OpenMapRealVector;

        if $z0 == 0 goto label1;

        r2 = (org.apache.commons.math3.linear.OpenMapRealVector) r1;

        r0 = virtualinvoke r0.<org.apache.commons.math3.linear.OpenMapRealVector: org.apache.commons.math3.linear.OpenMapRealVector subtract(org.apache.commons.math3.linear.OpenMapRealVector)>(r2);

        return r0;

     label1:
        r1 = specialinvoke r0.<org.apache.commons.math3.linear.SparseRealVector: org.apache.commons.math3.linear.RealVector subtract(org.apache.commons.math3.linear.RealVector)>(r1);

        return r1;
    }
    public double[] toArray()
    {
        org.apache.commons.math3.linear.OpenMapRealVector r0;
        double[] r1;
        int $i0;
        org.apache.commons.math3.util.OpenIntToDoubleHashMap $r2;
        org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator $r3;
        boolean $z0;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealVector;

        $i0 = r0.<org.apache.commons.math3.linear.OpenMapRealVector: int virtualSize>;

        r1 = newarray (double)[$i0];

        $r2 = r0.<org.apache.commons.math3.linear.OpenMapRealVector: org.apache.commons.math3.util.OpenIntToDoubleHashMap entries>;

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator iterator()>();

     label1:
        $z0 = virtualinvoke $r3.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        virtualinvoke $r3.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: void advance()>();

        $i0 = virtualinvoke $r3.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: int key()>();

        $d0 = virtualinvoke $r3.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: double value()>();

        r1[$i0] = $d0;

        goto label1;

     label2:
        return r1;
    }
    public org.apache.commons.math3.linear.OpenMapRealVector unitVector() throws org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.linear.OpenMapRealVector r0;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealVector;

        r0 = virtualinvoke r0.<org.apache.commons.math3.linear.OpenMapRealVector: org.apache.commons.math3.linear.OpenMapRealVector copy()>();

        virtualinvoke r0.<org.apache.commons.math3.linear.OpenMapRealVector: void unitize()>();

        return r0;
    }
    public volatile org.apache.commons.math3.linear.RealVector unitVector() throws org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.linear.OpenMapRealVector r0;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealVector;

        r0 = virtualinvoke r0.<org.apache.commons.math3.linear.OpenMapRealVector: org.apache.commons.math3.linear.OpenMapRealVector unitVector()>();

        return r0;
    }
    public void unitize() throws org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.linear.OpenMapRealVector r0;
        double $d0, $d1;
        boolean $z0;
        org.apache.commons.math3.exception.MathArithmeticException $r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        java.lang.Object[] $r3;
        org.apache.commons.math3.util.OpenIntToDoubleHashMap $r4;
        org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator $r5;
        int $i0;

        r0 := @this: org.apache.commons.math3.linear.OpenMapRealVector;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.linear.OpenMapRealVector: double getNorm()>();

        $z0 = virtualinvoke r0.<org.apache.commons.math3.linear.OpenMapRealVector: boolean isDefaultValue(double)>($d0);

        if $z0 == 0 goto label1;

        $r1 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats ZERO_NORM>;

        $r3 = newarray (java.lang.Object)[0];

        specialinvoke $r1.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r2, $r3);

        throw $r1;

     label1:
        $r4 = r0.<org.apache.commons.math3.linear.OpenMapRealVector: org.apache.commons.math3.util.OpenIntToDoubleHashMap entries>;

        $r5 = virtualinvoke $r4.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator iterator()>();

     label2:
        $z0 = virtualinvoke $r5.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        virtualinvoke $r5.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: void advance()>();

        $r4 = r0.<org.apache.commons.math3.linear.OpenMapRealVector: org.apache.commons.math3.util.OpenIntToDoubleHashMap entries>;

        $i0 = virtualinvoke $r5.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: int key()>();

        $d1 = virtualinvoke $r5.<org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator: double value()>();

        $d1 = $d1 / $d0;

        virtualinvoke $r4.<org.apache.commons.math3.util.OpenIntToDoubleHashMap: double put(int,double)>($i0, $d1);

        goto label2;

     label3:
        return;
    }
