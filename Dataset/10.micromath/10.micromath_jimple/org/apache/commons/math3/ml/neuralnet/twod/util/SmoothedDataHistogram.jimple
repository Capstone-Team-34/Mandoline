org.apache.commons.math3.ml.neuralnet.twod.util.SmoothedDataHistogram extends java.lang.Object implements org.apache.commons.math3.ml.neuralnet.twod.util.MapDataVisualization
private final org.apache.commons.math3.ml.distance.DistanceMeasure distance
private final double membershipNormalization
private final int smoothingBins
    public void <init>(int, org.apache.commons.math3.ml.distance.DistanceMeasure)
    {
        org.apache.commons.math3.ml.neuralnet.twod.util.SmoothedDataHistogram r0;
        int $i0, $i1, i2;
        org.apache.commons.math3.ml.distance.DistanceMeasure $r1;
        double d0, $d1;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.twod.util.SmoothedDataHistogram;

        $i0 := @parameter0: int;

        $r1 := @parameter1: org.apache.commons.math3.ml.distance.DistanceMeasure;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.ml.neuralnet.twod.util.SmoothedDataHistogram: int smoothingBins> = $i0;

        r0.<org.apache.commons.math3.ml.neuralnet.twod.util.SmoothedDataHistogram: org.apache.commons.math3.ml.distance.DistanceMeasure distance> = $r1;

        d0 = 0.0;

        i2 = 0;

     label1:
        if i2 >= $i0 goto label2;

        $i1 = $i0 - i2;

        $d1 = (double) $i1;

        d0 = d0 + $d1;

        i2 = i2 + 1;

        goto label1;

     label2:
        d0 = 1.0 / d0;

        r0.<org.apache.commons.math3.ml.neuralnet.twod.util.SmoothedDataHistogram: double membershipNormalization> = d0;

        return;
    }
    public double[][] computeImage(org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D, java.lang.Iterable)
    {
        org.apache.commons.math3.ml.neuralnet.twod.util.SmoothedDataHistogram r0;
        org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D $r1;
        java.lang.Iterable r2;
        org.apache.commons.math3.ml.neuralnet.twod.util.LocationFinder r3;
        int i0, $i1, $i2, $i3;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r4;
        java.lang.Integer $r5, $r6;
        int[] $r7;
        java.lang.Class $r8;
        java.lang.Object $r9;
        double[][] r10;
        java.util.Iterator $r11;
        boolean $z0;
        double[] r12;
        org.apache.commons.math3.ml.neuralnet.Network $r13;
        org.apache.commons.math3.ml.distance.DistanceMeasure $r14;
        org.apache.commons.math3.ml.neuralnet.Neuron[] $r15;
        org.apache.commons.math3.ml.neuralnet.Neuron $r16;
        org.apache.commons.math3.ml.neuralnet.twod.util.LocationFinder$Location $r17;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.twod.util.SmoothedDataHistogram;

        $r1 := @parameter0: org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D;

        r2 := @parameter1: java.lang.Iterable;

        $i1 = virtualinvoke $r1.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int getNumberOfRows()>();

        $i2 = virtualinvoke $r1.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int getNumberOfColumns()>();

        i0 = $i1 * $i2;

        $i3 = r0.<org.apache.commons.math3.ml.neuralnet.twod.util.SmoothedDataHistogram: int smoothingBins>;

        if i0 >= $i3 goto label1;

        $r4 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        i0 = r0.<org.apache.commons.math3.ml.neuralnet.twod.util.SmoothedDataHistogram: int smoothingBins>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r4.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r5, $r6, 1);

        throw $r4;

     label1:
        r3 = new org.apache.commons.math3.ml.neuralnet.twod.util.LocationFinder;

        specialinvoke r3.<org.apache.commons.math3.ml.neuralnet.twod.util.LocationFinder: void <init>(org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D)>($r1);

        $r7 = newarray (int)[2];

        $r7[0] = $i1;

        $r7[1] = $i2;

        $r8 = <java.lang.Double: java.lang.Class TYPE>;

        $r9 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r8, $r7);

        r10 = (double[][]) $r9;

        $r11 = interfaceinvoke r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r9 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r12 = (double[]) $r9;

        $r13 = virtualinvoke $r1.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: org.apache.commons.math3.ml.neuralnet.Network getNetwork()>();

        $r14 = r0.<org.apache.commons.math3.ml.neuralnet.twod.util.SmoothedDataHistogram: org.apache.commons.math3.ml.distance.DistanceMeasure distance>;

        $r15 = staticinvoke <org.apache.commons.math3.ml.neuralnet.MapUtils: org.apache.commons.math3.ml.neuralnet.Neuron[] sort(double[],java.lang.Iterable,org.apache.commons.math3.ml.distance.DistanceMeasure)>(r12, $r13, $r14);

        i0 = 0;

     label3:
        $i1 = r0.<org.apache.commons.math3.ml.neuralnet.twod.util.SmoothedDataHistogram: int smoothingBins>;

        if i0 >= $i1 goto label2;

        $r16 = $r15[i0];

        $r17 = virtualinvoke r3.<org.apache.commons.math3.ml.neuralnet.twod.util.LocationFinder: org.apache.commons.math3.ml.neuralnet.twod.util.LocationFinder$Location getLocation(org.apache.commons.math3.ml.neuralnet.Neuron)>($r16);

        $i2 = virtualinvoke $r17.<org.apache.commons.math3.ml.neuralnet.twod.util.LocationFinder$Location: int getRow()>();

        $i1 = virtualinvoke $r17.<org.apache.commons.math3.ml.neuralnet.twod.util.LocationFinder$Location: int getColumn()>();

        r12 = r10[$i2];

        $d0 = r12[$i1];

        $i2 = r0.<org.apache.commons.math3.ml.neuralnet.twod.util.SmoothedDataHistogram: int smoothingBins>;

        $i2 = $i2 - i0;

        $d1 = (double) $i2;

        $d2 = r0.<org.apache.commons.math3.ml.neuralnet.twod.util.SmoothedDataHistogram: double membershipNormalization>;

        $d1 = $d1 * $d2;

        $d0 = $d0 + $d1;

        r12[$i1] = $d0;

        i0 = i0 + 1;

        goto label3;

     label4:
        return r10;
    }
