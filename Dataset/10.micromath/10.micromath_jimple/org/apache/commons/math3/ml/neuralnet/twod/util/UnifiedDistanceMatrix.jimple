org.apache.commons.math3.ml.neuralnet.twod.util.UnifiedDistanceMatrix extends java.lang.Object implements org.apache.commons.math3.ml.neuralnet.twod.util.MapVisualization
private final org.apache.commons.math3.ml.distance.DistanceMeasure distance
private final boolean individualDistances
    public void <init>(boolean, org.apache.commons.math3.ml.distance.DistanceMeasure)
    {
        org.apache.commons.math3.ml.neuralnet.twod.util.UnifiedDistanceMatrix r0;
        boolean $z0;
        org.apache.commons.math3.ml.distance.DistanceMeasure $r1;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.twod.util.UnifiedDistanceMatrix;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: org.apache.commons.math3.ml.distance.DistanceMeasure;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.ml.neuralnet.twod.util.UnifiedDistanceMatrix: boolean individualDistances> = $z0;

        r0.<org.apache.commons.math3.ml.neuralnet.twod.util.UnifiedDistanceMatrix: org.apache.commons.math3.ml.distance.DistanceMeasure distance> = $r1;

        return;
    }
    private double[][] averageDistances(org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D)
    {
        org.apache.commons.math3.ml.neuralnet.twod.util.UnifiedDistanceMatrix r0;
        org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D $r1;
        int $i0, $i1, i2, i3, i4;
        int[] $r2;
        java.lang.Class $r3;
        java.lang.Object $r4;
        double[][] r5;
        org.apache.commons.math3.ml.neuralnet.Network $r6;
        org.apache.commons.math3.ml.neuralnet.Neuron $r7;
        java.util.Collection $r8;
        double[] $r9, $r12;
        double d0, $d1;
        java.util.Iterator $r10;
        boolean $z0;
        org.apache.commons.math3.ml.distance.DistanceMeasure $r11;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.twod.util.UnifiedDistanceMatrix;

        $r1 := @parameter0: org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int getNumberOfRows()>();

        $i1 = virtualinvoke $r1.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int getNumberOfColumns()>();

        $r2 = newarray (int)[2];

        $r2[0] = $i0;

        $r2[1] = $i1;

        $r3 = <java.lang.Double: java.lang.Class TYPE>;

        $r4 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r3, $r2);

        r5 = (double[][]) $r4;

        $r6 = virtualinvoke $r1.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: org.apache.commons.math3.ml.neuralnet.Network getNetwork()>();

        i2 = 0;

     label1:
        if i2 >= $i0 goto label6;

        i3 = 0;

     label2:
        if i3 >= $i1 goto label5;

        $r7 = virtualinvoke $r1.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: org.apache.commons.math3.ml.neuralnet.Neuron getNeuron(int,int)>(i2, i3);

        $r8 = virtualinvoke $r6.<org.apache.commons.math3.ml.neuralnet.Network: java.util.Collection getNeighbours(org.apache.commons.math3.ml.neuralnet.Neuron)>($r7);

        $r9 = virtualinvoke $r7.<org.apache.commons.math3.ml.neuralnet.Neuron: double[] getFeatures()>();

        d0 = 0.0;

        i4 = 0;

        $r10 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (org.apache.commons.math3.ml.neuralnet.Neuron) $r4;

        i4 = i4 + 1;

        $r11 = r0.<org.apache.commons.math3.ml.neuralnet.twod.util.UnifiedDistanceMatrix: org.apache.commons.math3.ml.distance.DistanceMeasure distance>;

        $r12 = virtualinvoke $r7.<org.apache.commons.math3.ml.neuralnet.Neuron: double[] getFeatures()>();

        $d1 = interfaceinvoke $r11.<org.apache.commons.math3.ml.distance.DistanceMeasure: double compute(double[],double[])>($r9, $r12);

        d0 = d0 + $d1;

        goto label3;

     label4:
        $r9 = r5[i2];

        $d1 = (double) i4;

        d0 = d0 / $d1;

        $r9[i3] = d0;

        i3 = i3 + 1;

        goto label2;

     label5:
        i2 = i2 + 1;

        goto label1;

     label6:
        return r5;
    }
    private double[][] individualDistances(org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D)
    {
        org.apache.commons.math3.ml.neuralnet.twod.util.UnifiedDistanceMatrix r0;
        org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D $r1;
        int i0, i1, $i2, $i3, i4, $i5, $i6;
        double $d0, d1;
        int[] $r2;
        java.lang.Class $r3;
        java.lang.Object $r4;
        double[][] r5;
        org.apache.commons.math3.ml.neuralnet.Neuron $r6, $r13, $r14, $r15;
        double[] $r7, $r10, $r12;
        org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D$HorizontalDirection $r8;
        org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D$VerticalDirection $r9;
        org.apache.commons.math3.ml.distance.DistanceMeasure $r11;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.twod.util.UnifiedDistanceMatrix;

        $r1 := @parameter0: org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D;

        i1 = virtualinvoke $r1.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int getNumberOfRows()>();

        i0 = virtualinvoke $r1.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int getNumberOfColumns()>();

        $i2 = i1 * 2;

        $i2 = $i2 + 1;

        $i3 = i0 * 2;

        $i3 = $i3 + 1;

        $r2 = newarray (int)[2];

        $r2[0] = $i2;

        $r2[1] = $i3;

        $r3 = <java.lang.Double: java.lang.Class TYPE>;

        $r4 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r3, $r2);

        r5 = (double[][]) $r4;

        $i2 = 0;

     label01:
        if $i2 >= i1 goto label06;

        $i3 = $i2 * 2;

        $i3 = $i3 + 1;

        i4 = 0;

     label02:
        if i4 >= i0 goto label05;

        $i5 = i4 * 2;

        $i5 = $i5 + 1;

        $r6 = virtualinvoke $r1.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: org.apache.commons.math3.ml.neuralnet.Neuron getNeuron(int,int)>($i2, i4);

        $r7 = virtualinvoke $r6.<org.apache.commons.math3.ml.neuralnet.Neuron: double[] getFeatures()>();

        $r8 = <org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D$HorizontalDirection: org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D$HorizontalDirection RIGHT>;

        $r9 = <org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D$VerticalDirection: org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D$VerticalDirection CENTER>;

        $r6 = virtualinvoke $r1.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: org.apache.commons.math3.ml.neuralnet.Neuron getNeuron(int,int,org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D$HorizontalDirection,org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D$VerticalDirection)>($i2, i4, $r8, $r9);

        if $r6 == null goto label03;

        $r10 = r5[$i3];

        $i6 = $i5 + 1;

        $r11 = r0.<org.apache.commons.math3.ml.neuralnet.twod.util.UnifiedDistanceMatrix: org.apache.commons.math3.ml.distance.DistanceMeasure distance>;

        $r12 = virtualinvoke $r6.<org.apache.commons.math3.ml.neuralnet.Neuron: double[] getFeatures()>();

        $d0 = interfaceinvoke $r11.<org.apache.commons.math3.ml.distance.DistanceMeasure: double compute(double[],double[])>($r7, $r12);

        $r10[$i6] = $d0;

     label03:
        $r8 = <org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D$HorizontalDirection: org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D$HorizontalDirection CENTER>;

        $r9 = <org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D$VerticalDirection: org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D$VerticalDirection DOWN>;

        $r6 = virtualinvoke $r1.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: org.apache.commons.math3.ml.neuralnet.Neuron getNeuron(int,int,org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D$HorizontalDirection,org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D$VerticalDirection)>($i2, i4, $r8, $r9);

        if $r6 == null goto label04;

        $i6 = $i3 + 1;

        $r10 = r5[$i6];

        $r11 = r0.<org.apache.commons.math3.ml.neuralnet.twod.util.UnifiedDistanceMatrix: org.apache.commons.math3.ml.distance.DistanceMeasure distance>;

        $r12 = virtualinvoke $r6.<org.apache.commons.math3.ml.neuralnet.Neuron: double[] getFeatures()>();

        $d0 = interfaceinvoke $r11.<org.apache.commons.math3.ml.distance.DistanceMeasure: double compute(double[],double[])>($r7, $r12);

        $r10[$i5] = $d0;

     label04:
        i4 = i4 + 1;

        goto label02;

     label05:
        $i2 = $i2 + 1;

        goto label01;

     label06:
        $i2 = 0;

     label07:
        if $i2 >= i1 goto label15;

        $i3 = $i2 * 2;

        $i3 = $i3 + 1;

        i4 = 0;

     label08:
        if i4 >= i0 goto label14;

        $i5 = i4 * 2;

        $i5 = $i5 + 1;

        $r6 = virtualinvoke $r1.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: org.apache.commons.math3.ml.neuralnet.Neuron getNeuron(int,int)>($i2, i4);

        $r8 = <org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D$HorizontalDirection: org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D$HorizontalDirection RIGHT>;

        $r9 = <org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D$VerticalDirection: org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D$VerticalDirection CENTER>;

        $r13 = virtualinvoke $r1.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: org.apache.commons.math3.ml.neuralnet.Neuron getNeuron(int,int,org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D$HorizontalDirection,org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D$VerticalDirection)>($i2, i4, $r8, $r9);

        $r8 = <org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D$HorizontalDirection: org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D$HorizontalDirection CENTER>;

        $r9 = <org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D$VerticalDirection: org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D$VerticalDirection DOWN>;

        $r14 = virtualinvoke $r1.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: org.apache.commons.math3.ml.neuralnet.Neuron getNeuron(int,int,org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D$HorizontalDirection,org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D$VerticalDirection)>($i2, i4, $r8, $r9);

        $r8 = <org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D$HorizontalDirection: org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D$HorizontalDirection RIGHT>;

        $r9 = <org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D$VerticalDirection: org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D$VerticalDirection DOWN>;

        $r15 = virtualinvoke $r1.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: org.apache.commons.math3.ml.neuralnet.Neuron getNeuron(int,int,org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D$HorizontalDirection,org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D$VerticalDirection)>($i2, i4, $r8, $r9);

        if $r15 != null goto label12;

        $d0 = 0.0;

     label09:
        if $r13 == null goto label10;

        if $r14 != null goto label13;

     label10:
        d1 = 0.0;

     label11:
        $i6 = $i3 + 1;

        $r7 = r5[$i6];

        $i5 = $i5 + 1;

        $d0 = $d0 + d1;

        $d0 = 0.5 * $d0;

        $r7[$i5] = $d0;

        i4 = i4 + 1;

        goto label08;

     label12:
        $r11 = r0.<org.apache.commons.math3.ml.neuralnet.twod.util.UnifiedDistanceMatrix: org.apache.commons.math3.ml.distance.DistanceMeasure distance>;

        $r7 = virtualinvoke $r6.<org.apache.commons.math3.ml.neuralnet.Neuron: double[] getFeatures()>();

        $r10 = virtualinvoke $r15.<org.apache.commons.math3.ml.neuralnet.Neuron: double[] getFeatures()>();

        $d0 = interfaceinvoke $r11.<org.apache.commons.math3.ml.distance.DistanceMeasure: double compute(double[],double[])>($r7, $r10);

        goto label09;

     label13:
        $r11 = r0.<org.apache.commons.math3.ml.neuralnet.twod.util.UnifiedDistanceMatrix: org.apache.commons.math3.ml.distance.DistanceMeasure distance>;

        $r7 = virtualinvoke $r13.<org.apache.commons.math3.ml.neuralnet.Neuron: double[] getFeatures()>();

        $r10 = virtualinvoke $r14.<org.apache.commons.math3.ml.neuralnet.Neuron: double[] getFeatures()>();

        d1 = interfaceinvoke $r11.<org.apache.commons.math3.ml.distance.DistanceMeasure: double compute(double[],double[])>($r7, $r10);

        goto label11;

     label14:
        $i2 = $i2 + 1;

        goto label07;

     label15:
        i1 = lengthof r5;

        i1 = i1 + -1;

        $r7 = r5[i1];

        r5[0] = $r7;

        $r7 = r5[0];

        i0 = lengthof $r7;

        i0 = i0 + -1;

        $i2 = 0;

     label16:
        if $i2 >= i1 goto label17;

        $r7 = r5[$i2];

        $r10 = r5[$i2];

        $d0 = $r10[i0];

        $r7[0] = $d0;

        $i2 = $i2 + 1;

        goto label16;

     label17:
        return r5;
    }
    public double[][] computeImage(org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D)
    {
        org.apache.commons.math3.ml.neuralnet.twod.util.UnifiedDistanceMatrix r0;
        org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D $r1;
        boolean $z0;
        double[][] $r2;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.twod.util.UnifiedDistanceMatrix;

        $r1 := @parameter0: org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D;

        $z0 = r0.<org.apache.commons.math3.ml.neuralnet.twod.util.UnifiedDistanceMatrix: boolean individualDistances>;

        if $z0 == 0 goto label1;

        $r2 = specialinvoke r0.<org.apache.commons.math3.ml.neuralnet.twod.util.UnifiedDistanceMatrix: double[][] individualDistances(org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D)>($r1);

        return $r2;

     label1:
        $r2 = specialinvoke r0.<org.apache.commons.math3.ml.neuralnet.twod.util.UnifiedDistanceMatrix: double[][] averageDistances(org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D)>($r1);

        return $r2;
    }
