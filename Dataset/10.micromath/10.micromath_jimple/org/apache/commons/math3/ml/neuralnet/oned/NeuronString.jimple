org.apache.commons.math3.ml.neuralnet.oned.NeuronString extends java.lang.Object implements java.io.Serializable
private static final long serialVersionUID
private final long[] identifiers
private final org.apache.commons.math3.ml.neuralnet.Network network
private final int size
private final boolean wrap
    public void <init>(int, boolean, org.apache.commons.math3.ml.neuralnet.FeatureInitializer[])
    {
        org.apache.commons.math3.ml.neuralnet.oned.NeuronString r0;
        int $i0, i1, i2, i3;
        boolean $z0;
        org.apache.commons.math3.ml.neuralnet.FeatureInitializer[] $r1;
        double[] r2;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r3;
        java.lang.Integer $r4, $r5;
        long[] $r6;
        org.apache.commons.math3.ml.neuralnet.Network $r7;
        org.apache.commons.math3.ml.neuralnet.FeatureInitializer $r8;
        double $d0;
        long $l4;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.oned.NeuronString;

        $i0 := @parameter0: int;

        $z0 := @parameter1: boolean;

        $r1 := @parameter2: org.apache.commons.math3.ml.neuralnet.FeatureInitializer[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if $i0 >= 2 goto label1;

        $r3 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        specialinvoke $r3.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r4, $r5, 1);

        throw $r3;

     label1:
        r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: int size> = $i0;

        r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: boolean wrap> = $z0;

        $r6 = newarray (long)[$i0];

        r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: long[] identifiers> = $r6;

        i1 = lengthof $r1;

        $r7 = new org.apache.commons.math3.ml.neuralnet.Network;

        specialinvoke $r7.<org.apache.commons.math3.ml.neuralnet.Network: void <init>(long,int)>(0L, i1);

        r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: org.apache.commons.math3.ml.neuralnet.Network network> = $r7;

        i2 = 0;

     label2:
        if i2 >= $i0 goto label5;

        r2 = newarray (double)[i1];

        i3 = 0;

     label3:
        if i3 >= i1 goto label4;

        $r8 = $r1[i3];

        $d0 = interfaceinvoke $r8.<org.apache.commons.math3.ml.neuralnet.FeatureInitializer: double value()>();

        r2[i3] = $d0;

        i3 = i3 + 1;

        goto label3;

     label4:
        $r6 = r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: long[] identifiers>;

        $r7 = r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: org.apache.commons.math3.ml.neuralnet.Network network>;

        $l4 = virtualinvoke $r7.<org.apache.commons.math3.ml.neuralnet.Network: long createNeuron(double[])>(r2);

        $r6[i2] = $l4;

        i2 = i2 + 1;

        goto label2;

     label5:
        specialinvoke r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: void createLinks()>();

        return;
    }
    void <init>(boolean, double[][])
    {
        org.apache.commons.math3.ml.neuralnet.oned.NeuronString r0;
        boolean $z0;
        double[][] $r1;
        int i0, $i1;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r2;
        java.lang.Integer $r3, $r4;
        double[] $r5;
        org.apache.commons.math3.ml.neuralnet.Network $r6;
        long[] $r7;
        long $l2;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.oned.NeuronString;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: double[][];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        i0 = lengthof $r1;

        r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: int size> = i0;

        i0 = r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: int size>;

        if i0 >= 2 goto label1;

        $r2 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        i0 = r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: int size>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        specialinvoke $r2.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r3, $r4, 1);

        throw $r2;

     label1:
        r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: boolean wrap> = $z0;

        $r5 = $r1[0];

        i0 = lengthof $r5;

        $r6 = new org.apache.commons.math3.ml.neuralnet.Network;

        specialinvoke $r6.<org.apache.commons.math3.ml.neuralnet.Network: void <init>(long,int)>(0L, i0);

        r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: org.apache.commons.math3.ml.neuralnet.Network network> = $r6;

        i0 = r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: int size>;

        $r7 = newarray (long)[i0];

        r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: long[] identifiers> = $r7;

        i0 = 0;

     label2:
        $i1 = r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: int size>;

        if i0 >= $i1 goto label3;

        $r7 = r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: long[] identifiers>;

        $r6 = r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: org.apache.commons.math3.ml.neuralnet.Network network>;

        $r5 = $r1[i0];

        $l2 = virtualinvoke $r6.<org.apache.commons.math3.ml.neuralnet.Network: long createNeuron(double[])>($r5);

        $r7[i0] = $l2;

        i0 = i0 + 1;

        goto label2;

     label3:
        specialinvoke r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: void createLinks()>();

        return;
    }
    private void createLinks()
    {
        org.apache.commons.math3.ml.neuralnet.oned.NeuronString r0;
        int i0, $i1;
        org.apache.commons.math3.ml.neuralnet.Network $r1, $r2;
        long $l2;
        org.apache.commons.math3.ml.neuralnet.Neuron $r3, $r4;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.oned.NeuronString;

        i0 = 0;

     label1:
        $i1 = r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: int size>;

        $i1 = $i1 + -1;

        if i0 >= $i1 goto label2;

        $r1 = r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: org.apache.commons.math3.ml.neuralnet.Network network>;

        $r2 = r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: org.apache.commons.math3.ml.neuralnet.Network network>;

        $l2 = (long) i0;

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.ml.neuralnet.Network: org.apache.commons.math3.ml.neuralnet.Neuron getNeuron(long)>($l2);

        $r2 = r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: org.apache.commons.math3.ml.neuralnet.Network network>;

        $i1 = i0 + 1;

        $l2 = (long) $i1;

        $r4 = virtualinvoke $r2.<org.apache.commons.math3.ml.neuralnet.Network: org.apache.commons.math3.ml.neuralnet.Neuron getNeuron(long)>($l2);

        virtualinvoke $r1.<org.apache.commons.math3.ml.neuralnet.Network: void addLink(org.apache.commons.math3.ml.neuralnet.Neuron,org.apache.commons.math3.ml.neuralnet.Neuron)>($r3, $r4);

        i0 = i0 + 1;

        goto label1;

     label2:
        i0 = r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: int size>;

        i0 = i0 + -1;

     label3:
        if i0 <= 0 goto label4;

        $r1 = r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: org.apache.commons.math3.ml.neuralnet.Network network>;

        $r2 = r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: org.apache.commons.math3.ml.neuralnet.Network network>;

        $l2 = (long) i0;

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.ml.neuralnet.Network: org.apache.commons.math3.ml.neuralnet.Neuron getNeuron(long)>($l2);

        $r2 = r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: org.apache.commons.math3.ml.neuralnet.Network network>;

        $i1 = i0 + -1;

        $l2 = (long) $i1;

        $r4 = virtualinvoke $r2.<org.apache.commons.math3.ml.neuralnet.Network: org.apache.commons.math3.ml.neuralnet.Neuron getNeuron(long)>($l2);

        virtualinvoke $r1.<org.apache.commons.math3.ml.neuralnet.Network: void addLink(org.apache.commons.math3.ml.neuralnet.Neuron,org.apache.commons.math3.ml.neuralnet.Neuron)>($r3, $r4);

        i0 = i0 + -1;

        goto label3;

     label4:
        $z0 = r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: boolean wrap>;

        if $z0 == 0 goto label5;

        $r1 = r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: org.apache.commons.math3.ml.neuralnet.Network network>;

        $r2 = r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: org.apache.commons.math3.ml.neuralnet.Network network>;

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.ml.neuralnet.Network: org.apache.commons.math3.ml.neuralnet.Neuron getNeuron(long)>(0L);

        $r2 = r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: org.apache.commons.math3.ml.neuralnet.Network network>;

        i0 = r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: int size>;

        i0 = i0 + -1;

        $l2 = (long) i0;

        $r4 = virtualinvoke $r2.<org.apache.commons.math3.ml.neuralnet.Network: org.apache.commons.math3.ml.neuralnet.Neuron getNeuron(long)>($l2);

        virtualinvoke $r1.<org.apache.commons.math3.ml.neuralnet.Network: void addLink(org.apache.commons.math3.ml.neuralnet.Neuron,org.apache.commons.math3.ml.neuralnet.Neuron)>($r3, $r4);

        $r1 = r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: org.apache.commons.math3.ml.neuralnet.Network network>;

        $r2 = r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: org.apache.commons.math3.ml.neuralnet.Network network>;

        i0 = r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: int size>;

        i0 = i0 + -1;

        $l2 = (long) i0;

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.ml.neuralnet.Network: org.apache.commons.math3.ml.neuralnet.Neuron getNeuron(long)>($l2);

        $r2 = r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: org.apache.commons.math3.ml.neuralnet.Network network>;

        $r4 = virtualinvoke $r2.<org.apache.commons.math3.ml.neuralnet.Network: org.apache.commons.math3.ml.neuralnet.Neuron getNeuron(long)>(0L);

        virtualinvoke $r1.<org.apache.commons.math3.ml.neuralnet.Network: void addLink(org.apache.commons.math3.ml.neuralnet.Neuron,org.apache.commons.math3.ml.neuralnet.Neuron)>($r3, $r4);

     label5:
        return;
    }
    private void readObject(java.io.ObjectInputStream)
    {
        org.apache.commons.math3.ml.neuralnet.oned.NeuronString r0;
        java.io.ObjectInputStream $r1;
        java.lang.IllegalStateException $r2;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.oned.NeuronString;

        $r1 := @parameter0: java.io.ObjectInputStream;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>()>();

        throw $r2;
    }
    private java.lang.Object writeReplace()
    {
        org.apache.commons.math3.ml.neuralnet.oned.NeuronString r0;
        double[][] r1;
        boolean $z0;
        double[] $r2;
        int $i0, $i1;
        org.apache.commons.math3.ml.neuralnet.oned.NeuronString$SerializationProxy $r3;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.oned.NeuronString;

        $i0 = r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: int size>;

        r1 = newarray (double[])[$i0];

        $i0 = 0;

     label1:
        $i1 = r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: int size>;

        if $i0 >= $i1 goto label2;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: double[] getFeatures(int)>($i0);

        r1[$i0] = $r2;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $r3 = new org.apache.commons.math3.ml.neuralnet.oned.NeuronString$SerializationProxy;

        $z0 = r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: boolean wrap>;

        specialinvoke $r3.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString$SerializationProxy: void <init>(boolean,double[][])>($z0, r1);

        return $r3;
    }
    public double[] getFeatures(int)
    {
        org.apache.commons.math3.ml.neuralnet.oned.NeuronString r0;
        int $i0, $i1;
        org.apache.commons.math3.exception.OutOfRangeException $r1;
        java.lang.Integer $r2, $r3, $r4;
        org.apache.commons.math3.ml.neuralnet.Network $r5;
        long[] $r6;
        long $l2;
        org.apache.commons.math3.ml.neuralnet.Neuron $r7;
        double[] $r8;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.oned.NeuronString;

        $i0 := @parameter0: int;

        if $i0 < 0 goto label1;

        $i1 = r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: int size>;

        if $i0 < $i1 goto label2;

     label1:
        $r1 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $i0 = r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: int size>;

        $i0 = $i0 + -1;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r1.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r2, $r3, $r4);

        throw $r1;

     label2:
        $r5 = r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: org.apache.commons.math3.ml.neuralnet.Network network>;

        $r6 = r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: long[] identifiers>;

        $l2 = $r6[$i0];

        $r7 = virtualinvoke $r5.<org.apache.commons.math3.ml.neuralnet.Network: org.apache.commons.math3.ml.neuralnet.Neuron getNeuron(long)>($l2);

        $r8 = virtualinvoke $r7.<org.apache.commons.math3.ml.neuralnet.Neuron: double[] getFeatures()>();

        return $r8;
    }
    public org.apache.commons.math3.ml.neuralnet.Network getNetwork()
    {
        org.apache.commons.math3.ml.neuralnet.oned.NeuronString r0;
        org.apache.commons.math3.ml.neuralnet.Network r1;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.oned.NeuronString;

        r1 = r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: org.apache.commons.math3.ml.neuralnet.Network network>;

        return r1;
    }
    public int getSize()
    {
        org.apache.commons.math3.ml.neuralnet.oned.NeuronString r0;
        int i0;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.oned.NeuronString;

        i0 = r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: int size>;

        return i0;
    }
