org.apache.commons.math3.ml.clustering.evaluation.ClusterEvaluator extends java.lang.Object
private final org.apache.commons.math3.ml.distance.DistanceMeasure measure
    public void <init>()
    {
        org.apache.commons.math3.ml.clustering.evaluation.ClusterEvaluator r0;
        org.apache.commons.math3.ml.distance.EuclideanDistance $r1;

        r0 := @this: org.apache.commons.math3.ml.clustering.evaluation.ClusterEvaluator;

        $r1 = new org.apache.commons.math3.ml.distance.EuclideanDistance;

        specialinvoke $r1.<org.apache.commons.math3.ml.distance.EuclideanDistance: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.ml.clustering.evaluation.ClusterEvaluator: void <init>(org.apache.commons.math3.ml.distance.DistanceMeasure)>($r1);

        return;
    }
    public void <init>(org.apache.commons.math3.ml.distance.DistanceMeasure)
    {
        org.apache.commons.math3.ml.clustering.evaluation.ClusterEvaluator r0;
        org.apache.commons.math3.ml.distance.DistanceMeasure $r1;

        r0 := @this: org.apache.commons.math3.ml.clustering.evaluation.ClusterEvaluator;

        $r1 := @parameter0: org.apache.commons.math3.ml.distance.DistanceMeasure;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.ml.clustering.evaluation.ClusterEvaluator: org.apache.commons.math3.ml.distance.DistanceMeasure measure> = $r1;

        return;
    }
    protected org.apache.commons.math3.ml.clustering.Clusterable centroidOf(org.apache.commons.math3.ml.clustering.Cluster)
    {
        org.apache.commons.math3.ml.clustering.evaluation.ClusterEvaluator r0;
        double[] r1, $r8;
        int i0, $i1;
        org.apache.commons.math3.ml.clustering.Cluster r2;
        java.util.List $r3;
        boolean $z0;
        org.apache.commons.math3.ml.clustering.CentroidCluster r4;
        org.apache.commons.math3.ml.clustering.Clusterable $r5;
        java.lang.Object $r6;
        java.util.Iterator $r7;
        double $d0, $d1;
        org.apache.commons.math3.ml.clustering.DoublePoint $r9;

        r0 := @this: org.apache.commons.math3.ml.clustering.evaluation.ClusterEvaluator;

        r2 := @parameter0: org.apache.commons.math3.ml.clustering.Cluster;

        $r3 = virtualinvoke r2.<org.apache.commons.math3.ml.clustering.Cluster: java.util.List getPoints()>();

        $z0 = interfaceinvoke $r3.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        $z0 = r2 instanceof org.apache.commons.math3.ml.clustering.CentroidCluster;

        if $z0 == 0 goto label2;

        r4 = (org.apache.commons.math3.ml.clustering.CentroidCluster) r2;

        $r5 = virtualinvoke r4.<org.apache.commons.math3.ml.clustering.CentroidCluster: org.apache.commons.math3.ml.clustering.Clusterable getCenter()>();

        return $r5;

     label2:
        $r6 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(0);

        $r5 = (org.apache.commons.math3.ml.clustering.Clusterable) $r6;

        r1 = interfaceinvoke $r5.<org.apache.commons.math3.ml.clustering.Clusterable: double[] getPoint()>();

        i0 = lengthof r1;

        r1 = newarray (double)[i0];

        $r7 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r6 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (org.apache.commons.math3.ml.clustering.Clusterable) $r6;

        $r8 = interfaceinvoke $r5.<org.apache.commons.math3.ml.clustering.Clusterable: double[] getPoint()>();

        i0 = 0;

     label4:
        $i1 = lengthof r1;

        if i0 >= $i1 goto label3;

        $d0 = r1[i0];

        $d1 = $r8[i0];

        $d0 = $d0 + $d1;

        r1[i0] = $d0;

        i0 = i0 + 1;

        goto label4;

     label5:
        i0 = 0;

     label6:
        $i1 = lengthof r1;

        if i0 >= $i1 goto label7;

        $d0 = r1[i0];

        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        $d1 = (double) $i1;

        $d0 = $d0 / $d1;

        r1[i0] = $d0;

        i0 = i0 + 1;

        goto label6;

     label7:
        $r9 = new org.apache.commons.math3.ml.clustering.DoublePoint;

        specialinvoke $r9.<org.apache.commons.math3.ml.clustering.DoublePoint: void <init>(double[])>(r1);

        return $r9;
    }
    protected double distance(org.apache.commons.math3.ml.clustering.Clusterable, org.apache.commons.math3.ml.clustering.Clusterable)
    {
        org.apache.commons.math3.ml.clustering.evaluation.ClusterEvaluator r0;
        org.apache.commons.math3.ml.clustering.Clusterable $r1, $r2;
        org.apache.commons.math3.ml.distance.DistanceMeasure $r3;
        double[] $r4, $r5;
        double $d0;

        r0 := @this: org.apache.commons.math3.ml.clustering.evaluation.ClusterEvaluator;

        $r1 := @parameter0: org.apache.commons.math3.ml.clustering.Clusterable;

        $r2 := @parameter1: org.apache.commons.math3.ml.clustering.Clusterable;

        $r3 = r0.<org.apache.commons.math3.ml.clustering.evaluation.ClusterEvaluator: org.apache.commons.math3.ml.distance.DistanceMeasure measure>;

        $r4 = interfaceinvoke $r1.<org.apache.commons.math3.ml.clustering.Clusterable: double[] getPoint()>();

        $r5 = interfaceinvoke $r2.<org.apache.commons.math3.ml.clustering.Clusterable: double[] getPoint()>();

        $d0 = interfaceinvoke $r3.<org.apache.commons.math3.ml.distance.DistanceMeasure: double compute(double[],double[])>($r4, $r5);

        return $d0;
    }
    public boolean isBetterScore(double, double)
    {
        org.apache.commons.math3.ml.clustering.evaluation.ClusterEvaluator r0;
        double $d0, $d1;
        byte $b0;

        r0 := @this: org.apache.commons.math3.ml.clustering.evaluation.ClusterEvaluator;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $b0 = $d0 cmpg $d1;

        if $b0 >= 0 goto label1;

        return 1;

     label1:
        return 0;
    }
public abstract double score(java.util.List) { 
// no body
} 
