org.apache.commons.math3.ml.neuralnet.Network extends java.lang.Object implements java.lang.Iterable java.io.Serializable
private static final long serialVersionUID
private final int featureSize
private final java.util.concurrent.ConcurrentHashMap linkMap
private final java.util.concurrent.ConcurrentHashMap neuronMap
private final java.util.concurrent.atomic.AtomicLong nextId
    public void <init>(long, int)
    {
        org.apache.commons.math3.ml.neuralnet.Network r0;
        long $l0;
        int $i1;
        java.util.concurrent.ConcurrentHashMap $r1;
        java.util.concurrent.atomic.AtomicLong $r2;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.Network;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.apache.commons.math3.ml.neuralnet.Network: java.util.concurrent.ConcurrentHashMap neuronMap> = $r1;

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.apache.commons.math3.ml.neuralnet.Network: java.util.concurrent.ConcurrentHashMap linkMap> = $r1;

        $r2 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>($l0);

        r0.<org.apache.commons.math3.ml.neuralnet.Network: java.util.concurrent.atomic.AtomicLong nextId> = $r2;

        r0.<org.apache.commons.math3.ml.neuralnet.Network: int featureSize> = $i1;

        return;
    }
    void <init>(long, int, org.apache.commons.math3.ml.neuralnet.Neuron[], long[][])
    {
        org.apache.commons.math3.ml.neuralnet.Network r0;
        long $l0, $l4;
        int $i1, i2, i3, i6, i7;
        org.apache.commons.math3.ml.neuralnet.Neuron[] $r1;
        long[][] $r2;
        long[] r3;
        org.apache.commons.math3.ml.neuralnet.Neuron r4;
        java.util.HashSet $r5;
        java.util.concurrent.ConcurrentHashMap $r6;
        org.apache.commons.math3.exception.MathIllegalStateException $r7;
        byte $b5;
        java.lang.Long $r8;
        java.lang.Object $r9;
        java.util.Set r10;
        java.util.concurrent.atomic.AtomicLong $r11;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.Network;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        $r1 := @parameter2: org.apache.commons.math3.ml.neuralnet.Neuron[];

        $r2 := @parameter3: long[][];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r6 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r6.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.apache.commons.math3.ml.neuralnet.Network: java.util.concurrent.ConcurrentHashMap neuronMap> = $r6;

        $r6 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r6.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.apache.commons.math3.ml.neuralnet.Network: java.util.concurrent.ConcurrentHashMap linkMap> = $r6;

        i3 = lengthof $r1;

        i2 = lengthof $r2;

        if i3 == i2 goto label1;

        $r7 = new org.apache.commons.math3.exception.MathIllegalStateException;

        specialinvoke $r7.<org.apache.commons.math3.exception.MathIllegalStateException: void <init>()>();

        throw $r7;

     label1:
        i2 = 0;

     label2:
        if i2 >= i3 goto label4;

        r4 = $r1[i2];

        $l4 = virtualinvoke r4.<org.apache.commons.math3.ml.neuralnet.Neuron: long getIdentifier()>();

        $b5 = $l4 cmp $l0;

        if $b5 < 0 goto label3;

        $r7 = new org.apache.commons.math3.exception.MathIllegalStateException;

        specialinvoke $r7.<org.apache.commons.math3.exception.MathIllegalStateException: void <init>()>();

        throw $r7;

     label3:
        $r6 = r0.<org.apache.commons.math3.ml.neuralnet.Network: java.util.concurrent.ConcurrentHashMap neuronMap>;

        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l4);

        virtualinvoke $r6.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, r4);

        $r6 = r0.<org.apache.commons.math3.ml.neuralnet.Network: java.util.concurrent.ConcurrentHashMap linkMap>;

        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l4);

        $r5 = new java.util.HashSet;

        specialinvoke $r5.<java.util.HashSet: void <init>()>();

        virtualinvoke $r6.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r5);

        i2 = i2 + 1;

        goto label2;

     label4:
        i6 = 0;

     label5:
        if i6 >= i3 goto label9;

        r4 = $r1[i6];

        $l4 = virtualinvoke r4.<org.apache.commons.math3.ml.neuralnet.Neuron: long getIdentifier()>();

        $r6 = r0.<org.apache.commons.math3.ml.neuralnet.Network: java.util.concurrent.ConcurrentHashMap linkMap>;

        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l4);

        $r9 = virtualinvoke $r6.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r8);

        r10 = (java.util.Set) $r9;

        r3 = $r2[i6];

        i2 = lengthof r3;

        i7 = 0;

     label6:
        if i7 >= i2 goto label8;

        $l4 = r3[i7];

        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l4);

        $r6 = r0.<org.apache.commons.math3.ml.neuralnet.Network: java.util.concurrent.ConcurrentHashMap neuronMap>;

        $r9 = virtualinvoke $r6.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r8);

        if $r9 != null goto label7;

        $r7 = new org.apache.commons.math3.exception.MathIllegalStateException;

        specialinvoke $r7.<org.apache.commons.math3.exception.MathIllegalStateException: void <init>()>();

        throw $r7;

     label7:
        $l4 = virtualinvoke $r8.<java.lang.Long: long longValue()>();

        specialinvoke r0.<org.apache.commons.math3.ml.neuralnet.Network: void addLinkToLinkSet(java.util.Set,long)>(r10, $l4);

        i7 = i7 + 1;

        goto label6;

     label8:
        i6 = i6 + 1;

        goto label5;

     label9:
        $r11 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r11.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>($l0);

        r0.<org.apache.commons.math3.ml.neuralnet.Network: java.util.concurrent.atomic.AtomicLong nextId> = $r11;

        r0.<org.apache.commons.math3.ml.neuralnet.Network: int featureSize> = $i1;

        return;
    }
    private void addLinkToLinkSet(java.util.Set, long)
    {
        org.apache.commons.math3.ml.neuralnet.Network r0;
        java.util.Set r1;
        long $l0;
        java.lang.Long $r2;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.Network;

        r1 := @parameter0: java.util.Set;

        $l0 := @parameter1: long;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>($r2);

        return;
    }
    private java.lang.Long createNextId()
    {
        org.apache.commons.math3.ml.neuralnet.Network r0;
        java.util.concurrent.atomic.AtomicLong $r1;
        long $l0;
        java.lang.Long $r2;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.Network;

        $r1 = r0.<org.apache.commons.math3.ml.neuralnet.Network: java.util.concurrent.atomic.AtomicLong nextId>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long getAndIncrement()>();

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        return $r2;
    }
    private void deleteLinkFromLinkSet(java.util.Set, long)
    {
        org.apache.commons.math3.ml.neuralnet.Network r0;
        java.util.Set r1;
        long $l0;
        java.lang.Long $r2;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.Network;

        r1 := @parameter0: java.util.Set;

        $l0 := @parameter1: long;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        interfaceinvoke r1.<java.util.Set: boolean remove(java.lang.Object)>($r2);

        return;
    }
    private void readObject(java.io.ObjectInputStream)
    {
        org.apache.commons.math3.ml.neuralnet.Network r0;
        java.io.ObjectInputStream $r1;
        java.lang.IllegalStateException $r2;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.Network;

        $r1 := @parameter0: java.io.ObjectInputStream;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>()>();

        throw $r2;
    }
    private java.lang.Object writeReplace()
    {
        org.apache.commons.math3.ml.neuralnet.Network r0;
        int $i0, $i1;
        long[][] r1;
        long[] r2;
        java.util.concurrent.ConcurrentHashMap $r3;
        java.util.Collection $r4;
        org.apache.commons.math3.ml.neuralnet.Neuron[] $r5;
        java.lang.Object[] $r6;
        org.apache.commons.math3.ml.neuralnet.Neuron $r7;
        java.util.Iterator $r8;
        boolean $z0;
        java.lang.Object $r9;
        long $l2;
        org.apache.commons.math3.ml.neuralnet.Network$SerializationProxy $r10;
        java.util.concurrent.atomic.AtomicLong $r11;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.Network;

        $r3 = r0.<org.apache.commons.math3.ml.neuralnet.Network: java.util.concurrent.ConcurrentHashMap neuronMap>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        $r5 = newarray (org.apache.commons.math3.ml.neuralnet.Neuron)[0];

        $r6 = interfaceinvoke $r4.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r5);

        $r5 = (org.apache.commons.math3.ml.neuralnet.Neuron[]) $r6;

        $i0 = lengthof $r5;

        r1 = newarray (long[])[$i0];

        $i0 = 0;

     label1:
        $i1 = lengthof $r5;

        if $i0 >= $i1 goto label4;

        $r7 = $r5[$i0];

        $r4 = virtualinvoke r0.<org.apache.commons.math3.ml.neuralnet.Network: java.util.Collection getNeighbours(org.apache.commons.math3.ml.neuralnet.Neuron)>($r7);

        $i1 = interfaceinvoke $r4.<java.util.Collection: int size()>();

        r2 = newarray (long)[$i1];

        $i1 = 0;

        $r8 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (org.apache.commons.math3.ml.neuralnet.Neuron) $r9;

        $l2 = virtualinvoke $r7.<org.apache.commons.math3.ml.neuralnet.Neuron: long getIdentifier()>();

        r2[$i1] = $l2;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        r1[$i0] = r2;

        $i0 = $i0 + 1;

        goto label1;

     label4:
        $r10 = new org.apache.commons.math3.ml.neuralnet.Network$SerializationProxy;

        $r11 = r0.<org.apache.commons.math3.ml.neuralnet.Network: java.util.concurrent.atomic.AtomicLong nextId>;

        $l2 = virtualinvoke $r11.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $i0 = r0.<org.apache.commons.math3.ml.neuralnet.Network: int featureSize>;

        specialinvoke $r10.<org.apache.commons.math3.ml.neuralnet.Network$SerializationProxy: void <init>(long,int,org.apache.commons.math3.ml.neuralnet.Neuron[],long[][])>($l2, $i0, $r5, r1);

        return $r10;
    }
    public void addLink(org.apache.commons.math3.ml.neuralnet.Neuron, org.apache.commons.math3.ml.neuralnet.Neuron)
    {
        org.apache.commons.math3.ml.neuralnet.Network r0;
        org.apache.commons.math3.ml.neuralnet.Neuron $r1, $r2, $r3;
        long $l0, $l1;
        java.util.NoSuchElementException $r4;
        java.lang.String $r5;
        java.util.concurrent.ConcurrentHashMap $r6;
        java.lang.Long $r7;
        java.lang.Object $r8;
        java.util.Set $r9;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.Network;

        $r1 := @parameter0: org.apache.commons.math3.ml.neuralnet.Neuron;

        $r2 := @parameter1: org.apache.commons.math3.ml.neuralnet.Neuron;

        $l0 = virtualinvoke $r1.<org.apache.commons.math3.ml.neuralnet.Neuron: long getIdentifier()>();

        $l1 = virtualinvoke $r2.<org.apache.commons.math3.ml.neuralnet.Neuron: long getIdentifier()>();

        $r3 = virtualinvoke r0.<org.apache.commons.math3.ml.neuralnet.Network: org.apache.commons.math3.ml.neuralnet.Neuron getNeuron(long)>($l0);

        if $r1 == $r3 goto label1;

        $r4 = new java.util.NoSuchElementException;

        $r5 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l0);

        specialinvoke $r4.<java.util.NoSuchElementException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label1:
        $r1 = virtualinvoke r0.<org.apache.commons.math3.ml.neuralnet.Network: org.apache.commons.math3.ml.neuralnet.Neuron getNeuron(long)>($l1);

        if $r2 == $r1 goto label2;

        $r4 = new java.util.NoSuchElementException;

        $r5 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l1);

        specialinvoke $r4.<java.util.NoSuchElementException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label2:
        $r6 = r0.<org.apache.commons.math3.ml.neuralnet.Network: java.util.concurrent.ConcurrentHashMap linkMap>;

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r8 = virtualinvoke $r6.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r7);

        $r9 = (java.util.Set) $r8;

        specialinvoke r0.<org.apache.commons.math3.ml.neuralnet.Network: void addLinkToLinkSet(java.util.Set,long)>($r9, $l1);

        return;
    }
    public org.apache.commons.math3.ml.neuralnet.Network copy()
    {
        org.apache.commons.math3.ml.neuralnet.Network r0, r1;
        java.util.HashSet $r2;
        java.util.concurrent.atomic.AtomicLong $r3;
        long $l0;
        int $i1;
        java.util.concurrent.ConcurrentHashMap $r4;
        java.util.Set $r5;
        java.util.Iterator $r6;
        boolean $z0;
        java.lang.Object $r7, $r9;
        java.util.Map$Entry r8;
        org.apache.commons.math3.ml.neuralnet.Neuron $r10;
        java.lang.Throwable $r11;
        java.util.Collection $r12;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.Network;

        entermonitor r0;

     label1:
        r1 = new org.apache.commons.math3.ml.neuralnet.Network;

        $r3 = r0.<org.apache.commons.math3.ml.neuralnet.Network: java.util.concurrent.atomic.AtomicLong nextId>;

        $l0 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $i1 = r0.<org.apache.commons.math3.ml.neuralnet.Network: int featureSize>;

        specialinvoke r1.<org.apache.commons.math3.ml.neuralnet.Network: void <init>(long,int)>($l0, $i1);

        $r4 = r0.<org.apache.commons.math3.ml.neuralnet.Network: java.util.concurrent.ConcurrentHashMap neuronMap>;

        $r5 = virtualinvoke $r4.<java.util.concurrent.ConcurrentHashMap: java.util.Set entrySet()>();

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.util.Map$Entry) $r7;

        $r4 = r1.<org.apache.commons.math3.ml.neuralnet.Network: java.util.concurrent.ConcurrentHashMap neuronMap>;

        $r7 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r10 = (org.apache.commons.math3.ml.neuralnet.Neuron) $r9;

        $r10 = virtualinvoke $r10.<org.apache.commons.math3.ml.neuralnet.Neuron: org.apache.commons.math3.ml.neuralnet.Neuron copy()>();

        virtualinvoke $r4.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r10);

     label3:
        goto label2;

     label4:
        $r11 := @caughtexception;

        exitmonitor r0;

        throw $r11;

     label5:
        $r4 = r0.<org.apache.commons.math3.ml.neuralnet.Network: java.util.concurrent.ConcurrentHashMap linkMap>;

        $r5 = virtualinvoke $r4.<java.util.concurrent.ConcurrentHashMap: java.util.Set entrySet()>();

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label6:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.util.Map$Entry) $r7;

        $r4 = r1.<org.apache.commons.math3.ml.neuralnet.Network: java.util.concurrent.ConcurrentHashMap linkMap>;

        $r7 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r2 = new java.util.HashSet;

        $r9 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r12 = (java.util.Collection) $r9;

        specialinvoke $r2.<java.util.HashSet: void <init>(java.util.Collection)>($r12);

        virtualinvoke $r4.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r2);

     label7:
        goto label6;

     label8:
        exitmonitor r0;

        return r1;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label5 to label7 with label4;
    }
    public long createNeuron(double[])
    {
        org.apache.commons.math3.ml.neuralnet.Network r0;
        double[] $r1;
        int $i0, $i1;
        org.apache.commons.math3.exception.DimensionMismatchException $r2;
        java.lang.Long $r3;
        long $l2;
        java.util.concurrent.ConcurrentHashMap $r4;
        org.apache.commons.math3.ml.neuralnet.Neuron $r5;
        java.util.HashSet $r6;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.Network;

        $r1 := @parameter0: double[];

        $i0 = lengthof $r1;

        $i1 = r0.<org.apache.commons.math3.ml.neuralnet.Network: int featureSize>;

        if $i0 == $i1 goto label1;

        $r2 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i0 = lengthof $r1;

        $i1 = r0.<org.apache.commons.math3.ml.neuralnet.Network: int featureSize>;

        specialinvoke $r2.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i0, $i1);

        throw $r2;

     label1:
        $r3 = specialinvoke r0.<org.apache.commons.math3.ml.neuralnet.Network: java.lang.Long createNextId()>();

        $l2 = virtualinvoke $r3.<java.lang.Long: long longValue()>();

        $r4 = r0.<org.apache.commons.math3.ml.neuralnet.Network: java.util.concurrent.ConcurrentHashMap neuronMap>;

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        $r5 = new org.apache.commons.math3.ml.neuralnet.Neuron;

        specialinvoke $r5.<org.apache.commons.math3.ml.neuralnet.Neuron: void <init>(long,double[])>($l2, $r1);

        virtualinvoke $r4.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r5);

        $r4 = r0.<org.apache.commons.math3.ml.neuralnet.Network: java.util.concurrent.ConcurrentHashMap linkMap>;

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        $r6 = new java.util.HashSet;

        specialinvoke $r6.<java.util.HashSet: void <init>()>();

        virtualinvoke $r4.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r6);

        return $l2;
    }
    public void deleteLink(org.apache.commons.math3.ml.neuralnet.Neuron, org.apache.commons.math3.ml.neuralnet.Neuron)
    {
        org.apache.commons.math3.ml.neuralnet.Network r0;
        org.apache.commons.math3.ml.neuralnet.Neuron $r1, $r2, $r3;
        long $l0, $l1;
        java.util.NoSuchElementException $r4;
        java.lang.String $r5;
        java.util.concurrent.ConcurrentHashMap $r6;
        java.lang.Long $r7;
        java.lang.Object $r8;
        java.util.Set $r9;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.Network;

        $r1 := @parameter0: org.apache.commons.math3.ml.neuralnet.Neuron;

        $r2 := @parameter1: org.apache.commons.math3.ml.neuralnet.Neuron;

        $l0 = virtualinvoke $r1.<org.apache.commons.math3.ml.neuralnet.Neuron: long getIdentifier()>();

        $l1 = virtualinvoke $r2.<org.apache.commons.math3.ml.neuralnet.Neuron: long getIdentifier()>();

        $r3 = virtualinvoke r0.<org.apache.commons.math3.ml.neuralnet.Network: org.apache.commons.math3.ml.neuralnet.Neuron getNeuron(long)>($l0);

        if $r1 == $r3 goto label1;

        $r4 = new java.util.NoSuchElementException;

        $r5 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l0);

        specialinvoke $r4.<java.util.NoSuchElementException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label1:
        $r1 = virtualinvoke r0.<org.apache.commons.math3.ml.neuralnet.Network: org.apache.commons.math3.ml.neuralnet.Neuron getNeuron(long)>($l1);

        if $r2 == $r1 goto label2;

        $r4 = new java.util.NoSuchElementException;

        $r5 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l1);

        specialinvoke $r4.<java.util.NoSuchElementException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label2:
        $r6 = r0.<org.apache.commons.math3.ml.neuralnet.Network: java.util.concurrent.ConcurrentHashMap linkMap>;

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r8 = virtualinvoke $r6.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r7);

        $r9 = (java.util.Set) $r8;

        specialinvoke r0.<org.apache.commons.math3.ml.neuralnet.Network: void deleteLinkFromLinkSet(java.util.Set,long)>($r9, $l1);

        return;
    }
    public void deleteNeuron(org.apache.commons.math3.ml.neuralnet.Neuron)
    {
        org.apache.commons.math3.ml.neuralnet.Network r0;
        org.apache.commons.math3.ml.neuralnet.Neuron $r1, r5;
        java.util.Collection $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        java.util.concurrent.ConcurrentHashMap $r6;
        long $l0;
        java.lang.Long $r7;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.Network;

        $r1 := @parameter0: org.apache.commons.math3.ml.neuralnet.Neuron;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.ml.neuralnet.Network: java.util.Collection getNeighbours(org.apache.commons.math3.ml.neuralnet.Neuron)>($r1);

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.commons.math3.ml.neuralnet.Neuron) $r4;

        virtualinvoke r0.<org.apache.commons.math3.ml.neuralnet.Network: void deleteLink(org.apache.commons.math3.ml.neuralnet.Neuron,org.apache.commons.math3.ml.neuralnet.Neuron)>(r5, $r1);

        goto label1;

     label2:
        $r6 = r0.<org.apache.commons.math3.ml.neuralnet.Network: java.util.concurrent.ConcurrentHashMap neuronMap>;

        $l0 = virtualinvoke $r1.<org.apache.commons.math3.ml.neuralnet.Neuron: long getIdentifier()>();

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        virtualinvoke $r6.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>($r7);

        return;
    }
    public int getFeaturesSize()
    {
        org.apache.commons.math3.ml.neuralnet.Network r0;
        int i0;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.Network;

        i0 = r0.<org.apache.commons.math3.ml.neuralnet.Network: int featureSize>;

        return i0;
    }
    public java.util.Collection getNeighbours(java.lang.Iterable)
    {
        org.apache.commons.math3.ml.neuralnet.Network r0;
        java.lang.Iterable r1;
        java.util.Collection $r2;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.Network;

        r1 := @parameter0: java.lang.Iterable;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.ml.neuralnet.Network: java.util.Collection getNeighbours(java.lang.Iterable,java.lang.Iterable)>(r1, null);

        return $r2;
    }
    public java.util.Collection getNeighbours(java.lang.Iterable, java.lang.Iterable)
    {
        org.apache.commons.math3.ml.neuralnet.Network r0;
        java.lang.Iterable r1, r2;
        java.util.HashSet r3;
        java.util.ArrayList r4;
        java.util.Iterator $r5;
        boolean $z0;
        java.lang.Object $r6;
        org.apache.commons.math3.ml.neuralnet.Neuron r7;
        java.util.concurrent.ConcurrentHashMap $r8;
        long $l0;
        java.lang.Long $r9;
        java.util.Collection $r10;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.Network;

        r1 := @parameter0: java.lang.Iterable;

        r2 := @parameter1: java.lang.Iterable;

        r3 = new java.util.HashSet;

        specialinvoke r3.<java.util.HashSet: void <init>()>();

        $r5 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.commons.math3.ml.neuralnet.Neuron) $r6;

        $r8 = r0.<org.apache.commons.math3.ml.neuralnet.Network: java.util.concurrent.ConcurrentHashMap linkMap>;

        $l0 = virtualinvoke r7.<org.apache.commons.math3.ml.neuralnet.Neuron: long getIdentifier()>();

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r6 = virtualinvoke $r8.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r9);

        $r10 = (java.util.Collection) $r6;

        interfaceinvoke r3.<java.util.Set: boolean addAll(java.util.Collection)>($r10);

        goto label1;

     label2:
        if r2 == null goto label4;

        $r5 = interfaceinvoke r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.commons.math3.ml.neuralnet.Neuron) $r6;

        $l0 = virtualinvoke r7.<org.apache.commons.math3.ml.neuralnet.Neuron: long getIdentifier()>();

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        interfaceinvoke r3.<java.util.Set: boolean remove(java.lang.Object)>($r9);

        goto label3;

     label4:
        r4 = new java.util.ArrayList;

        specialinvoke r4.<java.util.ArrayList: void <init>()>();

        $r5 = interfaceinvoke r3.<java.util.Set: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (java.lang.Long) $r6;

        $l0 = virtualinvoke $r9.<java.lang.Long: long longValue()>();

        r7 = virtualinvoke r0.<org.apache.commons.math3.ml.neuralnet.Network: org.apache.commons.math3.ml.neuralnet.Neuron getNeuron(long)>($l0);

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>(r7);

        goto label5;

     label6:
        return r4;
    }
    public java.util.Collection getNeighbours(org.apache.commons.math3.ml.neuralnet.Neuron)
    {
        org.apache.commons.math3.ml.neuralnet.Network r0;
        org.apache.commons.math3.ml.neuralnet.Neuron $r1;
        java.util.Collection $r2;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.Network;

        $r1 := @parameter0: org.apache.commons.math3.ml.neuralnet.Neuron;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.ml.neuralnet.Network: java.util.Collection getNeighbours(org.apache.commons.math3.ml.neuralnet.Neuron,java.lang.Iterable)>($r1, null);

        return $r2;
    }
    public java.util.Collection getNeighbours(org.apache.commons.math3.ml.neuralnet.Neuron, java.lang.Iterable)
    {
        org.apache.commons.math3.ml.neuralnet.Network r0;
        org.apache.commons.math3.ml.neuralnet.Neuron $r1;
        java.lang.Iterable r2;
        java.util.ArrayList r3;
        java.util.concurrent.ConcurrentHashMap $r4;
        long $l0;
        java.lang.Long $r5;
        java.lang.Object $r6;
        java.util.Set r7;
        java.util.Iterator $r8;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.Network;

        $r1 := @parameter0: org.apache.commons.math3.ml.neuralnet.Neuron;

        r2 := @parameter1: java.lang.Iterable;

        $r4 = r0.<org.apache.commons.math3.ml.neuralnet.Network: java.util.concurrent.ConcurrentHashMap linkMap>;

        $l0 = virtualinvoke $r1.<org.apache.commons.math3.ml.neuralnet.Neuron: long getIdentifier()>();

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r6 = virtualinvoke $r4.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r5);

        r7 = (java.util.Set) $r6;

        if r2 == null goto label2;

        $r8 = interfaceinvoke r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        $r1 = (org.apache.commons.math3.ml.neuralnet.Neuron) $r6;

        $l0 = virtualinvoke $r1.<org.apache.commons.math3.ml.neuralnet.Neuron: long getIdentifier()>();

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        interfaceinvoke r7.<java.util.Set: boolean remove(java.lang.Object)>($r5);

        goto label1;

     label2:
        r3 = new java.util.ArrayList;

        specialinvoke r3.<java.util.ArrayList: void <init>()>();

        $r8 = interfaceinvoke r7.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.lang.Long) $r6;

        $l0 = virtualinvoke $r5.<java.lang.Long: long longValue()>();

        $r1 = virtualinvoke r0.<org.apache.commons.math3.ml.neuralnet.Network: org.apache.commons.math3.ml.neuralnet.Neuron getNeuron(long)>($l0);

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r1);

        goto label3;

     label4:
        return r3;
    }
    public org.apache.commons.math3.ml.neuralnet.Neuron getNeuron(long)
    {
        org.apache.commons.math3.ml.neuralnet.Network r0;
        long $l0;
        java.util.concurrent.ConcurrentHashMap $r1;
        java.lang.Long $r2;
        java.lang.Object $r3;
        org.apache.commons.math3.ml.neuralnet.Neuron r4;
        java.util.NoSuchElementException $r5;
        java.lang.String $r6;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.Network;

        $l0 := @parameter0: long;

        $r1 = r0.<org.apache.commons.math3.ml.neuralnet.Network: java.util.concurrent.ConcurrentHashMap neuronMap>;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r3 = virtualinvoke $r1.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r2);

        r4 = (org.apache.commons.math3.ml.neuralnet.Neuron) $r3;

        if r4 != null goto label1;

        $r5 = new java.util.NoSuchElementException;

        $r6 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l0);

        specialinvoke $r5.<java.util.NoSuchElementException: void <init>(java.lang.String)>($r6);

        throw $r5;

     label1:
        return r4;
    }
    public java.util.Collection getNeurons(java.util.Comparator)
    {
        org.apache.commons.math3.ml.neuralnet.Network r0;
        java.util.Comparator r1;
        java.util.ArrayList r2;
        java.util.Collection $r3;
        java.util.concurrent.ConcurrentHashMap $r4;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.Network;

        r1 := @parameter0: java.util.Comparator;

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        $r4 = r0.<org.apache.commons.math3.ml.neuralnet.Network: java.util.concurrent.ConcurrentHashMap neuronMap>;

        $r3 = virtualinvoke $r4.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        interfaceinvoke r2.<java.util.List: boolean addAll(java.util.Collection)>($r3);

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(r2, r1);

        return r2;
    }
    public java.util.Iterator iterator()
    {
        org.apache.commons.math3.ml.neuralnet.Network r0;
        java.util.concurrent.ConcurrentHashMap $r1;
        java.util.Collection $r2;
        java.util.Iterator $r3;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.Network;

        $r1 = r0.<org.apache.commons.math3.ml.neuralnet.Network: java.util.concurrent.ConcurrentHashMap neuronMap>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

        return $r3;
    }
