org.apache.commons.math3.ml.neuralnet.twod.util.QuantizationError extends java.lang.Object implements org.apache.commons.math3.ml.neuralnet.twod.util.MapDataVisualization
private final org.apache.commons.math3.ml.distance.DistanceMeasure distance
    public void <init>(org.apache.commons.math3.ml.distance.DistanceMeasure)
    {
        org.apache.commons.math3.ml.neuralnet.twod.util.QuantizationError r0;
        org.apache.commons.math3.ml.distance.DistanceMeasure $r1;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.twod.util.QuantizationError;

        $r1 := @parameter0: org.apache.commons.math3.ml.distance.DistanceMeasure;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.ml.neuralnet.twod.util.QuantizationError: org.apache.commons.math3.ml.distance.DistanceMeasure distance> = $r1;

        return;
    }
    public double[][] computeImage(org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D, java.lang.Iterable)
    {
        org.apache.commons.math3.ml.neuralnet.twod.util.QuantizationError r0;
        org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D $r1;
        java.lang.Iterable r2;
        int i0, $i1, $i2, $i3, $i4;
        org.apache.commons.math3.ml.neuralnet.twod.util.LocationFinder r3;
        int[] $r4;
        java.lang.Class $r5;
        java.lang.Object $r6;
        int[][] r7;
        double[][] r8;
        java.util.Iterator $r9;
        boolean $z0;
        double[] r10, $r14, $r15;
        org.apache.commons.math3.ml.distance.DistanceMeasure $r11;
        org.apache.commons.math3.ml.neuralnet.Neuron $r12;
        org.apache.commons.math3.ml.neuralnet.twod.util.LocationFinder$Location $r13;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.twod.util.QuantizationError;

        $r1 := @parameter0: org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D;

        r2 := @parameter1: java.lang.Iterable;

        $i1 = virtualinvoke $r1.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int getNumberOfRows()>();

        $i2 = virtualinvoke $r1.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int getNumberOfColumns()>();

        r3 = new org.apache.commons.math3.ml.neuralnet.twod.util.LocationFinder;

        specialinvoke r3.<org.apache.commons.math3.ml.neuralnet.twod.util.LocationFinder: void <init>(org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D)>($r1);

        $r4 = newarray (int)[2];

        $r4[0] = $i1;

        $r4[1] = $i2;

        $r5 = <java.lang.Integer: java.lang.Class TYPE>;

        $r6 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r5, $r4);

        r7 = (int[][]) $r6;

        $r4 = newarray (int)[2];

        $r4[0] = $i1;

        $r4[1] = $i2;

        $r5 = <java.lang.Double: java.lang.Class TYPE>;

        $r6 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r5, $r4);

        r8 = (double[][]) $r6;

        $r9 = interfaceinvoke r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r10 = (double[]) $r6;

        $r11 = r0.<org.apache.commons.math3.ml.neuralnet.twod.util.QuantizationError: org.apache.commons.math3.ml.distance.DistanceMeasure distance>;

        $r12 = staticinvoke <org.apache.commons.math3.ml.neuralnet.MapUtils: org.apache.commons.math3.ml.neuralnet.Neuron findBest(double[],java.lang.Iterable,org.apache.commons.math3.ml.distance.DistanceMeasure)>(r10, $r1, $r11);

        $r13 = virtualinvoke r3.<org.apache.commons.math3.ml.neuralnet.twod.util.LocationFinder: org.apache.commons.math3.ml.neuralnet.twod.util.LocationFinder$Location getLocation(org.apache.commons.math3.ml.neuralnet.Neuron)>($r12);

        i0 = virtualinvoke $r13.<org.apache.commons.math3.ml.neuralnet.twod.util.LocationFinder$Location: int getRow()>();

        $i3 = virtualinvoke $r13.<org.apache.commons.math3.ml.neuralnet.twod.util.LocationFinder$Location: int getColumn()>();

        $r4 = r7[i0];

        $i4 = $r4[$i3];

        $i4 = $i4 + 1;

        $r4[$i3] = $i4;

        $r14 = r8[i0];

        $d0 = $r14[$i3];

        $r11 = r0.<org.apache.commons.math3.ml.neuralnet.twod.util.QuantizationError: org.apache.commons.math3.ml.distance.DistanceMeasure distance>;

        $r15 = virtualinvoke $r12.<org.apache.commons.math3.ml.neuralnet.Neuron: double[] getFeatures()>();

        $d1 = interfaceinvoke $r11.<org.apache.commons.math3.ml.distance.DistanceMeasure: double compute(double[],double[])>(r10, $r15);

        $d0 = $d0 + $d1;

        $r14[$i3] = $d0;

        goto label1;

     label2:
        $i3 = 0;

     label3:
        if $i3 >= $i1 goto label7;

        $i4 = 0;

     label4:
        if $i4 >= $i2 goto label6;

        $r4 = r7[$i3];

        i0 = $r4[$i4];

        if i0 == 0 goto label5;

        r10 = r8[$i3];

        $d0 = r10[$i4];

        $d1 = (double) i0;

        $d0 = $d0 / $d1;

        r10[$i4] = $d0;

     label5:
        $i4 = $i4 + 1;

        goto label4;

     label6:
        $i3 = $i3 + 1;

        goto label3;

     label7:
        return r8;
    }
