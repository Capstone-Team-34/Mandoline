org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer extends org.apache.commons.math3.ml.clustering.Clusterer
private final org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy emptyStrategy
private final int k
private final int maxIterations
private final org.apache.commons.math3.random.RandomGenerator random
    public void <init>(int)
    {
        org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer;

        $i0 := @parameter0: int;

        specialinvoke r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: void <init>(int,int)>($i0, -1);

        return;
    }
    public void <init>(int, int)
    {
        org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer r0;
        int $i0, $i1;
        org.apache.commons.math3.ml.distance.EuclideanDistance $r1;

        r0 := @this: org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = new org.apache.commons.math3.ml.distance.EuclideanDistance;

        specialinvoke $r1.<org.apache.commons.math3.ml.distance.EuclideanDistance: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: void <init>(int,int,org.apache.commons.math3.ml.distance.DistanceMeasure)>($i0, $i1, $r1);

        return;
    }
    public void <init>(int, int, org.apache.commons.math3.ml.distance.DistanceMeasure)
    {
        org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer r0;
        int $i0, $i1;
        org.apache.commons.math3.ml.distance.DistanceMeasure $r1;
        org.apache.commons.math3.random.JDKRandomGenerator $r2;

        r0 := @this: org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 := @parameter2: org.apache.commons.math3.ml.distance.DistanceMeasure;

        $r2 = new org.apache.commons.math3.random.JDKRandomGenerator;

        specialinvoke $r2.<org.apache.commons.math3.random.JDKRandomGenerator: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: void <init>(int,int,org.apache.commons.math3.ml.distance.DistanceMeasure,org.apache.commons.math3.random.RandomGenerator)>($i0, $i1, $r1, $r2);

        return;
    }
    public void <init>(int, int, org.apache.commons.math3.ml.distance.DistanceMeasure, org.apache.commons.math3.random.RandomGenerator)
    {
        org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer r0;
        int $i0, $i1;
        org.apache.commons.math3.ml.distance.DistanceMeasure $r1;
        org.apache.commons.math3.random.RandomGenerator $r2;
        org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy $r3;

        r0 := @this: org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 := @parameter2: org.apache.commons.math3.ml.distance.DistanceMeasure;

        $r2 := @parameter3: org.apache.commons.math3.random.RandomGenerator;

        $r3 = <org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy: org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy LARGEST_VARIANCE>;

        specialinvoke r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: void <init>(int,int,org.apache.commons.math3.ml.distance.DistanceMeasure,org.apache.commons.math3.random.RandomGenerator,org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy)>($i0, $i1, $r1, $r2, $r3);

        return;
    }
    public void <init>(int, int, org.apache.commons.math3.ml.distance.DistanceMeasure, org.apache.commons.math3.random.RandomGenerator, org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy)
    {
        org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer r0;
        int $i0, $i1;
        org.apache.commons.math3.ml.distance.DistanceMeasure $r1;
        org.apache.commons.math3.random.RandomGenerator $r2;
        org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy $r3;

        r0 := @this: org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 := @parameter2: org.apache.commons.math3.ml.distance.DistanceMeasure;

        $r2 := @parameter3: org.apache.commons.math3.random.RandomGenerator;

        $r3 := @parameter4: org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy;

        specialinvoke r0.<org.apache.commons.math3.ml.clustering.Clusterer: void <init>(org.apache.commons.math3.ml.distance.DistanceMeasure)>($r1);

        r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: int k> = $i0;

        r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: int maxIterations> = $i1;

        r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: org.apache.commons.math3.random.RandomGenerator random> = $r2;

        r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy emptyStrategy> = $r3;

        return;
    }
    private int assignPointsToClusters(java.util.List, java.util.Collection, int[])
    {
        org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer r0;
        java.util.List r1;
        java.util.Collection r2;
        int[] $r3;
        int i0, i1, i2, $i3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        org.apache.commons.math3.ml.clustering.Clusterable r6;
        org.apache.commons.math3.ml.clustering.CentroidCluster r7;

        r0 := @this: org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.Collection;

        $r3 := @parameter2: int[];

        i1 = 0;

        i2 = 0;

        $r4 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.commons.math3.ml.clustering.Clusterable) $r5;

        $i3 = specialinvoke r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: int getNearestCluster(java.util.Collection,org.apache.commons.math3.ml.clustering.Clusterable)>(r1, r6);

        i0 = $r3[i2];

        if $i3 == i0 goto label2;

        i1 = i1 + 1;

     label2:
        $r5 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>($i3);

        r7 = (org.apache.commons.math3.ml.clustering.CentroidCluster) $r5;

        virtualinvoke r7.<org.apache.commons.math3.ml.clustering.CentroidCluster: void addPoint(org.apache.commons.math3.ml.clustering.Clusterable)>(r6);

        $r3[i2] = $i3;

        i2 = i2 + 1;

        goto label1;

     label3:
        return i1;
    }
    private org.apache.commons.math3.ml.clustering.Clusterable centroidOf(java.util.Collection, int)
    {
        org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer r0;
        java.util.Collection r1;
        int $i0, $i1;
        double[] r2, $r6;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        org.apache.commons.math3.ml.clustering.Clusterable r5;
        double $d0, $d1;
        org.apache.commons.math3.ml.clustering.DoublePoint $r7;

        r0 := @this: org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer;

        r1 := @parameter0: java.util.Collection;

        $i0 := @parameter1: int;

        r2 = newarray (double)[$i0];

        $r3 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.commons.math3.ml.clustering.Clusterable) $r4;

        $r6 = interfaceinvoke r5.<org.apache.commons.math3.ml.clustering.Clusterable: double[] getPoint()>();

        $i0 = 0;

     label2:
        $i1 = lengthof r2;

        if $i0 >= $i1 goto label1;

        $d0 = r2[$i0];

        $d1 = $r6[$i0];

        $d0 = $d0 + $d1;

        r2[$i0] = $d0;

        $i0 = $i0 + 1;

        goto label2;

     label3:
        $i0 = 0;

     label4:
        $i1 = lengthof r2;

        if $i0 >= $i1 goto label5;

        $d0 = r2[$i0];

        $i1 = interfaceinvoke r1.<java.util.Collection: int size()>();

        $d1 = (double) $i1;

        $d0 = $d0 / $d1;

        r2[$i0] = $d0;

        $i0 = $i0 + 1;

        goto label4;

     label5:
        $r7 = new org.apache.commons.math3.ml.clustering.DoublePoint;

        specialinvoke $r7.<org.apache.commons.math3.ml.clustering.DoublePoint: void <init>(double[])>(r2);

        return $r7;
    }
    private java.util.List chooseInitialCenters(java.util.Collection)
    {
        org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer r0;
        java.util.Collection r1;
        double d0, $d1, $d2;
        double[] r2;
        java.util.ArrayList r3;
        java.util.List $r4;
        int $i0, $i1, i2;
        boolean[] $r5;
        org.apache.commons.math3.random.RandomGenerator $r6;
        java.lang.Object $r7;
        org.apache.commons.math3.ml.clustering.Clusterable r8, $r10;
        org.apache.commons.math3.ml.clustering.CentroidCluster $r9;
        boolean $z0;
        byte $b3;

        r0 := @this: org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer;

        r1 := @parameter0: java.util.Collection;

        r3 = new java.util.ArrayList;

        specialinvoke r3.<java.util.ArrayList: void <init>(java.util.Collection)>(r1);

        $r4 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r3);

        $i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        $r5 = newarray (boolean)[$i0];

        r3 = new java.util.ArrayList;

        specialinvoke r3.<java.util.ArrayList: void <init>()>();

        $r6 = r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: org.apache.commons.math3.random.RandomGenerator random>;

        $i1 = interfaceinvoke $r6.<org.apache.commons.math3.random.RandomGenerator: int nextInt(int)>($i0);

        $r7 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>($i1);

        r8 = (org.apache.commons.math3.ml.clustering.Clusterable) $r7;

        $r9 = new org.apache.commons.math3.ml.clustering.CentroidCluster;

        specialinvoke $r9.<org.apache.commons.math3.ml.clustering.CentroidCluster: void <init>(org.apache.commons.math3.ml.clustering.Clusterable)>(r8);

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r9);

        $r5[$i1] = 1;

        r2 = newarray (double)[$i0];

        i2 = 0;

     label01:
        if i2 >= $i0 goto label03;

        if i2 == $i1 goto label02;

        $r7 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i2);

        $r10 = (org.apache.commons.math3.ml.clustering.Clusterable) $r7;

        d0 = virtualinvoke r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: double distance(org.apache.commons.math3.ml.clustering.Clusterable,org.apache.commons.math3.ml.clustering.Clusterable)>(r8, $r10);

        d0 = d0 * d0;

        r2[i2] = d0;

     label02:
        i2 = i2 + 1;

        goto label01;

     label03:
        $i1 = interfaceinvoke r3.<java.util.List: int size()>();

        i2 = r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: int k>;

        if $i1 >= i2 goto label15;

        d0 = 0.0;

        $i1 = 0;

     label04:
        if $i1 >= $i0 goto label06;

        $z0 = $r5[$i1];

        if $z0 != 0 goto label05;

        $d1 = r2[$i1];

        d0 = d0 + $d1;

     label05:
        $i1 = $i1 + 1;

        goto label04;

     label06:
        $r6 = r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: org.apache.commons.math3.random.RandomGenerator random>;

        $d1 = interfaceinvoke $r6.<org.apache.commons.math3.random.RandomGenerator: double nextDouble()>();

        d0 = $d1 * d0;

        $i1 = -1;

        $d1 = 0.0;

        i2 = 0;

     label07:
        if i2 >= $i0 goto label08;

        $z0 = $r5[i2];

        if $z0 != 0 goto label13;

        $d2 = r2[i2];

        $d1 = $d1 + $d2;

        $b3 = $d1 cmpl d0;

        if $b3 < 0 goto label13;

        $i1 = i2;

     label08:
        if $i1 != -1 goto label10;

        i2 = $i0 + -1;

     label09:
        if i2 < 0 goto label10;

        $z0 = $r5[i2];

        if $z0 != 0 goto label14;

        $i1 = i2;

     label10:
        if $i1 < 0 goto label15;

        $r7 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>($i1);

        r8 = (org.apache.commons.math3.ml.clustering.Clusterable) $r7;

        $r9 = new org.apache.commons.math3.ml.clustering.CentroidCluster;

        specialinvoke $r9.<org.apache.commons.math3.ml.clustering.CentroidCluster: void <init>(org.apache.commons.math3.ml.clustering.Clusterable)>(r8);

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r9);

        $r5[$i1] = 1;

        $i1 = interfaceinvoke r3.<java.util.List: int size()>();

        i2 = r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: int k>;

        if $i1 >= i2 goto label03;

        $i1 = 0;

     label11:
        if $i1 >= $i0 goto label03;

        $z0 = $r5[$i1];

        if $z0 != 0 goto label12;

        $r7 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>($i1);

        $r10 = (org.apache.commons.math3.ml.clustering.Clusterable) $r7;

        d0 = virtualinvoke r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: double distance(org.apache.commons.math3.ml.clustering.Clusterable,org.apache.commons.math3.ml.clustering.Clusterable)>(r8, $r10);

        d0 = d0 * d0;

        $d1 = r2[$i1];

        $b3 = d0 cmpg $d1;

        if $b3 >= 0 goto label12;

        r2[$i1] = d0;

     label12:
        $i1 = $i1 + 1;

        goto label11;

     label13:
        i2 = i2 + 1;

        goto label07;

     label14:
        i2 = i2 + -1;

        goto label09;

     label15:
        return r3;
    }
    private org.apache.commons.math3.ml.clustering.Clusterable getFarthestPoint(java.util.Collection) throws org.apache.commons.math3.exception.ConvergenceException
    {
        org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer r0;
        java.util.Collection r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        double d0, $d1;
        org.apache.commons.math3.ml.clustering.CentroidCluster r3, r6;
        int i0, i1, $i2;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        org.apache.commons.math3.ml.clustering.Clusterable $r7, $r9;
        java.util.List $r8;
        byte $b3;
        org.apache.commons.math3.exception.ConvergenceException $r10;
        java.lang.Object[] $r11;

        r0 := @this: org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer;

        r1 := @parameter0: java.util.Collection;

        d0 = #-Infinity;

        r3 = null;

        i0 = -1;

        $r4 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.commons.math3.ml.clustering.CentroidCluster) $r5;

        $r7 = virtualinvoke r6.<org.apache.commons.math3.ml.clustering.CentroidCluster: org.apache.commons.math3.ml.clustering.Clusterable getCenter()>();

        $r8 = virtualinvoke r6.<org.apache.commons.math3.ml.clustering.CentroidCluster: java.util.List getPoints()>();

        i1 = 0;

     label2:
        $i2 = interfaceinvoke $r8.<java.util.List: int size()>();

        if i1 >= $i2 goto label1;

        $r5 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(i1);

        $r9 = (org.apache.commons.math3.ml.clustering.Clusterable) $r5;

        $d1 = virtualinvoke r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: double distance(org.apache.commons.math3.ml.clustering.Clusterable,org.apache.commons.math3.ml.clustering.Clusterable)>($r9, $r7);

        $b3 = $d1 cmpl d0;

        if $b3 <= 0 goto label3;

        d0 = $d1;

        r3 = r6;

        i0 = i1;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        if r3 != null goto label5;

        $r10 = new org.apache.commons.math3.exception.ConvergenceException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats EMPTY_CLUSTER_IN_K_MEANS>;

        $r11 = newarray (java.lang.Object)[0];

        specialinvoke $r10.<org.apache.commons.math3.exception.ConvergenceException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r2, $r11);

        throw $r10;

     label5:
        $r8 = virtualinvoke r3.<org.apache.commons.math3.ml.clustering.Cluster: java.util.List getPoints()>();

        $r5 = interfaceinvoke $r8.<java.util.List: java.lang.Object remove(int)>(i0);

        $r7 = (org.apache.commons.math3.ml.clustering.Clusterable) $r5;

        return $r7;
    }
    private int getNearestCluster(java.util.Collection, org.apache.commons.math3.ml.clustering.Clusterable)
    {
        org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer r0;
        java.util.Collection r1;
        org.apache.commons.math3.ml.clustering.Clusterable r2, $r6;
        double d0, $d1;
        int i0, i1;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        org.apache.commons.math3.ml.clustering.CentroidCluster r5;
        byte $b2;

        r0 := @this: org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer;

        r1 := @parameter0: java.util.Collection;

        r2 := @parameter1: org.apache.commons.math3.ml.clustering.Clusterable;

        d0 = 1.7976931348623157E308;

        i0 = 0;

        i1 = 0;

        $r3 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.commons.math3.ml.clustering.CentroidCluster) $r4;

        $r6 = virtualinvoke r5.<org.apache.commons.math3.ml.clustering.CentroidCluster: org.apache.commons.math3.ml.clustering.Clusterable getCenter()>();

        $d1 = virtualinvoke r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: double distance(org.apache.commons.math3.ml.clustering.Clusterable,org.apache.commons.math3.ml.clustering.Clusterable)>(r2, $r6);

        $b2 = $d1 cmpg d0;

        if $b2 >= 0 goto label2;

        d0 = $d1;

        i1 = i0;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return i1;
    }
    private org.apache.commons.math3.ml.clustering.Clusterable getPointFromLargestNumberCluster(java.util.Collection) throws org.apache.commons.math3.exception.ConvergenceException
    {
        org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer r0;
        java.util.Collection r1;
        int i0, $i1;
        org.apache.commons.math3.ml.clustering.Cluster r2, r5;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        java.util.List $r6;
        org.apache.commons.math3.exception.ConvergenceException $r7;
        org.apache.commons.math3.exception.util.LocalizedFormats $r8;
        java.lang.Object[] $r9;
        org.apache.commons.math3.random.RandomGenerator $r10;
        org.apache.commons.math3.ml.clustering.Clusterable $r11;

        r0 := @this: org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer;

        r1 := @parameter0: java.util.Collection;

        i0 = 0;

        r2 = null;

        $r3 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.commons.math3.ml.clustering.Cluster) $r4;

        $r6 = virtualinvoke r5.<org.apache.commons.math3.ml.clustering.Cluster: java.util.List getPoints()>();

        $i1 = interfaceinvoke $r6.<java.util.List: int size()>();

        if $i1 <= i0 goto label1;

        i0 = $i1;

        r2 = r5;

        goto label1;

     label2:
        if r2 != null goto label3;

        $r7 = new org.apache.commons.math3.exception.ConvergenceException;

        $r8 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats EMPTY_CLUSTER_IN_K_MEANS>;

        $r9 = newarray (java.lang.Object)[0];

        specialinvoke $r7.<org.apache.commons.math3.exception.ConvergenceException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r8, $r9);

        throw $r7;

     label3:
        $r6 = virtualinvoke r2.<org.apache.commons.math3.ml.clustering.Cluster: java.util.List getPoints()>();

        $r10 = r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: org.apache.commons.math3.random.RandomGenerator random>;

        i0 = interfaceinvoke $r6.<java.util.List: int size()>();

        i0 = interfaceinvoke $r10.<org.apache.commons.math3.random.RandomGenerator: int nextInt(int)>(i0);

        $r4 = interfaceinvoke $r6.<java.util.List: java.lang.Object remove(int)>(i0);

        $r11 = (org.apache.commons.math3.ml.clustering.Clusterable) $r4;

        return $r11;
    }
    private org.apache.commons.math3.ml.clustering.Clusterable getPointFromLargestVarianceCluster(java.util.Collection) throws org.apache.commons.math3.exception.ConvergenceException
    {
        org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer r0;
        java.util.Collection r1;
        org.apache.commons.math3.stat.descriptive.moment.Variance r2;
        double d0, $d1;
        org.apache.commons.math3.ml.clustering.CentroidCluster r3, r6;
        java.util.Iterator $r4, $r9;
        boolean $z0;
        java.lang.Object $r5;
        java.util.List $r7;
        org.apache.commons.math3.ml.clustering.Clusterable $r8, r10;
        byte $b0;
        org.apache.commons.math3.exception.ConvergenceException $r11;
        org.apache.commons.math3.exception.util.LocalizedFormats $r12;
        java.lang.Object[] $r13;
        org.apache.commons.math3.random.RandomGenerator $r14;
        int $i1;

        r0 := @this: org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer;

        r1 := @parameter0: java.util.Collection;

        d0 = #-Infinity;

        r3 = null;

        $r4 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.commons.math3.ml.clustering.CentroidCluster) $r5;

        $r7 = virtualinvoke r6.<org.apache.commons.math3.ml.clustering.CentroidCluster: java.util.List getPoints()>();

        $z0 = interfaceinvoke $r7.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r8 = virtualinvoke r6.<org.apache.commons.math3.ml.clustering.CentroidCluster: org.apache.commons.math3.ml.clustering.Clusterable getCenter()>();

        r2 = new org.apache.commons.math3.stat.descriptive.moment.Variance;

        specialinvoke r2.<org.apache.commons.math3.stat.descriptive.moment.Variance: void <init>()>();

        $r7 = virtualinvoke r6.<org.apache.commons.math3.ml.clustering.CentroidCluster: java.util.List getPoints()>();

        $r9 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.apache.commons.math3.ml.clustering.Clusterable) $r5;

        $d1 = virtualinvoke r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: double distance(org.apache.commons.math3.ml.clustering.Clusterable,org.apache.commons.math3.ml.clustering.Clusterable)>(r10, $r8);

        virtualinvoke r2.<org.apache.commons.math3.stat.descriptive.moment.Variance: void increment(double)>($d1);

        goto label2;

     label3:
        $d1 = virtualinvoke r2.<org.apache.commons.math3.stat.descriptive.moment.Variance: double getResult()>();

        $b0 = $d1 cmpl d0;

        if $b0 <= 0 goto label1;

        d0 = $d1;

        r3 = r6;

        goto label1;

     label4:
        if r3 != null goto label5;

        $r11 = new org.apache.commons.math3.exception.ConvergenceException;

        $r12 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats EMPTY_CLUSTER_IN_K_MEANS>;

        $r13 = newarray (java.lang.Object)[0];

        specialinvoke $r11.<org.apache.commons.math3.exception.ConvergenceException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r12, $r13);

        throw $r11;

     label5:
        $r7 = virtualinvoke r3.<org.apache.commons.math3.ml.clustering.Cluster: java.util.List getPoints()>();

        $r14 = r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: org.apache.commons.math3.random.RandomGenerator random>;

        $i1 = interfaceinvoke $r7.<java.util.List: int size()>();

        $i1 = interfaceinvoke $r14.<org.apache.commons.math3.random.RandomGenerator: int nextInt(int)>($i1);

        $r5 = interfaceinvoke $r7.<java.util.List: java.lang.Object remove(int)>($i1);

        $r8 = (org.apache.commons.math3.ml.clustering.Clusterable) $r5;

        return $r8;
    }
    public java.util.List cluster(java.util.Collection) throws org.apache.commons.math3.exception.MathIllegalArgumentException, org.apache.commons.math3.exception.ConvergenceException
    {
        org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer r0;
        java.util.Collection r1;
        int[] r2, $r12;
        java.util.ArrayList r3;
        int $i0, $i1, $i2;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r4;
        java.lang.Integer $r5, $r6;
        java.util.List $r7, r8;
        boolean z0, $z1;
        java.util.Iterator $r9;
        java.lang.Object $r10;
        org.apache.commons.math3.ml.clustering.CentroidCluster r11;
        org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy $r13;
        org.apache.commons.math3.exception.ConvergenceException $r14;
        org.apache.commons.math3.exception.util.LocalizedFormats $r15;
        java.lang.Object[] $r16;
        org.apache.commons.math3.ml.clustering.Clusterable $r17;
        double[] $r18;

        r0 := @this: org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer;

        r1 := @parameter0: java.util.Collection;

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r1);

        $i0 = interfaceinvoke r1.<java.util.Collection: int size()>();

        $i1 = r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: int k>;

        if $i0 >= $i1 goto label01;

        $r4 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $i0 = interfaceinvoke r1.<java.util.Collection: int size()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $i0 = r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: int k>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r4.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r5, $r6, 0);

        throw $r4;

     label01:
        $r7 = specialinvoke r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: java.util.List chooseInitialCenters(java.util.Collection)>(r1);

        r8 = $r7;

        $i0 = interfaceinvoke r1.<java.util.Collection: int size()>();

        r2 = newarray (int)[$i0];

        specialinvoke r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: int assignPointsToClusters(java.util.List,java.util.Collection,int[])>($r7, r1, r2);

        $i0 = r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: int maxIterations>;

        if $i0 >= 0 goto label06;

        $i0 = 2147483647;

     label02:
        $i1 = 0;

     label03:
        if $i1 >= $i0 goto label15;

        z0 = 0;

        r3 = new java.util.ArrayList;

        specialinvoke r3.<java.util.ArrayList: void <init>()>();

        $r9 = interfaceinvoke r8.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z1 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label13;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r11 = (org.apache.commons.math3.ml.clustering.CentroidCluster) $r10;

        $r7 = virtualinvoke r11.<org.apache.commons.math3.ml.clustering.CentroidCluster: java.util.List getPoints()>();

        $z1 = interfaceinvoke $r7.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label12;

        $r12 = <org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer$1: int[] $SwitchMap$org$apache$commons$math3$ml$clustering$KMeansPlusPlusClusterer$EmptyClusterStrategy>;

        $r13 = r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy emptyStrategy>;

        $i2 = virtualinvoke $r13.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy: int ordinal()>();

        $i2 = $r12[$i2];

        lookupswitch($i2)
        {
            case 1: goto label07;
            case 2: goto label10;
            case 3: goto label11;
            default: goto label05;
        };

     label05:
        $r14 = new org.apache.commons.math3.exception.ConvergenceException;

        $r15 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats EMPTY_CLUSTER_IN_K_MEANS>;

        $r16 = newarray (java.lang.Object)[0];

        specialinvoke $r14.<org.apache.commons.math3.exception.ConvergenceException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r15, $r16);

        throw $r14;

     label06:
        $i0 = r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: int maxIterations>;

        goto label02;

     label07:
        $r17 = specialinvoke r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: org.apache.commons.math3.ml.clustering.Clusterable getPointFromLargestVarianceCluster(java.util.Collection)>(r8);

     label08:
        z0 = 1;

     label09:
        r11 = new org.apache.commons.math3.ml.clustering.CentroidCluster;

        specialinvoke r11.<org.apache.commons.math3.ml.clustering.CentroidCluster: void <init>(org.apache.commons.math3.ml.clustering.Clusterable)>($r17);

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r11);

        goto label04;

     label10:
        $r17 = specialinvoke r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: org.apache.commons.math3.ml.clustering.Clusterable getPointFromLargestNumberCluster(java.util.Collection)>(r8);

        goto label08;

     label11:
        $r17 = specialinvoke r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: org.apache.commons.math3.ml.clustering.Clusterable getFarthestPoint(java.util.Collection)>(r8);

        goto label08;

     label12:
        $r7 = virtualinvoke r11.<org.apache.commons.math3.ml.clustering.CentroidCluster: java.util.List getPoints()>();

        $r17 = virtualinvoke r11.<org.apache.commons.math3.ml.clustering.CentroidCluster: org.apache.commons.math3.ml.clustering.Clusterable getCenter()>();

        $r18 = interfaceinvoke $r17.<org.apache.commons.math3.ml.clustering.Clusterable: double[] getPoint()>();

        $i2 = lengthof $r18;

        $r17 = specialinvoke r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: org.apache.commons.math3.ml.clustering.Clusterable centroidOf(java.util.Collection,int)>($r7, $i2);

        goto label09;

     label13:
        $i2 = specialinvoke r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: int assignPointsToClusters(java.util.List,java.util.Collection,int[])>(r3, r1, r2);

        r8 = r3;

        if $i2 != 0 goto label14;

        if z0 != 0 goto label14;

        return r3;

     label14:
        $i1 = $i1 + 1;

        goto label03;

     label15:
        return r8;
    }
    public org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy getEmptyClusterStrategy()
    {
        org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer r0;
        org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy r1;

        r0 := @this: org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer;

        r1 = r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy emptyStrategy>;

        return r1;
    }
    public int getK()
    {
        org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer r0;
        int i0;

        r0 := @this: org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer;

        i0 = r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: int k>;

        return i0;
    }
    public int getMaxIterations()
    {
        org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer r0;
        int i0;

        r0 := @this: org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer;

        i0 = r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: int maxIterations>;

        return i0;
    }
    public org.apache.commons.math3.random.RandomGenerator getRandomGenerator()
    {
        org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer r0;
        org.apache.commons.math3.random.RandomGenerator r1;

        r0 := @this: org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer;

        r1 = r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: org.apache.commons.math3.random.RandomGenerator random>;

        return r1;
    }
