org.apache.commons.math3.ml.neuralnet.Neuron extends java.lang.Object implements java.io.Serializable
private static final long serialVersionUID
private final java.util.concurrent.atomic.AtomicReference features
private final long identifier
private final java.util.concurrent.atomic.AtomicLong numberOfAttemptedUpdates
private final java.util.concurrent.atomic.AtomicLong numberOfSuccessfulUpdates
private final int size
    void <init>(long, double[])
    {
        org.apache.commons.math3.ml.neuralnet.Neuron r0;
        long $l0;
        double[] $r1;
        java.lang.Object $r2;
        java.util.concurrent.atomic.AtomicLong $r3;
        int $i1;
        java.util.concurrent.atomic.AtomicReference $r4;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.Neuron;

        $l0 := @parameter0: long;

        $r1 := @parameter1: double[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L);

        r0.<org.apache.commons.math3.ml.neuralnet.Neuron: java.util.concurrent.atomic.AtomicLong numberOfAttemptedUpdates> = $r3;

        $r3 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L);

        r0.<org.apache.commons.math3.ml.neuralnet.Neuron: java.util.concurrent.atomic.AtomicLong numberOfSuccessfulUpdates> = $r3;

        r0.<org.apache.commons.math3.ml.neuralnet.Neuron: long identifier> = $l0;

        $i1 = lengthof $r1;

        r0.<org.apache.commons.math3.ml.neuralnet.Neuron: int size> = $i1;

        $r4 = new java.util.concurrent.atomic.AtomicReference;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        specialinvoke $r4.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>($r2);

        r0.<org.apache.commons.math3.ml.neuralnet.Neuron: java.util.concurrent.atomic.AtomicReference features> = $r4;

        return;
    }
    private boolean containSameValues(double[], double[])
    {
        org.apache.commons.math3.ml.neuralnet.Neuron r0;
        double[] $r1, $r2;
        int $i0, $i1;
        double $d0, $d1;
        boolean $z0;
        org.apache.commons.math3.exception.DimensionMismatchException $r3;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.Neuron;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[];

        $i0 = lengthof $r2;

        $i1 = r0.<org.apache.commons.math3.ml.neuralnet.Neuron: int size>;

        if $i0 == $i1 goto label1;

        $r3 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i1 = lengthof $r2;

        $i0 = r0.<org.apache.commons.math3.ml.neuralnet.Neuron: int size>;

        specialinvoke $r3.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i1, $i0);

        throw $r3;

     label1:
        $i0 = 0;

     label2:
        $i1 = r0.<org.apache.commons.math3.ml.neuralnet.Neuron: int size>;

        if $i0 >= $i1 goto label4;

        $d1 = $r1[$i0];

        $d0 = $r2[$i0];

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double)>($d1, $d0);

        if $z0 != 0 goto label3;

        return 0;

     label3:
        $i0 = $i0 + 1;

        goto label2;

     label4:
        return 1;
    }
    private void readObject(java.io.ObjectInputStream)
    {
        org.apache.commons.math3.ml.neuralnet.Neuron r0;
        java.io.ObjectInputStream $r1;
        java.lang.IllegalStateException $r2;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.Neuron;

        $r1 := @parameter0: java.io.ObjectInputStream;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>()>();

        throw $r2;
    }
    private java.lang.Object writeReplace()
    {
        org.apache.commons.math3.ml.neuralnet.Neuron r0;
        org.apache.commons.math3.ml.neuralnet.Neuron$SerializationProxy $r1;
        long $l0;
        java.lang.Object $r2;
        java.util.concurrent.atomic.AtomicReference $r3;
        double[] $r4;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.Neuron;

        $r1 = new org.apache.commons.math3.ml.neuralnet.Neuron$SerializationProxy;

        $l0 = r0.<org.apache.commons.math3.ml.neuralnet.Neuron: long identifier>;

        $r3 = r0.<org.apache.commons.math3.ml.neuralnet.Neuron: java.util.concurrent.atomic.AtomicReference features>;

        $r2 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r4 = (double[]) $r2;

        specialinvoke $r1.<org.apache.commons.math3.ml.neuralnet.Neuron$SerializationProxy: void <init>(long,double[])>($l0, $r4);

        return $r1;
    }
    public boolean compareAndSetFeatures(double[], double[])
    {
        org.apache.commons.math3.ml.neuralnet.Neuron r0;
        double[] $r1, $r2, r6;
        int $i0, $i1;
        org.apache.commons.math3.exception.DimensionMismatchException $r3;
        java.util.concurrent.atomic.AtomicReference $r4;
        java.lang.Object $r5;
        boolean $z0;
        java.util.concurrent.atomic.AtomicLong $r7;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.Neuron;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[];

        $i0 = lengthof $r2;

        $i1 = r0.<org.apache.commons.math3.ml.neuralnet.Neuron: int size>;

        if $i0 == $i1 goto label1;

        $r3 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i0 = lengthof $r2;

        $i1 = r0.<org.apache.commons.math3.ml.neuralnet.Neuron: int size>;

        specialinvoke $r3.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i0, $i1);

        throw $r3;

     label1:
        $r4 = r0.<org.apache.commons.math3.ml.neuralnet.Neuron: java.util.concurrent.atomic.AtomicReference features>;

        $r5 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r6 = (double[]) $r5;

        $z0 = specialinvoke r0.<org.apache.commons.math3.ml.neuralnet.Neuron: boolean containSameValues(double[],double[])>(r6, $r1);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $r7 = r0.<org.apache.commons.math3.ml.neuralnet.Neuron: java.util.concurrent.atomic.AtomicLong numberOfAttemptedUpdates>;

        virtualinvoke $r7.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();

        $r4 = r0.<org.apache.commons.math3.ml.neuralnet.Neuron: java.util.concurrent.atomic.AtomicReference features>;

        $r5 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $z0 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(r6, $r5);

        if $z0 == 0 goto label3;

        $r7 = r0.<org.apache.commons.math3.ml.neuralnet.Neuron: java.util.concurrent.atomic.AtomicLong numberOfSuccessfulUpdates>;

        virtualinvoke $r7.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();

        return 1;

     label3:
        return 0;
    }
    public org.apache.commons.math3.ml.neuralnet.Neuron copy()
    {
        org.apache.commons.math3.ml.neuralnet.Neuron r0, r1;
        long $l0;
        double[] $r2;
        java.util.concurrent.atomic.AtomicLong $r3, $r4;
        java.lang.Throwable $r5;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.Neuron;

        entermonitor r0;

     label1:
        r1 = new org.apache.commons.math3.ml.neuralnet.Neuron;

        $l0 = virtualinvoke r0.<org.apache.commons.math3.ml.neuralnet.Neuron: long getIdentifier()>();

        $r2 = virtualinvoke r0.<org.apache.commons.math3.ml.neuralnet.Neuron: double[] getFeatures()>();

        specialinvoke r1.<org.apache.commons.math3.ml.neuralnet.Neuron: void <init>(long,double[])>($l0, $r2);

        $r3 = r1.<org.apache.commons.math3.ml.neuralnet.Neuron: java.util.concurrent.atomic.AtomicLong numberOfAttemptedUpdates>;

        $r4 = r0.<org.apache.commons.math3.ml.neuralnet.Neuron: java.util.concurrent.atomic.AtomicLong numberOfAttemptedUpdates>;

        $l0 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicLong: long get()>();

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicLong: void set(long)>($l0);

        $r3 = r1.<org.apache.commons.math3.ml.neuralnet.Neuron: java.util.concurrent.atomic.AtomicLong numberOfSuccessfulUpdates>;

        $r4 = r0.<org.apache.commons.math3.ml.neuralnet.Neuron: java.util.concurrent.atomic.AtomicLong numberOfSuccessfulUpdates>;

        $l0 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicLong: long get()>();

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicLong: void set(long)>($l0);

     label2:
        exitmonitor r0;

        return r1;

     label3:
        $r5 := @caughtexception;

        exitmonitor r0;

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public double[] getFeatures()
    {
        org.apache.commons.math3.ml.neuralnet.Neuron r0;
        java.util.concurrent.atomic.AtomicReference $r1;
        java.lang.Object $r2;
        double[] $r3;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.Neuron;

        $r1 = r0.<org.apache.commons.math3.ml.neuralnet.Neuron: java.util.concurrent.atomic.AtomicReference features>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r3 = (double[]) $r2;

        $r2 = virtualinvoke $r3.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (double[]) $r2;

        return $r3;
    }
    public long getIdentifier()
    {
        org.apache.commons.math3.ml.neuralnet.Neuron r0;
        long l0;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.Neuron;

        l0 = r0.<org.apache.commons.math3.ml.neuralnet.Neuron: long identifier>;

        return l0;
    }
    public long getNumberOfAttemptedUpdates()
    {
        org.apache.commons.math3.ml.neuralnet.Neuron r0;
        long $l0;
        java.util.concurrent.atomic.AtomicLong $r1;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.Neuron;

        $r1 = r0.<org.apache.commons.math3.ml.neuralnet.Neuron: java.util.concurrent.atomic.AtomicLong numberOfAttemptedUpdates>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long get()>();

        return $l0;
    }
    public long getNumberOfSuccessfulUpdates()
    {
        org.apache.commons.math3.ml.neuralnet.Neuron r0;
        long $l0;
        java.util.concurrent.atomic.AtomicLong $r1;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.Neuron;

        $r1 = r0.<org.apache.commons.math3.ml.neuralnet.Neuron: java.util.concurrent.atomic.AtomicLong numberOfSuccessfulUpdates>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long get()>();

        return $l0;
    }
    public int getSize()
    {
        org.apache.commons.math3.ml.neuralnet.Neuron r0;
        int i0;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.Neuron;

        i0 = r0.<org.apache.commons.math3.ml.neuralnet.Neuron: int size>;

        return i0;
    }
