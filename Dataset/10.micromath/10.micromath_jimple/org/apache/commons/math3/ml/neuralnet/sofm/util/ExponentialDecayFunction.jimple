org.apache.commons.math3.ml.neuralnet.sofm.util.ExponentialDecayFunction extends java.lang.Object
private final double a
private final double oneOverB
    public void <init>(double, double, long)
    {
        org.apache.commons.math3.ml.neuralnet.sofm.util.ExponentialDecayFunction r0;
        double $d0, $d1;
        long $l0;
        byte $b1;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r1;
        java.lang.Double $r2, $r4;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r3;
        java.lang.Long $r5;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.sofm.util.ExponentialDecayFunction;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $l0 := @parameter2: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $b1 = $d0 cmpg 0.0;

        if $b1 > 0 goto label1;

        $r1 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        specialinvoke $r1.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(java.lang.Number)>($r2);

        throw $r1;

     label1:
        $b1 = $d1 cmpg 0.0;

        if $b1 > 0 goto label2;

        $r1 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        specialinvoke $r1.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(java.lang.Number)>($r2);

        throw $r1;

     label2:
        $b1 = $d1 cmpl $d0;

        if $b1 < 0 goto label3;

        $r3 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        specialinvoke $r3.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r2, $r4, 0);

        throw $r3;

     label3:
        $b1 = $l0 cmp 0L;

        if $b1 > 0 goto label4;

        $r1 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        specialinvoke $r1.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(java.lang.Number)>($r5);

        throw $r1;

     label4:
        r0.<org.apache.commons.math3.ml.neuralnet.sofm.util.ExponentialDecayFunction: double a> = $d0;

        $d0 = $d1 / $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d0);

        $d0 = neg $d0;

        $d1 = (double) $l0;

        $d0 = $d0 / $d1;

        r0.<org.apache.commons.math3.ml.neuralnet.sofm.util.ExponentialDecayFunction: double oneOverB> = $d0;

        return;
    }
    public double value(long)
    {
        org.apache.commons.math3.ml.neuralnet.sofm.util.ExponentialDecayFunction r0;
        long $l0;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.sofm.util.ExponentialDecayFunction;

        $l0 := @parameter0: long;

        $d1 = r0.<org.apache.commons.math3.ml.neuralnet.sofm.util.ExponentialDecayFunction: double a>;

        $l0 = neg $l0;

        $d2 = (double) $l0;

        $d0 = r0.<org.apache.commons.math3.ml.neuralnet.sofm.util.ExponentialDecayFunction: double oneOverB>;

        $d0 = $d2 * $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d0);

        $d1 = $d1 * $d0;

        return $d1;
    }
