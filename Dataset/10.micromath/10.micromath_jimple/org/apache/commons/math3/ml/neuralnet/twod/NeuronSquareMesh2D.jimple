org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D extends java.lang.Object implements java.lang.Iterable java.io.Serializable
private static final long serialVersionUID
private final long[][] identifiers
private final org.apache.commons.math3.ml.neuralnet.SquareNeighbourhood neighbourhood
private final org.apache.commons.math3.ml.neuralnet.Network network
private final int numberOfColumns
private final int numberOfRows
private final boolean wrapColumns
private final boolean wrapRows
    public void <init>(int, boolean, int, boolean, org.apache.commons.math3.ml.neuralnet.SquareNeighbourhood, org.apache.commons.math3.ml.neuralnet.FeatureInitializer[])
    {
        org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D r0;
        int $i0, $i1, i2, $i3, i4, i5;
        boolean $z0, $z1;
        org.apache.commons.math3.ml.neuralnet.SquareNeighbourhood $r1;
        org.apache.commons.math3.ml.neuralnet.FeatureInitializer[] $r2;
        double[] r3;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r4;
        java.lang.Integer $r5, $r6;
        int[] $r7;
        java.lang.Class $r8;
        java.lang.Object $r9;
        long[][] $r10;
        org.apache.commons.math3.ml.neuralnet.Network $r11;
        org.apache.commons.math3.ml.neuralnet.FeatureInitializer $r12;
        double $d0;
        long[] $r13;
        long $l6;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D;

        $i0 := @parameter0: int;

        $z0 := @parameter1: boolean;

        $i1 := @parameter2: int;

        $z1 := @parameter3: boolean;

        $r1 := @parameter4: org.apache.commons.math3.ml.neuralnet.SquareNeighbourhood;

        $r2 := @parameter5: org.apache.commons.math3.ml.neuralnet.FeatureInitializer[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if $i0 >= 2 goto label1;

        $r4 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        specialinvoke $r4.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r5, $r6, 1);

        throw $r4;

     label1:
        if $i1 >= 2 goto label2;

        $r4 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        specialinvoke $r4.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r5, $r6, 1);

        throw $r4;

     label2:
        r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int numberOfRows> = $i0;

        r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: boolean wrapRows> = $z0;

        r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int numberOfColumns> = $i1;

        r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: boolean wrapColumns> = $z1;

        r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: org.apache.commons.math3.ml.neuralnet.SquareNeighbourhood neighbourhood> = $r1;

        i2 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int numberOfRows>;

        $i3 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int numberOfColumns>;

        $r7 = newarray (int)[2];

        $r7[0] = i2;

        $r7[1] = $i3;

        $r8 = <java.lang.Long: java.lang.Class TYPE>;

        $r9 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r8, $r7);

        $r10 = (long[][]) $r9;

        r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: long[][] identifiers> = $r10;

        i2 = lengthof $r2;

        $r11 = new org.apache.commons.math3.ml.neuralnet.Network;

        specialinvoke $r11.<org.apache.commons.math3.ml.neuralnet.Network: void <init>(long,int)>(0L, i2);

        r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: org.apache.commons.math3.ml.neuralnet.Network network> = $r11;

        $i3 = 0;

     label3:
        if $i3 >= $i0 goto label8;

        i4 = 0;

     label4:
        if i4 >= $i1 goto label7;

        r3 = newarray (double)[i2];

        i5 = 0;

     label5:
        if i5 >= i2 goto label6;

        $r12 = $r2[i5];

        $d0 = interfaceinvoke $r12.<org.apache.commons.math3.ml.neuralnet.FeatureInitializer: double value()>();

        r3[i5] = $d0;

        i5 = i5 + 1;

        goto label5;

     label6:
        $r10 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: long[][] identifiers>;

        $r13 = $r10[$i3];

        $r11 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: org.apache.commons.math3.ml.neuralnet.Network network>;

        $l6 = virtualinvoke $r11.<org.apache.commons.math3.ml.neuralnet.Network: long createNeuron(double[])>(r3);

        $r13[i4] = $l6;

        i4 = i4 + 1;

        goto label4;

     label7:
        $i3 = $i3 + 1;

        goto label3;

     label8:
        specialinvoke r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: void createLinks()>();

        return;
    }
    private void <init>(boolean, boolean, org.apache.commons.math3.ml.neuralnet.SquareNeighbourhood, org.apache.commons.math3.ml.neuralnet.Network, long[][])
    {
        org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D r0;
        boolean $z0, $z1;
        org.apache.commons.math3.ml.neuralnet.SquareNeighbourhood $r1;
        org.apache.commons.math3.ml.neuralnet.Network $r2;
        long[][] $r3;
        int $i0;
        long[] $r4;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D;

        $z0 := @parameter0: boolean;

        $z1 := @parameter1: boolean;

        $r1 := @parameter2: org.apache.commons.math3.ml.neuralnet.SquareNeighbourhood;

        $r2 := @parameter3: org.apache.commons.math3.ml.neuralnet.Network;

        $r3 := @parameter4: long[][];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = lengthof $r3;

        r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int numberOfRows> = $i0;

        $r4 = $r3[0];

        $i0 = lengthof $r4;

        r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int numberOfColumns> = $i0;

        r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: boolean wrapRows> = $z0;

        r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: boolean wrapColumns> = $z1;

        r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: org.apache.commons.math3.ml.neuralnet.SquareNeighbourhood neighbourhood> = $r1;

        r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: org.apache.commons.math3.ml.neuralnet.Network network> = $r2;

        r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: long[][] identifiers> = $r3;

        return;
    }
    void <init>(boolean, boolean, org.apache.commons.math3.ml.neuralnet.SquareNeighbourhood, double[][][])
    {
        org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D r0;
        boolean $z0, $z1;
        org.apache.commons.math3.ml.neuralnet.SquareNeighbourhood $r1;
        double[][][] $r2;
        int i0, $i1, $i2;
        double[][] $r3;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r4;
        java.lang.Integer $r5, $r6;
        double[] $r7;
        org.apache.commons.math3.ml.neuralnet.Network $r8;
        int[] $r9;
        java.lang.Class $r10;
        java.lang.Object $r11;
        long[][] $r12;
        long[] $r13;
        long $l3;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D;

        $z0 := @parameter0: boolean;

        $z1 := @parameter1: boolean;

        $r1 := @parameter2: org.apache.commons.math3.ml.neuralnet.SquareNeighbourhood;

        $r2 := @parameter3: double[][][];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        i0 = lengthof $r2;

        r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int numberOfRows> = i0;

        $r3 = $r2[0];

        i0 = lengthof $r3;

        r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int numberOfColumns> = i0;

        i0 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int numberOfRows>;

        if i0 >= 2 goto label1;

        $r4 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        i0 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int numberOfRows>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        specialinvoke $r4.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r5, $r6, 1);

        throw $r4;

     label1:
        i0 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int numberOfColumns>;

        if i0 >= 2 goto label2;

        $r4 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        i0 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int numberOfColumns>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        specialinvoke $r4.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r5, $r6, 1);

        throw $r4;

     label2:
        r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: boolean wrapRows> = $z0;

        r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: boolean wrapColumns> = $z1;

        r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: org.apache.commons.math3.ml.neuralnet.SquareNeighbourhood neighbourhood> = $r1;

        $r3 = $r2[0];

        $r7 = $r3[0];

        i0 = lengthof $r7;

        $r8 = new org.apache.commons.math3.ml.neuralnet.Network;

        specialinvoke $r8.<org.apache.commons.math3.ml.neuralnet.Network: void <init>(long,int)>(0L, i0);

        r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: org.apache.commons.math3.ml.neuralnet.Network network> = $r8;

        i0 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int numberOfRows>;

        $i1 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int numberOfColumns>;

        $r9 = newarray (int)[2];

        $r9[0] = i0;

        $r9[1] = $i1;

        $r10 = <java.lang.Long: java.lang.Class TYPE>;

        $r11 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r10, $r9);

        $r12 = (long[][]) $r11;

        r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: long[][] identifiers> = $r12;

        i0 = 0;

     label3:
        $i1 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int numberOfRows>;

        if i0 >= $i1 goto label6;

        $i1 = 0;

     label4:
        $i2 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int numberOfColumns>;

        if $i1 >= $i2 goto label5;

        $r12 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: long[][] identifiers>;

        $r13 = $r12[i0];

        $r8 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: org.apache.commons.math3.ml.neuralnet.Network network>;

        $r3 = $r2[i0];

        $r7 = $r3[$i1];

        $l3 = virtualinvoke $r8.<org.apache.commons.math3.ml.neuralnet.Network: long createNeuron(double[])>($r7);

        $r13[$i1] = $l3;

        $i1 = $i1 + 1;

        goto label4;

     label5:
        i0 = i0 + 1;

        goto label3;

     label6:
        specialinvoke r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: void createLinks()>();

        return;
    }
    private void createLinks()
    {
        org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D r0;
        int i0, i1, i3, $i4, $i5;
        java.util.ArrayList r1;
        long $l2;
        int[] $r2;
        org.apache.commons.math3.ml.neuralnet.SquareNeighbourhood $r3;
        org.apache.commons.math3.exception.MathInternalError $r4;
        long[][] $r5;
        long[] $r6;
        java.lang.Long $r7;
        boolean $z0;
        org.apache.commons.math3.ml.neuralnet.Network $r8;
        org.apache.commons.math3.ml.neuralnet.Neuron $r9, $r12;
        java.util.Iterator $r10;
        java.lang.Object $r11;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D;

        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>()>();

        i0 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int numberOfRows>;

        i0 = i0 + -1;

        i1 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int numberOfColumns>;

        i1 = i1 + -1;

        i3 = 0;

     label01:
        $i4 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int numberOfRows>;

        if i3 >= $i4 goto label32;

        $i4 = 0;

     label02:
        $i5 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int numberOfColumns>;

        if $i4 >= $i5 goto label31;

        interfaceinvoke r1.<java.util.List: void clear()>();

        $r2 = <org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D$1: int[] $SwitchMap$org$apache$commons$math3$ml$neuralnet$SquareNeighbourhood>;

        $r3 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: org.apache.commons.math3.ml.neuralnet.SquareNeighbourhood neighbourhood>;

        $i5 = virtualinvoke $r3.<org.apache.commons.math3.ml.neuralnet.SquareNeighbourhood: int ordinal()>();

        $i5 = $r2[$i5];

        lookupswitch($i5)
        {
            case 1: goto label04;
            case 2: goto label13;
            default: goto label03;
        };

     label03:
        $r4 = new org.apache.commons.math3.exception.MathInternalError;

        specialinvoke $r4.<org.apache.commons.math3.exception.MathInternalError: void <init>()>();

        throw $r4;

     label04:
        if i3 <= 0 goto label06;

        if $i4 <= 0 goto label05;

        $r5 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: long[][] identifiers>;

        $i5 = i3 + -1;

        $r6 = $r5[$i5];

        $i5 = $i4 + -1;

        $l2 = $r6[$i5];

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r7);

     label05:
        if $i4 >= i1 goto label06;

        $r5 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: long[][] identifiers>;

        $i5 = i3 + -1;

        $r6 = $r5[$i5];

        $i5 = $i4 + 1;

        $l2 = $r6[$i5];

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r7);

     label06:
        if i3 >= i0 goto label08;

        if $i4 <= 0 goto label07;

        $r5 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: long[][] identifiers>;

        $i5 = i3 + 1;

        $r6 = $r5[$i5];

        $i5 = $i4 + -1;

        $l2 = $r6[$i5];

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r7);

     label07:
        if $i4 >= i1 goto label08;

        $r5 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: long[][] identifiers>;

        $i5 = i3 + 1;

        $r6 = $r5[$i5];

        $i5 = $i4 + 1;

        $l2 = $r6[$i5];

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r7);

     label08:
        $z0 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: boolean wrapRows>;

        if $z0 == 0 goto label10;

        if i3 != 0 goto label21;

        if $i4 <= 0 goto label09;

        $r5 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: long[][] identifiers>;

        $r6 = $r5[i0];

        $i5 = $i4 + -1;

        $l2 = $r6[$i5];

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r7);

     label09:
        if $i4 >= i1 goto label10;

        $r5 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: long[][] identifiers>;

        $r6 = $r5[i0];

        $i5 = $i4 + 1;

        $l2 = $r6[$i5];

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r7);

     label10:
        $z0 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: boolean wrapColumns>;

        if $z0 == 0 goto label12;

        if $i4 != 0 goto label23;

        if i3 <= 0 goto label11;

        $r5 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: long[][] identifiers>;

        $i5 = i3 + -1;

        $r6 = $r5[$i5];

        $l2 = $r6[i1];

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r7);

     label11:
        if i3 >= i0 goto label12;

        $r5 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: long[][] identifiers>;

        $i5 = i3 + 1;

        $r6 = $r5[$i5];

        $l2 = $r6[i1];

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r7);

     label12:
        $z0 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: boolean wrapRows>;

        if $z0 == 0 goto label13;

        $z0 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: boolean wrapColumns>;

        if $z0 == 0 goto label13;

        if i3 != 0 goto label25;

        if $i4 != 0 goto label25;

        $r5 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: long[][] identifiers>;

        $r6 = $r5[i0];

        $l2 = $r6[i1];

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r7);

     label13:
        if i3 <= 0 goto label14;

        $r5 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: long[][] identifiers>;

        $i5 = i3 + -1;

        $r6 = $r5[$i5];

        $l2 = $r6[$i4];

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r7);

     label14:
        if i3 >= i0 goto label15;

        $r5 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: long[][] identifiers>;

        $i5 = i3 + 1;

        $r6 = $r5[$i5];

        $l2 = $r6[$i4];

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r7);

     label15:
        $z0 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: boolean wrapRows>;

        if $z0 == 0 goto label16;

        if i3 != 0 goto label28;

        $r5 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: long[][] identifiers>;

        $r6 = $r5[i0];

        $l2 = $r6[$i4];

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r7);

     label16:
        if $i4 <= 0 goto label17;

        $r5 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: long[][] identifiers>;

        $r6 = $r5[i3];

        $i5 = $i4 + -1;

        $l2 = $r6[$i5];

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r7);

     label17:
        if $i4 >= i1 goto label18;

        $r5 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: long[][] identifiers>;

        $r6 = $r5[i3];

        $i5 = $i4 + 1;

        $l2 = $r6[$i5];

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r7);

     label18:
        $z0 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: boolean wrapColumns>;

        if $z0 == 0 goto label19;

        if $i4 != 0 goto label29;

        $r5 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: long[][] identifiers>;

        $r6 = $r5[i3];

        $l2 = $r6[i1];

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r7);

     label19:
        $r8 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: org.apache.commons.math3.ml.neuralnet.Network network>;

        $r5 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: long[][] identifiers>;

        $r6 = $r5[i3];

        $l2 = $r6[$i4];

        $r9 = virtualinvoke $r8.<org.apache.commons.math3.ml.neuralnet.Network: org.apache.commons.math3.ml.neuralnet.Neuron getNeuron(long)>($l2);

        $r10 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label20:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label30;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (java.lang.Long) $r11;

        $l2 = virtualinvoke $r7.<java.lang.Long: long longValue()>();

        $r8 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: org.apache.commons.math3.ml.neuralnet.Network network>;

        $r12 = virtualinvoke $r8.<org.apache.commons.math3.ml.neuralnet.Network: org.apache.commons.math3.ml.neuralnet.Neuron getNeuron(long)>($l2);

        $r8 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: org.apache.commons.math3.ml.neuralnet.Network network>;

        virtualinvoke $r8.<org.apache.commons.math3.ml.neuralnet.Network: void addLink(org.apache.commons.math3.ml.neuralnet.Neuron,org.apache.commons.math3.ml.neuralnet.Neuron)>($r9, $r12);

        goto label20;

     label21:
        if i3 != i0 goto label10;

        if $i4 <= 0 goto label22;

        $r5 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: long[][] identifiers>;

        $r6 = $r5[0];

        $i5 = $i4 + -1;

        $l2 = $r6[$i5];

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r7);

     label22:
        if $i4 >= i1 goto label10;

        $r5 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: long[][] identifiers>;

        $r6 = $r5[0];

        $i5 = $i4 + 1;

        $l2 = $r6[$i5];

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label10;

     label23:
        if $i4 != i1 goto label12;

        if i3 <= 0 goto label24;

        $r5 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: long[][] identifiers>;

        $i5 = i3 + -1;

        $r6 = $r5[$i5];

        $l2 = $r6[0];

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r7);

     label24:
        if i3 >= i0 goto label12;

        $r5 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: long[][] identifiers>;

        $i5 = i3 + 1;

        $r6 = $r5[$i5];

        $l2 = $r6[0];

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label12;

     label25:
        if i3 != 0 goto label26;

        if $i4 != i1 goto label26;

        $r5 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: long[][] identifiers>;

        $r6 = $r5[i0];

        $l2 = $r6[0];

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label13;

     label26:
        if i3 != i0 goto label27;

        if $i4 != 0 goto label27;

        $r5 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: long[][] identifiers>;

        $r6 = $r5[0];

        $l2 = $r6[i1];

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label13;

     label27:
        if i3 != i0 goto label13;

        if $i4 != i1 goto label13;

        $r5 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: long[][] identifiers>;

        $r6 = $r5[0];

        $l2 = $r6[0];

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label13;

     label28:
        if i3 != i0 goto label16;

        $r5 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: long[][] identifiers>;

        $r6 = $r5[0];

        $l2 = $r6[$i4];

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label16;

     label29:
        if $i4 != i1 goto label19;

        $r5 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: long[][] identifiers>;

        $r6 = $r5[i3];

        $l2 = $r6[0];

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label19;

     label30:
        $i4 = $i4 + 1;

        goto label02;

     label31:
        i3 = i3 + 1;

        goto label01;

     label32:
        return;
    }
    private int[] getLocation(int, int, org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D$HorizontalDirection, org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D$VerticalDirection)
    {
        org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D r0;
        int $i0, $i1, $i2;
        org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D$HorizontalDirection $r1;
        org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D$VerticalDirection $r2;
        int[] $r3;
        org.apache.commons.math3.exception.MathInternalError $r4;
        byte b3;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 := @parameter2: org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D$HorizontalDirection;

        $r2 := @parameter3: org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D$VerticalDirection;

        $r3 = <org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D$1: int[] $SwitchMap$org$apache$commons$math3$ml$neuralnet$twod$NeuronSquareMesh2D$HorizontalDirection>;

        $i2 = virtualinvoke $r1.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D$HorizontalDirection: int ordinal()>();

        $i2 = $r3[$i2];

        lookupswitch($i2)
        {
            case 1: goto label02;
            case 2: goto label06;
            case 3: goto label07;
            default: goto label01;
        };

     label01:
        $r4 = new org.apache.commons.math3.exception.MathInternalError;

        specialinvoke $r4.<org.apache.commons.math3.exception.MathInternalError: void <init>()>();

        throw $r4;

     label02:
        b3 = -1;

     label03:
        $i1 = $i1 + b3;

        $z0 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: boolean wrapColumns>;

        if $z0 == 0 goto label04;

        if $i1 >= 0 goto label08;

        $i2 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int numberOfColumns>;

        $i1 = $i1 + $i2;

     label04:
        $r3 = <org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D$1: int[] $SwitchMap$org$apache$commons$math3$ml$neuralnet$twod$NeuronSquareMesh2D$VerticalDirection>;

        $i2 = virtualinvoke $r2.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D$VerticalDirection: int ordinal()>();

        $i2 = $r3[$i2];

        lookupswitch($i2)
        {
            case 1: goto label09;
            case 2: goto label13;
            case 3: goto label14;
            default: goto label05;
        };

     label05:
        $r4 = new org.apache.commons.math3.exception.MathInternalError;

        specialinvoke $r4.<org.apache.commons.math3.exception.MathInternalError: void <init>()>();

        throw $r4;

     label06:
        b3 = 1;

        goto label03;

     label07:
        b3 = 0;

        goto label03;

     label08:
        $i2 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int numberOfColumns>;

        $i1 = $i1 % $i2;

        goto label04;

     label09:
        b3 = -1;

     label10:
        $i0 = $i0 + b3;

        $z0 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: boolean wrapRows>;

        if $z0 == 0 goto label11;

        if $i0 >= 0 goto label15;

        $i2 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int numberOfRows>;

        $i0 = $i0 + $i2;

     label11:
        if $i0 < 0 goto label12;

        $i2 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int numberOfRows>;

        if $i0 >= $i2 goto label12;

        if $i1 < 0 goto label12;

        $i2 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int numberOfColumns>;

        if $i1 < $i2 goto label16;

     label12:
        return null;

     label13:
        b3 = 1;

        goto label10;

     label14:
        b3 = 0;

        goto label10;

     label15:
        $i2 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int numberOfRows>;

        $i0 = $i0 % $i2;

        goto label11;

     label16:
        $r3 = newarray (int)[2];

        $r3[0] = $i0;

        $r3[1] = $i1;

        return $r3;
    }
    private void readObject(java.io.ObjectInputStream)
    {
        org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D r0;
        java.io.ObjectInputStream $r1;
        java.lang.IllegalStateException $r2;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D;

        $r1 := @parameter0: java.io.ObjectInputStream;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>()>();

        throw $r2;
    }
    private java.lang.Object writeReplace()
    {
        org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D r0;
        boolean $z0, $z1;
        org.apache.commons.math3.ml.neuralnet.SquareNeighbourhood $r1;
        int $i0, $i1, $i2;
        int[] $r2;
        java.lang.Object $r3;
        double[][][] r4;
        double[][] $r5;
        org.apache.commons.math3.ml.neuralnet.Neuron $r6;
        double[] $r7;
        org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D$SerializationProxy $r8;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D;

        $i0 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int numberOfRows>;

        $i1 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int numberOfColumns>;

        $r2 = newarray (int)[2];

        $r2[0] = $i0;

        $r2[1] = $i1;

        $r3 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>(class "[D", $r2);

        r4 = (double[][][]) $r3;

        $i0 = 0;

     label1:
        $i1 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int numberOfRows>;

        if $i0 >= $i1 goto label4;

        $i1 = 0;

     label2:
        $i2 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int numberOfColumns>;

        if $i1 >= $i2 goto label3;

        $r5 = r4[$i0];

        $r6 = virtualinvoke r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: org.apache.commons.math3.ml.neuralnet.Neuron getNeuron(int,int)>($i0, $i1);

        $r7 = virtualinvoke $r6.<org.apache.commons.math3.ml.neuralnet.Neuron: double[] getFeatures()>();

        $r5[$i1] = $r7;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $i0 = $i0 + 1;

        goto label1;

     label4:
        $r8 = new org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D$SerializationProxy;

        $z1 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: boolean wrapRows>;

        $z0 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: boolean wrapColumns>;

        $r1 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: org.apache.commons.math3.ml.neuralnet.SquareNeighbourhood neighbourhood>;

        specialinvoke $r8.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D$SerializationProxy: void <init>(boolean,boolean,org.apache.commons.math3.ml.neuralnet.SquareNeighbourhood,double[][][])>($z1, $z0, $r1, r4);

        return $r8;
    }
    public org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D copy()
    {
        org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D r0, $r9;
        org.apache.commons.math3.ml.neuralnet.SquareNeighbourhood $r1;
        int $i0, $i1, $i2;
        int[] $r2;
        java.lang.Class $r3;
        java.lang.Object $r4;
        long[][] r5, $r7;
        long[] $r6, $r8;
        long $l3;
        boolean $z0, $z1;
        org.apache.commons.math3.ml.neuralnet.Network $r10;
        java.lang.Throwable $r11;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D;

        entermonitor r0;

     label1:
        $i0 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int numberOfRows>;

        $i1 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int numberOfColumns>;

        $r2 = newarray (int)[2];

        $r2[0] = $i0;

        $r2[1] = $i1;

        $r3 = <java.lang.Long: java.lang.Class TYPE>;

        $r4 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r3, $r2);

        r5 = (long[][]) $r4;

        $i0 = 0;

     label2:
        $i1 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int numberOfRows>;

        if $i0 >= $i1 goto label5;

        $i1 = 0;

     label3:
        $i2 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int numberOfColumns>;

        if $i1 >= $i2 goto label4;

        $r6 = r5[$i0];

        $r7 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: long[][] identifiers>;

        $r8 = $r7[$i0];

        $l3 = $r8[$i1];

        $r6[$i1] = $l3;

        $i1 = $i1 + 1;

        goto label3;

     label4:
        $i0 = $i0 + 1;

        goto label2;

     label5:
        $r9 = new org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D;

        $z0 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: boolean wrapRows>;

        $z1 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: boolean wrapColumns>;

        $r1 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: org.apache.commons.math3.ml.neuralnet.SquareNeighbourhood neighbourhood>;

        $r10 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: org.apache.commons.math3.ml.neuralnet.Network network>;

        $r10 = virtualinvoke $r10.<org.apache.commons.math3.ml.neuralnet.Network: org.apache.commons.math3.ml.neuralnet.Network copy()>();

        specialinvoke $r9.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: void <init>(boolean,boolean,org.apache.commons.math3.ml.neuralnet.SquareNeighbourhood,org.apache.commons.math3.ml.neuralnet.Network,long[][])>($z0, $z1, $r1, $r10, r5);

     label6:
        exitmonitor r0;

        return $r9;

     label7:
        $r11 := @caughtexception;

        exitmonitor r0;

        throw $r11;

        catch java.lang.Throwable from label1 to label6 with label7;
    }
    public org.apache.commons.math3.ml.neuralnet.Network getNetwork()
    {
        org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D r0;
        org.apache.commons.math3.ml.neuralnet.Network r1;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D;

        r1 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: org.apache.commons.math3.ml.neuralnet.Network network>;

        return r1;
    }
    public org.apache.commons.math3.ml.neuralnet.Neuron getNeuron(int, int)
    {
        org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D r0;
        int $i0, $i1, $i2;
        org.apache.commons.math3.exception.OutOfRangeException $r1;
        java.lang.Integer $r2, $r3, $r4;
        org.apache.commons.math3.ml.neuralnet.Network $r5;
        long[][] $r6;
        long[] $r7;
        long $l3;
        org.apache.commons.math3.ml.neuralnet.Neuron $r8;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        if $i0 < 0 goto label1;

        $i2 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int numberOfRows>;

        if $i0 < $i2 goto label2;

     label1:
        $r1 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $i0 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int numberOfRows>;

        $i0 = $i0 + -1;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r1.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r2, $r3, $r4);

        throw $r1;

     label2:
        if $i1 < 0 goto label3;

        $i2 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int numberOfColumns>;

        if $i1 < $i2 goto label4;

     label3:
        $r1 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $i0 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int numberOfColumns>;

        $i0 = $i0 + -1;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r1.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r2, $r3, $r4);

        throw $r1;

     label4:
        $r5 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: org.apache.commons.math3.ml.neuralnet.Network network>;

        $r6 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: long[][] identifiers>;

        $r7 = $r6[$i0];

        $l3 = $r7[$i1];

        $r8 = virtualinvoke $r5.<org.apache.commons.math3.ml.neuralnet.Network: org.apache.commons.math3.ml.neuralnet.Neuron getNeuron(long)>($l3);

        return $r8;
    }
    public org.apache.commons.math3.ml.neuralnet.Neuron getNeuron(int, int, org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D$HorizontalDirection, org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D$VerticalDirection)
    {
        org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D r0;
        int $i0, $i1;
        org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D$HorizontalDirection $r1;
        org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D$VerticalDirection $r2;
        int[] $r3;
        org.apache.commons.math3.ml.neuralnet.Neuron $r4;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 := @parameter2: org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D$HorizontalDirection;

        $r2 := @parameter3: org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D$VerticalDirection;

        $r3 = specialinvoke r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int[] getLocation(int,int,org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D$HorizontalDirection,org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D$VerticalDirection)>($i0, $i1, $r1, $r2);

        if $r3 != null goto label1;

        return null;

     label1:
        $i0 = $r3[0];

        $i1 = $r3[1];

        $r4 = virtualinvoke r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: org.apache.commons.math3.ml.neuralnet.Neuron getNeuron(int,int)>($i0, $i1);

        return $r4;
    }
    public int getNumberOfColumns()
    {
        org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D r0;
        int i0;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D;

        i0 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int numberOfColumns>;

        return i0;
    }
    public int getNumberOfRows()
    {
        org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D r0;
        int i0;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D;

        i0 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int numberOfRows>;

        return i0;
    }
    public java.util.Iterator iterator()
    {
        org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D r0;
        java.util.Iterator $r1;
        org.apache.commons.math3.ml.neuralnet.Network $r2;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D;

        $r2 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: org.apache.commons.math3.ml.neuralnet.Network network>;

        $r1 = virtualinvoke $r2.<org.apache.commons.math3.ml.neuralnet.Network: java.util.Iterator iterator()>();

        return $r1;
    }
