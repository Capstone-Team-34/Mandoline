org.apache.commons.math3.ml.neuralnet.MapUtils extends java.lang.Object
    private void <init>()
    {
        org.apache.commons.math3.ml.neuralnet.MapUtils r0;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.MapUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static int[][] computeHitHistogram(java.lang.Iterable, org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D, org.apache.commons.math3.ml.distance.DistanceMeasure)
    {
        java.lang.Iterable r0;
        org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D $r1;
        org.apache.commons.math3.ml.distance.DistanceMeasure $r2;
        java.util.HashMap r3;
        org.apache.commons.math3.ml.neuralnet.Network $r4;
        java.util.Iterator $r5;
        boolean $z0;
        java.lang.Object $r6;
        double[] r7;
        org.apache.commons.math3.ml.neuralnet.Neuron $r8;
        java.lang.Integer r9;
        int $i0, $i1, i2, i3, $i4;
        int[] $r10;
        java.lang.Class $r11;
        int[][] r12;

        r0 := @parameter0: java.lang.Iterable;

        $r1 := @parameter1: org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D;

        $r2 := @parameter2: org.apache.commons.math3.ml.distance.DistanceMeasure;

        r3 = new java.util.HashMap;

        specialinvoke r3.<java.util.HashMap: void <init>()>();

        $r4 = virtualinvoke $r1.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: org.apache.commons.math3.ml.neuralnet.Network getNetwork()>();

        $r5 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (double[]) $r6;

        $r8 = staticinvoke <org.apache.commons.math3.ml.neuralnet.MapUtils: org.apache.commons.math3.ml.neuralnet.Neuron findBest(double[],java.lang.Iterable,org.apache.commons.math3.ml.distance.DistanceMeasure)>(r7, $r4, $r2);

        $r6 = virtualinvoke r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r8);

        r9 = (java.lang.Integer) $r6;

        if r9 != null goto label2;

        r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, r9);

        goto label1;

     label2:
        $i0 = virtualinvoke r9.<java.lang.Integer: int intValue()>();

        $i0 = $i0 + 1;

        r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        virtualinvoke r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, r9);

        goto label1;

     label3:
        $i0 = virtualinvoke $r1.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int getNumberOfRows()>();

        $i1 = virtualinvoke $r1.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int getNumberOfColumns()>();

        $r10 = newarray (int)[2];

        $r10[0] = $i0;

        $r10[1] = $i1;

        $r11 = <java.lang.Integer: java.lang.Class TYPE>;

        $r6 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r11, $r10);

        r12 = (int[][]) $r6;

        i2 = 0;

     label4:
        if i2 >= $i0 goto label9;

        i3 = 0;

     label5:
        if i3 >= $i1 goto label8;

        $r8 = virtualinvoke $r1.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: org.apache.commons.math3.ml.neuralnet.Neuron getNeuron(int,int)>(i2, i3);

        $r6 = virtualinvoke r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r8);

        r9 = (java.lang.Integer) $r6;

        if r9 != null goto label7;

        $r10 = r12[i2];

        $r10[i3] = 0;

     label6:
        i3 = i3 + 1;

        goto label5;

     label7:
        $r10 = r12[i2];

        $i4 = virtualinvoke r9.<java.lang.Integer: int intValue()>();

        $r10[i3] = $i4;

        goto label6;

     label8:
        i2 = i2 + 1;

        goto label4;

     label9:
        return r12;
    }
    public static double computeQuantizationError(java.lang.Iterable, java.lang.Iterable, org.apache.commons.math3.ml.distance.DistanceMeasure)
    {
        java.lang.Iterable r0, r1;
        org.apache.commons.math3.ml.distance.DistanceMeasure $r2;
        double d0, $d1;
        int i0;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        double[] r5, $r7;
        org.apache.commons.math3.ml.neuralnet.Neuron $r6;
        org.apache.commons.math3.exception.NoDataException $r8;

        r0 := @parameter0: java.lang.Iterable;

        r1 := @parameter1: java.lang.Iterable;

        $r2 := @parameter2: org.apache.commons.math3.ml.distance.DistanceMeasure;

        d0 = 0.0;

        i0 = 0;

        $r3 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (double[]) $r4;

        i0 = i0 + 1;

        $r6 = staticinvoke <org.apache.commons.math3.ml.neuralnet.MapUtils: org.apache.commons.math3.ml.neuralnet.Neuron findBest(double[],java.lang.Iterable,org.apache.commons.math3.ml.distance.DistanceMeasure)>(r5, r1, $r2);

        $r7 = virtualinvoke $r6.<org.apache.commons.math3.ml.neuralnet.Neuron: double[] getFeatures()>();

        $d1 = interfaceinvoke $r2.<org.apache.commons.math3.ml.distance.DistanceMeasure: double compute(double[],double[])>(r5, $r7);

        d0 = d0 + $d1;

        goto label1;

     label2:
        if i0 != 0 goto label3;

        $r8 = new org.apache.commons.math3.exception.NoDataException;

        specialinvoke $r8.<org.apache.commons.math3.exception.NoDataException: void <init>()>();

        throw $r8;

     label3:
        $d1 = (double) i0;

        d0 = d0 / $d1;

        return d0;
    }
    public static double computeTopographicError(java.lang.Iterable, org.apache.commons.math3.ml.neuralnet.Network, org.apache.commons.math3.ml.distance.DistanceMeasure)
    {
        java.lang.Iterable r0;
        org.apache.commons.math3.ml.neuralnet.Network $r1;
        org.apache.commons.math3.ml.distance.DistanceMeasure $r2;
        double $d0, $d1;
        int i0, i1;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        double[] r5;
        org.apache.commons.math3.util.Pair $r6;
        org.apache.commons.math3.ml.neuralnet.Neuron $r7;
        java.util.Collection $r8;
        org.apache.commons.math3.exception.NoDataException $r9;

        r0 := @parameter0: java.lang.Iterable;

        $r1 := @parameter1: org.apache.commons.math3.ml.neuralnet.Network;

        $r2 := @parameter2: org.apache.commons.math3.ml.distance.DistanceMeasure;

        i0 = 0;

        i1 = 0;

        $r3 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (double[]) $r4;

        i1 = i1 + 1;

        $r6 = staticinvoke <org.apache.commons.math3.ml.neuralnet.MapUtils: org.apache.commons.math3.util.Pair findBestAndSecondBest(double[],java.lang.Iterable,org.apache.commons.math3.ml.distance.DistanceMeasure)>(r5, $r1, $r2);

        $r4 = virtualinvoke $r6.<org.apache.commons.math3.util.Pair: java.lang.Object getFirst()>();

        $r7 = (org.apache.commons.math3.ml.neuralnet.Neuron) $r4;

        $r8 = virtualinvoke $r1.<org.apache.commons.math3.ml.neuralnet.Network: java.util.Collection getNeighbours(org.apache.commons.math3.ml.neuralnet.Neuron)>($r7);

        $r4 = virtualinvoke $r6.<org.apache.commons.math3.util.Pair: java.lang.Object getSecond()>();

        $z0 = interfaceinvoke $r8.<java.util.Collection: boolean contains(java.lang.Object)>($r4);

        if $z0 != 0 goto label1;

        i0 = i0 + 1;

        goto label1;

     label2:
        if i1 != 0 goto label3;

        $r9 = new org.apache.commons.math3.exception.NoDataException;

        specialinvoke $r9.<org.apache.commons.math3.exception.NoDataException: void <init>()>();

        throw $r9;

     label3:
        $d1 = (double) i0;

        $d0 = (double) i1;

        $d0 = $d1 / $d0;

        return $d0;
    }
    public static double[][] computeU(org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D, org.apache.commons.math3.ml.distance.DistanceMeasure)
    {
        org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D $r0;
        org.apache.commons.math3.ml.distance.DistanceMeasure $r1;
        java.lang.Class $r2;
        int $i0, $i1, i2, i3, i4;
        int[] $r3;
        java.lang.Object $r4;
        double[][] r5;
        org.apache.commons.math3.ml.neuralnet.Network $r6;
        org.apache.commons.math3.ml.neuralnet.Neuron $r7;
        java.util.Collection $r8;
        double[] $r9, $r11;
        double d0, $d1;
        java.util.Iterator $r10;
        boolean $z0;

        $r0 := @parameter0: org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D;

        $r1 := @parameter1: org.apache.commons.math3.ml.distance.DistanceMeasure;

        $i0 = virtualinvoke $r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int getNumberOfRows()>();

        $i1 = virtualinvoke $r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int getNumberOfColumns()>();

        $r3 = newarray (int)[2];

        $r3[0] = $i0;

        $r3[1] = $i1;

        $r2 = <java.lang.Double: java.lang.Class TYPE>;

        $r4 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r2, $r3);

        r5 = (double[][]) $r4;

        $r6 = virtualinvoke $r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: org.apache.commons.math3.ml.neuralnet.Network getNetwork()>();

        i2 = 0;

     label1:
        if i2 >= $i0 goto label6;

        i3 = 0;

     label2:
        if i3 >= $i1 goto label5;

        $r7 = virtualinvoke $r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: org.apache.commons.math3.ml.neuralnet.Neuron getNeuron(int,int)>(i2, i3);

        $r8 = virtualinvoke $r6.<org.apache.commons.math3.ml.neuralnet.Network: java.util.Collection getNeighbours(org.apache.commons.math3.ml.neuralnet.Neuron)>($r7);

        $r9 = virtualinvoke $r7.<org.apache.commons.math3.ml.neuralnet.Neuron: double[] getFeatures()>();

        d0 = 0.0;

        i4 = 0;

        $r10 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (org.apache.commons.math3.ml.neuralnet.Neuron) $r4;

        i4 = i4 + 1;

        $r11 = virtualinvoke $r7.<org.apache.commons.math3.ml.neuralnet.Neuron: double[] getFeatures()>();

        $d1 = interfaceinvoke $r1.<org.apache.commons.math3.ml.distance.DistanceMeasure: double compute(double[],double[])>($r9, $r11);

        d0 = d0 + $d1;

        goto label3;

     label4:
        $r9 = r5[i2];

        $d1 = (double) i4;

        d0 = d0 / $d1;

        $r9[i3] = d0;

        i3 = i3 + 1;

        goto label2;

     label5:
        i2 = i2 + 1;

        goto label1;

     label6:
        return r5;
    }
    public static org.apache.commons.math3.ml.neuralnet.Neuron findBest(double[], java.lang.Iterable, org.apache.commons.math3.ml.distance.DistanceMeasure)
    {
        double[] $r0, $r7;
        java.lang.Iterable r1;
        org.apache.commons.math3.ml.distance.DistanceMeasure $r2;
        org.apache.commons.math3.ml.neuralnet.Neuron r3, r6;
        double d0, $d1;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        byte $b0;

        $r0 := @parameter0: double[];

        r1 := @parameter1: java.lang.Iterable;

        $r2 := @parameter2: org.apache.commons.math3.ml.distance.DistanceMeasure;

        r3 = null;

        d0 = #Infinity;

        $r4 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.commons.math3.ml.neuralnet.Neuron) $r5;

        $r7 = virtualinvoke r6.<org.apache.commons.math3.ml.neuralnet.Neuron: double[] getFeatures()>();

        $d1 = interfaceinvoke $r2.<org.apache.commons.math3.ml.distance.DistanceMeasure: double compute(double[],double[])>($r7, $r0);

        $b0 = $d1 cmpg d0;

        if $b0 >= 0 goto label1;

        d0 = $d1;

        r3 = r6;

        goto label1;

     label2:
        return r3;
    }
    public static org.apache.commons.math3.util.Pair findBestAndSecondBest(double[], java.lang.Iterable, org.apache.commons.math3.ml.distance.DistanceMeasure)
    {
        double[] $r0, r4, $r8;
        java.lang.Iterable r1;
        org.apache.commons.math3.ml.distance.DistanceMeasure $r2;
        org.apache.commons.math3.ml.neuralnet.Neuron[] r3;
        java.util.Iterator $r5;
        boolean $z0;
        java.lang.Object $r6;
        org.apache.commons.math3.ml.neuralnet.Neuron r7, $r9;
        double $d0, $d1;
        byte $b0;
        org.apache.commons.math3.util.Pair $r10;

        $r0 := @parameter0: double[];

        r1 := @parameter1: java.lang.Iterable;

        $r2 := @parameter2: org.apache.commons.math3.ml.distance.DistanceMeasure;

        r3 = newarray (org.apache.commons.math3.ml.neuralnet.Neuron)[2];

        r3[0] = null;

        r3[1] = null;

        r4 = newarray (double)[2];

        r4[0] = #Infinity;

        r4[1] = #Infinity;

        $r5 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.commons.math3.ml.neuralnet.Neuron) $r6;

        $r8 = virtualinvoke r7.<org.apache.commons.math3.ml.neuralnet.Neuron: double[] getFeatures()>();

        $d0 = interfaceinvoke $r2.<org.apache.commons.math3.ml.distance.DistanceMeasure: double compute(double[],double[])>($r8, $r0);

        $d1 = r4[0];

        $b0 = $d0 cmpg $d1;

        if $b0 >= 0 goto label2;

        $d1 = r4[0];

        r4[1] = $d1;

        $r9 = r3[0];

        r3[1] = $r9;

        r4[0] = $d0;

        r3[0] = r7;

        goto label1;

     label2:
        $d1 = r4[1];

        $b0 = $d0 cmpg $d1;

        if $b0 >= 0 goto label1;

        r4[1] = $d0;

        r3[1] = r7;

        goto label1;

     label3:
        $r10 = new org.apache.commons.math3.util.Pair;

        r7 = r3[0];

        $r9 = r3[1];

        specialinvoke $r10.<org.apache.commons.math3.util.Pair: void <init>(java.lang.Object,java.lang.Object)>(r7, $r9);

        return $r10;
    }
    public static org.apache.commons.math3.ml.neuralnet.Neuron[] sort(double[], java.lang.Iterable, org.apache.commons.math3.ml.distance.DistanceMeasure)
    {
        double[] $r0, $r8;
        java.lang.Iterable r1;
        org.apache.commons.math3.ml.distance.DistanceMeasure $r2;
        java.util.ArrayList r3;
        org.apache.commons.math3.ml.neuralnet.Neuron[] r4;
        java.util.Iterator $r5;
        boolean $z0;
        java.lang.Object $r6;
        org.apache.commons.math3.ml.neuralnet.Neuron r7;
        double $d0;
        org.apache.commons.math3.ml.neuralnet.MapUtils$PairNeuronDouble $r9;
        java.util.Comparator $r10;
        int $i0, i1;

        $r0 := @parameter0: double[];

        r1 := @parameter1: java.lang.Iterable;

        $r2 := @parameter2: org.apache.commons.math3.ml.distance.DistanceMeasure;

        r3 = new java.util.ArrayList;

        specialinvoke r3.<java.util.ArrayList: void <init>()>();

        $r5 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.commons.math3.ml.neuralnet.Neuron) $r6;

        $r8 = virtualinvoke r7.<org.apache.commons.math3.ml.neuralnet.Neuron: double[] getFeatures()>();

        $d0 = interfaceinvoke $r2.<org.apache.commons.math3.ml.distance.DistanceMeasure: double compute(double[],double[])>($r8, $r0);

        $r9 = new org.apache.commons.math3.ml.neuralnet.MapUtils$PairNeuronDouble;

        specialinvoke $r9.<org.apache.commons.math3.ml.neuralnet.MapUtils$PairNeuronDouble: void <init>(org.apache.commons.math3.ml.neuralnet.Neuron,double)>(r7, $d0);

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r9);

        goto label1;

     label2:
        $r10 = <org.apache.commons.math3.ml.neuralnet.MapUtils$PairNeuronDouble: java.util.Comparator COMPARATOR>;

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(r3, $r10);

        $i0 = interfaceinvoke r3.<java.util.List: int size()>();

        r4 = newarray (org.apache.commons.math3.ml.neuralnet.Neuron)[$i0];

        i1 = 0;

     label3:
        if i1 >= $i0 goto label4;

        $r6 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i1);

        $r9 = (org.apache.commons.math3.ml.neuralnet.MapUtils$PairNeuronDouble) $r6;

        r7 = virtualinvoke $r9.<org.apache.commons.math3.ml.neuralnet.MapUtils$PairNeuronDouble: org.apache.commons.math3.ml.neuralnet.Neuron getNeuron()>();

        r4[i1] = r7;

        i1 = i1 + 1;

        goto label3;

     label4:
        return r4;
    }
