org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction extends java.lang.Object implements org.apache.commons.math3.ml.neuralnet.UpdateAction
private final org.apache.commons.math3.ml.distance.DistanceMeasure distance
private final org.apache.commons.math3.ml.neuralnet.sofm.LearningFactorFunction learningFactor
private final org.apache.commons.math3.ml.neuralnet.sofm.NeighbourhoodSizeFunction neighbourhoodSize
private final java.util.concurrent.atomic.AtomicLong numberOfCalls
    public void <init>(org.apache.commons.math3.ml.distance.DistanceMeasure, org.apache.commons.math3.ml.neuralnet.sofm.LearningFactorFunction, org.apache.commons.math3.ml.neuralnet.sofm.NeighbourhoodSizeFunction)
    {
        org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction r0;
        org.apache.commons.math3.ml.distance.DistanceMeasure $r1;
        org.apache.commons.math3.ml.neuralnet.sofm.LearningFactorFunction $r2;
        org.apache.commons.math3.ml.neuralnet.sofm.NeighbourhoodSizeFunction $r3;
        java.util.concurrent.atomic.AtomicLong $r4;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction;

        $r1 := @parameter0: org.apache.commons.math3.ml.distance.DistanceMeasure;

        $r2 := @parameter1: org.apache.commons.math3.ml.neuralnet.sofm.LearningFactorFunction;

        $r3 := @parameter2: org.apache.commons.math3.ml.neuralnet.sofm.NeighbourhoodSizeFunction;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r4.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L);

        r0.<org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction: java.util.concurrent.atomic.AtomicLong numberOfCalls> = $r4;

        r0.<org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction: org.apache.commons.math3.ml.distance.DistanceMeasure distance> = $r1;

        r0.<org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction: org.apache.commons.math3.ml.neuralnet.sofm.LearningFactorFunction learningFactor> = $r2;

        r0.<org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction: org.apache.commons.math3.ml.neuralnet.sofm.NeighbourhoodSizeFunction neighbourhoodSize> = $r3;

        return;
    }
    private boolean attemptNeuronUpdate(org.apache.commons.math3.ml.neuralnet.Neuron, double[], double)
    {
        org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction r0;
        org.apache.commons.math3.ml.neuralnet.Neuron $r1;
        double[] $r2, $r3;
        double $d0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction;

        $r1 := @parameter0: org.apache.commons.math3.ml.neuralnet.Neuron;

        $r2 := @parameter1: double[];

        $d0 := @parameter2: double;

        $r3 = virtualinvoke $r1.<org.apache.commons.math3.ml.neuralnet.Neuron: double[] getFeatures()>();

        $r2 = specialinvoke r0.<org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction: double[] computeFeatures(double[],double[],double)>($r3, $r2, $d0);

        $z0 = virtualinvoke $r1.<org.apache.commons.math3.ml.neuralnet.Neuron: boolean compareAndSetFeatures(double[],double[])>($r3, $r2);

        return $z0;
    }
    private double[] computeFeatures(double[], double[], double)
    {
        org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction r0;
        double[] $r1, $r2;
        double $d0;
        org.apache.commons.math3.linear.ArrayRealVector r3, r4;
        org.apache.commons.math3.linear.RealVector $r5;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[];

        $d0 := @parameter2: double;

        r3 = new org.apache.commons.math3.linear.ArrayRealVector;

        specialinvoke r3.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(double[],boolean)>($r1, 0);

        r4 = new org.apache.commons.math3.linear.ArrayRealVector;

        specialinvoke r4.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(double[],boolean)>($r2, 0);

        r4 = virtualinvoke r4.<org.apache.commons.math3.linear.ArrayRealVector: org.apache.commons.math3.linear.ArrayRealVector subtract(org.apache.commons.math3.linear.RealVector)>(r3);

        $r5 = virtualinvoke r4.<org.apache.commons.math3.linear.ArrayRealVector: org.apache.commons.math3.linear.RealVector mapMultiplyToSelf(double)>($d0);

        $r5 = virtualinvoke $r5.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector add(org.apache.commons.math3.linear.RealVector)>(r3);

        $r1 = virtualinvoke $r5.<org.apache.commons.math3.linear.RealVector: double[] toArray()>();

        return $r1;
    }
    private org.apache.commons.math3.ml.neuralnet.Neuron findAndUpdateBestNeuron(org.apache.commons.math3.ml.neuralnet.Network, double[], double)
    {
        org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction r0;
        org.apache.commons.math3.ml.neuralnet.Network $r1;
        double[] $r2;
        double $d0;
        org.apache.commons.math3.ml.distance.DistanceMeasure $r3;
        org.apache.commons.math3.ml.neuralnet.Neuron $r4;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction;

        $r1 := @parameter0: org.apache.commons.math3.ml.neuralnet.Network;

        $r2 := @parameter1: double[];

        $d0 := @parameter2: double;

     label1:
        $r3 = r0.<org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction: org.apache.commons.math3.ml.distance.DistanceMeasure distance>;

        $r4 = staticinvoke <org.apache.commons.math3.ml.neuralnet.MapUtils: org.apache.commons.math3.ml.neuralnet.Neuron findBest(double[],java.lang.Iterable,org.apache.commons.math3.ml.distance.DistanceMeasure)>($r2, $r1, $r3);

        $z0 = specialinvoke r0.<org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction: boolean attemptNeuronUpdate(org.apache.commons.math3.ml.neuralnet.Neuron,double[],double)>($r4, $r2, $d0);

        if $z0 == 0 goto label1;

        return $r4;
    }
    private void updateNeighbouringNeuron(org.apache.commons.math3.ml.neuralnet.Neuron, double[], double)
    {
        org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction r0;
        org.apache.commons.math3.ml.neuralnet.Neuron $r1;
        double[] $r2;
        double $d0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction;

        $r1 := @parameter0: org.apache.commons.math3.ml.neuralnet.Neuron;

        $r2 := @parameter1: double[];

        $d0 := @parameter2: double;

     label1:
        $z0 = specialinvoke r0.<org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction: boolean attemptNeuronUpdate(org.apache.commons.math3.ml.neuralnet.Neuron,double[],double)>($r1, $r2, $d0);

        if $z0 == 0 goto label1;

        return;
    }
    public long getNumberOfCalls()
    {
        org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction r0;
        long $l0;
        java.util.concurrent.atomic.AtomicLong $r1;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction;

        $r1 = r0.<org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction: java.util.concurrent.atomic.AtomicLong numberOfCalls>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long get()>();

        return $l0;
    }
    public void update(org.apache.commons.math3.ml.neuralnet.Network, double[])
    {
        org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction r0;
        org.apache.commons.math3.ml.neuralnet.Network $r1;
        double[] $r2;
        java.util.HashSet r4, $r14;
        long l0;
        java.util.concurrent.atomic.AtomicLong $r5;
        org.apache.commons.math3.ml.neuralnet.sofm.LearningFactorFunction $r6;
        double $d0, $d1;
        org.apache.commons.math3.ml.neuralnet.Neuron $r7;
        org.apache.commons.math3.ml.neuralnet.sofm.NeighbourhoodSizeFunction $r8;
        int $i1, i2;
        java.util.Collection r9, $r10;
        java.util.Iterator $r11;
        boolean $z0;
        java.lang.Object $r12;
        org.apache.commons.math3.analysis.function.Gaussian $r13;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction;

        $r1 := @parameter0: org.apache.commons.math3.ml.neuralnet.Network;

        $r2 := @parameter1: double[];

        $r5 = r0.<org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction: java.util.concurrent.atomic.AtomicLong numberOfCalls>;

        l0 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();

        l0 = l0 - 1L;

        $r6 = r0.<org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction: org.apache.commons.math3.ml.neuralnet.sofm.LearningFactorFunction learningFactor>;

        $d0 = interfaceinvoke $r6.<org.apache.commons.math3.ml.neuralnet.sofm.LearningFactorFunction: double value(long)>(l0);

        $r7 = specialinvoke r0.<org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction: org.apache.commons.math3.ml.neuralnet.Neuron findAndUpdateBestNeuron(org.apache.commons.math3.ml.neuralnet.Network,double[],double)>($r1, $r2, $d0);

        $r8 = r0.<org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction: org.apache.commons.math3.ml.neuralnet.sofm.NeighbourhoodSizeFunction neighbourhoodSize>;

        $i1 = interfaceinvoke $r8.<org.apache.commons.math3.ml.neuralnet.sofm.NeighbourhoodSizeFunction: int value(long)>(l0);

        $r13 = new org.apache.commons.math3.analysis.function.Gaussian;

        $d1 = (double) $i1;

        specialinvoke $r13.<org.apache.commons.math3.analysis.function.Gaussian: void <init>(double,double,double)>($d0, 0.0, $d1);

        if $i1 <= 0 goto label4;

        r4 = new java.util.HashSet;

        r9 = r4;

        specialinvoke r4.<java.util.HashSet: void <init>()>();

        interfaceinvoke r4.<java.util.Collection: boolean add(java.lang.Object)>($r7);

        $r14 = new java.util.HashSet;

        specialinvoke $r14.<java.util.HashSet: void <init>()>();

        virtualinvoke $r14.<java.util.HashSet: boolean add(java.lang.Object)>($r7);

        i2 = 1;

     label1:
        $r10 = virtualinvoke $r1.<org.apache.commons.math3.ml.neuralnet.Network: java.util.Collection getNeighbours(java.lang.Iterable,java.lang.Iterable)>(r9, $r14);

        r9 = $r10;

        $r11 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (org.apache.commons.math3.ml.neuralnet.Neuron) $r12;

        $d0 = (double) i2;

        $d0 = virtualinvoke $r13.<org.apache.commons.math3.analysis.function.Gaussian: double value(double)>($d0);

        specialinvoke r0.<org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction: void updateNeighbouringNeuron(org.apache.commons.math3.ml.neuralnet.Neuron,double[],double)>($r7, $r2, $d0);

        goto label2;

     label3:
        virtualinvoke $r14.<java.util.HashSet: boolean addAll(java.util.Collection)>($r10);

        i2 = i2 + 1;

        if i2 <= $i1 goto label1;

     label4:
        return;
    }
