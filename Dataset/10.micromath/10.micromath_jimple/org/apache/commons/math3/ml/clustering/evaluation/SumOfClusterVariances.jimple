org.apache.commons.math3.ml.clustering.evaluation.SumOfClusterVariances extends org.apache.commons.math3.ml.clustering.evaluation.ClusterEvaluator
    public void <init>(org.apache.commons.math3.ml.distance.DistanceMeasure)
    {
        org.apache.commons.math3.ml.clustering.evaluation.SumOfClusterVariances r0;
        org.apache.commons.math3.ml.distance.DistanceMeasure $r1;

        r0 := @this: org.apache.commons.math3.ml.clustering.evaluation.SumOfClusterVariances;

        $r1 := @parameter0: org.apache.commons.math3.ml.distance.DistanceMeasure;

        specialinvoke r0.<org.apache.commons.math3.ml.clustering.evaluation.ClusterEvaluator: void <init>(org.apache.commons.math3.ml.distance.DistanceMeasure)>($r1);

        return;
    }
    public double score(java.util.List)
    {
        org.apache.commons.math3.ml.clustering.evaluation.SumOfClusterVariances r0;
        java.util.List r1;
        org.apache.commons.math3.stat.descriptive.moment.Variance r2;
        double d0, $d1;
        java.util.Iterator $r3, $r7;
        boolean $z0;
        java.lang.Object $r4;
        org.apache.commons.math3.ml.clustering.Cluster r5;
        org.apache.commons.math3.ml.clustering.Clusterable $r6, r8;

        r0 := @this: org.apache.commons.math3.ml.clustering.evaluation.SumOfClusterVariances;

        r1 := @parameter0: java.util.List;

        d0 = 0.0;

        $r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.commons.math3.ml.clustering.Cluster) $r4;

        r1 = virtualinvoke r5.<org.apache.commons.math3.ml.clustering.Cluster: java.util.List getPoints()>();

        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r6 = virtualinvoke r0.<org.apache.commons.math3.ml.clustering.evaluation.SumOfClusterVariances: org.apache.commons.math3.ml.clustering.Clusterable centroidOf(org.apache.commons.math3.ml.clustering.Cluster)>(r5);

        r2 = new org.apache.commons.math3.stat.descriptive.moment.Variance;

        specialinvoke r2.<org.apache.commons.math3.stat.descriptive.moment.Variance: void <init>()>();

        r1 = virtualinvoke r5.<org.apache.commons.math3.ml.clustering.Cluster: java.util.List getPoints()>();

        $r7 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.apache.commons.math3.ml.clustering.Clusterable) $r4;

        $d1 = virtualinvoke r0.<org.apache.commons.math3.ml.clustering.evaluation.SumOfClusterVariances: double distance(org.apache.commons.math3.ml.clustering.Clusterable,org.apache.commons.math3.ml.clustering.Clusterable)>(r8, $r6);

        virtualinvoke r2.<org.apache.commons.math3.stat.descriptive.moment.Variance: void increment(double)>($d1);

        goto label2;

     label3:
        $d1 = virtualinvoke r2.<org.apache.commons.math3.stat.descriptive.moment.Variance: double getResult()>();

        d0 = d0 + $d1;

        goto label1;

     label4:
        return d0;
    }
