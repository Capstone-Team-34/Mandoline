org.apache.commons.math3.ml.neuralnet.twod.util.TopographicErrorHistogram extends java.lang.Object implements org.apache.commons.math3.ml.neuralnet.twod.util.MapDataVisualization
private final org.apache.commons.math3.ml.distance.DistanceMeasure distance
private final boolean relativeCount
    public void <init>(boolean, org.apache.commons.math3.ml.distance.DistanceMeasure)
    {
        org.apache.commons.math3.ml.neuralnet.twod.util.TopographicErrorHistogram r0;
        boolean $z0;
        org.apache.commons.math3.ml.distance.DistanceMeasure $r1;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.twod.util.TopographicErrorHistogram;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: org.apache.commons.math3.ml.distance.DistanceMeasure;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.ml.neuralnet.twod.util.TopographicErrorHistogram: boolean relativeCount> = $z0;

        r0.<org.apache.commons.math3.ml.neuralnet.twod.util.TopographicErrorHistogram: org.apache.commons.math3.ml.distance.DistanceMeasure distance> = $r1;

        return;
    }
    public double[][] computeImage(org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D, java.lang.Iterable)
    {
        org.apache.commons.math3.ml.neuralnet.twod.util.TopographicErrorHistogram r0;
        org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D $r1;
        java.lang.Iterable r2;
        org.apache.commons.math3.ml.neuralnet.twod.util.LocationFinder r3;
        int $i0, $i1, $i2, $i3, $i4;
        org.apache.commons.math3.ml.neuralnet.Network $r4;
        int[] $r5;
        java.lang.Class $r6;
        java.lang.Object $r7;
        int[][] r8;
        double[][] r9;
        java.util.Iterator $r10;
        boolean $z0;
        double[] r11;
        org.apache.commons.math3.ml.distance.DistanceMeasure $r12;
        org.apache.commons.math3.util.Pair $r13;
        org.apache.commons.math3.ml.neuralnet.Neuron r14;
        org.apache.commons.math3.ml.neuralnet.twod.util.LocationFinder$Location $r15;
        java.util.Collection $r16;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.twod.util.TopographicErrorHistogram;

        $r1 := @parameter0: org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D;

        r2 := @parameter1: java.lang.Iterable;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int getNumberOfRows()>();

        $i1 = virtualinvoke $r1.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int getNumberOfColumns()>();

        $r4 = virtualinvoke $r1.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: org.apache.commons.math3.ml.neuralnet.Network getNetwork()>();

        r3 = new org.apache.commons.math3.ml.neuralnet.twod.util.LocationFinder;

        specialinvoke r3.<org.apache.commons.math3.ml.neuralnet.twod.util.LocationFinder: void <init>(org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D)>($r1);

        $r5 = newarray (int)[2];

        $r5[0] = $i0;

        $r5[1] = $i1;

        $r6 = <java.lang.Integer: java.lang.Class TYPE>;

        $r7 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r6, $r5);

        r8 = (int[][]) $r7;

        $r5 = newarray (int)[2];

        $r5[0] = $i0;

        $r5[1] = $i1;

        $r6 = <java.lang.Double: java.lang.Class TYPE>;

        $r7 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r6, $r5);

        r9 = (double[][]) $r7;

        $r10 = interfaceinvoke r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r11 = (double[]) $r7;

        $r12 = r0.<org.apache.commons.math3.ml.neuralnet.twod.util.TopographicErrorHistogram: org.apache.commons.math3.ml.distance.DistanceMeasure distance>;

        $r13 = staticinvoke <org.apache.commons.math3.ml.neuralnet.MapUtils: org.apache.commons.math3.util.Pair findBestAndSecondBest(double[],java.lang.Iterable,org.apache.commons.math3.ml.distance.DistanceMeasure)>(r11, $r1, $r12);

        $r7 = virtualinvoke $r13.<org.apache.commons.math3.util.Pair: java.lang.Object getFirst()>();

        r14 = (org.apache.commons.math3.ml.neuralnet.Neuron) $r7;

        $r15 = virtualinvoke r3.<org.apache.commons.math3.ml.neuralnet.twod.util.LocationFinder: org.apache.commons.math3.ml.neuralnet.twod.util.LocationFinder$Location getLocation(org.apache.commons.math3.ml.neuralnet.Neuron)>(r14);

        $i2 = virtualinvoke $r15.<org.apache.commons.math3.ml.neuralnet.twod.util.LocationFinder$Location: int getRow()>();

        $i3 = virtualinvoke $r15.<org.apache.commons.math3.ml.neuralnet.twod.util.LocationFinder$Location: int getColumn()>();

        $r5 = r8[$i2];

        $i4 = $r5[$i3];

        $i4 = $i4 + 1;

        $r5[$i3] = $i4;

        $r16 = virtualinvoke $r4.<org.apache.commons.math3.ml.neuralnet.Network: java.util.Collection getNeighbours(org.apache.commons.math3.ml.neuralnet.Neuron)>(r14);

        $r7 = virtualinvoke $r13.<org.apache.commons.math3.util.Pair: java.lang.Object getSecond()>();

        $z0 = interfaceinvoke $r16.<java.util.Collection: boolean contains(java.lang.Object)>($r7);

        if $z0 != 0 goto label1;

        r11 = r9[$i2];

        $d0 = r11[$i3];

        $d0 = $d0 + 1.0;

        r11[$i3] = $d0;

        goto label1;

     label2:
        $z0 = r0.<org.apache.commons.math3.ml.neuralnet.twod.util.TopographicErrorHistogram: boolean relativeCount>;

        if $z0 == 0 goto label6;

        $i2 = 0;

     label3:
        if $i2 >= $i0 goto label6;

        $i3 = 0;

     label4:
        if $i3 >= $i1 goto label5;

        r11 = r9[$i2];

        $d0 = r11[$i3];

        $r5 = r8[$i2];

        $i4 = $r5[$i3];

        $d1 = (double) $i4;

        $d0 = $d0 / $d1;

        r11[$i3] = $d0;

        $i3 = $i3 + 1;

        goto label4;

     label5:
        $i2 = $i2 + 1;

        goto label3;

     label6:
        return r9;
    }
