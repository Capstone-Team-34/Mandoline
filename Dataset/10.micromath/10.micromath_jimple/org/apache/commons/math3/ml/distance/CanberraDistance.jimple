org.apache.commons.math3.ml.distance.CanberraDistance extends java.lang.Object implements org.apache.commons.math3.ml.distance.DistanceMeasure
private static final long serialVersionUID
    public void <init>()
    {
        org.apache.commons.math3.ml.distance.CanberraDistance r0;

        r0 := @this: org.apache.commons.math3.ml.distance.CanberraDistance;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public double compute(double[], double[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.ml.distance.CanberraDistance r0;
        double[] $r1, $r2;
        double d0, d1, $d2, $d3;
        int i0, $i1;
        byte $b2;

        r0 := @this: org.apache.commons.math3.ml.distance.CanberraDistance;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[];

        staticinvoke <org.apache.commons.math3.util.MathArrays: void checkEqualLength(double[],double[])>($r1, $r2);

        d1 = 0.0;

        i0 = 0;

     label1:
        $i1 = lengthof $r1;

        if i0 >= $i1 goto label4;

        $d2 = $r1[i0];

        d0 = $r2[i0];

        $d2 = $d2 - d0;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d2);

        d0 = $r1[i0];

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d0);

        $d3 = $r2[i0];

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d3);

        d0 = d0 + $d3;

        $b2 = $d2 cmpl 0.0;

        if $b2 != 0 goto label3;

        $b2 = d0 cmpl 0.0;

        if $b2 != 0 goto label3;

        $d2 = 0.0;

     label2:
        d1 = d1 + $d2;

        i0 = i0 + 1;

        goto label1;

     label3:
        $d2 = $d2 / d0;

        goto label2;

     label4:
        return d1;
    }
