com.caverock.androidsvg.CSSParser extends java.lang.Object
private static final java.lang.String CLASS
private static final java.lang.String ID
private static final java.lang.String TAG
private boolean inMediaRule
private com.caverock.androidsvg.CSSParser$MediaType rendererMediaType
    public void <init>(com.caverock.androidsvg.CSSParser$MediaType)
    {
        com.caverock.androidsvg.CSSParser r0;
        com.caverock.androidsvg.CSSParser$MediaType $r1;

        r0 := @this: com.caverock.androidsvg.CSSParser;

        $r1 := @parameter0: com.caverock.androidsvg.CSSParser$MediaType;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.caverock.androidsvg.CSSParser: com.caverock.androidsvg.CSSParser$MediaType rendererMediaType> = null;

        r0.<com.caverock.androidsvg.CSSParser: boolean inMediaRule> = 0;

        r0.<com.caverock.androidsvg.CSSParser: com.caverock.androidsvg.CSSParser$MediaType rendererMediaType> = $r1;

        return;
    }
    private static int getChildPosition(java.util.List, int, com.caverock.androidsvg.SVG$SvgElementBase)
    {
        java.util.List r0;
        int $i0;
        com.caverock.androidsvg.SVG$SvgElementBase $r1;
        java.lang.Object $r2;
        com.caverock.androidsvg.SVG$SvgContainer $r3;
        java.util.Iterator $r4;
        boolean $z0;
        com.caverock.androidsvg.SVG$SvgObject r5;

        r0 := @parameter0: java.util.List;

        $i0 := @parameter1: int;

        $r1 := @parameter2: com.caverock.androidsvg.SVG$SvgElementBase;

        if $i0 >= 0 goto label1;

        return -1;

     label1:
        $r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>($i0);

        $r3 = $r1.<com.caverock.androidsvg.SVG$SvgElementBase: com.caverock.androidsvg.SVG$SvgContainer parent>;

        if $r2 == $r3 goto label2;

        return -1;

     label2:
        $i0 = 0;

        $r3 = $r1.<com.caverock.androidsvg.SVG$SvgElementBase: com.caverock.androidsvg.SVG$SvgContainer parent>;

        r0 = interfaceinvoke $r3.<com.caverock.androidsvg.SVG$SvgContainer: java.util.List getChildren()>();

        $r4 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r2 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.caverock.androidsvg.SVG$SvgObject) $r2;

        if r5 == $r1 goto label5;

        $i0 = $i0 + 1;

        goto label3;

     label4:
        return -1;

     label5:
        return $i0;
    }
    public static boolean mediaMatches(java.lang.String, com.caverock.androidsvg.CSSParser$MediaType) throws org.xml.sax.SAXException
    {
        java.lang.String $r0;
        com.caverock.androidsvg.CSSParser$MediaType $r1;
        com.caverock.androidsvg.CSSParser$CSSTextScanner r2;
        java.util.List $r3;
        boolean $z0;
        org.xml.sax.SAXException $r4;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: com.caverock.androidsvg.CSSParser$MediaType;

        r2 = new com.caverock.androidsvg.CSSParser$CSSTextScanner;

        specialinvoke r2.<com.caverock.androidsvg.CSSParser$CSSTextScanner: void <init>(java.lang.String)>($r0);

        virtualinvoke r2.<com.caverock.androidsvg.CSSParser$CSSTextScanner: void skipWhitespace()>();

        $r3 = staticinvoke <com.caverock.androidsvg.CSSParser: java.util.List parseMediaList(com.caverock.androidsvg.CSSParser$CSSTextScanner)>(r2);

        $z0 = virtualinvoke r2.<com.caverock.androidsvg.CSSParser$CSSTextScanner: boolean empty()>();

        if $z0 != 0 goto label1;

        $r4 = new org.xml.sax.SAXException;

        specialinvoke $r4.<org.xml.sax.SAXException: void <init>(java.lang.String)>("Invalid @media type list");

        throw $r4;

     label1:
        $z0 = staticinvoke <com.caverock.androidsvg.CSSParser: boolean mediaMatches(java.util.List,com.caverock.androidsvg.CSSParser$MediaType)>($r3, $r1);

        return $z0;
    }
    private static boolean mediaMatches(java.util.List, com.caverock.androidsvg.CSSParser$MediaType)
    {
        java.util.List r0;
        com.caverock.androidsvg.CSSParser$MediaType $r1, r4, $r5;
        java.util.Iterator $r2;
        boolean $z0;
        java.lang.Object $r3;

        r0 := @parameter0: java.util.List;

        $r1 := @parameter1: com.caverock.androidsvg.CSSParser$MediaType;

        $r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.caverock.androidsvg.CSSParser$MediaType) $r3;

        $r5 = <com.caverock.androidsvg.CSSParser$MediaType: com.caverock.androidsvg.CSSParser$MediaType all>;

        if r4 == $r5 goto label2;

        if r4 != $r1 goto label1;

     label2:
        return 1;

     label3:
        return 0;
    }
    private void parseAtRule(com.caverock.androidsvg.CSSParser$Ruleset, com.caverock.androidsvg.CSSParser$CSSTextScanner) throws org.xml.sax.SAXException
    {
        com.caverock.androidsvg.CSSParser r0;
        com.caverock.androidsvg.CSSParser$Ruleset $r1, $r7;
        com.caverock.androidsvg.CSSParser$CSSTextScanner $r2;
        java.lang.String $r3;
        org.xml.sax.SAXException $r4;
        boolean $z0;
        java.util.List $r5;
        com.caverock.androidsvg.CSSParser$MediaType $r6;
        java.lang.Object[] $r8;

        r0 := @this: com.caverock.androidsvg.CSSParser;

        $r1 := @parameter0: com.caverock.androidsvg.CSSParser$Ruleset;

        $r2 := @parameter1: com.caverock.androidsvg.CSSParser$CSSTextScanner;

        $r3 = virtualinvoke $r2.<com.caverock.androidsvg.CSSParser$CSSTextScanner: java.lang.String nextIdentifier()>();

        virtualinvoke $r2.<com.caverock.androidsvg.CSSParser$CSSTextScanner: void skipWhitespace()>();

        if $r3 != null goto label1;

        $r4 = new org.xml.sax.SAXException;

        specialinvoke $r4.<org.xml.sax.SAXException: void <init>(java.lang.String)>("Invalid \'@\' rule in <style> element");

        throw $r4;

     label1:
        $z0 = r0.<com.caverock.androidsvg.CSSParser: boolean inMediaRule>;

        if $z0 != 0 goto label5;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("media");

        if $z0 == 0 goto label5;

        $r5 = staticinvoke <com.caverock.androidsvg.CSSParser: java.util.List parseMediaList(com.caverock.androidsvg.CSSParser$CSSTextScanner)>($r2);

        $z0 = virtualinvoke $r2.<com.caverock.androidsvg.CSSParser$CSSTextScanner: boolean consume(char)>(123);

        if $z0 != 0 goto label2;

        $r4 = new org.xml.sax.SAXException;

        specialinvoke $r4.<org.xml.sax.SAXException: void <init>(java.lang.String)>("Invalid @media rule: missing rule set");

        throw $r4;

     label2:
        virtualinvoke $r2.<com.caverock.androidsvg.CSSParser$CSSTextScanner: void skipWhitespace()>();

        $r6 = r0.<com.caverock.androidsvg.CSSParser: com.caverock.androidsvg.CSSParser$MediaType rendererMediaType>;

        $z0 = staticinvoke <com.caverock.androidsvg.CSSParser: boolean mediaMatches(java.util.List,com.caverock.androidsvg.CSSParser$MediaType)>($r5, $r6);

        if $z0 == 0 goto label4;

        r0.<com.caverock.androidsvg.CSSParser: boolean inMediaRule> = 1;

        $r7 = specialinvoke r0.<com.caverock.androidsvg.CSSParser: com.caverock.androidsvg.CSSParser$Ruleset parseRuleset(com.caverock.androidsvg.CSSParser$CSSTextScanner)>($r2);

        virtualinvoke $r1.<com.caverock.androidsvg.CSSParser$Ruleset: void addAll(com.caverock.androidsvg.CSSParser$Ruleset)>($r7);

        r0.<com.caverock.androidsvg.CSSParser: boolean inMediaRule> = 0;

     label3:
        $z0 = virtualinvoke $r2.<com.caverock.androidsvg.CSSParser$CSSTextScanner: boolean consume(char)>(125);

        if $z0 != 0 goto label6;

        $r4 = new org.xml.sax.SAXException;

        specialinvoke $r4.<org.xml.sax.SAXException: void <init>(java.lang.String)>("Invalid @media rule: expected \'}\' at end of rule set");

        throw $r4;

     label4:
        specialinvoke r0.<com.caverock.androidsvg.CSSParser: com.caverock.androidsvg.CSSParser$Ruleset parseRuleset(com.caverock.androidsvg.CSSParser$CSSTextScanner)>($r2);

        goto label3;

     label5:
        $r8 = newarray (java.lang.Object)[1];

        $r8[0] = $r3;

        staticinvoke <com.caverock.androidsvg.CSSParser: void warn(java.lang.String,java.lang.Object[])>("Ignoring @%s rule", $r8);

        specialinvoke r0.<com.caverock.androidsvg.CSSParser: void skipAtRule(com.caverock.androidsvg.CSSParser$CSSTextScanner)>($r2);

     label6:
        virtualinvoke $r2.<com.caverock.androidsvg.CSSParser$CSSTextScanner: void skipWhitespace()>();

        return;
    }
    protected static java.util.List parseClassAttribute(java.lang.String) throws org.xml.sax.SAXException
    {
        java.lang.String $r0, $r3;
        com.caverock.androidsvg.CSSParser$CSSTextScanner r1;
        java.util.ArrayList r2;
        boolean $z0;
        org.xml.sax.SAXException $r4;
        java.lang.StringBuilder $r5;

        $r0 := @parameter0: java.lang.String;

        r1 = new com.caverock.androidsvg.CSSParser$CSSTextScanner;

        specialinvoke r1.<com.caverock.androidsvg.CSSParser$CSSTextScanner: void <init>(java.lang.String)>($r0);

        r2 = null;

     label1:
        $z0 = virtualinvoke r1.<com.caverock.androidsvg.CSSParser$CSSTextScanner: boolean empty()>();

        if $z0 != 0 goto label4;

        $r3 = virtualinvoke r1.<com.caverock.androidsvg.CSSParser$CSSTextScanner: java.lang.String nextIdentifier()>();

        if $r3 != null goto label2;

        $r4 = new org.xml.sax.SAXException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid value for \"class\" attribute: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<org.xml.sax.SAXException: void <init>(java.lang.String)>($r0);

        throw $r4;

     label2:
        if r2 != null goto label3;

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

     label3:
        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r3);

        virtualinvoke r1.<com.caverock.androidsvg.CSSParser$CSSTextScanner: void skipWhitespace()>();

        goto label1;

     label4:
        return r2;
    }
    private com.caverock.androidsvg.SVG$Style parseDeclarations(com.caverock.androidsvg.CSSParser$CSSTextScanner) throws org.xml.sax.SAXException
    {
        com.caverock.androidsvg.CSSParser r0;
        com.caverock.androidsvg.CSSParser$CSSTextScanner $r1;
        com.caverock.androidsvg.SVG$Style r2;
        java.lang.String $r3, $r5;
        boolean $z0;
        org.xml.sax.SAXException $r4;

        r0 := @this: com.caverock.androidsvg.CSSParser;

        $r1 := @parameter0: com.caverock.androidsvg.CSSParser$CSSTextScanner;

        r2 = new com.caverock.androidsvg.SVG$Style;

        specialinvoke r2.<com.caverock.androidsvg.SVG$Style: void <init>()>();

     label1:
        $r3 = virtualinvoke $r1.<com.caverock.androidsvg.CSSParser$CSSTextScanner: java.lang.String nextIdentifier()>();

        virtualinvoke $r1.<com.caverock.androidsvg.CSSParser$CSSTextScanner: void skipWhitespace()>();

        $z0 = virtualinvoke $r1.<com.caverock.androidsvg.CSSParser$CSSTextScanner: boolean consume(char)>(58);

        if $z0 != 0 goto label3;

     label2:
        $r4 = new org.xml.sax.SAXException;

        specialinvoke $r4.<org.xml.sax.SAXException: void <init>(java.lang.String)>("Malformed rule set in <style> element");

        throw $r4;

     label3:
        virtualinvoke $r1.<com.caverock.androidsvg.CSSParser$CSSTextScanner: void skipWhitespace()>();

        $r5 = virtualinvoke $r1.<com.caverock.androidsvg.CSSParser$CSSTextScanner: java.lang.String nextPropertyValue()>();

        if $r5 == null goto label2;

        virtualinvoke $r1.<com.caverock.androidsvg.CSSParser$CSSTextScanner: void skipWhitespace()>();

        $z0 = virtualinvoke $r1.<com.caverock.androidsvg.CSSParser$CSSTextScanner: boolean consume(char)>(33);

        if $z0 == 0 goto label5;

        virtualinvoke $r1.<com.caverock.androidsvg.CSSParser$CSSTextScanner: void skipWhitespace()>();

        $z0 = virtualinvoke $r1.<com.caverock.androidsvg.CSSParser$CSSTextScanner: boolean consume(java.lang.String)>("important");

        if $z0 != 0 goto label4;

        $r4 = new org.xml.sax.SAXException;

        specialinvoke $r4.<org.xml.sax.SAXException: void <init>(java.lang.String)>("Malformed rule set in <style> element: found unexpected \'!\'");

        throw $r4;

     label4:
        virtualinvoke $r1.<com.caverock.androidsvg.CSSParser$CSSTextScanner: void skipWhitespace()>();

     label5:
        virtualinvoke $r1.<com.caverock.androidsvg.CSSParser$CSSTextScanner: boolean consume(char)>(59);

        staticinvoke <com.caverock.androidsvg.SVGParser: void processStyleProperty(com.caverock.androidsvg.SVG$Style,java.lang.String,java.lang.String)>(r2, $r3, $r5);

        virtualinvoke $r1.<com.caverock.androidsvg.CSSParser$CSSTextScanner: void skipWhitespace()>();

        $z0 = virtualinvoke $r1.<com.caverock.androidsvg.CSSParser$CSSTextScanner: boolean consume(char)>(125);

        if $z0 == 0 goto label6;

        return r2;

     label6:
        $z0 = virtualinvoke $r1.<com.caverock.androidsvg.CSSParser$CSSTextScanner: boolean empty()>();

        if $z0 == 0 goto label1;

        goto label2;
    }
    private static java.util.List parseMediaList(com.caverock.androidsvg.CSSParser$CSSTextScanner) throws org.xml.sax.SAXException
    {
        com.caverock.androidsvg.CSSParser$CSSTextScanner $r0;
        java.lang.IllegalArgumentException r1;
        java.util.ArrayList r2;
        boolean $z0;
        java.lang.String $r3;
        com.caverock.androidsvg.CSSParser$MediaType $r4;
        org.xml.sax.SAXException $r5;

        $r0 := @parameter0: com.caverock.androidsvg.CSSParser$CSSTextScanner;

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

     label1:
        $z0 = virtualinvoke $r0.<com.caverock.androidsvg.CSSParser$CSSTextScanner: boolean empty()>();

        if $z0 != 0 goto label5;

        $r3 = virtualinvoke $r0.<com.caverock.androidsvg.CSSParser$CSSTextScanner: java.lang.String nextToken(char)>(44);

     label2:
        $r4 = staticinvoke <com.caverock.androidsvg.CSSParser$MediaType: com.caverock.androidsvg.CSSParser$MediaType valueOf(java.lang.String)>($r3);

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

     label3:
        $z0 = virtualinvoke $r0.<com.caverock.androidsvg.CSSParser$CSSTextScanner: boolean skipCommaWhitespace()>();

        if $z0 != 0 goto label1;

        return r2;

     label4:
        r1 := @caughtexception;

        $r5 = new org.xml.sax.SAXException;

        specialinvoke $r5.<org.xml.sax.SAXException: void <init>(java.lang.String)>("Invalid @media type list");

        throw $r5;

     label5:
        return r2;

        catch java.lang.IllegalArgumentException from label2 to label3 with label4;
    }
    private boolean parseRule(com.caverock.androidsvg.CSSParser$Ruleset, com.caverock.androidsvg.CSSParser$CSSTextScanner) throws org.xml.sax.SAXException
    {
        com.caverock.androidsvg.CSSParser r0;
        com.caverock.androidsvg.CSSParser$Ruleset $r1;
        com.caverock.androidsvg.CSSParser$CSSTextScanner $r2;
        java.util.List $r3;
        boolean $z0;
        org.xml.sax.SAXException $r4;
        com.caverock.androidsvg.SVG$Style $r5;
        java.util.Iterator $r6;
        java.lang.Object $r7;
        com.caverock.androidsvg.CSSParser$Selector r8;
        com.caverock.androidsvg.CSSParser$Rule $r9;

        r0 := @this: com.caverock.androidsvg.CSSParser;

        $r1 := @parameter0: com.caverock.androidsvg.CSSParser$Ruleset;

        $r2 := @parameter1: com.caverock.androidsvg.CSSParser$CSSTextScanner;

        $r3 = specialinvoke r0.<com.caverock.androidsvg.CSSParser: java.util.List parseSelectorGroup(com.caverock.androidsvg.CSSParser$CSSTextScanner)>($r2);

        if $r3 == null goto label4;

        $z0 = interfaceinvoke $r3.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label4;

        $z0 = virtualinvoke $r2.<com.caverock.androidsvg.CSSParser$CSSTextScanner: boolean consume(char)>(123);

        if $z0 != 0 goto label1;

        $r4 = new org.xml.sax.SAXException;

        specialinvoke $r4.<org.xml.sax.SAXException: void <init>(java.lang.String)>("Malformed rule block in <style> element: missing \'{\'");

        throw $r4;

     label1:
        virtualinvoke $r2.<com.caverock.androidsvg.CSSParser$CSSTextScanner: void skipWhitespace()>();

        $r5 = specialinvoke r0.<com.caverock.androidsvg.CSSParser: com.caverock.androidsvg.SVG$Style parseDeclarations(com.caverock.androidsvg.CSSParser$CSSTextScanner)>($r2);

        virtualinvoke $r2.<com.caverock.androidsvg.CSSParser$CSSTextScanner: void skipWhitespace()>();

        $r6 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (com.caverock.androidsvg.CSSParser$Selector) $r7;

        $r9 = new com.caverock.androidsvg.CSSParser$Rule;

        specialinvoke $r9.<com.caverock.androidsvg.CSSParser$Rule: void <init>(com.caverock.androidsvg.CSSParser$Selector,com.caverock.androidsvg.SVG$Style)>(r8, $r5);

        virtualinvoke $r1.<com.caverock.androidsvg.CSSParser$Ruleset: void add(com.caverock.androidsvg.CSSParser$Rule)>($r9);

        goto label2;

     label3:
        return 1;

     label4:
        return 0;
    }
    private com.caverock.androidsvg.CSSParser$Ruleset parseRuleset(com.caverock.androidsvg.CSSParser$CSSTextScanner) throws org.xml.sax.SAXException
    {
        com.caverock.androidsvg.CSSParser r0;
        com.caverock.androidsvg.CSSParser$CSSTextScanner $r1;
        com.caverock.androidsvg.CSSParser$Ruleset r2;
        boolean $z0;

        r0 := @this: com.caverock.androidsvg.CSSParser;

        $r1 := @parameter0: com.caverock.androidsvg.CSSParser$CSSTextScanner;

        r2 = new com.caverock.androidsvg.CSSParser$Ruleset;

        specialinvoke r2.<com.caverock.androidsvg.CSSParser$Ruleset: void <init>()>();

     label1:
        $z0 = virtualinvoke $r1.<com.caverock.androidsvg.CSSParser$CSSTextScanner: boolean empty()>();

        if $z0 != 0 goto label3;

        $z0 = virtualinvoke $r1.<com.caverock.androidsvg.CSSParser$CSSTextScanner: boolean consume(java.lang.String)>("<!--");

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r1.<com.caverock.androidsvg.CSSParser$CSSTextScanner: boolean consume(java.lang.String)>("-->");

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r1.<com.caverock.androidsvg.CSSParser$CSSTextScanner: boolean consume(char)>(64);

        if $z0 == 0 goto label2;

        specialinvoke r0.<com.caverock.androidsvg.CSSParser: void parseAtRule(com.caverock.androidsvg.CSSParser$Ruleset,com.caverock.androidsvg.CSSParser$CSSTextScanner)>(r2, $r1);

        goto label1;

     label2:
        $z0 = specialinvoke r0.<com.caverock.androidsvg.CSSParser: boolean parseRule(com.caverock.androidsvg.CSSParser$Ruleset,com.caverock.androidsvg.CSSParser$CSSTextScanner)>(r2, $r1);

        if $z0 != 0 goto label1;

     label3:
        return r2;
    }
    private java.util.List parseSelectorGroup(com.caverock.androidsvg.CSSParser$CSSTextScanner) throws org.xml.sax.SAXException
    {
        com.caverock.androidsvg.CSSParser r0;
        com.caverock.androidsvg.CSSParser$CSSTextScanner $r1;
        boolean $z0;
        java.util.ArrayList r2;
        com.caverock.androidsvg.CSSParser$Selector r3;

        r0 := @this: com.caverock.androidsvg.CSSParser;

        $r1 := @parameter0: com.caverock.androidsvg.CSSParser$CSSTextScanner;

        $z0 = virtualinvoke $r1.<com.caverock.androidsvg.CSSParser$CSSTextScanner: boolean empty()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>(int)>(1);

        r3 = new com.caverock.androidsvg.CSSParser$Selector;

        specialinvoke r3.<com.caverock.androidsvg.CSSParser$Selector: void <init>()>();

     label2:
        $z0 = virtualinvoke $r1.<com.caverock.androidsvg.CSSParser$CSSTextScanner: boolean empty()>();

        if $z0 != 0 goto label3;

        $z0 = virtualinvoke $r1.<com.caverock.androidsvg.CSSParser$CSSTextScanner: boolean nextSimpleSelector(com.caverock.androidsvg.CSSParser$Selector)>(r3);

        if $z0 == 0 goto label3;

        $z0 = virtualinvoke $r1.<com.caverock.androidsvg.CSSParser$CSSTextScanner: boolean skipCommaWhitespace()>();

        if $z0 == 0 goto label2;

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

        r3 = new com.caverock.androidsvg.CSSParser$Selector;

        specialinvoke r3.<com.caverock.androidsvg.CSSParser$Selector: void <init>()>();

        goto label2;

     label3:
        $z0 = virtualinvoke r3.<com.caverock.androidsvg.CSSParser$Selector: boolean isEmpty()>();

        if $z0 != 0 goto label4;

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

     label4:
        return r2;
    }
    private static boolean ruleMatch(com.caverock.androidsvg.CSSParser$Selector, int, java.util.List, int, com.caverock.androidsvg.SVG$SvgElementBase)
    {
        com.caverock.androidsvg.CSSParser$Selector $r0;
        int $i0, $i1, $i2;
        java.util.List r1, $r7;
        com.caverock.androidsvg.SVG$SvgElementBase $r2;
        com.caverock.androidsvg.CSSParser$Combinator $r3, $r5;
        com.caverock.androidsvg.CSSParser$SimpleSelector $r4;
        boolean $z0;
        com.caverock.androidsvg.SVG$SvgContainer $r6;
        java.lang.Object $r8;

        $r0 := @parameter0: com.caverock.androidsvg.CSSParser$Selector;

        $i0 := @parameter1: int;

        r1 := @parameter2: java.util.List;

        $i1 := @parameter3: int;

        $r2 := @parameter4: com.caverock.androidsvg.SVG$SvgElementBase;

        $r4 = virtualinvoke $r0.<com.caverock.androidsvg.CSSParser$Selector: com.caverock.androidsvg.CSSParser$SimpleSelector get(int)>($i0);

        $z0 = staticinvoke <com.caverock.androidsvg.CSSParser: boolean selectorMatch(com.caverock.androidsvg.CSSParser$SimpleSelector,java.util.List,int,com.caverock.androidsvg.SVG$SvgElementBase)>($r4, r1, $i1, $r2);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r5 = $r4.<com.caverock.androidsvg.CSSParser$SimpleSelector: com.caverock.androidsvg.CSSParser$Combinator combinator>;

        $r3 = <com.caverock.androidsvg.CSSParser$Combinator: com.caverock.androidsvg.CSSParser$Combinator DESCENDANT>;

        if $r5 != $r3 goto label4;

        if $i0 != 0 goto label3;

        return 1;

     label2:
        $i1 = $i1 + -1;

     label3:
        if $i1 < 0 goto label6;

        $i2 = $i0 + -1;

        $z0 = staticinvoke <com.caverock.androidsvg.CSSParser: boolean ruleMatchOnAncestors(com.caverock.androidsvg.CSSParser$Selector,int,java.util.List,int)>($r0, $i2, r1, $i1);

        if $z0 == 0 goto label2;

        return 1;

     label4:
        $r3 = $r4.<com.caverock.androidsvg.CSSParser$SimpleSelector: com.caverock.androidsvg.CSSParser$Combinator combinator>;

        $r5 = <com.caverock.androidsvg.CSSParser$Combinator: com.caverock.androidsvg.CSSParser$Combinator CHILD>;

        if $r3 != $r5 goto label5;

        $i0 = $i0 + -1;

        $z0 = staticinvoke <com.caverock.androidsvg.CSSParser: boolean ruleMatchOnAncestors(com.caverock.androidsvg.CSSParser$Selector,int,java.util.List,int)>($r0, $i0, r1, $i1);

        return $z0;

     label5:
        $i2 = staticinvoke <com.caverock.androidsvg.CSSParser: int getChildPosition(java.util.List,int,com.caverock.androidsvg.SVG$SvgElementBase)>(r1, $i1, $r2);

        if $i2 <= 0 goto label6;

        $r6 = $r2.<com.caverock.androidsvg.SVG$SvgElementBase: com.caverock.androidsvg.SVG$SvgContainer parent>;

        $r7 = interfaceinvoke $r6.<com.caverock.androidsvg.SVG$SvgContainer: java.util.List getChildren()>();

        $i2 = $i2 + -1;

        $r8 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>($i2);

        $r2 = (com.caverock.androidsvg.SVG$SvgElementBase) $r8;

        $i0 = $i0 + -1;

        $z0 = staticinvoke <com.caverock.androidsvg.CSSParser: boolean ruleMatch(com.caverock.androidsvg.CSSParser$Selector,int,java.util.List,int,com.caverock.androidsvg.SVG$SvgElementBase)>($r0, $i0, r1, $i1, $r2);

        return $z0;

     label6:
        return 0;
    }
    protected static boolean ruleMatch(com.caverock.androidsvg.CSSParser$Selector, com.caverock.androidsvg.SVG$SvgElementBase)
    {
        com.caverock.androidsvg.CSSParser$Selector $r0;
        com.caverock.androidsvg.SVG$SvgElementBase $r1;
        java.util.ArrayList r2;
        int i0, $i1;
        com.caverock.androidsvg.SVG$SvgContainer r3;
        com.caverock.androidsvg.SVG$SvgObject r4;
        com.caverock.androidsvg.CSSParser$SimpleSelector $r5;
        boolean $z0;

        $r0 := @parameter0: com.caverock.androidsvg.CSSParser$Selector;

        $r1 := @parameter1: com.caverock.androidsvg.SVG$SvgElementBase;

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        r3 = $r1.<com.caverock.androidsvg.SVG$SvgElementBase: com.caverock.androidsvg.SVG$SvgContainer parent>;

     label1:
        if r3 == null goto label2;

        interfaceinvoke r2.<java.util.List: void add(int,java.lang.Object)>(0, r3);

        r4 = (com.caverock.androidsvg.SVG$SvgObject) r3;

        r3 = r4.<com.caverock.androidsvg.SVG$SvgObject: com.caverock.androidsvg.SVG$SvgContainer parent>;

        goto label1;

     label2:
        i0 = interfaceinvoke r2.<java.util.List: int size()>();

        i0 = i0 + -1;

        $i1 = virtualinvoke $r0.<com.caverock.androidsvg.CSSParser$Selector: int size()>();

        if $i1 != 1 goto label3;

        $r5 = virtualinvoke $r0.<com.caverock.androidsvg.CSSParser$Selector: com.caverock.androidsvg.CSSParser$SimpleSelector get(int)>(0);

        $z0 = staticinvoke <com.caverock.androidsvg.CSSParser: boolean selectorMatch(com.caverock.androidsvg.CSSParser$SimpleSelector,java.util.List,int,com.caverock.androidsvg.SVG$SvgElementBase)>($r5, r2, i0, $r1);

        return $z0;

     label3:
        $i1 = virtualinvoke $r0.<com.caverock.androidsvg.CSSParser$Selector: int size()>();

        $i1 = $i1 + -1;

        $z0 = staticinvoke <com.caverock.androidsvg.CSSParser: boolean ruleMatch(com.caverock.androidsvg.CSSParser$Selector,int,java.util.List,int,com.caverock.androidsvg.SVG$SvgElementBase)>($r0, $i1, r2, i0, $r1);

        return $z0;
    }
    private static boolean ruleMatchOnAncestors(com.caverock.androidsvg.CSSParser$Selector, int, java.util.List, int)
    {
        com.caverock.androidsvg.CSSParser$Selector $r0;
        int $i0, $i1, $i2;
        java.util.List r1, $r8;
        com.caverock.androidsvg.CSSParser$Combinator $r2, $r6;
        com.caverock.androidsvg.CSSParser$SimpleSelector $r3;
        java.lang.Object $r4;
        com.caverock.androidsvg.SVG$SvgElementBase r5;
        boolean $z0;
        com.caverock.androidsvg.SVG$SvgContainer $r7;

        $r0 := @parameter0: com.caverock.androidsvg.CSSParser$Selector;

        $i0 := @parameter1: int;

        r1 := @parameter2: java.util.List;

        $i1 := @parameter3: int;

        $r3 = virtualinvoke $r0.<com.caverock.androidsvg.CSSParser$Selector: com.caverock.androidsvg.CSSParser$SimpleSelector get(int)>($i0);

        $r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>($i1);

        r5 = (com.caverock.androidsvg.SVG$SvgElementBase) $r4;

        $z0 = staticinvoke <com.caverock.androidsvg.CSSParser: boolean selectorMatch(com.caverock.androidsvg.CSSParser$SimpleSelector,java.util.List,int,com.caverock.androidsvg.SVG$SvgElementBase)>($r3, r1, $i1, r5);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r6 = $r3.<com.caverock.androidsvg.CSSParser$SimpleSelector: com.caverock.androidsvg.CSSParser$Combinator combinator>;

        $r2 = <com.caverock.androidsvg.CSSParser$Combinator: com.caverock.androidsvg.CSSParser$Combinator DESCENDANT>;

        if $r6 != $r2 goto label3;

        if $i0 != 0 goto label2;

        return 1;

     label2:
        if $i1 <= 0 goto label5;

        $i2 = $i0 + -1;

        $i1 = $i1 + -1;

        $z0 = staticinvoke <com.caverock.androidsvg.CSSParser: boolean ruleMatchOnAncestors(com.caverock.androidsvg.CSSParser$Selector,int,java.util.List,int)>($r0, $i2, r1, $i1);

        if $z0 == 0 goto label2;

        return 1;

     label3:
        $r2 = $r3.<com.caverock.androidsvg.CSSParser$SimpleSelector: com.caverock.androidsvg.CSSParser$Combinator combinator>;

        $r6 = <com.caverock.androidsvg.CSSParser$Combinator: com.caverock.androidsvg.CSSParser$Combinator CHILD>;

        if $r2 != $r6 goto label4;

        $i0 = $i0 + -1;

        $i1 = $i1 + -1;

        $z0 = staticinvoke <com.caverock.androidsvg.CSSParser: boolean ruleMatchOnAncestors(com.caverock.androidsvg.CSSParser$Selector,int,java.util.List,int)>($r0, $i0, r1, $i1);

        return $z0;

     label4:
        $i2 = staticinvoke <com.caverock.androidsvg.CSSParser: int getChildPosition(java.util.List,int,com.caverock.androidsvg.SVG$SvgElementBase)>(r1, $i1, r5);

        if $i2 <= 0 goto label5;

        $r7 = r5.<com.caverock.androidsvg.SVG$SvgElementBase: com.caverock.androidsvg.SVG$SvgContainer parent>;

        $r8 = interfaceinvoke $r7.<com.caverock.androidsvg.SVG$SvgContainer: java.util.List getChildren()>();

        $i2 = $i2 + -1;

        $r4 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>($i2);

        r5 = (com.caverock.androidsvg.SVG$SvgElementBase) $r4;

        $i0 = $i0 + -1;

        $z0 = staticinvoke <com.caverock.androidsvg.CSSParser: boolean ruleMatch(com.caverock.androidsvg.CSSParser$Selector,int,java.util.List,int,com.caverock.androidsvg.SVG$SvgElementBase)>($r0, $i0, r1, $i1, r5);

        return $z0;

     label5:
        return 0;
    }
    private static boolean selectorMatch(com.caverock.androidsvg.CSSParser$SimpleSelector, java.util.List, int, com.caverock.androidsvg.SVG$SvgElementBase)
    {
        com.caverock.androidsvg.CSSParser$SimpleSelector $r0;
        java.util.List r1, $r7;
        int $i0, $i1;
        com.caverock.androidsvg.SVG$SvgElementBase $r2;
        java.lang.String $r3, $r5;
        boolean $z0;
        java.lang.Class $r4;
        java.util.Locale $r6;
        java.util.Iterator $r8;
        java.lang.Object $r9;
        com.caverock.androidsvg.CSSParser$Attrib r10;

        $r0 := @parameter0: com.caverock.androidsvg.CSSParser$SimpleSelector;

        r1 := @parameter1: java.util.List;

        $i0 := @parameter2: int;

        $r2 := @parameter3: com.caverock.androidsvg.SVG$SvgElementBase;

        $r3 = $r0.<com.caverock.androidsvg.CSSParser$SimpleSelector: java.lang.String tag>;

        if $r3 == null goto label2;

        $r3 = $r0.<com.caverock.androidsvg.CSSParser$SimpleSelector: java.lang.String tag>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("G");

        if $z0 == 0 goto label1;

        $z0 = $r2 instanceof com.caverock.androidsvg.SVG$Group;

        if $z0 != 0 goto label2;

        return 0;

     label1:
        $r3 = $r0.<com.caverock.androidsvg.CSSParser$SimpleSelector: java.lang.String tag>;

        $r4 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getSimpleName()>();

        $r6 = <java.util.Locale: java.util.Locale US>;

        $r5 = virtualinvoke $r5.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r6);

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label8;

     label2:
        $r7 = $r0.<com.caverock.androidsvg.CSSParser$SimpleSelector: java.util.List attribs>;

        if $r7 == null goto label5;

        $r7 = $r0.<com.caverock.androidsvg.CSSParser$SimpleSelector: java.util.List attribs>;

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (com.caverock.androidsvg.CSSParser$Attrib) $r9;

        $r3 = r10.<com.caverock.androidsvg.CSSParser$Attrib: java.lang.String name>;

        if $r3 != "id" goto label4;

        $r3 = r10.<com.caverock.androidsvg.CSSParser$Attrib: java.lang.String value>;

        $r5 = $r2.<com.caverock.androidsvg.SVG$SvgElementBase: java.lang.String id>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label3;

        return 0;

     label4:
        $r3 = r10.<com.caverock.androidsvg.CSSParser$Attrib: java.lang.String name>;

        if $r3 != "class" goto label8;

        $r7 = $r2.<com.caverock.androidsvg.SVG$SvgElementBase: java.util.List classNames>;

        if $r7 == null goto label8;

        $r7 = $r2.<com.caverock.androidsvg.SVG$SvgElementBase: java.util.List classNames>;

        $r3 = r10.<com.caverock.androidsvg.CSSParser$Attrib: java.lang.String value>;

        $z0 = interfaceinvoke $r7.<java.util.List: boolean contains(java.lang.Object)>($r3);

        if $z0 != 0 goto label3;

        return 0;

     label5:
        $r7 = $r0.<com.caverock.androidsvg.CSSParser$SimpleSelector: java.util.List pseudos>;

        if $r7 == null goto label7;

        $r7 = $r0.<com.caverock.androidsvg.CSSParser$SimpleSelector: java.util.List pseudos>;

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label6:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (java.lang.String) $r9;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("first-child");

        if $z0 == 0 goto label8;

        $i1 = staticinvoke <com.caverock.androidsvg.CSSParser: int getChildPosition(java.util.List,int,com.caverock.androidsvg.SVG$SvgElementBase)>(r1, $i0, $r2);

        if $i1 == 0 goto label6;

        return 0;

     label7:
        return 1;

     label8:
        return 0;
    }
    private void skipAtRule(com.caverock.androidsvg.CSSParser$CSSTextScanner)
    {
        com.caverock.androidsvg.CSSParser r0;
        com.caverock.androidsvg.CSSParser$CSSTextScanner $r1;
        int i0, $i1;
        boolean $z0;
        java.lang.Integer $r2;

        r0 := @this: com.caverock.androidsvg.CSSParser;

        $r1 := @parameter0: com.caverock.androidsvg.CSSParser$CSSTextScanner;

        i0 = 0;

     label1:
        $z0 = virtualinvoke $r1.<com.caverock.androidsvg.CSSParser$CSSTextScanner: boolean empty()>();

        if $z0 != 0 goto label4;

        $r2 = virtualinvoke $r1.<com.caverock.androidsvg.CSSParser$CSSTextScanner: java.lang.Integer nextChar()>();

        $i1 = virtualinvoke $r2.<java.lang.Integer: int intValue()>();

        if $i1 != 59 goto label2;

        if i0 != 0 goto label2;

        return;

     label2:
        if $i1 != 123 goto label3;

        i0 = i0 + 1;

        goto label1;

     label3:
        if $i1 != 125 goto label1;

        if i0 <= 0 goto label1;

        i0 = i0 + -1;

        if i0 != 0 goto label1;

     label4:
        return;
    }
    private static transient void warn(java.lang.String, java.lang.Object[])
    {
        java.lang.String $r0;
        java.lang.Object[] $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object[];

        $r0 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>($r0, $r1);

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AndroidSVG CSSParser", $r0);

        return;
    }
    public com.caverock.androidsvg.CSSParser$Ruleset parse(java.lang.String) throws org.xml.sax.SAXException
    {
        com.caverock.androidsvg.CSSParser r0;
        java.lang.String $r1;
        com.caverock.androidsvg.CSSParser$CSSTextScanner r2;
        com.caverock.androidsvg.CSSParser$Ruleset $r3;

        r0 := @this: com.caverock.androidsvg.CSSParser;

        $r1 := @parameter0: java.lang.String;

        r2 = new com.caverock.androidsvg.CSSParser$CSSTextScanner;

        specialinvoke r2.<com.caverock.androidsvg.CSSParser$CSSTextScanner: void <init>(java.lang.String)>($r1);

        virtualinvoke r2.<com.caverock.androidsvg.CSSParser$CSSTextScanner: void skipWhitespace()>();

        $r3 = specialinvoke r0.<com.caverock.androidsvg.CSSParser: com.caverock.androidsvg.CSSParser$Ruleset parseRuleset(com.caverock.androidsvg.CSSParser$CSSTextScanner)>(r2);

        return $r3;
    }
