com.mkulesh.micromath.export.ExportToLatex extends java.lang.Object
protected final com.mkulesh.micromath.fman.AdapterIf adapter
protected final android.content.Context context
protected boolean currTextNumber
protected final com.mkulesh.micromath.export.Exporter$Parameters exportParameters
protected int figNumber
protected java.lang.String fileName
protected final java.lang.String[][] greekTable
protected final java.io.OutputStream stream
protected final java.io.StringWriter writer
    public void <init>(android.content.Context, java.io.OutputStream, android.net.Uri, com.mkulesh.micromath.fman.AdapterIf, com.mkulesh.micromath.export.Exporter$Parameters) throws java.lang.Exception
    {
        com.mkulesh.micromath.export.ExportToLatex r0;
        android.content.Context $r1;
        java.io.OutputStream $r2;
        android.net.Uri $r3;
        com.mkulesh.micromath.fman.AdapterIf $r4;
        com.mkulesh.micromath.export.Exporter$Parameters $r5;
        java.io.StringWriter $r6;
        java.lang.String[][] $r7;
        java.lang.String[] $r8;
        java.lang.String $r9, $r11;
        java.lang.Exception $r10;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: com.mkulesh.micromath.export.ExportToLatex;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: java.io.OutputStream;

        $r3 := @parameter2: android.net.Uri;

        $r4 := @parameter3: com.mkulesh.micromath.fman.AdapterIf;

        $r5 := @parameter4: com.mkulesh.micromath.export.Exporter$Parameters;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r6 = new java.io.StringWriter;

        specialinvoke $r6.<java.io.StringWriter: void <init>()>();

        r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer> = $r6;

        r0.<com.mkulesh.micromath.export.ExportToLatex: java.lang.String fileName> = null;

        r0.<com.mkulesh.micromath.export.ExportToLatex: int figNumber> = 1;

        r0.<com.mkulesh.micromath.export.ExportToLatex: boolean currTextNumber> = 0;

        $r7 = newarray (java.lang.String[])[49];

        $r8 = newarray (java.lang.String)[2];

        $r8[0] = "\u0391";

        $r8[1] = "A";

        $r7[0] = $r8;

        $r8 = newarray (java.lang.String)[2];

        $r8[0] = "\u03b1";

        $r8[1] = "\\alpha";

        $r7[1] = $r8;

        $r8 = newarray (java.lang.String)[2];

        $r8[0] = "\u0392";

        $r8[1] = "B";

        $r7[2] = $r8;

        $r8 = newarray (java.lang.String)[2];

        $r8[0] = "\u03b2";

        $r8[1] = "\\beta";

        $r7[3] = $r8;

        $r8 = newarray (java.lang.String)[2];

        $r8[0] = "\u0393";

        $r8[1] = "\\Gamma";

        $r7[4] = $r8;

        $r8 = newarray (java.lang.String)[2];

        $r8[0] = "\u03b3";

        $r8[1] = "\\gamma";

        $r7[5] = $r8;

        $r8 = newarray (java.lang.String)[2];

        $r8[0] = "\u0394";

        $r8[1] = "\\Delta";

        $r7[6] = $r8;

        $r8 = newarray (java.lang.String)[2];

        $r8[0] = "\u03b4";

        $r8[1] = "\\delta";

        $r7[7] = $r8;

        $r8 = newarray (java.lang.String)[2];

        $r8[0] = "\u0395";

        $r8[1] = "E";

        $r7[8] = $r8;

        $r8 = newarray (java.lang.String)[2];

        $r8[0] = "\u03b5";

        $r8[1] = "\\varepsilon";

        $r7[9] = $r8;

        $r8 = newarray (java.lang.String)[2];

        $r8[0] = "\u0396";

        $r8[1] = "Z";

        $r7[10] = $r8;

        $r8 = newarray (java.lang.String)[2];

        $r8[0] = "\u03b6";

        $r8[1] = "\\zeta";

        $r7[11] = $r8;

        $r8 = newarray (java.lang.String)[2];

        $r8[0] = "\u0397";

        $r8[1] = "H";

        $r7[12] = $r8;

        $r8 = newarray (java.lang.String)[2];

        $r8[0] = "\u03b7";

        $r8[1] = "\\eta";

        $r7[13] = $r8;

        $r8 = newarray (java.lang.String)[2];

        $r8[0] = "\u0398";

        $r8[1] = "\\Theta";

        $r7[14] = $r8;

        $r8 = newarray (java.lang.String)[2];

        $r8[0] = "\u03b8";

        $r8[1] = "\\theta";

        $r7[15] = $r8;

        $r8 = newarray (java.lang.String)[2];

        $r8[0] = "\u0399";

        $r8[1] = "I";

        $r7[16] = $r8;

        $r8 = newarray (java.lang.String)[2];

        $r8[0] = "\u03b9";

        $r8[1] = "\\iota";

        $r7[17] = $r8;

        $r8 = newarray (java.lang.String)[2];

        $r8[0] = "\u039a";

        $r8[1] = "K";

        $r7[18] = $r8;

        $r8 = newarray (java.lang.String)[2];

        $r8[0] = "\u03ba";

        $r8[1] = "\\kappa";

        $r7[19] = $r8;

        $r8 = newarray (java.lang.String)[2];

        $r8[0] = "\u039b";

        $r8[1] = "\\Lambda";

        $r7[20] = $r8;

        $r8 = newarray (java.lang.String)[2];

        $r8[0] = "\u03bb";

        $r8[1] = "\\lambda";

        $r7[21] = $r8;

        $r8 = newarray (java.lang.String)[2];

        $r8[0] = "\u039c";

        $r8[1] = "M";

        $r7[22] = $r8;

        $r8 = newarray (java.lang.String)[2];

        $r8[0] = "\u03bc";

        $r8[1] = "\\mu";

        $r7[23] = $r8;

        $r8 = newarray (java.lang.String)[2];

        $r8[0] = "\u039d";

        $r8[1] = "N";

        $r7[24] = $r8;

        $r8 = newarray (java.lang.String)[2];

        $r8[0] = "\u03bd";

        $r8[1] = "\\nu";

        $r7[25] = $r8;

        $r8 = newarray (java.lang.String)[2];

        $r8[0] = "\u039e";

        $r8[1] = "\\Xi";

        $r7[26] = $r8;

        $r8 = newarray (java.lang.String)[2];

        $r8[0] = "\u03be";

        $r8[1] = "\\xi";

        $r7[27] = $r8;

        $r8 = newarray (java.lang.String)[2];

        $r8[0] = "\u039f";

        $r8[1] = "O";

        $r7[28] = $r8;

        $r8 = newarray (java.lang.String)[2];

        $r8[0] = "\u03bf";

        $r8[1] = "\\omicron";

        $r7[29] = $r8;

        $r8 = newarray (java.lang.String)[2];

        $r8[0] = "\u03a0";

        $r8[1] = "\\Pi";

        $r7[30] = $r8;

        $r8 = newarray (java.lang.String)[2];

        $r8[0] = "\u03c0";

        $r8[1] = "\\pi";

        $r7[31] = $r8;

        $r8 = newarray (java.lang.String)[2];

        $r8[0] = "\u03a1";

        $r8[1] = "P";

        $r7[32] = $r8;

        $r8 = newarray (java.lang.String)[2];

        $r8[0] = "\u03c1";

        $r8[1] = "\\rho";

        $r7[33] = $r8;

        $r8 = newarray (java.lang.String)[2];

        $r8[0] = "\u03a3";

        $r8[1] = "\\Sigma";

        $r7[34] = $r8;

        $r8 = newarray (java.lang.String)[2];

        $r8[0] = "\u03c3";

        $r8[1] = "\\sigma";

        $r7[35] = $r8;

        $r8 = newarray (java.lang.String)[2];

        $r8[0] = "\u03c2";

        $r8[1] = "\\varsigma";

        $r7[36] = $r8;

        $r8 = newarray (java.lang.String)[2];

        $r8[0] = "\u03a4";

        $r8[1] = "T";

        $r7[37] = $r8;

        $r8 = newarray (java.lang.String)[2];

        $r8[0] = "\u03c4";

        $r8[1] = "\\tau";

        $r7[38] = $r8;

        $r8 = newarray (java.lang.String)[2];

        $r8[0] = "\u03a5";

        $r8[1] = "\\Upsilon";

        $r7[39] = $r8;

        $r8 = newarray (java.lang.String)[2];

        $r8[0] = "\u03c5";

        $r8[1] = "\\upsilon";

        $r7[40] = $r8;

        $r8 = newarray (java.lang.String)[2];

        $r8[0] = "\u03a6";

        $r8[1] = "\\Phi";

        $r7[41] = $r8;

        $r8 = newarray (java.lang.String)[2];

        $r8[0] = "\u03c6";

        $r8[1] = "\\varphi";

        $r7[42] = $r8;

        $r8 = newarray (java.lang.String)[2];

        $r8[0] = "\u03a7";

        $r8[1] = "X";

        $r7[43] = $r8;

        $r8 = newarray (java.lang.String)[2];

        $r8[0] = "\u03c7";

        $r8[1] = "\\chi";

        $r7[44] = $r8;

        $r8 = newarray (java.lang.String)[2];

        $r8[0] = "\u03a8";

        $r8[1] = "\\Psi";

        $r7[45] = $r8;

        $r8 = newarray (java.lang.String)[2];

        $r8[0] = "\u03c8";

        $r8[1] = "\\psi";

        $r7[46] = $r8;

        $r8 = newarray (java.lang.String)[2];

        $r8[0] = "\u03a9";

        $r8[1] = "\\Omega";

        $r7[47] = $r8;

        $r8 = newarray (java.lang.String)[2];

        $r8[0] = "\u03c9";

        $r8[1] = "\\omega";

        $r7[48] = $r8;

        r0.<com.mkulesh.micromath.export.ExportToLatex: java.lang.String[][] greekTable> = $r7;

        r0.<com.mkulesh.micromath.export.ExportToLatex: android.content.Context context> = $r1;

        r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.OutputStream stream> = $r2;

        r0.<com.mkulesh.micromath.export.ExportToLatex: com.mkulesh.micromath.fman.AdapterIf adapter> = $r4;

        r0.<com.mkulesh.micromath.export.ExportToLatex: com.mkulesh.micromath.export.Exporter$Parameters exportParameters> = $r5;

        $r9 = staticinvoke <com.mkulesh.micromath.fman.FileUtils: java.lang.String getFileName(android.content.Context,android.net.Uri)>($r1, $r3);

        r0.<com.mkulesh.micromath.export.ExportToLatex: java.lang.String fileName> = $r9;

        $r9 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.lang.String fileName>;

        if $r9 != null goto label1;

        $r10 = new java.lang.Exception;

        specialinvoke $r10.<java.lang.Exception: void <init>(java.lang.String)>("file name is empty");

        throw $r10;

     label1:
        $r9 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.lang.String fileName>;

        $i0 = virtualinvoke $r9.<java.lang.String: int indexOf(java.lang.String)>(".");

        if $i0 < 0 goto label2;

        $r9 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.lang.String fileName>;

        $i1 = virtualinvoke $r9.<java.lang.String: int length()>();

        if $i0 >= $i1 goto label2;

        $r9 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.lang.String fileName>;

        $r9 = virtualinvoke $r9.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        r0.<com.mkulesh.micromath.export.ExportToLatex: java.lang.String fileName> = $r9;

     label2:
        $z0 = specialinvoke r0.<com.mkulesh.micromath.export.ExportToLatex: boolean skipImageLocale()>();

        if $z0 == 0 goto label4;

        $r9 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.lang.String fileName>;

        $i0 = virtualinvoke $r9.<java.lang.String: int length()>();

        if $i0 <= 3 goto label4;

        $r9 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.lang.String fileName>;

        $z0 = virtualinvoke $r9.<java.lang.String: boolean endsWith(java.lang.String)>("_en");

        if $z0 != 0 goto label3;

        $r9 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.lang.String fileName>;

        $z0 = virtualinvoke $r9.<java.lang.String: boolean endsWith(java.lang.String)>("_ru");

        if $z0 != 0 goto label3;

        $r9 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.lang.String fileName>;

        $z0 = virtualinvoke $r9.<java.lang.String: boolean endsWith(java.lang.String)>("_de");

        if $z0 != 0 goto label3;

        $r9 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.lang.String fileName>;

        $z0 = virtualinvoke $r9.<java.lang.String: boolean endsWith(java.lang.String)>("_br");

        if $z0 == 0 goto label4;

     label3:
        $r9 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.lang.String fileName>;

        $r11 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.lang.String fileName>;

        $i0 = virtualinvoke $r11.<java.lang.String: int length()>();

        $i0 = $i0 + -3;

        $r9 = virtualinvoke $r9.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        r0.<com.mkulesh.micromath.export.ExportToLatex: java.lang.String fileName> = $r9;

     label4:
        return;
    }
    private java.lang.String getImageDirectory()
    {
        com.mkulesh.micromath.export.ExportToLatex r0;
        com.mkulesh.micromath.export.Exporter$Parameters $r1;
        java.lang.String r2;

        r0 := @this: com.mkulesh.micromath.export.ExportToLatex;

        $r1 = r0.<com.mkulesh.micromath.export.ExportToLatex: com.mkulesh.micromath.export.Exporter$Parameters exportParameters>;

        if $r1 == null goto label1;

        $r1 = r0.<com.mkulesh.micromath.export.ExportToLatex: com.mkulesh.micromath.export.Exporter$Parameters exportParameters>;

        r2 = $r1.<com.mkulesh.micromath.export.Exporter$Parameters: java.lang.String imageDirectory>;

        return r2;

     label1:
        return "";
    }
    private boolean skipDocumentHeader()
    {
        com.mkulesh.micromath.export.ExportToLatex r0;
        com.mkulesh.micromath.export.Exporter$Parameters $r1;
        boolean $z0;

        r0 := @this: com.mkulesh.micromath.export.ExportToLatex;

        $r1 = r0.<com.mkulesh.micromath.export.ExportToLatex: com.mkulesh.micromath.export.Exporter$Parameters exportParameters>;

        if $r1 == null goto label1;

        $r1 = r0.<com.mkulesh.micromath.export.ExportToLatex: com.mkulesh.micromath.export.Exporter$Parameters exportParameters>;

        $z0 = $r1.<com.mkulesh.micromath.export.Exporter$Parameters: boolean skipDocumentHeader>;

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    private boolean skipImageLocale()
    {
        com.mkulesh.micromath.export.ExportToLatex r0;
        com.mkulesh.micromath.export.Exporter$Parameters $r1;
        boolean $z0;

        r0 := @this: com.mkulesh.micromath.export.ExportToLatex;

        $r1 = r0.<com.mkulesh.micromath.export.ExportToLatex: com.mkulesh.micromath.export.Exporter$Parameters exportParameters>;

        if $r1 == null goto label1;

        $r1 = r0.<com.mkulesh.micromath.export.ExportToLatex: com.mkulesh.micromath.export.Exporter$Parameters exportParameters>;

        $z0 = $r1.<com.mkulesh.micromath.export.Exporter$Parameters: boolean skipImageLocale>;

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    private void writeTermComparator(com.mkulesh.micromath.formula.FormulaTermComparator)
    {
        com.mkulesh.micromath.export.ExportToLatex r0;
        com.mkulesh.micromath.formula.FormulaTermComparator $r1;
        com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType $r2;
        boolean $z0;
        java.io.StringWriter $r3;
        com.mkulesh.micromath.formula.TermField $r4;
        int[] $r5;
        int $i0;

        r0 := @this: com.mkulesh.micromath.export.ExportToLatex;

        $r1 := @parameter0: com.mkulesh.micromath.formula.FormulaTermComparator;

        $r2 = virtualinvoke $r1.<com.mkulesh.micromath.formula.FormulaTermComparator: com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType getComparatorType()>();

        $z0 = virtualinvoke $r1.<com.mkulesh.micromath.formula.FormulaTermComparator: boolean isUseBrackets()>();

        if $z0 == 0 goto label01;

        $r3 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r3.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("\\left( ");

     label01:
        $r4 = virtualinvoke $r1.<com.mkulesh.micromath.formula.FormulaTermComparator: com.mkulesh.micromath.formula.TermField findTermWithKey(int)>(2131099945);

        virtualinvoke r0.<com.mkulesh.micromath.export.ExportToLatex: void writeTermField(com.mkulesh.micromath.formula.TermField)>($r4);

        $r5 = <com.mkulesh.micromath.export.ExportToLatex$1: int[] $SwitchMap$com$mkulesh$micromath$formula$FormulaTermComparator$ComparatorType>;

        $i0 = virtualinvoke $r2.<com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType: int ordinal()>();

        $i0 = $r5[$i0];

        lookupswitch($i0)
        {
            case 1: goto label03;
            case 2: goto label04;
            case 3: goto label05;
            case 4: goto label06;
            case 5: goto label07;
            case 6: goto label08;
            case 7: goto label09;
            case 8: goto label10;
            default: goto label02;
        };

     label02:
        $r4 = virtualinvoke $r1.<com.mkulesh.micromath.formula.FormulaTermComparator: com.mkulesh.micromath.formula.TermField findTermWithKey(int)>(2131099965);

        virtualinvoke r0.<com.mkulesh.micromath.export.ExportToLatex: void writeTermField(com.mkulesh.micromath.formula.TermField)>($r4);

        $z0 = virtualinvoke $r1.<com.mkulesh.micromath.formula.FormulaTermComparator: boolean isUseBrackets()>();

        if $z0 == 0 goto label11;

        $r3 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r3.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>(" \\right)");

        return;

     label03:
        $r3 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r3.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>(" and ");

        goto label02;

     label04:
        $r3 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r3.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>(" or ");

        goto label02;

     label05:
        $r3 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r3.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>(" = ");

        goto label02;

     label06:
        $r3 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r3.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>(" > ");

        goto label02;

     label07:
        $r3 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r3.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>(" \\ge ");

        goto label02;

     label08:
        $r3 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r3.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>(" < ");

        goto label02;

     label09:
        $r3 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r3.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>(" \\le ");

        goto label02;

     label10:
        $r3 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r3.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>(" \\neq ");

        goto label02;

     label11:
        return;
    }
    private void writeTermFunction(com.mkulesh.micromath.formula.FormulaTermFunction)
    {
        com.mkulesh.micromath.export.ExportToLatex r0;
        com.mkulesh.micromath.formula.FormulaTermFunction $r1;
        com.mkulesh.micromath.formula.FormulaTermFunction$FunctionType $r2, $r7;
        java.util.ArrayList $r3;
        int[] $r4;
        int $i0, $i1;
        com.mkulesh.micromath.widgets.CustomTextView $r5;
        java.lang.CharSequence $r6;
        java.io.StringWriter $r8;
        java.lang.Object $r9;
        com.mkulesh.micromath.formula.TermField $r10;

        r0 := @this: com.mkulesh.micromath.export.ExportToLatex;

        $r1 := @parameter0: com.mkulesh.micromath.formula.FormulaTermFunction;

        $r2 = virtualinvoke $r1.<com.mkulesh.micromath.formula.FormulaTermFunction: com.mkulesh.micromath.formula.FormulaTermFunction$FunctionType getFunctionType()>();

        $r3 = virtualinvoke $r1.<com.mkulesh.micromath.formula.FormulaTermFunction: java.util.ArrayList getTerms()>();

        $r4 = <com.mkulesh.micromath.export.ExportToLatex$1: int[] $SwitchMap$com$mkulesh$micromath$formula$FormulaTermFunction$FunctionType>;

        $i0 = virtualinvoke $r2.<com.mkulesh.micromath.formula.FormulaTermFunction$FunctionType: int ordinal()>();

        $i0 = $r4[$i0];

        lookupswitch($i0)
        {
            case 1: goto label06;
            case 2: goto label07;
            case 3: goto label08;
            case 4: goto label09;
            case 5: goto label10;
            case 6: goto label11;
            case 7: goto label12;
            default: goto label01;
        };

     label01:
        $r5 = virtualinvoke $r1.<com.mkulesh.micromath.formula.FormulaTermFunction: com.mkulesh.micromath.widgets.CustomTextView getFunctionTerm()>();

        if $r5 == null goto label02;

        $r5 = virtualinvoke $r1.<com.mkulesh.micromath.formula.FormulaTermFunction: com.mkulesh.micromath.widgets.CustomTextView getFunctionTerm()>();

        $r6 = virtualinvoke $r5.<com.mkulesh.micromath.widgets.CustomTextView: java.lang.CharSequence getText()>();

        specialinvoke r0.<com.mkulesh.micromath.export.ExportToLatex: void writeText(java.lang.CharSequence,boolean)>($r6, 1);

     label02:
        $r7 = <com.mkulesh.micromath.formula.FormulaTermFunction$FunctionType: com.mkulesh.micromath.formula.FormulaTermFunction$FunctionType FUNCTION_INDEX>;

        if $r2 != $r7 goto label13;

        $r8 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r8.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("_{");

     label03:
        $i0 = 0;

     label04:
        $i1 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        if $i0 >= $i1 goto label14;

        if $i0 <= 0 goto label05;

        $r8 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r8.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>(",\\, ");

     label05:
        $r9 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r10 = (com.mkulesh.micromath.formula.TermField) $r9;

        virtualinvoke r0.<com.mkulesh.micromath.export.ExportToLatex: void writeTermField(com.mkulesh.micromath.formula.TermField)>($r10);

        $i0 = $i0 + 1;

        goto label04;

     label06:
        $r8 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r8.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("\\sqrt{");

        $r9 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(0);

        $r10 = (com.mkulesh.micromath.formula.TermField) $r9;

        virtualinvoke r0.<com.mkulesh.micromath.export.ExportToLatex: void writeTermField(com.mkulesh.micromath.formula.TermField)>($r10);

        $r8 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r8.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("} ");

        return;

     label07:
        $i0 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        if $i0 != 2 goto label16;

        $r8 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r8.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("\\sqrt[\\leftroot{-3}\\uproot{3}");

        $r9 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(0);

        $r10 = (com.mkulesh.micromath.formula.TermField) $r9;

        virtualinvoke r0.<com.mkulesh.micromath.export.ExportToLatex: void writeTermField(com.mkulesh.micromath.formula.TermField)>($r10);

        $r8 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r8.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("]{");

        $r9 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(1);

        $r10 = (com.mkulesh.micromath.formula.TermField) $r9;

        virtualinvoke r0.<com.mkulesh.micromath.export.ExportToLatex: void writeTermField(com.mkulesh.micromath.formula.TermField)>($r10);

        $r8 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r8.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("} ");

        return;

     label08:
        $r8 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r8.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("\\overline{");

        $r9 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(0);

        $r10 = (com.mkulesh.micromath.formula.TermField) $r9;

        virtualinvoke r0.<com.mkulesh.micromath.export.ExportToLatex: void writeTermField(com.mkulesh.micromath.formula.TermField)>($r10);

        $r8 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r8.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("} ");

        return;

     label09:
        $r8 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r8.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("\\Re\\left( ");

        $r9 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(0);

        $r10 = (com.mkulesh.micromath.formula.TermField) $r9;

        virtualinvoke r0.<com.mkulesh.micromath.export.ExportToLatex: void writeTermField(com.mkulesh.micromath.formula.TermField)>($r10);

        $r8 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r8.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>(" \\right) ");

        return;

     label10:
        $r8 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r8.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("\\Im\\left( ");

        $r9 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(0);

        $r10 = (com.mkulesh.micromath.formula.TermField) $r9;

        virtualinvoke r0.<com.mkulesh.micromath.export.ExportToLatex: void writeTermField(com.mkulesh.micromath.formula.TermField)>($r10);

        $r8 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r8.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>(" \\right) ");

        return;

     label11:
        $r8 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r8.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>(" \\left| ");

        $r9 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(0);

        $r10 = (com.mkulesh.micromath.formula.TermField) $r9;

        virtualinvoke r0.<com.mkulesh.micromath.export.ExportToLatex: void writeTermField(com.mkulesh.micromath.formula.TermField)>($r10);

        $r8 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r8.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>(" \\right| ");

        return;

     label12:
        $r9 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(0);

        $r10 = (com.mkulesh.micromath.formula.TermField) $r9;

        virtualinvoke r0.<com.mkulesh.micromath.export.ExportToLatex: void writeTermField(com.mkulesh.micromath.formula.TermField)>($r10);

        $r8 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r8.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("! ");

        return;

     label13:
        $r8 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r8.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>(" \\left( ");

        goto label03;

     label14:
        $r7 = <com.mkulesh.micromath.formula.FormulaTermFunction$FunctionType: com.mkulesh.micromath.formula.FormulaTermFunction$FunctionType FUNCTION_INDEX>;

        if $r2 != $r7 goto label15;

        $r8 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r8.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("} ");

        return;

     label15:
        $r8 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r8.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("\\right) ");

     label16:
        return;
    }
    private void writeTermInterval(com.mkulesh.micromath.formula.FormulaTermInterval)
    {
        com.mkulesh.micromath.export.ExportToLatex r0;
        com.mkulesh.micromath.formula.FormulaTermInterval $r1;
        java.io.StringWriter $r2;
        com.mkulesh.micromath.formula.TermField $r3;

        r0 := @this: com.mkulesh.micromath.export.ExportToLatex;

        $r1 := @parameter0: com.mkulesh.micromath.formula.FormulaTermInterval;

        $r2 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r2.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("\\left[ ");

        $r3 = virtualinvoke $r1.<com.mkulesh.micromath.formula.FormulaTermInterval: com.mkulesh.micromath.formula.TermField findTermWithKey(int)>(2131099953);

        virtualinvoke r0.<com.mkulesh.micromath.export.ExportToLatex: void writeTermField(com.mkulesh.micromath.formula.TermField)>($r3);

        $r2 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r2.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>(",\\, ");

        $r3 = virtualinvoke $r1.<com.mkulesh.micromath.formula.FormulaTermInterval: com.mkulesh.micromath.formula.TermField findTermWithKey(int)>(2131099954);

        virtualinvoke r0.<com.mkulesh.micromath.export.ExportToLatex: void writeTermField(com.mkulesh.micromath.formula.TermField)>($r3);

        $r2 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r2.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>(" \\,..\\, ");

        $r3 = virtualinvoke $r1.<com.mkulesh.micromath.formula.FormulaTermInterval: com.mkulesh.micromath.formula.TermField findTermWithKey(int)>(2131099952);

        virtualinvoke r0.<com.mkulesh.micromath.export.ExportToLatex: void writeTermField(com.mkulesh.micromath.formula.TermField)>($r3);

        $r2 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r2.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>(" \\right]");

        return;
    }
    private void writeTermLoop(com.mkulesh.micromath.formula.FormulaTermLoop)
    {
        com.mkulesh.micromath.export.ExportToLatex r0;
        com.mkulesh.micromath.formula.FormulaTermLoop $r1;
        boolean $z0;
        java.io.StringWriter $r2;
        com.mkulesh.micromath.formula.FormulaTermLoop$LoopType $r3;
        com.mkulesh.micromath.formula.TermField $r4, $r5;
        int[] $r6;
        int $i0;
        java.lang.String $r7;

        r0 := @this: com.mkulesh.micromath.export.ExportToLatex;

        $r1 := @parameter0: com.mkulesh.micromath.formula.FormulaTermLoop;

        $z0 = virtualinvoke $r1.<com.mkulesh.micromath.formula.FormulaTermLoop: boolean isUseBrackets()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r2.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("\\left( ");

     label1:
        $r3 = virtualinvoke $r1.<com.mkulesh.micromath.formula.FormulaTermLoop: com.mkulesh.micromath.formula.FormulaTermLoop$LoopType getLoopType()>();

        $r4 = virtualinvoke $r1.<com.mkulesh.micromath.formula.FormulaTermLoop: com.mkulesh.micromath.formula.TermField findTermWithKey(int)>(2131099953);

        $r5 = virtualinvoke $r1.<com.mkulesh.micromath.formula.FormulaTermLoop: com.mkulesh.micromath.formula.TermField findTermWithKey(int)>(2131099952);

        $r6 = <com.mkulesh.micromath.export.ExportToLatex$1: int[] $SwitchMap$com$mkulesh$micromath$formula$FormulaTermLoop$LoopType>;

        $i0 = virtualinvoke $r3.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopType: int ordinal()>();

        $i0 = $r6[$i0];

        lookupswitch($i0)
        {
            case 1: goto label3;
            case 2: goto label4;
            case 3: goto label5;
            case 4: goto label6;
            default: goto label2;
        };

     label2:
        $z0 = virtualinvoke $r1.<com.mkulesh.micromath.formula.FormulaTermLoop: boolean isUseBrackets()>();

        if $z0 == 0 goto label7;

        $r2 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r2.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>(" \\right)");

        return;

     label3:
        $r2 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r2.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("\\frac{d}{d");

        $r7 = virtualinvoke $r1.<com.mkulesh.micromath.formula.FormulaTermLoop: java.lang.String getIndexName()>();

        specialinvoke r0.<com.mkulesh.micromath.export.ExportToLatex: void writeText(java.lang.CharSequence,boolean)>($r7, 1);

        $r2 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r2.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("} ");

        $r4 = virtualinvoke $r1.<com.mkulesh.micromath.formula.FormulaTermLoop: com.mkulesh.micromath.formula.TermField getArgumentTerm()>();

        virtualinvoke r0.<com.mkulesh.micromath.export.ExportToLatex: void writeTermField(com.mkulesh.micromath.formula.TermField)>($r4);

        goto label2;

     label4:
        $r2 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r2.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("\\displaystyle\\int_{");

        virtualinvoke r0.<com.mkulesh.micromath.export.ExportToLatex: void writeTermField(com.mkulesh.micromath.formula.TermField)>($r4);

        $r2 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r2.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("}^{");

        virtualinvoke r0.<com.mkulesh.micromath.export.ExportToLatex: void writeTermField(com.mkulesh.micromath.formula.TermField)>($r5);

        $r2 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r2.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("}");

        $r4 = virtualinvoke $r1.<com.mkulesh.micromath.formula.FormulaTermLoop: com.mkulesh.micromath.formula.TermField getArgumentTerm()>();

        virtualinvoke r0.<com.mkulesh.micromath.export.ExportToLatex: void writeTermField(com.mkulesh.micromath.formula.TermField)>($r4);

        $r2 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r2.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("\\, d");

        $r7 = virtualinvoke $r1.<com.mkulesh.micromath.formula.FormulaTermLoop: java.lang.String getIndexName()>();

        specialinvoke r0.<com.mkulesh.micromath.export.ExportToLatex: void writeText(java.lang.CharSequence,boolean)>($r7, 1);

        goto label2;

     label5:
        $r2 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r2.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("\\displaystyle\\prod_{");

        $r7 = virtualinvoke $r1.<com.mkulesh.micromath.formula.FormulaTermLoop: java.lang.String getIndexName()>();

        specialinvoke r0.<com.mkulesh.micromath.export.ExportToLatex: void writeText(java.lang.CharSequence,boolean)>($r7, 1);

        $r2 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r2.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("=");

        virtualinvoke r0.<com.mkulesh.micromath.export.ExportToLatex: void writeTermField(com.mkulesh.micromath.formula.TermField)>($r4);

        $r2 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r2.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("}^{");

        virtualinvoke r0.<com.mkulesh.micromath.export.ExportToLatex: void writeTermField(com.mkulesh.micromath.formula.TermField)>($r5);

        $r2 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r2.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("} ");

        $r4 = virtualinvoke $r1.<com.mkulesh.micromath.formula.FormulaTermLoop: com.mkulesh.micromath.formula.TermField getArgumentTerm()>();

        virtualinvoke r0.<com.mkulesh.micromath.export.ExportToLatex: void writeTermField(com.mkulesh.micromath.formula.TermField)>($r4);

        goto label2;

     label6:
        $r2 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r2.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("\\displaystyle\\sum_{");

        $r7 = virtualinvoke $r1.<com.mkulesh.micromath.formula.FormulaTermLoop: java.lang.String getIndexName()>();

        specialinvoke r0.<com.mkulesh.micromath.export.ExportToLatex: void writeText(java.lang.CharSequence,boolean)>($r7, 1);

        $r2 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r2.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("=");

        virtualinvoke r0.<com.mkulesh.micromath.export.ExportToLatex: void writeTermField(com.mkulesh.micromath.formula.TermField)>($r4);

        $r2 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r2.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("}^{");

        virtualinvoke r0.<com.mkulesh.micromath.export.ExportToLatex: void writeTermField(com.mkulesh.micromath.formula.TermField)>($r5);

        $r2 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r2.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("} ");

        $r4 = virtualinvoke $r1.<com.mkulesh.micromath.formula.FormulaTermLoop: com.mkulesh.micromath.formula.TermField getArgumentTerm()>();

        virtualinvoke r0.<com.mkulesh.micromath.export.ExportToLatex: void writeTermField(com.mkulesh.micromath.formula.TermField)>($r4);

        goto label2;

     label7:
        return;
    }
    private void writeTermOperator(com.mkulesh.micromath.formula.FormulaTermOperator)
    {
        com.mkulesh.micromath.export.ExportToLatex r0;
        com.mkulesh.micromath.formula.FormulaTermOperator $r1;
        com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType $r2, $r4;
        boolean $z0;
        java.io.StringWriter $r3;
        com.mkulesh.micromath.formula.TermField $r5;
        int[] $r6;
        int $i0;

        r0 := @this: com.mkulesh.micromath.export.ExportToLatex;

        $r1 := @parameter0: com.mkulesh.micromath.formula.FormulaTermOperator;

        $r2 = virtualinvoke $r1.<com.mkulesh.micromath.formula.FormulaTermOperator: com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType getOperatorType()>();

        $z0 = virtualinvoke $r1.<com.mkulesh.micromath.formula.FormulaTermOperator: boolean isUseBrackets()>();

        if $z0 == 0 goto label01;

        $r3 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r3.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("\\left( ");

     label01:
        $r4 = <com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType: com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType DIVIDE>;

        if $r2 != $r4 goto label06;

        $r3 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r3.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("\\frac{");

     label02:
        $r5 = virtualinvoke $r1.<com.mkulesh.micromath.formula.FormulaTermOperator: com.mkulesh.micromath.formula.TermField findTermWithKey(int)>(2131099945);

        virtualinvoke r0.<com.mkulesh.micromath.export.ExportToLatex: void writeTermField(com.mkulesh.micromath.formula.TermField)>($r5);

        $r6 = <com.mkulesh.micromath.export.ExportToLatex$1: int[] $SwitchMap$com$mkulesh$micromath$formula$FormulaTermOperator$OperatorType>;

        $i0 = virtualinvoke $r2.<com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType: int ordinal()>();

        $i0 = $r6[$i0];

        lookupswitch($i0)
        {
            case 1: goto label07;
            case 2: goto label08;
            case 3: goto label09;
            case 4: goto label10;
            case 5: goto label11;
            case 6: goto label12;
            default: goto label03;
        };

     label03:
        $r5 = virtualinvoke $r1.<com.mkulesh.micromath.formula.FormulaTermOperator: com.mkulesh.micromath.formula.TermField findTermWithKey(int)>(2131099965);

        virtualinvoke r0.<com.mkulesh.micromath.export.ExportToLatex: void writeTermField(com.mkulesh.micromath.formula.TermField)>($r5);

        $r4 = <com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType: com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType DIVIDE>;

        if $r2 == $r4 goto label04;

        $r4 = <com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType: com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType POWER>;

        if $r2 != $r4 goto label05;

     label04:
        $r3 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r3.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("}");

     label05:
        $z0 = virtualinvoke $r1.<com.mkulesh.micromath.formula.FormulaTermOperator: boolean isUseBrackets()>();

        if $z0 == 0 goto label13;

        $r3 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r3.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>(" \\right)");

        return;

     label06:
        $r4 = <com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType: com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType POWER>;

        if $r2 != $r4 goto label02;

        $r3 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r3.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("{");

        goto label02;

     label07:
        $r3 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r3.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("}{");

        goto label03;

     label08:
        $r3 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r3.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>(" / ");

        goto label03;

     label09:
        $r3 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r3.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>(" - ");

        goto label03;

     label10:
        $r3 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r3.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>(" \\cdot ");

        goto label03;

     label11:
        $r3 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r3.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>(" + ");

        goto label03;

     label12:
        $r3 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r3.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("}^{");

        goto label03;

     label13:
        return;
    }
    private void writeText(java.lang.CharSequence, boolean)
    {
        com.mkulesh.micromath.export.ExportToLatex r0;
        java.lang.CharSequence $r1;
        boolean $z0, z1;
        java.lang.String r2, $r7;
        int i0, $i1, $i3;
        char $c2, $c4;
        java.lang.Character$UnicodeBlock $r3, $r4;
        java.lang.String[][] $r5;
        java.lang.String[] $r6;
        java.lang.StringBuilder $r8;
        java.io.StringWriter $r9;

        r0 := @this: com.mkulesh.micromath.export.ExportToLatex;

        $r1 := @parameter0: java.lang.CharSequence;

        $z0 := @parameter1: boolean;

        r2 = "";

        i0 = 0;

     label01:
        $i1 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        if i0 >= $i1 goto label12;

        $c2 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>(i0);

        z1 = 0;

        $r3 = staticinvoke <java.lang.Character$UnicodeBlock: java.lang.Character$UnicodeBlock of(char)>($c2);

        $r4 = <java.lang.Character$UnicodeBlock: java.lang.Character$UnicodeBlock GREEK>;

        if $r3 != $r4 goto label10;

        $i1 = 0;

     label02:
        $r5 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.lang.String[][] greekTable>;

        $i3 = lengthof $r5;

        if $i1 >= $i3 goto label05;

        $r5 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.lang.String[][] greekTable>;

        $r6 = $r5[$i1];

        $r7 = $r6[0];

        $c4 = virtualinvoke $r7.<java.lang.String: char charAt(int)>(0);

        if $c4 != $c2 goto label09;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        if $z0 == 0 goto label07;

        r2 = "{";

     label03:
        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r5 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.lang.String[][] greekTable>;

        $r6 = $r5[$i1];

        r2 = $r6[1];

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        if $z0 == 0 goto label08;

        r2 = "}";

     label04:
        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        r2 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        z1 = 1;

     label05:
        if z1 != 0 goto label06;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        r2 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

     label06:
        i0 = i0 + 1;

        goto label01;

     label07:
        r2 = "$";

        goto label03;

     label08:
        r2 = "$";

        goto label04;

     label09:
        $i1 = $i1 + 1;

        goto label02;

     label10:
        if $c2 != 95 goto label11;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\_");

        r2 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        z1 = 1;

        goto label05;

     label11:
        if $c2 != 34 goto label05;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'\'");

        r2 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        z1 = 1;

        goto label05;

     label12:
        $r9 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r9.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>(r2);

        return;
    }
    protected void appendFormulaResult(com.mkulesh.micromath.formula.FormulaResult)
    {
        com.mkulesh.micromath.export.ExportToLatex r0;
        com.mkulesh.micromath.formula.FormulaResult $r1;
        com.mkulesh.micromath.formula.TermField $r2;
        boolean $z0;
        java.io.StringWriter $r3;
        java.util.ArrayList $r4;
        java.util.Iterator $r5;
        java.lang.Object $r6;
        int i0, $i1, $i2;
        java.lang.String $r7;

        r0 := @this: com.mkulesh.micromath.export.ExportToLatex;

        $r1 := @parameter0: com.mkulesh.micromath.formula.FormulaResult;

        $r2 = virtualinvoke $r1.<com.mkulesh.micromath.formula.FormulaResult: com.mkulesh.micromath.formula.TermField findTermWithKey(int)>(2131099945);

        virtualinvoke r0.<com.mkulesh.micromath.export.ExportToLatex: void writeTermField(com.mkulesh.micromath.formula.TermField)>($r2);

        $z0 = virtualinvoke $r1.<com.mkulesh.micromath.formula.FormulaResult: boolean isResultVisible()>();

        if $z0 == 0 goto label10;

        $r3 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r3.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>(" = ");

        $z0 = virtualinvoke $r1.<com.mkulesh.micromath.formula.FormulaResult: boolean isArrayResult()>();

        if $z0 == 0 goto label09;

        $r4 = virtualinvoke $r1.<com.mkulesh.micromath.formula.FormulaResult: java.util.ArrayList fillResultMatrixArray()>();

        if $r4 == null goto label08;

        $r3 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r3.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("\\begin{bmatrix}");

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label07;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (java.util.ArrayList) $r6;

        i0 = 0;

     label02:
        $i1 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        if i0 >= $i1 goto label01;

        $r3 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        $r7 = "...";

        $r6 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label05;

        $r7 = "\\dots";

     label03:
        virtualinvoke $r3.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>($r7);

        $r3 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        $i1 = i0 + 1;

        $i2 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        if $i1 >= $i2 goto label06;

        $r7 = "&";

     label04:
        virtualinvoke $r3.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>($r7);

        i0 = i0 + 1;

        goto label02;

     label05:
        $r6 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        $r7 = (java.lang.String) $r6;

        goto label03;

     label06:
        $r7 = "\\\\";

        goto label04;

     label07:
        $r3 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r3.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("\\end{bmatrix}");

        return;

     label08:
        $r2 = virtualinvoke $r1.<com.mkulesh.micromath.formula.FormulaResult: com.mkulesh.micromath.formula.TermField findTermWithKey(int)>(2131099965);

        virtualinvoke r0.<com.mkulesh.micromath.export.ExportToLatex: void writeTermField(com.mkulesh.micromath.formula.TermField)>($r2);

        return;

     label09:
        $r2 = virtualinvoke $r1.<com.mkulesh.micromath.formula.FormulaResult: com.mkulesh.micromath.formula.TermField findTermWithKey(int)>(2131099965);

        virtualinvoke r0.<com.mkulesh.micromath.export.ExportToLatex: void writeTermField(com.mkulesh.micromath.formula.TermField)>($r2);

     label10:
        return;
    }
    public void write(com.mkulesh.micromath.formula.FormulaListView) throws java.lang.Exception
    {
        com.mkulesh.micromath.export.ExportToLatex r0;
        com.mkulesh.micromath.formula.FormulaListView $r1;
        android.content.pm.PackageManager$NameNotFoundException r2;
        java.util.ArrayList r3;
        java.io.StringWriter $r4;
        android.content.Context $r5;
        android.content.pm.PackageManager $r6;
        java.lang.String $r7;
        android.content.pm.PackageInfo $r8;
        java.lang.StringBuilder $r9;
        android.content.res.Resources $r10;
        android.content.pm.ApplicationInfo $r11;
        int $i0, i1, $i2, $i3;
        boolean $z0;
        android.widget.LinearLayout $r12;
        android.view.View $r13;
        com.mkulesh.micromath.formula.FormulaListView$ListRow r14;
        java.lang.Object $r15;
        com.mkulesh.micromath.formula.FormulaBase $r16;
        java.io.OutputStream $r17;
        byte[] $r18;

        r0 := @this: com.mkulesh.micromath.export.ExportToLatex;

        $r1 := @parameter0: com.mkulesh.micromath.formula.FormulaListView;

        $r4 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r4.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("% This is auto-generated file: do not edit!\n");

        $r5 = r0.<com.mkulesh.micromath.export.ExportToLatex: android.content.Context context>;

     label01:
        $r6 = virtualinvoke $r5.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

     label02:
        $r5 = r0.<com.mkulesh.micromath.export.ExportToLatex: android.content.Context context>;

     label03:
        $r7 = virtualinvoke $r5.<android.content.Context: java.lang.String getPackageName()>();

        $r8 = virtualinvoke $r6.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>($r7, 0);

     label04:
        $r4 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        $r9 = new java.lang.StringBuilder;

     label05:
        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("% Exported from ");

     label06:
        $r5 = r0.<com.mkulesh.micromath.export.ExportToLatex: android.content.Context context>;

     label07:
        $r10 = virtualinvoke $r5.<android.content.Context: android.content.res.Resources getResources()>();

     label08:
        $r11 = $r8.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i0 = $r11.<android.content.pm.ApplicationInfo: int labelRes>;

     label09:
        $r7 = virtualinvoke $r10.<android.content.res.Resources: java.lang.String getString(int)>($i0);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", version ");

     label10:
        $r7 = $r8.<android.content.pm.PackageInfo: java.lang.String versionName>;

     label11:
        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r7 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>($r7);

     label12:
        $z0 = specialinvoke r0.<com.mkulesh.micromath.export.ExportToLatex: boolean skipDocumentHeader()>();

        if $z0 != 0 goto label13;

        $r4 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r4.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("\\documentclass[a4paper,10pt]{article}\n");

        $r4 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r4.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("\\usepackage[utf8]{inputenc}\n");

        $r4 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r4.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("\\usepackage{graphicx}\n");

        $r4 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r4.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("\\usepackage{amssymb}\n");

        $r4 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r4.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("\\usepackage{amsmath}\n");

        $r4 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r4.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("% If you use russian, please uncomment the line below\n");

        $r4 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r4.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("% \\usepackage[russian]{babel}\n\n");

        $r4 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r4.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("\\voffset=-20mm \\textwidth= 170mm \\textheight=255mm \\oddsidemargin=0mm\n");

        $r4 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r4.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("\\begin{document}");

     label13:
        $r12 = virtualinvoke $r1.<com.mkulesh.micromath.formula.FormulaListView: android.widget.LinearLayout getList()>();

        $i0 = virtualinvoke $r12.<android.widget.LinearLayout: int getChildCount()>();

        i1 = 0;

     label14:
        if i1 >= $i0 goto label25;

        $r12 = virtualinvoke $r1.<com.mkulesh.micromath.formula.FormulaListView: android.widget.LinearLayout getList()>();

        $r13 = virtualinvoke $r12.<android.widget.LinearLayout: android.view.View getChildAt(int)>(i1);

        $z0 = $r13 instanceof com.mkulesh.micromath.formula.FormulaListView$ListRow;

        if $z0 == 0 goto label24;

        r3 = new java.util.ArrayList;

        specialinvoke r3.<java.util.ArrayList: void <init>()>();

        r14 = (com.mkulesh.micromath.formula.FormulaListView$ListRow) $r13;

        virtualinvoke r14.<com.mkulesh.micromath.formula.FormulaListView$ListRow: void getFormulas(java.lang.Class,java.util.ArrayList)>(class "Lcom/mkulesh/micromath/formula/FormulaBase;", r3);

        $i2 = virtualinvoke r3.<java.util.ArrayList: int size()>();

        if $i2 != 0 goto label17;

     label15:
        i1 = i1 + 1;

        goto label14;

     label16:
        r2 := @caughtexception;

        $r5 = r0.<com.mkulesh.micromath.export.ExportToLatex: android.content.Context context>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("can not write package info: ");

        $r7 = virtualinvoke r2.<android.content.pm.PackageManager$NameNotFoundException: java.lang.String getLocalizedMessage()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r7 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.mkulesh.micromath.utils.ViewUtils: void Debug(java.lang.Object,java.lang.String)>($r5, $r7);

        goto label12;

     label17:
        $r4 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r4.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("\n\\begin{center}\\begin{tabular}{");

        $i2 = 0;

     label18:
        $i3 = virtualinvoke r3.<java.util.ArrayList: int size()>();

        if $i2 >= $i3 goto label19;

        $r4 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r4.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("c");

        $i2 = $i2 + 1;

        goto label18;

     label19:
        $r4 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r4.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("}");

        $i2 = 0;

     label20:
        $i3 = virtualinvoke r3.<java.util.ArrayList: int size()>();

        if $i2 >= $i3 goto label23;

        $r4 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r4.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("\n  ");

        $r15 = virtualinvoke r3.<java.util.ArrayList: java.lang.Object get(int)>($i2);

        $r16 = (com.mkulesh.micromath.formula.FormulaBase) $r15;

        virtualinvoke r0.<com.mkulesh.micromath.export.ExportToLatex: void writeFormulaBase(com.mkulesh.micromath.formula.FormulaBase,boolean)>($r16, 1);

        $i3 = virtualinvoke r3.<java.util.ArrayList: int size()>();

        $i3 = $i3 + -1;

        if $i2 >= $i3 goto label22;

        $r4 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r4.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>(" &");

     label21:
        $i2 = $i2 + 1;

        goto label20;

     label22:
        $r4 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r4.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>(" \\cr");

        goto label21;

     label23:
        $r4 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r4.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("\n\\end{tabular}\\end{center}");

        goto label15;

     label24:
        $z0 = $r13 instanceof com.mkulesh.micromath.formula.FormulaBase;

        if $z0 == 0 goto label15;

        $r16 = (com.mkulesh.micromath.formula.FormulaBase) $r13;

        virtualinvoke r0.<com.mkulesh.micromath.export.ExportToLatex: void writeFormulaBase(com.mkulesh.micromath.formula.FormulaBase,boolean)>($r16, 0);

        goto label15;

     label25:
        $z0 = specialinvoke r0.<com.mkulesh.micromath.export.ExportToLatex: boolean skipDocumentHeader()>();

        if $z0 != 0 goto label26;

        $r4 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r4.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("\n\n\\end{document}\n");

     label26:
        $r17 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.OutputStream stream>;

        $r4 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        $r7 = virtualinvoke $r4.<java.io.StringWriter: java.lang.String toString()>();

        $r18 = virtualinvoke $r7.<java.lang.String: byte[] getBytes()>();

        virtualinvoke $r17.<java.io.OutputStream: void write(byte[])>($r18);

        return;

        catch android.content.pm.PackageManager$NameNotFoundException from label01 to label02 with label16;
        catch android.content.pm.PackageManager$NameNotFoundException from label03 to label04 with label16;
        catch android.content.pm.PackageManager$NameNotFoundException from label05 to label06 with label16;
        catch android.content.pm.PackageManager$NameNotFoundException from label07 to label08 with label16;
        catch android.content.pm.PackageManager$NameNotFoundException from label09 to label10 with label16;
        catch android.content.pm.PackageManager$NameNotFoundException from label11 to label12 with label16;
    }
    protected void writeEquation(com.mkulesh.micromath.formula.Equation, boolean)
    {
        com.mkulesh.micromath.export.ExportToLatex r0;
        com.mkulesh.micromath.formula.Equation $r1;
        boolean $z0;
        java.io.StringWriter $r2;
        java.lang.String $r3;
        com.mkulesh.micromath.formula.TermField $r4;

        r0 := @this: com.mkulesh.micromath.export.ExportToLatex;

        $r1 := @parameter0: com.mkulesh.micromath.formula.Equation;

        $z0 := @parameter1: boolean;

        $r2 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        if $z0 == 0 goto label3;

        $r3 = "$";

     label1:
        virtualinvoke $r2.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>($r3);

        $r4 = virtualinvoke $r1.<com.mkulesh.micromath.formula.Equation: com.mkulesh.micromath.formula.TermField findTermWithKey(int)>(2131099945);

        virtualinvoke r0.<com.mkulesh.micromath.export.ExportToLatex: void writeTermField(com.mkulesh.micromath.formula.TermField)>($r4);

        $r2 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r2.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>(" := ");

        $r4 = virtualinvoke $r1.<com.mkulesh.micromath.formula.Equation: com.mkulesh.micromath.formula.TermField findTermWithKey(int)>(2131099965);

        virtualinvoke r0.<com.mkulesh.micromath.export.ExportToLatex: void writeTermField(com.mkulesh.micromath.formula.TermField)>($r4);

        $r2 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        if $z0 == 0 goto label4;

        $r3 = "$";

     label2:
        virtualinvoke $r2.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>($r3);

        return;

     label3:
        $r3 = "\n\\begin{center}\\begin{tabular}{c}\n  $";

        goto label1;

     label4:
        $r3 = "$\n\\end{tabular}\\end{center}";

        goto label2;
    }
    protected void writeFormulaBase(com.mkulesh.micromath.formula.FormulaBase, boolean)
    {
        com.mkulesh.micromath.export.ExportToLatex r0;
        boolean $z0, $z1;
        com.mkulesh.micromath.formula.FormulaBase r1;
        com.mkulesh.micromath.formula.Equation r2;
        com.mkulesh.micromath.formula.FormulaResult r3;
        com.mkulesh.micromath.formula.TextFragment r4;

        r0 := @this: com.mkulesh.micromath.export.ExportToLatex;

        r1 := @parameter0: com.mkulesh.micromath.formula.FormulaBase;

        $z0 := @parameter1: boolean;

        $z1 = r1 instanceof com.mkulesh.micromath.formula.Equation;

        if $z1 == 0 goto label1;

        r2 = (com.mkulesh.micromath.formula.Equation) r1;

        virtualinvoke r0.<com.mkulesh.micromath.export.ExportToLatex: void writeEquation(com.mkulesh.micromath.formula.Equation,boolean)>(r2, $z0);

        return;

     label1:
        $z1 = r1 instanceof com.mkulesh.micromath.formula.FormulaResult;

        if $z1 == 0 goto label2;

        r3 = (com.mkulesh.micromath.formula.FormulaResult) r1;

        virtualinvoke r0.<com.mkulesh.micromath.export.ExportToLatex: void writeFormulaResult(com.mkulesh.micromath.formula.FormulaResult,boolean)>(r3, $z0);

        return;

     label2:
        $z1 = r1 instanceof com.mkulesh.micromath.plots.PlotFunction;

        if $z1 != 0 goto label3;

        $z1 = r1 instanceof com.mkulesh.micromath.plots.PlotContour;

        if $z1 != 0 goto label3;

        $z1 = r1 instanceof com.mkulesh.micromath.plots.ImageFragment;

        if $z1 == 0 goto label4;

     label3:
        virtualinvoke r0.<com.mkulesh.micromath.export.ExportToLatex: void writePlotFunction(com.mkulesh.micromath.formula.FormulaBase,boolean)>(r1, $z0);

        return;

     label4:
        $z1 = r1 instanceof com.mkulesh.micromath.formula.TextFragment;

        if $z1 == 0 goto label5;

        r4 = (com.mkulesh.micromath.formula.TextFragment) r1;

        virtualinvoke r0.<com.mkulesh.micromath.export.ExportToLatex: void writeTextFragment(com.mkulesh.micromath.formula.TextFragment,boolean)>(r4, $z0);

     label5:
        return;
    }
    protected void writeFormulaResult(com.mkulesh.micromath.formula.FormulaResult, boolean)
    {
        com.mkulesh.micromath.export.ExportToLatex r0;
        com.mkulesh.micromath.formula.FormulaResult $r1;
        boolean $z0;
        java.io.StringWriter $r2;
        java.lang.String $r3;

        r0 := @this: com.mkulesh.micromath.export.ExportToLatex;

        $r1 := @parameter0: com.mkulesh.micromath.formula.FormulaResult;

        $z0 := @parameter1: boolean;

        $r2 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        if $z0 == 0 goto label3;

        $r3 = "$";

     label1:
        virtualinvoke $r2.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>($r3);

        virtualinvoke r0.<com.mkulesh.micromath.export.ExportToLatex: void appendFormulaResult(com.mkulesh.micromath.formula.FormulaResult)>($r1);

        $r2 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        if $z0 == 0 goto label4;

        $r3 = "$";

     label2:
        virtualinvoke $r2.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>($r3);

        return;

     label3:
        $r3 = "\n\\begin{center}\\begin{tabular}{c}\n  $";

        goto label1;

     label4:
        $r3 = "$\n\\end{tabular}\\end{center}";

        goto label2;
    }
    protected void writePlotFunction(com.mkulesh.micromath.formula.FormulaBase, boolean)
    {
        com.mkulesh.micromath.export.ExportToLatex r0;
        com.mkulesh.micromath.formula.FormulaBase $r1;
        boolean $z0, $z1;
        int i0, $i1;
        android.graphics.Bitmap$Config $r2;
        android.graphics.Bitmap $r3;
        android.graphics.Canvas $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6, $r16;
        com.mkulesh.micromath.fman.AdapterIf $r7;
        android.net.Uri $r8, r9;
        android.content.Context $r10;
        java.io.OutputStream $r11;
        android.graphics.Bitmap$CompressFormat $r12;
        android.content.res.Resources $r13;
        android.util.DisplayMetrics $r14;
        float $f0;
        java.io.StringWriter $r15;
        java.lang.OutOfMemoryError r17;
        java.lang.Exception r18;

        r0 := @this: com.mkulesh.micromath.export.ExportToLatex;

        $r1 := @parameter0: com.mkulesh.micromath.formula.FormulaBase;

        $z0 := @parameter1: boolean;

     label01:
        i0 = virtualinvoke $r1.<com.mkulesh.micromath.formula.FormulaBase: int getMeasuredWidth()>();

        $i1 = virtualinvoke $r1.<com.mkulesh.micromath.formula.FormulaBase: int getMeasuredHeight()>();

        $r2 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        $r3 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>(i0, $i1, $r2);

        $r4 = new android.graphics.Canvas;

        specialinvoke $r4.<android.graphics.Canvas: void <init>(android.graphics.Bitmap)>($r3);

        virtualinvoke $r1.<com.mkulesh.micromath.formula.FormulaBase: void draw(android.graphics.Canvas)>($r4);

     label02:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.lang.String fileName>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_fig");

        i0 = r0.<com.mkulesh.micromath.export.ExportToLatex: int figNumber>;

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".png");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = r0.<com.mkulesh.micromath.export.ExportToLatex: com.mkulesh.micromath.fman.AdapterIf adapter>;

        $r8 = interfaceinvoke $r7.<com.mkulesh.micromath.fman.AdapterIf: android.net.Uri getItemUri(java.lang.String)>($r6);

        r9 = $r8;

        if $r8 != null goto label03;

        $r7 = r0.<com.mkulesh.micromath.export.ExportToLatex: com.mkulesh.micromath.fman.AdapterIf adapter>;

        r9 = interfaceinvoke $r7.<com.mkulesh.micromath.fman.AdapterIf: android.net.Uri newFile(java.lang.String)>($r6);

     label03:
        staticinvoke <com.mkulesh.micromath.fman.FileUtils: android.net.Uri ensureScheme(android.net.Uri)>(r9);

        $r10 = r0.<com.mkulesh.micromath.export.ExportToLatex: android.content.Context context>;

        $r11 = staticinvoke <com.mkulesh.micromath.fman.FileUtils: java.io.OutputStream getOutputStream(android.content.Context,android.net.Uri)>($r10, r9);

     label04:
        $r12 = <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat PNG>;

     label05:
        virtualinvoke $r3.<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>($r12, 100, $r11);

        virtualinvoke $r11.<java.io.OutputStream: void flush()>();

        staticinvoke <com.mkulesh.micromath.fman.FileUtils: void closeStream(java.io.Closeable)>($r11);

        i0 = r0.<com.mkulesh.micromath.export.ExportToLatex: int figNumber>;

     label06:
        i0 = i0 + 1;

     label07:
        r0.<com.mkulesh.micromath.export.ExportToLatex: int figNumber> = i0;

     label08:
        $r10 = r0.<com.mkulesh.micromath.export.ExportToLatex: android.content.Context context>;

        $r13 = virtualinvoke $r10.<android.content.Context: android.content.res.Resources getResources()>();

        $r14 = virtualinvoke $r13.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        $f0 = $r14.<android.util.DisplayMetrics: float density>;

        $f0 = $f0 * 160.0F;

        i0 = (int) $f0;

        if $z0 != 0 goto label09;

        $r15 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r15.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("\n\\begin{center}");

     label09:
        $r15 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\begin{tabular}{c} \\includegraphics[resolution=");

        $r16 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]{");

        $r16 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r15.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>($r16);

        $r16 = specialinvoke r0.<com.mkulesh.micromath.export.ExportToLatex: java.lang.String getImageDirectory()>();

        $z1 = virtualinvoke $r16.<java.lang.String: boolean isEmpty()>();

        if $z1 != 0 goto label10;

        $r15 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r16 = specialinvoke r0.<com.mkulesh.micromath.export.ExportToLatex: java.lang.String getImageDirectory()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r16 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r15.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>($r16);

     label10:
        $r15 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("} \\end{tabular}");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r15.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>($r6);

        if $z0 != 0 goto label13;

        $r15 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r15.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("\\end{center}");

        return;

     label11:
        r17 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot save picture: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r17);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.mkulesh.micromath.utils.ViewUtils: void Debug(java.lang.Object,java.lang.String)>(r0, $r6);

        return;

     label12:
        r18 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot save picture: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r18);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.mkulesh.micromath.utils.ViewUtils: void Debug(java.lang.Object,java.lang.String)>(r0, $r6);

     label13:
        return;

        catch java.lang.OutOfMemoryError from label01 to label02 with label11;
        catch java.lang.Exception from label03 to label04 with label12;
        catch java.lang.Exception from label05 to label06 with label12;
        catch java.lang.Exception from label07 to label08 with label12;
    }
    public void writeTermField(com.mkulesh.micromath.formula.TermField)
    {
        com.mkulesh.micromath.export.ExportToLatex r0;
        com.mkulesh.micromath.formula.TermField $r1;
        boolean $z0;
        java.io.StringWriter $r2;
        java.lang.String $r3;
        com.mkulesh.micromath.formula.FormulaTerm $r4;
        com.mkulesh.micromath.formula.FormulaTermOperator r5;
        com.mkulesh.micromath.formula.FormulaTermComparator r6;
        com.mkulesh.micromath.formula.FormulaTermFunction r7;
        com.mkulesh.micromath.formula.FormulaTermInterval r8;
        com.mkulesh.micromath.formula.FormulaTermLoop r9;

        r0 := @this: com.mkulesh.micromath.export.ExportToLatex;

        $r1 := @parameter0: com.mkulesh.micromath.formula.TermField;

        if $r1 != null goto label1;

        return;

     label1:
        $z0 = virtualinvoke $r1.<com.mkulesh.micromath.formula.TermField: boolean isTerm()>();

        if $z0 != 0 goto label3;

        $z0 = virtualinvoke $r1.<com.mkulesh.micromath.formula.TermField: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        $r2 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r2.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("{\\Box}");

        return;

     label2:
        $r3 = virtualinvoke $r1.<com.mkulesh.micromath.formula.TermField: java.lang.String getText()>();

        specialinvoke r0.<com.mkulesh.micromath.export.ExportToLatex: void writeText(java.lang.CharSequence,boolean)>($r3, 1);

        return;

     label3:
        $r4 = virtualinvoke $r1.<com.mkulesh.micromath.formula.TermField: com.mkulesh.micromath.formula.FormulaTerm getTerm()>();

        $z0 = $r4 instanceof com.mkulesh.micromath.formula.FormulaTermOperator;

        if $z0 == 0 goto label4;

        r5 = (com.mkulesh.micromath.formula.FormulaTermOperator) $r4;

        specialinvoke r0.<com.mkulesh.micromath.export.ExportToLatex: void writeTermOperator(com.mkulesh.micromath.formula.FormulaTermOperator)>(r5);

        return;

     label4:
        $z0 = $r4 instanceof com.mkulesh.micromath.formula.FormulaTermComparator;

        if $z0 == 0 goto label5;

        r6 = (com.mkulesh.micromath.formula.FormulaTermComparator) $r4;

        specialinvoke r0.<com.mkulesh.micromath.export.ExportToLatex: void writeTermComparator(com.mkulesh.micromath.formula.FormulaTermComparator)>(r6);

        return;

     label5:
        $z0 = $r4 instanceof com.mkulesh.micromath.formula.FormulaTermFunction;

        if $z0 == 0 goto label6;

        r7 = (com.mkulesh.micromath.formula.FormulaTermFunction) $r4;

        specialinvoke r0.<com.mkulesh.micromath.export.ExportToLatex: void writeTermFunction(com.mkulesh.micromath.formula.FormulaTermFunction)>(r7);

        return;

     label6:
        $z0 = $r4 instanceof com.mkulesh.micromath.formula.FormulaTermInterval;

        if $z0 == 0 goto label7;

        r8 = (com.mkulesh.micromath.formula.FormulaTermInterval) $r4;

        specialinvoke r0.<com.mkulesh.micromath.export.ExportToLatex: void writeTermInterval(com.mkulesh.micromath.formula.FormulaTermInterval)>(r8);

        return;

     label7:
        $z0 = $r4 instanceof com.mkulesh.micromath.formula.FormulaTermLoop;

        if $z0 == 0 goto label8;

        r9 = (com.mkulesh.micromath.formula.FormulaTermLoop) $r4;

        specialinvoke r0.<com.mkulesh.micromath.export.ExportToLatex: void writeTermLoop(com.mkulesh.micromath.formula.FormulaTermLoop)>(r9);

     label8:
        return;
    }
    protected void writeTextFragment(com.mkulesh.micromath.formula.TextFragment, boolean)
    {
        com.mkulesh.micromath.export.ExportToLatex r0;
        com.mkulesh.micromath.formula.TextFragment $r1;
        boolean $z0, $z1;
        java.util.ArrayList $r2;
        com.mkulesh.micromath.properties.TextProperties$TextStyle $r3, $r4;
        java.io.StringWriter $r5;
        java.lang.String r6, $r10;
        int[] $r7;
        int $i0;
        java.lang.Object $r8;
        com.mkulesh.micromath.formula.TermField $r9;
        java.lang.CharSequence $r11;

        r0 := @this: com.mkulesh.micromath.export.ExportToLatex;

        $r1 := @parameter0: com.mkulesh.micromath.formula.TextFragment;

        $z0 := @parameter1: boolean;

        $r2 = virtualinvoke $r1.<com.mkulesh.micromath.formula.TextFragment: java.util.ArrayList getTerms()>();

        $z1 = virtualinvoke $r2.<java.util.ArrayList: boolean isEmpty()>();

        if $z1 != 0 goto label11;

        $z1 = r0.<com.mkulesh.micromath.export.ExportToLatex: boolean currTextNumber>;

        if $z1 == 0 goto label02;

        $r3 = virtualinvoke $r1.<com.mkulesh.micromath.formula.TextFragment: com.mkulesh.micromath.properties.TextProperties$TextStyle getTextStyle()>();

        $r4 = <com.mkulesh.micromath.properties.TextProperties$TextStyle: com.mkulesh.micromath.properties.TextProperties$TextStyle TEXT_BODY>;

        if $r3 != $r4 goto label01;

        $z1 = virtualinvoke $r1.<com.mkulesh.micromath.formula.TextFragment: boolean isNumbering()>();

        if $z1 != 0 goto label02;

     label01:
        $r5 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r5.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("\n\\end{enumerate}");

        r0.<com.mkulesh.micromath.export.ExportToLatex: boolean currTextNumber> = 0;

     label02:
        if $z0 != 0 goto label03;

        $r5 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r5.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("\n\n");

     label03:
        r6 = "";

        $r7 = <com.mkulesh.micromath.export.ExportToLatex$1: int[] $SwitchMap$com$mkulesh$micromath$properties$TextProperties$TextStyle>;

        $r3 = virtualinvoke $r1.<com.mkulesh.micromath.formula.TextFragment: com.mkulesh.micromath.properties.TextProperties$TextStyle getTextStyle()>();

        $i0 = virtualinvoke $r3.<com.mkulesh.micromath.properties.TextProperties$TextStyle: int ordinal()>();

        $i0 = $r7[$i0];

        lookupswitch($i0)
        {
            case 1: goto label05;
            case 2: goto label06;
            case 3: goto label07;
            case 4: goto label08;
            case 5: goto label09;
            default: goto label04;
        };

     label04:
        $r8 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>(0);

        $r9 = (com.mkulesh.micromath.formula.TermField) $r8;

        $r10 = virtualinvoke $r9.<com.mkulesh.micromath.formula.TermField: java.lang.String getText()>();

        specialinvoke r0.<com.mkulesh.micromath.export.ExportToLatex: void writeText(java.lang.CharSequence,boolean)>($r10, 0);

        $i0 = virtualinvoke r6.<java.lang.String: int length()>();

        if $i0 <= 0 goto label11;

        $r5 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r5.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>(r6);

        return;

     label05:
        $r5 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r5.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("\\chapter{");

        r6 = "}";

        goto label04;

     label06:
        $r5 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r5.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("\\section{");

        r6 = "}";

        goto label04;

     label07:
        $r5 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r5.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("\\subsection{");

        r6 = "}";

        goto label04;

     label08:
        $r5 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r5.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("\\subsubsection{");

        r6 = "}";

        goto label04;

     label09:
        $z0 = virtualinvoke $r1.<com.mkulesh.micromath.formula.TextFragment: boolean isNumbering()>();

        if $z0 == 0 goto label04;

        $r11 = virtualinvoke $r1.<com.mkulesh.micromath.formula.TextFragment: java.lang.CharSequence getNumber()>();

        if $r11 == null goto label04;

        $z0 = r0.<com.mkulesh.micromath.export.ExportToLatex: boolean currTextNumber>;

        if $z0 != 0 goto label10;

        $r5 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r5.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("\\begin{enumerate}\n");

     label10:
        $r5 = r0.<com.mkulesh.micromath.export.ExportToLatex: java.io.StringWriter writer>;

        virtualinvoke $r5.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("\\item ");

        r0.<com.mkulesh.micromath.export.ExportToLatex: boolean currTextNumber> = 1;

        goto label04;

     label11:
        return;
    }
