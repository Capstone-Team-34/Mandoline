com.mkulesh.micromath.export.ExportToMathJax extends com.mkulesh.micromath.export.ExportToLatex
private static final int NEW_LINE_CODE
    public void <init>(android.content.Context, java.io.OutputStream, android.net.Uri, com.mkulesh.micromath.fman.AdapterIf) throws java.lang.Exception
    {
        com.mkulesh.micromath.export.ExportToMathJax r0;
        android.content.Context $r1;
        java.io.OutputStream $r2;
        android.net.Uri $r3;
        com.mkulesh.micromath.fman.AdapterIf $r4;

        r0 := @this: com.mkulesh.micromath.export.ExportToMathJax;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: java.io.OutputStream;

        $r3 := @parameter2: android.net.Uri;

        $r4 := @parameter3: com.mkulesh.micromath.fman.AdapterIf;

        specialinvoke r0.<com.mkulesh.micromath.export.ExportToLatex: void <init>(android.content.Context,java.io.OutputStream,android.net.Uri,com.mkulesh.micromath.fman.AdapterIf,com.mkulesh.micromath.export.Exporter$Parameters)>($r1, $r2, $r3, $r4, null);

        return;
    }
    private int getParagraphOffset(java.lang.CharSequence, int)
    {
        com.mkulesh.micromath.export.ExportToMathJax r0;
        java.lang.CharSequence $r1;
        int $i0, i1, i2, $i3;
        char $c4;
        boolean $z0;

        r0 := @this: com.mkulesh.micromath.export.ExportToMathJax;

        $r1 := @parameter0: java.lang.CharSequence;

        $i0 := @parameter1: int;

        i1 = $i0;

        i2 = 0;

     label1:
        $i3 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        if i1 >= $i3 goto label4;

        $c4 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>(i1);

        if $c4 != 10 goto label3;

        i2 = i2 + 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c4);

        if $z0 != 0 goto label2;

     label4:
        if i2 <= 1 goto label5;

        if i1 <= $i0 goto label5;

        $i0 = i1 - $i0;

        $i0 = $i0 + -1;

        return $i0;

     label5:
        return -1;
    }
    private void writeHtmlText(java.lang.CharSequence, boolean)
    {
        com.mkulesh.micromath.export.ExportToMathJax r0;
        java.lang.CharSequence $r1;
        boolean $z0, z1;
        java.lang.String r2, $r7;
        int i0, $i1, $i3;
        char $c2, $c4;
        java.lang.Character$UnicodeBlock $r3, $r4;
        java.lang.String[][] $r5;
        java.lang.String[] $r6;
        java.lang.StringBuilder $r8;
        java.io.StringWriter $r9;

        r0 := @this: com.mkulesh.micromath.export.ExportToMathJax;

        $r1 := @parameter0: java.lang.CharSequence;

        $z0 := @parameter1: boolean;

        r2 = "";

        i0 = 0;

     label01:
        $i1 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        if i0 >= $i1 goto label11;

        $c2 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>(i0);

        z1 = 0;

        $r3 = staticinvoke <java.lang.Character$UnicodeBlock: java.lang.Character$UnicodeBlock of(char)>($c2);

        $r4 = <java.lang.Character$UnicodeBlock: java.lang.Character$UnicodeBlock GREEK>;

        if $r3 != $r4 goto label10;

        $i1 = 0;

     label02:
        $r5 = r0.<com.mkulesh.micromath.export.ExportToMathJax: java.lang.String[][] greekTable>;

        $i3 = lengthof $r5;

        if $i1 >= $i3 goto label05;

        $r5 = r0.<com.mkulesh.micromath.export.ExportToMathJax: java.lang.String[][] greekTable>;

        $r6 = $r5[$i1];

        $r7 = $r6[0];

        $c4 = virtualinvoke $r7.<java.lang.String: char charAt(int)>(0);

        if $c4 != $c2 goto label09;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        if $z0 == 0 goto label07;

        r2 = "{";

     label03:
        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r5 = r0.<com.mkulesh.micromath.export.ExportToMathJax: java.lang.String[][] greekTable>;

        $r6 = $r5[$i1];

        r2 = $r6[1];

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        if $z0 == 0 goto label08;

        r2 = "}";

     label04:
        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        r2 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        z1 = 1;

     label05:
        if z1 != 0 goto label06;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        r2 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

     label06:
        i0 = i0 + 1;

        goto label01;

     label07:
        r2 = "$";

        goto label03;

     label08:
        r2 = "$";

        goto label04;

     label09:
        $i1 = $i1 + 1;

        goto label02;

     label10:
        if $c2 != 10 goto label05;

        $i1 = specialinvoke r0.<com.mkulesh.micromath.export.ExportToMathJax: int getParagraphOffset(java.lang.CharSequence,int)>($r1, i0);

        if $i1 == -1 goto label05;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</p>\n\n<p>");

        r2 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        i0 = i0 + $i1;

        z1 = 1;

        goto label05;

     label11:
        $r9 = r0.<com.mkulesh.micromath.export.ExportToMathJax: java.io.StringWriter writer>;

        virtualinvoke $r9.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>(r2);

        return;
    }
    public void write(com.mkulesh.micromath.formula.FormulaListView) throws java.lang.Exception
    {
        com.mkulesh.micromath.export.ExportToMathJax r0;
        com.mkulesh.micromath.formula.FormulaListView $r1;
        java.util.ArrayList r2;
        java.io.StringWriter $r3;
        java.lang.String $r4;
        android.widget.LinearLayout $r5;
        int $i0, i1, $i2, $i3;
        android.view.View $r6;
        boolean $z0;
        com.mkulesh.micromath.formula.FormulaListView$ListRow r7;
        java.lang.Object $r8;
        com.mkulesh.micromath.formula.FormulaBase $r9;
        java.io.OutputStream $r10;
        byte[] $r11;

        r0 := @this: com.mkulesh.micromath.export.ExportToMathJax;

        $r1 := @parameter0: com.mkulesh.micromath.formula.FormulaListView;

        $r3 = r0.<com.mkulesh.micromath.export.ExportToMathJax: java.io.StringWriter writer>;

        virtualinvoke $r3.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("<!DOCTYPE html>\n");

        $r3 = r0.<com.mkulesh.micromath.export.ExportToMathJax: java.io.StringWriter writer>;

        virtualinvoke $r3.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("<html><head>\n");

        $r3 = r0.<com.mkulesh.micromath.export.ExportToMathJax: java.io.StringWriter writer>;

        virtualinvoke $r3.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n");

        $r3 = r0.<com.mkulesh.micromath.export.ExportToMathJax: java.io.StringWriter writer>;

        virtualinvoke $r3.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("<title>");

        $r3 = r0.<com.mkulesh.micromath.export.ExportToMathJax: java.io.StringWriter writer>;

        $r4 = r0.<com.mkulesh.micromath.export.ExportToMathJax: java.lang.String fileName>;

        virtualinvoke $r3.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>($r4);

        $r3 = r0.<com.mkulesh.micromath.export.ExportToMathJax: java.io.StringWriter writer>;

        virtualinvoke $r3.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("</title>\n");

        $r3 = r0.<com.mkulesh.micromath.export.ExportToMathJax: java.io.StringWriter writer>;

        virtualinvoke $r3.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("<script type=\"text/x-mathjax-config\">\n");

        $r3 = r0.<com.mkulesh.micromath.export.ExportToMathJax: java.io.StringWriter writer>;

        virtualinvoke $r3.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("  MathJax.Hub.Config({tex2jax: {inlineMath: [[\'$\',\'$\']]}});\n");

        $r3 = r0.<com.mkulesh.micromath.export.ExportToMathJax: java.io.StringWriter writer>;

        virtualinvoke $r3.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("</script>\n");

        $r3 = r0.<com.mkulesh.micromath.export.ExportToMathJax: java.io.StringWriter writer>;

        virtualinvoke $r3.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("<script type=\"text/javascript\"\n");

        $r3 = r0.<com.mkulesh.micromath.export.ExportToMathJax: java.io.StringWriter writer>;

        virtualinvoke $r3.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("  src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\">\n");

        $r3 = r0.<com.mkulesh.micromath.export.ExportToMathJax: java.io.StringWriter writer>;

        virtualinvoke $r3.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("</script>\n");

        $r3 = r0.<com.mkulesh.micromath.export.ExportToMathJax: java.io.StringWriter writer>;

        virtualinvoke $r3.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("<style>\n");

        $r3 = r0.<com.mkulesh.micromath.export.ExportToMathJax: java.io.StringWriter writer>;

        virtualinvoke $r3.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("  td { margin: 0px; padding: 0px 10px 0px 10px; }\n");

        $r3 = r0.<com.mkulesh.micromath.export.ExportToMathJax: java.io.StringWriter writer>;

        virtualinvoke $r3.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("</style>\n");

        $r3 = r0.<com.mkulesh.micromath.export.ExportToMathJax: java.io.StringWriter writer>;

        virtualinvoke $r3.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("<style>\n");

        $r3 = r0.<com.mkulesh.micromath.export.ExportToMathJax: java.io.StringWriter writer>;

        virtualinvoke $r3.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("  img { padding: 10px; display: block; max-width: 90%; }\n");

        $r3 = r0.<com.mkulesh.micromath.export.ExportToMathJax: java.io.StringWriter writer>;

        virtualinvoke $r3.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("</style>\n");

        $r3 = r0.<com.mkulesh.micromath.export.ExportToMathJax: java.io.StringWriter writer>;

        virtualinvoke $r3.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("</head><body>");

        $r5 = virtualinvoke $r1.<com.mkulesh.micromath.formula.FormulaListView: android.widget.LinearLayout getList()>();

        $i0 = virtualinvoke $r5.<android.widget.LinearLayout: int getChildCount()>();

        i1 = 0;

     label1:
        if i1 >= $i0 goto label7;

        $r5 = virtualinvoke $r1.<com.mkulesh.micromath.formula.FormulaListView: android.widget.LinearLayout getList()>();

        $r6 = virtualinvoke $r5.<android.widget.LinearLayout: android.view.View getChildAt(int)>(i1);

        $z0 = $r6 instanceof com.mkulesh.micromath.formula.FormulaListView$ListRow;

        if $z0 == 0 goto label6;

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        r7 = (com.mkulesh.micromath.formula.FormulaListView$ListRow) $r6;

        virtualinvoke r7.<com.mkulesh.micromath.formula.FormulaListView$ListRow: void getFormulas(java.lang.Class,java.util.ArrayList)>(class "Lcom/mkulesh/micromath/formula/FormulaBase;", r2);

        $i2 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        if $i2 != 0 goto label3;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r3 = r0.<com.mkulesh.micromath.export.ExportToMathJax: java.io.StringWriter writer>;

        virtualinvoke $r3.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("\n\n<table align=\"center\" border = \"0\" cellspacing=\"0\" cellpadding=\"0\"><tr>");

        $i2 = 0;

     label4:
        $i3 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        if $i2 >= $i3 goto label5;

        $r3 = r0.<com.mkulesh.micromath.export.ExportToMathJax: java.io.StringWriter writer>;

        virtualinvoke $r3.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("\n  <td>");

        $r8 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>($i2);

        $r9 = (com.mkulesh.micromath.formula.FormulaBase) $r8;

        virtualinvoke r0.<com.mkulesh.micromath.export.ExportToMathJax: void writeFormulaBase(com.mkulesh.micromath.formula.FormulaBase,boolean)>($r9, 1);

        $r3 = r0.<com.mkulesh.micromath.export.ExportToMathJax: java.io.StringWriter writer>;

        virtualinvoke $r3.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("</td>");

        $i2 = $i2 + 1;

        goto label4;

     label5:
        $r3 = r0.<com.mkulesh.micromath.export.ExportToMathJax: java.io.StringWriter writer>;

        virtualinvoke $r3.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("\n</tr></table>");

        goto label2;

     label6:
        $z0 = $r6 instanceof com.mkulesh.micromath.formula.FormulaBase;

        if $z0 == 0 goto label2;

        $r9 = (com.mkulesh.micromath.formula.FormulaBase) $r6;

        virtualinvoke r0.<com.mkulesh.micromath.export.ExportToMathJax: void writeFormulaBase(com.mkulesh.micromath.formula.FormulaBase,boolean)>($r9, 0);

        goto label2;

     label7:
        $r3 = r0.<com.mkulesh.micromath.export.ExportToMathJax: java.io.StringWriter writer>;

        virtualinvoke $r3.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("\n\n</body></html>\n");

        $r10 = r0.<com.mkulesh.micromath.export.ExportToMathJax: java.io.OutputStream stream>;

        $r3 = r0.<com.mkulesh.micromath.export.ExportToMathJax: java.io.StringWriter writer>;

        $r4 = virtualinvoke $r3.<java.io.StringWriter: java.lang.String toString()>();

        $r11 = virtualinvoke $r4.<java.lang.String: byte[] getBytes()>();

        virtualinvoke $r10.<java.io.OutputStream: void write(byte[])>($r11);

        return;
    }
    protected void writeEquation(com.mkulesh.micromath.formula.Equation, boolean)
    {
        com.mkulesh.micromath.export.ExportToMathJax r0;
        com.mkulesh.micromath.formula.Equation $r1;
        boolean $z0;
        java.io.StringWriter $r2;
        java.lang.String $r3;
        com.mkulesh.micromath.formula.TermField $r4;

        r0 := @this: com.mkulesh.micromath.export.ExportToMathJax;

        $r1 := @parameter0: com.mkulesh.micromath.formula.Equation;

        $z0 := @parameter1: boolean;

        $r2 = r0.<com.mkulesh.micromath.export.ExportToMathJax: java.io.StringWriter writer>;

        if $z0 == 0 goto label3;

        $r3 = "$$";

     label1:
        virtualinvoke $r2.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>($r3);

        $r4 = virtualinvoke $r1.<com.mkulesh.micromath.formula.Equation: com.mkulesh.micromath.formula.TermField findTermWithKey(int)>(2131099945);

        virtualinvoke r0.<com.mkulesh.micromath.export.ExportToMathJax: void writeTermField(com.mkulesh.micromath.formula.TermField)>($r4);

        $r2 = r0.<com.mkulesh.micromath.export.ExportToMathJax: java.io.StringWriter writer>;

        virtualinvoke $r2.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>(" := ");

        $r4 = virtualinvoke $r1.<com.mkulesh.micromath.formula.Equation: com.mkulesh.micromath.formula.TermField findTermWithKey(int)>(2131099965);

        virtualinvoke r0.<com.mkulesh.micromath.export.ExportToMathJax: void writeTermField(com.mkulesh.micromath.formula.TermField)>($r4);

        $r2 = r0.<com.mkulesh.micromath.export.ExportToMathJax: java.io.StringWriter writer>;

        if $z0 == 0 goto label4;

     label2:
        virtualinvoke $r2.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("$$");

        return;

     label3:
        $r3 = "\n\n$$";

        goto label1;

     label4:
        goto label2;
    }
    protected void writeFormulaResult(com.mkulesh.micromath.formula.FormulaResult, boolean)
    {
        com.mkulesh.micromath.export.ExportToMathJax r0;
        com.mkulesh.micromath.formula.FormulaResult $r1;
        boolean $z0;
        java.io.StringWriter $r2;
        java.lang.String $r3;

        r0 := @this: com.mkulesh.micromath.export.ExportToMathJax;

        $r1 := @parameter0: com.mkulesh.micromath.formula.FormulaResult;

        $z0 := @parameter1: boolean;

        $r2 = r0.<com.mkulesh.micromath.export.ExportToMathJax: java.io.StringWriter writer>;

        if $z0 == 0 goto label3;

        $r3 = "$$";

     label1:
        virtualinvoke $r2.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>($r3);

        virtualinvoke r0.<com.mkulesh.micromath.export.ExportToMathJax: void appendFormulaResult(com.mkulesh.micromath.formula.FormulaResult)>($r1);

        $r2 = r0.<com.mkulesh.micromath.export.ExportToMathJax: java.io.StringWriter writer>;

        if $z0 == 0 goto label4;

     label2:
        virtualinvoke $r2.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("$$");

        return;

     label3:
        $r3 = "\n\n$$";

        goto label1;

     label4:
        goto label2;
    }
    protected void writePlotFunction(com.mkulesh.micromath.formula.FormulaBase, boolean)
    {
        com.mkulesh.micromath.export.ExportToMathJax r0;
        com.mkulesh.micromath.formula.FormulaBase $r1;
        boolean $z0;
        int $i0, $i1;
        android.graphics.Bitmap$Config $r2;
        android.graphics.Bitmap $r3;
        android.graphics.Canvas $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;
        com.mkulesh.micromath.fman.AdapterIf $r7;
        android.net.Uri $r8, r9;
        android.content.Context $r10;
        java.io.OutputStream $r11;
        android.graphics.Bitmap$CompressFormat $r12;
        java.io.StringWriter $r13;
        java.lang.OutOfMemoryError r14;
        java.lang.Exception r15;

        r0 := @this: com.mkulesh.micromath.export.ExportToMathJax;

        $r1 := @parameter0: com.mkulesh.micromath.formula.FormulaBase;

        $z0 := @parameter1: boolean;

     label01:
        $i0 = virtualinvoke $r1.<com.mkulesh.micromath.formula.FormulaBase: int getMeasuredWidth()>();

        $i1 = virtualinvoke $r1.<com.mkulesh.micromath.formula.FormulaBase: int getMeasuredHeight()>();

        $r2 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        $r3 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>($i0, $i1, $r2);

        $r4 = new android.graphics.Canvas;

        specialinvoke $r4.<android.graphics.Canvas: void <init>(android.graphics.Bitmap)>($r3);

        virtualinvoke $r1.<com.mkulesh.micromath.formula.FormulaBase: void draw(android.graphics.Canvas)>($r4);

     label02:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = r0.<com.mkulesh.micromath.export.ExportToMathJax: java.lang.String fileName>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_fig");

        $i0 = r0.<com.mkulesh.micromath.export.ExportToMathJax: int figNumber>;

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".png");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = r0.<com.mkulesh.micromath.export.ExportToMathJax: com.mkulesh.micromath.fman.AdapterIf adapter>;

        $r8 = interfaceinvoke $r7.<com.mkulesh.micromath.fman.AdapterIf: android.net.Uri getItemUri(java.lang.String)>($r6);

        r9 = $r8;

        if $r8 != null goto label03;

        $r7 = r0.<com.mkulesh.micromath.export.ExportToMathJax: com.mkulesh.micromath.fman.AdapterIf adapter>;

        r9 = interfaceinvoke $r7.<com.mkulesh.micromath.fman.AdapterIf: android.net.Uri newFile(java.lang.String)>($r6);

     label03:
        staticinvoke <com.mkulesh.micromath.fman.FileUtils: android.net.Uri ensureScheme(android.net.Uri)>(r9);

        $r10 = r0.<com.mkulesh.micromath.export.ExportToMathJax: android.content.Context context>;

        $r11 = staticinvoke <com.mkulesh.micromath.fman.FileUtils: java.io.OutputStream getOutputStream(android.content.Context,android.net.Uri)>($r10, r9);

     label04:
        $r12 = <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat PNG>;

     label05:
        virtualinvoke $r3.<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>($r12, 100, $r11);

        virtualinvoke $r11.<java.io.OutputStream: void flush()>();

        staticinvoke <com.mkulesh.micromath.fman.FileUtils: void closeStream(java.io.Closeable)>($r11);

        $i0 = r0.<com.mkulesh.micromath.export.ExportToMathJax: int figNumber>;

     label06:
        $i0 = $i0 + 1;

     label07:
        r0.<com.mkulesh.micromath.export.ExportToMathJax: int figNumber> = $i0;

     label08:
        if $z0 != 0 goto label09;

        $r13 = r0.<com.mkulesh.micromath.export.ExportToMathJax: java.io.StringWriter writer>;

        virtualinvoke $r13.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("\n\n<center>");

     label09:
        $r13 = r0.<com.mkulesh.micromath.export.ExportToMathJax: java.io.StringWriter writer>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<img src=\"");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"alt=\"Image\">");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r13.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>($r6);

        if $z0 != 0 goto label12;

        $r13 = r0.<com.mkulesh.micromath.export.ExportToMathJax: java.io.StringWriter writer>;

        virtualinvoke $r13.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("</center>");

        return;

     label10:
        r14 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot save picture: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r14);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.mkulesh.micromath.utils.ViewUtils: void Debug(java.lang.Object,java.lang.String)>(r0, $r6);

        return;

     label11:
        r15 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot save picture: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r15);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.mkulesh.micromath.utils.ViewUtils: void Debug(java.lang.Object,java.lang.String)>(r0, $r6);

     label12:
        return;

        catch java.lang.OutOfMemoryError from label01 to label02 with label10;
        catch java.lang.Exception from label03 to label04 with label11;
        catch java.lang.Exception from label05 to label06 with label11;
        catch java.lang.Exception from label07 to label08 with label11;
    }
    protected void writeTextFragment(com.mkulesh.micromath.formula.TextFragment, boolean)
    {
        com.mkulesh.micromath.export.ExportToMathJax r0;
        com.mkulesh.micromath.formula.TextFragment $r1;
        boolean $z0, $z1;
        java.util.ArrayList $r2;
        java.lang.String r3, $r9;
        java.io.StringWriter $r4;
        int[] $r5;
        com.mkulesh.micromath.properties.TextProperties$TextStyle $r6;
        int $i0;
        java.lang.CharSequence $r7;
        java.lang.StringBuilder $r8;
        java.lang.Object $r10;
        com.mkulesh.micromath.formula.TermField $r11;

        r0 := @this: com.mkulesh.micromath.export.ExportToMathJax;

        $r1 := @parameter0: com.mkulesh.micromath.formula.TextFragment;

        $z0 := @parameter1: boolean;

        $r2 = virtualinvoke $r1.<com.mkulesh.micromath.formula.TextFragment: java.util.ArrayList getTerms()>();

        $z1 = virtualinvoke $r2.<java.util.ArrayList: boolean isEmpty()>();

        if $z1 != 0 goto label8;

        r3 = "";

        if $z0 != 0 goto label2;

        $r4 = r0.<com.mkulesh.micromath.export.ExportToMathJax: java.io.StringWriter writer>;

        virtualinvoke $r4.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("\n\n");

        $r5 = <com.mkulesh.micromath.export.ExportToMathJax$1: int[] $SwitchMap$com$mkulesh$micromath$properties$TextProperties$TextStyle>;

        $r6 = virtualinvoke $r1.<com.mkulesh.micromath.formula.TextFragment: com.mkulesh.micromath.properties.TextProperties$TextStyle getTextStyle()>();

        $i0 = virtualinvoke $r6.<com.mkulesh.micromath.properties.TextProperties$TextStyle: int ordinal()>();

        $i0 = $r5[$i0];

        lookupswitch($i0)
        {
            case 1: goto label3;
            case 2: goto label4;
            case 3: goto label5;
            case 4: goto label6;
            case 5: goto label7;
            default: goto label1;
        };

     label1:
        $r7 = virtualinvoke $r1.<com.mkulesh.micromath.formula.TextFragment: java.lang.CharSequence getNumber()>();

        $i0 = interfaceinvoke $r7.<java.lang.CharSequence: int length()>();

        if $i0 <= 0 goto label2;

        $r4 = r0.<com.mkulesh.micromath.export.ExportToMathJax: java.io.StringWriter writer>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>($r9);

     label2:
        $r10 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>(0);

        $r11 = (com.mkulesh.micromath.formula.TermField) $r10;

        $r9 = virtualinvoke $r11.<com.mkulesh.micromath.formula.TermField: java.lang.String getText()>();

        specialinvoke r0.<com.mkulesh.micromath.export.ExportToMathJax: void writeHtmlText(java.lang.CharSequence,boolean)>($r9, 0);

        if $z0 != 0 goto label8;

        $i0 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i0 <= 0 goto label8;

        $r4 = r0.<com.mkulesh.micromath.export.ExportToMathJax: java.io.StringWriter writer>;

        virtualinvoke $r4.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>(r3);

        return;

     label3:
        $r4 = r0.<com.mkulesh.micromath.export.ExportToMathJax: java.io.StringWriter writer>;

        virtualinvoke $r4.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("<h1>");

        r3 = "</h1>";

        goto label1;

     label4:
        $r4 = r0.<com.mkulesh.micromath.export.ExportToMathJax: java.io.StringWriter writer>;

        virtualinvoke $r4.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("<h2>");

        r3 = "</h2>";

        goto label1;

     label5:
        $r4 = r0.<com.mkulesh.micromath.export.ExportToMathJax: java.io.StringWriter writer>;

        virtualinvoke $r4.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("<h3>");

        r3 = "</h3>";

        goto label1;

     label6:
        $r4 = r0.<com.mkulesh.micromath.export.ExportToMathJax: java.io.StringWriter writer>;

        virtualinvoke $r4.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("<h4>");

        r3 = "</h4>";

        goto label1;

     label7:
        $r4 = r0.<com.mkulesh.micromath.export.ExportToMathJax: java.io.StringWriter writer>;

        virtualinvoke $r4.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("<p>");

        r3 = "</p>";

        goto label1;

     label8:
        return;
    }
