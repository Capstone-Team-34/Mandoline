com.mkulesh.micromath.plots.views.Palette extends java.lang.Object
private final com.mkulesh.micromath.plots.views.Palette$ColorType colorType
private final java.util.ArrayList divisionPointColors
private final java.util.ArrayList divisionPoints
private final float[] hsvConvertor
private boolean mirrorOutOfRangeComponents
    public void <init>(com.mkulesh.micromath.plots.views.Palette$ColorType)
    {
        com.mkulesh.micromath.plots.views.Palette r0;
        com.mkulesh.micromath.plots.views.Palette$ColorType $r1;
        java.util.ArrayList $r2;
        float[] $r3;
        java.lang.Double $r4;
        int[] $r5;
        int $i0;

        r0 := @this: com.mkulesh.micromath.plots.views.Palette;

        $r1 := @parameter0: com.mkulesh.micromath.plots.views.Palette$ColorType;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<com.mkulesh.micromath.plots.views.Palette: java.util.ArrayList divisionPoints> = $r2;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<com.mkulesh.micromath.plots.views.Palette: java.util.ArrayList divisionPointColors> = $r2;

        $r3 = newarray (float)[3];

        r0.<com.mkulesh.micromath.plots.views.Palette: float[] hsvConvertor> = $r3;

        r0.<com.mkulesh.micromath.plots.views.Palette: com.mkulesh.micromath.plots.views.Palette$ColorType colorType> = $r1;

        r0.<com.mkulesh.micromath.plots.views.Palette: boolean mirrorOutOfRangeComponents> = 1;

        $r2 = r0.<com.mkulesh.micromath.plots.views.Palette: java.util.ArrayList divisionPoints>;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

        $r2 = r0.<com.mkulesh.micromath.plots.views.Palette: java.util.ArrayList divisionPoints>;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

        $r5 = <com.mkulesh.micromath.plots.views.Palette$1: int[] $SwitchMap$com$mkulesh$micromath$plots$views$Palette$ColorType>;

        $i0 = virtualinvoke $r1.<com.mkulesh.micromath.plots.views.Palette$ColorType: int ordinal()>();

        $i0 = $r5[$i0];

        lookupswitch($i0)
        {
            case 1: goto label2;
            case 2: goto label3;
            default: goto label1;
        };

     label1:
        return;

     label2:
        $r2 = r0.<com.mkulesh.micromath.plots.views.Palette: java.util.ArrayList divisionPointColors>;

        $r3 = newarray (float)[3];

        $r3[0] = 0.0F;

        $r3[1] = 1.0F;

        $r3[2] = 1.0F;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        $r2 = r0.<com.mkulesh.micromath.plots.views.Palette: java.util.ArrayList divisionPointColors>;

        $r3 = newarray (float)[3];

        $r3[0] = 1.0F;

        $r3[1] = 1.0F;

        $r3[2] = 1.0F;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        return;

     label3:
        $r2 = r0.<com.mkulesh.micromath.plots.views.Palette: java.util.ArrayList divisionPointColors>;

        $r3 = newarray (float)[3];

        $r3[0] = 1.0F;

        $r3[1] = 1.0F;

        $r3[2] = 1.0F;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        $r2 = r0.<com.mkulesh.micromath.plots.views.Palette: java.util.ArrayList divisionPointColors>;

        $r3 = newarray (float)[3];

        $r3[0] = 0.0F;

        $r3[1] = 0.0F;

        $r3[2] = 0.0F;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        return;
    }
    private float clamp1(float)
    {
        com.mkulesh.micromath.plots.views.Palette r0;
        float $f0, $f1;
        com.mkulesh.micromath.plots.views.Palette$ColorType $r1, $r2;
        boolean $z0;
        double $d0;

        r0 := @this: com.mkulesh.micromath.plots.views.Palette;

        $f0 := @parameter0: float;

        $r2 = r0.<com.mkulesh.micromath.plots.views.Palette: com.mkulesh.micromath.plots.views.Palette$ColorType colorType>;

        $r1 = <com.mkulesh.micromath.plots.views.Palette$ColorType: com.mkulesh.micromath.plots.views.Palette$ColorType HSV>;

        if $r2 == $r1 goto label1;

        $z0 = r0.<com.mkulesh.micromath.plots.views.Palette: boolean mirrorOutOfRangeComponents>;

        if $z0 != 0 goto label2;

     label1:
        $d0 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double floor(double)>($d0);

        $f1 = (float) $d0;

        $f0 = $f0 - $f1;

        return $f0;

     label2:
        $f0 = specialinvoke r0.<com.mkulesh.micromath.plots.views.Palette: float clamp2(float)>($f0);

        return $f0;
    }
    private float clamp2(float)
    {
        com.mkulesh.micromath.plots.views.Palette r0;
        float $f0, $f1;
        boolean $z0;
        double $d0;
        byte $b0;

        r0 := @this: com.mkulesh.micromath.plots.views.Palette;

        $f0 := @parameter0: float;

        $z0 = r0.<com.mkulesh.micromath.plots.views.Palette: boolean mirrorOutOfRangeComponents>;

        if $z0 != 0 goto label1;

        $d0 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double floor(double)>($d0);

        $f1 = (float) $d0;

        $f0 = $f0 - $f1;

        return $f0;

     label1:
        $f1 = $f0 / 2.0F;

        $f0 = $f0 / 2.0F;

        $d0 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double floor(double)>($d0);

        $f0 = (float) $d0;

        $f0 = $f1 - $f0;

        $f0 = 2.0F * $f0;

        $b0 = $f0 cmpl 1.0F;

        if $b0 <= 0 goto label2;

        $f0 = 2.0F - $f0;

     label2:
        return $f0;
    }
    public int getColor(double, int)
    {
        com.mkulesh.micromath.plots.views.Palette r0;
        int $i0, i2, $i3, $i4;
        float f0, $f1, $f2, $f3, $f4, $f5;
        double $d0, $d1, $d2;
        byte $b1;
        java.util.ArrayList $r1;
        java.lang.Object $r2;
        java.lang.Double $r3;
        float[] r4, r5;
        int[] $r6;
        com.mkulesh.micromath.plots.views.Palette$ColorType $r7;

        r0 := @this: com.mkulesh.micromath.plots.views.Palette;

        $d0 := @parameter0: double;

        $i0 := @parameter1: int;

        $b1 = $d0 cmpg 0.0;

        if $b1 >= 0 goto label1;

        $d0 = 0.0;

     label1:
        $b1 = $d0 cmpl 1.0;

        if $b1 <= 0 goto label2;

        $d0 = 1.0;

     label2:
        i2 = 1;

     label3:
        $r1 = r0.<com.mkulesh.micromath.plots.views.Palette: java.util.ArrayList divisionPoints>;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        $r3 = (java.lang.Double) $r2;

        $d1 = virtualinvoke $r3.<java.lang.Double: double doubleValue()>();

        $b1 = $d0 cmpl $d1;

        if $b1 <= 0 goto label4;

        i2 = i2 + 1;

        goto label3;

     label4:
        $r1 = r0.<com.mkulesh.micromath.plots.views.Palette: java.util.ArrayList divisionPoints>;

        $i3 = i2 + -1;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>($i3);

        $r3 = (java.lang.Double) $r2;

        $d1 = virtualinvoke $r3.<java.lang.Double: double doubleValue()>();

        $d0 = $d0 - $d1;

        $r1 = r0.<com.mkulesh.micromath.plots.views.Palette: java.util.ArrayList divisionPoints>;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        $r3 = (java.lang.Double) $r2;

        $d1 = virtualinvoke $r3.<java.lang.Double: double doubleValue()>();

        $r1 = r0.<com.mkulesh.micromath.plots.views.Palette: java.util.ArrayList divisionPoints>;

        $i3 = i2 + -1;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>($i3);

        $r3 = (java.lang.Double) $r2;

        $d2 = virtualinvoke $r3.<java.lang.Double: double doubleValue()>();

        $d1 = $d1 - $d2;

        $d0 = $d0 / $d1;

        f0 = (float) $d0;

        $r1 = r0.<com.mkulesh.micromath.plots.views.Palette: java.util.ArrayList divisionPointColors>;

        $i3 = i2 + -1;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>($i3);

        r4 = (float[]) $r2;

        $r1 = r0.<com.mkulesh.micromath.plots.views.Palette: java.util.ArrayList divisionPointColors>;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        r5 = (float[]) $r2;

        $f1 = r4[0];

        $f2 = r5[0];

        $f3 = r4[0];

        $f2 = $f2 - $f3;

        $f2 = $f2 * f0;

        $f1 = $f1 + $f2;

        $f1 = specialinvoke r0.<com.mkulesh.micromath.plots.views.Palette: float clamp1(float)>($f1);

        $f2 = r4[1];

        $f3 = r5[1];

        $f4 = r4[1];

        $f3 = $f3 - $f4;

        $f3 = $f3 * f0;

        $f2 = $f2 + $f3;

        $f2 = specialinvoke r0.<com.mkulesh.micromath.plots.views.Palette: float clamp2(float)>($f2);

        $f3 = r4[2];

        $f4 = r5[2];

        $f5 = r4[2];

        $f4 = $f4 - $f5;

        f0 = $f4 * f0;

        f0 = $f3 + f0;

        f0 = specialinvoke r0.<com.mkulesh.micromath.plots.views.Palette: float clamp2(float)>(f0);

        $r6 = <com.mkulesh.micromath.plots.views.Palette$1: int[] $SwitchMap$com$mkulesh$micromath$plots$views$Palette$ColorType>;

        $r7 = r0.<com.mkulesh.micromath.plots.views.Palette: com.mkulesh.micromath.plots.views.Palette$ColorType colorType>;

        i2 = virtualinvoke $r7.<com.mkulesh.micromath.plots.views.Palette$ColorType: int ordinal()>();

        i2 = $r6[i2];

        lookupswitch(i2)
        {
            case 1: goto label6;
            case 2: goto label7;
            default: goto label5;
        };

     label5:
        return 0;

     label6:
        r4 = r0.<com.mkulesh.micromath.plots.views.Palette: float[] hsvConvertor>;

        $f1 = 360.0F * $f1;

        r4[0] = $f1;

        r4 = r0.<com.mkulesh.micromath.plots.views.Palette: float[] hsvConvertor>;

        r4[1] = $f2;

        r4 = r0.<com.mkulesh.micromath.plots.views.Palette: float[] hsvConvertor>;

        r4[2] = f0;

        r4 = r0.<com.mkulesh.micromath.plots.views.Palette: float[] hsvConvertor>;

        $i0 = staticinvoke <android.graphics.Color: int HSVToColor(int,float[])>($i0, r4);

        return $i0;

     label7:
        $f1 = 255.0F * $f1;

        i2 = (int) $f1;

        $f1 = 255.0F * $f2;

        $i3 = (int) $f1;

        f0 = 255.0F * f0;

        $i4 = (int) f0;

        $i0 = staticinvoke <android.graphics.Color: int argb(int,int,int,int)>($i0, i2, $i3, $i4);

        return $i0;
    }
    public com.mkulesh.micromath.plots.views.Palette$ColorType getColorType()
    {
        com.mkulesh.micromath.plots.views.Palette r0;
        com.mkulesh.micromath.plots.views.Palette$ColorType r1;

        r0 := @this: com.mkulesh.micromath.plots.views.Palette;

        r1 = r0.<com.mkulesh.micromath.plots.views.Palette: com.mkulesh.micromath.plots.views.Palette$ColorType colorType>;

        return r1;
    }
    public double getDivisionPoint(int)
    {
        com.mkulesh.micromath.plots.views.Palette r0;
        int $i0;
        java.util.ArrayList $r1;
        java.lang.Object $r2;
        java.lang.Double $r3;
        double $d0;

        r0 := @this: com.mkulesh.micromath.plots.views.Palette;

        $i0 := @parameter0: int;

        $r1 = r0.<com.mkulesh.micromath.plots.views.Palette: java.util.ArrayList divisionPoints>;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r3 = (java.lang.Double) $r2;

        $d0 = virtualinvoke $r3.<java.lang.Double: double doubleValue()>();

        return $d0;
    }
    public int getDivisionPointColor(int)
    {
        com.mkulesh.micromath.plots.views.Palette r0;
        int $i0, $i1, $i2;
        java.util.ArrayList $r1;
        java.lang.Object $r2;
        float[] r3;
        float $f0, $f1, $f2;
        int[] $r4;
        com.mkulesh.micromath.plots.views.Palette$ColorType $r5;

        r0 := @this: com.mkulesh.micromath.plots.views.Palette;

        $i0 := @parameter0: int;

        $r1 = r0.<com.mkulesh.micromath.plots.views.Palette: java.util.ArrayList divisionPointColors>;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        r3 = (float[]) $r2;

        $f0 = r3[0];

        $f1 = specialinvoke r0.<com.mkulesh.micromath.plots.views.Palette: float clamp1(float)>($f0);

        $f0 = r3[1];

        $f0 = specialinvoke r0.<com.mkulesh.micromath.plots.views.Palette: float clamp2(float)>($f0);

        $f2 = r3[2];

        $f2 = specialinvoke r0.<com.mkulesh.micromath.plots.views.Palette: float clamp2(float)>($f2);

        $r4 = <com.mkulesh.micromath.plots.views.Palette$1: int[] $SwitchMap$com$mkulesh$micromath$plots$views$Palette$ColorType>;

        $r5 = r0.<com.mkulesh.micromath.plots.views.Palette: com.mkulesh.micromath.plots.views.Palette$ColorType colorType>;

        $i0 = virtualinvoke $r5.<com.mkulesh.micromath.plots.views.Palette$ColorType: int ordinal()>();

        $i0 = $r4[$i0];

        lookupswitch($i0)
        {
            case 1: goto label2;
            case 2: goto label3;
            default: goto label1;
        };

     label1:
        return 0;

     label2:
        r3 = r0.<com.mkulesh.micromath.plots.views.Palette: float[] hsvConvertor>;

        $f1 = 360.0F * $f1;

        r3[0] = $f1;

        r3 = r0.<com.mkulesh.micromath.plots.views.Palette: float[] hsvConvertor>;

        r3[1] = $f0;

        r3 = r0.<com.mkulesh.micromath.plots.views.Palette: float[] hsvConvertor>;

        r3[2] = $f2;

        r3 = r0.<com.mkulesh.micromath.plots.views.Palette: float[] hsvConvertor>;

        $i0 = staticinvoke <android.graphics.Color: int HSVToColor(float[])>(r3);

        return $i0;

     label3:
        $f1 = 255.0F * $f1;

        $i0 = (int) $f1;

        $f0 = 255.0F * $f0;

        $i1 = (int) $f0;

        $f0 = 255.0F * $f2;

        $i2 = (int) $f0;

        $i0 = staticinvoke <android.graphics.Color: int rgb(int,int,int)>($i0, $i1, $i2);

        return $i0;
    }
    public float[] getDivisionPointColorComponents(int)
    {
        com.mkulesh.micromath.plots.views.Palette r0;
        int $i0;
        java.util.ArrayList $r1;
        java.lang.Object $r2;
        float[] $r3;

        r0 := @this: com.mkulesh.micromath.plots.views.Palette;

        $i0 := @parameter0: int;

        $r1 = r0.<com.mkulesh.micromath.plots.views.Palette: java.util.ArrayList divisionPointColors>;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r3 = (float[]) $r2;

        $r2 = virtualinvoke $r3.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (float[]) $r2;

        return $r3;
    }
    public int getDivisionPointCount()
    {
        com.mkulesh.micromath.plots.views.Palette r0;
        int $i0;
        java.util.ArrayList $r1;

        r0 := @this: com.mkulesh.micromath.plots.views.Palette;

        $r1 = r0.<com.mkulesh.micromath.plots.views.Palette: java.util.ArrayList divisionPoints>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        return $i0;
    }
    public boolean getMirrorOutOfRangeComponents()
    {
        com.mkulesh.micromath.plots.views.Palette r0;
        boolean z0;

        r0 := @this: com.mkulesh.micromath.plots.views.Palette;

        z0 = r0.<com.mkulesh.micromath.plots.views.Palette: boolean mirrorOutOfRangeComponents>;

        return z0;
    }
    public void join(int)
    {
        com.mkulesh.micromath.plots.views.Palette r0;
        int $i0, $i1;
        java.util.ArrayList $r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;

        r0 := @this: com.mkulesh.micromath.plots.views.Palette;

        $i0 := @parameter0: int;

        if $i0 <= 0 goto label1;

        $r1 = r0.<com.mkulesh.micromath.plots.views.Palette: java.util.ArrayList divisionPoints>;

        $i1 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        $i1 = $i1 + -1;

        if $i0 < $i1 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Division point index out of range: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label2:
        $r1 = r0.<com.mkulesh.micromath.plots.views.Palette: java.util.ArrayList divisionPoints>;

        virtualinvoke $r1.<java.util.ArrayList: java.lang.Object remove(int)>($i0);

        $r1 = r0.<com.mkulesh.micromath.plots.views.Palette: java.util.ArrayList divisionPointColors>;

        virtualinvoke $r1.<java.util.ArrayList: java.lang.Object remove(int)>($i0);

        return;
    }
    public void setDivisionPoint(int, double)
    {
        com.mkulesh.micromath.plots.views.Palette r0;
        int $i0, $i1;
        double $d0, $d1;
        java.util.ArrayList $r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.Object $r3;
        java.lang.Double $r4;
        byte $b2;

        r0 := @this: com.mkulesh.micromath.plots.views.Palette;

        $i0 := @parameter0: int;

        $d0 := @parameter1: double;

        if $i0 <= 0 goto label1;

        $r1 = r0.<com.mkulesh.micromath.plots.views.Palette: java.util.ArrayList divisionPoints>;

        $i1 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        $i1 = $i1 + -1;

        if $i0 < $i1 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Index out of legal range");

        throw $r2;

     label2:
        $r1 = r0.<com.mkulesh.micromath.plots.views.Palette: java.util.ArrayList divisionPoints>;

        $i1 = $i0 + -1;

        $r3 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>($i1);

        $r4 = (java.lang.Double) $r3;

        $d1 = virtualinvoke $r4.<java.lang.Double: double doubleValue()>();

        $b2 = $d0 cmpg $d1;

        if $b2 <= 0 goto label3;

        $r1 = r0.<com.mkulesh.micromath.plots.views.Palette: java.util.ArrayList divisionPoints>;

        $i1 = $i0 + 1;

        $r3 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>($i1);

        $r4 = (java.lang.Double) $r3;

        $d1 = virtualinvoke $r4.<java.lang.Double: double doubleValue()>();

        $b2 = $d0 cmpl $d1;

        if $b2 < 0 goto label4;

     label3:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Division point position outside of legal range.");

        throw $r2;

     label4:
        $r1 = r0.<com.mkulesh.micromath.plots.views.Palette: java.util.ArrayList divisionPoints>;

        $r3 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r4 = (java.lang.Double) $r3;

        $d1 = virtualinvoke $r4.<java.lang.Double: double doubleValue()>();

        $b2 = $d0 cmpl $d1;

        if $b2 == 0 goto label5;

        $r1 = r0.<com.mkulesh.micromath.plots.views.Palette: java.util.ArrayList divisionPoints>;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        virtualinvoke $r1.<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>($i0, $r4);

     label5:
        return;
    }
    public void setDivisionPointColorComponents(int, float, float, float)
    {
        com.mkulesh.micromath.plots.views.Palette r0;
        int $i0;
        float $f0, $f1, $f2, $f3;
        java.lang.Object $r1;
        java.util.ArrayList $r2;
        float[] r3;
        byte $b1;

        r0 := @this: com.mkulesh.micromath.plots.views.Palette;

        $i0 := @parameter0: int;

        $f0 := @parameter1: float;

        $f1 := @parameter2: float;

        $f2 := @parameter3: float;

        $r2 = r0.<com.mkulesh.micromath.plots.views.Palette: java.util.ArrayList divisionPointColors>;

        $r1 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        r3 = (float[]) $r1;

        $f3 = r3[0];

        $b1 = $f0 cmpl $f3;

        if $b1 != 0 goto label1;

        $f3 = r3[1];

        $b1 = $f1 cmpl $f3;

        if $b1 != 0 goto label1;

        $f3 = r3[2];

        $b1 = $f2 cmpl $f3;

        if $b1 != 0 goto label1;

        return;

     label1:
        r3[0] = $f0;

        r3[1] = $f1;

        r3[2] = $f2;

        return;
    }
    public void setMirrorOutOfRangeComponents(boolean)
    {
        com.mkulesh.micromath.plots.views.Palette r0;
        boolean $z0, $z1;

        r0 := @this: com.mkulesh.micromath.plots.views.Palette;

        $z0 := @parameter0: boolean;

        $z1 = r0.<com.mkulesh.micromath.plots.views.Palette: boolean mirrorOutOfRangeComponents>;

        if $z1 != $z0 goto label1;

        return;

     label1:
        r0.<com.mkulesh.micromath.plots.views.Palette: boolean mirrorOutOfRangeComponents> = $z0;

        return;
    }
    public int split(double)
    {
        com.mkulesh.micromath.plots.views.Palette r0;
        double $d0, $d1, $d2, $d3;
        float f0, f1, f2, $f3, $f4, $f5;
        float[] r1, r8;
        byte $b0;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        int i1, $i2;
        java.util.ArrayList $r5;
        java.lang.Object $r6;
        java.lang.Double $r7;

        r0 := @this: com.mkulesh.micromath.plots.views.Palette;

        $d0 := @parameter0: double;

        $b0 = $d0 cmpg 0.0;

        if $b0 <= 0 goto label1;

        $b0 = $d0 cmpl 1.0;

        if $b0 >= 0 goto label1;

        $z0 = staticinvoke <com.mkulesh.micromath.math.CalculatedValue: boolean isInvalidReal(double)>($d0);

        if $z0 == 0 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Division point out of range: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label2:
        i1 = 0;

     label3:
        $r5 = r0.<com.mkulesh.micromath.plots.views.Palette: java.util.ArrayList divisionPoints>;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r7 = (java.lang.Double) $r6;

        $d1 = virtualinvoke $r7.<java.lang.Double: double doubleValue()>();

        $b0 = $d0 cmpl $d1;

        if $b0 <= 0 goto label4;

        i1 = i1 + 1;

        goto label3;

     label4:
        $r5 = r0.<com.mkulesh.micromath.plots.views.Palette: java.util.ArrayList divisionPoints>;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r7 = (java.lang.Double) $r6;

        $d1 = virtualinvoke $r7.<java.lang.Double: double doubleValue()>();

        $d1 = $d0 - $d1;

        $d1 = staticinvoke <java.lang.Math: double abs(double)>($d1);

        $b0 = $d1 cmpg 1.0E-15;

        if $b0 >= 0 goto label5;

        return -1;

     label5:
        $r5 = r0.<com.mkulesh.micromath.plots.views.Palette: java.util.ArrayList divisionPoints>;

        $i2 = i1 + -1;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>($i2);

        $r7 = (java.lang.Double) $r6;

        $d1 = virtualinvoke $r7.<java.lang.Double: double doubleValue()>();

        $d1 = $d0 - $d1;

        $r5 = r0.<com.mkulesh.micromath.plots.views.Palette: java.util.ArrayList divisionPoints>;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r7 = (java.lang.Double) $r6;

        $d2 = virtualinvoke $r7.<java.lang.Double: double doubleValue()>();

        $r5 = r0.<com.mkulesh.micromath.plots.views.Palette: java.util.ArrayList divisionPoints>;

        $i2 = i1 + -1;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>($i2);

        $r7 = (java.lang.Double) $r6;

        $d3 = virtualinvoke $r7.<java.lang.Double: double doubleValue()>();

        $d2 = $d2 - $d3;

        $d1 = $d1 / $d2;

        f2 = (float) $d1;

        $r5 = r0.<com.mkulesh.micromath.plots.views.Palette: java.util.ArrayList divisionPointColors>;

        $i2 = i1 + -1;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>($i2);

        r1 = (float[]) $r6;

        $r5 = r0.<com.mkulesh.micromath.plots.views.Palette: java.util.ArrayList divisionPointColors>;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        r8 = (float[]) $r6;

        f0 = r1[0];

        f1 = r8[0];

        $f3 = r1[0];

        f1 = f1 - $f3;

        f1 = f1 * f2;

        f0 = f0 + f1;

        f1 = r1[1];

        $f3 = r8[1];

        $f4 = r1[1];

        $f3 = $f3 - $f4;

        $f3 = $f3 * f2;

        f1 = f1 + $f3;

        $f3 = r1[2];

        $f4 = r8[2];

        $f5 = r1[2];

        $f4 = $f4 - $f5;

        f2 = $f4 * f2;

        f2 = $f3 + f2;

        r1 = newarray (float)[3];

        r1[0] = f0;

        r1[1] = f1;

        r1[2] = f2;

        $r5 = r0.<com.mkulesh.micromath.plots.views.Palette: java.util.ArrayList divisionPoints>;

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        virtualinvoke $r5.<java.util.ArrayList: void add(int,java.lang.Object)>(i1, $r7);

        $r5 = r0.<com.mkulesh.micromath.plots.views.Palette: java.util.ArrayList divisionPointColors>;

        virtualinvoke $r5.<java.util.ArrayList: void add(int,java.lang.Object)>(i1, r1);

        return i1;
    }
