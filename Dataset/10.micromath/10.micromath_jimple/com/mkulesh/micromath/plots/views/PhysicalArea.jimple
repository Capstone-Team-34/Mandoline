com.mkulesh.micromath.plots.views.PhysicalArea extends java.lang.Object implements android.os.Parcelable
public static final android.os.Parcelable$Creator CREATOR
public static final double NO_ZOOM_FACTOR
private com.mkulesh.micromath.math.Vector2D dim
private com.mkulesh.micromath.math.Vector2D max
private com.mkulesh.micromath.math.Vector2D min
private double zoom
    static void <clinit>()
    {
        com.mkulesh.micromath.plots.views.PhysicalArea$1 $r0;

        $r0 = new com.mkulesh.micromath.plots.views.PhysicalArea$1;

        specialinvoke $r0.<com.mkulesh.micromath.plots.views.PhysicalArea$1: void <init>()>();

        <com.mkulesh.micromath.plots.views.PhysicalArea: android.os.Parcelable$Creator CREATOR> = $r0;

        return;
    }
    public void <init>()
    {
        com.mkulesh.micromath.plots.views.PhysicalArea r0;
        com.mkulesh.micromath.math.Vector2D $r1;

        r0 := @this: com.mkulesh.micromath.plots.views.PhysicalArea;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new com.mkulesh.micromath.math.Vector2D;

        specialinvoke $r1.<com.mkulesh.micromath.math.Vector2D: void <init>(double,double)>(-20.0, -20.0);

        r0.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D min> = $r1;

        $r1 = new com.mkulesh.micromath.math.Vector2D;

        specialinvoke $r1.<com.mkulesh.micromath.math.Vector2D: void <init>(double,double)>(20.0, 20.0);

        r0.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D max> = $r1;

        $r1 = new com.mkulesh.micromath.math.Vector2D;

        specialinvoke $r1.<com.mkulesh.micromath.math.Vector2D: void <init>(double,double)>(40.0, 40.0);

        r0.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D dim> = $r1;

        r0.<com.mkulesh.micromath.plots.views.PhysicalArea: double zoom> = 1.0;

        return;
    }
    public void <init>(android.os.Parcel)
    {
        com.mkulesh.micromath.plots.views.PhysicalArea r0;
        android.os.Parcel $r1;
        com.mkulesh.micromath.math.Vector2D $r2;

        r0 := @this: com.mkulesh.micromath.plots.views.PhysicalArea;

        $r1 := @parameter0: android.os.Parcel;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new com.mkulesh.micromath.math.Vector2D;

        specialinvoke $r2.<com.mkulesh.micromath.math.Vector2D: void <init>(double,double)>(-20.0, -20.0);

        r0.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D min> = $r2;

        $r2 = new com.mkulesh.micromath.math.Vector2D;

        specialinvoke $r2.<com.mkulesh.micromath.math.Vector2D: void <init>(double,double)>(20.0, 20.0);

        r0.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D max> = $r2;

        $r2 = new com.mkulesh.micromath.math.Vector2D;

        specialinvoke $r2.<com.mkulesh.micromath.math.Vector2D: void <init>(double,double)>(40.0, 40.0);

        r0.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D dim> = $r2;

        r0.<com.mkulesh.micromath.plots.views.PhysicalArea: double zoom> = 1.0;

        specialinvoke r0.<com.mkulesh.micromath.plots.views.PhysicalArea: void readFromParcel(android.os.Parcel)>($r1);

        return;
    }
    public void <init>(com.mkulesh.micromath.plots.views.PhysicalArea)
    {
        com.mkulesh.micromath.plots.views.PhysicalArea r0, $r1;
        com.mkulesh.micromath.math.Vector2D $r2;

        r0 := @this: com.mkulesh.micromath.plots.views.PhysicalArea;

        $r1 := @parameter0: com.mkulesh.micromath.plots.views.PhysicalArea;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new com.mkulesh.micromath.math.Vector2D;

        specialinvoke $r2.<com.mkulesh.micromath.math.Vector2D: void <init>(double,double)>(-20.0, -20.0);

        r0.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D min> = $r2;

        $r2 = new com.mkulesh.micromath.math.Vector2D;

        specialinvoke $r2.<com.mkulesh.micromath.math.Vector2D: void <init>(double,double)>(20.0, 20.0);

        r0.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D max> = $r2;

        $r2 = new com.mkulesh.micromath.math.Vector2D;

        specialinvoke $r2.<com.mkulesh.micromath.math.Vector2D: void <init>(double,double)>(40.0, 40.0);

        r0.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D dim> = $r2;

        r0.<com.mkulesh.micromath.plots.views.PhysicalArea: double zoom> = 1.0;

        virtualinvoke r0.<com.mkulesh.micromath.plots.views.PhysicalArea: void assign(com.mkulesh.micromath.plots.views.PhysicalArea)>($r1);

        return;
    }
    private void readFromParcel(android.os.Parcel)
    {
        com.mkulesh.micromath.plots.views.PhysicalArea r0;
        android.os.Parcel $r1;
        double $d0;
        com.mkulesh.micromath.math.Vector2D $r2;

        r0 := @this: com.mkulesh.micromath.plots.views.PhysicalArea;

        $r1 := @parameter0: android.os.Parcel;

        $r2 = r0.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D min>;

        virtualinvoke $r2.<com.mkulesh.micromath.math.Vector2D: void readFromParcel(android.os.Parcel)>($r1);

        $r2 = r0.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D max>;

        virtualinvoke $r2.<com.mkulesh.micromath.math.Vector2D: void readFromParcel(android.os.Parcel)>($r1);

        $r2 = r0.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D dim>;

        virtualinvoke $r2.<com.mkulesh.micromath.math.Vector2D: void readFromParcel(android.os.Parcel)>($r1);

        $d0 = virtualinvoke $r1.<android.os.Parcel: double readDouble()>();

        r0.<com.mkulesh.micromath.plots.views.PhysicalArea: double zoom> = $d0;

        return;
    }
    public void assign(com.mkulesh.micromath.plots.views.PhysicalArea)
    {
        com.mkulesh.micromath.plots.views.PhysicalArea r0, $r1;
        com.mkulesh.micromath.math.Vector2D $r2, $r3;
        double $d0;

        r0 := @this: com.mkulesh.micromath.plots.views.PhysicalArea;

        $r1 := @parameter0: com.mkulesh.micromath.plots.views.PhysicalArea;

        $r2 = r0.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D min>;

        $r3 = $r1.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D min>;

        virtualinvoke $r2.<com.mkulesh.micromath.math.Vector2D: void assign(com.mkulesh.micromath.math.Vector2D)>($r3);

        $r2 = r0.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D max>;

        $r3 = $r1.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D max>;

        virtualinvoke $r2.<com.mkulesh.micromath.math.Vector2D: void assign(com.mkulesh.micromath.math.Vector2D)>($r3);

        $r2 = r0.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D dim>;

        $r3 = $r1.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D dim>;

        virtualinvoke $r2.<com.mkulesh.micromath.math.Vector2D: void assign(com.mkulesh.micromath.math.Vector2D)>($r3);

        $d0 = $r1.<com.mkulesh.micromath.plots.views.PhysicalArea: double zoom>;

        r0.<com.mkulesh.micromath.plots.views.PhysicalArea: double zoom> = $d0;

        return;
    }
    public int describeContents()
    {
        com.mkulesh.micromath.plots.views.PhysicalArea r0;

        r0 := @this: com.mkulesh.micromath.plots.views.PhysicalArea;

        return 0;
    }
    public com.mkulesh.micromath.math.Vector2D getDim()
    {
        com.mkulesh.micromath.plots.views.PhysicalArea r0;
        com.mkulesh.micromath.math.Vector2D r1;

        r0 := @this: com.mkulesh.micromath.plots.views.PhysicalArea;

        r1 = r0.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D dim>;

        return r1;
    }
    public com.mkulesh.micromath.math.Vector2D getMax()
    {
        com.mkulesh.micromath.plots.views.PhysicalArea r0;
        com.mkulesh.micromath.math.Vector2D r1;

        r0 := @this: com.mkulesh.micromath.plots.views.PhysicalArea;

        r1 = r0.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D max>;

        return r1;
    }
    public com.mkulesh.micromath.math.Vector2D getMin()
    {
        com.mkulesh.micromath.plots.views.PhysicalArea r0;
        com.mkulesh.micromath.math.Vector2D r1;

        r0 := @this: com.mkulesh.micromath.plots.views.PhysicalArea;

        r1 = r0.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D min>;

        return r1;
    }
    public double getZoom()
    {
        com.mkulesh.micromath.plots.views.PhysicalArea r0;
        double d0;

        r0 := @this: com.mkulesh.micromath.plots.views.PhysicalArea;

        d0 = r0.<com.mkulesh.micromath.plots.views.PhysicalArea: double zoom>;

        return d0;
    }
    public boolean isInside(com.mkulesh.micromath.math.Vector2D)
    {
        com.mkulesh.micromath.plots.views.PhysicalArea r0;
        com.mkulesh.micromath.math.Vector2D $r1, $r2;
        double $d0, $d1;
        byte $b0;

        r0 := @this: com.mkulesh.micromath.plots.views.PhysicalArea;

        $r1 := @parameter0: com.mkulesh.micromath.math.Vector2D;

        $d0 = $r1.<com.mkulesh.micromath.math.Vector2D: double x>;

        $r2 = r0.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D min>;

        $d1 = $r2.<com.mkulesh.micromath.math.Vector2D: double x>;

        $b0 = $d0 cmpl $d1;

        if $b0 < 0 goto label1;

        $d0 = $r1.<com.mkulesh.micromath.math.Vector2D: double x>;

        $r2 = r0.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D max>;

        $d1 = $r2.<com.mkulesh.micromath.math.Vector2D: double x>;

        $b0 = $d0 cmpg $d1;

        if $b0 > 0 goto label1;

        $d0 = $r1.<com.mkulesh.micromath.math.Vector2D: double y>;

        $r2 = r0.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D min>;

        $d1 = $r2.<com.mkulesh.micromath.math.Vector2D: double y>;

        $b0 = $d0 cmpl $d1;

        if $b0 < 0 goto label1;

        $d0 = $r1.<com.mkulesh.micromath.math.Vector2D: double y>;

        $r1 = r0.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D max>;

        $d1 = $r1.<com.mkulesh.micromath.math.Vector2D: double y>;

        $b0 = $d0 cmpg $d1;

        if $b0 > 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean isZoomed()
    {
        com.mkulesh.micromath.plots.views.PhysicalArea r0;
        double $d0;
        byte $b0;

        r0 := @this: com.mkulesh.micromath.plots.views.PhysicalArea;

        $d0 = r0.<com.mkulesh.micromath.plots.views.PhysicalArea: double zoom>;

        $b0 = $d0 cmpl 1.0;

        if $b0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public void scale(com.mkulesh.micromath.plots.views.PhysicalArea, double, double, double, double)
    {
        com.mkulesh.micromath.plots.views.PhysicalArea r0, $r1;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        com.mkulesh.micromath.math.Vector2D $r2, $r3;

        r0 := @this: com.mkulesh.micromath.plots.views.PhysicalArea;

        $r1 := @parameter0: com.mkulesh.micromath.plots.views.PhysicalArea;

        $d0 := @parameter1: double;

        $d1 := @parameter2: double;

        $d2 := @parameter3: double;

        $d3 := @parameter4: double;

        $r2 = virtualinvoke $r1.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D getDim()>();

        $d4 = $r2.<com.mkulesh.micromath.math.Vector2D: double x>;

        $r2 = virtualinvoke r0.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D getDim()>();

        $d5 = $r2.<com.mkulesh.micromath.math.Vector2D: double x>;

        $d4 = $d4 / $d5;

        r0.<com.mkulesh.micromath.plots.views.PhysicalArea: double zoom> = $d4;

        $d4 = r0.<com.mkulesh.micromath.plots.views.PhysicalArea: double zoom>;

        $d0 = $d4 * $d0;

        r0.<com.mkulesh.micromath.plots.views.PhysicalArea: double zoom> = $d0;

        $d0 = r0.<com.mkulesh.micromath.plots.views.PhysicalArea: double zoom>;

        $d0 = staticinvoke <java.lang.Math: double min(double,double)>($d0, $d1);

        $d0 = staticinvoke <java.lang.Math: double max(double,double)>(1.0, $d0);

        r0.<com.mkulesh.micromath.plots.views.PhysicalArea: double zoom> = $d0;

        $r2 = r0.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D dim>;

        $r3 = $r1.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D dim>;

        $d0 = $r3.<com.mkulesh.micromath.math.Vector2D: double x>;

        $d1 = r0.<com.mkulesh.micromath.plots.views.PhysicalArea: double zoom>;

        $d0 = $d0 / $d1;

        $r2.<com.mkulesh.micromath.math.Vector2D: double x> = $d0;

        $r2 = r0.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D dim>;

        $r3 = $r1.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D dim>;

        $d0 = $r3.<com.mkulesh.micromath.math.Vector2D: double y>;

        $d1 = r0.<com.mkulesh.micromath.plots.views.PhysicalArea: double zoom>;

        $d0 = $d0 / $d1;

        $r2.<com.mkulesh.micromath.math.Vector2D: double y> = $d0;

        $r2 = r0.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D max>;

        $d0 = $r2.<com.mkulesh.micromath.math.Vector2D: double x>;

        $r2 = r0.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D min>;

        $d1 = $r2.<com.mkulesh.micromath.math.Vector2D: double x>;

        $d0 = $d0 + $d1;

        $d0 = $d0 / 2.0;

        $r2 = r0.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D dim>;

        $d1 = $r2.<com.mkulesh.micromath.math.Vector2D: double x>;

        $d1 = $d1 * $d2;

        $d1 = $d0 - $d1;

        $r2 = r0.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D max>;

        $d0 = $r2.<com.mkulesh.micromath.math.Vector2D: double y>;

        $r2 = r0.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D min>;

        $d2 = $r2.<com.mkulesh.micromath.math.Vector2D: double y>;

        $d0 = $d0 + $d2;

        $d0 = $d0 / 2.0;

        $r2 = r0.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D dim>;

        $d2 = $r2.<com.mkulesh.micromath.math.Vector2D: double y>;

        $d2 = $d2 * $d3;

        $d0 = $d0 - $d2;

        $r2 = $r1.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D max>;

        $d2 = $r2.<com.mkulesh.micromath.math.Vector2D: double x>;

        $r2 = r0.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D dim>;

        $d3 = $r2.<com.mkulesh.micromath.math.Vector2D: double x>;

        $d3 = $d3 / 2.0;

        $d2 = $d2 - $d3;

        $d1 = staticinvoke <java.lang.Math: double min(double,double)>($d1, $d2);

        $r2 = $r1.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D min>;

        $d2 = $r2.<com.mkulesh.micromath.math.Vector2D: double x>;

        $r2 = r0.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D dim>;

        $d3 = $r2.<com.mkulesh.micromath.math.Vector2D: double x>;

        $d3 = $d3 / 2.0;

        $d2 = $d2 + $d3;

        $d1 = staticinvoke <java.lang.Math: double max(double,double)>($d1, $d2);

        $r2 = $r1.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D max>;

        $d2 = $r2.<com.mkulesh.micromath.math.Vector2D: double y>;

        $r2 = r0.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D dim>;

        $d3 = $r2.<com.mkulesh.micromath.math.Vector2D: double y>;

        $d3 = $d3 / 2.0;

        $d2 = $d2 - $d3;

        $d0 = staticinvoke <java.lang.Math: double min(double,double)>($d0, $d2);

        $r2 = $r1.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D min>;

        $d2 = $r2.<com.mkulesh.micromath.math.Vector2D: double y>;

        $r2 = r0.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D dim>;

        $d3 = $r2.<com.mkulesh.micromath.math.Vector2D: double y>;

        $d3 = $d3 / 2.0;

        $d2 = $d2 + $d3;

        $d0 = staticinvoke <java.lang.Math: double max(double,double)>($d0, $d2);

        $r2 = r0.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D min>;

        $r3 = $r1.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D max>;

        $d2 = $r3.<com.mkulesh.micromath.math.Vector2D: double x>;

        $r3 = $r1.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D min>;

        $d3 = $r3.<com.mkulesh.micromath.math.Vector2D: double x>;

        $d2 = $d2 + $d3;

        $d2 = $d2 / 2.0;

        $r3 = r0.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D dim>;

        $d3 = $r3.<com.mkulesh.micromath.math.Vector2D: double x>;

        $d3 = $d3 / 2.0;

        $d2 = $d2 - $d3;

        $d2 = $d2 + $d1;

        $r2.<com.mkulesh.micromath.math.Vector2D: double x> = $d2;

        $r2 = r0.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D max>;

        $r3 = $r1.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D max>;

        $d2 = $r3.<com.mkulesh.micromath.math.Vector2D: double x>;

        $r3 = $r1.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D min>;

        $d3 = $r3.<com.mkulesh.micromath.math.Vector2D: double x>;

        $d2 = $d2 + $d3;

        $d2 = $d2 / 2.0;

        $r3 = r0.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D dim>;

        $d3 = $r3.<com.mkulesh.micromath.math.Vector2D: double x>;

        $d3 = $d3 / 2.0;

        $d2 = $d2 + $d3;

        $d1 = $d2 + $d1;

        $r2.<com.mkulesh.micromath.math.Vector2D: double x> = $d1;

        $r2 = r0.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D min>;

        $r3 = $r1.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D max>;

        $d1 = $r3.<com.mkulesh.micromath.math.Vector2D: double y>;

        $r3 = $r1.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D min>;

        $d2 = $r3.<com.mkulesh.micromath.math.Vector2D: double y>;

        $d1 = $d1 + $d2;

        $d1 = $d1 / 2.0;

        $r3 = r0.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D dim>;

        $d2 = $r3.<com.mkulesh.micromath.math.Vector2D: double y>;

        $d2 = $d2 / 2.0;

        $d1 = $d1 - $d2;

        $d1 = $d1 + $d0;

        $r2.<com.mkulesh.micromath.math.Vector2D: double y> = $d1;

        $r2 = r0.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D max>;

        $r3 = $r1.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D max>;

        $d1 = $r3.<com.mkulesh.micromath.math.Vector2D: double y>;

        $r3 = $r1.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D min>;

        $d2 = $r3.<com.mkulesh.micromath.math.Vector2D: double y>;

        $d1 = $d1 + $d2;

        $d1 = $d1 / 2.0;

        $r3 = r0.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D dim>;

        $d2 = $r3.<com.mkulesh.micromath.math.Vector2D: double y>;

        $d2 = $d2 / 2.0;

        $d1 = $d1 + $d2;

        $d0 = $d1 + $d0;

        $r2.<com.mkulesh.micromath.math.Vector2D: double y> = $d0;

        return;
    }
    public void set(double, double, double, double)
    {
        com.mkulesh.micromath.plots.views.PhysicalArea r0;
        double $d0, $d1, $d2, $d3;
        com.mkulesh.micromath.math.Vector2D $r1;

        r0 := @this: com.mkulesh.micromath.plots.views.PhysicalArea;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $d3 := @parameter3: double;

        $r1 = new com.mkulesh.micromath.math.Vector2D;

        specialinvoke $r1.<com.mkulesh.micromath.math.Vector2D: void <init>(double,double)>($d0, $d2);

        r0.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D min> = $r1;

        $r1 = new com.mkulesh.micromath.math.Vector2D;

        specialinvoke $r1.<com.mkulesh.micromath.math.Vector2D: void <init>(double,double)>($d1, $d3);

        r0.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D max> = $r1;

        $r1 = new com.mkulesh.micromath.math.Vector2D;

        $d0 = $d1 - $d0;

        $d1 = $d3 - $d2;

        specialinvoke $r1.<com.mkulesh.micromath.math.Vector2D: void <init>(double,double)>($d0, $d1);

        r0.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D dim> = $r1;

        return;
    }
    public void toScreenPoint(com.mkulesh.micromath.math.Vector2D, android.graphics.Rect, android.graphics.Point)
    {
        com.mkulesh.micromath.plots.views.PhysicalArea r0;
        com.mkulesh.micromath.math.Vector2D $r1, $r4;
        android.graphics.Rect $r2;
        android.graphics.Point $r3;
        int $i0, $i1;
        double $d0, $d1, $d2;

        r0 := @this: com.mkulesh.micromath.plots.views.PhysicalArea;

        $r1 := @parameter0: com.mkulesh.micromath.math.Vector2D;

        $r2 := @parameter1: android.graphics.Rect;

        $r3 := @parameter2: android.graphics.Point;

        $i0 = $r2.<android.graphics.Rect: int left>;

        $i1 = virtualinvoke $r2.<android.graphics.Rect: int width()>();

        $d0 = (double) $i1;

        $d1 = $r1.<com.mkulesh.micromath.math.Vector2D: double x>;

        $r4 = r0.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D min>;

        $d2 = $r4.<com.mkulesh.micromath.math.Vector2D: double x>;

        $d1 = $d1 - $d2;

        $d0 = $d0 * $d1;

        $r4 = r0.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D dim>;

        $d1 = $r4.<com.mkulesh.micromath.math.Vector2D: double x>;

        $d0 = $d0 / $d1;

        $i1 = (int) $d0;

        $i0 = $i0 + $i1;

        $r3.<android.graphics.Point: int x> = $i0;

        $i0 = $r2.<android.graphics.Rect: int bottom>;

        $i1 = virtualinvoke $r2.<android.graphics.Rect: int height()>();

        $d0 = (double) $i1;

        $d1 = $r1.<com.mkulesh.micromath.math.Vector2D: double y>;

        $r1 = r0.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D min>;

        $d2 = $r1.<com.mkulesh.micromath.math.Vector2D: double y>;

        $d1 = $d1 - $d2;

        $d0 = $d0 * $d1;

        $r1 = r0.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D dim>;

        $d1 = $r1.<com.mkulesh.micromath.math.Vector2D: double y>;

        $d0 = $d0 / $d1;

        $i1 = (int) $d0;

        $i0 = $i0 - $i1;

        $r3.<android.graphics.Point: int y> = $i0;

        return;
    }
    public int toScreenXLength(double, android.graphics.Rect)
    {
        com.mkulesh.micromath.plots.views.PhysicalArea r0;
        double $d0, $d1;
        android.graphics.Rect $r1;
        int $i0;
        com.mkulesh.micromath.math.Vector2D $r2;

        r0 := @this: com.mkulesh.micromath.plots.views.PhysicalArea;

        $d0 := @parameter0: double;

        $r1 := @parameter1: android.graphics.Rect;

        $i0 = virtualinvoke $r1.<android.graphics.Rect: int width()>();

        $d1 = (double) $i0;

        $d0 = $d1 * $d0;

        $r2 = r0.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D dim>;

        $d1 = $r2.<com.mkulesh.micromath.math.Vector2D: double x>;

        $d0 = $d0 / $d1;

        $i0 = (int) $d0;

        return $i0;
    }
    public int toScreenYLength(double, android.graphics.Rect)
    {
        com.mkulesh.micromath.plots.views.PhysicalArea r0;
        double $d0, $d1;
        android.graphics.Rect $r1;
        int $i0;
        com.mkulesh.micromath.math.Vector2D $r2;

        r0 := @this: com.mkulesh.micromath.plots.views.PhysicalArea;

        $d0 := @parameter0: double;

        $r1 := @parameter1: android.graphics.Rect;

        $i0 = virtualinvoke $r1.<android.graphics.Rect: int height()>();

        $d1 = (double) $i0;

        $d0 = $d1 * $d0;

        $r2 = r0.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D dim>;

        $d1 = $r2.<com.mkulesh.micromath.math.Vector2D: double y>;

        $d0 = $d0 / $d1;

        $i0 = (int) $d0;

        return $i0;
    }
    public java.lang.String toString()
    {
        com.mkulesh.micromath.plots.views.PhysicalArea r0;
        java.lang.StringBuilder $r1;
        com.mkulesh.micromath.math.Vector2D $r2;
        double $d0;
        java.lang.String $r3;

        r0 := @this: com.mkulesh.micromath.plots.views.PhysicalArea;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("min [");

        $r2 = r0.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D min>;

        $d0 = $r2.<com.mkulesh.micromath.math.Vector2D: double x>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r2 = r0.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D min>;

        $d0 = $r2.<com.mkulesh.micromath.math.Vector2D: double y>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] max [");

        $r2 = r0.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D max>;

        $d0 = $r2.<com.mkulesh.micromath.math.Vector2D: double x>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r2 = r0.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D max>;

        $d0 = $r2.<com.mkulesh.micromath.math.Vector2D: double y>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] dim [");

        $r2 = r0.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D dim>;

        $d0 = $r2.<com.mkulesh.micromath.math.Vector2D: double x>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r2 = r0.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D dim>;

        $d0 = $r2.<com.mkulesh.micromath.math.Vector2D: double y>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }
    public void writeToParcel(android.os.Parcel, int)
    {
        com.mkulesh.micromath.plots.views.PhysicalArea r0;
        android.os.Parcel $r1;
        int $i0;
        com.mkulesh.micromath.math.Vector2D $r2;
        double $d0;

        r0 := @this: com.mkulesh.micromath.plots.views.PhysicalArea;

        $r1 := @parameter0: android.os.Parcel;

        $i0 := @parameter1: int;

        $r2 = r0.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D min>;

        virtualinvoke $r2.<com.mkulesh.micromath.math.Vector2D: void writeToParcel(android.os.Parcel,int)>($r1, $i0);

        $r2 = r0.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D max>;

        virtualinvoke $r2.<com.mkulesh.micromath.math.Vector2D: void writeToParcel(android.os.Parcel,int)>($r1, $i0);

        $r2 = r0.<com.mkulesh.micromath.plots.views.PhysicalArea: com.mkulesh.micromath.math.Vector2D dim>;

        virtualinvoke $r2.<com.mkulesh.micromath.math.Vector2D: void writeToParcel(android.os.Parcel,int)>($r1, $i0);

        $d0 = r0.<com.mkulesh.micromath.plots.views.PhysicalArea: double zoom>;

        virtualinvoke $r1.<android.os.Parcel: void writeDouble(double)>($d0);

        return;
    }
