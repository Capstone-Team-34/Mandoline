com.mkulesh.micromath.formula.BracketParser extends java.lang.Object
public static final int ARRAY_BRACKETS
public static final int[] END_BRACKET_IDS
public static final int FUNCTION_BRACKETS
public static final int[] START_BRACKET_IDS
public java.util.ArrayList arguments
private int bracketsIndex
public int errorId
public java.lang.String name
    static void <clinit>()
    {
        int[] $r0;

        $r0 = newarray (int)[2];

        $r0[0] = 2131099939;

        $r0[1] = 2131099940;

        <com.mkulesh.micromath.formula.BracketParser: int[] START_BRACKET_IDS> = $r0;

        $r0 = newarray (int)[2];

        $r0[0] = 2131099934;

        $r0[1] = 2131099935;

        <com.mkulesh.micromath.formula.BracketParser: int[] END_BRACKET_IDS> = $r0;

        return;
    }
    public void <init>()
    {
        com.mkulesh.micromath.formula.BracketParser r0;

        r0 := @this: com.mkulesh.micromath.formula.BracketParser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.mkulesh.micromath.formula.BracketParser: int errorId> = -1;

        r0.<com.mkulesh.micromath.formula.BracketParser: int bracketsIndex> = -1;

        return;
    }
    private java.util.ArrayList getArcs(java.lang.String)
    {
        com.mkulesh.micromath.formula.BracketParser r0;
        java.lang.IndexOutOfBoundsException r1;
        java.lang.String $r2, $r6;
        java.util.ArrayList r3;
        int $i0, $i1;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;

        r0 := @this: com.mkulesh.micromath.formula.BracketParser;

        $r2 := @parameter0: java.lang.String;

        r3 = new java.util.ArrayList;

        specialinvoke r3.<java.util.ArrayList: void <init>()>();

     label01:
        $i0 = virtualinvoke $r2.<java.lang.String: int indexOf(java.lang.String)>(",");

        if $i0 >= 0 goto label04;

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

        $r4 = virtualinvoke r3.<java.util.ArrayList: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r2 = (java.lang.String) $r5;

        if $r2 == null goto label03;

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 != 0 goto label09;

     label03:
        r0.<com.mkulesh.micromath.formula.BracketParser: int errorId> = 2131099778;

        return null;

     label04:
        $r6 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $r6 = virtualinvoke $r6.<java.lang.String: java.lang.String trim()>();

        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

     label05:
        $i0 = $i0 + 1;

     label06:
        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>($i0, $i1);

     label07:
        goto label01;

     label08:
        r1 := @caughtexception;

        r0.<com.mkulesh.micromath.formula.BracketParser: int errorId> = 2131099793;

        return null;

     label09:
        $z0 = specialinvoke r0.<com.mkulesh.micromath.formula.BracketParser: boolean isAlphaOrDigit(java.lang.String)>($r2);

        if $z0 != 0 goto label02;

        r0.<com.mkulesh.micromath.formula.BracketParser: int errorId> = 2131099788;

        return null;

     label10:
        $z0 = virtualinvoke r3.<java.util.ArrayList: boolean isEmpty()>();

        if $z0 == 0 goto label11;

        r3 = null;

     label11:
        return r3;

        catch java.lang.IndexOutOfBoundsException from label04 to label05 with label08;
        catch java.lang.IndexOutOfBoundsException from label06 to label07 with label08;
    }
    private boolean isAlphaOrDigit(java.lang.String)
    {
        com.mkulesh.micromath.formula.BracketParser r0;
        java.lang.String $r1;
        char c0;
        int $i1, $i2;
        char[] $r2;
        boolean $z0;

        r0 := @this: com.mkulesh.micromath.formula.BracketParser;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke $r1.<java.lang.String: char[] toCharArray()>();

        $i1 = lengthof $r2;

        $i2 = 0;

     label1:
        if $i2 >= $i1 goto label3;

        c0 = $r2[$i2];

        $z0 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(char)>(c0);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $i2 = $i2 + 1;

        goto label1;

     label3:
        return 1;
    }
    private com.mkulesh.micromath.formula.BracketParser$ParsingResult setError(int)
    {
        com.mkulesh.micromath.formula.BracketParser r0;
        int $i0;
        com.mkulesh.micromath.formula.BracketParser$ParsingResult r1;

        r0 := @this: com.mkulesh.micromath.formula.BracketParser;

        $i0 := @parameter0: int;

        r0.<com.mkulesh.micromath.formula.BracketParser: int errorId> = $i0;

        r0.<com.mkulesh.micromath.formula.BracketParser: int bracketsIndex> = -1;

        r0.<com.mkulesh.micromath.formula.BracketParser: java.lang.String name> = null;

        r0.<com.mkulesh.micromath.formula.BracketParser: java.util.ArrayList arguments> = null;

        r1 = <com.mkulesh.micromath.formula.BracketParser$ParsingResult: com.mkulesh.micromath.formula.BracketParser$ParsingResult PARSED_WITH_ERROR>;

        return r1;
    }
    public boolean isArray()
    {
        com.mkulesh.micromath.formula.BracketParser r0;
        int $i0;

        r0 := @this: com.mkulesh.micromath.formula.BracketParser;

        $i0 = r0.<com.mkulesh.micromath.formula.BracketParser: int bracketsIndex>;

        if $i0 != 1 goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean isFunction()
    {
        com.mkulesh.micromath.formula.BracketParser r0;
        int $i0;

        r0 := @this: com.mkulesh.micromath.formula.BracketParser;

        $i0 = r0.<com.mkulesh.micromath.formula.BracketParser: int bracketsIndex>;

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public com.mkulesh.micromath.formula.BracketParser$ParsingResult parse(java.lang.String, android.content.res.Resources)
    {
        com.mkulesh.micromath.formula.BracketParser r0;
        java.lang.String $r1, $r5, $r7;
        android.content.res.Resources $r2;
        java.lang.IndexOutOfBoundsException r3;
        int i0, $i1, $i2, $i3;
        int[] $r4;
        com.mkulesh.micromath.formula.BracketParser$ParsingResult $r6;
        boolean $z0;
        java.util.ArrayList $r8;

        r0 := @this: com.mkulesh.micromath.formula.BracketParser;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: android.content.res.Resources;

        specialinvoke r0.<com.mkulesh.micromath.formula.BracketParser: com.mkulesh.micromath.formula.BracketParser$ParsingResult setError(int)>(-1);

        r0.<com.mkulesh.micromath.formula.BracketParser: int bracketsIndex> = -1;

        i0 = 0;

     label01:
        $r4 = <com.mkulesh.micromath.formula.BracketParser: int[] START_BRACKET_IDS>;

        $i1 = lengthof $r4;

        if i0 >= $i1 goto label18;

        $r4 = <com.mkulesh.micromath.formula.BracketParser: int[] START_BRACKET_IDS>;

        $i1 = $r4[i0];

        $r5 = virtualinvoke $r2.<android.content.res.Resources: java.lang.String getString(int)>($i1);

        $i1 = virtualinvoke $r1.<java.lang.String: int indexOf(java.lang.String)>($r5);

        $r4 = <com.mkulesh.micromath.formula.BracketParser: int[] END_BRACKET_IDS>;

        $i2 = $r4[i0];

        $r5 = virtualinvoke $r2.<android.content.res.Resources: java.lang.String getString(int)>($i2);

        $i2 = virtualinvoke $r1.<java.lang.String: int indexOf(java.lang.String)>($r5);

        if $i1 >= 0 goto label03;

        if $i2 >= 0 goto label03;

     label02:
        i0 = i0 + 1;

        goto label01;

     label03:
        $i3 = r0.<com.mkulesh.micromath.formula.BracketParser: int bracketsIndex>;

        if $i3 == -1 goto label04;

        $r6 = specialinvoke r0.<com.mkulesh.micromath.formula.BracketParser: com.mkulesh.micromath.formula.BracketParser$ParsingResult setError(int)>(2131099792);

        return $r6;

     label04:
        if $i1 < 0 goto label05;

        if $i2 < 0 goto label06;

     label05:
        if $i1 >= 0 goto label07;

        if $i2 < 0 goto label07;

     label06:
        $r6 = specialinvoke r0.<com.mkulesh.micromath.formula.BracketParser: com.mkulesh.micromath.formula.BracketParser$ParsingResult setError(int)>(2131099775);

        return $r6;

     label07:
        if $i1 <= $i2 goto label08;

        $r6 = specialinvoke r0.<com.mkulesh.micromath.formula.BracketParser: com.mkulesh.micromath.formula.BracketParser$ParsingResult setError(int)>(2131099792);

        return $r6;

     label08:
        $r5 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        $r5 = virtualinvoke $r5.<java.lang.String: java.lang.String trim()>();

     label09:
        r0.<com.mkulesh.micromath.formula.BracketParser: java.lang.String name> = $r5;

        $i1 = $i1 + 1;

     label10:
        $r5 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>($i1, $i2);

        $r5 = virtualinvoke $r5.<java.lang.String: java.lang.String trim()>();

     label11:
        $i1 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i1 != 0 goto label13;

        $r6 = specialinvoke r0.<com.mkulesh.micromath.formula.BracketParser: com.mkulesh.micromath.formula.BracketParser$ParsingResult setError(int)>(2131099779);

        return $r6;

     label12:
        r3 := @caughtexception;

        $r6 = specialinvoke r0.<com.mkulesh.micromath.formula.BracketParser: com.mkulesh.micromath.formula.BracketParser$ParsingResult setError(int)>(2131099792);

        return $r6;

     label13:
        $r7 = r0.<com.mkulesh.micromath.formula.BracketParser: java.lang.String name>;

        if $r7 == null goto label14;

        $r7 = r0.<com.mkulesh.micromath.formula.BracketParser: java.lang.String name>;

        $i1 = virtualinvoke $r7.<java.lang.String: int length()>();

        if $i1 == 0 goto label14;

        $r7 = r0.<com.mkulesh.micromath.formula.BracketParser: java.lang.String name>;

        $z0 = specialinvoke r0.<com.mkulesh.micromath.formula.BracketParser: boolean isAlphaOrDigit(java.lang.String)>($r7);

        if $z0 != 0 goto label15;

     label14:
        $r6 = specialinvoke r0.<com.mkulesh.micromath.formula.BracketParser: com.mkulesh.micromath.formula.BracketParser$ParsingResult setError(int)>(2131099794);

        return $r6;

     label15:
        $r8 = specialinvoke r0.<com.mkulesh.micromath.formula.BracketParser: java.util.ArrayList getArcs(java.lang.String)>($r5);

        r0.<com.mkulesh.micromath.formula.BracketParser: java.util.ArrayList arguments> = $r8;

        $r8 = r0.<com.mkulesh.micromath.formula.BracketParser: java.util.ArrayList arguments>;

        if $r8 == null goto label16;

        $r8 = r0.<com.mkulesh.micromath.formula.BracketParser: java.util.ArrayList arguments>;

        $z0 = virtualinvoke $r8.<java.util.ArrayList: boolean isEmpty()>();

        if $z0 == 0 goto label17;

     label16:
        i0 = r0.<com.mkulesh.micromath.formula.BracketParser: int errorId>;

        $r6 = specialinvoke r0.<com.mkulesh.micromath.formula.BracketParser: com.mkulesh.micromath.formula.BracketParser$ParsingResult setError(int)>(i0);

        return $r6;

     label17:
        r0.<com.mkulesh.micromath.formula.BracketParser: int bracketsIndex> = i0;

        goto label02;

     label18:
        i0 = r0.<com.mkulesh.micromath.formula.BracketParser: int bracketsIndex>;

        if i0 != -1 goto label19;

        $r6 = <com.mkulesh.micromath.formula.BracketParser$ParsingResult: com.mkulesh.micromath.formula.BracketParser$ParsingResult NO_BRACKETS>;

        return $r6;

     label19:
        $r6 = <com.mkulesh.micromath.formula.BracketParser$ParsingResult: com.mkulesh.micromath.formula.BracketParser$ParsingResult PARSED_SUCCESSFULLY>;

        return $r6;

        catch java.lang.IndexOutOfBoundsException from label08 to label09 with label12;
        catch java.lang.IndexOutOfBoundsException from label10 to label11 with label12;
    }
