com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType extends java.lang.Enum
private static final com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType[] $VALUES
public static final enum com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType DIVIDE
public static final enum com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType DIVIDE_SLASH
public static final enum com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType MINUS
public static final enum com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType MULT
public static final enum com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType PLUS
public static final enum com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType POWER
private final int descriptionId
private final int imageId
private final int symbolId
    static void <clinit>()
    {
        com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType $r0;
        com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType[] $r1;

        $r0 = new com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType;

        specialinvoke $r0.<com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType: void <init>(java.lang.String,int,int,int,int)>("PLUS", 0, 2131099960, 2130837743, 2131099902);

        <com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType: com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType PLUS> = $r0;

        $r0 = new com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType;

        specialinvoke $r0.<com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType: void <init>(java.lang.String,int,int,int,int)>("MINUS", 1, 2131099958, 2130837741, 2131099900);

        <com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType: com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType MINUS> = $r0;

        $r0 = new com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType;

        specialinvoke $r0.<com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType: void <init>(java.lang.String,int,int,int,int)>("MULT", 2, 2131099959, 2130837742, 2131099901);

        <com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType: com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType MULT> = $r0;

        $r0 = new com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType;

        specialinvoke $r0.<com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType: void <init>(java.lang.String,int,int,int,int)>("DIVIDE", 3, 2131099955, 2130837739, 2131099898);

        <com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType: com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType DIVIDE> = $r0;

        $r0 = new com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType;

        specialinvoke $r0.<com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType: void <init>(java.lang.String,int,int,int,int)>("DIVIDE_SLASH", 4, 2131099956, 2130837740, 2131099899);

        <com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType: com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType DIVIDE_SLASH> = $r0;

        $r0 = new com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType;

        specialinvoke $r0.<com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType: void <init>(java.lang.String,int,int,int,int)>("POWER", 5, 2131099961, 2130837744, 2131099903);

        <com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType: com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType POWER> = $r0;

        $r1 = newarray (com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType)[6];

        $r0 = <com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType: com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType PLUS>;

        $r1[0] = $r0;

        $r0 = <com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType: com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType MINUS>;

        $r1[1] = $r0;

        $r0 = <com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType: com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType MULT>;

        $r1[2] = $r0;

        $r0 = <com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType: com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType DIVIDE>;

        $r1[3] = $r0;

        $r0 = <com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType: com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType DIVIDE_SLASH>;

        $r1[4] = $r0;

        $r0 = <com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType: com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType POWER>;

        $r1[5] = $r0;

        <com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType: com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType[] $VALUES> = $r1;

        return;
    }
    private void <init>(java.lang.String, int, int, int, int)
    {
        com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType r0;
        java.lang.String $r1;
        int $i0, $i1, $i2, $i3;

        r0 := @this: com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0);

        r0.<com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType: int symbolId> = $i1;

        r0.<com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType: int imageId> = $i2;

        r0.<com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType: int descriptionId> = $i3;

        return;
    }
    public static com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType valueOf(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.Enum $r1;
        com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lcom/mkulesh/micromath/formula/FormulaTermOperator$OperatorType;", $r0);

        $r2 = (com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType) $r1;

        return $r2;
    }
    public static com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType[] values()
    {
        java.lang.Object $r0;
        com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType[] $r1;

        $r1 = <com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType: com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType[] $VALUES>;

        $r0 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r1 = (com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType[]) $r0;

        return $r1;
    }
    public int getDescriptionId()
    {
        com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType r0;
        int i0;

        r0 := @this: com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType;

        i0 = r0.<com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType: int descriptionId>;

        return i0;
    }
    public int getImageId()
    {
        com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType r0;
        int i0;

        r0 := @this: com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType;

        i0 = r0.<com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType: int imageId>;

        return i0;
    }
    public int getSymbolId()
    {
        com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType r0;
        int i0;

        r0 := @this: com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType;

        i0 = r0.<com.mkulesh.micromath.formula.FormulaTermOperator$OperatorType: int symbolId>;

        return i0;
    }
