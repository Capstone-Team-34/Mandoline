com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType extends java.lang.Enum
private static final com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType[] $VALUES
public static final enum com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType COMPARATOR_AND
public static final enum com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType COMPARATOR_OR
public static final enum com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType EQUAL
public static final enum com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType GREATER
public static final enum com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType GREATER_EQUAL
public static final enum com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType LESS
public static final enum com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType LESS_EQUAL
public static final enum com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType NOT_EQUAL
private final int descriptionId
private final int imageId
private final int symbolId
    static void <clinit>()
    {
        com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType $r0;
        com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType[] $r1;

        $r0 = new com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType;

        specialinvoke $r0.<com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType: void <init>(java.lang.String,int,int,int,int)>("EQUAL", 0, 2131099924, 2130837696, 2131099849);

        <com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType: com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType EQUAL> = $r0;

        $r0 = new com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType;

        specialinvoke $r0.<com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType: void <init>(java.lang.String,int,int,int,int)>("NOT_EQUAL", 1, 2131099929, 2130837701, 2131099854);

        <com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType: com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType NOT_EQUAL> = $r0;

        $r0 = new com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType;

        specialinvoke $r0.<com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType: void <init>(java.lang.String,int,int,int,int)>("LESS", 2, 2131099927, 2130837699, 2131099852);

        <com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType: com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType LESS> = $r0;

        $r0 = new com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType;

        specialinvoke $r0.<com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType: void <init>(java.lang.String,int,int,int,int)>("LESS_EQUAL", 3, 2131099928, 2130837700, 2131099853);

        <com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType: com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType LESS_EQUAL> = $r0;

        $r0 = new com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType;

        specialinvoke $r0.<com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType: void <init>(java.lang.String,int,int,int,int)>("GREATER", 4, 2131099925, 2130837697, 2131099850);

        <com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType: com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType GREATER> = $r0;

        $r0 = new com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType;

        specialinvoke $r0.<com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType: void <init>(java.lang.String,int,int,int,int)>("GREATER_EQUAL", 5, 2131099926, 2130837698, 2131099851);

        <com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType: com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType GREATER_EQUAL> = $r0;

        $r0 = new com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType;

        specialinvoke $r0.<com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType: void <init>(java.lang.String,int,int,int,int)>("COMPARATOR_AND", 6, 2131099923, 2130837695, 2131099847);

        <com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType: com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType COMPARATOR_AND> = $r0;

        $r0 = new com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType;

        specialinvoke $r0.<com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType: void <init>(java.lang.String,int,int,int,int)>("COMPARATOR_OR", 7, 2131099930, 2130837702, 2131099855);

        <com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType: com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType COMPARATOR_OR> = $r0;

        $r1 = newarray (com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType)[8];

        $r0 = <com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType: com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType EQUAL>;

        $r1[0] = $r0;

        $r0 = <com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType: com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType NOT_EQUAL>;

        $r1[1] = $r0;

        $r0 = <com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType: com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType LESS>;

        $r1[2] = $r0;

        $r0 = <com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType: com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType LESS_EQUAL>;

        $r1[3] = $r0;

        $r0 = <com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType: com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType GREATER>;

        $r1[4] = $r0;

        $r0 = <com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType: com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType GREATER_EQUAL>;

        $r1[5] = $r0;

        $r0 = <com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType: com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType COMPARATOR_AND>;

        $r1[6] = $r0;

        $r0 = <com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType: com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType COMPARATOR_OR>;

        $r1[7] = $r0;

        <com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType: com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType[] $VALUES> = $r1;

        return;
    }
    private void <init>(java.lang.String, int, int, int, int)
    {
        com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType r0;
        java.lang.String $r1;
        int $i0, $i1, $i2, $i3;

        r0 := @this: com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0);

        r0.<com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType: int symbolId> = $i1;

        r0.<com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType: int imageId> = $i2;

        r0.<com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType: int descriptionId> = $i3;

        return;
    }
    public static com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType valueOf(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.Enum $r1;
        com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lcom/mkulesh/micromath/formula/FormulaTermComparator$ComparatorType;", $r0);

        $r2 = (com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType) $r1;

        return $r2;
    }
    public static com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType[] values()
    {
        java.lang.Object $r0;
        com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType[] $r1;

        $r1 = <com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType: com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType[] $VALUES>;

        $r0 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r1 = (com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType[]) $r0;

        return $r1;
    }
    public int getDescriptionId()
    {
        com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType r0;
        int i0;

        r0 := @this: com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType;

        i0 = r0.<com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType: int descriptionId>;

        return i0;
    }
    public int getImageId()
    {
        com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType r0;
        int i0;

        r0 := @this: com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType;

        i0 = r0.<com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType: int imageId>;

        return i0;
    }
    public int getSymbolId()
    {
        com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType r0;
        int i0;

        r0 := @this: com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType;

        i0 = r0.<com.mkulesh.micromath.formula.FormulaTermComparator$ComparatorType: int symbolId>;

        return i0;
    }
