com.mkulesh.micromath.formula.TermParser extends java.lang.Object
public static final java.lang.String CONST_E
public static final java.lang.String CONST_INF
public static final java.lang.String CONST_NAN
public static final java.lang.String CONST_PI1
public static final java.lang.String CONST_PI2
public static final java.lang.String IMAGINARY_UNIT
public static final java.lang.String NEGATIVE_SIGN
public static final java.lang.String POSITIVE_SIGN
private com.mkulesh.micromath.formula.ArgumentHolderIf argumentHolder
private int argumentIndex
public int errorId
private java.util.ArrayList functionArgs
private java.lang.String functionName
private boolean isArray
private int linkedVariableId
private double sign
private com.mkulesh.micromath.math.CalculatedValue value
    public void <init>()
    {
        com.mkulesh.micromath.formula.TermParser r0;

        r0 := @this: com.mkulesh.micromath.formula.TermParser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.mkulesh.micromath.formula.TermParser: com.mkulesh.micromath.math.CalculatedValue value> = null;

        r0.<com.mkulesh.micromath.formula.TermParser: java.lang.String functionName> = null;

        r0.<com.mkulesh.micromath.formula.TermParser: java.util.ArrayList functionArgs> = null;

        r0.<com.mkulesh.micromath.formula.TermParser: com.mkulesh.micromath.formula.ArgumentHolderIf argumentHolder> = null;

        r0.<com.mkulesh.micromath.formula.TermParser: int argumentIndex> = -1;

        r0.<com.mkulesh.micromath.formula.TermParser: int linkedVariableId> = -1;

        r0.<com.mkulesh.micromath.formula.TermParser: double sign> = 1.0;

        r0.<com.mkulesh.micromath.formula.TermParser: boolean isArray> = 0;

        r0.<com.mkulesh.micromath.formula.TermParser: int errorId> = -1;

        return;
    }
    private boolean checkArgumentIndex(com.mkulesh.micromath.formula.TermField, com.mkulesh.micromath.widgets.CustomEditText)
    {
        com.mkulesh.micromath.formula.TermParser r0;
        com.mkulesh.micromath.formula.TermField $r1;
        com.mkulesh.micromath.widgets.CustomEditText $r2;
        java.lang.String $r3;
        com.mkulesh.micromath.formula.ArgumentHolderIf $r4;
        boolean $z0;
        com.mkulesh.micromath.formula.FormulaBase $r5;
        int $i0;

        r0 := @this: com.mkulesh.micromath.formula.TermParser;

        $r1 := @parameter0: com.mkulesh.micromath.formula.TermField;

        $r2 := @parameter1: com.mkulesh.micromath.widgets.CustomEditText;

        $r3 = r0.<com.mkulesh.micromath.formula.TermParser: java.lang.String functionName>;

        $r4 = virtualinvoke $r1.<com.mkulesh.micromath.formula.TermField: com.mkulesh.micromath.formula.ArgumentHolderIf findArgumentHolder(java.lang.String)>($r3);

        r0.<com.mkulesh.micromath.formula.TermParser: com.mkulesh.micromath.formula.ArgumentHolderIf argumentHolder> = $r4;

        $r4 = r0.<com.mkulesh.micromath.formula.TermParser: com.mkulesh.micromath.formula.ArgumentHolderIf argumentHolder>;

        if $r4 == null goto label12;

        $r4 = r0.<com.mkulesh.micromath.formula.TermParser: com.mkulesh.micromath.formula.ArgumentHolderIf argumentHolder>;

        $z0 = $r4 instanceof com.mkulesh.micromath.formula.FormulaBase;

        if $z0 != 0 goto label01;

        return 0;

     label01:
        $z0 = virtualinvoke $r2.<com.mkulesh.micromath.widgets.CustomEditText: boolean isEquationName()>();

        if $z0 == 0 goto label05;

        $r4 = r0.<com.mkulesh.micromath.formula.TermParser: com.mkulesh.micromath.formula.ArgumentHolderIf argumentHolder>;

        $r5 = (com.mkulesh.micromath.formula.FormulaBase) $r4;

        $r1 = virtualinvoke $r5.<com.mkulesh.micromath.formula.FormulaBase: com.mkulesh.micromath.formula.TermField getParentField()>();

        if $r1 == null goto label04;

        $r3 = r0.<com.mkulesh.micromath.formula.TermParser: java.lang.String functionName>;

        $r4 = virtualinvoke $r1.<com.mkulesh.micromath.formula.TermField: com.mkulesh.micromath.formula.ArgumentHolderIf findArgumentHolder(java.lang.String)>($r3);

     label02:
        r0.<com.mkulesh.micromath.formula.TermParser: com.mkulesh.micromath.formula.ArgumentHolderIf argumentHolder> = $r4;

        $r4 = r0.<com.mkulesh.micromath.formula.TermParser: com.mkulesh.micromath.formula.ArgumentHolderIf argumentHolder>;

        if $r4 == null goto label03;

        r0.<com.mkulesh.micromath.formula.TermParser: int errorId> = 2131099777;

     label03:
        r0.<com.mkulesh.micromath.formula.TermParser: com.mkulesh.micromath.formula.ArgumentHolderIf argumentHolder> = null;

        return 0;

     label04:
        $r4 = null;

        goto label02;

     label05:
        $z0 = virtualinvoke $r2.<com.mkulesh.micromath.widgets.CustomEditText: boolean isIntermediateArgument()>();

        if $z0 == 0 goto label07;

        $r4 = r0.<com.mkulesh.micromath.formula.TermParser: com.mkulesh.micromath.formula.ArgumentHolderIf argumentHolder>;

        $r5 = (com.mkulesh.micromath.formula.FormulaBase) $r4;

        $r1 = virtualinvoke $r5.<com.mkulesh.micromath.formula.FormulaBase: com.mkulesh.micromath.formula.TermField getParentField()>();

        if $r1 == null goto label10;

        $r3 = r0.<com.mkulesh.micromath.formula.TermParser: java.lang.String functionName>;

        $r4 = virtualinvoke $r1.<com.mkulesh.micromath.formula.TermField: com.mkulesh.micromath.formula.ArgumentHolderIf findArgumentHolder(java.lang.String)>($r3);

     label06:
        r0.<com.mkulesh.micromath.formula.TermParser: com.mkulesh.micromath.formula.ArgumentHolderIf argumentHolder> = $r4;

        $r4 = r0.<com.mkulesh.micromath.formula.TermParser: com.mkulesh.micromath.formula.ArgumentHolderIf argumentHolder>;

        if $r4 == null goto label12;

     label07:
        $r4 = r0.<com.mkulesh.micromath.formula.TermParser: com.mkulesh.micromath.formula.ArgumentHolderIf argumentHolder>;

        $r3 = r0.<com.mkulesh.micromath.formula.TermParser: java.lang.String functionName>;

        $i0 = interfaceinvoke $r4.<com.mkulesh.micromath.formula.ArgumentHolderIf: int getArgumentIndex(java.lang.String)>($r3);

        r0.<com.mkulesh.micromath.formula.TermParser: int argumentIndex> = $i0;

        $i0 = r0.<com.mkulesh.micromath.formula.TermParser: int argumentIndex>;

        if $i0 != -1 goto label08;

        r0.<com.mkulesh.micromath.formula.TermParser: com.mkulesh.micromath.formula.ArgumentHolderIf argumentHolder> = null;

     label08:
        $r4 = r0.<com.mkulesh.micromath.formula.TermParser: com.mkulesh.micromath.formula.ArgumentHolderIf argumentHolder>;

        if $r4 == null goto label11;

        $i0 = r0.<com.mkulesh.micromath.formula.TermParser: int argumentIndex>;

        if $i0 == -1 goto label11;

        $z0 = 1;

     label09:
        return $z0;

     label10:
        $r4 = null;

        goto label06;

     label11:
        $z0 = 0;

        goto label09;

     label12:
        return 0;
    }
    public static org.apache.commons.math3.complex.Complex complexValueOf(java.lang.String)
    {
        java.lang.String $r0, $r1;
        boolean $z0;
        int $i0, $i1, i2;
        java.lang.StringBuilder $r2;
        org.apache.commons.math3.complex.Complex $r3;
        java.lang.Double $r4;
        double $d0, $d1;
        java.lang.IndexOutOfBoundsException r5;
        java.lang.NumberFormatException r6;

        $r0 := @parameter0: java.lang.String;

        if $r0 == null goto label20;

        $z0 = virtualinvoke $r0.<java.lang.String: boolean contains(java.lang.CharSequence)>("i");

        if $z0 != 0 goto label01;

        return null;

     label01:
        $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("i");

        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        $i1 = $i1 + -1;

        if $i0 != $i1 goto label20;

        $i1 = virtualinvoke $r0.<java.lang.String: int lastIndexOf(java.lang.String)>("+");

        i2 = $i1;

        if $i1 >= 0 goto label02;

        i2 = virtualinvoke $r0.<java.lang.String: int lastIndexOf(java.lang.String)>("-");

     label02:
        if i2 >= 0 goto label03;

        i2 = 0;

     label03:
        if i2 <= 0 goto label16;

     label04:
        $r1 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(0, i2);

     label05:
        if $i0 <= i2 goto label17;

     label06:
        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(i2, $i0);

     label07:
        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("+");

     label08:
        if $z0 != 0 goto label11;

     label09:
        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("-");

     label10:
        if $z0 == 0 goto label13;

     label11:
        $r2 = new java.lang.StringBuilder;

     label12:
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("1.0");

        $r0 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

     label13:
        $r3 = new org.apache.commons.math3.complex.Complex;

     label14:
        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>($r1);

        $d0 = virtualinvoke $r4.<java.lang.Double: double doubleValue()>();

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>($r0);

        $d1 = virtualinvoke $r4.<java.lang.Double: double doubleValue()>();

        specialinvoke $r3.<org.apache.commons.math3.complex.Complex: void <init>(double,double)>($d0, $d1);

     label15:
        return $r3;

     label16:
        $r1 = "0.0";

        goto label05;

     label17:
        $r0 = "1.0";

        goto label07;

     label18:
        r5 := @caughtexception;

        return null;

     label19:
        r6 := @caughtexception;

     label20:
        return null;

        catch java.lang.IndexOutOfBoundsException from label04 to label05 with label18;
        catch java.lang.IndexOutOfBoundsException from label06 to label07 with label18;
        catch java.lang.IndexOutOfBoundsException from label07 to label08 with label18;
        catch java.lang.IndexOutOfBoundsException from label09 to label10 with label18;
        catch java.lang.IndexOutOfBoundsException from label12 to label13 with label18;
        catch java.lang.NumberFormatException from label14 to label15 with label19;
    }
    public com.mkulesh.micromath.formula.ArgumentHolderIf getArgumentHolder()
    {
        com.mkulesh.micromath.formula.TermParser r0;
        com.mkulesh.micromath.formula.ArgumentHolderIf r1;

        r0 := @this: com.mkulesh.micromath.formula.TermParser;

        r1 = r0.<com.mkulesh.micromath.formula.TermParser: com.mkulesh.micromath.formula.ArgumentHolderIf argumentHolder>;

        return r1;
    }
    public int getArgumentIndex()
    {
        com.mkulesh.micromath.formula.TermParser r0;
        int i0;

        r0 := @this: com.mkulesh.micromath.formula.TermParser;

        i0 = r0.<com.mkulesh.micromath.formula.TermParser: int argumentIndex>;

        return i0;
    }
    public java.util.ArrayList getFunctionArgs()
    {
        com.mkulesh.micromath.formula.TermParser r0;
        java.util.ArrayList r1;

        r0 := @this: com.mkulesh.micromath.formula.TermParser;

        r1 = r0.<com.mkulesh.micromath.formula.TermParser: java.util.ArrayList functionArgs>;

        return r1;
    }
    public java.lang.String getFunctionName()
    {
        com.mkulesh.micromath.formula.TermParser r0;
        java.lang.String r1;

        r0 := @this: com.mkulesh.micromath.formula.TermParser;

        r1 = r0.<com.mkulesh.micromath.formula.TermParser: java.lang.String functionName>;

        return r1;
    }
    public int getLinkedVariableId()
    {
        com.mkulesh.micromath.formula.TermParser r0;
        int i0;

        r0 := @this: com.mkulesh.micromath.formula.TermParser;

        i0 = r0.<com.mkulesh.micromath.formula.TermParser: int linkedVariableId>;

        return i0;
    }
    public double getSign()
    {
        com.mkulesh.micromath.formula.TermParser r0;
        double d0;

        r0 := @this: com.mkulesh.micromath.formula.TermParser;

        d0 = r0.<com.mkulesh.micromath.formula.TermParser: double sign>;

        return d0;
    }
    public com.mkulesh.micromath.math.CalculatedValue getValue()
    {
        com.mkulesh.micromath.formula.TermParser r0;
        com.mkulesh.micromath.math.CalculatedValue r1;

        r0 := @this: com.mkulesh.micromath.formula.TermParser;

        r1 = r0.<com.mkulesh.micromath.formula.TermParser: com.mkulesh.micromath.math.CalculatedValue value>;

        return r1;
    }
    public boolean isArgumentInHolder(java.lang.String)
    {
        com.mkulesh.micromath.formula.TermParser r0;
        java.lang.String $r1, r5;
        com.mkulesh.micromath.formula.ArgumentHolderIf $r2;
        java.util.ArrayList $r3;
        int $i0, $i1;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: com.mkulesh.micromath.formula.TermParser;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.mkulesh.micromath.formula.TermParser: com.mkulesh.micromath.formula.ArgumentHolderIf argumentHolder>;

        if $r2 == null goto label1;

        $r2 = r0.<com.mkulesh.micromath.formula.TermParser: com.mkulesh.micromath.formula.ArgumentHolderIf argumentHolder>;

        $r3 = interfaceinvoke $r2.<com.mkulesh.micromath.formula.ArgumentHolderIf: java.util.ArrayList getArguments()>();

        if $r3 == null goto label1;

        $i0 = virtualinvoke r0.<com.mkulesh.micromath.formula.TermParser: int getArgumentIndex()>();

        if $i0 < 0 goto label1;

        $i0 = virtualinvoke r0.<com.mkulesh.micromath.formula.TermParser: int getArgumentIndex()>();

        $i1 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        if $i0 >= $i1 goto label1;

        $i0 = virtualinvoke r0.<com.mkulesh.micromath.formula.TermParser: int getArgumentIndex()>();

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        r5 = (java.lang.String) $r4;

        if $r1 == null goto label1;

        if r5 == null goto label1;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        return $z0;

     label1:
        return 0;
    }
    public boolean isArray()
    {
        com.mkulesh.micromath.formula.TermParser r0;
        boolean z0;

        r0 := @this: com.mkulesh.micromath.formula.TermParser;

        z0 = r0.<com.mkulesh.micromath.formula.TermParser: boolean isArray>;

        return z0;
    }
    public void setText(com.mkulesh.micromath.formula.TermField, com.mkulesh.micromath.formula.FormulaBase, com.mkulesh.micromath.widgets.CustomEditText)
    {
        com.mkulesh.micromath.formula.TermParser r0;
        com.mkulesh.micromath.formula.TermField $r1;
        com.mkulesh.micromath.formula.FormulaBase $r2, $r20;
        com.mkulesh.micromath.widgets.CustomEditText $r3;
        com.mkulesh.micromath.formula.BracketParser r4;
        android.text.Editable $r5;
        java.lang.String $r6, $r7, $r8;
        int $i0;
        boolean $z0;
        com.mkulesh.micromath.math.CalculatedValue $r9;
        com.mkulesh.micromath.math.CalculatedValue$ValueType $r10;
        double $d0, $d1;
        java.lang.Exception r11, r13;
        org.apache.commons.math3.complex.Complex $r12;
        byte $b1;
        int[] $r14;
        android.content.Context $r15;
        android.content.res.Resources $r16;
        com.mkulesh.micromath.formula.BracketParser$ParsingResult $r17;
        java.util.ArrayList $r18;
        com.mkulesh.micromath.formula.FormulaList $r19;
        com.mkulesh.micromath.properties.DocumentProperties $r21;
        com.mkulesh.micromath.formula.Equation $r22;

        r0 := @this: com.mkulesh.micromath.formula.TermParser;

        $r1 := @parameter0: com.mkulesh.micromath.formula.TermField;

        $r2 := @parameter1: com.mkulesh.micromath.formula.FormulaBase;

        $r3 := @parameter2: com.mkulesh.micromath.widgets.CustomEditText;

        $r5 = virtualinvoke $r3.<com.mkulesh.micromath.widgets.CustomEditText: android.text.Editable getText()>();

        $r6 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        r0.<com.mkulesh.micromath.formula.TermParser: com.mkulesh.micromath.math.CalculatedValue value> = null;

        r0.<com.mkulesh.micromath.formula.TermParser: java.lang.String functionName> = null;

        r0.<com.mkulesh.micromath.formula.TermParser: java.util.ArrayList functionArgs> = null;

        r0.<com.mkulesh.micromath.formula.TermParser: com.mkulesh.micromath.formula.ArgumentHolderIf argumentHolder> = null;

        r0.<com.mkulesh.micromath.formula.TermParser: int argumentIndex> = -1;

        r0.<com.mkulesh.micromath.formula.TermParser: int linkedVariableId> = -1;

        r0.<com.mkulesh.micromath.formula.TermParser: double sign> = 1.0;

        r0.<com.mkulesh.micromath.formula.TermParser: boolean isArray> = 0;

        r0.<com.mkulesh.micromath.formula.TermParser: int errorId> = -1;

        if $r6 == null goto label36;

        $i0 = virtualinvoke $r6.<java.lang.String: int length()>();

        if $i0 != 0 goto label01;

        return;

     label01:
        $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String trim()>();

        $r6 = $r7;

        $r8 = "NaN";

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z0 != 0 goto label02;

        $r8 = "\u221e";

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label03;

     label02:
        r0.<com.mkulesh.micromath.formula.TermParser: int errorId> = 2131099796;

        return;

     label03:
        $z0 = virtualinvoke $r3.<com.mkulesh.micromath.widgets.CustomEditText: boolean isIndexName()>();

        if $z0 != 0 goto label04;

        $z0 = virtualinvoke $r3.<com.mkulesh.micromath.widgets.CustomEditText: boolean isEquationName()>();

        if $z0 == 0 goto label05;

     label04:
        $r8 = "i";

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label05;

        r0.<com.mkulesh.micromath.formula.TermParser: int errorId> = 2131099786;

        return;

     label05:
        $r9 = new com.mkulesh.micromath.math.CalculatedValue;

        $r10 = <com.mkulesh.micromath.math.CalculatedValue$ValueType: com.mkulesh.micromath.math.CalculatedValue$ValueType REAL>;

     label06:
        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r7);

        specialinvoke $r9.<com.mkulesh.micromath.math.CalculatedValue: void <init>(com.mkulesh.micromath.math.CalculatedValue$ValueType,double,double)>($r10, $d0, 0.0);

        r0.<com.mkulesh.micromath.formula.TermParser: com.mkulesh.micromath.math.CalculatedValue value> = $r9;

     label07:
        return;

     label08:
        r11 := @caughtexception;

        r0.<com.mkulesh.micromath.formula.TermParser: com.mkulesh.micromath.math.CalculatedValue value> = null;

     label09:
        $r12 = staticinvoke <com.mkulesh.micromath.formula.TermParser: org.apache.commons.math3.complex.Complex complexValueOf(java.lang.String)>($r7);

     label10:
        if $r12 == null goto label16;

     label11:
        $z0 = virtualinvoke $r3.<com.mkulesh.micromath.widgets.CustomEditText: boolean isComplexEnabled()>();

     label12:
        if $z0 != 0 goto label18;

     label13:
        r0.<com.mkulesh.micromath.formula.TermParser: int errorId> = 2131099785;

     label14:
        return;

     label15:
        r13 := @caughtexception;

        r0.<com.mkulesh.micromath.formula.TermParser: com.mkulesh.micromath.math.CalculatedValue value> = null;

     label16:
        $z0 = virtualinvoke $r7.<java.lang.String: boolean startsWith(java.lang.String)>("-");

        if $z0 == 0 goto label17;

        r0.<com.mkulesh.micromath.formula.TermParser: double sign> = -1.0;

        $r6 = virtualinvoke $r7.<java.lang.String: java.lang.String substring(int)>(1);

        $r6 = virtualinvoke $r6.<java.lang.String: java.lang.String trim()>();

     label17:
        $r7 = "e";

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label25;

        $r9 = new com.mkulesh.micromath.math.CalculatedValue;

        $r10 = <com.mkulesh.micromath.math.CalculatedValue$ValueType: com.mkulesh.micromath.math.CalculatedValue$ValueType REAL>;

        $d0 = r0.<com.mkulesh.micromath.formula.TermParser: double sign>;

        $d0 = $d0 * 2.718281828459045;

        specialinvoke $r9.<com.mkulesh.micromath.math.CalculatedValue: void <init>(com.mkulesh.micromath.math.CalculatedValue$ValueType,double,double)>($r10, $d0, 0.0);

        r0.<com.mkulesh.micromath.formula.TermParser: com.mkulesh.micromath.math.CalculatedValue value> = $r9;

        r0.<com.mkulesh.micromath.formula.TermParser: double sign> = 1.0;

        return;

     label18:
        $d0 = virtualinvoke $r12.<org.apache.commons.math3.complex.Complex: double getImaginary()>();

     label19:
        $b1 = $d0 cmpl 0.0;

        if $b1 == 0 goto label22;

        $r9 = new com.mkulesh.micromath.math.CalculatedValue;

        $r10 = <com.mkulesh.micromath.math.CalculatedValue$ValueType: com.mkulesh.micromath.math.CalculatedValue$ValueType COMPLEX>;

     label20:
        $d0 = virtualinvoke $r12.<org.apache.commons.math3.complex.Complex: double getReal()>();

        $d1 = virtualinvoke $r12.<org.apache.commons.math3.complex.Complex: double getImaginary()>();

        specialinvoke $r9.<com.mkulesh.micromath.math.CalculatedValue: void <init>(com.mkulesh.micromath.math.CalculatedValue$ValueType,double,double)>($r10, $d0, $d1);

        r0.<com.mkulesh.micromath.formula.TermParser: com.mkulesh.micromath.math.CalculatedValue value> = $r9;

     label21:
        return;

     label22:
        $r9 = new com.mkulesh.micromath.math.CalculatedValue;

        $r10 = <com.mkulesh.micromath.math.CalculatedValue$ValueType: com.mkulesh.micromath.math.CalculatedValue$ValueType REAL>;

     label23:
        $d0 = virtualinvoke $r12.<org.apache.commons.math3.complex.Complex: double getReal()>();

        specialinvoke $r9.<com.mkulesh.micromath.math.CalculatedValue: void <init>(com.mkulesh.micromath.math.CalculatedValue$ValueType,double,double)>($r10, $d0, 0.0);

        r0.<com.mkulesh.micromath.formula.TermParser: com.mkulesh.micromath.math.CalculatedValue value> = $r9;

     label24:
        return;

     label25:
        $r7 = "\u03c0";

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 != 0 goto label26;

        $r7 = "pi";

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label27;

     label26:
        $r9 = new com.mkulesh.micromath.math.CalculatedValue;

        $r10 = <com.mkulesh.micromath.math.CalculatedValue$ValueType: com.mkulesh.micromath.math.CalculatedValue$ValueType REAL>;

        $d0 = r0.<com.mkulesh.micromath.formula.TermParser: double sign>;

        $d0 = $d0 * 3.141592653589793;

        specialinvoke $r9.<com.mkulesh.micromath.math.CalculatedValue: void <init>(com.mkulesh.micromath.math.CalculatedValue$ValueType,double,double)>($r10, $d0, 0.0);

        r0.<com.mkulesh.micromath.formula.TermParser: com.mkulesh.micromath.math.CalculatedValue value> = $r9;

        r0.<com.mkulesh.micromath.formula.TermParser: double sign> = 1.0;

        return;

     label27:
        r4 = new com.mkulesh.micromath.formula.BracketParser;

        specialinvoke r4.<com.mkulesh.micromath.formula.BracketParser: void <init>()>();

        $r14 = <com.mkulesh.micromath.formula.TermParser$1: int[] $SwitchMap$com$mkulesh$micromath$formula$BracketParser$ParsingResult>;

        $r15 = virtualinvoke $r2.<com.mkulesh.micromath.formula.FormulaBase: android.content.Context getContext()>();

        $r16 = virtualinvoke $r15.<android.content.Context: android.content.res.Resources getResources()>();

        $r17 = virtualinvoke r4.<com.mkulesh.micromath.formula.BracketParser: com.mkulesh.micromath.formula.BracketParser$ParsingResult parse(java.lang.String,android.content.res.Resources)>($r6, $r16);

        $i0 = virtualinvoke $r17.<com.mkulesh.micromath.formula.BracketParser$ParsingResult: int ordinal()>();

        $i0 = $r14[$i0];

        lookupswitch($i0)
        {
            case 1: goto label29;
            case 2: goto label30;
            case 3: goto label31;
            default: goto label28;
        };

     label28:
        $r6 = r0.<com.mkulesh.micromath.formula.TermParser: java.lang.String functionName>;

        if $r6 == null goto label35;

        $z0 = specialinvoke r0.<com.mkulesh.micromath.formula.TermParser: boolean checkArgumentIndex(com.mkulesh.micromath.formula.TermField,com.mkulesh.micromath.widgets.CustomEditText)>($r1, $r3);

        if $z0 != 0 goto label36;

        $i0 = r0.<com.mkulesh.micromath.formula.TermParser: int errorId>;

        if $i0 != -1 goto label36;

        $z0 = virtualinvoke $r3.<com.mkulesh.micromath.widgets.CustomEditText: boolean isIndexName()>();

        if $z0 == 0 goto label32;

        $r18 = r0.<com.mkulesh.micromath.formula.TermParser: java.util.ArrayList functionArgs>;

        if $r18 == null goto label32;

        r0.<com.mkulesh.micromath.formula.TermParser: int errorId> = 2131099784;

        return;

     label29:
        r0.<com.mkulesh.micromath.formula.TermParser: java.lang.String functionName> = $r6;

        goto label28;

     label30:
        $r6 = r4.<com.mkulesh.micromath.formula.BracketParser: java.lang.String name>;

        r0.<com.mkulesh.micromath.formula.TermParser: java.lang.String functionName> = $r6;

        $r18 = r4.<com.mkulesh.micromath.formula.BracketParser: java.util.ArrayList arguments>;

        r0.<com.mkulesh.micromath.formula.TermParser: java.util.ArrayList functionArgs> = $r18;

        $z0 = virtualinvoke r4.<com.mkulesh.micromath.formula.BracketParser: boolean isArray()>();

        r0.<com.mkulesh.micromath.formula.TermParser: boolean isArray> = $z0;

        goto label28;

     label31:
        $i0 = r4.<com.mkulesh.micromath.formula.BracketParser: int errorId>;

        r0.<com.mkulesh.micromath.formula.TermParser: int errorId> = $i0;

        return;

     label32:
        $z0 = virtualinvoke $r3.<com.mkulesh.micromath.widgets.CustomEditText: boolean isEquationName()>();

        if $z0 == 0 goto label33;

        $r19 = virtualinvoke $r2.<com.mkulesh.micromath.formula.FormulaBase: com.mkulesh.micromath.formula.FormulaList getFormulaList()>();

        $r6 = r0.<com.mkulesh.micromath.formula.TermParser: java.lang.String functionName>;

        $i0 = virtualinvoke $r2.<com.mkulesh.micromath.formula.FormulaBase: int getId()>();

        $r20 = virtualinvoke $r19.<com.mkulesh.micromath.formula.FormulaList: com.mkulesh.micromath.formula.FormulaBase getFormula(java.lang.String,int,int,boolean)>($r6, -1, $i0, 1);

        if $r20 == null goto label36;

        $r19 = virtualinvoke $r2.<com.mkulesh.micromath.formula.FormulaBase: com.mkulesh.micromath.formula.FormulaList getFormulaList()>();

        $r21 = virtualinvoke $r19.<com.mkulesh.micromath.formula.FormulaList: com.mkulesh.micromath.properties.DocumentProperties getDocumentSettings()>();

        $z0 = $r21.<com.mkulesh.micromath.properties.DocumentProperties: boolean redefineAllowed>;

        if $z0 != 0 goto label36;

        r0.<com.mkulesh.micromath.formula.TermParser: int errorId> = 2131099777;

        return;

     label33:
        $r19 = virtualinvoke $r2.<com.mkulesh.micromath.formula.FormulaBase: com.mkulesh.micromath.formula.FormulaList getFormulaList()>();

        $r6 = r0.<com.mkulesh.micromath.formula.TermParser: java.lang.String functionName>;

        $i0 = virtualinvoke $r2.<com.mkulesh.micromath.formula.FormulaBase: int getId()>();

        $r2 = virtualinvoke $r19.<com.mkulesh.micromath.formula.FormulaList: com.mkulesh.micromath.formula.FormulaBase getFormula(java.lang.String,int,int,boolean)>($r6, 0, $i0, 1);

        if $r2 == null goto label35;

        $z0 = $r2 instanceof com.mkulesh.micromath.formula.Equation;

        if $z0 == 0 goto label35;

        $r22 = (com.mkulesh.micromath.formula.Equation) $r2;

        $r18 = virtualinvoke $r22.<com.mkulesh.micromath.formula.Equation: java.util.ArrayList getArguments()>();

        if $r18 == null goto label34;

        $z0 = virtualinvoke $r18.<java.util.ArrayList: boolean isEmpty()>();

        if $z0 == 0 goto label35;

     label34:
        $i0 = virtualinvoke $r2.<com.mkulesh.micromath.formula.FormulaBase: int getId()>();

        r0.<com.mkulesh.micromath.formula.TermParser: int linkedVariableId> = $i0;

        $i0 = r0.<com.mkulesh.micromath.formula.TermParser: int linkedVariableId>;

        if $i0 >= 0 goto label36;

     label35:
        r0.<com.mkulesh.micromath.formula.TermParser: int errorId> = 2131099807;

     label36:
        return;

        catch java.lang.Exception from label06 to label07 with label08;
        catch java.lang.Exception from label09 to label10 with label15;
        catch java.lang.Exception from label11 to label12 with label15;
        catch java.lang.Exception from label13 to label14 with label15;
        catch java.lang.Exception from label18 to label19 with label15;
        catch java.lang.Exception from label20 to label21 with label15;
        catch java.lang.Exception from label23 to label24 with label15;
    }
