com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator extends java.lang.Object
private static final double RIDDER_INITIAL_STEP
private static final int RIDDER_MAX_ITERATIONS_COUNT
private static final int SIMPSON_MAX_ITERATIONS_COUNT
private com.mkulesh.micromath.formula.CalculaterTask calculaterTask
private double qtrapResult
final com.mkulesh.micromath.formula.FormulaTermLoop this$0
    void <init>(com.mkulesh.micromath.formula.FormulaTermLoop)
    {
        com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator r0;
        com.mkulesh.micromath.formula.FormulaTermLoop $r1;

        r0 := @this: com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator;

        $r1 := @parameter0: com.mkulesh.micromath.formula.FormulaTermLoop;

        r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.FormulaTermLoop this$0> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.CalculaterTask calculaterTask> = null;

        return;
    }
    private com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator$IntermediateValue integrateSimpsons(com.mkulesh.micromath.math.CalculatedValue$PartType, double, double, double) throws com.mkulesh.micromath.formula.CalculaterTask$CancelException
    {
        com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator r0;
        com.mkulesh.micromath.math.CalculatedValue$PartType $r1;
        double $d0, $d1, $d2, d3, d4, $d5, $d6;
        com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator$IntermediateValue r2;
        boolean $z0;
        int i0;
        byte $b1;

        r0 := @this: com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator;

        $r1 := @parameter0: com.mkulesh.micromath.math.CalculatedValue$PartType;

        $d0 := @parameter1: double;

        $d1 := @parameter2: double;

        $d2 := @parameter3: double;

        r2 = new com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator$IntermediateValue;

        specialinvoke r2.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator$IntermediateValue: void <init>(com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator)>(r0);

        d4 = 0.0;

        $z0 = specialinvoke r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: boolean qtrapStage(com.mkulesh.micromath.math.CalculatedValue$PartType,double,double,int)>($r1, $d0, $d1, 0);

        if $z0 == 0 goto label1;

        r2.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator$IntermediateValue: boolean complexDetected> = 1;

     label1:
        d3 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: double qtrapResult>;

        i0 = 1;

     label2:
        if i0 > 15 goto label6;

        $z0 = specialinvoke r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: boolean qtrapStage(com.mkulesh.micromath.math.CalculatedValue$PartType,double,double,int)>($r1, $d0, $d1, i0);

        if $z0 == 0 goto label3;

        r2.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator$IntermediateValue: boolean complexDetected> = 1;

     label3:
        $d5 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: double qtrapResult>;

        $z0 = staticinvoke <com.mkulesh.micromath.math.CalculatedValue: boolean isInvalidReal(double)>($d5);

        if $z0 == 0 goto label4;

        r2.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator$IntermediateValue: double value> = #NaN;

        r2.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator$IntermediateValue: boolean complexDetected> = 0;

        return r2;

     label4:
        $d6 = 4.0 * $d5;

        d3 = $d6 - d3;

        d3 = d3 / 3.0;

        if i0 <= 1 goto label5;

        d4 = d3 - d4;

        d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d4);

        $b1 = d4 cmpg $d2;

        if $b1 > 0 goto label5;

        r2.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator$IntermediateValue: double value> = d3;

        return r2;

     label5:
        d4 = d3;

        d3 = $d5;

        i0 = i0 + 1;

        goto label2;

     label6:
        r2.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator$IntermediateValue: double value> = d4;

        return r2;
    }
    private boolean qtrapStage(com.mkulesh.micromath.math.CalculatedValue$PartType, double, double, int) throws com.mkulesh.micromath.formula.CalculaterTask$CancelException
    {
        com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator r0;
        com.mkulesh.micromath.math.CalculatedValue$PartType $r1;
        double $d0, $d1, $d2, $d3;
        int $i0;
        com.mkulesh.micromath.math.CalculatedValue r2, r3, $r7;
        long l1, l2;
        com.mkulesh.micromath.formula.FormulaTermLoop $r4;
        com.mkulesh.micromath.formula.TermField $r5;
        com.mkulesh.micromath.formula.CalculaterTask $r6;
        boolean $z0, $z1;
        byte $b3;

        r0 := @this: com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator;

        $r1 := @parameter0: com.mkulesh.micromath.math.CalculatedValue$PartType;

        $d0 := @parameter1: double;

        $d1 := @parameter2: double;

        $i0 := @parameter3: int;

        if $i0 != 0 goto label3;

        r3 = new com.mkulesh.micromath.math.CalculatedValue;

        specialinvoke r3.<com.mkulesh.micromath.math.CalculatedValue: void <init>()>();

        $r4 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.FormulaTermLoop this$0>;

        r2 = staticinvoke <com.mkulesh.micromath.formula.FormulaTermLoop: com.mkulesh.micromath.math.CalculatedValue access$000(com.mkulesh.micromath.formula.FormulaTermLoop)>($r4);

        virtualinvoke r2.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setValue(double)>($d0);

        $r4 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.FormulaTermLoop this$0>;

        $r5 = staticinvoke <com.mkulesh.micromath.formula.FormulaTermLoop: com.mkulesh.micromath.formula.TermField access$200(com.mkulesh.micromath.formula.FormulaTermLoop)>($r4);

        $r6 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.CalculaterTask calculaterTask>;

        virtualinvoke $r5.<com.mkulesh.micromath.formula.TermField: com.mkulesh.micromath.math.CalculatedValue$ValueType getValue(com.mkulesh.micromath.formula.CalculaterTask,com.mkulesh.micromath.math.CalculatedValue)>($r6, r3);

        r2 = new com.mkulesh.micromath.math.CalculatedValue;

        specialinvoke r2.<com.mkulesh.micromath.math.CalculatedValue: void <init>()>();

        $r4 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.FormulaTermLoop this$0>;

        $r7 = staticinvoke <com.mkulesh.micromath.formula.FormulaTermLoop: com.mkulesh.micromath.math.CalculatedValue access$000(com.mkulesh.micromath.formula.FormulaTermLoop)>($r4);

        virtualinvoke $r7.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setValue(double)>($d1);

        $r4 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.FormulaTermLoop this$0>;

        $r5 = staticinvoke <com.mkulesh.micromath.formula.FormulaTermLoop: com.mkulesh.micromath.formula.TermField access$200(com.mkulesh.micromath.formula.FormulaTermLoop)>($r4);

        $r6 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.CalculaterTask calculaterTask>;

        virtualinvoke $r5.<com.mkulesh.micromath.formula.TermField: com.mkulesh.micromath.math.CalculatedValue$ValueType getValue(com.mkulesh.micromath.formula.CalculaterTask,com.mkulesh.micromath.math.CalculatedValue)>($r6, r2);

        $d0 = $d1 - $d0;

        $d0 = 0.5 * $d0;

        $d1 = virtualinvoke r3.<com.mkulesh.micromath.math.CalculatedValue: double getPart(com.mkulesh.micromath.math.CalculatedValue$PartType)>($r1);

        $d2 = virtualinvoke r2.<com.mkulesh.micromath.math.CalculatedValue: double getPart(com.mkulesh.micromath.math.CalculatedValue$PartType)>($r1);

        $d1 = $d1 + $d2;

        $d0 = $d0 * $d1;

        r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: double qtrapResult> = $d0;

        $z0 = virtualinvoke r3.<com.mkulesh.micromath.math.CalculatedValue: boolean isComplex()>();

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke r2.<com.mkulesh.micromath.math.CalculatedValue: boolean isComplex()>();

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;

     label3:
        $z0 = 0;

        r3 = new com.mkulesh.micromath.math.CalculatedValue;

        specialinvoke r3.<com.mkulesh.micromath.math.CalculatedValue: void <init>()>();

        $i0 = $i0 + -1;

        l1 = 1L << $i0;

        $d2 = 0.0;

        $d1 = $d1 - $d0;

        $d3 = (double) l1;

        $d1 = $d1 / $d3;

        $d3 = 0.5 * $d1;

        $d0 = $d0 + $d3;

        l2 = 0L;

     label4:
        $b3 = l2 cmp l1;

        if $b3 >= 0 goto label6;

        $r4 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.FormulaTermLoop this$0>;

        r2 = staticinvoke <com.mkulesh.micromath.formula.FormulaTermLoop: com.mkulesh.micromath.math.CalculatedValue access$000(com.mkulesh.micromath.formula.FormulaTermLoop)>($r4);

        virtualinvoke r2.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setValue(double)>($d0);

        $r4 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.FormulaTermLoop this$0>;

        $r5 = staticinvoke <com.mkulesh.micromath.formula.FormulaTermLoop: com.mkulesh.micromath.formula.TermField access$200(com.mkulesh.micromath.formula.FormulaTermLoop)>($r4);

        $r6 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.CalculaterTask calculaterTask>;

        virtualinvoke $r5.<com.mkulesh.micromath.formula.TermField: com.mkulesh.micromath.math.CalculatedValue$ValueType getValue(com.mkulesh.micromath.formula.CalculaterTask,com.mkulesh.micromath.math.CalculatedValue)>($r6, r3);

        $d3 = virtualinvoke r3.<com.mkulesh.micromath.math.CalculatedValue: double getPart(com.mkulesh.micromath.math.CalculatedValue$PartType)>($r1);

        $d2 = $d2 + $d3;

        $d0 = $d0 + $d1;

        $z1 = virtualinvoke r3.<com.mkulesh.micromath.math.CalculatedValue: boolean isComplex()>();

        if $z1 == 0 goto label5;

        $z0 = 1;

     label5:
        l2 = l2 + 1L;

        goto label4;

     label6:
        $d0 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: double qtrapResult>;

        $d1 = $d2 * $d1;

        $d0 = $d0 + $d1;

        $d0 = 0.5 * $d0;

        r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: double qtrapResult> = $d0;

        return $z0;
    }
    public com.mkulesh.micromath.math.CalculatedValue$ValueType derivative(com.mkulesh.micromath.formula.CalculatableIf$DifferentiableType, java.lang.String, com.mkulesh.micromath.math.CalculatedValue) throws com.mkulesh.micromath.formula.CalculaterTask$CancelException
    {
        com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator r0, $r12;
        com.mkulesh.micromath.formula.CalculatableIf$DifferentiableType $r1, $r8;
        java.lang.String $r2;
        com.mkulesh.micromath.math.CalculatedValue $r3, $r7, $r9;
        com.mkulesh.micromath.formula.FormulaTermLoop $r4;
        com.mkulesh.micromath.formula.TermField $r5;
        com.mkulesh.micromath.formula.CalculaterTask $r6;
        boolean $z0;
        com.mkulesh.micromath.math.CalculatedValue$ValueType $r10;
        org.apache.commons.math3.complex.Complex $r11;
        com.mkulesh.micromath.math.CalculatedValue$PartType $r13;
        com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator$IntermediateValue $r14, $r15;
        double $d0, $d1;
        com.mkulesh.micromath.math.CalculatedValue$ErrorType $r16;

        r0 := @this: com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator;

        $r1 := @parameter0: com.mkulesh.micromath.formula.CalculatableIf$DifferentiableType;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: com.mkulesh.micromath.math.CalculatedValue;

        $r4 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.FormulaTermLoop this$0>;

        $r5 = staticinvoke <com.mkulesh.micromath.formula.FormulaTermLoop: com.mkulesh.micromath.formula.TermField access$300(com.mkulesh.micromath.formula.FormulaTermLoop)>($r4);

        $r6 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.CalculaterTask calculaterTask>;

        $r4 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.FormulaTermLoop this$0>;

        $r7 = staticinvoke <com.mkulesh.micromath.formula.FormulaTermLoop: com.mkulesh.micromath.math.CalculatedValue access$100(com.mkulesh.micromath.formula.FormulaTermLoop)>($r4);

        virtualinvoke $r5.<com.mkulesh.micromath.formula.TermField: com.mkulesh.micromath.math.CalculatedValue$ValueType getValue(com.mkulesh.micromath.formula.CalculaterTask,com.mkulesh.micromath.math.CalculatedValue)>($r6, $r7);

        $r4 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.FormulaTermLoop this$0>;

        $r7 = staticinvoke <com.mkulesh.micromath.formula.FormulaTermLoop: com.mkulesh.micromath.math.CalculatedValue access$100(com.mkulesh.micromath.formula.FormulaTermLoop)>($r4);

        $z0 = virtualinvoke $r7.<com.mkulesh.micromath.math.CalculatedValue: boolean isNaN()>();

        if $z0 != 0 goto label3;

        if $r2 == null goto label1;

        $r8 = <com.mkulesh.micromath.formula.CalculatableIf$DifferentiableType: com.mkulesh.micromath.formula.CalculatableIf$DifferentiableType ANALYTICAL>;

        if $r1 != $r8 goto label1;

        $r4 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.FormulaTermLoop this$0>;

        $r7 = staticinvoke <com.mkulesh.micromath.formula.FormulaTermLoop: com.mkulesh.micromath.math.CalculatedValue access$000(com.mkulesh.micromath.formula.FormulaTermLoop)>($r4);

        $r4 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.FormulaTermLoop this$0>;

        $r9 = staticinvoke <com.mkulesh.micromath.formula.FormulaTermLoop: com.mkulesh.micromath.math.CalculatedValue access$100(com.mkulesh.micromath.formula.FormulaTermLoop)>($r4);

        virtualinvoke $r7.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType assign(com.mkulesh.micromath.math.CalculatedValue)>($r9);

        $r4 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.FormulaTermLoop this$0>;

        $r5 = staticinvoke <com.mkulesh.micromath.formula.FormulaTermLoop: com.mkulesh.micromath.formula.TermField access$200(com.mkulesh.micromath.formula.FormulaTermLoop)>($r4);

        $r4 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.FormulaTermLoop this$0>;

        $r2 = virtualinvoke $r4.<com.mkulesh.micromath.formula.FormulaTermLoop: java.lang.String getIndexName()>();

        $r6 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.CalculaterTask calculaterTask>;

        $r10 = virtualinvoke $r5.<com.mkulesh.micromath.formula.TermField: com.mkulesh.micromath.math.CalculatedValue$ValueType getDerivativeValue(java.lang.String,com.mkulesh.micromath.formula.CalculaterTask,com.mkulesh.micromath.math.CalculatedValue)>($r2, $r6, $r3);

        return $r10;

     label1:
        $r8 = <com.mkulesh.micromath.formula.CalculatableIf$DifferentiableType: com.mkulesh.micromath.formula.CalculatableIf$DifferentiableType NUMERICAL>;

        if $r1 != $r8 goto label3;

        $r4 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.FormulaTermLoop this$0>;

        $r7 = staticinvoke <com.mkulesh.micromath.formula.FormulaTermLoop: com.mkulesh.micromath.math.CalculatedValue access$100(com.mkulesh.micromath.formula.FormulaTermLoop)>($r4);

        $r11 = virtualinvoke $r7.<com.mkulesh.micromath.math.CalculatedValue: org.apache.commons.math3.complex.Complex getComplex()>();

        $r4 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.FormulaTermLoop this$0>;

        $r12 = staticinvoke <com.mkulesh.micromath.formula.FormulaTermLoop: com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator access$400(com.mkulesh.micromath.formula.FormulaTermLoop)>($r4);

        $r13 = <com.mkulesh.micromath.math.CalculatedValue$PartType: com.mkulesh.micromath.math.CalculatedValue$PartType RE>;

        $r14 = virtualinvoke $r12.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator$IntermediateValue riddersDerivative(com.mkulesh.micromath.math.CalculatedValue$PartType,org.apache.commons.math3.complex.Complex,double)>($r13, $r11, 0.05);

        $z0 = $r14.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator$IntermediateValue: boolean complexDetected>;

        if $z0 == 0 goto label2;

        $r4 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.FormulaTermLoop this$0>;

        r0 = staticinvoke <com.mkulesh.micromath.formula.FormulaTermLoop: com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator access$400(com.mkulesh.micromath.formula.FormulaTermLoop)>($r4);

        $r13 = <com.mkulesh.micromath.math.CalculatedValue$PartType: com.mkulesh.micromath.math.CalculatedValue$PartType IM>;

        $r15 = virtualinvoke r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator$IntermediateValue riddersDerivative(com.mkulesh.micromath.math.CalculatedValue$PartType,org.apache.commons.math3.complex.Complex,double)>($r13, $r11, 0.05);

        $d0 = $r14.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator$IntermediateValue: double value>;

        $d1 = $r15.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator$IntermediateValue: double value>;

        $r10 = virtualinvoke $r3.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setComplexValue(double,double)>($d0, $d1);

        return $r10;

     label2:
        $d0 = $r14.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator$IntermediateValue: double value>;

        $r10 = virtualinvoke $r3.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setValue(double)>($d0);

        return $r10;

     label3:
        $r16 = <com.mkulesh.micromath.math.CalculatedValue$ErrorType: com.mkulesh.micromath.math.CalculatedValue$ErrorType NOT_A_NUMBER>;

        $r10 = virtualinvoke $r3.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType invalidate(com.mkulesh.micromath.math.CalculatedValue$ErrorType)>($r16);

        return $r10;
    }
    public com.mkulesh.micromath.math.CalculatedValue$ValueType integrate(int, com.mkulesh.micromath.math.CalculatedValue) throws com.mkulesh.micromath.formula.CalculaterTask$CancelException
    {
        com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator r0;
        int $i0;
        com.mkulesh.micromath.math.CalculatedValue $r1, $r4;
        double $d0, $d1, $d2;
        com.mkulesh.micromath.math.CalculatedValue$PartType $r2;
        com.mkulesh.micromath.formula.FormulaTermLoop $r3;
        com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator$IntermediateValue $r5, $r8;
        boolean $z0;
        com.mkulesh.micromath.math.CalculatedValue$ErrorType $r6;
        com.mkulesh.micromath.math.CalculatedValue$ValueType $r7;

        r0 := @this: com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator;

        $i0 := @parameter0: int;

        $r1 := @parameter1: com.mkulesh.micromath.math.CalculatedValue;

        $d0 = (double) $i0;

        $d0 = -1.0 * $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,double)>(10.0, $d0);

        $r2 = <com.mkulesh.micromath.math.CalculatedValue$PartType: com.mkulesh.micromath.math.CalculatedValue$PartType RE>;

        $r3 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.FormulaTermLoop this$0>;

        $r4 = staticinvoke <com.mkulesh.micromath.formula.FormulaTermLoop: com.mkulesh.micromath.math.CalculatedValue access$500(com.mkulesh.micromath.formula.FormulaTermLoop)>($r3);

        $d1 = virtualinvoke $r4.<com.mkulesh.micromath.math.CalculatedValue: double getReal()>();

        $r3 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.FormulaTermLoop this$0>;

        $r4 = staticinvoke <com.mkulesh.micromath.formula.FormulaTermLoop: com.mkulesh.micromath.math.CalculatedValue access$600(com.mkulesh.micromath.formula.FormulaTermLoop)>($r3);

        $d2 = virtualinvoke $r4.<com.mkulesh.micromath.math.CalculatedValue: double getReal()>();

        $r5 = specialinvoke r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator$IntermediateValue integrateSimpsons(com.mkulesh.micromath.math.CalculatedValue$PartType,double,double,double)>($r2, $d1, $d2, $d0);

        $d1 = $r5.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator$IntermediateValue: double value>;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d1);

        if $z0 == 0 goto label1;

        $r6 = <com.mkulesh.micromath.math.CalculatedValue$ErrorType: com.mkulesh.micromath.math.CalculatedValue$ErrorType NOT_A_NUMBER>;

        $r7 = virtualinvoke $r1.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType invalidate(com.mkulesh.micromath.math.CalculatedValue$ErrorType)>($r6);

        return $r7;

     label1:
        $z0 = $r5.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator$IntermediateValue: boolean complexDetected>;

        if $z0 == 0 goto label2;

        $r2 = <com.mkulesh.micromath.math.CalculatedValue$PartType: com.mkulesh.micromath.math.CalculatedValue$PartType IM>;

        $r3 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.FormulaTermLoop this$0>;

        $r4 = staticinvoke <com.mkulesh.micromath.formula.FormulaTermLoop: com.mkulesh.micromath.math.CalculatedValue access$500(com.mkulesh.micromath.formula.FormulaTermLoop)>($r3);

        $d1 = virtualinvoke $r4.<com.mkulesh.micromath.math.CalculatedValue: double getReal()>();

        $r3 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.FormulaTermLoop this$0>;

        $r4 = staticinvoke <com.mkulesh.micromath.formula.FormulaTermLoop: com.mkulesh.micromath.math.CalculatedValue access$600(com.mkulesh.micromath.formula.FormulaTermLoop)>($r3);

        $d2 = virtualinvoke $r4.<com.mkulesh.micromath.math.CalculatedValue: double getReal()>();

        $r8 = specialinvoke r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator$IntermediateValue integrateSimpsons(com.mkulesh.micromath.math.CalculatedValue$PartType,double,double,double)>($r2, $d1, $d2, $d0);

        $d0 = $r5.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator$IntermediateValue: double value>;

        $d1 = $r8.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator$IntermediateValue: double value>;

        $r7 = virtualinvoke $r1.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setComplexValue(double,double)>($d0, $d1);

        return $r7;

     label2:
        $d0 = $r5.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator$IntermediateValue: double value>;

        $r7 = virtualinvoke $r1.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setValue(double)>($d0);

        return $r7;
    }
    public com.mkulesh.micromath.math.CalculatedValue$ValueType product(long, long, com.mkulesh.micromath.math.CalculatedValue) throws com.mkulesh.micromath.formula.CalculaterTask$CancelException
    {
        com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator r0;
        long $l0, $l1;
        com.mkulesh.micromath.math.CalculatedValue $r1, $r4;
        com.mkulesh.micromath.formula.CalculaterTask $r2;
        byte $b2;
        com.mkulesh.micromath.formula.FormulaTermLoop $r3;
        double $d0;
        com.mkulesh.micromath.formula.TermField $r5;
        boolean $z0;
        com.mkulesh.micromath.math.CalculatedValue$ValueType $r6;

        r0 := @this: com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $r1 := @parameter2: com.mkulesh.micromath.math.CalculatedValue;

        virtualinvoke $r1.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setValue(double)>(1.0);

     label1:
        $b2 = $l0 cmp $l1;

        if $b2 > 0 goto label2;

        $r3 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.FormulaTermLoop this$0>;

        $r4 = staticinvoke <com.mkulesh.micromath.formula.FormulaTermLoop: com.mkulesh.micromath.math.CalculatedValue access$000(com.mkulesh.micromath.formula.FormulaTermLoop)>($r3);

        $d0 = (double) $l0;

        virtualinvoke $r4.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setValue(double)>($d0);

        $r3 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.FormulaTermLoop this$0>;

        $r5 = staticinvoke <com.mkulesh.micromath.formula.FormulaTermLoop: com.mkulesh.micromath.formula.TermField access$200(com.mkulesh.micromath.formula.FormulaTermLoop)>($r3);

        $r2 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.CalculaterTask calculaterTask>;

        $r3 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.FormulaTermLoop this$0>;

        $r4 = staticinvoke <com.mkulesh.micromath.formula.FormulaTermLoop: com.mkulesh.micromath.math.CalculatedValue access$100(com.mkulesh.micromath.formula.FormulaTermLoop)>($r3);

        virtualinvoke $r5.<com.mkulesh.micromath.formula.TermField: com.mkulesh.micromath.math.CalculatedValue$ValueType getValue(com.mkulesh.micromath.formula.CalculaterTask,com.mkulesh.micromath.math.CalculatedValue)>($r2, $r4);

        $r3 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.FormulaTermLoop this$0>;

        $r4 = staticinvoke <com.mkulesh.micromath.formula.FormulaTermLoop: com.mkulesh.micromath.math.CalculatedValue access$100(com.mkulesh.micromath.formula.FormulaTermLoop)>($r3);

        virtualinvoke $r1.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType multiply(com.mkulesh.micromath.math.CalculatedValue,com.mkulesh.micromath.math.CalculatedValue)>($r1, $r4);

        $z0 = virtualinvoke $r1.<com.mkulesh.micromath.math.CalculatedValue: boolean isNaN()>();

        if $z0 == 0 goto label3;

     label2:
        $r6 = virtualinvoke $r1.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType getValueType()>();

        return $r6;

     label3:
        $l0 = $l0 + 1L;

        goto label1;
    }
    public com.mkulesh.micromath.math.CalculatedValue$ValueType productDerivative(java.lang.String, long, long, com.mkulesh.micromath.math.CalculatedValue) throws com.mkulesh.micromath.formula.CalculaterTask$CancelException
    {
        com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator r0;
        java.lang.String $r1;
        long $l0, $l1, l3;
        com.mkulesh.micromath.math.CalculatedValue $r2, r3, r4, $r6, $r9;
        byte $b2;
        com.mkulesh.micromath.formula.FormulaTermLoop $r5;
        double $d0;
        com.mkulesh.micromath.formula.TermField $r7;
        com.mkulesh.micromath.formula.CalculaterTask $r8;
        boolean $z0;
        com.mkulesh.micromath.math.CalculatedValue$ValueType $r10;

        r0 := @this: com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator;

        $r1 := @parameter0: java.lang.String;

        $l0 := @parameter1: long;

        $l1 := @parameter2: long;

        $r2 := @parameter3: com.mkulesh.micromath.math.CalculatedValue;

        virtualinvoke $r2.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setValue(double)>(0.0);

        r3 = new com.mkulesh.micromath.math.CalculatedValue;

        specialinvoke r3.<com.mkulesh.micromath.math.CalculatedValue: void <init>()>();

        virtualinvoke r3.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setValue(double)>(1.0);

        r4 = new com.mkulesh.micromath.math.CalculatedValue;

        specialinvoke r4.<com.mkulesh.micromath.math.CalculatedValue: void <init>()>();

     label1:
        $b2 = $l0 cmp $l1;

        if $b2 > 0 goto label4;

        virtualinvoke r4.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setValue(double)>(1.0);

        l3 = $l0 + 1L;

     label2:
        $b2 = l3 cmp $l1;

        if $b2 > 0 goto label3;

        $r5 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.FormulaTermLoop this$0>;

        $r6 = staticinvoke <com.mkulesh.micromath.formula.FormulaTermLoop: com.mkulesh.micromath.math.CalculatedValue access$000(com.mkulesh.micromath.formula.FormulaTermLoop)>($r5);

        $d0 = (double) l3;

        virtualinvoke $r6.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setValue(double)>($d0);

        $r5 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.FormulaTermLoop this$0>;

        $r7 = staticinvoke <com.mkulesh.micromath.formula.FormulaTermLoop: com.mkulesh.micromath.formula.TermField access$200(com.mkulesh.micromath.formula.FormulaTermLoop)>($r5);

        $r8 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.CalculaterTask calculaterTask>;

        $r5 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.FormulaTermLoop this$0>;

        $r6 = staticinvoke <com.mkulesh.micromath.formula.FormulaTermLoop: com.mkulesh.micromath.math.CalculatedValue access$100(com.mkulesh.micromath.formula.FormulaTermLoop)>($r5);

        virtualinvoke $r7.<com.mkulesh.micromath.formula.TermField: com.mkulesh.micromath.math.CalculatedValue$ValueType getValue(com.mkulesh.micromath.formula.CalculaterTask,com.mkulesh.micromath.math.CalculatedValue)>($r8, $r6);

        $r5 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.FormulaTermLoop this$0>;

        $r6 = staticinvoke <com.mkulesh.micromath.formula.FormulaTermLoop: com.mkulesh.micromath.math.CalculatedValue access$100(com.mkulesh.micromath.formula.FormulaTermLoop)>($r5);

        virtualinvoke r4.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType multiply(com.mkulesh.micromath.math.CalculatedValue,com.mkulesh.micromath.math.CalculatedValue)>(r4, $r6);

        $z0 = virtualinvoke r4.<com.mkulesh.micromath.math.CalculatedValue: boolean isNaN()>();

        if $z0 == 0 goto label5;

     label3:
        $r5 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.FormulaTermLoop this$0>;

        $r6 = staticinvoke <com.mkulesh.micromath.formula.FormulaTermLoop: com.mkulesh.micromath.math.CalculatedValue access$000(com.mkulesh.micromath.formula.FormulaTermLoop)>($r5);

        $d0 = (double) $l0;

        virtualinvoke $r6.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setValue(double)>($d0);

        $r5 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.FormulaTermLoop this$0>;

        $r7 = staticinvoke <com.mkulesh.micromath.formula.FormulaTermLoop: com.mkulesh.micromath.formula.TermField access$200(com.mkulesh.micromath.formula.FormulaTermLoop)>($r5);

        $r8 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.CalculaterTask calculaterTask>;

        $r5 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.FormulaTermLoop this$0>;

        $r6 = staticinvoke <com.mkulesh.micromath.formula.FormulaTermLoop: com.mkulesh.micromath.math.CalculatedValue access$100(com.mkulesh.micromath.formula.FormulaTermLoop)>($r5);

        virtualinvoke $r7.<com.mkulesh.micromath.formula.TermField: com.mkulesh.micromath.math.CalculatedValue$ValueType getDerivativeValue(java.lang.String,com.mkulesh.micromath.formula.CalculaterTask,com.mkulesh.micromath.math.CalculatedValue)>($r1, $r8, $r6);

        $r5 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.FormulaTermLoop this$0>;

        $r6 = staticinvoke <com.mkulesh.micromath.formula.FormulaTermLoop: com.mkulesh.micromath.math.CalculatedValue access$100(com.mkulesh.micromath.formula.FormulaTermLoop)>($r5);

        $r5 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.FormulaTermLoop this$0>;

        $r9 = staticinvoke <com.mkulesh.micromath.formula.FormulaTermLoop: com.mkulesh.micromath.math.CalculatedValue access$100(com.mkulesh.micromath.formula.FormulaTermLoop)>($r5);

        virtualinvoke $r6.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType multiply(com.mkulesh.micromath.math.CalculatedValue,com.mkulesh.micromath.math.CalculatedValue)>($r9, r3);

        $r5 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.FormulaTermLoop this$0>;

        $r6 = staticinvoke <com.mkulesh.micromath.formula.FormulaTermLoop: com.mkulesh.micromath.math.CalculatedValue access$100(com.mkulesh.micromath.formula.FormulaTermLoop)>($r5);

        $r5 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.FormulaTermLoop this$0>;

        $r9 = staticinvoke <com.mkulesh.micromath.formula.FormulaTermLoop: com.mkulesh.micromath.math.CalculatedValue access$100(com.mkulesh.micromath.formula.FormulaTermLoop)>($r5);

        virtualinvoke $r6.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType multiply(com.mkulesh.micromath.math.CalculatedValue,com.mkulesh.micromath.math.CalculatedValue)>($r9, r4);

        $r5 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.FormulaTermLoop this$0>;

        $r6 = staticinvoke <com.mkulesh.micromath.formula.FormulaTermLoop: com.mkulesh.micromath.math.CalculatedValue access$100(com.mkulesh.micromath.formula.FormulaTermLoop)>($r5);

        virtualinvoke $r2.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType add(com.mkulesh.micromath.math.CalculatedValue,com.mkulesh.micromath.math.CalculatedValue)>($r2, $r6);

        $z0 = virtualinvoke $r2.<com.mkulesh.micromath.math.CalculatedValue: boolean isNaN()>();

        if $z0 == 0 goto label6;

     label4:
        $r10 = virtualinvoke $r2.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType getValueType()>();

        return $r10;

     label5:
        l3 = l3 + 1L;

        goto label2;

     label6:
        $r5 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.FormulaTermLoop this$0>;

        $r7 = staticinvoke <com.mkulesh.micromath.formula.FormulaTermLoop: com.mkulesh.micromath.formula.TermField access$200(com.mkulesh.micromath.formula.FormulaTermLoop)>($r5);

        $r8 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.CalculaterTask calculaterTask>;

        $r5 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.FormulaTermLoop this$0>;

        $r6 = staticinvoke <com.mkulesh.micromath.formula.FormulaTermLoop: com.mkulesh.micromath.math.CalculatedValue access$100(com.mkulesh.micromath.formula.FormulaTermLoop)>($r5);

        virtualinvoke $r7.<com.mkulesh.micromath.formula.TermField: com.mkulesh.micromath.math.CalculatedValue$ValueType getValue(com.mkulesh.micromath.formula.CalculaterTask,com.mkulesh.micromath.math.CalculatedValue)>($r8, $r6);

        $r5 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.FormulaTermLoop this$0>;

        $r6 = staticinvoke <com.mkulesh.micromath.formula.FormulaTermLoop: com.mkulesh.micromath.math.CalculatedValue access$100(com.mkulesh.micromath.formula.FormulaTermLoop)>($r5);

        virtualinvoke r3.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType multiply(com.mkulesh.micromath.math.CalculatedValue,com.mkulesh.micromath.math.CalculatedValue)>(r3, $r6);

        $l0 = $l0 + 1L;

        goto label1;
    }
    com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator$IntermediateValue riddersDerivative(com.mkulesh.micromath.math.CalculatedValue$PartType, org.apache.commons.math3.complex.Complex, double) throws com.mkulesh.micromath.formula.CalculaterTask$CancelException
    {
        com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator r0;
        com.mkulesh.micromath.math.CalculatedValue$PartType $r1;
        org.apache.commons.math3.complex.Complex $r2;
        double $d0, d1, d2, $d3, $d4, $d5;
        com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator$IntermediateValue r3;
        com.mkulesh.micromath.math.CalculatedValue r4, r5, $r11;
        int $i0, i1, i2;
        int[] $r6;
        java.lang.Class $r7;
        java.lang.Object $r8;
        double[][] r9;
        com.mkulesh.micromath.formula.FormulaTermLoop $r10;
        com.mkulesh.micromath.formula.TermField $r12;
        com.mkulesh.micromath.formula.CalculaterTask $r13;
        double[] $r14, $r15;
        boolean $z0;
        byte $b3;

        r0 := @this: com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator;

        $r1 := @parameter0: com.mkulesh.micromath.math.CalculatedValue$PartType;

        $r2 := @parameter1: org.apache.commons.math3.complex.Complex;

        $d0 := @parameter2: double;

        d1 = 1.0E30;

        d2 = $d0;

        $r6 = newarray (int)[2];

        $r6[0] = 11;

        $r6[1] = 11;

        $r7 = <java.lang.Double: java.lang.Class TYPE>;

        $r8 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r7, $r6);

        r9 = (double[][]) $r8;

        r3 = new com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator$IntermediateValue;

        specialinvoke r3.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator$IntermediateValue: void <init>(com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator)>(r0);

        r4 = new com.mkulesh.micromath.math.CalculatedValue;

        specialinvoke r4.<com.mkulesh.micromath.math.CalculatedValue: void <init>()>();

        r5 = new com.mkulesh.micromath.math.CalculatedValue;

        specialinvoke r5.<com.mkulesh.micromath.math.CalculatedValue: void <init>()>();

        $r10 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.FormulaTermLoop this$0>;

        $r11 = staticinvoke <com.mkulesh.micromath.formula.FormulaTermLoop: com.mkulesh.micromath.math.CalculatedValue access$000(com.mkulesh.micromath.formula.FormulaTermLoop)>($r10);

        $d3 = virtualinvoke $r2.<org.apache.commons.math3.complex.Complex: double getReal()>();

        $d3 = $d3 + $d0;

        $d4 = virtualinvoke $r2.<org.apache.commons.math3.complex.Complex: double getImaginary()>();

        virtualinvoke $r11.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setComplexValue(double,double)>($d3, $d4);

        $r10 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.FormulaTermLoop this$0>;

        $r12 = staticinvoke <com.mkulesh.micromath.formula.FormulaTermLoop: com.mkulesh.micromath.formula.TermField access$200(com.mkulesh.micromath.formula.FormulaTermLoop)>($r10);

        $r13 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.CalculaterTask calculaterTask>;

        virtualinvoke $r12.<com.mkulesh.micromath.formula.TermField: com.mkulesh.micromath.math.CalculatedValue$ValueType getValue(com.mkulesh.micromath.formula.CalculaterTask,com.mkulesh.micromath.math.CalculatedValue)>($r13, r4);

        $r10 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.FormulaTermLoop this$0>;

        $r11 = staticinvoke <com.mkulesh.micromath.formula.FormulaTermLoop: com.mkulesh.micromath.math.CalculatedValue access$000(com.mkulesh.micromath.formula.FormulaTermLoop)>($r10);

        $d3 = virtualinvoke $r2.<org.apache.commons.math3.complex.Complex: double getReal()>();

        $d3 = $d3 - $d0;

        $d4 = virtualinvoke $r2.<org.apache.commons.math3.complex.Complex: double getImaginary()>();

        virtualinvoke $r11.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setComplexValue(double,double)>($d3, $d4);

        $r10 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.FormulaTermLoop this$0>;

        $r12 = staticinvoke <com.mkulesh.micromath.formula.FormulaTermLoop: com.mkulesh.micromath.formula.TermField access$200(com.mkulesh.micromath.formula.FormulaTermLoop)>($r10);

        $r13 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.CalculaterTask calculaterTask>;

        virtualinvoke $r12.<com.mkulesh.micromath.formula.TermField: com.mkulesh.micromath.math.CalculatedValue$ValueType getValue(com.mkulesh.micromath.formula.CalculaterTask,com.mkulesh.micromath.math.CalculatedValue)>($r13, r5);

        $r14 = r9[1];

        $d3 = virtualinvoke r4.<com.mkulesh.micromath.math.CalculatedValue: double getPart(com.mkulesh.micromath.math.CalculatedValue$PartType)>($r1);

        $d4 = virtualinvoke r5.<com.mkulesh.micromath.math.CalculatedValue: double getPart(com.mkulesh.micromath.math.CalculatedValue$PartType)>($r1);

        $d3 = $d3 - $d4;

        $d0 = 2.0 * $d0;

        $d0 = $d3 / $d0;

        $r14[1] = $d0;

        $z0 = virtualinvoke r4.<com.mkulesh.micromath.math.CalculatedValue: boolean isComplex()>();

        if $z0 != 0 goto label01;

        $z0 = virtualinvoke r5.<com.mkulesh.micromath.math.CalculatedValue: boolean isComplex()>();

        if $z0 == 0 goto label02;

     label01:
        r3.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator$IntermediateValue: boolean complexDetected> = 1;

     label02:
        i1 = 2;

     label03:
        if i1 > 10 goto label10;

        d2 = d2 / 1.4;

        $r10 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.FormulaTermLoop this$0>;

        $r11 = staticinvoke <com.mkulesh.micromath.formula.FormulaTermLoop: com.mkulesh.micromath.math.CalculatedValue access$000(com.mkulesh.micromath.formula.FormulaTermLoop)>($r10);

        $d0 = virtualinvoke $r2.<org.apache.commons.math3.complex.Complex: double getReal()>();

        $d0 = $d0 + d2;

        $d3 = virtualinvoke $r2.<org.apache.commons.math3.complex.Complex: double getImaginary()>();

        virtualinvoke $r11.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setComplexValue(double,double)>($d0, $d3);

        $r10 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.FormulaTermLoop this$0>;

        $r12 = staticinvoke <com.mkulesh.micromath.formula.FormulaTermLoop: com.mkulesh.micromath.formula.TermField access$200(com.mkulesh.micromath.formula.FormulaTermLoop)>($r10);

        $r13 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.CalculaterTask calculaterTask>;

        virtualinvoke $r12.<com.mkulesh.micromath.formula.TermField: com.mkulesh.micromath.math.CalculatedValue$ValueType getValue(com.mkulesh.micromath.formula.CalculaterTask,com.mkulesh.micromath.math.CalculatedValue)>($r13, r4);

        $r10 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.FormulaTermLoop this$0>;

        $r11 = staticinvoke <com.mkulesh.micromath.formula.FormulaTermLoop: com.mkulesh.micromath.math.CalculatedValue access$000(com.mkulesh.micromath.formula.FormulaTermLoop)>($r10);

        $d0 = virtualinvoke $r2.<org.apache.commons.math3.complex.Complex: double getReal()>();

        $d0 = $d0 - d2;

        $d3 = virtualinvoke $r2.<org.apache.commons.math3.complex.Complex: double getImaginary()>();

        virtualinvoke $r11.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setComplexValue(double,double)>($d0, $d3);

        $r10 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.FormulaTermLoop this$0>;

        $r12 = staticinvoke <com.mkulesh.micromath.formula.FormulaTermLoop: com.mkulesh.micromath.formula.TermField access$200(com.mkulesh.micromath.formula.FormulaTermLoop)>($r10);

        $r13 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.CalculaterTask calculaterTask>;

        virtualinvoke $r12.<com.mkulesh.micromath.formula.TermField: com.mkulesh.micromath.math.CalculatedValue$ValueType getValue(com.mkulesh.micromath.formula.CalculaterTask,com.mkulesh.micromath.math.CalculatedValue)>($r13, r5);

        $r14 = r9[1];

        $d0 = virtualinvoke r4.<com.mkulesh.micromath.math.CalculatedValue: double getPart(com.mkulesh.micromath.math.CalculatedValue$PartType)>($r1);

        $d3 = virtualinvoke r5.<com.mkulesh.micromath.math.CalculatedValue: double getPart(com.mkulesh.micromath.math.CalculatedValue$PartType)>($r1);

        $d0 = $d0 - $d3;

        $d3 = 2.0 * d2;

        $d0 = $d0 / $d3;

        $r14[i1] = $d0;

        $z0 = virtualinvoke r4.<com.mkulesh.micromath.math.CalculatedValue: boolean isComplex()>();

        if $z0 != 0 goto label04;

        $z0 = virtualinvoke r5.<com.mkulesh.micromath.math.CalculatedValue: boolean isComplex()>();

        if $z0 == 0 goto label05;

     label04:
        r3.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator$IntermediateValue: boolean complexDetected> = 1;

     label05:
        $d0 = 1.9599999999999997;

        i2 = 2;

     label06:
        if i2 > i1 goto label08;

        $r14 = r9[i2];

        $i0 = i2 + -1;

        $r15 = r9[$i0];

        $d3 = $r15[i1];

        $d3 = $d3 * $d0;

        $i0 = i2 + -1;

        $r15 = r9[$i0];

        $i0 = i1 + -1;

        $d4 = $r15[$i0];

        $d3 = $d3 - $d4;

        $d4 = $d0 - 1.0;

        $d3 = $d3 / $d4;

        $r14[i1] = $d3;

        $d0 = $d0 * 1.9599999999999997;

        $r14 = r9[i2];

        $d3 = $r14[i1];

        $i0 = i2 + -1;

        $r14 = r9[$i0];

        $d4 = $r14[i1];

        $d3 = $d3 - $d4;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d3);

        $r14 = r9[i2];

        $d4 = $r14[i1];

        $i0 = i2 + -1;

        $r14 = r9[$i0];

        $i0 = i1 + -1;

        $d5 = $r14[$i0];

        $d4 = $d4 - $d5;

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d4);

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>($d3, $d4);

        $b3 = $d3 cmpg d1;

        if $b3 > 0 goto label07;

        d1 = $d3;

        $r14 = r9[i2];

        $d3 = $r14[i1];

        r3.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator$IntermediateValue: double value> = $d3;

     label07:
        i2 = i2 + 1;

        goto label06;

     label08:
        $r14 = r9[i1];

        $d0 = $r14[i1];

        i2 = i1 + -1;

        $r14 = r9[i2];

        i2 = i1 + -1;

        $d3 = $r14[i2];

        $d0 = $d0 - $d3;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        $d3 = 2.0 * d1;

        $b3 = $d0 cmpl $d3;

        if $b3 < 0 goto label09;

        return r3;

     label09:
        i1 = i1 + 1;

        goto label03;

     label10:
        return r3;
    }
    public void setCalculaterTask(com.mkulesh.micromath.formula.CalculaterTask)
    {
        com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator r0;
        com.mkulesh.micromath.formula.CalculaterTask $r1;

        r0 := @this: com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator;

        $r1 := @parameter0: com.mkulesh.micromath.formula.CalculaterTask;

        r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.CalculaterTask calculaterTask> = $r1;

        return;
    }
    public com.mkulesh.micromath.math.CalculatedValue$ValueType summation(long, long, com.mkulesh.micromath.math.CalculatedValue) throws com.mkulesh.micromath.formula.CalculaterTask$CancelException
    {
        com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator r0;
        long $l0, $l1;
        com.mkulesh.micromath.math.CalculatedValue $r1, $r4;
        com.mkulesh.micromath.formula.CalculaterTask $r2;
        byte $b2;
        com.mkulesh.micromath.formula.FormulaTermLoop $r3;
        double $d0;
        com.mkulesh.micromath.formula.TermField $r5;
        boolean $z0;
        com.mkulesh.micromath.math.CalculatedValue$ValueType $r6;

        r0 := @this: com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $r1 := @parameter2: com.mkulesh.micromath.math.CalculatedValue;

        virtualinvoke $r1.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setValue(double)>(0.0);

     label1:
        $b2 = $l0 cmp $l1;

        if $b2 > 0 goto label2;

        $r3 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.FormulaTermLoop this$0>;

        $r4 = staticinvoke <com.mkulesh.micromath.formula.FormulaTermLoop: com.mkulesh.micromath.math.CalculatedValue access$000(com.mkulesh.micromath.formula.FormulaTermLoop)>($r3);

        $d0 = (double) $l0;

        virtualinvoke $r4.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setValue(double)>($d0);

        $r3 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.FormulaTermLoop this$0>;

        $r5 = staticinvoke <com.mkulesh.micromath.formula.FormulaTermLoop: com.mkulesh.micromath.formula.TermField access$200(com.mkulesh.micromath.formula.FormulaTermLoop)>($r3);

        $r2 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.CalculaterTask calculaterTask>;

        $r3 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.FormulaTermLoop this$0>;

        $r4 = staticinvoke <com.mkulesh.micromath.formula.FormulaTermLoop: com.mkulesh.micromath.math.CalculatedValue access$100(com.mkulesh.micromath.formula.FormulaTermLoop)>($r3);

        virtualinvoke $r5.<com.mkulesh.micromath.formula.TermField: com.mkulesh.micromath.math.CalculatedValue$ValueType getValue(com.mkulesh.micromath.formula.CalculaterTask,com.mkulesh.micromath.math.CalculatedValue)>($r2, $r4);

        $r3 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.FormulaTermLoop this$0>;

        $r4 = staticinvoke <com.mkulesh.micromath.formula.FormulaTermLoop: com.mkulesh.micromath.math.CalculatedValue access$100(com.mkulesh.micromath.formula.FormulaTermLoop)>($r3);

        virtualinvoke $r1.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType add(com.mkulesh.micromath.math.CalculatedValue,com.mkulesh.micromath.math.CalculatedValue)>($r1, $r4);

        $z0 = virtualinvoke $r1.<com.mkulesh.micromath.math.CalculatedValue: boolean isNaN()>();

        if $z0 == 0 goto label3;

     label2:
        $r6 = virtualinvoke $r1.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType getValueType()>();

        return $r6;

     label3:
        $l0 = $l0 + 1L;

        goto label1;
    }
    public com.mkulesh.micromath.math.CalculatedValue$ValueType summationDerivative(java.lang.String, long, long, com.mkulesh.micromath.math.CalculatedValue) throws com.mkulesh.micromath.formula.CalculaterTask$CancelException
    {
        com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator r0;
        java.lang.String $r1;
        long $l0, $l1;
        com.mkulesh.micromath.math.CalculatedValue $r2, $r5;
        com.mkulesh.micromath.formula.CalculaterTask $r3;
        byte $b2;
        com.mkulesh.micromath.formula.FormulaTermLoop $r4;
        double $d0;
        com.mkulesh.micromath.formula.TermField $r6;
        boolean $z0;
        com.mkulesh.micromath.math.CalculatedValue$ValueType $r7;

        r0 := @this: com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator;

        $r1 := @parameter0: java.lang.String;

        $l0 := @parameter1: long;

        $l1 := @parameter2: long;

        $r2 := @parameter3: com.mkulesh.micromath.math.CalculatedValue;

        virtualinvoke $r2.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setValue(double)>(0.0);

     label1:
        $b2 = $l0 cmp $l1;

        if $b2 > 0 goto label2;

        $r4 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.FormulaTermLoop this$0>;

        $r5 = staticinvoke <com.mkulesh.micromath.formula.FormulaTermLoop: com.mkulesh.micromath.math.CalculatedValue access$000(com.mkulesh.micromath.formula.FormulaTermLoop)>($r4);

        $d0 = (double) $l0;

        virtualinvoke $r5.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setValue(double)>($d0);

        $r4 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.FormulaTermLoop this$0>;

        $r6 = staticinvoke <com.mkulesh.micromath.formula.FormulaTermLoop: com.mkulesh.micromath.formula.TermField access$200(com.mkulesh.micromath.formula.FormulaTermLoop)>($r4);

        $r3 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.CalculaterTask calculaterTask>;

        $r4 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.FormulaTermLoop this$0>;

        $r5 = staticinvoke <com.mkulesh.micromath.formula.FormulaTermLoop: com.mkulesh.micromath.math.CalculatedValue access$100(com.mkulesh.micromath.formula.FormulaTermLoop)>($r4);

        virtualinvoke $r6.<com.mkulesh.micromath.formula.TermField: com.mkulesh.micromath.math.CalculatedValue$ValueType getDerivativeValue(java.lang.String,com.mkulesh.micromath.formula.CalculaterTask,com.mkulesh.micromath.math.CalculatedValue)>($r1, $r3, $r5);

        $r4 = r0.<com.mkulesh.micromath.formula.FormulaTermLoop$LoopCalculator: com.mkulesh.micromath.formula.FormulaTermLoop this$0>;

        $r5 = staticinvoke <com.mkulesh.micromath.formula.FormulaTermLoop: com.mkulesh.micromath.math.CalculatedValue access$100(com.mkulesh.micromath.formula.FormulaTermLoop)>($r4);

        virtualinvoke $r2.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType add(com.mkulesh.micromath.math.CalculatedValue,com.mkulesh.micromath.math.CalculatedValue)>($r2, $r5);

        $z0 = virtualinvoke $r2.<com.mkulesh.micromath.math.CalculatedValue: boolean isNaN()>();

        if $z0 == 0 goto label3;

     label2:
        $r7 = virtualinvoke $r2.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType getValueType()>();

        return $r7;

     label3:
        $l0 = $l0 + 1L;

        goto label1;
    }
