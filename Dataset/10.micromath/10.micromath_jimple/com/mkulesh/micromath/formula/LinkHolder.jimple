com.mkulesh.micromath.formula.LinkHolder extends com.mkulesh.micromath.formula.FormulaBase
private final java.util.ArrayList allFunctions
private final java.util.ArrayList allIntervals
private final java.util.ArrayList directFunctions
private final java.util.ArrayList directIntervals
    public void <init>(android.content.Context)
    {
        com.mkulesh.micromath.formula.LinkHolder r0;
        android.content.Context $r1;
        java.util.ArrayList $r2;

        r0 := @this: com.mkulesh.micromath.formula.LinkHolder;

        $r1 := @parameter0: android.content.Context;

        specialinvoke r0.<com.mkulesh.micromath.formula.FormulaBase: void <init>(com.mkulesh.micromath.formula.FormulaList,android.widget.LinearLayout,int)>(null, null, 0);

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<com.mkulesh.micromath.formula.LinkHolder: java.util.ArrayList directIntervals> = $r2;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<com.mkulesh.micromath.formula.LinkHolder: java.util.ArrayList allIntervals> = $r2;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<com.mkulesh.micromath.formula.LinkHolder: java.util.ArrayList directFunctions> = $r2;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<com.mkulesh.micromath.formula.LinkHolder: java.util.ArrayList allFunctions> = $r2;

        return;
    }
    public void <init>(com.mkulesh.micromath.formula.FormulaList, android.widget.LinearLayout, int)
    {
        com.mkulesh.micromath.formula.LinkHolder r0;
        com.mkulesh.micromath.formula.FormulaList $r1;
        android.widget.LinearLayout $r2;
        int $i0;
        java.util.ArrayList $r3;

        r0 := @this: com.mkulesh.micromath.formula.LinkHolder;

        $r1 := @parameter0: com.mkulesh.micromath.formula.FormulaList;

        $r2 := @parameter1: android.widget.LinearLayout;

        $i0 := @parameter2: int;

        specialinvoke r0.<com.mkulesh.micromath.formula.FormulaBase: void <init>(com.mkulesh.micromath.formula.FormulaList,android.widget.LinearLayout,int)>($r1, $r2, $i0);

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<com.mkulesh.micromath.formula.LinkHolder: java.util.ArrayList directIntervals> = $r3;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<com.mkulesh.micromath.formula.LinkHolder: java.util.ArrayList allIntervals> = $r3;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<com.mkulesh.micromath.formula.LinkHolder: java.util.ArrayList directFunctions> = $r3;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<com.mkulesh.micromath.formula.LinkHolder: java.util.ArrayList allFunctions> = $r3;

        return;
    }
    public void addLinkedEquation(com.mkulesh.micromath.formula.Equation)
    {
        com.mkulesh.micromath.formula.LinkHolder r0;
        com.mkulesh.micromath.formula.Equation $r1;
        boolean $z0;
        java.util.ArrayList $r2;

        r0 := @this: com.mkulesh.micromath.formula.LinkHolder;

        $r1 := @parameter0: com.mkulesh.micromath.formula.Equation;

        if $r1 != null goto label1;

        return;

     label1:
        $z0 = virtualinvoke $r1.<com.mkulesh.micromath.formula.Equation: boolean isInterval()>();

        if $z0 == 0 goto label2;

        $r2 = r0.<com.mkulesh.micromath.formula.LinkHolder: java.util.ArrayList directIntervals>;

        $z0 = virtualinvoke $r2.<java.util.ArrayList: boolean contains(java.lang.Object)>($r1);

        if $z0 != 0 goto label2;

        $r2 = r0.<com.mkulesh.micromath.formula.LinkHolder: java.util.ArrayList directIntervals>;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r1);

        return;

     label2:
        $z0 = virtualinvoke $r1.<com.mkulesh.micromath.formula.Equation: boolean isInterval()>();

        if $z0 != 0 goto label3;

        $r2 = r0.<com.mkulesh.micromath.formula.LinkHolder: java.util.ArrayList directFunctions>;

        $z0 = virtualinvoke $r2.<java.util.ArrayList: boolean contains(java.lang.Object)>($r1);

        if $z0 != 0 goto label3;

        $r2 = r0.<com.mkulesh.micromath.formula.LinkHolder: java.util.ArrayList directFunctions>;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r1);

     label3:
        return;
    }
    protected java.util.ArrayList collectAllFunctions(java.util.ArrayList)
    {
        com.mkulesh.micromath.formula.LinkHolder r0, r5;
        java.util.ArrayList r1, r2;
        java.util.Iterator $r3, $r7;
        boolean $z0;
        java.lang.Object $r4;
        com.mkulesh.micromath.formula.Equation r6;

        r0 := @this: com.mkulesh.micromath.formula.LinkHolder;

        r1 := @parameter0: java.util.ArrayList;

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        if r1 == null goto label2;

        $r3 = virtualinvoke r1.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.mkulesh.micromath.formula.LinkHolder) $r4;

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r5);

        goto label1;

     label2:
        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r0);

        r1 = r0.<com.mkulesh.micromath.formula.LinkHolder: java.util.ArrayList directFunctions>;

        $r3 = virtualinvoke r1.<java.util.ArrayList: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.mkulesh.micromath.formula.Equation) $r4;

        r1 = r0.<com.mkulesh.micromath.formula.LinkHolder: java.util.ArrayList allFunctions>;

        $z0 = virtualinvoke r1.<java.util.ArrayList: boolean contains(java.lang.Object)>(r6);

        if $z0 != 0 goto label4;

        r1 = r0.<com.mkulesh.micromath.formula.LinkHolder: java.util.ArrayList allFunctions>;

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r6);

     label4:
        $z0 = virtualinvoke r2.<java.util.ArrayList: boolean contains(java.lang.Object)>(r6);

        if $z0 != 0 goto label3;

        r1 = virtualinvoke r6.<com.mkulesh.micromath.formula.Equation: java.util.ArrayList collectAllFunctions(java.util.ArrayList)>(r2);

        $r7 = virtualinvoke r1.<java.util.ArrayList: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.mkulesh.micromath.formula.Equation) $r4;

        r1 = r0.<com.mkulesh.micromath.formula.LinkHolder: java.util.ArrayList allFunctions>;

        $z0 = virtualinvoke r1.<java.util.ArrayList: boolean contains(java.lang.Object)>(r6);

        if $z0 != 0 goto label5;

        r1 = r0.<com.mkulesh.micromath.formula.LinkHolder: java.util.ArrayList allFunctions>;

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r6);

        goto label5;

     label6:
        r1 = r0.<com.mkulesh.micromath.formula.LinkHolder: java.util.ArrayList allFunctions>;

        return r1;
    }
    protected java.util.ArrayList collectAllIntervals(java.util.ArrayList)
    {
        com.mkulesh.micromath.formula.LinkHolder r0, r6;
        java.util.ArrayList r1, r2;
        java.util.Iterator $r3, $r7;
        boolean $z0;
        java.lang.Object $r4;
        com.mkulesh.micromath.formula.Equation r5;

        r0 := @this: com.mkulesh.micromath.formula.LinkHolder;

        r1 := @parameter0: java.util.ArrayList;

        r2 = r0.<com.mkulesh.micromath.formula.LinkHolder: java.util.ArrayList directIntervals>;

        $r3 = virtualinvoke r2.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.mkulesh.micromath.formula.Equation) $r4;

        r2 = r0.<com.mkulesh.micromath.formula.LinkHolder: java.util.ArrayList allIntervals>;

        $z0 = virtualinvoke r2.<java.util.ArrayList: boolean contains(java.lang.Object)>(r5);

        if $z0 != 0 goto label1;

        r2 = r0.<com.mkulesh.micromath.formula.LinkHolder: java.util.ArrayList allIntervals>;

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r5);

        goto label1;

     label2:
        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        if r1 == null goto label4;

        $r3 = virtualinvoke r1.<java.util.ArrayList: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.mkulesh.micromath.formula.LinkHolder) $r4;

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r6);

        goto label3;

     label4:
        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r0);

        r1 = r0.<com.mkulesh.micromath.formula.LinkHolder: java.util.ArrayList directFunctions>;

        $r3 = virtualinvoke r1.<java.util.ArrayList: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.mkulesh.micromath.formula.Equation) $r4;

        $z0 = virtualinvoke r2.<java.util.ArrayList: boolean contains(java.lang.Object)>(r5);

        if $z0 != 0 goto label5;

        r1 = virtualinvoke r5.<com.mkulesh.micromath.formula.Equation: java.util.ArrayList collectAllIntervals(java.util.ArrayList)>(r2);

        $r7 = virtualinvoke r1.<java.util.ArrayList: java.util.Iterator iterator()>();

     label6:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r4 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.mkulesh.micromath.formula.Equation) $r4;

        r1 = r0.<com.mkulesh.micromath.formula.LinkHolder: java.util.ArrayList allIntervals>;

        $z0 = virtualinvoke r1.<java.util.ArrayList: boolean contains(java.lang.Object)>(r5);

        if $z0 != 0 goto label6;

        r1 = r0.<com.mkulesh.micromath.formula.LinkHolder: java.util.ArrayList allIntervals>;

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r5);

        goto label6;

     label7:
        r1 = r0.<com.mkulesh.micromath.formula.LinkHolder: java.util.ArrayList allIntervals>;

        return r1;
    }
    public java.util.ArrayList getAllFunctions()
    {
        com.mkulesh.micromath.formula.LinkHolder r0;
        java.util.ArrayList r1;

        r0 := @this: com.mkulesh.micromath.formula.LinkHolder;

        r1 = r0.<com.mkulesh.micromath.formula.LinkHolder: java.util.ArrayList allFunctions>;

        return r1;
    }
    public java.util.ArrayList getAllIntervals()
    {
        com.mkulesh.micromath.formula.LinkHolder r0;
        java.util.ArrayList r1;

        r0 := @this: com.mkulesh.micromath.formula.LinkHolder;

        r1 = r0.<com.mkulesh.micromath.formula.LinkHolder: java.util.ArrayList allIntervals>;

        return r1;
    }
    public java.util.ArrayList getDirectIntervals()
    {
        com.mkulesh.micromath.formula.LinkHolder r0;
        java.util.ArrayList r1;

        r0 := @this: com.mkulesh.micromath.formula.LinkHolder;

        r1 = r0.<com.mkulesh.micromath.formula.LinkHolder: java.util.ArrayList directIntervals>;

        return r1;
    }
    public java.util.ArrayList getIndirectIntervals()
    {
        com.mkulesh.micromath.formula.LinkHolder r0;
        java.util.ArrayList r1, $r2;
        int $i0, $i1;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        com.mkulesh.micromath.formula.Equation r5;
        java.lang.String $r6;

        r0 := @this: com.mkulesh.micromath.formula.LinkHolder;

        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>()>();

        $r2 = virtualinvoke r0.<com.mkulesh.micromath.formula.LinkHolder: java.util.ArrayList getDirectIntervals()>();

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        $r2 = virtualinvoke r0.<com.mkulesh.micromath.formula.LinkHolder: java.util.ArrayList getAllIntervals()>();

        $i1 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        if $i0 == $i1 goto label2;

        $r2 = r0.<com.mkulesh.micromath.formula.LinkHolder: java.util.ArrayList allIntervals>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.mkulesh.micromath.formula.Equation) $r4;

        $r2 = r0.<com.mkulesh.micromath.formula.LinkHolder: java.util.ArrayList directIntervals>;

        $z0 = virtualinvoke $r2.<java.util.ArrayList: boolean contains(java.lang.Object)>(r5);

        if $z0 != 0 goto label1;

        $r6 = virtualinvoke r5.<com.mkulesh.micromath.formula.Equation: java.lang.String getName()>();

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

        goto label1;

     label2:
        return r1;
    }
    public boolean isContentValid(com.mkulesh.micromath.formula.FormulaBase$ValidationPassType)
    {
        com.mkulesh.micromath.formula.LinkHolder r0;
        com.mkulesh.micromath.formula.FormulaBase$ValidationPassType $r1;
        int[] $r2;
        int $i0;
        java.util.ArrayList $r3;
        boolean $z0;

        r0 := @this: com.mkulesh.micromath.formula.LinkHolder;

        $r1 := @parameter0: com.mkulesh.micromath.formula.FormulaBase$ValidationPassType;

        $r2 = <com.mkulesh.micromath.formula.LinkHolder$1: int[] $SwitchMap$com$mkulesh$micromath$formula$FormulaBase$ValidationPassType>;

        $i0 = virtualinvoke $r1.<com.mkulesh.micromath.formula.FormulaBase$ValidationPassType: int ordinal()>();

        $i0 = $r2[$i0];

        lookupswitch($i0)
        {
            case 1: goto label2;
            case 2: goto label3;
            default: goto label1;
        };

     label1:
        return 1;

     label2:
        $r3 = r0.<com.mkulesh.micromath.formula.LinkHolder: java.util.ArrayList directIntervals>;

        virtualinvoke $r3.<java.util.ArrayList: void clear()>();

        $r3 = r0.<com.mkulesh.micromath.formula.LinkHolder: java.util.ArrayList allIntervals>;

        virtualinvoke $r3.<java.util.ArrayList: void clear()>();

        $r3 = r0.<com.mkulesh.micromath.formula.LinkHolder: java.util.ArrayList directFunctions>;

        virtualinvoke $r3.<java.util.ArrayList: void clear()>();

        $r3 = r0.<com.mkulesh.micromath.formula.LinkHolder: java.util.ArrayList allFunctions>;

        virtualinvoke $r3.<java.util.ArrayList: void clear()>();

        $z0 = specialinvoke r0.<com.mkulesh.micromath.formula.FormulaBase: boolean isContentValid(com.mkulesh.micromath.formula.FormulaBase$ValidationPassType)>($r1);

        return $z0;

     label3:
        $z0 = specialinvoke r0.<com.mkulesh.micromath.formula.FormulaBase: boolean isContentValid(com.mkulesh.micromath.formula.FormulaBase$ValidationPassType)>($r1);

        virtualinvoke r0.<com.mkulesh.micromath.formula.LinkHolder: java.util.ArrayList collectAllIntervals(java.util.ArrayList)>(null);

        virtualinvoke r0.<com.mkulesh.micromath.formula.LinkHolder: java.util.ArrayList collectAllFunctions(java.util.ArrayList)>(null);

        return $z0;
    }
