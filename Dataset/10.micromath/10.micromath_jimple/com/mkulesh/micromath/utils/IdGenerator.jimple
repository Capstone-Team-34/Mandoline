com.mkulesh.micromath.utils.IdGenerator extends java.lang.Object
public static final int INITIAL_VALUE
public static boolean enableIdRestore
private static final java.util.concurrent.atomic.AtomicInteger sNextGeneratedId
    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicInteger $r0;

        $r0 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(1000);

        <com.mkulesh.micromath.utils.IdGenerator: java.util.concurrent.atomic.AtomicInteger sNextGeneratedId> = $r0;

        <com.mkulesh.micromath.utils.IdGenerator: boolean enableIdRestore> = 0;

        return;
    }
    public void <init>()
    {
        com.mkulesh.micromath.utils.IdGenerator r0;

        r0 := @this: com.mkulesh.micromath.utils.IdGenerator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static void compareAndSet(int)
    {
        int $i0, $i1;
        java.util.concurrent.atomic.AtomicInteger $r0;

        $i0 := @parameter0: int;

        $r0 = <com.mkulesh.micromath.utils.IdGenerator: java.util.concurrent.atomic.AtomicInteger sNextGeneratedId>;

        $i1 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        if $i0 < $i1 goto label1;

        $r0 = <com.mkulesh.micromath.utils.IdGenerator: java.util.concurrent.atomic.AtomicInteger sNextGeneratedId>;

        $i0 = $i0 + 1;

        virtualinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>($i1, $i0);

     label1:
        return;
    }
    public static int generateId()
    {
        java.util.concurrent.atomic.AtomicInteger $r0;
        int $i0, i1;
        boolean $z0;

     label1:
        $r0 = <com.mkulesh.micromath.utils.IdGenerator: java.util.concurrent.atomic.AtomicInteger sNextGeneratedId>;

        $i0 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        i1 = $i0 + 1;

        if i1 <= 16777215 goto label2;

        i1 = 1000;

     label2:
        $r0 = <com.mkulesh.micromath.utils.IdGenerator: java.util.concurrent.atomic.AtomicInteger sNextGeneratedId>;

        $z0 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>($i0, i1);

        if $z0 == 0 goto label1;

        return $i0;
    }
    public static void reset()
    {
        staticinvoke <com.mkulesh.micromath.utils.IdGenerator: void set(int)>(1000);

        return;
    }
    public static void set(int)
    {
        int $i0;
        java.util.concurrent.atomic.AtomicInteger $r0;

        $i0 := @parameter0: int;

        $r0 = <com.mkulesh.micromath.utils.IdGenerator: java.util.concurrent.atomic.AtomicInteger sNextGeneratedId>;

        $i0 = $i0 + 1;

        virtualinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: void set(int)>($i0);

        return;
    }
