com.mkulesh.micromath.math.CalculatedValue extends java.lang.Object
public static final com.mkulesh.micromath.math.CalculatedValue MINUS_ONE
public static final com.mkulesh.micromath.math.CalculatedValue NaN
public static final com.mkulesh.micromath.math.CalculatedValue ONE
private double imaginary
private double real
private com.mkulesh.micromath.math.CalculatedValue$ValueType valueType
    static void <clinit>()
    {
        com.mkulesh.micromath.math.CalculatedValue $r0;
        com.mkulesh.micromath.math.CalculatedValue$ValueType $r1;

        $r0 = new com.mkulesh.micromath.math.CalculatedValue;

        $r1 = <com.mkulesh.micromath.math.CalculatedValue$ValueType: com.mkulesh.micromath.math.CalculatedValue$ValueType INVALID>;

        specialinvoke $r0.<com.mkulesh.micromath.math.CalculatedValue: void <init>(com.mkulesh.micromath.math.CalculatedValue$ValueType,double,double)>($r1, #NaN, 0.0);

        <com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue NaN> = $r0;

        $r0 = new com.mkulesh.micromath.math.CalculatedValue;

        $r1 = <com.mkulesh.micromath.math.CalculatedValue$ValueType: com.mkulesh.micromath.math.CalculatedValue$ValueType REAL>;

        specialinvoke $r0.<com.mkulesh.micromath.math.CalculatedValue: void <init>(com.mkulesh.micromath.math.CalculatedValue$ValueType,double,double)>($r1, 1.0, 0.0);

        <com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue ONE> = $r0;

        $r0 = new com.mkulesh.micromath.math.CalculatedValue;

        $r1 = <com.mkulesh.micromath.math.CalculatedValue$ValueType: com.mkulesh.micromath.math.CalculatedValue$ValueType REAL>;

        specialinvoke $r0.<com.mkulesh.micromath.math.CalculatedValue: void <init>(com.mkulesh.micromath.math.CalculatedValue$ValueType,double,double)>($r1, -1.0, 0.0);

        <com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue MINUS_ONE> = $r0;

        return;
    }
    public void <init>()
    {
        com.mkulesh.micromath.math.CalculatedValue r0;
        com.mkulesh.micromath.math.CalculatedValue$ValueType $r1;

        r0 := @this: com.mkulesh.micromath.math.CalculatedValue;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <com.mkulesh.micromath.math.CalculatedValue$ValueType: com.mkulesh.micromath.math.CalculatedValue$ValueType INVALID>;

        r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType valueType> = $r1;

        r0.<com.mkulesh.micromath.math.CalculatedValue: double real> = #NaN;

        r0.<com.mkulesh.micromath.math.CalculatedValue: double imaginary> = 0.0;

        return;
    }
    public void <init>(com.mkulesh.micromath.math.CalculatedValue$ValueType, double, double)
    {
        com.mkulesh.micromath.math.CalculatedValue r0;
        com.mkulesh.micromath.math.CalculatedValue$ValueType $r1, $r2;
        double $d0, $d1;

        r0 := @this: com.mkulesh.micromath.math.CalculatedValue;

        $r1 := @parameter0: com.mkulesh.micromath.math.CalculatedValue$ValueType;

        $d0 := @parameter1: double;

        $d1 := @parameter2: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = <com.mkulesh.micromath.math.CalculatedValue$ValueType: com.mkulesh.micromath.math.CalculatedValue$ValueType INVALID>;

        r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType valueType> = $r2;

        r0.<com.mkulesh.micromath.math.CalculatedValue: double real> = #NaN;

        r0.<com.mkulesh.micromath.math.CalculatedValue: double imaginary> = 0.0;

        r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType valueType> = $r1;

        r0.<com.mkulesh.micromath.math.CalculatedValue: double real> = $d0;

        r0.<com.mkulesh.micromath.math.CalculatedValue: double imaginary> = $d1;

        return;
    }
    private java.lang.String formatValue(double, com.mkulesh.micromath.properties.DocumentProperties, boolean)
    {
        com.mkulesh.micromath.math.CalculatedValue r0;
        double $d0;
        com.mkulesh.micromath.properties.DocumentProperties $r1;
        boolean $z0, $z1;
        byte $b0;
        int $i1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        r0 := @this: com.mkulesh.micromath.math.CalculatedValue;

        $d0 := @parameter0: double;

        $r1 := @parameter1: com.mkulesh.micromath.properties.DocumentProperties;

        $z0 := @parameter2: boolean;

        $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d0);

        if $z1 == 0 goto label3;

        $b0 = $d0 cmpg 0.0;

        if $b0 >= 0 goto label1;

        return "-\u221e";

     label1:
        if $z0 == 0 goto label2;

        return "+\u221e";

     label2:
        return "\u221e";

     label3:
        $i1 = $r1.<com.mkulesh.micromath.properties.DocumentProperties: int significantDigits>;

        $d0 = staticinvoke <com.mkulesh.micromath.utils.ViewUtils: double roundToNumberOfSignificantDigits(double,int)>($d0, $i1);

        $b0 = $d0 cmpl 0.0;

        if $b0 < 0 goto label4;

        if $z0 == 0 goto label4;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("+");

        $r3 = staticinvoke <java.lang.Double: java.lang.String toString(double)>($d0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;

     label4:
        $r3 = staticinvoke <java.lang.Double: java.lang.String toString(double)>($d0);

        return $r3;
    }
    public static boolean isInvalidReal(double)
    {
        double $d0;
        boolean $z0;

        $d0 := @parameter0: double;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 != 0 goto label1;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d0);

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    public com.mkulesh.micromath.math.CalculatedValue$ValueType abs(com.mkulesh.micromath.math.CalculatedValue)
    {
        com.mkulesh.micromath.math.CalculatedValue r0, $r1;
        double $d0, $d1;
        boolean $z0;
        com.mkulesh.micromath.math.CalculatedValue$ValueType $r2;

        r0 := @this: com.mkulesh.micromath.math.CalculatedValue;

        $r1 := @parameter0: com.mkulesh.micromath.math.CalculatedValue;

        $z0 = virtualinvoke $r1.<com.mkulesh.micromath.math.CalculatedValue: boolean isComplex()>();

        if $z0 == 0 goto label2;

        $d1 = $r1.<com.mkulesh.micromath.math.CalculatedValue: double real>;

        $d0 = $r1.<com.mkulesh.micromath.math.CalculatedValue: double imaginary>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double hypot(double,double)>($d1, $d0);

     label1:
        $r2 = virtualinvoke r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setValue(double)>($d0);

        return $r2;

     label2:
        $d0 = $r1.<com.mkulesh.micromath.math.CalculatedValue: double real>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        goto label1;
    }
    public com.mkulesh.micromath.math.CalculatedValue$ValueType acos(com.mkulesh.micromath.math.CalculatedValue)
    {
        com.mkulesh.micromath.math.CalculatedValue r0, $r1;
        boolean $z0;
        org.apache.commons.math3.complex.Complex $r2;
        com.mkulesh.micromath.math.CalculatedValue$ValueType $r3;
        double $d0;

        r0 := @this: com.mkulesh.micromath.math.CalculatedValue;

        $r1 := @parameter0: com.mkulesh.micromath.math.CalculatedValue;

        $z0 = virtualinvoke $r1.<com.mkulesh.micromath.math.CalculatedValue: boolean isComplex()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke $r1.<com.mkulesh.micromath.math.CalculatedValue: org.apache.commons.math3.complex.Complex getComplex()>();

        $r2 = virtualinvoke $r2.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex acos()>();

        $r3 = virtualinvoke r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setComplexValue(org.apache.commons.math3.complex.Complex)>($r2);

        return $r3;

     label1:
        $d0 = $r1.<com.mkulesh.micromath.math.CalculatedValue: double real>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double acos(double)>($d0);

        $r3 = virtualinvoke r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setValue(double)>($d0);

        return $r3;
    }
    public com.mkulesh.micromath.math.CalculatedValue$ValueType add(com.mkulesh.micromath.math.CalculatedValue, com.mkulesh.micromath.math.CalculatedValue)
    {
        com.mkulesh.micromath.math.CalculatedValue r0, $r1, $r2;
        double $d0, $d1, $d2;
        boolean $z0;
        com.mkulesh.micromath.math.CalculatedValue$ValueType $r3;

        r0 := @this: com.mkulesh.micromath.math.CalculatedValue;

        $r1 := @parameter0: com.mkulesh.micromath.math.CalculatedValue;

        $r2 := @parameter1: com.mkulesh.micromath.math.CalculatedValue;

        $z0 = virtualinvoke $r1.<com.mkulesh.micromath.math.CalculatedValue: boolean isComplex()>();

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r2.<com.mkulesh.micromath.math.CalculatedValue: boolean isComplex()>();

        if $z0 == 0 goto label2;

     label1:
        $d1 = $r1.<com.mkulesh.micromath.math.CalculatedValue: double real>;

        $d0 = $r2.<com.mkulesh.micromath.math.CalculatedValue: double real>;

        $d1 = $d1 + $d0;

        $d2 = $r1.<com.mkulesh.micromath.math.CalculatedValue: double imaginary>;

        $d0 = $r2.<com.mkulesh.micromath.math.CalculatedValue: double imaginary>;

        $d0 = $d2 + $d0;

        $r3 = virtualinvoke r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setComplexValue(double,double)>($d1, $d0);

        return $r3;

     label2:
        $d1 = $r1.<com.mkulesh.micromath.math.CalculatedValue: double real>;

        $d0 = $r2.<com.mkulesh.micromath.math.CalculatedValue: double real>;

        $d1 = $d1 + $d0;

        $r3 = virtualinvoke r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setValue(double)>($d1);

        return $r3;
    }
    public com.mkulesh.micromath.math.CalculatedValue$ValueType asin(com.mkulesh.micromath.math.CalculatedValue)
    {
        com.mkulesh.micromath.math.CalculatedValue r0, $r1;
        boolean $z0;
        org.apache.commons.math3.complex.Complex $r2;
        com.mkulesh.micromath.math.CalculatedValue$ValueType $r3;
        double $d0;

        r0 := @this: com.mkulesh.micromath.math.CalculatedValue;

        $r1 := @parameter0: com.mkulesh.micromath.math.CalculatedValue;

        $z0 = virtualinvoke $r1.<com.mkulesh.micromath.math.CalculatedValue: boolean isComplex()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke $r1.<com.mkulesh.micromath.math.CalculatedValue: org.apache.commons.math3.complex.Complex getComplex()>();

        $r2 = virtualinvoke $r2.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex asin()>();

        $r3 = virtualinvoke r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setComplexValue(org.apache.commons.math3.complex.Complex)>($r2);

        return $r3;

     label1:
        $d0 = $r1.<com.mkulesh.micromath.math.CalculatedValue: double real>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double asin(double)>($d0);

        $r3 = virtualinvoke r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setValue(double)>($d0);

        return $r3;
    }
    public com.mkulesh.micromath.math.CalculatedValue$ValueType assign(com.mkulesh.micromath.math.CalculatedValue)
    {
        com.mkulesh.micromath.math.CalculatedValue r0, $r1;
        com.mkulesh.micromath.math.CalculatedValue$ValueType $r2;
        double $d0;

        r0 := @this: com.mkulesh.micromath.math.CalculatedValue;

        $r1 := @parameter0: com.mkulesh.micromath.math.CalculatedValue;

        $r2 = $r1.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType valueType>;

        r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType valueType> = $r2;

        $d0 = $r1.<com.mkulesh.micromath.math.CalculatedValue: double real>;

        r0.<com.mkulesh.micromath.math.CalculatedValue: double real> = $d0;

        $d0 = $r1.<com.mkulesh.micromath.math.CalculatedValue: double imaginary>;

        r0.<com.mkulesh.micromath.math.CalculatedValue: double imaginary> = $d0;

        $r2 = r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType valueType>;

        return $r2;
    }
    public com.mkulesh.micromath.math.CalculatedValue$ValueType atan(com.mkulesh.micromath.math.CalculatedValue)
    {
        com.mkulesh.micromath.math.CalculatedValue r0, $r1;
        boolean $z0;
        org.apache.commons.math3.complex.Complex $r2;
        com.mkulesh.micromath.math.CalculatedValue$ValueType $r3;
        double $d0;

        r0 := @this: com.mkulesh.micromath.math.CalculatedValue;

        $r1 := @parameter0: com.mkulesh.micromath.math.CalculatedValue;

        $z0 = virtualinvoke $r1.<com.mkulesh.micromath.math.CalculatedValue: boolean isComplex()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke $r1.<com.mkulesh.micromath.math.CalculatedValue: org.apache.commons.math3.complex.Complex getComplex()>();

        $r2 = virtualinvoke $r2.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex atan()>();

        $r3 = virtualinvoke r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setComplexValue(org.apache.commons.math3.complex.Complex)>($r2);

        return $r3;

     label1:
        $d0 = $r1.<com.mkulesh.micromath.math.CalculatedValue: double real>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan(double)>($d0);

        $r3 = virtualinvoke r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setValue(double)>($d0);

        return $r3;
    }
    public com.mkulesh.micromath.math.CalculatedValue$ValueType ceil(com.mkulesh.micromath.math.CalculatedValue)
    {
        com.mkulesh.micromath.math.CalculatedValue r0, $r1;
        boolean $z0;
        double $d0, $d1;
        com.mkulesh.micromath.math.CalculatedValue$ValueType $r2;

        r0 := @this: com.mkulesh.micromath.math.CalculatedValue;

        $r1 := @parameter0: com.mkulesh.micromath.math.CalculatedValue;

        $z0 = virtualinvoke $r1.<com.mkulesh.micromath.math.CalculatedValue: boolean isComplex()>();

        if $z0 == 0 goto label1;

        $d0 = $r1.<com.mkulesh.micromath.math.CalculatedValue: double real>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double ceil(double)>($d0);

        $d1 = $r1.<com.mkulesh.micromath.math.CalculatedValue: double imaginary>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double ceil(double)>($d1);

        $r2 = virtualinvoke r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setComplexValue(double,double)>($d0, $d1);

        return $r2;

     label1:
        $d0 = $r1.<com.mkulesh.micromath.math.CalculatedValue: double real>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double ceil(double)>($d0);

        $r2 = virtualinvoke r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setValue(double)>($d0);

        return $r2;
    }
    public com.mkulesh.micromath.math.CalculatedValue$ValueType conj(com.mkulesh.micromath.math.CalculatedValue)
    {
        com.mkulesh.micromath.math.CalculatedValue r0, $r1;
        double $d0, $d1;
        boolean $z0;
        com.mkulesh.micromath.math.CalculatedValue$ValueType $r2;

        r0 := @this: com.mkulesh.micromath.math.CalculatedValue;

        $r1 := @parameter0: com.mkulesh.micromath.math.CalculatedValue;

        $z0 = virtualinvoke $r1.<com.mkulesh.micromath.math.CalculatedValue: boolean isComplex()>();

        if $z0 == 0 goto label1;

        $d1 = $r1.<com.mkulesh.micromath.math.CalculatedValue: double real>;

        $d0 = $r1.<com.mkulesh.micromath.math.CalculatedValue: double imaginary>;

        $d0 = -1.0 * $d0;

        $r2 = virtualinvoke r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setComplexValue(double,double)>($d1, $d0);

        return $r2;

     label1:
        $d1 = $r1.<com.mkulesh.micromath.math.CalculatedValue: double real>;

        $r2 = virtualinvoke r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setValue(double)>($d1);

        return $r2;
    }
    public com.mkulesh.micromath.math.CalculatedValue$ValueType cos(com.mkulesh.micromath.math.CalculatedValue)
    {
        com.mkulesh.micromath.math.CalculatedValue r0, $r1;
        boolean $z0;
        org.apache.commons.math3.complex.Complex $r2;
        com.mkulesh.micromath.math.CalculatedValue$ValueType $r3;
        double $d0;

        r0 := @this: com.mkulesh.micromath.math.CalculatedValue;

        $r1 := @parameter0: com.mkulesh.micromath.math.CalculatedValue;

        $z0 = virtualinvoke $r1.<com.mkulesh.micromath.math.CalculatedValue: boolean isComplex()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke $r1.<com.mkulesh.micromath.math.CalculatedValue: org.apache.commons.math3.complex.Complex getComplex()>();

        $r2 = virtualinvoke $r2.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex cos()>();

        $r3 = virtualinvoke r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setComplexValue(org.apache.commons.math3.complex.Complex)>($r2);

        return $r3;

     label1:
        $d0 = $r1.<com.mkulesh.micromath.math.CalculatedValue: double real>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double cos(double)>($d0);

        $r3 = virtualinvoke r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setValue(double)>($d0);

        return $r3;
    }
    public com.mkulesh.micromath.math.CalculatedValue$ValueType cosh(com.mkulesh.micromath.math.CalculatedValue)
    {
        com.mkulesh.micromath.math.CalculatedValue r0, $r1;
        boolean $z0;
        org.apache.commons.math3.complex.Complex $r2;
        com.mkulesh.micromath.math.CalculatedValue$ValueType $r3;
        double $d0;

        r0 := @this: com.mkulesh.micromath.math.CalculatedValue;

        $r1 := @parameter0: com.mkulesh.micromath.math.CalculatedValue;

        $z0 = virtualinvoke $r1.<com.mkulesh.micromath.math.CalculatedValue: boolean isComplex()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke $r1.<com.mkulesh.micromath.math.CalculatedValue: org.apache.commons.math3.complex.Complex getComplex()>();

        $r2 = virtualinvoke $r2.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex cosh()>();

        $r3 = virtualinvoke r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setComplexValue(org.apache.commons.math3.complex.Complex)>($r2);

        return $r3;

     label1:
        $d0 = $r1.<com.mkulesh.micromath.math.CalculatedValue: double real>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double cosh(double)>($d0);

        $r3 = virtualinvoke r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setValue(double)>($d0);

        return $r3;
    }
    public com.mkulesh.micromath.math.CalculatedValue$ValueType divide(com.mkulesh.micromath.math.CalculatedValue, com.mkulesh.micromath.math.CalculatedValue)
    {
        com.mkulesh.micromath.math.CalculatedValue r0, $r1, $r2;
        double d0, d1, $d2, $d3, $d4;
        boolean $z0;
        byte $b0;
        com.mkulesh.micromath.math.CalculatedValue$ValueType $r3;

        r0 := @this: com.mkulesh.micromath.math.CalculatedValue;

        $r1 := @parameter0: com.mkulesh.micromath.math.CalculatedValue;

        $r2 := @parameter1: com.mkulesh.micromath.math.CalculatedValue;

        $z0 = virtualinvoke $r1.<com.mkulesh.micromath.math.CalculatedValue: boolean isComplex()>();

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r2.<com.mkulesh.micromath.math.CalculatedValue: boolean isComplex()>();

        if $z0 == 0 goto label3;

     label1:
        d0 = $r2.<com.mkulesh.micromath.math.CalculatedValue: double real>;

        d1 = $r2.<com.mkulesh.micromath.math.CalculatedValue: double imaginary>;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d0);

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d1);

        $b0 = $d2 cmpg $d3;

        if $b0 >= 0 goto label2;

        $d2 = d0 / d1;

        d0 = d0 * $d2;

        d0 = d0 + d1;

        d1 = $r1.<com.mkulesh.micromath.math.CalculatedValue: double real>;

        d1 = d1 * $d2;

        $d3 = $r1.<com.mkulesh.micromath.math.CalculatedValue: double imaginary>;

        d1 = d1 + $d3;

        d1 = d1 / d0;

        $d3 = $r1.<com.mkulesh.micromath.math.CalculatedValue: double imaginary>;

        $d2 = $d3 * $d2;

        $d3 = $r1.<com.mkulesh.micromath.math.CalculatedValue: double real>;

        $d2 = $d2 - $d3;

        $d2 = $d2 / d0;

        $r3 = virtualinvoke r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setComplexValue(double,double)>(d1, $d2);

        return $r3;

     label2:
        $d2 = d1 / d0;

        d1 = d1 * $d2;

        d0 = d1 + d0;

        d1 = $r1.<com.mkulesh.micromath.math.CalculatedValue: double imaginary>;

        d1 = d1 * $d2;

        $d3 = $r1.<com.mkulesh.micromath.math.CalculatedValue: double real>;

        d1 = d1 + $d3;

        d1 = d1 / d0;

        $d3 = $r1.<com.mkulesh.micromath.math.CalculatedValue: double imaginary>;

        $d4 = $r1.<com.mkulesh.micromath.math.CalculatedValue: double real>;

        $d2 = $d4 * $d2;

        $d2 = $d3 - $d2;

        $d2 = $d2 / d0;

        $r3 = virtualinvoke r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setComplexValue(double,double)>(d1, $d2);

        return $r3;

     label3:
        $d2 = $r1.<com.mkulesh.micromath.math.CalculatedValue: double real>;

        d0 = $r2.<com.mkulesh.micromath.math.CalculatedValue: double real>;

        $d2 = $d2 / d0;

        $r3 = virtualinvoke r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setValue(double)>($d2);

        return $r3;
    }
    public com.mkulesh.micromath.math.CalculatedValue$ValueType exp(com.mkulesh.micromath.math.CalculatedValue)
    {
        com.mkulesh.micromath.math.CalculatedValue r0, $r1;
        boolean $z0;
        org.apache.commons.math3.complex.Complex $r2;
        com.mkulesh.micromath.math.CalculatedValue$ValueType $r3;
        double $d0;

        r0 := @this: com.mkulesh.micromath.math.CalculatedValue;

        $r1 := @parameter0: com.mkulesh.micromath.math.CalculatedValue;

        $z0 = virtualinvoke $r1.<com.mkulesh.micromath.math.CalculatedValue: boolean isComplex()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke $r1.<com.mkulesh.micromath.math.CalculatedValue: org.apache.commons.math3.complex.Complex getComplex()>();

        $r2 = virtualinvoke $r2.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex exp()>();

        $r3 = virtualinvoke r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setComplexValue(org.apache.commons.math3.complex.Complex)>($r2);

        return $r3;

     label1:
        $d0 = $r1.<com.mkulesh.micromath.math.CalculatedValue: double real>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d0);

        $r3 = virtualinvoke r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setValue(double)>($d0);

        return $r3;
    }
    public com.mkulesh.micromath.math.CalculatedValue$ValueType floor(com.mkulesh.micromath.math.CalculatedValue)
    {
        com.mkulesh.micromath.math.CalculatedValue r0, $r1;
        boolean $z0;
        double $d0, $d1;
        com.mkulesh.micromath.math.CalculatedValue$ValueType $r2;

        r0 := @this: com.mkulesh.micromath.math.CalculatedValue;

        $r1 := @parameter0: com.mkulesh.micromath.math.CalculatedValue;

        $z0 = virtualinvoke $r1.<com.mkulesh.micromath.math.CalculatedValue: boolean isComplex()>();

        if $z0 == 0 goto label1;

        $d0 = $r1.<com.mkulesh.micromath.math.CalculatedValue: double real>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double floor(double)>($d0);

        $d1 = $r1.<com.mkulesh.micromath.math.CalculatedValue: double imaginary>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double floor(double)>($d1);

        $r2 = virtualinvoke r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setComplexValue(double,double)>($d0, $d1);

        return $r2;

     label1:
        $d0 = $r1.<com.mkulesh.micromath.math.CalculatedValue: double real>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double floor(double)>($d0);

        $r2 = virtualinvoke r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setValue(double)>($d0);

        return $r2;
    }
    public org.apache.commons.math3.complex.Complex getComplex()
    {
        com.mkulesh.micromath.math.CalculatedValue r0;
        org.apache.commons.math3.complex.Complex $r1;
        double $d0, $d1;

        r0 := @this: com.mkulesh.micromath.math.CalculatedValue;

        $r1 = new org.apache.commons.math3.complex.Complex;

        $d0 = r0.<com.mkulesh.micromath.math.CalculatedValue: double real>;

        $d1 = r0.<com.mkulesh.micromath.math.CalculatedValue: double imaginary>;

        specialinvoke $r1.<org.apache.commons.math3.complex.Complex: void <init>(double,double)>($d0, $d1);

        return $r1;
    }
    public double getImaginary()
    {
        com.mkulesh.micromath.math.CalculatedValue r0;
        double d0;

        r0 := @this: com.mkulesh.micromath.math.CalculatedValue;

        d0 = r0.<com.mkulesh.micromath.math.CalculatedValue: double imaginary>;

        return d0;
    }
    public int getInteger()
    {
        com.mkulesh.micromath.math.CalculatedValue r0;
        double $d0;
        int $i0;

        r0 := @this: com.mkulesh.micromath.math.CalculatedValue;

        $d0 = r0.<com.mkulesh.micromath.math.CalculatedValue: double real>;

        $d0 = staticinvoke <java.lang.Math: double floor(double)>($d0);

        $i0 = (int) $d0;

        return $i0;
    }
    public double getPart(com.mkulesh.micromath.math.CalculatedValue$PartType)
    {
        com.mkulesh.micromath.math.CalculatedValue r0;
        com.mkulesh.micromath.math.CalculatedValue$PartType $r1, $r2;
        double d0;

        r0 := @this: com.mkulesh.micromath.math.CalculatedValue;

        $r1 := @parameter0: com.mkulesh.micromath.math.CalculatedValue$PartType;

        $r2 = <com.mkulesh.micromath.math.CalculatedValue$PartType: com.mkulesh.micromath.math.CalculatedValue$PartType RE>;

        if $r1 != $r2 goto label1;

        d0 = r0.<com.mkulesh.micromath.math.CalculatedValue: double real>;

        return d0;

     label1:
        d0 = r0.<com.mkulesh.micromath.math.CalculatedValue: double imaginary>;

        return d0;
    }
    public double getReal()
    {
        com.mkulesh.micromath.math.CalculatedValue r0;
        double d0;

        r0 := @this: com.mkulesh.micromath.math.CalculatedValue;

        d0 = r0.<com.mkulesh.micromath.math.CalculatedValue: double real>;

        return d0;
    }
    public java.lang.String getResultDescription(com.mkulesh.micromath.properties.DocumentProperties)
    {
        com.mkulesh.micromath.math.CalculatedValue r0;
        com.mkulesh.micromath.properties.DocumentProperties $r1;
        int[] $r2;
        com.mkulesh.micromath.math.CalculatedValue$ValueType $r3;
        int $i0;
        double $d0;
        boolean $z0;
        java.lang.String $r4;
        java.lang.StringBuilder $r5;

        r0 := @this: com.mkulesh.micromath.math.CalculatedValue;

        $r1 := @parameter0: com.mkulesh.micromath.properties.DocumentProperties;

        $r2 = <com.mkulesh.micromath.math.CalculatedValue$1: int[] $SwitchMap$com$mkulesh$micromath$math$CalculatedValue$ValueType>;

        $r3 = r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType valueType>;

        $i0 = virtualinvoke $r3.<com.mkulesh.micromath.math.CalculatedValue$ValueType: int ordinal()>();

        $i0 = $r2[$i0];

        lookupswitch($i0)
        {
            case 1: goto label3;
            case 2: goto label5;
            case 3: goto label2;
            default: goto label1;
        };

     label1:
        return "";

     label2:
        return "NaN";

     label3:
        $d0 = r0.<com.mkulesh.micromath.math.CalculatedValue: double real>;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 == 0 goto label4;

        return "NaN";

     label4:
        $d0 = r0.<com.mkulesh.micromath.math.CalculatedValue: double real>;

        $r4 = specialinvoke r0.<com.mkulesh.micromath.math.CalculatedValue: java.lang.String formatValue(double,com.mkulesh.micromath.properties.DocumentProperties,boolean)>($d0, $r1, 0);

        return $r4;

     label5:
        $d0 = r0.<com.mkulesh.micromath.math.CalculatedValue: double real>;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 != 0 goto label6;

        $d0 = r0.<com.mkulesh.micromath.math.CalculatedValue: double imaginary>;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 == 0 goto label7;

     label6:
        return "NaN";

     label7:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $d0 = r0.<com.mkulesh.micromath.math.CalculatedValue: double real>;

        $r4 = specialinvoke r0.<com.mkulesh.micromath.math.CalculatedValue: java.lang.String formatValue(double,com.mkulesh.micromath.properties.DocumentProperties,boolean)>($d0, $r1, 0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $d0 = r0.<com.mkulesh.micromath.math.CalculatedValue: double imaginary>;

        $r4 = specialinvoke r0.<com.mkulesh.micromath.math.CalculatedValue: java.lang.String formatValue(double,com.mkulesh.micromath.properties.DocumentProperties,boolean)>($d0, $r1, 1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("i");

        $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }
    public com.mkulesh.micromath.math.CalculatedValue$ValueType getValueType()
    {
        com.mkulesh.micromath.math.CalculatedValue r0;
        com.mkulesh.micromath.math.CalculatedValue$ValueType r1;

        r0 := @this: com.mkulesh.micromath.math.CalculatedValue;

        r1 = r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType valueType>;

        return r1;
    }
    public com.mkulesh.micromath.math.CalculatedValue$ValueType hypot(com.mkulesh.micromath.math.CalculatedValue, com.mkulesh.micromath.math.CalculatedValue)
    {
        com.mkulesh.micromath.math.CalculatedValue r0, $r1, $r2;
        boolean $z0;
        org.apache.commons.math3.complex.Complex $r3, $r4;
        com.mkulesh.micromath.math.CalculatedValue$ValueType $r5;
        double $d0, $d1;

        r0 := @this: com.mkulesh.micromath.math.CalculatedValue;

        $r1 := @parameter0: com.mkulesh.micromath.math.CalculatedValue;

        $r2 := @parameter1: com.mkulesh.micromath.math.CalculatedValue;

        $z0 = virtualinvoke $r1.<com.mkulesh.micromath.math.CalculatedValue: boolean isComplex()>();

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r2.<com.mkulesh.micromath.math.CalculatedValue: boolean isComplex()>();

        if $z0 == 0 goto label2;

     label1:
        $r3 = virtualinvoke $r1.<com.mkulesh.micromath.math.CalculatedValue: org.apache.commons.math3.complex.Complex getComplex()>();

        $r3 = virtualinvoke $r3.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex pow(double)>(2.0);

        $r4 = virtualinvoke $r2.<com.mkulesh.micromath.math.CalculatedValue: org.apache.commons.math3.complex.Complex getComplex()>();

        $r4 = virtualinvoke $r4.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex pow(double)>(2.0);

        $r3 = virtualinvoke $r3.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex add(org.apache.commons.math3.complex.Complex)>($r4);

        $r3 = virtualinvoke $r3.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex sqrt()>();

        $r5 = virtualinvoke r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setComplexValue(org.apache.commons.math3.complex.Complex)>($r3);

        return $r5;

     label2:
        $d0 = $r1.<com.mkulesh.micromath.math.CalculatedValue: double real>;

        $d1 = $r2.<com.mkulesh.micromath.math.CalculatedValue: double real>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double hypot(double,double)>($d0, $d1);

        $r5 = virtualinvoke r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setValue(double)>($d0);

        return $r5;
    }
    public com.mkulesh.micromath.math.CalculatedValue$ValueType invalidate(com.mkulesh.micromath.math.CalculatedValue$ErrorType)
    {
        com.mkulesh.micromath.math.CalculatedValue r0;
        com.mkulesh.micromath.math.CalculatedValue$ErrorType $r1;
        com.mkulesh.micromath.math.CalculatedValue$ValueType $r2;

        r0 := @this: com.mkulesh.micromath.math.CalculatedValue;

        $r1 := @parameter0: com.mkulesh.micromath.math.CalculatedValue$ErrorType;

        $r2 = <com.mkulesh.micromath.math.CalculatedValue$ValueType: com.mkulesh.micromath.math.CalculatedValue$ValueType INVALID>;

        r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType valueType> = $r2;

        r0.<com.mkulesh.micromath.math.CalculatedValue: double real> = #NaN;

        r0.<com.mkulesh.micromath.math.CalculatedValue: double imaginary> = 0.0;

        $r2 = r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType valueType>;

        return $r2;
    }
    public boolean isComplex()
    {
        com.mkulesh.micromath.math.CalculatedValue r0;
        com.mkulesh.micromath.math.CalculatedValue$ValueType $r1, $r2;

        r0 := @this: com.mkulesh.micromath.math.CalculatedValue;

        $r2 = r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType valueType>;

        $r1 = <com.mkulesh.micromath.math.CalculatedValue$ValueType: com.mkulesh.micromath.math.CalculatedValue$ValueType COMPLEX>;

        if $r2 != $r1 goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean isNaN()
    {
        com.mkulesh.micromath.math.CalculatedValue r0;
        int[] $r1;
        com.mkulesh.micromath.math.CalculatedValue$ValueType $r2;
        int $i0;
        double $d0;
        boolean $z0;

        r0 := @this: com.mkulesh.micromath.math.CalculatedValue;

        $r1 = <com.mkulesh.micromath.math.CalculatedValue$1: int[] $SwitchMap$com$mkulesh$micromath$math$CalculatedValue$ValueType>;

        $r2 = r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType valueType>;

        $i0 = virtualinvoke $r2.<com.mkulesh.micromath.math.CalculatedValue$ValueType: int ordinal()>();

        $i0 = $r1[$i0];

        lookupswitch($i0)
        {
            case 1: goto label2;
            case 2: goto label3;
            default: goto label1;
        };

     label1:
        return 1;

     label2:
        $d0 = r0.<com.mkulesh.micromath.math.CalculatedValue: double real>;

        $z0 = staticinvoke <com.mkulesh.micromath.math.CalculatedValue: boolean isInvalidReal(double)>($d0);

        return $z0;

     label3:
        $d0 = r0.<com.mkulesh.micromath.math.CalculatedValue: double real>;

        $z0 = staticinvoke <com.mkulesh.micromath.math.CalculatedValue: boolean isInvalidReal(double)>($d0);

        if $z0 != 0 goto label4;

        $d0 = r0.<com.mkulesh.micromath.math.CalculatedValue: double imaginary>;

        $z0 = staticinvoke <com.mkulesh.micromath.math.CalculatedValue: boolean isInvalidReal(double)>($d0);

        if $z0 != 0 goto label4;

        return 0;

     label4:
        return 1;
    }
    public boolean isReal()
    {
        com.mkulesh.micromath.math.CalculatedValue r0;
        com.mkulesh.micromath.math.CalculatedValue$ValueType $r1, $r2;

        r0 := @this: com.mkulesh.micromath.math.CalculatedValue;

        $r2 = r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType valueType>;

        $r1 = <com.mkulesh.micromath.math.CalculatedValue$ValueType: com.mkulesh.micromath.math.CalculatedValue$ValueType REAL>;

        if $r2 != $r1 goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean isZero()
    {
        com.mkulesh.micromath.math.CalculatedValue r0;
        int $i0;
        int[] $r1;
        com.mkulesh.micromath.math.CalculatedValue$ValueType $r2;
        double $d0;
        byte $b1;

        r0 := @this: com.mkulesh.micromath.math.CalculatedValue;

        $r1 = <com.mkulesh.micromath.math.CalculatedValue$1: int[] $SwitchMap$com$mkulesh$micromath$math$CalculatedValue$ValueType>;

        $r2 = r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType valueType>;

        $i0 = virtualinvoke $r2.<com.mkulesh.micromath.math.CalculatedValue$ValueType: int ordinal()>();

        $i0 = $r1[$i0];

        lookupswitch($i0)
        {
            case 1: goto label2;
            case 2: goto label3;
            default: goto label1;
        };

     label1:
        return 0;

     label2:
        $d0 = r0.<com.mkulesh.micromath.math.CalculatedValue: double real>;

        $b1 = $d0 cmpl 0.0;

        if $b1 == 0 goto label5;

        return 0;

     label3:
        $d0 = r0.<com.mkulesh.micromath.math.CalculatedValue: double real>;

        $b1 = $d0 cmpl 0.0;

        if $b1 != 0 goto label4;

        $d0 = r0.<com.mkulesh.micromath.math.CalculatedValue: double imaginary>;

        $b1 = $d0 cmpl 0.0;

        if $b1 == 0 goto label5;

     label4:
        return 0;

     label5:
        return 1;
    }
    public com.mkulesh.micromath.math.CalculatedValue$ValueType log(com.mkulesh.micromath.math.CalculatedValue)
    {
        com.mkulesh.micromath.math.CalculatedValue r0, $r1;
        boolean $z0;
        org.apache.commons.math3.complex.Complex $r2;
        com.mkulesh.micromath.math.CalculatedValue$ValueType $r3;
        double $d0;

        r0 := @this: com.mkulesh.micromath.math.CalculatedValue;

        $r1 := @parameter0: com.mkulesh.micromath.math.CalculatedValue;

        $z0 = virtualinvoke $r1.<com.mkulesh.micromath.math.CalculatedValue: boolean isComplex()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke $r1.<com.mkulesh.micromath.math.CalculatedValue: org.apache.commons.math3.complex.Complex getComplex()>();

        $r2 = virtualinvoke $r2.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex log()>();

        $r3 = virtualinvoke r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setComplexValue(org.apache.commons.math3.complex.Complex)>($r2);

        return $r3;

     label1:
        $d0 = $r1.<com.mkulesh.micromath.math.CalculatedValue: double real>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d0);

        $r3 = virtualinvoke r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setValue(double)>($d0);

        return $r3;
    }
    public com.mkulesh.micromath.math.CalculatedValue$ValueType log10(com.mkulesh.micromath.math.CalculatedValue)
    {
        com.mkulesh.micromath.math.CalculatedValue r0, $r1;
        boolean $z0;
        org.apache.commons.math3.complex.Complex $r2;
        double $d0;
        com.mkulesh.micromath.math.CalculatedValue$ValueType $r3;

        r0 := @this: com.mkulesh.micromath.math.CalculatedValue;

        $r1 := @parameter0: com.mkulesh.micromath.math.CalculatedValue;

        $z0 = virtualinvoke $r1.<com.mkulesh.micromath.math.CalculatedValue: boolean isComplex()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke $r1.<com.mkulesh.micromath.math.CalculatedValue: org.apache.commons.math3.complex.Complex getComplex()>();

        $r2 = virtualinvoke $r2.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex log()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(10.0);

        $r2 = virtualinvoke $r2.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex divide(double)>($d0);

        $r3 = virtualinvoke r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setComplexValue(org.apache.commons.math3.complex.Complex)>($r2);

        return $r3;

     label1:
        $d0 = $r1.<com.mkulesh.micromath.math.CalculatedValue: double real>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double log10(double)>($d0);

        $r3 = virtualinvoke r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setValue(double)>($d0);

        return $r3;
    }
    public com.mkulesh.micromath.math.CalculatedValue$ValueType multiply(double)
    {
        com.mkulesh.micromath.math.CalculatedValue r0;
        double $d0, $d1;
        com.mkulesh.micromath.math.CalculatedValue$ValueType r1;

        r0 := @this: com.mkulesh.micromath.math.CalculatedValue;

        $d0 := @parameter0: double;

        $d1 = r0.<com.mkulesh.micromath.math.CalculatedValue: double real>;

        $d1 = $d1 * $d0;

        r0.<com.mkulesh.micromath.math.CalculatedValue: double real> = $d1;

        $d1 = r0.<com.mkulesh.micromath.math.CalculatedValue: double imaginary>;

        $d0 = $d1 * $d0;

        r0.<com.mkulesh.micromath.math.CalculatedValue: double imaginary> = $d0;

        r1 = r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType valueType>;

        return r1;
    }
    public com.mkulesh.micromath.math.CalculatedValue$ValueType multiply(com.mkulesh.micromath.math.CalculatedValue, com.mkulesh.micromath.math.CalculatedValue)
    {
        com.mkulesh.micromath.math.CalculatedValue r0, $r1, $r2;
        double $d0, $d1, $d2, $d3;
        boolean $z0;
        com.mkulesh.micromath.math.CalculatedValue$ValueType $r3;

        r0 := @this: com.mkulesh.micromath.math.CalculatedValue;

        $r1 := @parameter0: com.mkulesh.micromath.math.CalculatedValue;

        $r2 := @parameter1: com.mkulesh.micromath.math.CalculatedValue;

        $z0 = virtualinvoke $r1.<com.mkulesh.micromath.math.CalculatedValue: boolean isComplex()>();

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r2.<com.mkulesh.micromath.math.CalculatedValue: boolean isComplex()>();

        if $z0 == 0 goto label2;

     label1:
        $d1 = $r1.<com.mkulesh.micromath.math.CalculatedValue: double real>;

        $d2 = $r2.<com.mkulesh.micromath.math.CalculatedValue: double real>;

        $d1 = $d1 * $d2;

        $d2 = $r1.<com.mkulesh.micromath.math.CalculatedValue: double imaginary>;

        $d0 = $r2.<com.mkulesh.micromath.math.CalculatedValue: double imaginary>;

        $d2 = $d2 * $d0;

        $d1 = $d1 - $d2;

        $d2 = $r1.<com.mkulesh.micromath.math.CalculatedValue: double real>;

        $d0 = $r2.<com.mkulesh.micromath.math.CalculatedValue: double imaginary>;

        $d2 = $d2 * $d0;

        $d3 = $r1.<com.mkulesh.micromath.math.CalculatedValue: double imaginary>;

        $d0 = $r2.<com.mkulesh.micromath.math.CalculatedValue: double real>;

        $d0 = $d3 * $d0;

        $d2 = $d2 + $d0;

        $r3 = virtualinvoke r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setComplexValue(double,double)>($d1, $d2);

        return $r3;

     label2:
        $d1 = $r1.<com.mkulesh.micromath.math.CalculatedValue: double real>;

        $d2 = $r2.<com.mkulesh.micromath.math.CalculatedValue: double real>;

        $d1 = $d1 * $d2;

        $r3 = virtualinvoke r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setValue(double)>($d1);

        return $r3;
    }
    public com.mkulesh.micromath.math.CalculatedValue$ValueType nthRoot(com.mkulesh.micromath.math.CalculatedValue, int)
    {
        com.mkulesh.micromath.math.CalculatedValue r0, $r1;
        int $i0;
        org.apache.commons.math3.complex.Complex $r2;
        java.util.List $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        double $d0;
        byte $b1;
        com.mkulesh.micromath.math.CalculatedValue$ValueType $r6;
        java.lang.Exception $r7;
        com.mkulesh.micromath.math.CalculatedValue$ErrorType $r8;

        r0 := @this: com.mkulesh.micromath.math.CalculatedValue;

        $r1 := @parameter0: com.mkulesh.micromath.math.CalculatedValue;

        $i0 := @parameter1: int;

     label01:
        $r2 = virtualinvoke $r1.<com.mkulesh.micromath.math.CalculatedValue: org.apache.commons.math3.complex.Complex getComplex()>();

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.complex.Complex: java.util.List nthRoot(int)>($i0);

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

     label03:
        if $z0 == 0 goto label08;

     label04:
        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r2 = (org.apache.commons.math3.complex.Complex) $r5;

        $d0 = virtualinvoke $r2.<org.apache.commons.math3.complex.Complex: double getImaginary()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

     label05:
        $b1 = $d0 cmpg 1.0E-15;

        if $b1 >= 0 goto label02;

     label06:
        $d0 = virtualinvoke $r2.<org.apache.commons.math3.complex.Complex: double getReal()>();

        $r6 = virtualinvoke r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setValue(double)>($d0);

     label07:
        return $r6;

     label08:
        $z0 = interfaceinvoke $r3.<java.util.List: boolean isEmpty()>();

     label09:
        if $z0 != 0 goto label13;

     label10:
        $r5 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(0);

        $r2 = (org.apache.commons.math3.complex.Complex) $r5;

        $r6 = virtualinvoke r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setComplexValue(org.apache.commons.math3.complex.Complex)>($r2);

     label11:
        return $r6;

     label12:
        $r7 := @caughtexception;

     label13:
        $r8 = <com.mkulesh.micromath.math.CalculatedValue$ErrorType: com.mkulesh.micromath.math.CalculatedValue$ErrorType NOT_A_NUMBER>;

        $r6 = virtualinvoke r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType invalidate(com.mkulesh.micromath.math.CalculatedValue$ErrorType)>($r8);

        return $r6;

        catch java.lang.Exception from label01 to label03 with label12;
        catch java.lang.Exception from label04 to label05 with label12;
        catch java.lang.Exception from label06 to label07 with label12;
        catch java.lang.Exception from label08 to label09 with label12;
        catch java.lang.Exception from label10 to label11 with label12;
    }
    public com.mkulesh.micromath.math.CalculatedValue$ValueType pow(com.mkulesh.micromath.math.CalculatedValue, com.mkulesh.micromath.math.CalculatedValue)
    {
        com.mkulesh.micromath.math.CalculatedValue r0, $r1, $r2;
        double $d0, $d1;
        boolean $z0;
        org.apache.commons.math3.complex.Complex $r3, $r4;
        com.mkulesh.micromath.math.CalculatedValue$ValueType $r5;

        r0 := @this: com.mkulesh.micromath.math.CalculatedValue;

        $r1 := @parameter0: com.mkulesh.micromath.math.CalculatedValue;

        $r2 := @parameter1: com.mkulesh.micromath.math.CalculatedValue;

        $z0 = virtualinvoke $r1.<com.mkulesh.micromath.math.CalculatedValue: boolean isComplex()>();

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r2.<com.mkulesh.micromath.math.CalculatedValue: boolean isComplex()>();

        if $z0 == 0 goto label2;

     label1:
        $r3 = virtualinvoke $r1.<com.mkulesh.micromath.math.CalculatedValue: org.apache.commons.math3.complex.Complex getComplex()>();

        $r4 = virtualinvoke $r2.<com.mkulesh.micromath.math.CalculatedValue: org.apache.commons.math3.complex.Complex getComplex()>();

        $r3 = virtualinvoke $r3.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex pow(org.apache.commons.math3.complex.Complex)>($r4);

        $r5 = virtualinvoke r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setComplexValue(org.apache.commons.math3.complex.Complex)>($r3);

        return $r5;

     label2:
        $d1 = $r1.<com.mkulesh.micromath.math.CalculatedValue: double real>;

        $d0 = $r2.<com.mkulesh.micromath.math.CalculatedValue: double real>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,double)>($d1, $d0);

        $r5 = virtualinvoke r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setValue(double)>($d0);

        return $r5;
    }
    public void processRealTerm(com.mkulesh.micromath.formula.CalculaterTask, com.mkulesh.micromath.formula.TermField) throws com.mkulesh.micromath.formula.CalculaterTask$CancelException
    {
        com.mkulesh.micromath.math.CalculatedValue r0;
        com.mkulesh.micromath.formula.CalculaterTask $r1;
        com.mkulesh.micromath.formula.TermField $r2;
        boolean $z0;
        com.mkulesh.micromath.math.CalculatedValue$ErrorType $r3;

        r0 := @this: com.mkulesh.micromath.math.CalculatedValue;

        $r1 := @parameter0: com.mkulesh.micromath.formula.CalculaterTask;

        $r2 := @parameter1: com.mkulesh.micromath.formula.TermField;

        virtualinvoke $r2.<com.mkulesh.micromath.formula.TermField: com.mkulesh.micromath.math.CalculatedValue$ValueType getValue(com.mkulesh.micromath.formula.CalculaterTask,com.mkulesh.micromath.math.CalculatedValue)>($r1, r0);

        $z0 = virtualinvoke r0.<com.mkulesh.micromath.math.CalculatedValue: boolean isReal()>();

        if $z0 != 0 goto label1;

        $r3 = <com.mkulesh.micromath.math.CalculatedValue$ErrorType: com.mkulesh.micromath.math.CalculatedValue$ErrorType NOT_A_REAL>;

        virtualinvoke r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType invalidate(com.mkulesh.micromath.math.CalculatedValue$ErrorType)>($r3);

     label1:
        return;
    }
    public com.mkulesh.micromath.math.CalculatedValue$ValueType random(com.mkulesh.micromath.math.CalculatedValue)
    {
        com.mkulesh.micromath.math.CalculatedValue r0, $r1;
        double $d0, $d1, $d2;
        boolean $z0;
        com.mkulesh.micromath.math.CalculatedValue$ValueType $r2;

        r0 := @this: com.mkulesh.micromath.math.CalculatedValue;

        $r1 := @parameter0: com.mkulesh.micromath.math.CalculatedValue;

        $z0 = virtualinvoke $r1.<com.mkulesh.micromath.math.CalculatedValue: boolean isComplex()>();

        if $z0 == 0 goto label1;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double random()>();

        $d0 = $r1.<com.mkulesh.micromath.math.CalculatedValue: double real>;

        $d1 = $d1 * $d0;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double random()>();

        $d0 = $r1.<com.mkulesh.micromath.math.CalculatedValue: double imaginary>;

        $d0 = $d2 * $d0;

        $r2 = virtualinvoke r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setComplexValue(double,double)>($d1, $d0);

        return $r2;

     label1:
        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double random()>();

        $d0 = $r1.<com.mkulesh.micromath.math.CalculatedValue: double real>;

        $d1 = $d1 * $d0;

        $r2 = virtualinvoke r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setValue(double)>($d1);

        return $r2;
    }
    public com.mkulesh.micromath.math.CalculatedValue$ValueType setComplexValue(double, double)
    {
        com.mkulesh.micromath.math.CalculatedValue r0;
        double $d0, $d1;
        byte $b0;
        com.mkulesh.micromath.math.CalculatedValue$ValueType $r1;

        r0 := @this: com.mkulesh.micromath.math.CalculatedValue;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        r0.<com.mkulesh.micromath.math.CalculatedValue: double real> = $d0;

        r0.<com.mkulesh.micromath.math.CalculatedValue: double imaginary> = $d1;

        $b0 = $d1 cmpl 0.0;

        if $b0 == 0 goto label2;

        $r1 = <com.mkulesh.micromath.math.CalculatedValue$ValueType: com.mkulesh.micromath.math.CalculatedValue$ValueType COMPLEX>;

     label1:
        r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType valueType> = $r1;

        $r1 = r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType valueType>;

        return $r1;

     label2:
        $r1 = <com.mkulesh.micromath.math.CalculatedValue$ValueType: com.mkulesh.micromath.math.CalculatedValue$ValueType REAL>;

        goto label1;
    }
    public com.mkulesh.micromath.math.CalculatedValue$ValueType setComplexValue(org.apache.commons.math3.complex.Complex)
    {
        com.mkulesh.micromath.math.CalculatedValue r0;
        org.apache.commons.math3.complex.Complex $r1;
        double $d0;
        byte $b0;
        com.mkulesh.micromath.math.CalculatedValue$ValueType $r2;

        r0 := @this: com.mkulesh.micromath.math.CalculatedValue;

        $r1 := @parameter0: org.apache.commons.math3.complex.Complex;

        $d0 = virtualinvoke $r1.<org.apache.commons.math3.complex.Complex: double getReal()>();

        r0.<com.mkulesh.micromath.math.CalculatedValue: double real> = $d0;

        $d0 = virtualinvoke $r1.<org.apache.commons.math3.complex.Complex: double getImaginary()>();

        r0.<com.mkulesh.micromath.math.CalculatedValue: double imaginary> = $d0;

        $d0 = r0.<com.mkulesh.micromath.math.CalculatedValue: double imaginary>;

        $b0 = $d0 cmpl 0.0;

        if $b0 == 0 goto label2;

        $r2 = <com.mkulesh.micromath.math.CalculatedValue$ValueType: com.mkulesh.micromath.math.CalculatedValue$ValueType COMPLEX>;

     label1:
        r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType valueType> = $r2;

        $r2 = r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType valueType>;

        return $r2;

     label2:
        $r2 = <com.mkulesh.micromath.math.CalculatedValue$ValueType: com.mkulesh.micromath.math.CalculatedValue$ValueType REAL>;

        goto label1;
    }
    public com.mkulesh.micromath.math.CalculatedValue$ValueType setValue(double)
    {
        com.mkulesh.micromath.math.CalculatedValue r0;
        double $d0;
        com.mkulesh.micromath.math.CalculatedValue$ValueType $r1;

        r0 := @this: com.mkulesh.micromath.math.CalculatedValue;

        $d0 := @parameter0: double;

        r0.<com.mkulesh.micromath.math.CalculatedValue: double real> = $d0;

        r0.<com.mkulesh.micromath.math.CalculatedValue: double imaginary> = 0.0;

        $r1 = <com.mkulesh.micromath.math.CalculatedValue$ValueType: com.mkulesh.micromath.math.CalculatedValue$ValueType REAL>;

        r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType valueType> = $r1;

        $r1 = r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType valueType>;

        return $r1;
    }
    public com.mkulesh.micromath.math.CalculatedValue$ValueType sin(com.mkulesh.micromath.math.CalculatedValue)
    {
        com.mkulesh.micromath.math.CalculatedValue r0, $r1;
        boolean $z0;
        org.apache.commons.math3.complex.Complex $r2;
        com.mkulesh.micromath.math.CalculatedValue$ValueType $r3;
        double $d0;

        r0 := @this: com.mkulesh.micromath.math.CalculatedValue;

        $r1 := @parameter0: com.mkulesh.micromath.math.CalculatedValue;

        $z0 = virtualinvoke $r1.<com.mkulesh.micromath.math.CalculatedValue: boolean isComplex()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke $r1.<com.mkulesh.micromath.math.CalculatedValue: org.apache.commons.math3.complex.Complex getComplex()>();

        $r2 = virtualinvoke $r2.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex sin()>();

        $r3 = virtualinvoke r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setComplexValue(org.apache.commons.math3.complex.Complex)>($r2);

        return $r3;

     label1:
        $d0 = $r1.<com.mkulesh.micromath.math.CalculatedValue: double real>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sin(double)>($d0);

        $r3 = virtualinvoke r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setValue(double)>($d0);

        return $r3;
    }
    public com.mkulesh.micromath.math.CalculatedValue$ValueType sinh(com.mkulesh.micromath.math.CalculatedValue)
    {
        com.mkulesh.micromath.math.CalculatedValue r0, $r1;
        boolean $z0;
        org.apache.commons.math3.complex.Complex $r2;
        com.mkulesh.micromath.math.CalculatedValue$ValueType $r3;
        double $d0;

        r0 := @this: com.mkulesh.micromath.math.CalculatedValue;

        $r1 := @parameter0: com.mkulesh.micromath.math.CalculatedValue;

        $z0 = virtualinvoke $r1.<com.mkulesh.micromath.math.CalculatedValue: boolean isComplex()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke $r1.<com.mkulesh.micromath.math.CalculatedValue: org.apache.commons.math3.complex.Complex getComplex()>();

        $r2 = virtualinvoke $r2.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex sinh()>();

        $r3 = virtualinvoke r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setComplexValue(org.apache.commons.math3.complex.Complex)>($r2);

        return $r3;

     label1:
        $d0 = $r1.<com.mkulesh.micromath.math.CalculatedValue: double real>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sinh(double)>($d0);

        $r3 = virtualinvoke r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setValue(double)>($d0);

        return $r3;
    }
    public com.mkulesh.micromath.math.CalculatedValue$ValueType sqrt(com.mkulesh.micromath.math.CalculatedValue)
    {
        com.mkulesh.micromath.math.CalculatedValue r0, $r1;
        boolean $z0;
        double $d0;
        byte $b0;
        org.apache.commons.math3.complex.Complex $r2;
        com.mkulesh.micromath.math.CalculatedValue$ValueType $r3;

        r0 := @this: com.mkulesh.micromath.math.CalculatedValue;

        $r1 := @parameter0: com.mkulesh.micromath.math.CalculatedValue;

        $z0 = virtualinvoke $r1.<com.mkulesh.micromath.math.CalculatedValue: boolean isComplex()>();

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r1.<com.mkulesh.micromath.math.CalculatedValue: boolean isReal()>();

        if $z0 == 0 goto label2;

        $d0 = $r1.<com.mkulesh.micromath.math.CalculatedValue: double real>;

        $b0 = $d0 cmpg 0.0;

        if $b0 >= 0 goto label2;

     label1:
        $r2 = virtualinvoke $r1.<com.mkulesh.micromath.math.CalculatedValue: org.apache.commons.math3.complex.Complex getComplex()>();

        $r2 = virtualinvoke $r2.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex sqrt()>();

        $r3 = virtualinvoke r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setComplexValue(org.apache.commons.math3.complex.Complex)>($r2);

        return $r3;

     label2:
        $d0 = $r1.<com.mkulesh.micromath.math.CalculatedValue: double real>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d0);

        $r3 = virtualinvoke r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setValue(double)>($d0);

        return $r3;
    }
    public com.mkulesh.micromath.math.CalculatedValue$ValueType subtract(com.mkulesh.micromath.math.CalculatedValue, com.mkulesh.micromath.math.CalculatedValue)
    {
        com.mkulesh.micromath.math.CalculatedValue r0, $r1, $r2;
        double $d0, $d1, $d2;
        boolean $z0;
        com.mkulesh.micromath.math.CalculatedValue$ValueType $r3;

        r0 := @this: com.mkulesh.micromath.math.CalculatedValue;

        $r1 := @parameter0: com.mkulesh.micromath.math.CalculatedValue;

        $r2 := @parameter1: com.mkulesh.micromath.math.CalculatedValue;

        $z0 = virtualinvoke $r1.<com.mkulesh.micromath.math.CalculatedValue: boolean isComplex()>();

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r2.<com.mkulesh.micromath.math.CalculatedValue: boolean isComplex()>();

        if $z0 == 0 goto label2;

     label1:
        $d1 = $r1.<com.mkulesh.micromath.math.CalculatedValue: double real>;

        $d0 = $r2.<com.mkulesh.micromath.math.CalculatedValue: double real>;

        $d1 = $d1 - $d0;

        $d2 = $r1.<com.mkulesh.micromath.math.CalculatedValue: double imaginary>;

        $d0 = $r2.<com.mkulesh.micromath.math.CalculatedValue: double imaginary>;

        $d0 = $d2 - $d0;

        $r3 = virtualinvoke r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setComplexValue(double,double)>($d1, $d0);

        return $r3;

     label2:
        $d1 = $r1.<com.mkulesh.micromath.math.CalculatedValue: double real>;

        $d0 = $r2.<com.mkulesh.micromath.math.CalculatedValue: double real>;

        $d1 = $d1 - $d0;

        $r3 = virtualinvoke r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setValue(double)>($d1);

        return $r3;
    }
    public com.mkulesh.micromath.math.CalculatedValue$ValueType tan(com.mkulesh.micromath.math.CalculatedValue)
    {
        com.mkulesh.micromath.math.CalculatedValue r0, $r1;
        boolean $z0;
        org.apache.commons.math3.complex.Complex $r2;
        com.mkulesh.micromath.math.CalculatedValue$ValueType $r3;
        double $d0;

        r0 := @this: com.mkulesh.micromath.math.CalculatedValue;

        $r1 := @parameter0: com.mkulesh.micromath.math.CalculatedValue;

        $z0 = virtualinvoke $r1.<com.mkulesh.micromath.math.CalculatedValue: boolean isComplex()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke $r1.<com.mkulesh.micromath.math.CalculatedValue: org.apache.commons.math3.complex.Complex getComplex()>();

        $r2 = virtualinvoke $r2.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex tan()>();

        $r3 = virtualinvoke r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setComplexValue(org.apache.commons.math3.complex.Complex)>($r2);

        return $r3;

     label1:
        $d0 = $r1.<com.mkulesh.micromath.math.CalculatedValue: double real>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double tan(double)>($d0);

        $r3 = virtualinvoke r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setValue(double)>($d0);

        return $r3;
    }
    public com.mkulesh.micromath.math.CalculatedValue$ValueType tanh(com.mkulesh.micromath.math.CalculatedValue)
    {
        com.mkulesh.micromath.math.CalculatedValue r0, $r1;
        boolean $z0;
        org.apache.commons.math3.complex.Complex $r2;
        com.mkulesh.micromath.math.CalculatedValue$ValueType $r3;
        double $d0;

        r0 := @this: com.mkulesh.micromath.math.CalculatedValue;

        $r1 := @parameter0: com.mkulesh.micromath.math.CalculatedValue;

        $z0 = virtualinvoke $r1.<com.mkulesh.micromath.math.CalculatedValue: boolean isComplex()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke $r1.<com.mkulesh.micromath.math.CalculatedValue: org.apache.commons.math3.complex.Complex getComplex()>();

        $r2 = virtualinvoke $r2.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex tanh()>();

        $r3 = virtualinvoke r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setComplexValue(org.apache.commons.math3.complex.Complex)>($r2);

        return $r3;

     label1:
        $d0 = $r1.<com.mkulesh.micromath.math.CalculatedValue: double real>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double tanh(double)>($d0);

        $r3 = virtualinvoke r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setValue(double)>($d0);

        return $r3;
    }
    public java.lang.String toString()
    {
        com.mkulesh.micromath.math.CalculatedValue r0;
        java.lang.StringBuilder $r1;
        com.mkulesh.micromath.math.CalculatedValue$ValueType $r2;
        java.lang.String $r3;
        double $d0;

        r0 := @this: com.mkulesh.micromath.math.CalculatedValue;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType valueType>;

        $r3 = virtualinvoke $r2.<com.mkulesh.micromath.math.CalculatedValue$ValueType: java.lang.String toString()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $d0 = r0.<com.mkulesh.micromath.math.CalculatedValue: double real>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $d0 = r0.<com.mkulesh.micromath.math.CalculatedValue: double imaginary>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }
