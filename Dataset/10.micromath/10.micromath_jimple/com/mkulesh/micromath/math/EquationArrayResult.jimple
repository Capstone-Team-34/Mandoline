com.mkulesh.micromath.math.EquationArrayResult extends java.lang.Object
private static final int D0
private static final int D1
private static final int D2
public static final int MAX_DIMENSION
private int[] dimensions
private final com.mkulesh.micromath.formula.Equation equation
private final com.mkulesh.micromath.formula.TermField equationTerm
private int[] idxValues
private com.mkulesh.micromath.math.CalculatedValue[] values
    public void <init>(int)
    {
        com.mkulesh.micromath.math.EquationArrayResult r0;
        int $i0;
        int[] r1;

        r0 := @this: com.mkulesh.micromath.math.EquationArrayResult;

        $i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.mkulesh.micromath.math.EquationArrayResult: int[] dimensions> = null;

        r0.<com.mkulesh.micromath.math.EquationArrayResult: com.mkulesh.micromath.math.CalculatedValue[] values> = null;

        r0.<com.mkulesh.micromath.math.EquationArrayResult: int[] idxValues> = null;

        r0.<com.mkulesh.micromath.math.EquationArrayResult: com.mkulesh.micromath.formula.Equation equation> = null;

        r0.<com.mkulesh.micromath.math.EquationArrayResult: com.mkulesh.micromath.formula.TermField equationTerm> = null;

        r1 = newarray (int)[1];

        r1[0] = $i0;

        specialinvoke r0.<com.mkulesh.micromath.math.EquationArrayResult: void resize(int[])>(r1);

        return;
    }
    public void <init>(int, int)
    {
        com.mkulesh.micromath.math.EquationArrayResult r0;
        int $i0, $i1;
        int[] r1;

        r0 := @this: com.mkulesh.micromath.math.EquationArrayResult;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.mkulesh.micromath.math.EquationArrayResult: int[] dimensions> = null;

        r0.<com.mkulesh.micromath.math.EquationArrayResult: com.mkulesh.micromath.math.CalculatedValue[] values> = null;

        r0.<com.mkulesh.micromath.math.EquationArrayResult: int[] idxValues> = null;

        r0.<com.mkulesh.micromath.math.EquationArrayResult: com.mkulesh.micromath.formula.Equation equation> = null;

        r0.<com.mkulesh.micromath.math.EquationArrayResult: com.mkulesh.micromath.formula.TermField equationTerm> = null;

        r1 = newarray (int)[2];

        r1[0] = $i0;

        r1[1] = $i1;

        specialinvoke r0.<com.mkulesh.micromath.math.EquationArrayResult: void resize(int[])>(r1);

        return;
    }
    public void <init>(com.mkulesh.micromath.formula.Equation, com.mkulesh.micromath.formula.TermField)
    {
        com.mkulesh.micromath.math.EquationArrayResult r0;
        com.mkulesh.micromath.formula.Equation $r1;
        com.mkulesh.micromath.formula.TermField $r2;

        r0 := @this: com.mkulesh.micromath.math.EquationArrayResult;

        $r1 := @parameter0: com.mkulesh.micromath.formula.Equation;

        $r2 := @parameter1: com.mkulesh.micromath.formula.TermField;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.mkulesh.micromath.math.EquationArrayResult: int[] dimensions> = null;

        r0.<com.mkulesh.micromath.math.EquationArrayResult: com.mkulesh.micromath.math.CalculatedValue[] values> = null;

        r0.<com.mkulesh.micromath.math.EquationArrayResult: int[] idxValues> = null;

        r0.<com.mkulesh.micromath.math.EquationArrayResult: com.mkulesh.micromath.formula.Equation equation> = $r1;

        r0.<com.mkulesh.micromath.math.EquationArrayResult: com.mkulesh.micromath.formula.TermField equationTerm> = $r2;

        return;
    }
    private int getIndex(int, int)
    {
        com.mkulesh.micromath.math.EquationArrayResult r0;
        int $i0, $i1, $i2;
        int[] $r1;

        r0 := @this: com.mkulesh.micromath.math.EquationArrayResult;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = r0.<com.mkulesh.micromath.math.EquationArrayResult: int[] dimensions>;

        $i2 = $r1[1];

        $i0 = $i2 * $i0;

        $i0 = $i0 + $i1;

        return $i0;
    }
    private int getIndex(int, int, int)
    {
        com.mkulesh.micromath.math.EquationArrayResult r0;
        int $i0, $i1, $i2, $i3;
        int[] $r1;

        r0 := @this: com.mkulesh.micromath.math.EquationArrayResult;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $r1 = r0.<com.mkulesh.micromath.math.EquationArrayResult: int[] dimensions>;

        $i3 = $r1[1];

        $i0 = $i3 * $i0;

        $i0 = $i0 + $i1;

        $r1 = r0.<com.mkulesh.micromath.math.EquationArrayResult: int[] dimensions>;

        $i1 = $r1[2];

        $i0 = $i0 * $i1;

        $i0 = $i0 + $i2;

        return $i0;
    }
    private void resize(int[])
    {
        com.mkulesh.micromath.math.EquationArrayResult r0;
        int[] $r1;
        int i0, i1, $i2, $i3;
        com.mkulesh.micromath.math.CalculatedValue[] $r2;
        com.mkulesh.micromath.math.CalculatedValue $r3;
        com.mkulesh.micromath.math.CalculatedValue$ValueType $r4;

        r0 := @this: com.mkulesh.micromath.math.EquationArrayResult;

        $r1 := @parameter0: int[];

        r0.<com.mkulesh.micromath.math.EquationArrayResult: int[] dimensions> = $r1;

        i1 = 1;

        $r1 = r0.<com.mkulesh.micromath.math.EquationArrayResult: int[] dimensions>;

        $i2 = lengthof $r1;

        $i3 = 0;

     label1:
        if $i3 >= $i2 goto label2;

        i0 = $r1[$i3];

        i1 = i1 * i0;

        $i3 = $i3 + 1;

        goto label1;

     label2:
        $r2 = newarray (com.mkulesh.micromath.math.CalculatedValue)[i1];

        r0.<com.mkulesh.micromath.math.EquationArrayResult: com.mkulesh.micromath.math.CalculatedValue[] values> = $r2;

        i0 = 0;

     label3:
        if i0 >= i1 goto label4;

        $r2 = r0.<com.mkulesh.micromath.math.EquationArrayResult: com.mkulesh.micromath.math.CalculatedValue[] values>;

        $r3 = new com.mkulesh.micromath.math.CalculatedValue;

        $r4 = <com.mkulesh.micromath.math.CalculatedValue$ValueType: com.mkulesh.micromath.math.CalculatedValue$ValueType REAL>;

        specialinvoke $r3.<com.mkulesh.micromath.math.CalculatedValue: void <init>(com.mkulesh.micromath.math.CalculatedValue$ValueType,double,double)>($r4, 0.0, 0.0);

        $r2[i0] = $r3;

        i0 = i0 + 1;

        goto label3;

     label4:
        $r1 = r0.<com.mkulesh.micromath.math.EquationArrayResult: int[] dimensions>;

        i1 = lengthof $r1;

        $r1 = newarray (int)[i1];

        r0.<com.mkulesh.micromath.math.EquationArrayResult: int[] idxValues> = $r1;

        return;
    }
    public void calculate(com.mkulesh.micromath.formula.CalculaterTask, java.util.ArrayList) throws com.mkulesh.micromath.formula.CalculaterTask$CancelException
    {
        com.mkulesh.micromath.math.EquationArrayResult r0;
        com.mkulesh.micromath.formula.CalculaterTask $r1;
        java.util.ArrayList r2, r5, $r11;
        com.mkulesh.micromath.math.CalculatedValue[] r3, $r16;
        int[] r4;
        int $i0, i1, $i2, $i3;
        com.mkulesh.micromath.formula.Equation $r6;
        com.mkulesh.micromath.formula.FormulaList $r7;
        java.lang.Object $r8;
        java.lang.String $r9;
        com.mkulesh.micromath.formula.FormulaBase $r10;
        boolean $z0;
        java.lang.Double $r12;
        com.mkulesh.micromath.math.CalculatedValue $r13;
        java.util.Iterator $r14, $r17, $r18;
        double $d0;
        com.mkulesh.micromath.formula.TermField $r15;

        r0 := @this: com.mkulesh.micromath.math.EquationArrayResult;

        $r1 := @parameter0: com.mkulesh.micromath.formula.CalculaterTask;

        r2 := @parameter1: java.util.ArrayList;

        r0.<com.mkulesh.micromath.math.EquationArrayResult: com.mkulesh.micromath.math.CalculatedValue[] values> = null;

        $i0 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        if $i0 < 1 goto label9;

        if $i0 <= 3 goto label1;

        return;

     label1:
        r5 = new java.util.ArrayList;

        specialinvoke r5.<java.util.ArrayList: void <init>()>();

        r4 = newarray (int)[$i0];

        r3 = newarray (com.mkulesh.micromath.math.CalculatedValue)[$i0];

        i1 = 0;

     label2:
        if i1 >= $i0 goto label3;

        $r6 = r0.<com.mkulesh.micromath.math.EquationArrayResult: com.mkulesh.micromath.formula.Equation equation>;

        $r7 = virtualinvoke $r6.<com.mkulesh.micromath.formula.Equation: com.mkulesh.micromath.formula.FormulaList getFormulaList()>();

        $r8 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r9 = (java.lang.String) $r8;

        $r6 = r0.<com.mkulesh.micromath.math.EquationArrayResult: com.mkulesh.micromath.formula.Equation equation>;

        $i2 = virtualinvoke $r6.<com.mkulesh.micromath.formula.Equation: int getId()>();

        $r10 = virtualinvoke $r7.<com.mkulesh.micromath.formula.FormulaList: com.mkulesh.micromath.formula.FormulaBase getFormula(java.lang.String,int,int,boolean)>($r9, 0, $i2, 1);

        if $r10 == null goto label9;

        $z0 = $r10 instanceof com.mkulesh.micromath.formula.Equation;

        if $z0 == 0 goto label9;

        $r6 = (com.mkulesh.micromath.formula.Equation) $r10;

        $z0 = virtualinvoke $r6.<com.mkulesh.micromath.formula.Equation: boolean isInterval()>();

        if $z0 == 0 goto label9;

        $r6 = (com.mkulesh.micromath.formula.Equation) $r10;

        $r11 = virtualinvoke $r6.<com.mkulesh.micromath.formula.Equation: java.util.ArrayList getInterval(com.mkulesh.micromath.formula.CalculaterTask)>($r1);

        if $r11 == null goto label9;

        $z0 = virtualinvoke $r11.<java.util.ArrayList: boolean isEmpty()>();

        if $z0 != 0 goto label9;

        $i2 = virtualinvoke $r11.<java.util.ArrayList: int size()>();

        $i2 = $i2 + -1;

        $r8 = virtualinvoke $r11.<java.util.ArrayList: java.lang.Object get(int)>($i2);

        $r12 = (java.lang.Double) $r8;

        $i2 = virtualinvoke $r12.<java.lang.Double: int intValue()>();

        if $i2 <= 0 goto label9;

        $i2 = $i2 + 1;

        r4[i1] = $i2;

        virtualinvoke r5.<java.util.ArrayList: boolean add(java.lang.Object)>($r11);

        $r13 = new com.mkulesh.micromath.math.CalculatedValue;

        specialinvoke $r13.<com.mkulesh.micromath.math.CalculatedValue: void <init>()>();

        r3[i1] = $r13;

        i1 = i1 + 1;

        goto label2;

     label3:
        specialinvoke r0.<com.mkulesh.micromath.math.EquationArrayResult: void resize(int[])>(r4);

        $r6 = r0.<com.mkulesh.micromath.math.EquationArrayResult: com.mkulesh.micromath.formula.Equation equation>;

        virtualinvoke $r6.<com.mkulesh.micromath.formula.Equation: boolean setArgumentValues(com.mkulesh.micromath.math.CalculatedValue[])>(r3);

        $r8 = virtualinvoke r5.<java.util.ArrayList: java.lang.Object get(int)>(0);

        r2 = (java.util.ArrayList) $r8;

        $r14 = virtualinvoke r2.<java.util.ArrayList: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label9;

        $r8 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        $r12 = (java.lang.Double) $r8;

        i1 = virtualinvoke $r12.<java.lang.Double: int intValue()>();

        $r13 = r3[0];

        $d0 = virtualinvoke $r12.<java.lang.Double: double doubleValue()>();

        virtualinvoke $r13.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setValue(double)>($d0);

        if $i0 != 1 goto label5;

        $r15 = r0.<com.mkulesh.micromath.math.EquationArrayResult: com.mkulesh.micromath.formula.TermField equationTerm>;

        $r16 = r0.<com.mkulesh.micromath.math.EquationArrayResult: com.mkulesh.micromath.math.CalculatedValue[] values>;

        $r13 = $r16[i1];

        virtualinvoke $r15.<com.mkulesh.micromath.formula.TermField: com.mkulesh.micromath.math.CalculatedValue$ValueType getValue(com.mkulesh.micromath.formula.CalculaterTask,com.mkulesh.micromath.math.CalculatedValue)>($r1, $r13);

        goto label4;

     label5:
        $r8 = virtualinvoke r5.<java.util.ArrayList: java.lang.Object get(int)>(1);

        r2 = (java.util.ArrayList) $r8;

        $r17 = virtualinvoke r2.<java.util.ArrayList: java.util.Iterator iterator()>();

     label6:
        $z0 = interfaceinvoke $r17.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r8 = interfaceinvoke $r17.<java.util.Iterator: java.lang.Object next()>();

        $r12 = (java.lang.Double) $r8;

        $i2 = virtualinvoke $r12.<java.lang.Double: int intValue()>();

        $r13 = r3[1];

        $d0 = virtualinvoke $r12.<java.lang.Double: double doubleValue()>();

        virtualinvoke $r13.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setValue(double)>($d0);

        if $i0 != 2 goto label7;

        $r15 = r0.<com.mkulesh.micromath.math.EquationArrayResult: com.mkulesh.micromath.formula.TermField equationTerm>;

        $r16 = r0.<com.mkulesh.micromath.math.EquationArrayResult: com.mkulesh.micromath.math.CalculatedValue[] values>;

        $i2 = specialinvoke r0.<com.mkulesh.micromath.math.EquationArrayResult: int getIndex(int,int)>(i1, $i2);

        $r13 = $r16[$i2];

        virtualinvoke $r15.<com.mkulesh.micromath.formula.TermField: com.mkulesh.micromath.math.CalculatedValue$ValueType getValue(com.mkulesh.micromath.formula.CalculaterTask,com.mkulesh.micromath.math.CalculatedValue)>($r1, $r13);

        goto label6;

     label7:
        $r8 = virtualinvoke r5.<java.util.ArrayList: java.lang.Object get(int)>(2);

        r2 = (java.util.ArrayList) $r8;

        $r18 = virtualinvoke r2.<java.util.ArrayList: java.util.Iterator iterator()>();

     label8:
        $z0 = interfaceinvoke $r18.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r8 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();

        $r12 = (java.lang.Double) $r8;

        $i3 = virtualinvoke $r12.<java.lang.Double: int intValue()>();

        $r13 = r3[2];

        $d0 = virtualinvoke $r12.<java.lang.Double: double doubleValue()>();

        virtualinvoke $r13.<com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue$ValueType setValue(double)>($d0);

        $r15 = r0.<com.mkulesh.micromath.math.EquationArrayResult: com.mkulesh.micromath.formula.TermField equationTerm>;

        $r16 = r0.<com.mkulesh.micromath.math.EquationArrayResult: com.mkulesh.micromath.math.CalculatedValue[] values>;

        $i3 = specialinvoke r0.<com.mkulesh.micromath.math.EquationArrayResult: int getIndex(int,int,int)>(i1, $i2, $i3);

        $r13 = $r16[$i3];

        virtualinvoke $r15.<com.mkulesh.micromath.formula.TermField: com.mkulesh.micromath.math.CalculatedValue$ValueType getValue(com.mkulesh.micromath.formula.CalculaterTask,com.mkulesh.micromath.math.CalculatedValue)>($r1, $r13);

        goto label8;

     label9:
        return;
    }
    public int getDimNumber()
    {
        com.mkulesh.micromath.math.EquationArrayResult r0;
        int[] $r1;
        int $i0;

        r0 := @this: com.mkulesh.micromath.math.EquationArrayResult;

        $r1 = r0.<com.mkulesh.micromath.math.EquationArrayResult: int[] dimensions>;

        if $r1 != null goto label1;

        return -1;

     label1:
        $r1 = r0.<com.mkulesh.micromath.math.EquationArrayResult: int[] dimensions>;

        $i0 = lengthof $r1;

        return $i0;
    }
    public int[] getDimensions()
    {
        com.mkulesh.micromath.math.EquationArrayResult r0;
        int[] r1;

        r0 := @this: com.mkulesh.micromath.math.EquationArrayResult;

        r1 = r0.<com.mkulesh.micromath.math.EquationArrayResult: int[] dimensions>;

        return r1;
    }
    public com.mkulesh.micromath.math.CalculatedValue[] getRawValues()
    {
        com.mkulesh.micromath.math.EquationArrayResult r0;
        com.mkulesh.micromath.math.CalculatedValue[] r1;

        r0 := @this: com.mkulesh.micromath.math.EquationArrayResult;

        r1 = r0.<com.mkulesh.micromath.math.EquationArrayResult: com.mkulesh.micromath.math.CalculatedValue[] values>;

        return r1;
    }
    public com.mkulesh.micromath.math.CalculatedValue getValue(com.mkulesh.micromath.math.CalculatedValue[])
    {
        com.mkulesh.micromath.math.EquationArrayResult r0;
        com.mkulesh.micromath.math.CalculatedValue[] $r1, $r3;
        com.mkulesh.micromath.math.CalculatedValue r2;
        int $i0, $i1, $i2, $i3;
        boolean $z0;
        int[] $r4;

        r0 := @this: com.mkulesh.micromath.math.EquationArrayResult;

        $r1 := @parameter0: com.mkulesh.micromath.math.CalculatedValue[];

        $i0 = virtualinvoke r0.<com.mkulesh.micromath.math.EquationArrayResult: int getDimNumber()>();

        $r3 = r0.<com.mkulesh.micromath.math.EquationArrayResult: com.mkulesh.micromath.math.CalculatedValue[] values>;

        if $r3 == null goto label01;

        $i1 = lengthof $r1;

        if $i1 == $i0 goto label02;

     label01:
        r2 = <com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue NaN>;

        return r2;

     label02:
        $i1 = 0;

     label03:
        if $i1 >= $i0 goto label07;

        r2 = $r1[$i1];

        $z0 = virtualinvoke r2.<com.mkulesh.micromath.math.CalculatedValue: boolean isReal()>();

        if $z0 != 0 goto label04;

        r2 = <com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue NaN>;

        return r2;

     label04:
        $i2 = virtualinvoke r2.<com.mkulesh.micromath.math.CalculatedValue: int getInteger()>();

        if $i2 < 0 goto label05;

        $r4 = r0.<com.mkulesh.micromath.math.EquationArrayResult: int[] dimensions>;

        $i3 = $r4[$i1];

        if $i2 < $i3 goto label06;

     label05:
        r2 = <com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue NaN>;

        return r2;

     label06:
        $r4 = r0.<com.mkulesh.micromath.math.EquationArrayResult: int[] idxValues>;

        $r4[$i1] = $i2;

        $i1 = $i1 + 1;

        goto label03;

     label07:
        lookupswitch($i0)
        {
            case 1: goto label09;
            case 2: goto label10;
            case 3: goto label11;
            default: goto label08;
        };

     label08:
        r2 = <com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue NaN>;

        return r2;

     label09:
        $r1 = r0.<com.mkulesh.micromath.math.EquationArrayResult: com.mkulesh.micromath.math.CalculatedValue[] values>;

        $r4 = r0.<com.mkulesh.micromath.math.EquationArrayResult: int[] idxValues>;

        $i0 = $r4[0];

        r2 = $r1[$i0];

        return r2;

     label10:
        $r1 = r0.<com.mkulesh.micromath.math.EquationArrayResult: com.mkulesh.micromath.math.CalculatedValue[] values>;

        $r4 = r0.<com.mkulesh.micromath.math.EquationArrayResult: int[] idxValues>;

        $i0 = $r4[0];

        $r4 = r0.<com.mkulesh.micromath.math.EquationArrayResult: int[] idxValues>;

        $i1 = $r4[1];

        $i0 = specialinvoke r0.<com.mkulesh.micromath.math.EquationArrayResult: int getIndex(int,int)>($i0, $i1);

        r2 = $r1[$i0];

        return r2;

     label11:
        $r1 = r0.<com.mkulesh.micromath.math.EquationArrayResult: com.mkulesh.micromath.math.CalculatedValue[] values>;

        $r4 = r0.<com.mkulesh.micromath.math.EquationArrayResult: int[] idxValues>;

        $i0 = $r4[0];

        $r4 = r0.<com.mkulesh.micromath.math.EquationArrayResult: int[] idxValues>;

        $i1 = $r4[1];

        $r4 = r0.<com.mkulesh.micromath.math.EquationArrayResult: int[] idxValues>;

        $i2 = $r4[2];

        $i0 = specialinvoke r0.<com.mkulesh.micromath.math.EquationArrayResult: int getIndex(int,int,int)>($i0, $i1, $i2);

        r2 = $r1[$i0];

        return r2;
    }
    public com.mkulesh.micromath.math.CalculatedValue getValue1D(int)
    {
        com.mkulesh.micromath.math.EquationArrayResult r0;
        int $i0, $i1;
        com.mkulesh.micromath.math.CalculatedValue[] $r1;
        int[] $r2;
        com.mkulesh.micromath.math.CalculatedValue $r3;

        r0 := @this: com.mkulesh.micromath.math.EquationArrayResult;

        $i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<com.mkulesh.micromath.math.EquationArrayResult: int getDimNumber()>();

        $r1 = r0.<com.mkulesh.micromath.math.EquationArrayResult: com.mkulesh.micromath.math.CalculatedValue[] values>;

        if $r1 == null goto label1;

        if $i1 != 1 goto label1;

        if $i0 < 0 goto label1;

        $r2 = r0.<com.mkulesh.micromath.math.EquationArrayResult: int[] dimensions>;

        $i1 = $r2[0];

        if $i0 < $i1 goto label2;

     label1:
        $r3 = <com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue NaN>;

        return $r3;

     label2:
        $r1 = r0.<com.mkulesh.micromath.math.EquationArrayResult: com.mkulesh.micromath.math.CalculatedValue[] values>;

        $r3 = $r1[$i0];

        return $r3;
    }
    public com.mkulesh.micromath.math.CalculatedValue getValue2D(int, int)
    {
        com.mkulesh.micromath.math.EquationArrayResult r0;
        int $i0, $i1, $i2;
        com.mkulesh.micromath.math.CalculatedValue[] $r1;
        int[] $r2;
        com.mkulesh.micromath.math.CalculatedValue $r3;

        r0 := @this: com.mkulesh.micromath.math.EquationArrayResult;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 = virtualinvoke r0.<com.mkulesh.micromath.math.EquationArrayResult: int getDimNumber()>();

        $r1 = r0.<com.mkulesh.micromath.math.EquationArrayResult: com.mkulesh.micromath.math.CalculatedValue[] values>;

        if $r1 == null goto label1;

        if $i2 != 2 goto label1;

        if $i0 < 0 goto label1;

        $r2 = r0.<com.mkulesh.micromath.math.EquationArrayResult: int[] dimensions>;

        $i2 = $r2[0];

        if $i0 >= $i2 goto label1;

        if $i1 < 0 goto label1;

        $r2 = r0.<com.mkulesh.micromath.math.EquationArrayResult: int[] dimensions>;

        $i2 = $r2[1];

        if $i1 < $i2 goto label2;

     label1:
        $r3 = <com.mkulesh.micromath.math.CalculatedValue: com.mkulesh.micromath.math.CalculatedValue NaN>;

        return $r3;

     label2:
        $r1 = r0.<com.mkulesh.micromath.math.EquationArrayResult: com.mkulesh.micromath.math.CalculatedValue[] values>;

        $i0 = specialinvoke r0.<com.mkulesh.micromath.math.EquationArrayResult: int getIndex(int,int)>($i0, $i1);

        $r3 = $r1[$i0];

        return $r3;
    }
