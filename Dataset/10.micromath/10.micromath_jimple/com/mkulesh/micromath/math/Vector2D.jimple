com.mkulesh.micromath.math.Vector2D extends java.lang.Object implements android.os.Parcelable
public static final android.os.Parcelable$Creator CREATOR
public double x
public double y
    static void <clinit>()
    {
        com.mkulesh.micromath.math.Vector2D$1 $r0;

        $r0 = new com.mkulesh.micromath.math.Vector2D$1;

        specialinvoke $r0.<com.mkulesh.micromath.math.Vector2D$1: void <init>()>();

        <com.mkulesh.micromath.math.Vector2D: android.os.Parcelable$Creator CREATOR> = $r0;

        return;
    }
    public void <init>()
    {
        com.mkulesh.micromath.math.Vector2D r0;

        r0 := @this: com.mkulesh.micromath.math.Vector2D;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.mkulesh.micromath.math.Vector2D: double x> = 0.0;

        r0.<com.mkulesh.micromath.math.Vector2D: double y> = 0.0;

        return;
    }
    public void <init>(double, double)
    {
        com.mkulesh.micromath.math.Vector2D r0;
        double $d0, $d1;

        r0 := @this: com.mkulesh.micromath.math.Vector2D;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.mkulesh.micromath.math.Vector2D: double x> = 0.0;

        r0.<com.mkulesh.micromath.math.Vector2D: double y> = 0.0;

        r0.<com.mkulesh.micromath.math.Vector2D: double x> = $d0;

        r0.<com.mkulesh.micromath.math.Vector2D: double y> = $d1;

        return;
    }
    public void <init>(android.os.Parcel)
    {
        com.mkulesh.micromath.math.Vector2D r0;
        android.os.Parcel $r1;

        r0 := @this: com.mkulesh.micromath.math.Vector2D;

        $r1 := @parameter0: android.os.Parcel;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.mkulesh.micromath.math.Vector2D: double x> = 0.0;

        r0.<com.mkulesh.micromath.math.Vector2D: double y> = 0.0;

        virtualinvoke r0.<com.mkulesh.micromath.math.Vector2D: void readFromParcel(android.os.Parcel)>($r1);

        return;
    }
    public void <init>(com.mkulesh.micromath.math.Vector2D)
    {
        com.mkulesh.micromath.math.Vector2D r0, $r1;

        r0 := @this: com.mkulesh.micromath.math.Vector2D;

        $r1 := @parameter0: com.mkulesh.micromath.math.Vector2D;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.mkulesh.micromath.math.Vector2D: double x> = 0.0;

        r0.<com.mkulesh.micromath.math.Vector2D: double y> = 0.0;

        virtualinvoke r0.<com.mkulesh.micromath.math.Vector2D: void assign(com.mkulesh.micromath.math.Vector2D)>($r1);

        return;
    }
    public void add(com.mkulesh.micromath.math.Vector2D)
    {
        com.mkulesh.micromath.math.Vector2D r0, $r1;
        double $d0, $d1;

        r0 := @this: com.mkulesh.micromath.math.Vector2D;

        $r1 := @parameter0: com.mkulesh.micromath.math.Vector2D;

        $d0 = r0.<com.mkulesh.micromath.math.Vector2D: double x>;

        $d1 = $r1.<com.mkulesh.micromath.math.Vector2D: double x>;

        $d0 = $d0 + $d1;

        r0.<com.mkulesh.micromath.math.Vector2D: double x> = $d0;

        $d0 = r0.<com.mkulesh.micromath.math.Vector2D: double y>;

        $d1 = $r1.<com.mkulesh.micromath.math.Vector2D: double y>;

        $d0 = $d0 + $d1;

        r0.<com.mkulesh.micromath.math.Vector2D: double y> = $d0;

        return;
    }
    public void assign(com.mkulesh.micromath.math.Vector2D)
    {
        com.mkulesh.micromath.math.Vector2D r0, $r1;
        double $d0;

        r0 := @this: com.mkulesh.micromath.math.Vector2D;

        $r1 := @parameter0: com.mkulesh.micromath.math.Vector2D;

        $d0 = $r1.<com.mkulesh.micromath.math.Vector2D: double x>;

        r0.<com.mkulesh.micromath.math.Vector2D: double x> = $d0;

        $d0 = $r1.<com.mkulesh.micromath.math.Vector2D: double y>;

        r0.<com.mkulesh.micromath.math.Vector2D: double y> = $d0;

        return;
    }
    public int describeContents()
    {
        com.mkulesh.micromath.math.Vector2D r0;

        r0 := @this: com.mkulesh.micromath.math.Vector2D;

        return 0;
    }
    public com.mkulesh.micromath.math.Vector2D diff(com.mkulesh.micromath.math.Vector2D)
    {
        com.mkulesh.micromath.math.Vector2D r0, $r1, $r2;
        double $d0, $d1, $d2;

        r0 := @this: com.mkulesh.micromath.math.Vector2D;

        $r1 := @parameter0: com.mkulesh.micromath.math.Vector2D;

        $r2 = new com.mkulesh.micromath.math.Vector2D;

        $d1 = r0.<com.mkulesh.micromath.math.Vector2D: double x>;

        $d0 = $r1.<com.mkulesh.micromath.math.Vector2D: double x>;

        $d1 = $d1 - $d0;

        $d2 = r0.<com.mkulesh.micromath.math.Vector2D: double y>;

        $d0 = $r1.<com.mkulesh.micromath.math.Vector2D: double y>;

        $d0 = $d2 - $d0;

        specialinvoke $r2.<com.mkulesh.micromath.math.Vector2D: void <init>(double,double)>($d1, $d0);

        return $r2;
    }
    public double distance(com.mkulesh.micromath.math.Vector2D)
    {
        com.mkulesh.micromath.math.Vector2D r0, $r1;
        double $d0, $d1, $d2, $d3;

        r0 := @this: com.mkulesh.micromath.math.Vector2D;

        $r1 := @parameter0: com.mkulesh.micromath.math.Vector2D;

        $d1 = r0.<com.mkulesh.micromath.math.Vector2D: double x>;

        $d2 = $r1.<com.mkulesh.micromath.math.Vector2D: double x>;

        $d1 = $d1 - $d2;

        $d2 = r0.<com.mkulesh.micromath.math.Vector2D: double x>;

        $d0 = $r1.<com.mkulesh.micromath.math.Vector2D: double x>;

        $d2 = $d2 - $d0;

        $d1 = $d1 * $d2;

        $d2 = r0.<com.mkulesh.micromath.math.Vector2D: double y>;

        $d0 = $r1.<com.mkulesh.micromath.math.Vector2D: double y>;

        $d2 = $d2 - $d0;

        $d3 = r0.<com.mkulesh.micromath.math.Vector2D: double y>;

        $d0 = $r1.<com.mkulesh.micromath.math.Vector2D: double y>;

        $d0 = $d3 - $d0;

        $d2 = $d2 * $d0;

        $d1 = $d1 + $d2;

        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d1);

        return $d1;
    }
    public void divide(double)
    {
        com.mkulesh.micromath.math.Vector2D r0;
        double $d0, $d1;

        r0 := @this: com.mkulesh.micromath.math.Vector2D;

        $d0 := @parameter0: double;

        $d1 = r0.<com.mkulesh.micromath.math.Vector2D: double x>;

        $d1 = $d1 / $d0;

        r0.<com.mkulesh.micromath.math.Vector2D: double x> = $d1;

        $d1 = r0.<com.mkulesh.micromath.math.Vector2D: double y>;

        $d0 = $d1 / $d0;

        r0.<com.mkulesh.micromath.math.Vector2D: double y> = $d0;

        return;
    }
    public void divide(com.mkulesh.micromath.math.Vector2D)
    {
        com.mkulesh.micromath.math.Vector2D r0, $r1;
        double $d0, $d1;

        r0 := @this: com.mkulesh.micromath.math.Vector2D;

        $r1 := @parameter0: com.mkulesh.micromath.math.Vector2D;

        $d0 = r0.<com.mkulesh.micromath.math.Vector2D: double x>;

        $d1 = $r1.<com.mkulesh.micromath.math.Vector2D: double x>;

        $d0 = $d0 / $d1;

        r0.<com.mkulesh.micromath.math.Vector2D: double x> = $d0;

        $d0 = r0.<com.mkulesh.micromath.math.Vector2D: double y>;

        $d1 = $r1.<com.mkulesh.micromath.math.Vector2D: double y>;

        $d0 = $d0 / $d1;

        r0.<com.mkulesh.micromath.math.Vector2D: double y> = $d0;

        return;
    }
    public com.mkulesh.micromath.math.Vector2D division(double)
    {
        com.mkulesh.micromath.math.Vector2D r0, $r1;
        double $d0, $d1, $d2;

        r0 := @this: com.mkulesh.micromath.math.Vector2D;

        $d0 := @parameter0: double;

        $r1 = new com.mkulesh.micromath.math.Vector2D;

        $d1 = r0.<com.mkulesh.micromath.math.Vector2D: double x>;

        $d1 = $d1 / $d0;

        $d2 = r0.<com.mkulesh.micromath.math.Vector2D: double y>;

        $d0 = $d2 / $d0;

        specialinvoke $r1.<com.mkulesh.micromath.math.Vector2D: void <init>(double,double)>($d1, $d0);

        return $r1;
    }
    public void erase()
    {
        com.mkulesh.micromath.math.Vector2D r0;

        r0 := @this: com.mkulesh.micromath.math.Vector2D;

        r0.<com.mkulesh.micromath.math.Vector2D: double x> = 0.0;

        r0.<com.mkulesh.micromath.math.Vector2D: double y> = 0.0;

        return;
    }
    public void fillRandom(java.util.Random)
    {
        com.mkulesh.micromath.math.Vector2D r0;
        java.util.Random $r1;
        float $f0;
        double $d0;

        r0 := @this: com.mkulesh.micromath.math.Vector2D;

        $r1 := @parameter0: java.util.Random;

        $f0 = virtualinvoke $r1.<java.util.Random: float nextFloat()>();

        $d0 = (double) $f0;

        r0.<com.mkulesh.micromath.math.Vector2D: double x> = $d0;

        $f0 = virtualinvoke $r1.<java.util.Random: float nextFloat()>();

        $d0 = (double) $f0;

        r0.<com.mkulesh.micromath.math.Vector2D: double y> = $d0;

        return;
    }
    public double get(int)
    {
        com.mkulesh.micromath.math.Vector2D r0;
        int $i0;
        double d0;

        r0 := @this: com.mkulesh.micromath.math.Vector2D;

        $i0 := @parameter0: int;

        if $i0 != 0 goto label1;

        d0 = r0.<com.mkulesh.micromath.math.Vector2D: double x>;

        return d0;

     label1:
        d0 = r0.<com.mkulesh.micromath.math.Vector2D: double y>;

        return d0;
    }
    public void invalidate()
    {
        com.mkulesh.micromath.math.Vector2D r0;

        r0 := @this: com.mkulesh.micromath.math.Vector2D;

        r0.<com.mkulesh.micromath.math.Vector2D: double x> = #NaN;

        r0.<com.mkulesh.micromath.math.Vector2D: double y> = #NaN;

        return;
    }
    public boolean isEqual(com.mkulesh.micromath.math.Vector2D)
    {
        com.mkulesh.micromath.math.Vector2D r0, $r1;
        double $d0, $d1;
        byte $b0;

        r0 := @this: com.mkulesh.micromath.math.Vector2D;

        $r1 := @parameter0: com.mkulesh.micromath.math.Vector2D;

        $d0 = r0.<com.mkulesh.micromath.math.Vector2D: double x>;

        $d1 = $r1.<com.mkulesh.micromath.math.Vector2D: double x>;

        $b0 = $d0 cmpl $d1;

        if $b0 != 0 goto label1;

        $d0 = r0.<com.mkulesh.micromath.math.Vector2D: double y>;

        $d1 = $r1.<com.mkulesh.micromath.math.Vector2D: double y>;

        $b0 = $d0 cmpl $d1;

        if $b0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean isZero()
    {
        com.mkulesh.micromath.math.Vector2D r0;
        double $d0;
        byte $b0;

        r0 := @this: com.mkulesh.micromath.math.Vector2D;

        $d0 = r0.<com.mkulesh.micromath.math.Vector2D: double x>;

        $b0 = $d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        $d0 = r0.<com.mkulesh.micromath.math.Vector2D: double y>;

        $b0 = $d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public double mod()
    {
        com.mkulesh.micromath.math.Vector2D r0;
        double $d0, $d1, $d2;

        r0 := @this: com.mkulesh.micromath.math.Vector2D;

        $d1 = r0.<com.mkulesh.micromath.math.Vector2D: double x>;

        $d0 = r0.<com.mkulesh.micromath.math.Vector2D: double x>;

        $d1 = $d1 * $d0;

        $d2 = r0.<com.mkulesh.micromath.math.Vector2D: double y>;

        $d0 = r0.<com.mkulesh.micromath.math.Vector2D: double y>;

        $d0 = $d2 * $d0;

        $d1 = $d1 + $d0;

        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d1);

        return $d1;
    }
    public void multiply(double)
    {
        com.mkulesh.micromath.math.Vector2D r0;
        double $d0, $d1;

        r0 := @this: com.mkulesh.micromath.math.Vector2D;

        $d0 := @parameter0: double;

        $d1 = r0.<com.mkulesh.micromath.math.Vector2D: double x>;

        $d1 = $d1 * $d0;

        r0.<com.mkulesh.micromath.math.Vector2D: double x> = $d1;

        $d1 = r0.<com.mkulesh.micromath.math.Vector2D: double y>;

        $d0 = $d1 * $d0;

        r0.<com.mkulesh.micromath.math.Vector2D: double y> = $d0;

        return;
    }
    public void multiply(com.mkulesh.micromath.math.Vector2D)
    {
        com.mkulesh.micromath.math.Vector2D r0, $r1;
        double $d0, $d1;

        r0 := @this: com.mkulesh.micromath.math.Vector2D;

        $r1 := @parameter0: com.mkulesh.micromath.math.Vector2D;

        $d0 = r0.<com.mkulesh.micromath.math.Vector2D: double x>;

        $d1 = $r1.<com.mkulesh.micromath.math.Vector2D: double x>;

        $d0 = $d0 * $d1;

        r0.<com.mkulesh.micromath.math.Vector2D: double x> = $d0;

        $d0 = r0.<com.mkulesh.micromath.math.Vector2D: double y>;

        $d1 = $r1.<com.mkulesh.micromath.math.Vector2D: double y>;

        $d0 = $d0 * $d1;

        r0.<com.mkulesh.micromath.math.Vector2D: double y> = $d0;

        return;
    }
    public com.mkulesh.micromath.math.Vector2D normalize(double)
    {
        com.mkulesh.micromath.math.Vector2D r0, $r1;
        double $d0, $d1, $d2, $d3;
        byte $b0;

        r0 := @this: com.mkulesh.micromath.math.Vector2D;

        $d0 := @parameter0: double;

        $d1 = virtualinvoke r0.<com.mkulesh.micromath.math.Vector2D: double mod()>();

        $b0 = $d1 cmpl 0.0;

        if $b0 != 0 goto label1;

        r0 = new com.mkulesh.micromath.math.Vector2D;

        specialinvoke r0.<com.mkulesh.micromath.math.Vector2D: void <init>(double,double)>(0.0, 0.0);

        return r0;

     label1:
        $r1 = new com.mkulesh.micromath.math.Vector2D;

        $d2 = r0.<com.mkulesh.micromath.math.Vector2D: double x>;

        $d2 = $d2 * $d0;

        $d2 = $d2 / $d1;

        $d3 = r0.<com.mkulesh.micromath.math.Vector2D: double y>;

        $d0 = $d3 * $d0;

        $d0 = $d0 / $d1;

        specialinvoke $r1.<com.mkulesh.micromath.math.Vector2D: void <init>(double,double)>($d2, $d0);

        return $r1;
    }
    public double pow2()
    {
        com.mkulesh.micromath.math.Vector2D r0;
        double $d0, $d1, $d2;

        r0 := @this: com.mkulesh.micromath.math.Vector2D;

        $d1 = r0.<com.mkulesh.micromath.math.Vector2D: double x>;

        $d0 = r0.<com.mkulesh.micromath.math.Vector2D: double x>;

        $d1 = $d1 * $d0;

        $d2 = r0.<com.mkulesh.micromath.math.Vector2D: double y>;

        $d0 = r0.<com.mkulesh.micromath.math.Vector2D: double y>;

        $d0 = $d2 * $d0;

        $d1 = $d1 + $d0;

        return $d1;
    }
    public com.mkulesh.micromath.math.Vector2D prod(double)
    {
        com.mkulesh.micromath.math.Vector2D r0, $r1;
        double $d0, $d1, $d2;

        r0 := @this: com.mkulesh.micromath.math.Vector2D;

        $d0 := @parameter0: double;

        $r1 = new com.mkulesh.micromath.math.Vector2D;

        $d1 = r0.<com.mkulesh.micromath.math.Vector2D: double x>;

        $d1 = $d1 * $d0;

        $d2 = r0.<com.mkulesh.micromath.math.Vector2D: double y>;

        $d0 = $d2 * $d0;

        specialinvoke $r1.<com.mkulesh.micromath.math.Vector2D: void <init>(double,double)>($d1, $d0);

        return $r1;
    }
    public void readFromParcel(android.os.Parcel)
    {
        com.mkulesh.micromath.math.Vector2D r0;
        android.os.Parcel $r1;
        double $d0;

        r0 := @this: com.mkulesh.micromath.math.Vector2D;

        $r1 := @parameter0: android.os.Parcel;

        $d0 = virtualinvoke $r1.<android.os.Parcel: double readDouble()>();

        r0.<com.mkulesh.micromath.math.Vector2D: double x> = $d0;

        $d0 = virtualinvoke $r1.<android.os.Parcel: double readDouble()>();

        r0.<com.mkulesh.micromath.math.Vector2D: double y> = $d0;

        return;
    }
    public void rotate(int, int)
    {
        com.mkulesh.micromath.math.Vector2D r0;
        int $i0, $i1, i2;
        double d0, d1, $d2;

        r0 := @this: com.mkulesh.micromath.math.Vector2D;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i0 = $i0 - $i1;

        if $i0 <= 0 goto label3;

        d1 = -1.0;

     label1:
        i2 = 0;

     label2:
        $i1 = staticinvoke <java.lang.Math: int abs(int)>($i0);

        if i2 >= $i1 goto label4;

        d0 = r0.<com.mkulesh.micromath.math.Vector2D: double x>;

        $d2 = r0.<com.mkulesh.micromath.math.Vector2D: double y>;

        $d2 = $d2 * d1;

        r0.<com.mkulesh.micromath.math.Vector2D: double x> = $d2;

        $d2 = -1.0 * d1;

        d0 = $d2 * d0;

        r0.<com.mkulesh.micromath.math.Vector2D: double y> = d0;

        i2 = i2 + 1;

        goto label2;

     label3:
        d1 = 1.0;

        goto label1;

     label4:
        return;
    }
    public void set(double, double)
    {
        com.mkulesh.micromath.math.Vector2D r0;
        double $d0, $d1;

        r0 := @this: com.mkulesh.micromath.math.Vector2D;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        r0.<com.mkulesh.micromath.math.Vector2D: double x> = $d0;

        r0.<com.mkulesh.micromath.math.Vector2D: double y> = $d1;

        return;
    }
    public void substract(com.mkulesh.micromath.math.Vector2D)
    {
        com.mkulesh.micromath.math.Vector2D r0, $r1;
        double $d0, $d1;

        r0 := @this: com.mkulesh.micromath.math.Vector2D;

        $r1 := @parameter0: com.mkulesh.micromath.math.Vector2D;

        $d0 = r0.<com.mkulesh.micromath.math.Vector2D: double x>;

        $d1 = $r1.<com.mkulesh.micromath.math.Vector2D: double x>;

        $d0 = $d0 - $d1;

        r0.<com.mkulesh.micromath.math.Vector2D: double x> = $d0;

        $d0 = r0.<com.mkulesh.micromath.math.Vector2D: double y>;

        $d1 = $r1.<com.mkulesh.micromath.math.Vector2D: double y>;

        $d0 = $d0 - $d1;

        r0.<com.mkulesh.micromath.math.Vector2D: double y> = $d0;

        return;
    }
    public com.mkulesh.micromath.math.Vector2D sum(com.mkulesh.micromath.math.Vector2D)
    {
        com.mkulesh.micromath.math.Vector2D r0, $r1, $r2;
        double $d0, $d1, $d2;

        r0 := @this: com.mkulesh.micromath.math.Vector2D;

        $r1 := @parameter0: com.mkulesh.micromath.math.Vector2D;

        $r2 = new com.mkulesh.micromath.math.Vector2D;

        $d1 = r0.<com.mkulesh.micromath.math.Vector2D: double x>;

        $d0 = $r1.<com.mkulesh.micromath.math.Vector2D: double x>;

        $d1 = $d1 + $d0;

        $d2 = r0.<com.mkulesh.micromath.math.Vector2D: double y>;

        $d0 = $r1.<com.mkulesh.micromath.math.Vector2D: double y>;

        $d0 = $d2 + $d0;

        specialinvoke $r2.<com.mkulesh.micromath.math.Vector2D: void <init>(double,double)>($d1, $d0);

        return $r2;
    }
    public void writeToParcel(android.os.Parcel, int)
    {
        com.mkulesh.micromath.math.Vector2D r0;
        android.os.Parcel $r1;
        int $i0;
        double $d0;

        r0 := @this: com.mkulesh.micromath.math.Vector2D;

        $r1 := @parameter0: android.os.Parcel;

        $i0 := @parameter1: int;

        $d0 = r0.<com.mkulesh.micromath.math.Vector2D: double x>;

        virtualinvoke $r1.<android.os.Parcel: void writeDouble(double)>($d0);

        $d0 = r0.<com.mkulesh.micromath.math.Vector2D: double y>;

        virtualinvoke $r1.<android.os.Parcel: void writeDouble(double)>($d0);

        return;
    }
