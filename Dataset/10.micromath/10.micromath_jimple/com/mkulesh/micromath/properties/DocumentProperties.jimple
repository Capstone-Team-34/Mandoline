com.mkulesh.micromath.properties.DocumentProperties extends java.lang.Object
private static final java.lang.String STATE_DOCUMENT_REDEFINE_ALLOWED
private static final java.lang.String STATE_DOCUMENT_REFORMAT
private static final java.lang.String STATE_DOCUMENT_SCALE_FACTOR
private static final java.lang.String STATE_DOCUMENT_SIGNIFICANT_DIGITS
private static final java.lang.String STATE_DOCUMENT_TEXT_WIDTH
public static final java.lang.String XML_PROP_REDEFINE_ALLOWED
public static final java.lang.String XML_PROP_SCALE
public static final java.lang.String XML_PROP_SIGNIFICANT_DIGITS
public static final java.lang.String XML_PROP_TEXT_WIDTH
public boolean redefineAllowed
public boolean reformat
private com.mkulesh.micromath.widgets.ScaledDimensions scaledDimensions
public int significantDigits
public int textWidth
    public void <init>(android.content.Context)
    {
        com.mkulesh.micromath.properties.DocumentProperties r0;
        android.content.Context $r1;
        com.mkulesh.micromath.widgets.ScaledDimensions $r2;

        r0 := @this: com.mkulesh.micromath.properties.DocumentProperties;

        $r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.mkulesh.micromath.properties.DocumentProperties: boolean reformat> = 0;

        r0.<com.mkulesh.micromath.properties.DocumentProperties: int textWidth> = 60;

        r0.<com.mkulesh.micromath.properties.DocumentProperties: int significantDigits> = 6;

        r0.<com.mkulesh.micromath.properties.DocumentProperties: com.mkulesh.micromath.widgets.ScaledDimensions scaledDimensions> = null;

        r0.<com.mkulesh.micromath.properties.DocumentProperties: boolean redefineAllowed> = 0;

        $r2 = new com.mkulesh.micromath.widgets.ScaledDimensions;

        specialinvoke $r2.<com.mkulesh.micromath.widgets.ScaledDimensions: void <init>(android.content.Context)>($r1);

        r0.<com.mkulesh.micromath.properties.DocumentProperties: com.mkulesh.micromath.widgets.ScaledDimensions scaledDimensions> = $r2;

        return;
    }
    public com.mkulesh.micromath.widgets.ScaledDimensions getScaledDimensions()
    {
        com.mkulesh.micromath.properties.DocumentProperties r0;
        com.mkulesh.micromath.widgets.ScaledDimensions r1;

        r0 := @this: com.mkulesh.micromath.properties.DocumentProperties;

        r1 = r0.<com.mkulesh.micromath.properties.DocumentProperties: com.mkulesh.micromath.widgets.ScaledDimensions scaledDimensions>;

        return r1;
    }
    public void readFromBundle(android.os.Bundle)
    {
        com.mkulesh.micromath.properties.DocumentProperties r0;
        android.os.Bundle $r1;
        boolean $z0;
        int $i0;
        com.mkulesh.micromath.widgets.ScaledDimensions $r2;
        float $f0;

        r0 := @this: com.mkulesh.micromath.properties.DocumentProperties;

        $r1 := @parameter0: android.os.Bundle;

        $z0 = virtualinvoke $r1.<android.os.Bundle: boolean getBoolean(java.lang.String)>("document_reformat");

        r0.<com.mkulesh.micromath.properties.DocumentProperties: boolean reformat> = $z0;

        $i0 = virtualinvoke $r1.<android.os.Bundle: int getInt(java.lang.String)>("document_text_width");

        r0.<com.mkulesh.micromath.properties.DocumentProperties: int textWidth> = $i0;

        $i0 = virtualinvoke $r1.<android.os.Bundle: int getInt(java.lang.String)>("document_significant_digits");

        r0.<com.mkulesh.micromath.properties.DocumentProperties: int significantDigits> = $i0;

        $r2 = r0.<com.mkulesh.micromath.properties.DocumentProperties: com.mkulesh.micromath.widgets.ScaledDimensions scaledDimensions>;

        $f0 = virtualinvoke $r1.<android.os.Bundle: float getFloat(java.lang.String)>("document_scale_factor");

        virtualinvoke $r2.<com.mkulesh.micromath.widgets.ScaledDimensions: void setScaleFactor(float)>($f0);

        $z0 = virtualinvoke $r1.<android.os.Bundle: boolean getBoolean(java.lang.String)>("document_redefine_allowed");

        r0.<com.mkulesh.micromath.properties.DocumentProperties: boolean redefineAllowed> = $z0;

        return;
    }
    public void readFromXml(org.xmlpull.v1.XmlPullParser)
    {
        com.mkulesh.micromath.properties.DocumentProperties r0;
        org.xmlpull.v1.XmlPullParser $r1;
        java.text.ParseException r2;
        java.text.DecimalFormat $r3;
        java.lang.String $r4;
        int $i0;
        com.mkulesh.micromath.widgets.ScaledDimensions $r5;
        java.lang.Number $r6;
        float $f0;
        boolean $z0;

        r0 := @this: com.mkulesh.micromath.properties.DocumentProperties;

        $r1 := @parameter0: org.xmlpull.v1.XmlPullParser;

        $r3 = staticinvoke <com.mkulesh.micromath.utils.CompatUtils: java.text.DecimalFormat getDecimalFormat(java.lang.String)>("0.00000");

        $r4 = interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "textWidth");

        if $r4 == null goto label1;

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r4);

        r0.<com.mkulesh.micromath.properties.DocumentProperties: int textWidth> = $i0;

     label1:
        $r4 = interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "significantDigits");

        if $r4 == null goto label2;

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r4);

        r0.<com.mkulesh.micromath.properties.DocumentProperties: int significantDigits> = $i0;

     label2:
        $r4 = interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "scale");

        if $r4 == null goto label4;

        $r5 = r0.<com.mkulesh.micromath.properties.DocumentProperties: com.mkulesh.micromath.widgets.ScaledDimensions scaledDimensions>;

     label3:
        $r6 = virtualinvoke $r3.<java.text.DecimalFormat: java.lang.Number parse(java.lang.String)>($r4);

        $f0 = virtualinvoke $r6.<java.lang.Number: float floatValue()>();

        virtualinvoke $r5.<com.mkulesh.micromath.widgets.ScaledDimensions: void setScaleFactor(float)>($f0);

     label4:
        $r4 = interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "redefineAllowed");

        if $r4 == null goto label6;

        $z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r4);

        r0.<com.mkulesh.micromath.properties.DocumentProperties: boolean redefineAllowed> = $z0;

        return;

     label5:
        r2 := @caughtexception;

        $r5 = r0.<com.mkulesh.micromath.properties.DocumentProperties: com.mkulesh.micromath.widgets.ScaledDimensions scaledDimensions>;

        virtualinvoke $r5.<com.mkulesh.micromath.widgets.ScaledDimensions: void setScaleFactor(float)>(1.0F);

        goto label4;

     label6:
        return;

        catch java.text.ParseException from label3 to label4 with label5;
    }
    public void writeToBundle(android.os.Bundle)
    {
        com.mkulesh.micromath.properties.DocumentProperties r0;
        android.os.Bundle $r1;
        float $f0;
        boolean $z0;
        int $i0;
        com.mkulesh.micromath.widgets.ScaledDimensions $r2;

        r0 := @this: com.mkulesh.micromath.properties.DocumentProperties;

        $r1 := @parameter0: android.os.Bundle;

        $z0 = r0.<com.mkulesh.micromath.properties.DocumentProperties: boolean reformat>;

        virtualinvoke $r1.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>("document_reformat", $z0);

        $i0 = r0.<com.mkulesh.micromath.properties.DocumentProperties: int textWidth>;

        virtualinvoke $r1.<android.os.Bundle: void putInt(java.lang.String,int)>("document_text_width", $i0);

        $i0 = r0.<com.mkulesh.micromath.properties.DocumentProperties: int significantDigits>;

        virtualinvoke $r1.<android.os.Bundle: void putInt(java.lang.String,int)>("document_significant_digits", $i0);

        $r2 = r0.<com.mkulesh.micromath.properties.DocumentProperties: com.mkulesh.micromath.widgets.ScaledDimensions scaledDimensions>;

        $f0 = virtualinvoke $r2.<com.mkulesh.micromath.widgets.ScaledDimensions: float getScaleFactor()>();

        virtualinvoke $r1.<android.os.Bundle: void putFloat(java.lang.String,float)>("document_scale_factor", $f0);

        $z0 = r0.<com.mkulesh.micromath.properties.DocumentProperties: boolean redefineAllowed>;

        virtualinvoke $r1.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>("document_redefine_allowed", $z0);

        return;
    }
    public void writeToXml(org.xmlpull.v1.XmlSerializer) throws java.lang.Exception
    {
        com.mkulesh.micromath.properties.DocumentProperties r0;
        org.xmlpull.v1.XmlSerializer $r1;
        double $d0;
        java.text.DecimalFormat $r2;
        java.lang.String $r3, $r4;
        int $i0;
        com.mkulesh.micromath.widgets.ScaledDimensions $r5;
        float $f0;
        boolean $z0;

        r0 := @this: com.mkulesh.micromath.properties.DocumentProperties;

        $r1 := @parameter0: org.xmlpull.v1.XmlSerializer;

        $r2 = staticinvoke <com.mkulesh.micromath.utils.CompatUtils: java.text.DecimalFormat getDecimalFormat(java.lang.String)>("0.00000");

        $r3 = <com.mkulesh.micromath.formula.FormulaList: java.lang.String XML_NS>;

        $i0 = r0.<com.mkulesh.micromath.properties.DocumentProperties: int textWidth>;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        interfaceinvoke $r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>($r3, "textWidth", $r4);

        $r3 = <com.mkulesh.micromath.formula.FormulaList: java.lang.String XML_NS>;

        $i0 = r0.<com.mkulesh.micromath.properties.DocumentProperties: int significantDigits>;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        interfaceinvoke $r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>($r3, "significantDigits", $r4);

        $r3 = <com.mkulesh.micromath.formula.FormulaList: java.lang.String XML_NS>;

        $r5 = r0.<com.mkulesh.micromath.properties.DocumentProperties: com.mkulesh.micromath.widgets.ScaledDimensions scaledDimensions>;

        $f0 = virtualinvoke $r5.<com.mkulesh.micromath.widgets.ScaledDimensions: float getScaleFactor()>();

        $d0 = (double) $f0;

        $r4 = virtualinvoke $r2.<java.text.DecimalFormat: java.lang.String format(double)>($d0);

        interfaceinvoke $r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>($r3, "scale", $r4);

        $r3 = <com.mkulesh.micromath.formula.FormulaList: java.lang.String XML_NS>;

        $z0 = r0.<com.mkulesh.micromath.properties.DocumentProperties: boolean redefineAllowed>;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>($z0);

        interfaceinvoke $r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>($r3, "redefineAllowed", $r4);

        return;
    }
