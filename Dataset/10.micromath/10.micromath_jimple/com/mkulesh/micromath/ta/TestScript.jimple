com.mkulesh.micromath.ta.TestScript extends java.lang.Object
private java.lang.String scriptContent
private final java.lang.String scriptName
private final com.mkulesh.micromath.ta.TestScript$SynchronizedState state
private com.mkulesh.micromath.ta.TestCase testCase
private final java.util.ArrayList testCases
    public void <init>(java.lang.String)
    {
        com.mkulesh.micromath.ta.TestScript r0;
        java.lang.String $r1;
        com.mkulesh.micromath.ta.TestScript$SynchronizedState $r2;
        java.util.ArrayList $r3;

        r0 := @this: com.mkulesh.micromath.ta.TestScript;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.mkulesh.micromath.ta.TestScript: java.lang.String scriptContent> = null;

        $r2 = new com.mkulesh.micromath.ta.TestScript$SynchronizedState;

        specialinvoke $r2.<com.mkulesh.micromath.ta.TestScript$SynchronizedState: void <init>(com.mkulesh.micromath.ta.TestScript)>(r0);

        r0.<com.mkulesh.micromath.ta.TestScript: com.mkulesh.micromath.ta.TestScript$SynchronizedState state> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<com.mkulesh.micromath.ta.TestScript: java.util.ArrayList testCases> = $r3;

        r0.<com.mkulesh.micromath.ta.TestScript: com.mkulesh.micromath.ta.TestCase testCase> = null;

        r0.<com.mkulesh.micromath.ta.TestScript: java.lang.String scriptName> = $r1;

        return;
    }
    public void finish()
    {
        com.mkulesh.micromath.ta.TestScript r0;
        com.mkulesh.micromath.ta.TestCase $r1;
        java.lang.String $r2;
        java.util.ArrayList $r3;

        r0 := @this: com.mkulesh.micromath.ta.TestScript;

        $r1 = r0.<com.mkulesh.micromath.ta.TestScript: com.mkulesh.micromath.ta.TestCase testCase>;

        if $r1 == null goto label1;

        $r3 = r0.<com.mkulesh.micromath.ta.TestScript: java.util.ArrayList testCases>;

        $r1 = r0.<com.mkulesh.micromath.ta.TestScript: com.mkulesh.micromath.ta.TestCase testCase>;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r1);

        r0.<com.mkulesh.micromath.ta.TestScript: com.mkulesh.micromath.ta.TestCase testCase> = null;

     label1:
        $r2 = virtualinvoke r0.<com.mkulesh.micromath.ta.TestScript: java.lang.String getDescription()>();

        staticinvoke <com.mkulesh.micromath.utils.ViewUtils: void Debug(java.lang.Object,java.lang.String)>(r0, $r2);

        return;
    }
    public java.lang.String getDescription()
    {
        com.mkulesh.micromath.ta.TestScript r0;
        com.mkulesh.micromath.ta.TestScript$NumberType $r1;
        int $i0, $i1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        r0 := @this: com.mkulesh.micromath.ta.TestScript;

        $r1 = <com.mkulesh.micromath.ta.TestScript$NumberType: com.mkulesh.micromath.ta.TestScript$NumberType FAILED>;

        $i0 = virtualinvoke r0.<com.mkulesh.micromath.ta.TestScript: int getTestCaseNumber(com.mkulesh.micromath.ta.TestScript$NumberType)>($r1);

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Test script: ");

        $r3 = r0.<com.mkulesh.micromath.ta.TestScript: java.lang.String scriptName>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", content: ");

        $r3 = r0.<com.mkulesh.micromath.ta.TestScript: java.lang.String scriptContent>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", number of test cases: ");

        $r1 = <com.mkulesh.micromath.ta.TestScript$NumberType: com.mkulesh.micromath.ta.TestScript$NumberType TOTAL>;

        $i1 = virtualinvoke r0.<com.mkulesh.micromath.ta.TestScript: int getTestCaseNumber(com.mkulesh.micromath.ta.TestScript$NumberType)>($r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", passed: ");

        $r1 = <com.mkulesh.micromath.ta.TestScript$NumberType: com.mkulesh.micromath.ta.TestScript$NumberType PASSED>;

        $i1 = virtualinvoke r0.<com.mkulesh.micromath.ta.TestScript: int getTestCaseNumber(com.mkulesh.micromath.ta.TestScript$NumberType)>($r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", failed: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", status: ");

        if $i0 != 0 goto label2;

        $r3 = "PASSED";

     label1:
        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;

     label2:
        $r3 = "FAILED";

        goto label1;
    }
    public com.mkulesh.micromath.ta.TestScript$State getState()
    {
        com.mkulesh.micromath.ta.TestScript r0;
        com.mkulesh.micromath.ta.TestScript$State $r1;
        com.mkulesh.micromath.ta.TestScript$SynchronizedState $r2;

        r0 := @this: com.mkulesh.micromath.ta.TestScript;

        $r2 = r0.<com.mkulesh.micromath.ta.TestScript: com.mkulesh.micromath.ta.TestScript$SynchronizedState state>;

        $r1 = virtualinvoke $r2.<com.mkulesh.micromath.ta.TestScript$SynchronizedState: com.mkulesh.micromath.ta.TestScript$State get()>();

        return $r1;
    }
    public int getTestCaseNumber(com.mkulesh.micromath.ta.TestScript$NumberType)
    {
        com.mkulesh.micromath.ta.TestScript r0;
        com.mkulesh.micromath.ta.TestScript$NumberType $r1;
        int i0, $i1;
        java.util.ArrayList $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        com.mkulesh.micromath.ta.TestCase r5;
        int[] $r6;
        byte $b2;

        r0 := @this: com.mkulesh.micromath.ta.TestScript;

        $r1 := @parameter0: com.mkulesh.micromath.ta.TestScript$NumberType;

        i0 = 0;

        $r2 = r0.<com.mkulesh.micromath.ta.TestScript: java.util.ArrayList testCases>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.mkulesh.micromath.ta.TestCase) $r4;

        $r6 = <com.mkulesh.micromath.ta.TestScript$1: int[] $SwitchMap$com$mkulesh$micromath$ta$TestScript$NumberType>;

        $i1 = virtualinvoke $r1.<com.mkulesh.micromath.ta.TestScript$NumberType: int ordinal()>();

        $i1 = $r6[$i1];

        lookupswitch($i1)
        {
            case 1: goto label03;
            case 2: goto label04;
            case 3: goto label07;
            default: goto label02;
        };

     label02:
        goto label01;

     label03:
        i0 = i0 + 1;

        goto label01;

     label04:
        $z0 = virtualinvoke r5.<com.mkulesh.micromath.ta.TestCase: boolean isPassed()>();

        if $z0 == 0 goto label06;

        $b2 = 1;

     label05:
        i0 = i0 + $b2;

        goto label01;

     label06:
        $b2 = 0;

        goto label05;

     label07:
        $z0 = virtualinvoke r5.<com.mkulesh.micromath.ta.TestCase: boolean isPassed()>();

        if $z0 != 0 goto label09;

        $b2 = 1;

     label08:
        i0 = i0 + $b2;

        goto label01;

     label09:
        $b2 = 0;

        goto label08;

     label10:
        return i0;
    }
    public void publishHtmlReport(java.io.StringWriter)
    {
        com.mkulesh.micromath.ta.TestScript r0;
        java.io.StringWriter $r1;
        java.lang.String r2, r5;
        int $i0, $i1, $i2;
        com.mkulesh.micromath.ta.TestScript$NumberType $r3;
        java.lang.StringBuilder $r4;
        java.lang.String[] $r6;
        java.util.ArrayList $r7;
        java.util.Iterator $r8;
        boolean $z0;
        java.lang.Object $r9;
        com.mkulesh.micromath.ta.TestCase r10;

        r0 := @this: com.mkulesh.micromath.ta.TestScript;

        $r1 := @parameter0: java.io.StringWriter;

        $r3 = <com.mkulesh.micromath.ta.TestScript$NumberType: com.mkulesh.micromath.ta.TestScript$NumberType FAILED>;

        $i1 = virtualinvoke r0.<com.mkulesh.micromath.ta.TestScript: int getTestCaseNumber(com.mkulesh.micromath.ta.TestScript$NumberType)>($r3);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\n<h1>");

        r2 = r0.<com.mkulesh.micromath.ta.TestScript: java.lang.String scriptContent>;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</h1>\n");

        r2 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>(r2);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<p><b>Name</b>: ");

        r2 = r0.<com.mkulesh.micromath.ta.TestScript: java.lang.String scriptName>;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</p>\n");

        r2 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>(r2);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<p><b>Number of test cases</b>: ");

        $r3 = <com.mkulesh.micromath.ta.TestScript$NumberType: com.mkulesh.micromath.ta.TestScript$NumberType TOTAL>;

        $i0 = virtualinvoke r0.<com.mkulesh.micromath.ta.TestScript: int getTestCaseNumber(com.mkulesh.micromath.ta.TestScript$NumberType)>($r3);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</p>\n");

        r2 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>(r2);

        virtualinvoke $r1.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("<table border = \"1\" cellspacing=\"0\" cellpadding=\"5\">\n");

        r5 = "    <tr>";

        $r6 = <com.mkulesh.micromath.ta.TestCase: java.lang.String[] PARAMETERS>;

        $i0 = lengthof $r6;

        $i2 = 0;

     label1:
        if $i2 >= $i0 goto label2;

        r2 = $r6[$i2];

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<td><b>");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</b></td>");

        r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $i2 = $i2 + 1;

        goto label1;

     label2:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</tr>\n");

        r2 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>(r2);

        $r7 = r0.<com.mkulesh.micromath.ta.TestScript: java.util.ArrayList testCases>;

        $r8 = virtualinvoke $r7.<java.util.ArrayList: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (com.mkulesh.micromath.ta.TestCase) $r9;

        virtualinvoke r10.<com.mkulesh.micromath.ta.TestCase: void publishHtmlReport(java.io.StringWriter)>($r1);

        goto label3;

     label4:
        virtualinvoke $r1.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>("</table>\n");

        if $i1 != 0 goto label6;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<p><b>Status</b>: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<font color=\"green\">PASSED</font>");

        r2 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

     label5:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (passed: ");

        $r3 = <com.mkulesh.micromath.ta.TestScript$NumberType: com.mkulesh.micromath.ta.TestScript$NumberType PASSED>;

        $i0 = virtualinvoke r0.<com.mkulesh.micromath.ta.TestScript: int getTestCaseNumber(com.mkulesh.micromath.ta.TestScript$NumberType)>($r3);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", failed: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")</p>\n");

        r2 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)>(r2);

        return;

     label6:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<p><b>Status</b>: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<font color=\"red\">FAILED</font>");

        r2 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label5;
    }
    public void setResult(java.lang.String, java.lang.String)
    {
        com.mkulesh.micromath.ta.TestScript r0;
        java.lang.String $r1, $r2, $r4;
        com.mkulesh.micromath.ta.TestCase $r3;
        boolean $z0;
        java.util.ArrayList $r5;

        r0 := @this: com.mkulesh.micromath.ta.TestScript;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r4 = "begin";

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $r3 = new com.mkulesh.micromath.ta.TestCase;

        specialinvoke $r3.<com.mkulesh.micromath.ta.TestCase: void <init>(java.lang.String)>($r2);

        r0.<com.mkulesh.micromath.ta.TestScript: com.mkulesh.micromath.ta.TestCase testCase> = $r3;

        return;

     label1:
        $r4 = "result";

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label3;

        $r3 = r0.<com.mkulesh.micromath.ta.TestScript: com.mkulesh.micromath.ta.TestCase testCase>;

        if $r3 != null goto label2;

        $r3 = new com.mkulesh.micromath.ta.TestCase;

        specialinvoke $r3.<com.mkulesh.micromath.ta.TestCase: void <init>(java.lang.String)>(null);

        r0.<com.mkulesh.micromath.ta.TestScript: com.mkulesh.micromath.ta.TestCase testCase> = $r3;

     label2:
        $r3 = r0.<com.mkulesh.micromath.ta.TestScript: com.mkulesh.micromath.ta.TestCase testCase>;

        virtualinvoke $r3.<com.mkulesh.micromath.ta.TestCase: void setResultField(java.lang.String)>($r2);

        return;

     label3:
        $r4 = "desired";

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label5;

        $r3 = r0.<com.mkulesh.micromath.ta.TestScript: com.mkulesh.micromath.ta.TestCase testCase>;

        if $r3 != null goto label4;

        $r3 = new com.mkulesh.micromath.ta.TestCase;

        specialinvoke $r3.<com.mkulesh.micromath.ta.TestCase: void <init>(java.lang.String)>(null);

        r0.<com.mkulesh.micromath.ta.TestScript: com.mkulesh.micromath.ta.TestCase testCase> = $r3;

     label4:
        $r3 = r0.<com.mkulesh.micromath.ta.TestScript: com.mkulesh.micromath.ta.TestCase testCase>;

        virtualinvoke $r3.<com.mkulesh.micromath.ta.TestCase: void setDesiredField(java.lang.String)>($r2);

        return;

     label5:
        $r4 = "end";

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label7;

        $r3 = r0.<com.mkulesh.micromath.ta.TestScript: com.mkulesh.micromath.ta.TestCase testCase>;

        if $r3 != null goto label6;

        $r3 = new com.mkulesh.micromath.ta.TestCase;

        specialinvoke $r3.<com.mkulesh.micromath.ta.TestCase: void <init>(java.lang.String)>(null);

        r0.<com.mkulesh.micromath.ta.TestScript: com.mkulesh.micromath.ta.TestCase testCase> = $r3;

     label6:
        $r3 = r0.<com.mkulesh.micromath.ta.TestScript: com.mkulesh.micromath.ta.TestCase testCase>;

        virtualinvoke $r3.<com.mkulesh.micromath.ta.TestCase: void finish(java.lang.String)>($r2);

        $r5 = r0.<com.mkulesh.micromath.ta.TestScript: java.util.ArrayList testCases>;

        $r3 = r0.<com.mkulesh.micromath.ta.TestScript: com.mkulesh.micromath.ta.TestCase testCase>;

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        r0.<com.mkulesh.micromath.ta.TestScript: com.mkulesh.micromath.ta.TestCase testCase> = null;

     label7:
        return;
    }
    public void setScriptContent(java.lang.String)
    {
        com.mkulesh.micromath.ta.TestScript r0;
        java.lang.String $r1;

        r0 := @this: com.mkulesh.micromath.ta.TestScript;

        $r1 := @parameter0: java.lang.String;

        r0.<com.mkulesh.micromath.ta.TestScript: java.lang.String scriptContent> = $r1;

        return;
    }
    public void setState(com.mkulesh.micromath.ta.TestScript$State)
    {
        com.mkulesh.micromath.ta.TestScript r0;
        com.mkulesh.micromath.ta.TestScript$State $r1;
        com.mkulesh.micromath.ta.TestScript$SynchronizedState $r2;

        r0 := @this: com.mkulesh.micromath.ta.TestScript;

        $r1 := @parameter0: com.mkulesh.micromath.ta.TestScript$State;

        $r2 = r0.<com.mkulesh.micromath.ta.TestScript: com.mkulesh.micromath.ta.TestScript$SynchronizedState state>;

        virtualinvoke $r2.<com.mkulesh.micromath.ta.TestScript$SynchronizedState: void set(com.mkulesh.micromath.ta.TestScript$State)>($r1);

        return;
    }
    public com.mkulesh.micromath.ta.TestScript$State waitStateChange(com.mkulesh.micromath.ta.TestScript$State)
    {
        com.mkulesh.micromath.ta.TestScript r0;
        com.mkulesh.micromath.ta.TestScript$State $r1, $r5;
        java.lang.Exception r2;
        com.mkulesh.micromath.ta.TestScript$SynchronizedState $r3, $r4;
        java.lang.Throwable $r6;

        r0 := @this: com.mkulesh.micromath.ta.TestScript;

        $r1 := @parameter0: com.mkulesh.micromath.ta.TestScript$State;

     label1:
        $r3 = r0.<com.mkulesh.micromath.ta.TestScript: com.mkulesh.micromath.ta.TestScript$SynchronizedState state>;

        entermonitor $r3;

     label2:
        $r4 = r0.<com.mkulesh.micromath.ta.TestScript: com.mkulesh.micromath.ta.TestScript$SynchronizedState state>;

        $r5 = virtualinvoke $r4.<com.mkulesh.micromath.ta.TestScript$SynchronizedState: com.mkulesh.micromath.ta.TestScript$State get()>();

        if $r1 != $r5 goto label6;

        $r4 = r0.<com.mkulesh.micromath.ta.TestScript: com.mkulesh.micromath.ta.TestScript$SynchronizedState state>;

        virtualinvoke $r4.<java.lang.Object: void wait()>();

        goto label2;

     label3:
        $r6 := @caughtexception;

        exitmonitor $r3;

     label4:
        throw $r6;

     label5:
        r2 := @caughtexception;

        $r1 = <com.mkulesh.micromath.ta.TestScript$State: com.mkulesh.micromath.ta.TestScript$State CALCULATE_FINISHED>;

        return $r1;

     label6:
        $r4 = r0.<com.mkulesh.micromath.ta.TestScript: com.mkulesh.micromath.ta.TestScript$SynchronizedState state>;

        $r1 = virtualinvoke $r4.<com.mkulesh.micromath.ta.TestScript$SynchronizedState: com.mkulesh.micromath.ta.TestScript$State get()>();

        exitmonitor $r3;

     label7:
        return $r1;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label4 with label3;
        catch java.lang.Exception from label4 to label5 with label5;
        catch java.lang.Throwable from label6 to label7 with label3;
    }
