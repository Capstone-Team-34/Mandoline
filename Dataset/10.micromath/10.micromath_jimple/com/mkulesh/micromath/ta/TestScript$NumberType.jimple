com.mkulesh.micromath.ta.TestScript$NumberType extends java.lang.Enum
private static final com.mkulesh.micromath.ta.TestScript$NumberType[] $VALUES
public static final enum com.mkulesh.micromath.ta.TestScript$NumberType FAILED
public static final enum com.mkulesh.micromath.ta.TestScript$NumberType PASSED
public static final enum com.mkulesh.micromath.ta.TestScript$NumberType TOTAL
    static void <clinit>()
    {
        com.mkulesh.micromath.ta.TestScript$NumberType $r0;
        com.mkulesh.micromath.ta.TestScript$NumberType[] $r1;

        $r0 = new com.mkulesh.micromath.ta.TestScript$NumberType;

        specialinvoke $r0.<com.mkulesh.micromath.ta.TestScript$NumberType: void <init>(java.lang.String,int)>("TOTAL", 0);

        <com.mkulesh.micromath.ta.TestScript$NumberType: com.mkulesh.micromath.ta.TestScript$NumberType TOTAL> = $r0;

        $r0 = new com.mkulesh.micromath.ta.TestScript$NumberType;

        specialinvoke $r0.<com.mkulesh.micromath.ta.TestScript$NumberType: void <init>(java.lang.String,int)>("PASSED", 1);

        <com.mkulesh.micromath.ta.TestScript$NumberType: com.mkulesh.micromath.ta.TestScript$NumberType PASSED> = $r0;

        $r0 = new com.mkulesh.micromath.ta.TestScript$NumberType;

        specialinvoke $r0.<com.mkulesh.micromath.ta.TestScript$NumberType: void <init>(java.lang.String,int)>("FAILED", 2);

        <com.mkulesh.micromath.ta.TestScript$NumberType: com.mkulesh.micromath.ta.TestScript$NumberType FAILED> = $r0;

        $r1 = newarray (com.mkulesh.micromath.ta.TestScript$NumberType)[3];

        $r0 = <com.mkulesh.micromath.ta.TestScript$NumberType: com.mkulesh.micromath.ta.TestScript$NumberType TOTAL>;

        $r1[0] = $r0;

        $r0 = <com.mkulesh.micromath.ta.TestScript$NumberType: com.mkulesh.micromath.ta.TestScript$NumberType PASSED>;

        $r1[1] = $r0;

        $r0 = <com.mkulesh.micromath.ta.TestScript$NumberType: com.mkulesh.micromath.ta.TestScript$NumberType FAILED>;

        $r1[2] = $r0;

        <com.mkulesh.micromath.ta.TestScript$NumberType: com.mkulesh.micromath.ta.TestScript$NumberType[] $VALUES> = $r1;

        return;
    }
    private void <init>(java.lang.String, int)
    {
        com.mkulesh.micromath.ta.TestScript$NumberType r0;
        java.lang.String $r1;
        int $i0;

        r0 := @this: com.mkulesh.micromath.ta.TestScript$NumberType;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0);

        return;
    }
    public static com.mkulesh.micromath.ta.TestScript$NumberType valueOf(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.Enum $r1;
        com.mkulesh.micromath.ta.TestScript$NumberType $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lcom/mkulesh/micromath/ta/TestScript$NumberType;", $r0);

        $r2 = (com.mkulesh.micromath.ta.TestScript$NumberType) $r1;

        return $r2;
    }
    public static com.mkulesh.micromath.ta.TestScript$NumberType[] values()
    {
        java.lang.Object $r0;
        com.mkulesh.micromath.ta.TestScript$NumberType[] $r1;

        $r1 = <com.mkulesh.micromath.ta.TestScript$NumberType: com.mkulesh.micromath.ta.TestScript$NumberType[] $VALUES>;

        $r0 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r1 = (com.mkulesh.micromath.ta.TestScript$NumberType[]) $r0;

        return $r1;
    }
