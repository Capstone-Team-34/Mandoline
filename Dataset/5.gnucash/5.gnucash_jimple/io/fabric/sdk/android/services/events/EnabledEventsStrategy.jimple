io.fabric.sdk.android.services.events.EnabledEventsStrategy extends java.lang.Object implements io.fabric.sdk.android.services.events.EventsStrategy
static final int UNDEFINED_ROLLOVER_INTERVAL_SECONDS
protected final android.content.Context context
final java.util.concurrent.ScheduledExecutorService executorService
protected final io.fabric.sdk.android.services.events.EventsFilesManager filesManager
volatile int rolloverIntervalSeconds
final java.util.concurrent.atomic.AtomicReference scheduledRolloverFutureRef
    public void <init>(android.content.Context, java.util.concurrent.ScheduledExecutorService, io.fabric.sdk.android.services.events.EventsFilesManager)
    {
        io.fabric.sdk.android.services.events.EnabledEventsStrategy r0;
        android.content.Context $r1;
        java.util.concurrent.ScheduledExecutorService $r2;
        io.fabric.sdk.android.services.events.EventsFilesManager r3;
        java.util.concurrent.atomic.AtomicReference $r4;

        r0 := @this: io.fabric.sdk.android.services.events.EnabledEventsStrategy;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: java.util.concurrent.ScheduledExecutorService;

        r3 := @parameter2: io.fabric.sdk.android.services.events.EventsFilesManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<io.fabric.sdk.android.services.events.EnabledEventsStrategy: int rolloverIntervalSeconds> = -1;

        r0.<io.fabric.sdk.android.services.events.EnabledEventsStrategy: android.content.Context context> = $r1;

        r0.<io.fabric.sdk.android.services.events.EnabledEventsStrategy: java.util.concurrent.ScheduledExecutorService executorService> = $r2;

        r0.<io.fabric.sdk.android.services.events.EnabledEventsStrategy: io.fabric.sdk.android.services.events.EventsFilesManager filesManager> = r3;

        $r4 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r4.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        r0.<io.fabric.sdk.android.services.events.EnabledEventsStrategy: java.util.concurrent.atomic.AtomicReference scheduledRolloverFutureRef> = $r4;

        return;
    }
    public void cancelTimeBasedFileRollOver()
    {
        io.fabric.sdk.android.services.events.EnabledEventsStrategy r0;
        java.util.concurrent.atomic.AtomicReference $r1;
        java.lang.Object $r2;
        android.content.Context $r3;
        java.util.concurrent.ScheduledFuture $r4;

        r0 := @this: io.fabric.sdk.android.services.events.EnabledEventsStrategy;

        $r1 = r0.<io.fabric.sdk.android.services.events.EnabledEventsStrategy: java.util.concurrent.atomic.AtomicReference scheduledRolloverFutureRef>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        if $r2 == null goto label1;

        $r3 = r0.<io.fabric.sdk.android.services.events.EnabledEventsStrategy: android.content.Context context>;

        staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: void logControlled(android.content.Context,java.lang.String)>($r3, "Cancelling time-based rollover because no events are currently being generated.");

        $r1 = r0.<io.fabric.sdk.android.services.events.EnabledEventsStrategy: java.util.concurrent.atomic.AtomicReference scheduledRolloverFutureRef>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r4 = (java.util.concurrent.ScheduledFuture) $r2;

        interfaceinvoke $r4.<java.util.concurrent.ScheduledFuture: boolean cancel(boolean)>(0);

        $r1 = r0.<io.fabric.sdk.android.services.events.EnabledEventsStrategy: java.util.concurrent.atomic.AtomicReference scheduledRolloverFutureRef>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(null);

     label1:
        return;
    }
    protected void configureRollover(int)
    {
        io.fabric.sdk.android.services.events.EnabledEventsStrategy r0;
        int $i0;
        long $l1;

        r0 := @this: io.fabric.sdk.android.services.events.EnabledEventsStrategy;

        $i0 := @parameter0: int;

        r0.<io.fabric.sdk.android.services.events.EnabledEventsStrategy: int rolloverIntervalSeconds> = $i0;

        $i0 = r0.<io.fabric.sdk.android.services.events.EnabledEventsStrategy: int rolloverIntervalSeconds>;

        $l1 = (long) $i0;

        virtualinvoke r0.<io.fabric.sdk.android.services.events.EnabledEventsStrategy: void scheduleTimeBasedFileRollOver(long,long)>(0L, $l1);

        return;
    }
    public void deleteAllEvents()
    {
        io.fabric.sdk.android.services.events.EnabledEventsStrategy r0;
        io.fabric.sdk.android.services.events.EventsFilesManager $r1;

        r0 := @this: io.fabric.sdk.android.services.events.EnabledEventsStrategy;

        $r1 = r0.<io.fabric.sdk.android.services.events.EnabledEventsStrategy: io.fabric.sdk.android.services.events.EventsFilesManager filesManager>;

        virtualinvoke $r1.<io.fabric.sdk.android.services.events.EventsFilesManager: void deleteAllEventsFiles()>();

        return;
    }
    public int getRollover()
    {
        io.fabric.sdk.android.services.events.EnabledEventsStrategy r0;
        int i0;

        r0 := @this: io.fabric.sdk.android.services.events.EnabledEventsStrategy;

        i0 = r0.<io.fabric.sdk.android.services.events.EnabledEventsStrategy: int rolloverIntervalSeconds>;

        return i0;
    }
    public void recordEvent(java.lang.Object)
    {
        io.fabric.sdk.android.services.events.EnabledEventsStrategy r0;
        java.lang.Object r1;
        java.io.IOException r2;
        java.lang.String $r3;
        android.content.Context $r4;
        io.fabric.sdk.android.services.events.EventsFilesManager $r5;

        r0 := @this: io.fabric.sdk.android.services.events.EnabledEventsStrategy;

        r1 := @parameter0: java.lang.Object;

        $r4 = r0.<io.fabric.sdk.android.services.events.EnabledEventsStrategy: android.content.Context context>;

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: void logControlled(android.content.Context,java.lang.String)>($r4, $r3);

        $r5 = r0.<io.fabric.sdk.android.services.events.EnabledEventsStrategy: io.fabric.sdk.android.services.events.EventsFilesManager filesManager>;

     label1:
        virtualinvoke $r5.<io.fabric.sdk.android.services.events.EventsFilesManager: void writeEvent(java.lang.Object)>(r1);

     label2:
        virtualinvoke r0.<io.fabric.sdk.android.services.events.EnabledEventsStrategy: void scheduleTimeBasedRollOverIfNeeded()>();

        return;

     label3:
        r2 := @caughtexception;

        $r4 = r0.<io.fabric.sdk.android.services.events.EnabledEventsStrategy: android.content.Context context>;

        staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: void logControlledError(android.content.Context,java.lang.String,java.lang.Throwable)>($r4, "Failed to write event.", r2);

        goto label2;

        catch java.io.IOException from label1 to label2 with label3;
    }
    public boolean rollFileOver()
    {
        io.fabric.sdk.android.services.events.EnabledEventsStrategy r0;
        java.io.IOException r1;
        boolean $z0;
        io.fabric.sdk.android.services.events.EventsFilesManager $r2;
        android.content.Context $r3;

        r0 := @this: io.fabric.sdk.android.services.events.EnabledEventsStrategy;

        $r2 = r0.<io.fabric.sdk.android.services.events.EnabledEventsStrategy: io.fabric.sdk.android.services.events.EventsFilesManager filesManager>;

     label1:
        $z0 = virtualinvoke $r2.<io.fabric.sdk.android.services.events.EventsFilesManager: boolean rollFileOver()>();

     label2:
        return $z0;

     label3:
        r1 := @caughtexception;

        $r3 = r0.<io.fabric.sdk.android.services.events.EnabledEventsStrategy: android.content.Context context>;

        staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: void logControlledError(android.content.Context,java.lang.String,java.lang.Throwable)>($r3, "Failed to roll file over.", r1);

        return 0;

        catch java.io.IOException from label1 to label2 with label3;
    }
    void scheduleTimeBasedFileRollOver(long, long)
    {
        io.fabric.sdk.android.services.events.EnabledEventsStrategy r0;
        long $l0, $l1;
        io.fabric.sdk.android.services.events.TimeBasedFileRollOverRunnable r1;
        java.util.concurrent.TimeUnit $r2;
        java.util.concurrent.RejectedExecutionException r3;
        java.util.concurrent.atomic.AtomicReference $r4;
        java.lang.Object $r5;
        boolean z0;
        android.content.Context $r6;
        java.lang.StringBuilder $r7;
        java.lang.String $r8;
        java.util.concurrent.ScheduledExecutorService $r9;
        java.util.concurrent.ScheduledFuture $r10;

        r0 := @this: io.fabric.sdk.android.services.events.EnabledEventsStrategy;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $r4 = r0.<io.fabric.sdk.android.services.events.EnabledEventsStrategy: java.util.concurrent.atomic.AtomicReference scheduledRolloverFutureRef>;

        $r5 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        if $r5 != null goto label4;

        z0 = 1;

     label1:
        if z0 == 0 goto label6;

        r1 = new io.fabric.sdk.android.services.events.TimeBasedFileRollOverRunnable;

        $r6 = r0.<io.fabric.sdk.android.services.events.EnabledEventsStrategy: android.content.Context context>;

        specialinvoke r1.<io.fabric.sdk.android.services.events.TimeBasedFileRollOverRunnable: void <init>(android.content.Context,io.fabric.sdk.android.services.events.FileRollOverManager)>($r6, r0);

        $r6 = r0.<io.fabric.sdk.android.services.events.EnabledEventsStrategy: android.content.Context context>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Scheduling time based file roll over every ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" seconds");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: void logControlled(android.content.Context,java.lang.String)>($r6, $r8);

        $r4 = r0.<io.fabric.sdk.android.services.events.EnabledEventsStrategy: java.util.concurrent.atomic.AtomicReference scheduledRolloverFutureRef>;

        $r9 = r0.<io.fabric.sdk.android.services.events.EnabledEventsStrategy: java.util.concurrent.ScheduledExecutorService executorService>;

        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

     label2:
        $r10 = interfaceinvoke $r9.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)>(r1, $l0, $l1, $r2);

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>($r10);

     label3:
        return;

     label4:
        z0 = 0;

        goto label1;

     label5:
        r3 := @caughtexception;

        $r6 = r0.<io.fabric.sdk.android.services.events.EnabledEventsStrategy: android.content.Context context>;

        staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: void logControlledError(android.content.Context,java.lang.String,java.lang.Throwable)>($r6, "Failed to schedule time based file roll over", r3);

     label6:
        return;

        catch java.util.concurrent.RejectedExecutionException from label2 to label3 with label5;
    }
    public void scheduleTimeBasedRollOverIfNeeded()
    {
        io.fabric.sdk.android.services.events.EnabledEventsStrategy r0;
        long $l0, $l2;
        int $i1;
        boolean z0;

        r0 := @this: io.fabric.sdk.android.services.events.EnabledEventsStrategy;

        $i1 = r0.<io.fabric.sdk.android.services.events.EnabledEventsStrategy: int rolloverIntervalSeconds>;

        if $i1 == -1 goto label2;

        z0 = 1;

     label1:
        if z0 == 0 goto label3;

        $i1 = r0.<io.fabric.sdk.android.services.events.EnabledEventsStrategy: int rolloverIntervalSeconds>;

        $l2 = (long) $i1;

        $i1 = r0.<io.fabric.sdk.android.services.events.EnabledEventsStrategy: int rolloverIntervalSeconds>;

        $l0 = (long) $i1;

        virtualinvoke r0.<io.fabric.sdk.android.services.events.EnabledEventsStrategy: void scheduleTimeBasedFileRollOver(long,long)>($l2, $l0);

        return;

     label2:
        z0 = 0;

        goto label1;

     label3:
        return;
    }
    void sendAndCleanUpIfSuccess()
    {
        io.fabric.sdk.android.services.events.EnabledEventsStrategy r0;
        java.lang.Exception r1;
        io.fabric.sdk.android.services.events.FilesSender $r2;
        android.content.Context $r3;
        int i0, $i1;
        io.fabric.sdk.android.services.events.EventsFilesManager $r4;
        java.util.List $r5;
        java.util.Locale $r6;
        java.lang.Object[] $r7;
        java.lang.Integer $r8;
        java.lang.String $r9;
        boolean $z0;
        java.lang.StringBuilder $r10;

        r0 := @this: io.fabric.sdk.android.services.events.EnabledEventsStrategy;

        $r2 = virtualinvoke r0.<io.fabric.sdk.android.services.events.EnabledEventsStrategy: io.fabric.sdk.android.services.events.FilesSender getFilesSender()>();

        if $r2 != null goto label01;

        $r3 = r0.<io.fabric.sdk.android.services.events.EnabledEventsStrategy: android.content.Context context>;

        staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: void logControlled(android.content.Context,java.lang.String)>($r3, "skipping files send because we don\'t yet know the target endpoint");

        return;

     label01:
        $r3 = r0.<io.fabric.sdk.android.services.events.EnabledEventsStrategy: android.content.Context context>;

        staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: void logControlled(android.content.Context,java.lang.String)>($r3, "Sending all files");

        i0 = 0;

        $r4 = r0.<io.fabric.sdk.android.services.events.EnabledEventsStrategy: io.fabric.sdk.android.services.events.EventsFilesManager filesManager>;

        $r5 = virtualinvoke $r4.<io.fabric.sdk.android.services.events.EventsFilesManager: java.util.List getBatchOfFilesToSend()>();

     label02:
        $i1 = interfaceinvoke $r5.<java.util.List: int size()>();

     label03:
        if $i1 <= 0 goto label12;

     label04:
        $r3 = r0.<io.fabric.sdk.android.services.events.EnabledEventsStrategy: android.content.Context context>;

     label05:
        $r6 = <java.util.Locale: java.util.Locale US>;

     label06:
        $r7 = newarray (java.lang.Object)[1];

        $i1 = interfaceinvoke $r5.<java.util.List: int size()>();

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r7[0] = $r8;

        $r9 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r6, "attempt to send batch of %d files", $r7);

        staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: void logControlled(android.content.Context,java.lang.String)>($r3, $r9);

        $z0 = interfaceinvoke $r2.<io.fabric.sdk.android.services.events.FilesSender: boolean send(java.util.List)>($r5);

     label07:
        if $z0 == 0 goto label11;

     label08:
        $i1 = interfaceinvoke $r5.<java.util.List: int size()>();

     label09:
        i0 = i0 + $i1;

     label10:
        $r4 = r0.<io.fabric.sdk.android.services.events.EnabledEventsStrategy: io.fabric.sdk.android.services.events.EventsFilesManager filesManager>;

        virtualinvoke $r4.<io.fabric.sdk.android.services.events.EventsFilesManager: void deleteSentFiles(java.util.List)>($r5);

     label11:
        if $z0 != 0 goto label13;

     label12:
        if i0 != 0 goto label16;

        $r4 = r0.<io.fabric.sdk.android.services.events.EnabledEventsStrategy: io.fabric.sdk.android.services.events.EventsFilesManager filesManager>;

        virtualinvoke $r4.<io.fabric.sdk.android.services.events.EventsFilesManager: void deleteOldestInRollOverIfOverMax()>();

        return;

     label13:
        $r4 = r0.<io.fabric.sdk.android.services.events.EnabledEventsStrategy: io.fabric.sdk.android.services.events.EventsFilesManager filesManager>;

        $r5 = virtualinvoke $r4.<io.fabric.sdk.android.services.events.EventsFilesManager: java.util.List getBatchOfFilesToSend()>();

     label14:
        goto label02;

     label15:
        r1 := @caughtexception;

        $r3 = r0.<io.fabric.sdk.android.services.events.EnabledEventsStrategy: android.content.Context context>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to send batch of analytics files to server: ");

        $r9 = virtualinvoke r1.<java.lang.Exception: java.lang.String getMessage()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <io.fabric.sdk.android.services.common.CommonUtils: void logControlledError(android.content.Context,java.lang.String,java.lang.Throwable)>($r3, $r9, r1);

        goto label12;

     label16:
        return;

        catch java.lang.Exception from label02 to label03 with label15;
        catch java.lang.Exception from label04 to label05 with label15;
        catch java.lang.Exception from label06 to label07 with label15;
        catch java.lang.Exception from label08 to label09 with label15;
        catch java.lang.Exception from label10 to label11 with label15;
        catch java.lang.Exception from label13 to label14 with label15;
    }
    public void sendEvents()
    {
        io.fabric.sdk.android.services.events.EnabledEventsStrategy r0;

        r0 := @this: io.fabric.sdk.android.services.events.EnabledEventsStrategy;

        virtualinvoke r0.<io.fabric.sdk.android.services.events.EnabledEventsStrategy: void sendAndCleanUpIfSuccess()>();

        return;
    }
