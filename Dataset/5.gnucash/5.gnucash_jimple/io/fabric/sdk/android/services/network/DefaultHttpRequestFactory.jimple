io.fabric.sdk.android.services.network.DefaultHttpRequestFactory extends java.lang.Object implements io.fabric.sdk.android.services.network.HttpRequestFactory
private static final java.lang.String HTTPS
private boolean attemptedSslInit
private final io.fabric.sdk.android.Logger logger
private io.fabric.sdk.android.services.network.PinningInfoProvider pinningInfo
private javax.net.ssl.SSLSocketFactory sslSocketFactory
    public void <init>()
    {
        io.fabric.sdk.android.services.network.DefaultHttpRequestFactory r0;
        io.fabric.sdk.android.DefaultLogger $r1;

        r0 := @this: io.fabric.sdk.android.services.network.DefaultHttpRequestFactory;

        $r1 = new io.fabric.sdk.android.DefaultLogger;

        specialinvoke $r1.<io.fabric.sdk.android.DefaultLogger: void <init>()>();

        specialinvoke r0.<io.fabric.sdk.android.services.network.DefaultHttpRequestFactory: void <init>(io.fabric.sdk.android.Logger)>($r1);

        return;
    }
    public void <init>(io.fabric.sdk.android.Logger)
    {
        io.fabric.sdk.android.services.network.DefaultHttpRequestFactory r0;
        io.fabric.sdk.android.Logger $r1;

        r0 := @this: io.fabric.sdk.android.services.network.DefaultHttpRequestFactory;

        $r1 := @parameter0: io.fabric.sdk.android.Logger;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<io.fabric.sdk.android.services.network.DefaultHttpRequestFactory: io.fabric.sdk.android.Logger logger> = $r1;

        return;
    }
    private javax.net.ssl.SSLSocketFactory getSSLSocketFactory()
    {
        io.fabric.sdk.android.services.network.DefaultHttpRequestFactory r0;
        javax.net.ssl.SSLSocketFactory $r1;
        boolean $z0;
        java.lang.Throwable $r2;

        r0 := @this: io.fabric.sdk.android.services.network.DefaultHttpRequestFactory;

        entermonitor r0;

     label1:
        $r1 = r0.<io.fabric.sdk.android.services.network.DefaultHttpRequestFactory: javax.net.ssl.SSLSocketFactory sslSocketFactory>;

        if $r1 != null goto label2;

        $z0 = r0.<io.fabric.sdk.android.services.network.DefaultHttpRequestFactory: boolean attemptedSslInit>;

        if $z0 != 0 goto label2;

        $r1 = specialinvoke r0.<io.fabric.sdk.android.services.network.DefaultHttpRequestFactory: javax.net.ssl.SSLSocketFactory initSSLSocketFactory()>();

        r0.<io.fabric.sdk.android.services.network.DefaultHttpRequestFactory: javax.net.ssl.SSLSocketFactory sslSocketFactory> = $r1;

     label2:
        $r1 = r0.<io.fabric.sdk.android.services.network.DefaultHttpRequestFactory: javax.net.ssl.SSLSocketFactory sslSocketFactory>;

     label3:
        exitmonitor r0;

        return $r1;

     label4:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label3 with label4;
    }
    private javax.net.ssl.SSLSocketFactory initSSLSocketFactory()
    {
        io.fabric.sdk.android.services.network.DefaultHttpRequestFactory r0;
        java.lang.Exception r1;
        javax.net.ssl.SSLSocketFactory $r2;
        io.fabric.sdk.android.services.network.PinningInfoProvider $r3;
        io.fabric.sdk.android.Logger $r4;
        java.lang.Throwable $r5;

        r0 := @this: io.fabric.sdk.android.services.network.DefaultHttpRequestFactory;

        entermonitor r0;

     label1:
        r0.<io.fabric.sdk.android.services.network.DefaultHttpRequestFactory: boolean attemptedSslInit> = 1;

     label2:
        $r3 = r0.<io.fabric.sdk.android.services.network.DefaultHttpRequestFactory: io.fabric.sdk.android.services.network.PinningInfoProvider pinningInfo>;

        $r2 = staticinvoke <io.fabric.sdk.android.services.network.NetworkUtils: javax.net.ssl.SSLSocketFactory getSSLSocketFactory(io.fabric.sdk.android.services.network.PinningInfoProvider)>($r3);

     label3:
        $r4 = r0.<io.fabric.sdk.android.services.network.DefaultHttpRequestFactory: io.fabric.sdk.android.Logger logger>;

        interfaceinvoke $r4.<io.fabric.sdk.android.Logger: void d(java.lang.String,java.lang.String)>("Fabric", "Custom SSL pinning enabled");

     label4:
        exitmonitor r0;

        return $r2;

     label5:
        r1 := @caughtexception;

     label6:
        $r4 = r0.<io.fabric.sdk.android.services.network.DefaultHttpRequestFactory: io.fabric.sdk.android.Logger logger>;

        interfaceinvoke $r4.<io.fabric.sdk.android.Logger: void e(java.lang.String,java.lang.String,java.lang.Throwable)>("Fabric", "Exception while validating pinned certs", r1);

     label7:
        $r2 = null;

        goto label4;

     label8:
        $r5 := @caughtexception;

        exitmonitor r0;

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Exception from label2 to label3 with label5;
        catch java.lang.Exception from label3 to label4 with label5;
        catch java.lang.Throwable from label2 to label4 with label8;
        catch java.lang.Throwable from label6 to label7 with label8;
    }
    private boolean isHttps(java.lang.String)
    {
        io.fabric.sdk.android.services.network.DefaultHttpRequestFactory r0;
        java.lang.String $r1;
        java.util.Locale $r2;
        boolean $z0;

        r0 := @this: io.fabric.sdk.android.services.network.DefaultHttpRequestFactory;

        $r1 := @parameter0: java.lang.String;

        if $r1 == null goto label1;

        $r2 = <java.util.Locale: java.util.Locale US>;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r2);

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("https");

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    private void resetSSLSocketFactory()
    {
        io.fabric.sdk.android.services.network.DefaultHttpRequestFactory r0;
        java.lang.Throwable $r1;

        r0 := @this: io.fabric.sdk.android.services.network.DefaultHttpRequestFactory;

        entermonitor r0;

     label1:
        r0.<io.fabric.sdk.android.services.network.DefaultHttpRequestFactory: boolean attemptedSslInit> = 0;

        r0.<io.fabric.sdk.android.services.network.DefaultHttpRequestFactory: javax.net.ssl.SSLSocketFactory sslSocketFactory> = null;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public io.fabric.sdk.android.services.network.HttpRequest buildHttpRequest(io.fabric.sdk.android.services.network.HttpMethod, java.lang.String)
    {
        io.fabric.sdk.android.services.network.DefaultHttpRequestFactory r0;
        io.fabric.sdk.android.services.network.HttpMethod $r1;
        java.lang.String $r2;
        java.util.Map $r3;
        io.fabric.sdk.android.services.network.HttpRequest $r4;

        r0 := @this: io.fabric.sdk.android.services.network.DefaultHttpRequestFactory;

        $r1 := @parameter0: io.fabric.sdk.android.services.network.HttpMethod;

        $r2 := @parameter1: java.lang.String;

        $r3 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        $r4 = virtualinvoke r0.<io.fabric.sdk.android.services.network.DefaultHttpRequestFactory: io.fabric.sdk.android.services.network.HttpRequest buildHttpRequest(io.fabric.sdk.android.services.network.HttpMethod,java.lang.String,java.util.Map)>($r1, $r2, $r3);

        return $r4;
    }
    public io.fabric.sdk.android.services.network.HttpRequest buildHttpRequest(io.fabric.sdk.android.services.network.HttpMethod, java.lang.String, java.util.Map)
    {
        io.fabric.sdk.android.services.network.DefaultHttpRequestFactory r0;
        io.fabric.sdk.android.services.network.HttpMethod $r1;
        java.lang.String $r2;
        java.util.Map r3;
        int[] $r4;
        int $i0;
        java.lang.IllegalArgumentException $r5;
        io.fabric.sdk.android.services.network.HttpRequest $r6;
        boolean $z0;
        io.fabric.sdk.android.services.network.PinningInfoProvider $r7;
        javax.net.ssl.SSLSocketFactory $r8;
        java.net.HttpURLConnection $r9;
        javax.net.ssl.HttpsURLConnection $r10;

        r0 := @this: io.fabric.sdk.android.services.network.DefaultHttpRequestFactory;

        $r1 := @parameter0: io.fabric.sdk.android.services.network.HttpMethod;

        $r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.Map;

        $r4 = <io.fabric.sdk.android.services.network.DefaultHttpRequestFactory$1: int[] $SwitchMap$io$fabric$sdk$android$services$network$HttpMethod>;

        $i0 = virtualinvoke $r1.<io.fabric.sdk.android.services.network.HttpMethod: int ordinal()>();

        $i0 = $r4[$i0];

        lookupswitch($i0)
        {
            case 1: goto label2;
            case 2: goto label4;
            case 3: goto label5;
            case 4: goto label6;
            default: goto label1;
        };

     label1:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unsupported HTTP method!");

        throw $r5;

     label2:
        $r6 = staticinvoke <io.fabric.sdk.android.services.network.HttpRequest: io.fabric.sdk.android.services.network.HttpRequest get(java.lang.CharSequence,java.util.Map,boolean)>($r2, r3, 1);

     label3:
        $z0 = specialinvoke r0.<io.fabric.sdk.android.services.network.DefaultHttpRequestFactory: boolean isHttps(java.lang.String)>($r2);

        if $z0 == 0 goto label7;

        $r7 = r0.<io.fabric.sdk.android.services.network.DefaultHttpRequestFactory: io.fabric.sdk.android.services.network.PinningInfoProvider pinningInfo>;

        if $r7 == null goto label7;

        $r8 = specialinvoke r0.<io.fabric.sdk.android.services.network.DefaultHttpRequestFactory: javax.net.ssl.SSLSocketFactory getSSLSocketFactory()>();

        if $r8 == null goto label7;

        $r9 = virtualinvoke $r6.<io.fabric.sdk.android.services.network.HttpRequest: java.net.HttpURLConnection getConnection()>();

        $r10 = (javax.net.ssl.HttpsURLConnection) $r9;

        virtualinvoke $r10.<javax.net.ssl.HttpsURLConnection: void setSSLSocketFactory(javax.net.ssl.SSLSocketFactory)>($r8);

        return $r6;

     label4:
        $r6 = staticinvoke <io.fabric.sdk.android.services.network.HttpRequest: io.fabric.sdk.android.services.network.HttpRequest post(java.lang.CharSequence,java.util.Map,boolean)>($r2, r3, 1);

        goto label3;

     label5:
        $r6 = staticinvoke <io.fabric.sdk.android.services.network.HttpRequest: io.fabric.sdk.android.services.network.HttpRequest put(java.lang.CharSequence)>($r2);

        goto label3;

     label6:
        $r6 = staticinvoke <io.fabric.sdk.android.services.network.HttpRequest: io.fabric.sdk.android.services.network.HttpRequest delete(java.lang.CharSequence)>($r2);

        goto label3;

     label7:
        return $r6;
    }
    public io.fabric.sdk.android.services.network.PinningInfoProvider getPinningInfoProvider()
    {
        io.fabric.sdk.android.services.network.DefaultHttpRequestFactory r0;
        io.fabric.sdk.android.services.network.PinningInfoProvider r1;

        r0 := @this: io.fabric.sdk.android.services.network.DefaultHttpRequestFactory;

        r1 = r0.<io.fabric.sdk.android.services.network.DefaultHttpRequestFactory: io.fabric.sdk.android.services.network.PinningInfoProvider pinningInfo>;

        return r1;
    }
    public void setPinningInfoProvider(io.fabric.sdk.android.services.network.PinningInfoProvider)
    {
        io.fabric.sdk.android.services.network.DefaultHttpRequestFactory r0;
        io.fabric.sdk.android.services.network.PinningInfoProvider $r1, $r2;

        r0 := @this: io.fabric.sdk.android.services.network.DefaultHttpRequestFactory;

        $r1 := @parameter0: io.fabric.sdk.android.services.network.PinningInfoProvider;

        $r2 = r0.<io.fabric.sdk.android.services.network.DefaultHttpRequestFactory: io.fabric.sdk.android.services.network.PinningInfoProvider pinningInfo>;

        if $r2 == $r1 goto label1;

        r0.<io.fabric.sdk.android.services.network.DefaultHttpRequestFactory: io.fabric.sdk.android.services.network.PinningInfoProvider pinningInfo> = $r1;

        specialinvoke r0.<io.fabric.sdk.android.services.network.DefaultHttpRequestFactory: void resetSSLSocketFactory()>();

     label1:
        return;
    }
