org.apache.commons.codec.digest.Sha2Crypt extends java.lang.Object
private static final int ROUNDS_DEFAULT
private static final int ROUNDS_MAX
private static final int ROUNDS_MIN
private static final java.lang.String ROUNDS_PREFIX
private static final java.util.regex.Pattern SALT_PATTERN
private static final int SHA256_BLOCKSIZE
static final java.lang.String SHA256_PREFIX
private static final int SHA512_BLOCKSIZE
static final java.lang.String SHA512_PREFIX
    static void <clinit>()
    {
        java.util.regex.Pattern $r0;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^\\$([56])\\$(rounds=(\\d+)\\$)?([\\.\\/a-zA-Z0-9]{1,16}).*");

        <org.apache.commons.codec.digest.Sha2Crypt: java.util.regex.Pattern SALT_PATTERN> = $r0;

        return;
    }
    public void <init>()
    {
        org.apache.commons.codec.digest.Sha2Crypt r0;

        r0 := @this: org.apache.commons.codec.digest.Sha2Crypt;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static java.lang.String sha256Crypt(byte[])
    {
        byte[] $r0;
        java.lang.String $r1;

        $r0 := @parameter0: byte[];

        $r1 = staticinvoke <org.apache.commons.codec.digest.Sha2Crypt: java.lang.String sha256Crypt(byte[],java.lang.String)>($r0, null);

        return $r1;
    }
    public static java.lang.String sha256Crypt(byte[], java.lang.String)
    {
        byte[] $r0;
        java.lang.String $r1;
        java.lang.StringBuilder $r2;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: java.lang.String;

        if $r1 != null goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("$5$");

        $r1 = staticinvoke <org.apache.commons.codec.digest.B64: java.lang.String getRandomSalt(int)>(8);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $r1 = staticinvoke <org.apache.commons.codec.digest.Sha2Crypt: java.lang.String sha2Crypt(byte[],java.lang.String,java.lang.String,int,java.lang.String)>($r0, $r1, "$5$", 32, "SHA-256");

        return $r1;
    }
    private static java.lang.String sha2Crypt(byte[], java.lang.String, java.lang.String, int, java.lang.String)
    {
        byte[] $r0, r5, $r10, $r14, r15, $r16;
        java.lang.String $r1, $r2, $r3;
        int $i0, i1, i2, $i3, i4, $i5;
        java.lang.StringBuilder r4;
        boolean z0, $z1;
        java.lang.IllegalArgumentException $r6;
        java.util.regex.Pattern $r7;
        java.util.regex.Matcher $r8;
        java.nio.charset.Charset $r9;
        java.security.MessageDigest $r11, r12, $r13;
        byte $b6, $b7, $b8;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $i0 := @parameter3: int;

        $r3 := @parameter4: java.lang.String;

        i1 = lengthof $r0;

        i2 = 5000;

        z0 = 0;

        if $r1 != null goto label01;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Salt must not be null");

        throw $r6;

     label01:
        $r7 = <org.apache.commons.codec.digest.Sha2Crypt: java.util.regex.Pattern SALT_PATTERN>;

        $r8 = virtualinvoke $r7.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r1);

        if $r8 == null goto label02;

        $z1 = virtualinvoke $r8.<java.util.regex.Matcher: boolean find()>();

        if $z1 != 0 goto label03;

     label02:
        $r6 = new java.lang.IllegalArgumentException;

        r4 = new java.lang.StringBuilder;

        specialinvoke r4.<java.lang.StringBuilder: void <init>()>();

        r4 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid salt value: ");

        r4 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r6;

     label03:
        $r1 = virtualinvoke $r8.<java.util.regex.Matcher: java.lang.String group(int)>(3);

        if $r1 == null goto label04;

        $r1 = virtualinvoke $r8.<java.util.regex.Matcher: java.lang.String group(int)>(3);

        i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r1);

        i2 = staticinvoke <java.lang.Math: int min(int,int)>(999999999, i2);

        i2 = staticinvoke <java.lang.Math: int max(int,int)>(1000, i2);

        z0 = 1;

     label04:
        $r1 = virtualinvoke $r8.<java.util.regex.Matcher: java.lang.String group(int)>(4);

        $r9 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset UTF_8>;

        $r10 = virtualinvoke $r1.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r9);

        $i3 = lengthof $r10;

        $r11 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getDigest(java.lang.String)>($r3);

        r12 = $r11;

        virtualinvoke $r11.<java.security.MessageDigest: void update(byte[])>($r0);

        virtualinvoke $r11.<java.security.MessageDigest: void update(byte[])>($r10);

        $r13 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getDigest(java.lang.String)>($r3);

        virtualinvoke $r13.<java.security.MessageDigest: void update(byte[])>($r0);

        virtualinvoke $r13.<java.security.MessageDigest: void update(byte[])>($r10);

        virtualinvoke $r13.<java.security.MessageDigest: void update(byte[])>($r0);

        r5 = virtualinvoke $r13.<java.security.MessageDigest: byte[] digest()>();

        i4 = lengthof $r0;

     label05:
        if i4 <= $i0 goto label06;

        virtualinvoke $r11.<java.security.MessageDigest: void update(byte[],int,int)>(r5, 0, $i0);

        i4 = i4 - $i0;

        goto label05;

     label06:
        virtualinvoke $r11.<java.security.MessageDigest: void update(byte[],int,int)>(r5, 0, i4);

        i4 = lengthof $r0;

     label07:
        if i4 <= 0 goto label10;

        $i5 = i4 & 1;

        if $i5 == 0 goto label09;

        virtualinvoke $r11.<java.security.MessageDigest: void update(byte[],int,int)>(r5, 0, $i0);

     label08:
        i4 = i4 >> 1;

        goto label07;

     label09:
        virtualinvoke $r11.<java.security.MessageDigest: void update(byte[])>($r0);

        goto label08;

     label10:
        $r14 = virtualinvoke $r11.<java.security.MessageDigest: byte[] digest()>();

        r15 = $r14;

        $r11 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getDigest(java.lang.String)>($r3);

        i4 = 1;

     label11:
        if i4 > i1 goto label12;

        virtualinvoke $r11.<java.security.MessageDigest: void update(byte[])>($r0);

        i4 = i4 + 1;

        goto label11;

     label12:
        $r16 = virtualinvoke $r11.<java.security.MessageDigest: byte[] digest()>();

        r5 = newarray (byte)[i1];

        i4 = 0;

     label13:
        $i5 = i1 - $i0;

        if i4 >= $i5 goto label14;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r16, 0, r5, i4, $i0);

        i4 = i4 + $i0;

        goto label13;

     label14:
        $i5 = i1 - i4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r16, 0, r5, i4, $i5);

        $r11 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getDigest(java.lang.String)>($r3);

        i4 = 1;

     label15:
        $b6 = $r14[0];

        $i5 = $b6 & 255;

        $i5 = $i5 + 16;

        if i4 > $i5 goto label16;

        virtualinvoke $r11.<java.security.MessageDigest: void update(byte[])>($r10);

        i4 = i4 + 1;

        goto label15;

     label16:
        $r14 = virtualinvoke $r11.<java.security.MessageDigest: byte[] digest()>();

        $r16 = newarray (byte)[$i3];

        i4 = 0;

     label17:
        $i5 = $i3 - $i0;

        if i4 >= $i5 goto label18;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r14, 0, $r16, i4, $i0);

        i4 = i4 + $i0;

        goto label17;

     label18:
        $i5 = $i3 - i4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r14, 0, $r16, i4, $i5);

        i4 = 0;

     label19:
        $i5 = i2 + -1;

        if i4 > $i5 goto label26;

        $r13 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getDigest(java.lang.String)>($r3);

        r12 = $r13;

        $i5 = i4 & 1;

        if $i5 == 0 goto label24;

        virtualinvoke $r13.<java.security.MessageDigest: void update(byte[],int,int)>(r5, 0, i1);

     label20:
        $i5 = i4 % 3;

        if $i5 == 0 goto label21;

        virtualinvoke $r13.<java.security.MessageDigest: void update(byte[],int,int)>($r16, 0, $i3);

     label21:
        $i5 = i4 % 7;

        if $i5 == 0 goto label22;

        virtualinvoke $r13.<java.security.MessageDigest: void update(byte[],int,int)>(r5, 0, i1);

     label22:
        $i5 = i4 & 1;

        if $i5 == 0 goto label25;

        virtualinvoke $r13.<java.security.MessageDigest: void update(byte[],int,int)>(r15, 0, $i0);

     label23:
        r15 = virtualinvoke $r13.<java.security.MessageDigest: byte[] digest()>();

        i4 = i4 + 1;

        goto label19;

     label24:
        virtualinvoke $r13.<java.security.MessageDigest: void update(byte[],int,int)>(r15, 0, $i0);

        goto label20;

     label25:
        virtualinvoke $r13.<java.security.MessageDigest: void update(byte[],int,int)>(r5, 0, i1);

        goto label23;

     label26:
        r4 = new java.lang.StringBuilder;

        specialinvoke r4.<java.lang.StringBuilder: void <init>(java.lang.String)>($r2);

        if z0 == 0 goto label27;

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("rounds=");

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("$");

     label27:
        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("$");

        if $i0 != 32 goto label29;

        $b6 = r15[0];

        $b7 = r15[10];

        $b8 = r15[20];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($b6, $b7, $b8, 4, r4);

        $b6 = r15[21];

        $b7 = r15[1];

        $b8 = r15[11];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($b6, $b7, $b8, 4, r4);

        $b6 = r15[12];

        $b7 = r15[22];

        $b8 = r15[2];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($b6, $b7, $b8, 4, r4);

        $b6 = r15[3];

        $b7 = r15[13];

        $b8 = r15[23];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($b6, $b7, $b8, 4, r4);

        $b6 = r15[24];

        $b7 = r15[4];

        $b8 = r15[14];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($b6, $b7, $b8, 4, r4);

        $b6 = r15[15];

        $b7 = r15[25];

        $b8 = r15[5];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($b6, $b7, $b8, 4, r4);

        $b6 = r15[6];

        $b7 = r15[16];

        $b8 = r15[26];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($b6, $b7, $b8, 4, r4);

        $b6 = r15[27];

        $b7 = r15[7];

        $b8 = r15[17];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($b6, $b7, $b8, 4, r4);

        $b6 = r15[18];

        $b7 = r15[28];

        $b8 = r15[8];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($b6, $b7, $b8, 4, r4);

        $b6 = r15[9];

        $b7 = r15[19];

        $b8 = r15[29];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($b6, $b7, $b8, 4, r4);

        $b6 = r15[31];

        $b7 = r15[30];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>(0, $b6, $b7, 3, r4);

     label28:
        staticinvoke <java.util.Arrays: void fill(byte[],byte)>($r14, 0);

        staticinvoke <java.util.Arrays: void fill(byte[],byte)>(r5, 0);

        staticinvoke <java.util.Arrays: void fill(byte[],byte)>($r16, 0);

        virtualinvoke r12.<java.security.MessageDigest: void reset()>();

        virtualinvoke $r11.<java.security.MessageDigest: void reset()>();

        staticinvoke <java.util.Arrays: void fill(byte[],byte)>($r0, 0);

        staticinvoke <java.util.Arrays: void fill(byte[],byte)>($r10, 0);

        $r1 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;

     label29:
        $b6 = r15[0];

        $b7 = r15[21];

        $b8 = r15[42];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($b6, $b7, $b8, 4, r4);

        $b6 = r15[22];

        $b7 = r15[43];

        $b8 = r15[1];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($b6, $b7, $b8, 4, r4);

        $b6 = r15[44];

        $b7 = r15[2];

        $b8 = r15[23];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($b6, $b7, $b8, 4, r4);

        $b6 = r15[3];

        $b7 = r15[24];

        $b8 = r15[45];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($b6, $b7, $b8, 4, r4);

        $b6 = r15[25];

        $b7 = r15[46];

        $b8 = r15[4];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($b6, $b7, $b8, 4, r4);

        $b6 = r15[47];

        $b7 = r15[5];

        $b8 = r15[26];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($b6, $b7, $b8, 4, r4);

        $b6 = r15[6];

        $b7 = r15[27];

        $b8 = r15[48];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($b6, $b7, $b8, 4, r4);

        $b6 = r15[28];

        $b7 = r15[49];

        $b8 = r15[7];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($b6, $b7, $b8, 4, r4);

        $b6 = r15[50];

        $b7 = r15[8];

        $b8 = r15[29];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($b6, $b7, $b8, 4, r4);

        $b6 = r15[9];

        $b7 = r15[30];

        $b8 = r15[51];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($b6, $b7, $b8, 4, r4);

        $b6 = r15[31];

        $b7 = r15[52];

        $b8 = r15[10];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($b6, $b7, $b8, 4, r4);

        $b6 = r15[53];

        $b7 = r15[11];

        $b8 = r15[32];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($b6, $b7, $b8, 4, r4);

        $b6 = r15[12];

        $b7 = r15[33];

        $b8 = r15[54];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($b6, $b7, $b8, 4, r4);

        $b6 = r15[34];

        $b7 = r15[55];

        $b8 = r15[13];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($b6, $b7, $b8, 4, r4);

        $b6 = r15[56];

        $b7 = r15[14];

        $b8 = r15[35];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($b6, $b7, $b8, 4, r4);

        $b6 = r15[15];

        $b7 = r15[36];

        $b8 = r15[57];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($b6, $b7, $b8, 4, r4);

        $b6 = r15[37];

        $b7 = r15[58];

        $b8 = r15[16];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($b6, $b7, $b8, 4, r4);

        $b6 = r15[59];

        $b7 = r15[17];

        $b8 = r15[38];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($b6, $b7, $b8, 4, r4);

        $b6 = r15[18];

        $b7 = r15[39];

        $b8 = r15[60];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($b6, $b7, $b8, 4, r4);

        $b6 = r15[40];

        $b7 = r15[61];

        $b8 = r15[19];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($b6, $b7, $b8, 4, r4);

        $b6 = r15[62];

        $b7 = r15[20];

        $b8 = r15[41];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($b6, $b7, $b8, 4, r4);

        $b6 = r15[63];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>(0, 0, $b6, 2, r4);

        goto label28;
    }
    public static java.lang.String sha512Crypt(byte[])
    {
        byte[] $r0;
        java.lang.String $r1;

        $r0 := @parameter0: byte[];

        $r1 = staticinvoke <org.apache.commons.codec.digest.Sha2Crypt: java.lang.String sha512Crypt(byte[],java.lang.String)>($r0, null);

        return $r1;
    }
    public static java.lang.String sha512Crypt(byte[], java.lang.String)
    {
        byte[] $r0;
        java.lang.String $r1;
        java.lang.StringBuilder $r2;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: java.lang.String;

        if $r1 != null goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("$6$");

        $r1 = staticinvoke <org.apache.commons.codec.digest.B64: java.lang.String getRandomSalt(int)>(8);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $r1 = staticinvoke <org.apache.commons.codec.digest.Sha2Crypt: java.lang.String sha2Crypt(byte[],java.lang.String,java.lang.String,int,java.lang.String)>($r0, $r1, "$6$", 64, "SHA-512");

        return $r1;
    }
