org.apache.commons.codec.digest.Md5Crypt extends java.lang.Object
static final java.lang.String APR1_PREFIX
private static final int BLOCKSIZE
static final java.lang.String MD5_PREFIX
private static final int ROUNDS
    public void <init>()
    {
        org.apache.commons.codec.digest.Md5Crypt r0;

        r0 := @this: org.apache.commons.codec.digest.Md5Crypt;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static java.lang.String apr1Crypt(java.lang.String)
    {
        java.lang.String $r0;
        java.nio.charset.Charset $r1;
        byte[] $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset UTF_8>;

        $r2 = virtualinvoke $r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r1);

        $r0 = staticinvoke <org.apache.commons.codec.digest.Md5Crypt: java.lang.String apr1Crypt(byte[])>($r2);

        return $r0;
    }
    public static java.lang.String apr1Crypt(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1;
        java.nio.charset.Charset $r2;
        byte[] $r3;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset UTF_8>;

        $r3 = virtualinvoke $r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        $r0 = staticinvoke <org.apache.commons.codec.digest.Md5Crypt: java.lang.String apr1Crypt(byte[],java.lang.String)>($r3, $r1);

        return $r0;
    }
    public static java.lang.String apr1Crypt(byte[])
    {
        byte[] $r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        $r0 := @parameter0: byte[];

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("$apr1$");

        $r2 = staticinvoke <org.apache.commons.codec.digest.B64: java.lang.String getRandomSalt(int)>(8);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r2 = staticinvoke <org.apache.commons.codec.digest.Md5Crypt: java.lang.String apr1Crypt(byte[],java.lang.String)>($r0, $r2);

        return $r2;
    }
    public static java.lang.String apr1Crypt(byte[], java.lang.String)
    {
        byte[] $r0;
        java.lang.String $r1;
        boolean $z0;
        java.lang.StringBuilder $r2;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: java.lang.String;

        if $r1 == null goto label1;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("$apr1$");

        if $z0 != 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("$apr1$");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $r1 = staticinvoke <org.apache.commons.codec.digest.Md5Crypt: java.lang.String md5Crypt(byte[],java.lang.String,java.lang.String)>($r0, $r1, "$apr1$");

        return $r1;
    }
    public static java.lang.String md5Crypt(byte[])
    {
        byte[] $r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        $r0 := @parameter0: byte[];

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("$1$");

        $r2 = staticinvoke <org.apache.commons.codec.digest.B64: java.lang.String getRandomSalt(int)>(8);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r2 = staticinvoke <org.apache.commons.codec.digest.Md5Crypt: java.lang.String md5Crypt(byte[],java.lang.String)>($r0, $r2);

        return $r2;
    }
    public static java.lang.String md5Crypt(byte[], java.lang.String)
    {
        byte[] $r0;
        java.lang.String $r1;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: java.lang.String;

        $r1 = staticinvoke <org.apache.commons.codec.digest.Md5Crypt: java.lang.String md5Crypt(byte[],java.lang.String,java.lang.String)>($r0, $r1, "$1$");

        return $r1;
    }
    public static java.lang.String md5Crypt(byte[], java.lang.String, java.lang.String)
    {
        byte[] $r0, $r5, $r7;
        java.lang.String $r1, $r2, $r10;
        int i0, i1, $i2;
        java.lang.StringBuilder r3, $r14;
        java.nio.charset.Charset $r4;
        java.security.MessageDigest $r6, $r8, r9;
        java.util.regex.Pattern $r11;
        java.util.regex.Matcher $r12;
        boolean $z0;
        java.lang.IllegalArgumentException $r13;
        byte $b3, $b4, $b5;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        i0 = lengthof $r0;

        if $r1 != null goto label04;

        $r1 = staticinvoke <org.apache.commons.codec.digest.B64: java.lang.String getRandomSalt(int)>(8);

     label01:
        $r4 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset UTF_8>;

        $r5 = virtualinvoke $r1.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r4);

        $r6 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getMd5Digest()>();

        virtualinvoke $r6.<java.security.MessageDigest: void update(byte[])>($r0);

        $r4 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset UTF_8>;

        $r7 = virtualinvoke $r2.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r4);

        virtualinvoke $r6.<java.security.MessageDigest: void update(byte[])>($r7);

        virtualinvoke $r6.<java.security.MessageDigest: void update(byte[])>($r5);

        $r8 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getMd5Digest()>();

        r9 = $r8;

        virtualinvoke $r8.<java.security.MessageDigest: void update(byte[])>($r0);

        virtualinvoke $r8.<java.security.MessageDigest: void update(byte[])>($r5);

        virtualinvoke $r8.<java.security.MessageDigest: void update(byte[])>($r0);

        $r7 = virtualinvoke $r8.<java.security.MessageDigest: byte[] digest()>();

        i1 = i0;

     label02:
        if i1 <= 0 goto label08;

        if i1 <= 16 goto label07;

        $i2 = 16;

     label03:
        virtualinvoke $r6.<java.security.MessageDigest: void update(byte[],int,int)>($r7, 0, $i2);

        i1 = i1 + -16;

        goto label02;

     label04:
        r3 = new java.lang.StringBuilder;

        specialinvoke r3.<java.lang.StringBuilder: void <init>()>();

        r3 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("^");

        $r10 = virtualinvoke $r2.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("$", "\\$");

        r3 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        r3 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("([\\.\\/a-zA-Z0-9]{1,8}).*");

        $r10 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r1);

        if $r12 == null goto label05;

        $z0 = virtualinvoke $r12.<java.util.regex.Matcher: boolean find()>();

        if $z0 != 0 goto label06;

     label05:
        $r13 = new java.lang.IllegalArgumentException;

        r3 = new java.lang.StringBuilder;

        specialinvoke r3.<java.lang.StringBuilder: void <init>()>();

        r3 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid salt value: ");

        r3 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r13;

     label06:
        $r1 = virtualinvoke $r12.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        goto label01;

     label07:
        $i2 = i1;

        goto label03;

     label08:
        staticinvoke <java.util.Arrays: void fill(byte[],byte)>($r7, 0);

     label09:
        if i0 <= 0 goto label12;

        i1 = i0 & 1;

        if i1 != 1 goto label11;

        $b3 = $r7[0];

        virtualinvoke $r6.<java.security.MessageDigest: void update(byte)>($b3);

     label10:
        i0 = i0 >> 1;

        goto label09;

     label11:
        $b3 = $r0[0];

        virtualinvoke $r6.<java.security.MessageDigest: void update(byte)>($b3);

        goto label10;

     label12:
        r3 = new java.lang.StringBuilder;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("$");

        $r1 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r3.<java.lang.StringBuilder: void <init>(java.lang.String)>($r1);

        $r7 = virtualinvoke $r6.<java.security.MessageDigest: byte[] digest()>();

        i0 = 0;

     label13:
        if i0 >= 1000 goto label20;

        $r8 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getMd5Digest()>();

        r9 = $r8;

        i1 = i0 & 1;

        if i1 == 0 goto label18;

        virtualinvoke $r8.<java.security.MessageDigest: void update(byte[])>($r0);

     label14:
        i1 = i0 % 3;

        if i1 == 0 goto label15;

        virtualinvoke $r8.<java.security.MessageDigest: void update(byte[])>($r5);

     label15:
        i1 = i0 % 7;

        if i1 == 0 goto label16;

        virtualinvoke $r8.<java.security.MessageDigest: void update(byte[])>($r0);

     label16:
        i1 = i0 & 1;

        if i1 == 0 goto label19;

        virtualinvoke $r8.<java.security.MessageDigest: void update(byte[],int,int)>($r7, 0, 16);

     label17:
        $r7 = virtualinvoke $r8.<java.security.MessageDigest: byte[] digest()>();

        i0 = i0 + 1;

        goto label13;

     label18:
        virtualinvoke $r8.<java.security.MessageDigest: void update(byte[],int,int)>($r7, 0, 16);

        goto label14;

     label19:
        virtualinvoke $r8.<java.security.MessageDigest: void update(byte[])>($r0);

        goto label17;

     label20:
        $b3 = $r7[0];

        $b4 = $r7[6];

        $b5 = $r7[12];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($b3, $b4, $b5, 4, r3);

        $b3 = $r7[1];

        $b4 = $r7[7];

        $b5 = $r7[13];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($b3, $b4, $b5, 4, r3);

        $b3 = $r7[2];

        $b4 = $r7[8];

        $b5 = $r7[14];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($b3, $b4, $b5, 4, r3);

        $b3 = $r7[3];

        $b4 = $r7[9];

        $b5 = $r7[15];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($b3, $b4, $b5, 4, r3);

        $b3 = $r7[4];

        $b4 = $r7[10];

        $b5 = $r7[5];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($b3, $b4, $b5, 4, r3);

        $b3 = $r7[11];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>(0, 0, $b3, 2, r3);

        virtualinvoke $r6.<java.security.MessageDigest: void reset()>();

        virtualinvoke r9.<java.security.MessageDigest: void reset()>();

        staticinvoke <java.util.Arrays: void fill(byte[],byte)>($r0, 0);

        staticinvoke <java.util.Arrays: void fill(byte[],byte)>($r5, 0);

        staticinvoke <java.util.Arrays: void fill(byte[],byte)>($r7, 0);

        $r1 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;
    }
