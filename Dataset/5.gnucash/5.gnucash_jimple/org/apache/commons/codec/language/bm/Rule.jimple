org.apache.commons.codec.language.bm.Rule extends java.lang.Object
public static final java.lang.String ALL
public static final org.apache.commons.codec.language.bm.Rule$RPattern ALL_STRINGS_RMATCHER
private static final java.lang.String DOUBLE_QUOTE
private static final java.lang.String HASH_INCLUDE
private static final java.util.Map RULES
private final org.apache.commons.codec.language.bm.Rule$RPattern lContext
private final java.lang.String pattern
private final org.apache.commons.codec.language.bm.Rule$PhonemeExpr phoneme
private final org.apache.commons.codec.language.bm.Rule$RPattern rContext
    static void <clinit>()
    {
        java.lang.IllegalStateException r0, $r16;
        int i0, i1, i2, i3;
        java.util.HashMap r1;
        org.apache.commons.codec.language.bm.RuleType r2, $r18;
        java.util.EnumMap r3;
        org.apache.commons.codec.language.bm.NameType r4;
        org.apache.commons.codec.language.bm.Rule$1 $r5;
        org.apache.commons.codec.language.bm.NameType[] $r6;
        org.apache.commons.codec.language.bm.RuleType[] $r7;
        org.apache.commons.codec.language.bm.Languages $r8;
        java.util.Set $r9;
        java.util.Iterator $r10;
        boolean $z0;
        java.lang.Object $r11;
        java.lang.String r12, $r14;
        java.util.Scanner $r13;
        java.util.List $r15;
        java.lang.StringBuilder $r17;
        java.util.Map $r19, $r20;

        $r5 = new org.apache.commons.codec.language.bm.Rule$1;

        specialinvoke $r5.<org.apache.commons.codec.language.bm.Rule$1: void <init>()>();

        <org.apache.commons.codec.language.bm.Rule: org.apache.commons.codec.language.bm.Rule$RPattern ALL_STRINGS_RMATCHER> = $r5;

        r3 = new java.util.EnumMap;

        specialinvoke r3.<java.util.EnumMap: void <init>(java.lang.Class)>(class "Lorg/apache/commons/codec/language/bm/NameType;");

        <org.apache.commons.codec.language.bm.Rule: java.util.Map RULES> = r3;

        $r6 = staticinvoke <org.apache.commons.codec.language.bm.NameType: org.apache.commons.codec.language.bm.NameType[] values()>();

        i0 = lengthof $r6;

        i2 = 0;

     label01:
        if i2 >= i0 goto label10;

        r4 = $r6[i2];

        r3 = new java.util.EnumMap;

        specialinvoke r3.<java.util.EnumMap: void <init>(java.lang.Class)>(class "Lorg/apache/commons/codec/language/bm/RuleType;");

        $r7 = staticinvoke <org.apache.commons.codec.language.bm.RuleType: org.apache.commons.codec.language.bm.RuleType[] values()>();

        i1 = lengthof $r7;

        i3 = 0;

     label02:
        if i3 >= i1 goto label09;

        r2 = $r7[i3];

        r1 = new java.util.HashMap;

        specialinvoke r1.<java.util.HashMap: void <init>()>();

        $r8 = staticinvoke <org.apache.commons.codec.language.bm.Languages: org.apache.commons.codec.language.bm.Languages getInstance(org.apache.commons.codec.language.bm.NameType)>(r4);

        $r9 = virtualinvoke $r8.<org.apache.commons.codec.language.bm.Languages: java.util.Set getLanguages()>();

        $r10 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label03:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label07;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (java.lang.String) $r11;

     label04:
        $r13 = staticinvoke <org.apache.commons.codec.language.bm.Rule: java.util.Scanner createScanner(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,java.lang.String)>(r4, r2, r12);

        $r14 = staticinvoke <org.apache.commons.codec.language.bm.Rule: java.lang.String createResourceName(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,java.lang.String)>(r4, r2, r12);

        $r15 = staticinvoke <org.apache.commons.codec.language.bm.Rule: java.util.List parseRules(java.util.Scanner,java.lang.String)>($r13, $r14);

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r12, $r15);

     label05:
        goto label03;

     label06:
        r0 := @caughtexception;

        $r16 = new java.lang.IllegalStateException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Problem processing ");

        r12 = staticinvoke <org.apache.commons.codec.language.bm.Rule: java.lang.String createResourceName(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,java.lang.String)>(r4, r2, r12);

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        r12 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>(r12, r0);

        throw $r16;

     label07:
        $r18 = <org.apache.commons.codec.language.bm.RuleType: org.apache.commons.codec.language.bm.RuleType RULES>;

        $z0 = virtualinvoke r2.<org.apache.commons.codec.language.bm.RuleType: boolean equals(java.lang.Object)>($r18);

        if $z0 != 0 goto label08;

        $r13 = staticinvoke <org.apache.commons.codec.language.bm.Rule: java.util.Scanner createScanner(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,java.lang.String)>(r4, r2, "common");

        r12 = staticinvoke <org.apache.commons.codec.language.bm.Rule: java.lang.String createResourceName(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,java.lang.String)>(r4, r2, "common");

        $r15 = staticinvoke <org.apache.commons.codec.language.bm.Rule: java.util.List parseRules(java.util.Scanner,java.lang.String)>($r13, r12);

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("common", $r15);

     label08:
        $r19 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>(r1);

        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r19);

        i3 = i3 + 1;

        goto label02;

     label09:
        $r19 = <org.apache.commons.codec.language.bm.Rule: java.util.Map RULES>;

        $r20 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>(r3);

        interfaceinvoke $r19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, $r20);

        i2 = i2 + 1;

        goto label01;

     label10:
        return;

        catch java.lang.IllegalStateException from label04 to label05 with label06;
    }
    public void <init>(java.lang.String, java.lang.String, java.lang.String, org.apache.commons.codec.language.bm.Rule$PhonemeExpr)
    {
        org.apache.commons.codec.language.bm.Rule r0;
        java.lang.String $r1, $r2, $r3;
        org.apache.commons.codec.language.bm.Rule$PhonemeExpr $r4;
        java.lang.StringBuilder $r5;
        org.apache.commons.codec.language.bm.Rule$RPattern $r6;

        r0 := @this: org.apache.commons.codec.language.bm.Rule;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: org.apache.commons.codec.language.bm.Rule$PhonemeExpr;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.codec.language.bm.Rule: java.lang.String pattern> = $r1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("$");

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = staticinvoke <org.apache.commons.codec.language.bm.Rule: org.apache.commons.codec.language.bm.Rule$RPattern pattern(java.lang.String)>($r1);

        r0.<org.apache.commons.codec.language.bm.Rule: org.apache.commons.codec.language.bm.Rule$RPattern lContext> = $r6;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("^");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = staticinvoke <org.apache.commons.codec.language.bm.Rule: org.apache.commons.codec.language.bm.Rule$RPattern pattern(java.lang.String)>($r1);

        r0.<org.apache.commons.codec.language.bm.Rule: org.apache.commons.codec.language.bm.Rule$RPattern rContext> = $r6;

        r0.<org.apache.commons.codec.language.bm.Rule: org.apache.commons.codec.language.bm.Rule$PhonemeExpr phoneme> = $r4;

        return;
    }
    static boolean access$100(java.lang.CharSequence, java.lang.CharSequence)
    {
        java.lang.CharSequence $r0, $r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.CharSequence;

        $r1 := @parameter1: java.lang.CharSequence;

        $z0 = staticinvoke <org.apache.commons.codec.language.bm.Rule: boolean startsWith(java.lang.CharSequence,java.lang.CharSequence)>($r0, $r1);

        return $z0;
    }
    static boolean access$200(java.lang.CharSequence, java.lang.CharSequence)
    {
        java.lang.CharSequence $r0, $r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.CharSequence;

        $r1 := @parameter1: java.lang.CharSequence;

        $z0 = staticinvoke <org.apache.commons.codec.language.bm.Rule: boolean endsWith(java.lang.CharSequence,java.lang.CharSequence)>($r0, $r1);

        return $z0;
    }
    static boolean access$300(java.lang.CharSequence, char)
    {
        java.lang.CharSequence $r0;
        char $c0;
        boolean $z0;

        $r0 := @parameter0: java.lang.CharSequence;

        $c0 := @parameter1: char;

        $z0 = staticinvoke <org.apache.commons.codec.language.bm.Rule: boolean contains(java.lang.CharSequence,char)>($r0, $c0);

        return $z0;
    }
    private static boolean contains(java.lang.CharSequence, char)
    {
        java.lang.CharSequence $r0;
        char $c0, $c3;
        int i1, $i2;

        $r0 := @parameter0: java.lang.CharSequence;

        $c0 := @parameter1: char;

        i1 = 0;

     label1:
        $i2 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        if i1 >= $i2 goto label3;

        $c3 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>(i1);

        if $c3 != $c0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }
    private static java.lang.String createResourceName(org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.RuleType, java.lang.String)
    {
        org.apache.commons.codec.language.bm.NameType $r0;
        org.apache.commons.codec.language.bm.RuleType $r1;
        java.lang.String $r2, $r4;
        java.lang.Object[] $r3;

        $r0 := @parameter0: org.apache.commons.codec.language.bm.NameType;

        $r1 := @parameter1: org.apache.commons.codec.language.bm.RuleType;

        $r2 := @parameter2: java.lang.String;

        $r3 = newarray (java.lang.Object)[3];

        $r4 = virtualinvoke $r0.<org.apache.commons.codec.language.bm.NameType: java.lang.String getName()>();

        $r3[0] = $r4;

        $r4 = virtualinvoke $r1.<org.apache.commons.codec.language.bm.RuleType: java.lang.String getName()>();

        $r3[1] = $r4;

        $r3[2] = $r2;

        $r2 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("org/apache/commons/codec/language/bm/%s_%s_%s.txt", $r3);

        return $r2;
    }
    private static java.util.Scanner createScanner(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.Object[] $r1;
        java.lang.Class $r2;
        java.lang.ClassLoader $r3;
        java.io.InputStream $r4;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6;
        java.util.Scanner $r7;

        $r0 := @parameter0: java.lang.String;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = $r0;

        $r0 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("org/apache/commons/codec/language/bm/%s.txt", $r1);

        $r2 = class "Lorg/apache/commons/codec/language/bm/Languages;";

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r4 = virtualinvoke $r3.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>($r0);

        if $r4 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to load resource: ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

        throw $r5;

     label1:
        $r7 = new java.util.Scanner;

        specialinvoke $r7.<java.util.Scanner: void <init>(java.io.InputStream,java.lang.String)>($r4, "UTF-8");

        return $r7;
    }
    private static java.util.Scanner createScanner(org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.RuleType, java.lang.String)
    {
        org.apache.commons.codec.language.bm.NameType $r0;
        org.apache.commons.codec.language.bm.RuleType $r1;
        java.lang.String $r2;
        java.lang.Class $r3;
        java.lang.ClassLoader $r4;
        java.io.InputStream $r5;
        java.lang.IllegalArgumentException $r6;
        java.lang.StringBuilder $r7;
        java.util.Scanner $r8;

        $r0 := @parameter0: org.apache.commons.codec.language.bm.NameType;

        $r1 := @parameter1: org.apache.commons.codec.language.bm.RuleType;

        $r2 := @parameter2: java.lang.String;

        $r2 = staticinvoke <org.apache.commons.codec.language.bm.Rule: java.lang.String createResourceName(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,java.lang.String)>($r0, $r1, $r2);

        $r3 = class "Lorg/apache/commons/codec/language/bm/Languages;";

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r5 = virtualinvoke $r4.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>($r2);

        if $r5 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to load resource: ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r6;

     label1:
        $r8 = new java.util.Scanner;

        specialinvoke $r8.<java.util.Scanner: void <init>(java.io.InputStream,java.lang.String)>($r5, "UTF-8");

        return $r8;
    }
    private static boolean endsWith(java.lang.CharSequence, java.lang.CharSequence)
    {
        java.lang.CharSequence $r0, $r1;
        int $i0, $i1;
        char $c2, $c3;

        $r0 := @parameter0: java.lang.CharSequence;

        $r1 := @parameter1: java.lang.CharSequence;

        $i0 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $i1 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        if $i0 <= $i1 goto label1;

        return 0;

     label1:
        $i0 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $i0 = $i0 + -1;

        $i1 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $i1 = $i1 + -1;

     label2:
        if $i1 < 0 goto label3;

        $c2 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i0);

        $c3 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>($i1);

        if $c2 != $c3 goto label4;

        $i0 = $i0 + -1;

        $i1 = $i1 + -1;

        goto label2;

     label3:
        return 1;

     label4:
        return 0;
    }
    public static java.util.List getInstance(org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.RuleType, java.lang.String)
    {
        org.apache.commons.codec.language.bm.NameType $r0;
        org.apache.commons.codec.language.bm.RuleType $r1;
        java.lang.String $r2, $r8;
        java.util.Map $r3;
        java.lang.Object $r4;
        java.util.List r5;
        java.lang.IllegalArgumentException $r6;
        java.lang.Object[] $r7;

        $r0 := @parameter0: org.apache.commons.codec.language.bm.NameType;

        $r1 := @parameter1: org.apache.commons.codec.language.bm.RuleType;

        $r2 := @parameter2: java.lang.String;

        $r3 = <org.apache.commons.codec.language.bm.Rule: java.util.Map RULES>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r0);

        $r3 = (java.util.Map) $r4;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r3 = (java.util.Map) $r4;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        r5 = (java.util.List) $r4;

        if r5 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = newarray (java.lang.Object)[3];

        $r8 = virtualinvoke $r0.<org.apache.commons.codec.language.bm.NameType: java.lang.String getName()>();

        $r7[0] = $r8;

        $r8 = virtualinvoke $r1.<org.apache.commons.codec.language.bm.RuleType: java.lang.String getName()>();

        $r7[1] = $r8;

        $r7[2] = $r2;

        $r2 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("No rules found for %s, %s, %s.", $r7);

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r6;

     label1:
        return r5;
    }
    public static java.util.List getInstance(org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.RuleType, org.apache.commons.codec.language.bm.Languages$LanguageSet)
    {
        org.apache.commons.codec.language.bm.NameType $r0;
        org.apache.commons.codec.language.bm.RuleType $r1;
        org.apache.commons.codec.language.bm.Languages$LanguageSet $r2;
        boolean $z0;
        java.lang.String $r3;
        java.util.List $r4;

        $r0 := @parameter0: org.apache.commons.codec.language.bm.NameType;

        $r1 := @parameter1: org.apache.commons.codec.language.bm.RuleType;

        $r2 := @parameter2: org.apache.commons.codec.language.bm.Languages$LanguageSet;

        $z0 = virtualinvoke $r2.<org.apache.commons.codec.language.bm.Languages$LanguageSet: boolean isSingleton()>();

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke $r2.<org.apache.commons.codec.language.bm.Languages$LanguageSet: java.lang.String getAny()>();

        $r4 = staticinvoke <org.apache.commons.codec.language.bm.Rule: java.util.List getInstance(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,java.lang.String)>($r0, $r1, $r3);

        return $r4;

     label1:
        $r4 = staticinvoke <org.apache.commons.codec.language.bm.Rule: java.util.List getInstance(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,java.lang.String)>($r0, $r1, "any");

        return $r4;
    }
    private static org.apache.commons.codec.language.bm.Rule$Phoneme parsePhoneme(java.lang.String)
    {
        java.lang.String $r0, $r3;
        java.util.HashSet r1;
        int $i0, $i1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        java.lang.String[] $r4;
        java.util.List $r5;
        org.apache.commons.codec.language.bm.Rule$Phoneme $r6;
        org.apache.commons.codec.language.bm.Languages$LanguageSet $r7;

        $r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("[");

        if $i0 < 0 goto label2;

        $z0 = virtualinvoke $r0.<java.lang.String: boolean endsWith(java.lang.String)>("]");

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Phoneme expression contains a \'[\' but does not end in \']\'");

        throw $r2;

     label1:
        $r3 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $i0 = $i0 + 1;

        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        $i1 = $i1 + -1;

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>($i0, $i1);

        r1 = new java.util.HashSet;

        $r4 = virtualinvoke $r0.<java.lang.String: java.lang.String[] split(java.lang.String)>("[+]");

        $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

        specialinvoke r1.<java.util.HashSet: void <init>(java.util.Collection)>($r5);

        $r6 = new org.apache.commons.codec.language.bm.Rule$Phoneme;

        $r7 = staticinvoke <org.apache.commons.codec.language.bm.Languages$LanguageSet: org.apache.commons.codec.language.bm.Languages$LanguageSet 'from'(java.util.Set)>(r1);

        specialinvoke $r6.<org.apache.commons.codec.language.bm.Rule$Phoneme: void <init>(java.lang.CharSequence,org.apache.commons.codec.language.bm.Languages$LanguageSet)>($r3, $r7);

        return $r6;

     label2:
        $r6 = new org.apache.commons.codec.language.bm.Rule$Phoneme;

        $r7 = <org.apache.commons.codec.language.bm.Languages: org.apache.commons.codec.language.bm.Languages$LanguageSet ANY_LANGUAGE>;

        specialinvoke $r6.<org.apache.commons.codec.language.bm.Rule$Phoneme: void <init>(java.lang.CharSequence,org.apache.commons.codec.language.bm.Languages$LanguageSet)>($r0, $r7);

        return $r6;
    }
    private static org.apache.commons.codec.language.bm.Rule$PhonemeExpr parsePhonemeExpr(java.lang.String)
    {
        java.lang.String $r0, $r4;
        int i0, i1;
        java.util.ArrayList r1;
        org.apache.commons.codec.language.bm.Languages$LanguageSet $r2;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        java.lang.String[] $r5;
        org.apache.commons.codec.language.bm.Rule$Phoneme $r6;
        org.apache.commons.codec.language.bm.Rule$PhonemeList $r7;

        $r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke $r0.<java.lang.String: boolean startsWith(java.lang.String)>("(");

        if $z0 == 0 goto label6;

        $z0 = virtualinvoke $r0.<java.lang.String: boolean endsWith(java.lang.String)>(")");

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Phoneme starts with \'(\' so must end with \')\'");

        throw $r3;

     label1:
        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>()>();

        i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        i0 = i0 + -1;

        $r4 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(1, i0);

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String[] split(java.lang.String)>("[|]");

        i0 = lengthof $r5;

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        $r0 = $r5[i1];

        $r6 = staticinvoke <org.apache.commons.codec.language.bm.Rule: org.apache.commons.codec.language.bm.Rule$Phoneme parsePhoneme(java.lang.String)>($r0);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r6);

        i1 = i1 + 1;

        goto label2;

     label3:
        $z0 = virtualinvoke $r4.<java.lang.String: boolean startsWith(java.lang.String)>("|");

        if $z0 != 0 goto label4;

        $z0 = virtualinvoke $r4.<java.lang.String: boolean endsWith(java.lang.String)>("|");

        if $z0 == 0 goto label5;

     label4:
        $r6 = new org.apache.commons.codec.language.bm.Rule$Phoneme;

        $r2 = <org.apache.commons.codec.language.bm.Languages: org.apache.commons.codec.language.bm.Languages$LanguageSet ANY_LANGUAGE>;

        specialinvoke $r6.<org.apache.commons.codec.language.bm.Rule$Phoneme: void <init>(java.lang.CharSequence,org.apache.commons.codec.language.bm.Languages$LanguageSet)>("", $r2);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r6);

     label5:
        $r7 = new org.apache.commons.codec.language.bm.Rule$PhonemeList;

        specialinvoke $r7.<org.apache.commons.codec.language.bm.Rule$PhonemeList: void <init>(java.util.List)>(r1);

        return $r7;

     label6:
        $r6 = staticinvoke <org.apache.commons.codec.language.bm.Rule: org.apache.commons.codec.language.bm.Rule$Phoneme parsePhoneme(java.lang.String)>($r0);

        return $r6;
    }
    private static java.util.List parseRules(java.util.Scanner, java.lang.String)
    {
        java.util.Scanner $r0, $r9;
        java.lang.String $r1, $r5, r6, $r7, $r12;
        org.apache.commons.codec.language.bm.Rule$2 r2;
        java.lang.IllegalArgumentException r3;
        java.util.ArrayList r4;
        int i0, $i1;
        boolean z0, $z1;
        java.lang.StringBuilder $r8;
        java.util.List $r10;
        java.lang.String[] $r11;
        org.apache.commons.codec.language.bm.Rule$PhonemeExpr $r13;
        java.lang.IllegalStateException $r14;

        $r0 := @parameter0: java.util.Scanner;

        $r1 := @parameter1: java.lang.String;

        r4 = new java.util.ArrayList;

        specialinvoke r4.<java.util.ArrayList: void <init>()>();

        i0 = 0;

        z0 = 0;

     label01:
        $z1 = virtualinvoke $r0.<java.util.Scanner: boolean hasNextLine()>();

        if $z1 == 0 goto label19;

        i0 = i0 + 1;

        $r5 = virtualinvoke $r0.<java.util.Scanner: java.lang.String nextLine()>();

        r6 = $r5;

        if z0 == 0 goto label02;

        $z1 = virtualinvoke $r5.<java.lang.String: boolean endsWith(java.lang.String)>("*/");

        if $z1 == 0 goto label01;

        z0 = 0;

        goto label01;

     label02:
        $z1 = virtualinvoke $r5.<java.lang.String: boolean startsWith(java.lang.String)>("/*");

        if $z1 == 0 goto label03;

        z0 = 1;

        goto label01;

     label03:
        $i1 = virtualinvoke $r5.<java.lang.String: int indexOf(java.lang.String)>("//");

        if $i1 < 0 goto label04;

        r6 = virtualinvoke $r5.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

     label04:
        r6 = virtualinvoke r6.<java.lang.String: java.lang.String trim()>();

        $i1 = virtualinvoke r6.<java.lang.String: int length()>();

        if $i1 == 0 goto label01;

        $z1 = virtualinvoke r6.<java.lang.String: boolean startsWith(java.lang.String)>("#include");

        if $z1 == 0 goto label06;

        $r7 = "#include";

        $i1 = virtualinvoke $r7.<java.lang.String: int length()>();

        r6 = virtualinvoke r6.<java.lang.String: java.lang.String substring(int)>($i1);

        r6 = virtualinvoke r6.<java.lang.String: java.lang.String trim()>();

        $z1 = virtualinvoke r6.<java.lang.String: boolean contains(java.lang.CharSequence)>(" ");

        if $z1 == 0 goto label05;

        r3 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Malformed import statement \'");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' in ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw r3;

     label05:
        $r9 = staticinvoke <org.apache.commons.codec.language.bm.Rule: java.util.Scanner createScanner(java.lang.String)>(r6);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("->");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r5 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = staticinvoke <org.apache.commons.codec.language.bm.Rule: java.util.List parseRules(java.util.Scanner,java.lang.String)>($r9, $r5);

        interfaceinvoke r4.<java.util.List: boolean addAll(java.util.Collection)>($r10);

        goto label01;

     label06:
        $r11 = virtualinvoke r6.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\s+");

        $i1 = lengthof $r11;

        if $i1 == 4 goto label07;

        r3 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Malformed rule statement split into ");

        i0 = lengthof $r11;

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" parts: ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw r3;

     label07:
        $r5 = $r11[0];

     label08:
        $r5 = staticinvoke <org.apache.commons.codec.language.bm.Rule: java.lang.String stripQuotes(java.lang.String)>($r5);

     label09:
        r6 = $r11[1];

     label10:
        r6 = staticinvoke <org.apache.commons.codec.language.bm.Rule: java.lang.String stripQuotes(java.lang.String)>(r6);

     label11:
        $r7 = $r11[2];

     label12:
        $r7 = staticinvoke <org.apache.commons.codec.language.bm.Rule: java.lang.String stripQuotes(java.lang.String)>($r7);

     label13:
        $r12 = $r11[3];

     label14:
        $r12 = staticinvoke <org.apache.commons.codec.language.bm.Rule: java.lang.String stripQuotes(java.lang.String)>($r12);

        $r13 = staticinvoke <org.apache.commons.codec.language.bm.Rule: org.apache.commons.codec.language.bm.Rule$PhonemeExpr parsePhonemeExpr(java.lang.String)>($r12);

     label15:
        r2 = new org.apache.commons.codec.language.bm.Rule$2;

     label16:
        specialinvoke r2.<org.apache.commons.codec.language.bm.Rule$2: void <init>(java.lang.String,java.lang.String,java.lang.String,org.apache.commons.codec.language.bm.Rule$PhonemeExpr,int,java.lang.String)>($r5, r6, $r7, $r13, i0, $r1);

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>(r2);

     label17:
        goto label01;

     label18:
        r3 := @caughtexception;

        $r14 = new java.lang.IllegalStateException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Problem parsing line \'");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' in ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r1, r3);

        throw $r14;

     label19:
        return r4;

        catch java.lang.IllegalArgumentException from label08 to label09 with label18;
        catch java.lang.IllegalArgumentException from label10 to label11 with label18;
        catch java.lang.IllegalArgumentException from label12 to label13 with label18;
        catch java.lang.IllegalArgumentException from label14 to label15 with label18;
        catch java.lang.IllegalArgumentException from label16 to label17 with label18;
    }
    private static org.apache.commons.codec.language.bm.Rule$RPattern pattern(java.lang.String)
    {
        java.lang.String $r0, r1, r6;
        boolean z0, $z1, $z2, $z3, $z4;
        byte $b0;
        int $i1;
        org.apache.commons.codec.language.bm.Rule$3 $r2;
        org.apache.commons.codec.language.bm.Rule$4 $r3;
        org.apache.commons.codec.language.bm.Rule$5 $r4;
        org.apache.commons.codec.language.bm.Rule$6 $r5;
        org.apache.commons.codec.language.bm.Rule$7 $r7;
        org.apache.commons.codec.language.bm.Rule$8 $r8;
        org.apache.commons.codec.language.bm.Rule$9 $r9;
        org.apache.commons.codec.language.bm.Rule$10 $r10;
        org.apache.commons.codec.language.bm.Rule$RPattern r11;

        $r0 := @parameter0: java.lang.String;

        z0 = 1;

        $z1 = virtualinvoke $r0.<java.lang.String: boolean startsWith(java.lang.String)>("^");

        $z2 = virtualinvoke $r0.<java.lang.String: boolean endsWith(java.lang.String)>("$");

        if $z1 == 0 goto label03;

        $b0 = 1;

     label01:
        if $z2 == 0 goto label04;

        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        $i1 = $i1 + -1;

     label02:
        r1 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>($b0, $i1);

        $z3 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("[");

        if $z3 != 0 goto label10;

        if $z1 == 0 goto label06;

        if $z2 == 0 goto label06;

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i1 != 0 goto label05;

        $r2 = new org.apache.commons.codec.language.bm.Rule$3;

        specialinvoke $r2.<org.apache.commons.codec.language.bm.Rule$3: void <init>()>();

        return $r2;

     label03:
        $b0 = 0;

        goto label01;

     label04:
        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        goto label02;

     label05:
        $r3 = new org.apache.commons.codec.language.bm.Rule$4;

        specialinvoke $r3.<org.apache.commons.codec.language.bm.Rule$4: void <init>(java.lang.String)>(r1);

        return $r3;

     label06:
        if $z1 != 0 goto label07;

        if $z2 == 0 goto label08;

     label07:
        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i1 != 0 goto label08;

        r11 = <org.apache.commons.codec.language.bm.Rule: org.apache.commons.codec.language.bm.Rule$RPattern ALL_STRINGS_RMATCHER>;

        return r11;

     label08:
        if $z1 == 0 goto label09;

        $r4 = new org.apache.commons.codec.language.bm.Rule$5;

        specialinvoke $r4.<org.apache.commons.codec.language.bm.Rule$5: void <init>(java.lang.String)>(r1);

        return $r4;

     label09:
        if $z2 == 0 goto label16;

        $r5 = new org.apache.commons.codec.language.bm.Rule$6;

        specialinvoke $r5.<org.apache.commons.codec.language.bm.Rule$6: void <init>(java.lang.String)>(r1);

        return $r5;

     label10:
        $z3 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("[");

        $z4 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>("]");

        if $z3 == 0 goto label16;

        if $z4 == 0 goto label16;

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        $i1 = $i1 + -1;

        r1 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(1, $i1);

        r6 = r1;

        $z3 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("[");

        if $z3 != 0 goto label16;

        $z3 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("^");

        if $z3 == 0 goto label11;

        r6 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(1);

     label11:
        r1 = r6;

        if $z3 != 0 goto label13;

     label12:
        if $z1 == 0 goto label14;

        if $z2 == 0 goto label14;

        $r7 = new org.apache.commons.codec.language.bm.Rule$7;

        specialinvoke $r7.<org.apache.commons.codec.language.bm.Rule$7: void <init>(java.lang.String,boolean)>(r1, z0);

        return $r7;

     label13:
        z0 = 0;

        goto label12;

     label14:
        if $z1 == 0 goto label15;

        $r8 = new org.apache.commons.codec.language.bm.Rule$8;

        specialinvoke $r8.<org.apache.commons.codec.language.bm.Rule$8: void <init>(java.lang.String,boolean)>(r1, z0);

        return $r8;

     label15:
        if $z2 == 0 goto label16;

        $r9 = new org.apache.commons.codec.language.bm.Rule$9;

        specialinvoke $r9.<org.apache.commons.codec.language.bm.Rule$9: void <init>(java.lang.String,boolean)>(r1, z0);

        return $r9;

     label16:
        $r10 = new org.apache.commons.codec.language.bm.Rule$10;

        specialinvoke $r10.<org.apache.commons.codec.language.bm.Rule$10: void <init>(java.lang.String)>($r0);

        return $r10;
    }
    private static boolean startsWith(java.lang.CharSequence, java.lang.CharSequence)
    {
        java.lang.CharSequence $r0, $r1;
        int $i0, $i1;
        char $c2, $c3;

        $r0 := @parameter0: java.lang.CharSequence;

        $r1 := @parameter1: java.lang.CharSequence;

        $i0 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $i1 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        if $i0 <= $i1 goto label1;

        return 0;

     label1:
        $i0 = 0;

     label2:
        $i1 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        if $i0 >= $i1 goto label3;

        $c2 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i0);

        $c3 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>($i0);

        if $c2 != $c3 goto label4;

        $i0 = $i0 + 1;

        goto label2;

     label3:
        return 1;

     label4:
        return 0;
    }
    private static java.lang.String stripQuotes(java.lang.String)
    {
        java.lang.String $r0;
        boolean $z0;
        int $i0;

        $r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke $r0.<java.lang.String: boolean startsWith(java.lang.String)>("\"");

        if $z0 == 0 goto label1;

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int)>(1);

     label1:
        $z0 = virtualinvoke $r0.<java.lang.String: boolean endsWith(java.lang.String)>("\"");

        if $z0 == 0 goto label2;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        $i0 = $i0 + -1;

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

     label2:
        return $r0;
    }
    public org.apache.commons.codec.language.bm.Rule$RPattern getLContext()
    {
        org.apache.commons.codec.language.bm.Rule r0;
        org.apache.commons.codec.language.bm.Rule$RPattern r1;

        r0 := @this: org.apache.commons.codec.language.bm.Rule;

        r1 = r0.<org.apache.commons.codec.language.bm.Rule: org.apache.commons.codec.language.bm.Rule$RPattern lContext>;

        return r1;
    }
    public java.lang.String getPattern()
    {
        org.apache.commons.codec.language.bm.Rule r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.codec.language.bm.Rule;

        r1 = r0.<org.apache.commons.codec.language.bm.Rule: java.lang.String pattern>;

        return r1;
    }
    public org.apache.commons.codec.language.bm.Rule$PhonemeExpr getPhoneme()
    {
        org.apache.commons.codec.language.bm.Rule r0;
        org.apache.commons.codec.language.bm.Rule$PhonemeExpr r1;

        r0 := @this: org.apache.commons.codec.language.bm.Rule;

        r1 = r0.<org.apache.commons.codec.language.bm.Rule: org.apache.commons.codec.language.bm.Rule$PhonemeExpr phoneme>;

        return r1;
    }
    public org.apache.commons.codec.language.bm.Rule$RPattern getRContext()
    {
        org.apache.commons.codec.language.bm.Rule r0;
        org.apache.commons.codec.language.bm.Rule$RPattern r1;

        r0 := @this: org.apache.commons.codec.language.bm.Rule;

        r1 = r0.<org.apache.commons.codec.language.bm.Rule: org.apache.commons.codec.language.bm.Rule$RPattern rContext>;

        return r1;
    }
    public boolean patternAndContextMatches(java.lang.CharSequence, int)
    {
        org.apache.commons.codec.language.bm.Rule r0;
        java.lang.CharSequence $r1, $r4;
        int $i0, i1, $i2;
        java.lang.IndexOutOfBoundsException $r2;
        java.lang.String $r3;
        boolean $z0;
        org.apache.commons.codec.language.bm.Rule$RPattern $r5;

        r0 := @this: org.apache.commons.codec.language.bm.Rule;

        $r1 := @parameter0: java.lang.CharSequence;

        $i0 := @parameter1: int;

        if $i0 >= 0 goto label1;

        $r2 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("Can not match pattern at negative indexes");

        throw $r2;

     label1:
        $r3 = r0.<org.apache.commons.codec.language.bm.Rule: java.lang.String pattern>;

        i1 = virtualinvoke $r3.<java.lang.String: int length()>();

        i1 = $i0 + i1;

        $i2 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        if i1 <= $i2 goto label2;

        return 0;

     label2:
        $r4 = interfaceinvoke $r1.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>($i0, i1);

        $r3 = r0.<org.apache.commons.codec.language.bm.Rule: java.lang.String pattern>;

        $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label3;

        $r5 = r0.<org.apache.commons.codec.language.bm.Rule: org.apache.commons.codec.language.bm.Rule$RPattern rContext>;

        $i2 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $r4 = interfaceinvoke $r1.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(i1, $i2);

        $z0 = interfaceinvoke $r5.<org.apache.commons.codec.language.bm.Rule$RPattern: boolean isMatch(java.lang.CharSequence)>($r4);

        if $z0 == 0 goto label3;

        $r5 = r0.<org.apache.commons.codec.language.bm.Rule: org.apache.commons.codec.language.bm.Rule$RPattern lContext>;

        $r1 = interfaceinvoke $r1.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(0, $i0);

        $z0 = interfaceinvoke $r5.<org.apache.commons.codec.language.bm.Rule$RPattern: boolean isMatch(java.lang.CharSequence)>($r1);

        return $z0;

     label3:
        return 0;
    }
