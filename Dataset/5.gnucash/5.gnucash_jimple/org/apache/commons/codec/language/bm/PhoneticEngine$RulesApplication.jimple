org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication extends java.lang.Object
private final java.util.List finalRules
private boolean found
private int i
private final java.lang.CharSequence input
private final int maxPhonemes
private org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder phonemeBuilder
    public void <init>(java.util.List, java.lang.CharSequence, org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder, int, int)
    {
        org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication r0;
        java.util.List r1;
        java.lang.CharSequence $r2;
        org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder $r3;
        int $i0, $i1;
        java.lang.NullPointerException $r4;

        r0 := @this: org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication;

        r1 := @parameter0: java.util.List;

        $r2 := @parameter1: java.lang.CharSequence;

        $r3 := @parameter2: org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder;

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("The finalRules argument must not be null");

        throw $r4;

     label1:
        r0.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: java.util.List finalRules> = r1;

        r0.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder phonemeBuilder> = $r3;

        r0.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: java.lang.CharSequence input> = $r2;

        r0.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: int i> = $i0;

        r0.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: int maxPhonemes> = $i1;

        return;
    }
    public int getI()
    {
        org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication r0;
        int i0;

        r0 := @this: org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication;

        i0 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: int i>;

        return i0;
    }
    public org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder getPhonemeBuilder()
    {
        org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication r0;
        org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder r1;

        r0 := @this: org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication;

        r1 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder phonemeBuilder>;

        return r1;
    }
    public org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication invoke()
    {
        org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication r0;
        int $i0, i1;
        java.util.List $r1;
        java.util.Iterator $r2;
        boolean $z0;
        java.lang.Object $r3;
        org.apache.commons.codec.language.bm.Rule r4;
        java.lang.String $r5;
        java.lang.CharSequence $r6;
        org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder $r7;
        org.apache.commons.codec.language.bm.Rule$PhonemeExpr $r8;

        r0 := @this: org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication;

        r0.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: boolean found> = 0;

        i1 = 0;

        $r1 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: java.util.List finalRules>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.commons.codec.language.bm.Rule) $r3;

        $r5 = virtualinvoke r4.<org.apache.commons.codec.language.bm.Rule: java.lang.String getPattern()>();

        i1 = virtualinvoke $r5.<java.lang.String: int length()>();

        $r6 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: java.lang.CharSequence input>;

        $i0 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: int i>;

        $z0 = virtualinvoke r4.<org.apache.commons.codec.language.bm.Rule: boolean patternAndContextMatches(java.lang.CharSequence,int)>($r6, $i0);

        if $z0 == 0 goto label1;

        $r7 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder phonemeBuilder>;

        $r8 = virtualinvoke r4.<org.apache.commons.codec.language.bm.Rule: org.apache.commons.codec.language.bm.Rule$PhonemeExpr getPhoneme()>();

        $i0 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: int maxPhonemes>;

        $r7 = virtualinvoke $r7.<org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder: org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder apply(org.apache.commons.codec.language.bm.Rule$PhonemeExpr,int)>($r8, $i0);

        r0.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder phonemeBuilder> = $r7;

        r0.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: boolean found> = 1;

     label2:
        $z0 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: boolean found>;

        if $z0 != 0 goto label3;

        i1 = 1;

     label3:
        $i0 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: int i>;

        i1 = $i0 + i1;

        r0.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: int i> = i1;

        return r0;
    }
    public boolean isFound()
    {
        org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication r0;
        boolean z0;

        r0 := @this: org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication;

        z0 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: boolean found>;

        return z0;
    }
