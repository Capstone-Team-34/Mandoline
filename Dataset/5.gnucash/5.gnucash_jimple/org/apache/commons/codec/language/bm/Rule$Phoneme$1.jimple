org.apache.commons.codec.language.bm.Rule$Phoneme$1 extends java.lang.Object implements java.util.Comparator
    void <init>()
    {
        org.apache.commons.codec.language.bm.Rule$Phoneme$1 r0;

        r0 := @this: org.apache.commons.codec.language.bm.Rule$Phoneme$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        org.apache.commons.codec.language.bm.Rule$Phoneme$1 r0;
        int $i0;
        java.lang.Object $r1, $r2;
        org.apache.commons.codec.language.bm.Rule$Phoneme $r3, $r4;

        r0 := @this: org.apache.commons.codec.language.bm.Rule$Phoneme$1;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = (org.apache.commons.codec.language.bm.Rule$Phoneme) $r1;

        $r4 = (org.apache.commons.codec.language.bm.Rule$Phoneme) $r2;

        $i0 = virtualinvoke r0.<org.apache.commons.codec.language.bm.Rule$Phoneme$1: int compare(org.apache.commons.codec.language.bm.Rule$Phoneme,org.apache.commons.codec.language.bm.Rule$Phoneme)>($r3, $r4);

        return $i0;
    }
    public int compare(org.apache.commons.codec.language.bm.Rule$Phoneme, org.apache.commons.codec.language.bm.Rule$Phoneme)
    {
        org.apache.commons.codec.language.bm.Rule$Phoneme$1 r0;
        org.apache.commons.codec.language.bm.Rule$Phoneme $r1, $r2;
        int i0, $i1;
        java.lang.CharSequence $r3;
        char $c2, $c3;

        r0 := @this: org.apache.commons.codec.language.bm.Rule$Phoneme$1;

        $r1 := @parameter0: org.apache.commons.codec.language.bm.Rule$Phoneme;

        $r2 := @parameter1: org.apache.commons.codec.language.bm.Rule$Phoneme;

        i0 = 0;

     label1:
        $r3 = staticinvoke <org.apache.commons.codec.language.bm.Rule$Phoneme: java.lang.CharSequence access$000(org.apache.commons.codec.language.bm.Rule$Phoneme)>($r1);

        $i1 = interfaceinvoke $r3.<java.lang.CharSequence: int length()>();

        if i0 >= $i1 goto label3;

        $r3 = staticinvoke <org.apache.commons.codec.language.bm.Rule$Phoneme: java.lang.CharSequence access$000(org.apache.commons.codec.language.bm.Rule$Phoneme)>($r2);

        $i1 = interfaceinvoke $r3.<java.lang.CharSequence: int length()>();

        if i0 < $i1 goto label2;

        return 1;

     label2:
        $r3 = staticinvoke <org.apache.commons.codec.language.bm.Rule$Phoneme: java.lang.CharSequence access$000(org.apache.commons.codec.language.bm.Rule$Phoneme)>($r1);

        $c2 = interfaceinvoke $r3.<java.lang.CharSequence: char charAt(int)>(i0);

        $r3 = staticinvoke <org.apache.commons.codec.language.bm.Rule$Phoneme: java.lang.CharSequence access$000(org.apache.commons.codec.language.bm.Rule$Phoneme)>($r2);

        $c3 = interfaceinvoke $r3.<java.lang.CharSequence: char charAt(int)>(i0);

        $i1 = $c2 - $c3;

        if $i1 != 0 goto label5;

        i0 = i0 + 1;

        goto label1;

     label3:
        $r3 = staticinvoke <org.apache.commons.codec.language.bm.Rule$Phoneme: java.lang.CharSequence access$000(org.apache.commons.codec.language.bm.Rule$Phoneme)>($r1);

        i0 = interfaceinvoke $r3.<java.lang.CharSequence: int length()>();

        $r3 = staticinvoke <org.apache.commons.codec.language.bm.Rule$Phoneme: java.lang.CharSequence access$000(org.apache.commons.codec.language.bm.Rule$Phoneme)>($r2);

        $i1 = interfaceinvoke $r3.<java.lang.CharSequence: int length()>();

        if i0 >= $i1 goto label4;

        return -1;

     label4:
        return 0;

     label5:
        return $i1;
    }
