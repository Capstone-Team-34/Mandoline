org.apache.commons.codec.language.bm.Languages extends java.lang.Object
public static final java.lang.String ANY
public static final org.apache.commons.codec.language.bm.Languages$LanguageSet ANY_LANGUAGE
private static final java.util.Map LANGUAGES
public static final org.apache.commons.codec.language.bm.Languages$LanguageSet NO_LANGUAGES
private final java.util.Set languages
    static void <clinit>()
    {
        int i0, i1;
        org.apache.commons.codec.language.bm.NameType r0;
        java.util.EnumMap $r1;
        org.apache.commons.codec.language.bm.NameType[] $r2;
        java.util.Map $r3;
        java.lang.String $r4;
        org.apache.commons.codec.language.bm.Languages $r5;
        org.apache.commons.codec.language.bm.Languages$1 $r6;
        org.apache.commons.codec.language.bm.Languages$2 $r7;

        $r1 = new java.util.EnumMap;

        specialinvoke $r1.<java.util.EnumMap: void <init>(java.lang.Class)>(class "Lorg/apache/commons/codec/language/bm/NameType;");

        <org.apache.commons.codec.language.bm.Languages: java.util.Map LANGUAGES> = $r1;

        $r2 = staticinvoke <org.apache.commons.codec.language.bm.NameType: org.apache.commons.codec.language.bm.NameType[] values()>();

        i0 = lengthof $r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r0 = $r2[i1];

        $r3 = <org.apache.commons.codec.language.bm.Languages: java.util.Map LANGUAGES>;

        $r4 = staticinvoke <org.apache.commons.codec.language.bm.Languages: java.lang.String langResourceName(org.apache.commons.codec.language.bm.NameType)>(r0);

        $r5 = staticinvoke <org.apache.commons.codec.language.bm.Languages: org.apache.commons.codec.language.bm.Languages getInstance(java.lang.String)>($r4);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r5);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r6 = new org.apache.commons.codec.language.bm.Languages$1;

        specialinvoke $r6.<org.apache.commons.codec.language.bm.Languages$1: void <init>()>();

        <org.apache.commons.codec.language.bm.Languages: org.apache.commons.codec.language.bm.Languages$LanguageSet NO_LANGUAGES> = $r6;

        $r7 = new org.apache.commons.codec.language.bm.Languages$2;

        specialinvoke $r7.<org.apache.commons.codec.language.bm.Languages$2: void <init>()>();

        <org.apache.commons.codec.language.bm.Languages: org.apache.commons.codec.language.bm.Languages$LanguageSet ANY_LANGUAGE> = $r7;

        return;
    }
    private void <init>(java.util.Set)
    {
        org.apache.commons.codec.language.bm.Languages r0;
        java.util.Set r1;

        r0 := @this: org.apache.commons.codec.language.bm.Languages;

        r1 := @parameter0: java.util.Set;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.codec.language.bm.Languages: java.util.Set languages> = r1;

        return;
    }
    public static org.apache.commons.codec.language.bm.Languages getInstance(java.lang.String)
    {
        java.lang.String $r0;
        java.util.HashSet r1;
        java.util.Scanner r2;
        java.lang.Class $r3;
        java.lang.ClassLoader $r4;
        java.io.InputStream $r5;
        java.lang.IllegalArgumentException $r6;
        java.lang.StringBuilder $r7;
        boolean z0, $z1;
        int $i0;
        org.apache.commons.codec.language.bm.Languages $r8;
        java.util.Set $r9;

        $r0 := @parameter0: java.lang.String;

        r1 = new java.util.HashSet;

        specialinvoke r1.<java.util.HashSet: void <init>()>();

        $r3 = class "Lorg/apache/commons/codec/language/bm/Languages;";

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r5 = virtualinvoke $r4.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>($r0);

        if $r5 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to resolve required resource: ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

        throw $r6;

     label1:
        r2 = new java.util.Scanner;

        specialinvoke r2.<java.util.Scanner: void <init>(java.io.InputStream,java.lang.String)>($r5, "UTF-8");

        z0 = 0;

     label2:
        $z1 = virtualinvoke r2.<java.util.Scanner: boolean hasNextLine()>();

        if $z1 == 0 goto label5;

        $r0 = virtualinvoke r2.<java.util.Scanner: java.lang.String nextLine()>();

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String trim()>();

        if z0 == 0 goto label3;

        $z1 = virtualinvoke $r0.<java.lang.String: boolean endsWith(java.lang.String)>("*/");

        if $z1 == 0 goto label2;

        z0 = 0;

        goto label2;

     label3:
        $z1 = virtualinvoke $r0.<java.lang.String: boolean startsWith(java.lang.String)>("/*");

        if $z1 == 0 goto label4;

        z0 = 1;

        goto label2;

     label4:
        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i0 <= 0 goto label2;

        interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>($r0);

        goto label2;

     label5:
        $r8 = new org.apache.commons.codec.language.bm.Languages;

        $r9 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>(r1);

        specialinvoke $r8.<org.apache.commons.codec.language.bm.Languages: void <init>(java.util.Set)>($r9);

        return $r8;
    }
    public static org.apache.commons.codec.language.bm.Languages getInstance(org.apache.commons.codec.language.bm.NameType)
    {
        org.apache.commons.codec.language.bm.NameType $r0;
        java.lang.Object $r1;
        java.util.Map $r2;
        org.apache.commons.codec.language.bm.Languages $r3;

        $r0 := @parameter0: org.apache.commons.codec.language.bm.NameType;

        $r2 = <org.apache.commons.codec.language.bm.Languages: java.util.Map LANGUAGES>;

        $r1 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r0);

        $r3 = (org.apache.commons.codec.language.bm.Languages) $r1;

        return $r3;
    }
    private static java.lang.String langResourceName(org.apache.commons.codec.language.bm.NameType)
    {
        org.apache.commons.codec.language.bm.NameType $r0;
        java.lang.Object[] $r1;
        java.lang.String $r2;

        $r0 := @parameter0: org.apache.commons.codec.language.bm.NameType;

        $r1 = newarray (java.lang.Object)[1];

        $r2 = virtualinvoke $r0.<org.apache.commons.codec.language.bm.NameType: java.lang.String getName()>();

        $r1[0] = $r2;

        $r2 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("org/apache/commons/codec/language/bm/%s_languages.txt", $r1);

        return $r2;
    }
    public java.util.Set getLanguages()
    {
        org.apache.commons.codec.language.bm.Languages r0;
        java.util.Set r1;

        r0 := @this: org.apache.commons.codec.language.bm.Languages;

        r1 = r0.<org.apache.commons.codec.language.bm.Languages: java.util.Set languages>;

        return r1;
    }
