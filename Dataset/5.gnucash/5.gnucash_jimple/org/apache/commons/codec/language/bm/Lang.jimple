org.apache.commons.codec.language.bm.Lang extends java.lang.Object
private static final java.lang.String LANGUAGE_RULES_RN
private static final java.util.Map Langs
private final org.apache.commons.codec.language.bm.Languages languages
private final java.util.List rules
    static void <clinit>()
    {
        int i0, i1;
        org.apache.commons.codec.language.bm.NameType r0;
        java.util.EnumMap $r1;
        org.apache.commons.codec.language.bm.NameType[] $r2;
        java.util.Map $r3;
        org.apache.commons.codec.language.bm.Languages $r4;
        org.apache.commons.codec.language.bm.Lang $r5;

        $r1 = new java.util.EnumMap;

        specialinvoke $r1.<java.util.EnumMap: void <init>(java.lang.Class)>(class "Lorg/apache/commons/codec/language/bm/NameType;");

        <org.apache.commons.codec.language.bm.Lang: java.util.Map Langs> = $r1;

        $r2 = staticinvoke <org.apache.commons.codec.language.bm.NameType: org.apache.commons.codec.language.bm.NameType[] values()>();

        i0 = lengthof $r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r0 = $r2[i1];

        $r3 = <org.apache.commons.codec.language.bm.Lang: java.util.Map Langs>;

        $r4 = staticinvoke <org.apache.commons.codec.language.bm.Languages: org.apache.commons.codec.language.bm.Languages getInstance(org.apache.commons.codec.language.bm.NameType)>(r0);

        $r5 = staticinvoke <org.apache.commons.codec.language.bm.Lang: org.apache.commons.codec.language.bm.Lang loadFromResource(java.lang.String,org.apache.commons.codec.language.bm.Languages)>("org/apache/commons/codec/language/bm/lang.txt", $r4);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r5);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
    private void <init>(java.util.List, org.apache.commons.codec.language.bm.Languages)
    {
        org.apache.commons.codec.language.bm.Lang r0;
        java.util.List r1;
        org.apache.commons.codec.language.bm.Languages $r2;

        r0 := @this: org.apache.commons.codec.language.bm.Lang;

        r1 := @parameter0: java.util.List;

        $r2 := @parameter1: org.apache.commons.codec.language.bm.Languages;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r1 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r1);

        r0.<org.apache.commons.codec.language.bm.Lang: java.util.List rules> = r1;

        r0.<org.apache.commons.codec.language.bm.Lang: org.apache.commons.codec.language.bm.Languages languages> = $r2;

        return;
    }
    public static org.apache.commons.codec.language.bm.Lang instance(org.apache.commons.codec.language.bm.NameType)
    {
        org.apache.commons.codec.language.bm.NameType $r0;
        java.lang.Object $r1;
        java.util.Map $r2;
        org.apache.commons.codec.language.bm.Lang $r3;

        $r0 := @parameter0: org.apache.commons.codec.language.bm.NameType;

        $r2 = <org.apache.commons.codec.language.bm.Lang: java.util.Map Langs>;

        $r1 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r0);

        $r3 = (org.apache.commons.codec.language.bm.Lang) $r1;

        return $r3;
    }
    public static org.apache.commons.codec.language.bm.Lang loadFromResource(java.lang.String, org.apache.commons.codec.language.bm.Languages)
    {
        java.lang.String $r0, $r8, r9;
        org.apache.commons.codec.language.bm.Languages $r1;
        java.util.ArrayList r2;
        java.util.Scanner r3;
        java.lang.Class $r4;
        java.lang.ClassLoader $r5;
        java.io.InputStream $r6;
        java.lang.IllegalStateException $r7;
        boolean z0, $z1;
        int $i0;
        java.lang.String[] $r10, $r14;
        java.lang.IllegalArgumentException $r11;
        java.lang.StringBuilder $r12;
        java.util.regex.Pattern $r13;
        org.apache.commons.codec.language.bm.Lang$LangRule $r15;
        java.util.HashSet $r16;
        java.util.List $r17;
        org.apache.commons.codec.language.bm.Lang $r18;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: org.apache.commons.codec.language.bm.Languages;

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        $r4 = class "Lorg/apache/commons/codec/language/bm/Lang;";

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r6 = virtualinvoke $r5.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>($r0);

        if $r6 != null goto label1;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Unable to resolve required resource:org/apache/commons/codec/language/bm/lang.txt");

        throw $r7;

     label1:
        r3 = new java.util.Scanner;

        specialinvoke r3.<java.util.Scanner: void <init>(java.io.InputStream,java.lang.String)>($r6, "UTF-8");

        z0 = 0;

     label2:
        $z1 = virtualinvoke r3.<java.util.Scanner: boolean hasNextLine()>();

        if $z1 == 0 goto label7;

        $r8 = virtualinvoke r3.<java.util.Scanner: java.lang.String nextLine()>();

        r9 = $r8;

        if z0 == 0 goto label3;

        $z1 = virtualinvoke $r8.<java.lang.String: boolean endsWith(java.lang.String)>("*/");

        if $z1 == 0 goto label2;

        z0 = 0;

        goto label2;

     label3:
        $z1 = virtualinvoke $r8.<java.lang.String: boolean startsWith(java.lang.String)>("/*");

        if $z1 == 0 goto label4;

        z0 = 1;

        goto label2;

     label4:
        $i0 = virtualinvoke $r8.<java.lang.String: int indexOf(java.lang.String)>("//");

        if $i0 < 0 goto label5;

        r9 = virtualinvoke $r8.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

     label5:
        r9 = virtualinvoke r9.<java.lang.String: java.lang.String trim()>();

        $i0 = virtualinvoke r9.<java.lang.String: int length()>();

        if $i0 == 0 goto label2;

        $r10 = virtualinvoke r9.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\s+");

        $i0 = lengthof $r10;

        if $i0 == 3 goto label6;

        $r11 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Malformed line \'");

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' in language resource \'");

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r0 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

        throw $r11;

     label6:
        $r8 = $r10[0];

        $r13 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($r8);

        $r8 = $r10[1];

        $r14 = virtualinvoke $r8.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\+");

        $r8 = $r10[2];

        $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>("true");

        $r15 = new org.apache.commons.codec.language.bm.Lang$LangRule;

        $r16 = new java.util.HashSet;

        $r17 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r14);

        specialinvoke $r16.<java.util.HashSet: void <init>(java.util.Collection)>($r17);

        specialinvoke $r15.<org.apache.commons.codec.language.bm.Lang$LangRule: void <init>(java.util.regex.Pattern,java.util.Set,boolean,org.apache.commons.codec.language.bm.Lang$1)>($r13, $r16, $z1, null);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r15);

        goto label2;

     label7:
        $r18 = new org.apache.commons.codec.language.bm.Lang;

        specialinvoke $r18.<org.apache.commons.codec.language.bm.Lang: void <init>(java.util.List,org.apache.commons.codec.language.bm.Languages)>(r2, $r1);

        return $r18;
    }
    public java.lang.String guessLanguage(java.lang.String)
    {
        org.apache.commons.codec.language.bm.Lang r0;
        java.lang.String $r1;
        org.apache.commons.codec.language.bm.Languages$LanguageSet $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.language.bm.Lang;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.commons.codec.language.bm.Lang: org.apache.commons.codec.language.bm.Languages$LanguageSet guessLanguages(java.lang.String)>($r1);

        $z0 = virtualinvoke $r2.<org.apache.commons.codec.language.bm.Languages$LanguageSet: boolean isSingleton()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke $r2.<org.apache.commons.codec.language.bm.Languages$LanguageSet: java.lang.String getAny()>();

        return $r1;

     label1:
        return "any";
    }
    public org.apache.commons.codec.language.bm.Languages$LanguageSet guessLanguages(java.lang.String)
    {
        org.apache.commons.codec.language.bm.Lang r0;
        java.lang.String $r1;
        java.util.HashSet r2;
        java.util.Locale $r3;
        org.apache.commons.codec.language.bm.Languages $r4;
        java.util.Set $r5;
        java.util.List $r6;
        java.util.Iterator $r7;
        boolean $z0;
        java.lang.Object $r8;
        org.apache.commons.codec.language.bm.Lang$LangRule r9;
        org.apache.commons.codec.language.bm.Languages$LanguageSet $r10, $r11;

        r0 := @this: org.apache.commons.codec.language.bm.Lang;

        $r1 := @parameter0: java.lang.String;

        $r3 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r3);

        r2 = new java.util.HashSet;

        $r4 = r0.<org.apache.commons.codec.language.bm.Lang: org.apache.commons.codec.language.bm.Languages languages>;

        $r5 = virtualinvoke $r4.<org.apache.commons.codec.language.bm.Languages: java.util.Set getLanguages()>();

        specialinvoke r2.<java.util.HashSet: void <init>(java.util.Collection)>($r5);

        $r6 = r0.<org.apache.commons.codec.language.bm.Lang: java.util.List rules>;

        $r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (org.apache.commons.codec.language.bm.Lang$LangRule) $r8;

        $z0 = virtualinvoke r9.<org.apache.commons.codec.language.bm.Lang$LangRule: boolean matches(java.lang.String)>($r1);

        if $z0 == 0 goto label1;

        $z0 = staticinvoke <org.apache.commons.codec.language.bm.Lang$LangRule: boolean access$100(org.apache.commons.codec.language.bm.Lang$LangRule)>(r9);

        if $z0 == 0 goto label2;

        $r5 = staticinvoke <org.apache.commons.codec.language.bm.Lang$LangRule: java.util.Set access$200(org.apache.commons.codec.language.bm.Lang$LangRule)>(r9);

        interfaceinvoke r2.<java.util.Set: boolean retainAll(java.util.Collection)>($r5);

        goto label1;

     label2:
        $r5 = staticinvoke <org.apache.commons.codec.language.bm.Lang$LangRule: java.util.Set access$200(org.apache.commons.codec.language.bm.Lang$LangRule)>(r9);

        interfaceinvoke r2.<java.util.Set: boolean removeAll(java.util.Collection)>($r5);

        goto label1;

     label3:
        $r10 = staticinvoke <org.apache.commons.codec.language.bm.Languages$LanguageSet: org.apache.commons.codec.language.bm.Languages$LanguageSet 'from'(java.util.Set)>(r2);

        $r11 = <org.apache.commons.codec.language.bm.Languages: org.apache.commons.codec.language.bm.Languages$LanguageSet NO_LANGUAGES>;

        $z0 = virtualinvoke $r10.<java.lang.Object: boolean equals(java.lang.Object)>($r11);

        if $z0 == 0 goto label4;

        $r10 = <org.apache.commons.codec.language.bm.Languages: org.apache.commons.codec.language.bm.Languages$LanguageSet ANY_LANGUAGE>;

     label4:
        return $r10;
    }
