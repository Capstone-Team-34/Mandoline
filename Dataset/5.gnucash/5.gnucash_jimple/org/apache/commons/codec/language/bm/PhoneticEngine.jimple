org.apache.commons.codec.language.bm.PhoneticEngine extends java.lang.Object
private static final int DEFAULT_MAX_PHONEMES
private static final java.util.Map NAME_PREFIXES
private final boolean concat
private final org.apache.commons.codec.language.bm.Lang lang
private final int maxPhonemes
private final org.apache.commons.codec.language.bm.NameType nameType
private final org.apache.commons.codec.language.bm.RuleType ruleType
    static void <clinit>()
    {
        java.util.EnumMap $r0;
        java.util.Map $r1;
        org.apache.commons.codec.language.bm.NameType $r2;
        java.util.HashSet $r3;
        java.lang.String[] $r4;
        java.util.List $r5;
        java.util.Set $r6;

        $r0 = new java.util.EnumMap;

        specialinvoke $r0.<java.util.EnumMap: void <init>(java.lang.Class)>(class "Lorg/apache/commons/codec/language/bm/NameType;");

        <org.apache.commons.codec.language.bm.PhoneticEngine: java.util.Map NAME_PREFIXES> = $r0;

        $r1 = <org.apache.commons.codec.language.bm.PhoneticEngine: java.util.Map NAME_PREFIXES>;

        $r2 = <org.apache.commons.codec.language.bm.NameType: org.apache.commons.codec.language.bm.NameType ASHKENAZI>;

        $r3 = new java.util.HashSet;

        $r4 = newarray (java.lang.String)[6];

        $r4[0] = "bar";

        $r4[1] = "ben";

        $r4[2] = "da";

        $r4[3] = "de";

        $r4[4] = "van";

        $r4[5] = "von";

        $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

        specialinvoke $r3.<java.util.HashSet: void <init>(java.util.Collection)>($r5);

        $r6 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r3);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r6);

        $r1 = <org.apache.commons.codec.language.bm.PhoneticEngine: java.util.Map NAME_PREFIXES>;

        $r2 = <org.apache.commons.codec.language.bm.NameType: org.apache.commons.codec.language.bm.NameType SEPHARDIC>;

        $r3 = new java.util.HashSet;

        $r4 = newarray (java.lang.String)[16];

        $r4[0] = "al";

        $r4[1] = "el";

        $r4[2] = "da";

        $r4[3] = "dal";

        $r4[4] = "de";

        $r4[5] = "del";

        $r4[6] = "dela";

        $r4[7] = "de la";

        $r4[8] = "della";

        $r4[9] = "des";

        $r4[10] = "di";

        $r4[11] = "do";

        $r4[12] = "dos";

        $r4[13] = "du";

        $r4[14] = "van";

        $r4[15] = "von";

        $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

        specialinvoke $r3.<java.util.HashSet: void <init>(java.util.Collection)>($r5);

        $r6 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r3);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r6);

        $r1 = <org.apache.commons.codec.language.bm.PhoneticEngine: java.util.Map NAME_PREFIXES>;

        $r2 = <org.apache.commons.codec.language.bm.NameType: org.apache.commons.codec.language.bm.NameType GENERIC>;

        $r3 = new java.util.HashSet;

        $r4 = newarray (java.lang.String)[14];

        $r4[0] = "da";

        $r4[1] = "dal";

        $r4[2] = "de";

        $r4[3] = "del";

        $r4[4] = "dela";

        $r4[5] = "de la";

        $r4[6] = "della";

        $r4[7] = "des";

        $r4[8] = "di";

        $r4[9] = "do";

        $r4[10] = "dos";

        $r4[11] = "du";

        $r4[12] = "van";

        $r4[13] = "von";

        $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

        specialinvoke $r3.<java.util.HashSet: void <init>(java.util.Collection)>($r5);

        $r6 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r3);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r6);

        return;
    }
    public void <init>(org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.RuleType, boolean)
    {
        org.apache.commons.codec.language.bm.PhoneticEngine r0;
        org.apache.commons.codec.language.bm.NameType $r1;
        org.apache.commons.codec.language.bm.RuleType $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.language.bm.PhoneticEngine;

        $r1 := @parameter0: org.apache.commons.codec.language.bm.NameType;

        $r2 := @parameter1: org.apache.commons.codec.language.bm.RuleType;

        $z0 := @parameter2: boolean;

        specialinvoke r0.<org.apache.commons.codec.language.bm.PhoneticEngine: void <init>(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,boolean,int)>($r1, $r2, $z0, 20);

        return;
    }
    public void <init>(org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.RuleType, boolean, int)
    {
        org.apache.commons.codec.language.bm.PhoneticEngine r0;
        org.apache.commons.codec.language.bm.NameType $r1;
        org.apache.commons.codec.language.bm.RuleType $r2, $r3;
        boolean $z0;
        int $i0;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;
        org.apache.commons.codec.language.bm.Lang $r7;

        r0 := @this: org.apache.commons.codec.language.bm.PhoneticEngine;

        $r1 := @parameter0: org.apache.commons.codec.language.bm.NameType;

        $r2 := @parameter1: org.apache.commons.codec.language.bm.RuleType;

        $z0 := @parameter2: boolean;

        $i0 := @parameter3: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = <org.apache.commons.codec.language.bm.RuleType: org.apache.commons.codec.language.bm.RuleType RULES>;

        if $r2 != $r3 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ruleType must not be ");

        $r2 = <org.apache.commons.codec.language.bm.RuleType: org.apache.commons.codec.language.bm.RuleType RULES>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r4;

     label1:
        r0.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.NameType nameType> = $r1;

        r0.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.RuleType ruleType> = $r2;

        r0.<org.apache.commons.codec.language.bm.PhoneticEngine: boolean concat> = $z0;

        $r7 = staticinvoke <org.apache.commons.codec.language.bm.Lang: org.apache.commons.codec.language.bm.Lang instance(org.apache.commons.codec.language.bm.NameType)>($r1);

        r0.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.Lang lang> = $r7;

        r0.<org.apache.commons.codec.language.bm.PhoneticEngine: int maxPhonemes> = $i0;

        return;
    }
    private org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder applyFinalRules(org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder, java.util.List)
    {
        org.apache.commons.codec.language.bm.PhoneticEngine r0;
        java.util.List r1;
        int $i0, i1;
        java.util.TreeSet r2;
        org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder r3, $r13;
        java.lang.NullPointerException $r4;
        boolean $z0;
        java.util.Comparator $r5;
        java.util.Set $r6;
        java.util.Iterator $r7;
        java.lang.Object $r8;
        org.apache.commons.codec.language.bm.Rule$Phoneme r9;
        org.apache.commons.codec.language.bm.Languages$LanguageSet $r10;
        java.lang.CharSequence $r11, $r14;
        org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication $r12;

        r0 := @this: org.apache.commons.codec.language.bm.PhoneticEngine;

        r3 := @parameter0: org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder;

        r1 := @parameter1: java.util.List;

        if r1 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("finalRules can not be null");

        throw $r4;

     label1:
        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        return r3;

     label2:
        r2 = new java.util.TreeSet;

        $r5 = <org.apache.commons.codec.language.bm.Rule$Phoneme: java.util.Comparator COMPARATOR>;

        specialinvoke r2.<java.util.TreeSet: void <init>(java.util.Comparator)>($r5);

        $r6 = virtualinvoke r3.<org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder: java.util.Set getPhonemes()>();

        $r7 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (org.apache.commons.codec.language.bm.Rule$Phoneme) $r8;

        $r10 = virtualinvoke r9.<org.apache.commons.codec.language.bm.Rule$Phoneme: org.apache.commons.codec.language.bm.Languages$LanguageSet getLanguages()>();

        r3 = staticinvoke <org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder: org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder empty(org.apache.commons.codec.language.bm.Languages$LanguageSet)>($r10);

        $r11 = virtualinvoke r9.<org.apache.commons.codec.language.bm.Rule$Phoneme: java.lang.CharSequence getPhonemeText()>();

        $r11 = staticinvoke <org.apache.commons.codec.language.bm.PhoneticEngine: java.lang.CharSequence cacheSubSequence(java.lang.CharSequence)>($r11);

        i1 = 0;

     label4:
        $i0 = interfaceinvoke $r11.<java.lang.CharSequence: int length()>();

        if i1 >= $i0 goto label6;

        $r12 = new org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication;

        $i0 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine: int maxPhonemes>;

        specialinvoke $r12.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: void <init>(java.util.List,java.lang.CharSequence,org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder,int,int)>(r1, $r11, r3, i1, $i0);

        $r12 = virtualinvoke $r12.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication invoke()>();

        $z0 = virtualinvoke $r12.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: boolean isFound()>();

        $r13 = virtualinvoke $r12.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder getPhonemeBuilder()>();

        r3 = $r13;

        if $z0 != 0 goto label5;

        $i0 = i1 + 1;

        $r14 = interfaceinvoke $r11.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(i1, $i0);

        r3 = virtualinvoke $r13.<org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder: org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder append(java.lang.CharSequence)>($r14);

     label5:
        i1 = virtualinvoke $r12.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: int getI()>();

        goto label4;

     label6:
        $r6 = virtualinvoke r3.<org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder: java.util.Set getPhonemes()>();

        interfaceinvoke r2.<java.util.Set: boolean addAll(java.util.Collection)>($r6);

        goto label3;

     label7:
        r3 = new org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder;

        specialinvoke r3.<org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder: void <init>(java.util.Set,org.apache.commons.codec.language.bm.PhoneticEngine$1)>(r2, null);

        return r3;
    }
    private static java.lang.CharSequence cacheSubSequence(java.lang.CharSequence)
    {
        java.lang.CharSequence $r0;
        int $i0, $i1;
        int[] $r1;
        java.lang.Object $r2;
        java.lang.CharSequence[][] r3;
        org.apache.commons.codec.language.bm.PhoneticEngine$1 $r4;

        $r0 := @parameter0: java.lang.CharSequence;

        $i0 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $i1 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $r1 = newarray (int)[2];

        $r1[0] = $i0;

        $r1[1] = $i1;

        $r2 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>(class "Ljava/lang/CharSequence;", $r1);

        r3 = (java.lang.CharSequence[][]) $r2;

        $r4 = new org.apache.commons.codec.language.bm.PhoneticEngine$1;

        specialinvoke $r4.<org.apache.commons.codec.language.bm.PhoneticEngine$1: void <init>(java.lang.CharSequence,java.lang.CharSequence[][])>($r0, r3);

        return $r4;
    }
    private static java.lang.String join(java.lang.Iterable, java.lang.String)
    {
        java.lang.Iterable r0;
        java.lang.String $r1, $r5;
        java.lang.StringBuilder r2, $r6;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;

        r0 := @parameter0: java.lang.Iterable;

        $r1 := @parameter1: java.lang.String;

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.lang.String) $r4;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.lang.String) $r4;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        goto label1;

     label2:
        $r1 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;
    }
    public java.lang.String encode(java.lang.String)
    {
        org.apache.commons.codec.language.bm.PhoneticEngine r0;
        java.lang.String $r1;
        org.apache.commons.codec.language.bm.Lang $r2;
        org.apache.commons.codec.language.bm.Languages$LanguageSet $r3;

        r0 := @this: org.apache.commons.codec.language.bm.PhoneticEngine;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.Lang lang>;

        $r3 = virtualinvoke $r2.<org.apache.commons.codec.language.bm.Lang: org.apache.commons.codec.language.bm.Languages$LanguageSet guessLanguages(java.lang.String)>($r1);

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.bm.PhoneticEngine: java.lang.String encode(java.lang.String,org.apache.commons.codec.language.bm.Languages$LanguageSet)>($r1, $r3);

        return $r1;
    }
    public java.lang.String encode(java.lang.String, org.apache.commons.codec.language.bm.Languages$LanguageSet)
    {
        org.apache.commons.codec.language.bm.PhoneticEngine r0;
        org.apache.commons.codec.language.bm.Languages$LanguageSet $r1;
        java.lang.String r2, $r12, $r17;
        java.lang.StringBuilder r3, $r26;
        java.util.ArrayList r4;
        org.apache.commons.codec.language.bm.NameType $r5, $r11;
        org.apache.commons.codec.language.bm.RuleType $r6;
        java.util.List $r7, $r8, $r9, $r19;
        java.util.Locale $r10;
        int $i0, $i1;
        boolean $z0;
        java.util.Map $r13;
        java.lang.Object $r14;
        java.util.Set $r15;
        java.util.Iterator $r16;
        java.lang.String[] $r18;
        int[] $r20;
        java.lang.IllegalStateException $r21;
        java.util.Collection $r22;
        org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder $r23;
        java.lang.CharSequence $r24;
        org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication $r25;

        r0 := @this: org.apache.commons.codec.language.bm.PhoneticEngine;

        r2 := @parameter0: java.lang.String;

        $r1 := @parameter1: org.apache.commons.codec.language.bm.Languages$LanguageSet;

        $r5 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.NameType nameType>;

        $r6 = <org.apache.commons.codec.language.bm.RuleType: org.apache.commons.codec.language.bm.RuleType RULES>;

        $r7 = staticinvoke <org.apache.commons.codec.language.bm.Rule: java.util.List getInstance(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,org.apache.commons.codec.language.bm.Languages$LanguageSet)>($r5, $r6, $r1);

        $r5 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.NameType nameType>;

        $r6 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.RuleType ruleType>;

        $r8 = staticinvoke <org.apache.commons.codec.language.bm.Rule: java.util.List getInstance(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,java.lang.String)>($r5, $r6, "common");

        $r5 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.NameType nameType>;

        $r6 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.RuleType ruleType>;

        $r9 = staticinvoke <org.apache.commons.codec.language.bm.Rule: java.util.List getInstance(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,org.apache.commons.codec.language.bm.Languages$LanguageSet)>($r5, $r6, $r1);

        $r10 = <java.util.Locale: java.util.Locale ENGLISH>;

        r2 = virtualinvoke r2.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r10);

        r2 = virtualinvoke r2.<java.lang.String: java.lang.String replace(char,char)>(45, 32);

        r2 = virtualinvoke r2.<java.lang.String: java.lang.String trim()>();

        $r5 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.NameType nameType>;

        $r11 = <org.apache.commons.codec.language.bm.NameType: org.apache.commons.codec.language.bm.NameType GENERIC>;

        if $r5 != $r11 goto label03;

        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i0 < 2 goto label01;

        $r12 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, 2);

        $z0 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>("d\'");

        if $z0 == 0 goto label01;

        $r12 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>(2);

        r3 = new java.lang.StringBuilder;

        specialinvoke r3.<java.lang.StringBuilder: void <init>()>();

        r3 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("d");

        r3 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        r2 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        r3 = new java.lang.StringBuilder;

        specialinvoke r3.<java.lang.StringBuilder: void <init>()>();

        r3 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r12 = virtualinvoke r0.<org.apache.commons.codec.language.bm.PhoneticEngine: java.lang.String encode(java.lang.String)>($r12);

        r3 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        r3 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")-(");

        r2 = virtualinvoke r0.<org.apache.commons.codec.language.bm.PhoneticEngine: java.lang.String encode(java.lang.String)>(r2);

        r3 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        r3 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        r2 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return r2;

     label01:
        $r13 = <org.apache.commons.codec.language.bm.PhoneticEngine: java.util.Map NAME_PREFIXES>;

        $r5 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.NameType nameType>;

        $r14 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        $r15 = (java.util.Set) $r14;

        $r16 = interfaceinvoke $r15.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke $r16.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label03;

        $r14 = interfaceinvoke $r16.<java.util.Iterator: java.lang.Object next()>();

        $r12 = (java.lang.String) $r14;

        r3 = new java.lang.StringBuilder;

        specialinvoke r3.<java.lang.StringBuilder: void <init>()>();

        r3 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        r3 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r17 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $z0 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>($r17);

        if $z0 == 0 goto label02;

        $i0 = virtualinvoke $r12.<java.lang.String: int length()>();

        $i0 = $i0 + 1;

        r2 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i0);

        r3 = new java.lang.StringBuilder;

        specialinvoke r3.<java.lang.StringBuilder: void <init>()>();

        r3 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        r3 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r12 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        r3 = new java.lang.StringBuilder;

        specialinvoke r3.<java.lang.StringBuilder: void <init>()>();

        r3 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        r2 = virtualinvoke r0.<org.apache.commons.codec.language.bm.PhoneticEngine: java.lang.String encode(java.lang.String)>(r2);

        r3 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        r3 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")-(");

        r2 = virtualinvoke r0.<org.apache.commons.codec.language.bm.PhoneticEngine: java.lang.String encode(java.lang.String)>($r12);

        r3 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        r3 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        r2 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return r2;

     label03:
        $r18 = virtualinvoke r2.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\s+");

        $r19 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r18);

        r4 = new java.util.ArrayList;

        specialinvoke r4.<java.util.ArrayList: void <init>()>();

        $r20 = <org.apache.commons.codec.language.bm.PhoneticEngine$2: int[] $SwitchMap$org$apache$commons$codec$language$bm$NameType>;

        $r5 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.NameType nameType>;

        $i0 = virtualinvoke $r5.<org.apache.commons.codec.language.bm.NameType: int ordinal()>();

        $i0 = $r20[$i0];

        lookupswitch($i0)
        {
            case 1: goto label05;
            case 2: goto label11;
            case 3: goto label12;
            default: goto label04;
        };

     label04:
        $r21 = new java.lang.IllegalStateException;

        r3 = new java.lang.StringBuilder;

        specialinvoke r3.<java.lang.StringBuilder: void <init>()>();

        r3 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unreachable case: ");

        $r5 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.NameType nameType>;

        r3 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        r2 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<java.lang.IllegalStateException: void <init>(java.lang.String)>(r2);

        throw $r21;

     label05:
        $r16 = interfaceinvoke $r19.<java.util.List: java.util.Iterator iterator()>();

     label06:
        $z0 = interfaceinvoke $r16.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label07;

        $r14 = interfaceinvoke $r16.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.lang.String) $r14;

        $r18 = virtualinvoke r2.<java.lang.String: java.lang.String[] split(java.lang.String)>("\'");

        $i0 = lengthof $r18;

        $i0 = $i0 + -1;

        r2 = $r18[$i0];

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>(r2);

        goto label06;

     label07:
        $r13 = <org.apache.commons.codec.language.bm.PhoneticEngine: java.util.Map NAME_PREFIXES>;

        $r5 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.NameType nameType>;

        $r14 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        $r22 = (java.util.Collection) $r14;

        interfaceinvoke r4.<java.util.List: boolean removeAll(java.util.Collection)>($r22);

     label08:
        $z0 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine: boolean concat>;

        if $z0 == 0 goto label13;

        r2 = staticinvoke <org.apache.commons.codec.language.bm.PhoneticEngine: java.lang.String join(java.lang.Iterable,java.lang.String)>(r4, " ");

     label09:
        $r23 = staticinvoke <org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder: org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder empty(org.apache.commons.codec.language.bm.Languages$LanguageSet)>($r1);

        $r24 = staticinvoke <org.apache.commons.codec.language.bm.PhoneticEngine: java.lang.CharSequence cacheSubSequence(java.lang.CharSequence)>(r2);

        $i0 = 0;

     label10:
        $i1 = interfaceinvoke $r24.<java.lang.CharSequence: int length()>();

        if $i0 >= $i1 goto label17;

        $r25 = new org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication;

        $i1 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine: int maxPhonemes>;

        specialinvoke $r25.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: void <init>(java.util.List,java.lang.CharSequence,org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder,int,int)>($r7, $r24, $r23, $i0, $i1);

        $r25 = virtualinvoke $r25.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication invoke()>();

        $i0 = virtualinvoke $r25.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: int getI()>();

        $r23 = virtualinvoke $r25.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder getPhonemeBuilder()>();

        goto label10;

     label11:
        interfaceinvoke r4.<java.util.List: boolean addAll(java.util.Collection)>($r19);

        $r13 = <org.apache.commons.codec.language.bm.PhoneticEngine: java.util.Map NAME_PREFIXES>;

        $r5 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.NameType nameType>;

        $r14 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        $r22 = (java.util.Collection) $r14;

        interfaceinvoke r4.<java.util.List: boolean removeAll(java.util.Collection)>($r22);

        goto label08;

     label12:
        interfaceinvoke r4.<java.util.List: boolean addAll(java.util.Collection)>($r19);

        goto label08;

     label13:
        $i0 = interfaceinvoke r4.<java.util.List: int size()>();

        if $i0 != 1 goto label14;

        $r16 = interfaceinvoke $r19.<java.util.List: java.util.Iterator iterator()>();

        $r14 = interfaceinvoke $r16.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.lang.String) $r14;

        goto label09;

     label14:
        r3 = new java.lang.StringBuilder;

        specialinvoke r3.<java.lang.StringBuilder: void <init>()>();

        $r16 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();

     label15:
        $z0 = interfaceinvoke $r16.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label16;

        $r14 = interfaceinvoke $r16.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.lang.String) $r14;

        $r26 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        r2 = virtualinvoke r0.<org.apache.commons.codec.language.bm.PhoneticEngine: java.lang.String encode(java.lang.String)>(r2);

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        goto label15;

     label16:
        r2 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String substring(int)>(1);

        return r2;

     label17:
        $r23 = specialinvoke r0.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder applyFinalRules(org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder,java.util.List)>($r23, $r8);

        $r23 = specialinvoke r0.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder applyFinalRules(org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder,java.util.List)>($r23, $r9);

        r2 = virtualinvoke $r23.<org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder: java.lang.String makeString()>();

        return r2;
    }
    public org.apache.commons.codec.language.bm.Lang getLang()
    {
        org.apache.commons.codec.language.bm.PhoneticEngine r0;
        org.apache.commons.codec.language.bm.Lang r1;

        r0 := @this: org.apache.commons.codec.language.bm.PhoneticEngine;

        r1 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.Lang lang>;

        return r1;
    }
    public int getMaxPhonemes()
    {
        org.apache.commons.codec.language.bm.PhoneticEngine r0;
        int i0;

        r0 := @this: org.apache.commons.codec.language.bm.PhoneticEngine;

        i0 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine: int maxPhonemes>;

        return i0;
    }
    public org.apache.commons.codec.language.bm.NameType getNameType()
    {
        org.apache.commons.codec.language.bm.PhoneticEngine r0;
        org.apache.commons.codec.language.bm.NameType r1;

        r0 := @this: org.apache.commons.codec.language.bm.PhoneticEngine;

        r1 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.NameType nameType>;

        return r1;
    }
    public org.apache.commons.codec.language.bm.RuleType getRuleType()
    {
        org.apache.commons.codec.language.bm.PhoneticEngine r0;
        org.apache.commons.codec.language.bm.RuleType r1;

        r0 := @this: org.apache.commons.codec.language.bm.PhoneticEngine;

        r1 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.RuleType ruleType>;

        return r1;
    }
    public boolean isConcat()
    {
        org.apache.commons.codec.language.bm.PhoneticEngine r0;
        boolean z0;

        r0 := @this: org.apache.commons.codec.language.bm.PhoneticEngine;

        z0 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine: boolean concat>;

        return z0;
    }
