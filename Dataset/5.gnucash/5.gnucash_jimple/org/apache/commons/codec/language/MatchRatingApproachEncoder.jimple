org.apache.commons.codec.language.MatchRatingApproachEncoder extends java.lang.Object implements org.apache.commons.codec.StringEncoder
private static final java.lang.String[] DOUBLE_CONSONANT
private static final int EIGHT
private static final int ELEVEN
private static final java.lang.String EMPTY
private static final int FIVE
private static final int FOUR
private static final int ONE
private static final java.lang.String PLAIN_ASCII
private static final int SEVEN
private static final int SIX
private static final java.lang.String SPACE
private static final int THREE
private static final int TWELVE
private static final int TWO
private static final java.lang.String UNICODE
    static void <clinit>()
    {
        java.lang.String[] $r0;

        $r0 = newarray (java.lang.String)[21];

        $r0[0] = "BB";

        $r0[1] = "CC";

        $r0[2] = "DD";

        $r0[3] = "FF";

        $r0[4] = "GG";

        $r0[5] = "HH";

        $r0[6] = "JJ";

        $r0[7] = "KK";

        $r0[8] = "LL";

        $r0[9] = "MM";

        $r0[10] = "NN";

        $r0[11] = "PP";

        $r0[12] = "QQ";

        $r0[13] = "RR";

        $r0[14] = "SS";

        $r0[15] = "TT";

        $r0[16] = "VV";

        $r0[17] = "WW";

        $r0[18] = "XX";

        $r0[19] = "YY";

        $r0[20] = "ZZ";

        <org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String[] DOUBLE_CONSONANT> = $r0;

        return;
    }
    public void <init>()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoder r0;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    java.lang.String cleanName(java.lang.String)
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoder r0;
        java.lang.String $r1, r4;
        java.lang.String[] r2;
        int i0, i1;
        java.util.Locale $r3;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoder;

        $r1 := @parameter0: java.lang.String;

        $r3 = <java.util.Locale: java.util.Locale ENGLISH>;

        r4 = virtualinvoke $r1.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r3);

        r2 = newarray (java.lang.String)[5];

        r2[0] = "\\-";

        r2[1] = "[&]";

        r2[2] = "\\\'";

        r2[3] = "\\.";

        r2[4] = "[\\,]";

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r1 = r2[i1];

        r4 = virtualinvoke r4.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>($r1, "");

        i1 = i1 + 1;

        goto label1;

     label2:
        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String removeAccents(java.lang.String)>(r4);

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\s+", "");

        return $r1;
    }
    public final java.lang.Object encode(java.lang.Object) throws org.apache.commons.codec.EncoderException
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoder r0;
        java.lang.String $r1;
        java.lang.Object $r2;
        boolean $z0;
        org.apache.commons.codec.EncoderException $r3;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoder;

        $r2 := @parameter0: java.lang.Object;

        $z0 = $r2 instanceof java.lang.String;

        if $z0 != 0 goto label1;

        $r3 = new org.apache.commons.codec.EncoderException;

        specialinvoke $r3.<org.apache.commons.codec.EncoderException: void <init>(java.lang.String)>("Parameter supplied to Match Rating Approach encoder is not of type java.lang.String");

        throw $r3;

     label1:
        $r1 = (java.lang.String) $r2;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String encode(java.lang.String)>($r1);

        return $r1;
    }
    public final java.lang.String encode(java.lang.String)
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoder r0;
        java.lang.String $r1, $r2;
        boolean $z0;
        int $i0;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoder;

        $r1 := @parameter0: java.lang.String;

        if $r1 == null goto label1;

        $r2 = "";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r1);

        if $z0 != 0 goto label1;

        $r2 = " ";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r1);

        if $z0 != 0 goto label1;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 != 1 goto label2;

     label1:
        return "";

     label2:
        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String cleanName(java.lang.String)>($r1);

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String removeVowels(java.lang.String)>($r1);

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String removeDoubleConsonants(java.lang.String)>($r1);

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String getFirst3Last3(java.lang.String)>($r1);

        return $r1;
    }
    java.lang.String getFirst3Last3(java.lang.String)
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoder r0;
        java.lang.String $r1, $r2;
        int $i0, $i1;
        java.lang.StringBuilder $r3;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoder;

        $r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 <= 6 goto label1;

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, 3);

        $i1 = $i0 + -3;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>($i1, $i0);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        return $r1;
    }
    int getMinRating(int)
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoder r0;
        int $i0;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoder;

        $i0 := @parameter0: int;

        if $i0 > 4 goto label1;

        return 5;

     label1:
        if $i0 < 5 goto label2;

        if $i0 > 7 goto label2;

        return 4;

     label2:
        if $i0 < 8 goto label3;

        if $i0 > 11 goto label3;

        return 3;

     label3:
        if $i0 != 12 goto label4;

        return 2;

     label4:
        return 1;
    }
    public boolean isEncodeEquals(java.lang.String, java.lang.String)
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoder r0;
        java.lang.String $r1, $r2, $r3;
        boolean $z0, $z1;
        int $i0, $i1;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoder;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $z0 = 1;

        if $r1 == null goto label5;

        $r3 = "";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r1);

        if $z1 != 0 goto label5;

        $r3 = " ";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r1);

        if $z1 == 0 goto label1;

        return 0;

     label1:
        if $r2 == null goto label5;

        $r3 = "";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r2);

        if $z1 != 0 goto label5;

        $r3 = " ";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r2);

        if $z1 != 0 goto label5;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 == 1 goto label5;

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 == 1 goto label5;

        $z1 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r2);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String cleanName(java.lang.String)>($r1);

        $r2 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String cleanName(java.lang.String)>($r2);

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String removeVowels(java.lang.String)>($r1);

        $r2 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String removeVowels(java.lang.String)>($r2);

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String removeDoubleConsonants(java.lang.String)>($r1);

        $r2 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String removeDoubleConsonants(java.lang.String)>($r2);

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String getFirst3Last3(java.lang.String)>($r1);

        $r2 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String getFirst3Last3(java.lang.String)>($r2);

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i0 = $i0 - $i1;

        $i0 = staticinvoke <java.lang.Math: int abs(int)>($i0);

        if $i0 >= 3 goto label5;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i0 = $i0 + $i1;

        $i0 = staticinvoke <java.lang.Math: int abs(int)>($i0);

        $i0 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoder: int getMinRating(int)>($i0);

        $i1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoder: int leftToRightThenRightToLeftProcessing(java.lang.String,java.lang.String)>($r1, $r2);

        if $i1 < $i0 goto label4;

     label3:
        return $z0;

     label4:
        $z0 = 0;

        goto label3;

     label5:
        return 0;
    }
    boolean isVowel(java.lang.String)
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoder r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoder;

        $r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("E");

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("A");

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("O");

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("I");

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("U");

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    int leftToRightThenRightToLeftProcessing(java.lang.String, java.lang.String)
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoder r0;
        java.lang.String $r1, $r2, $r5, $r6, $r7, $r8;
        int i0, i1, i2, $i3, $i4;
        char[] $r3, $r4;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoder;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke $r1.<java.lang.String: char[] toCharArray()>();

        $r4 = virtualinvoke $r2.<java.lang.String: char[] toCharArray()>();

        i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        i0 = i0 + -1;

        i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        i1 = i1 + -1;

        i2 = 0;

     label1:
        $i3 = lengthof $r3;

        if i2 >= $i3 goto label2;

        if i2 <= i1 goto label3;

     label2:
        $r1 = new java.lang.String;

        specialinvoke $r1.<java.lang.String: void <init>(char[])>($r3);

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\s+", "");

        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(char[])>($r4);

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\s+", "");

        i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        if i0 <= i1 goto label6;

        i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        i0 = 6 - i0;

        i0 = staticinvoke <java.lang.Math: int abs(int)>(i0);

        return i0;

     label3:
        $i3 = i2 + 1;

        $r5 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(i2, $i3);

        $i3 = i0 - i2;

        $i4 = i0 - i2;

        $i4 = $i4 + 1;

        $r6 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>($i3, $i4);

        $i3 = i2 + 1;

        $r7 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(i2, $i3);

        $i3 = i1 - i2;

        $i4 = i1 - i2;

        $i4 = $i4 + 1;

        $r8 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>($i3, $i4);

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label4;

        $r3[i2] = 32;

        $r4[i2] = 32;

     label4:
        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z0 == 0 goto label5;

        $i3 = i0 - i2;

        $r3[$i3] = 32;

        $i3 = i1 - i2;

        $r4[$i3] = 32;

     label5:
        i2 = i2 + 1;

        goto label1;

     label6:
        i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        i0 = 6 - i0;

        i0 = staticinvoke <java.lang.Math: int abs(int)>(i0);

        return i0;
    }
    java.lang.String removeAccents(java.lang.String)
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoder r0;
        java.lang.String $r1, $r3;
        java.lang.StringBuilder r2;
        int $i0, i1, $i3;
        char $c2;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoder;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        return null;

     label1:
        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        i1 = 0;

     label2:
        if i1 >= $i0 goto label5;

        $c2 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(i1);

        $r3 = "\u00c0\u00e0\u00c8\u00e8\u00cc\u00ec\u00d2\u00f2\u00d9\u00f9\u00c1\u00e1\u00c9\u00e9\u00cd\u00ed\u00d3\u00f3\u00da\u00fa\u00dd\u00fd\u00c2\u00e2\u00ca\u00ea\u00ce\u00ee\u00d4\u00f4\u00db\u00fb\u0176\u0177\u00c3\u00e3\u00d5\u00f5\u00d1\u00f1\u00c4\u00e4\u00cb\u00eb\u00cf\u00ef\u00d6\u00f6\u00dc\u00fc\u0178\u00ff\u00c5\u00e5\u00c7\u00e7\u0150\u0151\u0170\u0171";

        $i3 = virtualinvoke $r3.<java.lang.String: int indexOf(int)>($c2);

        if $i3 <= -1 goto label4;

        $r3 = "AaEeIiOoUuAaEeIiOoUuYyAaEeIiOoUuYyAaOoNnAaEeIiOoUuYyAaCcOoUu";

        $c2 = virtualinvoke $r3.<java.lang.String: char charAt(int)>($i3);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        goto label3;

     label5:
        $r1 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;
    }
    java.lang.String removeDoubleConsonants(java.lang.String)
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoder r0;
        java.lang.String $r1, r3, $r4;
        java.lang.String[] r2;
        int i0, i1;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoder;

        $r1 := @parameter0: java.lang.String;

        r3 = virtualinvoke $r1.<java.lang.String: java.lang.String toUpperCase()>();

        r2 = <org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String[] DOUBLE_CONSONANT>;

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r1 = r2[i1];

        $z0 = virtualinvoke r3.<java.lang.String: boolean contains(java.lang.CharSequence)>($r1);

        if $z0 == 0 goto label2;

        $r4 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, 1);

        r3 = virtualinvoke r3.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>($r1, $r4);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return r3;
    }
    java.lang.String removeVowels(java.lang.String)
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoder r0;
        java.lang.String $r1, $r2;
        boolean $z0;
        java.lang.StringBuilder $r3;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoder;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, 1);

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("A", "");

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("E", "");

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("I", "");

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("O", "");

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("U", "");

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\s{2,}\\b", " ");

        $z0 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoder: boolean isVowel(java.lang.String)>($r2);

        if $z0 == 0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        return $r1;
    }
