org.apache.commons.codec.binary.BaseNCodecOutputStream extends java.io.FilterOutputStream
private final org.apache.commons.codec.binary.BaseNCodec baseNCodec
private final org.apache.commons.codec.binary.BaseNCodec$Context context
private final boolean doEncode
private final byte[] singleByte
    public void <init>(java.io.OutputStream, org.apache.commons.codec.binary.BaseNCodec, boolean)
    {
        org.apache.commons.codec.binary.BaseNCodecOutputStream r0;
        java.io.OutputStream $r1;
        org.apache.commons.codec.binary.BaseNCodec $r2;
        boolean $z0;
        byte[] $r3;
        org.apache.commons.codec.binary.BaseNCodec$Context $r4;

        r0 := @this: org.apache.commons.codec.binary.BaseNCodecOutputStream;

        $r1 := @parameter0: java.io.OutputStream;

        $r2 := @parameter1: org.apache.commons.codec.binary.BaseNCodec;

        $z0 := @parameter2: boolean;

        specialinvoke r0.<java.io.FilterOutputStream: void <init>(java.io.OutputStream)>($r1);

        $r3 = newarray (byte)[1];

        r0.<org.apache.commons.codec.binary.BaseNCodecOutputStream: byte[] singleByte> = $r3;

        $r4 = new org.apache.commons.codec.binary.BaseNCodec$Context;

        specialinvoke $r4.<org.apache.commons.codec.binary.BaseNCodec$Context: void <init>()>();

        r0.<org.apache.commons.codec.binary.BaseNCodecOutputStream: org.apache.commons.codec.binary.BaseNCodec$Context context> = $r4;

        r0.<org.apache.commons.codec.binary.BaseNCodecOutputStream: org.apache.commons.codec.binary.BaseNCodec baseNCodec> = $r2;

        r0.<org.apache.commons.codec.binary.BaseNCodecOutputStream: boolean doEncode> = $z0;

        return;
    }
    private void flush(boolean) throws java.io.IOException
    {
        org.apache.commons.codec.binary.BaseNCodecOutputStream r0;
        boolean $z0;
        byte[] r1;
        org.apache.commons.codec.binary.BaseNCodec $r2;
        org.apache.commons.codec.binary.BaseNCodec$Context $r3;
        int $i0;
        java.io.OutputStream $r4;

        r0 := @this: org.apache.commons.codec.binary.BaseNCodecOutputStream;

        $z0 := @parameter0: boolean;

        $r2 = r0.<org.apache.commons.codec.binary.BaseNCodecOutputStream: org.apache.commons.codec.binary.BaseNCodec baseNCodec>;

        $r3 = r0.<org.apache.commons.codec.binary.BaseNCodecOutputStream: org.apache.commons.codec.binary.BaseNCodec$Context context>;

        $i0 = virtualinvoke $r2.<org.apache.commons.codec.binary.BaseNCodec: int available(org.apache.commons.codec.binary.BaseNCodec$Context)>($r3);

        if $i0 <= 0 goto label1;

        r1 = newarray (byte)[$i0];

        $r2 = r0.<org.apache.commons.codec.binary.BaseNCodecOutputStream: org.apache.commons.codec.binary.BaseNCodec baseNCodec>;

        $r3 = r0.<org.apache.commons.codec.binary.BaseNCodecOutputStream: org.apache.commons.codec.binary.BaseNCodec$Context context>;

        $i0 = virtualinvoke $r2.<org.apache.commons.codec.binary.BaseNCodec: int readResults(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)>(r1, 0, $i0, $r3);

        if $i0 <= 0 goto label1;

        $r4 = r0.<org.apache.commons.codec.binary.BaseNCodecOutputStream: java.io.OutputStream out>;

        virtualinvoke $r4.<java.io.OutputStream: void write(byte[],int,int)>(r1, 0, $i0);

     label1:
        if $z0 == 0 goto label2;

        $r4 = r0.<org.apache.commons.codec.binary.BaseNCodecOutputStream: java.io.OutputStream out>;

        virtualinvoke $r4.<java.io.OutputStream: void flush()>();

     label2:
        return;
    }
    public void close() throws java.io.IOException
    {
        org.apache.commons.codec.binary.BaseNCodecOutputStream r0;
        boolean $z0;
        org.apache.commons.codec.binary.BaseNCodec $r1;
        byte[] $r2;
        org.apache.commons.codec.binary.BaseNCodec$Context $r3;
        java.io.OutputStream $r4;

        r0 := @this: org.apache.commons.codec.binary.BaseNCodecOutputStream;

        $z0 = r0.<org.apache.commons.codec.binary.BaseNCodecOutputStream: boolean doEncode>;

        if $z0 == 0 goto label2;

        $r1 = r0.<org.apache.commons.codec.binary.BaseNCodecOutputStream: org.apache.commons.codec.binary.BaseNCodec baseNCodec>;

        $r2 = r0.<org.apache.commons.codec.binary.BaseNCodecOutputStream: byte[] singleByte>;

        $r3 = r0.<org.apache.commons.codec.binary.BaseNCodecOutputStream: org.apache.commons.codec.binary.BaseNCodec$Context context>;

        virtualinvoke $r1.<org.apache.commons.codec.binary.BaseNCodec: void encode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)>($r2, 0, -1, $r3);

     label1:
        virtualinvoke r0.<org.apache.commons.codec.binary.BaseNCodecOutputStream: void flush()>();

        $r4 = r0.<org.apache.commons.codec.binary.BaseNCodecOutputStream: java.io.OutputStream out>;

        virtualinvoke $r4.<java.io.OutputStream: void close()>();

        return;

     label2:
        $r1 = r0.<org.apache.commons.codec.binary.BaseNCodecOutputStream: org.apache.commons.codec.binary.BaseNCodec baseNCodec>;

        $r2 = r0.<org.apache.commons.codec.binary.BaseNCodecOutputStream: byte[] singleByte>;

        $r3 = r0.<org.apache.commons.codec.binary.BaseNCodecOutputStream: org.apache.commons.codec.binary.BaseNCodec$Context context>;

        virtualinvoke $r1.<org.apache.commons.codec.binary.BaseNCodec: void decode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)>($r2, 0, -1, $r3);

        goto label1;
    }
    public void flush() throws java.io.IOException
    {
        org.apache.commons.codec.binary.BaseNCodecOutputStream r0;

        r0 := @this: org.apache.commons.codec.binary.BaseNCodecOutputStream;

        specialinvoke r0.<org.apache.commons.codec.binary.BaseNCodecOutputStream: void flush(boolean)>(1);

        return;
    }
    public void write(int) throws java.io.IOException
    {
        org.apache.commons.codec.binary.BaseNCodecOutputStream r0;
        int $i0;
        byte[] $r1;
        byte $b1;

        r0 := @this: org.apache.commons.codec.binary.BaseNCodecOutputStream;

        $i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.codec.binary.BaseNCodecOutputStream: byte[] singleByte>;

        $b1 = (byte) $i0;

        $r1[0] = $b1;

        $r1 = r0.<org.apache.commons.codec.binary.BaseNCodecOutputStream: byte[] singleByte>;

        virtualinvoke r0.<org.apache.commons.codec.binary.BaseNCodecOutputStream: void write(byte[],int,int)>($r1, 0, 1);

        return;
    }
    public void write(byte[], int, int) throws java.io.IOException
    {
        org.apache.commons.codec.binary.BaseNCodecOutputStream r0;
        byte[] $r1;
        int $i0, $i1, $i2, $i3;
        java.lang.NullPointerException $r2;
        java.lang.IndexOutOfBoundsException $r3;
        boolean $z0;
        org.apache.commons.codec.binary.BaseNCodec $r4;
        org.apache.commons.codec.binary.BaseNCodec$Context $r5;

        r0 := @this: org.apache.commons.codec.binary.BaseNCodecOutputStream;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if $r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();

        throw $r2;

     label1:
        if $i0 < 0 goto label2;

        if $i1 >= 0 goto label3;

     label2:
        $r3 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r3;

     label3:
        $i2 = lengthof $r1;

        if $i0 > $i2 goto label4;

        $i2 = $i0 + $i1;

        $i3 = lengthof $r1;

        if $i2 <= $i3 goto label5;

     label4:
        $r3 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r3;

     label5:
        if $i1 <= 0 goto label8;

        $z0 = r0.<org.apache.commons.codec.binary.BaseNCodecOutputStream: boolean doEncode>;

        if $z0 == 0 goto label7;

        $r4 = r0.<org.apache.commons.codec.binary.BaseNCodecOutputStream: org.apache.commons.codec.binary.BaseNCodec baseNCodec>;

        $r5 = r0.<org.apache.commons.codec.binary.BaseNCodecOutputStream: org.apache.commons.codec.binary.BaseNCodec$Context context>;

        virtualinvoke $r4.<org.apache.commons.codec.binary.BaseNCodec: void encode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)>($r1, $i0, $i1, $r5);

     label6:
        specialinvoke r0.<org.apache.commons.codec.binary.BaseNCodecOutputStream: void flush(boolean)>(0);

        return;

     label7:
        $r4 = r0.<org.apache.commons.codec.binary.BaseNCodecOutputStream: org.apache.commons.codec.binary.BaseNCodec baseNCodec>;

        $r5 = r0.<org.apache.commons.codec.binary.BaseNCodecOutputStream: org.apache.commons.codec.binary.BaseNCodec$Context context>;

        virtualinvoke $r4.<org.apache.commons.codec.binary.BaseNCodec: void decode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)>($r1, $i0, $i1, $r5);

        goto label6;

     label8:
        return;
    }
