org.apache.commons.codec.binary.BinaryCodec extends java.lang.Object implements org.apache.commons.codec.BinaryDecoder org.apache.commons.codec.BinaryEncoder
private static final int[] BITS
private static final int BIT_0
private static final int BIT_1
private static final int BIT_2
private static final int BIT_3
private static final int BIT_4
private static final int BIT_5
private static final int BIT_6
private static final int BIT_7
private static final byte[] EMPTY_BYTE_ARRAY
private static final char[] EMPTY_CHAR_ARRAY
    static void <clinit>()
    {
        char[] $r0;
        byte[] $r1;
        int[] $r2;

        $r0 = newarray (char)[0];

        <org.apache.commons.codec.binary.BinaryCodec: char[] EMPTY_CHAR_ARRAY> = $r0;

        $r1 = newarray (byte)[0];

        <org.apache.commons.codec.binary.BinaryCodec: byte[] EMPTY_BYTE_ARRAY> = $r1;

        $r2 = newarray (int)[8];

        $r2[0] = 1;

        $r2[1] = 2;

        $r2[2] = 4;

        $r2[3] = 8;

        $r2[4] = 16;

        $r2[5] = 32;

        $r2[6] = 64;

        $r2[7] = 128;

        <org.apache.commons.codec.binary.BinaryCodec: int[] BITS> = $r2;

        return;
    }
    public void <init>()
    {
        org.apache.commons.codec.binary.BinaryCodec r0;

        r0 := @this: org.apache.commons.codec.binary.BinaryCodec;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static byte[] fromAscii(byte[])
    {
        byte[] $r0, r1;
        boolean $z0;
        int $i0, $i1, $i2, $i3;
        int[] $r2;
        byte $b4;

        $r0 := @parameter0: byte[];

        $z0 = staticinvoke <org.apache.commons.codec.binary.BinaryCodec: boolean isEmpty(byte[])>($r0);

        if $z0 == 0 goto label1;

        $r0 = <org.apache.commons.codec.binary.BinaryCodec: byte[] EMPTY_BYTE_ARRAY>;

        return $r0;

     label1:
        $i0 = lengthof $r0;

        $i0 = $i0 >> 3;

        r1 = newarray (byte)[$i0];

        $i0 = 0;

        $i1 = lengthof $r0;

        $i1 = $i1 + -1;

     label2:
        $i2 = lengthof r1;

        if $i0 >= $i2 goto label6;

        $i2 = 0;

     label3:
        $r2 = <org.apache.commons.codec.binary.BinaryCodec: int[] BITS>;

        $i3 = lengthof $r2;

        if $i2 >= $i3 goto label5;

        $i3 = $i1 - $i2;

        $b4 = $r0[$i3];

        if $b4 != 49 goto label4;

        $b4 = r1[$i0];

        $r2 = <org.apache.commons.codec.binary.BinaryCodec: int[] BITS>;

        $i3 = $r2[$i2];

        $i3 = $b4 | $i3;

        $b4 = (byte) $i3;

        r1[$i0] = $b4;

     label4:
        $i2 = $i2 + 1;

        goto label3;

     label5:
        $i0 = $i0 + 1;

        $i1 = $i1 + -8;

        goto label2;

     label6:
        return r1;
    }
    public static byte[] fromAscii(char[])
    {
        char[] $r0;
        int $i0, $i1, $i2, $i3;
        byte[] r1;
        int[] $r2;
        char $c4;
        byte $b5;

        $r0 := @parameter0: char[];

        if $r0 == null goto label1;

        $i0 = lengthof $r0;

        if $i0 != 0 goto label2;

     label1:
        r1 = <org.apache.commons.codec.binary.BinaryCodec: byte[] EMPTY_BYTE_ARRAY>;

        return r1;

     label2:
        $i0 = lengthof $r0;

        $i0 = $i0 >> 3;

        r1 = newarray (byte)[$i0];

        $i0 = 0;

        $i1 = lengthof $r0;

        $i1 = $i1 + -1;

     label3:
        $i2 = lengthof r1;

        if $i0 >= $i2 goto label7;

        $i2 = 0;

     label4:
        $r2 = <org.apache.commons.codec.binary.BinaryCodec: int[] BITS>;

        $i3 = lengthof $r2;

        if $i2 >= $i3 goto label6;

        $i3 = $i1 - $i2;

        $c4 = $r0[$i3];

        if $c4 != 49 goto label5;

        $b5 = r1[$i0];

        $r2 = <org.apache.commons.codec.binary.BinaryCodec: int[] BITS>;

        $i3 = $r2[$i2];

        $i3 = $b5 | $i3;

        $b5 = (byte) $i3;

        r1[$i0] = $b5;

     label5:
        $i2 = $i2 + 1;

        goto label4;

     label6:
        $i0 = $i0 + 1;

        $i1 = $i1 + -8;

        goto label3;

     label7:
        return r1;
    }
    private static boolean isEmpty(byte[])
    {
        byte[] $r0;
        int $i0;

        $r0 := @parameter0: byte[];

        if $r0 == null goto label1;

        $i0 = lengthof $r0;

        if $i0 != 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    public static byte[] toAsciiBytes(byte[])
    {
        byte[] $r0, r1;
        boolean $z0;
        int $i0, $i1, $i2, $i3;
        int[] $r2;
        byte $b4;

        $r0 := @parameter0: byte[];

        $z0 = staticinvoke <org.apache.commons.codec.binary.BinaryCodec: boolean isEmpty(byte[])>($r0);

        if $z0 == 0 goto label1;

        $r0 = <org.apache.commons.codec.binary.BinaryCodec: byte[] EMPTY_BYTE_ARRAY>;

        return $r0;

     label1:
        $i0 = lengthof $r0;

        $i0 = $i0 << 3;

        r1 = newarray (byte)[$i0];

        $i0 = 0;

        $i1 = lengthof r1;

        $i1 = $i1 + -1;

     label2:
        $i2 = lengthof $r0;

        if $i0 >= $i2 goto label7;

        $i2 = 0;

     label3:
        $r2 = <org.apache.commons.codec.binary.BinaryCodec: int[] BITS>;

        $i3 = lengthof $r2;

        if $i2 >= $i3 goto label6;

        $b4 = $r0[$i0];

        $r2 = <org.apache.commons.codec.binary.BinaryCodec: int[] BITS>;

        $i3 = $r2[$i2];

        $i3 = $b4 & $i3;

        if $i3 != 0 goto label5;

        $i3 = $i1 - $i2;

        r1[$i3] = 48;

     label4:
        $i2 = $i2 + 1;

        goto label3;

     label5:
        $i3 = $i1 - $i2;

        r1[$i3] = 49;

        goto label4;

     label6:
        $i0 = $i0 + 1;

        $i1 = $i1 + -8;

        goto label2;

     label7:
        return r1;
    }
    public static char[] toAsciiChars(byte[])
    {
        byte[] $r0;
        boolean $z0;
        int $i0, $i1, $i2, $i3;
        char[] r1;
        int[] $r2;
        byte $b4;

        $r0 := @parameter0: byte[];

        $z0 = staticinvoke <org.apache.commons.codec.binary.BinaryCodec: boolean isEmpty(byte[])>($r0);

        if $z0 == 0 goto label1;

        r1 = <org.apache.commons.codec.binary.BinaryCodec: char[] EMPTY_CHAR_ARRAY>;

        return r1;

     label1:
        $i0 = lengthof $r0;

        $i0 = $i0 << 3;

        r1 = newarray (char)[$i0];

        $i0 = 0;

        $i1 = lengthof r1;

        $i1 = $i1 + -1;

     label2:
        $i2 = lengthof $r0;

        if $i0 >= $i2 goto label7;

        $i2 = 0;

     label3:
        $r2 = <org.apache.commons.codec.binary.BinaryCodec: int[] BITS>;

        $i3 = lengthof $r2;

        if $i2 >= $i3 goto label6;

        $b4 = $r0[$i0];

        $r2 = <org.apache.commons.codec.binary.BinaryCodec: int[] BITS>;

        $i3 = $r2[$i2];

        $i3 = $b4 & $i3;

        if $i3 != 0 goto label5;

        $i3 = $i1 - $i2;

        r1[$i3] = 48;

     label4:
        $i2 = $i2 + 1;

        goto label3;

     label5:
        $i3 = $i1 - $i2;

        r1[$i3] = 49;

        goto label4;

     label6:
        $i0 = $i0 + 1;

        $i1 = $i1 + -8;

        goto label2;

     label7:
        return r1;
    }
    public static java.lang.String toAsciiString(byte[])
    {
        byte[] $r0;
        java.lang.String $r1;
        char[] $r2;

        $r0 := @parameter0: byte[];

        $r1 = new java.lang.String;

        $r2 = staticinvoke <org.apache.commons.codec.binary.BinaryCodec: char[] toAsciiChars(byte[])>($r0);

        specialinvoke $r1.<java.lang.String: void <init>(char[])>($r2);

        return $r1;
    }
    public java.lang.Object decode(java.lang.Object) throws org.apache.commons.codec.DecoderException
    {
        org.apache.commons.codec.binary.BinaryCodec r0;
        java.lang.Object r1;
        boolean $z0;
        byte[] r2;
        char[] r3;
        java.lang.String r4;
        org.apache.commons.codec.DecoderException $r5;

        r0 := @this: org.apache.commons.codec.binary.BinaryCodec;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        r2 = <org.apache.commons.codec.binary.BinaryCodec: byte[] EMPTY_BYTE_ARRAY>;

        return r2;

     label1:
        $z0 = r1 instanceof byte[];

        if $z0 == 0 goto label2;

        r2 = (byte[]) r1;

        r2 = staticinvoke <org.apache.commons.codec.binary.BinaryCodec: byte[] fromAscii(byte[])>(r2);

        return r2;

     label2:
        $z0 = r1 instanceof char[];

        if $z0 == 0 goto label3;

        r3 = (char[]) r1;

        r2 = staticinvoke <org.apache.commons.codec.binary.BinaryCodec: byte[] fromAscii(char[])>(r3);

        return r2;

     label3:
        $z0 = r1 instanceof java.lang.String;

        if $z0 == 0 goto label4;

        r4 = (java.lang.String) r1;

        r3 = virtualinvoke r4.<java.lang.String: char[] toCharArray()>();

        r2 = staticinvoke <org.apache.commons.codec.binary.BinaryCodec: byte[] fromAscii(char[])>(r3);

        return r2;

     label4:
        $r5 = new org.apache.commons.codec.DecoderException;

        specialinvoke $r5.<org.apache.commons.codec.DecoderException: void <init>(java.lang.String)>("argument not a byte array");

        throw $r5;
    }
    public byte[] decode(byte[])
    {
        org.apache.commons.codec.binary.BinaryCodec r0;
        byte[] $r1;

        r0 := @this: org.apache.commons.codec.binary.BinaryCodec;

        $r1 := @parameter0: byte[];

        $r1 = staticinvoke <org.apache.commons.codec.binary.BinaryCodec: byte[] fromAscii(byte[])>($r1);

        return $r1;
    }
    public java.lang.Object encode(java.lang.Object) throws org.apache.commons.codec.EncoderException
    {
        org.apache.commons.codec.binary.BinaryCodec r0;
        char[] $r1;
        java.lang.Object $r2;
        boolean $z0;
        org.apache.commons.codec.EncoderException $r3;
        byte[] $r4;

        r0 := @this: org.apache.commons.codec.binary.BinaryCodec;

        $r2 := @parameter0: java.lang.Object;

        $z0 = $r2 instanceof byte[];

        if $z0 != 0 goto label1;

        $r3 = new org.apache.commons.codec.EncoderException;

        specialinvoke $r3.<org.apache.commons.codec.EncoderException: void <init>(java.lang.String)>("argument not a byte array");

        throw $r3;

     label1:
        $r4 = (byte[]) $r2;

        $r1 = staticinvoke <org.apache.commons.codec.binary.BinaryCodec: char[] toAsciiChars(byte[])>($r4);

        return $r1;
    }
    public byte[] encode(byte[])
    {
        org.apache.commons.codec.binary.BinaryCodec r0;
        byte[] $r1;

        r0 := @this: org.apache.commons.codec.binary.BinaryCodec;

        $r1 := @parameter0: byte[];

        $r1 = staticinvoke <org.apache.commons.codec.binary.BinaryCodec: byte[] toAsciiBytes(byte[])>($r1);

        return $r1;
    }
    public byte[] toByteArray(java.lang.String)
    {
        org.apache.commons.codec.binary.BinaryCodec r0;
        java.lang.String $r1;
        char[] $r2;
        byte[] $r3;

        r0 := @this: org.apache.commons.codec.binary.BinaryCodec;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        $r3 = <org.apache.commons.codec.binary.BinaryCodec: byte[] EMPTY_BYTE_ARRAY>;

        return $r3;

     label1:
        $r2 = virtualinvoke $r1.<java.lang.String: char[] toCharArray()>();

        $r3 = staticinvoke <org.apache.commons.codec.binary.BinaryCodec: byte[] fromAscii(char[])>($r2);

        return $r3;
    }
