org.apache.commons.codec.binary.BaseNCodecInputStream extends java.io.FilterInputStream
private final org.apache.commons.codec.binary.BaseNCodec baseNCodec
private final org.apache.commons.codec.binary.BaseNCodec$Context context
private final boolean doEncode
private final byte[] singleByte
    protected void <init>(java.io.InputStream, org.apache.commons.codec.binary.BaseNCodec, boolean)
    {
        org.apache.commons.codec.binary.BaseNCodecInputStream r0;
        java.io.InputStream $r1;
        org.apache.commons.codec.binary.BaseNCodec $r2;
        boolean $z0;
        byte[] $r3;
        org.apache.commons.codec.binary.BaseNCodec$Context $r4;

        r0 := @this: org.apache.commons.codec.binary.BaseNCodecInputStream;

        $r1 := @parameter0: java.io.InputStream;

        $r2 := @parameter1: org.apache.commons.codec.binary.BaseNCodec;

        $z0 := @parameter2: boolean;

        specialinvoke r0.<java.io.FilterInputStream: void <init>(java.io.InputStream)>($r1);

        $r3 = newarray (byte)[1];

        r0.<org.apache.commons.codec.binary.BaseNCodecInputStream: byte[] singleByte> = $r3;

        $r4 = new org.apache.commons.codec.binary.BaseNCodec$Context;

        specialinvoke $r4.<org.apache.commons.codec.binary.BaseNCodec$Context: void <init>()>();

        r0.<org.apache.commons.codec.binary.BaseNCodecInputStream: org.apache.commons.codec.binary.BaseNCodec$Context context> = $r4;

        r0.<org.apache.commons.codec.binary.BaseNCodecInputStream: boolean doEncode> = $z0;

        r0.<org.apache.commons.codec.binary.BaseNCodecInputStream: org.apache.commons.codec.binary.BaseNCodec baseNCodec> = $r2;

        return;
    }
    public int available() throws java.io.IOException
    {
        org.apache.commons.codec.binary.BaseNCodecInputStream r0;
        org.apache.commons.codec.binary.BaseNCodec$Context $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.binary.BaseNCodecInputStream;

        $r1 = r0.<org.apache.commons.codec.binary.BaseNCodecInputStream: org.apache.commons.codec.binary.BaseNCodec$Context context>;

        $z0 = $r1.<org.apache.commons.codec.binary.BaseNCodec$Context: boolean eof>;

        if $z0 == 0 goto label1;

        return 0;

     label1:
        return 1;
    }
    public void mark(int)
    {
        org.apache.commons.codec.binary.BaseNCodecInputStream r0;
        int $i0;

        r0 := @this: org.apache.commons.codec.binary.BaseNCodecInputStream;

        $i0 := @parameter0: int;

        entermonitor r0;

        exitmonitor r0;

        return;
    }
    public boolean markSupported()
    {
        org.apache.commons.codec.binary.BaseNCodecInputStream r0;

        r0 := @this: org.apache.commons.codec.binary.BaseNCodecInputStream;

        return 0;
    }
    public int read() throws java.io.IOException
    {
        org.apache.commons.codec.binary.BaseNCodecInputStream r0;
        byte[] $r1;
        int $i0;
        byte b1;

        r0 := @this: org.apache.commons.codec.binary.BaseNCodecInputStream;

        $r1 = r0.<org.apache.commons.codec.binary.BaseNCodecInputStream: byte[] singleByte>;

        $i0 = virtualinvoke r0.<org.apache.commons.codec.binary.BaseNCodecInputStream: int read(byte[],int,int)>($r1, 0, 1);

     label1:
        if $i0 != 0 goto label2;

        $r1 = r0.<org.apache.commons.codec.binary.BaseNCodecInputStream: byte[] singleByte>;

        $i0 = virtualinvoke r0.<org.apache.commons.codec.binary.BaseNCodecInputStream: int read(byte[],int,int)>($r1, 0, 1);

        goto label1;

     label2:
        if $i0 <= 0 goto label3;

        $r1 = r0.<org.apache.commons.codec.binary.BaseNCodecInputStream: byte[] singleByte>;

        b1 = $r1[0];

        if b1 >= 0 goto label4;

        $i0 = b1 + 256;

        return $i0;

     label3:
        return -1;

     label4:
        return b1;
    }
    public int read(byte[], int, int) throws java.io.IOException
    {
        org.apache.commons.codec.binary.BaseNCodecInputStream r0;
        byte[] $r1, r2;
        int $i0, $i1, $i2, $i3;
        java.lang.NullPointerException $r3;
        java.lang.IndexOutOfBoundsException $r4;
        org.apache.commons.codec.binary.BaseNCodec $r5;
        org.apache.commons.codec.binary.BaseNCodec$Context $r6;
        boolean $z0;
        short $s4;
        java.io.InputStream $r7;

        r0 := @this: org.apache.commons.codec.binary.BaseNCodecInputStream;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if $r1 != null goto label01;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>()>();

        throw $r3;

     label01:
        if $i0 < 0 goto label02;

        if $i1 >= 0 goto label03;

     label02:
        $r4 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r4;

     label03:
        $i2 = lengthof $r1;

        if $i0 > $i2 goto label04;

        $i2 = $i0 + $i1;

        $i3 = lengthof $r1;

        if $i2 <= $i3 goto label05;

     label04:
        $r4 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r4;

     label05:
        if $i1 != 0 goto label06;

        return 0;

     label06:
        $i2 = 0;

     label07:
        if $i2 != 0 goto label12;

        $r5 = r0.<org.apache.commons.codec.binary.BaseNCodecInputStream: org.apache.commons.codec.binary.BaseNCodec baseNCodec>;

        $r6 = r0.<org.apache.commons.codec.binary.BaseNCodecInputStream: org.apache.commons.codec.binary.BaseNCodec$Context context>;

        $z0 = virtualinvoke $r5.<org.apache.commons.codec.binary.BaseNCodec: boolean hasData(org.apache.commons.codec.binary.BaseNCodec$Context)>($r6);

        if $z0 != 0 goto label09;

        $z0 = r0.<org.apache.commons.codec.binary.BaseNCodecInputStream: boolean doEncode>;

        if $z0 == 0 goto label10;

        $s4 = 4096;

     label08:
        r2 = newarray (byte)[$s4];

        $r7 = r0.<org.apache.commons.codec.binary.BaseNCodecInputStream: java.io.InputStream in>;

        $i2 = virtualinvoke $r7.<java.io.InputStream: int read(byte[])>(r2);

        $z0 = r0.<org.apache.commons.codec.binary.BaseNCodecInputStream: boolean doEncode>;

        if $z0 == 0 goto label11;

        $r5 = r0.<org.apache.commons.codec.binary.BaseNCodecInputStream: org.apache.commons.codec.binary.BaseNCodec baseNCodec>;

        $r6 = r0.<org.apache.commons.codec.binary.BaseNCodecInputStream: org.apache.commons.codec.binary.BaseNCodec$Context context>;

        virtualinvoke $r5.<org.apache.commons.codec.binary.BaseNCodec: void encode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)>(r2, 0, $i2, $r6);

     label09:
        $r5 = r0.<org.apache.commons.codec.binary.BaseNCodecInputStream: org.apache.commons.codec.binary.BaseNCodec baseNCodec>;

        $r6 = r0.<org.apache.commons.codec.binary.BaseNCodecInputStream: org.apache.commons.codec.binary.BaseNCodec$Context context>;

        $i2 = virtualinvoke $r5.<org.apache.commons.codec.binary.BaseNCodec: int readResults(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)>($r1, $i0, $i1, $r6);

        goto label07;

     label10:
        $s4 = 8192;

        goto label08;

     label11:
        $r5 = r0.<org.apache.commons.codec.binary.BaseNCodecInputStream: org.apache.commons.codec.binary.BaseNCodec baseNCodec>;

        $r6 = r0.<org.apache.commons.codec.binary.BaseNCodecInputStream: org.apache.commons.codec.binary.BaseNCodec$Context context>;

        virtualinvoke $r5.<org.apache.commons.codec.binary.BaseNCodec: void decode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)>(r2, 0, $i2, $r6);

        goto label09;

     label12:
        return $i2;
    }
    public void reset() throws java.io.IOException
    {
        org.apache.commons.codec.binary.BaseNCodecInputStream r0;
        java.io.IOException $r1;
        java.lang.Throwable $r2;

        r0 := @this: org.apache.commons.codec.binary.BaseNCodecInputStream;

        entermonitor r0;

     label1:
        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("mark/reset not supported");

        throw $r1;

     label2:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label2;
    }
    public long skip(long) throws java.io.IOException
    {
        org.apache.commons.codec.binary.BaseNCodecInputStream r0;
        long $l0, l2, $l4;
        byte[] r1;
        byte $b1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        int $i3;

        r0 := @this: org.apache.commons.codec.binary.BaseNCodecInputStream;

        $l0 := @parameter0: long;

        $b1 = $l0 cmp 0L;

        if $b1 >= 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Negative skip length: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label1:
        r1 = newarray (byte)[512];

        l2 = $l0;

     label2:
        $b1 = l2 cmp 0L;

        if $b1 <= 0 goto label3;

        $i3 = lengthof r1;

        $l4 = (long) $i3;

        $l4 = staticinvoke <java.lang.Math: long min(long,long)>($l4, l2);

        $i3 = (int) $l4;

        $i3 = virtualinvoke r0.<org.apache.commons.codec.binary.BaseNCodecInputStream: int read(byte[],int,int)>(r1, 0, $i3);

        if $i3 != -1 goto label4;

     label3:
        $l0 = $l0 - l2;

        return $l0;

     label4:
        $l4 = (long) $i3;

        l2 = l2 - $l4;

        goto label2;
    }
