org.apache.commons.codec.binary.StringUtils extends java.lang.Object
    public void <init>()
    {
        org.apache.commons.codec.binary.StringUtils r0;

        r0 := @this: org.apache.commons.codec.binary.StringUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    private static byte[] getBytes(java.lang.String, java.nio.charset.Charset)
    {
        java.lang.String $r0;
        java.nio.charset.Charset $r1;
        byte[] $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.nio.charset.Charset;

        if $r0 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke $r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r1);

        return $r2;
    }
    public static byte[] getBytesIso8859_1(java.lang.String)
    {
        java.lang.String $r0;
        byte[] $r1;
        java.nio.charset.Charset $r2;

        $r0 := @parameter0: java.lang.String;

        $r2 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset ISO_8859_1>;

        $r1 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytes(java.lang.String,java.nio.charset.Charset)>($r0, $r2);

        return $r1;
    }
    public static byte[] getBytesUnchecked(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1;
        java.io.UnsupportedEncodingException r2;
        byte[] $r3;
        java.lang.IllegalStateException $r4;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        if $r0 != null goto label1;

        return null;

     label1:
        $r3 = virtualinvoke $r0.<java.lang.String: byte[] getBytes(java.lang.String)>($r1);

     label2:
        return $r3;

     label3:
        r2 := @caughtexception;

        $r4 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.IllegalStateException newIllegalStateException(java.lang.String,java.io.UnsupportedEncodingException)>($r1, r2);

        throw $r4;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }
    public static byte[] getBytesUsAscii(java.lang.String)
    {
        java.lang.String $r0;
        byte[] $r1;
        java.nio.charset.Charset $r2;

        $r0 := @parameter0: java.lang.String;

        $r2 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset US_ASCII>;

        $r1 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytes(java.lang.String,java.nio.charset.Charset)>($r0, $r2);

        return $r1;
    }
    public static byte[] getBytesUtf16(java.lang.String)
    {
        java.lang.String $r0;
        byte[] $r1;
        java.nio.charset.Charset $r2;

        $r0 := @parameter0: java.lang.String;

        $r2 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset UTF_16>;

        $r1 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytes(java.lang.String,java.nio.charset.Charset)>($r0, $r2);

        return $r1;
    }
    public static byte[] getBytesUtf16Be(java.lang.String)
    {
        java.lang.String $r0;
        byte[] $r1;
        java.nio.charset.Charset $r2;

        $r0 := @parameter0: java.lang.String;

        $r2 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset UTF_16BE>;

        $r1 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytes(java.lang.String,java.nio.charset.Charset)>($r0, $r2);

        return $r1;
    }
    public static byte[] getBytesUtf16Le(java.lang.String)
    {
        java.lang.String $r0;
        byte[] $r1;
        java.nio.charset.Charset $r2;

        $r0 := @parameter0: java.lang.String;

        $r2 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset UTF_16LE>;

        $r1 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytes(java.lang.String,java.nio.charset.Charset)>($r0, $r2);

        return $r1;
    }
    public static byte[] getBytesUtf8(java.lang.String)
    {
        java.lang.String $r0;
        byte[] $r1;
        java.nio.charset.Charset $r2;

        $r0 := @parameter0: java.lang.String;

        $r2 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset UTF_8>;

        $r1 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytes(java.lang.String,java.nio.charset.Charset)>($r0, $r2);

        return $r1;
    }
    private static java.lang.IllegalStateException newIllegalStateException(java.lang.String, java.io.UnsupportedEncodingException)
    {
        java.lang.String $r0;
        java.io.UnsupportedEncodingException $r1;
        java.lang.IllegalStateException $r2;
        java.lang.StringBuilder $r3;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.io.UnsupportedEncodingException;

        $r2 = new java.lang.IllegalStateException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r0 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r0);

        return $r2;
    }
    public static java.lang.String newString(byte[], java.lang.String)
    {
        byte[] $r0;
        java.lang.String $r1, $r4;
        java.io.UnsupportedEncodingException r2;
        java.lang.IllegalStateException $r3;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: java.lang.String;

        if $r0 != null goto label1;

        return null;

     label1:
        $r4 = new java.lang.String;

     label2:
        specialinvoke $r4.<java.lang.String: void <init>(byte[],java.lang.String)>($r0, $r1);

     label3:
        return $r4;

     label4:
        r2 := @caughtexception;

        $r3 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.IllegalStateException newIllegalStateException(java.lang.String,java.io.UnsupportedEncodingException)>($r1, r2);

        throw $r3;

        catch java.io.UnsupportedEncodingException from label2 to label3 with label4;
    }
    private static java.lang.String newString(byte[], java.nio.charset.Charset)
    {
        byte[] $r0;
        java.nio.charset.Charset $r1;
        java.lang.String $r2;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: java.nio.charset.Charset;

        if $r0 != null goto label1;

        return null;

     label1:
        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>($r0, $r1);

        return $r2;
    }
    public static java.lang.String newStringIso8859_1(byte[])
    {
        byte[] $r0;
        java.lang.String $r1;
        java.nio.charset.Charset $r2;

        $r0 := @parameter0: byte[];

        $r1 = new java.lang.String;

        $r2 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset ISO_8859_1>;

        specialinvoke $r1.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>($r0, $r2);

        return $r1;
    }
    public static java.lang.String newStringUsAscii(byte[])
    {
        byte[] $r0;
        java.lang.String $r1;
        java.nio.charset.Charset $r2;

        $r0 := @parameter0: byte[];

        $r1 = new java.lang.String;

        $r2 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset US_ASCII>;

        specialinvoke $r1.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>($r0, $r2);

        return $r1;
    }
    public static java.lang.String newStringUtf16(byte[])
    {
        byte[] $r0;
        java.lang.String $r1;
        java.nio.charset.Charset $r2;

        $r0 := @parameter0: byte[];

        $r1 = new java.lang.String;

        $r2 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset UTF_16>;

        specialinvoke $r1.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>($r0, $r2);

        return $r1;
    }
    public static java.lang.String newStringUtf16Be(byte[])
    {
        byte[] $r0;
        java.lang.String $r1;
        java.nio.charset.Charset $r2;

        $r0 := @parameter0: byte[];

        $r1 = new java.lang.String;

        $r2 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset UTF_16BE>;

        specialinvoke $r1.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>($r0, $r2);

        return $r1;
    }
    public static java.lang.String newStringUtf16Le(byte[])
    {
        byte[] $r0;
        java.lang.String $r1;
        java.nio.charset.Charset $r2;

        $r0 := @parameter0: byte[];

        $r1 = new java.lang.String;

        $r2 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset UTF_16LE>;

        specialinvoke $r1.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>($r0, $r2);

        return $r1;
    }
    public static java.lang.String newStringUtf8(byte[])
    {
        byte[] $r0;
        java.lang.String $r1;
        java.nio.charset.Charset $r2;

        $r0 := @parameter0: byte[];

        $r2 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset UTF_8>;

        $r1 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.String newString(byte[],java.nio.charset.Charset)>($r0, $r2);

        return $r1;
    }
