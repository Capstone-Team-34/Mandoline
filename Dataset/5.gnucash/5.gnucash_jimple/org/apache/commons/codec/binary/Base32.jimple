org.apache.commons.codec.binary.Base32 extends org.apache.commons.codec.binary.BaseNCodec
private static final int BITS_PER_ENCODED_BYTE
private static final int BYTES_PER_ENCODED_BLOCK
private static final int BYTES_PER_UNENCODED_BLOCK
private static final byte[] CHUNK_SEPARATOR
private static final byte[] DECODE_TABLE
private static final byte[] ENCODE_TABLE
private static final byte[] HEX_DECODE_TABLE
private static final byte[] HEX_ENCODE_TABLE
private static final int MASK_5BITS
private final int decodeSize
private final byte[] decodeTable
private final int encodeSize
private final byte[] encodeTable
private final byte[] lineSeparator
    static void <clinit>()
    {
        byte[] $r0;

        $r0 = newarray (byte)[2];

        $r0[0] = 13;

        $r0[1] = 10;

        <org.apache.commons.codec.binary.Base32: byte[] CHUNK_SEPARATOR> = $r0;

        $r0 = newarray (byte)[91];

        $r0[0] = -1;

        $r0[1] = -1;

        $r0[2] = -1;

        $r0[3] = -1;

        $r0[4] = -1;

        $r0[5] = -1;

        $r0[6] = -1;

        $r0[7] = -1;

        $r0[8] = -1;

        $r0[9] = -1;

        $r0[10] = -1;

        $r0[11] = -1;

        $r0[12] = -1;

        $r0[13] = -1;

        $r0[14] = -1;

        $r0[15] = -1;

        $r0[16] = -1;

        $r0[17] = -1;

        $r0[18] = -1;

        $r0[19] = -1;

        $r0[20] = -1;

        $r0[21] = -1;

        $r0[22] = -1;

        $r0[23] = -1;

        $r0[24] = -1;

        $r0[25] = -1;

        $r0[26] = -1;

        $r0[27] = -1;

        $r0[28] = -1;

        $r0[29] = -1;

        $r0[30] = -1;

        $r0[31] = -1;

        $r0[32] = -1;

        $r0[33] = -1;

        $r0[34] = -1;

        $r0[35] = -1;

        $r0[36] = -1;

        $r0[37] = -1;

        $r0[38] = -1;

        $r0[39] = -1;

        $r0[40] = -1;

        $r0[41] = -1;

        $r0[42] = -1;

        $r0[43] = -1;

        $r0[44] = -1;

        $r0[45] = -1;

        $r0[46] = -1;

        $r0[47] = 63;

        $r0[48] = -1;

        $r0[49] = -1;

        $r0[50] = 26;

        $r0[51] = 27;

        $r0[52] = 28;

        $r0[53] = 29;

        $r0[54] = 30;

        $r0[55] = 31;

        $r0[56] = -1;

        $r0[57] = -1;

        $r0[58] = -1;

        $r0[59] = -1;

        $r0[60] = -1;

        $r0[61] = -1;

        $r0[62] = -1;

        $r0[63] = -1;

        $r0[64] = -1;

        $r0[65] = 0;

        $r0[66] = 1;

        $r0[67] = 2;

        $r0[68] = 3;

        $r0[69] = 4;

        $r0[70] = 5;

        $r0[71] = 6;

        $r0[72] = 7;

        $r0[73] = 8;

        $r0[74] = 9;

        $r0[75] = 10;

        $r0[76] = 11;

        $r0[77] = 12;

        $r0[78] = 13;

        $r0[79] = 14;

        $r0[80] = 15;

        $r0[81] = 16;

        $r0[82] = 17;

        $r0[83] = 18;

        $r0[84] = 19;

        $r0[85] = 20;

        $r0[86] = 21;

        $r0[87] = 22;

        $r0[88] = 23;

        $r0[89] = 24;

        $r0[90] = 25;

        <org.apache.commons.codec.binary.Base32: byte[] DECODE_TABLE> = $r0;

        $r0 = newarray (byte)[32];

        $r0[0] = 65;

        $r0[1] = 66;

        $r0[2] = 67;

        $r0[3] = 68;

        $r0[4] = 69;

        $r0[5] = 70;

        $r0[6] = 71;

        $r0[7] = 72;

        $r0[8] = 73;

        $r0[9] = 74;

        $r0[10] = 75;

        $r0[11] = 76;

        $r0[12] = 77;

        $r0[13] = 78;

        $r0[14] = 79;

        $r0[15] = 80;

        $r0[16] = 81;

        $r0[17] = 82;

        $r0[18] = 83;

        $r0[19] = 84;

        $r0[20] = 85;

        $r0[21] = 86;

        $r0[22] = 87;

        $r0[23] = 88;

        $r0[24] = 89;

        $r0[25] = 90;

        $r0[26] = 50;

        $r0[27] = 51;

        $r0[28] = 52;

        $r0[29] = 53;

        $r0[30] = 54;

        $r0[31] = 55;

        <org.apache.commons.codec.binary.Base32: byte[] ENCODE_TABLE> = $r0;

        $r0 = newarray (byte)[88];

        $r0[0] = -1;

        $r0[1] = -1;

        $r0[2] = -1;

        $r0[3] = -1;

        $r0[4] = -1;

        $r0[5] = -1;

        $r0[6] = -1;

        $r0[7] = -1;

        $r0[8] = -1;

        $r0[9] = -1;

        $r0[10] = -1;

        $r0[11] = -1;

        $r0[12] = -1;

        $r0[13] = -1;

        $r0[14] = -1;

        $r0[15] = -1;

        $r0[16] = -1;

        $r0[17] = -1;

        $r0[18] = -1;

        $r0[19] = -1;

        $r0[20] = -1;

        $r0[21] = -1;

        $r0[22] = -1;

        $r0[23] = -1;

        $r0[24] = -1;

        $r0[25] = -1;

        $r0[26] = -1;

        $r0[27] = -1;

        $r0[28] = -1;

        $r0[29] = -1;

        $r0[30] = -1;

        $r0[31] = -1;

        $r0[32] = -1;

        $r0[33] = -1;

        $r0[34] = -1;

        $r0[35] = -1;

        $r0[36] = -1;

        $r0[37] = -1;

        $r0[38] = -1;

        $r0[39] = -1;

        $r0[40] = -1;

        $r0[41] = -1;

        $r0[42] = -1;

        $r0[43] = -1;

        $r0[44] = -1;

        $r0[45] = -1;

        $r0[46] = -1;

        $r0[47] = 63;

        $r0[48] = 0;

        $r0[49] = 1;

        $r0[50] = 2;

        $r0[51] = 3;

        $r0[52] = 4;

        $r0[53] = 5;

        $r0[54] = 6;

        $r0[55] = 7;

        $r0[56] = 8;

        $r0[57] = 9;

        $r0[58] = -1;

        $r0[59] = -1;

        $r0[60] = -1;

        $r0[61] = -1;

        $r0[62] = -1;

        $r0[63] = -1;

        $r0[64] = -1;

        $r0[65] = 10;

        $r0[66] = 11;

        $r0[67] = 12;

        $r0[68] = 13;

        $r0[69] = 14;

        $r0[70] = 15;

        $r0[71] = 16;

        $r0[72] = 17;

        $r0[73] = 18;

        $r0[74] = 19;

        $r0[75] = 20;

        $r0[76] = 21;

        $r0[77] = 22;

        $r0[78] = 23;

        $r0[79] = 24;

        $r0[80] = 25;

        $r0[81] = 26;

        $r0[82] = 27;

        $r0[83] = 28;

        $r0[84] = 29;

        $r0[85] = 30;

        $r0[86] = 31;

        $r0[87] = 32;

        <org.apache.commons.codec.binary.Base32: byte[] HEX_DECODE_TABLE> = $r0;

        $r0 = newarray (byte)[32];

        $r0[0] = 48;

        $r0[1] = 49;

        $r0[2] = 50;

        $r0[3] = 51;

        $r0[4] = 52;

        $r0[5] = 53;

        $r0[6] = 54;

        $r0[7] = 55;

        $r0[8] = 56;

        $r0[9] = 57;

        $r0[10] = 65;

        $r0[11] = 66;

        $r0[12] = 67;

        $r0[13] = 68;

        $r0[14] = 69;

        $r0[15] = 70;

        $r0[16] = 71;

        $r0[17] = 72;

        $r0[18] = 73;

        $r0[19] = 74;

        $r0[20] = 75;

        $r0[21] = 76;

        $r0[22] = 77;

        $r0[23] = 78;

        $r0[24] = 79;

        $r0[25] = 80;

        $r0[26] = 81;

        $r0[27] = 82;

        $r0[28] = 83;

        $r0[29] = 84;

        $r0[30] = 85;

        $r0[31] = 86;

        <org.apache.commons.codec.binary.Base32: byte[] HEX_ENCODE_TABLE> = $r0;

        return;
    }
    public void <init>()
    {
        org.apache.commons.codec.binary.Base32 r0;

        r0 := @this: org.apache.commons.codec.binary.Base32;

        specialinvoke r0.<org.apache.commons.codec.binary.Base32: void <init>(boolean)>(0);

        return;
    }
    public void <init>(int)
    {
        org.apache.commons.codec.binary.Base32 r0;
        int $i0;
        byte[] $r1;

        r0 := @this: org.apache.commons.codec.binary.Base32;

        $i0 := @parameter0: int;

        $r1 = <org.apache.commons.codec.binary.Base32: byte[] CHUNK_SEPARATOR>;

        specialinvoke r0.<org.apache.commons.codec.binary.Base32: void <init>(int,byte[])>($i0, $r1);

        return;
    }
    public void <init>(int, byte[])
    {
        org.apache.commons.codec.binary.Base32 r0;
        int $i0;
        byte[] $r1;

        r0 := @this: org.apache.commons.codec.binary.Base32;

        $i0 := @parameter0: int;

        $r1 := @parameter1: byte[];

        specialinvoke r0.<org.apache.commons.codec.binary.Base32: void <init>(int,byte[],boolean)>($i0, $r1, 0);

        return;
    }
    public void <init>(int, byte[], boolean)
    {
        org.apache.commons.codec.binary.Base32 r0;
        int $i0, $i1;
        byte[] $r1, $r2;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;

        r0 := @this: org.apache.commons.codec.binary.Base32;

        $i0 := @parameter0: int;

        $r1 := @parameter1: byte[];

        $z0 := @parameter2: boolean;

        if $r1 != null goto label3;

        $i1 = 0;

     label1:
        specialinvoke r0.<org.apache.commons.codec.binary.BaseNCodec: void <init>(int,int,int,int)>(5, 8, $i0, $i1);

        if $z0 == 0 goto label4;

        $r2 = <org.apache.commons.codec.binary.Base32: byte[] HEX_ENCODE_TABLE>;

        r0.<org.apache.commons.codec.binary.Base32: byte[] encodeTable> = $r2;

        $r2 = <org.apache.commons.codec.binary.Base32: byte[] HEX_DECODE_TABLE>;

        r0.<org.apache.commons.codec.binary.Base32: byte[] decodeTable> = $r2;

     label2:
        if $i0 <= 0 goto label8;

        if $r1 != null goto label5;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("lineLength ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" > 0, but lineSeparator is null");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label3:
        $i1 = lengthof $r1;

        goto label1;

     label4:
        $r2 = <org.apache.commons.codec.binary.Base32: byte[] ENCODE_TABLE>;

        r0.<org.apache.commons.codec.binary.Base32: byte[] encodeTable> = $r2;

        $r2 = <org.apache.commons.codec.binary.Base32: byte[] DECODE_TABLE>;

        r0.<org.apache.commons.codec.binary.Base32: byte[] decodeTable> = $r2;

        goto label2;

     label5:
        $z0 = virtualinvoke r0.<org.apache.commons.codec.binary.Base32: boolean containsAlphabetOrPad(byte[])>($r1);

        if $z0 == 0 goto label6;

        $r5 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.String newStringUtf8(byte[])>($r1);

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("lineSeparator must not contain Base32 characters: [");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label6:
        $i0 = lengthof $r1;

        $i0 = $i0 + 8;

        r0.<org.apache.commons.codec.binary.Base32: int encodeSize> = $i0;

        $i0 = lengthof $r1;

        $r2 = newarray (byte)[$i0];

        r0.<org.apache.commons.codec.binary.Base32: byte[] lineSeparator> = $r2;

        $r2 = r0.<org.apache.commons.codec.binary.Base32: byte[] lineSeparator>;

        $i0 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r2, 0, $i0);

     label7:
        $i0 = r0.<org.apache.commons.codec.binary.Base32: int encodeSize>;

        $i0 = $i0 + -1;

        r0.<org.apache.commons.codec.binary.Base32: int decodeSize> = $i0;

        return;

     label8:
        r0.<org.apache.commons.codec.binary.Base32: int encodeSize> = 8;

        r0.<org.apache.commons.codec.binary.Base32: byte[] lineSeparator> = null;

        goto label7;
    }
    public void <init>(boolean)
    {
        org.apache.commons.codec.binary.Base32 r0;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.binary.Base32;

        $z0 := @parameter0: boolean;

        specialinvoke r0.<org.apache.commons.codec.binary.Base32: void <init>(int,byte[],boolean)>(0, null, $z0);

        return;
    }
    void decode(byte[], int, int, org.apache.commons.codec.binary.BaseNCodec$Context)
    {
        org.apache.commons.codec.binary.Base32 r0;
        byte[] $r1, $r6, $r7;
        int $i0, i2, i3, i4, $i7;
        org.apache.commons.codec.binary.BaseNCodec$Context $r2;
        byte b1;
        boolean $z0;
        java.lang.IllegalStateException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        long $l5, $l6;

        r0 := @this: org.apache.commons.codec.binary.Base32;

        $r1 := @parameter0: byte[];

        i2 := @parameter1: int;

        $i0 := @parameter2: int;

        $r2 := @parameter3: org.apache.commons.codec.binary.BaseNCodec$Context;

        $z0 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: boolean eof>;

        if $z0 == 0 goto label01;

        return;

     label01:
        if $i0 >= 0 goto label02;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: boolean eof> = 1;

     label02:
        i3 = 0;

        i4 = i2;

     label03:
        if i3 >= $i0 goto label14;

        i2 = i4 + 1;

        b1 = $r1[i4];

        if b1 != 61 goto label06;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: boolean eof> = 1;

     label04:
        $z0 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: boolean eof>;

        if $z0 == 0 goto label15;

        i2 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int modulus>;

        if i2 < 2 goto label15;

        i2 = r0.<org.apache.commons.codec.binary.Base32: int decodeSize>;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.binary.Base32: byte[] ensureBufferSize(int,org.apache.commons.codec.binary.BaseNCodec$Context)>(i2, $r2);

        i2 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int modulus>;

        lookupswitch(i2)
        {
            case 2: goto label08;
            case 3: goto label09;
            case 4: goto label10;
            case 5: goto label11;
            case 6: goto label12;
            case 7: goto label13;
            default: goto label05;
        };

     label05:
        $r3 = new java.lang.IllegalStateException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Impossible modulus ");

        i2 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int modulus>;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label06:
        i4 = r0.<org.apache.commons.codec.binary.Base32: int decodeSize>;

        $r6 = virtualinvoke r0.<org.apache.commons.codec.binary.Base32: byte[] ensureBufferSize(int,org.apache.commons.codec.binary.BaseNCodec$Context)>(i4, $r2);

        if b1 < 0 goto label07;

        $r7 = r0.<org.apache.commons.codec.binary.Base32: byte[] decodeTable>;

        i4 = lengthof $r7;

        if b1 >= i4 goto label07;

        $r7 = r0.<org.apache.commons.codec.binary.Base32: byte[] decodeTable>;

        b1 = $r7[b1];

        if b1 < 0 goto label07;

        i4 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int modulus>;

        i4 = i4 + 1;

        i4 = i4 % 8;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int modulus> = i4;

        $l5 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>;

        $l5 = $l5 << 5;

        $l6 = (long) b1;

        $l5 = $l5 + $l6;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea> = $l5;

        i4 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int modulus>;

        if i4 != 0 goto label07;

        i4 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        $i7 = i4 + 1;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $i7;

        $l5 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>;

        $l5 = $l5 >> 32;

        $l5 = $l5 & 255L;

        $i7 = (int) $l5;

        b1 = (byte) $i7;

        $r6[i4] = b1;

        i4 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        $i7 = i4 + 1;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $i7;

        $l5 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>;

        $l5 = $l5 >> 24;

        $l5 = $l5 & 255L;

        $i7 = (int) $l5;

        b1 = (byte) $i7;

        $r6[i4] = b1;

        i4 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        $i7 = i4 + 1;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $i7;

        $l5 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>;

        $l5 = $l5 >> 16;

        $l5 = $l5 & 255L;

        $i7 = (int) $l5;

        b1 = (byte) $i7;

        $r6[i4] = b1;

        i4 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        $i7 = i4 + 1;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $i7;

        $l5 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>;

        $l5 = $l5 >> 8;

        $l5 = $l5 & 255L;

        $i7 = (int) $l5;

        b1 = (byte) $i7;

        $r6[i4] = b1;

        i4 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        $i7 = i4 + 1;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $i7;

        $l5 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>;

        $l5 = $l5 & 255L;

        $i7 = (int) $l5;

        b1 = (byte) $i7;

        $r6[i4] = b1;

     label07:
        i3 = i3 + 1;

        i4 = i2;

        goto label03;

     label08:
        i2 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        $i0 = i2 + 1;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $i0;

        $l5 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>;

        $l5 = $l5 >> 2;

        $l5 = $l5 & 255L;

        $i0 = (int) $l5;

        b1 = (byte) $i0;

        $r1[i2] = b1;

        return;

     label09:
        i2 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        $i0 = i2 + 1;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $i0;

        $l5 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>;

        $l5 = $l5 >> 7;

        $l5 = $l5 & 255L;

        $i0 = (int) $l5;

        b1 = (byte) $i0;

        $r1[i2] = b1;

        return;

     label10:
        $l5 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>;

        $l5 = $l5 >> 4;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea> = $l5;

        i2 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        $i0 = i2 + 1;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $i0;

        $l5 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>;

        $l5 = $l5 >> 8;

        $l5 = $l5 & 255L;

        $i0 = (int) $l5;

        b1 = (byte) $i0;

        $r1[i2] = b1;

        i2 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        $i0 = i2 + 1;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $i0;

        $l5 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>;

        $l5 = $l5 & 255L;

        $i0 = (int) $l5;

        b1 = (byte) $i0;

        $r1[i2] = b1;

        return;

     label11:
        $l5 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>;

        $l5 = $l5 >> 1;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea> = $l5;

        i2 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        $i0 = i2 + 1;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $i0;

        $l5 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>;

        $l5 = $l5 >> 16;

        $l5 = $l5 & 255L;

        $i0 = (int) $l5;

        b1 = (byte) $i0;

        $r1[i2] = b1;

        i2 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        $i0 = i2 + 1;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $i0;

        $l5 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>;

        $l5 = $l5 >> 8;

        $l5 = $l5 & 255L;

        $i0 = (int) $l5;

        b1 = (byte) $i0;

        $r1[i2] = b1;

        i2 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        $i0 = i2 + 1;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $i0;

        $l5 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>;

        $l5 = $l5 & 255L;

        $i0 = (int) $l5;

        b1 = (byte) $i0;

        $r1[i2] = b1;

        return;

     label12:
        $l5 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>;

        $l5 = $l5 >> 6;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea> = $l5;

        i2 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        $i0 = i2 + 1;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $i0;

        $l5 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>;

        $l5 = $l5 >> 16;

        $l5 = $l5 & 255L;

        $i0 = (int) $l5;

        b1 = (byte) $i0;

        $r1[i2] = b1;

        i2 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        $i0 = i2 + 1;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $i0;

        $l5 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>;

        $l5 = $l5 >> 8;

        $l5 = $l5 & 255L;

        $i0 = (int) $l5;

        b1 = (byte) $i0;

        $r1[i2] = b1;

        i2 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        $i0 = i2 + 1;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $i0;

        $l5 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>;

        $l5 = $l5 & 255L;

        $i0 = (int) $l5;

        b1 = (byte) $i0;

        $r1[i2] = b1;

        return;

     label13:
        $l5 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>;

        $l5 = $l5 >> 3;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea> = $l5;

        i2 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        $i0 = i2 + 1;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $i0;

        $l5 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>;

        $l5 = $l5 >> 24;

        $l5 = $l5 & 255L;

        $i0 = (int) $l5;

        b1 = (byte) $i0;

        $r1[i2] = b1;

        i2 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        $i0 = i2 + 1;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $i0;

        $l5 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>;

        $l5 = $l5 >> 16;

        $l5 = $l5 & 255L;

        $i0 = (int) $l5;

        b1 = (byte) $i0;

        $r1[i2] = b1;

        i2 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        $i0 = i2 + 1;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $i0;

        $l5 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>;

        $l5 = $l5 >> 8;

        $l5 = $l5 & 255L;

        $i0 = (int) $l5;

        b1 = (byte) $i0;

        $r1[i2] = b1;

        i2 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        $i0 = i2 + 1;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $i0;

        $l5 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>;

        $l5 = $l5 & 255L;

        $i0 = (int) $l5;

        b1 = (byte) $i0;

        $r1[i2] = b1;

        return;

     label14:
        goto label04;

     label15:
        return;
    }
    void encode(byte[], int, int, org.apache.commons.codec.binary.BaseNCodec$Context)
    {
        org.apache.commons.codec.binary.Base32 r0;
        byte[] $r1, $r6, $r7, $r8;
        int $i0, i1, $i2, i5, $i7;
        org.apache.commons.codec.binary.BaseNCodec$Context $r2;
        boolean $z0;
        java.lang.IllegalStateException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        long $l3, $l6;
        byte $b4;

        r0 := @this: org.apache.commons.codec.binary.Base32;

        $r1 := @parameter0: byte[];

        i1 := @parameter1: int;

        $i0 := @parameter2: int;

        $r2 := @parameter3: org.apache.commons.codec.binary.BaseNCodec$Context;

        $z0 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: boolean eof>;

        if $z0 == 0 goto label01;

        return;

     label01:
        if $i0 >= 0 goto label09;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: boolean eof> = 1;

        i1 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int modulus>;

        if i1 != 0 goto label02;

        i1 = r0.<org.apache.commons.codec.binary.Base32: int lineLength>;

        if i1 == 0 goto label13;

     label02:
        i1 = r0.<org.apache.commons.codec.binary.Base32: int encodeSize>;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.binary.Base32: byte[] ensureBufferSize(int,org.apache.commons.codec.binary.BaseNCodec$Context)>(i1, $r2);

        i1 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        $i0 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int modulus>;

        lookupswitch($i0)
        {
            case 0: goto label05;
            case 1: goto label04;
            case 2: goto label06;
            case 3: goto label07;
            case 4: goto label08;
            default: goto label03;
        };

     label03:
        $r3 = new java.lang.IllegalStateException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Impossible modulus ");

        i1 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int modulus>;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label04:
        $i0 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        $i2 = $i0 + 1;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $i2;

        $r6 = r0.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>;

        $l3 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>;

        $l3 = $l3 >> 3;

        $i2 = (int) $l3;

        $i2 = $i2 & 31;

        $b4 = $r6[$i2];

        $r1[$i0] = $b4;

        $i0 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        $i2 = $i0 + 1;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $i2;

        $r6 = r0.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>;

        $l3 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>;

        $l3 = $l3 << 2;

        $i2 = (int) $l3;

        $i2 = $i2 & 31;

        $b4 = $r6[$i2];

        $r1[$i0] = $b4;

        $i0 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        $i2 = $i0 + 1;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $i2;

        $r1[$i0] = 61;

        $i0 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        $i2 = $i0 + 1;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $i2;

        $r1[$i0] = 61;

        $i0 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        $i2 = $i0 + 1;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $i2;

        $r1[$i0] = 61;

        $i0 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        $i2 = $i0 + 1;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $i2;

        $r1[$i0] = 61;

        $i0 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        $i2 = $i0 + 1;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $i2;

        $r1[$i0] = 61;

        $i0 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        $i2 = $i0 + 1;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $i2;

        $r1[$i0] = 61;

     label05:
        $i0 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int currentLinePos>;

        $i2 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        i1 = $i2 - i1;

        i1 = $i0 + i1;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int currentLinePos> = i1;

        i1 = r0.<org.apache.commons.codec.binary.Base32: int lineLength>;

        if i1 <= 0 goto label13;

        i1 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int currentLinePos>;

        if i1 <= 0 goto label13;

        $r6 = r0.<org.apache.commons.codec.binary.Base32: byte[] lineSeparator>;

        i1 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        $r7 = r0.<org.apache.commons.codec.binary.Base32: byte[] lineSeparator>;

        $i0 = lengthof $r7;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, $r1, i1, $i0);

        i1 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        $r1 = r0.<org.apache.commons.codec.binary.Base32: byte[] lineSeparator>;

        $i0 = lengthof $r1;

        i1 = i1 + $i0;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = i1;

        return;

     label06:
        $i0 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        $i2 = $i0 + 1;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $i2;

        $r6 = r0.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>;

        $l3 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>;

        $l3 = $l3 >> 11;

        $i2 = (int) $l3;

        $i2 = $i2 & 31;

        $b4 = $r6[$i2];

        $r1[$i0] = $b4;

        $i0 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        $i2 = $i0 + 1;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $i2;

        $r6 = r0.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>;

        $l3 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>;

        $l3 = $l3 >> 6;

        $i2 = (int) $l3;

        $i2 = $i2 & 31;

        $b4 = $r6[$i2];

        $r1[$i0] = $b4;

        $i0 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        $i2 = $i0 + 1;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $i2;

        $r6 = r0.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>;

        $l3 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>;

        $l3 = $l3 >> 1;

        $i2 = (int) $l3;

        $i2 = $i2 & 31;

        $b4 = $r6[$i2];

        $r1[$i0] = $b4;

        $i0 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        $i2 = $i0 + 1;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $i2;

        $r6 = r0.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>;

        $l3 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>;

        $l3 = $l3 << 4;

        $i2 = (int) $l3;

        $i2 = $i2 & 31;

        $b4 = $r6[$i2];

        $r1[$i0] = $b4;

        $i0 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        $i2 = $i0 + 1;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $i2;

        $r1[$i0] = 61;

        $i0 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        $i2 = $i0 + 1;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $i2;

        $r1[$i0] = 61;

        $i0 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        $i2 = $i0 + 1;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $i2;

        $r1[$i0] = 61;

        $i0 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        $i2 = $i0 + 1;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $i2;

        $r1[$i0] = 61;

        goto label05;

     label07:
        $i0 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        $i2 = $i0 + 1;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $i2;

        $r6 = r0.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>;

        $l3 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>;

        $l3 = $l3 >> 19;

        $i2 = (int) $l3;

        $i2 = $i2 & 31;

        $b4 = $r6[$i2];

        $r1[$i0] = $b4;

        $i0 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        $i2 = $i0 + 1;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $i2;

        $r6 = r0.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>;

        $l3 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>;

        $l3 = $l3 >> 14;

        $i2 = (int) $l3;

        $i2 = $i2 & 31;

        $b4 = $r6[$i2];

        $r1[$i0] = $b4;

        $i0 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        $i2 = $i0 + 1;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $i2;

        $r6 = r0.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>;

        $l3 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>;

        $l3 = $l3 >> 9;

        $i2 = (int) $l3;

        $i2 = $i2 & 31;

        $b4 = $r6[$i2];

        $r1[$i0] = $b4;

        $i0 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        $i2 = $i0 + 1;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $i2;

        $r6 = r0.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>;

        $l3 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>;

        $l3 = $l3 >> 4;

        $i2 = (int) $l3;

        $i2 = $i2 & 31;

        $b4 = $r6[$i2];

        $r1[$i0] = $b4;

        $i0 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        $i2 = $i0 + 1;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $i2;

        $r6 = r0.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>;

        $l3 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>;

        $l3 = $l3 << 1;

        $i2 = (int) $l3;

        $i2 = $i2 & 31;

        $b4 = $r6[$i2];

        $r1[$i0] = $b4;

        $i0 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        $i2 = $i0 + 1;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $i2;

        $r1[$i0] = 61;

        $i0 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        $i2 = $i0 + 1;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $i2;

        $r1[$i0] = 61;

        $i0 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        $i2 = $i0 + 1;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $i2;

        $r1[$i0] = 61;

        goto label05;

     label08:
        $i0 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        $i2 = $i0 + 1;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $i2;

        $r6 = r0.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>;

        $l3 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>;

        $l3 = $l3 >> 27;

        $i2 = (int) $l3;

        $i2 = $i2 & 31;

        $b4 = $r6[$i2];

        $r1[$i0] = $b4;

        $i0 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        $i2 = $i0 + 1;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $i2;

        $r6 = r0.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>;

        $l3 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>;

        $l3 = $l3 >> 22;

        $i2 = (int) $l3;

        $i2 = $i2 & 31;

        $b4 = $r6[$i2];

        $r1[$i0] = $b4;

        $i0 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        $i2 = $i0 + 1;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $i2;

        $r6 = r0.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>;

        $l3 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>;

        $l3 = $l3 >> 17;

        $i2 = (int) $l3;

        $i2 = $i2 & 31;

        $b4 = $r6[$i2];

        $r1[$i0] = $b4;

        $i0 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        $i2 = $i0 + 1;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $i2;

        $r6 = r0.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>;

        $l3 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>;

        $l3 = $l3 >> 12;

        $i2 = (int) $l3;

        $i2 = $i2 & 31;

        $b4 = $r6[$i2];

        $r1[$i0] = $b4;

        $i0 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        $i2 = $i0 + 1;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $i2;

        $r6 = r0.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>;

        $l3 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>;

        $l3 = $l3 >> 7;

        $i2 = (int) $l3;

        $i2 = $i2 & 31;

        $b4 = $r6[$i2];

        $r1[$i0] = $b4;

        $i0 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        $i2 = $i0 + 1;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $i2;

        $r6 = r0.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>;

        $l3 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>;

        $l3 = $l3 >> 2;

        $i2 = (int) $l3;

        $i2 = $i2 & 31;

        $b4 = $r6[$i2];

        $r1[$i0] = $b4;

        $i0 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        $i2 = $i0 + 1;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $i2;

        $r6 = r0.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>;

        $l3 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>;

        $l3 = $l3 << 3;

        $i2 = (int) $l3;

        $i2 = $i2 & 31;

        $b4 = $r6[$i2];

        $r1[$i0] = $b4;

        $i0 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        $i2 = $i0 + 1;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $i2;

        $r1[$i0] = 61;

        goto label05;

     label09:
        $i2 = 0;

        i5 = i1;

     label10:
        if $i2 >= $i0 goto label13;

        i1 = r0.<org.apache.commons.codec.binary.Base32: int encodeSize>;

        $r6 = virtualinvoke r0.<org.apache.commons.codec.binary.Base32: byte[] ensureBufferSize(int,org.apache.commons.codec.binary.BaseNCodec$Context)>(i1, $r2);

        i1 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int modulus>;

        i1 = i1 + 1;

        i1 = i1 % 5;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int modulus> = i1;

        i1 = i5 + 1;

        i5 = $r1[i5];

        if i5 >= 0 goto label11;

        i5 = i5 + 256;

     label11:
        $l3 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>;

        $l3 = $l3 << 8;

        $l6 = (long) i5;

        $l3 = $l3 + $l6;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea> = $l3;

        i5 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int modulus>;

        if i5 != 0 goto label12;

        i5 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        $i7 = i5 + 1;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $i7;

        $r7 = r0.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>;

        $l3 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>;

        $l3 = $l3 >> 35;

        $i7 = (int) $l3;

        $i7 = $i7 & 31;

        $b4 = $r7[$i7];

        $r6[i5] = $b4;

        i5 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        $i7 = i5 + 1;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $i7;

        $r7 = r0.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>;

        $l3 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>;

        $l3 = $l3 >> 30;

        $i7 = (int) $l3;

        $i7 = $i7 & 31;

        $b4 = $r7[$i7];

        $r6[i5] = $b4;

        i5 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        $i7 = i5 + 1;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $i7;

        $r7 = r0.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>;

        $l3 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>;

        $l3 = $l3 >> 25;

        $i7 = (int) $l3;

        $i7 = $i7 & 31;

        $b4 = $r7[$i7];

        $r6[i5] = $b4;

        i5 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        $i7 = i5 + 1;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $i7;

        $r7 = r0.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>;

        $l3 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>;

        $l3 = $l3 >> 20;

        $i7 = (int) $l3;

        $i7 = $i7 & 31;

        $b4 = $r7[$i7];

        $r6[i5] = $b4;

        i5 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        $i7 = i5 + 1;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $i7;

        $r7 = r0.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>;

        $l3 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>;

        $l3 = $l3 >> 15;

        $i7 = (int) $l3;

        $i7 = $i7 & 31;

        $b4 = $r7[$i7];

        $r6[i5] = $b4;

        i5 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        $i7 = i5 + 1;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $i7;

        $r7 = r0.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>;

        $l3 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>;

        $l3 = $l3 >> 10;

        $i7 = (int) $l3;

        $i7 = $i7 & 31;

        $b4 = $r7[$i7];

        $r6[i5] = $b4;

        i5 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        $i7 = i5 + 1;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $i7;

        $r7 = r0.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>;

        $l3 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>;

        $l3 = $l3 >> 5;

        $i7 = (int) $l3;

        $i7 = $i7 & 31;

        $b4 = $r7[$i7];

        $r6[i5] = $b4;

        i5 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        $i7 = i5 + 1;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = $i7;

        $r7 = r0.<org.apache.commons.codec.binary.Base32: byte[] encodeTable>;

        $l3 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: long lbitWorkArea>;

        $i7 = (int) $l3;

        $i7 = $i7 & 31;

        $b4 = $r7[$i7];

        $r6[i5] = $b4;

        i5 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int currentLinePos>;

        i5 = i5 + 8;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int currentLinePos> = i5;

        i5 = r0.<org.apache.commons.codec.binary.Base32: int lineLength>;

        if i5 <= 0 goto label12;

        i5 = r0.<org.apache.commons.codec.binary.Base32: int lineLength>;

        $i7 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int currentLinePos>;

        if i5 > $i7 goto label12;

        $r7 = r0.<org.apache.commons.codec.binary.Base32: byte[] lineSeparator>;

        i5 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        $r8 = r0.<org.apache.commons.codec.binary.Base32: byte[] lineSeparator>;

        $i7 = lengthof $r8;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, $r6, i5, $i7);

        i5 = $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        $r6 = r0.<org.apache.commons.codec.binary.Base32: byte[] lineSeparator>;

        $i7 = lengthof $r6;

        i5 = i5 + $i7;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = i5;

        $r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int currentLinePos> = 0;

     label12:
        $i2 = $i2 + 1;

        i5 = i1;

        goto label10;

     label13:
        return;
    }
    public boolean isInAlphabet(byte)
    {
        org.apache.commons.codec.binary.Base32 r0;
        byte $b0;
        byte[] $r1;
        int $i1;

        r0 := @this: org.apache.commons.codec.binary.Base32;

        $b0 := @parameter0: byte;

        if $b0 < 0 goto label1;

        $r1 = r0.<org.apache.commons.codec.binary.Base32: byte[] decodeTable>;

        $i1 = lengthof $r1;

        if $b0 >= $i1 goto label1;

        $r1 = r0.<org.apache.commons.codec.binary.Base32: byte[] decodeTable>;

        $b0 = $r1[$b0];

        if $b0 == -1 goto label1;

        return 1;

     label1:
        return 0;
    }
