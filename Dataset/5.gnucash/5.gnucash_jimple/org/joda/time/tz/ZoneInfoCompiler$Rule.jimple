org.joda.time.tz.ZoneInfoCompiler$Rule extends java.lang.Object
public final org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear iDateTimeOfYear
public final int iFromYear
public final java.lang.String iLetterS
public final java.lang.String iName
public final int iSaveMillis
public final int iToYear
public final java.lang.String iType
    void <init>(java.util.StringTokenizer)
    {
        org.joda.time.tz.ZoneInfoCompiler$Rule r0;
        java.util.StringTokenizer $r1;
        java.lang.String $r2;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r3;
        org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear $r4;

        r0 := @this: org.joda.time.tz.ZoneInfoCompiler$Rule;

        $r1 := @parameter0: java.util.StringTokenizer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = virtualinvoke $r1.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String intern()>();

        r0.<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String iName> = $r2;

        $r2 = virtualinvoke $r1.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $i0 = staticinvoke <org.joda.time.tz.ZoneInfoCompiler: int parseYear(java.lang.String,int)>($r2, 0);

        r0.<org.joda.time.tz.ZoneInfoCompiler$Rule: int iFromYear> = $i0;

        $r2 = virtualinvoke $r1.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $i0 = r0.<org.joda.time.tz.ZoneInfoCompiler$Rule: int iFromYear>;

        $i0 = staticinvoke <org.joda.time.tz.ZoneInfoCompiler: int parseYear(java.lang.String,int)>($r2, $i0);

        r0.<org.joda.time.tz.ZoneInfoCompiler$Rule: int iToYear> = $i0;

        $i0 = r0.<org.joda.time.tz.ZoneInfoCompiler$Rule: int iToYear>;

        $i1 = r0.<org.joda.time.tz.ZoneInfoCompiler$Rule: int iFromYear>;

        if $i0 >= $i1 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r3;

     label1:
        $r2 = virtualinvoke $r1.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r2 = staticinvoke <org.joda.time.tz.ZoneInfoCompiler: java.lang.String parseOptional(java.lang.String)>($r2);

        r0.<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String iType> = $r2;

        $r4 = new org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear;

        specialinvoke $r4.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>($r1);

        r0.<org.joda.time.tz.ZoneInfoCompiler$Rule: org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear iDateTimeOfYear> = $r4;

        $r2 = virtualinvoke $r1.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $i0 = staticinvoke <org.joda.time.tz.ZoneInfoCompiler: int parseTime(java.lang.String)>($r2);

        r0.<org.joda.time.tz.ZoneInfoCompiler$Rule: int iSaveMillis> = $i0;

        $r2 = virtualinvoke $r1.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r2 = staticinvoke <org.joda.time.tz.ZoneInfoCompiler: java.lang.String parseOptional(java.lang.String)>($r2);

        r0.<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String iLetterS> = $r2;

        return;
    }
    private java.lang.String formatName(java.lang.String)
    {
        org.joda.time.tz.ZoneInfoCompiler$Rule r0;
        java.lang.String $r1, $r2, $r3;
        int $i0, $i1;
        java.lang.StringBuilder $r4;

        r0 := @this: org.joda.time.tz.ZoneInfoCompiler$Rule;

        $r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r1.<java.lang.String: int indexOf(int)>(47);

        if $i0 <= 0 goto label2;

        $i1 = r0.<org.joda.time.tz.ZoneInfoCompiler$Rule: int iSaveMillis>;

        if $i1 != 0 goto label1;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String intern()>();

        return $r1;

     label1:
        $i0 = $i0 + 1;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String intern()>();

        return $r1;

     label2:
        $i0 = virtualinvoke $r1.<java.lang.String: int indexOf(java.lang.String)>("%s");

        if $i0 < 0 goto label5;

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $i0 = $i0 + 2;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i0);

        $r3 = r0.<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String iLetterS>;

        if $r3 != null goto label4;

        $r1 = virtualinvoke $r2.<java.lang.String: java.lang.String concat(java.lang.String)>($r1);

     label3:
        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String intern()>();

        return $r1;

     label4:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = r0.<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String iLetterS>;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label3;

     label5:
        return $r1;
    }
    public void addRecurring(org.joda.time.tz.DateTimeZoneBuilder, java.lang.String)
    {
        org.joda.time.tz.ZoneInfoCompiler$Rule r0;
        org.joda.time.tz.DateTimeZoneBuilder $r1;
        java.lang.String $r2;
        org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear $r3;
        int $i0, $i1, $i2;

        r0 := @this: org.joda.time.tz.ZoneInfoCompiler$Rule;

        $r1 := @parameter0: org.joda.time.tz.DateTimeZoneBuilder;

        $r2 := @parameter1: java.lang.String;

        $r2 = specialinvoke r0.<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String formatName(java.lang.String)>($r2);

        $r3 = r0.<org.joda.time.tz.ZoneInfoCompiler$Rule: org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear iDateTimeOfYear>;

        $i0 = r0.<org.joda.time.tz.ZoneInfoCompiler$Rule: int iSaveMillis>;

        $i1 = r0.<org.joda.time.tz.ZoneInfoCompiler$Rule: int iFromYear>;

        $i2 = r0.<org.joda.time.tz.ZoneInfoCompiler$Rule: int iToYear>;

        virtualinvoke $r3.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void addRecurring(org.joda.time.tz.DateTimeZoneBuilder,java.lang.String,int,int,int)>($r1, $r2, $i0, $i1, $i2);

        return;
    }
    public java.lang.String toString()
    {
        org.joda.time.tz.ZoneInfoCompiler$Rule r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        int $i0;
        org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear $r3;

        r0 := @this: org.joda.time.tz.ZoneInfoCompiler$Rule;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[Rule]\nName: ");

        $r2 = r0.<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String iName>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FromYear: ");

        $i0 = r0.<org.joda.time.tz.ZoneInfoCompiler$Rule: int iFromYear>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ToYear: ");

        $i0 = r0.<org.joda.time.tz.ZoneInfoCompiler$Rule: int iToYear>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type: ");

        $r2 = r0.<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String iType>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r3 = r0.<org.joda.time.tz.ZoneInfoCompiler$Rule: org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear iDateTimeOfYear>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SaveMillis: ");

        $i0 = r0.<org.joda.time.tz.ZoneInfoCompiler$Rule: int iSaveMillis>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LetterS: ");

        $r2 = r0.<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String iLetterS>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
