org.joda.time.tz.DateTimeZoneBuilder$RuleSet extends java.lang.Object
private static final int YEAR_LIMIT
private java.lang.String iInitialNameKey
private int iInitialSaveMillis
private java.util.ArrayList iRules
private int iStandardOffset
private org.joda.time.tz.DateTimeZoneBuilder$OfYear iUpperOfYear
private int iUpperYear
    static void <clinit>()
    {
        long $l0;
        org.joda.time.chrono.ISOChronology $r0;
        org.joda.time.DateTimeField $r1;
        int $i1;

        $l0 = staticinvoke <org.joda.time.DateTimeUtils: long currentTimeMillis()>();

        $r0 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>();

        $r1 = virtualinvoke $r0.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeField year()>();

        $i1 = virtualinvoke $r1.<org.joda.time.DateTimeField: int get(long)>($l0);

        $i1 = $i1 + 100;

        <org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int YEAR_LIMIT> = $i1;

        return;
    }
    void <init>()
    {
        org.joda.time.tz.DateTimeZoneBuilder$RuleSet r0;
        java.util.ArrayList $r1;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$RuleSet;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(10);

        r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules> = $r1;

        r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iUpperYear> = 2147483647;

        return;
    }
    void <init>(org.joda.time.tz.DateTimeZoneBuilder$RuleSet)
    {
        org.joda.time.tz.DateTimeZoneBuilder$RuleSet r0, $r1;
        java.util.ArrayList $r2, $r3;
        int $i0;
        java.lang.String $r4;
        org.joda.time.tz.DateTimeZoneBuilder$OfYear $r5;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$RuleSet;

        $r1 := @parameter0: org.joda.time.tz.DateTimeZoneBuilder$RuleSet;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = $r1.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset>;

        r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset> = $i0;

        $r3 = new java.util.ArrayList;

        $r2 = $r1.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules>;

        specialinvoke $r3.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules> = $r3;

        $r4 = $r1.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String iInitialNameKey>;

        r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String iInitialNameKey> = $r4;

        $i0 = $r1.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iInitialSaveMillis>;

        r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iInitialSaveMillis> = $i0;

        $i0 = $r1.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iUpperYear>;

        r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iUpperYear> = $i0;

        $r5 = $r1.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$OfYear iUpperOfYear>;

        r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$OfYear iUpperOfYear> = $r5;

        return;
    }
    public void addRule(org.joda.time.tz.DateTimeZoneBuilder$Rule)
    {
        org.joda.time.tz.DateTimeZoneBuilder$RuleSet r0;
        org.joda.time.tz.DateTimeZoneBuilder$Rule $r1;
        boolean $z0;
        java.util.ArrayList $r2;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$RuleSet;

        $r1 := @parameter0: org.joda.time.tz.DateTimeZoneBuilder$Rule;

        $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules>;

        $z0 = virtualinvoke $r2.<java.util.ArrayList: boolean contains(java.lang.Object)>($r1);

        if $z0 != 0 goto label1;

        $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules>;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r1);

     label1:
        return;
    }
    public org.joda.time.tz.DateTimeZoneBuilder$DSTZone buildTailZone(java.lang.String)
    {
        org.joda.time.tz.DateTimeZoneBuilder$RuleSet r0;
        java.lang.String $r1;
        java.util.ArrayList $r2;
        int $i0;
        java.lang.Object $r3;
        org.joda.time.tz.DateTimeZoneBuilder$Rule $r4, $r5;
        org.joda.time.tz.DateTimeZoneBuilder$DSTZone $r6;
        org.joda.time.tz.DateTimeZoneBuilder$Recurrence $r7, $r8;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$RuleSet;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules>;

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        if $i0 != 2 goto label1;

        $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>(0);

        $r4 = (org.joda.time.tz.DateTimeZoneBuilder$Rule) $r3;

        $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>(1);

        $r5 = (org.joda.time.tz.DateTimeZoneBuilder$Rule) $r3;

        $i0 = virtualinvoke $r4.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int getToYear()>();

        if $i0 != 2147483647 goto label1;

        $i0 = virtualinvoke $r5.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int getToYear()>();

        if $i0 != 2147483647 goto label1;

        $r6 = new org.joda.time.tz.DateTimeZoneBuilder$DSTZone;

        $i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset>;

        $r7 = $r4.<org.joda.time.tz.DateTimeZoneBuilder$Rule: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iRecurrence>;

        $r8 = $r5.<org.joda.time.tz.DateTimeZoneBuilder$Rule: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iRecurrence>;

        specialinvoke $r6.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: void <init>(java.lang.String,int,org.joda.time.tz.DateTimeZoneBuilder$Recurrence,org.joda.time.tz.DateTimeZoneBuilder$Recurrence)>($r1, $i0, $r7, $r8);

        return $r6;

     label1:
        return null;
    }
    public org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)
    {
        org.joda.time.tz.DateTimeZoneBuilder$RuleSet r0;
        long $l0, $l3, $l4;
        java.util.ArrayList $r1, $r4;
        java.lang.String $r2;
        org.joda.time.tz.DateTimeZoneBuilder$Transition $r3, $r5;
        int $i1, $i2;
        byte $b5;
        java.util.Iterator $r6;
        boolean $z0;
        java.lang.Object $r7;
        org.joda.time.tz.DateTimeZoneBuilder$Rule $r8;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$RuleSet;

        $l0 := @parameter0: long;

        $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String iInitialNameKey>;

        if $r2 == null goto label1;

        $r3 = new org.joda.time.tz.DateTimeZoneBuilder$Transition;

        $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String iInitialNameKey>;

        $i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset>;

        $i2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iInitialSaveMillis>;

        $i1 = $i1 + $i2;

        $i2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset>;

        specialinvoke $r3.<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,java.lang.String,int,int)>($l0, $r2, $i1, $i2);

        return $r3;

     label1:
        $r1 = new java.util.ArrayList;

        $r4 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules>;

        specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>($r4);

        $l3 = -9223372036854775808L;

        $i1 = 0;

        $r5 = null;

     label2:
        $r3 = virtualinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>($l3, $i1);

        if $r3 == null goto label3;

        $l4 = virtualinvoke $r3.<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>();

        $l3 = $l4;

        $b5 = $l4 cmp $l0;

        if $b5 != 0 goto label4;

        $r5 = new org.joda.time.tz.DateTimeZoneBuilder$Transition;

        specialinvoke $r5.<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,org.joda.time.tz.DateTimeZoneBuilder$Transition)>($l0, $r3);

     label3:
        r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules> = $r1;

        return $r5;

     label4:
        $b5 = $l4 cmp $l0;

        if $b5 <= 0 goto label7;

        if $r5 != null goto label6;

        $r6 = virtualinvoke $r1.<java.util.ArrayList: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (org.joda.time.tz.DateTimeZoneBuilder$Rule) $r7;

        $i1 = virtualinvoke $r8.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int getSaveMillis()>();

        if $i1 != 0 goto label5;

        $r5 = new org.joda.time.tz.DateTimeZoneBuilder$Transition;

        $i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset>;

        specialinvoke $r5.<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,org.joda.time.tz.DateTimeZoneBuilder$Rule,int)>($l0, $r8, $i1);

     label6:
        if $r5 != null goto label3;

        $r5 = new org.joda.time.tz.DateTimeZoneBuilder$Transition;

        $r2 = virtualinvoke $r3.<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String getNameKey()>();

        $i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset>;

        $i2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset>;

        specialinvoke $r5.<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,java.lang.String,int,int)>($l0, $r2, $i1, $i2);

        goto label3;

     label7:
        $r5 = new org.joda.time.tz.DateTimeZoneBuilder$Transition;

        specialinvoke $r5.<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,org.joda.time.tz.DateTimeZoneBuilder$Transition)>($l0, $r3);

        $i1 = virtualinvoke $r3.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getSaveMillis()>();

        goto label2;
    }
    public int getStandardOffset()
    {
        org.joda.time.tz.DateTimeZoneBuilder$RuleSet r0;
        int i0;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$RuleSet;

        i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset>;

        return i0;
    }
    public long getUpperLimit(int)
    {
        org.joda.time.tz.DateTimeZoneBuilder$RuleSet r0;
        int $i0, $i1, $i3;
        long $l2;
        org.joda.time.tz.DateTimeZoneBuilder$OfYear $r1;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$RuleSet;

        $i0 := @parameter0: int;

        $i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iUpperYear>;

        if $i1 != 2147483647 goto label1;

        return 9223372036854775807L;

     label1:
        $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$OfYear iUpperOfYear>;

        $i3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iUpperYear>;

        $i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset>;

        $l2 = virtualinvoke $r1.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>($i3, $i1, $i0);

        return $l2;
    }
    public org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long, int)
    {
        org.joda.time.tz.DateTimeZoneBuilder$RuleSet r0;
        long $l0, $l3, $l4;
        int $i1, $i2, $i6;
        org.joda.time.chrono.ISOChronology $r1;
        java.util.ArrayList $r2;
        java.util.Iterator $r3;
        org.joda.time.tz.DateTimeZoneBuilder$Rule $r4, $r6;
        boolean $z0;
        java.lang.Object $r5;
        byte $b5;
        org.joda.time.DateTimeField $r7;
        org.joda.time.tz.DateTimeZoneBuilder$OfYear $r8;
        org.joda.time.tz.DateTimeZoneBuilder$Transition $r9;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$RuleSet;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>();

        $l3 = 9223372036854775807L;

        $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.util.Iterator iterator()>();

        $r4 = null;

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (org.joda.time.tz.DateTimeZoneBuilder$Rule) $r5;

        $i2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset>;

        $l4 = virtualinvoke $r6.<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>($l0, $i2, $i1);

        $b5 = $l4 cmp $l0;

        if $b5 > 0 goto label2;

        interfaceinvoke $r3.<java.util.Iterator: void remove()>();

        goto label1;

     label2:
        $b5 = $l4 cmp $l3;

        if $b5 > 0 goto label7;

        $r4 = $r6;

        $l3 = $l4;

     label3:
        goto label1;

     label4:
        if $r4 != null goto label5;

        return null;

     label5:
        $r7 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>();

        $i2 = virtualinvoke $r7.<org.joda.time.DateTimeField: int get(long)>($l3);

        $i6 = <org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int YEAR_LIMIT>;

        if $i2 >= $i6 goto label8;

        $i2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iUpperYear>;

        if $i2 >= 2147483647 goto label6;

        $r8 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$OfYear iUpperOfYear>;

        $i6 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iUpperYear>;

        $i2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset>;

        $l0 = virtualinvoke $r8.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>($i6, $i2, $i1);

        $b5 = $l3 cmp $l0;

        if $b5 >= 0 goto label8;

     label6:
        $r9 = new org.joda.time.tz.DateTimeZoneBuilder$Transition;

        $i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset>;

        specialinvoke $r9.<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,org.joda.time.tz.DateTimeZoneBuilder$Rule,int)>($l3, $r4, $i1);

        return $r9;

     label7:
        goto label3;

     label8:
        return null;
    }
    public void setFixedSavings(java.lang.String, int)
    {
        org.joda.time.tz.DateTimeZoneBuilder$RuleSet r0;
        java.lang.String $r1;
        int $i0;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$RuleSet;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String iInitialNameKey> = $r1;

        r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iInitialSaveMillis> = $i0;

        return;
    }
    public void setStandardOffset(int)
    {
        org.joda.time.tz.DateTimeZoneBuilder$RuleSet r0;
        int $i0;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$RuleSet;

        $i0 := @parameter0: int;

        r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset> = $i0;

        return;
    }
    public void setUpperLimit(int, org.joda.time.tz.DateTimeZoneBuilder$OfYear)
    {
        org.joda.time.tz.DateTimeZoneBuilder$RuleSet r0;
        int $i0;
        org.joda.time.tz.DateTimeZoneBuilder$OfYear $r1;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$RuleSet;

        $i0 := @parameter0: int;

        $r1 := @parameter1: org.joda.time.tz.DateTimeZoneBuilder$OfYear;

        r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iUpperYear> = $i0;

        r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$OfYear iUpperOfYear> = $r1;

        return;
    }
