org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear extends java.lang.Object
public final boolean iAdvanceDayOfWeek
public final int iDayOfMonth
public final int iDayOfWeek
public final int iMillisOfDay
public final int iMonthOfYear
public final char iZoneChar
    void <init>()
    {
        org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear r0;

        r0 := @this: org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: int iMonthOfYear> = 1;

        r0.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: int iDayOfMonth> = 1;

        r0.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: int iDayOfWeek> = 0;

        r0.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: boolean iAdvanceDayOfWeek> = 0;

        r0.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: int iMillisOfDay> = 0;

        r0.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: char iZoneChar> = 119;

        return;
    }
    void <init>(java.util.StringTokenizer)
    {
        org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear r0;
        java.util.StringTokenizer $r1;
        boolean $z0, $z1, $z2;
        java.lang.String $r2, $r4;
        int $i0, $i1, $i2, $i3;
        char $c4;
        java.lang.NumberFormatException $r3;
        java.lang.IllegalArgumentException $r5;
        org.joda.time.LocalDate $r6;

        r0 := @this: org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear;

        $r1 := @parameter0: java.util.StringTokenizer;

        $z0 = 1;

        $z1 = 0;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z2 = virtualinvoke $r1.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z2 == 0 goto label17;

        $r2 = virtualinvoke $r1.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $i0 = staticinvoke <org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>($r2);

        $z2 = virtualinvoke $r1.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z2 == 0 goto label16;

        $r2 = virtualinvoke $r1.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $z1 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("last");

        if $z1 == 0 goto label03;

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int)>(4);

        $i2 = staticinvoke <org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>($r2);

        $i1 = -1;

        $z1 = 0;

     label01:
        $z2 = virtualinvoke $r1.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z2 == 0 goto label15;

        $r2 = virtualinvoke $r1.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $i3 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i3 = $i3 + -1;

        $c4 = virtualinvoke $r2.<java.lang.String: char charAt(int)>($i3);

        $c4 = staticinvoke <org.joda.time.tz.ZoneInfoCompiler: char parseZoneChar(char)>($c4);

        $z2 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("24:00");

        if $z2 == 0 goto label14;

        if $i0 != 12 goto label08;

        if $i1 != 31 goto label08;

        $i3 = staticinvoke <org.joda.time.tz.ZoneInfoCompiler: int parseTime(java.lang.String)>("23:59:59.999");

     label02:
        r0.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: int iMonthOfYear> = $i0;

        r0.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: int iDayOfMonth> = $i1;

        r0.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: int iDayOfWeek> = $i2;

        r0.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: boolean iAdvanceDayOfWeek> = $z1;

        r0.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: int iMillisOfDay> = $i3;

        r0.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: char iZoneChar> = $c4;

        return;

     label03:
        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2);

     label04:
        $i2 = 0;

        $z1 = 0;

        goto label01;

     label05:
        $r3 := @caughtexception;

        $i1 = virtualinvoke $r2.<java.lang.String: int indexOf(java.lang.String)>(">=");

        if $i1 <= 0 goto label06;

        $i2 = $i1 + 2;

        $r4 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int)>($i2);

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r4);

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        $i1 = $i2;

        $i2 = staticinvoke <org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>($r2);

        $z1 = 1;

        goto label01;

     label06:
        $i1 = virtualinvoke $r2.<java.lang.String: int indexOf(java.lang.String)>("<=");

        if $i1 <= 0 goto label07;

        $i2 = $i1 + 2;

        $r4 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int)>($i2);

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r4);

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        $i1 = $i2;

        $i2 = staticinvoke <org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>($r2);

        $z1 = 0;

        goto label01;

     label07:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r5;

     label08:
        if $i1 != -1 goto label12;

        $r6 = new org.joda.time.LocalDate;

        specialinvoke $r6.<org.joda.time.LocalDate: void <init>(int,int,int)>(2001, $i0, 1);

        $r6 = virtualinvoke $r6.<org.joda.time.LocalDate: org.joda.time.LocalDate plusMonths(int)>(1);

     label09:
        if $i1 == -1 goto label13;

        if $i2 == 0 goto label13;

     label10:
        $i0 = virtualinvoke $r6.<org.joda.time.LocalDate: int getMonthOfYear()>();

        $i1 = virtualinvoke $r6.<org.joda.time.LocalDate: int getDayOfMonth()>();

        if $i2 == 0 goto label11;

        $i2 = $i2 + -1;

        $i2 = $i2 + 1;

        $i2 = $i2 % 7;

        $i2 = $i2 + 1;

     label11:
        $z1 = $z0;

        $i3 = 0;

        goto label02;

     label12:
        $r6 = new org.joda.time.LocalDate;

        specialinvoke $r6.<org.joda.time.LocalDate: void <init>(int,int,int)>(2001, $i0, $i1);

        $r6 = virtualinvoke $r6.<org.joda.time.LocalDate: org.joda.time.LocalDate plusDays(int)>(1);

        goto label09;

     label13:
        $z0 = 0;

        goto label10;

     label14:
        $i3 = staticinvoke <org.joda.time.tz.ZoneInfoCompiler: int parseTime(java.lang.String)>($r2);

        goto label02;

     label15:
        $i3 = 0;

        $c4 = 119;

        goto label02;

     label16:
        $c4 = 119;

        $i2 = 0;

        $i1 = 1;

        $i3 = 0;

        goto label02;

     label17:
        $c4 = 119;

        $i2 = 0;

        $i1 = 1;

        $i0 = 1;

        $i3 = 0;

        goto label02;

        catch java.lang.NumberFormatException from label03 to label04 with label05;
    }
    public void addCutover(org.joda.time.tz.DateTimeZoneBuilder, int)
    {
        org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear r0;
        org.joda.time.tz.DateTimeZoneBuilder $r1;
        int $i0, $i2, $i3, $i4, $i5;
        char $c1;
        boolean $z0;

        r0 := @this: org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear;

        $r1 := @parameter0: org.joda.time.tz.DateTimeZoneBuilder;

        $i0 := @parameter1: int;

        $c1 = r0.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: char iZoneChar>;

        $i2 = r0.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: int iMonthOfYear>;

        $i3 = r0.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: int iDayOfMonth>;

        $i4 = r0.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: int iDayOfWeek>;

        $z0 = r0.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: boolean iAdvanceDayOfWeek>;

        $i5 = r0.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: int iMillisOfDay>;

        virtualinvoke $r1.<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addCutover(int,char,int,int,int,boolean,int)>($i0, $c1, $i2, $i3, $i4, $z0, $i5);

        return;
    }
    public void addRecurring(org.joda.time.tz.DateTimeZoneBuilder, java.lang.String, int, int, int)
    {
        org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear r0;
        org.joda.time.tz.DateTimeZoneBuilder $r1;
        java.lang.String $r2;
        int $i0, $i1, $i2, $i4, $i5, $i6, $i7;
        char $c3;
        boolean $z0;

        r0 := @this: org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear;

        $r1 := @parameter0: org.joda.time.tz.DateTimeZoneBuilder;

        $r2 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        $c3 = r0.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: char iZoneChar>;

        $i4 = r0.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: int iMonthOfYear>;

        $i5 = r0.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: int iDayOfMonth>;

        $i6 = r0.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: int iDayOfWeek>;

        $z0 = r0.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: boolean iAdvanceDayOfWeek>;

        $i7 = r0.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: int iMillisOfDay>;

        virtualinvoke $r1.<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addRecurringSavings(java.lang.String,int,int,int,char,int,int,int,boolean,int)>($r2, $i0, $i1, $i2, $c3, $i4, $i5, $i6, $z0, $i7);

        return;
    }
    public java.lang.String toString()
    {
        org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear r0;
        java.lang.StringBuilder $r1;
        int $i0;
        boolean $z0;
        char $c1;
        java.lang.String $r2;

        r0 := @this: org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("MonthOfYear: ");

        $i0 = r0.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: int iMonthOfYear>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DayOfMonth: ");

        $i0 = r0.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: int iDayOfMonth>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DayOfWeek: ");

        $i0 = r0.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: int iDayOfWeek>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AdvanceDayOfWeek: ");

        $z0 = r0.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: boolean iAdvanceDayOfWeek>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("MillisOfDay: ");

        $i0 = r0.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: int iMillisOfDay>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ZoneChar: ");

        $c1 = r0.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: char iZoneChar>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
