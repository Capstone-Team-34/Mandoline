org.joda.time.tz.ZoneInfoProvider extends java.lang.Object implements org.joda.time.tz.Provider
private final java.io.File iFileDir
private final java.lang.ClassLoader iLoader
private final java.lang.String iResourcePath
private final java.util.Set iZoneInfoKeys
private final java.util.Map iZoneInfoMap
    public void <init>(java.io.File) throws java.io.IOException
    {
        org.joda.time.tz.ZoneInfoProvider r0;
        java.io.File $r1;
        java.lang.IllegalArgumentException $r2;
        boolean $z0;
        java.io.IOException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        java.io.InputStream $r6;
        java.util.Map $r7;
        java.util.TreeSet $r8;
        java.util.Set $r9;
        java.util.SortedSet $r10;

        r0 := @this: org.joda.time.tz.ZoneInfoProvider;

        $r1 := @parameter0: java.io.File;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No file directory provided");

        throw $r2;

     label1:
        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label2;

        $r3 = new java.io.IOException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File directory doesn\'t exist: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label2:
        $z0 = virtualinvoke $r1.<java.io.File: boolean isDirectory()>();

        if $z0 != 0 goto label3;

        $r3 = new java.io.IOException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File doesn\'t refer to a directory: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label3:
        r0.<org.joda.time.tz.ZoneInfoProvider: java.io.File iFileDir> = $r1;

        r0.<org.joda.time.tz.ZoneInfoProvider: java.lang.String iResourcePath> = null;

        r0.<org.joda.time.tz.ZoneInfoProvider: java.lang.ClassLoader iLoader> = null;

        $r6 = specialinvoke r0.<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>("ZoneInfoMap");

        $r7 = staticinvoke <org.joda.time.tz.ZoneInfoProvider: java.util.Map loadZoneInfoMap(java.io.InputStream)>($r6);

        r0.<org.joda.time.tz.ZoneInfoProvider: java.util.Map iZoneInfoMap> = $r7;

        $r8 = new java.util.TreeSet;

        $r7 = r0.<org.joda.time.tz.ZoneInfoProvider: java.util.Map iZoneInfoMap>;

        $r9 = interfaceinvoke $r7.<java.util.Map: java.util.Set keySet()>();

        specialinvoke $r8.<java.util.TreeSet: void <init>(java.util.Collection)>($r9);

        $r10 = staticinvoke <java.util.Collections: java.util.SortedSet unmodifiableSortedSet(java.util.SortedSet)>($r8);

        r0.<org.joda.time.tz.ZoneInfoProvider: java.util.Set iZoneInfoKeys> = $r10;

        return;
    }
    public void <init>(java.lang.String) throws java.io.IOException
    {
        org.joda.time.tz.ZoneInfoProvider r0;
        java.lang.String $r1;

        r0 := @this: org.joda.time.tz.ZoneInfoProvider;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>($r1, null, 0);

        return;
    }
    public void <init>(java.lang.String, java.lang.ClassLoader) throws java.io.IOException
    {
        org.joda.time.tz.ZoneInfoProvider r0;
        java.lang.String $r1;
        java.lang.ClassLoader $r2;

        r0 := @this: org.joda.time.tz.ZoneInfoProvider;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.ClassLoader;

        specialinvoke r0.<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>($r1, $r2, 1);

        return;
    }
    private void <init>(java.lang.String, java.lang.ClassLoader, boolean) throws java.io.IOException
    {
        org.joda.time.tz.ZoneInfoProvider r0;
        boolean $z0, $z1;
        java.lang.String $r1;
        java.lang.ClassLoader $r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4;
        java.lang.Class $r5;
        java.io.InputStream $r6;
        java.util.Map $r7;
        java.util.TreeSet $r8;
        java.util.Set $r9;
        java.util.SortedSet $r10;

        r0 := @this: org.joda.time.tz.ZoneInfoProvider;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.ClassLoader;

        $z0 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No resource path provided");

        throw $r3;

     label1:
        $z1 = virtualinvoke $r1.<java.lang.String: boolean endsWith(java.lang.String)>("/");

        if $z1 != 0 goto label2;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);

        $r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        r0.<org.joda.time.tz.ZoneInfoProvider: java.io.File iFileDir> = null;

        r0.<org.joda.time.tz.ZoneInfoProvider: java.lang.String iResourcePath> = $r1;

        if $r2 != null goto label3;

        if $z0 != 0 goto label3;

        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r5.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

     label3:
        r0.<org.joda.time.tz.ZoneInfoProvider: java.lang.ClassLoader iLoader> = $r2;

        $r6 = specialinvoke r0.<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>("ZoneInfoMap");

        $r7 = staticinvoke <org.joda.time.tz.ZoneInfoProvider: java.util.Map loadZoneInfoMap(java.io.InputStream)>($r6);

        r0.<org.joda.time.tz.ZoneInfoProvider: java.util.Map iZoneInfoMap> = $r7;

        $r8 = new java.util.TreeSet;

        $r7 = r0.<org.joda.time.tz.ZoneInfoProvider: java.util.Map iZoneInfoMap>;

        $r9 = interfaceinvoke $r7.<java.util.Map: java.util.Set keySet()>();

        specialinvoke $r8.<java.util.TreeSet: void <init>(java.util.Collection)>($r9);

        $r10 = staticinvoke <java.util.Collections: java.util.SortedSet unmodifiableSortedSet(java.util.SortedSet)>($r8);

        r0.<org.joda.time.tz.ZoneInfoProvider: java.util.Set iZoneInfoKeys> = $r10;

        return;
    }
    private org.joda.time.DateTimeZone loadZoneData(java.lang.String)
    {
        org.joda.time.tz.ZoneInfoProvider r0;
        java.lang.String $r1;
        java.util.Map $r2;
        java.lang.ref.SoftReference $r3;
        java.io.InputStream $r4, $r5;
        org.joda.time.DateTimeZone $r6;
        java.io.IOException $r7, $r9, $r10, $r11;
        java.lang.Throwable $r8;

        r0 := @this: org.joda.time.tz.ZoneInfoProvider;

        $r1 := @parameter0: java.lang.String;

     label01:
        $r4 = specialinvoke r0.<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>($r1);

     label02:
        $r5 = $r4;

     label03:
        $r6 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.InputStream,java.lang.String)>($r4, $r1);

     label04:
        $r2 = r0.<org.joda.time.tz.ZoneInfoProvider: java.util.Map iZoneInfoMap>;

        $r3 = new java.lang.ref.SoftReference;

     label05:
        specialinvoke $r3.<java.lang.ref.SoftReference: void <init>(java.lang.Object)>($r6);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r3);

     label06:
        if $r4 == null goto label23;

     label07:
        virtualinvoke $r4.<java.io.InputStream: void close()>();

     label08:
        return $r6;

     label09:
        $r7 := @caughtexception;

        $r5 = null;

     label10:
        virtualinvoke r0.<org.joda.time.tz.ZoneInfoProvider: void uncaughtException(java.lang.Exception)>($r7);

        $r2 = r0.<org.joda.time.tz.ZoneInfoProvider: java.util.Map iZoneInfoMap>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r1);

     label11:
        if $r5 == null goto label13;

     label12:
        virtualinvoke $r5.<java.io.InputStream: void close()>();

     label13:
        return null;

     label14:
        $r8 := @caughtexception;

        $r5 = null;

     label15:
        if $r5 == null goto label17;

     label16:
        virtualinvoke $r5.<java.io.InputStream: void close()>();

     label17:
        throw $r8;

     label18:
        $r9 := @caughtexception;

        return $r6;

     label19:
        $r10 := @caughtexception;

        goto label13;

     label20:
        $r11 := @caughtexception;

        goto label17;

     label21:
        $r8 := @caughtexception;

        goto label15;

     label22:
        $r7 := @caughtexception;

        goto label10;

     label23:
        return $r6;

        catch java.io.IOException from label01 to label02 with label09;
        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.io.IOException from label03 to label04 with label22;
        catch java.io.IOException from label05 to label06 with label22;
        catch java.lang.Throwable from label03 to label06 with label21;
        catch java.io.IOException from label07 to label08 with label18;
        catch java.lang.Throwable from label10 to label11 with label21;
        catch java.io.IOException from label12 to label13 with label19;
        catch java.io.IOException from label16 to label17 with label20;
    }
    private static java.util.Map loadZoneInfoMap(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream $r0;
        java.lang.ref.SoftReference $r1;
        org.joda.time.DateTimeZone $r2;
        java.util.concurrent.ConcurrentHashMap $r3;
        java.io.DataInputStream $r4;
        java.lang.Throwable $r5;
        java.io.IOException $r6, $r7;

        $r0 := @parameter0: java.io.InputStream;

        $r3 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r3.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        $r4 = new java.io.DataInputStream;

        specialinvoke $r4.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r0);

     label1:
        staticinvoke <org.joda.time.tz.ZoneInfoProvider: void readZoneInfoMap(java.io.DataInputStream,java.util.Map)>($r4, $r3);

     label2:
        virtualinvoke $r4.<java.io.DataInputStream: void close()>();

     label3:
        $r1 = new java.lang.ref.SoftReference;

        $r2 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        specialinvoke $r1.<java.lang.ref.SoftReference: void <init>(java.lang.Object)>($r2);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("UTC", $r1);

        return $r3;

     label4:
        $r5 := @caughtexception;

     label5:
        virtualinvoke $r4.<java.io.DataInputStream: void close()>();

     label6:
        throw $r5;

     label7:
        $r6 := @caughtexception;

        goto label3;

     label8:
        $r7 := @caughtexception;

        goto label6;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.io.IOException from label2 to label3 with label7;
        catch java.io.IOException from label5 to label6 with label8;
    }
    private java.io.InputStream openResource(java.lang.String) throws java.io.IOException
    {
        org.joda.time.tz.ZoneInfoProvider r0;
        java.lang.String $r1, $r5;
        java.io.File $r2, $r4;
        java.io.FileInputStream $r3;
        java.lang.ClassLoader $r6;
        java.io.InputStream $r7;
        java.lang.StringBuilder $r8;
        java.io.IOException $r9;

        r0 := @this: org.joda.time.tz.ZoneInfoProvider;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.joda.time.tz.ZoneInfoProvider: java.io.File iFileDir>;

        if $r2 == null goto label1;

        $r3 = new java.io.FileInputStream;

        $r2 = new java.io.File;

        $r4 = r0.<org.joda.time.tz.ZoneInfoProvider: java.io.File iFileDir>;

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, $r1);

        specialinvoke $r3.<java.io.FileInputStream: void <init>(java.io.File)>($r2);

        return $r3;

     label1:
        $r5 = r0.<org.joda.time.tz.ZoneInfoProvider: java.lang.String iResourcePath>;

        $r1 = virtualinvoke $r5.<java.lang.String: java.lang.String concat(java.lang.String)>($r1);

        $r6 = r0.<org.joda.time.tz.ZoneInfoProvider: java.lang.ClassLoader iLoader>;

        if $r6 == null goto label4;

        $r6 = r0.<org.joda.time.tz.ZoneInfoProvider: java.lang.ClassLoader iLoader>;

        $r7 = virtualinvoke $r6.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>($r1);

     label2:
        if $r7 != null goto label6;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(int)>(40);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Resource not found: \"");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" ClassLoader: ");

        $r6 = r0.<org.joda.time.tz.ZoneInfoProvider: java.lang.ClassLoader iLoader>;

        if $r6 == null goto label5;

        $r6 = r0.<org.joda.time.tz.ZoneInfoProvider: java.lang.ClassLoader iLoader>;

        $r1 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

     label3:
        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r9 = new java.io.IOException;

        $r1 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>($r1);

        throw $r9;

     label4:
        $r7 = staticinvoke <java.lang.ClassLoader: java.io.InputStream getSystemResourceAsStream(java.lang.String)>($r1);

        goto label2;

     label5:
        $r1 = "system";

        goto label3;

     label6:
        return $r7;
    }
    private static void readZoneInfoMap(java.io.DataInputStream, java.util.Map) throws java.io.IOException
    {
        java.io.DataInputStream $r0;
        java.util.Map $r1;
        java.lang.String[] $r2;
        int $i0, $i1, $i2;
        java.lang.String $r3, $r4;
        java.lang.ArrayIndexOutOfBoundsException $r5;
        java.io.IOException $r6;

        $r0 := @parameter0: java.io.DataInputStream;

        $r1 := @parameter1: java.util.Map;

        $i0 = 0;

        $i1 = virtualinvoke $r0.<java.io.DataInputStream: int readUnsignedShort()>();

        $r2 = newarray (java.lang.String)[$i1];

        $i2 = 0;

     label1:
        if $i2 >= $i1 goto label2;

        $r3 = virtualinvoke $r0.<java.io.DataInputStream: java.lang.String readUTF()>();

        $r3 = virtualinvoke $r3.<java.lang.String: java.lang.String intern()>();

        $r2[$i2] = $r3;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        $i1 = virtualinvoke $r0.<java.io.DataInputStream: int readUnsignedShort()>();

     label3:
        if $i0 >= $i1 goto label7;

     label4:
        $i2 = virtualinvoke $r0.<java.io.DataInputStream: int readUnsignedShort()>();

        $r3 = $r2[$i2];

        $i2 = virtualinvoke $r0.<java.io.DataInputStream: int readUnsignedShort()>();

        $r4 = $r2[$i2];

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r4);

     label5:
        $i0 = $i0 + 1;

        goto label3;

     label6:
        $r5 := @caughtexception;

        $r6 = new java.io.IOException;

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>("Corrupt zone info map");

        throw $r6;

     label7:
        return;

        catch java.lang.ArrayIndexOutOfBoundsException from label4 to label5 with label6;
    }
    public java.util.Set getAvailableIDs()
    {
        org.joda.time.tz.ZoneInfoProvider r0;
        java.util.Set r1;

        r0 := @this: org.joda.time.tz.ZoneInfoProvider;

        r1 = r0.<org.joda.time.tz.ZoneInfoProvider: java.util.Set iZoneInfoKeys>;

        return r1;
    }
    public org.joda.time.DateTimeZone getZone(java.lang.String)
    {
        org.joda.time.tz.ZoneInfoProvider r0;
        java.lang.String $r1;
        java.util.Map $r2;
        java.lang.Object $r3;
        boolean $z0;
        java.lang.ref.SoftReference $r4;
        org.joda.time.DateTimeZone $r5;

        r0 := @this: org.joda.time.tz.ZoneInfoProvider;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = r0.<org.joda.time.tz.ZoneInfoProvider: java.util.Map iZoneInfoMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        if $r3 != null goto label2;

        return null;

     label2:
        $z0 = $r3 instanceof java.lang.ref.SoftReference;

        if $z0 == 0 goto label3;

        $r4 = (java.lang.ref.SoftReference) $r3;

        $r3 = virtualinvoke $r4.<java.lang.ref.SoftReference: java.lang.Object get()>();

        $r5 = (org.joda.time.DateTimeZone) $r3;

        if $r5 != null goto label5;

        $r5 = specialinvoke r0.<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>($r1);

        return $r5;

     label3:
        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label4;

        $r5 = specialinvoke r0.<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>($r1);

        return $r5;

     label4:
        $r1 = (java.lang.String) $r3;

        $r5 = virtualinvoke r0.<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone getZone(java.lang.String)>($r1);

     label5:
        return $r5;
    }
    protected void uncaughtException(java.lang.Exception)
    {
        org.joda.time.tz.ZoneInfoProvider r0;
        java.lang.Exception $r1;

        r0 := @this: org.joda.time.tz.ZoneInfoProvider;

        $r1 := @parameter0: java.lang.Exception;

        virtualinvoke $r1.<java.lang.Exception: void printStackTrace()>();

        return;
    }
