org.joda.time.tz.DateTimeZoneBuilder$DSTZone extends org.joda.time.DateTimeZone
private static final long serialVersionUID
final org.joda.time.tz.DateTimeZoneBuilder$Recurrence iEndRecurrence
final int iStandardOffset
final org.joda.time.tz.DateTimeZoneBuilder$Recurrence iStartRecurrence
    void <init>(java.lang.String, int, org.joda.time.tz.DateTimeZoneBuilder$Recurrence, org.joda.time.tz.DateTimeZoneBuilder$Recurrence)
    {
        org.joda.time.tz.DateTimeZoneBuilder$DSTZone r0;
        java.lang.String $r1;
        int $i0;
        org.joda.time.tz.DateTimeZoneBuilder$Recurrence $r2, $r3;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$DSTZone;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 := @parameter2: org.joda.time.tz.DateTimeZoneBuilder$Recurrence;

        $r3 := @parameter3: org.joda.time.tz.DateTimeZoneBuilder$Recurrence;

        specialinvoke r0.<org.joda.time.DateTimeZone: void <init>(java.lang.String)>($r1);

        r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int iStandardOffset> = $i0;

        r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iStartRecurrence> = $r2;

        r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iEndRecurrence> = $r3;

        return;
    }
    private org.joda.time.tz.DateTimeZoneBuilder$Recurrence findMatchingRecurrence(long)
    {
        org.joda.time.tz.DateTimeZoneBuilder$DSTZone r0;
        org.joda.time.tz.DateTimeZoneBuilder$Recurrence $r1, $r2;
        long $l0, $l3, $l4;
        int $i1, $i2;
        byte $b5;
        java.lang.IllegalArgumentException $r3, $r6;
        java.lang.ArithmeticException $r4, $r5;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$DSTZone;

        $l0 := @parameter0: long;

        $i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int iStandardOffset>;

        $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iStartRecurrence>;

        $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iEndRecurrence>;

     label1:
        $i2 = virtualinvoke $r1.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>();

        $l3 = virtualinvoke $r2.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: long next(long,int,int)>($l0, $i1, $i2);

     label2:
        $i2 = virtualinvoke $r2.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>();

        $l4 = virtualinvoke $r1.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: long next(long,int,int)>($l0, $i1, $i2);

     label3:
        $l0 = $l4;

     label4:
        $b5 = $l3 cmp $l0;

        if $b5 <= 0 goto label7;

        return $r2;

     label5:
        $r3 := @caughtexception;

        $l3 = $l0;

        goto label2;

     label6:
        $r4 := @caughtexception;

        $l3 = $l0;

        goto label2;

     label7:
        return $r1;

     label8:
        $r5 := @caughtexception;

        goto label4;

     label9:
        $r6 := @caughtexception;

        goto label4;

        catch java.lang.IllegalArgumentException from label1 to label2 with label5;
        catch java.lang.ArithmeticException from label1 to label2 with label6;
        catch java.lang.IllegalArgumentException from label2 to label3 with label9;
        catch java.lang.ArithmeticException from label2 to label3 with label8;
    }
    static org.joda.time.tz.DateTimeZoneBuilder$DSTZone readFrom(java.io.DataInput, java.lang.String) throws java.io.IOException
    {
        java.io.DataInput $r0;
        java.lang.String $r1;
        org.joda.time.tz.DateTimeZoneBuilder$DSTZone $r2;
        int $i0;
        long $l1;
        org.joda.time.tz.DateTimeZoneBuilder$Recurrence $r3, $r4;

        $r0 := @parameter0: java.io.DataInput;

        $r1 := @parameter1: java.lang.String;

        $r2 = new org.joda.time.tz.DateTimeZoneBuilder$DSTZone;

        $l1 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>($r0);

        $i0 = (int) $l1;

        $r3 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence readFrom(java.io.DataInput)>($r0);

        $r4 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence readFrom(java.io.DataInput)>($r0);

        specialinvoke $r2.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: void <init>(java.lang.String,int,org.joda.time.tz.DateTimeZoneBuilder$Recurrence,org.joda.time.tz.DateTimeZoneBuilder$Recurrence)>($r1, $i0, $r3, $r4);

        return $r2;
    }
    public boolean equals(java.lang.Object)
    {
        org.joda.time.tz.DateTimeZoneBuilder$DSTZone r0, $r2;
        java.lang.Object $r1;
        boolean $z0;
        java.lang.String $r3, $r4;
        int $i0, $i1;
        org.joda.time.tz.DateTimeZoneBuilder$Recurrence $r5, $r6;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$DSTZone;

        $r1 := @parameter0: java.lang.Object;

        if r0 != $r1 goto label1;

        return 1;

     label1:
        $z0 = $r1 instanceof org.joda.time.tz.DateTimeZoneBuilder$DSTZone;

        if $z0 == 0 goto label2;

        $r2 = (org.joda.time.tz.DateTimeZoneBuilder$DSTZone) $r1;

        $r3 = virtualinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: java.lang.String getID()>();

        $r4 = virtualinvoke $r2.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: java.lang.String getID()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        $i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int iStandardOffset>;

        $i1 = $r2.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int iStandardOffset>;

        if $i0 != $i1 goto label2;

        $r5 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iStartRecurrence>;

        $r6 = $r2.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iStartRecurrence>;

        $z0 = virtualinvoke $r5.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label2;

        $r5 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iEndRecurrence>;

        $r6 = $r2.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iEndRecurrence>;

        $z0 = virtualinvoke $r5.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: boolean equals(java.lang.Object)>($r6);

        if $z0 != 0 goto label3;

     label2:
        return 0;

     label3:
        return 1;
    }
    public java.lang.String getNameKey(long)
    {
        org.joda.time.tz.DateTimeZoneBuilder$DSTZone r0;
        long $l0;
        org.joda.time.tz.DateTimeZoneBuilder$Recurrence $r1;
        java.lang.String $r2;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$DSTZone;

        $l0 := @parameter0: long;

        $r1 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence findMatchingRecurrence(long)>($l0);

        $r2 = virtualinvoke $r1.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String getNameKey()>();

        return $r2;
    }
    public int getOffset(long)
    {
        org.joda.time.tz.DateTimeZoneBuilder$DSTZone r0;
        long $l0;
        int $i1, $i2;
        org.joda.time.tz.DateTimeZoneBuilder$Recurrence $r1;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$DSTZone;

        $l0 := @parameter0: long;

        $i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int iStandardOffset>;

        $r1 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence findMatchingRecurrence(long)>($l0);

        $i2 = virtualinvoke $r1.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>();

        $i1 = $i1 + $i2;

        return $i1;
    }
    public int getStandardOffset(long)
    {
        org.joda.time.tz.DateTimeZoneBuilder$DSTZone r0;
        long $l0;
        int i1;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$DSTZone;

        $l0 := @parameter0: long;

        i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int iStandardOffset>;

        return i1;
    }
    public boolean isFixed()
    {
        org.joda.time.tz.DateTimeZoneBuilder$DSTZone r0;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$DSTZone;

        return 0;
    }
    public long nextTransition(long)
    {
        org.joda.time.tz.DateTimeZoneBuilder$DSTZone r0;
        org.joda.time.tz.DateTimeZoneBuilder$Recurrence $r1, $r2;
        long $l0, $l3, $l4;
        int $i1, $i2;
        byte $b5;
        java.lang.IllegalArgumentException $r3, $r5;
        java.lang.ArithmeticException $r4, $r6;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$DSTZone;

        $l0 := @parameter0: long;

        $i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int iStandardOffset>;

        $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iStartRecurrence>;

        $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iEndRecurrence>;

     label01:
        $i2 = virtualinvoke $r2.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>();

        $l3 = virtualinvoke $r1.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: long next(long,int,int)>($l0, $i1, $i2);

     label02:
        $l4 = $l3;

        $b5 = $l0 cmp 0L;

        if $b5 <= 0 goto label03;

        $b5 = $l3 cmp 0L;

        if $b5 >= 0 goto label03;

        $l4 = $l0;

     label03:
        $l3 = $l4;

     label04:
        $i2 = virtualinvoke $r1.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>();

        $l4 = virtualinvoke $r2.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: long next(long,int,int)>($l0, $i1, $i2);

     label05:
        $b5 = $l0 cmp 0L;

        if $b5 <= 0 goto label12;

        $b5 = $l4 cmp 0L;

        if $b5 >= 0 goto label12;

     label06:
        $b5 = $l3 cmp $l0;

        if $b5 <= 0 goto label11;

        return $l0;

     label07:
        $r3 := @caughtexception;

        $l3 = $l0;

        goto label04;

     label08:
        $r4 := @caughtexception;

        $l3 = $l0;

        goto label04;

     label09:
        $r5 := @caughtexception;

        goto label06;

     label10:
        $r6 := @caughtexception;

        goto label06;

     label11:
        return $l3;

     label12:
        $l0 = $l4;

        goto label06;

        catch java.lang.IllegalArgumentException from label01 to label02 with label07;
        catch java.lang.ArithmeticException from label01 to label02 with label08;
        catch java.lang.IllegalArgumentException from label04 to label05 with label09;
        catch java.lang.ArithmeticException from label04 to label05 with label10;
    }
    public long previousTransition(long)
    {
        org.joda.time.tz.DateTimeZoneBuilder$DSTZone r0;
        long $l0, $l3, $l4;
        org.joda.time.tz.DateTimeZoneBuilder$Recurrence $r1, $r2;
        int $i1, $i2;
        byte $b5;
        java.lang.IllegalArgumentException $r3, $r5;
        java.lang.ArithmeticException $r4, $r6;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$DSTZone;

        $l0 := @parameter0: long;

        $l0 = $l0 + 1L;

        $i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int iStandardOffset>;

        $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iStartRecurrence>;

        $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iEndRecurrence>;

     label01:
        $i2 = virtualinvoke $r2.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>();

        $l3 = virtualinvoke $r1.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: long previous(long,int,int)>($l0, $i1, $i2);

     label02:
        $l4 = $l3;

        $b5 = $l0 cmp 0L;

        if $b5 >= 0 goto label03;

        $b5 = $l3 cmp 0L;

        if $b5 <= 0 goto label03;

        $l4 = $l0;

     label03:
        $l3 = $l4;

     label04:
        $i2 = virtualinvoke $r1.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>();

        $l4 = virtualinvoke $r2.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: long previous(long,int,int)>($l0, $i1, $i2);

     label05:
        $b5 = $l0 cmp 0L;

        if $b5 >= 0 goto label12;

        $b5 = $l4 cmp 0L;

        if $b5 <= 0 goto label12;

     label06:
        $b5 = $l3 cmp $l0;

        if $b5 <= 0 goto label07;

        $l0 = $l3;

     label07:
        $l0 = $l0 - 1L;

        return $l0;

     label08:
        $r3 := @caughtexception;

        $l3 = $l0;

        goto label04;

     label09:
        $r4 := @caughtexception;

        $l3 = $l0;

        goto label04;

     label10:
        $r5 := @caughtexception;

        goto label06;

     label11:
        $r6 := @caughtexception;

        goto label06;

     label12:
        $l0 = $l4;

        goto label06;

        catch java.lang.IllegalArgumentException from label01 to label02 with label08;
        catch java.lang.ArithmeticException from label01 to label02 with label09;
        catch java.lang.IllegalArgumentException from label04 to label05 with label10;
        catch java.lang.ArithmeticException from label04 to label05 with label11;
    }
    public void writeTo(java.io.DataOutput) throws java.io.IOException
    {
        org.joda.time.tz.DateTimeZoneBuilder$DSTZone r0;
        java.io.DataOutput $r1;
        int $i0;
        long $l1;
        org.joda.time.tz.DateTimeZoneBuilder$Recurrence $r2;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$DSTZone;

        $r1 := @parameter0: java.io.DataOutput;

        $i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int iStandardOffset>;

        $l1 = (long) $i0;

        staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>($r1, $l1);

        $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iStartRecurrence>;

        virtualinvoke $r2.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: void writeTo(java.io.DataOutput)>($r1);

        $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iEndRecurrence>;

        virtualinvoke $r2.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: void writeTo(java.io.DataOutput)>($r1);

        return;
    }
