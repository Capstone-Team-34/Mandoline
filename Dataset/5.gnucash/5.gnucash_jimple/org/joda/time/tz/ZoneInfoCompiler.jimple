org.joda.time.tz.ZoneInfoCompiler extends java.lang.Object
static org.joda.time.Chronology cLenientISO
static org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear cStartOfYear
static java.lang.ThreadLocal cVerbose
private java.util.List iLinks
private java.util.Map iRuleSets
private java.util.List iZones
    static void <clinit>()
    {
        org.joda.time.tz.ZoneInfoCompiler$1 $r0;

        $r0 = new org.joda.time.tz.ZoneInfoCompiler$1;

        specialinvoke $r0.<org.joda.time.tz.ZoneInfoCompiler$1: void <init>()>();

        <org.joda.time.tz.ZoneInfoCompiler: java.lang.ThreadLocal cVerbose> = $r0;

        return;
    }
    public void <init>()
    {
        org.joda.time.tz.ZoneInfoCompiler r0;
        java.util.HashMap $r1;
        java.util.ArrayList $r2;

        r0 := @this: org.joda.time.tz.ZoneInfoCompiler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.joda.time.tz.ZoneInfoCompiler: java.util.Map iRuleSets> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iZones> = $r2;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iLinks> = $r2;

        return;
    }
    static org.joda.time.Chronology getLenientISOChronology()
    {
        org.joda.time.Chronology $r0;
        org.joda.time.chrono.ISOChronology $r1;
        org.joda.time.chrono.LenientChronology $r2;

        $r0 = <org.joda.time.tz.ZoneInfoCompiler: org.joda.time.Chronology cLenientISO>;

        if $r0 != null goto label1;

        $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>();

        $r2 = staticinvoke <org.joda.time.chrono.LenientChronology: org.joda.time.chrono.LenientChronology getInstance(org.joda.time.Chronology)>($r1);

        <org.joda.time.tz.ZoneInfoCompiler: org.joda.time.Chronology cLenientISO> = $r2;

     label1:
        $r0 = <org.joda.time.tz.ZoneInfoCompiler: org.joda.time.Chronology cLenientISO>;

        return $r0;
    }
    static org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear getStartOfYear()
    {
        org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear $r0;

        $r0 = <org.joda.time.tz.ZoneInfoCompiler: org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear cStartOfYear>;

        if $r0 != null goto label1;

        $r0 = new org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear;

        specialinvoke $r0.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>()>();

        <org.joda.time.tz.ZoneInfoCompiler: org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear cStartOfYear> = $r0;

     label1:
        $r0 = <org.joda.time.tz.ZoneInfoCompiler: org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear cStartOfYear>;

        return $r0;
    }
    public static void main(java.lang.String[]) throws java.lang.Exception
    {
        java.lang.String[] $r0;
        java.io.File $r1, $r2, $r7;
        int $i0, $i1, $i2;
        boolean $z0, $z1;
        java.lang.String $r3, $r4;
        java.lang.IndexOutOfBoundsException $r5;
        java.io.File[] $r6;
        java.lang.ThreadLocal $r8;
        java.lang.Boolean $r9;
        org.joda.time.tz.ZoneInfoCompiler $r10;

        $r0 := @parameter0: java.lang.String[];

        $r1 = null;

        $i0 = 0;

        $i1 = lengthof $r0;

        if $i1 != 0 goto label01;

        staticinvoke <org.joda.time.tz.ZoneInfoCompiler: void printUsage()>();

        return;

     label01:
        $i1 = 0;

        $z0 = 0;

        $r2 = null;

     label02:
        $i2 = lengthof $r0;

        if $i1 >= $i2 goto label21;

        $r3 = "-src";

     label03:
        $r4 = $r0[$i1];

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

     label04:
        if $z1 == 0 goto label07;

        $r2 = new java.io.File;

        $i1 = $i1 + 1;

     label05:
        $r3 = $r0[$i1];

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>($r3);

     label06:
        $i1 = $i1 + 1;

        goto label02;

     label07:
        $r3 = "-dst";

     label08:
        $r4 = $r0[$i1];

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

     label09:
        if $z1 == 0 goto label13;

        $r1 = new java.io.File;

        $i1 = $i1 + 1;

     label10:
        $r3 = $r0[$i1];

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>($r3);

     label11:
        goto label06;

     label12:
        $r5 := @caughtexception;

        staticinvoke <org.joda.time.tz.ZoneInfoCompiler: void printUsage()>();

        return;

     label13:
        $r3 = "-verbose";

     label14:
        $r4 = $r0[$i1];

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

     label15:
        if $z1 == 0 goto label16;

        $z0 = 1;

        goto label06;

     label16:
        $r3 = "-?";

     label17:
        $r4 = $r0[$i1];

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

     label18:
        if $z1 == 0 goto label21;

     label19:
        staticinvoke <org.joda.time.tz.ZoneInfoCompiler: void printUsage()>();

     label20:
        return;

     label21:
        $i2 = lengthof $r0;

        if $i1 < $i2 goto label22;

        staticinvoke <org.joda.time.tz.ZoneInfoCompiler: void printUsage()>();

        return;

     label22:
        $i2 = lengthof $r0;

        $i2 = $i2 - $i1;

        $r6 = newarray (java.io.File)[$i2];

     label23:
        $i2 = lengthof $r0;

        if $i1 >= $i2 goto label26;

        if $r2 != null goto label25;

        $r7 = new java.io.File;

        $r3 = $r0[$i1];

        specialinvoke $r7.<java.io.File: void <init>(java.lang.String)>($r3);

     label24:
        $r6[$i0] = $r7;

        $i1 = $i1 + 1;

        $i0 = $i0 + 1;

        goto label23;

     label25:
        $r7 = new java.io.File;

        $r3 = $r0[$i1];

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, $r3);

        goto label24;

     label26:
        $r8 = <org.joda.time.tz.ZoneInfoCompiler: java.lang.ThreadLocal cVerbose>;

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        virtualinvoke $r8.<java.lang.ThreadLocal: void set(java.lang.Object)>($r9);

        $r10 = new org.joda.time.tz.ZoneInfoCompiler;

        specialinvoke $r10.<org.joda.time.tz.ZoneInfoCompiler: void <init>()>();

        virtualinvoke $r10.<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>($r1, $r6);

        return;

        catch java.lang.IndexOutOfBoundsException from label03 to label04 with label12;
        catch java.lang.IndexOutOfBoundsException from label05 to label06 with label12;
        catch java.lang.IndexOutOfBoundsException from label08 to label09 with label12;
        catch java.lang.IndexOutOfBoundsException from label10 to label11 with label12;
        catch java.lang.IndexOutOfBoundsException from label14 to label15 with label12;
        catch java.lang.IndexOutOfBoundsException from label17 to label18 with label12;
        catch java.lang.IndexOutOfBoundsException from label19 to label20 with label12;
    }
    static int parseDayOfWeek(java.lang.String)
    {
        java.lang.String $r0;
        java.util.Locale $r1;
        org.joda.time.chrono.ISOChronology $r2;
        org.joda.time.DateTimeField $r3;
        long $l0;
        int $i1;

        $r0 := @parameter0: java.lang.String;

        $r2 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>();

        $r3 = virtualinvoke $r2.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeField dayOfWeek()>();

        $r1 = <java.util.Locale: java.util.Locale ENGLISH>;

        $l0 = virtualinvoke $r3.<org.joda.time.DateTimeField: long set(long,java.lang.String,java.util.Locale)>(0L, $r0, $r1);

        $i1 = virtualinvoke $r3.<org.joda.time.DateTimeField: int get(long)>($l0);

        return $i1;
    }
    static int parseMonth(java.lang.String)
    {
        java.lang.String $r0;
        java.util.Locale $r1;
        org.joda.time.chrono.ISOChronology $r2;
        org.joda.time.DateTimeField $r3;
        long $l0;
        int $i1;

        $r0 := @parameter0: java.lang.String;

        $r2 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>();

        $r3 = virtualinvoke $r2.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeField monthOfYear()>();

        $r1 = <java.util.Locale: java.util.Locale ENGLISH>;

        $l0 = virtualinvoke $r3.<org.joda.time.DateTimeField: long set(long,java.lang.String,java.util.Locale)>(0L, $r0, $r1);

        $i1 = virtualinvoke $r3.<org.joda.time.DateTimeField: int get(long)>($l0);

        return $i1;
    }
    static java.lang.String parseOptional(java.lang.String)
    {
        boolean $z0;
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("-");

        if $z0 == 0 goto label1;

        return null;

     label1:
        return $r0;
    }
    static int parseTime(java.lang.String)
    {
        java.lang.String $r0;
        org.joda.time.MutableDateTime $r1;
        org.joda.time.format.DateTimeFormatter $r2;
        org.joda.time.Chronology $r3;
        byte $b0;
        boolean $z0;
        int $i1, $i2;
        java.lang.IllegalArgumentException $r4;
        long $l3;

        $r0 := @parameter0: java.lang.String;

        $r2 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>();

        $r1 = new org.joda.time.MutableDateTime;

        $r3 = staticinvoke <org.joda.time.tz.ZoneInfoCompiler: org.joda.time.Chronology getLenientISOChronology()>();

        specialinvoke $r1.<org.joda.time.MutableDateTime: void <init>(long,org.joda.time.Chronology)>(0L, $r3);

        $b0 = 0;

        $z0 = virtualinvoke $r0.<java.lang.String: boolean startsWith(java.lang.String)>("-");

        if $z0 == 0 goto label1;

        $b0 = 1;

     label1:
        $i1 = virtualinvoke $r2.<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>($r1, $r0, $b0);

        $i2 = $b0 ^ -1;

        if $i1 != $i2 goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

        throw $r4;

     label2:
        $l3 = virtualinvoke $r1.<org.joda.time.MutableDateTime: long getMillis()>();

        $i1 = (int) $l3;

        if $b0 != 1 goto label3;

        $i1 = neg $i1;

     label3:
        return $i1;
    }
    static int parseYear(java.lang.String, int)
    {
        java.lang.String $r0;
        int $i0;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("minimum");

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("min");

        if $z0 == 0 goto label2;

     label1:
        return -2147483648;

     label2:
        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("maximum");

        if $z0 != 0 goto label3;

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("max");

        if $z0 == 0 goto label4;

     label3:
        return 2147483647;

     label4:
        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("only");

        if $z0 != 0 goto label5;

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r0);

     label5:
        return $i0;
    }
    static char parseZoneChar(char)
    {
        char $c0;

        $c0 := @parameter0: char;

        lookupswitch($c0)
        {
            case 71: goto label3;
            case 83: goto label2;
            case 85: goto label3;
            case 90: goto label3;
            case 103: goto label3;
            case 115: goto label2;
            case 117: goto label3;
            case 122: goto label3;
            default: goto label1;
        };

     label1:
        return 119;

     label2:
        return 115;

     label3:
        return 117;
    }
    private static void printUsage()
    {
        java.io.PrintStream $r0;

        $r0 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("Usage: java org.joda.time.tz.ZoneInfoCompiler <options> <source files>");

        $r0 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("where possible options include:");

        $r0 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("  -src <directory>    Specify where to read source files");

        $r0 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("  -dst <directory>    Specify where to write generated files");

        $r0 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("  -verbose            Output verbosely (default false)");

        return;
    }
    static boolean test(java.lang.String, org.joda.time.DateTimeZone)
    {
        java.lang.String $r0, $r3;
        org.joda.time.DateTimeZone $r1;
        java.util.ArrayList $r2;
        boolean $z0;
        org.joda.time.chrono.ISOChronology $r4;
        org.joda.time.DateTimeField $r5;
        long $l0, $l1, $l4, $l6;
        int $i2, $i3;
        byte $b5;
        java.io.PrintStream $r6;
        java.lang.StringBuilder $r7;
        org.joda.time.DateTime $r8;
        java.lang.Long $r9;
        java.lang.Object $r10;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: org.joda.time.DateTimeZone;

        $r3 = virtualinvoke $r1.<org.joda.time.DateTimeZone: java.lang.String getID()>();

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label01;

        return 1;

     label01:
        $r4 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>();

        $r5 = virtualinvoke $r4.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeField year()>();

        $l0 = virtualinvoke $r5.<org.joda.time.DateTimeField: long set(long,int)>(0L, 1850);

        $r4 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>();

        $r5 = virtualinvoke $r4.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeField year()>();

        $l1 = virtualinvoke $r5.<org.joda.time.DateTimeField: long set(long,int)>(0L, 2050);

        $i2 = virtualinvoke $r1.<org.joda.time.DateTimeZone: int getOffset(long)>($l0);

        $r3 = virtualinvoke $r1.<org.joda.time.DateTimeZone: java.lang.String getNameKey(long)>($l0);

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $i3 = $i2;

     label02:
        $l4 = virtualinvoke $r1.<org.joda.time.DateTimeZone: long nextTransition(long)>($l0);

        $b5 = $l4 cmp $l0;

        if $b5 == 0 goto label03;

        $b5 = $l4 cmp $l1;

        if $b5 <= 0 goto label06;

     label03:
        $r4 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>();

        $r5 = virtualinvoke $r4.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeField year()>();

        $l4 = virtualinvoke $r5.<org.joda.time.DateTimeField: long set(long,int)>(0L, 2050);

        $r4 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>();

        $r5 = virtualinvoke $r4.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeField year()>();

        $l1 = virtualinvoke $r5.<org.joda.time.DateTimeField: long set(long,int)>(0L, 1850);

        $i2 = interfaceinvoke $r2.<java.util.List: int size()>();

     label04:
        $i2 = $i2 + -1;

        if $i2 < 0 goto label05;

        $l0 = virtualinvoke $r1.<org.joda.time.DateTimeZone: long previousTransition(long)>($l4);

        $b5 = $l0 cmp $l4;

        if $b5 == 0 goto label05;

        $b5 = $l0 cmp $l1;

        if $b5 >= 0 goto label10;

     label05:
        return 1;

     label06:
        $i2 = virtualinvoke $r1.<org.joda.time.DateTimeZone: int getOffset(long)>($l4);

        $r0 = virtualinvoke $r1.<org.joda.time.DateTimeZone: java.lang.String getNameKey(long)>($l4);

        if $i3 != $i2 goto label07;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z0 == 0 goto label07;

        $r6 = <java.lang.System: java.io.PrintStream out>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("*d* Error in ");

        $r0 = virtualinvoke $r1.<org.joda.time.DateTimeZone: java.lang.String getID()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r8 = new org.joda.time.DateTime;

        $r4 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>();

        specialinvoke $r8.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>($l4, $r4);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r0 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r0);

        return 0;

     label07:
        if $r0 == null goto label08;

        $i3 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i3 >= 3 goto label09;

        $r3 = "??";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z0 != 0 goto label09;

     label08:
        $r6 = <java.lang.System: java.io.PrintStream out>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("*s* Error in ");

        $r3 = virtualinvoke $r1.<org.joda.time.DateTimeZone: java.lang.String getID()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r8 = new org.joda.time.DateTime;

        $r4 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>();

        specialinvoke $r8.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>($l4, $r4);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", nameKey=");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r0);

        return 0;

     label09:
        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l4);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r9);

        $r3 = $r0;

        $i3 = $i2;

        $l0 = $l4;

        goto label02;

     label10:
        $r10 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i2);

        $r9 = (java.lang.Long) $r10;

        $l4 = virtualinvoke $r9.<java.lang.Long: long longValue()>();

        $l6 = $l4 - 1L;

        $b5 = $l6 cmp $l0;

        if $b5 == 0 goto label11;

        $r6 = <java.lang.System: java.io.PrintStream out>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("*r* Error in ");

        $r0 = virtualinvoke $r1.<org.joda.time.DateTimeZone: java.lang.String getID()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r8 = new org.joda.time.DateTime;

        $r4 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>();

        specialinvoke $r8.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>($l0, $r4);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" != ");

        $r8 = new org.joda.time.DateTime;

        $l1 = $l4 - 1L;

        $r4 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>();

        specialinvoke $r8.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>($l1, $r4);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r0 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r0);

        return 0;

     label11:
        $l4 = $l0;

        goto label04;
    }
    public static boolean verbose()
    {
        java.lang.ThreadLocal $r0;
        java.lang.Object $r1;
        java.lang.Boolean $r2;
        boolean $z0;

        $r0 = <org.joda.time.tz.ZoneInfoCompiler: java.lang.ThreadLocal cVerbose>;

        $r1 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>();

        $r2 = (java.lang.Boolean) $r1;

        $z0 = virtualinvoke $r2.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }
    static void writeZoneInfoMap(java.io.DataOutputStream, java.util.Map) throws java.io.IOException
    {
        java.io.DataOutputStream $r0;
        java.util.Map $r1;
        java.util.HashMap $r2;
        java.util.TreeMap $r3;
        int $i0;
        java.util.Set $r4;
        java.util.Iterator $r5;
        short $s1;
        boolean $z0;
        java.lang.Object $r6;
        java.util.Map$Entry $r7;
        java.lang.String $r8;
        java.lang.Short $r9;
        java.lang.InternalError $r10;
        org.joda.time.DateTimeZone $r11;
        java.util.Collection $r12;

        $r0 := @parameter0: java.io.DataOutputStream;

        $r1 := @parameter1: java.util.Map;

        $r2 = new java.util.HashMap;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        specialinvoke $r2.<java.util.HashMap: void <init>(int)>($i0);

        $r3 = new java.util.TreeMap;

        specialinvoke $r3.<java.util.TreeMap: void <init>()>();

        $r4 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

        $s1 = 0;

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (java.util.Map$Entry) $r6;

        $r6 = interfaceinvoke $r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = (java.lang.String) $r6;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r8);

        if $z0 != 0 goto label2;

        $r9 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>($s1);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r9);

        virtualinvoke $r3.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r8);

        $i0 = $s1 + 1;

        $s1 = (short) $i0;

        if $s1 != 0 goto label2;

        $r10 = new java.lang.InternalError;

        specialinvoke $r10.<java.lang.InternalError: void <init>(java.lang.String)>("Too many time zone ids");

        throw $r10;

     label2:
        $r6 = interfaceinvoke $r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r11 = (org.joda.time.DateTimeZone) $r6;

        $r8 = virtualinvoke $r11.<org.joda.time.DateTimeZone: java.lang.String getID()>();

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r8);

        if $z0 != 0 goto label3;

        $r9 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>($s1);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r9);

        virtualinvoke $r3.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r8);

        $i0 = $s1 + 1;

        $s1 = (short) $i0;

        if $s1 != 0 goto label3;

        $r10 = new java.lang.InternalError;

        specialinvoke $r10.<java.lang.InternalError: void <init>(java.lang.String)>("Too many time zone ids");

        throw $r10;

     label3:
        goto label1;

     label4:
        $i0 = virtualinvoke $r3.<java.util.TreeMap: int size()>();

        virtualinvoke $r0.<java.io.DataOutputStream: void writeShort(int)>($i0);

        $r12 = virtualinvoke $r3.<java.util.TreeMap: java.util.Collection values()>();

        $r5 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (java.lang.String) $r6;

        virtualinvoke $r0.<java.io.DataOutputStream: void writeUTF(java.lang.String)>($r8);

        goto label5;

     label6:
        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        virtualinvoke $r0.<java.io.DataOutputStream: void writeShort(int)>($i0);

        $r4 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label7:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (java.util.Map$Entry) $r6;

        $r6 = interfaceinvoke $r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = (java.lang.String) $r6;

        $r6 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8);

        $r9 = (java.lang.Short) $r6;

        $s1 = virtualinvoke $r9.<java.lang.Short: short shortValue()>();

        virtualinvoke $r0.<java.io.DataOutputStream: void writeShort(int)>($s1);

        $r6 = interfaceinvoke $r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r11 = (org.joda.time.DateTimeZone) $r6;

        $r8 = virtualinvoke $r11.<org.joda.time.DateTimeZone: java.lang.String getID()>();

        $r6 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8);

        $r9 = (java.lang.Short) $r6;

        $s1 = virtualinvoke $r9.<java.lang.Short: short shortValue()>();

        virtualinvoke $r0.<java.io.DataOutputStream: void writeShort(int)>($s1);

        goto label7;

     label8:
        return;
    }
    public java.util.Map compile(java.io.File, java.io.File[]) throws java.io.IOException
    {
        org.joda.time.tz.ZoneInfoCompiler r0;
        java.io.File $r1, $r6, $r17;
        java.io.File[] $r2;
        java.util.TreeMap $r3, $r24;
        int $i0, $i1, $i2;
        java.io.BufferedReader $r4;
        java.io.FileReader $r5;
        boolean $z0;
        java.io.IOException $r7;
        java.lang.StringBuilder $r8;
        java.lang.String $r9, $r22;
        java.io.PrintStream $r10;
        java.util.List $r11;
        java.lang.Object $r12;
        org.joda.time.tz.ZoneInfoCompiler$Zone $r13;
        org.joda.time.tz.DateTimeZoneBuilder $r14;
        java.util.Map $r15;
        org.joda.time.DateTimeZone $r16, $r20;
        java.io.FileOutputStream $r18;
        java.io.FileInputStream $r19;
        java.lang.Throwable $r21, $r26;
        java.io.DataOutputStream $r23;
        java.util.Comparator $r25;

        r0 := @this: org.joda.time.tz.ZoneInfoCompiler;

        $r1 := @parameter0: java.io.File;

        $r2 := @parameter1: java.io.File[];

        if $r2 == null goto label02;

        $i0 = 0;

     label01:
        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label02;

        $r4 = new java.io.BufferedReader;

        $r5 = new java.io.FileReader;

        $r6 = $r2[$i0];

        specialinvoke $r5.<java.io.FileReader: void <init>(java.io.File)>($r6);

        specialinvoke $r4.<java.io.BufferedReader: void <init>(java.io.Reader)>($r5);

        virtualinvoke r0.<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader)>($r4);

        virtualinvoke $r4.<java.io.BufferedReader: void close()>();

        $i0 = $i0 + 1;

        goto label01;

     label02:
        if $r1 == null goto label04;

        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label03;

        $z0 = virtualinvoke $r1.<java.io.File: boolean mkdirs()>();

        if $z0 != 0 goto label03;

        $r7 = new java.io.IOException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Destination directory doesn\'t exist and cannot be created: ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>($r9);

        throw $r7;

     label03:
        $z0 = virtualinvoke $r1.<java.io.File: boolean isDirectory()>();

        if $z0 != 0 goto label04;

        $r7 = new java.io.IOException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Destination is not a directory: ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>($r9);

        throw $r7;

     label04:
        $r3 = new java.util.TreeMap;

        specialinvoke $r3.<java.util.TreeMap: void <init>()>();

        $r10 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("Writing zoneinfo files");

        $i0 = 0;

     label05:
        $r11 = r0.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iZones>;

        $i1 = interfaceinvoke $r11.<java.util.List: int size()>();

        if $i0 >= $i1 goto label12;

        $r11 = r0.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iZones>;

        $r12 = interfaceinvoke $r11.<java.util.List: java.lang.Object get(int)>($i0);

        $r13 = (org.joda.time.tz.ZoneInfoCompiler$Zone) $r12;

        $r14 = new org.joda.time.tz.DateTimeZoneBuilder;

        specialinvoke $r14.<org.joda.time.tz.DateTimeZoneBuilder: void <init>()>();

        $r15 = r0.<org.joda.time.tz.ZoneInfoCompiler: java.util.Map iRuleSets>;

        virtualinvoke $r13.<org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>($r14, $r15);

        $r9 = $r13.<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String iName>;

        $r16 = virtualinvoke $r14.<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>($r9, 1);

        $r9 = virtualinvoke $r16.<org.joda.time.DateTimeZone: java.lang.String getID()>();

        $z0 = staticinvoke <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>($r9, $r16);

        if $z0 == 0 goto label10;

        $r9 = virtualinvoke $r16.<org.joda.time.DateTimeZone: java.lang.String getID()>();

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r16);

        if $r1 == null goto label10;

        $z0 = staticinvoke <org.joda.time.tz.ZoneInfoCompiler: boolean verbose()>();

        if $z0 == 0 goto label06;

        $r10 = <java.lang.System: java.io.PrintStream out>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Writing ");

        $r9 = virtualinvoke $r16.<org.joda.time.DateTimeZone: java.lang.String getID()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r9);

     label06:
        $r6 = new java.io.File;

        $r9 = virtualinvoke $r16.<org.joda.time.DateTimeZone: java.lang.String getID()>();

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r1, $r9);

        $r17 = virtualinvoke $r6.<java.io.File: java.io.File getParentFile()>();

        $z0 = virtualinvoke $r17.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label07;

        $r17 = virtualinvoke $r6.<java.io.File: java.io.File getParentFile()>();

        virtualinvoke $r17.<java.io.File: boolean mkdirs()>();

     label07:
        $r18 = new java.io.FileOutputStream;

        specialinvoke $r18.<java.io.FileOutputStream: void <init>(java.io.File)>($r6);

     label08:
        $r9 = $r13.<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String iName>;

        virtualinvoke $r14.<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.OutputStream)>($r9, $r18);

     label09:
        virtualinvoke $r18.<java.io.OutputStream: void close()>();

        $r19 = new java.io.FileInputStream;

        specialinvoke $r19.<java.io.FileInputStream: void <init>(java.io.File)>($r6);

        $r9 = virtualinvoke $r16.<org.joda.time.DateTimeZone: java.lang.String getID()>();

        $r20 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.InputStream,java.lang.String)>($r19, $r9);

        virtualinvoke $r19.<java.io.InputStream: void close()>();

        $z0 = virtualinvoke $r16.<org.joda.time.DateTimeZone: boolean equals(java.lang.Object)>($r20);

        if $z0 != 0 goto label10;

        $r10 = <java.lang.System: java.io.PrintStream out>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("*e* Error in ");

        $r9 = virtualinvoke $r16.<org.joda.time.DateTimeZone: java.lang.String getID()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": Didn\'t read properly from file");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r9);

     label10:
        $i0 = $i0 + 1;

        goto label05;

     label11:
        $r21 := @caughtexception;

        virtualinvoke $r18.<java.io.OutputStream: void close()>();

        throw $r21;

     label12:
        $i0 = 0;

     label13:
        if $i0 >= 2 goto label18;

        $i1 = 0;

     label14:
        $r11 = r0.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iLinks>;

        $i2 = interfaceinvoke $r11.<java.util.List: int size()>();

        if $i1 >= $i2 goto label17;

        $r11 = r0.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iLinks>;

        $r12 = interfaceinvoke $r11.<java.util.List: java.lang.Object get(int)>($i1);

        $r9 = (java.lang.String) $r12;

        $r11 = r0.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iLinks>;

        $i2 = $i1 + 1;

        $r12 = interfaceinvoke $r11.<java.util.List: java.lang.Object get(int)>($i2);

        $r22 = (java.lang.String) $r12;

        $r12 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r9);

        $r16 = (org.joda.time.DateTimeZone) $r12;

        if $r16 != null goto label16;

        if $i0 <= 0 goto label15;

        $r10 = <java.lang.System: java.io.PrintStream out>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot find time zone \'");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' to link alias \'");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' to");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r9);

     label15:
        $i1 = $i1 + 2;

        goto label14;

     label16:
        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r22, $r16);

        goto label15;

     label17:
        $i0 = $i0 + 1;

        goto label13;

     label18:
        if $r1 == null goto label23;

        $r10 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("Writing ZoneInfoMap");

        $r6 = new java.io.File;

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r1, "ZoneInfoMap");

        $r1 = virtualinvoke $r6.<java.io.File: java.io.File getParentFile()>();

        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label19;

        $r1 = virtualinvoke $r6.<java.io.File: java.io.File getParentFile()>();

        virtualinvoke $r1.<java.io.File: boolean mkdirs()>();

     label19:
        $r18 = new java.io.FileOutputStream;

        specialinvoke $r18.<java.io.FileOutputStream: void <init>(java.io.File)>($r6);

        $r23 = new java.io.DataOutputStream;

        specialinvoke $r23.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r18);

     label20:
        $r24 = new java.util.TreeMap;

        $r25 = <java.lang.String: java.util.Comparator CASE_INSENSITIVE_ORDER>;

        specialinvoke $r24.<java.util.TreeMap: void <init>(java.util.Comparator)>($r25);

        interfaceinvoke $r24.<java.util.Map: void putAll(java.util.Map)>($r3);

        staticinvoke <org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>($r23, $r24);

     label21:
        virtualinvoke $r23.<java.io.DataOutputStream: void close()>();

        return $r3;

     label22:
        $r26 := @caughtexception;

        virtualinvoke $r23.<java.io.DataOutputStream: void close()>();

        throw $r26;

     label23:
        return $r3;

        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label20 to label21 with label22;
    }
    public void parseDataFile(java.io.BufferedReader) throws java.io.IOException
    {
        org.joda.time.tz.ZoneInfoCompiler r0;
        java.io.BufferedReader $r1;
        org.joda.time.tz.ZoneInfoCompiler$Zone $r2;
        java.lang.String $r3, $r4, $r5;
        int $i0;
        char $c1;
        java.util.StringTokenizer $r6;
        boolean $z0;
        java.util.List $r7;
        org.joda.time.tz.ZoneInfoCompiler$Rule $r8;
        java.util.Map $r9;
        java.lang.Object $r10;
        org.joda.time.tz.ZoneInfoCompiler$RuleSet $r11;
        java.io.PrintStream $r12;
        java.lang.StringBuilder $r13;

        r0 := @this: org.joda.time.tz.ZoneInfoCompiler;

        $r1 := @parameter0: java.io.BufferedReader;

        $r2 = null;

     label01:
        $r3 = virtualinvoke $r1.<java.io.BufferedReader: java.lang.String readLine()>();

        $r4 = $r3;

        if $r3 == null goto label11;

        $r5 = virtualinvoke $r3.<java.lang.String: java.lang.String trim()>();

        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i0 == 0 goto label01;

        $c1 = virtualinvoke $r5.<java.lang.String: char charAt(int)>(0);

        if $c1 == 35 goto label01;

        $i0 = virtualinvoke $r3.<java.lang.String: int indexOf(int)>(35);

        if $i0 < 0 goto label02;

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

     label02:
        $r6 = new java.util.StringTokenizer;

        specialinvoke $r6.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r4, " \t");

        $c1 = virtualinvoke $r4.<java.lang.String: char charAt(int)>(0);

        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c1);

        if $z0 == 0 goto label03;

        $z0 = virtualinvoke $r6.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label03;

        if $r2 == null goto label01;

        virtualinvoke $r2.<org.joda.time.tz.ZoneInfoCompiler$Zone: void chain(java.util.StringTokenizer)>($r6);

        goto label01;

     label03:
        if $r2 == null goto label04;

        $r7 = r0.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iZones>;

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r2);

     label04:
        $z0 = virtualinvoke $r6.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label10;

        $r3 = virtualinvoke $r6.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("Rule");

        if $z0 == 0 goto label07;

        $r8 = new org.joda.time.tz.ZoneInfoCompiler$Rule;

        specialinvoke $r8.<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>($r6);

        $r9 = r0.<org.joda.time.tz.ZoneInfoCompiler: java.util.Map iRuleSets>;

        $r4 = $r8.<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String iName>;

        $r10 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        $r11 = (org.joda.time.tz.ZoneInfoCompiler$RuleSet) $r10;

        if $r11 != null goto label06;

        $r11 = new org.joda.time.tz.ZoneInfoCompiler$RuleSet;

        specialinvoke $r11.<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void <init>(org.joda.time.tz.ZoneInfoCompiler$Rule)>($r8);

        $r9 = r0.<org.joda.time.tz.ZoneInfoCompiler: java.util.Map iRuleSets>;

        $r4 = $r8.<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String iName>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r11);

     label05:
        $r2 = null;

        goto label01;

     label06:
        virtualinvoke $r11.<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void addRule(org.joda.time.tz.ZoneInfoCompiler$Rule)>($r8);

        goto label05;

     label07:
        $z0 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("Zone");

        if $z0 == 0 goto label08;

        $r2 = new org.joda.time.tz.ZoneInfoCompiler$Zone;

        specialinvoke $r2.<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.util.StringTokenizer)>($r6);

        goto label01;

     label08:
        $z0 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("Link");

        if $z0 == 0 goto label09;

        $r7 = r0.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iLinks>;

        $r4 = virtualinvoke $r6.<java.util.StringTokenizer: java.lang.String nextToken()>();

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r4);

        $r7 = r0.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iLinks>;

        $r4 = virtualinvoke $r6.<java.util.StringTokenizer: java.lang.String nextToken()>();

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r4);

        $r2 = null;

        goto label01;

     label09:
        $r12 = <java.lang.System: java.io.PrintStream out>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown line: ");

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>($r4);

     label10:
        $r2 = null;

        goto label01;

     label11:
        if $r2 == null goto label12;

        $r7 = r0.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iZones>;

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r2);

     label12:
        return;
    }
