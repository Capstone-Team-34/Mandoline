org.joda.time.base.BasePeriod extends org.joda.time.base.AbstractPeriod implements org.joda.time.ReadablePeriod java.io.Serializable
private static final org.joda.time.ReadablePeriod DUMMY_PERIOD
private static final long serialVersionUID
private final org.joda.time.PeriodType iType
private final int[] iValues
    static void <clinit>()
    {
        org.joda.time.base.BasePeriod$1 $r0;

        $r0 = new org.joda.time.base.BasePeriod$1;

        specialinvoke $r0.<org.joda.time.base.BasePeriod$1: void <init>()>();

        <org.joda.time.base.BasePeriod: org.joda.time.ReadablePeriod DUMMY_PERIOD> = $r0;

        return;
    }
    protected void <init>(int, int, int, int, int, int, int, int, org.joda.time.PeriodType)
    {
        org.joda.time.base.BasePeriod r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        org.joda.time.PeriodType $r1;
        int[] $r2;

        r0 := @this: org.joda.time.base.BasePeriod;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $i4 := @parameter4: int;

        $i5 := @parameter5: int;

        $i6 := @parameter6: int;

        $i7 := @parameter7: int;

        $r1 := @parameter8: org.joda.time.PeriodType;

        specialinvoke r0.<org.joda.time.base.AbstractPeriod: void <init>()>();

        $r1 = virtualinvoke r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType checkPeriodType(org.joda.time.PeriodType)>($r1);

        r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType> = $r1;

        $r2 = specialinvoke r0.<org.joda.time.base.BasePeriod: int[] setPeriodInternal(int,int,int,int,int,int,int,int)>($i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7);

        r0.<org.joda.time.base.BasePeriod: int[] iValues> = $r2;

        return;
    }
    protected void <init>(long)
    {
        org.joda.time.base.BasePeriod r0;
        long $l0;
        int[] $r1, $r5;
        org.joda.time.PeriodType $r2;
        org.joda.time.chrono.ISOChronology $r3;
        org.joda.time.ReadablePeriod $r4;

        r0 := @this: org.joda.time.base.BasePeriod;

        $l0 := @parameter0: long;

        specialinvoke r0.<org.joda.time.base.AbstractPeriod: void <init>()>();

        $r2 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType standard()>();

        r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType> = $r2;

        $r3 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>();

        $r4 = <org.joda.time.base.BasePeriod: org.joda.time.ReadablePeriod DUMMY_PERIOD>;

        $r5 = virtualinvoke $r3.<org.joda.time.chrono.ISOChronology: int[] get(org.joda.time.ReadablePeriod,long)>($r4, $l0);

        $r1 = newarray (int)[8];

        r0.<org.joda.time.base.BasePeriod: int[] iValues> = $r1;

        $r1 = r0.<org.joda.time.base.BasePeriod: int[] iValues>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, $r1, 4, 4);

        return;
    }
    protected void <init>(long, long, org.joda.time.PeriodType, org.joda.time.Chronology)
    {
        org.joda.time.base.BasePeriod r0;
        long $l0, $l1;
        org.joda.time.PeriodType $r1;
        org.joda.time.Chronology $r2;
        int[] $r3;

        r0 := @this: org.joda.time.base.BasePeriod;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $r1 := @parameter2: org.joda.time.PeriodType;

        $r2 := @parameter3: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.AbstractPeriod: void <init>()>();

        $r1 = virtualinvoke r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType checkPeriodType(org.joda.time.PeriodType)>($r1);

        $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>($r2);

        r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType> = $r1;

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: int[] get(org.joda.time.ReadablePeriod,long,long)>(r0, $l0, $l1);

        r0.<org.joda.time.base.BasePeriod: int[] iValues> = $r3;

        return;
    }
    protected void <init>(long, org.joda.time.PeriodType, org.joda.time.Chronology)
    {
        org.joda.time.base.BasePeriod r0;
        long $l0;
        org.joda.time.PeriodType $r1;
        org.joda.time.Chronology $r2;
        int[] $r3;

        r0 := @this: org.joda.time.base.BasePeriod;

        $l0 := @parameter0: long;

        $r1 := @parameter1: org.joda.time.PeriodType;

        $r2 := @parameter2: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.AbstractPeriod: void <init>()>();

        $r1 = virtualinvoke r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType checkPeriodType(org.joda.time.PeriodType)>($r1);

        $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>($r2);

        r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType> = $r1;

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: int[] get(org.joda.time.ReadablePeriod,long)>(r0, $l0);

        r0.<org.joda.time.base.BasePeriod: int[] iValues> = $r3;

        return;
    }
    protected void <init>(java.lang.Object, org.joda.time.PeriodType, org.joda.time.Chronology)
    {
        java.lang.Object $r0;
        org.joda.time.Chronology $r1;
        boolean $z0;
        org.joda.time.base.BasePeriod r2;
        org.joda.time.PeriodType $r3;
        org.joda.time.convert.ConverterManager $r4;
        org.joda.time.convert.PeriodConverter $r5;
        int $i0;
        int[] $r6;
        org.joda.time.ReadWritablePeriod r7;
        org.joda.time.MutablePeriod $r8;

        r2 := @this: org.joda.time.base.BasePeriod;

        $r0 := @parameter0: java.lang.Object;

        $r3 := @parameter1: org.joda.time.PeriodType;

        $r1 := @parameter2: org.joda.time.Chronology;

        specialinvoke r2.<org.joda.time.base.AbstractPeriod: void <init>()>();

        $r4 = staticinvoke <org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager getInstance()>();

        $r5 = virtualinvoke $r4.<org.joda.time.convert.ConverterManager: org.joda.time.convert.PeriodConverter getPeriodConverter(java.lang.Object)>($r0);

        if $r3 != null goto label1;

        $r3 = interfaceinvoke $r5.<org.joda.time.convert.PeriodConverter: org.joda.time.PeriodType getPeriodType(java.lang.Object)>($r0);

     label1:
        $r3 = virtualinvoke r2.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType checkPeriodType(org.joda.time.PeriodType)>($r3);

        r2.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType> = $r3;

        $z0 = r2 instanceof org.joda.time.ReadWritablePeriod;

        if $z0 == 0 goto label2;

        $i0 = virtualinvoke r2.<org.joda.time.base.BasePeriod: int size()>();

        $r6 = newarray (int)[$i0];

        r2.<org.joda.time.base.BasePeriod: int[] iValues> = $r6;

        $r1 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>($r1);

        r7 = (org.joda.time.ReadWritablePeriod) r2;

        interfaceinvoke $r5.<org.joda.time.convert.PeriodConverter: void setInto(org.joda.time.ReadWritablePeriod,java.lang.Object,org.joda.time.Chronology)>(r7, $r0, $r1);

        return;

     label2:
        $r8 = new org.joda.time.MutablePeriod;

        specialinvoke $r8.<org.joda.time.MutablePeriod: void <init>(java.lang.Object,org.joda.time.PeriodType,org.joda.time.Chronology)>($r0, $r3, $r1);

        $r6 = virtualinvoke $r8.<org.joda.time.MutablePeriod: int[] getValues()>();

        r2.<org.joda.time.base.BasePeriod: int[] iValues> = $r6;

        return;
    }
    protected void <init>(org.joda.time.ReadableDuration, org.joda.time.ReadableInstant, org.joda.time.PeriodType)
    {
        org.joda.time.base.BasePeriod r0;
        org.joda.time.ReadableDuration $r1;
        org.joda.time.ReadableInstant $r2;
        org.joda.time.PeriodType $r3;
        long $l0, $l1;
        org.joda.time.Chronology $r4;
        int[] $r5;

        r0 := @this: org.joda.time.base.BasePeriod;

        $r1 := @parameter0: org.joda.time.ReadableDuration;

        $r2 := @parameter1: org.joda.time.ReadableInstant;

        $r3 := @parameter2: org.joda.time.PeriodType;

        specialinvoke r0.<org.joda.time.base.AbstractPeriod: void <init>()>();

        $r3 = virtualinvoke r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType checkPeriodType(org.joda.time.PeriodType)>($r3);

        $l0 = staticinvoke <org.joda.time.DateTimeUtils: long getDurationMillis(org.joda.time.ReadableDuration)>($r1);

        $l1 = staticinvoke <org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>($r2);

        $l0 = staticinvoke <org.joda.time.field.FieldUtils: long safeSubtract(long,long)>($l1, $l0);

        $r4 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>($r2);

        r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType> = $r3;

        $r5 = virtualinvoke $r4.<org.joda.time.Chronology: int[] get(org.joda.time.ReadablePeriod,long,long)>(r0, $l0, $l1);

        r0.<org.joda.time.base.BasePeriod: int[] iValues> = $r5;

        return;
    }
    protected void <init>(org.joda.time.ReadableInstant, org.joda.time.ReadableDuration, org.joda.time.PeriodType)
    {
        org.joda.time.base.BasePeriod r0;
        org.joda.time.ReadableInstant $r1;
        org.joda.time.ReadableDuration $r2;
        org.joda.time.PeriodType $r3;
        long $l0, $l1;
        org.joda.time.Chronology $r4;
        int[] $r5;

        r0 := @this: org.joda.time.base.BasePeriod;

        $r1 := @parameter0: org.joda.time.ReadableInstant;

        $r2 := @parameter1: org.joda.time.ReadableDuration;

        $r3 := @parameter2: org.joda.time.PeriodType;

        specialinvoke r0.<org.joda.time.base.AbstractPeriod: void <init>()>();

        $r3 = virtualinvoke r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType checkPeriodType(org.joda.time.PeriodType)>($r3);

        $l0 = staticinvoke <org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>($r1);

        $l1 = staticinvoke <org.joda.time.DateTimeUtils: long getDurationMillis(org.joda.time.ReadableDuration)>($r2);

        $l1 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>($l0, $l1);

        $r4 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>($r1);

        r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType> = $r3;

        $r5 = virtualinvoke $r4.<org.joda.time.Chronology: int[] get(org.joda.time.ReadablePeriod,long,long)>(r0, $l0, $l1);

        r0.<org.joda.time.base.BasePeriod: int[] iValues> = $r5;

        return;
    }
    protected void <init>(org.joda.time.ReadableInstant, org.joda.time.ReadableInstant, org.joda.time.PeriodType)
    {
        org.joda.time.base.BasePeriod r0;
        org.joda.time.ReadableInstant $r1, $r2;
        org.joda.time.PeriodType $r3;
        int $i0;
        int[] $r4;
        long $l1, $l2;
        org.joda.time.Chronology $r5;

        r0 := @this: org.joda.time.base.BasePeriod;

        $r1 := @parameter0: org.joda.time.ReadableInstant;

        $r2 := @parameter1: org.joda.time.ReadableInstant;

        $r3 := @parameter2: org.joda.time.PeriodType;

        specialinvoke r0.<org.joda.time.base.AbstractPeriod: void <init>()>();

        $r3 = virtualinvoke r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType checkPeriodType(org.joda.time.PeriodType)>($r3);

        if $r1 != null goto label1;

        if $r2 != null goto label1;

        r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType> = $r3;

        $i0 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int size()>();

        $r4 = newarray (int)[$i0];

        r0.<org.joda.time.base.BasePeriod: int[] iValues> = $r4;

        return;

     label1:
        $l1 = staticinvoke <org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>($r1);

        $l2 = staticinvoke <org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>($r2);

        $r5 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getIntervalChronology(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>($r1, $r2);

        r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType> = $r3;

        $r4 = virtualinvoke $r5.<org.joda.time.Chronology: int[] get(org.joda.time.ReadablePeriod,long,long)>(r0, $l1, $l2);

        r0.<org.joda.time.base.BasePeriod: int[] iValues> = $r4;

        return;
    }
    protected void <init>(org.joda.time.ReadablePartial, org.joda.time.ReadablePartial, org.joda.time.PeriodType)
    {
        org.joda.time.base.BasePeriod r0;
        org.joda.time.ReadablePartial $r1, $r3;
        org.joda.time.PeriodType $r2;
        java.lang.IllegalArgumentException $r4;
        boolean $z0;
        java.lang.Class $r5, $r6;
        org.joda.time.base.BaseLocal $r7;
        long $l0, $l1;
        org.joda.time.Chronology $r8;
        int[] $r9;
        int $i2, $i3;
        org.joda.time.DateTimeFieldType $r10, $r11;

        r0 := @this: org.joda.time.base.BasePeriod;

        $r1 := @parameter0: org.joda.time.ReadablePartial;

        $r3 := @parameter1: org.joda.time.ReadablePartial;

        $r2 := @parameter2: org.joda.time.PeriodType;

        specialinvoke r0.<org.joda.time.base.AbstractPeriod: void <init>()>();

        if $r1 == null goto label1;

        if $r3 != null goto label2;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ReadablePartial objects must not be null");

        throw $r4;

     label2:
        $z0 = $r1 instanceof org.joda.time.base.BaseLocal;

        if $z0 == 0 goto label3;

        $z0 = $r3 instanceof org.joda.time.base.BaseLocal;

        if $z0 == 0 goto label3;

        $r5 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        if $r5 != $r6 goto label3;

        $r2 = virtualinvoke r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType checkPeriodType(org.joda.time.PeriodType)>($r2);

        $r7 = (org.joda.time.base.BaseLocal) $r1;

        $l0 = virtualinvoke $r7.<org.joda.time.base.BaseLocal: long getLocalMillis()>();

        $r7 = (org.joda.time.base.BaseLocal) $r3;

        $l1 = virtualinvoke $r7.<org.joda.time.base.BaseLocal: long getLocalMillis()>();

        $r8 = interfaceinvoke $r1.<org.joda.time.ReadablePartial: org.joda.time.Chronology getChronology()>();

        $r8 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>($r8);

        r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType> = $r2;

        $r9 = virtualinvoke $r8.<org.joda.time.Chronology: int[] get(org.joda.time.ReadablePeriod,long,long)>(r0, $l0, $l1);

        r0.<org.joda.time.base.BasePeriod: int[] iValues> = $r9;

        return;

     label3:
        $i2 = interfaceinvoke $r1.<org.joda.time.ReadablePartial: int size()>();

        $i3 = interfaceinvoke $r3.<org.joda.time.ReadablePartial: int size()>();

        if $i2 == $i3 goto label4;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ReadablePartial objects must have the same set of fields");

        throw $r4;

     label4:
        $i2 = 0;

        $i3 = interfaceinvoke $r1.<org.joda.time.ReadablePartial: int size()>();

     label5:
        if $i2 >= $i3 goto label7;

        $r10 = interfaceinvoke $r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>($i2);

        $r11 = interfaceinvoke $r3.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>($i2);

        if $r10 == $r11 goto label6;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ReadablePartial objects must have the same set of fields");

        throw $r4;

     label6:
        $i2 = $i2 + 1;

        goto label5;

     label7:
        $z0 = staticinvoke <org.joda.time.DateTimeUtils: boolean isContiguous(org.joda.time.ReadablePartial)>($r1);

        if $z0 != 0 goto label8;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ReadablePartial objects must be contiguous");

        throw $r4;

     label8:
        $r2 = virtualinvoke r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType checkPeriodType(org.joda.time.PeriodType)>($r2);

        r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType> = $r2;

        $r8 = interfaceinvoke $r1.<org.joda.time.ReadablePartial: org.joda.time.Chronology getChronology()>();

        $r8 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>($r8);

        $r8 = virtualinvoke $r8.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>();

        $l0 = virtualinvoke $r8.<org.joda.time.Chronology: long set(org.joda.time.ReadablePartial,long)>($r1, 0L);

        $l1 = virtualinvoke $r8.<org.joda.time.Chronology: long set(org.joda.time.ReadablePartial,long)>($r3, 0L);

        $r9 = virtualinvoke $r8.<org.joda.time.Chronology: int[] get(org.joda.time.ReadablePeriod,long,long)>(r0, $l0, $l1);

        r0.<org.joda.time.base.BasePeriod: int[] iValues> = $r9;

        return;
    }
    protected void <init>(int[], org.joda.time.PeriodType)
    {
        org.joda.time.base.BasePeriod r0;
        int[] $r1;
        org.joda.time.PeriodType $r2;

        r0 := @this: org.joda.time.base.BasePeriod;

        $r1 := @parameter0: int[];

        $r2 := @parameter1: org.joda.time.PeriodType;

        specialinvoke r0.<org.joda.time.base.AbstractPeriod: void <init>()>();

        r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType> = $r2;

        r0.<org.joda.time.base.BasePeriod: int[] iValues> = $r1;

        return;
    }
    private void checkAndUpdate(org.joda.time.DurationFieldType, int[], int)
    {
        org.joda.time.base.BasePeriod r0;
        org.joda.time.DurationFieldType $r1;
        int[] $r2;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;

        r0 := @this: org.joda.time.base.BasePeriod;

        $r1 := @parameter0: org.joda.time.DurationFieldType;

        $r2 := @parameter1: int[];

        $i0 := @parameter2: int;

        $i1 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int indexOf(org.joda.time.DurationFieldType)>($r1);

        if $i1 != -1 goto label1;

        if $i0 == 0 goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Period does not support field \'");

        $r5 = virtualinvoke $r1.<org.joda.time.DurationFieldType: java.lang.String getName()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label1:
        $r2[$i1] = $i0;

     label2:
        return;
    }
    private void setPeriodInternal(org.joda.time.ReadablePeriod)
    {
        org.joda.time.base.BasePeriod r0;
        org.joda.time.ReadablePeriod $r1;
        int[] $r2;
        int $i0, $i1, $i2;
        org.joda.time.DurationFieldType $r3;

        r0 := @this: org.joda.time.base.BasePeriod;

        $r1 := @parameter0: org.joda.time.ReadablePeriod;

        $i0 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int size()>();

        $r2 = newarray (int)[$i0];

        $i0 = 0;

        $i1 = interfaceinvoke $r1.<org.joda.time.ReadablePeriod: int size()>();

     label1:
        if $i0 >= $i1 goto label2;

        $r3 = interfaceinvoke $r1.<org.joda.time.ReadablePeriod: org.joda.time.DurationFieldType getFieldType(int)>($i0);

        $i2 = interfaceinvoke $r1.<org.joda.time.ReadablePeriod: int getValue(int)>($i0);

        specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r3, $r2, $i2);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        virtualinvoke r0.<org.joda.time.base.BasePeriod: void setValues(int[])>($r2);

        return;
    }
    private int[] setPeriodInternal(int, int, int, int, int, int, int, int)
    {
        org.joda.time.base.BasePeriod r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        int[] $r1;
        org.joda.time.DurationFieldType $r2;

        r0 := @this: org.joda.time.base.BasePeriod;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $i4 := @parameter4: int;

        $i5 := @parameter5: int;

        $i6 := @parameter6: int;

        $i7 := @parameter7: int;

        $i8 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int size()>();

        $r1 = newarray (int)[$i8];

        $r2 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>();

        specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r2, $r1, $i0);

        $r2 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>();

        specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r2, $r1, $i1);

        $r2 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>();

        specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r2, $r1, $i2);

        $r2 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>();

        specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r2, $r1, $i3);

        $r2 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>();

        specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r2, $r1, $i4);

        $r2 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>();

        specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r2, $r1, $i5);

        $r2 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>();

        specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r2, $r1, $i6);

        $r2 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>();

        specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r2, $r1, $i7);

        return $r1;
    }
    protected void addField(org.joda.time.DurationFieldType, int)
    {
        org.joda.time.base.BasePeriod r0;
        org.joda.time.DurationFieldType $r1;
        int $i0;
        int[] $r2;

        r0 := @this: org.joda.time.base.BasePeriod;

        $r1 := @parameter0: org.joda.time.DurationFieldType;

        $i0 := @parameter1: int;

        $r2 = r0.<org.joda.time.base.BasePeriod: int[] iValues>;

        virtualinvoke r0.<org.joda.time.base.BasePeriod: void addFieldInto(int[],org.joda.time.DurationFieldType,int)>($r2, $r1, $i0);

        return;
    }
    protected void addFieldInto(int[], org.joda.time.DurationFieldType, int)
    {
        org.joda.time.base.BasePeriod r0;
        int[] $r1;
        org.joda.time.DurationFieldType $r2;
        int $i0, $i1, $i2;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;

        r0 := @this: org.joda.time.base.BasePeriod;

        $r1 := @parameter0: int[];

        $r2 := @parameter1: org.joda.time.DurationFieldType;

        $i0 := @parameter2: int;

        $i1 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int indexOf(org.joda.time.DurationFieldType)>($r2);

        if $i1 != -1 goto label2;

        if $i0 != 0 goto label1;

        if $r2 != null goto label3;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Period does not support field \'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label2:
        $i2 = $r1[$i1];

        $i0 = staticinvoke <org.joda.time.field.FieldUtils: int safeAdd(int,int)>($i2, $i0);

        $r1[$i1] = $i0;

     label3:
        return;
    }
    protected void addPeriod(org.joda.time.ReadablePeriod)
    {
        org.joda.time.base.BasePeriod r0;
        org.joda.time.ReadablePeriod $r1;
        int[] $r2;

        r0 := @this: org.joda.time.base.BasePeriod;

        $r1 := @parameter0: org.joda.time.ReadablePeriod;

        if $r1 == null goto label1;

        $r2 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int[] getValues()>();

        $r2 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int[] addPeriodInto(int[],org.joda.time.ReadablePeriod)>($r2, $r1);

        virtualinvoke r0.<org.joda.time.base.BasePeriod: void setValues(int[])>($r2);

     label1:
        return;
    }
    protected int[] addPeriodInto(int[], org.joda.time.ReadablePeriod)
    {
        org.joda.time.base.BasePeriod r0;
        int[] $r1;
        org.joda.time.ReadablePeriod $r2;
        int $i0, $i1, $i2, $i3, $i4;
        org.joda.time.DurationFieldType $r3;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;

        r0 := @this: org.joda.time.base.BasePeriod;

        $r1 := @parameter0: int[];

        $r2 := @parameter1: org.joda.time.ReadablePeriod;

        $i0 = 0;

        $i1 = interfaceinvoke $r2.<org.joda.time.ReadablePeriod: int size()>();

     label1:
        if $i0 >= $i1 goto label4;

        $r3 = interfaceinvoke $r2.<org.joda.time.ReadablePeriod: org.joda.time.DurationFieldType getFieldType(int)>($i0);

        $i2 = interfaceinvoke $r2.<org.joda.time.ReadablePeriod: int getValue(int)>($i0);

        if $i2 == 0 goto label3;

        $i3 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int indexOf(org.joda.time.DurationFieldType)>($r3);

        if $i3 != -1 goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Period does not support field \'");

        $r6 = virtualinvoke $r3.<org.joda.time.DurationFieldType: java.lang.String getName()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r4;

     label2:
        $i4 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int getValue(int)>($i3);

        $i2 = staticinvoke <org.joda.time.field.FieldUtils: int safeAdd(int,int)>($i4, $i2);

        $r1[$i3] = $i2;

     label3:
        $i0 = $i0 + 1;

        goto label1;

     label4:
        return $r1;
    }
    protected org.joda.time.PeriodType checkPeriodType(org.joda.time.PeriodType)
    {
        org.joda.time.base.BasePeriod r0;
        org.joda.time.PeriodType $r1;

        r0 := @this: org.joda.time.base.BasePeriod;

        $r1 := @parameter0: org.joda.time.PeriodType;

        $r1 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.PeriodType getPeriodType(org.joda.time.PeriodType)>($r1);

        return $r1;
    }
    public org.joda.time.PeriodType getPeriodType()
    {
        org.joda.time.base.BasePeriod r0;
        org.joda.time.PeriodType r1;

        r0 := @this: org.joda.time.base.BasePeriod;

        r1 = r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType>;

        return r1;
    }
    public int getValue(int)
    {
        org.joda.time.base.BasePeriod r0;
        int $i0;
        int[] $r1;

        r0 := @this: org.joda.time.base.BasePeriod;

        $i0 := @parameter0: int;

        $r1 = r0.<org.joda.time.base.BasePeriod: int[] iValues>;

        $i0 = $r1[$i0];

        return $i0;
    }
    protected void mergePeriod(org.joda.time.ReadablePeriod)
    {
        org.joda.time.base.BasePeriod r0;
        org.joda.time.ReadablePeriod $r1;
        int[] $r2;

        r0 := @this: org.joda.time.base.BasePeriod;

        $r1 := @parameter0: org.joda.time.ReadablePeriod;

        if $r1 == null goto label1;

        $r2 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int[] getValues()>();

        $r2 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int[] mergePeriodInto(int[],org.joda.time.ReadablePeriod)>($r2, $r1);

        virtualinvoke r0.<org.joda.time.base.BasePeriod: void setValues(int[])>($r2);

     label1:
        return;
    }
    protected int[] mergePeriodInto(int[], org.joda.time.ReadablePeriod)
    {
        org.joda.time.base.BasePeriod r0;
        int[] $r1;
        org.joda.time.ReadablePeriod $r2;
        int $i0, $i1, $i2;
        org.joda.time.DurationFieldType $r3;

        r0 := @this: org.joda.time.base.BasePeriod;

        $r1 := @parameter0: int[];

        $r2 := @parameter1: org.joda.time.ReadablePeriod;

        $i0 = 0;

        $i1 = interfaceinvoke $r2.<org.joda.time.ReadablePeriod: int size()>();

     label1:
        if $i0 >= $i1 goto label2;

        $r3 = interfaceinvoke $r2.<org.joda.time.ReadablePeriod: org.joda.time.DurationFieldType getFieldType(int)>($i0);

        $i2 = interfaceinvoke $r2.<org.joda.time.ReadablePeriod: int getValue(int)>($i0);

        specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r3, $r1, $i2);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return $r1;
    }
    protected void setField(org.joda.time.DurationFieldType, int)
    {
        org.joda.time.base.BasePeriod r0;
        org.joda.time.DurationFieldType $r1;
        int $i0;
        int[] $r2;

        r0 := @this: org.joda.time.base.BasePeriod;

        $r1 := @parameter0: org.joda.time.DurationFieldType;

        $i0 := @parameter1: int;

        $r2 = r0.<org.joda.time.base.BasePeriod: int[] iValues>;

        virtualinvoke r0.<org.joda.time.base.BasePeriod: void setFieldInto(int[],org.joda.time.DurationFieldType,int)>($r2, $r1, $i0);

        return;
    }
    protected void setFieldInto(int[], org.joda.time.DurationFieldType, int)
    {
        org.joda.time.base.BasePeriod r0;
        int[] $r1;
        org.joda.time.DurationFieldType $r2;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;

        r0 := @this: org.joda.time.base.BasePeriod;

        $r1 := @parameter0: int[];

        $r2 := @parameter1: org.joda.time.DurationFieldType;

        $i0 := @parameter2: int;

        $i1 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int indexOf(org.joda.time.DurationFieldType)>($r2);

        if $i1 != -1 goto label2;

        if $i0 != 0 goto label1;

        if $r2 != null goto label3;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Period does not support field \'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label2:
        $r1[$i1] = $i0;

     label3:
        return;
    }
    protected void setPeriod(int, int, int, int, int, int, int, int)
    {
        org.joda.time.base.BasePeriod r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        int[] $r1;

        r0 := @this: org.joda.time.base.BasePeriod;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $i4 := @parameter4: int;

        $i5 := @parameter5: int;

        $i6 := @parameter6: int;

        $i7 := @parameter7: int;

        $r1 = specialinvoke r0.<org.joda.time.base.BasePeriod: int[] setPeriodInternal(int,int,int,int,int,int,int,int)>($i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7);

        virtualinvoke r0.<org.joda.time.base.BasePeriod: void setValues(int[])>($r1);

        return;
    }
    protected void setPeriod(org.joda.time.ReadablePeriod)
    {
        org.joda.time.base.BasePeriod r0;
        org.joda.time.ReadablePeriod $r1;
        int $i0;
        int[] $r2;

        r0 := @this: org.joda.time.base.BasePeriod;

        $r1 := @parameter0: org.joda.time.ReadablePeriod;

        if $r1 != null goto label1;

        $i0 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int size()>();

        $r2 = newarray (int)[$i0];

        virtualinvoke r0.<org.joda.time.base.BasePeriod: void setValues(int[])>($r2);

        return;

     label1:
        specialinvoke r0.<org.joda.time.base.BasePeriod: void setPeriodInternal(org.joda.time.ReadablePeriod)>($r1);

        return;
    }
    protected void setValue(int, int)
    {
        org.joda.time.base.BasePeriod r0;
        int $i0, $i1;
        int[] $r1;

        r0 := @this: org.joda.time.base.BasePeriod;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = r0.<org.joda.time.base.BasePeriod: int[] iValues>;

        $r1[$i0] = $i1;

        return;
    }
    protected void setValues(int[])
    {
        org.joda.time.base.BasePeriod r0;
        int[] $r1, $r2, $r3;
        int $i0;

        r0 := @this: org.joda.time.base.BasePeriod;

        $r1 := @parameter0: int[];

        $r2 = r0.<org.joda.time.base.BasePeriod: int[] iValues>;

        $r3 = r0.<org.joda.time.base.BasePeriod: int[] iValues>;

        $i0 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r2, 0, $i0);

        return;
    }
    public org.joda.time.Duration toDurationFrom(org.joda.time.ReadableInstant)
    {
        org.joda.time.base.BasePeriod r0;
        org.joda.time.ReadableInstant $r1;
        org.joda.time.Duration $r2;
        long $l0, $l1;
        org.joda.time.Chronology $r3;

        r0 := @this: org.joda.time.base.BasePeriod;

        $r1 := @parameter0: org.joda.time.ReadableInstant;

        $l0 = staticinvoke <org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>($r1);

        $r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>($r1);

        $l1 = virtualinvoke $r3.<org.joda.time.Chronology: long add(org.joda.time.ReadablePeriod,long,int)>(r0, $l0, 1);

        $r2 = new org.joda.time.Duration;

        specialinvoke $r2.<org.joda.time.Duration: void <init>(long,long)>($l0, $l1);

        return $r2;
    }
    public org.joda.time.Duration toDurationTo(org.joda.time.ReadableInstant)
    {
        org.joda.time.base.BasePeriod r0;
        org.joda.time.ReadableInstant $r1;
        org.joda.time.Duration $r2;
        long $l0, $l1;
        org.joda.time.Chronology $r3;

        r0 := @this: org.joda.time.base.BasePeriod;

        $r1 := @parameter0: org.joda.time.ReadableInstant;

        $l0 = staticinvoke <org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>($r1);

        $r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>($r1);

        $l1 = virtualinvoke $r3.<org.joda.time.Chronology: long add(org.joda.time.ReadablePeriod,long,int)>(r0, $l0, -1);

        $r2 = new org.joda.time.Duration;

        specialinvoke $r2.<org.joda.time.Duration: void <init>(long,long)>($l1, $l0);

        return $r2;
    }
