org.joda.time.chrono.BasicChronology extends org.joda.time.chrono.AssembledChronology
private static final int CACHE_MASK
private static final int CACHE_SIZE
private static final org.joda.time.DateTimeField cClockhourOfDayField
private static final org.joda.time.DateTimeField cClockhourOfHalfdayField
private static final org.joda.time.DurationField cDaysField
private static final org.joda.time.DateTimeField cHalfdayOfDayField
private static final org.joda.time.DurationField cHalfdaysField
private static final org.joda.time.DateTimeField cHourOfDayField
private static final org.joda.time.DateTimeField cHourOfHalfdayField
private static final org.joda.time.DurationField cHoursField
private static final org.joda.time.DurationField cMillisField
private static final org.joda.time.DateTimeField cMillisOfDayField
private static final org.joda.time.DateTimeField cMillisOfSecondField
private static final org.joda.time.DateTimeField cMinuteOfDayField
private static final org.joda.time.DateTimeField cMinuteOfHourField
private static final org.joda.time.DurationField cMinutesField
private static final org.joda.time.DateTimeField cSecondOfDayField
private static final org.joda.time.DateTimeField cSecondOfMinuteField
private static final org.joda.time.DurationField cSecondsField
private static final org.joda.time.DurationField cWeeksField
private static final long serialVersionUID
private final int iMinDaysInFirstWeek
private final transient org.joda.time.chrono.BasicChronology$YearInfo[] iYearInfoCache
    static void <clinit>()
    {
        org.joda.time.DurationField $r0, $r5;
        org.joda.time.field.PreciseDurationField $r1;
        org.joda.time.DurationFieldType $r2;
        org.joda.time.field.PreciseDateTimeField $r3;
        org.joda.time.DateTimeFieldType $r4;
        org.joda.time.field.ZeroIsMaxDateTimeField $r6;
        org.joda.time.DateTimeField $r7;
        org.joda.time.chrono.BasicChronology$HalfdayField $r8;

        $r0 = <org.joda.time.field.MillisDurationField: org.joda.time.DurationField INSTANCE>;

        <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cMillisField> = $r0;

        $r1 = new org.joda.time.field.PreciseDurationField;

        $r2 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>();

        specialinvoke $r1.<org.joda.time.field.PreciseDurationField: void <init>(org.joda.time.DurationFieldType,long)>($r2, 1000L);

        <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cSecondsField> = $r1;

        $r1 = new org.joda.time.field.PreciseDurationField;

        $r2 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>();

        specialinvoke $r1.<org.joda.time.field.PreciseDurationField: void <init>(org.joda.time.DurationFieldType,long)>($r2, 60000L);

        <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cMinutesField> = $r1;

        $r1 = new org.joda.time.field.PreciseDurationField;

        $r2 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>();

        specialinvoke $r1.<org.joda.time.field.PreciseDurationField: void <init>(org.joda.time.DurationFieldType,long)>($r2, 3600000L);

        <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cHoursField> = $r1;

        $r1 = new org.joda.time.field.PreciseDurationField;

        $r2 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType halfdays()>();

        specialinvoke $r1.<org.joda.time.field.PreciseDurationField: void <init>(org.joda.time.DurationFieldType,long)>($r2, 43200000L);

        <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cHalfdaysField> = $r1;

        $r1 = new org.joda.time.field.PreciseDurationField;

        $r2 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>();

        specialinvoke $r1.<org.joda.time.field.PreciseDurationField: void <init>(org.joda.time.DurationFieldType,long)>($r2, 86400000L);

        <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cDaysField> = $r1;

        $r1 = new org.joda.time.field.PreciseDurationField;

        $r2 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>();

        specialinvoke $r1.<org.joda.time.field.PreciseDurationField: void <init>(org.joda.time.DurationFieldType,long)>($r2, 604800000L);

        <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cWeeksField> = $r1;

        $r3 = new org.joda.time.field.PreciseDateTimeField;

        $r4 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfSecond()>();

        $r0 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cMillisField>;

        $r5 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cSecondsField>;

        specialinvoke $r3.<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>($r4, $r0, $r5);

        <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cMillisOfSecondField> = $r3;

        $r3 = new org.joda.time.field.PreciseDateTimeField;

        $r4 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfDay()>();

        $r0 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cMillisField>;

        $r5 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cDaysField>;

        specialinvoke $r3.<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>($r4, $r0, $r5);

        <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cMillisOfDayField> = $r3;

        $r3 = new org.joda.time.field.PreciseDateTimeField;

        $r4 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfMinute()>();

        $r0 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cSecondsField>;

        $r5 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cMinutesField>;

        specialinvoke $r3.<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>($r4, $r0, $r5);

        <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cSecondOfMinuteField> = $r3;

        $r3 = new org.joda.time.field.PreciseDateTimeField;

        $r4 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfDay()>();

        $r0 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cSecondsField>;

        $r5 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cDaysField>;

        specialinvoke $r3.<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>($r4, $r0, $r5);

        <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cSecondOfDayField> = $r3;

        $r3 = new org.joda.time.field.PreciseDateTimeField;

        $r4 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfHour()>();

        $r0 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cMinutesField>;

        $r5 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cHoursField>;

        specialinvoke $r3.<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>($r4, $r0, $r5);

        <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cMinuteOfHourField> = $r3;

        $r3 = new org.joda.time.field.PreciseDateTimeField;

        $r4 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfDay()>();

        $r0 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cMinutesField>;

        $r5 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cDaysField>;

        specialinvoke $r3.<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>($r4, $r0, $r5);

        <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cMinuteOfDayField> = $r3;

        $r3 = new org.joda.time.field.PreciseDateTimeField;

        $r4 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfDay()>();

        $r0 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cHoursField>;

        $r5 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cDaysField>;

        specialinvoke $r3.<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>($r4, $r0, $r5);

        <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cHourOfDayField> = $r3;

        $r3 = new org.joda.time.field.PreciseDateTimeField;

        $r4 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfHalfday()>();

        $r0 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cHoursField>;

        $r5 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cHalfdaysField>;

        specialinvoke $r3.<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>($r4, $r0, $r5);

        <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cHourOfHalfdayField> = $r3;

        $r6 = new org.joda.time.field.ZeroIsMaxDateTimeField;

        $r7 = <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cHourOfDayField>;

        $r4 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType clockhourOfDay()>();

        specialinvoke $r6.<org.joda.time.field.ZeroIsMaxDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>($r7, $r4);

        <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cClockhourOfDayField> = $r6;

        $r6 = new org.joda.time.field.ZeroIsMaxDateTimeField;

        $r7 = <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cHourOfHalfdayField>;

        $r4 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType clockhourOfHalfday()>();

        specialinvoke $r6.<org.joda.time.field.ZeroIsMaxDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>($r7, $r4);

        <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cClockhourOfHalfdayField> = $r6;

        $r8 = new org.joda.time.chrono.BasicChronology$HalfdayField;

        specialinvoke $r8.<org.joda.time.chrono.BasicChronology$HalfdayField: void <init>()>();

        <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cHalfdayOfDayField> = $r8;

        return;
    }
    void <init>(org.joda.time.Chronology, java.lang.Object, int)
    {
        org.joda.time.chrono.BasicChronology r0;
        org.joda.time.Chronology $r1;
        java.lang.Object $r2;
        int $i0;
        org.joda.time.chrono.BasicChronology$YearInfo[] $r3;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;

        r0 := @this: org.joda.time.chrono.BasicChronology;

        $r1 := @parameter0: org.joda.time.Chronology;

        $r2 := @parameter1: java.lang.Object;

        $i0 := @parameter2: int;

        specialinvoke r0.<org.joda.time.chrono.AssembledChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>($r1, $r2);

        $r3 = newarray (org.joda.time.chrono.BasicChronology$YearInfo)[1024];

        r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo[] iYearInfoCache> = $r3;

        if $i0 < 1 goto label1;

        if $i0 <= 7 goto label2;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid min days in first week: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r4;

     label2:
        r0.<org.joda.time.chrono.BasicChronology: int iMinDaysInFirstWeek> = $i0;

        return;
    }
    static org.joda.time.DurationField access$000()
    {
        org.joda.time.DurationField r0;

        r0 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cHalfdaysField>;

        return r0;
    }
    static org.joda.time.DurationField access$100()
    {
        org.joda.time.DurationField r0;

        r0 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cDaysField>;

        return r0;
    }
    private org.joda.time.chrono.BasicChronology$YearInfo getYearInfo(int)
    {
        org.joda.time.chrono.BasicChronology r0;
        int $i0, $i2;
        long $l1;
        org.joda.time.chrono.BasicChronology$YearInfo[] $r1;
        org.joda.time.chrono.BasicChronology$YearInfo $r2;

        r0 := @this: org.joda.time.chrono.BasicChronology;

        $i0 := @parameter0: int;

        $r1 = r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo[] iYearInfoCache>;

        $i2 = $i0 & 1023;

        $r2 = $r1[$i2];

        if $r2 == null goto label1;

        $i2 = $r2.<org.joda.time.chrono.BasicChronology$YearInfo: int iYear>;

        if $i2 == $i0 goto label2;

     label1:
        $r2 = new org.joda.time.chrono.BasicChronology$YearInfo;

        $l1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long calculateFirstDayOfYearMillis(int)>($i0);

        specialinvoke $r2.<org.joda.time.chrono.BasicChronology$YearInfo: void <init>(int,long)>($i0, $l1);

        $r1 = r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo[] iYearInfoCache>;

        $i0 = $i0 & 1023;

        $r1[$i0] = $r2;

     label2:
        return $r2;
    }
    protected void assemble(org.joda.time.chrono.AssembledChronology$Fields)
    {
        org.joda.time.chrono.BasicChronology r0;
        org.joda.time.chrono.AssembledChronology$Fields $r1;
        org.joda.time.DurationField $r2;
        org.joda.time.DateTimeField $r3;
        org.joda.time.chrono.BasicYearDateTimeField $r4;
        org.joda.time.chrono.GJYearOfEraDateTimeField $r5;
        org.joda.time.field.OffsetDateTimeField $r6;
        org.joda.time.field.DividedDateTimeField $r7;
        org.joda.time.DateTimeFieldType $r8;
        org.joda.time.field.RemainderDateTimeField $r9;
        org.joda.time.chrono.GJEraDateTimeField $r10;
        org.joda.time.chrono.GJDayOfWeekDateTimeField $r11;
        org.joda.time.chrono.BasicDayOfMonthDateTimeField $r12;
        org.joda.time.chrono.BasicDayOfYearDateTimeField $r13;
        org.joda.time.chrono.GJMonthOfYearDateTimeField $r14;
        org.joda.time.chrono.BasicWeekyearDateTimeField $r15;
        org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField $r16;

        r0 := @this: org.joda.time.chrono.BasicChronology;

        $r1 := @parameter0: org.joda.time.chrono.AssembledChronology$Fields;

        $r2 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cMillisField>;

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField millis> = $r2;

        $r2 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cSecondsField>;

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField seconds> = $r2;

        $r2 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cMinutesField>;

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField minutes> = $r2;

        $r2 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cHoursField>;

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField hours> = $r2;

        $r2 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cHalfdaysField>;

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField halfdays> = $r2;

        $r2 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cDaysField>;

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField days> = $r2;

        $r2 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cWeeksField>;

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weeks> = $r2;

        $r3 = <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cMillisOfSecondField>;

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond> = $r3;

        $r3 = <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cMillisOfDayField>;

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay> = $r3;

        $r3 = <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cSecondOfMinuteField>;

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute> = $r3;

        $r3 = <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cSecondOfDayField>;

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay> = $r3;

        $r3 = <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cMinuteOfHourField>;

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour> = $r3;

        $r3 = <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cMinuteOfDayField>;

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay> = $r3;

        $r3 = <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cHourOfDayField>;

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay> = $r3;

        $r3 = <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cHourOfHalfdayField>;

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday> = $r3;

        $r3 = <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cClockhourOfDayField>;

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay> = $r3;

        $r3 = <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cClockhourOfHalfdayField>;

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday> = $r3;

        $r3 = <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cHalfdayOfDayField>;

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay> = $r3;

        $r4 = new org.joda.time.chrono.BasicYearDateTimeField;

        specialinvoke $r4.<org.joda.time.chrono.BasicYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>(r0);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year> = $r4;

        $r5 = new org.joda.time.chrono.GJYearOfEraDateTimeField;

        $r3 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year>;

        specialinvoke $r5.<org.joda.time.chrono.GJYearOfEraDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.chrono.BasicChronology)>($r3, r0);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra> = $r5;

        $r6 = new org.joda.time.field.OffsetDateTimeField;

        $r3 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra>;

        specialinvoke $r6.<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,int)>($r3, 99);

        $r7 = new org.joda.time.field.DividedDateTimeField;

        $r8 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType centuryOfEra()>();

        specialinvoke $r7.<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>($r6, $r8, 100);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra> = $r7;

        $r3 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra>;

        $r2 = virtualinvoke $r3.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>();

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField centuries> = $r2;

        $r9 = new org.joda.time.field.RemainderDateTimeField;

        $r3 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra>;

        $r7 = (org.joda.time.field.DividedDateTimeField) $r3;

        specialinvoke $r9.<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField)>($r7);

        $r6 = new org.joda.time.field.OffsetDateTimeField;

        $r8 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfCentury()>();

        specialinvoke $r6.<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>($r9, $r8, 1);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury> = $r6;

        $r10 = new org.joda.time.chrono.GJEraDateTimeField;

        specialinvoke $r10.<org.joda.time.chrono.GJEraDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>(r0);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era> = $r10;

        $r11 = new org.joda.time.chrono.GJDayOfWeekDateTimeField;

        $r2 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField days>;

        specialinvoke $r11.<org.joda.time.chrono.GJDayOfWeekDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>(r0, $r2);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfWeek> = $r11;

        $r12 = new org.joda.time.chrono.BasicDayOfMonthDateTimeField;

        $r2 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField days>;

        specialinvoke $r12.<org.joda.time.chrono.BasicDayOfMonthDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>(r0, $r2);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth> = $r12;

        $r13 = new org.joda.time.chrono.BasicDayOfYearDateTimeField;

        $r2 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField days>;

        specialinvoke $r13.<org.joda.time.chrono.BasicDayOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>(r0, $r2);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear> = $r13;

        $r14 = new org.joda.time.chrono.GJMonthOfYearDateTimeField;

        specialinvoke $r14.<org.joda.time.chrono.GJMonthOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>(r0);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear> = $r14;

        $r15 = new org.joda.time.chrono.BasicWeekyearDateTimeField;

        specialinvoke $r15.<org.joda.time.chrono.BasicWeekyearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>(r0);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear> = $r15;

        $r16 = new org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField;

        $r2 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weeks>;

        specialinvoke $r16.<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>(r0, $r2);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear> = $r16;

        $r9 = new org.joda.time.field.RemainderDateTimeField;

        $r3 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear>;

        $r2 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField centuries>;

        $r8 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyearOfCentury()>();

        specialinvoke $r9.<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>($r3, $r2, $r8, 100);

        $r6 = new org.joda.time.field.OffsetDateTimeField;

        $r8 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyearOfCentury()>();

        specialinvoke $r6.<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>($r9, $r8, 1);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury> = $r6;

        $r3 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year>;

        $r2 = virtualinvoke $r3.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>();

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField years> = $r2;

        $r3 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear>;

        $r2 = virtualinvoke $r3.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>();

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField months> = $r2;

        $r3 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear>;

        $r2 = virtualinvoke $r3.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>();

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weekyears> = $r2;

        return;
    }
abstract long calculateFirstDayOfYearMillis(int) { 
// no body
} 
    public boolean equals(java.lang.Object)
    {
        org.joda.time.chrono.BasicChronology r0, $r4;
        java.lang.Object $r1;
        java.lang.Class $r2, $r3;
        int $i0, $i1;
        org.joda.time.DateTimeZone $r5, $r6;
        boolean $z0;

        r0 := @this: org.joda.time.chrono.BasicChronology;

        $r1 := @parameter0: java.lang.Object;

        if r0 != $r1 goto label1;

        return 1;

     label1:
        if $r1 == null goto label2;

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 != $r3 goto label2;

        $r4 = (org.joda.time.chrono.BasicChronology) $r1;

        $i0 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMinimumDaysInFirstWeek()>();

        $i1 = virtualinvoke $r4.<org.joda.time.chrono.BasicChronology: int getMinimumDaysInFirstWeek()>();

        if $i0 != $i1 goto label2;

        $r5 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeZone getZone()>();

        $r6 = virtualinvoke $r4.<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeZone getZone()>();

        $z0 = virtualinvoke $r5.<org.joda.time.DateTimeZone: boolean equals(java.lang.Object)>($r6);

        if $z0 != 0 goto label3;

     label2:
        return 0;

     label3:
        return 1;
    }
abstract long getApproxMillisAtEpochDividedByTwo() { 
// no body
} 
abstract long getAverageMillisPerMonth() { 
// no body
} 
abstract long getAverageMillisPerYear() { 
// no body
} 
abstract long getAverageMillisPerYearDividedByTwo() { 
// no body
} 
    long getDateMidnightMillis(int, int, int)
    {
        org.joda.time.chrono.BasicChronology r0;
        int $i0, $i1, $i2, $i3, $i4;
        org.joda.time.DateTimeFieldType $r1;
        long $l5;

        r0 := @this: org.joda.time.chrono.BasicChronology;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>();

        $i3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMinYear()>();

        $i4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMaxYear()>();

        staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r1, $i0, $i3, $i4);

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>();

        $i3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMaxMonth(int)>($i0);

        staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r1, $i1, 1, $i3);

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>();

        $i3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getDaysInYearMonth(int,int)>($i0, $i1);

        staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r1, $i2, 1, $i3);

        $l5 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>($i0, $i1, $i2);

        return $l5;
    }
    public long getDateTimeMillis(int, int, int, int) throws java.lang.IllegalArgumentException
    {
        org.joda.time.chrono.BasicChronology r0;
        int $i0, $i1, $i2, $i3;
        org.joda.time.Chronology $r1;
        long $l4, $l5;
        org.joda.time.DateTimeFieldType $r2;

        r0 := @this: org.joda.time.chrono.BasicChronology;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $r1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>();

        if $r1 == null goto label1;

        $l4 = virtualinvoke $r1.<org.joda.time.Chronology: long getDateTimeMillis(int,int,int,int)>($i0, $i1, $i2, $i3);

        return $l4;

     label1:
        $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfDay()>();

        staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r2, $i3, 0, 86399999);

        $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>($i0, $i1, $i2);

        $l5 = (long) $i3;

        $l4 = $l4 + $l5;

        return $l4;
    }
    public long getDateTimeMillis(int, int, int, int, int, int, int) throws java.lang.IllegalArgumentException
    {
        org.joda.time.chrono.BasicChronology r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        org.joda.time.Chronology $r1;
        long $l7, $l8;
        org.joda.time.DateTimeFieldType $r2;

        r0 := @this: org.joda.time.chrono.BasicChronology;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $i4 := @parameter4: int;

        $i5 := @parameter5: int;

        $i6 := @parameter6: int;

        $r1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>();

        if $r1 == null goto label1;

        $l7 = virtualinvoke $r1.<org.joda.time.Chronology: long getDateTimeMillis(int,int,int,int,int,int,int)>($i0, $i1, $i2, $i3, $i4, $i5, $i6);

        return $l7;

     label1:
        $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfDay()>();

        staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r2, $i3, 0, 23);

        $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfHour()>();

        staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r2, $i4, 0, 59);

        $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfMinute()>();

        staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r2, $i5, 0, 59);

        $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfSecond()>();

        staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r2, $i6, 0, 999);

        $l7 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>($i0, $i1, $i2);

        $i0 = 3600000 * $i3;

        $l8 = (long) $i0;

        $l7 = $l7 + $l8;

        $i0 = 60000 * $i4;

        $l8 = (long) $i0;

        $l7 = $l7 + $l8;

        $i0 = $i5 * 1000;

        $l8 = (long) $i0;

        $l7 = $l7 + $l8;

        $l8 = (long) $i6;

        $l7 = $l7 + $l8;

        return $l7;
    }
    int getDayOfMonth(long)
    {
        org.joda.time.chrono.BasicChronology r0;
        long $l0;
        int $i1, $i2;

        r0 := @this: org.joda.time.chrono.BasicChronology;

        $l0 := @parameter0: long;

        $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>($l0);

        $i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>($l0, $i1);

        $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>($l0, $i1, $i2);

        return $i1;
    }
    int getDayOfMonth(long, int)
    {
        org.joda.time.chrono.BasicChronology r0;
        long $l0;
        int $i1, $i2;

        r0 := @this: org.joda.time.chrono.BasicChronology;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        $i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>($l0, $i1);

        $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>($l0, $i1, $i2);

        return $i1;
    }
    int getDayOfMonth(long, int, int)
    {
        org.joda.time.chrono.BasicChronology r0;
        long $l0, $l3, $l4;
        int $i1, $i2;

        r0 := @this: org.joda.time.chrono.BasicChronology;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>($i1);

        $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>($i1, $i2);

        $l3 = $l3 + $l4;

        $l0 = $l0 - $l3;

        $l0 = $l0 / 86400000L;

        $i1 = (int) $l0;

        $i1 = $i1 + 1;

        return $i1;
    }
    int getDayOfWeek(long)
    {
        org.joda.time.chrono.BasicChronology r0;
        long $l0;
        byte $b1;
        int $i2;

        r0 := @this: org.joda.time.chrono.BasicChronology;

        $l0 := @parameter0: long;

        $b1 = $l0 cmp 0L;

        if $b1 < 0 goto label2;

        $l0 = $l0 / 86400000L;

     label1:
        $l0 = $l0 + 3L;

        $l0 = $l0 % 7L;

        $i2 = (int) $l0;

        $i2 = $i2 + 1;

        return $i2;

     label2:
        $l0 = $l0 - 86399999L;

        $l0 = $l0 / 86400000L;

        $b1 = $l0 cmp -3L;

        if $b1 >= 0 goto label1;

        $l0 = $l0 + 4L;

        $l0 = $l0 % 7L;

        $i2 = (int) $l0;

        $i2 = $i2 + 7;

        return $i2;
    }
    int getDayOfYear(long)
    {
        org.joda.time.chrono.BasicChronology r0;
        long $l0;
        int $i1;

        r0 := @this: org.joda.time.chrono.BasicChronology;

        $l0 := @parameter0: long;

        $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>($l0);

        $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getDayOfYear(long,int)>($l0, $i1);

        return $i1;
    }
    int getDayOfYear(long, int)
    {
        org.joda.time.chrono.BasicChronology r0;
        long $l0, $l2;
        int $i1;

        r0 := @this: org.joda.time.chrono.BasicChronology;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        $l2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>($i1);

        $l0 = $l0 - $l2;

        $l0 = $l0 / 86400000L;

        $i1 = (int) $l0;

        $i1 = $i1 + 1;

        return $i1;
    }
    int getDaysInMonthMax()
    {
        org.joda.time.chrono.BasicChronology r0;

        r0 := @this: org.joda.time.chrono.BasicChronology;

        return 31;
    }
abstract int getDaysInMonthMax(int) { 
// no body
} 
    int getDaysInMonthMax(long)
    {
        org.joda.time.chrono.BasicChronology r0;
        long $l0;
        int $i1, $i2;

        r0 := @this: org.joda.time.chrono.BasicChronology;

        $l0 := @parameter0: long;

        $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>($l0);

        $i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>($l0, $i1);

        $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getDaysInYearMonth(int,int)>($i1, $i2);

        return $i1;
    }
    int getDaysInMonthMaxForSet(long, int)
    {
        org.joda.time.chrono.BasicChronology r0;
        long $l0;
        int $i1;

        r0 := @this: org.joda.time.chrono.BasicChronology;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getDaysInMonthMax(long)>($l0);

        return $i1;
    }
    int getDaysInYear(int)
    {
        org.joda.time.chrono.BasicChronology r0;
        int $i0;
        boolean $z0;

        r0 := @this: org.joda.time.chrono.BasicChronology;

        $i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: boolean isLeapYear(int)>($i0);

        if $z0 == 0 goto label1;

        return 366;

     label1:
        return 365;
    }
    int getDaysInYearMax()
    {
        org.joda.time.chrono.BasicChronology r0;

        r0 := @this: org.joda.time.chrono.BasicChronology;

        return 366;
    }
abstract int getDaysInYearMonth(int, int) { 
// no body
} 
    long getFirstWeekOfYearMillis(int)
    {
        org.joda.time.chrono.BasicChronology r0;
        int $i0, $i2;
        long $l1, $l3;

        r0 := @this: org.joda.time.chrono.BasicChronology;

        $i0 := @parameter0: int;

        $l1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>($i0);

        $i0 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getDayOfWeek(long)>($l1);

        $i2 = r0.<org.joda.time.chrono.BasicChronology: int iMinDaysInFirstWeek>;

        $i2 = 8 - $i2;

        if $i0 <= $i2 goto label1;

        $i0 = 8 - $i0;

        $l3 = (long) $i0;

        $l3 = $l3 * 86400000L;

        $l1 = $l1 + $l3;

        return $l1;

     label1:
        $i0 = $i0 + -1;

        $l3 = (long) $i0;

        $l3 = $l3 * 86400000L;

        $l1 = $l1 - $l3;

        return $l1;
    }
    int getMaxMonth()
    {
        org.joda.time.chrono.BasicChronology r0;

        r0 := @this: org.joda.time.chrono.BasicChronology;

        return 12;
    }
    int getMaxMonth(int)
    {
        org.joda.time.chrono.BasicChronology r0;
        int $i0;

        r0 := @this: org.joda.time.chrono.BasicChronology;

        $i0 := @parameter0: int;

        $i0 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMaxMonth()>();

        return $i0;
    }
abstract int getMaxYear() { 
// no body
} 
    int getMillisOfDay(long)
    {
        org.joda.time.chrono.BasicChronology r0;
        long $l0;
        int $i1;
        byte $b2;

        r0 := @this: org.joda.time.chrono.BasicChronology;

        $l0 := @parameter0: long;

        $b2 = $l0 cmp 0L;

        if $b2 < 0 goto label1;

        $l0 = $l0 % 86400000L;

        $i1 = (int) $l0;

        return $i1;

     label1:
        $l0 = 1L + $l0;

        $l0 = $l0 % 86400000L;

        $i1 = (int) $l0;

        $i1 = 86399999 + $i1;

        return $i1;
    }
abstract int getMinYear() { 
// no body
} 
    public int getMinimumDaysInFirstWeek()
    {
        org.joda.time.chrono.BasicChronology r0;
        int i0;

        r0 := @this: org.joda.time.chrono.BasicChronology;

        i0 = r0.<org.joda.time.chrono.BasicChronology: int iMinDaysInFirstWeek>;

        return i0;
    }
    int getMonthOfYear(long)
    {
        org.joda.time.chrono.BasicChronology r0;
        long $l0;
        int $i1;

        r0 := @this: org.joda.time.chrono.BasicChronology;

        $l0 := @parameter0: long;

        $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>($l0);

        $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>($l0, $i1);

        return $i1;
    }
abstract int getMonthOfYear(long, int) { 
// no body
} 
abstract long getTotalMillisByYearMonth(int, int) { 
// no body
} 
    int getWeekOfWeekyear(long)
    {
        org.joda.time.chrono.BasicChronology r0;
        long $l0;
        int $i1;

        r0 := @this: org.joda.time.chrono.BasicChronology;

        $l0 := @parameter0: long;

        $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>($l0);

        $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getWeekOfWeekyear(long,int)>($l0, $i1);

        return $i1;
    }
    int getWeekOfWeekyear(long, int)
    {
        org.joda.time.chrono.BasicChronology r0;
        long $l0, $l2, $l4;
        int $i1;
        byte $b3;

        r0 := @this: org.joda.time.chrono.BasicChronology;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        $l2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getFirstWeekOfYearMillis(int)>($i1);

        $b3 = $l0 cmp $l2;

        if $b3 >= 0 goto label1;

        $i1 = $i1 + -1;

        $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getWeeksInYear(int)>($i1);

        return $i1;

     label1:
        $i1 = $i1 + 1;

        $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getFirstWeekOfYearMillis(int)>($i1);

        $b3 = $l0 cmp $l4;

        if $b3 < 0 goto label2;

        return 1;

     label2:
        $l0 = $l0 - $l2;

        $l0 = $l0 / 604800000L;

        $i1 = (int) $l0;

        $i1 = $i1 + 1;

        return $i1;
    }
    int getWeeksInYear(int)
    {
        org.joda.time.chrono.BasicChronology r0;
        int $i0;
        long $l1, $l2;

        r0 := @this: org.joda.time.chrono.BasicChronology;

        $i0 := @parameter0: int;

        $l1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getFirstWeekOfYearMillis(int)>($i0);

        $i0 = $i0 + 1;

        $l2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getFirstWeekOfYearMillis(int)>($i0);

        $l1 = $l2 - $l1;

        $l1 = $l1 / 604800000L;

        $i0 = (int) $l1;

        return $i0;
    }
    int getWeekyear(long)
    {
        org.joda.time.chrono.BasicChronology r0;
        long $l0;
        int $i1, $i2;

        r0 := @this: org.joda.time.chrono.BasicChronology;

        $l0 := @parameter0: long;

        $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>($l0);

        $i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getWeekOfWeekyear(long,int)>($l0, $i1);

        if $i2 != 1 goto label1;

        $l0 = 604800000L + $l0;

        $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>($l0);

        return $i1;

     label1:
        if $i2 <= 51 goto label2;

        $l0 = $l0 - 1209600000L;

        $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>($l0);

     label2:
        return $i1;
    }
    int getYear(long)
    {
        org.joda.time.chrono.BasicChronology r0;
        long $l0, $l1, $l2, $l3, $l4;
        byte $b5;
        int $i6;
        boolean $z0;

        r0 := @this: org.joda.time.chrono.BasicChronology;

        $l0 := @parameter0: long;

        $l1 = 31536000000L;

        $l2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getAverageMillisPerYearDividedByTwo()>();

        $l3 = $l0 >> 1;

        $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getApproxMillisAtEpochDividedByTwo()>();

        $l3 = $l3 + $l4;

        $b5 = $l3 cmp 0L;

        if $b5 >= 0 goto label1;

        $l3 = $l3 - $l2;

        $l3 = $l3 + 1L;

     label1:
        $l2 = $l3 / $l2;

        $i6 = (int) $l2;

        $l2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>($i6);

        $l3 = $l0 - $l2;

        $b5 = $l3 cmp 0L;

        if $b5 >= 0 goto label2;

        $i6 = $i6 + -1;

        return $i6;

     label2:
        $b5 = $l3 cmp 31536000000L;

        if $b5 < 0 goto label4;

        $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: boolean isLeapYear(int)>($i6);

        if $z0 == 0 goto label3;

        $l1 = 31622400000L;

     label3:
        $l1 = $l1 + $l2;

        $b5 = $l1 cmp $l0;

        if $b5 > 0 goto label4;

        $i6 = $i6 + 1;

     label4:
        return $i6;
    }
abstract long getYearDifference(long, long) { 
// no body
} 
    long getYearMillis(int)
    {
        org.joda.time.chrono.BasicChronology r0;
        int $i0;
        org.joda.time.chrono.BasicChronology$YearInfo $r1;
        long l1;

        r0 := @this: org.joda.time.chrono.BasicChronology;

        $i0 := @parameter0: int;

        $r1 = specialinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo getYearInfo(int)>($i0);

        l1 = $r1.<org.joda.time.chrono.BasicChronology$YearInfo: long iFirstDayMillis>;

        return l1;
    }
    long getYearMonthDayMillis(int, int, int)
    {
        org.joda.time.chrono.BasicChronology r0;
        int $i0, $i1, $i2;
        long $l3, $l4;

        r0 := @this: org.joda.time.chrono.BasicChronology;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>($i0);

        $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>($i0, $i1);

        $l3 = $l3 + $l4;

        $i0 = $i2 + -1;

        $l4 = (long) $i0;

        $l4 = $l4 * 86400000L;

        $l3 = $l3 + $l4;

        return $l3;
    }
    long getYearMonthMillis(int, int)
    {
        org.joda.time.chrono.BasicChronology r0;
        int $i0, $i1;
        long $l2, $l3;

        r0 := @this: org.joda.time.chrono.BasicChronology;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $l2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>($i0);

        $l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>($i0, $i1);

        $l2 = $l2 + $l3;

        return $l2;
    }
    public org.joda.time.DateTimeZone getZone()
    {
        org.joda.time.chrono.BasicChronology r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeZone $r2;

        r0 := @this: org.joda.time.chrono.BasicChronology;

        $r1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>();

        if $r1 == null goto label1;

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>();

        return $r2;

     label1:
        $r2 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        return $r2;
    }
    public int hashCode()
    {
        org.joda.time.chrono.BasicChronology r0;
        java.lang.Class $r1;
        java.lang.String $r2;
        int $i0, $i1;
        org.joda.time.DateTimeZone $r3;

        r0 := @this: org.joda.time.chrono.BasicChronology;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $i0 = virtualinvoke $r2.<java.lang.String: int hashCode()>();

        $i0 = $i0 * 11;

        $r3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeZone getZone()>();

        $i1 = virtualinvoke $r3.<org.joda.time.DateTimeZone: int hashCode()>();

        $i0 = $i0 + $i1;

        $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMinimumDaysInFirstWeek()>();

        $i0 = $i0 + $i1;

        return $i0;
    }
    boolean isLeapDay(long)
    {
        org.joda.time.chrono.BasicChronology r0;
        long $l0;

        r0 := @this: org.joda.time.chrono.BasicChronology;

        $l0 := @parameter0: long;

        return 0;
    }
abstract boolean isLeapYear(int) { 
// no body
} 
abstract long setYear(long, int) { 
// no body
} 
    public java.lang.String toString()
    {
        org.joda.time.chrono.BasicChronology r0;
        java.lang.StringBuilder $r1;
        java.lang.Class $r2;
        java.lang.String $r3, $r4;
        int $i0;
        org.joda.time.DateTimeZone $r5;

        r0 := @this: org.joda.time.chrono.BasicChronology;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>(60);

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r4 = $r3;

        $i0 = virtualinvoke $r3.<java.lang.String: int lastIndexOf(int)>(46);

        if $i0 < 0 goto label1;

        $i0 = $i0 + 1;

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int)>($i0);

     label1:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        $r5 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeZone getZone()>();

        if $r5 == null goto label2;

        $r3 = virtualinvoke $r5.<org.joda.time.DateTimeZone: java.lang.String getID()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

     label2:
        $i0 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMinimumDaysInFirstWeek()>();

        if $i0 == 4 goto label3;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",mdfw=");

        $i0 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMinimumDaysInFirstWeek()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

     label3:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }
