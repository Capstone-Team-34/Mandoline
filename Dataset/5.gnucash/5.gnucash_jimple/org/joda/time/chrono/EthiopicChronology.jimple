org.joda.time.chrono.EthiopicChronology extends org.joda.time.chrono.BasicFixedMonthChronology
public static final int EE
private static final org.joda.time.DateTimeField ERA_FIELD
private static final org.joda.time.chrono.EthiopicChronology INSTANCE_UTC
private static final int MAX_YEAR
private static final int MIN_YEAR
private static final java.util.concurrent.ConcurrentHashMap cCache
private static final long serialVersionUID
    static void <clinit>()
    {
        org.joda.time.chrono.EthiopicChronology $r0;
        org.joda.time.chrono.BasicSingleEraDateTimeField $r1;
        java.util.concurrent.ConcurrentHashMap $r2;
        org.joda.time.DateTimeZone $r3;

        $r1 = new org.joda.time.chrono.BasicSingleEraDateTimeField;

        specialinvoke $r1.<org.joda.time.chrono.BasicSingleEraDateTimeField: void <init>(java.lang.String)>("EE");

        <org.joda.time.chrono.EthiopicChronology: org.joda.time.DateTimeField ERA_FIELD> = $r1;

        $r2 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r2.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        <org.joda.time.chrono.EthiopicChronology: java.util.concurrent.ConcurrentHashMap cCache> = $r2;

        $r3 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        $r0 = staticinvoke <org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone)>($r3);

        <org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology INSTANCE_UTC> = $r0;

        return;
    }
    void <init>(org.joda.time.Chronology, java.lang.Object, int)
    {
        org.joda.time.chrono.EthiopicChronology r0;
        org.joda.time.Chronology $r1;
        java.lang.Object $r2;
        int $i0;

        r0 := @this: org.joda.time.chrono.EthiopicChronology;

        $r1 := @parameter0: org.joda.time.Chronology;

        $r2 := @parameter1: java.lang.Object;

        $i0 := @parameter2: int;

        specialinvoke r0.<org.joda.time.chrono.BasicFixedMonthChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>($r1, $r2, $i0);

        return;
    }
    public static org.joda.time.chrono.EthiopicChronology getInstance()
    {
        org.joda.time.DateTimeZone $r0;
        org.joda.time.chrono.EthiopicChronology $r1;

        $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>();

        $r1 = staticinvoke <org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>($r0, 4);

        return $r1;
    }
    public static org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone)
    {
        org.joda.time.DateTimeZone $r0;
        org.joda.time.chrono.EthiopicChronology $r1;

        $r0 := @parameter0: org.joda.time.DateTimeZone;

        $r1 = staticinvoke <org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>($r0, 4);

        return $r1;
    }
    public static org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone, int)
    {
        int $i0, $i1;
        org.joda.time.chrono.EthiopicChronology $r0, $r8;
        org.joda.time.DateTimeZone $r1, $r6;
        java.util.concurrent.ConcurrentHashMap $r2;
        java.lang.Object $r3;
        org.joda.time.chrono.EthiopicChronology[] $r4, $r5;
        org.joda.time.DateTime $r7;
        org.joda.time.chrono.LimitChronology $r9;
        java.lang.ArrayIndexOutOfBoundsException $r10;
        java.lang.IllegalArgumentException $r11;
        java.lang.StringBuilder $r12;
        java.lang.String $r13;
        org.joda.time.chrono.ZonedChronology $r14;
        java.lang.Throwable $r15;

        $r1 := @parameter0: org.joda.time.DateTimeZone;

        $i0 := @parameter1: int;

        if $r1 != null goto label01;

        $r1 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>();

     label01:
        $r2 = <org.joda.time.chrono.EthiopicChronology: java.util.concurrent.ConcurrentHashMap cCache>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r1);

        $r4 = (org.joda.time.chrono.EthiopicChronology[]) $r3;

        if $r4 != null goto label14;

        $r4 = newarray (org.joda.time.chrono.EthiopicChronology)[7];

        $r2 = <org.joda.time.chrono.EthiopicChronology: java.util.concurrent.ConcurrentHashMap cCache>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>($r1, $r4);

        $r5 = (org.joda.time.chrono.EthiopicChronology[]) $r3;

        if $r5 == null goto label13;

        $r4 = $r5;

     label02:
        $i1 = $i0 + -1;

     label03:
        $r0 = $r4[$i1];

     label04:
        if $r0 != null goto label15;

        entermonitor $r4;

        $i1 = $i0 + -1;

     label05:
        $r0 = $r4[$i1];

        if $r0 != null goto label07;

        $r6 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        if $r1 != $r6 goto label10;

        $r0 = new org.joda.time.chrono.EthiopicChronology;

        specialinvoke $r0.<org.joda.time.chrono.EthiopicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>(null, null, $i0);

        $r7 = new org.joda.time.DateTime;

        specialinvoke $r7.<org.joda.time.DateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>(1, 1, 1, 0, 0, 0, 0, $r0);

        $r8 = new org.joda.time.chrono.EthiopicChronology;

        $r9 = staticinvoke <org.joda.time.chrono.LimitChronology: org.joda.time.chrono.LimitChronology getInstance(org.joda.time.Chronology,org.joda.time.ReadableDateTime,org.joda.time.ReadableDateTime)>($r0, $r7, null);

        specialinvoke $r8.<org.joda.time.chrono.EthiopicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>($r9, null, $i0);

        $r0 = $r8;

     label06:
        $i0 = $i0 + -1;

        $r4[$i0] = $r0;

     label07:
        exitmonitor $r4;

     label08:
        return $r0;

     label09:
        $r10 := @caughtexception;

        $r11 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid min days in first week: ");

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r11;

     label10:
        $r6 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        $r8 = staticinvoke <org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>($r6, $i0);

        $r0 = new org.joda.time.chrono.EthiopicChronology;

        $r14 = staticinvoke <org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>($r8, $r1);

        specialinvoke $r0.<org.joda.time.chrono.EthiopicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>($r14, null, $i0);

        goto label06;

     label11:
        $r15 := @caughtexception;

        exitmonitor $r4;

     label12:
        throw $r15;

     label13:
        goto label02;

     label14:
        goto label02;

     label15:
        return $r0;

        catch java.lang.ArrayIndexOutOfBoundsException from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label08 with label11;
        catch java.lang.Throwable from label10 to label12 with label11;
    }
    public static org.joda.time.chrono.EthiopicChronology getInstanceUTC()
    {
        org.joda.time.chrono.EthiopicChronology r0;

        r0 = <org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology INSTANCE_UTC>;

        return r0;
    }
    private java.lang.Object readResolve()
    {
        org.joda.time.chrono.EthiopicChronology r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeZone $r2;
        int $i0;

        r0 := @this: org.joda.time.chrono.EthiopicChronology;

        $r1 = virtualinvoke r0.<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology getBase()>();

        if $r1 != null goto label1;

        $r2 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        $i0 = virtualinvoke r0.<org.joda.time.chrono.EthiopicChronology: int getMinimumDaysInFirstWeek()>();

        r0 = staticinvoke <org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>($r2, $i0);

        return r0;

     label1:
        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>();

        $i0 = virtualinvoke r0.<org.joda.time.chrono.EthiopicChronology: int getMinimumDaysInFirstWeek()>();

        r0 = staticinvoke <org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>($r2, $i0);

        return r0;
    }
    protected void assemble(org.joda.time.chrono.AssembledChronology$Fields)
    {
        org.joda.time.chrono.EthiopicChronology r0;
        org.joda.time.chrono.AssembledChronology$Fields $r1;
        org.joda.time.Chronology $r2;
        org.joda.time.field.SkipDateTimeField $r3;
        org.joda.time.DateTimeField $r4;
        org.joda.time.chrono.BasicMonthOfYearDateTimeField $r5;
        org.joda.time.DurationField $r6;

        r0 := @this: org.joda.time.chrono.EthiopicChronology;

        $r1 := @parameter0: org.joda.time.chrono.AssembledChronology$Fields;

        $r2 = virtualinvoke r0.<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology getBase()>();

        if $r2 != null goto label1;

        specialinvoke r0.<org.joda.time.chrono.BasicFixedMonthChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>($r1);

        $r3 = new org.joda.time.field.SkipDateTimeField;

        $r4 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year>;

        specialinvoke $r3.<org.joda.time.field.SkipDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField)>(r0, $r4);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year> = $r3;

        $r3 = new org.joda.time.field.SkipDateTimeField;

        $r4 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear>;

        specialinvoke $r3.<org.joda.time.field.SkipDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField)>(r0, $r4);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear> = $r3;

        $r4 = <org.joda.time.chrono.EthiopicChronology: org.joda.time.DateTimeField ERA_FIELD>;

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era> = $r4;

        $r5 = new org.joda.time.chrono.BasicMonthOfYearDateTimeField;

        specialinvoke $r5.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,int)>(r0, 13);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear> = $r5;

        $r4 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear>;

        $r6 = virtualinvoke $r4.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>();

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField months> = $r6;

     label1:
        return;
    }
    long calculateFirstDayOfYearMillis(int)
    {
        org.joda.time.chrono.EthiopicChronology r0;
        int $i0, $i1, $i2;
        boolean $z0;
        long $l3, $l4;

        r0 := @this: org.joda.time.chrono.EthiopicChronology;

        $i0 := @parameter0: int;

        $i1 = $i0 + -1963;

        if $i1 > 0 goto label2;

        $i0 = $i1 + 3;

        $i2 = $i0 >> 2;

     label1:
        $l3 = (long) $i1;

        $l3 = $l3 * 365L;

        $l4 = (long) $i2;

        $l3 = $l4 + $l3;

        $l3 = $l3 * 86400000L;

        $l3 = $l3 + 21859200000L;

        return $l3;

     label2:
        $i2 = $i1 >> 2;

        $z0 = virtualinvoke r0.<org.joda.time.chrono.EthiopicChronology: boolean isLeapYear(int)>($i0);

        if $z0 != 0 goto label1;

        $i2 = $i2 + 1;

        goto label1;
    }
    long getApproxMillisAtEpochDividedByTwo()
    {
        org.joda.time.chrono.EthiopicChronology r0;

        r0 := @this: org.joda.time.chrono.EthiopicChronology;

        return 30962844000000L;
    }
    int getMaxYear()
    {
        org.joda.time.chrono.EthiopicChronology r0;

        r0 := @this: org.joda.time.chrono.EthiopicChronology;

        return 292272984;
    }
    int getMinYear()
    {
        org.joda.time.chrono.EthiopicChronology r0;

        r0 := @this: org.joda.time.chrono.EthiopicChronology;

        return -292269337;
    }
    boolean isLeapDay(long)
    {
        org.joda.time.chrono.EthiopicChronology r0;
        long $l0;
        org.joda.time.DateTimeField $r1;
        int $i1;
        boolean $z0;

        r0 := @this: org.joda.time.chrono.EthiopicChronology;

        $l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<org.joda.time.chrono.EthiopicChronology: org.joda.time.DateTimeField dayOfMonth()>();

        $i1 = virtualinvoke $r1.<org.joda.time.DateTimeField: int get(long)>($l0);

        if $i1 != 6 goto label1;

        $r1 = virtualinvoke r0.<org.joda.time.chrono.EthiopicChronology: org.joda.time.DateTimeField monthOfYear()>();

        $z0 = virtualinvoke $r1.<org.joda.time.DateTimeField: boolean isLeap(long)>($l0);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public org.joda.time.Chronology withUTC()
    {
        org.joda.time.chrono.EthiopicChronology r0;

        r0 := @this: org.joda.time.chrono.EthiopicChronology;

        r0 = <org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology INSTANCE_UTC>;

        return r0;
    }
    public org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)
    {
        org.joda.time.chrono.EthiopicChronology r0;
        org.joda.time.DateTimeZone $r1, $r2;

        r0 := @this: org.joda.time.chrono.EthiopicChronology;

        $r1 := @parameter0: org.joda.time.DateTimeZone;

        if $r1 != null goto label1;

        $r1 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>();

     label1:
        $r2 = virtualinvoke r0.<org.joda.time.chrono.EthiopicChronology: org.joda.time.DateTimeZone getZone()>();

        if $r1 != $r2 goto label2;

        return r0;

     label2:
        r0 = staticinvoke <org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone)>($r1);

        return r0;
    }
