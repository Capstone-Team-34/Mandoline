org.joda.time.chrono.IslamicChronology extends org.joda.time.chrono.BasicChronology
public static final int AH
private static final int CYCLE
private static final org.joda.time.DateTimeField ERA_FIELD
private static final org.joda.time.chrono.IslamicChronology INSTANCE_UTC
public static final org.joda.time.chrono.IslamicChronology$LeapYearPatternType LEAP_YEAR_15_BASED
public static final org.joda.time.chrono.IslamicChronology$LeapYearPatternType LEAP_YEAR_16_BASED
public static final org.joda.time.chrono.IslamicChronology$LeapYearPatternType LEAP_YEAR_HABASH_AL_HASIB
public static final org.joda.time.chrono.IslamicChronology$LeapYearPatternType LEAP_YEAR_INDIAN
private static final int LONG_MONTH_LENGTH
private static final int MAX_YEAR
private static final long MILLIS_PER_CYCLE
private static final long MILLIS_PER_LONG_MONTH
private static final long MILLIS_PER_LONG_YEAR
private static final long MILLIS_PER_MONTH
private static final long MILLIS_PER_MONTH_PAIR
private static final long MILLIS_PER_SHORT_YEAR
private static final long MILLIS_PER_YEAR
private static final long MILLIS_YEAR_1
private static final int MIN_YEAR
private static final int MONTH_PAIR_LENGTH
private static final int SHORT_MONTH_LENGTH
private static final java.util.concurrent.ConcurrentHashMap cCache
private static final long serialVersionUID
private final org.joda.time.chrono.IslamicChronology$LeapYearPatternType iLeapYears
    static void <clinit>()
    {
        org.joda.time.chrono.IslamicChronology $r0;
        org.joda.time.chrono.BasicSingleEraDateTimeField $r1;
        org.joda.time.chrono.IslamicChronology$LeapYearPatternType $r2;
        java.util.concurrent.ConcurrentHashMap $r3;
        org.joda.time.DateTimeZone $r4;

        $r1 = new org.joda.time.chrono.BasicSingleEraDateTimeField;

        specialinvoke $r1.<org.joda.time.chrono.BasicSingleEraDateTimeField: void <init>(java.lang.String)>("AH");

        <org.joda.time.chrono.IslamicChronology: org.joda.time.DateTimeField ERA_FIELD> = $r1;

        $r2 = new org.joda.time.chrono.IslamicChronology$LeapYearPatternType;

        specialinvoke $r2.<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: void <init>(int,int)>(0, 623158436);

        <org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology$LeapYearPatternType LEAP_YEAR_15_BASED> = $r2;

        $r2 = new org.joda.time.chrono.IslamicChronology$LeapYearPatternType;

        specialinvoke $r2.<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: void <init>(int,int)>(1, 623191204);

        <org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology$LeapYearPatternType LEAP_YEAR_16_BASED> = $r2;

        $r2 = new org.joda.time.chrono.IslamicChronology$LeapYearPatternType;

        specialinvoke $r2.<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: void <init>(int,int)>(2, 690562340);

        <org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology$LeapYearPatternType LEAP_YEAR_INDIAN> = $r2;

        $r2 = new org.joda.time.chrono.IslamicChronology$LeapYearPatternType;

        specialinvoke $r2.<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: void <init>(int,int)>(3, 153692453);

        <org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology$LeapYearPatternType LEAP_YEAR_HABASH_AL_HASIB> = $r2;

        $r3 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r3.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        <org.joda.time.chrono.IslamicChronology: java.util.concurrent.ConcurrentHashMap cCache> = $r3;

        $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        $r0 = staticinvoke <org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone)>($r4);

        <org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology INSTANCE_UTC> = $r0;

        return;
    }
    void <init>(org.joda.time.Chronology, java.lang.Object, org.joda.time.chrono.IslamicChronology$LeapYearPatternType)
    {
        org.joda.time.chrono.IslamicChronology r0;
        org.joda.time.Chronology $r1;
        java.lang.Object $r2;
        org.joda.time.chrono.IslamicChronology$LeapYearPatternType $r3;

        r0 := @this: org.joda.time.chrono.IslamicChronology;

        $r1 := @parameter0: org.joda.time.Chronology;

        $r2 := @parameter1: java.lang.Object;

        $r3 := @parameter2: org.joda.time.chrono.IslamicChronology$LeapYearPatternType;

        specialinvoke r0.<org.joda.time.chrono.BasicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>($r1, $r2, 4);

        r0.<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology$LeapYearPatternType iLeapYears> = $r3;

        return;
    }
    public static org.joda.time.chrono.IslamicChronology getInstance()
    {
        org.joda.time.chrono.IslamicChronology$LeapYearPatternType $r0;
        org.joda.time.DateTimeZone $r1;
        org.joda.time.chrono.IslamicChronology $r2;

        $r1 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>();

        $r0 = <org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology$LeapYearPatternType LEAP_YEAR_16_BASED>;

        $r2 = staticinvoke <org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>($r1, $r0);

        return $r2;
    }
    public static org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone)
    {
        org.joda.time.DateTimeZone $r0;
        org.joda.time.chrono.IslamicChronology $r1;
        org.joda.time.chrono.IslamicChronology$LeapYearPatternType $r2;

        $r0 := @parameter0: org.joda.time.DateTimeZone;

        $r2 = <org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology$LeapYearPatternType LEAP_YEAR_16_BASED>;

        $r1 = staticinvoke <org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>($r0, $r2);

        return $r1;
    }
    public static org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone, org.joda.time.chrono.IslamicChronology$LeapYearPatternType)
    {
        org.joda.time.chrono.IslamicChronology$LeapYearPatternType $r0;
        org.joda.time.chrono.IslamicChronology $r1, $r9;
        org.joda.time.DateTimeZone $r2, $r7;
        java.util.concurrent.ConcurrentHashMap $r3;
        java.lang.Object $r4;
        org.joda.time.chrono.IslamicChronology[] $r5, $r6;
        byte $b0;
        org.joda.time.DateTime $r8;
        org.joda.time.chrono.LimitChronology $r10;
        org.joda.time.chrono.ZonedChronology $r11;
        java.lang.Throwable $r12;

        $r2 := @parameter0: org.joda.time.DateTimeZone;

        $r0 := @parameter1: org.joda.time.chrono.IslamicChronology$LeapYearPatternType;

        if $r2 != null goto label01;

        $r2 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>();

     label01:
        $r3 = <org.joda.time.chrono.IslamicChronology: java.util.concurrent.ConcurrentHashMap cCache>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r2);

        $r5 = (org.joda.time.chrono.IslamicChronology[]) $r4;

        if $r5 != null goto label11;

        $r5 = newarray (org.joda.time.chrono.IslamicChronology)[4];

        $r3 = <org.joda.time.chrono.IslamicChronology: java.util.concurrent.ConcurrentHashMap cCache>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>($r2, $r5);

        $r6 = (org.joda.time.chrono.IslamicChronology[]) $r4;

        if $r6 == null goto label10;

        $r5 = $r6;

     label02:
        $b0 = $r0.<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: byte index>;

        $r1 = $r5[$b0];

        if $r1 != null goto label12;

        entermonitor $r5;

     label03:
        $b0 = $r0.<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: byte index>;

        $r1 = $r5[$b0];

        if $r1 != null goto label05;

        $r7 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        if $r2 != $r7 goto label07;

        $r1 = new org.joda.time.chrono.IslamicChronology;

        specialinvoke $r1.<org.joda.time.chrono.IslamicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>(null, null, $r0);

        $r8 = new org.joda.time.DateTime;

        specialinvoke $r8.<org.joda.time.DateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>(1, 1, 1, 0, 0, 0, 0, $r1);

        $r9 = new org.joda.time.chrono.IslamicChronology;

        $r10 = staticinvoke <org.joda.time.chrono.LimitChronology: org.joda.time.chrono.LimitChronology getInstance(org.joda.time.Chronology,org.joda.time.ReadableDateTime,org.joda.time.ReadableDateTime)>($r1, $r8, null);

        specialinvoke $r9.<org.joda.time.chrono.IslamicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>($r10, null, $r0);

        $r1 = $r9;

     label04:
        $b0 = $r0.<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: byte index>;

        $r5[$b0] = $r1;

     label05:
        exitmonitor $r5;

     label06:
        return $r1;

     label07:
        $r7 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        $r9 = staticinvoke <org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>($r7, $r0);

        $r1 = new org.joda.time.chrono.IslamicChronology;

        $r11 = staticinvoke <org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>($r9, $r2);

        specialinvoke $r1.<org.joda.time.chrono.IslamicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>($r11, null, $r0);

        goto label04;

     label08:
        $r12 := @caughtexception;

        exitmonitor $r5;

     label09:
        throw $r12;

     label10:
        goto label02;

     label11:
        goto label02;

     label12:
        return $r1;

        catch java.lang.Throwable from label03 to label06 with label08;
        catch java.lang.Throwable from label07 to label09 with label08;
    }
    public static org.joda.time.chrono.IslamicChronology getInstanceUTC()
    {
        org.joda.time.chrono.IslamicChronology r0;

        r0 = <org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology INSTANCE_UTC>;

        return r0;
    }
    private java.lang.Object readResolve()
    {
        org.joda.time.chrono.IslamicChronology r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeZone $r2;

        r0 := @this: org.joda.time.chrono.IslamicChronology;

        $r1 = virtualinvoke r0.<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology getBase()>();

        if $r1 != null goto label1;

        r0 = staticinvoke <org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstanceUTC()>();

        return r0;

     label1:
        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>();

        r0 = staticinvoke <org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone)>($r2);

        return r0;
    }
    protected void assemble(org.joda.time.chrono.AssembledChronology$Fields)
    {
        org.joda.time.chrono.IslamicChronology r0;
        org.joda.time.chrono.AssembledChronology$Fields $r1;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;
        org.joda.time.chrono.BasicMonthOfYearDateTimeField $r4;
        org.joda.time.DurationField $r5;

        r0 := @this: org.joda.time.chrono.IslamicChronology;

        $r1 := @parameter0: org.joda.time.chrono.AssembledChronology$Fields;

        $r2 = virtualinvoke r0.<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology getBase()>();

        if $r2 != null goto label1;

        specialinvoke r0.<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>($r1);

        $r3 = <org.joda.time.chrono.IslamicChronology: org.joda.time.DateTimeField ERA_FIELD>;

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era> = $r3;

        $r4 = new org.joda.time.chrono.BasicMonthOfYearDateTimeField;

        specialinvoke $r4.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,int)>(r0, 12);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear> = $r4;

        $r3 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear>;

        $r5 = virtualinvoke $r3.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>();

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField months> = $r5;

     label1:
        return;
    }
    long calculateFirstDayOfYearMillis(int)
    {
        org.joda.time.chrono.IslamicChronology r0;
        int $i0, $i1;
        java.lang.ArithmeticException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        long $l2, $l3;
        boolean $z0;

        r0 := @this: org.joda.time.chrono.IslamicChronology;

        $i0 := @parameter0: int;

        if $i0 <= 292271022 goto label1;

        $r1 = new java.lang.ArithmeticException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Year is too large: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" > ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(292271022);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.ArithmeticException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label1:
        if $i0 >= -292269337 goto label2;

        $r1 = new java.lang.ArithmeticException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Year is too small: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" < ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(-292269337);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.ArithmeticException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label2:
        $i0 = $i0 + -1;

        $i1 = $i0 / 30;

        $l2 = (long) $i1;

        $l2 = $l2 * 918518400000L;

        $i0 = $i0 % 30;

        $i0 = $i0 + 1;

        $l2 = $l2 + -42521587200000L;

        $i1 = 1;

     label3:
        if $i1 >= $i0 goto label6;

        $z0 = virtualinvoke r0.<org.joda.time.chrono.IslamicChronology: boolean isLeapYear(int)>($i1);

        if $z0 == 0 goto label5;

        $l3 = 30672000000L;

     label4:
        $l2 = $l2 + $l3;

        $i1 = $i1 + 1;

        goto label3;

     label5:
        $l3 = 30585600000L;

        goto label4;

     label6:
        return $l2;
    }
    public boolean equals(java.lang.Object)
    {
        org.joda.time.chrono.IslamicChronology r0, $r2;
        java.lang.Object $r1;
        boolean $z0;
        org.joda.time.chrono.IslamicChronology$LeapYearPatternType $r3;
        byte $b0, $b1;

        r0 := @this: org.joda.time.chrono.IslamicChronology;

        $r1 := @parameter0: java.lang.Object;

        if r0 != $r1 goto label1;

        return 1;

     label1:
        $z0 = $r1 instanceof org.joda.time.chrono.IslamicChronology;

        if $z0 == 0 goto label4;

        $r2 = (org.joda.time.chrono.IslamicChronology) $r1;

        $r3 = virtualinvoke r0.<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology$LeapYearPatternType getLeapYearPatternType()>();

        $b0 = $r3.<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: byte index>;

        $r3 = virtualinvoke $r2.<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology$LeapYearPatternType getLeapYearPatternType()>();

        $b1 = $r3.<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: byte index>;

        if $b0 != $b1 goto label3;

        $z0 = specialinvoke r0.<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label3;

        $z0 = 1;

     label2:
        return $z0;

     label3:
        $z0 = 0;

        goto label2;

     label4:
        return 0;
    }
    long getApproxMillisAtEpochDividedByTwo()
    {
        org.joda.time.chrono.IslamicChronology r0;

        r0 := @this: org.joda.time.chrono.IslamicChronology;

        return 21260793600000L;
    }
    long getAverageMillisPerMonth()
    {
        org.joda.time.chrono.IslamicChronology r0;

        r0 := @this: org.joda.time.chrono.IslamicChronology;

        return 2551440384L;
    }
    long getAverageMillisPerYear()
    {
        org.joda.time.chrono.IslamicChronology r0;

        r0 := @this: org.joda.time.chrono.IslamicChronology;

        return 30617280288L;
    }
    long getAverageMillisPerYearDividedByTwo()
    {
        org.joda.time.chrono.IslamicChronology r0;

        r0 := @this: org.joda.time.chrono.IslamicChronology;

        return 15308640144L;
    }
    int getDayOfMonth(long)
    {
        org.joda.time.chrono.IslamicChronology r0;
        long $l0;
        int $i1;

        r0 := @this: org.joda.time.chrono.IslamicChronology;

        $l0 := @parameter0: long;

        $i1 = virtualinvoke r0.<org.joda.time.chrono.IslamicChronology: int getDayOfYear(long)>($l0);

        $i1 = $i1 + -1;

        if $i1 != 354 goto label1;

        return 30;

     label1:
        $i1 = $i1 % 59;

        $i1 = $i1 % 30;

        $i1 = $i1 + 1;

        return $i1;
    }
    int getDaysInMonthMax()
    {
        org.joda.time.chrono.IslamicChronology r0;

        r0 := @this: org.joda.time.chrono.IslamicChronology;

        return 30;
    }
    int getDaysInMonthMax(int)
    {
        org.joda.time.chrono.IslamicChronology r0;
        int $i0;

        r0 := @this: org.joda.time.chrono.IslamicChronology;

        $i0 := @parameter0: int;

        if $i0 != 12 goto label1;

        return 30;

     label1:
        $i0 = $i0 + -1;

        $i0 = $i0 % 2;

        if $i0 == 0 goto label2;

        return 29;

     label2:
        return 30;
    }
    int getDaysInYear(int)
    {
        org.joda.time.chrono.IslamicChronology r0;
        int $i0;
        boolean $z0;

        r0 := @this: org.joda.time.chrono.IslamicChronology;

        $i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<org.joda.time.chrono.IslamicChronology: boolean isLeapYear(int)>($i0);

        if $z0 == 0 goto label1;

        return 355;

     label1:
        return 354;
    }
    int getDaysInYearMax()
    {
        org.joda.time.chrono.IslamicChronology r0;

        r0 := @this: org.joda.time.chrono.IslamicChronology;

        return 355;
    }
    int getDaysInYearMonth(int, int)
    {
        org.joda.time.chrono.IslamicChronology r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.joda.time.chrono.IslamicChronology;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        if $i1 != 12 goto label1;

        $z0 = virtualinvoke r0.<org.joda.time.chrono.IslamicChronology: boolean isLeapYear(int)>($i0);

        if $z0 == 0 goto label1;

        return 30;

     label1:
        $i0 = $i1 + -1;

        $i0 = $i0 % 2;

        if $i0 == 0 goto label2;

        return 29;

     label2:
        return 30;
    }
    public org.joda.time.chrono.IslamicChronology$LeapYearPatternType getLeapYearPatternType()
    {
        org.joda.time.chrono.IslamicChronology r0;
        org.joda.time.chrono.IslamicChronology$LeapYearPatternType r1;

        r0 := @this: org.joda.time.chrono.IslamicChronology;

        r1 = r0.<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology$LeapYearPatternType iLeapYears>;

        return r1;
    }
    int getMaxYear()
    {
        org.joda.time.chrono.IslamicChronology r0;

        r0 := @this: org.joda.time.chrono.IslamicChronology;

        return 292271022;
    }
    int getMinYear()
    {
        org.joda.time.chrono.IslamicChronology r0;

        r0 := @this: org.joda.time.chrono.IslamicChronology;

        return 1;
    }
    int getMonthOfYear(long, int)
    {
        org.joda.time.chrono.IslamicChronology r0;
        long $l0, $l2;
        int $i1;

        r0 := @this: org.joda.time.chrono.IslamicChronology;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        $l2 = virtualinvoke r0.<org.joda.time.chrono.IslamicChronology: long getYearMillis(int)>($i1);

        $l0 = $l0 - $l2;

        $l0 = $l0 / 86400000L;

        $i1 = (int) $l0;

        if $i1 != 354 goto label1;

        return 12;

     label1:
        $i1 = $i1 * 2;

        $i1 = $i1 / 59;

        $i1 = $i1 + 1;

        return $i1;
    }
    long getTotalMillisByYearMonth(int, int)
    {
        org.joda.time.chrono.IslamicChronology r0;
        int $i0, $i1;
        long $l2;

        r0 := @this: org.joda.time.chrono.IslamicChronology;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i1 = $i1 + -1;

        $i0 = $i1 % 2;

        if $i0 != 1 goto label1;

        $i0 = $i1 / 2;

        $l2 = (long) $i0;

        $l2 = $l2 * 5097600000L;

        $l2 = $l2 + 2592000000L;

        return $l2;

     label1:
        $i0 = $i1 / 2;

        $l2 = (long) $i0;

        $l2 = $l2 * 5097600000L;

        return $l2;
    }
    int getYear(long)
    {
        org.joda.time.chrono.IslamicChronology r0;
        long $l0, $l2;
        byte $b1;
        int $i3;
        boolean $z0;

        r0 := @this: org.joda.time.chrono.IslamicChronology;

        $l0 := @parameter0: long;

        $l0 = $l0 - -42521587200000L;

        $l2 = $l0 / 918518400000L;

        $l0 = $l0 % 918518400000L;

        $l2 = 30L * $l2;

        $l2 = $l2 + 1L;

        $i3 = (int) $l2;

        $z0 = virtualinvoke r0.<org.joda.time.chrono.IslamicChronology: boolean isLeapYear(int)>($i3);

        if $z0 == 0 goto label2;

        $l2 = 30672000000L;

     label1:
        $b1 = $l0 cmp $l2;

        if $b1 < 0 goto label4;

        $l0 = $l0 - $l2;

        $i3 = $i3 + 1;

        $z0 = virtualinvoke r0.<org.joda.time.chrono.IslamicChronology: boolean isLeapYear(int)>($i3);

        if $z0 == 0 goto label3;

        $l2 = 30672000000L;

        goto label1;

     label2:
        $l2 = 30585600000L;

        goto label1;

     label3:
        $l2 = 30585600000L;

        goto label1;

     label4:
        return $i3;
    }
    long getYearDifference(long, long)
    {
        org.joda.time.chrono.IslamicChronology r0;
        long $l0, $l1, $l4;
        int $i2, $i3;
        byte $b5;

        r0 := @this: org.joda.time.chrono.IslamicChronology;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $i2 = virtualinvoke r0.<org.joda.time.chrono.IslamicChronology: int getYear(long)>($l0);

        $i3 = virtualinvoke r0.<org.joda.time.chrono.IslamicChronology: int getYear(long)>($l1);

        $l4 = virtualinvoke r0.<org.joda.time.chrono.IslamicChronology: long getYearMillis(int)>($i2);

        $l0 = $l0 - $l4;

        $l4 = virtualinvoke r0.<org.joda.time.chrono.IslamicChronology: long getYearMillis(int)>($i3);

        $l1 = $l1 - $l4;

        $i2 = $i2 - $i3;

        $b5 = $l0 cmp $l1;

        if $b5 >= 0 goto label1;

        $i2 = $i2 + -1;

     label1:
        $l0 = (long) $i2;

        return $l0;
    }
    public int hashCode()
    {
        org.joda.time.chrono.IslamicChronology r0;
        int $i0, $i1;
        org.joda.time.chrono.IslamicChronology$LeapYearPatternType $r1;

        r0 := @this: org.joda.time.chrono.IslamicChronology;

        $i0 = specialinvoke r0.<org.joda.time.chrono.BasicChronology: int hashCode()>();

        $i0 = $i0 * 13;

        $r1 = virtualinvoke r0.<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology$LeapYearPatternType getLeapYearPatternType()>();

        $i1 = virtualinvoke $r1.<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: int hashCode()>();

        $i0 = $i0 + $i1;

        return $i0;
    }
    boolean isLeapYear(int)
    {
        org.joda.time.chrono.IslamicChronology r0;
        int $i0;
        boolean $z0;
        org.joda.time.chrono.IslamicChronology$LeapYearPatternType $r1;

        r0 := @this: org.joda.time.chrono.IslamicChronology;

        $i0 := @parameter0: int;

        $r1 = r0.<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology$LeapYearPatternType iLeapYears>;

        $z0 = virtualinvoke $r1.<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: boolean isLeapYear(int)>($i0);

        return $z0;
    }
    long setYear(long, int)
    {
        org.joda.time.chrono.IslamicChronology r0;
        long $l0, $l5;
        int $i1, $i2, $i3, $i4;
        boolean $z0;

        r0 := @this: org.joda.time.chrono.IslamicChronology;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        $i2 = virtualinvoke r0.<org.joda.time.chrono.IslamicChronology: int getYear(long)>($l0);

        $i2 = virtualinvoke r0.<org.joda.time.chrono.IslamicChronology: int getDayOfYear(long,int)>($l0, $i2);

        $i3 = $i2;

        $i4 = virtualinvoke r0.<org.joda.time.chrono.IslamicChronology: int getMillisOfDay(long)>($l0);

        if $i2 <= 354 goto label1;

        $z0 = virtualinvoke r0.<org.joda.time.chrono.IslamicChronology: boolean isLeapYear(int)>($i1);

        if $z0 != 0 goto label1;

        $i3 = $i2 + -1;

     label1:
        $l0 = virtualinvoke r0.<org.joda.time.chrono.IslamicChronology: long getYearMonthDayMillis(int,int,int)>($i1, 1, $i3);

        $l5 = (long) $i4;

        $l0 = $l5 + $l0;

        return $l0;
    }
    public org.joda.time.Chronology withUTC()
    {
        org.joda.time.chrono.IslamicChronology r0;

        r0 := @this: org.joda.time.chrono.IslamicChronology;

        r0 = <org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology INSTANCE_UTC>;

        return r0;
    }
    public org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)
    {
        org.joda.time.chrono.IslamicChronology r0;
        org.joda.time.DateTimeZone $r1, $r2;

        r0 := @this: org.joda.time.chrono.IslamicChronology;

        $r1 := @parameter0: org.joda.time.DateTimeZone;

        if $r1 != null goto label1;

        $r1 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>();

     label1:
        $r2 = virtualinvoke r0.<org.joda.time.chrono.IslamicChronology: org.joda.time.DateTimeZone getZone()>();

        if $r1 != $r2 goto label2;

        return r0;

     label2:
        r0 = staticinvoke <org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone)>($r1);

        return r0;
    }
