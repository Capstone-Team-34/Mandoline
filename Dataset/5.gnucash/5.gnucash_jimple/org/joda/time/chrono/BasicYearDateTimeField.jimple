org.joda.time.chrono.BasicYearDateTimeField extends org.joda.time.field.ImpreciseDateTimeField
private static final long serialVersionUID
protected final org.joda.time.chrono.BasicChronology iChronology
    void <init>(org.joda.time.chrono.BasicChronology)
    {
        org.joda.time.chrono.BasicYearDateTimeField r0;
        org.joda.time.chrono.BasicChronology $r1;
        org.joda.time.DateTimeFieldType $r2;
        long $l0;

        r0 := @this: org.joda.time.chrono.BasicYearDateTimeField;

        $r1 := @parameter0: org.joda.time.chrono.BasicChronology;

        $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>();

        $l0 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: long getAverageMillisPerYear()>();

        specialinvoke r0.<org.joda.time.field.ImpreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,long)>($r2, $l0);

        r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> = $r1;

        return;
    }
    private java.lang.Object readResolve()
    {
        org.joda.time.chrono.BasicYearDateTimeField r0;
        org.joda.time.DateTimeField $r1;
        org.joda.time.chrono.BasicChronology $r2;

        r0 := @this: org.joda.time.chrono.BasicYearDateTimeField;

        $r2 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $r1 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField year()>();

        return $r1;
    }
    public long add(long, int)
    {
        org.joda.time.chrono.BasicYearDateTimeField r0;
        int $i0, $i2;
        long $l1;

        r0 := @this: org.joda.time.chrono.BasicYearDateTimeField;

        $l1 := @parameter0: long;

        $i0 := @parameter1: int;

        if $i0 != 0 goto label1;

        return $l1;

     label1:
        $i2 = virtualinvoke r0.<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>($l1);

        $i0 = staticinvoke <org.joda.time.field.FieldUtils: int safeAdd(int,int)>($i2, $i0);

        $l1 = virtualinvoke r0.<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>($l1, $i0);

        return $l1;
    }
    public long add(long, long)
    {
        org.joda.time.chrono.BasicYearDateTimeField r0;
        long $l0, $l1;
        int $i2;

        r0 := @this: org.joda.time.chrono.BasicYearDateTimeField;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $i2 = staticinvoke <org.joda.time.field.FieldUtils: int safeToInt(long)>($l1);

        $l0 = virtualinvoke r0.<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>($l0, $i2);

        return $l0;
    }
    public long addWrapField(long, int)
    {
        org.joda.time.chrono.BasicYearDateTimeField r0;
        int $i0, $i2, $i3, $i4;
        long $l1;
        org.joda.time.chrono.BasicChronology $r1;

        r0 := @this: org.joda.time.chrono.BasicYearDateTimeField;

        $l1 := @parameter0: long;

        $i0 := @parameter1: int;

        if $i0 != 0 goto label1;

        return $l1;

     label1:
        $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>($l1);

        $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i3 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMinYear()>();

        $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i4 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMaxYear()>();

        $i0 = staticinvoke <org.joda.time.field.FieldUtils: int getWrappedValue(int,int,int,int)>($i2, $i0, $i3, $i4);

        $l1 = virtualinvoke r0.<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>($l1, $i0);

        return $l1;
    }
    public int get(long)
    {
        org.joda.time.chrono.BasicYearDateTimeField r0;
        long $l0;
        int $i1;
        org.joda.time.chrono.BasicChronology $r1;

        r0 := @this: org.joda.time.chrono.BasicYearDateTimeField;

        $l0 := @parameter0: long;

        $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>($l0);

        return $i1;
    }
    public long getDifferenceAsLong(long, long)
    {
        org.joda.time.chrono.BasicYearDateTimeField r0;
        long $l0, $l1;
        byte $b2;
        org.joda.time.chrono.BasicChronology $r1;

        r0 := @this: org.joda.time.chrono.BasicYearDateTimeField;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $b2 = $l0 cmp $l1;

        if $b2 >= 0 goto label1;

        $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $l0 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: long getYearDifference(long,long)>($l1, $l0);

        $l0 = neg $l0;

        return $l0;

     label1:
        $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $l0 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: long getYearDifference(long,long)>($l0, $l1);

        return $l0;
    }
    public int getLeapAmount(long)
    {
        org.joda.time.chrono.BasicYearDateTimeField r0;
        long $l0;
        org.joda.time.chrono.BasicChronology $r1;
        int $i1;
        boolean $z0;

        r0 := @this: org.joda.time.chrono.BasicYearDateTimeField;

        $l0 := @parameter0: long;

        $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>($l0);

        $z0 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: boolean isLeapYear(int)>($i1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public org.joda.time.DurationField getLeapDurationField()
    {
        org.joda.time.chrono.BasicYearDateTimeField r0;
        org.joda.time.DurationField $r1;
        org.joda.time.chrono.BasicChronology $r2;

        r0 := @this: org.joda.time.chrono.BasicYearDateTimeField;

        $r2 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $r1 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField days()>();

        return $r1;
    }
    public int getMaximumValue()
    {
        org.joda.time.chrono.BasicYearDateTimeField r0;
        int $i0;
        org.joda.time.chrono.BasicChronology $r1;

        r0 := @this: org.joda.time.chrono.BasicYearDateTimeField;

        $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i0 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMaxYear()>();

        return $i0;
    }
    public int getMinimumValue()
    {
        org.joda.time.chrono.BasicYearDateTimeField r0;
        int $i0;
        org.joda.time.chrono.BasicChronology $r1;

        r0 := @this: org.joda.time.chrono.BasicYearDateTimeField;

        $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i0 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMinYear()>();

        return $i0;
    }
    public org.joda.time.DurationField getRangeDurationField()
    {
        org.joda.time.chrono.BasicYearDateTimeField r0;

        r0 := @this: org.joda.time.chrono.BasicYearDateTimeField;

        return null;
    }
    public boolean isLeap(long)
    {
        org.joda.time.chrono.BasicYearDateTimeField r0;
        long $l0;
        org.joda.time.chrono.BasicChronology $r1;
        int $i1;
        boolean $z0;

        r0 := @this: org.joda.time.chrono.BasicYearDateTimeField;

        $l0 := @parameter0: long;

        $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>($l0);

        $z0 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: boolean isLeapYear(int)>($i1);

        return $z0;
    }
    public boolean isLenient()
    {
        org.joda.time.chrono.BasicYearDateTimeField r0;

        r0 := @this: org.joda.time.chrono.BasicYearDateTimeField;

        return 0;
    }
    public long remainder(long)
    {
        org.joda.time.chrono.BasicYearDateTimeField r0;
        long $l0, $l1;

        r0 := @this: org.joda.time.chrono.BasicYearDateTimeField;

        $l0 := @parameter0: long;

        $l1 = virtualinvoke r0.<org.joda.time.chrono.BasicYearDateTimeField: long roundFloor(long)>($l0);

        $l0 = $l0 - $l1;

        return $l0;
    }
    public long roundCeiling(long)
    {
        org.joda.time.chrono.BasicYearDateTimeField r0;
        long $l0, $l2;
        int $i1;
        org.joda.time.chrono.BasicChronology $r1;
        byte $b3;

        r0 := @this: org.joda.time.chrono.BasicYearDateTimeField;

        $l0 := @parameter0: long;

        $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>($l0);

        $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $l2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>($i1);

        $b3 = $l0 cmp $l2;

        if $b3 == 0 goto label1;

        $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i1 = $i1 + 1;

        $l0 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>($i1);

     label1:
        return $l0;
    }
    public long roundFloor(long)
    {
        org.joda.time.chrono.BasicYearDateTimeField r0;
        long $l0;
        org.joda.time.chrono.BasicChronology $r1;
        int $i1;

        r0 := @this: org.joda.time.chrono.BasicYearDateTimeField;

        $l0 := @parameter0: long;

        $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>($l0);

        $l0 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>($i1);

        return $l0;
    }
    public long set(long, int)
    {
        org.joda.time.chrono.BasicYearDateTimeField r0;
        long $l0;
        int $i1, $i2, $i3;
        org.joda.time.chrono.BasicChronology $r1;

        r0 := @this: org.joda.time.chrono.BasicYearDateTimeField;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMinYear()>();

        $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i3 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMaxYear()>();

        staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, $i1, $i2, $i3);

        $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $l0 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: long setYear(long,int)>($l0, $i1);

        return $l0;
    }
