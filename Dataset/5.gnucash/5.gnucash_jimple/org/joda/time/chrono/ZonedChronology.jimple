org.joda.time.chrono.ZonedChronology extends org.joda.time.chrono.AssembledChronology
private static final long serialVersionUID
    private void <init>(org.joda.time.Chronology, org.joda.time.DateTimeZone)
    {
        org.joda.time.chrono.ZonedChronology r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeZone $r2;

        r0 := @this: org.joda.time.chrono.ZonedChronology;

        $r1 := @parameter0: org.joda.time.Chronology;

        $r2 := @parameter1: org.joda.time.DateTimeZone;

        specialinvoke r0.<org.joda.time.chrono.AssembledChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>($r1, $r2);

        return;
    }
    private org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField, java.util.HashMap)
    {
        org.joda.time.chrono.ZonedChronology r0;
        org.joda.time.DateTimeField $r1;
        java.util.HashMap $r2;
        boolean $z0;
        java.lang.Object $r3;
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField $r4;
        org.joda.time.DateTimeZone $r5;
        org.joda.time.DurationField $r6, $r7, $r8;

        r0 := @this: org.joda.time.chrono.ZonedChronology;

        $r1 := @parameter0: org.joda.time.DateTimeField;

        $r2 := @parameter1: java.util.HashMap;

        if $r1 == null goto label1;

        $z0 = virtualinvoke $r1.<org.joda.time.DateTimeField: boolean isSupported()>();

        if $z0 != 0 goto label2;

     label1:
        return $r1;

     label2:
        $z0 = virtualinvoke $r2.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r1);

        if $z0 == 0 goto label3;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r1);

        $r1 = (org.joda.time.DateTimeField) $r3;

        return $r1;

     label3:
        $r4 = new org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        $r5 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>();

        $r6 = virtualinvoke $r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>();

        $r6 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r6, $r2);

        $r7 = virtualinvoke $r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getRangeDurationField()>();

        $r7 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r7, $r2);

        $r8 = virtualinvoke $r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getLeapDurationField()>();

        $r8 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r8, $r2);

        specialinvoke $r4.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeZone,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>($r1, $r5, $r6, $r7, $r8);

        virtualinvoke $r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r4);

        return $r4;
    }
    private org.joda.time.DurationField convertField(org.joda.time.DurationField, java.util.HashMap)
    {
        org.joda.time.chrono.ZonedChronology r0;
        org.joda.time.DurationField $r1;
        java.util.HashMap $r2;
        boolean $z0;
        java.lang.Object $r3;
        org.joda.time.chrono.ZonedChronology$ZonedDurationField $r4;
        org.joda.time.DateTimeZone $r5;

        r0 := @this: org.joda.time.chrono.ZonedChronology;

        $r1 := @parameter0: org.joda.time.DurationField;

        $r2 := @parameter1: java.util.HashMap;

        if $r1 == null goto label1;

        $z0 = virtualinvoke $r1.<org.joda.time.DurationField: boolean isSupported()>();

        if $z0 != 0 goto label2;

     label1:
        return $r1;

     label2:
        $z0 = virtualinvoke $r2.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r1);

        if $z0 == 0 goto label3;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r1);

        $r1 = (org.joda.time.DurationField) $r3;

        return $r1;

     label3:
        $r4 = new org.joda.time.chrono.ZonedChronology$ZonedDurationField;

        $r5 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>();

        specialinvoke $r4.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DateTimeZone)>($r1, $r5);

        virtualinvoke $r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r4);

        return $r4;
    }
    public static org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology, org.joda.time.DateTimeZone)
    {
        org.joda.time.Chronology $r0;
        org.joda.time.DateTimeZone $r1;
        java.lang.IllegalArgumentException $r2;
        org.joda.time.chrono.ZonedChronology $r3;

        $r0 := @parameter0: org.joda.time.Chronology;

        $r1 := @parameter1: org.joda.time.DateTimeZone;

        if $r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Must supply a chronology");

        throw $r2;

     label1:
        $r0 = virtualinvoke $r0.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>();

        if $r0 != null goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("UTC chronology must not be null");

        throw $r2;

     label2:
        if $r1 != null goto label3;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("DateTimeZone must not be null");

        throw $r2;

     label3:
        $r3 = new org.joda.time.chrono.ZonedChronology;

        specialinvoke $r3.<org.joda.time.chrono.ZonedChronology: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeZone)>($r0, $r1);

        return $r3;
    }
    private long localToUTC(long)
    {
        org.joda.time.chrono.ZonedChronology r0;
        long $l0, $l2;
        org.joda.time.DateTimeZone $r1;
        int $i1, $i3;
        org.joda.time.IllegalInstantException $r2;
        java.lang.String $r3;

        r0 := @this: org.joda.time.chrono.ZonedChronology;

        $l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>();

        $i1 = virtualinvoke $r1.<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>($l0);

        $l2 = (long) $i1;

        $l2 = $l0 - $l2;

        $i3 = virtualinvoke $r1.<org.joda.time.DateTimeZone: int getOffset(long)>($l2);

        if $i1 == $i3 goto label1;

        $r2 = new org.joda.time.IllegalInstantException;

        $r3 = virtualinvoke $r1.<org.joda.time.DateTimeZone: java.lang.String getID()>();

        specialinvoke $r2.<org.joda.time.IllegalInstantException: void <init>(long,java.lang.String)>($l0, $r3);

        throw $r2;

     label1:
        return $l2;
    }
    static boolean useTimeArithmetic(org.joda.time.DurationField)
    {
        org.joda.time.DurationField $r0;
        long $l0;
        byte $b1;

        $r0 := @parameter0: org.joda.time.DurationField;

        if $r0 == null goto label1;

        $l0 = virtualinvoke $r0.<org.joda.time.DurationField: long getUnitMillis()>();

        $b1 = $l0 cmp 43200000L;

        if $b1 >= 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    protected void assemble(org.joda.time.chrono.AssembledChronology$Fields)
    {
        org.joda.time.chrono.ZonedChronology r0;
        org.joda.time.chrono.AssembledChronology$Fields $r1;
        java.util.HashMap $r2;
        org.joda.time.DurationField $r3;
        org.joda.time.DateTimeField $r4;

        r0 := @this: org.joda.time.chrono.ZonedChronology;

        $r1 := @parameter0: org.joda.time.chrono.AssembledChronology$Fields;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        $r3 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField eras>;

        $r3 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r3, $r2);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField eras> = $r3;

        $r3 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField centuries>;

        $r3 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r3, $r2);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField centuries> = $r3;

        $r3 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField years>;

        $r3 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r3, $r2);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField years> = $r3;

        $r3 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField months>;

        $r3 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r3, $r2);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField months> = $r3;

        $r3 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weekyears>;

        $r3 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r3, $r2);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weekyears> = $r3;

        $r3 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weeks>;

        $r3 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r3, $r2);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weeks> = $r3;

        $r3 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField days>;

        $r3 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r3, $r2);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField days> = $r3;

        $r3 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField halfdays>;

        $r3 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r3, $r2);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField halfdays> = $r3;

        $r3 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField hours>;

        $r3 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r3, $r2);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField hours> = $r3;

        $r3 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField minutes>;

        $r3 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r3, $r2);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField minutes> = $r3;

        $r3 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField seconds>;

        $r3 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r3, $r2);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField seconds> = $r3;

        $r3 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField millis>;

        $r3 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r3, $r2);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField millis> = $r3;

        $r4 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year>;

        $r4 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r4, $r2);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year> = $r4;

        $r4 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra>;

        $r4 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r4, $r2);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra> = $r4;

        $r4 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury>;

        $r4 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r4, $r2);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury> = $r4;

        $r4 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra>;

        $r4 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r4, $r2);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra> = $r4;

        $r4 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era>;

        $r4 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r4, $r2);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era> = $r4;

        $r4 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfWeek>;

        $r4 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r4, $r2);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfWeek> = $r4;

        $r4 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth>;

        $r4 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r4, $r2);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth> = $r4;

        $r4 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear>;

        $r4 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r4, $r2);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear> = $r4;

        $r4 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear>;

        $r4 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r4, $r2);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear> = $r4;

        $r4 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear>;

        $r4 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r4, $r2);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear> = $r4;

        $r4 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear>;

        $r4 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r4, $r2);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear> = $r4;

        $r4 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury>;

        $r4 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r4, $r2);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury> = $r4;

        $r4 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond>;

        $r4 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r4, $r2);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond> = $r4;

        $r4 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay>;

        $r4 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r4, $r2);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay> = $r4;

        $r4 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute>;

        $r4 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r4, $r2);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute> = $r4;

        $r4 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay>;

        $r4 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r4, $r2);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay> = $r4;

        $r4 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour>;

        $r4 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r4, $r2);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour> = $r4;

        $r4 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay>;

        $r4 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r4, $r2);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay> = $r4;

        $r4 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay>;

        $r4 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r4, $r2);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay> = $r4;

        $r4 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday>;

        $r4 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r4, $r2);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday> = $r4;

        $r4 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay>;

        $r4 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r4, $r2);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay> = $r4;

        $r4 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday>;

        $r4 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r4, $r2);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday> = $r4;

        $r4 = $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay>;

        $r4 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r4, $r2);

        $r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay> = $r4;

        return;
    }
    public boolean equals(java.lang.Object)
    {
        org.joda.time.chrono.ZonedChronology r0, $r2;
        java.lang.Object $r1;
        boolean $z0;
        org.joda.time.Chronology $r3, $r4;
        org.joda.time.DateTimeZone $r5, $r6;

        r0 := @this: org.joda.time.chrono.ZonedChronology;

        $r1 := @parameter0: java.lang.Object;

        if r0 != $r1 goto label1;

        return 1;

     label1:
        $z0 = $r1 instanceof org.joda.time.chrono.ZonedChronology;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $r2 = (org.joda.time.chrono.ZonedChronology) $r1;

        $r3 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology getBase()>();

        $r4 = virtualinvoke $r2.<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology getBase()>();

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label3;

        $r5 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>();

        $r6 = virtualinvoke $r2.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>();

        $z0 = virtualinvoke $r5.<org.joda.time.DateTimeZone: boolean equals(java.lang.Object)>($r6);

        if $z0 != 0 goto label4;

     label3:
        return 0;

     label4:
        return 1;
    }
    public long getDateTimeMillis(int, int, int, int) throws java.lang.IllegalArgumentException
    {
        org.joda.time.chrono.ZonedChronology r0;
        int $i0, $i1, $i2, $i3;
        org.joda.time.Chronology $r1;
        long $l4;

        r0 := @this: org.joda.time.chrono.ZonedChronology;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $r1 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology getBase()>();

        $l4 = virtualinvoke $r1.<org.joda.time.Chronology: long getDateTimeMillis(int,int,int,int)>($i0, $i1, $i2, $i3);

        $l4 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: long localToUTC(long)>($l4);

        return $l4;
    }
    public long getDateTimeMillis(int, int, int, int, int, int, int) throws java.lang.IllegalArgumentException
    {
        org.joda.time.chrono.ZonedChronology r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        org.joda.time.Chronology $r1;
        long $l7;

        r0 := @this: org.joda.time.chrono.ZonedChronology;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $i4 := @parameter4: int;

        $i5 := @parameter5: int;

        $i6 := @parameter6: int;

        $r1 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology getBase()>();

        $l7 = virtualinvoke $r1.<org.joda.time.Chronology: long getDateTimeMillis(int,int,int,int,int,int,int)>($i0, $i1, $i2, $i3, $i4, $i5, $i6);

        $l7 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: long localToUTC(long)>($l7);

        return $l7;
    }
    public long getDateTimeMillis(long, int, int, int, int) throws java.lang.IllegalArgumentException
    {
        org.joda.time.chrono.ZonedChronology r0;
        long $l0, $l6;
        int $i1, $i2, $i3, $i4, $i5;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeZone $r2;

        r0 := @this: org.joda.time.chrono.ZonedChronology;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $i4 := @parameter4: int;

        $r1 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology getBase()>();

        $r2 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>();

        $i5 = virtualinvoke $r2.<org.joda.time.DateTimeZone: int getOffset(long)>($l0);

        $l6 = (long) $i5;

        $l0 = $l6 + $l0;

        $l0 = virtualinvoke $r1.<org.joda.time.Chronology: long getDateTimeMillis(long,int,int,int,int)>($l0, $i1, $i2, $i3, $i4);

        $l0 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: long localToUTC(long)>($l0);

        return $l0;
    }
    public org.joda.time.DateTimeZone getZone()
    {
        org.joda.time.chrono.ZonedChronology r0;
        java.lang.Object $r1;
        org.joda.time.DateTimeZone $r2;

        r0 := @this: org.joda.time.chrono.ZonedChronology;

        $r1 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: java.lang.Object getParam()>();

        $r2 = (org.joda.time.DateTimeZone) $r1;

        return $r2;
    }
    public int hashCode()
    {
        org.joda.time.chrono.ZonedChronology r0;
        org.joda.time.DateTimeZone $r1;
        int $i0, $i1;
        org.joda.time.Chronology $r2;

        r0 := @this: org.joda.time.chrono.ZonedChronology;

        $r1 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>();

        $i0 = virtualinvoke $r1.<org.joda.time.DateTimeZone: int hashCode()>();

        $i0 = $i0 * 11;

        $i0 = 326565 + $i0;

        $r2 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology getBase()>();

        $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        $i1 = $i1 * 7;

        $i0 = $i0 + $i1;

        return $i0;
    }
    public java.lang.String toString()
    {
        org.joda.time.chrono.ZonedChronology r0;
        java.lang.StringBuilder $r1;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeZone $r3;
        java.lang.String $r4;

        r0 := @this: org.joda.time.chrono.ZonedChronology;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ZonedChronology[");

        $r2 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology getBase()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r3 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>();

        $r4 = virtualinvoke $r3.<org.joda.time.DateTimeZone: java.lang.String getID()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }
    public org.joda.time.Chronology withUTC()
    {
        org.joda.time.chrono.ZonedChronology r0;
        org.joda.time.Chronology $r1;

        r0 := @this: org.joda.time.chrono.ZonedChronology;

        $r1 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology getBase()>();

        return $r1;
    }
    public org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)
    {
        org.joda.time.chrono.ZonedChronology r0, $r5;
        org.joda.time.DateTimeZone $r1, $r3;
        java.lang.Object $r2;
        org.joda.time.Chronology $r4;

        r0 := @this: org.joda.time.chrono.ZonedChronology;

        $r1 := @parameter0: org.joda.time.DateTimeZone;

        if $r1 != null goto label1;

        $r1 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>();

     label1:
        $r2 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: java.lang.Object getParam()>();

        if $r1 != $r2 goto label2;

        return r0;

     label2:
        $r3 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        if $r1 != $r3 goto label3;

        $r4 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology getBase()>();

        return $r4;

     label3:
        $r5 = new org.joda.time.chrono.ZonedChronology;

        $r4 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology getBase()>();

        specialinvoke $r5.<org.joda.time.chrono.ZonedChronology: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeZone)>($r4, $r1);

        return $r5;
    }
