org.joda.time.Duration extends org.joda.time.base.BaseDuration implements org.joda.time.ReadableDuration java.io.Serializable
public static final org.joda.time.Duration ZERO
private static final long serialVersionUID
    static void <clinit>()
    {
        org.joda.time.Duration $r0;

        $r0 = new org.joda.time.Duration;

        specialinvoke $r0.<org.joda.time.Duration: void <init>(long)>(0L);

        <org.joda.time.Duration: org.joda.time.Duration ZERO> = $r0;

        return;
    }
    public void <init>(long)
    {
        org.joda.time.Duration r0;
        long $l0;

        r0 := @this: org.joda.time.Duration;

        $l0 := @parameter0: long;

        specialinvoke r0.<org.joda.time.base.BaseDuration: void <init>(long)>($l0);

        return;
    }
    public void <init>(long, long)
    {
        org.joda.time.Duration r0;
        long $l0, $l1;

        r0 := @this: org.joda.time.Duration;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        specialinvoke r0.<org.joda.time.base.BaseDuration: void <init>(long,long)>($l0, $l1);

        return;
    }
    public void <init>(java.lang.Object)
    {
        org.joda.time.Duration r0;
        java.lang.Object $r1;

        r0 := @this: org.joda.time.Duration;

        $r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<org.joda.time.base.BaseDuration: void <init>(java.lang.Object)>($r1);

        return;
    }
    public void <init>(org.joda.time.ReadableInstant, org.joda.time.ReadableInstant)
    {
        org.joda.time.Duration r0;
        org.joda.time.ReadableInstant $r1, $r2;

        r0 := @this: org.joda.time.Duration;

        $r1 := @parameter0: org.joda.time.ReadableInstant;

        $r2 := @parameter1: org.joda.time.ReadableInstant;

        specialinvoke r0.<org.joda.time.base.BaseDuration: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>($r1, $r2);

        return;
    }
    public static org.joda.time.Duration millis(long)
    {
        long $l0;
        byte $b1;
        org.joda.time.Duration $r0;

        $l0 := @parameter0: long;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        $r0 = <org.joda.time.Duration: org.joda.time.Duration ZERO>;

        return $r0;

     label1:
        $r0 = new org.joda.time.Duration;

        specialinvoke $r0.<org.joda.time.Duration: void <init>(long)>($l0);

        return $r0;
    }
    public static org.joda.time.Duration parse(java.lang.String)
    {
        java.lang.String $r0;
        org.joda.time.Duration $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 = new org.joda.time.Duration;

        specialinvoke $r1.<org.joda.time.Duration: void <init>(java.lang.Object)>($r0);

        return $r1;
    }
    public static org.joda.time.Duration standardDays(long)
    {
        long $l0;
        byte $b1;
        org.joda.time.Duration $r0;

        $l0 := @parameter0: long;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        $r0 = <org.joda.time.Duration: org.joda.time.Duration ZERO>;

        return $r0;

     label1:
        $r0 = new org.joda.time.Duration;

        $l0 = staticinvoke <org.joda.time.field.FieldUtils: long safeMultiply(long,int)>($l0, 86400000);

        specialinvoke $r0.<org.joda.time.Duration: void <init>(long)>($l0);

        return $r0;
    }
    public static org.joda.time.Duration standardHours(long)
    {
        long $l0;
        byte $b1;
        org.joda.time.Duration $r0;

        $l0 := @parameter0: long;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        $r0 = <org.joda.time.Duration: org.joda.time.Duration ZERO>;

        return $r0;

     label1:
        $r0 = new org.joda.time.Duration;

        $l0 = staticinvoke <org.joda.time.field.FieldUtils: long safeMultiply(long,int)>($l0, 3600000);

        specialinvoke $r0.<org.joda.time.Duration: void <init>(long)>($l0);

        return $r0;
    }
    public static org.joda.time.Duration standardMinutes(long)
    {
        long $l0;
        byte $b1;
        org.joda.time.Duration $r0;

        $l0 := @parameter0: long;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        $r0 = <org.joda.time.Duration: org.joda.time.Duration ZERO>;

        return $r0;

     label1:
        $r0 = new org.joda.time.Duration;

        $l0 = staticinvoke <org.joda.time.field.FieldUtils: long safeMultiply(long,int)>($l0, 60000);

        specialinvoke $r0.<org.joda.time.Duration: void <init>(long)>($l0);

        return $r0;
    }
    public static org.joda.time.Duration standardSeconds(long)
    {
        long $l0;
        byte $b1;
        org.joda.time.Duration $r0;

        $l0 := @parameter0: long;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        $r0 = <org.joda.time.Duration: org.joda.time.Duration ZERO>;

        return $r0;

     label1:
        $r0 = new org.joda.time.Duration;

        $l0 = staticinvoke <org.joda.time.field.FieldUtils: long safeMultiply(long,int)>($l0, 1000);

        specialinvoke $r0.<org.joda.time.Duration: void <init>(long)>($l0);

        return $r0;
    }
    public org.joda.time.Duration dividedBy(long)
    {
        long $l0, $l2;
        org.joda.time.Duration r0, $r1;
        byte $b1;

        r0 := @this: org.joda.time.Duration;

        $l0 := @parameter0: long;

        $b1 = $l0 cmp 1L;

        if $b1 != 0 goto label1;

        return r0;

     label1:
        $r1 = new org.joda.time.Duration;

        $l2 = virtualinvoke r0.<org.joda.time.Duration: long getMillis()>();

        $l0 = staticinvoke <org.joda.time.field.FieldUtils: long safeDivide(long,long)>($l2, $l0);

        specialinvoke $r1.<org.joda.time.Duration: void <init>(long)>($l0);

        return $r1;
    }
    public long getStandardDays()
    {
        org.joda.time.Duration r0;
        long $l0;

        r0 := @this: org.joda.time.Duration;

        $l0 = virtualinvoke r0.<org.joda.time.Duration: long getMillis()>();

        $l0 = $l0 / 86400000L;

        return $l0;
    }
    public long getStandardHours()
    {
        org.joda.time.Duration r0;
        long $l0;

        r0 := @this: org.joda.time.Duration;

        $l0 = virtualinvoke r0.<org.joda.time.Duration: long getMillis()>();

        $l0 = $l0 / 3600000L;

        return $l0;
    }
    public long getStandardMinutes()
    {
        org.joda.time.Duration r0;
        long $l0;

        r0 := @this: org.joda.time.Duration;

        $l0 = virtualinvoke r0.<org.joda.time.Duration: long getMillis()>();

        $l0 = $l0 / 60000L;

        return $l0;
    }
    public long getStandardSeconds()
    {
        org.joda.time.Duration r0;
        long $l0;

        r0 := @this: org.joda.time.Duration;

        $l0 = virtualinvoke r0.<org.joda.time.Duration: long getMillis()>();

        $l0 = $l0 / 1000L;

        return $l0;
    }
    public org.joda.time.Duration minus(long)
    {
        org.joda.time.Duration r0;
        long $l0;

        r0 := @this: org.joda.time.Duration;

        $l0 := @parameter0: long;

        r0 = virtualinvoke r0.<org.joda.time.Duration: org.joda.time.Duration withDurationAdded(long,int)>($l0, -1);

        return r0;
    }
    public org.joda.time.Duration minus(org.joda.time.ReadableDuration)
    {
        org.joda.time.ReadableDuration $r0;
        org.joda.time.Duration r1;
        long $l0;

        r1 := @this: org.joda.time.Duration;

        $r0 := @parameter0: org.joda.time.ReadableDuration;

        if $r0 != null goto label1;

        return r1;

     label1:
        $l0 = interfaceinvoke $r0.<org.joda.time.ReadableDuration: long getMillis()>();

        r1 = virtualinvoke r1.<org.joda.time.Duration: org.joda.time.Duration withDurationAdded(long,int)>($l0, -1);

        return r1;
    }
    public org.joda.time.Duration multipliedBy(long)
    {
        long $l0, $l2;
        org.joda.time.Duration r0, $r1;
        byte $b1;

        r0 := @this: org.joda.time.Duration;

        $l0 := @parameter0: long;

        $b1 = $l0 cmp 1L;

        if $b1 != 0 goto label1;

        return r0;

     label1:
        $r1 = new org.joda.time.Duration;

        $l2 = virtualinvoke r0.<org.joda.time.Duration: long getMillis()>();

        $l0 = staticinvoke <org.joda.time.field.FieldUtils: long safeMultiply(long,long)>($l2, $l0);

        specialinvoke $r1.<org.joda.time.Duration: void <init>(long)>($l0);

        return $r1;
    }
    public org.joda.time.Duration negated()
    {
        org.joda.time.Duration r0, $r2;
        long $l0;
        byte $b1;
        java.lang.ArithmeticException $r1;

        r0 := @this: org.joda.time.Duration;

        $l0 = virtualinvoke r0.<org.joda.time.Duration: long getMillis()>();

        $b1 = $l0 cmp -9223372036854775808L;

        if $b1 != 0 goto label1;

        $r1 = new java.lang.ArithmeticException;

        specialinvoke $r1.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Negation of this duration would overflow");

        throw $r1;

     label1:
        $r2 = new org.joda.time.Duration;

        $l0 = virtualinvoke r0.<org.joda.time.Duration: long getMillis()>();

        $l0 = neg $l0;

        specialinvoke $r2.<org.joda.time.Duration: void <init>(long)>($l0);

        return $r2;
    }
    public org.joda.time.Duration plus(long)
    {
        org.joda.time.Duration r0;
        long $l0;

        r0 := @this: org.joda.time.Duration;

        $l0 := @parameter0: long;

        r0 = virtualinvoke r0.<org.joda.time.Duration: org.joda.time.Duration withDurationAdded(long,int)>($l0, 1);

        return r0;
    }
    public org.joda.time.Duration plus(org.joda.time.ReadableDuration)
    {
        org.joda.time.ReadableDuration $r0;
        org.joda.time.Duration r1;
        long $l0;

        r1 := @this: org.joda.time.Duration;

        $r0 := @parameter0: org.joda.time.ReadableDuration;

        if $r0 != null goto label1;

        return r1;

     label1:
        $l0 = interfaceinvoke $r0.<org.joda.time.ReadableDuration: long getMillis()>();

        r1 = virtualinvoke r1.<org.joda.time.Duration: org.joda.time.Duration withDurationAdded(long,int)>($l0, 1);

        return r1;
    }
    public org.joda.time.Duration toDuration()
    {
        org.joda.time.Duration r0;

        r0 := @this: org.joda.time.Duration;

        return r0;
    }
    public org.joda.time.Days toStandardDays()
    {
        org.joda.time.Duration r0;
        long $l0;
        int $i1;
        org.joda.time.Days $r1;

        r0 := @this: org.joda.time.Duration;

        $l0 = virtualinvoke r0.<org.joda.time.Duration: long getStandardDays()>();

        $i1 = staticinvoke <org.joda.time.field.FieldUtils: int safeToInt(long)>($l0);

        $r1 = staticinvoke <org.joda.time.Days: org.joda.time.Days days(int)>($i1);

        return $r1;
    }
    public org.joda.time.Hours toStandardHours()
    {
        org.joda.time.Duration r0;
        long $l0;
        int $i1;
        org.joda.time.Hours $r1;

        r0 := @this: org.joda.time.Duration;

        $l0 = virtualinvoke r0.<org.joda.time.Duration: long getStandardHours()>();

        $i1 = staticinvoke <org.joda.time.field.FieldUtils: int safeToInt(long)>($l0);

        $r1 = staticinvoke <org.joda.time.Hours: org.joda.time.Hours hours(int)>($i1);

        return $r1;
    }
    public org.joda.time.Minutes toStandardMinutes()
    {
        org.joda.time.Duration r0;
        long $l0;
        int $i1;
        org.joda.time.Minutes $r1;

        r0 := @this: org.joda.time.Duration;

        $l0 = virtualinvoke r0.<org.joda.time.Duration: long getStandardMinutes()>();

        $i1 = staticinvoke <org.joda.time.field.FieldUtils: int safeToInt(long)>($l0);

        $r1 = staticinvoke <org.joda.time.Minutes: org.joda.time.Minutes minutes(int)>($i1);

        return $r1;
    }
    public org.joda.time.Seconds toStandardSeconds()
    {
        org.joda.time.Duration r0;
        long $l0;
        int $i1;
        org.joda.time.Seconds $r1;

        r0 := @this: org.joda.time.Duration;

        $l0 = virtualinvoke r0.<org.joda.time.Duration: long getStandardSeconds()>();

        $i1 = staticinvoke <org.joda.time.field.FieldUtils: int safeToInt(long)>($l0);

        $r1 = staticinvoke <org.joda.time.Seconds: org.joda.time.Seconds seconds(int)>($i1);

        return $r1;
    }
    public org.joda.time.Duration withDurationAdded(long, int)
    {
        long $l0, $l3;
        int $i1;
        org.joda.time.Duration r0;
        byte $b2;

        r0 := @this: org.joda.time.Duration;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        $b2 = $l0 cmp 0L;

        if $b2 == 0 goto label2;

        if $i1 != 0 goto label1;

        return r0;

     label1:
        $l0 = staticinvoke <org.joda.time.field.FieldUtils: long safeMultiply(long,int)>($l0, $i1);

        $l3 = virtualinvoke r0.<org.joda.time.Duration: long getMillis()>();

        $l0 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>($l3, $l0);

        r0 = new org.joda.time.Duration;

        specialinvoke r0.<org.joda.time.Duration: void <init>(long)>($l0);

     label2:
        return r0;
    }
    public org.joda.time.Duration withDurationAdded(org.joda.time.ReadableDuration, int)
    {
        org.joda.time.ReadableDuration $r0;
        int $i0;
        org.joda.time.Duration r1;
        long $l1;

        r1 := @this: org.joda.time.Duration;

        $r0 := @parameter0: org.joda.time.ReadableDuration;

        $i0 := @parameter1: int;

        if $r0 == null goto label2;

        if $i0 != 0 goto label1;

        return r1;

     label1:
        $l1 = interfaceinvoke $r0.<org.joda.time.ReadableDuration: long getMillis()>();

        r1 = virtualinvoke r1.<org.joda.time.Duration: org.joda.time.Duration withDurationAdded(long,int)>($l1, $i0);

     label2:
        return r1;
    }
    public org.joda.time.Duration withMillis(long)
    {
        long $l0, $l1;
        org.joda.time.Duration r0;
        byte $b2;

        r0 := @this: org.joda.time.Duration;

        $l0 := @parameter0: long;

        $l1 = virtualinvoke r0.<org.joda.time.Duration: long getMillis()>();

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label1;

        return r0;

     label1:
        r0 = new org.joda.time.Duration;

        specialinvoke r0.<org.joda.time.Duration: void <init>(long)>($l0);

        return r0;
    }
