org.joda.time.TimeOfDay extends org.joda.time.base.BasePartial implements org.joda.time.ReadablePartial java.io.Serializable
private static final org.joda.time.DateTimeFieldType[] FIELD_TYPES
public static final int HOUR_OF_DAY
public static final org.joda.time.TimeOfDay MIDNIGHT
public static final int MILLIS_OF_SECOND
public static final int MINUTE_OF_HOUR
public static final int SECOND_OF_MINUTE
private static final long serialVersionUID
    static void <clinit>()
    {
        org.joda.time.DateTimeFieldType[] $r0;
        org.joda.time.DateTimeFieldType $r1;
        org.joda.time.TimeOfDay $r2;

        $r0 = newarray (org.joda.time.DateTimeFieldType)[4];

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfDay()>();

        $r0[0] = $r1;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfHour()>();

        $r0[1] = $r1;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfMinute()>();

        $r0[2] = $r1;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfSecond()>();

        $r0[3] = $r1;

        <org.joda.time.TimeOfDay: org.joda.time.DateTimeFieldType[] FIELD_TYPES> = $r0;

        $r2 = new org.joda.time.TimeOfDay;

        specialinvoke $r2.<org.joda.time.TimeOfDay: void <init>(int,int,int,int)>(0, 0, 0, 0);

        <org.joda.time.TimeOfDay: org.joda.time.TimeOfDay MIDNIGHT> = $r2;

        return;
    }
    public void <init>()
    {
        org.joda.time.TimeOfDay r0;

        r0 := @this: org.joda.time.TimeOfDay;

        specialinvoke r0.<org.joda.time.base.BasePartial: void <init>()>();

        return;
    }
    public void <init>(int, int)
    {
        org.joda.time.TimeOfDay r0;
        int $i0, $i1;

        r0 := @this: org.joda.time.TimeOfDay;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        specialinvoke r0.<org.joda.time.TimeOfDay: void <init>(int,int,int,int,org.joda.time.Chronology)>($i0, $i1, 0, 0, null);

        return;
    }
    public void <init>(int, int, int)
    {
        org.joda.time.TimeOfDay r0;
        int $i0, $i1, $i2;

        r0 := @this: org.joda.time.TimeOfDay;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        specialinvoke r0.<org.joda.time.TimeOfDay: void <init>(int,int,int,int,org.joda.time.Chronology)>($i0, $i1, $i2, 0, null);

        return;
    }
    public void <init>(int, int, int, int)
    {
        org.joda.time.TimeOfDay r0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.joda.time.TimeOfDay;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        specialinvoke r0.<org.joda.time.TimeOfDay: void <init>(int,int,int,int,org.joda.time.Chronology)>($i0, $i1, $i2, $i3, null);

        return;
    }
    public void <init>(int, int, int, int, org.joda.time.Chronology)
    {
        org.joda.time.TimeOfDay r0;
        int $i0, $i1, $i2, $i3;
        org.joda.time.Chronology $r1;
        int[] $r2;

        r0 := @this: org.joda.time.TimeOfDay;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $r1 := @parameter4: org.joda.time.Chronology;

        $r2 = newarray (int)[4];

        $r2[0] = $i0;

        $r2[1] = $i1;

        $r2[2] = $i2;

        $r2[3] = $i3;

        specialinvoke r0.<org.joda.time.base.BasePartial: void <init>(int[],org.joda.time.Chronology)>($r2, $r1);

        return;
    }
    public void <init>(int, int, int, org.joda.time.Chronology)
    {
        org.joda.time.TimeOfDay r0;
        int $i0, $i1, $i2;
        org.joda.time.Chronology $r1;

        r0 := @this: org.joda.time.TimeOfDay;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $r1 := @parameter3: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.TimeOfDay: void <init>(int,int,int,int,org.joda.time.Chronology)>($i0, $i1, $i2, 0, $r1);

        return;
    }
    public void <init>(int, int, org.joda.time.Chronology)
    {
        org.joda.time.TimeOfDay r0;
        int $i0, $i1;
        org.joda.time.Chronology $r1;

        r0 := @this: org.joda.time.TimeOfDay;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 := @parameter2: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.TimeOfDay: void <init>(int,int,int,int,org.joda.time.Chronology)>($i0, $i1, 0, 0, $r1);

        return;
    }
    public void <init>(long)
    {
        org.joda.time.TimeOfDay r0;
        long $l0;

        r0 := @this: org.joda.time.TimeOfDay;

        $l0 := @parameter0: long;

        specialinvoke r0.<org.joda.time.base.BasePartial: void <init>(long)>($l0);

        return;
    }
    public void <init>(long, org.joda.time.Chronology)
    {
        org.joda.time.TimeOfDay r0;
        long $l0;
        org.joda.time.Chronology $r1;

        r0 := @this: org.joda.time.TimeOfDay;

        $l0 := @parameter0: long;

        $r1 := @parameter1: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.BasePartial: void <init>(long,org.joda.time.Chronology)>($l0, $r1);

        return;
    }
    public void <init>(java.lang.Object)
    {
        org.joda.time.TimeOfDay r0;
        java.lang.Object $r1;
        org.joda.time.format.DateTimeFormatter $r2;

        r0 := @this: org.joda.time.TimeOfDay;

        $r1 := @parameter0: java.lang.Object;

        $r2 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter timeParser()>();

        specialinvoke r0.<org.joda.time.base.BasePartial: void <init>(java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>($r1, null, $r2);

        return;
    }
    public void <init>(java.lang.Object, org.joda.time.Chronology)
    {
        org.joda.time.TimeOfDay r0;
        java.lang.Object $r1;
        org.joda.time.Chronology $r2;
        org.joda.time.format.DateTimeFormatter $r3;

        r0 := @this: org.joda.time.TimeOfDay;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: org.joda.time.Chronology;

        $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>($r2);

        $r3 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter timeParser()>();

        specialinvoke r0.<org.joda.time.base.BasePartial: void <init>(java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>($r1, $r2, $r3);

        return;
    }
    public void <init>(org.joda.time.Chronology)
    {
        org.joda.time.TimeOfDay r0;
        org.joda.time.Chronology $r1;

        r0 := @this: org.joda.time.TimeOfDay;

        $r1 := @parameter0: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.BasePartial: void <init>(org.joda.time.Chronology)>($r1);

        return;
    }
    public void <init>(org.joda.time.DateTimeZone)
    {
        org.joda.time.TimeOfDay r0;
        org.joda.time.DateTimeZone $r1;
        org.joda.time.chrono.ISOChronology $r2;

        r0 := @this: org.joda.time.TimeOfDay;

        $r1 := @parameter0: org.joda.time.DateTimeZone;

        $r2 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>($r1);

        specialinvoke r0.<org.joda.time.base.BasePartial: void <init>(org.joda.time.Chronology)>($r2);

        return;
    }
    void <init>(org.joda.time.TimeOfDay, org.joda.time.Chronology)
    {
        org.joda.time.TimeOfDay r0, $r1;
        org.joda.time.Chronology $r2;

        r0 := @this: org.joda.time.TimeOfDay;

        $r1 := @parameter0: org.joda.time.TimeOfDay;

        $r2 := @parameter1: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.BasePartial: void <init>(org.joda.time.base.BasePartial,org.joda.time.Chronology)>($r1, $r2);

        return;
    }
    void <init>(org.joda.time.TimeOfDay, int[])
    {
        org.joda.time.TimeOfDay r0, $r1;
        int[] $r2;

        r0 := @this: org.joda.time.TimeOfDay;

        $r1 := @parameter0: org.joda.time.TimeOfDay;

        $r2 := @parameter1: int[];

        specialinvoke r0.<org.joda.time.base.BasePartial: void <init>(org.joda.time.base.BasePartial,int[])>($r1, $r2);

        return;
    }
    public static org.joda.time.TimeOfDay fromCalendarFields(java.util.Calendar)
    {
        java.util.Calendar $r0;
        java.lang.IllegalArgumentException $r1;
        org.joda.time.TimeOfDay $r2;
        int $i0, $i1, $i2, $i3;

        $r0 := @parameter0: java.util.Calendar;

        if $r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The calendar must not be null");

        throw $r1;

     label1:
        $r2 = new org.joda.time.TimeOfDay;

        $i0 = virtualinvoke $r0.<java.util.Calendar: int get(int)>(11);

        $i1 = virtualinvoke $r0.<java.util.Calendar: int get(int)>(12);

        $i2 = virtualinvoke $r0.<java.util.Calendar: int get(int)>(13);

        $i3 = virtualinvoke $r0.<java.util.Calendar: int get(int)>(14);

        specialinvoke $r2.<org.joda.time.TimeOfDay: void <init>(int,int,int,int)>($i0, $i1, $i2, $i3);

        return $r2;
    }
    public static org.joda.time.TimeOfDay fromDateFields(java.util.Date)
    {
        java.util.Date $r0;
        java.lang.IllegalArgumentException $r1;
        org.joda.time.TimeOfDay $r2;
        int $i0, $i1, $i2, $i4;
        long $l3;

        $r0 := @parameter0: java.util.Date;

        if $r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The date must not be null");

        throw $r1;

     label1:
        $r2 = new org.joda.time.TimeOfDay;

        $i0 = virtualinvoke $r0.<java.util.Date: int getHours()>();

        $i1 = virtualinvoke $r0.<java.util.Date: int getMinutes()>();

        $i2 = virtualinvoke $r0.<java.util.Date: int getSeconds()>();

        $l3 = virtualinvoke $r0.<java.util.Date: long getTime()>();

        $l3 = $l3 % 1000L;

        $i4 = (int) $l3;

        $i4 = $i4 + 1000;

        $i4 = $i4 % 1000;

        specialinvoke $r2.<org.joda.time.TimeOfDay: void <init>(int,int,int,int)>($i0, $i1, $i2, $i4);

        return $r2;
    }
    public static org.joda.time.TimeOfDay fromMillisOfDay(long)
    {
        long $l0;
        org.joda.time.TimeOfDay $r0;

        $l0 := @parameter0: long;

        $r0 = staticinvoke <org.joda.time.TimeOfDay: org.joda.time.TimeOfDay fromMillisOfDay(long,org.joda.time.Chronology)>($l0, null);

        return $r0;
    }
    public static org.joda.time.TimeOfDay fromMillisOfDay(long, org.joda.time.Chronology)
    {
        long $l0;
        org.joda.time.Chronology $r0;
        org.joda.time.TimeOfDay $r1;

        $l0 := @parameter0: long;

        $r0 := @parameter1: org.joda.time.Chronology;

        $r0 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>($r0);

        $r0 = virtualinvoke $r0.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>();

        $r1 = new org.joda.time.TimeOfDay;

        specialinvoke $r1.<org.joda.time.TimeOfDay: void <init>(long,org.joda.time.Chronology)>($l0, $r0);

        return $r1;
    }
    protected org.joda.time.DateTimeField getField(int, org.joda.time.Chronology)
    {
        org.joda.time.TimeOfDay r0;
        int $i0;
        org.joda.time.Chronology $r1;
        java.lang.IndexOutOfBoundsException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        org.joda.time.DateTimeField $r5;

        r0 := @this: org.joda.time.TimeOfDay;

        $i0 := @parameter0: int;

        $r1 := @parameter1: org.joda.time.Chronology;

        lookupswitch($i0)
        {
            case 0: goto label2;
            case 1: goto label3;
            case 2: goto label4;
            case 3: goto label5;
            default: goto label1;
        };

     label1:
        $r2 = new java.lang.IndexOutOfBoundsException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid index: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label2:
        $r5 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>();

        return $r5;

     label3:
        $r5 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfHour()>();

        return $r5;

     label4:
        $r5 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfMinute()>();

        return $r5;

     label5:
        $r5 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfSecond()>();

        return $r5;
    }
    public org.joda.time.DateTimeFieldType getFieldType(int)
    {
        org.joda.time.TimeOfDay r0;
        int $i0;
        org.joda.time.DateTimeFieldType[] $r1;
        org.joda.time.DateTimeFieldType $r2;

        r0 := @this: org.joda.time.TimeOfDay;

        $i0 := @parameter0: int;

        $r1 = <org.joda.time.TimeOfDay: org.joda.time.DateTimeFieldType[] FIELD_TYPES>;

        $r2 = $r1[$i0];

        return $r2;
    }
    public org.joda.time.DateTimeFieldType[] getFieldTypes()
    {
        org.joda.time.TimeOfDay r0;
        java.lang.Object $r1;
        org.joda.time.DateTimeFieldType[] $r2;

        r0 := @this: org.joda.time.TimeOfDay;

        $r2 = <org.joda.time.TimeOfDay: org.joda.time.DateTimeFieldType[] FIELD_TYPES>;

        $r1 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (org.joda.time.DateTimeFieldType[]) $r1;

        return $r2;
    }
    public int getHourOfDay()
    {
        org.joda.time.TimeOfDay r0;
        int $i0;

        r0 := @this: org.joda.time.TimeOfDay;

        $i0 = virtualinvoke r0.<org.joda.time.TimeOfDay: int getValue(int)>(0);

        return $i0;
    }
    public int getMillisOfSecond()
    {
        org.joda.time.TimeOfDay r0;
        int $i0;

        r0 := @this: org.joda.time.TimeOfDay;

        $i0 = virtualinvoke r0.<org.joda.time.TimeOfDay: int getValue(int)>(3);

        return $i0;
    }
    public int getMinuteOfHour()
    {
        org.joda.time.TimeOfDay r0;
        int $i0;

        r0 := @this: org.joda.time.TimeOfDay;

        $i0 = virtualinvoke r0.<org.joda.time.TimeOfDay: int getValue(int)>(1);

        return $i0;
    }
    public int getSecondOfMinute()
    {
        org.joda.time.TimeOfDay r0;
        int $i0;

        r0 := @this: org.joda.time.TimeOfDay;

        $i0 = virtualinvoke r0.<org.joda.time.TimeOfDay: int getValue(int)>(2);

        return $i0;
    }
    public org.joda.time.TimeOfDay$Property hourOfDay()
    {
        org.joda.time.TimeOfDay r0;
        org.joda.time.TimeOfDay$Property $r1;

        r0 := @this: org.joda.time.TimeOfDay;

        $r1 = new org.joda.time.TimeOfDay$Property;

        specialinvoke $r1.<org.joda.time.TimeOfDay$Property: void <init>(org.joda.time.TimeOfDay,int)>(r0, 0);

        return $r1;
    }
    public org.joda.time.TimeOfDay$Property millisOfSecond()
    {
        org.joda.time.TimeOfDay r0;
        org.joda.time.TimeOfDay$Property $r1;

        r0 := @this: org.joda.time.TimeOfDay;

        $r1 = new org.joda.time.TimeOfDay$Property;

        specialinvoke $r1.<org.joda.time.TimeOfDay$Property: void <init>(org.joda.time.TimeOfDay,int)>(r0, 3);

        return $r1;
    }
    public org.joda.time.TimeOfDay minus(org.joda.time.ReadablePeriod)
    {
        org.joda.time.TimeOfDay r0;
        org.joda.time.ReadablePeriod $r1;

        r0 := @this: org.joda.time.TimeOfDay;

        $r1 := @parameter0: org.joda.time.ReadablePeriod;

        r0 = virtualinvoke r0.<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withPeriodAdded(org.joda.time.ReadablePeriod,int)>($r1, -1);

        return r0;
    }
    public org.joda.time.TimeOfDay minusHours(int)
    {
        org.joda.time.TimeOfDay r0;
        int $i0;
        org.joda.time.DurationFieldType $r1;

        r0 := @this: org.joda.time.TimeOfDay;

        $i0 := @parameter0: int;

        $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>();

        $i0 = staticinvoke <org.joda.time.field.FieldUtils: int safeNegate(int)>($i0);

        r0 = virtualinvoke r0.<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withFieldAdded(org.joda.time.DurationFieldType,int)>($r1, $i0);

        return r0;
    }
    public org.joda.time.TimeOfDay minusMillis(int)
    {
        org.joda.time.TimeOfDay r0;
        int $i0;
        org.joda.time.DurationFieldType $r1;

        r0 := @this: org.joda.time.TimeOfDay;

        $i0 := @parameter0: int;

        $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>();

        $i0 = staticinvoke <org.joda.time.field.FieldUtils: int safeNegate(int)>($i0);

        r0 = virtualinvoke r0.<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withFieldAdded(org.joda.time.DurationFieldType,int)>($r1, $i0);

        return r0;
    }
    public org.joda.time.TimeOfDay minusMinutes(int)
    {
        org.joda.time.TimeOfDay r0;
        int $i0;
        org.joda.time.DurationFieldType $r1;

        r0 := @this: org.joda.time.TimeOfDay;

        $i0 := @parameter0: int;

        $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>();

        $i0 = staticinvoke <org.joda.time.field.FieldUtils: int safeNegate(int)>($i0);

        r0 = virtualinvoke r0.<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withFieldAdded(org.joda.time.DurationFieldType,int)>($r1, $i0);

        return r0;
    }
    public org.joda.time.TimeOfDay minusSeconds(int)
    {
        org.joda.time.TimeOfDay r0;
        int $i0;
        org.joda.time.DurationFieldType $r1;

        r0 := @this: org.joda.time.TimeOfDay;

        $i0 := @parameter0: int;

        $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>();

        $i0 = staticinvoke <org.joda.time.field.FieldUtils: int safeNegate(int)>($i0);

        r0 = virtualinvoke r0.<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withFieldAdded(org.joda.time.DurationFieldType,int)>($r1, $i0);

        return r0;
    }
    public org.joda.time.TimeOfDay$Property minuteOfHour()
    {
        org.joda.time.TimeOfDay r0;
        org.joda.time.TimeOfDay$Property $r1;

        r0 := @this: org.joda.time.TimeOfDay;

        $r1 = new org.joda.time.TimeOfDay$Property;

        specialinvoke $r1.<org.joda.time.TimeOfDay$Property: void <init>(org.joda.time.TimeOfDay,int)>(r0, 1);

        return $r1;
    }
    public org.joda.time.TimeOfDay plus(org.joda.time.ReadablePeriod)
    {
        org.joda.time.TimeOfDay r0;
        org.joda.time.ReadablePeriod $r1;

        r0 := @this: org.joda.time.TimeOfDay;

        $r1 := @parameter0: org.joda.time.ReadablePeriod;

        r0 = virtualinvoke r0.<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withPeriodAdded(org.joda.time.ReadablePeriod,int)>($r1, 1);

        return r0;
    }
    public org.joda.time.TimeOfDay plusHours(int)
    {
        org.joda.time.TimeOfDay r0;
        int $i0;
        org.joda.time.DurationFieldType $r1;

        r0 := @this: org.joda.time.TimeOfDay;

        $i0 := @parameter0: int;

        $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>();

        r0 = virtualinvoke r0.<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withFieldAdded(org.joda.time.DurationFieldType,int)>($r1, $i0);

        return r0;
    }
    public org.joda.time.TimeOfDay plusMillis(int)
    {
        org.joda.time.TimeOfDay r0;
        int $i0;
        org.joda.time.DurationFieldType $r1;

        r0 := @this: org.joda.time.TimeOfDay;

        $i0 := @parameter0: int;

        $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>();

        r0 = virtualinvoke r0.<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withFieldAdded(org.joda.time.DurationFieldType,int)>($r1, $i0);

        return r0;
    }
    public org.joda.time.TimeOfDay plusMinutes(int)
    {
        org.joda.time.TimeOfDay r0;
        int $i0;
        org.joda.time.DurationFieldType $r1;

        r0 := @this: org.joda.time.TimeOfDay;

        $i0 := @parameter0: int;

        $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>();

        r0 = virtualinvoke r0.<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withFieldAdded(org.joda.time.DurationFieldType,int)>($r1, $i0);

        return r0;
    }
    public org.joda.time.TimeOfDay plusSeconds(int)
    {
        org.joda.time.TimeOfDay r0;
        int $i0;
        org.joda.time.DurationFieldType $r1;

        r0 := @this: org.joda.time.TimeOfDay;

        $i0 := @parameter0: int;

        $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>();

        r0 = virtualinvoke r0.<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withFieldAdded(org.joda.time.DurationFieldType,int)>($r1, $i0);

        return r0;
    }
    public org.joda.time.TimeOfDay$Property property(org.joda.time.DateTimeFieldType)
    {
        org.joda.time.TimeOfDay r0;
        org.joda.time.DateTimeFieldType $r1;
        org.joda.time.TimeOfDay$Property $r2;
        int $i0;

        r0 := @this: org.joda.time.TimeOfDay;

        $r1 := @parameter0: org.joda.time.DateTimeFieldType;

        $r2 = new org.joda.time.TimeOfDay$Property;

        $i0 = virtualinvoke r0.<org.joda.time.TimeOfDay: int indexOfSupported(org.joda.time.DateTimeFieldType)>($r1);

        specialinvoke $r2.<org.joda.time.TimeOfDay$Property: void <init>(org.joda.time.TimeOfDay,int)>(r0, $i0);

        return $r2;
    }
    public org.joda.time.TimeOfDay$Property secondOfMinute()
    {
        org.joda.time.TimeOfDay r0;
        org.joda.time.TimeOfDay$Property $r1;

        r0 := @this: org.joda.time.TimeOfDay;

        $r1 = new org.joda.time.TimeOfDay$Property;

        specialinvoke $r1.<org.joda.time.TimeOfDay$Property: void <init>(org.joda.time.TimeOfDay,int)>(r0, 2);

        return $r1;
    }
    public int size()
    {
        org.joda.time.TimeOfDay r0;

        r0 := @this: org.joda.time.TimeOfDay;

        return 4;
    }
    public org.joda.time.DateTime toDateTimeToday()
    {
        org.joda.time.TimeOfDay r0;
        org.joda.time.DateTime $r1;

        r0 := @this: org.joda.time.TimeOfDay;

        $r1 = virtualinvoke r0.<org.joda.time.TimeOfDay: org.joda.time.DateTime toDateTimeToday(org.joda.time.DateTimeZone)>(null);

        return $r1;
    }
    public org.joda.time.DateTime toDateTimeToday(org.joda.time.DateTimeZone)
    {
        org.joda.time.TimeOfDay r0;
        org.joda.time.DateTimeZone $r1;
        org.joda.time.DateTime $r2;
        org.joda.time.Chronology $r3;
        long $l0;

        r0 := @this: org.joda.time.TimeOfDay;

        $r1 := @parameter0: org.joda.time.DateTimeZone;

        $r3 = virtualinvoke r0.<org.joda.time.TimeOfDay: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r3.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>($r1);

        $l0 = staticinvoke <org.joda.time.DateTimeUtils: long currentTimeMillis()>();

        $l0 = virtualinvoke $r3.<org.joda.time.Chronology: long set(org.joda.time.ReadablePartial,long)>(r0, $l0);

        $r2 = new org.joda.time.DateTime;

        specialinvoke $r2.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>($l0, $r3);

        return $r2;
    }
    public org.joda.time.LocalTime toLocalTime()
    {
        org.joda.time.TimeOfDay r0;
        org.joda.time.LocalTime $r1;
        int $i0, $i1, $i2, $i3;
        org.joda.time.Chronology $r2;

        r0 := @this: org.joda.time.TimeOfDay;

        $r1 = new org.joda.time.LocalTime;

        $i0 = virtualinvoke r0.<org.joda.time.TimeOfDay: int getHourOfDay()>();

        $i1 = virtualinvoke r0.<org.joda.time.TimeOfDay: int getMinuteOfHour()>();

        $i2 = virtualinvoke r0.<org.joda.time.TimeOfDay: int getSecondOfMinute()>();

        $i3 = virtualinvoke r0.<org.joda.time.TimeOfDay: int getMillisOfSecond()>();

        $r2 = virtualinvoke r0.<org.joda.time.TimeOfDay: org.joda.time.Chronology getChronology()>();

        specialinvoke $r1.<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>($i0, $i1, $i2, $i3, $r2);

        return $r1;
    }
    public java.lang.String toString()
    {
        org.joda.time.TimeOfDay r0;
        org.joda.time.format.DateTimeFormatter $r1;
        java.lang.String $r2;

        r0 := @this: org.joda.time.TimeOfDay;

        $r1 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter tTime()>();

        $r2 = virtualinvoke $r1.<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>(r0);

        return $r2;
    }
    public org.joda.time.TimeOfDay withChronologyRetainFields(org.joda.time.Chronology)
    {
        org.joda.time.Chronology $r0, $r2;
        org.joda.time.TimeOfDay r1, $r3;
        int[] $r4;

        r1 := @this: org.joda.time.TimeOfDay;

        $r0 := @parameter0: org.joda.time.Chronology;

        $r0 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>($r0);

        $r0 = virtualinvoke $r0.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>();

        $r2 = virtualinvoke r1.<org.joda.time.TimeOfDay: org.joda.time.Chronology getChronology()>();

        if $r0 != $r2 goto label1;

        return r1;

     label1:
        $r3 = new org.joda.time.TimeOfDay;

        specialinvoke $r3.<org.joda.time.TimeOfDay: void <init>(org.joda.time.TimeOfDay,org.joda.time.Chronology)>(r1, $r0);

        $r4 = virtualinvoke r1.<org.joda.time.TimeOfDay: int[] getValues()>();

        virtualinvoke $r0.<org.joda.time.Chronology: void validate(org.joda.time.ReadablePartial,int[])>($r3, $r4);

        return $r3;
    }
    public org.joda.time.TimeOfDay withField(org.joda.time.DateTimeFieldType, int)
    {
        org.joda.time.DateTimeFieldType $r0;
        int $i0, $i1, $i2;
        org.joda.time.TimeOfDay r1, $r4;
        int[] $r2;
        org.joda.time.DateTimeField $r3;

        r1 := @this: org.joda.time.TimeOfDay;

        $r0 := @parameter0: org.joda.time.DateTimeFieldType;

        $i0 := @parameter1: int;

        $i1 = virtualinvoke r1.<org.joda.time.TimeOfDay: int indexOfSupported(org.joda.time.DateTimeFieldType)>($r0);

        $i2 = virtualinvoke r1.<org.joda.time.TimeOfDay: int getValue(int)>($i1);

        if $i0 != $i2 goto label1;

        return r1;

     label1:
        $r2 = virtualinvoke r1.<org.joda.time.TimeOfDay: int[] getValues()>();

        $r3 = virtualinvoke r1.<org.joda.time.TimeOfDay: org.joda.time.DateTimeField getField(int)>($i1);

        $r2 = virtualinvoke $r3.<org.joda.time.DateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],int)>(r1, $i1, $r2, $i0);

        $r4 = new org.joda.time.TimeOfDay;

        specialinvoke $r4.<org.joda.time.TimeOfDay: void <init>(org.joda.time.TimeOfDay,int[])>(r1, $r2);

        return $r4;
    }
    public org.joda.time.TimeOfDay withFieldAdded(org.joda.time.DurationFieldType, int)
    {
        org.joda.time.DurationFieldType $r0;
        int $i0, $i1;
        org.joda.time.TimeOfDay r1, $r4;
        int[] $r2;
        org.joda.time.DateTimeField $r3;

        r1 := @this: org.joda.time.TimeOfDay;

        $r0 := @parameter0: org.joda.time.DurationFieldType;

        $i0 := @parameter1: int;

        $i1 = virtualinvoke r1.<org.joda.time.TimeOfDay: int indexOfSupported(org.joda.time.DurationFieldType)>($r0);

        if $i0 != 0 goto label1;

        return r1;

     label1:
        $r2 = virtualinvoke r1.<org.joda.time.TimeOfDay: int[] getValues()>();

        $r3 = virtualinvoke r1.<org.joda.time.TimeOfDay: org.joda.time.DateTimeField getField(int)>($i1);

        $r2 = virtualinvoke $r3.<org.joda.time.DateTimeField: int[] addWrapPartial(org.joda.time.ReadablePartial,int,int[],int)>(r1, $i1, $r2, $i0);

        $r4 = new org.joda.time.TimeOfDay;

        specialinvoke $r4.<org.joda.time.TimeOfDay: void <init>(org.joda.time.TimeOfDay,int[])>(r1, $r2);

        return $r4;
    }
    public org.joda.time.TimeOfDay withHourOfDay(int)
    {
        org.joda.time.TimeOfDay r0, $r4;
        int $i0;
        int[] $r1;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.TimeOfDay;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.TimeOfDay: int[] getValues()>();

        $r2 = virtualinvoke r0.<org.joda.time.TimeOfDay: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>();

        $r1 = virtualinvoke $r3.<org.joda.time.DateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],int)>(r0, 0, $r1, $i0);

        $r4 = new org.joda.time.TimeOfDay;

        specialinvoke $r4.<org.joda.time.TimeOfDay: void <init>(org.joda.time.TimeOfDay,int[])>(r0, $r1);

        return $r4;
    }
    public org.joda.time.TimeOfDay withMillisOfSecond(int)
    {
        org.joda.time.TimeOfDay r0, $r4;
        int $i0;
        int[] $r1;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.TimeOfDay;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.TimeOfDay: int[] getValues()>();

        $r2 = virtualinvoke r0.<org.joda.time.TimeOfDay: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfSecond()>();

        $r1 = virtualinvoke $r3.<org.joda.time.DateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],int)>(r0, 3, $r1, $i0);

        $r4 = new org.joda.time.TimeOfDay;

        specialinvoke $r4.<org.joda.time.TimeOfDay: void <init>(org.joda.time.TimeOfDay,int[])>(r0, $r1);

        return $r4;
    }
    public org.joda.time.TimeOfDay withMinuteOfHour(int)
    {
        org.joda.time.TimeOfDay r0, $r4;
        int $i0;
        int[] $r1;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.TimeOfDay;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.TimeOfDay: int[] getValues()>();

        $r2 = virtualinvoke r0.<org.joda.time.TimeOfDay: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfHour()>();

        $r1 = virtualinvoke $r3.<org.joda.time.DateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],int)>(r0, 1, $r1, $i0);

        $r4 = new org.joda.time.TimeOfDay;

        specialinvoke $r4.<org.joda.time.TimeOfDay: void <init>(org.joda.time.TimeOfDay,int[])>(r0, $r1);

        return $r4;
    }
    public org.joda.time.TimeOfDay withPeriodAdded(org.joda.time.ReadablePeriod, int)
    {
        org.joda.time.ReadablePeriod $r0;
        int $i0, $i1, $i2, $i3;
        org.joda.time.TimeOfDay r1, $r5;
        int[] $r2;
        org.joda.time.DurationFieldType $r3;
        org.joda.time.DateTimeField $r4;

        r1 := @this: org.joda.time.TimeOfDay;

        $r0 := @parameter0: org.joda.time.ReadablePeriod;

        $i0 := @parameter1: int;

        if $r0 == null goto label5;

        if $i0 != 0 goto label1;

        return r1;

     label1:
        $r2 = virtualinvoke r1.<org.joda.time.TimeOfDay: int[] getValues()>();

        $i1 = 0;

     label2:
        $i2 = interfaceinvoke $r0.<org.joda.time.ReadablePeriod: int size()>();

        if $i1 >= $i2 goto label4;

        $r3 = interfaceinvoke $r0.<org.joda.time.ReadablePeriod: org.joda.time.DurationFieldType getFieldType(int)>($i1);

        $i2 = virtualinvoke r1.<org.joda.time.TimeOfDay: int indexOf(org.joda.time.DurationFieldType)>($r3);

        if $i2 < 0 goto label3;

        $r4 = virtualinvoke r1.<org.joda.time.TimeOfDay: org.joda.time.DateTimeField getField(int)>($i2);

        $i3 = interfaceinvoke $r0.<org.joda.time.ReadablePeriod: int getValue(int)>($i1);

        $i3 = staticinvoke <org.joda.time.field.FieldUtils: int safeMultiply(int,int)>($i3, $i0);

        $r2 = virtualinvoke $r4.<org.joda.time.DateTimeField: int[] addWrapPartial(org.joda.time.ReadablePartial,int,int[],int)>(r1, $i2, $r2, $i3);

     label3:
        $i1 = $i1 + 1;

        goto label2;

     label4:
        $r5 = new org.joda.time.TimeOfDay;

        specialinvoke $r5.<org.joda.time.TimeOfDay: void <init>(org.joda.time.TimeOfDay,int[])>(r1, $r2);

        return $r5;

     label5:
        return r1;
    }
    public org.joda.time.TimeOfDay withSecondOfMinute(int)
    {
        org.joda.time.TimeOfDay r0, $r4;
        int $i0;
        int[] $r1;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.TimeOfDay;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.TimeOfDay: int[] getValues()>();

        $r2 = virtualinvoke r0.<org.joda.time.TimeOfDay: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfMinute()>();

        $r1 = virtualinvoke $r3.<org.joda.time.DateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],int)>(r0, 2, $r1, $i0);

        $r4 = new org.joda.time.TimeOfDay;

        specialinvoke $r4.<org.joda.time.TimeOfDay: void <init>(org.joda.time.TimeOfDay,int[])>(r0, $r1);

        return $r4;
    }
