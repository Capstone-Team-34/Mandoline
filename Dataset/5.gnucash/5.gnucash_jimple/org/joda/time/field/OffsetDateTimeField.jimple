org.joda.time.field.OffsetDateTimeField extends org.joda.time.field.DecoratedDateTimeField
private static final long serialVersionUID
private final int iMax
private final int iMin
private final int iOffset
    public void <init>(org.joda.time.DateTimeField, int)
    {
        org.joda.time.field.OffsetDateTimeField r0;
        org.joda.time.DateTimeField $r1;
        int $i0;
        org.joda.time.DateTimeFieldType $r2;

        r0 := @this: org.joda.time.field.OffsetDateTimeField;

        $r1 := @parameter0: org.joda.time.DateTimeField;

        $i0 := @parameter1: int;

        if $r1 != null goto label2;

        $r2 = null;

     label1:
        specialinvoke r0.<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>($r1, $r2, $i0, -2147483648, 2147483647);

        return;

     label2:
        $r2 = virtualinvoke $r1.<org.joda.time.DateTimeField: org.joda.time.DateTimeFieldType getType()>();

        goto label1;
    }
    public void <init>(org.joda.time.DateTimeField, org.joda.time.DateTimeFieldType, int)
    {
        org.joda.time.field.OffsetDateTimeField r0;
        org.joda.time.DateTimeField $r1;
        org.joda.time.DateTimeFieldType $r2;
        int $i0;

        r0 := @this: org.joda.time.field.OffsetDateTimeField;

        $r1 := @parameter0: org.joda.time.DateTimeField;

        $r2 := @parameter1: org.joda.time.DateTimeFieldType;

        $i0 := @parameter2: int;

        specialinvoke r0.<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>($r1, $r2, $i0, -2147483648, 2147483647);

        return;
    }
    public void <init>(org.joda.time.DateTimeField, org.joda.time.DateTimeFieldType, int, int, int)
    {
        org.joda.time.field.OffsetDateTimeField r0;
        org.joda.time.DateTimeField $r1;
        org.joda.time.DateTimeFieldType $r2;
        int $i0, $i1, $i2, $i3;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.joda.time.field.OffsetDateTimeField;

        $r1 := @parameter0: org.joda.time.DateTimeField;

        $r2 := @parameter1: org.joda.time.DateTimeFieldType;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        specialinvoke r0.<org.joda.time.field.DecoratedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>($r1, $r2);

        if $i0 != 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The offset cannot be zero");

        throw $r3;

     label1:
        r0.<org.joda.time.field.OffsetDateTimeField: int iOffset> = $i0;

        $i3 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMinimumValue()>();

        $i3 = $i3 + $i0;

        if $i1 >= $i3 goto label3;

        $i1 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMinimumValue()>();

        $i1 = $i1 + $i0;

        r0.<org.joda.time.field.OffsetDateTimeField: int iMin> = $i1;

     label2:
        $i1 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMaximumValue()>();

        $i1 = $i1 + $i0;

        if $i2 <= $i1 goto label4;

        $i1 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMaximumValue()>();

        $i0 = $i1 + $i0;

        r0.<org.joda.time.field.OffsetDateTimeField: int iMax> = $i0;

        return;

     label3:
        r0.<org.joda.time.field.OffsetDateTimeField: int iMin> = $i1;

        goto label2;

     label4:
        r0.<org.joda.time.field.OffsetDateTimeField: int iMax> = $i2;

        return;
    }
    public long add(long, int)
    {
        org.joda.time.field.OffsetDateTimeField r0;
        long $l0;
        int $i1, $i2, $i3;

        r0 := @this: org.joda.time.field.OffsetDateTimeField;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        $l0 = specialinvoke r0.<org.joda.time.field.DecoratedDateTimeField: long add(long,int)>($l0, $i1);

        $i3 = virtualinvoke r0.<org.joda.time.field.OffsetDateTimeField: int get(long)>($l0);

        $i1 = r0.<org.joda.time.field.OffsetDateTimeField: int iMin>;

        $i2 = r0.<org.joda.time.field.OffsetDateTimeField: int iMax>;

        staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, $i3, $i1, $i2);

        return $l0;
    }
    public long add(long, long)
    {
        org.joda.time.field.OffsetDateTimeField r0;
        long $l0, $l1;
        int $i2, $i3, $i4;

        r0 := @this: org.joda.time.field.OffsetDateTimeField;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $l0 = specialinvoke r0.<org.joda.time.field.DecoratedDateTimeField: long add(long,long)>($l0, $l1);

        $i4 = virtualinvoke r0.<org.joda.time.field.OffsetDateTimeField: int get(long)>($l0);

        $i2 = r0.<org.joda.time.field.OffsetDateTimeField: int iMin>;

        $i3 = r0.<org.joda.time.field.OffsetDateTimeField: int iMax>;

        staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, $i4, $i2, $i3);

        return $l0;
    }
    public long addWrapField(long, int)
    {
        org.joda.time.field.OffsetDateTimeField r0;
        long $l0;
        int $i1, $i2, $i3, $i4;

        r0 := @this: org.joda.time.field.OffsetDateTimeField;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        $i4 = virtualinvoke r0.<org.joda.time.field.OffsetDateTimeField: int get(long)>($l0);

        $i2 = r0.<org.joda.time.field.OffsetDateTimeField: int iMin>;

        $i3 = r0.<org.joda.time.field.OffsetDateTimeField: int iMax>;

        $i1 = staticinvoke <org.joda.time.field.FieldUtils: int getWrappedValue(int,int,int,int)>($i4, $i1, $i2, $i3);

        $l0 = virtualinvoke r0.<org.joda.time.field.OffsetDateTimeField: long set(long,int)>($l0, $i1);

        return $l0;
    }
    public int get(long)
    {
        org.joda.time.field.OffsetDateTimeField r0;
        long $l0;
        int $i1, $i2;

        r0 := @this: org.joda.time.field.OffsetDateTimeField;

        $l0 := @parameter0: long;

        $i2 = specialinvoke r0.<org.joda.time.field.DecoratedDateTimeField: int get(long)>($l0);

        $i1 = r0.<org.joda.time.field.OffsetDateTimeField: int iOffset>;

        $i1 = $i2 + $i1;

        return $i1;
    }
    public int getLeapAmount(long)
    {
        org.joda.time.field.OffsetDateTimeField r0;
        long $l0;
        org.joda.time.DateTimeField $r1;
        int $i1;

        r0 := @this: org.joda.time.field.OffsetDateTimeField;

        $l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<org.joda.time.field.OffsetDateTimeField: org.joda.time.DateTimeField getWrappedField()>();

        $i1 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getLeapAmount(long)>($l0);

        return $i1;
    }
    public org.joda.time.DurationField getLeapDurationField()
    {
        org.joda.time.field.OffsetDateTimeField r0;
        org.joda.time.DateTimeField $r1;
        org.joda.time.DurationField $r2;

        r0 := @this: org.joda.time.field.OffsetDateTimeField;

        $r1 = virtualinvoke r0.<org.joda.time.field.OffsetDateTimeField: org.joda.time.DateTimeField getWrappedField()>();

        $r2 = virtualinvoke $r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getLeapDurationField()>();

        return $r2;
    }
    public int getMaximumValue()
    {
        org.joda.time.field.OffsetDateTimeField r0;
        int i0;

        r0 := @this: org.joda.time.field.OffsetDateTimeField;

        i0 = r0.<org.joda.time.field.OffsetDateTimeField: int iMax>;

        return i0;
    }
    public int getMinimumValue()
    {
        org.joda.time.field.OffsetDateTimeField r0;
        int i0;

        r0 := @this: org.joda.time.field.OffsetDateTimeField;

        i0 = r0.<org.joda.time.field.OffsetDateTimeField: int iMin>;

        return i0;
    }
    public int getOffset()
    {
        org.joda.time.field.OffsetDateTimeField r0;
        int i0;

        r0 := @this: org.joda.time.field.OffsetDateTimeField;

        i0 = r0.<org.joda.time.field.OffsetDateTimeField: int iOffset>;

        return i0;
    }
    public boolean isLeap(long)
    {
        org.joda.time.field.OffsetDateTimeField r0;
        long $l0;
        org.joda.time.DateTimeField $r1;
        boolean $z0;

        r0 := @this: org.joda.time.field.OffsetDateTimeField;

        $l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<org.joda.time.field.OffsetDateTimeField: org.joda.time.DateTimeField getWrappedField()>();

        $z0 = virtualinvoke $r1.<org.joda.time.DateTimeField: boolean isLeap(long)>($l0);

        return $z0;
    }
    public long remainder(long)
    {
        org.joda.time.field.OffsetDateTimeField r0;
        long $l0;
        org.joda.time.DateTimeField $r1;

        r0 := @this: org.joda.time.field.OffsetDateTimeField;

        $l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<org.joda.time.field.OffsetDateTimeField: org.joda.time.DateTimeField getWrappedField()>();

        $l0 = virtualinvoke $r1.<org.joda.time.DateTimeField: long remainder(long)>($l0);

        return $l0;
    }
    public long roundCeiling(long)
    {
        org.joda.time.field.OffsetDateTimeField r0;
        long $l0;
        org.joda.time.DateTimeField $r1;

        r0 := @this: org.joda.time.field.OffsetDateTimeField;

        $l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<org.joda.time.field.OffsetDateTimeField: org.joda.time.DateTimeField getWrappedField()>();

        $l0 = virtualinvoke $r1.<org.joda.time.DateTimeField: long roundCeiling(long)>($l0);

        return $l0;
    }
    public long roundFloor(long)
    {
        org.joda.time.field.OffsetDateTimeField r0;
        long $l0;
        org.joda.time.DateTimeField $r1;

        r0 := @this: org.joda.time.field.OffsetDateTimeField;

        $l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<org.joda.time.field.OffsetDateTimeField: org.joda.time.DateTimeField getWrappedField()>();

        $l0 = virtualinvoke $r1.<org.joda.time.DateTimeField: long roundFloor(long)>($l0);

        return $l0;
    }
    public long roundHalfCeiling(long)
    {
        org.joda.time.field.OffsetDateTimeField r0;
        long $l0;
        org.joda.time.DateTimeField $r1;

        r0 := @this: org.joda.time.field.OffsetDateTimeField;

        $l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<org.joda.time.field.OffsetDateTimeField: org.joda.time.DateTimeField getWrappedField()>();

        $l0 = virtualinvoke $r1.<org.joda.time.DateTimeField: long roundHalfCeiling(long)>($l0);

        return $l0;
    }
    public long roundHalfEven(long)
    {
        org.joda.time.field.OffsetDateTimeField r0;
        long $l0;
        org.joda.time.DateTimeField $r1;

        r0 := @this: org.joda.time.field.OffsetDateTimeField;

        $l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<org.joda.time.field.OffsetDateTimeField: org.joda.time.DateTimeField getWrappedField()>();

        $l0 = virtualinvoke $r1.<org.joda.time.DateTimeField: long roundHalfEven(long)>($l0);

        return $l0;
    }
    public long roundHalfFloor(long)
    {
        org.joda.time.field.OffsetDateTimeField r0;
        long $l0;
        org.joda.time.DateTimeField $r1;

        r0 := @this: org.joda.time.field.OffsetDateTimeField;

        $l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<org.joda.time.field.OffsetDateTimeField: org.joda.time.DateTimeField getWrappedField()>();

        $l0 = virtualinvoke $r1.<org.joda.time.DateTimeField: long roundHalfFloor(long)>($l0);

        return $l0;
    }
    public long set(long, int)
    {
        org.joda.time.field.OffsetDateTimeField r0;
        long $l0;
        int $i1, $i2, $i3;

        r0 := @this: org.joda.time.field.OffsetDateTimeField;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        $i3 = r0.<org.joda.time.field.OffsetDateTimeField: int iMin>;

        $i2 = r0.<org.joda.time.field.OffsetDateTimeField: int iMax>;

        staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, $i1, $i3, $i2);

        $i2 = r0.<org.joda.time.field.OffsetDateTimeField: int iOffset>;

        $i1 = $i1 - $i2;

        $l0 = specialinvoke r0.<org.joda.time.field.DecoratedDateTimeField: long set(long,int)>($l0, $i1);

        return $l0;
    }
