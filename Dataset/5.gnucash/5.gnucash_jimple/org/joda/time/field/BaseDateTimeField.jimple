org.joda.time.field.BaseDateTimeField extends org.joda.time.DateTimeField
private final org.joda.time.DateTimeFieldType iType
    protected void <init>(org.joda.time.DateTimeFieldType)
    {
        org.joda.time.field.BaseDateTimeField r0;
        org.joda.time.DateTimeFieldType $r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        $r1 := @parameter0: org.joda.time.DateTimeFieldType;

        specialinvoke r0.<org.joda.time.DateTimeField: void <init>()>();

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The type must not be null");

        throw $r2;

     label1:
        r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType iType> = $r1;

        return;
    }
    public long add(long, int)
    {
        org.joda.time.field.BaseDateTimeField r0;
        long $l0;
        int $i1;
        org.joda.time.DurationField $r1;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        $r1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DurationField getDurationField()>();

        $l0 = virtualinvoke $r1.<org.joda.time.DurationField: long add(long,int)>($l0, $i1);

        return $l0;
    }
    public long add(long, long)
    {
        org.joda.time.field.BaseDateTimeField r0;
        long $l0, $l1;
        org.joda.time.DurationField $r1;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $r1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DurationField getDurationField()>();

        $l0 = virtualinvoke $r1.<org.joda.time.DurationField: long add(long,long)>($l0, $l1);

        return $l0;
    }
    public int[] add(org.joda.time.ReadablePartial, int, int[], int)
    {
        org.joda.time.field.BaseDateTimeField r0;
        org.joda.time.ReadablePartial $r1;
        int $i0, $i1, $i2, $i3;
        int[] $r2, $r9;
        org.joda.time.DateTimeField $r3, $r5;
        long $l4, $l5;
        byte $b6;
        java.lang.IllegalArgumentException $r4;
        org.joda.time.DurationField $r6;
        org.joda.time.DurationFieldType $r7, $r8;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        $r1 := @parameter0: org.joda.time.ReadablePartial;

        $i0 := @parameter1: int;

        $r2 := @parameter2: int[];

        $i1 := @parameter3: int;

        if $i1 != 0 goto label01;

        return $r2;

     label01:
        $r3 = null;

     label02:
        if $i1 <= 0 goto label03;

        $i2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>($r1, $r2);

        $i3 = $r2[$i0];

        $i3 = $i3 + $i1;

        $l4 = (long) $i3;

        $l5 = (long) $i2;

        $b6 = $l4 cmp $l5;

        if $b6 > 0 goto label05;

        $i2 = (int) $l4;

        $r2[$i0] = $i2;

     label03:
        if $i1 >= 0 goto label04;

        $i2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>($r1, $r2);

        $i3 = $r2[$i0];

        $i3 = $i3 + $i1;

        $l4 = (long) $i3;

        $l5 = (long) $i2;

        $b6 = $l4 cmp $l5;

        if $b6 < 0 goto label08;

        $i1 = (int) $l4;

        $r2[$i0] = $i1;

     label04:
        $i1 = $r2[$i0];

        $r2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],int)>($r1, $i0, $r2, $i1);

        return $r2;

     label05:
        if $r3 != null goto label07;

        if $i0 != 0 goto label06;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Maximum value exceeded for add");

        throw $r4;

     label06:
        $i3 = $i0 + -1;

        $r5 = interfaceinvoke $r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>($i3);

        $r3 = $r5;

        $r6 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DurationField getRangeDurationField()>();

        $r7 = virtualinvoke $r6.<org.joda.time.DurationField: org.joda.time.DurationFieldType getType()>();

        $r6 = virtualinvoke $r5.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>();

        $r8 = virtualinvoke $r6.<org.joda.time.DurationField: org.joda.time.DurationFieldType getType()>();

        if $r7 == $r8 goto label07;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Fields invalid for add");

        throw $r4;

     label07:
        $i2 = $i2 + 1;

        $i3 = $r2[$i0];

        $i2 = $i2 - $i3;

        $i1 = $i1 - $i2;

        $i2 = $i0 + -1;

        $r9 = virtualinvoke $r3.<org.joda.time.DateTimeField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>($r1, $i2, $r2, 1);

        $r2 = $r9;

        $i2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>($r1, $r9);

        $r9[$i0] = $i2;

        goto label02;

     label08:
        if $r3 != null goto label10;

        if $i0 != 0 goto label09;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Maximum value exceeded for add");

        throw $r4;

     label09:
        $i3 = $i0 + -1;

        $r5 = interfaceinvoke $r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>($i3);

        $r3 = $r5;

        $r6 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DurationField getRangeDurationField()>();

        $r7 = virtualinvoke $r6.<org.joda.time.DurationField: org.joda.time.DurationFieldType getType()>();

        $r6 = virtualinvoke $r5.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>();

        $r8 = virtualinvoke $r6.<org.joda.time.DurationField: org.joda.time.DurationFieldType getType()>();

        if $r7 == $r8 goto label10;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Fields invalid for add");

        throw $r4;

     label10:
        $i2 = $i2 + -1;

        $i3 = $r2[$i0];

        $i2 = $i2 - $i3;

        $i1 = $i1 - $i2;

        $i2 = $i0 + -1;

        $r9 = virtualinvoke $r3.<org.joda.time.DateTimeField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>($r1, $i2, $r2, -1);

        $r2 = $r9;

        $i2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>($r1, $r9);

        $r9[$i0] = $i2;

        goto label03;
    }
    public long addWrapField(long, int)
    {
        org.joda.time.field.BaseDateTimeField r0;
        long $l0;
        int $i1, $i2, $i3, $i4;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        $i2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int get(long)>($l0);

        $i3 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue(long)>($l0);

        $i4 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue(long)>($l0);

        $i1 = staticinvoke <org.joda.time.field.FieldUtils: int getWrappedValue(int,int,int,int)>($i2, $i1, $i3, $i4);

        $l0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: long set(long,int)>($l0, $i1);

        return $l0;
    }
    public int[] addWrapField(org.joda.time.ReadablePartial, int, int[], int)
    {
        org.joda.time.field.BaseDateTimeField r0;
        org.joda.time.ReadablePartial $r1;
        int $i0, $i1, $i2, $i3, $i4;
        int[] $r2;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        $r1 := @parameter0: org.joda.time.ReadablePartial;

        $i0 := @parameter1: int;

        $r2 := @parameter2: int[];

        $i1 := @parameter3: int;

        $i2 = $r2[$i0];

        $i3 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>($r1);

        $i4 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>($r1);

        $i1 = staticinvoke <org.joda.time.field.FieldUtils: int getWrappedValue(int,int,int,int)>($i2, $i1, $i3, $i4);

        $r2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],int)>($r1, $i0, $r2, $i1);

        return $r2;
    }
    public int[] addWrapPartial(org.joda.time.ReadablePartial, int, int[], int)
    {
        org.joda.time.field.BaseDateTimeField r0;
        org.joda.time.ReadablePartial $r1;
        int $i0, $i1, $i2, $i3;
        int[] $r2, $r9;
        org.joda.time.DateTimeField $r3, $r4;
        long $l4, $l5;
        byte $b6;
        org.joda.time.DurationField $r5;
        org.joda.time.DurationFieldType $r6, $r7;
        java.lang.IllegalArgumentException $r8;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        $r1 := @parameter0: org.joda.time.ReadablePartial;

        $i0 := @parameter1: int;

        $r2 := @parameter2: int[];

        $i1 := @parameter3: int;

        if $i1 != 0 goto label01;

        return $r2;

     label01:
        $r3 = null;

     label02:
        if $i1 <= 0 goto label03;

        $i2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>($r1, $r2);

        $i3 = $r2[$i0];

        $i3 = $i3 + $i1;

        $l4 = (long) $i3;

        $l5 = (long) $i2;

        $b6 = $l4 cmp $l5;

        if $b6 > 0 goto label05;

        $i2 = (int) $l4;

        $r2[$i0] = $i2;

     label03:
        if $i1 >= 0 goto label04;

        $i2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>($r1, $r2);

        $i3 = $r2[$i0];

        $i3 = $i3 + $i1;

        $l4 = (long) $i3;

        $l5 = (long) $i2;

        $b6 = $l4 cmp $l5;

        if $b6 < 0 goto label08;

        $i1 = (int) $l4;

        $r2[$i0] = $i1;

     label04:
        $i1 = $r2[$i0];

        $r2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],int)>($r1, $i0, $r2, $i1);

        return $r2;

     label05:
        if $r3 != null goto label07;

        if $i0 != 0 goto label06;

        $i2 = $i2 + 1;

        $i3 = $r2[$i0];

        $i2 = $i2 - $i3;

        $i1 = $i1 - $i2;

        $i2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>($r1, $r2);

        $r2[$i0] = $i2;

        goto label02;

     label06:
        $i3 = $i0 + -1;

        $r4 = interfaceinvoke $r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>($i3);

        $r3 = $r4;

        $r5 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DurationField getRangeDurationField()>();

        $r6 = virtualinvoke $r5.<org.joda.time.DurationField: org.joda.time.DurationFieldType getType()>();

        $r5 = virtualinvoke $r4.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>();

        $r7 = virtualinvoke $r5.<org.joda.time.DurationField: org.joda.time.DurationFieldType getType()>();

        if $r6 == $r7 goto label07;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Fields invalid for add");

        throw $r8;

     label07:
        $i2 = $i2 + 1;

        $i3 = $r2[$i0];

        $i2 = $i2 - $i3;

        $i1 = $i1 - $i2;

        $i2 = $i0 + -1;

        $r9 = virtualinvoke $r3.<org.joda.time.DateTimeField: int[] addWrapPartial(org.joda.time.ReadablePartial,int,int[],int)>($r1, $i2, $r2, 1);

        $r2 = $r9;

        $i2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>($r1, $r9);

        $r9[$i0] = $i2;

        goto label02;

     label08:
        if $r3 != null goto label10;

        if $i0 != 0 goto label09;

        $i2 = $i2 + -1;

        $i3 = $r2[$i0];

        $i2 = $i2 - $i3;

        $i1 = $i1 - $i2;

        $i2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>($r1, $r2);

        $r2[$i0] = $i2;

        goto label03;

     label09:
        $i3 = $i0 + -1;

        $r4 = interfaceinvoke $r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>($i3);

        $r3 = $r4;

        $r5 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DurationField getRangeDurationField()>();

        $r6 = virtualinvoke $r5.<org.joda.time.DurationField: org.joda.time.DurationFieldType getType()>();

        $r5 = virtualinvoke $r4.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>();

        $r7 = virtualinvoke $r5.<org.joda.time.DurationField: org.joda.time.DurationFieldType getType()>();

        if $r6 == $r7 goto label10;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Fields invalid for add");

        throw $r8;

     label10:
        $i2 = $i2 + -1;

        $i3 = $r2[$i0];

        $i2 = $i2 - $i3;

        $i1 = $i1 - $i2;

        $i2 = $i0 + -1;

        $r9 = virtualinvoke $r3.<org.joda.time.DateTimeField: int[] addWrapPartial(org.joda.time.ReadablePartial,int,int[],int)>($r1, $i2, $r2, -1);

        $r2 = $r9;

        $i2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>($r1, $r9);

        $r9[$i0] = $i2;

        goto label03;
    }
    protected int convertText(java.lang.String, java.util.Locale)
    {
        org.joda.time.field.BaseDateTimeField r0;
        java.lang.String $r1;
        java.util.Locale $r2;
        int $i0;
        java.lang.NumberFormatException $r3;
        org.joda.time.IllegalFieldValueException $r4;
        org.joda.time.DateTimeFieldType $r5;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.util.Locale;

     label1:
        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r1);

     label2:
        return $i0;

     label3:
        $r3 := @caughtexception;

        $r4 = new org.joda.time.IllegalFieldValueException;

        $r5 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType getType()>();

        specialinvoke $r4.<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.String)>($r5, $r1);

        throw $r4;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }
public abstract int get(long) { 
// no body
} 
    public java.lang.String getAsShortText(int, java.util.Locale)
    {
        org.joda.time.field.BaseDateTimeField r0;
        int $i0;
        java.util.Locale $r1;
        java.lang.String $r2;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.util.Locale;

        $r2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(int,java.util.Locale)>($i0, $r1);

        return $r2;
    }
    public final java.lang.String getAsShortText(long)
    {
        org.joda.time.field.BaseDateTimeField r0;
        long $l0;
        java.lang.String $r1;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        $l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>($l0, null);

        return $r1;
    }
    public java.lang.String getAsShortText(long, java.util.Locale)
    {
        org.joda.time.field.BaseDateTimeField r0;
        long $l0;
        java.util.Locale $r1;
        int $i1;
        java.lang.String $r2;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        $l0 := @parameter0: long;

        $r1 := @parameter1: java.util.Locale;

        $i1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int get(long)>($l0);

        $r2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>($i1, $r1);

        return $r2;
    }
    public java.lang.String getAsShortText(org.joda.time.ReadablePartial, int, java.util.Locale)
    {
        org.joda.time.field.BaseDateTimeField r0;
        org.joda.time.ReadablePartial $r1;
        int $i0;
        java.util.Locale $r2;
        java.lang.String $r3;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        $r1 := @parameter0: org.joda.time.ReadablePartial;

        $i0 := @parameter1: int;

        $r2 := @parameter2: java.util.Locale;

        $r3 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>($i0, $r2);

        return $r3;
    }
    public final java.lang.String getAsShortText(org.joda.time.ReadablePartial, java.util.Locale)
    {
        org.joda.time.field.BaseDateTimeField r0;
        org.joda.time.ReadablePartial $r1;
        java.util.Locale $r2;
        org.joda.time.DateTimeFieldType $r3;
        int $i0;
        java.lang.String $r4;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        $r1 := @parameter0: org.joda.time.ReadablePartial;

        $r2 := @parameter1: java.util.Locale;

        $r3 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType getType()>();

        $i0 = interfaceinvoke $r1.<org.joda.time.ReadablePartial: int get(org.joda.time.DateTimeFieldType)>($r3);

        $r4 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,int,java.util.Locale)>($r1, $i0, $r2);

        return $r4;
    }
    public java.lang.String getAsText(int, java.util.Locale)
    {
        org.joda.time.field.BaseDateTimeField r0;
        int $i0;
        java.util.Locale $r1;
        java.lang.String $r2;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.util.Locale;

        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0);

        return $r2;
    }
    public final java.lang.String getAsText(long)
    {
        org.joda.time.field.BaseDateTimeField r0;
        long $l0;
        java.lang.String $r1;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        $l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>($l0, null);

        return $r1;
    }
    public java.lang.String getAsText(long, java.util.Locale)
    {
        org.joda.time.field.BaseDateTimeField r0;
        long $l0;
        java.util.Locale $r1;
        int $i1;
        java.lang.String $r2;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        $l0 := @parameter0: long;

        $r1 := @parameter1: java.util.Locale;

        $i1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int get(long)>($l0);

        $r2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(int,java.util.Locale)>($i1, $r1);

        return $r2;
    }
    public java.lang.String getAsText(org.joda.time.ReadablePartial, int, java.util.Locale)
    {
        org.joda.time.field.BaseDateTimeField r0;
        org.joda.time.ReadablePartial $r1;
        int $i0;
        java.util.Locale $r2;
        java.lang.String $r3;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        $r1 := @parameter0: org.joda.time.ReadablePartial;

        $i0 := @parameter1: int;

        $r2 := @parameter2: java.util.Locale;

        $r3 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(int,java.util.Locale)>($i0, $r2);

        return $r3;
    }
    public final java.lang.String getAsText(org.joda.time.ReadablePartial, java.util.Locale)
    {
        org.joda.time.field.BaseDateTimeField r0;
        org.joda.time.ReadablePartial $r1;
        java.util.Locale $r2;
        org.joda.time.DateTimeFieldType $r3;
        int $i0;
        java.lang.String $r4;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        $r1 := @parameter0: org.joda.time.ReadablePartial;

        $r2 := @parameter1: java.util.Locale;

        $r3 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType getType()>();

        $i0 = interfaceinvoke $r1.<org.joda.time.ReadablePartial: int get(org.joda.time.DateTimeFieldType)>($r3);

        $r4 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,int,java.util.Locale)>($r1, $i0, $r2);

        return $r4;
    }
    public int getDifference(long, long)
    {
        org.joda.time.field.BaseDateTimeField r0;
        long $l0, $l1;
        org.joda.time.DurationField $r1;
        int $i2;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $r1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DurationField getDurationField()>();

        $i2 = virtualinvoke $r1.<org.joda.time.DurationField: int getDifference(long,long)>($l0, $l1);

        return $i2;
    }
    public long getDifferenceAsLong(long, long)
    {
        org.joda.time.field.BaseDateTimeField r0;
        long $l0, $l1;
        org.joda.time.DurationField $r1;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $r1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DurationField getDurationField()>();

        $l0 = virtualinvoke $r1.<org.joda.time.DurationField: long getDifferenceAsLong(long,long)>($l0, $l1);

        return $l0;
    }
public abstract org.joda.time.DurationField getDurationField() { 
// no body
} 
    public int getLeapAmount(long)
    {
        org.joda.time.field.BaseDateTimeField r0;
        long $l0;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        $l0 := @parameter0: long;

        return 0;
    }
    public org.joda.time.DurationField getLeapDurationField()
    {
        org.joda.time.field.BaseDateTimeField r0;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        return null;
    }
    public int getMaximumShortTextLength(java.util.Locale)
    {
        org.joda.time.field.BaseDateTimeField r0;
        java.util.Locale $r1;
        int $i0;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        $r1 := @parameter0: java.util.Locale;

        $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>($r1);

        return $i0;
    }
    public int getMaximumTextLength(java.util.Locale)
    {
        org.joda.time.field.BaseDateTimeField r0;
        java.util.Locale $r1;
        int $i0;
        java.lang.String $r2;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        $r1 := @parameter0: java.util.Locale;

        $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue()>();

        if $i0 < 0 goto label3;

        if $i0 >= 10 goto label1;

        return 1;

     label1:
        if $i0 >= 100 goto label2;

        return 2;

     label2:
        if $i0 >= 1000 goto label3;

        return 3;

     label3:
        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0);

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        return $i0;
    }
public abstract int getMaximumValue() { 
// no body
} 
    public int getMaximumValue(long)
    {
        org.joda.time.field.BaseDateTimeField r0;
        long $l0;
        int $i1;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        $l0 := @parameter0: long;

        $i1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue()>();

        return $i1;
    }
    public int getMaximumValue(org.joda.time.ReadablePartial)
    {
        org.joda.time.field.BaseDateTimeField r0;
        org.joda.time.ReadablePartial $r1;
        int $i0;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        $r1 := @parameter0: org.joda.time.ReadablePartial;

        $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue()>();

        return $i0;
    }
    public int getMaximumValue(org.joda.time.ReadablePartial, int[])
    {
        org.joda.time.field.BaseDateTimeField r0;
        org.joda.time.ReadablePartial $r1;
        int[] $r2;
        int $i0;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        $r1 := @parameter0: org.joda.time.ReadablePartial;

        $r2 := @parameter1: int[];

        $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>($r1);

        return $i0;
    }
public abstract int getMinimumValue() { 
// no body
} 
    public int getMinimumValue(long)
    {
        org.joda.time.field.BaseDateTimeField r0;
        long $l0;
        int $i1;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        $l0 := @parameter0: long;

        $i1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue()>();

        return $i1;
    }
    public int getMinimumValue(org.joda.time.ReadablePartial)
    {
        org.joda.time.field.BaseDateTimeField r0;
        org.joda.time.ReadablePartial $r1;
        int $i0;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        $r1 := @parameter0: org.joda.time.ReadablePartial;

        $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue()>();

        return $i0;
    }
    public int getMinimumValue(org.joda.time.ReadablePartial, int[])
    {
        org.joda.time.field.BaseDateTimeField r0;
        org.joda.time.ReadablePartial $r1;
        int[] $r2;
        int $i0;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        $r1 := @parameter0: org.joda.time.ReadablePartial;

        $r2 := @parameter1: int[];

        $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>($r1);

        return $i0;
    }
    public final java.lang.String getName()
    {
        org.joda.time.field.BaseDateTimeField r0;
        java.lang.String $r1;
        org.joda.time.DateTimeFieldType $r2;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        $r2 = r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType iType>;

        $r1 = virtualinvoke $r2.<org.joda.time.DateTimeFieldType: java.lang.String getName()>();

        return $r1;
    }
public abstract org.joda.time.DurationField getRangeDurationField() { 
// no body
} 
    public final org.joda.time.DateTimeFieldType getType()
    {
        org.joda.time.field.BaseDateTimeField r0;
        org.joda.time.DateTimeFieldType r1;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        r1 = r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType iType>;

        return r1;
    }
    public boolean isLeap(long)
    {
        org.joda.time.field.BaseDateTimeField r0;
        long $l0;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        $l0 := @parameter0: long;

        return 0;
    }
    public final boolean isSupported()
    {
        org.joda.time.field.BaseDateTimeField r0;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        return 1;
    }
    public long remainder(long)
    {
        org.joda.time.field.BaseDateTimeField r0;
        long $l0, $l1;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        $l0 := @parameter0: long;

        $l1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: long roundFloor(long)>($l0);

        $l0 = $l0 - $l1;

        return $l0;
    }
    public long roundCeiling(long)
    {
        org.joda.time.field.BaseDateTimeField r0;
        long $l0, $l1;
        byte $b2;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        $l0 := @parameter0: long;

        $l1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: long roundFloor(long)>($l0);

        $b2 = $l1 cmp $l0;

        if $b2 == 0 goto label1;

        $l0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: long add(long,int)>($l1, 1);

     label1:
        return $l0;
    }
public abstract long roundFloor(long) { 
// no body
} 
    public long roundHalfCeiling(long)
    {
        org.joda.time.field.BaseDateTimeField r0;
        long $l0, $l1, $l2, $l3;
        byte $b4;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        $l0 := @parameter0: long;

        $l1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: long roundFloor(long)>($l0);

        $l2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>($l0);

        $l3 = $l0 - $l1;

        $l0 = $l2 - $l0;

        $b4 = $l0 cmp $l3;

        if $b4 > 0 goto label1;

        return $l2;

     label1:
        return $l1;
    }
    public long roundHalfEven(long)
    {
        org.joda.time.field.BaseDateTimeField r0;
        long $l0, $l2, $l3, $l4;
        byte $b1;
        int $i5;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        $l0 := @parameter0: long;

        $l2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: long roundFloor(long)>($l0);

        $l3 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>($l0);

        $l4 = $l0 - $l2;

        $l0 = $l3 - $l0;

        $b1 = $l4 cmp $l0;

        if $b1 >= 0 goto label1;

        return $l2;

     label1:
        $b1 = $l0 cmp $l4;

        if $b1 >= 0 goto label2;

        return $l3;

     label2:
        $i5 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int get(long)>($l3);

        $i5 = $i5 & 1;

        if $i5 != 0 goto label3;

        return $l3;

     label3:
        return $l2;
    }
    public long roundHalfFloor(long)
    {
        org.joda.time.field.BaseDateTimeField r0;
        long $l0, $l1, $l2, $l3;
        byte $b4;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        $l0 := @parameter0: long;

        $l1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: long roundFloor(long)>($l0);

        $l2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>($l0);

        $l3 = $l0 - $l1;

        $l0 = $l2 - $l0;

        $b4 = $l3 cmp $l0;

        if $b4 > 0 goto label1;

        return $l1;

     label1:
        return $l2;
    }
public abstract long set(long, int) { 
// no body
} 
    public final long set(long, java.lang.String)
    {
        org.joda.time.field.BaseDateTimeField r0;
        long $l0;
        java.lang.String $r1;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        $l0 := @parameter0: long;

        $r1 := @parameter1: java.lang.String;

        $l0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: long set(long,java.lang.String,java.util.Locale)>($l0, $r1, null);

        return $l0;
    }
    public long set(long, java.lang.String, java.util.Locale)
    {
        org.joda.time.field.BaseDateTimeField r0;
        long $l0;
        java.lang.String $r1;
        java.util.Locale $r2;
        int $i1;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        $l0 := @parameter0: long;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.util.Locale;

        $i1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int convertText(java.lang.String,java.util.Locale)>($r1, $r2);

        $l0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: long set(long,int)>($l0, $i1);

        return $l0;
    }
    public int[] set(org.joda.time.ReadablePartial, int, int[], int)
    {
        org.joda.time.field.BaseDateTimeField r0;
        org.joda.time.ReadablePartial $r1;
        int $i0, $i1, $i2, $i3;
        int[] $r2;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        $r1 := @parameter0: org.joda.time.ReadablePartial;

        $i0 := @parameter1: int;

        $r2 := @parameter2: int[];

        $i1 := @parameter3: int;

        $i2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>($r1, $r2);

        $i3 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>($r1, $r2);

        staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, $i1, $i2, $i3);

        $r2[$i0] = $i1;

        $i0 = $i0 + 1;

     label1:
        $i1 = interfaceinvoke $r1.<org.joda.time.ReadablePartial: int size()>();

        if $i0 >= $i1 goto label4;

        $r3 = interfaceinvoke $r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>($i0);

        $i1 = $r2[$i0];

        $i2 = virtualinvoke $r3.<org.joda.time.DateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>($r1, $r2);

        if $i1 <= $i2 goto label2;

        $i1 = virtualinvoke $r3.<org.joda.time.DateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>($r1, $r2);

        $r2[$i0] = $i1;

     label2:
        $i1 = $r2[$i0];

        $i2 = virtualinvoke $r3.<org.joda.time.DateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>($r1, $r2);

        if $i1 >= $i2 goto label3;

        $i1 = virtualinvoke $r3.<org.joda.time.DateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>($r1, $r2);

        $r2[$i0] = $i1;

     label3:
        $i0 = $i0 + 1;

        goto label1;

     label4:
        return $r2;
    }
    public int[] set(org.joda.time.ReadablePartial, int, int[], java.lang.String, java.util.Locale)
    {
        org.joda.time.field.BaseDateTimeField r0;
        org.joda.time.ReadablePartial $r1;
        int $i0, $i1;
        int[] $r2;
        java.lang.String $r3;
        java.util.Locale $r4;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        $r1 := @parameter0: org.joda.time.ReadablePartial;

        $i0 := @parameter1: int;

        $r2 := @parameter2: int[];

        $r3 := @parameter3: java.lang.String;

        $r4 := @parameter4: java.util.Locale;

        $i1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int convertText(java.lang.String,java.util.Locale)>($r3, $r4);

        $r2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],int)>($r1, $i0, $r2, $i1);

        return $r2;
    }
    public java.lang.String toString()
    {
        org.joda.time.field.BaseDateTimeField r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DateTimeField[");

        $r2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: java.lang.String getName()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
