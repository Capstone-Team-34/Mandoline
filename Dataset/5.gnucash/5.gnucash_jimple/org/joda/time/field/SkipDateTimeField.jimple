org.joda.time.field.SkipDateTimeField extends org.joda.time.field.DelegatedDateTimeField
private static final long serialVersionUID
private final org.joda.time.Chronology iChronology
private transient int iMinValue
private final int iSkip
    public void <init>(org.joda.time.Chronology, org.joda.time.DateTimeField)
    {
        org.joda.time.field.SkipDateTimeField r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;

        r0 := @this: org.joda.time.field.SkipDateTimeField;

        $r1 := @parameter0: org.joda.time.Chronology;

        $r2 := @parameter1: org.joda.time.DateTimeField;

        specialinvoke r0.<org.joda.time.field.SkipDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField,int)>($r1, $r2, 0);

        return;
    }
    public void <init>(org.joda.time.Chronology, org.joda.time.DateTimeField, int)
    {
        org.joda.time.field.SkipDateTimeField r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        int $i0, $i1;

        r0 := @this: org.joda.time.field.SkipDateTimeField;

        $r1 := @parameter0: org.joda.time.Chronology;

        $r2 := @parameter1: org.joda.time.DateTimeField;

        $i0 := @parameter2: int;

        specialinvoke r0.<org.joda.time.field.DelegatedDateTimeField: void <init>(org.joda.time.DateTimeField)>($r2);

        r0.<org.joda.time.field.SkipDateTimeField: org.joda.time.Chronology iChronology> = $r1;

        $i1 = specialinvoke r0.<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>();

        if $i1 >= $i0 goto label2;

        $i1 = $i1 + -1;

        r0.<org.joda.time.field.SkipDateTimeField: int iMinValue> = $i1;

     label1:
        r0.<org.joda.time.field.SkipDateTimeField: int iSkip> = $i0;

        return;

     label2:
        if $i1 != $i0 goto label3;

        $i1 = $i0 + 1;

        r0.<org.joda.time.field.SkipDateTimeField: int iMinValue> = $i1;

        goto label1;

     label3:
        r0.<org.joda.time.field.SkipDateTimeField: int iMinValue> = $i1;

        goto label1;
    }
    private java.lang.Object readResolve()
    {
        org.joda.time.field.SkipDateTimeField r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeFieldType $r2;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.field.SkipDateTimeField;

        $r2 = virtualinvoke r0.<org.joda.time.field.SkipDateTimeField: org.joda.time.DateTimeFieldType getType()>();

        $r1 = r0.<org.joda.time.field.SkipDateTimeField: org.joda.time.Chronology iChronology>;

        $r3 = virtualinvoke $r2.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r1);

        return $r3;
    }
    public int get(long)
    {
        org.joda.time.field.SkipDateTimeField r0;
        long $l0;
        int $i1, $i2;

        r0 := @this: org.joda.time.field.SkipDateTimeField;

        $l0 := @parameter0: long;

        $i2 = specialinvoke r0.<org.joda.time.field.DelegatedDateTimeField: int get(long)>($l0);

        $i1 = r0.<org.joda.time.field.SkipDateTimeField: int iSkip>;

        if $i2 > $i1 goto label1;

        $i1 = $i2 + -1;

        return $i1;

     label1:
        return $i2;
    }
    public int getMinimumValue()
    {
        org.joda.time.field.SkipDateTimeField r0;
        int i0;

        r0 := @this: org.joda.time.field.SkipDateTimeField;

        i0 = r0.<org.joda.time.field.SkipDateTimeField: int iMinValue>;

        return i0;
    }
    public long set(long, int)
    {
        org.joda.time.field.SkipDateTimeField r0;
        long $l0;
        int $i1, $i2, $i3;
        org.joda.time.IllegalFieldValueException $r1;
        org.joda.time.DateTimeFieldType $r2;
        java.lang.Integer $r3;

        r0 := @this: org.joda.time.field.SkipDateTimeField;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        $i2 = r0.<org.joda.time.field.SkipDateTimeField: int iMinValue>;

        $i3 = virtualinvoke r0.<org.joda.time.field.SkipDateTimeField: int getMaximumValue()>();

        staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, $i1, $i2, $i3);

        $i2 = r0.<org.joda.time.field.SkipDateTimeField: int iSkip>;

        if $i1 > $i2 goto label2;

        $i2 = r0.<org.joda.time.field.SkipDateTimeField: int iSkip>;

        if $i1 != $i2 goto label1;

        $r1 = new org.joda.time.IllegalFieldValueException;

        $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        specialinvoke $r1.<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>($r2, $r3, null, null);

        throw $r1;

     label1:
        $i1 = $i1 + 1;

     label2:
        $l0 = specialinvoke r0.<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>($l0, $i1);

        return $l0;
    }
