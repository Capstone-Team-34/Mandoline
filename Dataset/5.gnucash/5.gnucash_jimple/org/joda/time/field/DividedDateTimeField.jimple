org.joda.time.field.DividedDateTimeField extends org.joda.time.field.DecoratedDateTimeField
private static final long serialVersionUID
final int iDivisor
final org.joda.time.DurationField iDurationField
private final int iMax
private final int iMin
final org.joda.time.DurationField iRangeDurationField
    public void <init>(org.joda.time.DateTimeField, org.joda.time.DateTimeFieldType, int)
    {
        org.joda.time.field.DividedDateTimeField r0;
        org.joda.time.DateTimeField $r1;
        org.joda.time.DateTimeFieldType $r2;
        int $i0;
        org.joda.time.DurationField $r3;

        r0 := @this: org.joda.time.field.DividedDateTimeField;

        $r1 := @parameter0: org.joda.time.DateTimeField;

        $r2 := @parameter1: org.joda.time.DateTimeFieldType;

        $i0 := @parameter2: int;

        $r3 = virtualinvoke $r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getRangeDurationField()>();

        specialinvoke r0.<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>($r1, $r3, $r2, $i0);

        return;
    }
    public void <init>(org.joda.time.DateTimeField, org.joda.time.DurationField, org.joda.time.DateTimeFieldType, int)
    {
        org.joda.time.field.DividedDateTimeField r0;
        org.joda.time.DateTimeField $r1;
        org.joda.time.DurationField $r2, $r5;
        org.joda.time.DateTimeFieldType $r3;
        int $i0, $i1, $i2;
        java.lang.IllegalArgumentException $r4;
        org.joda.time.field.ScaledDurationField $r6;
        org.joda.time.DurationFieldType $r7;

        r0 := @this: org.joda.time.field.DividedDateTimeField;

        $r1 := @parameter0: org.joda.time.DateTimeField;

        $r2 := @parameter1: org.joda.time.DurationField;

        $r3 := @parameter2: org.joda.time.DateTimeFieldType;

        $i0 := @parameter3: int;

        specialinvoke r0.<org.joda.time.field.DecoratedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>($r1, $r3);

        if $i0 >= 2 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The divisor must be at least 2");

        throw $r4;

     label1:
        $r5 = virtualinvoke $r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>();

        if $r5 != null goto label5;

        r0.<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField iDurationField> = null;

     label2:
        r0.<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField iRangeDurationField> = $r2;

        r0.<org.joda.time.field.DividedDateTimeField: int iDivisor> = $i0;

        $i1 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMinimumValue()>();

        if $i1 < 0 goto label6;

        $i1 = $i1 / $i0;

     label3:
        $i2 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMaximumValue()>();

        if $i2 < 0 goto label7;

        $i0 = $i2 / $i0;

     label4:
        r0.<org.joda.time.field.DividedDateTimeField: int iMin> = $i1;

        r0.<org.joda.time.field.DividedDateTimeField: int iMax> = $i0;

        return;

     label5:
        $r6 = new org.joda.time.field.ScaledDurationField;

        $r7 = virtualinvoke $r3.<org.joda.time.DateTimeFieldType: org.joda.time.DurationFieldType getDurationType()>();

        specialinvoke $r6.<org.joda.time.field.ScaledDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DurationFieldType,int)>($r5, $r7, $i0);

        r0.<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField iDurationField> = $r6;

        goto label2;

     label6:
        $i1 = $i1 + 1;

        $i1 = $i1 / $i0;

        $i1 = $i1 + -1;

        goto label3;

     label7:
        $i2 = $i2 + 1;

        $i0 = $i2 / $i0;

        $i0 = $i0 + -1;

        goto label4;
    }
    public void <init>(org.joda.time.field.RemainderDateTimeField, org.joda.time.DateTimeFieldType)
    {
        org.joda.time.field.DividedDateTimeField r0;
        org.joda.time.field.RemainderDateTimeField $r1;
        org.joda.time.DateTimeFieldType $r2;

        r0 := @this: org.joda.time.field.DividedDateTimeField;

        $r1 := @parameter0: org.joda.time.field.RemainderDateTimeField;

        $r2 := @parameter1: org.joda.time.DateTimeFieldType;

        specialinvoke r0.<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.field.RemainderDateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType)>($r1, null, $r2);

        return;
    }
    public void <init>(org.joda.time.field.RemainderDateTimeField, org.joda.time.DurationField, org.joda.time.DateTimeFieldType)
    {
        org.joda.time.field.DividedDateTimeField r0;
        org.joda.time.field.RemainderDateTimeField $r1;
        org.joda.time.DurationField $r2, $r5;
        org.joda.time.DateTimeFieldType $r3;
        org.joda.time.DateTimeField $r4;
        int $i0, $i1, $i2;

        r0 := @this: org.joda.time.field.DividedDateTimeField;

        $r1 := @parameter0: org.joda.time.field.RemainderDateTimeField;

        $r2 := @parameter1: org.joda.time.DurationField;

        $r3 := @parameter2: org.joda.time.DateTimeFieldType;

        $r4 = virtualinvoke $r1.<org.joda.time.field.RemainderDateTimeField: org.joda.time.DateTimeField getWrappedField()>();

        specialinvoke r0.<org.joda.time.field.DecoratedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>($r4, $r3);

        $i0 = $r1.<org.joda.time.field.RemainderDateTimeField: int iDivisor>;

        r0.<org.joda.time.field.DividedDateTimeField: int iDivisor> = $i0;

        $r5 = $r1.<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField iRangeField>;

        r0.<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField iDurationField> = $r5;

        r0.<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField iRangeDurationField> = $r2;

        $r4 = virtualinvoke r0.<org.joda.time.field.DividedDateTimeField: org.joda.time.DateTimeField getWrappedField()>();

        $i1 = virtualinvoke $r4.<org.joda.time.DateTimeField: int getMinimumValue()>();

        if $i1 < 0 goto label3;

        $i1 = $i1 / $i0;

     label1:
        $i2 = virtualinvoke $r4.<org.joda.time.DateTimeField: int getMaximumValue()>();

        if $i2 < 0 goto label4;

        $i0 = $i2 / $i0;

     label2:
        r0.<org.joda.time.field.DividedDateTimeField: int iMin> = $i1;

        r0.<org.joda.time.field.DividedDateTimeField: int iMax> = $i0;

        return;

     label3:
        $i1 = $i1 + 1;

        $i1 = $i1 / $i0;

        $i1 = $i1 + -1;

        goto label1;

     label4:
        $i2 = $i2 + 1;

        $i0 = $i2 / $i0;

        $i0 = $i0 + -1;

        goto label2;
    }
    private int getRemainder(int)
    {
        org.joda.time.field.DividedDateTimeField r0;
        int $i0, $i1, $i2;

        r0 := @this: org.joda.time.field.DividedDateTimeField;

        $i0 := @parameter0: int;

        if $i0 < 0 goto label1;

        $i1 = r0.<org.joda.time.field.DividedDateTimeField: int iDivisor>;

        $i0 = $i0 % $i1;

        return $i0;

     label1:
        $i1 = r0.<org.joda.time.field.DividedDateTimeField: int iDivisor>;

        $i1 = $i1 + -1;

        $i2 = $i0 + 1;

        $i0 = r0.<org.joda.time.field.DividedDateTimeField: int iDivisor>;

        $i0 = $i2 % $i0;

        $i0 = $i1 + $i0;

        return $i0;
    }
    public long add(long, int)
    {
        org.joda.time.field.DividedDateTimeField r0;
        long $l0;
        int $i1, $i2;
        org.joda.time.DateTimeField $r1;

        r0 := @this: org.joda.time.field.DividedDateTimeField;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        $r1 = virtualinvoke r0.<org.joda.time.field.DividedDateTimeField: org.joda.time.DateTimeField getWrappedField()>();

        $i2 = r0.<org.joda.time.field.DividedDateTimeField: int iDivisor>;

        $i1 = $i2 * $i1;

        $l0 = virtualinvoke $r1.<org.joda.time.DateTimeField: long add(long,int)>($l0, $i1);

        return $l0;
    }
    public long add(long, long)
    {
        org.joda.time.field.DividedDateTimeField r0;
        long $l0, $l1, $l3;
        int $i2;
        org.joda.time.DateTimeField $r1;

        r0 := @this: org.joda.time.field.DividedDateTimeField;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $r1 = virtualinvoke r0.<org.joda.time.field.DividedDateTimeField: org.joda.time.DateTimeField getWrappedField()>();

        $i2 = r0.<org.joda.time.field.DividedDateTimeField: int iDivisor>;

        $l3 = (long) $i2;

        $l1 = $l3 * $l1;

        $l0 = virtualinvoke $r1.<org.joda.time.DateTimeField: long add(long,long)>($l0, $l1);

        return $l0;
    }
    public long addWrapField(long, int)
    {
        org.joda.time.field.DividedDateTimeField r0;
        long $l0;
        int $i1, $i2, $i3, $i4;

        r0 := @this: org.joda.time.field.DividedDateTimeField;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        $i4 = virtualinvoke r0.<org.joda.time.field.DividedDateTimeField: int get(long)>($l0);

        $i2 = r0.<org.joda.time.field.DividedDateTimeField: int iMin>;

        $i3 = r0.<org.joda.time.field.DividedDateTimeField: int iMax>;

        $i1 = staticinvoke <org.joda.time.field.FieldUtils: int getWrappedValue(int,int,int,int)>($i4, $i1, $i2, $i3);

        $l0 = virtualinvoke r0.<org.joda.time.field.DividedDateTimeField: long set(long,int)>($l0, $i1);

        return $l0;
    }
    public int get(long)
    {
        org.joda.time.field.DividedDateTimeField r0;
        long $l0;
        org.joda.time.DateTimeField $r1;
        int $i1, $i2;

        r0 := @this: org.joda.time.field.DividedDateTimeField;

        $l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<org.joda.time.field.DividedDateTimeField: org.joda.time.DateTimeField getWrappedField()>();

        $i1 = virtualinvoke $r1.<org.joda.time.DateTimeField: int get(long)>($l0);

        if $i1 < 0 goto label1;

        $i2 = r0.<org.joda.time.field.DividedDateTimeField: int iDivisor>;

        $i1 = $i1 / $i2;

        return $i1;

     label1:
        $i1 = $i1 + 1;

        $i2 = r0.<org.joda.time.field.DividedDateTimeField: int iDivisor>;

        $i1 = $i1 / $i2;

        $i1 = $i1 + -1;

        return $i1;
    }
    public int getDifference(long, long)
    {
        org.joda.time.field.DividedDateTimeField r0;
        long $l0, $l1;
        int $i2, $i3;
        org.joda.time.DateTimeField $r1;

        r0 := @this: org.joda.time.field.DividedDateTimeField;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $r1 = virtualinvoke r0.<org.joda.time.field.DividedDateTimeField: org.joda.time.DateTimeField getWrappedField()>();

        $i3 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getDifference(long,long)>($l0, $l1);

        $i2 = r0.<org.joda.time.field.DividedDateTimeField: int iDivisor>;

        $i2 = $i3 / $i2;

        return $i2;
    }
    public long getDifferenceAsLong(long, long)
    {
        org.joda.time.field.DividedDateTimeField r0;
        long $l0, $l1;
        org.joda.time.DateTimeField $r1;
        int $i2;

        r0 := @this: org.joda.time.field.DividedDateTimeField;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $r1 = virtualinvoke r0.<org.joda.time.field.DividedDateTimeField: org.joda.time.DateTimeField getWrappedField()>();

        $l0 = virtualinvoke $r1.<org.joda.time.DateTimeField: long getDifferenceAsLong(long,long)>($l0, $l1);

        $i2 = r0.<org.joda.time.field.DividedDateTimeField: int iDivisor>;

        $l1 = (long) $i2;

        $l0 = $l0 / $l1;

        return $l0;
    }
    public int getDivisor()
    {
        org.joda.time.field.DividedDateTimeField r0;
        int i0;

        r0 := @this: org.joda.time.field.DividedDateTimeField;

        i0 = r0.<org.joda.time.field.DividedDateTimeField: int iDivisor>;

        return i0;
    }
    public org.joda.time.DurationField getDurationField()
    {
        org.joda.time.field.DividedDateTimeField r0;
        org.joda.time.DurationField r1;

        r0 := @this: org.joda.time.field.DividedDateTimeField;

        r1 = r0.<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField iDurationField>;

        return r1;
    }
    public int getMaximumValue()
    {
        org.joda.time.field.DividedDateTimeField r0;
        int i0;

        r0 := @this: org.joda.time.field.DividedDateTimeField;

        i0 = r0.<org.joda.time.field.DividedDateTimeField: int iMax>;

        return i0;
    }
    public int getMinimumValue()
    {
        org.joda.time.field.DividedDateTimeField r0;
        int i0;

        r0 := @this: org.joda.time.field.DividedDateTimeField;

        i0 = r0.<org.joda.time.field.DividedDateTimeField: int iMin>;

        return i0;
    }
    public org.joda.time.DurationField getRangeDurationField()
    {
        org.joda.time.field.DividedDateTimeField r0;
        org.joda.time.DurationField $r1;

        r0 := @this: org.joda.time.field.DividedDateTimeField;

        $r1 = r0.<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField iRangeDurationField>;

        if $r1 == null goto label1;

        $r1 = r0.<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField iRangeDurationField>;

        return $r1;

     label1:
        $r1 = specialinvoke r0.<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>();

        return $r1;
    }
    public long remainder(long)
    {
        org.joda.time.field.DividedDateTimeField r0;
        long $l0, $l1;
        org.joda.time.DateTimeField $r1;
        int $i2;

        r0 := @this: org.joda.time.field.DividedDateTimeField;

        $l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<org.joda.time.field.DividedDateTimeField: org.joda.time.DateTimeField getWrappedField()>();

        $l1 = virtualinvoke $r1.<org.joda.time.DateTimeField: long remainder(long)>($l0);

        $i2 = virtualinvoke r0.<org.joda.time.field.DividedDateTimeField: int get(long)>($l1);

        $l0 = virtualinvoke r0.<org.joda.time.field.DividedDateTimeField: long set(long,int)>($l0, $i2);

        return $l0;
    }
    public long roundFloor(long)
    {
        org.joda.time.field.DividedDateTimeField r0;
        long $l0;
        org.joda.time.DateTimeField $r1;
        int $i1, $i2;

        r0 := @this: org.joda.time.field.DividedDateTimeField;

        $l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<org.joda.time.field.DividedDateTimeField: org.joda.time.DateTimeField getWrappedField()>();

        $i1 = virtualinvoke r0.<org.joda.time.field.DividedDateTimeField: int get(long)>($l0);

        $i2 = r0.<org.joda.time.field.DividedDateTimeField: int iDivisor>;

        $i1 = $i1 * $i2;

        $l0 = virtualinvoke $r1.<org.joda.time.DateTimeField: long set(long,int)>($l0, $i1);

        $l0 = virtualinvoke $r1.<org.joda.time.DateTimeField: long roundFloor(long)>($l0);

        return $l0;
    }
    public long set(long, int)
    {
        org.joda.time.field.DividedDateTimeField r0;
        long $l0;
        int $i1, $i2, $i3;
        org.joda.time.DateTimeField $r1;

        r0 := @this: org.joda.time.field.DividedDateTimeField;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        $i2 = r0.<org.joda.time.field.DividedDateTimeField: int iMin>;

        $i3 = r0.<org.joda.time.field.DividedDateTimeField: int iMax>;

        staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, $i1, $i2, $i3);

        $r1 = virtualinvoke r0.<org.joda.time.field.DividedDateTimeField: org.joda.time.DateTimeField getWrappedField()>();

        $i2 = virtualinvoke $r1.<org.joda.time.DateTimeField: int get(long)>($l0);

        $i2 = specialinvoke r0.<org.joda.time.field.DividedDateTimeField: int getRemainder(int)>($i2);

        $r1 = virtualinvoke r0.<org.joda.time.field.DividedDateTimeField: org.joda.time.DateTimeField getWrappedField()>();

        $i3 = r0.<org.joda.time.field.DividedDateTimeField: int iDivisor>;

        $i1 = $i3 * $i1;

        $i1 = $i2 + $i1;

        $l0 = virtualinvoke $r1.<org.joda.time.DateTimeField: long set(long,int)>($l0, $i1);

        return $l0;
    }
