org.joda.time.field.FieldUtils extends java.lang.Object
    private void <init>()
    {
        org.joda.time.field.FieldUtils r0;

        r0 := @this: org.joda.time.field.FieldUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static boolean equals(java.lang.Object, java.lang.Object)
    {
        java.lang.Object $r0, $r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        if $r0 != $r1 goto label1;

        return 1;

     label1:
        if $r0 == null goto label2;

        if $r1 != null goto label3;

     label2:
        return 0;

     label3:
        $z0 = virtualinvoke $r0.<java.lang.Object: boolean equals(java.lang.Object)>($r1);

        return $z0;
    }
    public static int getWrappedValue(int, int, int)
    {
        int $i0, $i1, $i2;
        java.lang.IllegalArgumentException $r0;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        if $i1 < $i2 goto label1;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("MIN > MAX");

        throw $r0;

     label1:
        $i2 = $i2 - $i1;

        $i2 = $i2 + 1;

        $i0 = $i0 - $i1;

        if $i0 < 0 goto label2;

        $i0 = $i0 % $i2;

        $i0 = $i0 + $i1;

        return $i0;

     label2:
        $i0 = neg $i0;

        $i0 = $i0 % $i2;

        if $i0 != 0 goto label3;

        return $i1;

     label3:
        $i0 = $i2 - $i0;

        $i0 = $i0 + $i1;

        return $i0;
    }
    public static int getWrappedValue(int, int, int, int)
    {
        int $i0, $i1, $i2, $i3;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $i0 = $i0 + $i1;

        $i0 = staticinvoke <org.joda.time.field.FieldUtils: int getWrappedValue(int,int,int)>($i0, $i2, $i3);

        return $i0;
    }
    public static int safeAdd(int, int)
    {
        int $i0, $i1, $i2, $i3;
        java.lang.ArithmeticException $r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 = $i0 + $i1;

        $i3 = $i0 ^ $i2;

        if $i3 >= 0 goto label1;

        $i3 = $i0 ^ $i1;

        if $i3 < 0 goto label1;

        $r0 = new java.lang.ArithmeticException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The calculation caused an overflow: ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" + ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>($r2);

        throw $r0;

     label1:
        return $i2;
    }
    public static long safeAdd(long, long)
    {
        long $l0, $l1, $l2, $l3;
        byte $b4;
        java.lang.ArithmeticException $r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $l2 = $l0 + $l1;

        $l3 = $l0 ^ $l2;

        $b4 = $l3 cmp 0L;

        if $b4 >= 0 goto label1;

        $l3 = $l0 ^ $l1;

        $b4 = $l3 cmp 0L;

        if $b4 < 0 goto label1;

        $r0 = new java.lang.ArithmeticException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The calculation caused an overflow: ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" + ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>($r2);

        throw $r0;

     label1:
        return $l2;
    }
    public static long safeDivide(long, long)
    {
        long $l0, $l1;
        byte $b2;
        java.lang.ArithmeticException $r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $b2 = $l0 cmp -9223372036854775808L;

        if $b2 != 0 goto label1;

        $b2 = $l1 cmp -1L;

        if $b2 != 0 goto label1;

        $r0 = new java.lang.ArithmeticException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Multiplication overflows a long: ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" / ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>($r2);

        throw $r0;

     label1:
        $l0 = $l0 / $l1;

        return $l0;
    }
    public static int safeMultiply(int, int)
    {
        int $i0, $i1;
        long $l2, $l3;
        byte $b4;
        java.lang.ArithmeticException $r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $l2 = (long) $i0;

        $l3 = (long) $i1;

        $l2 = $l2 * $l3;

        $b4 = $l2 cmp -2147483648L;

        if $b4 < 0 goto label1;

        $b4 = $l2 cmp 2147483647L;

        if $b4 <= 0 goto label2;

     label1:
        $r0 = new java.lang.ArithmeticException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Multiplication overflows an int: ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" * ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>($r2);

        throw $r0;

     label2:
        $i0 = (int) $l2;

        return $i0;
    }
    public static long safeMultiply(long, int)
    {
        int $i0;
        long $l1, $l2, $l3;
        byte $b4;
        java.lang.ArithmeticException $r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        $l1 := @parameter0: long;

        $i0 := @parameter1: int;

        lookupswitch($i0)
        {
            case -1: goto label2;
            case 0: goto label5;
            case 1: goto label4;
            default: goto label1;
        };

     label1:
        $l2 = (long) $i0;

        $l2 = $l2 * $l1;

        $l3 = (long) $i0;

        $l3 = $l2 / $l3;

        $b4 = $l3 cmp $l1;

        if $b4 == 0 goto label6;

        $r0 = new java.lang.ArithmeticException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Multiplication overflows a long: ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" * ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>($r2);

        throw $r0;

     label2:
        $b4 = $l1 cmp -9223372036854775808L;

        if $b4 != 0 goto label3;

        $r0 = new java.lang.ArithmeticException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Multiplication overflows a long: ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" * ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>($r2);

        throw $r0;

     label3:
        $l1 = neg $l1;

     label4:
        return $l1;

     label5:
        return 0L;

     label6:
        return $l2;
    }
    public static long safeMultiply(long, long)
    {
        long $l0, $l1, $l3, $l4;
        byte $b2;
        java.lang.ArithmeticException $r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        $l1 := @parameter0: long;

        $l0 := @parameter1: long;

        $b2 = $l0 cmp 1L;

        if $b2 != 0 goto label1;

        return $l1;

     label1:
        $b2 = $l1 cmp 1L;

        if $b2 != 0 goto label2;

        return $l0;

     label2:
        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label3;

        $b2 = $l0 cmp 0L;

        if $b2 != 0 goto label4;

     label3:
        return 0L;

     label4:
        $l3 = $l1 * $l0;

        $l4 = $l3 / $l0;

        $b2 = $l4 cmp $l1;

        if $b2 != 0 goto label6;

        $b2 = $l1 cmp -9223372036854775808L;

        if $b2 != 0 goto label5;

        $b2 = $l0 cmp -1L;

        if $b2 == 0 goto label6;

     label5:
        $b2 = $l0 cmp -9223372036854775808L;

        if $b2 != 0 goto label7;

        $b2 = $l1 cmp -1L;

        if $b2 != 0 goto label7;

     label6:
        $r0 = new java.lang.ArithmeticException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Multiplication overflows a long: ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" * ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>($r2);

        throw $r0;

     label7:
        return $l3;
    }
    public static int safeMultiplyToInt(long, long)
    {
        long $l0, $l1;
        int $i2;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $l0 = staticinvoke <org.joda.time.field.FieldUtils: long safeMultiply(long,long)>($l0, $l1);

        $i2 = staticinvoke <org.joda.time.field.FieldUtils: int safeToInt(long)>($l0);

        return $i2;
    }
    public static int safeNegate(int)
    {
        int $i0;
        java.lang.ArithmeticException $r0;

        $i0 := @parameter0: int;

        if $i0 != -2147483648 goto label1;

        $r0 = new java.lang.ArithmeticException;

        specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Integer.MIN_VALUE cannot be negated");

        throw $r0;

     label1:
        $i0 = neg $i0;

        return $i0;
    }
    public static long safeSubtract(long, long)
    {
        long $l0, $l1, $l2, $l3;
        byte $b4;
        java.lang.ArithmeticException $r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $l2 = $l0 - $l1;

        $l3 = $l0 ^ $l2;

        $b4 = $l3 cmp 0L;

        if $b4 >= 0 goto label1;

        $l3 = $l0 ^ $l1;

        $b4 = $l3 cmp 0L;

        if $b4 >= 0 goto label1;

        $r0 = new java.lang.ArithmeticException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The calculation caused an overflow: ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>($r2);

        throw $r0;

     label1:
        return $l2;
    }
    public static int safeToInt(long)
    {
        long $l0;
        byte $b1;
        int $i2;
        java.lang.ArithmeticException $r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        $l0 := @parameter0: long;

        $b1 = -2147483648L cmp $l0;

        if $b1 > 0 goto label1;

        $b1 = $l0 cmp 2147483647L;

        if $b1 > 0 goto label1;

        $i2 = (int) $l0;

        return $i2;

     label1:
        $r0 = new java.lang.ArithmeticException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Value cannot fit in an int: ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>($r2);

        throw $r0;
    }
    public static void verifyValueBounds(java.lang.String, int, int, int)
    {
        java.lang.String $r0;
        int $i0, $i1, $i2;
        org.joda.time.IllegalFieldValueException $r1;
        java.lang.Integer $r2, $r3, $r4;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        if $i0 < $i1 goto label1;

        if $i0 <= $i2 goto label2;

     label1:
        $r1 = new org.joda.time.IllegalFieldValueException;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        specialinvoke $r1.<org.joda.time.IllegalFieldValueException: void <init>(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number)>($r0, $r2, $r3, $r4);

        throw $r1;

     label2:
        return;
    }
    public static void verifyValueBounds(org.joda.time.DateTimeField, int, int, int)
    {
        org.joda.time.DateTimeField $r0;
        int $i0, $i1, $i2;
        org.joda.time.IllegalFieldValueException $r1;
        org.joda.time.DateTimeFieldType $r2;
        java.lang.Integer $r3, $r4, $r5;

        $r0 := @parameter0: org.joda.time.DateTimeField;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        if $i0 < $i1 goto label1;

        if $i0 <= $i2 goto label2;

     label1:
        $r1 = new org.joda.time.IllegalFieldValueException;

        $r2 = virtualinvoke $r0.<org.joda.time.DateTimeField: org.joda.time.DateTimeFieldType getType()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        specialinvoke $r1.<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>($r2, $r3, $r4, $r5);

        throw $r1;

     label2:
        return;
    }
    public static void verifyValueBounds(org.joda.time.DateTimeFieldType, int, int, int)
    {
        org.joda.time.DateTimeFieldType $r0;
        int $i0, $i1, $i2;
        org.joda.time.IllegalFieldValueException $r1;
        java.lang.Integer $r2, $r3, $r4;

        $r0 := @parameter0: org.joda.time.DateTimeFieldType;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        if $i0 < $i1 goto label1;

        if $i0 <= $i2 goto label2;

     label1:
        $r1 = new org.joda.time.IllegalFieldValueException;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        specialinvoke $r1.<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>($r0, $r2, $r3, $r4);

        throw $r1;

     label2:
        return;
    }
