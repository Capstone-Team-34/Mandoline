org.joda.time.convert.ReadablePartialConverter extends org.joda.time.convert.AbstractConverter implements org.joda.time.convert.PartialConverter
static final org.joda.time.convert.ReadablePartialConverter INSTANCE
    static void <clinit>()
    {
        org.joda.time.convert.ReadablePartialConverter $r0;

        $r0 = new org.joda.time.convert.ReadablePartialConverter;

        specialinvoke $r0.<org.joda.time.convert.ReadablePartialConverter: void <init>()>();

        <org.joda.time.convert.ReadablePartialConverter: org.joda.time.convert.ReadablePartialConverter INSTANCE> = $r0;

        return;
    }
    protected void <init>()
    {
        org.joda.time.convert.ReadablePartialConverter r0;

        r0 := @this: org.joda.time.convert.ReadablePartialConverter;

        specialinvoke r0.<org.joda.time.convert.AbstractConverter: void <init>()>();

        return;
    }
    public org.joda.time.Chronology getChronology(java.lang.Object, org.joda.time.Chronology)
    {
        org.joda.time.convert.ReadablePartialConverter r0;
        java.lang.Object $r1;
        org.joda.time.Chronology $r2;
        org.joda.time.ReadablePartial $r3;

        r0 := @this: org.joda.time.convert.ReadablePartialConverter;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: org.joda.time.Chronology;

        if $r2 != null goto label1;

        $r3 = (org.joda.time.ReadablePartial) $r1;

        $r2 = interfaceinvoke $r3.<org.joda.time.ReadablePartial: org.joda.time.Chronology getChronology()>();

        $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>($r2);

     label1:
        return $r2;
    }
    public org.joda.time.Chronology getChronology(java.lang.Object, org.joda.time.DateTimeZone)
    {
        org.joda.time.convert.ReadablePartialConverter r0;
        java.lang.Object $r1;
        org.joda.time.DateTimeZone $r2;
        org.joda.time.Chronology $r3;

        r0 := @this: org.joda.time.convert.ReadablePartialConverter;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: org.joda.time.DateTimeZone;

        $r3 = virtualinvoke r0.<org.joda.time.convert.ReadablePartialConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>($r1, null);

        $r3 = virtualinvoke $r3.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>($r2);

        return $r3;
    }
    public int[] getPartialValues(org.joda.time.ReadablePartial, java.lang.Object, org.joda.time.Chronology)
    {
        org.joda.time.convert.ReadablePartialConverter r0;
        org.joda.time.ReadablePartial $r1, $r5;
        org.joda.time.Chronology $r2;
        int[] $r3;
        java.lang.Object $r4;
        int $i0, $i1, $i2;
        org.joda.time.DateTimeFieldType $r6;

        r0 := @this: org.joda.time.convert.ReadablePartialConverter;

        $r1 := @parameter0: org.joda.time.ReadablePartial;

        $r4 := @parameter1: java.lang.Object;

        $r2 := @parameter2: org.joda.time.Chronology;

        $r5 = (org.joda.time.ReadablePartial) $r4;

        $i0 = interfaceinvoke $r1.<org.joda.time.ReadablePartial: int size()>();

        $r3 = newarray (int)[$i0];

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $r6 = interfaceinvoke $r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>($i1);

        $i2 = interfaceinvoke $r5.<org.joda.time.ReadablePartial: int get(org.joda.time.DateTimeFieldType)>($r6);

        $r3[$i1] = $i2;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        virtualinvoke $r2.<org.joda.time.Chronology: void validate(org.joda.time.ReadablePartial,int[])>($r1, $r3);

        return $r3;
    }
    public java.lang.Class getSupportedType()
    {
        org.joda.time.convert.ReadablePartialConverter r0;

        r0 := @this: org.joda.time.convert.ReadablePartialConverter;

        return class "Lorg/joda/time/ReadablePartial;";
    }
