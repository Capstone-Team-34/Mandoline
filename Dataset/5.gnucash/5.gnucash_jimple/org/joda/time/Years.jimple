org.joda.time.Years extends org.joda.time.base.BaseSingleFieldPeriod
public static final org.joda.time.Years MAX_VALUE
public static final org.joda.time.Years MIN_VALUE
public static final org.joda.time.Years ONE
private static final org.joda.time.format.PeriodFormatter PARSER
public static final org.joda.time.Years THREE
public static final org.joda.time.Years TWO
public static final org.joda.time.Years ZERO
private static final long serialVersionUID
    static void <clinit>()
    {
        org.joda.time.Years $r0;
        org.joda.time.format.PeriodFormatter $r1;
        org.joda.time.PeriodType $r2;

        $r0 = new org.joda.time.Years;

        specialinvoke $r0.<org.joda.time.Years: void <init>(int)>(0);

        <org.joda.time.Years: org.joda.time.Years ZERO> = $r0;

        $r0 = new org.joda.time.Years;

        specialinvoke $r0.<org.joda.time.Years: void <init>(int)>(1);

        <org.joda.time.Years: org.joda.time.Years ONE> = $r0;

        $r0 = new org.joda.time.Years;

        specialinvoke $r0.<org.joda.time.Years: void <init>(int)>(2);

        <org.joda.time.Years: org.joda.time.Years TWO> = $r0;

        $r0 = new org.joda.time.Years;

        specialinvoke $r0.<org.joda.time.Years: void <init>(int)>(3);

        <org.joda.time.Years: org.joda.time.Years THREE> = $r0;

        $r0 = new org.joda.time.Years;

        specialinvoke $r0.<org.joda.time.Years: void <init>(int)>(2147483647);

        <org.joda.time.Years: org.joda.time.Years MAX_VALUE> = $r0;

        $r0 = new org.joda.time.Years;

        specialinvoke $r0.<org.joda.time.Years: void <init>(int)>(-2147483648);

        <org.joda.time.Years: org.joda.time.Years MIN_VALUE> = $r0;

        $r1 = staticinvoke <org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>();

        $r2 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType years()>();

        $r1 = virtualinvoke $r1.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodFormatter withParseType(org.joda.time.PeriodType)>($r2);

        <org.joda.time.Years: org.joda.time.format.PeriodFormatter PARSER> = $r1;

        return;
    }
    private void <init>(int)
    {
        org.joda.time.Years r0;
        int $i0;

        r0 := @this: org.joda.time.Years;

        $i0 := @parameter0: int;

        specialinvoke r0.<org.joda.time.base.BaseSingleFieldPeriod: void <init>(int)>($i0);

        return;
    }
    public static org.joda.time.Years parseYears(java.lang.String)
    {
        java.lang.String $r0;
        org.joda.time.format.PeriodFormatter $r1;
        org.joda.time.Period $r2;
        int $i0;
        org.joda.time.Years $r3;

        $r0 := @parameter0: java.lang.String;

        if $r0 != null goto label1;

        $r3 = <org.joda.time.Years: org.joda.time.Years ZERO>;

        return $r3;

     label1:
        $r1 = <org.joda.time.Years: org.joda.time.format.PeriodFormatter PARSER>;

        $r2 = virtualinvoke $r1.<org.joda.time.format.PeriodFormatter: org.joda.time.Period parsePeriod(java.lang.String)>($r0);

        $i0 = virtualinvoke $r2.<org.joda.time.Period: int getYears()>();

        $r3 = staticinvoke <org.joda.time.Years: org.joda.time.Years years(int)>($i0);

        return $r3;
    }
    private java.lang.Object readResolve()
    {
        org.joda.time.Years r0;
        int $i0;

        r0 := @this: org.joda.time.Years;

        $i0 = virtualinvoke r0.<org.joda.time.Years: int getValue()>();

        r0 = staticinvoke <org.joda.time.Years: org.joda.time.Years years(int)>($i0);

        return r0;
    }
    public static org.joda.time.Years years(int)
    {
        int $i0;
        org.joda.time.Years $r0;

        $i0 := @parameter0: int;

        lookupswitch($i0)
        {
            case -2147483648: goto label7;
            case 0: goto label2;
            case 1: goto label3;
            case 2: goto label4;
            case 3: goto label5;
            case 2147483647: goto label6;
            default: goto label1;
        };

     label1:
        $r0 = new org.joda.time.Years;

        specialinvoke $r0.<org.joda.time.Years: void <init>(int)>($i0);

        return $r0;

     label2:
        $r0 = <org.joda.time.Years: org.joda.time.Years ZERO>;

        return $r0;

     label3:
        $r0 = <org.joda.time.Years: org.joda.time.Years ONE>;

        return $r0;

     label4:
        $r0 = <org.joda.time.Years: org.joda.time.Years TWO>;

        return $r0;

     label5:
        $r0 = <org.joda.time.Years: org.joda.time.Years THREE>;

        return $r0;

     label6:
        $r0 = <org.joda.time.Years: org.joda.time.Years MAX_VALUE>;

        return $r0;

     label7:
        $r0 = <org.joda.time.Years: org.joda.time.Years MIN_VALUE>;

        return $r0;
    }
    public static org.joda.time.Years yearsBetween(org.joda.time.ReadableInstant, org.joda.time.ReadableInstant)
    {
        org.joda.time.ReadableInstant $r0, $r1;
        org.joda.time.DurationFieldType $r2;
        int $i0;
        org.joda.time.Years $r3;

        $r0 := @parameter0: org.joda.time.ReadableInstant;

        $r1 := @parameter1: org.joda.time.ReadableInstant;

        $r2 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>();

        $i0 = staticinvoke <org.joda.time.base.BaseSingleFieldPeriod: int between(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant,org.joda.time.DurationFieldType)>($r0, $r1, $r2);

        $r3 = staticinvoke <org.joda.time.Years: org.joda.time.Years years(int)>($i0);

        return $r3;
    }
    public static org.joda.time.Years yearsBetween(org.joda.time.ReadablePartial, org.joda.time.ReadablePartial)
    {
        org.joda.time.ReadablePartial $r0, $r1;
        boolean $z0;
        org.joda.time.Chronology $r2;
        org.joda.time.DurationField $r3;
        org.joda.time.LocalDate $r4;
        long $l0, $l1;
        int $i2;
        org.joda.time.Years $r5;

        $r0 := @parameter0: org.joda.time.ReadablePartial;

        $r1 := @parameter1: org.joda.time.ReadablePartial;

        $z0 = $r0 instanceof org.joda.time.LocalDate;

        if $z0 == 0 goto label1;

        $z0 = $r1 instanceof org.joda.time.LocalDate;

        if $z0 == 0 goto label1;

        $r2 = interfaceinvoke $r0.<org.joda.time.ReadablePartial: org.joda.time.Chronology getChronology()>();

        $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>($r2);

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DurationField years()>();

        $r4 = (org.joda.time.LocalDate) $r1;

        $l0 = virtualinvoke $r4.<org.joda.time.LocalDate: long getLocalMillis()>();

        $r4 = (org.joda.time.LocalDate) $r0;

        $l1 = virtualinvoke $r4.<org.joda.time.LocalDate: long getLocalMillis()>();

        $i2 = virtualinvoke $r3.<org.joda.time.DurationField: int getDifference(long,long)>($l0, $l1);

        $r5 = staticinvoke <org.joda.time.Years: org.joda.time.Years years(int)>($i2);

        return $r5;

     label1:
        $r5 = <org.joda.time.Years: org.joda.time.Years ZERO>;

        $i2 = staticinvoke <org.joda.time.base.BaseSingleFieldPeriod: int between(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial,org.joda.time.ReadablePeriod)>($r0, $r1, $r5);

        $r5 = staticinvoke <org.joda.time.Years: org.joda.time.Years years(int)>($i2);

        return $r5;
    }
    public static org.joda.time.Years yearsIn(org.joda.time.ReadableInterval)
    {
        org.joda.time.ReadableInterval $r0;
        org.joda.time.DateTime $r1, $r2;
        org.joda.time.DurationFieldType $r3;
        int $i0;
        org.joda.time.Years $r4;

        $r0 := @parameter0: org.joda.time.ReadableInterval;

        if $r0 != null goto label1;

        $r4 = <org.joda.time.Years: org.joda.time.Years ZERO>;

        return $r4;

     label1:
        $r1 = interfaceinvoke $r0.<org.joda.time.ReadableInterval: org.joda.time.DateTime getStart()>();

        $r2 = interfaceinvoke $r0.<org.joda.time.ReadableInterval: org.joda.time.DateTime getEnd()>();

        $r3 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>();

        $i0 = staticinvoke <org.joda.time.base.BaseSingleFieldPeriod: int between(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant,org.joda.time.DurationFieldType)>($r1, $r2, $r3);

        $r4 = staticinvoke <org.joda.time.Years: org.joda.time.Years years(int)>($i0);

        return $r4;
    }
    public org.joda.time.Years dividedBy(int)
    {
        int $i0, $i1;
        org.joda.time.Years r0;

        r0 := @this: org.joda.time.Years;

        $i0 := @parameter0: int;

        if $i0 != 1 goto label1;

        return r0;

     label1:
        $i1 = virtualinvoke r0.<org.joda.time.Years: int getValue()>();

        $i0 = $i1 / $i0;

        r0 = staticinvoke <org.joda.time.Years: org.joda.time.Years years(int)>($i0);

        return r0;
    }
    public org.joda.time.DurationFieldType getFieldType()
    {
        org.joda.time.Years r0;
        org.joda.time.DurationFieldType $r1;

        r0 := @this: org.joda.time.Years;

        $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>();

        return $r1;
    }
    public org.joda.time.PeriodType getPeriodType()
    {
        org.joda.time.Years r0;
        org.joda.time.PeriodType $r1;

        r0 := @this: org.joda.time.Years;

        $r1 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType years()>();

        return $r1;
    }
    public int getYears()
    {
        org.joda.time.Years r0;
        int $i0;

        r0 := @this: org.joda.time.Years;

        $i0 = virtualinvoke r0.<org.joda.time.Years: int getValue()>();

        return $i0;
    }
    public boolean isGreaterThan(org.joda.time.Years)
    {
        org.joda.time.Years r0, $r1;
        int $i0, $i1;

        r0 := @this: org.joda.time.Years;

        $r1 := @parameter0: org.joda.time.Years;

        if $r1 != null goto label2;

        $i0 = virtualinvoke r0.<org.joda.time.Years: int getValue()>();

        if $i0 <= 0 goto label1;

        return 1;

     label1:
        return 0;

     label2:
        $i0 = virtualinvoke r0.<org.joda.time.Years: int getValue()>();

        $i1 = virtualinvoke $r1.<org.joda.time.Years: int getValue()>();

        if $i0 > $i1 goto label3;

        return 0;

     label3:
        return 1;
    }
    public boolean isLessThan(org.joda.time.Years)
    {
        org.joda.time.Years r0, $r1;
        int $i0, $i1;

        r0 := @this: org.joda.time.Years;

        $r1 := @parameter0: org.joda.time.Years;

        if $r1 != null goto label2;

        $i0 = virtualinvoke r0.<org.joda.time.Years: int getValue()>();

        if $i0 >= 0 goto label1;

        return 1;

     label1:
        return 0;

     label2:
        $i0 = virtualinvoke r0.<org.joda.time.Years: int getValue()>();

        $i1 = virtualinvoke $r1.<org.joda.time.Years: int getValue()>();

        if $i0 < $i1 goto label3;

        return 0;

     label3:
        return 1;
    }
    public org.joda.time.Years minus(int)
    {
        org.joda.time.Years r0;
        int $i0;

        r0 := @this: org.joda.time.Years;

        $i0 := @parameter0: int;

        $i0 = staticinvoke <org.joda.time.field.FieldUtils: int safeNegate(int)>($i0);

        r0 = virtualinvoke r0.<org.joda.time.Years: org.joda.time.Years plus(int)>($i0);

        return r0;
    }
    public org.joda.time.Years minus(org.joda.time.Years)
    {
        org.joda.time.Years $r0, r1;
        int $i0;

        r1 := @this: org.joda.time.Years;

        $r0 := @parameter0: org.joda.time.Years;

        if $r0 != null goto label1;

        return r1;

     label1:
        $i0 = virtualinvoke $r0.<org.joda.time.Years: int getValue()>();

        r1 = virtualinvoke r1.<org.joda.time.Years: org.joda.time.Years minus(int)>($i0);

        return r1;
    }
    public org.joda.time.Years multipliedBy(int)
    {
        org.joda.time.Years r0;
        int $i0, $i1;

        r0 := @this: org.joda.time.Years;

        $i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.joda.time.Years: int getValue()>();

        $i0 = staticinvoke <org.joda.time.field.FieldUtils: int safeMultiply(int,int)>($i1, $i0);

        r0 = staticinvoke <org.joda.time.Years: org.joda.time.Years years(int)>($i0);

        return r0;
    }
    public org.joda.time.Years negated()
    {
        org.joda.time.Years r0;
        int $i0;

        r0 := @this: org.joda.time.Years;

        $i0 = virtualinvoke r0.<org.joda.time.Years: int getValue()>();

        $i0 = staticinvoke <org.joda.time.field.FieldUtils: int safeNegate(int)>($i0);

        r0 = staticinvoke <org.joda.time.Years: org.joda.time.Years years(int)>($i0);

        return r0;
    }
    public org.joda.time.Years plus(int)
    {
        int $i0, $i1;
        org.joda.time.Years r0;

        r0 := @this: org.joda.time.Years;

        $i0 := @parameter0: int;

        if $i0 != 0 goto label1;

        return r0;

     label1:
        $i1 = virtualinvoke r0.<org.joda.time.Years: int getValue()>();

        $i0 = staticinvoke <org.joda.time.field.FieldUtils: int safeAdd(int,int)>($i1, $i0);

        r0 = staticinvoke <org.joda.time.Years: org.joda.time.Years years(int)>($i0);

        return r0;
    }
    public org.joda.time.Years plus(org.joda.time.Years)
    {
        org.joda.time.Years $r0, r1;
        int $i0;

        r1 := @this: org.joda.time.Years;

        $r0 := @parameter0: org.joda.time.Years;

        if $r0 != null goto label1;

        return r1;

     label1:
        $i0 = virtualinvoke $r0.<org.joda.time.Years: int getValue()>();

        r1 = virtualinvoke r1.<org.joda.time.Years: org.joda.time.Years plus(int)>($i0);

        return r1;
    }
    public java.lang.String toString()
    {
        org.joda.time.Years r0;
        java.lang.StringBuilder $r1;
        int $i0;
        java.lang.String $r2;

        r0 := @this: org.joda.time.Years;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("P");

        $i0 = virtualinvoke r0.<org.joda.time.Years: int getValue()>();

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Y");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
