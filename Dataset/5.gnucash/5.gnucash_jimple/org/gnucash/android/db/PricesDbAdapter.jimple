org.gnucash.android.db.PricesDbAdapter extends org.gnucash.android.db.DatabaseAdapter
    public void <init>(android.database.sqlite.SQLiteDatabase)
    {
        org.gnucash.android.db.PricesDbAdapter r0;
        android.database.sqlite.SQLiteDatabase $r1;

        r0 := @this: org.gnucash.android.db.PricesDbAdapter;

        $r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        specialinvoke r0.<org.gnucash.android.db.DatabaseAdapter: void <init>(android.database.sqlite.SQLiteDatabase,java.lang.String)>($r1, "prices");

        return;
    }
    public static org.gnucash.android.db.PricesDbAdapter getInstance()
    {
        org.gnucash.android.db.PricesDbAdapter $r0;

        $r0 = staticinvoke <org.gnucash.android.app.GnuCashApplication: org.gnucash.android.db.PricesDbAdapter getPricesDbAdapter()>();

        return $r0;
    }
    public volatile org.gnucash.android.model.BaseModel buildModelInstance(android.database.Cursor)
    {
        org.gnucash.android.db.PricesDbAdapter r0;
        android.database.Cursor $r1;
        org.gnucash.android.model.Price $r2;

        r0 := @this: org.gnucash.android.db.PricesDbAdapter;

        $r1 := @parameter0: android.database.Cursor;

        $r2 = virtualinvoke r0.<org.gnucash.android.db.PricesDbAdapter: org.gnucash.android.model.Price buildModelInstance(android.database.Cursor)>($r1);

        return $r2;
    }
    public org.gnucash.android.model.Price buildModelInstance(android.database.Cursor)
    {
        org.gnucash.android.db.PricesDbAdapter r0;
        android.database.Cursor $r1;
        org.gnucash.android.model.Price r2;
        int $i0;
        java.lang.String $r3, $r4, $r5, $r6, $r7;
        long $l1, $l2;
        java.sql.Timestamp $r8;

        r0 := @this: org.gnucash.android.db.PricesDbAdapter;

        $r1 := @parameter0: android.database.Cursor;

        $i0 = interfaceinvoke $r1.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("commodity_guid");

        $r3 = interfaceinvoke $r1.<android.database.Cursor: java.lang.String getString(int)>($i0);

        $i0 = interfaceinvoke $r1.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("currency_guid");

        $r4 = interfaceinvoke $r1.<android.database.Cursor: java.lang.String getString(int)>($i0);

        $i0 = interfaceinvoke $r1.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("date");

        $r5 = interfaceinvoke $r1.<android.database.Cursor: java.lang.String getString(int)>($i0);

        $i0 = interfaceinvoke $r1.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("source");

        $r6 = interfaceinvoke $r1.<android.database.Cursor: java.lang.String getString(int)>($i0);

        $i0 = interfaceinvoke $r1.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("type");

        $r7 = interfaceinvoke $r1.<android.database.Cursor: java.lang.String getString(int)>($i0);

        $i0 = interfaceinvoke $r1.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("value_num");

        $l1 = interfaceinvoke $r1.<android.database.Cursor: long getLong(int)>($i0);

        $i0 = interfaceinvoke $r1.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("value_denom");

        $l2 = interfaceinvoke $r1.<android.database.Cursor: long getLong(int)>($i0);

        r2 = new org.gnucash.android.model.Price;

        specialinvoke r2.<org.gnucash.android.model.Price: void <init>(java.lang.String,java.lang.String)>($r3, $r4);

        $r8 = staticinvoke <java.sql.Timestamp: java.sql.Timestamp valueOf(java.lang.String)>($r5);

        virtualinvoke r2.<org.gnucash.android.model.Price: void setDate(java.sql.Timestamp)>($r8);

        virtualinvoke r2.<org.gnucash.android.model.Price: void setSource(java.lang.String)>($r6);

        virtualinvoke r2.<org.gnucash.android.model.Price: void setType(java.lang.String)>($r7);

        virtualinvoke r2.<org.gnucash.android.model.Price: void setValueNum(long)>($l1);

        virtualinvoke r2.<org.gnucash.android.model.Price: void setValueDenom(long)>($l2);

        virtualinvoke r0.<org.gnucash.android.db.PricesDbAdapter: void populateBaseModelAttributes(android.database.Cursor,org.gnucash.android.model.BaseModel)>($r1, r2);

        return r2;
    }
    protected volatile android.database.sqlite.SQLiteStatement compileReplaceStatement(org.gnucash.android.model.BaseModel)
    {
        org.gnucash.android.db.PricesDbAdapter r0;
        android.database.sqlite.SQLiteStatement $r1;
        org.gnucash.android.model.BaseModel $r2;
        org.gnucash.android.model.Price $r3;

        r0 := @this: org.gnucash.android.db.PricesDbAdapter;

        $r2 := @parameter0: org.gnucash.android.model.BaseModel;

        $r3 = (org.gnucash.android.model.Price) $r2;

        $r1 = virtualinvoke r0.<org.gnucash.android.db.PricesDbAdapter: android.database.sqlite.SQLiteStatement compileReplaceStatement(org.gnucash.android.model.Price)>($r3);

        return $r1;
    }
    protected android.database.sqlite.SQLiteStatement compileReplaceStatement(org.gnucash.android.model.Price)
    {
        org.gnucash.android.db.PricesDbAdapter r0;
        org.gnucash.android.model.Price $r1;
        android.database.sqlite.SQLiteStatement $r2;
        android.database.sqlite.SQLiteDatabase $r3;
        java.lang.String $r4;
        java.sql.Timestamp $r5;
        long $l0;

        r0 := @this: org.gnucash.android.db.PricesDbAdapter;

        $r1 := @parameter0: org.gnucash.android.model.Price;

        $r2 = r0.<org.gnucash.android.db.PricesDbAdapter: android.database.sqlite.SQLiteStatement mReplaceStatement>;

        if $r2 != null goto label1;

        $r3 = r0.<org.gnucash.android.db.PricesDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        $r2 = virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)>("REPLACE INTO prices ( uid , commodity_guid , currency_guid , date , source , type , value_num , value_denom ) VALUES ( ? , ? , ? , ? , ? , ? , ? , ? ) ");

        r0.<org.gnucash.android.db.PricesDbAdapter: android.database.sqlite.SQLiteStatement mReplaceStatement> = $r2;

     label1:
        $r2 = r0.<org.gnucash.android.db.PricesDbAdapter: android.database.sqlite.SQLiteStatement mReplaceStatement>;

        virtualinvoke $r2.<android.database.sqlite.SQLiteStatement: void clearBindings()>();

        $r2 = r0.<org.gnucash.android.db.PricesDbAdapter: android.database.sqlite.SQLiteStatement mReplaceStatement>;

        $r4 = virtualinvoke $r1.<org.gnucash.android.model.Price: java.lang.String getUID()>();

        virtualinvoke $r2.<android.database.sqlite.SQLiteStatement: void bindString(int,java.lang.String)>(1, $r4);

        $r2 = r0.<org.gnucash.android.db.PricesDbAdapter: android.database.sqlite.SQLiteStatement mReplaceStatement>;

        $r4 = virtualinvoke $r1.<org.gnucash.android.model.Price: java.lang.String getCommodityUID()>();

        virtualinvoke $r2.<android.database.sqlite.SQLiteStatement: void bindString(int,java.lang.String)>(2, $r4);

        $r2 = r0.<org.gnucash.android.db.PricesDbAdapter: android.database.sqlite.SQLiteStatement mReplaceStatement>;

        $r4 = virtualinvoke $r1.<org.gnucash.android.model.Price: java.lang.String getCurrencyUID()>();

        virtualinvoke $r2.<android.database.sqlite.SQLiteStatement: void bindString(int,java.lang.String)>(3, $r4);

        $r2 = r0.<org.gnucash.android.db.PricesDbAdapter: android.database.sqlite.SQLiteStatement mReplaceStatement>;

        $r5 = virtualinvoke $r1.<org.gnucash.android.model.Price: java.sql.Timestamp getDate()>();

        $r4 = virtualinvoke $r5.<java.sql.Timestamp: java.lang.String toString()>();

        virtualinvoke $r2.<android.database.sqlite.SQLiteStatement: void bindString(int,java.lang.String)>(4, $r4);

        $r4 = virtualinvoke $r1.<org.gnucash.android.model.Price: java.lang.String getSource()>();

        if $r4 == null goto label2;

        $r2 = r0.<org.gnucash.android.db.PricesDbAdapter: android.database.sqlite.SQLiteStatement mReplaceStatement>;

        $r4 = virtualinvoke $r1.<org.gnucash.android.model.Price: java.lang.String getSource()>();

        virtualinvoke $r2.<android.database.sqlite.SQLiteStatement: void bindString(int,java.lang.String)>(5, $r4);

     label2:
        $r4 = virtualinvoke $r1.<org.gnucash.android.model.Price: java.lang.String getType()>();

        if $r4 == null goto label3;

        $r2 = r0.<org.gnucash.android.db.PricesDbAdapter: android.database.sqlite.SQLiteStatement mReplaceStatement>;

        $r4 = virtualinvoke $r1.<org.gnucash.android.model.Price: java.lang.String getType()>();

        virtualinvoke $r2.<android.database.sqlite.SQLiteStatement: void bindString(int,java.lang.String)>(6, $r4);

     label3:
        $r2 = r0.<org.gnucash.android.db.PricesDbAdapter: android.database.sqlite.SQLiteStatement mReplaceStatement>;

        $l0 = virtualinvoke $r1.<org.gnucash.android.model.Price: long getValueNum()>();

        virtualinvoke $r2.<android.database.sqlite.SQLiteStatement: void bindLong(int,long)>(7, $l0);

        $r2 = r0.<org.gnucash.android.db.PricesDbAdapter: android.database.sqlite.SQLiteStatement mReplaceStatement>;

        $l0 = virtualinvoke $r1.<org.gnucash.android.model.Price: long getValueDenom()>();

        virtualinvoke $r2.<android.database.sqlite.SQLiteStatement: void bindLong(int,long)>(8, $l0);

        $r2 = r0.<org.gnucash.android.db.PricesDbAdapter: android.database.sqlite.SQLiteStatement mReplaceStatement>;

        return $r2;
    }
    public android.util.Pair getPrice(java.lang.String, java.lang.String)
    {
        org.gnucash.android.db.PricesDbAdapter r0;
        java.lang.String $r1, $r2;
        android.util.Pair r3;
        java.lang.Long $r4, $r5;
        boolean $z0;
        android.database.sqlite.SQLiteDatabase $r6;
        java.lang.String[] $r7;
        android.database.Cursor $r8;
        int $i0;
        long $l1, l2, $l3, l4;
        byte $b5;
        java.lang.Throwable $r9;

        r0 := @this: org.gnucash.android.db.PricesDbAdapter;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        r3 = new android.util.Pair;

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(0L);

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(0L);

        specialinvoke r3.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>($r4, $r5);

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label01;

        r3 = new android.util.Pair;

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1L);

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1L);

        specialinvoke r3.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>($r4, $r5);

        return r3;

     label01:
        $r6 = r0.<org.gnucash.android.db.PricesDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        $r7 = newarray (java.lang.String)[4];

        $r7[0] = $r1;

        $r7[1] = $r2;

        $r7[2] = $r2;

        $r7[3] = $r1;

        $r8 = virtualinvoke $r6.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("prices", null, "( commodity_guid = ? AND currency_guid = ? ) OR ( commodity_guid = ? AND currency_guid = ? )", $r7, null, null, "date DESC", "1");

     label02:
        $z0 = interfaceinvoke $r8.<android.database.Cursor: boolean moveToNext()>();

     label03:
        if $z0 == 0 goto label13;

     label04:
        $i0 = interfaceinvoke $r8.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("commodity_guid");

        $r2 = interfaceinvoke $r8.<android.database.Cursor: java.lang.String getString(int)>($i0);

        $i0 = interfaceinvoke $r8.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("value_num");

        $l1 = interfaceinvoke $r8.<android.database.Cursor: long getLong(int)>($i0);

     label05:
        l2 = $l1;

     label06:
        $i0 = interfaceinvoke $r8.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("value_denom");

        $l3 = interfaceinvoke $r8.<android.database.Cursor: long getLong(int)>($i0);

     label07:
        l4 = $l3;

        $b5 = $l1 cmp 0L;

        if $b5 < 0 goto label08;

        $b5 = $l3 cmp 0L;

        if $b5 >= 0 goto label09;

     label08:
        interfaceinvoke $r8.<android.database.Cursor: void close()>();

        return r3;

     label09:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

     label10:
        if $z0 != 0 goto label11;

        l2 = $l3;

        l4 = $l1;

     label11:
        r3 = new android.util.Pair;

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l2);

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l4);

        specialinvoke r3.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>($r4, $r5);

     label12:
        interfaceinvoke $r8.<android.database.Cursor: void close()>();

        return r3;

     label13:
        interfaceinvoke $r8.<android.database.Cursor: void close()>();

        return r3;

     label14:
        $r9 := @caughtexception;

        interfaceinvoke $r8.<android.database.Cursor: void close()>();

        throw $r9;

        catch java.lang.Throwable from label02 to label03 with label14;
        catch java.lang.Throwable from label04 to label05 with label14;
        catch java.lang.Throwable from label06 to label07 with label14;
        catch java.lang.Throwable from label09 to label10 with label14;
        catch java.lang.Throwable from label11 to label12 with label14;
    }
