org.gnucash.android.db.TransactionsDbAdapter extends org.gnucash.android.db.DatabaseAdapter
private final org.gnucash.android.db.SplitsDbAdapter mSplitsDbAdapter
    public void <init>(android.database.sqlite.SQLiteDatabase, org.gnucash.android.db.SplitsDbAdapter)
    {
        org.gnucash.android.db.TransactionsDbAdapter r0;
        android.database.sqlite.SQLiteDatabase $r1;
        org.gnucash.android.db.SplitsDbAdapter $r2;

        r0 := @this: org.gnucash.android.db.TransactionsDbAdapter;

        $r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        $r2 := @parameter1: org.gnucash.android.db.SplitsDbAdapter;

        specialinvoke r0.<org.gnucash.android.db.DatabaseAdapter: void <init>(android.database.sqlite.SQLiteDatabase,java.lang.String)>($r1, "transactions");

        r0.<org.gnucash.android.db.TransactionsDbAdapter: org.gnucash.android.db.SplitsDbAdapter mSplitsDbAdapter> = $r2;

        r0.<org.gnucash.android.db.TransactionsDbAdapter: java.lang.String LOG_TAG> = "TransactionsDbAdapter";

        return;
    }
    public static org.gnucash.android.db.TransactionsDbAdapter getInstance()
    {
        org.gnucash.android.db.TransactionsDbAdapter $r0;

        $r0 = staticinvoke <org.gnucash.android.app.GnuCashApplication: org.gnucash.android.db.TransactionsDbAdapter getTransactionDbAdapter()>();

        return $r0;
    }
    private long getTimestamp(java.lang.String, org.gnucash.android.model.AccountType, java.lang.String)
    {
        org.gnucash.android.db.TransactionsDbAdapter r0;
        java.lang.String $r1, $r3, $r7;
        org.gnucash.android.model.AccountType $r2;
        java.lang.StringBuilder $r4;
        android.database.sqlite.SQLiteDatabase $r5;
        java.lang.String[] $r6;
        android.database.Cursor $r8;
        long l0;
        boolean $z0;

        r0 := @this: org.gnucash.android.db.TransactionsDbAdapter;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.gnucash.android.model.AccountType;

        $r3 := @parameter2: java.lang.String;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("timestamp");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" FROM ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("transactions");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" INNER JOIN ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("splits");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ON ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("splits");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("transaction_uid");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("transactions");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("uid");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" INNER JOIN ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("accounts");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ON ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("accounts");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("uid");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("splits");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("account_uid");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" WHERE ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("accounts");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("type");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = ? AND ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("transactions");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("currency_code");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = ? AND ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("transactions");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("is_template");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = 0");

        $r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = r0.<org.gnucash.android.db.TransactionsDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        $r6 = newarray (java.lang.String)[2];

        $r7 = virtualinvoke $r2.<org.gnucash.android.model.AccountType: java.lang.String name()>();

        $r6[0] = $r7;

        $r6[1] = $r3;

        $r8 = virtualinvoke $r5.<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[])>($r1, $r6);

        l0 = 0L;

        if $r8 == null goto label2;

        $z0 = interfaceinvoke $r8.<android.database.Cursor: boolean moveToFirst()>();

        if $z0 == 0 goto label1;

        l0 = interfaceinvoke $r8.<android.database.Cursor: long getLong(int)>(0);

     label1:
        interfaceinvoke $r8.<android.database.Cursor: void close()>();

        return l0;

     label2:
        return 0L;
    }
    public volatile void addRecord(org.gnucash.android.model.BaseModel)
    {
        org.gnucash.android.db.TransactionsDbAdapter r0;
        org.gnucash.android.model.BaseModel $r1;
        org.gnucash.android.model.Transaction $r2;

        r0 := @this: org.gnucash.android.db.TransactionsDbAdapter;

        $r1 := @parameter0: org.gnucash.android.model.BaseModel;

        $r2 = (org.gnucash.android.model.Transaction) $r1;

        virtualinvoke r0.<org.gnucash.android.db.TransactionsDbAdapter: void addRecord(org.gnucash.android.model.Transaction)>($r2);

        return;
    }
    public void addRecord(org.gnucash.android.model.Transaction)
    {
        org.gnucash.android.db.TransactionsDbAdapter r0;
        org.gnucash.android.model.Transaction $r1;
        long l0;
        java.util.ArrayList r2;
        android.database.SQLException r3;
        java.lang.String $r4, $r13;
        android.database.sqlite.SQLiteDatabase $r5;
        org.gnucash.android.model.Split $r6;
        org.gnucash.android.db.AccountsDbAdapter $r7;
        java.util.Currency $r8;
        java.util.List $r9;
        int $i1;
        java.util.Iterator $r10;
        boolean $z0;
        java.lang.Object $r11;
        org.gnucash.android.db.SplitsDbAdapter $r12;
        java.lang.StringBuilder $r14;
        java.lang.String[] $r15;
        java.lang.Throwable $r16;

        r0 := @this: org.gnucash.android.db.TransactionsDbAdapter;

        $r1 := @parameter0: org.gnucash.android.model.Transaction;

        $r4 = r0.<org.gnucash.android.db.TransactionsDbAdapter: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r4, "Replacing transaction in db");

        $r5 = r0.<org.gnucash.android.db.TransactionsDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        virtualinvoke $r5.<android.database.sqlite.SQLiteDatabase: void beginTransaction()>();

     label01:
        $r6 = virtualinvoke $r1.<org.gnucash.android.model.Transaction: org.gnucash.android.model.Split getAutoBalanceSplit()>();

     label02:
        if $r6 == null goto label04;

     label03:
        $r7 = staticinvoke <org.gnucash.android.db.AccountsDbAdapter: org.gnucash.android.db.AccountsDbAdapter getInstance()>();

        $r8 = virtualinvoke $r1.<org.gnucash.android.model.Transaction: java.util.Currency getCurrency()>();

        $r4 = virtualinvoke $r7.<org.gnucash.android.db.AccountsDbAdapter: java.lang.String getOrCreateImbalanceAccountUID(java.util.Currency)>($r8);

        virtualinvoke $r6.<org.gnucash.android.model.Split: void setAccountUID(java.lang.String)>($r4);

     label04:
        specialinvoke r0.<org.gnucash.android.db.DatabaseAdapter: void addRecord(org.gnucash.android.model.BaseModel)>($r1);

     label05:
        $r4 = r0.<org.gnucash.android.db.TransactionsDbAdapter: java.lang.String LOG_TAG>;

     label06:
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r4, "Adding splits for transaction");

     label07:
        r2 = new java.util.ArrayList;

     label08:
        $r9 = virtualinvoke $r1.<org.gnucash.android.model.Transaction: java.util.List getSplits()>();

        $i1 = interfaceinvoke $r9.<java.util.List: int size()>();

        specialinvoke r2.<java.util.ArrayList: void <init>(int)>($i1);

        $r9 = virtualinvoke $r1.<org.gnucash.android.model.Transaction: java.util.List getSplits()>();

        $r10 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

     label10:
        if $z0 == 0 goto label20;

     label11:
        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

     label12:
        $r6 = (org.gnucash.android.model.Split) $r11;

        $r4 = r0.<org.gnucash.android.db.TransactionsDbAdapter: java.lang.String LOG_TAG>;

     label13:
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r4, "Replace transaction split in db");

     label14:
        $r12 = r0.<org.gnucash.android.db.TransactionsDbAdapter: org.gnucash.android.db.SplitsDbAdapter mSplitsDbAdapter>;

     label15:
        virtualinvoke $r12.<org.gnucash.android.db.SplitsDbAdapter: void addRecord(org.gnucash.android.model.Split)>($r6);

        $r4 = virtualinvoke $r6.<org.gnucash.android.model.Split: java.lang.String getUID()>();

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

     label16:
        goto label09;

     label17:
        r3 := @caughtexception;

     label18:
        $r4 = r0.<org.gnucash.android.db.TransactionsDbAdapter: java.lang.String LOG_TAG>;

        $r13 = virtualinvoke r3.<android.database.SQLException: java.lang.String getMessage()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r4, $r13);

        staticinvoke <com.crashlytics.android.Crashlytics: void logException(java.lang.Throwable)>(r3);

     label19:
        $r5 = r0.<org.gnucash.android.db.TransactionsDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        virtualinvoke $r5.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        return;

     label20:
        $r4 = r0.<org.gnucash.android.db.TransactionsDbAdapter: java.lang.String LOG_TAG>;

        $r14 = new java.lang.StringBuilder;

     label21:
        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r1.<org.gnucash.android.model.Transaction: java.util.List getSplits()>();

        $i1 = interfaceinvoke $r9.<java.util.List: int size()>();

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" splits added");

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r4, $r13);

     label22:
        $r5 = r0.<org.gnucash.android.db.TransactionsDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        $r14 = new java.lang.StringBuilder;

     label23:
        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("transaction_uid = ? AND uid NOT IN (\'");

        $r4 = staticinvoke <android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>("\' , \'", r2);

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\')");

        $r4 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

     label24:
        $r15 = newarray (java.lang.String)[1];

     label25:
        $r13 = virtualinvoke $r1.<org.gnucash.android.model.Transaction: java.lang.String getUID()>();

     label26:
        $r15[0] = $r13;

     label27:
        $i1 = virtualinvoke $r5.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>("splits", $r4, $r15);

     label28:
        l0 = (long) $i1;

     label29:
        $r4 = r0.<org.gnucash.android.db.TransactionsDbAdapter: java.lang.String LOG_TAG>;

        $r14 = new java.lang.StringBuilder;

     label30:
        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" splits deleted");

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r4, $r13);

     label31:
        $r5 = r0.<org.gnucash.android.db.TransactionsDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

     label32:
        virtualinvoke $r5.<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>();

     label33:
        $r5 = r0.<org.gnucash.android.db.TransactionsDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        virtualinvoke $r5.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        return;

     label34:
        $r16 := @caughtexception;

        $r5 = r0.<org.gnucash.android.db.TransactionsDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        virtualinvoke $r5.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        throw $r16;

        catch android.database.SQLException from label01 to label02 with label17;
        catch android.database.SQLException from label03 to label05 with label17;
        catch android.database.SQLException from label06 to label07 with label17;
        catch android.database.SQLException from label08 to label10 with label17;
        catch android.database.SQLException from label11 to label12 with label17;
        catch android.database.SQLException from label13 to label14 with label17;
        catch android.database.SQLException from label15 to label16 with label17;
        catch java.lang.Throwable from label01 to label02 with label34;
        catch java.lang.Throwable from label03 to label10 with label34;
        catch java.lang.Throwable from label11 to label16 with label34;
        catch java.lang.Throwable from label18 to label19 with label34;
        catch android.database.SQLException from label21 to label22 with label17;
        catch android.database.SQLException from label23 to label24 with label17;
        catch android.database.SQLException from label25 to label26 with label17;
        catch android.database.SQLException from label27 to label28 with label17;
        catch android.database.SQLException from label30 to label31 with label17;
        catch android.database.SQLException from label32 to label33 with label17;
        catch java.lang.Throwable from label20 to label28 with label34;
        catch java.lang.Throwable from label29 to label33 with label34;
    }
    public volatile org.gnucash.android.model.BaseModel buildModelInstance(android.database.Cursor)
    {
        org.gnucash.android.db.TransactionsDbAdapter r0;
        android.database.Cursor $r1;
        org.gnucash.android.model.Transaction $r2;

        r0 := @this: org.gnucash.android.db.TransactionsDbAdapter;

        $r1 := @parameter0: android.database.Cursor;

        $r2 = virtualinvoke r0.<org.gnucash.android.db.TransactionsDbAdapter: org.gnucash.android.model.Transaction buildModelInstance(android.database.Cursor)>($r1);

        return $r2;
    }
    public org.gnucash.android.model.Transaction buildModelInstance(android.database.Cursor)
    {
        org.gnucash.android.db.TransactionsDbAdapter r0;
        android.database.Cursor $r1;
        org.gnucash.android.model.Transaction r2;
        boolean $z0, $z1;
        int $i0;
        java.lang.String $r3;
        long $l1;
        org.gnucash.android.db.CommoditiesDbAdapter $r4;
        org.gnucash.android.model.Commodity $r5;
        org.gnucash.android.db.SplitsDbAdapter $r6;
        java.util.List $r7;

        r0 := @this: org.gnucash.android.db.TransactionsDbAdapter;

        $r1 := @parameter0: android.database.Cursor;

        $z0 = 1;

        $i0 = interfaceinvoke $r1.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("name");

        $r3 = interfaceinvoke $r1.<android.database.Cursor: java.lang.String getString(int)>($i0);

        r2 = new org.gnucash.android.model.Transaction;

        specialinvoke r2.<org.gnucash.android.model.Transaction: void <init>(java.lang.String)>($r3);

        virtualinvoke r0.<org.gnucash.android.db.TransactionsDbAdapter: void populateBaseModelAttributes(android.database.Cursor,org.gnucash.android.model.BaseModel)>($r1, r2);

        $i0 = interfaceinvoke $r1.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("timestamp");

        $l1 = interfaceinvoke $r1.<android.database.Cursor: long getLong(int)>($i0);

        virtualinvoke r2.<org.gnucash.android.model.Transaction: void setTime(long)>($l1);

        $i0 = interfaceinvoke $r1.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("description");

        $r3 = interfaceinvoke $r1.<android.database.Cursor: java.lang.String getString(int)>($i0);

        virtualinvoke r2.<org.gnucash.android.model.Transaction: void setNote(java.lang.String)>($r3);

        $i0 = interfaceinvoke $r1.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("is_exported");

        $i0 = interfaceinvoke $r1.<android.database.Cursor: int getInt(int)>($i0);

        if $i0 != 1 goto label3;

        $z1 = 1;

     label1:
        virtualinvoke r2.<org.gnucash.android.model.Transaction: void setExported(boolean)>($z1);

        $i0 = interfaceinvoke $r1.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("is_template");

        $i0 = interfaceinvoke $r1.<android.database.Cursor: int getInt(int)>($i0);

        if $i0 != 1 goto label4;

     label2:
        virtualinvoke r2.<org.gnucash.android.model.Transaction: void setTemplate(boolean)>($z0);

        $i0 = interfaceinvoke $r1.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("currency_code");

        $r3 = interfaceinvoke $r1.<android.database.Cursor: java.lang.String getString(int)>($i0);

        virtualinvoke r2.<org.gnucash.android.model.Transaction: void setCurrencyCode(java.lang.String)>($r3);

        $r4 = staticinvoke <org.gnucash.android.db.CommoditiesDbAdapter: org.gnucash.android.db.CommoditiesDbAdapter getInstance()>();

        $r5 = virtualinvoke $r4.<org.gnucash.android.db.CommoditiesDbAdapter: org.gnucash.android.model.Commodity getCommodity(java.lang.String)>($r3);

        virtualinvoke r2.<org.gnucash.android.model.Transaction: void setCommodity(org.gnucash.android.model.Commodity)>($r5);

        $i0 = interfaceinvoke $r1.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("scheduled_action_uid");

        $r3 = interfaceinvoke $r1.<android.database.Cursor: java.lang.String getString(int)>($i0);

        virtualinvoke r2.<org.gnucash.android.model.Transaction: void setScheduledActionUID(java.lang.String)>($r3);

        $i0 = interfaceinvoke $r1.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("_id");

        $l1 = interfaceinvoke $r1.<android.database.Cursor: long getLong(int)>($i0);

        $r6 = r0.<org.gnucash.android.db.TransactionsDbAdapter: org.gnucash.android.db.SplitsDbAdapter mSplitsDbAdapter>;

        $r7 = virtualinvoke $r6.<org.gnucash.android.db.SplitsDbAdapter: java.util.List getSplitsForTransaction(long)>($l1);

        virtualinvoke r2.<org.gnucash.android.model.Transaction: void setSplits(java.util.List)>($r7);

        return r2;

     label3:
        $z1 = 0;

        goto label1;

     label4:
        $z0 = 0;

        goto label2;
    }
    public long bulkAddRecords(java.util.List)
    {
        org.gnucash.android.db.TransactionsDbAdapter r0;
        java.util.List r1;
        java.util.ArrayList r2;
        long $l0, $l1, $l2;
        java.lang.Class $r3;
        java.lang.String $r4, $r7;
        java.lang.Object[] $r5;
        java.lang.Long $r6;
        int $i3;
        java.util.Iterator $r8;
        boolean $z0;
        java.lang.Object $r9;
        org.gnucash.android.model.Transaction r10;
        byte $b4;
        org.gnucash.android.db.SplitsDbAdapter $r11;
        java.lang.Integer $r12;
        android.database.sqlite.SQLiteDatabase $r13;
        android.database.sqlite.SQLiteStatement $r14;
        java.lang.Throwable $r15;

        r0 := @this: org.gnucash.android.db.TransactionsDbAdapter;

        r1 := @parameter0: java.util.List;

        $l0 = staticinvoke <java.lang.System: long nanoTime()>();

        $l1 = specialinvoke r0.<org.gnucash.android.db.DatabaseAdapter: long bulkAddRecords(java.util.List)>(r1);

        $l2 = staticinvoke <java.lang.System: long nanoTime()>();

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getSimpleName()>();

        $r5 = newarray (java.lang.Object)[1];

        $l0 = $l2 - $l0;

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r5[0] = $r6;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("bulk add transaction time %d ", $r5);

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r4, $r7);

        r2 = new java.util.ArrayList;

        $i3 = interfaceinvoke r1.<java.util.List: int size()>();

        $i3 = $i3 * 3;

        specialinvoke r2.<java.util.ArrayList: void <init>(int)>($i3);

        $r8 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.gnucash.android.model.Transaction) $r9;

        r1 = virtualinvoke r10.<org.gnucash.android.model.Transaction: java.util.List getSplits()>();

        interfaceinvoke r2.<java.util.List: boolean addAll(java.util.Collection)>(r1);

        goto label1;

     label2:
        $b4 = $l1 cmp 0L;

        if $b4 == 0 goto label8;

        $z0 = interfaceinvoke r2.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label8;

     label3:
        $l0 = staticinvoke <java.lang.System: long nanoTime()>();

        $r11 = r0.<org.gnucash.android.db.TransactionsDbAdapter: org.gnucash.android.db.SplitsDbAdapter mSplitsDbAdapter>;

        virtualinvoke $r11.<org.gnucash.android.db.SplitsDbAdapter: long bulkAddRecords(java.util.List)>(r2);

        $r4 = r0.<org.gnucash.android.db.TransactionsDbAdapter: java.lang.String LOG_TAG>;

        $r5 = newarray (java.lang.Object)[2];

        $i3 = interfaceinvoke r2.<java.util.List: int size()>();

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r5[0] = $r12;

        $l2 = staticinvoke <java.lang.System: long nanoTime()>();

     label4:
        $l0 = $l2 - $l0;

     label5:
        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r5[1] = $r6;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%d splits inserted in %d ns", $r5);

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r4, $r7);

     label6:
        $r13 = r0.<org.gnucash.android.db.TransactionsDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        $r14 = virtualinvoke $r13.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)>("DELETE FROM transactions WHERE NOT EXISTS ( SELECT * FROM splits WHERE transactions.uid = splits.transaction_uid ) ");

        virtualinvoke $r14.<android.database.sqlite.SQLiteStatement: void execute()>();

        return $l1;

     label7:
        $r15 := @caughtexception;

        $r13 = r0.<org.gnucash.android.db.TransactionsDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        $r14 = virtualinvoke $r13.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)>("DELETE FROM transactions WHERE NOT EXISTS ( SELECT * FROM splits WHERE transactions.uid = splits.transaction_uid ) ");

        virtualinvoke $r14.<android.database.sqlite.SQLiteStatement: void execute()>();

        throw $r15;

     label8:
        return $l1;

        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }
    protected volatile android.database.sqlite.SQLiteStatement compileReplaceStatement(org.gnucash.android.model.BaseModel)
    {
        org.gnucash.android.db.TransactionsDbAdapter r0;
        android.database.sqlite.SQLiteStatement $r1;
        org.gnucash.android.model.BaseModel $r2;
        org.gnucash.android.model.Transaction $r3;

        r0 := @this: org.gnucash.android.db.TransactionsDbAdapter;

        $r2 := @parameter0: org.gnucash.android.model.BaseModel;

        $r3 = (org.gnucash.android.model.Transaction) $r2;

        $r1 = virtualinvoke r0.<org.gnucash.android.db.TransactionsDbAdapter: android.database.sqlite.SQLiteStatement compileReplaceStatement(org.gnucash.android.model.Transaction)>($r3);

        return $r1;
    }
    protected android.database.sqlite.SQLiteStatement compileReplaceStatement(org.gnucash.android.model.Transaction)
    {
        org.gnucash.android.db.TransactionsDbAdapter r0;
        org.gnucash.android.model.Transaction $r1;
        long $l0, $l1;
        android.database.sqlite.SQLiteStatement $r2;
        android.database.sqlite.SQLiteDatabase $r3;
        java.lang.String $r4;
        boolean $z0;
        org.gnucash.android.model.Commodity $r5, r6;
        org.gnucash.android.db.CommoditiesDbAdapter $r7;
        java.sql.Timestamp $r8;

        r0 := @this: org.gnucash.android.db.TransactionsDbAdapter;

        $r1 := @parameter0: org.gnucash.android.model.Transaction;

        $l0 = 1L;

        $r2 = r0.<org.gnucash.android.db.TransactionsDbAdapter: android.database.sqlite.SQLiteStatement mReplaceStatement>;

        if $r2 != null goto label1;

        $r3 = r0.<org.gnucash.android.db.TransactionsDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        $r2 = virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)>("REPLACE INTO transactions ( uid , name , description , timestamp , is_exported , currency_code , commodity_uid , created_at , scheduled_action_uid , is_template ) VALUES ( ? , ? , ? , ?, ? , ? , ? , ?, ? , ?)");

        r0.<org.gnucash.android.db.TransactionsDbAdapter: android.database.sqlite.SQLiteStatement mReplaceStatement> = $r2;

     label1:
        $r2 = r0.<org.gnucash.android.db.TransactionsDbAdapter: android.database.sqlite.SQLiteStatement mReplaceStatement>;

        virtualinvoke $r2.<android.database.sqlite.SQLiteStatement: void clearBindings()>();

        $r2 = r0.<org.gnucash.android.db.TransactionsDbAdapter: android.database.sqlite.SQLiteStatement mReplaceStatement>;

        $r4 = virtualinvoke $r1.<org.gnucash.android.model.Transaction: java.lang.String getUID()>();

        virtualinvoke $r2.<android.database.sqlite.SQLiteStatement: void bindString(int,java.lang.String)>(1, $r4);

        $r2 = r0.<org.gnucash.android.db.TransactionsDbAdapter: android.database.sqlite.SQLiteStatement mReplaceStatement>;

        $r4 = virtualinvoke $r1.<org.gnucash.android.model.Transaction: java.lang.String getDescription()>();

        virtualinvoke $r2.<android.database.sqlite.SQLiteStatement: void bindString(int,java.lang.String)>(2, $r4);

        $r2 = r0.<org.gnucash.android.db.TransactionsDbAdapter: android.database.sqlite.SQLiteStatement mReplaceStatement>;

        $r4 = virtualinvoke $r1.<org.gnucash.android.model.Transaction: java.lang.String getNote()>();

        virtualinvoke $r2.<android.database.sqlite.SQLiteStatement: void bindString(int,java.lang.String)>(3, $r4);

        $r2 = r0.<org.gnucash.android.db.TransactionsDbAdapter: android.database.sqlite.SQLiteStatement mReplaceStatement>;

        $l1 = virtualinvoke $r1.<org.gnucash.android.model.Transaction: long getTimeMillis()>();

        virtualinvoke $r2.<android.database.sqlite.SQLiteStatement: void bindLong(int,long)>(4, $l1);

        $r2 = r0.<org.gnucash.android.db.TransactionsDbAdapter: android.database.sqlite.SQLiteStatement mReplaceStatement>;

        $z0 = virtualinvoke $r1.<org.gnucash.android.model.Transaction: boolean isExported()>();

        if $z0 == 0 goto label6;

        $l1 = 1L;

     label2:
        virtualinvoke $r2.<android.database.sqlite.SQLiteStatement: void bindLong(int,long)>(5, $l1);

        $r2 = r0.<org.gnucash.android.db.TransactionsDbAdapter: android.database.sqlite.SQLiteStatement mReplaceStatement>;

        $r4 = virtualinvoke $r1.<org.gnucash.android.model.Transaction: java.lang.String getCurrencyCode()>();

        virtualinvoke $r2.<android.database.sqlite.SQLiteStatement: void bindString(int,java.lang.String)>(6, $r4);

        $r5 = virtualinvoke $r1.<org.gnucash.android.model.Transaction: org.gnucash.android.model.Commodity getCommodity()>();

        r6 = $r5;

        if $r5 != null goto label3;

        $r7 = staticinvoke <org.gnucash.android.db.CommoditiesDbAdapter: org.gnucash.android.db.CommoditiesDbAdapter getInstance()>();

        $r4 = virtualinvoke $r1.<org.gnucash.android.model.Transaction: java.lang.String getCurrencyCode()>();

        r6 = virtualinvoke $r7.<org.gnucash.android.db.CommoditiesDbAdapter: org.gnucash.android.model.Commodity getCommodity(java.lang.String)>($r4);

     label3:
        $r2 = r0.<org.gnucash.android.db.TransactionsDbAdapter: android.database.sqlite.SQLiteStatement mReplaceStatement>;

        $r4 = virtualinvoke r6.<org.gnucash.android.model.Commodity: java.lang.String getUID()>();

        virtualinvoke $r2.<android.database.sqlite.SQLiteStatement: void bindString(int,java.lang.String)>(7, $r4);

        $r2 = r0.<org.gnucash.android.db.TransactionsDbAdapter: android.database.sqlite.SQLiteStatement mReplaceStatement>;

        $r8 = virtualinvoke $r1.<org.gnucash.android.model.Transaction: java.sql.Timestamp getCreatedTimestamp()>();

        $r4 = virtualinvoke $r8.<java.sql.Timestamp: java.lang.String toString()>();

        virtualinvoke $r2.<android.database.sqlite.SQLiteStatement: void bindString(int,java.lang.String)>(8, $r4);

        $r4 = virtualinvoke $r1.<org.gnucash.android.model.Transaction: java.lang.String getScheduledActionUID()>();

        if $r4 != null goto label7;

        $r2 = r0.<org.gnucash.android.db.TransactionsDbAdapter: android.database.sqlite.SQLiteStatement mReplaceStatement>;

        virtualinvoke $r2.<android.database.sqlite.SQLiteStatement: void bindNull(int)>(9);

     label4:
        $r2 = r0.<org.gnucash.android.db.TransactionsDbAdapter: android.database.sqlite.SQLiteStatement mReplaceStatement>;

        $z0 = virtualinvoke $r1.<org.gnucash.android.model.Transaction: boolean isTemplate()>();

        if $z0 == 0 goto label8;

     label5:
        virtualinvoke $r2.<android.database.sqlite.SQLiteStatement: void bindLong(int,long)>(10, $l0);

        $r2 = r0.<org.gnucash.android.db.TransactionsDbAdapter: android.database.sqlite.SQLiteStatement mReplaceStatement>;

        return $r2;

     label6:
        $l1 = 0L;

        goto label2;

     label7:
        $r2 = r0.<org.gnucash.android.db.TransactionsDbAdapter: android.database.sqlite.SQLiteStatement mReplaceStatement>;

        $r4 = virtualinvoke $r1.<org.gnucash.android.model.Transaction: java.lang.String getScheduledActionUID()>();

        virtualinvoke $r2.<android.database.sqlite.SQLiteStatement: void bindString(int,java.lang.String)>(9, $r4);

        goto label4;

     label8:
        $l0 = 0L;

        goto label5;
    }
    public int deleteAllNonTemplateTransactions()
    {
        org.gnucash.android.db.TransactionsDbAdapter r0;
        java.lang.String $r1;
        int $i0;
        android.database.sqlite.SQLiteDatabase $r2;

        r0 := @this: org.gnucash.android.db.TransactionsDbAdapter;

        $r2 = r0.<org.gnucash.android.db.TransactionsDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        $r1 = r0.<org.gnucash.android.db.TransactionsDbAdapter: java.lang.String mTableName>;

        $i0 = virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>($r1, "is_template=0", null);

        return $i0;
    }
    public void deleteTransactionsForAccount(java.lang.String)
    {
        org.gnucash.android.db.TransactionsDbAdapter r0;
        java.lang.String $r1;
        android.database.sqlite.SQLiteDatabase $r2;
        java.lang.String[] $r3;

        r0 := @this: org.gnucash.android.db.TransactionsDbAdapter;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.gnucash.android.db.TransactionsDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        $r3 = newarray (java.lang.String)[1];

        $r3[0] = $r1;

        virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String,java.lang.Object[])>("DELETE FROM transactions WHERE uid IN  (SELECT transaction_uid FROM splits WHERE account_uid = ?)", $r3);

        return;
    }
    public int deleteTransactionsWithNoSplits()
    {
        org.gnucash.android.db.TransactionsDbAdapter r0;
        int $i0;
        android.database.sqlite.SQLiteDatabase $r1;

        r0 := @this: org.gnucash.android.db.TransactionsDbAdapter;

        $r1 = r0.<org.gnucash.android.db.TransactionsDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        $i0 = virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>("transactions", "NOT EXISTS ( SELECT * FROM splits WHERE transactions.uid = splits.transaction_uid ) ", null);

        return $i0;
    }
    public android.database.Cursor fetchAllScheduledTransactions()
    {
        org.gnucash.android.db.TransactionsDbAdapter r0;
        android.database.sqlite.SQLiteQueryBuilder r1;
        java.lang.String[] r2;
        android.database.Cursor $r3;
        android.database.sqlite.SQLiteDatabase $r4;

        r0 := @this: org.gnucash.android.db.TransactionsDbAdapter;

        r1 = new android.database.sqlite.SQLiteQueryBuilder;

        specialinvoke r1.<android.database.sqlite.SQLiteQueryBuilder: void <init>()>();

        virtualinvoke r1.<android.database.sqlite.SQLiteQueryBuilder: void setTables(java.lang.String)>("transactions INNER JOIN scheduled_actions ON transactions.uid = scheduled_actions.action_uid");

        r2 = newarray (java.lang.String)[2];

        r2[0] = "transactions.*";

        r2[1] = "scheduled_actions.uid AS origin_scheduled_action_uid";

        $r4 = r0.<org.gnucash.android.db.TransactionsDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        $r3 = virtualinvoke r1.<android.database.sqlite.SQLiteQueryBuilder: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>($r4, r2, null, null, null, null, "transactions.name ASC");

        return $r3;
    }
    public android.database.Cursor fetchAllTransactionsForAccount(long)
    {
        org.gnucash.android.db.TransactionsDbAdapter r0;
        long $l0;
        org.gnucash.android.db.AccountsDbAdapter $r1;
        java.lang.String $r2;
        android.database.Cursor $r3;

        r0 := @this: org.gnucash.android.db.TransactionsDbAdapter;

        $l0 := @parameter0: long;

        $r1 = staticinvoke <org.gnucash.android.db.AccountsDbAdapter: org.gnucash.android.db.AccountsDbAdapter getInstance()>();

        $r2 = virtualinvoke $r1.<org.gnucash.android.db.AccountsDbAdapter: java.lang.String getUID(long)>($l0);

        $r3 = virtualinvoke r0.<org.gnucash.android.db.TransactionsDbAdapter: android.database.Cursor fetchAllTransactionsForAccount(java.lang.String)>($r2);

        return $r3;
    }
    public android.database.Cursor fetchAllTransactionsForAccount(java.lang.String)
    {
        org.gnucash.android.db.TransactionsDbAdapter r0;
        java.lang.String $r1;
        android.database.sqlite.SQLiteQueryBuilder r2;
        java.lang.String[] r3, r4;
        android.database.Cursor $r5;
        android.database.sqlite.SQLiteDatabase $r6;

        r0 := @this: org.gnucash.android.db.TransactionsDbAdapter;

        $r1 := @parameter0: java.lang.String;

        r2 = new android.database.sqlite.SQLiteQueryBuilder;

        specialinvoke r2.<android.database.sqlite.SQLiteQueryBuilder: void <init>()>();

        virtualinvoke r2.<android.database.sqlite.SQLiteQueryBuilder: void setTables(java.lang.String)>("transactions INNER JOIN splits ON transactions.uid = splits.transaction_uid");

        virtualinvoke r2.<android.database.sqlite.SQLiteQueryBuilder: void setDistinct(boolean)>(1);

        r3 = newarray (java.lang.String)[1];

        r3[0] = "transactions.*";

        r4 = newarray (java.lang.String)[1];

        r4[0] = $r1;

        $r6 = r0.<org.gnucash.android.db.TransactionsDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        $r5 = virtualinvoke r2.<android.database.sqlite.SQLiteQueryBuilder: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>($r6, r3, "splits.account_uid = ? AND transactions.is_template = 0", r4, null, null, "transactions.timestamp DESC");

        return $r5;
    }
    public android.database.Cursor fetchScheduledTransactionsForAccount(java.lang.String)
    {
        org.gnucash.android.db.TransactionsDbAdapter r0;
        java.lang.String $r1;
        android.database.sqlite.SQLiteQueryBuilder r2;
        java.lang.String[] r3, r4;
        android.database.Cursor $r5;
        android.database.sqlite.SQLiteDatabase $r6;

        r0 := @this: org.gnucash.android.db.TransactionsDbAdapter;

        $r1 := @parameter0: java.lang.String;

        r2 = new android.database.sqlite.SQLiteQueryBuilder;

        specialinvoke r2.<android.database.sqlite.SQLiteQueryBuilder: void <init>()>();

        virtualinvoke r2.<android.database.sqlite.SQLiteQueryBuilder: void setTables(java.lang.String)>("transactions INNER JOIN splits ON transactions.uid = splits.transaction_uid");

        virtualinvoke r2.<android.database.sqlite.SQLiteQueryBuilder: void setDistinct(boolean)>(1);

        r3 = newarray (java.lang.String)[1];

        r3[0] = "transactions.*";

        r4 = newarray (java.lang.String)[1];

        r4[0] = $r1;

        $r6 = r0.<org.gnucash.android.db.TransactionsDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        $r5 = virtualinvoke r2.<android.database.sqlite.SQLiteQueryBuilder: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>($r6, r3, "splits.account_uid = ? AND transactions.is_template = 1", r4, null, null, "transactions.timestamp DESC");

        return $r5;
    }
    public android.database.Cursor fetchTransactionSuggestions(java.lang.String, java.lang.String)
    {
        org.gnucash.android.db.TransactionsDbAdapter r0;
        java.lang.String $r1, $r2;
        android.database.sqlite.SQLiteQueryBuilder r3;
        java.lang.String[] r4, r5;
        java.lang.StringBuilder $r6;
        android.database.sqlite.SQLiteDatabase $r7;
        android.database.Cursor $r8;

        r0 := @this: org.gnucash.android.db.TransactionsDbAdapter;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        r3 = new android.database.sqlite.SQLiteQueryBuilder;

        specialinvoke r3.<android.database.sqlite.SQLiteQueryBuilder: void <init>()>();

        virtualinvoke r3.<android.database.sqlite.SQLiteQueryBuilder: void setTables(java.lang.String)>("transactions INNER JOIN splits ON transactions.uid = splits.transaction_uid");

        virtualinvoke r3.<android.database.sqlite.SQLiteQueryBuilder: void setDistinct(boolean)>(1);

        r4 = newarray (java.lang.String)[1];

        r4[0] = "transactions.*";

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(splits.account_uid = ? OR transactions.is_template=1 ) AND transactions.name LIKE \'");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%\'");

        $r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        r5 = newarray (java.lang.String)[1];

        r5[0] = $r2;

        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(5);

        $r7 = r0.<org.gnucash.android.db.TransactionsDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        $r8 = virtualinvoke r3.<android.database.sqlite.SQLiteQueryBuilder: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r7, r4, $r1, r5, "name", null, "transactions.timestamp DESC", $r2);

        return $r8;
    }
    public android.database.Cursor fetchTransactionsWithSplits(java.lang.String[], java.lang.String, java.lang.String[], java.lang.String)
    {
        org.gnucash.android.db.TransactionsDbAdapter r0;
        java.lang.String[] $r1, $r3;
        java.lang.String $r2, $r4;
        android.database.Cursor $r5;
        android.database.sqlite.SQLiteDatabase $r6;

        r0 := @this: org.gnucash.android.db.TransactionsDbAdapter;

        $r1 := @parameter0: java.lang.String[];

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String[];

        $r4 := @parameter3: java.lang.String;

        $r6 = r0.<org.gnucash.android.db.TransactionsDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        $r5 = virtualinvoke $r6.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("transactions , splits ON transactions.uid = splits.transaction_uid , trans_extra_info ON trans_extra_info.trans_acct_t_uid = transactions.uid", $r1, $r2, $r3, null, null, $r4);

        return $r5;
    }
    public android.database.Cursor fetchTransactionsWithSplitsWithTransactionAccount(java.lang.String[], java.lang.String, java.lang.String[], java.lang.String)
    {
        org.gnucash.android.db.TransactionsDbAdapter r0;
        java.lang.String[] $r1, $r3;
        java.lang.String $r2, $r4;
        android.database.Cursor $r5;
        android.database.sqlite.SQLiteDatabase $r6;

        r0 := @this: org.gnucash.android.db.TransactionsDbAdapter;

        $r1 := @parameter0: java.lang.String[];

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String[];

        $r4 := @parameter3: java.lang.String;

        $r6 = r0.<org.gnucash.android.db.TransactionsDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        $r5 = virtualinvoke $r6.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("trans_split_acct , trans_extra_info ON trans_extra_info.trans_acct_t_uid = trans_split_acct.transactions_uid , accounts AS account1 ON account1.uid = trans_extra_info.trans_acct_a_uid", $r1, $r2, $r3, null, null, $r4);

        return $r5;
    }
    public java.lang.String getAccountCurrencyCode(long)
    {
        org.gnucash.android.db.TransactionsDbAdapter r0;
        long $l0;
        org.gnucash.android.db.AccountsDbAdapter $r1;
        java.lang.String $r2;

        r0 := @this: org.gnucash.android.db.TransactionsDbAdapter;

        $l0 := @parameter0: long;

        $r1 = staticinvoke <org.gnucash.android.db.AccountsDbAdapter: org.gnucash.android.db.AccountsDbAdapter getInstance()>();

        $r2 = virtualinvoke $r1.<org.gnucash.android.db.AccountsDbAdapter: java.lang.String getUID(long)>($l0);

        $r2 = virtualinvoke r0.<org.gnucash.android.db.TransactionsDbAdapter: java.lang.String getAccountCurrencyCode(java.lang.String)>($r2);

        return $r2;
    }
    public java.util.List getAllTransactions()
    {
        org.gnucash.android.db.TransactionsDbAdapter r0;
        java.util.ArrayList r1;
        android.database.Cursor $r2;
        boolean $z0;
        org.gnucash.android.model.Transaction $r3;
        java.lang.Throwable $r4;

        r0 := @this: org.gnucash.android.db.TransactionsDbAdapter;

        $r2 = virtualinvoke r0.<org.gnucash.android.db.TransactionsDbAdapter: android.database.Cursor fetchAllRecords()>();

        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>()>();

     label1:
        $z0 = interfaceinvoke $r2.<android.database.Cursor: boolean moveToNext()>();

     label2:
        if $z0 == 0 goto label6;

     label3:
        $r3 = virtualinvoke r0.<org.gnucash.android.db.TransactionsDbAdapter: org.gnucash.android.model.Transaction buildModelInstance(android.database.Cursor)>($r2);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r3);

     label4:
        goto label1;

     label5:
        $r4 := @caughtexception;

        interfaceinvoke $r2.<android.database.Cursor: void close()>();

        throw $r4;

     label6:
        interfaceinvoke $r2.<android.database.Cursor: void close()>();

        return r1;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }
    public java.util.List getAllTransactionsForAccount(java.lang.String)
    {
        org.gnucash.android.db.TransactionsDbAdapter r0;
        java.lang.String $r1;
        java.util.ArrayList r2;
        android.database.Cursor $r3;
        boolean $z0;
        org.gnucash.android.model.Transaction $r4;
        java.lang.Throwable $r5;

        r0 := @this: org.gnucash.android.db.TransactionsDbAdapter;

        $r1 := @parameter0: java.lang.String;

        $r3 = virtualinvoke r0.<org.gnucash.android.db.TransactionsDbAdapter: android.database.Cursor fetchAllTransactionsForAccount(java.lang.String)>($r1);

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

     label1:
        $z0 = interfaceinvoke $r3.<android.database.Cursor: boolean moveToNext()>();

     label2:
        if $z0 == 0 goto label6;

     label3:
        $r4 = virtualinvoke r0.<org.gnucash.android.db.TransactionsDbAdapter: org.gnucash.android.model.Transaction buildModelInstance(android.database.Cursor)>($r3);

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

     label4:
        goto label1;

     label5:
        $r5 := @caughtexception;

        interfaceinvoke $r3.<android.database.Cursor: void close()>();

        throw $r5;

     label6:
        interfaceinvoke $r3.<android.database.Cursor: void close()>();

        return r2;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }
    public org.gnucash.android.model.Money getBalance(java.lang.String, java.lang.String)
    {
        org.gnucash.android.db.TransactionsDbAdapter r0;
        java.lang.String $r1, $r2;
        org.gnucash.android.db.SplitsDbAdapter $r3;
        java.util.List $r4;
        org.gnucash.android.model.Money $r5;

        r0 := @this: org.gnucash.android.db.TransactionsDbAdapter;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.gnucash.android.db.TransactionsDbAdapter: org.gnucash.android.db.SplitsDbAdapter mSplitsDbAdapter>;

        $r4 = virtualinvoke $r3.<org.gnucash.android.db.SplitsDbAdapter: java.util.List getSplitsForTransactionInAccount(java.lang.String,java.lang.String)>($r1, $r2);

        $r5 = staticinvoke <org.gnucash.android.model.Transaction: org.gnucash.android.model.Money computeBalance(java.lang.String,java.util.List)>($r2, $r4);

        return $r5;
    }
    public int getNumCurrencies(java.lang.String)
    {
        org.gnucash.android.db.TransactionsDbAdapter r0;
        java.lang.String $r1;
        java.lang.String[] $r2, $r4;
        android.database.sqlite.SQLiteDatabase $r3;
        android.database.Cursor $r5;
        int i0;
        boolean $z0;
        java.lang.Throwable $r6;

        r0 := @this: org.gnucash.android.db.TransactionsDbAdapter;

        $r1 := @parameter0: java.lang.String;

        $r3 = r0.<org.gnucash.android.db.TransactionsDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        $r2 = newarray (java.lang.String)[1];

        $r2[0] = "trans_currency_count";

        $r4 = newarray (java.lang.String)[1];

        $r4[0] = $r1;

        $r5 = virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("trans_extra_info", $r2, "trans_acct_t_uid=?", $r4, null, null, null);

        i0 = 0;

     label1:
        $z0 = interfaceinvoke $r5.<android.database.Cursor: boolean moveToFirst()>();

     label2:
        if $z0 == 0 goto label4;

     label3:
        i0 = interfaceinvoke $r5.<android.database.Cursor: int getInt(int)>(0);

     label4:
        interfaceinvoke $r5.<android.database.Cursor: void close()>();

        return i0;

     label5:
        $r6 := @caughtexception;

        interfaceinvoke $r5.<android.database.Cursor: void close()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }
    public long getRecordsCount()
    {
        org.gnucash.android.db.TransactionsDbAdapter r0;
        android.database.sqlite.SQLiteDatabase $r1;
        android.database.Cursor $r2;
        long $l0;
        java.lang.Throwable $r3;

        r0 := @this: org.gnucash.android.db.TransactionsDbAdapter;

        $r1 = r0.<org.gnucash.android.db.TransactionsDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        $r2 = virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[])>("SELECT COUNT(*) FROM transactions WHERE is_template =0", null);

     label1:
        interfaceinvoke $r2.<android.database.Cursor: boolean moveToFirst()>();

        $l0 = interfaceinvoke $r2.<android.database.Cursor: long getLong(int)>(0);

     label2:
        interfaceinvoke $r2.<android.database.Cursor: void close()>();

        return $l0;

     label3:
        $r3 := @caughtexception;

        interfaceinvoke $r2.<android.database.Cursor: void close()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public long getRecordsCount(java.lang.String, java.lang.String[])
    {
        org.gnucash.android.db.TransactionsDbAdapter r0;
        java.lang.String $r1;
        java.lang.String[] $r2, $r3;
        android.database.sqlite.SQLiteDatabase $r4;
        android.database.Cursor $r5;
        long $l0;
        java.lang.Throwable $r6;

        r0 := @this: org.gnucash.android.db.TransactionsDbAdapter;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String[];

        $r4 = r0.<org.gnucash.android.db.TransactionsDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        $r3 = newarray (java.lang.String)[1];

        $r3[0] = "COUNT(*)";

        $r5 = virtualinvoke $r4.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(1, "transactions , trans_extra_info ON transactions.uid = trans_extra_info.trans_acct_t_uid", $r3, $r1, $r2, null, null, null, null);

     label1:
        interfaceinvoke $r5.<android.database.Cursor: boolean moveToFirst()>();

        $l0 = interfaceinvoke $r5.<android.database.Cursor: long getLong(int)>(0);

     label2:
        interfaceinvoke $r5.<android.database.Cursor: void close()>();

        return $l0;

     label3:
        $r6 := @caughtexception;

        interfaceinvoke $r5.<android.database.Cursor: void close()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public java.util.List getScheduledTransactionsForAccount(java.lang.String)
    {
        org.gnucash.android.db.TransactionsDbAdapter r0;
        java.lang.String $r1;
        java.util.ArrayList r2;
        android.database.Cursor $r3;
        boolean $z0;
        org.gnucash.android.model.Transaction $r4;
        java.lang.Throwable $r5;

        r0 := @this: org.gnucash.android.db.TransactionsDbAdapter;

        $r1 := @parameter0: java.lang.String;

        $r3 = virtualinvoke r0.<org.gnucash.android.db.TransactionsDbAdapter: android.database.Cursor fetchScheduledTransactionsForAccount(java.lang.String)>($r1);

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

     label1:
        $z0 = interfaceinvoke $r3.<android.database.Cursor: boolean moveToNext()>();

     label2:
        if $z0 == 0 goto label6;

     label3:
        $r4 = virtualinvoke r0.<org.gnucash.android.db.TransactionsDbAdapter: org.gnucash.android.model.Transaction buildModelInstance(android.database.Cursor)>($r3);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r4);

     label4:
        goto label1;

     label5:
        $r5 := @caughtexception;

        interfaceinvoke $r3.<android.database.Cursor: void close()>();

        throw $r5;

     label6:
        interfaceinvoke $r3.<android.database.Cursor: void close()>();

        return r2;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }
    public long getSplitCount(java.lang.String)
    {
        org.gnucash.android.db.TransactionsDbAdapter r0;
        java.lang.String $r1;
        java.lang.StringBuilder $r2;
        android.database.sqlite.SQLiteDatabase $r3;
        android.database.sqlite.SQLiteStatement $r4;
        long $l0;

        r0 := @this: org.gnucash.android.db.TransactionsDbAdapter;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        return 0L;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT COUNT(*) FROM splits WHERE transaction_uid= \'");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r3 = r0.<org.gnucash.android.db.TransactionsDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        $r4 = virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)>($r1);

        $l0 = virtualinvoke $r4.<android.database.sqlite.SQLiteStatement: long simpleQueryForLong()>();

        return $l0;
    }
    public org.gnucash.android.db.SplitsDbAdapter getSplitDbAdapter()
    {
        org.gnucash.android.db.TransactionsDbAdapter r0;
        org.gnucash.android.db.SplitsDbAdapter r1;

        r0 := @this: org.gnucash.android.db.TransactionsDbAdapter;

        r1 = r0.<org.gnucash.android.db.TransactionsDbAdapter: org.gnucash.android.db.SplitsDbAdapter mSplitsDbAdapter>;

        return r1;
    }
    public long getTemplateTransactionsCount()
    {
        org.gnucash.android.db.TransactionsDbAdapter r0;
        android.database.sqlite.SQLiteDatabase $r1;
        android.database.sqlite.SQLiteStatement $r2;
        long $l0;

        r0 := @this: org.gnucash.android.db.TransactionsDbAdapter;

        $r1 = r0.<org.gnucash.android.db.TransactionsDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        $r2 = virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)>("SELECT COUNT(*) FROM transactions WHERE is_template=1");

        $l0 = virtualinvoke $r2.<android.database.sqlite.SQLiteStatement: long simpleQueryForLong()>();

        return $l0;
    }
    public long getTimestampOfEarliestTransaction(org.gnucash.android.model.AccountType, java.lang.String)
    {
        org.gnucash.android.db.TransactionsDbAdapter r0;
        org.gnucash.android.model.AccountType $r1;
        java.lang.String $r2;
        long $l0;

        r0 := @this: org.gnucash.android.db.TransactionsDbAdapter;

        $r1 := @parameter0: org.gnucash.android.model.AccountType;

        $r2 := @parameter1: java.lang.String;

        $l0 = specialinvoke r0.<org.gnucash.android.db.TransactionsDbAdapter: long getTimestamp(java.lang.String,org.gnucash.android.model.AccountType,java.lang.String)>("MIN", $r1, $r2);

        return $l0;
    }
    public java.sql.Timestamp getTimestampOfLastModification()
    {
        org.gnucash.android.db.TransactionsDbAdapter r0;
        android.database.sqlite.SQLiteDatabase $r1;
        java.lang.String[] $r2;
        android.database.Cursor $r3;
        java.sql.Timestamp r4;
        long $l0;
        boolean $z0;
        java.lang.String $r5;

        r0 := @this: org.gnucash.android.db.TransactionsDbAdapter;

        $r1 = r0.<org.gnucash.android.db.TransactionsDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        $r2 = newarray (java.lang.String)[1];

        $r2[0] = "MAX(modified_at)";

        $r3 = virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("transactions", $r2, null, null, null, null, null);

        r4 = new java.sql.Timestamp;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        specialinvoke r4.<java.sql.Timestamp: void <init>(long)>($l0);

        $z0 = interfaceinvoke $r3.<android.database.Cursor: boolean moveToFirst()>();

        if $z0 == 0 goto label1;

        $r5 = interfaceinvoke $r3.<android.database.Cursor: java.lang.String getString(int)>(0);

        if $r5 == null goto label1;

        r4 = staticinvoke <java.sql.Timestamp: java.sql.Timestamp valueOf(java.lang.String)>($r5);

     label1:
        interfaceinvoke $r3.<android.database.Cursor: void close()>();

        return r4;
    }
    public long getTimestampOfLatestTransaction(org.gnucash.android.model.AccountType, java.lang.String)
    {
        org.gnucash.android.db.TransactionsDbAdapter r0;
        org.gnucash.android.model.AccountType $r1;
        java.lang.String $r2;
        long $l0;

        r0 := @this: org.gnucash.android.db.TransactionsDbAdapter;

        $r1 := @parameter0: org.gnucash.android.model.AccountType;

        $r2 := @parameter1: java.lang.String;

        $l0 = specialinvoke r0.<org.gnucash.android.db.TransactionsDbAdapter: long getTimestamp(java.lang.String,org.gnucash.android.model.AccountType,java.lang.String)>("MAX", $r1, $r2);

        return $l0;
    }
    public int getTransactionsCount(long)
    {
        org.gnucash.android.db.TransactionsDbAdapter r0;
        long $l0;
        android.database.Cursor $r1;
        int $i1;
        java.lang.Throwable $r2;

        r0 := @this: org.gnucash.android.db.TransactionsDbAdapter;

        $l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<org.gnucash.android.db.TransactionsDbAdapter: android.database.Cursor fetchAllTransactionsForAccount(long)>($l0);

     label1:
        $i1 = interfaceinvoke $r1.<android.database.Cursor: int getCount()>();

     label2:
        interfaceinvoke $r1.<android.database.Cursor: void close()>();

        return $i1;

     label3:
        $r2 := @caughtexception;

        interfaceinvoke $r1.<android.database.Cursor: void close()>();

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public int getTransactionsCount(java.lang.String)
    {
        org.gnucash.android.db.TransactionsDbAdapter r0;
        java.lang.String $r1;
        android.database.Cursor $r2;
        int $i0;

        r0 := @this: org.gnucash.android.db.TransactionsDbAdapter;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.gnucash.android.db.TransactionsDbAdapter: android.database.Cursor fetchAllTransactionsForAccount(java.lang.String)>($r1);

        if $r2 != null goto label1;

        return 0;

     label1:
        $i0 = interfaceinvoke $r2.<android.database.Cursor: int getCount()>();

        interfaceinvoke $r2.<android.database.Cursor: void close()>();

        return $i0;
    }
    public int moveTransaction(java.lang.String, java.lang.String, java.lang.String)
    {
        org.gnucash.android.db.TransactionsDbAdapter r0;
        java.lang.String $r1, $r2, $r3, $r4, $r6;
        java.lang.StringBuilder $r5;
        org.gnucash.android.db.SplitsDbAdapter $r7;
        java.util.List $r8;
        java.util.Iterator $r9;
        boolean $z0;
        java.lang.Object $r10;
        org.gnucash.android.model.Split r11;
        int $i0;

        r0 := @this: org.gnucash.android.db.TransactionsDbAdapter;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 = r0.<org.gnucash.android.db.TransactionsDbAdapter: java.lang.String LOG_TAG>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Moving transaction ID ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" splits from ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to account ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>($r4, $r6);

        $r7 = r0.<org.gnucash.android.db.TransactionsDbAdapter: org.gnucash.android.db.SplitsDbAdapter mSplitsDbAdapter>;

        $r8 = virtualinvoke $r7.<org.gnucash.android.db.SplitsDbAdapter: java.util.List getSplitsForTransactionInAccount(java.lang.String,java.lang.String)>($r1, $r2);

        $r9 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r11 = (org.gnucash.android.model.Split) $r10;

        virtualinvoke r11.<org.gnucash.android.model.Split: void setAccountUID(java.lang.String)>($r3);

        goto label1;

     label2:
        $r7 = r0.<org.gnucash.android.db.TransactionsDbAdapter: org.gnucash.android.db.SplitsDbAdapter mSplitsDbAdapter>;

        virtualinvoke $r7.<org.gnucash.android.db.SplitsDbAdapter: long bulkAddRecords(java.util.List)>($r8);

        $i0 = interfaceinvoke $r8.<java.util.List: int size()>();

        return $i0;
    }
    public int updateTransaction(android.content.ContentValues, java.lang.String, java.lang.String[])
    {
        org.gnucash.android.db.TransactionsDbAdapter r0;
        android.content.ContentValues $r1;
        java.lang.String $r2;
        java.lang.String[] $r3;
        int $i0;
        android.database.sqlite.SQLiteDatabase $r4;

        r0 := @this: org.gnucash.android.db.TransactionsDbAdapter;

        $r1 := @parameter0: android.content.ContentValues;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String[];

        $r4 = r0.<org.gnucash.android.db.TransactionsDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        $i0 = virtualinvoke $r4.<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>("transactions", $r1, $r2, $r3);

        return $i0;
    }
