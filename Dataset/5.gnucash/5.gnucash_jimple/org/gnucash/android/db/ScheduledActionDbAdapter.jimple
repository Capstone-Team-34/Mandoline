org.gnucash.android.db.ScheduledActionDbAdapter extends org.gnucash.android.db.DatabaseAdapter
    public void <init>(android.database.sqlite.SQLiteDatabase)
    {
        org.gnucash.android.db.ScheduledActionDbAdapter r0;
        android.database.sqlite.SQLiteDatabase $r1;

        r0 := @this: org.gnucash.android.db.ScheduledActionDbAdapter;

        $r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        specialinvoke r0.<org.gnucash.android.db.DatabaseAdapter: void <init>(android.database.sqlite.SQLiteDatabase,java.lang.String)>($r1, "scheduled_actions");

        r0.<org.gnucash.android.db.ScheduledActionDbAdapter: java.lang.String LOG_TAG> = "ScheduledActionDbAdapter";

        return;
    }
    public static org.gnucash.android.db.ScheduledActionDbAdapter getInstance()
    {
        org.gnucash.android.db.ScheduledActionDbAdapter $r0;

        $r0 = staticinvoke <org.gnucash.android.app.GnuCashApplication: org.gnucash.android.db.ScheduledActionDbAdapter getScheduledEventDbAdapter()>();

        return $r0;
    }
    public volatile org.gnucash.android.model.BaseModel buildModelInstance(android.database.Cursor)
    {
        org.gnucash.android.db.ScheduledActionDbAdapter r0;
        android.database.Cursor $r1;
        org.gnucash.android.model.ScheduledAction $r2;

        r0 := @this: org.gnucash.android.db.ScheduledActionDbAdapter;

        $r1 := @parameter0: android.database.Cursor;

        $r2 = virtualinvoke r0.<org.gnucash.android.db.ScheduledActionDbAdapter: org.gnucash.android.model.ScheduledAction buildModelInstance(android.database.Cursor)>($r1);

        return $r2;
    }
    public org.gnucash.android.model.ScheduledAction buildModelInstance(android.database.Cursor)
    {
        org.gnucash.android.db.ScheduledActionDbAdapter r0;
        android.database.Cursor $r1;
        org.gnucash.android.model.ScheduledAction r2;
        int $i0, $i5;
        java.lang.String $r3, $r4, $r5;
        long $l1, $l2, $l3, $l4;
        boolean z0;
        org.gnucash.android.model.ScheduledAction$ActionType $r6;

        r0 := @this: org.gnucash.android.db.ScheduledActionDbAdapter;

        $r1 := @parameter0: android.database.Cursor;

        $i0 = interfaceinvoke $r1.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("action_uid");

        $r3 = interfaceinvoke $r1.<android.database.Cursor: java.lang.String getString(int)>($i0);

        $i0 = interfaceinvoke $r1.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("period");

        $l1 = interfaceinvoke $r1.<android.database.Cursor: long getLong(int)>($i0);

        $i0 = interfaceinvoke $r1.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("start_time");

        $l2 = interfaceinvoke $r1.<android.database.Cursor: long getLong(int)>($i0);

        $i0 = interfaceinvoke $r1.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("end_time");

        $l3 = interfaceinvoke $r1.<android.database.Cursor: long getLong(int)>($i0);

        $i0 = interfaceinvoke $r1.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("last_run");

        $l4 = interfaceinvoke $r1.<android.database.Cursor: long getLong(int)>($i0);

        $i0 = interfaceinvoke $r1.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("type");

        $r4 = interfaceinvoke $r1.<android.database.Cursor: java.lang.String getString(int)>($i0);

        $i0 = interfaceinvoke $r1.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("tag");

        $r5 = interfaceinvoke $r1.<android.database.Cursor: java.lang.String getString(int)>($i0);

        $i0 = interfaceinvoke $r1.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("is_enabled");

        $i0 = interfaceinvoke $r1.<android.database.Cursor: int getInt(int)>($i0);

        if $i0 <= 0 goto label2;

        z0 = 1;

     label1:
        $i0 = interfaceinvoke $r1.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("total_frequency");

        $i0 = interfaceinvoke $r1.<android.database.Cursor: int getInt(int)>($i0);

        $i5 = interfaceinvoke $r1.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("execution_count");

        $i5 = interfaceinvoke $r1.<android.database.Cursor: int getInt(int)>($i5);

        r2 = new org.gnucash.android.model.ScheduledAction;

        $r6 = staticinvoke <org.gnucash.android.model.ScheduledAction$ActionType: org.gnucash.android.model.ScheduledAction$ActionType valueOf(java.lang.String)>($r4);

        specialinvoke r2.<org.gnucash.android.model.ScheduledAction: void <init>(org.gnucash.android.model.ScheduledAction$ActionType)>($r6);

        virtualinvoke r0.<org.gnucash.android.db.ScheduledActionDbAdapter: void populateBaseModelAttributes(android.database.Cursor,org.gnucash.android.model.BaseModel)>($r1, r2);

        virtualinvoke r2.<org.gnucash.android.model.ScheduledAction: void setPeriod(long)>($l1);

        virtualinvoke r2.<org.gnucash.android.model.ScheduledAction: void setStartTime(long)>($l2);

        virtualinvoke r2.<org.gnucash.android.model.ScheduledAction: void setEndTime(long)>($l3);

        virtualinvoke r2.<org.gnucash.android.model.ScheduledAction: void setActionUID(java.lang.String)>($r3);

        virtualinvoke r2.<org.gnucash.android.model.ScheduledAction: void setLastRun(long)>($l4);

        virtualinvoke r2.<org.gnucash.android.model.ScheduledAction: void setTag(java.lang.String)>($r5);

        virtualinvoke r2.<org.gnucash.android.model.ScheduledAction: void setEnabled(boolean)>(z0);

        virtualinvoke r2.<org.gnucash.android.model.ScheduledAction: void setTotalFrequency(int)>($i0);

        virtualinvoke r2.<org.gnucash.android.model.ScheduledAction: void setExecutionCount(int)>($i5);

        return r2;

     label2:
        z0 = 0;

        goto label1;
    }
    protected volatile android.database.sqlite.SQLiteStatement compileReplaceStatement(org.gnucash.android.model.BaseModel)
    {
        org.gnucash.android.db.ScheduledActionDbAdapter r0;
        android.database.sqlite.SQLiteStatement $r1;
        org.gnucash.android.model.BaseModel $r2;
        org.gnucash.android.model.ScheduledAction $r3;

        r0 := @this: org.gnucash.android.db.ScheduledActionDbAdapter;

        $r2 := @parameter0: org.gnucash.android.model.BaseModel;

        $r3 = (org.gnucash.android.model.ScheduledAction) $r2;

        $r1 = virtualinvoke r0.<org.gnucash.android.db.ScheduledActionDbAdapter: android.database.sqlite.SQLiteStatement compileReplaceStatement(org.gnucash.android.model.ScheduledAction)>($r3);

        return $r1;
    }
    protected android.database.sqlite.SQLiteStatement compileReplaceStatement(org.gnucash.android.model.ScheduledAction)
    {
        org.gnucash.android.db.ScheduledActionDbAdapter r0;
        org.gnucash.android.model.ScheduledAction $r1;
        android.database.sqlite.SQLiteStatement $r2;
        android.database.sqlite.SQLiteDatabase $r3;
        java.lang.String $r4;
        org.gnucash.android.model.ScheduledAction$ActionType $r5;
        long $l0;
        boolean $z0;
        java.sql.Timestamp $r6;
        int $i1;

        r0 := @this: org.gnucash.android.db.ScheduledActionDbAdapter;

        $r1 := @parameter0: org.gnucash.android.model.ScheduledAction;

        $r2 = r0.<org.gnucash.android.db.ScheduledActionDbAdapter: android.database.sqlite.SQLiteStatement mReplaceStatement>;

        if $r2 != null goto label1;

        $r3 = r0.<org.gnucash.android.db.ScheduledActionDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        $r2 = virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)>("REPLACE INTO scheduled_actions ( uid , action_uid , type , start_time , end_time , last_run , period , is_enabled , created_at , tag , total_frequency , execution_count ) VALUES ( ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? )");

        r0.<org.gnucash.android.db.ScheduledActionDbAdapter: android.database.sqlite.SQLiteStatement mReplaceStatement> = $r2;

     label1:
        $r2 = r0.<org.gnucash.android.db.ScheduledActionDbAdapter: android.database.sqlite.SQLiteStatement mReplaceStatement>;

        virtualinvoke $r2.<android.database.sqlite.SQLiteStatement: void clearBindings()>();

        $r2 = r0.<org.gnucash.android.db.ScheduledActionDbAdapter: android.database.sqlite.SQLiteStatement mReplaceStatement>;

        $r4 = virtualinvoke $r1.<org.gnucash.android.model.ScheduledAction: java.lang.String getUID()>();

        virtualinvoke $r2.<android.database.sqlite.SQLiteStatement: void bindString(int,java.lang.String)>(1, $r4);

        $r2 = r0.<org.gnucash.android.db.ScheduledActionDbAdapter: android.database.sqlite.SQLiteStatement mReplaceStatement>;

        $r4 = virtualinvoke $r1.<org.gnucash.android.model.ScheduledAction: java.lang.String getActionUID()>();

        virtualinvoke $r2.<android.database.sqlite.SQLiteStatement: void bindString(int,java.lang.String)>(2, $r4);

        $r2 = r0.<org.gnucash.android.db.ScheduledActionDbAdapter: android.database.sqlite.SQLiteStatement mReplaceStatement>;

        $r5 = virtualinvoke $r1.<org.gnucash.android.model.ScheduledAction: org.gnucash.android.model.ScheduledAction$ActionType getActionType()>();

        $r4 = virtualinvoke $r5.<org.gnucash.android.model.ScheduledAction$ActionType: java.lang.String name()>();

        virtualinvoke $r2.<android.database.sqlite.SQLiteStatement: void bindString(int,java.lang.String)>(3, $r4);

        $r2 = r0.<org.gnucash.android.db.ScheduledActionDbAdapter: android.database.sqlite.SQLiteStatement mReplaceStatement>;

        $l0 = virtualinvoke $r1.<org.gnucash.android.model.ScheduledAction: long getStartTime()>();

        virtualinvoke $r2.<android.database.sqlite.SQLiteStatement: void bindLong(int,long)>(4, $l0);

        $r2 = r0.<org.gnucash.android.db.ScheduledActionDbAdapter: android.database.sqlite.SQLiteStatement mReplaceStatement>;

        $l0 = virtualinvoke $r1.<org.gnucash.android.model.ScheduledAction: long getEndTime()>();

        virtualinvoke $r2.<android.database.sqlite.SQLiteStatement: void bindLong(int,long)>(5, $l0);

        $r2 = r0.<org.gnucash.android.db.ScheduledActionDbAdapter: android.database.sqlite.SQLiteStatement mReplaceStatement>;

        $l0 = virtualinvoke $r1.<org.gnucash.android.model.ScheduledAction: long getLastRun()>();

        virtualinvoke $r2.<android.database.sqlite.SQLiteStatement: void bindLong(int,long)>(6, $l0);

        $r2 = r0.<org.gnucash.android.db.ScheduledActionDbAdapter: android.database.sqlite.SQLiteStatement mReplaceStatement>;

        $l0 = virtualinvoke $r1.<org.gnucash.android.model.ScheduledAction: long getPeriod()>();

        virtualinvoke $r2.<android.database.sqlite.SQLiteStatement: void bindLong(int,long)>(7, $l0);

        $r2 = r0.<org.gnucash.android.db.ScheduledActionDbAdapter: android.database.sqlite.SQLiteStatement mReplaceStatement>;

        $z0 = virtualinvoke $r1.<org.gnucash.android.model.ScheduledAction: boolean isEnabled()>();

        if $z0 == 0 goto label4;

        $l0 = 1L;

     label2:
        virtualinvoke $r2.<android.database.sqlite.SQLiteStatement: void bindLong(int,long)>(8, $l0);

        $r2 = r0.<org.gnucash.android.db.ScheduledActionDbAdapter: android.database.sqlite.SQLiteStatement mReplaceStatement>;

        $r6 = virtualinvoke $r1.<org.gnucash.android.model.ScheduledAction: java.sql.Timestamp getCreatedTimestamp()>();

        $r4 = virtualinvoke $r6.<java.sql.Timestamp: java.lang.String toString()>();

        virtualinvoke $r2.<android.database.sqlite.SQLiteStatement: void bindString(int,java.lang.String)>(9, $r4);

        $r4 = virtualinvoke $r1.<org.gnucash.android.model.ScheduledAction: java.lang.String getTag()>();

        if $r4 != null goto label5;

        $r2 = r0.<org.gnucash.android.db.ScheduledActionDbAdapter: android.database.sqlite.SQLiteStatement mReplaceStatement>;

        virtualinvoke $r2.<android.database.sqlite.SQLiteStatement: void bindNull(int)>(10);

     label3:
        $r2 = r0.<org.gnucash.android.db.ScheduledActionDbAdapter: android.database.sqlite.SQLiteStatement mReplaceStatement>;

        $i1 = virtualinvoke $r1.<org.gnucash.android.model.ScheduledAction: int getTotalFrequency()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i1);

        virtualinvoke $r2.<android.database.sqlite.SQLiteStatement: void bindString(int,java.lang.String)>(11, $r4);

        $r2 = r0.<org.gnucash.android.db.ScheduledActionDbAdapter: android.database.sqlite.SQLiteStatement mReplaceStatement>;

        $i1 = virtualinvoke $r1.<org.gnucash.android.model.ScheduledAction: int getExecutionCount()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i1);

        virtualinvoke $r2.<android.database.sqlite.SQLiteStatement: void bindString(int,java.lang.String)>(12, $r4);

        $r2 = r0.<org.gnucash.android.db.ScheduledActionDbAdapter: android.database.sqlite.SQLiteStatement mReplaceStatement>;

        return $r2;

     label4:
        $l0 = 0L;

        goto label2;

     label5:
        $r2 = r0.<org.gnucash.android.db.ScheduledActionDbAdapter: android.database.sqlite.SQLiteStatement mReplaceStatement>;

        $r4 = virtualinvoke $r1.<org.gnucash.android.model.ScheduledAction: java.lang.String getTag()>();

        virtualinvoke $r2.<android.database.sqlite.SQLiteStatement: void bindString(int,java.lang.String)>(10, $r4);

        goto label3;
    }
    public long getActionInstanceCount(java.lang.String)
    {
        org.gnucash.android.db.ScheduledActionDbAdapter r0;
        java.lang.String $r1;
        android.database.sqlite.SQLiteDatabase $r2;
        android.database.sqlite.SQLiteStatement $r3;
        long $l0;

        r0 := @this: org.gnucash.android.db.ScheduledActionDbAdapter;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.gnucash.android.db.ScheduledActionDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        $r3 = virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)>("SELECT COUNT(*) FROM transactions WHERE scheduled_action_uid=?");

        virtualinvoke $r3.<android.database.sqlite.SQLiteStatement: void bindString(int,java.lang.String)>(1, $r1);

        $l0 = virtualinvoke $r3.<android.database.sqlite.SQLiteStatement: long simpleQueryForLong()>();

        return $l0;
    }
    public java.util.List getAllEnabledScheduledActions()
    {
        org.gnucash.android.db.ScheduledActionDbAdapter r0;
        java.lang.String $r1;
        java.util.ArrayList r2;
        android.database.sqlite.SQLiteDatabase $r3;
        android.database.Cursor $r4;
        boolean $z0;
        org.gnucash.android.model.ScheduledAction $r5;

        r0 := @this: org.gnucash.android.db.ScheduledActionDbAdapter;

        $r3 = r0.<org.gnucash.android.db.ScheduledActionDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        $r1 = r0.<org.gnucash.android.db.ScheduledActionDbAdapter: java.lang.String mTableName>;

        $r4 = virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>($r1, null, "is_enabled=1", null, null, null, null);

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

     label1:
        $z0 = interfaceinvoke $r4.<android.database.Cursor: boolean moveToNext()>();

        if $z0 == 0 goto label2;

        $r5 = virtualinvoke r0.<org.gnucash.android.db.ScheduledActionDbAdapter: org.gnucash.android.model.ScheduledAction buildModelInstance(android.database.Cursor)>($r4);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r5);

        goto label1;

     label2:
        return r2;
    }
    public java.util.List getScheduledActionsWithUID(java.lang.String)
    {
        org.gnucash.android.db.ScheduledActionDbAdapter r0;
        java.lang.String $r1;
        java.util.ArrayList r2;
        android.database.sqlite.SQLiteDatabase $r3;
        java.lang.String[] $r4;
        android.database.Cursor $r5;
        boolean $z0;
        org.gnucash.android.model.ScheduledAction $r6;
        java.lang.Throwable $r7;

        r0 := @this: org.gnucash.android.db.ScheduledActionDbAdapter;

        $r1 := @parameter0: java.lang.String;

        $r3 = r0.<org.gnucash.android.db.ScheduledActionDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        $r4 = newarray (java.lang.String)[1];

        $r4[0] = $r1;

        $r5 = virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("scheduled_actions", null, "action_uid= ?", $r4, null, null, null);

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

     label1:
        $z0 = interfaceinvoke $r5.<android.database.Cursor: boolean moveToNext()>();

     label2:
        if $z0 == 0 goto label6;

     label3:
        $r6 = virtualinvoke r0.<org.gnucash.android.db.ScheduledActionDbAdapter: org.gnucash.android.model.ScheduledAction buildModelInstance(android.database.Cursor)>($r5);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r6);

     label4:
        goto label1;

     label5:
        $r7 := @caughtexception;

        interfaceinvoke $r5.<android.database.Cursor: void close()>();

        throw $r7;

     label6:
        interfaceinvoke $r5.<android.database.Cursor: void close()>();

        return r2;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }
    public long updateRecurrenceAttributes(org.gnucash.android.model.ScheduledAction)
    {
        org.gnucash.android.db.ScheduledActionDbAdapter r0;
        org.gnucash.android.model.ScheduledAction $r1;
        android.content.ContentValues r2;
        java.lang.String[] r3;
        long $l0;
        java.lang.Long $r4;
        java.lang.String $r5;
        int $i1;
        java.lang.Integer $r6;
        android.database.sqlite.SQLiteDatabase $r7;

        r0 := @this: org.gnucash.android.db.ScheduledActionDbAdapter;

        $r1 := @parameter0: org.gnucash.android.model.ScheduledAction;

        r2 = new android.content.ContentValues;

        specialinvoke r2.<android.content.ContentValues: void <init>()>();

        virtualinvoke r0.<org.gnucash.android.db.ScheduledActionDbAdapter: android.content.ContentValues populateBaseModelAttributes(android.content.ContentValues,org.gnucash.android.model.BaseModel)>(r2, $r1);

        $l0 = virtualinvoke $r1.<org.gnucash.android.model.ScheduledAction: long getPeriod()>();

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        virtualinvoke r2.<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>("period", $r4);

        $l0 = virtualinvoke $r1.<org.gnucash.android.model.ScheduledAction: long getStartTime()>();

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        virtualinvoke r2.<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>("start_time", $r4);

        $l0 = virtualinvoke $r1.<org.gnucash.android.model.ScheduledAction: long getEndTime()>();

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        virtualinvoke r2.<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>("end_time", $r4);

        $r5 = virtualinvoke $r1.<org.gnucash.android.model.ScheduledAction: java.lang.String getTag()>();

        virtualinvoke r2.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("tag", $r5);

        $i1 = virtualinvoke $r1.<org.gnucash.android.model.ScheduledAction: int getTotalFrequency()>();

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        virtualinvoke r2.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("total_frequency", $r6);

        $r5 = r0.<org.gnucash.android.db.ScheduledActionDbAdapter: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r5, "Updating scheduled event recurrence attributes");

        r3 = newarray (java.lang.String)[1];

        $r5 = virtualinvoke $r1.<org.gnucash.android.model.ScheduledAction: java.lang.String getUID()>();

        r3[0] = $r5;

        $r7 = r0.<org.gnucash.android.db.ScheduledActionDbAdapter: android.database.sqlite.SQLiteDatabase mDb>;

        $i1 = virtualinvoke $r7.<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>("scheduled_actions", r2, "uid=?", r3);

        $l0 = (long) $i1;

        return $l0;
    }
