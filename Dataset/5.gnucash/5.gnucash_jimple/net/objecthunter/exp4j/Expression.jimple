net.objecthunter.exp4j.Expression extends java.lang.Object
private final net.objecthunter.exp4j.tokenizer.Token[] tokens
private final java.util.Set userFunctionNames
private final java.util.Map variables
    void <init>(net.objecthunter.exp4j.tokenizer.Token[])
    {
        net.objecthunter.exp4j.Expression r0;
        net.objecthunter.exp4j.tokenizer.Token[] $r1;
        java.util.Set $r2;
        java.util.HashMap $r3;

        r0 := @this: net.objecthunter.exp4j.Expression;

        $r1 := @parameter0: net.objecthunter.exp4j.tokenizer.Token[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.objecthunter.exp4j.Expression: net.objecthunter.exp4j.tokenizer.Token[] tokens> = $r1;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>(int)>(4);

        r0.<net.objecthunter.exp4j.Expression: java.util.Map variables> = $r3;

        $r2 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

        r0.<net.objecthunter.exp4j.Expression: java.util.Set userFunctionNames> = $r2;

        return;
    }
    void <init>(net.objecthunter.exp4j.tokenizer.Token[], java.util.Set)
    {
        net.objecthunter.exp4j.Expression r0;
        net.objecthunter.exp4j.tokenizer.Token[] $r1;
        java.util.Set r2;
        java.util.HashMap $r3;

        r0 := @this: net.objecthunter.exp4j.Expression;

        $r1 := @parameter0: net.objecthunter.exp4j.tokenizer.Token[];

        r2 := @parameter1: java.util.Set;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.objecthunter.exp4j.Expression: net.objecthunter.exp4j.tokenizer.Token[] tokens> = $r1;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>(int)>(4);

        r0.<net.objecthunter.exp4j.Expression: java.util.Map variables> = $r3;

        r0.<net.objecthunter.exp4j.Expression: java.util.Set userFunctionNames> = r2;

        return;
    }
    private void checkVariableName(java.lang.String)
    {
        net.objecthunter.exp4j.Expression r0;
        java.lang.String $r1;
        java.util.Set $r2;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4;

        r0 := @this: net.objecthunter.exp4j.Expression;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<net.objecthunter.exp4j.Expression: java.util.Set userFunctionNames>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The setVariable name \'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is invalid. Since there exists a function with the same name");

        $r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r3;

     label1:
        return;
    }
    private double[] reverseInPlace(double[])
    {
        net.objecthunter.exp4j.Expression r0;
        double[] $r1;
        int i0, i1, $i2;
        double d0, $d1;

        r0 := @this: net.objecthunter.exp4j.Expression;

        $r1 := @parameter0: double[];

        i0 = lengthof $r1;

        i1 = 0;

     label1:
        $i2 = i0 / 2;

        if i1 >= $i2 goto label2;

        d0 = $r1[i1];

        $i2 = i0 - i1;

        $i2 = $i2 + -1;

        $d1 = $r1[$i2];

        $r1[i1] = $d1;

        $i2 = i0 - i1;

        $i2 = $i2 + -1;

        $r1[$i2] = d0;

        i1 = i1 + 1;

        goto label1;

     label2:
        return $r1;
    }
    public double evaluate()
    {
        net.objecthunter.exp4j.Expression r0;
        double[] r1;
        net.objecthunter.exp4j.ArrayStack r2;
        int i0, $i1, $i2;
        net.objecthunter.exp4j.tokenizer.Token[] $r3;
        net.objecthunter.exp4j.tokenizer.Token r4;
        net.objecthunter.exp4j.tokenizer.NumberToken r5;
        double $d0, $d1;
        net.objecthunter.exp4j.tokenizer.VariableToken r6;
        java.lang.String $r7;
        java.util.Map $r8;
        java.lang.Object $r9;
        java.lang.Double r10;
        java.lang.IllegalArgumentException $r11;
        java.lang.StringBuilder $r12;
        net.objecthunter.exp4j.tokenizer.OperatorToken r13;
        net.objecthunter.exp4j.operator.Operator $r14;
        net.objecthunter.exp4j.tokenizer.FunctionToken r15;
        net.objecthunter.exp4j.function.Function $r16;

        r0 := @this: net.objecthunter.exp4j.Expression;

        r2 = new net.objecthunter.exp4j.ArrayStack;

        specialinvoke r2.<net.objecthunter.exp4j.ArrayStack: void <init>()>();

        i0 = 0;

     label01:
        $r3 = r0.<net.objecthunter.exp4j.Expression: net.objecthunter.exp4j.tokenizer.Token[] tokens>;

        $i1 = lengthof $r3;

        if i0 >= $i1 goto label12;

        $r3 = r0.<net.objecthunter.exp4j.Expression: net.objecthunter.exp4j.tokenizer.Token[] tokens>;

        r4 = $r3[i0];

        $i1 = virtualinvoke r4.<net.objecthunter.exp4j.tokenizer.Token: int getType()>();

        if $i1 != 1 goto label03;

        r5 = (net.objecthunter.exp4j.tokenizer.NumberToken) r4;

        $d0 = virtualinvoke r5.<net.objecthunter.exp4j.tokenizer.NumberToken: double getValue()>();

        virtualinvoke r2.<net.objecthunter.exp4j.ArrayStack: void push(double)>($d0);

     label02:
        i0 = i0 + 1;

        goto label01;

     label03:
        $i1 = virtualinvoke r4.<net.objecthunter.exp4j.tokenizer.Token: int getType()>();

        if $i1 != 6 goto label05;

        r6 = (net.objecthunter.exp4j.tokenizer.VariableToken) r4;

        $r7 = virtualinvoke r6.<net.objecthunter.exp4j.tokenizer.VariableToken: java.lang.String getName()>();

        $r8 = r0.<net.objecthunter.exp4j.Expression: java.util.Map variables>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7);

        r10 = (java.lang.Double) $r9;

        if r10 != null goto label04;

        $r11 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No value has been set for the setVariable \'");

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'.");

        $r7 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r11;

     label04:
        $d0 = virtualinvoke r10.<java.lang.Double: double doubleValue()>();

        virtualinvoke r2.<net.objecthunter.exp4j.ArrayStack: void push(double)>($d0);

        goto label02;

     label05:
        $i1 = virtualinvoke r4.<net.objecthunter.exp4j.tokenizer.Token: int getType()>();

        if $i1 != 2 goto label08;

        r13 = (net.objecthunter.exp4j.tokenizer.OperatorToken) r4;

        $i1 = virtualinvoke r2.<net.objecthunter.exp4j.ArrayStack: int size()>();

        $r14 = virtualinvoke r13.<net.objecthunter.exp4j.tokenizer.OperatorToken: net.objecthunter.exp4j.operator.Operator getOperator()>();

        $i2 = virtualinvoke $r14.<net.objecthunter.exp4j.operator.Operator: int getNumOperands()>();

        if $i1 >= $i2 goto label06;

        $r11 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid number of operands available for \'");

        $r14 = virtualinvoke r13.<net.objecthunter.exp4j.tokenizer.OperatorToken: net.objecthunter.exp4j.operator.Operator getOperator()>();

        $r7 = virtualinvoke $r14.<net.objecthunter.exp4j.operator.Operator: java.lang.String getSymbol()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' operator");

        $r7 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r11;

     label06:
        $r14 = virtualinvoke r13.<net.objecthunter.exp4j.tokenizer.OperatorToken: net.objecthunter.exp4j.operator.Operator getOperator()>();

        $i1 = virtualinvoke $r14.<net.objecthunter.exp4j.operator.Operator: int getNumOperands()>();

        if $i1 != 2 goto label07;

        $d0 = virtualinvoke r2.<net.objecthunter.exp4j.ArrayStack: double pop()>();

        $d1 = virtualinvoke r2.<net.objecthunter.exp4j.ArrayStack: double pop()>();

        $r14 = virtualinvoke r13.<net.objecthunter.exp4j.tokenizer.OperatorToken: net.objecthunter.exp4j.operator.Operator getOperator()>();

        r1 = newarray (double)[2];

        r1[0] = $d1;

        r1[1] = $d0;

        $d0 = virtualinvoke $r14.<net.objecthunter.exp4j.operator.Operator: double apply(double[])>(r1);

        virtualinvoke r2.<net.objecthunter.exp4j.ArrayStack: void push(double)>($d0);

        goto label02;

     label07:
        $r14 = virtualinvoke r13.<net.objecthunter.exp4j.tokenizer.OperatorToken: net.objecthunter.exp4j.operator.Operator getOperator()>();

        $i1 = virtualinvoke $r14.<net.objecthunter.exp4j.operator.Operator: int getNumOperands()>();

        if $i1 != 1 goto label02;

        $d0 = virtualinvoke r2.<net.objecthunter.exp4j.ArrayStack: double pop()>();

        $r14 = virtualinvoke r13.<net.objecthunter.exp4j.tokenizer.OperatorToken: net.objecthunter.exp4j.operator.Operator getOperator()>();

        r1 = newarray (double)[1];

        r1[0] = $d0;

        $d0 = virtualinvoke $r14.<net.objecthunter.exp4j.operator.Operator: double apply(double[])>(r1);

        virtualinvoke r2.<net.objecthunter.exp4j.ArrayStack: void push(double)>($d0);

        goto label02;

     label08:
        $i1 = virtualinvoke r4.<net.objecthunter.exp4j.tokenizer.Token: int getType()>();

        if $i1 != 3 goto label02;

        r15 = (net.objecthunter.exp4j.tokenizer.FunctionToken) r4;

        $i1 = virtualinvoke r2.<net.objecthunter.exp4j.ArrayStack: int size()>();

        $r16 = virtualinvoke r15.<net.objecthunter.exp4j.tokenizer.FunctionToken: net.objecthunter.exp4j.function.Function getFunction()>();

        $i2 = virtualinvoke $r16.<net.objecthunter.exp4j.function.Function: int getNumArguments()>();

        if $i1 >= $i2 goto label09;

        $r11 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid number of arguments available for \'");

        $r16 = virtualinvoke r15.<net.objecthunter.exp4j.tokenizer.FunctionToken: net.objecthunter.exp4j.function.Function getFunction()>();

        $r7 = virtualinvoke $r16.<net.objecthunter.exp4j.function.Function: java.lang.String getName()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' function");

        $r7 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r11;

     label09:
        $r16 = virtualinvoke r15.<net.objecthunter.exp4j.tokenizer.FunctionToken: net.objecthunter.exp4j.function.Function getFunction()>();

        $i1 = virtualinvoke $r16.<net.objecthunter.exp4j.function.Function: int getNumArguments()>();

        r1 = newarray (double)[$i1];

        $i1 = 0;

     label10:
        $r16 = virtualinvoke r15.<net.objecthunter.exp4j.tokenizer.FunctionToken: net.objecthunter.exp4j.function.Function getFunction()>();

        $i2 = virtualinvoke $r16.<net.objecthunter.exp4j.function.Function: int getNumArguments()>();

        if $i1 >= $i2 goto label11;

        $d0 = virtualinvoke r2.<net.objecthunter.exp4j.ArrayStack: double pop()>();

        r1[$i1] = $d0;

        $i1 = $i1 + 1;

        goto label10;

     label11:
        $r16 = virtualinvoke r15.<net.objecthunter.exp4j.tokenizer.FunctionToken: net.objecthunter.exp4j.function.Function getFunction()>();

        r1 = specialinvoke r0.<net.objecthunter.exp4j.Expression: double[] reverseInPlace(double[])>(r1);

        $d0 = virtualinvoke $r16.<net.objecthunter.exp4j.function.Function: double apply(double[])>(r1);

        virtualinvoke r2.<net.objecthunter.exp4j.ArrayStack: void push(double)>($d0);

        goto label02;

     label12:
        i0 = virtualinvoke r2.<net.objecthunter.exp4j.ArrayStack: int size()>();

        if i0 <= 1 goto label13;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid number of items on the output queue. Might be caused by an invalid number of arguments for a function.");

        throw $r11;

     label13:
        $d0 = virtualinvoke r2.<net.objecthunter.exp4j.ArrayStack: double pop()>();

        return $d0;
    }
    public java.util.concurrent.Future evaluateAsync(java.util.concurrent.ExecutorService)
    {
        net.objecthunter.exp4j.Expression r0;
        java.util.concurrent.ExecutorService $r1;
        java.util.concurrent.Future $r2;
        net.objecthunter.exp4j.Expression$1 $r3;

        r0 := @this: net.objecthunter.exp4j.Expression;

        $r1 := @parameter0: java.util.concurrent.ExecutorService;

        $r3 = new net.objecthunter.exp4j.Expression$1;

        specialinvoke $r3.<net.objecthunter.exp4j.Expression$1: void <init>(net.objecthunter.exp4j.Expression)>(r0);

        $r2 = interfaceinvoke $r1.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>($r3);

        return $r2;
    }
    public net.objecthunter.exp4j.Expression setVariable(java.lang.String, double)
    {
        net.objecthunter.exp4j.Expression r0;
        java.lang.String $r1;
        double $d0;
        java.util.Map $r2;
        java.lang.Double $r3;

        r0 := @this: net.objecthunter.exp4j.Expression;

        $r1 := @parameter0: java.lang.String;

        $d0 := @parameter1: double;

        specialinvoke r0.<net.objecthunter.exp4j.Expression: void checkVariableName(java.lang.String)>($r1);

        $r2 = r0.<net.objecthunter.exp4j.Expression: java.util.Map variables>;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r3);

        return r0;
    }
    public net.objecthunter.exp4j.Expression setVariables(java.util.Map)
    {
        net.objecthunter.exp4j.Expression r0;
        java.util.Map r1;
        java.util.Set $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        java.util.Map$Entry r5;
        java.lang.String $r6;
        java.lang.Double $r7;
        double $d0;

        r0 := @this: net.objecthunter.exp4j.Expression;

        r1 := @parameter0: java.util.Map;

        $r2 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r4 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r6 = (java.lang.String) $r4;

        $r4 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r7 = (java.lang.Double) $r4;

        $d0 = virtualinvoke $r7.<java.lang.Double: double doubleValue()>();

        virtualinvoke r0.<net.objecthunter.exp4j.Expression: net.objecthunter.exp4j.Expression setVariable(java.lang.String,double)>($r6, $d0);

        goto label1;

     label2:
        return r0;
    }
    public net.objecthunter.exp4j.ValidationResult validate()
    {
        net.objecthunter.exp4j.Expression r0;
        net.objecthunter.exp4j.ValidationResult $r1;

        r0 := @this: net.objecthunter.exp4j.Expression;

        $r1 = virtualinvoke r0.<net.objecthunter.exp4j.Expression: net.objecthunter.exp4j.ValidationResult validate(boolean)>(1);

        return $r1;
    }
    public net.objecthunter.exp4j.ValidationResult validate(boolean)
    {
        net.objecthunter.exp4j.Expression r0;
        boolean $z0;
        java.util.ArrayList r1;
        net.objecthunter.exp4j.tokenizer.Token[] r2;
        int i0, i1, $i2, $i3;
        net.objecthunter.exp4j.tokenizer.Token r3;
        net.objecthunter.exp4j.tokenizer.VariableToken r4;
        java.lang.String $r5;
        java.util.Map $r6;
        java.lang.StringBuilder $r7;
        net.objecthunter.exp4j.ValidationResult $r8;
        net.objecthunter.exp4j.tokenizer.FunctionToken r9;
        net.objecthunter.exp4j.function.Function $r10;
        net.objecthunter.exp4j.tokenizer.OperatorToken r11;
        net.objecthunter.exp4j.operator.Operator $r12;

        r0 := @this: net.objecthunter.exp4j.Expression;

        $z0 := @parameter0: boolean;

        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>(int)>(0);

        if $z0 == 0 goto label03;

        r2 = r0.<net.objecthunter.exp4j.Expression: net.objecthunter.exp4j.tokenizer.Token[] tokens>;

        i0 = lengthof r2;

        i1 = 0;

     label01:
        if i1 >= i0 goto label03;

        r3 = r2[i1];

        $i2 = virtualinvoke r3.<net.objecthunter.exp4j.tokenizer.Token: int getType()>();

        if $i2 != 6 goto label02;

        r4 = (net.objecthunter.exp4j.tokenizer.VariableToken) r3;

        $r5 = virtualinvoke r4.<net.objecthunter.exp4j.tokenizer.VariableToken: java.lang.String getName()>();

        $r6 = r0.<net.objecthunter.exp4j.Expression: java.util.Map variables>;

        $z0 = interfaceinvoke $r6.<java.util.Map: boolean containsKey(java.lang.Object)>($r5);

        if $z0 != 0 goto label02;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The setVariable \'");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' has not been set");

        $r5 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r5);

     label02:
        i1 = i1 + 1;

        goto label01;

     label03:
        i0 = 0;

        r2 = r0.<net.objecthunter.exp4j.Expression: net.objecthunter.exp4j.tokenizer.Token[] tokens>;

        i1 = lengthof r2;

        $i2 = 0;

     label04:
        if $i2 >= i1 goto label11;

        r3 = r2[$i2];

        $i3 = virtualinvoke r3.<net.objecthunter.exp4j.tokenizer.Token: int getType()>();

        lookupswitch($i3)
        {
            case 1: goto label06;
            case 2: goto label09;
            case 3: goto label07;
            case 4: goto label05;
            case 5: goto label05;
            case 6: goto label06;
            default: goto label05;
        };

     label05:
        if i0 >= 1 goto label10;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>("Too many operators");

        $r8 = new net.objecthunter.exp4j.ValidationResult;

        specialinvoke $r8.<net.objecthunter.exp4j.ValidationResult: void <init>(boolean,java.util.List)>(0, r1);

        return $r8;

     label06:
        i0 = i0 + 1;

        goto label05;

     label07:
        r9 = (net.objecthunter.exp4j.tokenizer.FunctionToken) r3;

        $r10 = virtualinvoke r9.<net.objecthunter.exp4j.tokenizer.FunctionToken: net.objecthunter.exp4j.function.Function getFunction()>();

        $i3 = virtualinvoke $r10.<net.objecthunter.exp4j.function.Function: int getNumArguments()>();

        if $i3 <= i0 goto label08;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not enough arguments for \'");

        $r5 = virtualinvoke $r10.<net.objecthunter.exp4j.function.Function: java.lang.String getName()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r5 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r5);

     label08:
        if $i3 <= 1 goto label05;

        $i3 = $i3 + -1;

        i0 = i0 - $i3;

        goto label05;

     label09:
        r11 = (net.objecthunter.exp4j.tokenizer.OperatorToken) r3;

        $r12 = virtualinvoke r11.<net.objecthunter.exp4j.tokenizer.OperatorToken: net.objecthunter.exp4j.operator.Operator getOperator()>();

        $i3 = virtualinvoke $r12.<net.objecthunter.exp4j.operator.Operator: int getNumOperands()>();

        if $i3 != 2 goto label05;

        i0 = i0 + -1;

        goto label05;

     label10:
        $i2 = $i2 + 1;

        goto label04;

     label11:
        if i0 <= 1 goto label12;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>("Too many operands");

     label12:
        i0 = interfaceinvoke r1.<java.util.List: int size()>();

        if i0 != 0 goto label13;

        $r8 = <net.objecthunter.exp4j.ValidationResult: net.objecthunter.exp4j.ValidationResult SUCCESS>;

        return $r8;

     label13:
        $r8 = new net.objecthunter.exp4j.ValidationResult;

        specialinvoke $r8.<net.objecthunter.exp4j.ValidationResult: void <init>(boolean,java.util.List)>(0, r1);

        return $r8;
    }
