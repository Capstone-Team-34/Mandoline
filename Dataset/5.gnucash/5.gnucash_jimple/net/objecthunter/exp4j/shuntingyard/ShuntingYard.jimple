net.objecthunter.exp4j.shuntingyard.ShuntingYard extends java.lang.Object
    public void <init>()
    {
        net.objecthunter.exp4j.shuntingyard.ShuntingYard r0;

        r0 := @this: net.objecthunter.exp4j.shuntingyard.ShuntingYard;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static net.objecthunter.exp4j.tokenizer.Token[] convertToRPN(java.lang.String, java.util.Map, java.util.Map, java.util.Set)
    {
        java.lang.String $r0;
        java.util.Map r1, r2;
        java.util.Set r3;
        java.util.ArrayList r4;
        java.util.Stack r5;
        net.objecthunter.exp4j.tokenizer.Tokenizer r6;
        boolean $z0;
        net.objecthunter.exp4j.tokenizer.Token $r7, $r11;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r8;
        java.lang.Object $r9;
        net.objecthunter.exp4j.operator.Operator $r10;
        net.objecthunter.exp4j.tokenizer.OperatorToken r12, r13;
        net.objecthunter.exp4j.tokenizer.Token[] $r14;
        java.lang.Object[] $r15;

        $r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.Map;

        r2 := @parameter2: java.util.Map;

        r3 := @parameter3: java.util.Set;

        r5 = new java.util.Stack;

        specialinvoke r5.<java.util.Stack: void <init>()>();

        r4 = new java.util.ArrayList;

        specialinvoke r4.<java.util.ArrayList: void <init>()>();

        r6 = new net.objecthunter.exp4j.tokenizer.Tokenizer;

        specialinvoke r6.<net.objecthunter.exp4j.tokenizer.Tokenizer: void <init>(java.lang.String,java.util.Map,java.util.Map,java.util.Set)>($r0, r1, r2, r3);

     label01:
        $z0 = virtualinvoke r6.<net.objecthunter.exp4j.tokenizer.Tokenizer: boolean hasNext()>();

        if $z0 == 0 goto label17;

        $r7 = virtualinvoke r6.<net.objecthunter.exp4j.tokenizer.Tokenizer: net.objecthunter.exp4j.tokenizer.Token nextToken()>();

        $i0 = virtualinvoke $r7.<net.objecthunter.exp4j.tokenizer.Token: int getType()>();

        lookupswitch($i0)
        {
            case 1: goto label03;
            case 2: goto label11;
            case 3: goto label04;
            case 4: goto label13;
            case 5: goto label14;
            case 6: goto label03;
            case 7: goto label05;
            default: goto label02;
        };

     label02:
        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unknown Token type encountered. This should not happen");

        throw $r8;

     label03:
        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label01;

     label04:
        virtualinvoke r5.<java.util.Stack: boolean add(java.lang.Object)>($r7);

        goto label01;

     label05:
        $z0 = virtualinvoke r5.<java.util.Stack: boolean empty()>();

        if $z0 != 0 goto label06;

        $r9 = virtualinvoke r5.<java.util.Stack: java.lang.Object peek()>();

        $r7 = (net.objecthunter.exp4j.tokenizer.Token) $r9;

        $i0 = virtualinvoke $r7.<net.objecthunter.exp4j.tokenizer.Token: int getType()>();

        if $i0 == 4 goto label06;

        $r9 = virtualinvoke r5.<java.util.Stack: java.lang.Object pop()>();

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r9);

        goto label05;

     label06:
        $z0 = virtualinvoke r5.<java.util.Stack: boolean empty()>();

        if $z0 != 0 goto label07;

        $r9 = virtualinvoke r5.<java.util.Stack: java.lang.Object peek()>();

        $r7 = (net.objecthunter.exp4j.tokenizer.Token) $r9;

        $i0 = virtualinvoke $r7.<net.objecthunter.exp4j.tokenizer.Token: int getType()>();

        if $i0 == 4 goto label01;

     label07:
        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Misplaced function separator \',\' or mismatched parentheses");

        throw $r8;

     label08:
        $r10 = virtualinvoke r12.<net.objecthunter.exp4j.tokenizer.OperatorToken: net.objecthunter.exp4j.operator.Operator getOperator()>();

        $z0 = virtualinvoke $r10.<net.objecthunter.exp4j.operator.Operator: boolean isLeftAssociative()>();

        if $z0 == 0 goto label09;

        $r10 = virtualinvoke r12.<net.objecthunter.exp4j.tokenizer.OperatorToken: net.objecthunter.exp4j.operator.Operator getOperator()>();

        $i0 = virtualinvoke $r10.<net.objecthunter.exp4j.operator.Operator: int getPrecedence()>();

        $r10 = virtualinvoke r13.<net.objecthunter.exp4j.tokenizer.OperatorToken: net.objecthunter.exp4j.operator.Operator getOperator()>();

        $i1 = virtualinvoke $r10.<net.objecthunter.exp4j.operator.Operator: int getPrecedence()>();

        if $i0 <= $i1 goto label10;

     label09:
        $r10 = virtualinvoke r12.<net.objecthunter.exp4j.tokenizer.OperatorToken: net.objecthunter.exp4j.operator.Operator getOperator()>();

        $i0 = virtualinvoke $r10.<net.objecthunter.exp4j.operator.Operator: int getPrecedence()>();

        $r10 = virtualinvoke r13.<net.objecthunter.exp4j.tokenizer.OperatorToken: net.objecthunter.exp4j.operator.Operator getOperator()>();

        $i1 = virtualinvoke $r10.<net.objecthunter.exp4j.operator.Operator: int getPrecedence()>();

        if $i0 >= $i1 goto label12;

     label10:
        $r9 = virtualinvoke r5.<java.util.Stack: java.lang.Object pop()>();

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r9);

     label11:
        $z0 = virtualinvoke r5.<java.util.Stack: boolean empty()>();

        if $z0 != 0 goto label12;

        $r9 = virtualinvoke r5.<java.util.Stack: java.lang.Object peek()>();

        $r11 = (net.objecthunter.exp4j.tokenizer.Token) $r9;

        $i0 = virtualinvoke $r11.<net.objecthunter.exp4j.tokenizer.Token: int getType()>();

        if $i0 != 2 goto label12;

        r12 = (net.objecthunter.exp4j.tokenizer.OperatorToken) $r7;

        $r9 = virtualinvoke r5.<java.util.Stack: java.lang.Object peek()>();

        r13 = (net.objecthunter.exp4j.tokenizer.OperatorToken) $r9;

        $r10 = virtualinvoke r12.<net.objecthunter.exp4j.tokenizer.OperatorToken: net.objecthunter.exp4j.operator.Operator getOperator()>();

        $i0 = virtualinvoke $r10.<net.objecthunter.exp4j.operator.Operator: int getNumOperands()>();

        if $i0 != 1 goto label08;

        $r10 = virtualinvoke r13.<net.objecthunter.exp4j.tokenizer.OperatorToken: net.objecthunter.exp4j.operator.Operator getOperator()>();

        $i0 = virtualinvoke $r10.<net.objecthunter.exp4j.operator.Operator: int getNumOperands()>();

        if $i0 != 2 goto label08;

     label12:
        virtualinvoke r5.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r7);

        goto label01;

     label13:
        virtualinvoke r5.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r7);

        goto label01;

     label14:
        $r9 = virtualinvoke r5.<java.util.Stack: java.lang.Object peek()>();

        $r7 = (net.objecthunter.exp4j.tokenizer.Token) $r9;

        $i0 = virtualinvoke $r7.<net.objecthunter.exp4j.tokenizer.Token: int getType()>();

        if $i0 == 4 goto label15;

        $r9 = virtualinvoke r5.<java.util.Stack: java.lang.Object pop()>();

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r9);

        goto label14;

     label15:
        virtualinvoke r5.<java.util.Stack: java.lang.Object pop()>();

        $z0 = virtualinvoke r5.<java.util.Stack: boolean isEmpty()>();

        if $z0 != 0 goto label01;

        $r9 = virtualinvoke r5.<java.util.Stack: java.lang.Object peek()>();

        $r7 = (net.objecthunter.exp4j.tokenizer.Token) $r9;

        $i0 = virtualinvoke $r7.<net.objecthunter.exp4j.tokenizer.Token: int getType()>();

        if $i0 != 3 goto label01;

        $r9 = virtualinvoke r5.<java.util.Stack: java.lang.Object pop()>();

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r9);

        goto label01;

     label16:
        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r7);

     label17:
        $z0 = virtualinvoke r5.<java.util.Stack: boolean empty()>();

        if $z0 != 0 goto label19;

        $r9 = virtualinvoke r5.<java.util.Stack: java.lang.Object pop()>();

        $r7 = (net.objecthunter.exp4j.tokenizer.Token) $r9;

        $i0 = virtualinvoke $r7.<net.objecthunter.exp4j.tokenizer.Token: int getType()>();

        if $i0 == 5 goto label18;

        $i0 = virtualinvoke $r7.<net.objecthunter.exp4j.tokenizer.Token: int getType()>();

        if $i0 != 4 goto label16;

     label18:
        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Mismatched parentheses detected. Please check the expression");

        throw $r8;

     label19:
        $i0 = interfaceinvoke r4.<java.util.List: int size()>();

        $r14 = newarray (net.objecthunter.exp4j.tokenizer.Token)[$i0];

        $r15 = interfaceinvoke r4.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r14);

        $r14 = (net.objecthunter.exp4j.tokenizer.Token[]) $r15;

        return $r14;
    }
