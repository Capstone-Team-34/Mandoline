oauth.signpost.AbstractOAuthProvider extends java.lang.Object implements oauth.signpost.OAuthProvider
private static final long serialVersionUID
private java.lang.String accessTokenEndpointUrl
private java.lang.String authorizationWebsiteUrl
private java.util.Map defaultHeaders
private boolean isOAuth10a
private transient oauth.signpost.OAuthProviderListener listener
private java.lang.String requestTokenEndpointUrl
private oauth.signpost.http.HttpParameters responseParameters
    public void <init>(java.lang.String, java.lang.String, java.lang.String)
    {
        oauth.signpost.AbstractOAuthProvider r0;
        java.lang.String $r1, $r2, $r3;
        oauth.signpost.http.HttpParameters $r4;
        java.util.HashMap $r5;

        r0 := @this: oauth.signpost.AbstractOAuthProvider;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<oauth.signpost.AbstractOAuthProvider: java.lang.String requestTokenEndpointUrl> = $r1;

        r0.<oauth.signpost.AbstractOAuthProvider: java.lang.String accessTokenEndpointUrl> = $r2;

        r0.<oauth.signpost.AbstractOAuthProvider: java.lang.String authorizationWebsiteUrl> = $r3;

        $r4 = new oauth.signpost.http.HttpParameters;

        specialinvoke $r4.<oauth.signpost.http.HttpParameters: void <init>()>();

        r0.<oauth.signpost.AbstractOAuthProvider: oauth.signpost.http.HttpParameters responseParameters> = $r4;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r0.<oauth.signpost.AbstractOAuthProvider: java.util.Map defaultHeaders> = $r5;

        return;
    }
    protected void closeConnection(oauth.signpost.http.HttpRequest, oauth.signpost.http.HttpResponse) throws java.lang.Exception
    {
        oauth.signpost.AbstractOAuthProvider r0;
        oauth.signpost.http.HttpRequest $r1;
        oauth.signpost.http.HttpResponse $r2;

        r0 := @this: oauth.signpost.AbstractOAuthProvider;

        $r1 := @parameter0: oauth.signpost.http.HttpRequest;

        $r2 := @parameter1: oauth.signpost.http.HttpResponse;

        return;
    }
protected abstract oauth.signpost.http.HttpRequest createRequest(java.lang.String) throws java.lang.Exception { 
// no body
} 
    public java.lang.String getAccessTokenEndpointUrl()
    {
        oauth.signpost.AbstractOAuthProvider r0;
        java.lang.String r1;

        r0 := @this: oauth.signpost.AbstractOAuthProvider;

        r1 = r0.<oauth.signpost.AbstractOAuthProvider: java.lang.String accessTokenEndpointUrl>;

        return r1;
    }
    public java.lang.String getAuthorizationWebsiteUrl()
    {
        oauth.signpost.AbstractOAuthProvider r0;
        java.lang.String r1;

        r0 := @this: oauth.signpost.AbstractOAuthProvider;

        r1 = r0.<oauth.signpost.AbstractOAuthProvider: java.lang.String authorizationWebsiteUrl>;

        return r1;
    }
    public java.util.Map getRequestHeaders()
    {
        oauth.signpost.AbstractOAuthProvider r0;
        java.util.Map r1;

        r0 := @this: oauth.signpost.AbstractOAuthProvider;

        r1 = r0.<oauth.signpost.AbstractOAuthProvider: java.util.Map defaultHeaders>;

        return r1;
    }
    public java.lang.String getRequestTokenEndpointUrl()
    {
        oauth.signpost.AbstractOAuthProvider r0;
        java.lang.String r1;

        r0 := @this: oauth.signpost.AbstractOAuthProvider;

        r1 = r0.<oauth.signpost.AbstractOAuthProvider: java.lang.String requestTokenEndpointUrl>;

        return r1;
    }
    protected java.lang.String getResponseParameter(java.lang.String)
    {
        oauth.signpost.AbstractOAuthProvider r0;
        java.lang.String $r1;
        oauth.signpost.http.HttpParameters $r2;

        r0 := @this: oauth.signpost.AbstractOAuthProvider;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<oauth.signpost.AbstractOAuthProvider: oauth.signpost.http.HttpParameters responseParameters>;

        $r1 = virtualinvoke $r2.<oauth.signpost.http.HttpParameters: java.lang.String getFirst(java.lang.Object)>($r1);

        return $r1;
    }
    public oauth.signpost.http.HttpParameters getResponseParameters()
    {
        oauth.signpost.AbstractOAuthProvider r0;
        oauth.signpost.http.HttpParameters r1;

        r0 := @this: oauth.signpost.AbstractOAuthProvider;

        r1 = r0.<oauth.signpost.AbstractOAuthProvider: oauth.signpost.http.HttpParameters responseParameters>;

        return r1;
    }
    protected void handleUnexpectedResponse(int, oauth.signpost.http.HttpResponse) throws java.lang.Exception
    {
        oauth.signpost.AbstractOAuthProvider r0;
        int $i0;
        oauth.signpost.http.HttpResponse $r1;
        java.io.BufferedReader r2;
        java.lang.StringBuilder r3, $r8;
        java.io.InputStreamReader $r4;
        java.io.InputStream $r5;
        java.lang.String $r6, $r9;
        oauth.signpost.exception.OAuthCommunicationException $r7;
        oauth.signpost.exception.OAuthNotAuthorizedException $r10;

        r0 := @this: oauth.signpost.AbstractOAuthProvider;

        $i0 := @parameter0: int;

        $r1 := @parameter1: oauth.signpost.http.HttpResponse;

        if $r1 != null goto label1;

        return;

     label1:
        r2 = new java.io.BufferedReader;

        $r4 = new java.io.InputStreamReader;

        $r5 = interfaceinvoke $r1.<oauth.signpost.http.HttpResponse: java.io.InputStream getContent()>();

        specialinvoke $r4.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r5);

        specialinvoke r2.<java.io.BufferedReader: void <init>(java.io.Reader)>($r4);

        r3 = new java.lang.StringBuilder;

        specialinvoke r3.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke r2.<java.io.BufferedReader: java.lang.String readLine()>();

     label2:
        if $r6 == null goto label3;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke r2.<java.io.BufferedReader: java.lang.String readLine()>();

        goto label2;

     label3:
        lookupswitch($i0)
        {
            case 401: goto label5;
            default: goto label4;
        };

     label4:
        $r7 = new oauth.signpost.exception.OAuthCommunicationException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Service provider responded in error: ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r6 = interfaceinvoke $r1.<oauth.signpost.http.HttpResponse: java.lang.String getReasonPhrase()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r6 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<oauth.signpost.exception.OAuthCommunicationException: void <init>(java.lang.String,java.lang.String)>($r6, $r9);

        throw $r7;

     label5:
        $r10 = new oauth.signpost.exception.OAuthNotAuthorizedException;

        $r6 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<oauth.signpost.exception.OAuthNotAuthorizedException: void <init>(java.lang.String)>($r6);

        throw $r10;
    }
    public boolean isOAuth10a()
    {
        oauth.signpost.AbstractOAuthProvider r0;
        boolean z0;

        r0 := @this: oauth.signpost.AbstractOAuthProvider;

        z0 = r0.<oauth.signpost.AbstractOAuthProvider: boolean isOAuth10a>;

        return z0;
    }
    public void removeListener(oauth.signpost.OAuthProviderListener)
    {
        oauth.signpost.AbstractOAuthProvider r0;
        oauth.signpost.OAuthProviderListener $r1;

        r0 := @this: oauth.signpost.AbstractOAuthProvider;

        $r1 := @parameter0: oauth.signpost.OAuthProviderListener;

        r0.<oauth.signpost.AbstractOAuthProvider: oauth.signpost.OAuthProviderListener listener> = null;

        return;
    }
    public transient void retrieveAccessToken(oauth.signpost.OAuthConsumer, java.lang.String, java.lang.String[]) throws oauth.signpost.exception.OAuthMessageSignerException, oauth.signpost.exception.OAuthNotAuthorizedException, oauth.signpost.exception.OAuthExpectationFailedException, oauth.signpost.exception.OAuthCommunicationException
    {
        oauth.signpost.AbstractOAuthProvider r0;
        oauth.signpost.OAuthConsumer $r1;
        java.lang.String $r2, $r5;
        java.lang.String[] $r3;
        oauth.signpost.http.HttpParameters r4;
        oauth.signpost.exception.OAuthExpectationFailedException $r6;
        java.lang.Throwable $r7;
        boolean $z0;

        r0 := @this: oauth.signpost.AbstractOAuthProvider;

        $r1 := @parameter0: oauth.signpost.OAuthConsumer;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String[];

        entermonitor r0;

     label1:
        $r5 = interfaceinvoke $r1.<oauth.signpost.OAuthConsumer: java.lang.String getToken()>();

        if $r5 == null goto label2;

        $r5 = interfaceinvoke $r1.<oauth.signpost.OAuthConsumer: java.lang.String getTokenSecret()>();

        if $r5 != null goto label4;

     label2:
        $r6 = new oauth.signpost.exception.OAuthExpectationFailedException;

        specialinvoke $r6.<oauth.signpost.exception.OAuthExpectationFailedException: void <init>(java.lang.String)>("Authorized request token or token secret not set. Did you retrieve an authorized request token before?");

        throw $r6;

     label3:
        $r7 := @caughtexception;

        exitmonitor r0;

        throw $r7;

     label4:
        r4 = new oauth.signpost.http.HttpParameters;

        specialinvoke r4.<oauth.signpost.http.HttpParameters: void <init>()>();

        virtualinvoke r4.<oauth.signpost.http.HttpParameters: void putAll(java.lang.String[],boolean)>($r3, 1);

        $z0 = r0.<oauth.signpost.AbstractOAuthProvider: boolean isOAuth10a>;

        if $z0 == 0 goto label5;

        if $r2 == null goto label5;

        virtualinvoke r4.<oauth.signpost.http.HttpParameters: java.lang.String put(java.lang.String,java.lang.String,boolean)>("oauth_verifier", $r2, 1);

     label5:
        $r2 = r0.<oauth.signpost.AbstractOAuthProvider: java.lang.String accessTokenEndpointUrl>;

        virtualinvoke r0.<oauth.signpost.AbstractOAuthProvider: void retrieveToken(oauth.signpost.OAuthConsumer,java.lang.String,oauth.signpost.http.HttpParameters)>($r1, $r2, r4);

     label6:
        exitmonitor r0;

        return;

        catch java.lang.Throwable from label1 to label3 with label3;
        catch java.lang.Throwable from label4 to label6 with label3;
    }
    public transient java.lang.String retrieveRequestToken(oauth.signpost.OAuthConsumer, java.lang.String, java.lang.String[]) throws oauth.signpost.exception.OAuthMessageSignerException, oauth.signpost.exception.OAuthNotAuthorizedException, oauth.signpost.exception.OAuthExpectationFailedException, oauth.signpost.exception.OAuthCommunicationException
    {
        oauth.signpost.AbstractOAuthProvider r0;
        oauth.signpost.OAuthConsumer $r1;
        java.lang.String $r2, $r5, $r7;
        java.lang.String[] $r3;
        oauth.signpost.http.HttpParameters r4;
        java.lang.Boolean $r6;
        boolean $z0;
        java.lang.Throwable $r8;

        r0 := @this: oauth.signpost.AbstractOAuthProvider;

        $r1 := @parameter0: oauth.signpost.OAuthConsumer;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String[];

        entermonitor r0;

     label1:
        interfaceinvoke $r1.<oauth.signpost.OAuthConsumer: void setTokenWithSecret(java.lang.String,java.lang.String)>(null, null);

        r4 = new oauth.signpost.http.HttpParameters;

        specialinvoke r4.<oauth.signpost.http.HttpParameters: void <init>()>();

        virtualinvoke r4.<oauth.signpost.http.HttpParameters: void putAll(java.lang.String[],boolean)>($r3, 1);

        virtualinvoke r4.<oauth.signpost.http.HttpParameters: java.lang.String put(java.lang.String,java.lang.String,boolean)>("oauth_callback", $r2, 1);

        $r5 = r0.<oauth.signpost.AbstractOAuthProvider: java.lang.String requestTokenEndpointUrl>;

        virtualinvoke r0.<oauth.signpost.AbstractOAuthProvider: void retrieveToken(oauth.signpost.OAuthConsumer,java.lang.String,oauth.signpost.http.HttpParameters)>($r1, $r5, r4);

        r4 = r0.<oauth.signpost.AbstractOAuthProvider: oauth.signpost.http.HttpParameters responseParameters>;

        $r5 = virtualinvoke r4.<oauth.signpost.http.HttpParameters: java.lang.String getFirst(java.lang.Object)>("oauth_callback_confirmed");

        r4 = r0.<oauth.signpost.AbstractOAuthProvider: oauth.signpost.http.HttpParameters responseParameters>;

        virtualinvoke r4.<oauth.signpost.http.HttpParameters: java.util.SortedSet remove(java.lang.Object)>("oauth_callback_confirmed");

        $r6 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $r7 = virtualinvoke $r6.<java.lang.Boolean: java.lang.String toString()>();

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        r0.<oauth.signpost.AbstractOAuthProvider: boolean isOAuth10a> = $z0;

        $z0 = r0.<oauth.signpost.AbstractOAuthProvider: boolean isOAuth10a>;

        if $z0 == 0 goto label3;

        $r2 = r0.<oauth.signpost.AbstractOAuthProvider: java.lang.String authorizationWebsiteUrl>;

        $r3 = newarray (java.lang.String)[2];

        $r3[0] = "oauth_token";

        $r5 = interfaceinvoke $r1.<oauth.signpost.OAuthConsumer: java.lang.String getToken()>();

        $r3[1] = $r5;

        $r2 = staticinvoke <oauth.signpost.OAuth: java.lang.String addQueryParameters(java.lang.String,java.lang.String[])>($r2, $r3);

     label2:
        exitmonitor r0;

        return $r2;

     label3:
        $r5 = r0.<oauth.signpost.AbstractOAuthProvider: java.lang.String authorizationWebsiteUrl>;

        $r3 = newarray (java.lang.String)[4];

        $r3[0] = "oauth_token";

        $r7 = interfaceinvoke $r1.<oauth.signpost.OAuthConsumer: java.lang.String getToken()>();

        $r3[1] = $r7;

        $r3[2] = "oauth_callback";

        $r3[3] = $r2;

        $r2 = staticinvoke <oauth.signpost.OAuth: java.lang.String addQueryParameters(java.lang.String,java.lang.String[])>($r5, $r3);

     label4:
        goto label2;

     label5:
        $r8 := @caughtexception;

        exitmonitor r0;

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }
    protected void retrieveToken(oauth.signpost.OAuthConsumer, java.lang.String, oauth.signpost.http.HttpParameters) throws oauth.signpost.exception.OAuthMessageSignerException, oauth.signpost.exception.OAuthCommunicationException, oauth.signpost.exception.OAuthNotAuthorizedException, oauth.signpost.exception.OAuthExpectationFailedException
    {
        oauth.signpost.AbstractOAuthProvider r0;
        oauth.signpost.OAuthConsumer $r1;
        java.lang.String $r2, $r5;
        oauth.signpost.http.HttpParameters $r3;
        java.util.Map $r4;
        oauth.signpost.exception.OAuthExpectationFailedException $r6;
        oauth.signpost.http.HttpRequest r7, $r9;
        oauth.signpost.http.HttpResponse r8, $r16;
        java.util.Set $r10;
        java.util.Iterator $r11;
        boolean $z0;
        java.lang.Object $r12;
        oauth.signpost.exception.OAuthNotAuthorizedException r13;
        java.lang.Throwable $r14;
        oauth.signpost.OAuthProviderListener $r15;
        int $i0;
        java.lang.Exception r17, r20, r21, r22;
        oauth.signpost.exception.OAuthCommunicationException $r18;
        java.io.InputStream $r19;

        r0 := @this: oauth.signpost.AbstractOAuthProvider;

        $r1 := @parameter0: oauth.signpost.OAuthConsumer;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: oauth.signpost.http.HttpParameters;

        $r4 = virtualinvoke r0.<oauth.signpost.AbstractOAuthProvider: java.util.Map getRequestHeaders()>();

        $r5 = interfaceinvoke $r1.<oauth.signpost.OAuthConsumer: java.lang.String getConsumerKey()>();

        if $r5 == null goto label01;

        $r5 = interfaceinvoke $r1.<oauth.signpost.OAuthConsumer: java.lang.String getConsumerSecret()>();

        if $r5 != null goto label02;

     label01:
        $r6 = new oauth.signpost.exception.OAuthExpectationFailedException;

        specialinvoke $r6.<oauth.signpost.exception.OAuthExpectationFailedException: void <init>(java.lang.String)>("Consumer key or secret not set");

        throw $r6;

     label02:
        r7 = null;

        r8 = null;

     label03:
        $r9 = virtualinvoke r0.<oauth.signpost.AbstractOAuthProvider: oauth.signpost.http.HttpRequest createRequest(java.lang.String)>($r2);

     label04:
        r7 = $r9;

     label05:
        $r10 = interfaceinvoke $r4.<java.util.Map: java.util.Set keySet()>();

        $r11 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

     label06:
        $z0 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

     label07:
        if $z0 == 0 goto label19;

     label08:
        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

     label09:
        $r2 = (java.lang.String) $r12;

     label10:
        $r12 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

     label11:
        $r5 = (java.lang.String) $r12;

     label12:
        interfaceinvoke $r9.<oauth.signpost.http.HttpRequest: void setHeader(java.lang.String,java.lang.String)>($r2, $r5);

     label13:
        goto label06;

     label14:
        r13 := @caughtexception;

     label15:
        throw r13;

     label16:
        $r14 := @caughtexception;

     label17:
        virtualinvoke r0.<oauth.signpost.AbstractOAuthProvider: void closeConnection(oauth.signpost.http.HttpRequest,oauth.signpost.http.HttpResponse)>(r7, r8);

     label18:
        throw $r14;

     label19:
        if $r3 == null goto label23;

     label20:
        $z0 = virtualinvoke $r3.<oauth.signpost.http.HttpParameters: boolean isEmpty()>();

     label21:
        if $z0 != 0 goto label23;

     label22:
        interfaceinvoke $r1.<oauth.signpost.OAuthConsumer: void setAdditionalParameters(oauth.signpost.http.HttpParameters)>($r3);

     label23:
        $r15 = r0.<oauth.signpost.AbstractOAuthProvider: oauth.signpost.OAuthProviderListener listener>;

     label24:
        if $r15 == null goto label27;

     label25:
        $r15 = r0.<oauth.signpost.AbstractOAuthProvider: oauth.signpost.OAuthProviderListener listener>;

     label26:
        interfaceinvoke $r15.<oauth.signpost.OAuthProviderListener: void prepareRequest(oauth.signpost.http.HttpRequest)>($r9);

     label27:
        interfaceinvoke $r1.<oauth.signpost.OAuthConsumer: oauth.signpost.http.HttpRequest sign(oauth.signpost.http.HttpRequest)>($r9);

     label28:
        $r15 = r0.<oauth.signpost.AbstractOAuthProvider: oauth.signpost.OAuthProviderListener listener>;

     label29:
        if $r15 == null goto label32;

     label30:
        $r15 = r0.<oauth.signpost.AbstractOAuthProvider: oauth.signpost.OAuthProviderListener listener>;

     label31:
        interfaceinvoke $r15.<oauth.signpost.OAuthProviderListener: void prepareSubmission(oauth.signpost.http.HttpRequest)>($r9);

     label32:
        $r16 = virtualinvoke r0.<oauth.signpost.AbstractOAuthProvider: oauth.signpost.http.HttpResponse sendRequest(oauth.signpost.http.HttpRequest)>($r9);

     label33:
        r8 = $r16;

     label34:
        $i0 = interfaceinvoke $r16.<oauth.signpost.http.HttpResponse: int getStatusCode()>();

     label35:
        $z0 = 0;

     label36:
        $r15 = r0.<oauth.signpost.AbstractOAuthProvider: oauth.signpost.OAuthProviderListener listener>;

     label37:
        if $r15 == null goto label40;

     label38:
        $r15 = r0.<oauth.signpost.AbstractOAuthProvider: oauth.signpost.OAuthProviderListener listener>;

     label39:
        $z0 = interfaceinvoke $r15.<oauth.signpost.OAuthProviderListener: boolean onResponseReceived(oauth.signpost.http.HttpRequest,oauth.signpost.http.HttpResponse)>($r9, $r16);

     label40:
        if $z0 == 0 goto label44;

     label41:
        virtualinvoke r0.<oauth.signpost.AbstractOAuthProvider: void closeConnection(oauth.signpost.http.HttpRequest,oauth.signpost.http.HttpResponse)>($r9, $r16);

     label42:
        return;

     label43:
        r17 := @caughtexception;

        $r18 = new oauth.signpost.exception.OAuthCommunicationException;

        specialinvoke $r18.<oauth.signpost.exception.OAuthCommunicationException: void <init>(java.lang.Exception)>(r17);

        throw $r18;

     label44:
        if $i0 < 300 goto label46;

     label45:
        virtualinvoke r0.<oauth.signpost.AbstractOAuthProvider: void handleUnexpectedResponse(int,oauth.signpost.http.HttpResponse)>($i0, $r16);

     label46:
        $r19 = interfaceinvoke $r16.<oauth.signpost.http.HttpResponse: java.io.InputStream getContent()>();

        $r3 = staticinvoke <oauth.signpost.OAuth: oauth.signpost.http.HttpParameters decodeForm(java.io.InputStream)>($r19);

        $r2 = virtualinvoke $r3.<oauth.signpost.http.HttpParameters: java.lang.String getFirst(java.lang.Object)>("oauth_token");

        $r5 = virtualinvoke $r3.<oauth.signpost.http.HttpParameters: java.lang.String getFirst(java.lang.Object)>("oauth_token_secret");

        virtualinvoke $r3.<oauth.signpost.http.HttpParameters: java.util.SortedSet remove(java.lang.Object)>("oauth_token");

        virtualinvoke $r3.<oauth.signpost.http.HttpParameters: java.util.SortedSet remove(java.lang.Object)>("oauth_token_secret");

        virtualinvoke r0.<oauth.signpost.AbstractOAuthProvider: void setResponseParameters(oauth.signpost.http.HttpParameters)>($r3);

     label47:
        if $r2 == null goto label48;

        if $r5 != null goto label53;

     label48:
        $r6 = new oauth.signpost.exception.OAuthExpectationFailedException;

     label49:
        specialinvoke $r6.<oauth.signpost.exception.OAuthExpectationFailedException: void <init>(java.lang.String)>("Request token or token secret not set in server reply. The service provider you use is probably buggy.");

     label50:
        throw $r6;

     label51:
        $r6 := @caughtexception;

     label52:
        throw $r6;

     label53:
        interfaceinvoke $r1.<oauth.signpost.OAuthConsumer: void setTokenWithSecret(java.lang.String,java.lang.String)>($r2, $r5);

     label54:
        virtualinvoke r0.<oauth.signpost.AbstractOAuthProvider: void closeConnection(oauth.signpost.http.HttpRequest,oauth.signpost.http.HttpResponse)>($r9, $r16);

     label55:
        return;

     label56:
        r20 := @caughtexception;

        $r18 = new oauth.signpost.exception.OAuthCommunicationException;

        specialinvoke $r18.<oauth.signpost.exception.OAuthCommunicationException: void <init>(java.lang.Exception)>(r20);

        throw $r18;

     label57:
        r21 := @caughtexception;

     label58:
        $r18 = new oauth.signpost.exception.OAuthCommunicationException;

        specialinvoke $r18.<oauth.signpost.exception.OAuthCommunicationException: void <init>(java.lang.Exception)>(r21);

        throw $r18;

     label59:
        r22 := @caughtexception;

        $r18 = new oauth.signpost.exception.OAuthCommunicationException;

        specialinvoke $r18.<oauth.signpost.exception.OAuthCommunicationException: void <init>(java.lang.Exception)>(r22);

        throw $r18;

        catch oauth.signpost.exception.OAuthNotAuthorizedException from label03 to label04 with label14;
        catch oauth.signpost.exception.OAuthNotAuthorizedException from label05 to label07 with label14;
        catch oauth.signpost.exception.OAuthNotAuthorizedException from label08 to label09 with label14;
        catch oauth.signpost.exception.OAuthNotAuthorizedException from label10 to label11 with label14;
        catch oauth.signpost.exception.OAuthNotAuthorizedException from label12 to label13 with label14;
        catch oauth.signpost.exception.OAuthExpectationFailedException from label03 to label04 with label51;
        catch oauth.signpost.exception.OAuthExpectationFailedException from label05 to label07 with label51;
        catch oauth.signpost.exception.OAuthExpectationFailedException from label08 to label09 with label51;
        catch oauth.signpost.exception.OAuthExpectationFailedException from label10 to label11 with label51;
        catch oauth.signpost.exception.OAuthExpectationFailedException from label12 to label13 with label51;
        catch java.lang.Exception from label03 to label04 with label57;
        catch java.lang.Exception from label05 to label07 with label57;
        catch java.lang.Exception from label08 to label13 with label57;
        catch java.lang.Throwable from label03 to label04 with label16;
        catch java.lang.Throwable from label05 to label07 with label16;
        catch java.lang.Throwable from label08 to label13 with label16;
        catch java.lang.Throwable from label15 to label16 with label16;
        catch java.lang.Exception from label17 to label18 with label59;
        catch oauth.signpost.exception.OAuthNotAuthorizedException from label20 to label21 with label14;
        catch oauth.signpost.exception.OAuthNotAuthorizedException from label22 to label23 with label14;
        catch oauth.signpost.exception.OAuthNotAuthorizedException from label26 to label28 with label14;
        catch oauth.signpost.exception.OAuthNotAuthorizedException from label31 to label33 with label14;
        catch oauth.signpost.exception.OAuthNotAuthorizedException from label34 to label35 with label14;
        catch oauth.signpost.exception.OAuthNotAuthorizedException from label39 to label40 with label14;
        catch oauth.signpost.exception.OAuthExpectationFailedException from label20 to label21 with label51;
        catch oauth.signpost.exception.OAuthExpectationFailedException from label22 to label23 with label51;
        catch oauth.signpost.exception.OAuthExpectationFailedException from label26 to label28 with label51;
        catch oauth.signpost.exception.OAuthExpectationFailedException from label31 to label33 with label51;
        catch oauth.signpost.exception.OAuthExpectationFailedException from label34 to label35 with label51;
        catch oauth.signpost.exception.OAuthExpectationFailedException from label39 to label40 with label51;
        catch java.lang.Exception from label20 to label21 with label57;
        catch java.lang.Exception from label22 to label24 with label57;
        catch java.lang.Exception from label25 to label29 with label57;
        catch java.lang.Exception from label30 to label33 with label57;
        catch java.lang.Exception from label34 to label35 with label57;
        catch java.lang.Exception from label36 to label37 with label57;
        catch java.lang.Exception from label38 to label40 with label57;
        catch java.lang.Throwable from label20 to label21 with label16;
        catch java.lang.Throwable from label22 to label24 with label16;
        catch java.lang.Throwable from label25 to label29 with label16;
        catch java.lang.Throwable from label30 to label33 with label16;
        catch java.lang.Throwable from label34 to label35 with label16;
        catch java.lang.Throwable from label36 to label37 with label16;
        catch java.lang.Throwable from label38 to label40 with label16;
        catch java.lang.Exception from label41 to label42 with label43;
        catch oauth.signpost.exception.OAuthNotAuthorizedException from label45 to label47 with label14;
        catch oauth.signpost.exception.OAuthNotAuthorizedException from label49 to label50 with label14;
        catch oauth.signpost.exception.OAuthExpectationFailedException from label45 to label47 with label51;
        catch oauth.signpost.exception.OAuthExpectationFailedException from label49 to label51 with label51;
        catch java.lang.Exception from label45 to label47 with label57;
        catch java.lang.Exception from label49 to label51 with label57;
        catch java.lang.Throwable from label45 to label47 with label16;
        catch java.lang.Throwable from label48 to label51 with label16;
        catch java.lang.Throwable from label52 to label53 with label16;
        catch oauth.signpost.exception.OAuthNotAuthorizedException from label53 to label54 with label14;
        catch oauth.signpost.exception.OAuthExpectationFailedException from label53 to label54 with label51;
        catch java.lang.Exception from label53 to label54 with label57;
        catch java.lang.Throwable from label53 to label54 with label16;
        catch java.lang.Exception from label54 to label55 with label56;
        catch java.lang.Throwable from label58 to label59 with label16;
    }
protected abstract oauth.signpost.http.HttpResponse sendRequest(oauth.signpost.http.HttpRequest) throws java.lang.Exception { 
// no body
} 
    public void setListener(oauth.signpost.OAuthProviderListener)
    {
        oauth.signpost.AbstractOAuthProvider r0;
        oauth.signpost.OAuthProviderListener $r1;

        r0 := @this: oauth.signpost.AbstractOAuthProvider;

        $r1 := @parameter0: oauth.signpost.OAuthProviderListener;

        r0.<oauth.signpost.AbstractOAuthProvider: oauth.signpost.OAuthProviderListener listener> = $r1;

        return;
    }
    public void setOAuth10a(boolean)
    {
        oauth.signpost.AbstractOAuthProvider r0;
        boolean $z0;

        r0 := @this: oauth.signpost.AbstractOAuthProvider;

        $z0 := @parameter0: boolean;

        r0.<oauth.signpost.AbstractOAuthProvider: boolean isOAuth10a> = $z0;

        return;
    }
    public void setRequestHeader(java.lang.String, java.lang.String)
    {
        oauth.signpost.AbstractOAuthProvider r0;
        java.lang.String $r1, $r2;
        java.util.Map $r3;

        r0 := @this: oauth.signpost.AbstractOAuthProvider;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = r0.<oauth.signpost.AbstractOAuthProvider: java.util.Map defaultHeaders>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        return;
    }
    public void setResponseParameters(oauth.signpost.http.HttpParameters)
    {
        oauth.signpost.AbstractOAuthProvider r0;
        oauth.signpost.http.HttpParameters $r1;

        r0 := @this: oauth.signpost.AbstractOAuthProvider;

        $r1 := @parameter0: oauth.signpost.http.HttpParameters;

        r0.<oauth.signpost.AbstractOAuthProvider: oauth.signpost.http.HttpParameters responseParameters> = $r1;

        return;
    }
