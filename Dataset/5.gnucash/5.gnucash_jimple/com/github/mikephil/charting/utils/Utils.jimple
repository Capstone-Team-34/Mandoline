com.github.mikephil.charting.utils.Utils extends java.lang.Object
private static final int[] POW_10
private static int mMaximumFlingVelocity
private static android.util.DisplayMetrics mMetrics
private static int mMinimumFlingVelocity
    static void <clinit>()
    {
        int[] $r0;

        <com.github.mikephil.charting.utils.Utils: int mMinimumFlingVelocity> = 50;

        <com.github.mikephil.charting.utils.Utils: int mMaximumFlingVelocity> = 8000;

        $r0 = newarray (int)[10];

        $r0[0] = 1;

        $r0[1] = 10;

        $r0[2] = 100;

        $r0[3] = 1000;

        $r0[4] = 10000;

        $r0[5] = 100000;

        $r0[6] = 1000000;

        $r0[7] = 10000000;

        $r0[8] = 100000000;

        $r0[9] = 1000000000;

        <com.github.mikephil.charting.utils.Utils: int[] POW_10> = $r0;

        return;
    }
    public void <init>()
    {
        com.github.mikephil.charting.utils.Utils r0;

        r0 := @this: com.github.mikephil.charting.utils.Utils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static int calcTextHeight(android.graphics.Paint, java.lang.String)
    {
        android.graphics.Paint $r0;
        java.lang.String $r1;
        android.graphics.Rect r2;
        int $i0;

        $r0 := @parameter0: android.graphics.Paint;

        $r1 := @parameter1: java.lang.String;

        r2 = new android.graphics.Rect;

        specialinvoke r2.<android.graphics.Rect: void <init>()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        virtualinvoke $r0.<android.graphics.Paint: void getTextBounds(java.lang.String,int,int,android.graphics.Rect)>($r1, 0, $i0, r2);

        $i0 = virtualinvoke r2.<android.graphics.Rect: int height()>();

        return $i0;
    }
    public static com.github.mikephil.charting.utils.FSize calcTextSize(android.graphics.Paint, java.lang.String)
    {
        android.graphics.Paint $r0;
        java.lang.String $r1;
        android.graphics.Rect r2;
        int $i0;
        com.github.mikephil.charting.utils.FSize $r3;
        float $f0, $f1;

        $r0 := @parameter0: android.graphics.Paint;

        $r1 := @parameter1: java.lang.String;

        r2 = new android.graphics.Rect;

        specialinvoke r2.<android.graphics.Rect: void <init>()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        virtualinvoke $r0.<android.graphics.Paint: void getTextBounds(java.lang.String,int,int,android.graphics.Rect)>($r1, 0, $i0, r2);

        $r3 = new com.github.mikephil.charting.utils.FSize;

        $i0 = virtualinvoke r2.<android.graphics.Rect: int width()>();

        $f0 = (float) $i0;

        $i0 = virtualinvoke r2.<android.graphics.Rect: int height()>();

        $f1 = (float) $i0;

        specialinvoke $r3.<com.github.mikephil.charting.utils.FSize: void <init>(float,float)>($f0, $f1);

        return $r3;
    }
    public static int calcTextWidth(android.graphics.Paint, java.lang.String)
    {
        android.graphics.Paint $r0;
        java.lang.String $r1;
        float $f0;
        int $i0;

        $r0 := @parameter0: android.graphics.Paint;

        $r1 := @parameter1: java.lang.String;

        $f0 = virtualinvoke $r0.<android.graphics.Paint: float measureText(java.lang.String)>($r1);

        $i0 = (int) $f0;

        return $i0;
    }
    public static float convertDpToPixel(float)
    {
        android.util.DisplayMetrics r0;
        float f0, $f1;
        int $i0;

        f0 := @parameter0: float;

        r0 = <com.github.mikephil.charting.utils.Utils: android.util.DisplayMetrics mMetrics>;

        if r0 != null goto label1;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("MPChartLib-Utils", "Utils NOT INITIALIZED. You need to call Utils.init(...) at least once before calling Utils.convertDpToPixel(...). Otherwise conversion does not take place.");

        return f0;

     label1:
        r0 = <com.github.mikephil.charting.utils.Utils: android.util.DisplayMetrics mMetrics>;

        $i0 = r0.<android.util.DisplayMetrics: int densityDpi>;

        $f1 = (float) $i0;

        $f1 = $f1 / 160.0F;

        f0 = f0 * $f1;

        return f0;
    }
    public static int[] convertIntegers(java.util.List)
    {
        java.util.List r0;
        int[] r1;
        int $i0, $i1;
        java.lang.Object $r2;
        java.lang.Integer $r3;

        r0 := @parameter0: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        r1 = newarray (int)[$i0];

        $i0 = 0;

     label1:
        $i1 = lengthof r1;

        if $i0 >= $i1 goto label2;

        $r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>($i0);

        $r3 = (java.lang.Integer) $r2;

        $i1 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        r1[$i0] = $i1;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return r1;
    }
    public static float convertPixelsToDp(float)
    {
        float f0, $f1;
        android.util.DisplayMetrics r0;
        int $i0;

        f0 := @parameter0: float;

        r0 = <com.github.mikephil.charting.utils.Utils: android.util.DisplayMetrics mMetrics>;

        if r0 != null goto label1;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("MPChartLib-Utils", "Utils NOT INITIALIZED. You need to call Utils.init(...) at least once before calling Utils.convertPixelsToDp(...). Otherwise conversion does not take place.");

        return f0;

     label1:
        r0 = <com.github.mikephil.charting.utils.Utils: android.util.DisplayMetrics mMetrics>;

        $i0 = r0.<android.util.DisplayMetrics: int densityDpi>;

        $f1 = (float) $i0;

        $f1 = $f1 / 160.0F;

        f0 = f0 / $f1;

        return f0;
    }
    public static java.lang.String[] convertStrings(java.util.List)
    {
        java.util.List r0;
        java.lang.String[] r1;
        int $i0, $i1;
        java.lang.Object $r2;
        java.lang.String $r3;

        r0 := @parameter0: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        r1 = newarray (java.lang.String)[$i0];

        $i0 = 0;

     label1:
        $i1 = lengthof r1;

        if $i0 >= $i1 goto label2;

        $r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>($i0);

        $r3 = (java.lang.String) $r2;

        r1[$i0] = $r3;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return r1;
    }
    public static java.lang.String formatDecimal(double, int)
    {
        double $d0;
        int $i0, i1;
        java.lang.StringBuffer r0;
        java.text.DecimalFormat r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        $d0 := @parameter0: double;

        $i0 := @parameter1: int;

        r0 = new java.lang.StringBuffer;

        specialinvoke r0.<java.lang.StringBuffer: void <init>()>();

        i1 = 0;

     label1:
        if i1 >= $i0 goto label3;

        if i1 != 0 goto label2;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

     label2:
        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("0");

        i1 = i1 + 1;

        goto label1;

     label3:
        r1 = new java.text.DecimalFormat;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("###,###,###,##0");

        $r3 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.String toString()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r1.<java.text.DecimalFormat: void <init>(java.lang.String)>($r3);

        $r3 = virtualinvoke r1.<java.text.DecimalFormat: java.lang.String format(double)>($d0);

        return $r3;
    }
    public static java.lang.String formatNumber(float, int, boolean)
    {
        boolean $z0, z1, z2, z3;
        int i0, i1, $i3, i5, i6;
        char[] r0;
        float $f0, $f1;
        byte $b2;
        int[] $r1;
        long l4, $l7;
        char $c8;
        java.lang.String $r2;

        $f0 := @parameter0: float;

        i1 := @parameter1: int;

        $z0 := @parameter2: boolean;

        r0 = newarray (char)[35];

        z1 = 0;

        $b2 = $f0 cmpl 0.0F;

        if $b2 != 0 goto label01;

        return "0";

     label01:
        z2 = 0;

        $b2 = $f0 cmpg 1.0F;

        if $b2 >= 0 goto label02;

        $b2 = $f0 cmpl -1.0F;

        if $b2 <= 0 goto label02;

        z2 = 1;

     label02:
        $b2 = $f0 cmpg 0.0F;

        if $b2 >= 0 goto label03;

        z1 = 1;

        $f0 = neg $f0;

     label03:
        $r1 = <com.github.mikephil.charting.utils.Utils: int[] POW_10>;

        $i3 = lengthof $r1;

        if i1 <= $i3 goto label04;

        $r1 = <com.github.mikephil.charting.utils.Utils: int[] POW_10>;

        i1 = lengthof $r1;

        i1 = i1 + -1;

     label04:
        $r1 = <com.github.mikephil.charting.utils.Utils: int[] POW_10>;

        $i3 = $r1[i1];

        $f1 = (float) $i3;

        $f0 = $f0 * $f1;

        $i3 = staticinvoke <java.lang.Math: int round(float)>($f0);

        l4 = (long) $i3;

        $i3 = lengthof r0;

        i5 = $i3 + -1;

        $i3 = 0;

        z3 = 0;

        i6 = i5;

     label05:
        $b2 = l4 cmp 0L;

        if $b2 != 0 goto label06;

        i5 = i1 + 1;

        if $i3 >= i5 goto label10;

     label06:
        $l7 = l4 % 10L;

        i0 = (int) $l7;

        l4 = l4 / 10L;

        i5 = i6 + -1;

        i0 = i0 + 48;

        $c8 = (char) i0;

        r0[i6] = $c8;

        $i3 = $i3 + 1;

        if $i3 != i1 goto label08;

        r0[i5] = 44;

        $i3 = $i3 + 1;

        z3 = 1;

        i5 = i5 + -1;

     label07:
        i6 = i5;

        goto label05;

     label08:
        if $z0 == 0 goto label07;

        $b2 = l4 cmp 0L;

        if $b2 == 0 goto label07;

        if $i3 <= i1 goto label07;

        if z3 == 0 goto label09;

        i6 = $i3 - i1;

        i6 = i6 % 4;

        if i6 != 0 goto label07;

        r0[i5] = 46;

        $i3 = $i3 + 1;

        i5 = i5 + -1;

        goto label07;

     label09:
        i6 = $i3 - i1;

        i6 = i6 % 4;

        if i6 != 3 goto label07;

        r0[i5] = 46;

        $i3 = $i3 + 1;

        i5 = i5 + -1;

        goto label07;

     label10:
        if z2 == 0 goto label11;

        r0[i6] = 48;

        $i3 = $i3 + 1;

        i6 = i6 + -1;

     label11:
        if z1 == 0 goto label13;

        r0[i6] = 45;

        $i3 = $i3 + 1;

     label12:
        i1 = lengthof r0;

        i1 = i1 - $i3;

        $i3 = lengthof r0;

        $i3 = $i3 - i1;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(char[],int,int)>(r0, i1, $i3);

        return $r2;

     label13:
        goto label12;
    }
    public static int getClosestDataSetIndex(java.util.List, float, com.github.mikephil.charting.components.YAxis$AxisDependency)
    {
        java.util.List r0;
        float $f0, f1, $f2;
        com.github.mikephil.charting.components.YAxis$AxisDependency $r1, $r5;
        int i0, i1, $i2;
        java.lang.Object $r2;
        com.github.mikephil.charting.utils.SelectionDetail r3;
        com.github.mikephil.charting.data.DataSet $r4;
        byte $b3;

        r0 := @parameter0: java.util.List;

        $f0 := @parameter1: float;

        $r1 := @parameter2: com.github.mikephil.charting.components.YAxis$AxisDependency;

        i0 = -2147483647;

        f1 = 3.4028235E38F;

        i1 = 0;

     label1:
        $i2 = interfaceinvoke r0.<java.util.List: int size()>();

        if i1 >= $i2 goto label4;

        $r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i1);

        r3 = (com.github.mikephil.charting.utils.SelectionDetail) $r2;

        if $r1 == null goto label2;

        $r4 = r3.<com.github.mikephil.charting.utils.SelectionDetail: com.github.mikephil.charting.data.DataSet dataSet>;

        $r5 = virtualinvoke $r4.<com.github.mikephil.charting.data.DataSet: com.github.mikephil.charting.components.YAxis$AxisDependency getAxisDependency()>();

        if $r5 != $r1 goto label3;

     label2:
        $f2 = r3.<com.github.mikephil.charting.utils.SelectionDetail: float val>;

        $f2 = $f2 - $f0;

        $f2 = staticinvoke <java.lang.Math: float abs(float)>($f2);

        $b3 = $f2 cmpg f1;

        if $b3 >= 0 goto label3;

        $r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i1);

        r3 = (com.github.mikephil.charting.utils.SelectionDetail) $r2;

        i0 = r3.<com.github.mikephil.charting.utils.SelectionDetail: int dataSetIndex>;

        f1 = $f2;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return i0;
    }
    public static int getDecimals(float)
    {
        float $f0;
        double $d0;
        int $i0;

        $f0 := @parameter0: float;

        $d0 = (double) $f0;

        $f0 = staticinvoke <com.github.mikephil.charting.utils.Utils: float roundToNextSignificant(double)>($d0);

        $d0 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double log10(double)>($d0);

        $d0 = neg $d0;

        $d0 = staticinvoke <java.lang.Math: double ceil(double)>($d0);

        $i0 = (int) $d0;

        $i0 = $i0 + 2;

        return $i0;
    }
    public static int getLegendFormatDigits(float, int)
    {
        float $f0;
        int $i0;
        double $d0;
        byte $b1;

        $f0 := @parameter0: float;

        $i0 := @parameter1: int;

        $d0 = (double) $f0;

        $b1 = $d0 cmpg 9.9E-6;

        if $b1 >= 0 goto label1;

        $i0 = $i0 + 6;

        return $i0;

     label1:
        $d0 = (double) $f0;

        $b1 = $d0 cmpg 9.9E-5;

        if $b1 >= 0 goto label2;

        $i0 = $i0 + 5;

        return $i0;

     label2:
        $d0 = (double) $f0;

        $b1 = $d0 cmpg 9.9E-4;

        if $b1 >= 0 goto label3;

        $i0 = $i0 + 4;

        return $i0;

     label3:
        $d0 = (double) $f0;

        $b1 = $d0 cmpg 0.0099;

        if $b1 >= 0 goto label4;

        $i0 = $i0 + 3;

        return $i0;

     label4:
        $d0 = (double) $f0;

        $b1 = $d0 cmpg 0.099;

        if $b1 >= 0 goto label5;

        $i0 = $i0 + 2;

        return $i0;

     label5:
        $d0 = (double) $f0;

        $b1 = $d0 cmpg 0.99;

        if $b1 >= 0 goto label6;

        $i0 = $i0 + 1;

     label6:
        return $i0;
    }
    public static float getLineHeight(android.graphics.Paint)
    {
        android.graphics.Paint $r0;
        float $f0, $f1;
        android.graphics.Paint$FontMetrics $r1;

        $r0 := @parameter0: android.graphics.Paint;

        $r1 = virtualinvoke $r0.<android.graphics.Paint: android.graphics.Paint$FontMetrics getFontMetrics()>();

        $f1 = $r1.<android.graphics.Paint$FontMetrics: float descent>;

        $f0 = $r1.<android.graphics.Paint$FontMetrics: float ascent>;

        $f0 = $f1 - $f0;

        return $f0;
    }
    public static float getLineSpacing(android.graphics.Paint)
    {
        android.graphics.Paint $r0;
        android.graphics.Paint$FontMetrics $r1;
        float $f0, $f1;

        $r0 := @parameter0: android.graphics.Paint;

        $r1 = virtualinvoke $r0.<android.graphics.Paint: android.graphics.Paint$FontMetrics getFontMetrics()>();

        $f0 = $r1.<android.graphics.Paint$FontMetrics: float ascent>;

        $f1 = $r1.<android.graphics.Paint$FontMetrics: float top>;

        $f0 = $f0 - $f1;

        $f1 = $r1.<android.graphics.Paint$FontMetrics: float bottom>;

        $f0 = $f0 + $f1;

        return $f0;
    }
    public static int getMaximumFlingVelocity()
    {
        int i0;

        i0 = <com.github.mikephil.charting.utils.Utils: int mMaximumFlingVelocity>;

        return i0;
    }
    public static float getMinimumDistance(java.util.List, float, com.github.mikephil.charting.components.YAxis$AxisDependency)
    {
        java.util.List r0;
        float $f0, f1, $f2;
        com.github.mikephil.charting.components.YAxis$AxisDependency $r1, $r5;
        int i0, $i1;
        java.lang.Object $r2;
        com.github.mikephil.charting.utils.SelectionDetail r3;
        com.github.mikephil.charting.data.DataSet $r4;
        byte $b2;

        r0 := @parameter0: java.util.List;

        $f0 := @parameter1: float;

        $r1 := @parameter2: com.github.mikephil.charting.components.YAxis$AxisDependency;

        f1 = 3.4028235E38F;

        i0 = 0;

     label1:
        $i1 = interfaceinvoke r0.<java.util.List: int size()>();

        if i0 >= $i1 goto label3;

        $r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i0);

        r3 = (com.github.mikephil.charting.utils.SelectionDetail) $r2;

        $r4 = r3.<com.github.mikephil.charting.utils.SelectionDetail: com.github.mikephil.charting.data.DataSet dataSet>;

        $r5 = virtualinvoke $r4.<com.github.mikephil.charting.data.DataSet: com.github.mikephil.charting.components.YAxis$AxisDependency getAxisDependency()>();

        if $r5 != $r1 goto label2;

        $f2 = r3.<com.github.mikephil.charting.utils.SelectionDetail: float val>;

        $f2 = $f2 - $f0;

        $f2 = staticinvoke <java.lang.Math: float abs(float)>($f2);

        $b2 = $f2 cmpg f1;

        if $b2 >= 0 goto label2;

        f1 = $f2;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return f1;
    }
    public static int getMinimumFlingVelocity()
    {
        int i0;

        i0 = <com.github.mikephil.charting.utils.Utils: int mMinimumFlingVelocity>;

        return i0;
    }
    public static float getNormalizedAngle(float)
    {
        float $f0;
        byte $b0;

        $f0 := @parameter0: float;

     label1:
        $b0 = $f0 cmpg 0.0F;

        if $b0 >= 0 goto label2;

        $f0 = $f0 + 360.0F;

        goto label1;

     label2:
        $f0 = $f0 % 360.0F;

        return $f0;
    }
    public static android.graphics.PointF getPosition(android.graphics.PointF, float, float)
    {
        android.graphics.PointF $r0, r1;
        float $f0, $f1, $f2, $f3;
        double $d0, $d1, $d2;

        $r0 := @parameter0: android.graphics.PointF;

        $f0 := @parameter1: float;

        $f1 := @parameter2: float;

        r1 = new android.graphics.PointF;

        $f2 = $r0.<android.graphics.PointF: float x>;

        $d0 = (double) $f2;

        $d1 = (double) $f0;

        $d2 = (double) $f1;

        $d2 = staticinvoke <java.lang.Math: double toRadians(double)>($d2);

        $d2 = staticinvoke <java.lang.Math: double cos(double)>($d2);

        $d1 = $d1 * $d2;

        $d0 = $d0 + $d1;

        $f2 = (float) $d0;

        $f3 = $r0.<android.graphics.PointF: float y>;

        $d0 = (double) $f3;

        $d1 = (double) $f0;

        $d2 = (double) $f1;

        $d2 = staticinvoke <java.lang.Math: double toRadians(double)>($d2);

        $d2 = staticinvoke <java.lang.Math: double sin(double)>($d2);

        $d1 = $d1 * $d2;

        $d0 = $d0 + $d1;

        $f0 = (float) $d0;

        specialinvoke r1.<android.graphics.PointF: void <init>(float,float)>($f2, $f0);

        return r1;
    }
    public static void init(android.content.Context)
    {
        android.content.Context $r0;
        int $i0;
        android.view.ViewConfiguration $r1;
        android.content.res.Resources $r2;
        android.util.DisplayMetrics $r3;

        $r0 := @parameter0: android.content.Context;

        if $r0 != null goto label1;

        $i0 = staticinvoke <android.view.ViewConfiguration: int getMinimumFlingVelocity()>();

        <com.github.mikephil.charting.utils.Utils: int mMinimumFlingVelocity> = $i0;

        $i0 = staticinvoke <android.view.ViewConfiguration: int getMaximumFlingVelocity()>();

        <com.github.mikephil.charting.utils.Utils: int mMaximumFlingVelocity> = $i0;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("MPAndroidChart, Utils.init(...)", "PROVIDED CONTEXT OBJECT IS NULL");

        return;

     label1:
        $r1 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>($r0);

        $i0 = virtualinvoke $r1.<android.view.ViewConfiguration: int getScaledMinimumFlingVelocity()>();

        <com.github.mikephil.charting.utils.Utils: int mMinimumFlingVelocity> = $i0;

        $i0 = virtualinvoke $r1.<android.view.ViewConfiguration: int getScaledMaximumFlingVelocity()>();

        <com.github.mikephil.charting.utils.Utils: int mMaximumFlingVelocity> = $i0;

        $r2 = virtualinvoke $r0.<android.content.Context: android.content.res.Resources getResources()>();

        $r3 = virtualinvoke $r2.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        <com.github.mikephil.charting.utils.Utils: android.util.DisplayMetrics mMetrics> = $r3;

        return;
    }
    public static void init(android.content.res.Resources)
    {
        android.content.res.Resources $r0;
        android.util.DisplayMetrics $r1;
        int $i0;

        $r0 := @parameter0: android.content.res.Resources;

        $r1 = virtualinvoke $r0.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        <com.github.mikephil.charting.utils.Utils: android.util.DisplayMetrics mMetrics> = $r1;

        $i0 = staticinvoke <android.view.ViewConfiguration: int getMinimumFlingVelocity()>();

        <com.github.mikephil.charting.utils.Utils: int mMinimumFlingVelocity> = $i0;

        $i0 = staticinvoke <android.view.ViewConfiguration: int getMaximumFlingVelocity()>();

        <com.github.mikephil.charting.utils.Utils: int mMaximumFlingVelocity> = $i0;

        return;
    }
    public static double nextUp(double)
    {
        double d0;
        byte $b0;
        long $l1, $l2;

        d0 := @parameter0: double;

        $b0 = d0 cmpl #Infinity;

        if $b0 != 0 goto label1;

        return d0;

     label1:
        d0 = d0 + 0.0;

        $l1 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);

        $b0 = d0 cmpl 0.0;

        if $b0 < 0 goto label3;

        $l2 = 1L;

     label2:
        $l1 = $l2 + $l1;

        d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l1);

        return d0;

     label3:
        $l2 = -1L;

        goto label2;
    }
    public static void postInvalidateOnAnimation(android.view.View)
    {
        android.view.View $r0;
        int $i0;

        $r0 := @parameter0: android.view.View;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 16 goto label1;

        virtualinvoke $r0.<android.view.View: void postInvalidateOnAnimation()>();

        return;

     label1:
        virtualinvoke $r0.<android.view.View: void postInvalidateDelayed(long)>(10L);

        return;
    }
    public static float roundToNextSignificant(double)
    {
        double $d0, $d1;
        float f0, $f1;
        int i0;
        byte $b1;
        long $l2;

        $d0 := @parameter0: double;

        $b1 = $d0 cmpg 0.0;

        if $b1 >= 0 goto label2;

        $d1 = neg $d0;

     label1:
        $d1 = staticinvoke <java.lang.Math: double log10(double)>($d1);

        f0 = (float) $d1;

        $d1 = (double) f0;

        $d1 = staticinvoke <java.lang.Math: double ceil(double)>($d1);

        f0 = (float) $d1;

        i0 = (int) f0;

        i0 = 1 - i0;

        $d1 = (double) i0;

        $d1 = staticinvoke <java.lang.Math: double pow(double,double)>(10.0, $d1);

        f0 = (float) $d1;

        $d1 = (double) f0;

        $d0 = $d1 * $d0;

        $l2 = staticinvoke <java.lang.Math: long round(double)>($d0);

        $f1 = (float) $l2;

        f0 = $f1 / f0;

        return f0;

     label2:
        $d1 = $d0;

        goto label1;
    }
    public static void velocityTrackerPointerUpCleanUpIfNecessary(android.view.MotionEvent, android.view.VelocityTracker)
    {
        android.view.MotionEvent $r0;
        android.view.VelocityTracker $r1;
        float f0, f1, $f2, $f3;
        int $i0, $i1, $i2, $i3;
        byte $b4;

        $r0 := @parameter0: android.view.MotionEvent;

        $r1 := @parameter1: android.view.VelocityTracker;

        $i0 = <com.github.mikephil.charting.utils.Utils: int mMaximumFlingVelocity>;

        $f2 = (float) $i0;

        virtualinvoke $r1.<android.view.VelocityTracker: void computeCurrentVelocity(int,float)>(1000, $f2);

        $i0 = virtualinvoke $r0.<android.view.MotionEvent: int getActionIndex()>();

        $i1 = virtualinvoke $r0.<android.view.MotionEvent: int getPointerId(int)>($i0);

        $f2 = virtualinvoke $r1.<android.view.VelocityTracker: float getXVelocity(int)>($i1);

        $f3 = virtualinvoke $r1.<android.view.VelocityTracker: float getYVelocity(int)>($i1);

        $i1 = 0;

        $i2 = virtualinvoke $r0.<android.view.MotionEvent: int getPointerCount()>();

     label1:
        if $i1 >= $i2 goto label4;

        if $i1 != $i0 goto label3;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        $i3 = virtualinvoke $r0.<android.view.MotionEvent: int getPointerId(int)>($i1);

        f0 = virtualinvoke $r1.<android.view.VelocityTracker: float getXVelocity(int)>($i3);

        f0 = $f2 * f0;

        f1 = virtualinvoke $r1.<android.view.VelocityTracker: float getYVelocity(int)>($i3);

        f1 = $f3 * f1;

        f0 = f0 + f1;

        $b4 = f0 cmpg 0.0F;

        if $b4 >= 0 goto label2;

        virtualinvoke $r1.<android.view.VelocityTracker: void clear()>();

     label4:
        return;
    }
