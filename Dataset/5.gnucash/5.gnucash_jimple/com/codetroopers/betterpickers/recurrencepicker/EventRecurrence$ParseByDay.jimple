com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$ParseByDay extends com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$PartParser
    private void <init>()
    {
        com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$ParseByDay r0;

        r0 := @this: com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$ParseByDay;

        specialinvoke r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$PartParser: void <init>()>();

        return;
    }
    void <init>(com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$1)
    {
        com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$ParseByDay r0;
        com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$1 $r1;

        r0 := @this: com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$ParseByDay;

        $r1 := @parameter0: com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$1;

        specialinvoke r0.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$ParseByDay: void <init>()>();

        return;
    }
    private static void parseWday(java.lang.String, int[], int[], int)
    {
        java.lang.String $r0, $r3;
        int[] $r1, $r2;
        int $i0, i1, $i2;
        java.util.HashMap $r4;
        java.lang.Object $r5;
        java.lang.Integer r6;
        com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$InvalidFormatException $r7;
        java.lang.StringBuilder $r8;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: int[];

        $r2 := @parameter2: int[];

        $i0 := @parameter3: int;

        i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        i1 = i1 + -2;

        if i1 <= 0 goto label2;

        $r3 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(0, i1);

        $i2 = staticinvoke <com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$ParseByDay: int parseIntRange(java.lang.String,int,int,boolean)>($r3, -53, 53, 0);

        $r2[$i0] = $i2;

        $r3 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int)>(i1);

     label1:
        $r4 = staticinvoke <com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: java.util.HashMap access$1600()>();

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r3);

        r6 = (java.lang.Integer) $r5;

        if r6 != null goto label3;

        $r7 = new com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$InvalidFormatException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid BYDAY value: ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$InvalidFormatException: void <init>(java.lang.String)>($r0);

        throw $r7;

     label2:
        $r3 = $r0;

        goto label1;

     label3:
        i1 = virtualinvoke r6.<java.lang.Integer: int intValue()>();

        $r1[$i0] = i1;

        return;
    }
    public int parsePart(java.lang.String, com.codetroopers.betterpickers.recurrencepicker.EventRecurrence)
    {
        com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$ParseByDay r0;
        java.lang.String $r1;
        com.codetroopers.betterpickers.recurrencepicker.EventRecurrence $r2;
        int i0, i1, i2;
        int[] r3, r4;
        java.lang.String[] $r5;

        r0 := @this: com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$ParseByDay;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: com.codetroopers.betterpickers.recurrencepicker.EventRecurrence;

        i0 = virtualinvoke $r1.<java.lang.String: int indexOf(java.lang.String)>(",");

        if i0 >= 0 goto label2;

        i1 = 1;

        r3 = newarray (int)[1];

        r4 = newarray (int)[1];

        staticinvoke <com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$ParseByDay: void parseWday(java.lang.String,int[],int[],int)>($r1, r3, r4, 0);

     label1:
        $r2.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int[] byday> = r3;

        $r2.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int[] bydayNum> = r4;

        $r2.<com.codetroopers.betterpickers.recurrencepicker.EventRecurrence: int bydayCount> = i1;

        return 128;

     label2:
        $r5 = virtualinvoke $r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        i0 = lengthof $r5;

        i1 = i0;

        r3 = newarray (int)[i0];

        r4 = newarray (int)[i0];

        i2 = 0;

     label3:
        if i2 >= i0 goto label1;

        $r1 = $r5[i2];

        staticinvoke <com.codetroopers.betterpickers.recurrencepicker.EventRecurrence$ParseByDay: void parseWday(java.lang.String,int[],int[],int)>($r1, r3, r4, i2);

        i2 = i2 + 1;

        goto label3;
    }
