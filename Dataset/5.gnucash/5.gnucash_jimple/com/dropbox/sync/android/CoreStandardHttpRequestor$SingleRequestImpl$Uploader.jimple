com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl$Uploader extends com.dropbox.sync.android.CoreHttpRequestor$Uploader
private javax.net.ssl.HttpsURLConnection mUploaderConn
final com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl this$1
    public void <init>(com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl, javax.net.ssl.HttpsURLConnection, int) throws java.io.IOException
    {
        com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl$Uploader r0;
        com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl $r1;
        javax.net.ssl.HttpsURLConnection $r2;
        int $i0;
        java.io.OutputStream $r3;

        r0 := @this: com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl$Uploader;

        $r1 := @parameter0: com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl;

        $r2 := @parameter1: javax.net.ssl.HttpsURLConnection;

        $i0 := @parameter2: int;

        r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl$Uploader: com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl this$1> = $r1;

        $r3 = staticinvoke <com.dropbox.sync.android.CoreStandardHttpRequestor: java.io.OutputStream access$500(javax.net.ssl.HttpsURLConnection,int)>($r2, $i0);

        specialinvoke r0.<com.dropbox.sync.android.CoreHttpRequestor$Uploader: void <init>(java.io.OutputStream)>($r3);

        $r3 = r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl$Uploader: java.io.OutputStream body>;

        staticinvoke <com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: void access$600(com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl,java.io.OutputStream)>($r1, $r3);

        virtualinvoke $r2.<javax.net.ssl.HttpsURLConnection: void connect()>();

        r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl$Uploader: javax.net.ssl.HttpsURLConnection mUploaderConn> = $r2;

        return;
    }
    public void close()
    {
        com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl$Uploader r0;
        java.lang.Throwable r1;
        javax.net.ssl.HttpsURLConnection $r2;
        com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl $r3;
        com.dropbox.sync.android.CoreStandardHttpRequestor $r4;
        com.dropbox.sync.android.CoreLogger $r5;
        java.lang.String $r6;

        r0 := @this: com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl$Uploader;

     label1:
        $r2 = r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl$Uploader: javax.net.ssl.HttpsURLConnection mUploaderConn>;

     label2:
        if $r2 == null goto label4;

     label3:
        $r2 = r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl$Uploader: javax.net.ssl.HttpsURLConnection mUploaderConn>;

        virtualinvoke $r2.<javax.net.ssl.HttpsURLConnection: void disconnect()>();

     label4:
        r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl$Uploader: javax.net.ssl.HttpsURLConnection mUploaderConn> = null;

        return;

     label5:
        r1 := @caughtexception;

        $r3 = r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl$Uploader: com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl this$1>;

        $r4 = $r3.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: com.dropbox.sync.android.CoreStandardHttpRequestor this$0>;

        $r5 = staticinvoke <com.dropbox.sync.android.CoreStandardHttpRequestor: com.dropbox.sync.android.CoreLogger access$200(com.dropbox.sync.android.CoreStandardHttpRequestor)>($r4);

        $r6 = staticinvoke <com.dropbox.sync.android.CoreStandardHttpRequestor: java.lang.String access$300()>();

        virtualinvoke $r5.<com.dropbox.sync.android.CoreLogger: void e(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Exception from HttpsURLConnection.disconnect()", r1);

        goto label4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }
    public com.dropbox.sync.android.CoreHttpRequestor$Response finish() throws java.io.IOException
    {
        com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl$Uploader r0;
        java.io.FileNotFoundException r1;
        javax.net.ssl.HttpsURLConnection r2;
        com.dropbox.sync.android.DbxRuntimeException$BadState $r3;
        java.io.InputStream $r4;
        com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl $r5;
        com.dropbox.sync.android.CoreHttpRequestor$Response $r6;

        r0 := @this: com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl$Uploader;

        r2 = r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl$Uploader: javax.net.ssl.HttpsURLConnection mUploaderConn>;

        if r2 != null goto label1;

        $r3 = new com.dropbox.sync.android.DbxRuntimeException$BadState;

        specialinvoke $r3.<com.dropbox.sync.android.DbxRuntimeException$BadState: void <init>(java.lang.String)>("Can\'t finish().  Uploader already closed.");

        throw $r3;

     label1:
        r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl$Uploader: javax.net.ssl.HttpsURLConnection mUploaderConn> = null;

     label2:
        $r4 = virtualinvoke r2.<javax.net.ssl.HttpsURLConnection: java.io.InputStream getInputStream()>();

     label3:
        $r5 = r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl$Uploader: com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl this$1>;

        staticinvoke <com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: void access$700(com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl,java.io.InputStream)>($r5, $r4);

        $r6 = staticinvoke <com.dropbox.sync.android.CoreStandardHttpRequestor: com.dropbox.sync.android.CoreHttpRequestor$Response access$100(javax.net.ssl.HttpsURLConnection,java.io.InputStream)>(r2, $r4);

        return $r6;

     label4:
        r1 := @caughtexception;

        $r4 = virtualinvoke r2.<javax.net.ssl.HttpsURLConnection: java.io.InputStream getErrorStream()>();

        goto label3;

        catch java.io.FileNotFoundException from label2 to label3 with label4;
    }
