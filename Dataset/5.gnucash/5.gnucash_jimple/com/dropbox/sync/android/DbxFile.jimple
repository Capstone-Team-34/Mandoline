com.dropbox.sync.android.DbxFile extends java.lang.Object
private static final java.lang.String TAG
private static final java.lang.String WRITE_TEMP_FILE_PREFIX
boolean mIsOpen
private final java.util.concurrent.CopyOnWriteArraySet mListeners
private com.dropbox.sync.android.CoreLogger mLog
private java.io.File mNativeFile
private final com.dropbox.sync.android.NativeFileSystem mNativeFileSystem
private final int mNativeFlags
private final long mNativeHandle
private com.dropbox.sync.android.DbxPath mPath
private final java.util.Set mReadStreams
private int mWaitingForRead
private com.dropbox.sync.android.DbxFile$TrackedFileOutputStream mWriteStream
    static void <clinit>()
    {
        java.lang.String $r0;
        java.lang.Class $r1;

        $r1 = class "Lcom/dropbox/sync/android/DbxFile;";

        $r0 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        <com.dropbox.sync.android.DbxFile: java.lang.String TAG> = $r0;

        return;
    }
    void <init>(com.dropbox.sync.android.NativeFileSystem, com.dropbox.sync.android.DbxPath, int) throws com.dropbox.sync.android.DbxException
    {
        com.dropbox.sync.android.DbxFile r0;
        com.dropbox.sync.android.NativeFileSystem $r1;
        com.dropbox.sync.android.DbxPath $r2;
        int $i0;
        java.util.HashSet $r3;
        java.util.concurrent.CopyOnWriteArraySet $r4;
        com.dropbox.sync.android.CoreLogger $r5;
        long $l1;
        java.lang.String $r6, $r8;
        java.lang.StringBuilder $r7;

        r0 := @this: com.dropbox.sync.android.DbxFile;

        $r1 := @parameter0: com.dropbox.sync.android.NativeFileSystem;

        $r2 := @parameter1: com.dropbox.sync.android.DbxPath;

        $i0 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.dropbox.sync.android.DbxFile: java.io.File mNativeFile> = null;

        r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.DbxFile$TrackedFileOutputStream mWriteStream> = null;

        r0.<com.dropbox.sync.android.DbxFile: int mWaitingForRead> = 0;

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        r0.<com.dropbox.sync.android.DbxFile: java.util.Set mReadStreams> = $r3;

        $r4 = new java.util.concurrent.CopyOnWriteArraySet;

        specialinvoke $r4.<java.util.concurrent.CopyOnWriteArraySet: void <init>()>();

        r0.<com.dropbox.sync.android.DbxFile: java.util.concurrent.CopyOnWriteArraySet mListeners> = $r4;

        r0.<com.dropbox.sync.android.DbxFile: boolean mIsOpen> = 0;

        $r5 = new com.dropbox.sync.android.CoreLogger;

        specialinvoke $r5.<com.dropbox.sync.android.CoreLogger: void <init>()>();

        r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.CoreLogger mLog> = $r5;

        r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.DbxPath mPath> = $r2;

        r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.NativeFileSystem mNativeFileSystem> = $r1;

        r0.<com.dropbox.sync.android.DbxFile: int mNativeFlags> = $i0;

        $l1 = virtualinvoke $r1.<com.dropbox.sync.android.NativeFileSystem: long openFileHandle(com.dropbox.sync.android.DbxPath,int)>($r2, $i0);

        r0.<com.dropbox.sync.android.DbxFile: long mNativeHandle> = $l1;

        $r5 = r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.CoreLogger mLog>;

        $r6 = <com.dropbox.sync.android.DbxFile: java.lang.String TAG>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DbxFile(");

        $r2 = r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.DbxPath mPath>;

        $r8 = virtualinvoke $r2.<com.dropbox.sync.android.DbxPath: java.lang.String log()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") opened.");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<com.dropbox.sync.android.CoreLogger: void d(java.lang.String,java.lang.String)>($r6, $r8);

        r0.<com.dropbox.sync.android.DbxFile: boolean mIsOpen> = 1;

        return;
    }
    static void access$100(com.dropbox.sync.android.DbxFile)
    {
        com.dropbox.sync.android.DbxFile $r0;

        $r0 := @parameter0: com.dropbox.sync.android.DbxFile;

        specialinvoke $r0.<com.dropbox.sync.android.DbxFile: void dispatchFileChangeCallback()>();

        return;
    }
    static void access$300(com.dropbox.sync.android.DbxFile, com.dropbox.sync.android.DbxFile$TrackedFileInputStream) throws java.io.IOException
    {
        com.dropbox.sync.android.DbxFile $r0;
        com.dropbox.sync.android.DbxFile$TrackedFileInputStream $r1;

        $r0 := @parameter0: com.dropbox.sync.android.DbxFile;

        $r1 := @parameter1: com.dropbox.sync.android.DbxFile$TrackedFileInputStream;

        specialinvoke $r0.<com.dropbox.sync.android.DbxFile: void finishRead(com.dropbox.sync.android.DbxFile$TrackedFileInputStream)>($r1);

        return;
    }
    static void access$400(com.dropbox.sync.android.DbxFile, com.dropbox.sync.android.DbxFile$TrackedFileOutputStream) throws java.io.IOException
    {
        com.dropbox.sync.android.DbxFile $r0;
        com.dropbox.sync.android.DbxFile$TrackedFileOutputStream $r1;

        $r0 := @parameter0: com.dropbox.sync.android.DbxFile;

        $r1 := @parameter1: com.dropbox.sync.android.DbxFile$TrackedFileOutputStream;

        specialinvoke $r0.<com.dropbox.sync.android.DbxFile: void finishWrite(com.dropbox.sync.android.DbxFile$TrackedFileOutputStream)>($r1);

        return;
    }
    private void checkClosed()
    {
        com.dropbox.sync.android.DbxFile r0;
        boolean $z0;
        com.dropbox.sync.android.DbxRuntimeException$Closed $r1;
        java.lang.Throwable $r2;

        r0 := @this: com.dropbox.sync.android.DbxFile;

        entermonitor r0;

     label1:
        $z0 = r0.<com.dropbox.sync.android.DbxFile: boolean mIsOpen>;

        if $z0 != 0 goto label3;

        $r1 = new com.dropbox.sync.android.DbxRuntimeException$Closed;

        specialinvoke $r1.<com.dropbox.sync.android.DbxRuntimeException$Closed: void <init>(java.lang.String)>("DbxFile is already closed.");

        throw $r1;

     label2:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

     label3:
        exitmonitor r0;

        return;

        catch java.lang.Throwable from label1 to label2 with label2;
    }
    private void checkStateForRead()
    {
        com.dropbox.sync.android.DbxFile r0;
        com.dropbox.sync.android.DbxFile$TrackedFileOutputStream $r1;
        com.dropbox.sync.android.DbxFile$StreamExclusionException $r2;
        java.lang.Throwable $r3;

        r0 := @this: com.dropbox.sync.android.DbxFile;

        entermonitor r0;

     label1:
        specialinvoke r0.<com.dropbox.sync.android.DbxFile: void checkClosed()>();

        $r1 = r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.DbxFile$TrackedFileOutputStream mWriteStream>;

        if $r1 == null goto label3;

        $r2 = new com.dropbox.sync.android.DbxFile$StreamExclusionException;

        specialinvoke $r2.<com.dropbox.sync.android.DbxFile$StreamExclusionException: void <init>(java.lang.String)>("A write stream is open for this file.  Close that stream first.");

        throw $r2;

     label2:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

     label3:
        exitmonitor r0;

        return;

        catch java.lang.Throwable from label1 to label2 with label2;
    }
    private void checkStateForUpdate()
    {
        com.dropbox.sync.android.DbxFile r0;
        boolean $z0;
        com.dropbox.sync.android.DbxFile$TrackedFileOutputStream $r1;
        com.dropbox.sync.android.DbxFile$StreamExclusionException $r2;
        java.lang.Throwable $r3;
        int $i0;
        java.util.Set $r4;

        r0 := @this: com.dropbox.sync.android.DbxFile;

        entermonitor r0;

     label1:
        specialinvoke r0.<com.dropbox.sync.android.DbxFile: void checkClosed()>();

        $r1 = r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.DbxFile$TrackedFileOutputStream mWriteStream>;

        if $r1 == null goto label3;

        $r2 = new com.dropbox.sync.android.DbxFile$StreamExclusionException;

        specialinvoke $r2.<com.dropbox.sync.android.DbxFile$StreamExclusionException: void <init>(java.lang.String)>("Can\'t update the file when a write stream is open.");

        throw $r2;

     label2:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

     label3:
        $i0 = r0.<com.dropbox.sync.android.DbxFile: int mWaitingForRead>;

        if $i0 <= 0 goto label4;

        $r2 = new com.dropbox.sync.android.DbxFile$StreamExclusionException;

        specialinvoke $r2.<com.dropbox.sync.android.DbxFile$StreamExclusionException: void <init>(java.lang.String)>("Can\'t update a file while read streams are waiting to open.");

        throw $r2;

     label4:
        $r4 = r0.<com.dropbox.sync.android.DbxFile: java.util.Set mReadStreams>;

        $z0 = interfaceinvoke $r4.<java.util.Set: boolean isEmpty()>();

        if $z0 != 0 goto label5;

        $r2 = new com.dropbox.sync.android.DbxFile$StreamExclusionException;

        specialinvoke $r2.<com.dropbox.sync.android.DbxFile$StreamExclusionException: void <init>(java.lang.String)>("Can\'t update the file when a read stream is open.");

        throw $r2;

     label5:
        exitmonitor r0;

        return;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label5 with label2;
    }
    private void checkStateForWrite()
    {
        com.dropbox.sync.android.DbxFile r0;
        boolean $z0;
        com.dropbox.sync.android.DbxFile$TrackedFileOutputStream $r1;
        com.dropbox.sync.android.DbxFile$StreamExclusionException $r2;
        java.lang.Throwable $r3;
        int $i0;
        java.util.Set $r4;

        r0 := @this: com.dropbox.sync.android.DbxFile;

        entermonitor r0;

     label1:
        specialinvoke r0.<com.dropbox.sync.android.DbxFile: void checkClosed()>();

        $r1 = r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.DbxFile$TrackedFileOutputStream mWriteStream>;

        if $r1 == null goto label3;

        $r2 = new com.dropbox.sync.android.DbxFile$StreamExclusionException;

        specialinvoke $r2.<com.dropbox.sync.android.DbxFile$StreamExclusionException: void <init>(java.lang.String)>("A write stream is already open for this file.  Close that stream first.");

        throw $r2;

     label2:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

     label3:
        $i0 = r0.<com.dropbox.sync.android.DbxFile: int mWaitingForRead>;

        if $i0 <= 0 goto label4;

        $r2 = new com.dropbox.sync.android.DbxFile$StreamExclusionException;

        specialinvoke $r2.<com.dropbox.sync.android.DbxFile$StreamExclusionException: void <init>(java.lang.String)>("Can\'t get a write stream while read streams are waiting to open.");

        throw $r2;

     label4:
        $r4 = r0.<com.dropbox.sync.android.DbxFile: java.util.Set mReadStreams>;

        $z0 = interfaceinvoke $r4.<java.util.Set: boolean isEmpty()>();

        if $z0 != 0 goto label5;

        $r2 = new com.dropbox.sync.android.DbxFile$StreamExclusionException;

        specialinvoke $r2.<com.dropbox.sync.android.DbxFile$StreamExclusionException: void <init>(java.lang.String)>("Can\'t get a write stream while read streams are still open.");

        throw $r2;

     label5:
        exitmonitor r0;

        return;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label5 with label2;
    }
    private void dispatchFileChangeCallback()
    {
        com.dropbox.sync.android.DbxFile r0;
        java.util.Iterator $r1;
        java.util.concurrent.CopyOnWriteArraySet $r2;
        com.dropbox.sync.android.DbxFile$2 $r3;

        r0 := @this: com.dropbox.sync.android.DbxFile;

        $r2 = r0.<com.dropbox.sync.android.DbxFile: java.util.concurrent.CopyOnWriteArraySet mListeners>;

        $r1 = virtualinvoke $r2.<java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>();

        $r3 = new com.dropbox.sync.android.DbxFile$2;

        specialinvoke $r3.<com.dropbox.sync.android.DbxFile$2: void <init>(com.dropbox.sync.android.DbxFile,java.util.Iterator)>(r0, $r1);

        staticinvoke <com.dropbox.sync.android.CoreAndroidUtil: void postUserCallback(java.lang.Runnable)>($r3);

        return;
    }
    private void finishRead(com.dropbox.sync.android.DbxFile$TrackedFileInputStream) throws java.io.IOException
    {
        com.dropbox.sync.android.DbxFile r0;
        com.dropbox.sync.android.DbxFile$TrackedFileInputStream $r1;
        long $l0;
        java.util.Set $r2;
        boolean $z0;
        com.dropbox.sync.android.NativeFileSystem $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.dropbox.sync.android.DbxFile;

        $r1 := @parameter0: com.dropbox.sync.android.DbxFile$TrackedFileInputStream;

        entermonitor r0;

     label1:
        $r2 = r0.<com.dropbox.sync.android.DbxFile: java.util.Set mReadStreams>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r1);

        staticinvoke <com.dropbox.sync.android.CoreAssert: void isTrue(boolean)>($z0);

        $r2 = r0.<com.dropbox.sync.android.DbxFile: java.util.Set mReadStreams>;

        interfaceinvoke $r2.<java.util.Set: boolean remove(java.lang.Object)>($r1);

        $r2 = r0.<com.dropbox.sync.android.DbxFile: java.util.Set mReadStreams>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        r0.<com.dropbox.sync.android.DbxFile: java.io.File mNativeFile> = null;

        $r3 = r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.NativeFileSystem mNativeFileSystem>;

        $l0 = r0.<com.dropbox.sync.android.DbxFile: long mNativeHandle>;

        virtualinvoke $r3.<com.dropbox.sync.android.NativeFileSystem: void closeReadFile(long)>($l0);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r4 := @caughtexception;

        exitmonitor r0;

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    private void finishWrite(com.dropbox.sync.android.DbxFile$TrackedFileOutputStream) throws java.io.IOException
    {
        com.dropbox.sync.android.DbxFile r0;
        com.dropbox.sync.android.DbxFile$TrackedFileOutputStream $r1, $r2;
        boolean $z0;
        com.dropbox.sync.android.NativeFileSystem $r3;
        long $l0;
        java.io.File $r4;
        com.dropbox.sync.android.CoreLogger $r5;
        java.lang.String $r6, $r9;
        java.lang.StringBuilder $r7;
        com.dropbox.sync.android.DbxPath $r8;
        java.lang.Throwable $r10, $r11;

        r0 := @this: com.dropbox.sync.android.DbxFile;

        $r1 := @parameter0: com.dropbox.sync.android.DbxFile$TrackedFileOutputStream;

        $z0 = 1;

        entermonitor r0;

     label01:
        $r2 = r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.DbxFile$TrackedFileOutputStream mWriteStream>;

        if $r2 != $r1 goto label07;

     label02:
        staticinvoke <com.dropbox.sync.android.CoreAssert: void isTrue(boolean)>($z0);

     label03:
        $r3 = r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.NativeFileSystem mNativeFileSystem>;

        $l0 = r0.<com.dropbox.sync.android.DbxFile: long mNativeHandle>;

        $r4 = r0.<com.dropbox.sync.android.DbxFile: java.io.File mNativeFile>;

        virtualinvoke $r3.<com.dropbox.sync.android.NativeFileSystem: void writeFile(long,java.io.File,boolean)>($l0, $r4, 1);

     label04:
        goto label05;

     label05:
        r0.<com.dropbox.sync.android.DbxFile: java.io.File mNativeFile> = null;

        r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.DbxFile$TrackedFileOutputStream mWriteStream> = null;

     label06:
        exitmonitor r0;

        return;

     label07:
        $z0 = 0;

        goto label02;

     label08:
        $r10 := @caughtexception;

     label09:
        $r4 = r0.<com.dropbox.sync.android.DbxFile: java.io.File mNativeFile>;

        $z0 = virtualinvoke $r4.<java.io.File: boolean delete()>();

        if $z0 != 0 goto label10;

        $r5 = r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.CoreLogger mLog>;

        $r6 = <com.dropbox.sync.android.DbxFile: java.lang.String TAG>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to delete temp file after write on DbxFile \'");

        $r8 = r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.DbxPath mPath>;

        $r9 = virtualinvoke $r8.<com.dropbox.sync.android.DbxPath: java.lang.String log()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'.");

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<com.dropbox.sync.android.CoreLogger: void e(java.lang.String,java.lang.String)>($r6, $r9);

     label10:
        r0.<com.dropbox.sync.android.DbxFile: java.io.File mNativeFile> = null;

        r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.DbxFile$TrackedFileOutputStream mWriteStream> = null;

        throw $r10;

     label11:
        $r11 := @caughtexception;

        exitmonitor r0;

        throw $r11;

        catch java.lang.Throwable from label01 to label03 with label11;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label09 to label11 with label11;
    }
    private com.dropbox.sync.android.DbxFile$TrackedFileOutputStream getTrackedFileOutputStream(java.io.File, boolean)
    {
        com.dropbox.sync.android.DbxFile r0;
        java.io.File $r1;
        boolean $z0;
        java.io.FileNotFoundException r2;
        com.dropbox.sync.android.DbxFile$TrackedFileOutputStream r3, $r4;
        com.dropbox.sync.android.CoreLogger $r5;
        java.lang.String $r6, $r9;
        java.lang.StringBuilder $r7;
        com.dropbox.sync.android.DbxPath $r8;
        com.dropbox.sync.android.DbxRuntimeException$System $r10;
        java.lang.RuntimeException $r11;
        java.lang.Throwable $r12, $r13;

        r0 := @this: com.dropbox.sync.android.DbxFile;

        $r1 := @parameter0: java.io.File;

        $z0 := @parameter1: boolean;

        entermonitor r0;

     label01:
        r3 = new com.dropbox.sync.android.DbxFile$TrackedFileOutputStream;

     label02:
        specialinvoke r3.<com.dropbox.sync.android.DbxFile$TrackedFileOutputStream: void <init>(com.dropbox.sync.android.DbxFile,java.io.File,boolean,com.dropbox.sync.android.DbxFile$1)>(r0, $r1, $z0, null);

     label03:
        r0.<com.dropbox.sync.android.DbxFile: java.io.File mNativeFile> = $r1;

        r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.DbxFile$TrackedFileOutputStream mWriteStream> = r3;

     label04:
        $r4 = r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.DbxFile$TrackedFileOutputStream mWriteStream>;

        if $r4 != null goto label05;

        $z0 = virtualinvoke $r1.<java.io.File: boolean delete()>();

        if $z0 != 0 goto label05;

        $r5 = r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.CoreLogger mLog>;

        $r6 = <com.dropbox.sync.android.DbxFile: java.lang.String TAG>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to delete temp file for DbxFile \'");

        $r8 = r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.DbxPath mPath>;

        $r9 = virtualinvoke $r8.<com.dropbox.sync.android.DbxPath: java.lang.String log()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'.");

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<com.dropbox.sync.android.CoreLogger: void e(java.lang.String,java.lang.String)>($r6, $r9);

     label05:
        exitmonitor r0;

        return r3;

     label06:
        r2 := @caughtexception;

     label07:
        $r5 = r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.CoreLogger mLog>;

        $r6 = <com.dropbox.sync.android.DbxFile: java.lang.String TAG>;

        $r10 = new com.dropbox.sync.android.DbxRuntimeException$System;

        specialinvoke $r10.<com.dropbox.sync.android.DbxRuntimeException$System: void <init>(java.lang.String,java.lang.Throwable)>("Bad temp file for writing.", r2);

        $r11 = virtualinvoke $r5.<com.dropbox.sync.android.CoreLogger: java.lang.RuntimeException logAndThrow(java.lang.String,java.lang.RuntimeException)>($r6, $r10);

        throw $r11;

     label08:
        $r12 := @caughtexception;

     label09:
        r3 = r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.DbxFile$TrackedFileOutputStream mWriteStream>;

        if r3 != null goto label10;

        $z0 = virtualinvoke $r1.<java.io.File: boolean delete()>();

        if $z0 != 0 goto label10;

        $r5 = r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.CoreLogger mLog>;

        $r6 = <com.dropbox.sync.android.DbxFile: java.lang.String TAG>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to delete temp file for DbxFile \'");

        $r8 = r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.DbxPath mPath>;

        $r9 = virtualinvoke $r8.<com.dropbox.sync.android.DbxPath: java.lang.String log()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'.");

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<com.dropbox.sync.android.CoreLogger: void e(java.lang.String,java.lang.String)>($r6, $r9);

     label10:
        throw $r12;

     label11:
        $r13 := @caughtexception;

        exitmonitor r0;

        throw $r13;

        catch java.io.FileNotFoundException from label02 to label03 with label06;
        catch java.lang.Throwable from label01 to label04 with label08;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label07 to label08 with label08;
        catch java.lang.Throwable from label09 to label11 with label11;
    }
    public void addListener(com.dropbox.sync.android.DbxFile$Listener)
    {
        com.dropbox.sync.android.DbxFile r0;
        com.dropbox.sync.android.DbxFile$Listener $r1;
        long $l0;
        boolean $z0;
        java.lang.NullPointerException $r2;
        java.lang.Throwable $r3;
        java.util.concurrent.CopyOnWriteArraySet $r4;
        com.dropbox.sync.android.NativeFileSystem $r5;
        com.dropbox.sync.android.DbxFile$1 $r6;

        r0 := @this: com.dropbox.sync.android.DbxFile;

        $r1 := @parameter0: com.dropbox.sync.android.DbxFile$Listener;

        entermonitor r0;

        if $r1 != null goto label3;

     label1:
        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Listener must be non-null.");

        throw $r2;

     label2:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

     label3:
        $z0 = r0.<com.dropbox.sync.android.DbxFile: boolean mIsOpen>;

     label4:
        if $z0 != 0 goto label6;

     label5:
        exitmonitor r0;

        return;

     label6:
        $r4 = r0.<com.dropbox.sync.android.DbxFile: java.util.concurrent.CopyOnWriteArraySet mListeners>;

        $z0 = virtualinvoke $r4.<java.util.concurrent.CopyOnWriteArraySet: boolean isEmpty()>();

        if $z0 == 0 goto label7;

        $r5 = r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.NativeFileSystem mNativeFileSystem>;

        $l0 = r0.<com.dropbox.sync.android.DbxFile: long mNativeHandle>;

        $r6 = new com.dropbox.sync.android.DbxFile$1;

        specialinvoke $r6.<com.dropbox.sync.android.DbxFile$1: void <init>(com.dropbox.sync.android.DbxFile)>(r0);

        virtualinvoke $r5.<com.dropbox.sync.android.NativeFileSystem: void setFileListener(long,com.dropbox.sync.android.NativeFileSystem$FileListener)>($l0, $r6);

     label7:
        $r4 = r0.<com.dropbox.sync.android.DbxFile: java.util.concurrent.CopyOnWriteArraySet mListeners>;

        virtualinvoke $r4.<java.util.concurrent.CopyOnWriteArraySet: boolean add(java.lang.Object)>($r1);

     label8:
        goto label5;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
        catch java.lang.Throwable from label6 to label8 with label2;
    }
    public void appendString(java.lang.String) throws java.io.IOException
    {
        com.dropbox.sync.android.DbxFile r0;
        java.lang.String $r1;
        java.io.FileOutputStream $r2;
        byte[] $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.dropbox.sync.android.DbxFile;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<com.dropbox.sync.android.DbxFile: java.io.FileOutputStream getAppendStream()>();

     label1:
        $r3 = virtualinvoke $r1.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        virtualinvoke $r2.<java.io.FileOutputStream: void write(byte[])>($r3);

        virtualinvoke $r2.<java.io.FileOutputStream: void flush()>();

     label2:
        virtualinvoke $r2.<java.io.FileOutputStream: void close()>();

        return;

     label3:
        $r4 := @caughtexception;

        virtualinvoke $r2.<java.io.FileOutputStream: void close()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    void awaitReadyForRead() throws com.dropbox.sync.android.DbxException
    {
        com.dropbox.sync.android.DbxFile r0;
        java.lang.String $r1, $r5;
        com.dropbox.sync.android.CoreLogger $r2;
        java.lang.StringBuilder $r3;
        com.dropbox.sync.android.DbxPath $r4;
        com.dropbox.sync.android.NativeFileSystem $r6;
        long $l0;

        r0 := @this: com.dropbox.sync.android.DbxFile;

        specialinvoke r0.<com.dropbox.sync.android.DbxFile: void checkClosed()>();

        $r2 = r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.CoreLogger mLog>;

        $r1 = <com.dropbox.sync.android.DbxFile: java.lang.String TAG>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Awaiting DbxFile(");

        $r4 = r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.DbxPath mPath>;

        $r5 = virtualinvoke $r4.<com.dropbox.sync.android.DbxPath: java.lang.String log()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") ready for read.");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<com.dropbox.sync.android.CoreLogger: void d(java.lang.String,java.lang.String)>($r1, $r5);

        $r6 = r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.NativeFileSystem mNativeFileSystem>;

        $l0 = r0.<com.dropbox.sync.android.DbxFile: long mNativeHandle>;

        virtualinvoke $r6.<com.dropbox.sync.android.NativeFileSystem: void awaitFileReady(long)>($l0);

        return;
    }
    public void close()
    {
        com.dropbox.sync.android.DbxFile r0;
        java.util.ArrayList r1;
        com.dropbox.sync.android.DbxFile$TrackedFileOutputStream r2;
        boolean $z0;
        com.dropbox.sync.android.CoreLogger $r3;
        java.lang.String $r4, $r7;
        java.lang.StringBuilder $r5;
        com.dropbox.sync.android.DbxPath $r6;
        java.util.concurrent.CopyOnWriteArraySet $r8;
        java.util.Set $r9;
        java.util.Iterator $r10;
        java.lang.Object $r11;
        com.dropbox.sync.android.DbxFile$TrackedFileInputStream r12;
        java.io.IOException r13, r17;
        java.lang.Throwable $r14, $r16;
        com.dropbox.sync.android.NativeFileSystem $r15;
        long $l0;
        com.dropbox.sync.android.DbxException r18, r19;

        r0 := @this: com.dropbox.sync.android.DbxFile;

        entermonitor r0;

     label01:
        $z0 = r0.<com.dropbox.sync.android.DbxFile: boolean mIsOpen>;

        if $z0 != 0 goto label03;

        exitmonitor r0;

     label02:
        return;

     label03:
        $r3 = r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.CoreLogger mLog>;

        $r4 = <com.dropbox.sync.android.DbxFile: java.lang.String TAG>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DbxFile(");

        $r6 = r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.DbxPath mPath>;

        $r7 = virtualinvoke $r6.<com.dropbox.sync.android.DbxPath: java.lang.String log()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") closed.");

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<com.dropbox.sync.android.CoreLogger: void d(java.lang.String,java.lang.String)>($r4, $r7);

        r0.<com.dropbox.sync.android.DbxFile: boolean mIsOpen> = 0;

        $r8 = r0.<com.dropbox.sync.android.DbxFile: java.util.concurrent.CopyOnWriteArraySet mListeners>;

        virtualinvoke $r8.<java.util.concurrent.CopyOnWriteArraySet: void clear()>();

        r2 = r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.DbxFile$TrackedFileOutputStream mWriteStream>;

        r1 = new java.util.ArrayList;

        $r9 = r0.<com.dropbox.sync.android.DbxFile: java.util.Set mReadStreams>;

        specialinvoke r1.<java.util.ArrayList: void <init>(java.util.Collection)>($r9);

        exitmonitor r0;

     label04:
        if r2 == null goto label06;

     label05:
        virtualinvoke r2.<com.dropbox.sync.android.DbxFile$TrackedFileOutputStream: void close()>();

     label06:
        $r10 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

     label08:
        if $z0 == 0 goto label24;

     label09:
        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (com.dropbox.sync.android.DbxFile$TrackedFileInputStream) $r11;

     label10:
        virtualinvoke r12.<com.dropbox.sync.android.DbxFile$TrackedFileInputStream: void close()>();

     label11:
        goto label07;

     label12:
        r13 := @caughtexception;

     label13:
        $r3 = r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.CoreLogger mLog>;

        $r4 = <com.dropbox.sync.android.DbxFile: java.lang.String TAG>;

        virtualinvoke $r3.<com.dropbox.sync.android.CoreLogger: void w(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Failed to close write stream when DbxFile is closed", r13);

     label14:
        goto label07;

     label15:
        $r14 := @caughtexception;

        $r15 = r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.NativeFileSystem mNativeFileSystem>;

        $l0 = r0.<com.dropbox.sync.android.DbxFile: long mNativeHandle>;

     label16:
        virtualinvoke $r15.<com.dropbox.sync.android.NativeFileSystem: void closeFileHandle(long)>($l0);

     label17:
        throw $r14;

     label18:
        $r16 := @caughtexception;

     label19:
        exitmonitor r0;

     label20:
        throw $r16;

     label21:
        r17 := @caughtexception;

     label22:
        $r3 = r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.CoreLogger mLog>;

        $r4 = <com.dropbox.sync.android.DbxFile: java.lang.String TAG>;

        virtualinvoke $r3.<com.dropbox.sync.android.CoreLogger: void w(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Failed to close write stream when DbxFile is closed", r17);

     label23:
        goto label06;

     label24:
        $r15 = r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.NativeFileSystem mNativeFileSystem>;

        $l0 = r0.<com.dropbox.sync.android.DbxFile: long mNativeHandle>;

     label25:
        virtualinvoke $r15.<com.dropbox.sync.android.NativeFileSystem: void closeFileHandle(long)>($l0);

     label26:
        return;

     label27:
        r18 := @caughtexception;

        $r3 = r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.CoreLogger mLog>;

        $r4 = <com.dropbox.sync.android.DbxFile: java.lang.String TAG>;

        virtualinvoke $r3.<com.dropbox.sync.android.CoreLogger: void e(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Failed to close DbxFile.", r18);

        return;

     label28:
        r19 := @caughtexception;

        $r3 = r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.CoreLogger mLog>;

        $r4 = <com.dropbox.sync.android.DbxFile: java.lang.String TAG>;

        virtualinvoke $r3.<com.dropbox.sync.android.CoreLogger: void e(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Failed to close DbxFile.", r19);

        goto label17;

        catch java.lang.Throwable from label01 to label02 with label18;
        catch java.lang.Throwable from label03 to label04 with label18;
        catch java.io.IOException from label05 to label06 with label21;
        catch java.lang.Throwable from label05 to label06 with label15;
        catch java.lang.Throwable from label06 to label08 with label15;
        catch java.lang.Throwable from label09 to label10 with label15;
        catch java.io.IOException from label10 to label11 with label12;
        catch java.lang.Throwable from label10 to label11 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch com.dropbox.sync.android.DbxException from label16 to label17 with label28;
        catch java.lang.Throwable from label19 to label20 with label18;
        catch java.lang.Throwable from label22 to label23 with label15;
        catch com.dropbox.sync.android.DbxException from label25 to label26 with label27;
    }
    protected void finalize()
    {
        com.dropbox.sync.android.DbxFile r0;
        boolean $z0;
        com.dropbox.sync.android.DbxRuntimeException$BadState $r1;

        r0 := @this: com.dropbox.sync.android.DbxFile;

        $z0 = r0.<com.dropbox.sync.android.DbxFile: boolean mIsOpen>;

        if $z0 == 0 goto label1;

        $r1 = new com.dropbox.sync.android.DbxRuntimeException$BadState;

        specialinvoke $r1.<com.dropbox.sync.android.DbxRuntimeException$BadState: void <init>(java.lang.String)>("DbxFile was finalized without being closed.");

        throw $r1;

     label1:
        return;
    }
    public java.io.FileOutputStream getAppendStream() throws java.io.IOException
    {
        com.dropbox.sync.android.DbxFile r0;
        java.io.FileInputStream r1, r6;
        java.io.FileOutputStream r2, r8;
        boolean $z0, $z1;
        java.util.Set $r3;
        java.io.File $r4, $r7;
        com.dropbox.sync.android.NativeFileSystem $r5;
        long $l0;
        byte[] $r9;
        com.dropbox.sync.android.CoreLogger $r10;
        java.lang.String $r11, $r14;
        java.lang.StringBuilder $r12;
        com.dropbox.sync.android.DbxPath $r13;
        com.dropbox.sync.android.DbxFile$TrackedFileOutputStream $r15;
        java.io.IOException r16, r23, r24, r26;
        java.lang.Throwable $r17, $r18, $r22;
        java.io.FileNotFoundException r19;
        com.dropbox.sync.android.DbxRuntimeException$System $r20;
        java.lang.RuntimeException $r21;
        com.dropbox.sync.android.DbxException r25, r27;

        r0 := @this: com.dropbox.sync.android.DbxFile;

        $z0 = 1;

        entermonitor r0;

     label01:
        specialinvoke r0.<com.dropbox.sync.android.DbxFile: void checkStateForWrite()>();

        virtualinvoke r0.<com.dropbox.sync.android.DbxFile: void awaitReadyForRead()>();

        $r3 = r0.<com.dropbox.sync.android.DbxFile: java.util.Set mReadStreams>;

        $z1 = interfaceinvoke $r3.<java.util.Set: boolean isEmpty()>();

        staticinvoke <com.dropbox.sync.android.CoreAssert: void isTrue(boolean)>($z1);

        $r4 = r0.<com.dropbox.sync.android.DbxFile: java.io.File mNativeFile>;

        if $r4 != null goto label21;

     label02:
        staticinvoke <com.dropbox.sync.android.CoreAssert: void isTrue(boolean)>($z0);

        $r5 = r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.NativeFileSystem mNativeFileSystem>;

        $l0 = r0.<com.dropbox.sync.android.DbxFile: long mNativeHandle>;

        $r4 = virtualinvoke $r5.<com.dropbox.sync.android.NativeFileSystem: java.io.File getReadFile(long)>($l0);

     label03:
        r6 = null;

     label04:
        r1 = new java.io.FileInputStream;

        specialinvoke r1.<java.io.FileInputStream: void <init>(java.io.File)>($r4);

     label05:
        $r5 = r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.NativeFileSystem mNativeFileSystem>;

        $r7 = virtualinvoke $r5.<com.dropbox.sync.android.NativeFileSystem: java.io.File createTempFile(java.lang.String)>("write");

     label06:
        r8 = null;

     label07:
        r2 = new java.io.FileOutputStream;

     label08:
        specialinvoke r2.<java.io.FileOutputStream: void <init>(java.io.File)>($r7);

     label09:
        $r9 = newarray (byte)[65536];

     label10:
        staticinvoke <com.dropbox.sync.android.CoreIOUtil: void copyStreamToStream(java.io.InputStream,java.io.OutputStream,byte[],com.dropbox.sync.android.CoreIOUtil$ProgressListener)>(r1, r2, $r9, null);

        virtualinvoke r2.<java.io.FileOutputStream: void flush()>();

     label11:
        if r2 == null goto label13;

     label12:
        virtualinvoke r2.<java.io.FileOutputStream: void close()>();

     label13:
        goto label14;

     label14:
        if r1 == null goto label16;

     label15:
        virtualinvoke r1.<java.io.FileInputStream: void close()>();

     label16:
        if $r4 == null goto label19;

     label17:
        $r5 = r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.NativeFileSystem mNativeFileSystem>;

        $l0 = r0.<com.dropbox.sync.android.DbxFile: long mNativeHandle>;

     label18:
        virtualinvoke $r5.<com.dropbox.sync.android.NativeFileSystem: void closeReadFile(long)>($l0);

     label19:
        $r3 = r0.<com.dropbox.sync.android.DbxFile: java.util.Set mReadStreams>;

        $z0 = interfaceinvoke $r3.<java.util.Set: boolean isEmpty()>();

        staticinvoke <com.dropbox.sync.android.CoreAssert: void isTrue(boolean)>($z0);

        $r15 = specialinvoke r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.DbxFile$TrackedFileOutputStream getTrackedFileOutputStream(java.io.File,boolean)>($r7, 1);

     label20:
        exitmonitor r0;

        return $r15;

     label21:
        $z0 = 0;

        goto label02;

     label22:
        r16 := @caughtexception;

     label23:
        $r10 = r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.CoreLogger mLog>;

        $r11 = <com.dropbox.sync.android.DbxFile: java.lang.String TAG>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to close temp file for DbxFile \'");

        $r13 = r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.DbxPath mPath>;

        $r14 = virtualinvoke $r13.<com.dropbox.sync.android.DbxPath: java.lang.String log()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\':");

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<com.dropbox.sync.android.CoreLogger: void e(java.lang.String,java.lang.String,java.lang.Throwable)>($r11, $r14, r16);

     label24:
        goto label13;

     label25:
        $r17 := @caughtexception;

        r6 = r1;

     label26:
        if r6 == null goto label28;

     label27:
        virtualinvoke r6.<java.io.FileInputStream: void close()>();

     label28:
        if $r4 == null goto label31;

     label29:
        $r5 = r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.NativeFileSystem mNativeFileSystem>;

        $l0 = r0.<com.dropbox.sync.android.DbxFile: long mNativeHandle>;

     label30:
        virtualinvoke $r5.<com.dropbox.sync.android.NativeFileSystem: void closeReadFile(long)>($l0);

     label31:
        $r3 = r0.<com.dropbox.sync.android.DbxFile: java.util.Set mReadStreams>;

        $z0 = interfaceinvoke $r3.<java.util.Set: boolean isEmpty()>();

        staticinvoke <com.dropbox.sync.android.CoreAssert: void isTrue(boolean)>($z0);

        throw $r17;

     label32:
        $r18 := @caughtexception;

        exitmonitor r0;

        throw $r18;

     label33:
        r19 := @caughtexception;

     label34:
        $r10 = r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.CoreLogger mLog>;

        $r11 = <com.dropbox.sync.android.DbxFile: java.lang.String TAG>;

        $r20 = new com.dropbox.sync.android.DbxRuntimeException$System;

        specialinvoke $r20.<com.dropbox.sync.android.DbxRuntimeException$System: void <init>(java.lang.String,java.lang.Throwable)>("Bad temp file for writing.", r19);

        $r21 = virtualinvoke $r10.<com.dropbox.sync.android.CoreLogger: java.lang.RuntimeException logAndThrow(java.lang.String,java.lang.RuntimeException)>($r11, $r20);

        throw $r21;

     label35:
        $r22 := @caughtexception;

     label36:
        if r8 == null goto label38;

     label37:
        virtualinvoke r8.<java.io.FileOutputStream: void close()>();

     label38:
        $z0 = virtualinvoke $r7.<java.io.File: boolean delete()>();

        if $z0 != 0 goto label39;

        $r10 = r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.CoreLogger mLog>;

        $r11 = <com.dropbox.sync.android.DbxFile: java.lang.String TAG>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to delete temp file for DbxFile \'");

        $r13 = r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.DbxPath mPath>;

        $r14 = virtualinvoke $r13.<com.dropbox.sync.android.DbxPath: java.lang.String log()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'.");

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<com.dropbox.sync.android.CoreLogger: void e(java.lang.String,java.lang.String)>($r11, $r14);

     label39:
        throw $r22;

     label40:
        r23 := @caughtexception;

        $r10 = r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.CoreLogger mLog>;

        $r11 = <com.dropbox.sync.android.DbxFile: java.lang.String TAG>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to close temp file for DbxFile \'");

        $r13 = r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.DbxPath mPath>;

        $r14 = virtualinvoke $r13.<com.dropbox.sync.android.DbxPath: java.lang.String log()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\':");

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<com.dropbox.sync.android.CoreLogger: void e(java.lang.String,java.lang.String,java.lang.Throwable)>($r11, $r14, r23);

     label41:
        goto label38;

     label42:
        r24 := @caughtexception;

     label43:
        $r10 = r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.CoreLogger mLog>;

        $r11 = <com.dropbox.sync.android.DbxFile: java.lang.String TAG>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to close readable file for DbxFile \'");

        $r13 = r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.DbxPath mPath>;

        $r14 = virtualinvoke $r13.<com.dropbox.sync.android.DbxPath: java.lang.String log()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\':");

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<com.dropbox.sync.android.CoreLogger: void e(java.lang.String,java.lang.String,java.lang.Throwable)>($r11, $r14, r24);

        goto label16;

     label44:
        r25 := @caughtexception;

        $r10 = r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.CoreLogger mLog>;

        $r11 = <com.dropbox.sync.android.DbxFile: java.lang.String TAG>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to close readable file for DbxFile \'");

        $r13 = r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.DbxPath mPath>;

        $r14 = virtualinvoke $r13.<com.dropbox.sync.android.DbxPath: java.lang.String log()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\':");

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<com.dropbox.sync.android.CoreLogger: void e(java.lang.String,java.lang.String,java.lang.Throwable)>($r11, $r14, r25);

        goto label19;

     label45:
        r26 := @caughtexception;

        $r10 = r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.CoreLogger mLog>;

        $r11 = <com.dropbox.sync.android.DbxFile: java.lang.String TAG>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to close readable file for DbxFile \'");

        $r13 = r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.DbxPath mPath>;

        $r14 = virtualinvoke $r13.<com.dropbox.sync.android.DbxPath: java.lang.String log()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\':");

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<com.dropbox.sync.android.CoreLogger: void e(java.lang.String,java.lang.String,java.lang.Throwable)>($r11, $r14, r26);

        goto label28;

     label46:
        r27 := @caughtexception;

        $r10 = r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.CoreLogger mLog>;

        $r11 = <com.dropbox.sync.android.DbxFile: java.lang.String TAG>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to close readable file for DbxFile \'");

        $r13 = r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.DbxPath mPath>;

        $r14 = virtualinvoke $r13.<com.dropbox.sync.android.DbxPath: java.lang.String log()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\':");

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<com.dropbox.sync.android.CoreLogger: void e(java.lang.String,java.lang.String,java.lang.Throwable)>($r11, $r14, r27);

     label47:
        goto label31;

     label48:
        $r17 := @caughtexception;

        goto label26;

     label49:
        $r22 := @caughtexception;

        r8 = r2;

        goto label36;

     label50:
        r19 := @caughtexception;

        r8 = r2;

        goto label34;

        catch java.lang.Throwable from label01 to label03 with label32;
        catch java.lang.Throwable from label04 to label05 with label48;
        catch java.lang.Throwable from label05 to label06 with label25;
        catch java.io.FileNotFoundException from label08 to label09 with label33;
        catch java.lang.Throwable from label07 to label09 with label35;
        catch java.io.FileNotFoundException from label10 to label11 with label50;
        catch java.lang.Throwable from label09 to label11 with label49;
        catch java.io.IOException from label12 to label13 with label22;
        catch java.lang.Throwable from label12 to label13 with label25;
        catch java.io.IOException from label15 to label16 with label42;
        catch java.lang.Throwable from label15 to label16 with label32;
        catch com.dropbox.sync.android.DbxException from label18 to label19 with label44;
        catch java.lang.Throwable from label17 to label19 with label32;
        catch java.lang.Throwable from label19 to label20 with label32;
        catch java.lang.Throwable from label23 to label24 with label25;
        catch java.io.IOException from label27 to label28 with label45;
        catch java.lang.Throwable from label27 to label28 with label32;
        catch com.dropbox.sync.android.DbxException from label30 to label31 with label46;
        catch java.lang.Throwable from label29 to label31 with label32;
        catch java.lang.Throwable from label31 to label32 with label32;
        catch java.lang.Throwable from label34 to label35 with label35;
        catch java.io.IOException from label37 to label38 with label40;
        catch java.lang.Throwable from label37 to label38 with label25;
        catch java.lang.Throwable from label38 to label41 with label25;
        catch java.lang.Throwable from label43 to label47 with label32;
    }
    public com.dropbox.sync.android.DbxFileInfo getInfo() throws com.dropbox.sync.android.DbxException
    {
        com.dropbox.sync.android.DbxFile r0;
        long $l0;
        com.dropbox.sync.android.DbxFileInfo $r1;
        com.dropbox.sync.android.NativeFileSystem $r2;

        r0 := @this: com.dropbox.sync.android.DbxFile;

        $r2 = r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.NativeFileSystem mNativeFileSystem>;

        $l0 = r0.<com.dropbox.sync.android.DbxFile: long mNativeHandle>;

        $r1 = virtualinvoke $r2.<com.dropbox.sync.android.NativeFileSystem: com.dropbox.sync.android.DbxFileInfo getFileInfo(long)>($l0);

        return $r1;
    }
    public com.dropbox.sync.android.DbxFileStatus getNewerStatus() throws com.dropbox.sync.android.DbxException
    {
        com.dropbox.sync.android.DbxFile r0;
        long $l0;
        com.dropbox.sync.android.DbxFileStatus $r1;
        com.dropbox.sync.android.NativeFileSystem $r2;
        java.lang.Throwable $r3;

        r0 := @this: com.dropbox.sync.android.DbxFile;

        entermonitor r0;

     label1:
        specialinvoke r0.<com.dropbox.sync.android.DbxFile: void checkClosed()>();

        $r2 = r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.NativeFileSystem mNativeFileSystem>;

        $l0 = r0.<com.dropbox.sync.android.DbxFile: long mNativeHandle>;

        $r1 = virtualinvoke $r2.<com.dropbox.sync.android.NativeFileSystem: com.dropbox.sync.android.DbxFileStatus getNewerFileStatus(long)>($l0);

     label2:
        exitmonitor r0;

        return $r1;

     label3:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public com.dropbox.sync.android.DbxPath getPath()
    {
        com.dropbox.sync.android.DbxFile r0;
        com.dropbox.sync.android.DbxPath r1;

        r0 := @this: com.dropbox.sync.android.DbxFile;

        r1 = r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.DbxPath mPath>;

        return r1;
    }
    public java.io.FileInputStream getReadStream() throws com.dropbox.sync.android.DbxException, java.io.IOException
    {
        com.dropbox.sync.android.DbxFile r0;
        com.dropbox.sync.android.DbxFile$TrackedFileInputStream r1;
        int $i0;
        java.util.Set $r2;
        boolean $z0;
        java.io.File $r3;
        com.dropbox.sync.android.NativeFileSystem $r4;
        long $l1;
        java.lang.Throwable $r5, $r6, $r7, $r14, $r18;
        com.dropbox.sync.android.DbxException r8, r19;
        com.dropbox.sync.android.CoreLogger $r9;
        java.lang.String $r10, $r13;
        java.lang.StringBuilder $r11;
        com.dropbox.sync.android.DbxPath $r12;
        java.io.FileNotFoundException r15;
        com.dropbox.sync.android.DbxRuntimeException$System $r16;
        java.lang.RuntimeException $r17;

        r0 := @this: com.dropbox.sync.android.DbxFile;

        entermonitor r0;

     label01:
        specialinvoke r0.<com.dropbox.sync.android.DbxFile: void checkStateForRead()>();

        $i0 = r0.<com.dropbox.sync.android.DbxFile: int mWaitingForRead>;

        $i0 = $i0 + 1;

        r0.<com.dropbox.sync.android.DbxFile: int mWaitingForRead> = $i0;

        exitmonitor r0;

     label02:
        virtualinvoke r0.<com.dropbox.sync.android.DbxFile: void awaitReadyForRead()>();

     label03:
        goto label04;

     label04:
        entermonitor r0;

     label05:
        $i0 = r0.<com.dropbox.sync.android.DbxFile: int mWaitingForRead>;

        $i0 = $i0 + -1;

        r0.<com.dropbox.sync.android.DbxFile: int mWaitingForRead> = $i0;

        specialinvoke r0.<com.dropbox.sync.android.DbxFile: void checkStateForRead()>();

        $r2 = r0.<com.dropbox.sync.android.DbxFile: java.util.Set mReadStreams>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean isEmpty()>();

        if $z0 == 0 goto label07;

        $r3 = r0.<com.dropbox.sync.android.DbxFile: java.io.File mNativeFile>;

        if $r3 != null goto label26;

        $z0 = 1;

     label06:
        staticinvoke <com.dropbox.sync.android.CoreAssert: void isTrue(boolean)>($z0);

        $r4 = r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.NativeFileSystem mNativeFileSystem>;

        $l1 = r0.<com.dropbox.sync.android.DbxFile: long mNativeHandle>;

        $r3 = virtualinvoke $r4.<com.dropbox.sync.android.NativeFileSystem: java.io.File getReadFile(long)>($l1);

        r0.<com.dropbox.sync.android.DbxFile: java.io.File mNativeFile> = $r3;

     label07:
        r1 = new com.dropbox.sync.android.DbxFile$TrackedFileInputStream;

        $r3 = r0.<com.dropbox.sync.android.DbxFile: java.io.File mNativeFile>;

     label08:
        specialinvoke r1.<com.dropbox.sync.android.DbxFile$TrackedFileInputStream: void <init>(com.dropbox.sync.android.DbxFile,java.io.File,com.dropbox.sync.android.DbxFile$1)>(r0, $r3, null);

     label09:
        $r2 = r0.<com.dropbox.sync.android.DbxFile: java.util.Set mReadStreams>;

     label10:
        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

     label11:
        $r2 = r0.<com.dropbox.sync.android.DbxFile: java.util.Set mReadStreams>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean isEmpty()>();

     label12:
        if $z0 == 0 goto label15;

     label13:
        r0.<com.dropbox.sync.android.DbxFile: java.io.File mNativeFile> = null;

        $r4 = r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.NativeFileSystem mNativeFileSystem>;

        $l1 = r0.<com.dropbox.sync.android.DbxFile: long mNativeHandle>;

     label14:
        virtualinvoke $r4.<com.dropbox.sync.android.NativeFileSystem: void closeReadFile(long)>($l1);

     label15:
        exitmonitor r0;

     label16:
        return r1;

     label17:
        $r5 := @caughtexception;

     label18:
        exitmonitor r0;

     label19:
        throw $r5;

     label20:
        $r6 := @caughtexception;

        entermonitor r0;

     label21:
        $i0 = r0.<com.dropbox.sync.android.DbxFile: int mWaitingForRead>;

        $i0 = $i0 + -1;

        r0.<com.dropbox.sync.android.DbxFile: int mWaitingForRead> = $i0;

        exitmonitor r0;

     label22:
        throw $r6;

     label23:
        $r7 := @caughtexception;

     label24:
        exitmonitor r0;

     label25:
        throw $r7;

     label26:
        $z0 = 0;

        goto label06;

     label27:
        r8 := @caughtexception;

     label28:
        $r9 = r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.CoreLogger mLog>;

        $r10 = <com.dropbox.sync.android.DbxFile: java.lang.String TAG>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to close readable file for DbxFile \'");

        $r12 = r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.DbxPath mPath>;

        $r13 = virtualinvoke $r12.<com.dropbox.sync.android.DbxPath: java.lang.String log()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\':");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<com.dropbox.sync.android.CoreLogger: void e(java.lang.String,java.lang.String,java.lang.Throwable)>($r10, $r13, r8);

        goto label15;

     label29:
        $r14 := @caughtexception;

        exitmonitor r0;

     label30:
        throw $r14;

     label31:
        r15 := @caughtexception;

     label32:
        $r9 = r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.CoreLogger mLog>;

        $r10 = <com.dropbox.sync.android.DbxFile: java.lang.String TAG>;

        $r16 = new com.dropbox.sync.android.DbxRuntimeException$System;

        specialinvoke $r16.<com.dropbox.sync.android.DbxRuntimeException$System: void <init>(java.lang.String,java.lang.Throwable)>("Bad cache file for reading.", r15);

        $r17 = virtualinvoke $r9.<com.dropbox.sync.android.CoreLogger: java.lang.RuntimeException logAndThrow(java.lang.String,java.lang.RuntimeException)>($r10, $r16);

        throw $r17;

     label33:
        $r18 := @caughtexception;

     label34:
        $r2 = r0.<com.dropbox.sync.android.DbxFile: java.util.Set mReadStreams>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean isEmpty()>();

     label35:
        if $z0 == 0 goto label38;

     label36:
        r0.<com.dropbox.sync.android.DbxFile: java.io.File mNativeFile> = null;

        $r4 = r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.NativeFileSystem mNativeFileSystem>;

        $l1 = r0.<com.dropbox.sync.android.DbxFile: long mNativeHandle>;

     label37:
        virtualinvoke $r4.<com.dropbox.sync.android.NativeFileSystem: void closeReadFile(long)>($l1);

     label38:
        throw $r18;

     label39:
        r19 := @caughtexception;

        $r9 = r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.CoreLogger mLog>;

        $r10 = <com.dropbox.sync.android.DbxFile: java.lang.String TAG>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to close readable file for DbxFile \'");

        $r12 = r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.DbxPath mPath>;

        $r13 = virtualinvoke $r12.<com.dropbox.sync.android.DbxPath: java.lang.String log()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\':");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<com.dropbox.sync.android.CoreLogger: void e(java.lang.String,java.lang.String,java.lang.Throwable)>($r10, $r13, r19);

     label40:
        goto label38;

        catch java.lang.Throwable from label01 to label02 with label17;
        catch java.lang.Throwable from label02 to label03 with label20;
        catch java.lang.Throwable from label05 to label07 with label29;
        catch java.io.FileNotFoundException from label08 to label09 with label31;
        catch java.io.FileNotFoundException from label10 to label11 with label31;
        catch java.lang.Throwable from label07 to label11 with label33;
        catch java.lang.Throwable from label11 to label12 with label29;
        catch com.dropbox.sync.android.DbxException from label14 to label15 with label27;
        catch java.lang.Throwable from label13 to label15 with label29;
        catch java.lang.Throwable from label15 to label16 with label29;
        catch java.lang.Throwable from label18 to label19 with label17;
        catch java.lang.Throwable from label21 to label22 with label23;
        catch java.lang.Throwable from label24 to label25 with label23;
        catch java.lang.Throwable from label28 to label30 with label29;
        catch java.lang.Throwable from label32 to label33 with label33;
        catch java.lang.Throwable from label34 to label35 with label29;
        catch com.dropbox.sync.android.DbxException from label37 to label38 with label39;
        catch java.lang.Throwable from label36 to label38 with label29;
        catch java.lang.Throwable from label38 to label40 with label29;
    }
    public com.dropbox.sync.android.DbxFileStatus getSyncStatus() throws com.dropbox.sync.android.DbxException
    {
        com.dropbox.sync.android.DbxFile r0;
        long $l0;
        com.dropbox.sync.android.DbxFileStatus $r1;
        com.dropbox.sync.android.NativeFileSystem $r2;
        java.lang.Throwable $r3;

        r0 := @this: com.dropbox.sync.android.DbxFile;

        entermonitor r0;

     label1:
        specialinvoke r0.<com.dropbox.sync.android.DbxFile: void checkClosed()>();

        $r2 = r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.NativeFileSystem mNativeFileSystem>;

        $l0 = r0.<com.dropbox.sync.android.DbxFile: long mNativeHandle>;

        $r1 = virtualinvoke $r2.<com.dropbox.sync.android.NativeFileSystem: com.dropbox.sync.android.DbxFileStatus getFileStatus(long)>($l0);

     label2:
        exitmonitor r0;

        return $r1;

     label3:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public java.io.FileOutputStream getWriteStream() throws java.io.IOException
    {
        com.dropbox.sync.android.DbxFile r0;
        boolean $z0;
        java.io.File $r1;
        com.dropbox.sync.android.NativeFileSystem $r2;
        com.dropbox.sync.android.DbxFile$TrackedFileOutputStream $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.dropbox.sync.android.DbxFile;

        $z0 = 0;

        entermonitor r0;

     label1:
        specialinvoke r0.<com.dropbox.sync.android.DbxFile: void checkStateForWrite()>();

        $r1 = r0.<com.dropbox.sync.android.DbxFile: java.io.File mNativeFile>;

        if $r1 != null goto label2;

        $z0 = 1;

     label2:
        staticinvoke <com.dropbox.sync.android.CoreAssert: void isTrue(boolean)>($z0);

        $r2 = r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.NativeFileSystem mNativeFileSystem>;

        $r1 = virtualinvoke $r2.<com.dropbox.sync.android.NativeFileSystem: java.io.File createTempFile(java.lang.String)>("write");

        $r3 = specialinvoke r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.DbxFile$TrackedFileOutputStream getTrackedFileOutputStream(java.io.File,boolean)>($r1, 0);

     label3:
        exitmonitor r0;

        return $r3;

     label4:
        $r4 := @caughtexception;

        exitmonitor r0;

        throw $r4;

        catch java.lang.Throwable from label1 to label3 with label4;
    }
    public boolean isThumb()
    {
        com.dropbox.sync.android.DbxFile r0;
        boolean $z0;
        int $i0;

        r0 := @this: com.dropbox.sync.android.DbxFile;

        $i0 = r0.<com.dropbox.sync.android.DbxFile: int mNativeFlags>;

        $z0 = staticinvoke <com.dropbox.sync.android.NativeFileSystem: boolean isOpenThumbFlags(int)>($i0);

        return $z0;
    }
    public java.lang.String readString() throws java.io.IOException
    {
        com.dropbox.sync.android.DbxFile r0;
        java.io.ByteArrayOutputStream r1;
        java.io.FileInputStream $r2;
        byte[] $r3;
        java.lang.String $r4;
        java.lang.Throwable $r5, $r6, $r7;

        r0 := @this: com.dropbox.sync.android.DbxFile;

        $r2 = virtualinvoke r0.<com.dropbox.sync.android.DbxFile: java.io.FileInputStream getReadStream()>();

        r1 = new java.io.ByteArrayOutputStream;

        specialinvoke r1.<java.io.ByteArrayOutputStream: void <init>()>();

     label1:
        $r3 = newarray (byte)[65536];

        staticinvoke <com.dropbox.sync.android.CoreIOUtil: void copyStreamToStream(java.io.InputStream,java.io.OutputStream,byte[],com.dropbox.sync.android.CoreIOUtil$ProgressListener)>($r2, r1, $r3, null);

        virtualinvoke r1.<java.io.ByteArrayOutputStream: void flush()>();

     label2:
        virtualinvoke $r2.<java.io.FileInputStream: void close()>();

     label3:
        virtualinvoke r1.<java.io.ByteArrayOutputStream: void close()>();

        $r4 = new java.lang.String;

        $r3 = virtualinvoke r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r4.<java.lang.String: void <init>(byte[],java.lang.String)>($r3, "UTF-8");

        return $r4;

     label4:
        $r5 := @caughtexception;

        virtualinvoke r1.<java.io.ByteArrayOutputStream: void close()>();

        throw $r5;

     label5:
        $r6 := @caughtexception;

     label6:
        virtualinvoke $r2.<java.io.FileInputStream: void close()>();

     label7:
        virtualinvoke r1.<java.io.ByteArrayOutputStream: void close()>();

        throw $r6;

     label8:
        $r7 := @caughtexception;

        virtualinvoke r1.<java.io.ByteArrayOutputStream: void close()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label6 to label7 with label8;
    }
    public void removeListener(com.dropbox.sync.android.DbxFile$Listener)
    {
        com.dropbox.sync.android.DbxFile r0;
        com.dropbox.sync.android.DbxFile$Listener $r1;
        long $l0;
        java.lang.NullPointerException $r2;
        java.lang.Throwable $r3;
        boolean $z0;
        java.util.concurrent.CopyOnWriteArraySet $r4;
        com.dropbox.sync.android.NativeFileSystem $r5;

        r0 := @this: com.dropbox.sync.android.DbxFile;

        $r1 := @parameter0: com.dropbox.sync.android.DbxFile$Listener;

        entermonitor r0;

        if $r1 != null goto label3;

     label1:
        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Listener must be non-null.");

        throw $r2;

     label2:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

     label3:
        $z0 = r0.<com.dropbox.sync.android.DbxFile: boolean mIsOpen>;

     label4:
        if $z0 != 0 goto label6;

     label5:
        exitmonitor r0;

        return;

     label6:
        $r4 = r0.<com.dropbox.sync.android.DbxFile: java.util.concurrent.CopyOnWriteArraySet mListeners>;

        $z0 = virtualinvoke $r4.<java.util.concurrent.CopyOnWriteArraySet: boolean remove(java.lang.Object)>($r1);

        if $z0 == 0 goto label5;

        $r4 = r0.<com.dropbox.sync.android.DbxFile: java.util.concurrent.CopyOnWriteArraySet mListeners>;

        $z0 = virtualinvoke $r4.<java.util.concurrent.CopyOnWriteArraySet: boolean isEmpty()>();

        if $z0 == 0 goto label5;

        $r5 = r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.NativeFileSystem mNativeFileSystem>;

        $l0 = r0.<com.dropbox.sync.android.DbxFile: long mNativeHandle>;

        virtualinvoke $r5.<com.dropbox.sync.android.NativeFileSystem: void setFileListener(long,com.dropbox.sync.android.NativeFileSystem$FileListener)>($l0, null);

     label7:
        goto label5;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
        catch java.lang.Throwable from label6 to label7 with label2;
    }
    public boolean update() throws com.dropbox.sync.android.DbxException
    {
        com.dropbox.sync.android.DbxFile r0;
        java.lang.String $r1, $r5;
        com.dropbox.sync.android.CoreLogger $r2;
        java.lang.StringBuilder $r3;
        com.dropbox.sync.android.DbxPath $r4;
        com.dropbox.sync.android.NativeFileSystem $r6;
        long $l0;
        boolean $z0;
        java.lang.Throwable $r7;

        r0 := @this: com.dropbox.sync.android.DbxFile;

        entermonitor r0;

     label1:
        specialinvoke r0.<com.dropbox.sync.android.DbxFile: void checkStateForUpdate()>();

        $r2 = r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.CoreLogger mLog>;

        $r1 = <com.dropbox.sync.android.DbxFile: java.lang.String TAG>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Updating DbxFile(");

        $r4 = r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.DbxPath mPath>;

        $r5 = virtualinvoke $r4.<com.dropbox.sync.android.DbxPath: java.lang.String log()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(").");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<com.dropbox.sync.android.CoreLogger: void d(java.lang.String,java.lang.String)>($r1, $r5);

        $r6 = r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.NativeFileSystem mNativeFileSystem>;

        $l0 = r0.<com.dropbox.sync.android.DbxFile: long mNativeHandle>;

        $z0 = virtualinvoke $r6.<com.dropbox.sync.android.NativeFileSystem: boolean updateFileHandle(long)>($l0);

     label2:
        exitmonitor r0;

        return $z0;

     label3:
        $r7 := @caughtexception;

        exitmonitor r0;

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public void writeFromExistingFile(java.io.File, boolean) throws java.io.IOException
    {
        com.dropbox.sync.android.DbxFile r0;
        java.io.File $r1;
        boolean $z0;
        long $l0;
        com.dropbox.sync.android.NativeFileSystem $r2;
        java.lang.Throwable $r3;

        r0 := @this: com.dropbox.sync.android.DbxFile;

        $r1 := @parameter0: java.io.File;

        $z0 := @parameter1: boolean;

        entermonitor r0;

     label1:
        specialinvoke r0.<com.dropbox.sync.android.DbxFile: void checkStateForWrite()>();

        $r2 = r0.<com.dropbox.sync.android.DbxFile: com.dropbox.sync.android.NativeFileSystem mNativeFileSystem>;

        $l0 = r0.<com.dropbox.sync.android.DbxFile: long mNativeHandle>;

        virtualinvoke $r2.<com.dropbox.sync.android.NativeFileSystem: void writeFile(long,java.io.File,boolean)>($l0, $r1, $z0);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public void writeString(java.lang.String) throws java.io.IOException
    {
        com.dropbox.sync.android.DbxFile r0;
        java.lang.String $r1;
        java.io.FileOutputStream $r2;
        byte[] $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.dropbox.sync.android.DbxFile;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<com.dropbox.sync.android.DbxFile: java.io.FileOutputStream getWriteStream()>();

     label1:
        $r3 = virtualinvoke $r1.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        virtualinvoke $r2.<java.io.FileOutputStream: void write(byte[])>($r3);

        virtualinvoke $r2.<java.io.FileOutputStream: void flush()>();

     label2:
        virtualinvoke $r2.<java.io.FileOutputStream: void close()>();

        return;

     label3:
        $r4 := @caughtexception;

        virtualinvoke $r2.<java.io.FileOutputStream: void close()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
