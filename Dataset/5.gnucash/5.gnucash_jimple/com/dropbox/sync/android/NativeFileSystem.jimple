com.dropbox.sync.android.NativeFileSystem extends com.dropbox.sync.android.NativeClientBase
public static final int FILE_OPEN_CREATE
public static int FILE_OPEN_CREATE_EXCL
public static final int FILE_OPEN_PREFER_LATEST
public static int FILE_OPEN_THUMB_FORMAT_MASK
public static int FILE_OPEN_THUMB_JPG
public static int FILE_OPEN_THUMB_L
public static int FILE_OPEN_THUMB_M
public static int FILE_OPEN_THUMB_PNG
public static int FILE_OPEN_THUMB_S
public static int FILE_OPEN_THUMB_SIZE_MASK
public static int FILE_OPEN_THUMB_XL
public static int FILE_OPEN_THUMB_XS
public static final long INVALID_FILE_HANDLE
private static final java.lang.String TAG
public static final java.lang.String TEMP_FILE_EXT
private final java.util.Map mFileListeners
private final java.util.Map mPathListeners
private com.dropbox.sync.android.NativeFileSystem$SyncStatusListener mSyncStatusListener
    static void <clinit>()
    {
        java.lang.String $r0;
        java.lang.Class $r1;

        $r1 = class "Lcom/dropbox/sync/android/NativeFileSystem;";

        $r0 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        <com.dropbox.sync.android.NativeFileSystem: java.lang.String TAG> = $r0;

        <com.dropbox.sync.android.NativeFileSystem: int FILE_OPEN_CREATE_EXCL> = 3;

        <com.dropbox.sync.android.NativeFileSystem: int FILE_OPEN_THUMB_XS> = 8;

        <com.dropbox.sync.android.NativeFileSystem: int FILE_OPEN_THUMB_S> = 16;

        <com.dropbox.sync.android.NativeFileSystem: int FILE_OPEN_THUMB_M> = 24;

        <com.dropbox.sync.android.NativeFileSystem: int FILE_OPEN_THUMB_L> = 32;

        <com.dropbox.sync.android.NativeFileSystem: int FILE_OPEN_THUMB_XL> = 40;

        <com.dropbox.sync.android.NativeFileSystem: int FILE_OPEN_THUMB_SIZE_MASK> = 56;

        <com.dropbox.sync.android.NativeFileSystem: int FILE_OPEN_THUMB_JPG> = 0;

        <com.dropbox.sync.android.NativeFileSystem: int FILE_OPEN_THUMB_PNG> = 64;

        <com.dropbox.sync.android.NativeFileSystem: int FILE_OPEN_THUMB_FORMAT_MASK> = 64;

        staticinvoke <com.dropbox.sync.android.NativeLib: void ensureLoaded()>();

        staticinvoke <com.dropbox.sync.android.NativeFileSystem: void nativeClassInit()>();

        return;
    }
    void <init>(com.dropbox.sync.android.NativeApp, java.io.File, java.util.EnumSet) throws com.dropbox.sync.android.DbxException
    {
        com.dropbox.sync.android.NativeFileSystem r0;
        com.dropbox.sync.android.NativeApp $r1;
        java.io.File $r2;
        java.util.EnumSet r3;
        long $l0;
        com.dropbox.sync.android.NativeFileSystem$Config $r4;
        java.util.HashMap $r5;

        r0 := @this: com.dropbox.sync.android.NativeFileSystem;

        $r1 := @parameter0: com.dropbox.sync.android.NativeApp;

        $r2 := @parameter1: java.io.File;

        r3 := @parameter2: java.util.EnumSet;

        $r4 = new com.dropbox.sync.android.NativeFileSystem$Config;

        specialinvoke $r4.<com.dropbox.sync.android.NativeFileSystem$Config: void <init>(java.io.File,java.util.EnumSet)>($r2, r3);

        $l0 = staticinvoke <com.dropbox.sync.android.NativeFileSystem: long nativeGetRunFuncs()>();

        specialinvoke r0.<com.dropbox.sync.android.NativeClientBase: void <init>(com.dropbox.sync.android.NativeApp,com.dropbox.sync.android.NativeClientBase$BaseConfig,long)>($r1, $r4, $l0);

        r0.<com.dropbox.sync.android.NativeFileSystem: com.dropbox.sync.android.NativeFileSystem$SyncStatusListener mSyncStatusListener> = null;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r0.<com.dropbox.sync.android.NativeFileSystem: java.util.Map mPathListeners> = $r5;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r0.<com.dropbox.sync.android.NativeFileSystem: java.util.Map mFileListeners> = $r5;

        return;
    }
    static java.lang.String access$100()
    {
        java.lang.String r0;

        r0 = <com.dropbox.sync.android.NativeFileSystem: java.lang.String TAG>;

        return r0;
    }
    private static void checkFileHandle(long)
    {
        long $l0;
        byte $b1;
        com.dropbox.sync.android.DbxRuntimeException$IllegalArgument $r0;

        $l0 := @parameter0: long;

        $b1 = -1L cmp $l0;

        if $b1 != 0 goto label1;

        $r0 = new com.dropbox.sync.android.DbxRuntimeException$IllegalArgument;

        specialinvoke $r0.<com.dropbox.sync.android.DbxRuntimeException$IllegalArgument: void <init>(java.lang.String)>("Invalid file handle.");

        throw $r0;

     label1:
        return;
    }
    private void fileCallback(long)
    {
        com.dropbox.sync.android.NativeFileSystem r0;
        long $l0;
        java.util.Map $r1;
        java.lang.Long $r2;
        java.lang.Object $r3;
        com.dropbox.sync.android.NativeFileSystem$FileListener r4;
        java.lang.Throwable $r5;
        java.lang.RuntimeException r6;
        com.dropbox.sync.android.CoreLogger $r7;
        java.lang.String $r8;
        java.lang.Error r9;

        r0 := @this: com.dropbox.sync.android.NativeFileSystem;

        $l0 := @parameter0: long;

     label01:
        entermonitor r0;

     label02:
        $r1 = r0.<com.dropbox.sync.android.NativeFileSystem: java.util.Map mFileListeners>;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        r4 = (com.dropbox.sync.android.NativeFileSystem$FileListener) $r3;

        exitmonitor r0;

     label03:
        if r4 == null goto label11;

     label04:
        interfaceinvoke r4.<com.dropbox.sync.android.NativeFileSystem$FileListener: void onFileChange()>();

     label05:
        return;

     label06:
        $r5 := @caughtexception;

     label07:
        exitmonitor r0;

     label08:
        throw $r5;

     label09:
        r6 := @caughtexception;

        $r7 = r0.<com.dropbox.sync.android.NativeFileSystem: com.dropbox.sync.android.CoreLogger mLog>;

        $r8 = <com.dropbox.sync.android.NativeFileSystem: java.lang.String TAG>;

        staticinvoke <com.dropbox.sync.android.CoreAssert: void uncaughtExceptionInCallback(java.lang.Throwable,com.dropbox.sync.android.CoreLogger,java.lang.String)>(r6, $r7, $r8);

        return;

     label10:
        r9 := @caughtexception;

        $r7 = r0.<com.dropbox.sync.android.NativeFileSystem: com.dropbox.sync.android.CoreLogger mLog>;

        $r8 = <com.dropbox.sync.android.NativeFileSystem: java.lang.String TAG>;

        staticinvoke <com.dropbox.sync.android.CoreAssert: void uncaughtExceptionInCallback(java.lang.Throwable,com.dropbox.sync.android.CoreLogger,java.lang.String)>(r9, $r7, $r8);

     label11:
        return;

        catch java.lang.RuntimeException from label01 to label02 with label09;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.RuntimeException from label04 to label05 with label09;
        catch java.lang.Error from label04 to label05 with label10;
        catch java.lang.Throwable from label07 to label08 with label06;
        catch java.lang.RuntimeException from label08 to label09 with label09;
        catch java.lang.Error from label08 to label09 with label10;
    }
    static boolean isOpenThumbFlags(int)
    {
        int $i0, $i1, $i2;

        $i0 := @parameter0: int;

        $i2 = <com.dropbox.sync.android.NativeFileSystem: int FILE_OPEN_THUMB_SIZE_MASK>;

        $i1 = <com.dropbox.sync.android.NativeFileSystem: int FILE_OPEN_THUMB_FORMAT_MASK>;

        $i1 = $i2 | $i1;

        $i0 = $i1 & $i0;

        if $i0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
private native void nativeAwaitFileReady(long, long) throws com.dropbox.sync.android.DbxException { 
// no body
} 
private native void nativeAwaitFirstSync(long) throws com.dropbox.sync.android.DbxException { 
// no body
} 
private static native void nativeClassInit() { 
// no body
} 
private native void nativeCloseFile(long, long) throws com.dropbox.sync.android.DbxException { 
// no body
} 
private native void nativeCreateFolders(long, long) throws com.dropbox.sync.android.DbxException { 
// no body
} 
private native void nativeDeinit(long, boolean) { 
// no body
} 
private native java.lang.String nativeFetchShareLink(long, long, boolean) throws com.dropbox.sync.android.DbxException { 
// no body
} 
private native void nativeFree(long) { 
// no body
} 
private native long nativeGetFileCacheSize(long) throws com.dropbox.sync.android.DbxException { 
// no body
} 
private native com.dropbox.sync.android.DbxFileInfo nativeGetFileInfoFromHandle(long, long, com.dropbox.sync.android.NativeFileSystem$MetadataBuilder) throws com.dropbox.sync.android.DbxException { 
// no body
} 
private native com.dropbox.sync.android.DbxFileInfo nativeGetFileInfoFromPath(long, long, com.dropbox.sync.android.NativeFileSystem$MetadataBuilder) throws com.dropbox.sync.android.DbxException { 
// no body
} 
private native com.dropbox.sync.android.DbxFileStatus nativeGetFileStatus(long, long, com.dropbox.sync.android.NativeFileSystem$FileStatusBuilder, boolean) throws com.dropbox.sync.android.DbxException { 
// no body
} 
private native long nativeGetMaxFileCacheSize(long) throws com.dropbox.sync.android.DbxException { 
// no body
} 
private static native long nativeGetRunFuncs() { 
// no body
} 
private native com.dropbox.sync.android.DbxSyncStatus nativeGetSyncStatus(long, com.dropbox.sync.android.NativeFileSystem$SyncStatusBuilder) throws com.dropbox.sync.android.DbxException { 
// no body
} 
private native boolean nativeHasSynced(long) { 
// no body
} 
private native long nativeInit(long, com.dropbox.sync.android.NativeFileSystem$Config, int) throws com.dropbox.sync.android.DbxException { 
// no body
} 
private native void nativeListFolder(long, long, com.dropbox.sync.android.NativeFileSystem$MetadataBuilder) throws com.dropbox.sync.android.DbxException { 
// no body
} 
private native long nativeOpenFile(long, long, int) throws com.dropbox.sync.android.DbxException { 
// no body
} 
private native java.lang.String nativeReadFile(long, long) throws com.dropbox.sync.android.DbxException { 
// no body
} 
private native void nativeReadFileRelease(long, long) throws com.dropbox.sync.android.DbxException { 
// no body
} 
private native void nativeRecursiveDelete(long, long) throws com.dropbox.sync.android.DbxException { 
// no body
} 
private native void nativeRecursiveMove(long, long, long) throws com.dropbox.sync.android.DbxException { 
// no body
} 
private native void nativeSetMaxFileCacheSize(long, long) throws com.dropbox.sync.android.DbxException { 
// no body
} 
private native void nativeSetOrClearFileCallback(long, long, boolean) { 
// no body
} 
private native void nativeSetOrClearPathCallback(long, long, int, boolean) { 
// no body
} 
private native void nativeSetOrClearSyncStatusCallback(long, boolean) { 
// no body
} 
private native void nativeSyncNowAndWait(long) throws com.dropbox.sync.android.DbxException { 
// no body
} 
private native boolean nativeUpdateFile(long, long) throws com.dropbox.sync.android.DbxException { 
// no body
} 
private native void nativeWriteFile(long, long, java.lang.String, boolean) throws com.dropbox.sync.android.DbxException { 
// no body
} 
    private void pathCallback(long, int)
    {
        com.dropbox.sync.android.NativeFileSystem r0;
        long $l0;
        int $i1;
        com.dropbox.sync.android.NativeFileSystem$PathListenerKey r1;
        com.dropbox.sync.android.DbxPath r2;
        java.lang.Object $r3;
        java.util.Map $r4;
        com.dropbox.sync.android.NativeFileSystem$PathListener r5;
        java.lang.Throwable $r6;
        java.lang.RuntimeException r7;
        com.dropbox.sync.android.CoreLogger $r8;
        java.lang.String $r9;
        java.lang.Error r10;

        r0 := @this: com.dropbox.sync.android.NativeFileSystem;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

     label01:
        r2 = new com.dropbox.sync.android.DbxPath;

     label02:
        specialinvoke r2.<com.dropbox.sync.android.DbxPath: void <init>(long)>($l0);

     label03:
        r1 = new com.dropbox.sync.android.NativeFileSystem$PathListenerKey;

     label04:
        specialinvoke r1.<com.dropbox.sync.android.NativeFileSystem$PathListenerKey: void <init>(com.dropbox.sync.android.DbxPath,int)>(r2, $i1);

     label05:
        entermonitor r0;

     label06:
        $r4 = r0.<com.dropbox.sync.android.NativeFileSystem: java.util.Map mPathListeners>;

        $r3 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r5 = (com.dropbox.sync.android.NativeFileSystem$PathListener) $r3;

        exitmonitor r0;

     label07:
        if r5 == null goto label15;

     label08:
        interfaceinvoke r5.<com.dropbox.sync.android.NativeFileSystem$PathListener: void onPathChange(com.dropbox.sync.android.NativeFileSystem$PathListenerKey)>(r1);

     label09:
        return;

     label10:
        $r6 := @caughtexception;

     label11:
        exitmonitor r0;

     label12:
        throw $r6;

     label13:
        r7 := @caughtexception;

        $r8 = r0.<com.dropbox.sync.android.NativeFileSystem: com.dropbox.sync.android.CoreLogger mLog>;

        $r9 = <com.dropbox.sync.android.NativeFileSystem: java.lang.String TAG>;

        staticinvoke <com.dropbox.sync.android.CoreAssert: void uncaughtExceptionInCallback(java.lang.Throwable,com.dropbox.sync.android.CoreLogger,java.lang.String)>(r7, $r8, $r9);

        return;

     label14:
        r10 := @caughtexception;

        $r8 = r0.<com.dropbox.sync.android.NativeFileSystem: com.dropbox.sync.android.CoreLogger mLog>;

        $r9 = <com.dropbox.sync.android.NativeFileSystem: java.lang.String TAG>;

        staticinvoke <com.dropbox.sync.android.CoreAssert: void uncaughtExceptionInCallback(java.lang.Throwable,com.dropbox.sync.android.CoreLogger,java.lang.String)>(r10, $r8, $r9);

     label15:
        return;

        catch java.lang.RuntimeException from label02 to label03 with label13;
        catch java.lang.RuntimeException from label04 to label06 with label13;
        catch java.lang.Error from label01 to label05 with label14;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.RuntimeException from label08 to label09 with label13;
        catch java.lang.Error from label08 to label09 with label14;
        catch java.lang.Throwable from label11 to label12 with label10;
        catch java.lang.RuntimeException from label12 to label13 with label13;
        catch java.lang.Error from label12 to label13 with label14;
    }
    private void syncStatusCallback()
    {
        com.dropbox.sync.android.NativeFileSystem r0;
        com.dropbox.sync.android.NativeFileSystem$SyncStatusListener r1;
        java.lang.Throwable $r2;
        java.lang.RuntimeException r3;
        com.dropbox.sync.android.CoreLogger $r4;
        java.lang.String $r5;
        java.lang.Error r6;

        r0 := @this: com.dropbox.sync.android.NativeFileSystem;

     label01:
        entermonitor r0;

     label02:
        r1 = r0.<com.dropbox.sync.android.NativeFileSystem: com.dropbox.sync.android.NativeFileSystem$SyncStatusListener mSyncStatusListener>;

        exitmonitor r0;

     label03:
        if r1 == null goto label11;

     label04:
        interfaceinvoke r1.<com.dropbox.sync.android.NativeFileSystem$SyncStatusListener: void onSyncStatusChange()>();

     label05:
        return;

     label06:
        $r2 := @caughtexception;

     label07:
        exitmonitor r0;

     label08:
        throw $r2;

     label09:
        r3 := @caughtexception;

        $r4 = r0.<com.dropbox.sync.android.NativeFileSystem: com.dropbox.sync.android.CoreLogger mLog>;

        $r5 = <com.dropbox.sync.android.NativeFileSystem: java.lang.String TAG>;

        staticinvoke <com.dropbox.sync.android.CoreAssert: void uncaughtExceptionInCallback(java.lang.Throwable,com.dropbox.sync.android.CoreLogger,java.lang.String)>(r3, $r4, $r5);

        return;

     label10:
        r6 := @caughtexception;

        $r4 = r0.<com.dropbox.sync.android.NativeFileSystem: com.dropbox.sync.android.CoreLogger mLog>;

        $r5 = <com.dropbox.sync.android.NativeFileSystem: java.lang.String TAG>;

        staticinvoke <com.dropbox.sync.android.CoreAssert: void uncaughtExceptionInCallback(java.lang.Throwable,com.dropbox.sync.android.CoreLogger,java.lang.String)>(r6, $r4, $r5);

     label11:
        return;

        catch java.lang.RuntimeException from label01 to label02 with label09;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.RuntimeException from label04 to label05 with label09;
        catch java.lang.Error from label04 to label05 with label10;
        catch java.lang.Throwable from label07 to label08 with label06;
        catch java.lang.RuntimeException from label08 to label09 with label09;
        catch java.lang.Error from label08 to label09 with label10;
    }
    public void awaitFileReady(long) throws com.dropbox.sync.android.DbxException
    {
        com.dropbox.sync.android.NativeFileSystem r0;
        long $l0, $l1;

        r0 := @this: com.dropbox.sync.android.NativeFileSystem;

        $l0 := @parameter0: long;

        staticinvoke <com.dropbox.sync.android.NativeFileSystem: void checkFileHandle(long)>($l0);

        $l1 = r0.<com.dropbox.sync.android.NativeFileSystem: long mCliHandle>;

        specialinvoke r0.<com.dropbox.sync.android.NativeFileSystem: void nativeAwaitFileReady(long,long)>($l1, $l0);

        return;
    }
    public void awaitFirstSync() throws com.dropbox.sync.android.DbxException
    {
        com.dropbox.sync.android.NativeFileSystem r0;
        long $l0;

        r0 := @this: com.dropbox.sync.android.NativeFileSystem;

        $l0 = r0.<com.dropbox.sync.android.NativeFileSystem: long mCliHandle>;

        specialinvoke r0.<com.dropbox.sync.android.NativeFileSystem: void nativeAwaitFirstSync(long)>($l0);

        return;
    }
    public void closeFileHandle(long) throws com.dropbox.sync.android.DbxException
    {
        com.dropbox.sync.android.NativeFileSystem r0;
        long $l0, $l1;

        r0 := @this: com.dropbox.sync.android.NativeFileSystem;

        $l0 := @parameter0: long;

        staticinvoke <com.dropbox.sync.android.NativeFileSystem: void checkFileHandle(long)>($l0);

        $l1 = r0.<com.dropbox.sync.android.NativeFileSystem: long mCliHandle>;

        specialinvoke r0.<com.dropbox.sync.android.NativeFileSystem: void nativeCloseFile(long,long)>($l1, $l0);

        return;
    }
    public void closeReadFile(long) throws com.dropbox.sync.android.DbxException
    {
        com.dropbox.sync.android.NativeFileSystem r0;
        long $l0, $l1;

        r0 := @this: com.dropbox.sync.android.NativeFileSystem;

        $l0 := @parameter0: long;

        staticinvoke <com.dropbox.sync.android.NativeFileSystem: void checkFileHandle(long)>($l0);

        $l1 = r0.<com.dropbox.sync.android.NativeFileSystem: long mCliHandle>;

        specialinvoke r0.<com.dropbox.sync.android.NativeFileSystem: void nativeReadFileRelease(long,long)>($l1, $l0);

        return;
    }
    public void createFolders(com.dropbox.sync.android.DbxPath) throws com.dropbox.sync.android.DbxException
    {
        com.dropbox.sync.android.NativeFileSystem r0;
        com.dropbox.sync.android.DbxPath $r1;
        long $l0, $l1;

        r0 := @this: com.dropbox.sync.android.NativeFileSystem;

        $r1 := @parameter0: com.dropbox.sync.android.DbxPath;

        $l0 = r0.<com.dropbox.sync.android.NativeFileSystem: long mCliHandle>;

        $l1 = virtualinvoke $r1.<com.dropbox.sync.android.DbxPath: long getNativeHandle()>();

        specialinvoke r0.<com.dropbox.sync.android.NativeFileSystem: void nativeCreateFolders(long,long)>($l0, $l1);

        return;
    }
    public java.io.File createTempFile(java.lang.String) throws java.io.IOException
    {
        com.dropbox.sync.android.NativeFileSystem r0;
        java.lang.String $r1;
        com.dropbox.sync.android.NativeApp $r2;
        com.dropbox.sync.android.NativeLib $r3;
        java.io.File $r4;

        r0 := @this: com.dropbox.sync.android.NativeFileSystem;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<com.dropbox.sync.android.NativeFileSystem: com.dropbox.sync.android.NativeApp getApp()>();

        $r3 = virtualinvoke $r2.<com.dropbox.sync.android.NativeApp: com.dropbox.sync.android.NativeLib getNativeLib()>();

        $r4 = virtualinvoke $r3.<com.dropbox.sync.android.NativeLib: java.io.File getTempDir()>();

        $r4 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>($r1, ".dbxtmp", $r4);

        return $r4;
    }
    protected void doClearStateOnDeinit(boolean)
    {
        com.dropbox.sync.android.NativeFileSystem r0;
        boolean $z0;
        java.util.Map $r1;
        java.lang.Throwable $r2;

        r0 := @this: com.dropbox.sync.android.NativeFileSystem;

        $z0 := @parameter0: boolean;

        entermonitor r0;

     label1:
        r0.<com.dropbox.sync.android.NativeFileSystem: com.dropbox.sync.android.NativeFileSystem$SyncStatusListener mSyncStatusListener> = null;

        $r1 = r0.<com.dropbox.sync.android.NativeFileSystem: java.util.Map mPathListeners>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        $r1 = r0.<com.dropbox.sync.android.NativeFileSystem: java.util.Map mFileListeners>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

     label2:
        exitmonitor r0;

        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    protected void doNativeDeinitialize(long, boolean)
    {
        com.dropbox.sync.android.NativeFileSystem r0;
        long $l0;
        boolean $z0;

        r0 := @this: com.dropbox.sync.android.NativeFileSystem;

        $l0 := @parameter0: long;

        $z0 := @parameter1: boolean;

        specialinvoke r0.<com.dropbox.sync.android.NativeFileSystem: void nativeDeinit(long,boolean)>($l0, $z0);

        return;
    }
    protected void doNativeFree(long)
    {
        com.dropbox.sync.android.NativeFileSystem r0;
        long $l0;

        r0 := @this: com.dropbox.sync.android.NativeFileSystem;

        $l0 := @parameter0: long;

        specialinvoke r0.<com.dropbox.sync.android.NativeFileSystem: void nativeFree(long)>($l0);

        return;
    }
    protected long doNativeInitialize(com.dropbox.sync.android.NativeApp, com.dropbox.sync.android.NativeClientBase$BaseConfig) throws com.dropbox.sync.android.DbxException
    {
        com.dropbox.sync.android.NativeFileSystem r0;
        com.dropbox.sync.android.NativeApp $r1;
        com.dropbox.sync.android.NativeClientBase$BaseConfig $r2;
        com.dropbox.sync.android.NativeFileSystem$Config r3;
        long $l0;
        java.util.EnumSet $r4;
        int $i1;

        r0 := @this: com.dropbox.sync.android.NativeFileSystem;

        $r1 := @parameter0: com.dropbox.sync.android.NativeApp;

        $r2 := @parameter1: com.dropbox.sync.android.NativeClientBase$BaseConfig;

        r3 = (com.dropbox.sync.android.NativeFileSystem$Config) $r2;

        $l0 = virtualinvoke $r1.<com.dropbox.sync.android.NativeApp: long getNativeHandle()>();

        $r4 = r3.<com.dropbox.sync.android.NativeFileSystem$Config: java.util.EnumSet flags>;

        $i1 = staticinvoke <com.dropbox.sync.android.NativeFileSystem$ClientFlags: int flagsToInt(java.util.EnumSet)>($r4);

        $l0 = specialinvoke r0.<com.dropbox.sync.android.NativeFileSystem: long nativeInit(long,com.dropbox.sync.android.NativeFileSystem$Config,int)>($l0, r3, $i1);

        return $l0;
    }
    public java.net.URL fetchShareLink(com.dropbox.sync.android.DbxPath, boolean) throws com.dropbox.sync.android.DbxException
    {
        com.dropbox.sync.android.NativeFileSystem r0;
        com.dropbox.sync.android.DbxPath $r1;
        boolean $z0;
        java.net.MalformedURLException r2;
        long $l0, $l1;
        java.lang.String $r3;
        java.net.URL $r4;
        com.dropbox.sync.android.DbxException$Response $r5;
        java.lang.StringBuilder $r6;

        r0 := @this: com.dropbox.sync.android.NativeFileSystem;

        $r1 := @parameter0: com.dropbox.sync.android.DbxPath;

        $z0 := @parameter1: boolean;

        $l0 = r0.<com.dropbox.sync.android.NativeFileSystem: long mCliHandle>;

        $l1 = virtualinvoke $r1.<com.dropbox.sync.android.DbxPath: long getNativeHandle()>();

        $r3 = specialinvoke r0.<com.dropbox.sync.android.NativeFileSystem: java.lang.String nativeFetchShareLink(long,long,boolean)>($l0, $l1, $z0);

        $r4 = new java.net.URL;

     label1:
        specialinvoke $r4.<java.net.URL: void <init>(java.lang.String)>($r3);

     label2:
        return $r4;

     label3:
        r2 := @caughtexception;

        $r5 = new com.dropbox.sync.android.DbxException$Response;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("fetchShareLink: Server returned illegal URL: ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<com.dropbox.sync.android.DbxException$Response: void <init>(java.lang.String,java.lang.Throwable)>($r3, r2);

        throw $r5;

        catch java.net.MalformedURLException from label1 to label2 with label3;
    }
    public long getFileCacheSize() throws com.dropbox.sync.android.DbxException
    {
        com.dropbox.sync.android.NativeFileSystem r0;
        long $l0;

        r0 := @this: com.dropbox.sync.android.NativeFileSystem;

        $l0 = r0.<com.dropbox.sync.android.NativeFileSystem: long mCliHandle>;

        $l0 = specialinvoke r0.<com.dropbox.sync.android.NativeFileSystem: long nativeGetFileCacheSize(long)>($l0);

        return $l0;
    }
    public com.dropbox.sync.android.DbxFileInfo getFileInfo(long) throws com.dropbox.sync.android.DbxException
    {
        com.dropbox.sync.android.NativeFileSystem r0;
        long $l0, $l1;
        com.dropbox.sync.android.NativeFileSystem$MetadataBuilder $r1;
        com.dropbox.sync.android.DbxFileInfo $r2;

        r0 := @this: com.dropbox.sync.android.NativeFileSystem;

        $l0 := @parameter0: long;

        staticinvoke <com.dropbox.sync.android.NativeFileSystem: void checkFileHandle(long)>($l0);

        $l1 = r0.<com.dropbox.sync.android.NativeFileSystem: long mCliHandle>;

        $r1 = new com.dropbox.sync.android.NativeFileSystem$MetadataBuilder;

        specialinvoke $r1.<com.dropbox.sync.android.NativeFileSystem$MetadataBuilder: void <init>(com.dropbox.sync.android.NativeFileSystem)>(r0);

        $r2 = specialinvoke r0.<com.dropbox.sync.android.NativeFileSystem: com.dropbox.sync.android.DbxFileInfo nativeGetFileInfoFromHandle(long,long,com.dropbox.sync.android.NativeFileSystem$MetadataBuilder)>($l1, $l0, $r1);

        return $r2;
    }
    public com.dropbox.sync.android.DbxFileInfo getFileInfo(com.dropbox.sync.android.DbxPath) throws com.dropbox.sync.android.DbxException
    {
        com.dropbox.sync.android.NativeFileSystem r0;
        com.dropbox.sync.android.DbxPath $r1;
        long $l0, $l1;
        com.dropbox.sync.android.NativeFileSystem$MetadataBuilder $r2;
        com.dropbox.sync.android.DbxFileInfo $r3;

        r0 := @this: com.dropbox.sync.android.NativeFileSystem;

        $r1 := @parameter0: com.dropbox.sync.android.DbxPath;

        $l0 = r0.<com.dropbox.sync.android.NativeFileSystem: long mCliHandle>;

        $l1 = virtualinvoke $r1.<com.dropbox.sync.android.DbxPath: long getNativeHandle()>();

        $r2 = new com.dropbox.sync.android.NativeFileSystem$MetadataBuilder;

        specialinvoke $r2.<com.dropbox.sync.android.NativeFileSystem$MetadataBuilder: void <init>(com.dropbox.sync.android.NativeFileSystem)>(r0);

        $r3 = specialinvoke r0.<com.dropbox.sync.android.NativeFileSystem: com.dropbox.sync.android.DbxFileInfo nativeGetFileInfoFromPath(long,long,com.dropbox.sync.android.NativeFileSystem$MetadataBuilder)>($l0, $l1, $r2);

        return $r3;
    }
    public com.dropbox.sync.android.DbxFileStatus getFileStatus(long) throws com.dropbox.sync.android.DbxException
    {
        com.dropbox.sync.android.NativeFileSystem r0;
        long $l0, $l1;
        com.dropbox.sync.android.NativeFileSystem$FileStatusBuilder $r1;
        com.dropbox.sync.android.DbxFileStatus $r2;

        r0 := @this: com.dropbox.sync.android.NativeFileSystem;

        $l0 := @parameter0: long;

        staticinvoke <com.dropbox.sync.android.NativeFileSystem: void checkFileHandle(long)>($l0);

        $l1 = r0.<com.dropbox.sync.android.NativeFileSystem: long mCliHandle>;

        $r1 = new com.dropbox.sync.android.NativeFileSystem$FileStatusBuilder;

        specialinvoke $r1.<com.dropbox.sync.android.NativeFileSystem$FileStatusBuilder: void <init>(com.dropbox.sync.android.NativeFileSystem)>(r0);

        $r2 = specialinvoke r0.<com.dropbox.sync.android.NativeFileSystem: com.dropbox.sync.android.DbxFileStatus nativeGetFileStatus(long,long,com.dropbox.sync.android.NativeFileSystem$FileStatusBuilder,boolean)>($l1, $l0, $r1, 0);

        return $r2;
    }
    public long getMaxFileCacheSize() throws com.dropbox.sync.android.DbxException
    {
        com.dropbox.sync.android.NativeFileSystem r0;
        long $l0;

        r0 := @this: com.dropbox.sync.android.NativeFileSystem;

        $l0 = r0.<com.dropbox.sync.android.NativeFileSystem: long mCliHandle>;

        $l0 = specialinvoke r0.<com.dropbox.sync.android.NativeFileSystem: long nativeGetMaxFileCacheSize(long)>($l0);

        return $l0;
    }
    public com.dropbox.sync.android.DbxFileStatus getNewerFileStatus(long) throws com.dropbox.sync.android.DbxException
    {
        com.dropbox.sync.android.NativeFileSystem r0;
        long $l0, $l1;
        com.dropbox.sync.android.NativeFileSystem$FileStatusBuilder $r1;
        com.dropbox.sync.android.DbxFileStatus $r2;

        r0 := @this: com.dropbox.sync.android.NativeFileSystem;

        $l0 := @parameter0: long;

        staticinvoke <com.dropbox.sync.android.NativeFileSystem: void checkFileHandle(long)>($l0);

        $l1 = r0.<com.dropbox.sync.android.NativeFileSystem: long mCliHandle>;

        $r1 = new com.dropbox.sync.android.NativeFileSystem$FileStatusBuilder;

        specialinvoke $r1.<com.dropbox.sync.android.NativeFileSystem$FileStatusBuilder: void <init>(com.dropbox.sync.android.NativeFileSystem)>(r0);

        $r2 = specialinvoke r0.<com.dropbox.sync.android.NativeFileSystem: com.dropbox.sync.android.DbxFileStatus nativeGetFileStatus(long,long,com.dropbox.sync.android.NativeFileSystem$FileStatusBuilder,boolean)>($l1, $l0, $r1, 1);

        return $r2;
    }
    public java.io.File getReadFile(long) throws com.dropbox.sync.android.DbxException
    {
        com.dropbox.sync.android.NativeFileSystem r0;
        long $l0, $l1;
        java.io.File $r1;
        java.lang.String $r2;

        r0 := @this: com.dropbox.sync.android.NativeFileSystem;

        $l0 := @parameter0: long;

        staticinvoke <com.dropbox.sync.android.NativeFileSystem: void checkFileHandle(long)>($l0);

        $r1 = new java.io.File;

        $l1 = r0.<com.dropbox.sync.android.NativeFileSystem: long mCliHandle>;

        $r2 = specialinvoke r0.<com.dropbox.sync.android.NativeFileSystem: java.lang.String nativeReadFile(long,long)>($l1, $l0);

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>($r2);

        return $r1;
    }
    public com.dropbox.sync.android.DbxSyncStatus getSyncStatus() throws com.dropbox.sync.android.DbxException
    {
        com.dropbox.sync.android.NativeFileSystem r0;
        com.dropbox.sync.android.NativeFileSystem$SyncStatusBuilder $r1;
        com.dropbox.sync.android.DbxSyncStatus $r2;
        long $l0;

        r0 := @this: com.dropbox.sync.android.NativeFileSystem;

        $l0 = r0.<com.dropbox.sync.android.NativeFileSystem: long mCliHandle>;

        $r1 = new com.dropbox.sync.android.NativeFileSystem$SyncStatusBuilder;

        specialinvoke $r1.<com.dropbox.sync.android.NativeFileSystem$SyncStatusBuilder: void <init>(com.dropbox.sync.android.NativeFileSystem)>(r0);

        $r2 = specialinvoke r0.<com.dropbox.sync.android.NativeFileSystem: com.dropbox.sync.android.DbxSyncStatus nativeGetSyncStatus(long,com.dropbox.sync.android.NativeFileSystem$SyncStatusBuilder)>($l0, $r1);

        return $r2;
    }
    public boolean hasSynced() throws com.dropbox.sync.android.DbxException
    {
        com.dropbox.sync.android.NativeFileSystem r0;
        boolean $z0;
        long $l0;

        r0 := @this: com.dropbox.sync.android.NativeFileSystem;

        $l0 = r0.<com.dropbox.sync.android.NativeFileSystem: long mCliHandle>;

        $z0 = specialinvoke r0.<com.dropbox.sync.android.NativeFileSystem: boolean nativeHasSynced(long)>($l0);

        return $z0;
    }
    public java.util.List listFolder(com.dropbox.sync.android.DbxPath) throws com.dropbox.sync.android.DbxException
    {
        com.dropbox.sync.android.NativeFileSystem r0;
        com.dropbox.sync.android.DbxPath $r1;
        long $l0, $l1;
        com.dropbox.sync.android.NativeFileSystem$MetadataBuilder r2;
        java.util.ArrayList r3;

        r0 := @this: com.dropbox.sync.android.NativeFileSystem;

        $r1 := @parameter0: com.dropbox.sync.android.DbxPath;

        r2 = new com.dropbox.sync.android.NativeFileSystem$MetadataBuilder;

        specialinvoke r2.<com.dropbox.sync.android.NativeFileSystem$MetadataBuilder: void <init>(com.dropbox.sync.android.NativeFileSystem)>(r0);

        $l0 = r0.<com.dropbox.sync.android.NativeFileSystem: long mCliHandle>;

        $l1 = virtualinvoke $r1.<com.dropbox.sync.android.DbxPath: long getNativeHandle()>();

        specialinvoke r0.<com.dropbox.sync.android.NativeFileSystem: void nativeListFolder(long,long,com.dropbox.sync.android.NativeFileSystem$MetadataBuilder)>($l0, $l1, r2);

        r3 = r2.<com.dropbox.sync.android.NativeFileSystem$MetadataBuilder: java.util.ArrayList mMetadata>;

        return r3;
    }
    public long openFileHandle(com.dropbox.sync.android.DbxPath, int) throws com.dropbox.sync.android.DbxException
    {
        com.dropbox.sync.android.NativeFileSystem r0;
        com.dropbox.sync.android.DbxPath $r1;
        int $i0;
        long $l1, $l2;

        r0 := @this: com.dropbox.sync.android.NativeFileSystem;

        $r1 := @parameter0: com.dropbox.sync.android.DbxPath;

        $i0 := @parameter1: int;

        $l1 = r0.<com.dropbox.sync.android.NativeFileSystem: long mCliHandle>;

        $l2 = virtualinvoke $r1.<com.dropbox.sync.android.DbxPath: long getNativeHandle()>();

        $l1 = specialinvoke r0.<com.dropbox.sync.android.NativeFileSystem: long nativeOpenFile(long,long,int)>($l1, $l2, $i0);

        return $l1;
    }
    public void recursiveDelete(com.dropbox.sync.android.DbxPath) throws com.dropbox.sync.android.DbxException
    {
        com.dropbox.sync.android.NativeFileSystem r0;
        com.dropbox.sync.android.DbxPath $r1;
        long $l0, $l1;

        r0 := @this: com.dropbox.sync.android.NativeFileSystem;

        $r1 := @parameter0: com.dropbox.sync.android.DbxPath;

        $l0 = r0.<com.dropbox.sync.android.NativeFileSystem: long mCliHandle>;

        $l1 = virtualinvoke $r1.<com.dropbox.sync.android.DbxPath: long getNativeHandle()>();

        specialinvoke r0.<com.dropbox.sync.android.NativeFileSystem: void nativeRecursiveDelete(long,long)>($l0, $l1);

        return;
    }
    public void recursiveMove(com.dropbox.sync.android.DbxPath, com.dropbox.sync.android.DbxPath) throws com.dropbox.sync.android.DbxException
    {
        com.dropbox.sync.android.NativeFileSystem r0;
        com.dropbox.sync.android.DbxPath $r1, $r2;
        long $l0, $l1, $l2;

        r0 := @this: com.dropbox.sync.android.NativeFileSystem;

        $r1 := @parameter0: com.dropbox.sync.android.DbxPath;

        $r2 := @parameter1: com.dropbox.sync.android.DbxPath;

        $l0 = r0.<com.dropbox.sync.android.NativeFileSystem: long mCliHandle>;

        $l1 = virtualinvoke $r1.<com.dropbox.sync.android.DbxPath: long getNativeHandle()>();

        $l2 = virtualinvoke $r2.<com.dropbox.sync.android.DbxPath: long getNativeHandle()>();

        specialinvoke r0.<com.dropbox.sync.android.NativeFileSystem: void nativeRecursiveMove(long,long,long)>($l0, $l1, $l2);

        return;
    }
    public void setFileListener(long, com.dropbox.sync.android.NativeFileSystem$FileListener)
    {
        com.dropbox.sync.android.NativeFileSystem r0;
        long $l0, $l1;
        com.dropbox.sync.android.NativeFileSystem$FileListener $r1;
        boolean $z0;
        java.util.Map $r2;
        java.lang.Long $r3;
        java.lang.Object $r4;
        java.lang.Throwable $r5;

        r0 := @this: com.dropbox.sync.android.NativeFileSystem;

        $l0 := @parameter0: long;

        $r1 := @parameter1: com.dropbox.sync.android.NativeFileSystem$FileListener;

        entermonitor r0;

     label01:
        $z0 = virtualinvoke r0.<com.dropbox.sync.android.NativeFileSystem: boolean isInitialized()>();

     label02:
        if $z0 != 0 goto label04;

     label03:
        exitmonitor r0;

        return;

     label04:
        staticinvoke <com.dropbox.sync.android.NativeFileSystem: void checkFileHandle(long)>($l0);

        $z0 = 0;

        if $r1 != null goto label09;

        $r2 = r0.<com.dropbox.sync.android.NativeFileSystem: java.util.Map mFileListeners>;

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r3);

        if $r4 == null goto label05;

        $z0 = 1;

     label05:
        if $z0 == 0 goto label03;

        $l1 = r0.<com.dropbox.sync.android.NativeFileSystem: long mCliHandle>;

        if $r1 == null goto label11;

        $z0 = 1;

     label06:
        specialinvoke r0.<com.dropbox.sync.android.NativeFileSystem: void nativeSetOrClearFileCallback(long,long,boolean)>($l1, $l0, $z0);

     label07:
        goto label03;

     label08:
        $r5 := @caughtexception;

        exitmonitor r0;

        throw $r5;

     label09:
        $r2 = r0.<com.dropbox.sync.android.NativeFileSystem: java.util.Map mFileListeners>;

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r1);

     label10:
        if $r4 != null goto label05;

        $z0 = 1;

        goto label05;

     label11:
        $z0 = 0;

        goto label06;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label04 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }
    public void setMaxFileCacheSize(long) throws com.dropbox.sync.android.DbxException
    {
        com.dropbox.sync.android.NativeFileSystem r0;
        long $l0, $l2;
        byte $b1;
        com.dropbox.sync.android.DbxRuntimeException$IllegalArgument $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        r0 := @this: com.dropbox.sync.android.NativeFileSystem;

        $l0 := @parameter0: long;

        $b1 = $l0 cmp 0L;

        if $b1 >= 0 goto label1;

        $r1 = new com.dropbox.sync.android.DbxRuntimeException$IllegalArgument;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Negative cache size: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<com.dropbox.sync.android.DbxRuntimeException$IllegalArgument: void <init>(java.lang.String)>($r3);

        throw $r1;

     label1:
        $l2 = r0.<com.dropbox.sync.android.NativeFileSystem: long mCliHandle>;

        specialinvoke r0.<com.dropbox.sync.android.NativeFileSystem: void nativeSetMaxFileCacheSize(long,long)>($l2, $l0);

        return;
    }
    public void setPathListener(com.dropbox.sync.android.NativeFileSystem$PathListenerKey, com.dropbox.sync.android.NativeFileSystem$PathListener)
    {
        com.dropbox.sync.android.NativeFileSystem r0;
        com.dropbox.sync.android.NativeFileSystem$PathListenerKey $r1;
        com.dropbox.sync.android.NativeFileSystem$PathListener $r2;
        long $l0, $l2;
        int $i1;
        boolean $z0;
        java.util.Map $r3;
        java.lang.Object $r4;
        com.dropbox.sync.android.DbxPath $r5;
        java.lang.Throwable $r6;

        r0 := @this: com.dropbox.sync.android.NativeFileSystem;

        $r1 := @parameter0: com.dropbox.sync.android.NativeFileSystem$PathListenerKey;

        $r2 := @parameter1: com.dropbox.sync.android.NativeFileSystem$PathListener;

        entermonitor r0;

     label01:
        $z0 = virtualinvoke r0.<com.dropbox.sync.android.NativeFileSystem: boolean isInitialized()>();

     label02:
        if $z0 != 0 goto label04;

     label03:
        exitmonitor r0;

        return;

     label04:
        $z0 = 0;

        if $r2 != null goto label10;

     label05:
        $r3 = r0.<com.dropbox.sync.android.NativeFileSystem: java.util.Map mPathListeners>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r1);

        if $r4 == null goto label06;

        $z0 = 1;

     label06:
        if $z0 == 0 goto label03;

        $l0 = r0.<com.dropbox.sync.android.NativeFileSystem: long mCliHandle>;

        $r5 = $r1.<com.dropbox.sync.android.NativeFileSystem$PathListenerKey: com.dropbox.sync.android.DbxPath path>;

        $l2 = virtualinvoke $r5.<com.dropbox.sync.android.DbxPath: long getNativeHandle()>();

        $i1 = $r1.<com.dropbox.sync.android.NativeFileSystem$PathListenerKey: int nativeMode>;

        if $r2 == null goto label12;

        $z0 = 1;

     label07:
        specialinvoke r0.<com.dropbox.sync.android.NativeFileSystem: void nativeSetOrClearPathCallback(long,long,int,boolean)>($l0, $l2, $i1, $z0);

     label08:
        goto label03;

     label09:
        $r6 := @caughtexception;

        exitmonitor r0;

        throw $r6;

     label10:
        $r3 = r0.<com.dropbox.sync.android.NativeFileSystem: java.util.Map mPathListeners>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

     label11:
        if $r4 != null goto label06;

        $z0 = 1;

        goto label06;

     label12:
        $z0 = 0;

        goto label07;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label05 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }
    public void setSyncStatusListener(com.dropbox.sync.android.NativeFileSystem$SyncStatusListener)
    {
        com.dropbox.sync.android.NativeFileSystem r0;
        com.dropbox.sync.android.NativeFileSystem$SyncStatusListener $r1;
        long $l0;
        boolean $z0;
        java.lang.Throwable $r2;

        r0 := @this: com.dropbox.sync.android.NativeFileSystem;

        $r1 := @parameter0: com.dropbox.sync.android.NativeFileSystem$SyncStatusListener;

        entermonitor r0;

     label1:
        $z0 = virtualinvoke r0.<com.dropbox.sync.android.NativeFileSystem: boolean isInitialized()>();

        if $z0 == 0 goto label3;

        r0.<com.dropbox.sync.android.NativeFileSystem: com.dropbox.sync.android.NativeFileSystem$SyncStatusListener mSyncStatusListener> = $r1;

        $l0 = r0.<com.dropbox.sync.android.NativeFileSystem: long mCliHandle>;

        if $r1 == null goto label4;

        $z0 = 1;

     label2:
        specialinvoke r0.<com.dropbox.sync.android.NativeFileSystem: void nativeSetOrClearSyncStatusCallback(long,boolean)>($l0, $z0);

     label3:
        exitmonitor r0;

        return;

     label4:
        $z0 = 0;

        goto label2;

     label5:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label3 with label5;
    }
    public void syncNowAndWait() throws com.dropbox.sync.android.DbxException
    {
        com.dropbox.sync.android.NativeFileSystem r0;
        long $l0;

        r0 := @this: com.dropbox.sync.android.NativeFileSystem;

        $l0 = r0.<com.dropbox.sync.android.NativeFileSystem: long mCliHandle>;

        specialinvoke r0.<com.dropbox.sync.android.NativeFileSystem: void nativeSyncNowAndWait(long)>($l0);

        return;
    }
    public boolean updateFileHandle(long) throws com.dropbox.sync.android.DbxException
    {
        com.dropbox.sync.android.NativeFileSystem r0;
        long $l0, $l1;
        boolean $z0;

        r0 := @this: com.dropbox.sync.android.NativeFileSystem;

        $l0 := @parameter0: long;

        staticinvoke <com.dropbox.sync.android.NativeFileSystem: void checkFileHandle(long)>($l0);

        $l1 = r0.<com.dropbox.sync.android.NativeFileSystem: long mCliHandle>;

        $z0 = specialinvoke r0.<com.dropbox.sync.android.NativeFileSystem: boolean nativeUpdateFile(long,long)>($l1, $l0);

        return $z0;
    }
    public void writeFile(long, java.io.File, boolean) throws com.dropbox.sync.android.DbxException
    {
        com.dropbox.sync.android.NativeFileSystem r0;
        long $l0, $l1;
        java.io.File $r1;
        boolean $z0;
        java.lang.String $r2;

        r0 := @this: com.dropbox.sync.android.NativeFileSystem;

        $l0 := @parameter0: long;

        $r1 := @parameter1: java.io.File;

        $z0 := @parameter2: boolean;

        staticinvoke <com.dropbox.sync.android.NativeFileSystem: void checkFileHandle(long)>($l0);

        $l1 = r0.<com.dropbox.sync.android.NativeFileSystem: long mCliHandle>;

        $r2 = virtualinvoke $r1.<java.io.File: java.lang.String getPath()>();

        specialinvoke r0.<com.dropbox.sync.android.NativeFileSystem: void nativeWriteFile(long,long,java.lang.String,boolean)>($l1, $l0, $r2, $z0);

        return;
    }
