com.dropbox.sync.android.NativeThreads extends java.lang.Object
public static int BACKGROUND_THREAD_PRIORITY
public static int HIGH_THREAD_PRIORITY
public static int NORMAL_THREAD_PRIORITY
private static final java.lang.String TAG
private final com.dropbox.sync.android.CoreLogger mLog
private final int mThreadCount
private final java.util.List mThreads
private boolean mThreadsStarted
private boolean mThreadsStopped
    static void <clinit>()
    {
        java.lang.String $r0;
        java.lang.Class $r1;

        $r1 = class "Lcom/dropbox/sync/android/NativeThreads;";

        $r0 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        <com.dropbox.sync.android.NativeThreads: java.lang.String TAG> = $r0;

        <com.dropbox.sync.android.NativeThreads: int BACKGROUND_THREAD_PRIORITY> = 4;

        <com.dropbox.sync.android.NativeThreads: int NORMAL_THREAD_PRIORITY> = 5;

        <com.dropbox.sync.android.NativeThreads: int HIGH_THREAD_PRIORITY> = 6;

        return;
    }
    void <init>(long, long, com.dropbox.sync.android.CoreLogger)
    {
        com.dropbox.sync.android.NativeThreads r0;
        long $l0, $l1;
        com.dropbox.sync.android.CoreLogger $r1;
        java.util.List $r2;

        r0 := @this: com.dropbox.sync.android.NativeThreads;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $r1 := @parameter2: com.dropbox.sync.android.CoreLogger;

        $r2 = staticinvoke <com.dropbox.sync.android.NativeThreads: java.util.List createNativeThreads(com.dropbox.sync.android.CoreLogger,long,long)>($r1, $l0, $l1);

        specialinvoke r0.<com.dropbox.sync.android.NativeThreads: void <init>(java.util.List,com.dropbox.sync.android.CoreLogger)>($r2, $r1);

        return;
    }
    void <init>(java.lang.String, java.util.List, com.dropbox.sync.android.CoreLogger)
    {
        com.dropbox.sync.android.NativeThreads r0;
        java.lang.String $r1;
        java.util.List r2;
        com.dropbox.sync.android.CoreLogger $r3;

        r0 := @this: com.dropbox.sync.android.NativeThreads;

        $r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.List;

        $r3 := @parameter2: com.dropbox.sync.android.CoreLogger;

        r2 = staticinvoke <com.dropbox.sync.android.NativeThreads: java.util.List createNativeThreads(com.dropbox.sync.android.CoreLogger,java.lang.String,java.util.List)>($r3, $r1, r2);

        specialinvoke r0.<com.dropbox.sync.android.NativeThreads: void <init>(java.util.List,com.dropbox.sync.android.CoreLogger)>(r2, $r3);

        return;
    }
    private void <init>(java.util.List, com.dropbox.sync.android.CoreLogger)
    {
        com.dropbox.sync.android.NativeThreads r0;
        java.util.List r1;
        com.dropbox.sync.android.CoreLogger $r2;
        boolean $z0;
        com.dropbox.sync.android.DbxRuntimeException$IllegalArgument $r3;
        int $i0;

        r0 := @this: com.dropbox.sync.android.NativeThreads;

        r1 := @parameter0: java.util.List;

        $r2 := @parameter1: com.dropbox.sync.android.CoreLogger;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.dropbox.sync.android.NativeThreads: boolean mThreadsStarted> = 0;

        r0.<com.dropbox.sync.android.NativeThreads: boolean mThreadsStopped> = 0;

        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r3 = new com.dropbox.sync.android.DbxRuntimeException$IllegalArgument;

        specialinvoke $r3.<com.dropbox.sync.android.DbxRuntimeException$IllegalArgument: void <init>(java.lang.String)>("Expected at least 1 native thread.");

        throw $r3;

     label1:
        r0.<com.dropbox.sync.android.NativeThreads: com.dropbox.sync.android.CoreLogger mLog> = $r2;

        $r2 = r0.<com.dropbox.sync.android.NativeThreads: com.dropbox.sync.android.CoreLogger mLog>;

        if $r2 != null goto label2;

        $r3 = new com.dropbox.sync.android.DbxRuntimeException$IllegalArgument;

        specialinvoke $r3.<com.dropbox.sync.android.DbxRuntimeException$IllegalArgument: void <init>(java.lang.String)>("logger shouldn\'t be null.");

        throw $r3;

     label2:
        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        r0.<com.dropbox.sync.android.NativeThreads: int mThreadCount> = $i0;

        r0.<com.dropbox.sync.android.NativeThreads: java.util.List mThreads> = r1;

        return;
    }
    static void access$000(long, long, int) throws com.dropbox.sync.android.DbxException
    {
        long $l0, $l1;
        int $i2;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $i2 := @parameter2: int;

        staticinvoke <com.dropbox.sync.android.NativeThreads: void nativeRunThread(long,long,int)>($l0, $l1, $i2);

        return;
    }
    static java.lang.String access$100()
    {
        java.lang.String r0;

        r0 = <com.dropbox.sync.android.NativeThreads: java.lang.String TAG>;

        return r0;
    }
    private static java.util.List createNativeThreads(com.dropbox.sync.android.CoreLogger, long, long)
    {
        com.dropbox.sync.android.CoreLogger $r0;
        long $l0, $l1;
        java.lang.Thread r1;
        java.util.ArrayList r2;
        int $i2, i3, $i4;
        java.lang.String $r3, $r6;
        com.dropbox.sync.android.DbxRuntimeException$IllegalArgument $r4;
        java.lang.StringBuilder $r5;
        java.lang.RuntimeException $r7;
        com.dropbox.sync.android.NativeThreads$1 $r8;

        $r0 := @parameter0: com.dropbox.sync.android.CoreLogger;

        $l0 := @parameter1: long;

        $l1 := @parameter2: long;

        $i2 = staticinvoke <com.dropbox.sync.android.NativeThreads: int nativeGetThreadCount(long)>($l0);

        if $i2 > 0 goto label1;

        $r3 = <com.dropbox.sync.android.NativeThreads: java.lang.String TAG>;

        $r4 = new com.dropbox.sync.android.DbxRuntimeException$IllegalArgument;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid native thread count: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<com.dropbox.sync.android.DbxRuntimeException$IllegalArgument: void <init>(java.lang.String)>($r6);

        $r7 = virtualinvoke $r0.<com.dropbox.sync.android.CoreLogger: java.lang.RuntimeException logAndThrow(java.lang.String,java.lang.RuntimeException)>($r3, $r4);

        throw $r7;

     label1:
        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>(int)>($i2);

        i3 = 0;

     label2:
        if i3 >= $i2 goto label3;

        r1 = new java.lang.Thread;

        $r8 = new com.dropbox.sync.android.NativeThreads$1;

        specialinvoke $r8.<com.dropbox.sync.android.NativeThreads$1: void <init>(long,long,int)>($l0, $l1, i3);

        $r3 = staticinvoke <com.dropbox.sync.android.NativeThreads: java.lang.String getNativeThreadName(long,int)>($l0, i3);

        specialinvoke r1.<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>($r8, $r3);

        $i4 = staticinvoke <com.dropbox.sync.android.NativeThreads: int getNativeThreadPriority(long,int)>($l0, i3);

        $i4 = staticinvoke <com.dropbox.sync.android.NativeThreads: int nativeToJavaThreadPriority(int)>($i4);

        staticinvoke <com.dropbox.sync.android.NativeThreads: void setupThread(java.lang.Thread,int)>(r1, $i4);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        i3 = i3 + 1;

        goto label2;

     label3:
        return r2;
    }
    private static java.util.List createNativeThreads(com.dropbox.sync.android.CoreLogger, java.lang.String, java.util.List)
    {
        com.dropbox.sync.android.CoreLogger $r0;
        java.lang.String $r1, $r7;
        java.util.List r2;
        java.lang.Thread r3;
        java.util.ArrayList r4;
        int $i0, i1, $i2;
        com.dropbox.sync.android.DbxRuntimeException$IllegalArgument $r5;
        java.lang.StringBuilder $r6;
        java.lang.RuntimeException $r8;
        java.lang.Object $r9;
        java.lang.Runnable r10;

        $r0 := @parameter0: com.dropbox.sync.android.CoreLogger;

        $r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.util.List;

        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        if $i0 > 0 goto label1;

        $r1 = <com.dropbox.sync.android.NativeThreads: java.lang.String TAG>;

        $r5 = new com.dropbox.sync.android.DbxRuntimeException$IllegalArgument;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid native thread count: ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<com.dropbox.sync.android.DbxRuntimeException$IllegalArgument: void <init>(java.lang.String)>($r7);

        $r8 = virtualinvoke $r0.<com.dropbox.sync.android.CoreLogger: java.lang.RuntimeException logAndThrow(java.lang.String,java.lang.RuntimeException)>($r1, $r5);

        throw $r8;

     label1:
        r4 = new java.util.ArrayList;

        specialinvoke r4.<java.util.ArrayList: void <init>(int)>($i0);

        i1 = 0;

     label2:
        if i1 >= $i0 goto label3;

        $r9 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i1);

        r10 = (java.lang.Runnable) $r9;

        r3 = new java.lang.Thread;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r3.<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>(r10, $r7);

        $i2 = <com.dropbox.sync.android.NativeThreads: int BACKGROUND_THREAD_PRIORITY>;

        staticinvoke <com.dropbox.sync.android.NativeThreads: void setupThread(java.lang.Thread,int)>(r3, $i2);

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>(r3);

        i1 = i1 + 1;

        goto label2;

     label3:
        return r4;
    }
private static native java.lang.String getNativeThreadName(long, int) { 
// no body
} 
private static native int getNativeThreadPriority(long, int) { 
// no body
} 
private static native int nativeGetThreadCount(long) { 
// no body
} 
private static native void nativeRunThread(long, long, int) throws com.dropbox.sync.android.DbxException { 
// no body
} 
    private static int nativeToJavaThreadPriority(int)
    {
        int $i0;

        $i0 := @parameter0: int;

        if $i0 >= 0 goto label1;

        $i0 = <com.dropbox.sync.android.NativeThreads: int BACKGROUND_THREAD_PRIORITY>;

        return $i0;

     label1:
        if $i0 != 0 goto label2;

        $i0 = <com.dropbox.sync.android.NativeThreads: int NORMAL_THREAD_PRIORITY>;

        return $i0;

     label2:
        $i0 = <com.dropbox.sync.android.NativeThreads: int HIGH_THREAD_PRIORITY>;

        return $i0;
    }
    private static void setupThread(java.lang.Thread, int)
    {
        java.lang.Thread $r0;
        int $i0;
        com.dropbox.sync.android.NativeThreads$2 $r1;

        $r0 := @parameter0: java.lang.Thread;

        $i0 := @parameter1: int;

        virtualinvoke $r0.<java.lang.Thread: void setPriority(int)>($i0);

        $r1 = new com.dropbox.sync.android.NativeThreads$2;

        specialinvoke $r1.<com.dropbox.sync.android.NativeThreads$2: void <init>()>();

        virtualinvoke $r0.<java.lang.Thread: void setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)>($r1);

        return;
    }
    public void initThreads()
    {
        com.dropbox.sync.android.NativeThreads r0;
        boolean $z0;
        java.util.List $r1;
        java.util.Iterator $r2;
        java.lang.Object $r3;
        java.lang.Thread r4;
        java.lang.Throwable $r5;

        r0 := @this: com.dropbox.sync.android.NativeThreads;

        entermonitor r0;

     label1:
        $z0 = r0.<com.dropbox.sync.android.NativeThreads: boolean mThreadsStarted>;

        if $z0 != 0 goto label5;

        r0.<com.dropbox.sync.android.NativeThreads: boolean mThreadsStarted> = 1;

        $r1 = r0.<com.dropbox.sync.android.NativeThreads: java.util.List mThreads>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.Thread) $r3;

        virtualinvoke r4.<java.lang.Thread: void start()>();

     label3:
        goto label2;

     label4:
        $r5 := @caughtexception;

        exitmonitor r0;

        throw $r5;

     label5:
        exitmonitor r0;

        return;

        catch java.lang.Throwable from label1 to label3 with label4;
    }
    public void interruptThreads()
    {
        com.dropbox.sync.android.NativeThreads r0;
        boolean $z0;
        java.util.List $r1;
        java.util.Iterator $r2;
        java.lang.Object $r3;
        java.lang.Thread r4;
        java.lang.Throwable $r5;

        r0 := @this: com.dropbox.sync.android.NativeThreads;

        entermonitor r0;

     label1:
        $z0 = r0.<com.dropbox.sync.android.NativeThreads: boolean mThreadsStarted>;

        if $z0 == 0 goto label5;

        $z0 = r0.<com.dropbox.sync.android.NativeThreads: boolean mThreadsStopped>;

        if $z0 != 0 goto label5;

        $r1 = r0.<com.dropbox.sync.android.NativeThreads: java.util.List mThreads>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.Thread) $r3;

        virtualinvoke r4.<java.lang.Thread: void interrupt()>();

     label3:
        goto label2;

     label4:
        $r5 := @caughtexception;

        exitmonitor r0;

        throw $r5;

     label5:
        exitmonitor r0;

        return;

        catch java.lang.Throwable from label1 to label3 with label4;
    }
    public void joinThreads()
    {
        com.dropbox.sync.android.NativeThreads r0;
        java.lang.InterruptedException r1;
        boolean $z0;
        java.util.List $r2;
        java.util.Iterator $r3;
        java.lang.Object $r4;
        java.lang.Thread r5;
        java.lang.Throwable $r6;

        r0 := @this: com.dropbox.sync.android.NativeThreads;

        entermonitor r0;

     label01:
        $z0 = r0.<com.dropbox.sync.android.NativeThreads: boolean mThreadsStarted>;

        if $z0 != 0 goto label03;

        exitmonitor r0;

     label02:
        return;

     label03:
        r0.<com.dropbox.sync.android.NativeThreads: boolean mThreadsStopped> = 1;

        exitmonitor r0;

     label04:
        $r2 = r0.<com.dropbox.sync.android.NativeThreads: java.util.List mThreads>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label12;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.Thread) $r4;

        virtualinvoke r5.<java.lang.Thread: void interrupt()>();

     label06:
        virtualinvoke r5.<java.lang.Thread: void join()>();

     label07:
        goto label05;

     label08:
        r1 := @caughtexception;

        r5 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke r5.<java.lang.Thread: void interrupt()>();

        return;

     label09:
        $r6 := @caughtexception;

     label10:
        exitmonitor r0;

     label11:
        throw $r6;

     label12:
        return;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.InterruptedException from label06 to label07 with label08;
        catch java.lang.Throwable from label10 to label11 with label09;
    }
