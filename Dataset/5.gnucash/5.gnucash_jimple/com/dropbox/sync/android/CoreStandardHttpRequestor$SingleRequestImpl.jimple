com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl extends com.dropbox.sync.android.CoreHttpRequestor$SingleRequest
private java.util.concurrent.atomic.AtomicBoolean mClosed
private javax.net.ssl.HttpsURLConnection mConn
private java.io.InputStream mInputStream
private java.io.OutputStream mOutputStream
private boolean mStarted
private com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl$Uploader mUploader
final com.dropbox.sync.android.CoreStandardHttpRequestor this$0
    void <init>(com.dropbox.sync.android.CoreStandardHttpRequestor)
    {
        com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl r0;
        com.dropbox.sync.android.CoreStandardHttpRequestor $r1;
        java.util.concurrent.atomic.AtomicBoolean $r2;

        r0 := @this: com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl;

        $r1 := @parameter0: com.dropbox.sync.android.CoreStandardHttpRequestor;

        r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: com.dropbox.sync.android.CoreStandardHttpRequestor this$0> = $r1;

        specialinvoke r0.<com.dropbox.sync.android.CoreHttpRequestor$SingleRequest: void <init>(com.dropbox.sync.android.CoreHttpRequestor)>($r1);

        $r2 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: java.util.concurrent.atomic.AtomicBoolean mClosed> = $r2;

        r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: boolean mStarted> = 0;

        r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: javax.net.ssl.HttpsURLConnection mConn> = null;

        r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl$Uploader mUploader> = null;

        r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: java.io.InputStream mInputStream> = null;

        r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: java.io.OutputStream mOutputStream> = null;

        return;
    }
    static void access$600(com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl, java.io.OutputStream) throws java.io.IOException
    {
        com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl $r0;
        java.io.OutputStream $r1;

        $r0 := @parameter0: com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl;

        $r1 := @parameter1: java.io.OutputStream;

        specialinvoke $r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: void setOutputStream(java.io.OutputStream)>($r1);

        return;
    }
    static void access$700(com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl, java.io.InputStream) throws java.io.IOException
    {
        com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl $r0;
        java.io.InputStream $r1;

        $r0 := @parameter0: com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl;

        $r1 := @parameter1: java.io.InputStream;

        specialinvoke $r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: void setInputStream(java.io.InputStream)>($r1);

        return;
    }
    private javax.net.ssl.HttpsURLConnection prepRequest(java.lang.String, java.lang.Iterable, int) throws java.io.IOException
    {
        com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl r0;
        java.lang.String $r1, $r13;
        java.lang.Iterable r2;
        int $i0;
        java.net.URL r3;
        com.dropbox.sync.android.CoreStandardHttpRequestor $r4;
        java.net.Proxy $r5;
        java.net.URLConnection $r6;
        javax.net.ssl.HttpsURLConnection r7;
        javax.net.ssl.HostnameVerifier $r8;
        javax.net.ssl.SSLSocketFactory $r9;
        java.util.Iterator $r10;
        boolean $z0;
        java.lang.Object $r11;
        com.dropbox.sync.android.CoreHttpRequestor$Header r12;

        r0 := @this: com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl;

        $r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Iterable;

        $i0 := @parameter2: int;

        r3 = new java.net.URL;

        specialinvoke r3.<java.net.URL: void <init>(java.lang.String)>($r1);

        $r4 = r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: com.dropbox.sync.android.CoreStandardHttpRequestor this$0>;

        $r5 = staticinvoke <com.dropbox.sync.android.CoreStandardHttpRequestor: java.net.Proxy access$800(com.dropbox.sync.android.CoreStandardHttpRequestor)>($r4);

        $r6 = virtualinvoke r3.<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>($r5);

        r7 = (javax.net.ssl.HttpsURLConnection) $r6;

        $r8 = staticinvoke <com.dropbox.sync.android.CoreStandardHttpRequestor: javax.net.ssl.HostnameVerifier access$900()>();

        virtualinvoke r7.<javax.net.ssl.HttpsURLConnection: void setHostnameVerifier(javax.net.ssl.HostnameVerifier)>($r8);

        $r9 = staticinvoke <com.dropbox.sync.android.CoreStandardHttpRequestor$SSLSocketFactoryWrapper: javax.net.ssl.SSLSocketFactory getInstance()>();

        virtualinvoke r7.<javax.net.ssl.HttpsURLConnection: void setSSLSocketFactory(javax.net.ssl.SSLSocketFactory)>($r9);

        virtualinvoke r7.<javax.net.ssl.HttpsURLConnection: void setConnectTimeout(int)>(30000);

        $i0 = staticinvoke <java.lang.Math: int max(int,int)>($i0, 30000);

        virtualinvoke r7.<javax.net.ssl.HttpsURLConnection: void setReadTimeout(int)>($i0);

        virtualinvoke r7.<javax.net.ssl.HttpsURLConnection: void setUseCaches(boolean)>(0);

        virtualinvoke r7.<javax.net.ssl.HttpsURLConnection: void setAllowUserInteraction(boolean)>(0);

        $r10 = interfaceinvoke r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (com.dropbox.sync.android.CoreHttpRequestor$Header) $r11;

        $r1 = r12.<com.dropbox.sync.android.CoreHttpRequestor$Header: java.lang.String key>;

        $r13 = r12.<com.dropbox.sync.android.CoreHttpRequestor$Header: java.lang.String value>;

        virtualinvoke r7.<javax.net.ssl.HttpsURLConnection: void addRequestProperty(java.lang.String,java.lang.String)>($r1, $r13);

        goto label1;

     label2:
        return r7;
    }
    private void setConn(javax.net.ssl.HttpsURLConnection) throws java.io.IOException
    {
        com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl r0;
        javax.net.ssl.HttpsURLConnection $r1;
        java.lang.Throwable $r2;
        com.dropbox.sync.android.CoreStandardHttpRequestor $r3;

        r0 := @this: com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl;

        $r1 := @parameter0: javax.net.ssl.HttpsURLConnection;

        $r3 = r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: com.dropbox.sync.android.CoreStandardHttpRequestor this$0>;

        entermonitor $r3;

     label1:
        virtualinvoke r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: void checkCanceled()>();

        r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: javax.net.ssl.HttpsURLConnection mConn> = $r1;

        exitmonitor $r3;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r3;

     label4:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
    private void setInputStream(java.io.InputStream) throws java.io.IOException
    {
        com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl r0;
        java.io.InputStream $r1;
        java.lang.Throwable $r2;
        com.dropbox.sync.android.CoreStandardHttpRequestor $r3;

        r0 := @this: com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl;

        $r1 := @parameter0: java.io.InputStream;

        $r3 = r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: com.dropbox.sync.android.CoreStandardHttpRequestor this$0>;

        entermonitor $r3;

     label1:
        virtualinvoke r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: void checkCanceled()>();

        r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: java.io.InputStream mInputStream> = $r1;

        exitmonitor $r3;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r3;

     label4:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
    private void setOutputStream(java.io.OutputStream) throws java.io.IOException
    {
        com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl r0;
        java.io.OutputStream $r1;
        java.lang.Throwable $r2;
        com.dropbox.sync.android.CoreStandardHttpRequestor $r3;

        r0 := @this: com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl;

        $r1 := @parameter0: java.io.OutputStream;

        $r3 = r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: com.dropbox.sync.android.CoreStandardHttpRequestor this$0>;

        entermonitor $r3;

     label1:
        virtualinvoke r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: void checkCanceled()>();

        r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: java.io.OutputStream mOutputStream> = $r1;

        exitmonitor $r3;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r3;

     label4:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
    private void setUploader(com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl$Uploader) throws java.io.IOException
    {
        com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl r0;
        com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl$Uploader $r1;
        java.lang.Throwable $r2;
        com.dropbox.sync.android.CoreStandardHttpRequestor $r3;

        r0 := @this: com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl;

        $r1 := @parameter0: com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl$Uploader;

        $r3 = r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: com.dropbox.sync.android.CoreStandardHttpRequestor this$0>;

        entermonitor $r3;

     label1:
        virtualinvoke r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: void checkCanceled()>();

        r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl$Uploader mUploader> = $r1;

        exitmonitor $r3;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r3;

     label4:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
    public boolean cancel()
    {
        com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl r0;
        javax.net.ssl.HttpsURLConnection r1;
        java.io.InputStream r2;
        java.io.OutputStream r3;
        com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl$Uploader r4;
        com.dropbox.sync.android.CoreStandardHttpRequestor$ConnectionCloser $r5;
        boolean $z0, $z1;
        com.dropbox.sync.android.CoreStandardHttpRequestor $r6;
        java.lang.Throwable $r7;
        com.dropbox.sync.android.CoreLogger $r8;
        java.lang.String $r9;
        java.io.Closeable[] $r10;

        r0 := @this: com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl;

        $z0 = 0;

        $r6 = r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: com.dropbox.sync.android.CoreStandardHttpRequestor this$0>;

        entermonitor $r6;

     label01:
        $z1 = r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: boolean mStarted>;

        if $z1 != 0 goto label03;

        exitmonitor $r6;

     label02:
        return 0;

     label03:
        $z1 = staticinvoke <com.dropbox.sync.android.CoreAndroidUtil: boolean isUiThread()>();

        if $z1 == 0 goto label09;

        r1 = r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: javax.net.ssl.HttpsURLConnection mConn>;

        if r1 != null goto label04;

        r4 = r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl$Uploader mUploader>;

        if r4 != null goto label04;

        r2 = r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: java.io.InputStream mInputStream>;

        if r2 != null goto label04;

        r3 = r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: java.io.OutputStream mOutputStream>;

        if r3 == null goto label05;

     label04:
        $z0 = 1;

     label05:
        exitmonitor $r6;

     label06:
        return $z0;

     label07:
        $r7 := @caughtexception;

        exitmonitor $r6;

     label08:
        throw $r7;

     label09:
        r1 = r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: javax.net.ssl.HttpsURLConnection mConn>;

        r4 = r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl$Uploader mUploader>;

        r2 = r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: java.io.InputStream mInputStream>;

        r3 = r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: java.io.OutputStream mOutputStream>;

        exitmonitor $r6;

     label10:
        $r6 = r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: com.dropbox.sync.android.CoreStandardHttpRequestor this$0>;

        $r8 = staticinvoke <com.dropbox.sync.android.CoreStandardHttpRequestor: com.dropbox.sync.android.CoreLogger access$200(com.dropbox.sync.android.CoreStandardHttpRequestor)>($r6);

        $r9 = staticinvoke <com.dropbox.sync.android.CoreStandardHttpRequestor: java.lang.String access$300()>();

        $r10 = newarray (java.io.Closeable)[4];

        $r5 = new com.dropbox.sync.android.CoreStandardHttpRequestor$ConnectionCloser;

        specialinvoke $r5.<com.dropbox.sync.android.CoreStandardHttpRequestor$ConnectionCloser: void <init>(javax.net.ssl.HttpsURLConnection)>(r1);

        $r10[0] = $r5;

        $r10[1] = r4;

        $r10[2] = r2;

        $r10[3] = r3;

        staticinvoke <com.dropbox.sync.android.CoreIOUtil: void closeAllLoggingErrors(com.dropbox.sync.android.CoreLogger,java.lang.String,java.lang.String,java.io.Closeable[])>($r8, $r9, "Failed to close HTTP stream.", $r10);

        return 0;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label03 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
        catch java.lang.Throwable from label09 to label10 with label07;
    }
    public void checkCanceled() throws java.io.IOException
    {
        com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl r0;
        com.dropbox.sync.android.CoreStandardHttpRequestor $r1;

        r0 := @this: com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl;

        $r1 = r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: com.dropbox.sync.android.CoreStandardHttpRequestor this$0>;

        staticinvoke <com.dropbox.sync.android.CoreStandardHttpRequestor: void access$000(com.dropbox.sync.android.CoreStandardHttpRequestor)>($r1);

        return;
    }
    public void close()
    {
        com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl r0;
        boolean $z0;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        com.dropbox.sync.android.CoreStandardHttpRequestor $r2;

        r0 := @this: com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl;

        $r1 = r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: java.util.concurrent.atomic.AtomicBoolean mClosed>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: com.dropbox.sync.android.CoreStandardHttpRequestor this$0>;

        staticinvoke <com.dropbox.sync.android.CoreStandardHttpRequestor: void access$400(com.dropbox.sync.android.CoreStandardHttpRequestor,com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl)>($r2, r0);

        $r1 = r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: java.util.concurrent.atomic.AtomicBoolean mClosed>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

        return;
    }
    public com.dropbox.sync.android.CoreHttpRequestor$Response doGet(java.lang.String, java.lang.Iterable, int) throws java.io.IOException
    {
        com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl r0;
        java.lang.String $r1;
        java.lang.Iterable r2;
        int $i0;
        java.io.FileNotFoundException r3;
        com.dropbox.sync.android.CoreStandardHttpRequestor $r4;
        boolean $z0;
        com.dropbox.sync.android.DbxRuntimeException$BadState $r5;
        java.lang.Throwable $r6;
        javax.net.ssl.HttpsURLConnection $r7;
        java.io.InputStream $r8;
        com.dropbox.sync.android.CoreHttpRequestor$Response $r9;

        r0 := @this: com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl;

        $r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Iterable;

        $i0 := @parameter2: int;

        $r4 = r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: com.dropbox.sync.android.CoreStandardHttpRequestor this$0>;

        entermonitor $r4;

     label1:
        $z0 = r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: boolean mStarted>;

        if $z0 == 0 goto label4;

        $r5 = new com.dropbox.sync.android.DbxRuntimeException$BadState;

        specialinvoke $r5.<com.dropbox.sync.android.DbxRuntimeException$BadState: void <init>(java.lang.String)>("Can\'t use SingleRequest for more than one request.");

        throw $r5;

     label2:
        $r6 := @caughtexception;

        exitmonitor $r4;

     label3:
        throw $r6;

     label4:
        r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: boolean mStarted> = 1;

        $r7 = specialinvoke r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: javax.net.ssl.HttpsURLConnection prepRequest(java.lang.String,java.lang.Iterable,int)>($r1, r2, $i0);

        specialinvoke r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: void setConn(javax.net.ssl.HttpsURLConnection)>($r7);

        exitmonitor $r4;

     label5:
        $r7 = r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: javax.net.ssl.HttpsURLConnection mConn>;

        virtualinvoke $r7.<javax.net.ssl.HttpsURLConnection: void setRequestMethod(java.lang.String)>("GET");

        $r7 = r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: javax.net.ssl.HttpsURLConnection mConn>;

        virtualinvoke $r7.<javax.net.ssl.HttpsURLConnection: void connect()>();

        $r7 = r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: javax.net.ssl.HttpsURLConnection mConn>;

     label6:
        $r8 = virtualinvoke $r7.<javax.net.ssl.HttpsURLConnection: java.io.InputStream getInputStream()>();

     label7:
        specialinvoke r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: void setInputStream(java.io.InputStream)>($r8);

        $r7 = r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: javax.net.ssl.HttpsURLConnection mConn>;

        $r9 = staticinvoke <com.dropbox.sync.android.CoreStandardHttpRequestor: com.dropbox.sync.android.CoreHttpRequestor$Response access$100(javax.net.ssl.HttpsURLConnection,java.io.InputStream)>($r7, $r8);

        return $r9;

     label8:
        r3 := @caughtexception;

        $r7 = r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: javax.net.ssl.HttpsURLConnection mConn>;

        $r8 = virtualinvoke $r7.<javax.net.ssl.HttpsURLConnection: java.io.InputStream getErrorStream()>();

        goto label7;

        catch java.lang.Throwable from label1 to label3 with label2;
        catch java.lang.Throwable from label4 to label5 with label2;
        catch java.io.FileNotFoundException from label6 to label7 with label8;
    }
    protected void finalize() throws java.lang.Exception
    {
        com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl r0;
        boolean $z0;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        com.dropbox.sync.android.DbxRuntimeException$BadState $r2;

        r0 := @this: com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl;

        $r1 = r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: java.util.concurrent.atomic.AtomicBoolean mClosed>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z0 != 0 goto label1;

        $r2 = new com.dropbox.sync.android.DbxRuntimeException$BadState;

        specialinvoke $r2.<com.dropbox.sync.android.DbxRuntimeException$BadState: void <init>(java.lang.String)>("SingleRequest not closed before finalization.");

        throw $r2;

     label1:
        return;
    }
    public volatile com.dropbox.sync.android.CoreHttpRequestor$Uploader startPost(java.lang.String, java.lang.Iterable, int, int) throws java.io.IOException
    {
        com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl r0;
        java.lang.String $r1;
        java.lang.Iterable $r2;
        int $i0, $i1;
        com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl$Uploader $r3;

        r0 := @this: com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Iterable;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $r3 = virtualinvoke r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl$Uploader startPost(java.lang.String,java.lang.Iterable,int,int)>($r1, $r2, $i0, $i1);

        return $r3;
    }
    public com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl$Uploader startPost(java.lang.String, java.lang.Iterable, int, int) throws java.io.IOException
    {
        com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl r0;
        java.lang.String $r1;
        java.lang.Iterable r2;
        int $i0, $i1;
        com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl$Uploader r3;
        javax.net.ssl.HttpsURLConnection $r4;
        com.dropbox.sync.android.CoreStandardHttpRequestor $r5;
        boolean $z0;
        com.dropbox.sync.android.DbxRuntimeException$BadState $r6;
        java.lang.Throwable $r7;

        r0 := @this: com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl;

        $r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Iterable;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $r5 = r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: com.dropbox.sync.android.CoreStandardHttpRequestor this$0>;

        entermonitor $r5;

     label1:
        $z0 = r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: boolean mStarted>;

        if $z0 == 0 goto label4;

        $r6 = new com.dropbox.sync.android.DbxRuntimeException$BadState;

        specialinvoke $r6.<com.dropbox.sync.android.DbxRuntimeException$BadState: void <init>(java.lang.String)>("Can\'t use SingleRequest for more than one request.");

        throw $r6;

     label2:
        $r7 := @caughtexception;

        exitmonitor $r5;

     label3:
        throw $r7;

     label4:
        r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: boolean mStarted> = 1;

        $r4 = specialinvoke r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: javax.net.ssl.HttpsURLConnection prepRequest(java.lang.String,java.lang.Iterable,int)>($r1, r2, $i1);

        specialinvoke r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: void setConn(javax.net.ssl.HttpsURLConnection)>($r4);

        exitmonitor $r5;

     label5:
        $r4 = r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: javax.net.ssl.HttpsURLConnection mConn>;

        virtualinvoke $r4.<javax.net.ssl.HttpsURLConnection: void setRequestMethod(java.lang.String)>("POST");

        r3 = new com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl$Uploader;

        $r4 = r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: javax.net.ssl.HttpsURLConnection mConn>;

        specialinvoke r3.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl$Uploader: void <init>(com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl,javax.net.ssl.HttpsURLConnection,int)>(r0, $r4, $i0);

        specialinvoke r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: void setUploader(com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl$Uploader)>(r3);

        return r3;

        catch java.lang.Throwable from label1 to label3 with label2;
        catch java.lang.Throwable from label4 to label5 with label2;
    }
    public volatile com.dropbox.sync.android.CoreHttpRequestor$Uploader startPut(java.lang.String, java.lang.Iterable, int, int) throws java.io.IOException
    {
        com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl r0;
        java.lang.String $r1;
        java.lang.Iterable $r2;
        int $i0, $i1;
        com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl$Uploader $r3;

        r0 := @this: com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Iterable;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $r3 = virtualinvoke r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl$Uploader startPut(java.lang.String,java.lang.Iterable,int,int)>($r1, $r2, $i0, $i1);

        return $r3;
    }
    public com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl$Uploader startPut(java.lang.String, java.lang.Iterable, int, int) throws java.io.IOException
    {
        com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl r0;
        java.lang.String $r1;
        java.lang.Iterable r2;
        int $i0, $i1;
        com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl$Uploader r3;
        javax.net.ssl.HttpsURLConnection $r4;
        com.dropbox.sync.android.CoreStandardHttpRequestor $r5;
        boolean $z0;
        com.dropbox.sync.android.DbxRuntimeException$BadState $r6;
        java.lang.Throwable $r7;

        r0 := @this: com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl;

        $r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Iterable;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $r5 = r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: com.dropbox.sync.android.CoreStandardHttpRequestor this$0>;

        entermonitor $r5;

     label1:
        $z0 = r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: boolean mStarted>;

        if $z0 == 0 goto label4;

        $r6 = new com.dropbox.sync.android.DbxRuntimeException$BadState;

        specialinvoke $r6.<com.dropbox.sync.android.DbxRuntimeException$BadState: void <init>(java.lang.String)>("Can\'t use SingleRequest for more than one request.");

        throw $r6;

     label2:
        $r7 := @caughtexception;

        exitmonitor $r5;

     label3:
        throw $r7;

     label4:
        r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: boolean mStarted> = 1;

        $r4 = specialinvoke r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: javax.net.ssl.HttpsURLConnection prepRequest(java.lang.String,java.lang.Iterable,int)>($r1, r2, $i1);

        specialinvoke r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: void setConn(javax.net.ssl.HttpsURLConnection)>($r4);

        exitmonitor $r5;

     label5:
        $r4 = r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: javax.net.ssl.HttpsURLConnection mConn>;

        virtualinvoke $r4.<javax.net.ssl.HttpsURLConnection: void setRequestMethod(java.lang.String)>("PUT");

        r3 = new com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl$Uploader;

        $r4 = r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: javax.net.ssl.HttpsURLConnection mConn>;

        specialinvoke r3.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl$Uploader: void <init>(com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl,javax.net.ssl.HttpsURLConnection,int)>(r0, $r4, $i0);

        specialinvoke r0.<com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl: void setUploader(com.dropbox.sync.android.CoreStandardHttpRequestor$SingleRequestImpl$Uploader)>(r3);

        return r3;

        catch java.lang.Throwable from label1 to label3 with label2;
        catch java.lang.Throwable from label4 to label5 with label2;
    }
