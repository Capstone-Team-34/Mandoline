de.duenndns.ssl.MemorizingTrustManager extends java.lang.Object implements javax.net.ssl.X509TrustManager
public static final java.lang.String DECISION_INTENT
static final java.lang.String DECISION_INTENT_APP
static final java.lang.String DECISION_INTENT_CERT
public static final java.lang.String DECISION_INTENT_CHOICE
public static final java.lang.String DECISION_INTENT_ID
static java.lang.String KEYSTORE_DIR
static java.lang.String KEYSTORE_FILE
private static final int NOTIFICATION_ID
static final java.lang.String TAG
private static int decisionId
private static de.duenndns.ssl.MemorizingResponder mResponder
private static java.util.HashMap openDecisions
private java.security.KeyStore appKeyStore
private javax.net.ssl.X509TrustManager appTrustManager
private javax.net.ssl.X509TrustManager defaultTrustManager
android.support.v7.app.AppCompatActivity foregroundAct
private java.io.File keyStoreFile
android.content.Context master
android.os.Handler masterHandler
android.app.NotificationManager notificationManager
    static void <clinit>()
    {
        java.util.HashMap $r0;

        <de.duenndns.ssl.MemorizingTrustManager: java.lang.String KEYSTORE_DIR> = "KeyStore";

        <de.duenndns.ssl.MemorizingTrustManager: java.lang.String KEYSTORE_FILE> = "KeyStore.bks";

        <de.duenndns.ssl.MemorizingTrustManager: int decisionId> = 0;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <de.duenndns.ssl.MemorizingTrustManager: java.util.HashMap openDecisions> = $r0;

        return;
    }
    public void <init>(android.content.Context)
    {
        de.duenndns.ssl.MemorizingTrustManager r0;
        android.content.Context r1, $r3;
        android.os.Handler $r2;
        java.lang.Object $r4;
        android.app.NotificationManager $r5;
        boolean $z0;
        android.app.Application r6;
        java.lang.String $r7;
        java.io.File $r8, $r9;
        java.lang.StringBuilder $r10;
        java.security.KeyStore $r11;
        javax.net.ssl.X509TrustManager $r12;
        android.app.Service r13;
        android.app.Activity r14;
        java.lang.ClassCastException $r15;

        r0 := @this: de.duenndns.ssl.MemorizingTrustManager;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<de.duenndns.ssl.MemorizingTrustManager: android.content.Context master> = r1;

        $r2 = new android.os.Handler;

        specialinvoke $r2.<android.os.Handler: void <init>()>();

        r0.<de.duenndns.ssl.MemorizingTrustManager: android.os.Handler masterHandler> = $r2;

        $r3 = r0.<de.duenndns.ssl.MemorizingTrustManager: android.content.Context master>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("notification");

        $r5 = (android.app.NotificationManager) $r4;

        r0.<de.duenndns.ssl.MemorizingTrustManager: android.app.NotificationManager notificationManager> = $r5;

        $z0 = r1 instanceof android.app.Application;

        if $z0 == 0 goto label2;

        r6 = (android.app.Application) r1;

     label1:
        $r7 = <de.duenndns.ssl.MemorizingTrustManager: java.lang.String KEYSTORE_DIR>;

        $r8 = virtualinvoke r6.<android.app.Application: java.io.File getDir(java.lang.String,int)>($r7, 0);

        $r9 = new java.io.File;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r7 = <java.io.File: java.lang.String separator>;

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r7 = <de.duenndns.ssl.MemorizingTrustManager: java.lang.String KEYSTORE_FILE>;

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r7 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.io.File: void <init>(java.lang.String)>($r7);

        r0.<de.duenndns.ssl.MemorizingTrustManager: java.io.File keyStoreFile> = $r9;

        $r11 = virtualinvoke r0.<de.duenndns.ssl.MemorizingTrustManager: java.security.KeyStore loadAppKeyStore()>();

        r0.<de.duenndns.ssl.MemorizingTrustManager: java.security.KeyStore appKeyStore> = $r11;

        $r12 = virtualinvoke r0.<de.duenndns.ssl.MemorizingTrustManager: javax.net.ssl.X509TrustManager getTrustManager(java.security.KeyStore)>(null);

        r0.<de.duenndns.ssl.MemorizingTrustManager: javax.net.ssl.X509TrustManager defaultTrustManager> = $r12;

        $r11 = r0.<de.duenndns.ssl.MemorizingTrustManager: java.security.KeyStore appKeyStore>;

        $r12 = virtualinvoke r0.<de.duenndns.ssl.MemorizingTrustManager: javax.net.ssl.X509TrustManager getTrustManager(java.security.KeyStore)>($r11);

        r0.<de.duenndns.ssl.MemorizingTrustManager: javax.net.ssl.X509TrustManager appTrustManager> = $r12;

        return;

     label2:
        $z0 = r1 instanceof android.app.Service;

        if $z0 == 0 goto label3;

        r13 = (android.app.Service) r1;

        r6 = virtualinvoke r13.<android.app.Service: android.app.Application getApplication()>();

        goto label1;

     label3:
        $z0 = r1 instanceof android.app.Activity;

        if $z0 == 0 goto label4;

        r14 = (android.app.Activity) r1;

        r6 = virtualinvoke r14.<android.app.Activity: android.app.Application getApplication()>();

        goto label1;

     label4:
        $r15 = new java.lang.ClassCastException;

        specialinvoke $r15.<java.lang.ClassCastException: void <init>(java.lang.String)>("MemorizingTrustManager context must be either Activity or Service!");

        throw $r15;
    }
    static de.duenndns.ssl.MemorizingResponder access$000()
    {
        de.duenndns.ssl.MemorizingResponder r0;

        r0 = <de.duenndns.ssl.MemorizingTrustManager: de.duenndns.ssl.MemorizingResponder mResponder>;

        return r0;
    }
    private java.lang.String certChainMessage(java.security.cert.X509Certificate[], java.security.cert.CertificateException)
    {
        de.duenndns.ssl.MemorizingTrustManager r0;
        java.security.cert.X509Certificate[] $r1;
        java.security.cert.CertificateException $r2;
        java.security.cert.X509Certificate r3;
        java.lang.StringBuffer r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;
        java.lang.Throwable $r7;
        int $i0, $i1;
        java.security.Principal $r8;

        r0 := @this: de.duenndns.ssl.MemorizingTrustManager;

        $r1 := @parameter0: java.security.cert.X509Certificate[];

        $r2 := @parameter1: java.security.cert.CertificateException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("certChainMessage for ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("MemorizingTrustManager", $r6);

        r4 = new java.lang.StringBuffer;

        specialinvoke r4.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r2.<java.lang.Throwable: java.lang.Throwable getCause()>();

        if $r7 == null goto label1;

        $r7 = virtualinvoke $r2.<java.lang.Throwable: java.lang.Throwable getCause()>();

        $r6 = virtualinvoke $r7.<java.lang.Throwable: java.lang.String getLocalizedMessage()>();

        virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

     label1:
        $i0 = lengthof $r1;

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label3;

        r3 = $r1[$i1];

        virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\n");

        $r8 = virtualinvoke r3.<java.security.cert.X509Certificate: java.security.Principal getSubjectDN()>();

        $r6 = interfaceinvoke $r8.<java.security.Principal: java.lang.String toString()>();

        virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\nMD5: ");

        $r6 = staticinvoke <de.duenndns.ssl.MemorizingTrustManager: java.lang.String certHash(java.security.cert.X509Certificate,java.lang.String)>(r3, "MD5");

        virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\nSHA1: ");

        $r6 = staticinvoke <de.duenndns.ssl.MemorizingTrustManager: java.lang.String certHash(java.security.cert.X509Certificate,java.lang.String)>(r3, "SHA-1");

        virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\nSigned by: ");

        $r8 = virtualinvoke r3.<java.security.cert.X509Certificate: java.security.Principal getIssuerDN()>();

        $r6 = interfaceinvoke $r8.<java.security.Principal: java.lang.String toString()>();

        virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $r6 = virtualinvoke r4.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r6;
    }
    private static java.lang.String certHash(java.security.cert.X509Certificate, java.lang.String)
    {
        java.security.cert.X509Certificate $r0;
        java.lang.String $r1;
        java.security.MessageDigest $r2;
        byte[] $r3;
        java.security.cert.CertificateEncodingException r4;
        java.security.NoSuchAlgorithmException r5;

        $r0 := @parameter0: java.security.cert.X509Certificate;

        $r1 := @parameter1: java.lang.String;

     label1:
        $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r1);

        $r3 = virtualinvoke $r0.<java.security.cert.X509Certificate: byte[] getEncoded()>();

        virtualinvoke $r2.<java.security.MessageDigest: void update(byte[])>($r3);

        $r3 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest()>();

        $r1 = staticinvoke <de.duenndns.ssl.MemorizingTrustManager: java.lang.String hexString(byte[])>($r3);

     label2:
        return $r1;

     label3:
        r4 := @caughtexception;

        $r1 = virtualinvoke r4.<java.security.cert.CertificateEncodingException: java.lang.String getMessage()>();

        return $r1;

     label4:
        r5 := @caughtexception;

        $r1 = virtualinvoke r5.<java.security.NoSuchAlgorithmException: java.lang.String getMessage()>();

        return $r1;

        catch java.security.cert.CertificateEncodingException from label1 to label2 with label3;
        catch java.security.NoSuchAlgorithmException from label1 to label2 with label4;
    }
    private int createDecisionId(de.duenndns.ssl.MTMDecision)
    {
        de.duenndns.ssl.MemorizingTrustManager r0;
        de.duenndns.ssl.MTMDecision $r1;
        int i0, $i1;
        java.util.HashMap $r2, $r4;
        java.lang.Integer $r3;
        java.lang.Throwable $r5;

        r0 := @this: de.duenndns.ssl.MemorizingTrustManager;

        $r1 := @parameter0: de.duenndns.ssl.MTMDecision;

        $r2 = <de.duenndns.ssl.MemorizingTrustManager: java.util.HashMap openDecisions>;

        entermonitor $r2;

     label1:
        i0 = <de.duenndns.ssl.MemorizingTrustManager: int decisionId>;

        $r4 = <de.duenndns.ssl.MemorizingTrustManager: java.util.HashMap openDecisions>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r1);

        $i1 = <de.duenndns.ssl.MemorizingTrustManager: int decisionId>;

        $i1 = $i1 + 1;

        <de.duenndns.ssl.MemorizingTrustManager: int decisionId> = $i1;

        exitmonitor $r2;

     label2:
        return i0;

     label3:
        $r5 := @caughtexception;

        exitmonitor $r2;

     label4:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
    public static javax.net.ssl.X509TrustManager[] getInstanceList(android.content.Context)
    {
        android.content.Context $r0;
        de.duenndns.ssl.MemorizingTrustManager $r1;
        javax.net.ssl.X509TrustManager[] $r2;

        $r0 := @parameter0: android.content.Context;

        $r2 = newarray (javax.net.ssl.X509TrustManager)[1];

        $r1 = new de.duenndns.ssl.MemorizingTrustManager;

        specialinvoke $r1.<de.duenndns.ssl.MemorizingTrustManager: void <init>(android.content.Context)>($r0);

        $r2[0] = $r1;

        return $r2;
    }
    public static de.duenndns.ssl.MemorizingResponder getResponder()
    {
        de.duenndns.ssl.MemorizingResponder r0;

        r0 = <de.duenndns.ssl.MemorizingTrustManager: de.duenndns.ssl.MemorizingResponder mResponder>;

        return r0;
    }
    private static java.lang.String hexString(byte[])
    {
        byte[] $r0;
        java.lang.StringBuffer r1;
        int i0, $i1;
        java.lang.Object[] $r2;
        byte $b2;
        java.lang.Byte $r3;
        java.lang.String $r4;

        $r0 := @parameter0: byte[];

        r1 = new java.lang.StringBuffer;

        specialinvoke r1.<java.lang.StringBuffer: void <init>()>();

        i0 = 0;

     label1:
        $i1 = lengthof $r0;

        if i0 >= $i1 goto label3;

        $r2 = newarray (java.lang.Object)[1];

        $b2 = $r0[i0];

        $r3 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b2);

        $r2[0] = $r3;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%02x", $r2);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $i1 = lengthof $r0;

        $i1 = $i1 + -1;

        if i0 >= $i1 goto label2;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        $r4 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }
    public static void interactResult(int, int)
    {
        int $i0, $i1;
        java.lang.StringBuilder $r0;
        java.lang.String $r1;
        java.util.HashMap $r2, $r3;
        java.lang.Integer $r4;
        java.lang.Object $r5;
        de.duenndns.ssl.MTMDecision r6;
        java.lang.Throwable $r7, $r8;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("interactResult: ");

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" chose ");

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("MemorizingTrustManager", $r1);

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("openDecisions: ");

        $r2 = <de.duenndns.ssl.MemorizingTrustManager: java.util.HashMap openDecisions>;

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("MemorizingTrustManager", $r1);

        $r2 = <de.duenndns.ssl.MemorizingTrustManager: java.util.HashMap openDecisions>;

        entermonitor $r2;

     label01:
        $r3 = <de.duenndns.ssl.MemorizingTrustManager: java.util.HashMap openDecisions>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r5 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r4);

        r6 = (de.duenndns.ssl.MTMDecision) $r5;

        $r3 = <de.duenndns.ssl.MemorizingTrustManager: java.util.HashMap openDecisions>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r4);

        exitmonitor $r2;

     label02:
        if r6 != null goto label06;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("MemorizingTrustManager", "interactResult: aborting due to stale decision reference!");

        return;

     label03:
        $r7 := @caughtexception;

     label04:
        exitmonitor $r2;

     label05:
        throw $r7;

     label06:
        entermonitor r6;

     label07:
        r6.<de.duenndns.ssl.MTMDecision: int state> = $i1;

        virtualinvoke r6.<java.lang.Object: void notify()>();

        exitmonitor r6;

     label08:
        return;

     label09:
        $r8 := @caughtexception;

        exitmonitor r6;

     label10:
        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label04 to label05 with label03;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }
    public static void interactResult(android.content.Intent)
    {
        android.content.Intent $r0;
        int $i0, $i1;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        java.util.HashMap $r3, $r4;
        java.lang.Integer $r5;
        java.lang.Object $r6;
        de.duenndns.ssl.MTMDecision r7;
        java.lang.Throwable $r8, $r9;

        $r0 := @parameter0: android.content.Intent;

        $i0 = virtualinvoke $r0.<android.content.Intent: int getIntExtra(java.lang.String,int)>("de.duenndns.ssl.DECISION.decisionId", 0);

        $i1 = virtualinvoke $r0.<android.content.Intent: int getIntExtra(java.lang.String,int)>("de.duenndns.ssl.DECISION.decisionChoice", 0);

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("interactResult: ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" chose ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("MemorizingTrustManager", $r2);

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("openDecisions: ");

        $r3 = <de.duenndns.ssl.MemorizingTrustManager: java.util.HashMap openDecisions>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("MemorizingTrustManager", $r2);

        $r3 = <de.duenndns.ssl.MemorizingTrustManager: java.util.HashMap openDecisions>;

        entermonitor $r3;

     label01:
        $r4 = <de.duenndns.ssl.MemorizingTrustManager: java.util.HashMap openDecisions>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r6 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r5);

        r7 = (de.duenndns.ssl.MTMDecision) $r6;

        $r4 = <de.duenndns.ssl.MemorizingTrustManager: java.util.HashMap openDecisions>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r5);

        exitmonitor $r3;

     label02:
        if r7 != null goto label06;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("MemorizingTrustManager", "interactResult: aborting due to stale decision reference!");

        return;

     label03:
        $r8 := @caughtexception;

     label04:
        exitmonitor $r3;

     label05:
        throw $r8;

     label06:
        entermonitor r7;

     label07:
        r7.<de.duenndns.ssl.MTMDecision: int state> = $i1;

        virtualinvoke r7.<java.lang.Object: void notify()>();

        exitmonitor r7;

     label08:
        return;

     label09:
        $r9 := @caughtexception;

        exitmonitor r7;

     label10:
        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label04 to label05 with label03;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }
    private boolean isCertKnown(java.security.cert.X509Certificate)
    {
        de.duenndns.ssl.MemorizingTrustManager r0;
        java.security.cert.X509Certificate $r1;
        java.security.KeyStoreException r2;
        java.lang.String $r3;
        java.security.KeyStore $r4;

        r0 := @this: de.duenndns.ssl.MemorizingTrustManager;

        $r1 := @parameter0: java.security.cert.X509Certificate;

        $r4 = r0.<de.duenndns.ssl.MemorizingTrustManager: java.security.KeyStore appKeyStore>;

     label1:
        $r3 = virtualinvoke $r4.<java.security.KeyStore: java.lang.String getCertificateAlias(java.security.cert.Certificate)>($r1);

     label2:
        if $r3 == null goto label4;

        return 1;

     label3:
        r2 := @caughtexception;

     label4:
        return 0;

        catch java.security.KeyStoreException from label1 to label2 with label3;
    }
    private boolean isExpiredException(java.lang.Throwable)
    {
        de.duenndns.ssl.MemorizingTrustManager r0;
        java.lang.Throwable $r1, $r2;
        boolean $z0;

        r0 := @this: de.duenndns.ssl.MemorizingTrustManager;

        $r2 := @parameter0: java.lang.Throwable;

     label1:
        $z0 = $r2 instanceof java.security.cert.CertificateExpiredException;

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $r1 = virtualinvoke $r2.<java.lang.Throwable: java.lang.Throwable getCause()>();

        $r2 = $r1;

        if $r1 != null goto label1;

        return 0;
    }
    public static void setKeyStoreFile(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        <de.duenndns.ssl.MemorizingTrustManager: java.lang.String KEYSTORE_DIR> = $r0;

        <de.duenndns.ssl.MemorizingTrustManager: java.lang.String KEYSTORE_FILE> = $r1;

        return;
    }
    public static void setResponder(de.duenndns.ssl.MemorizingResponder)
    {
        de.duenndns.ssl.MemorizingResponder $r0;

        $r0 := @parameter0: de.duenndns.ssl.MemorizingResponder;

        <de.duenndns.ssl.MemorizingTrustManager: de.duenndns.ssl.MemorizingResponder mResponder> = $r0;

        return;
    }
    public void bindDisplayActivity(android.support.v7.app.AppCompatActivity)
    {
        de.duenndns.ssl.MemorizingTrustManager r0;
        android.support.v7.app.AppCompatActivity $r1;

        r0 := @this: de.duenndns.ssl.MemorizingTrustManager;

        $r1 := @parameter0: android.support.v7.app.AppCompatActivity;

        r0.<de.duenndns.ssl.MemorizingTrustManager: android.support.v7.app.AppCompatActivity foregroundAct> = $r1;

        return;
    }
    public void checkCertTrusted(java.security.cert.X509Certificate[], java.lang.String, boolean) throws java.security.cert.CertificateException
    {
        de.duenndns.ssl.MemorizingTrustManager r0;
        java.security.cert.X509Certificate[] $r1;
        java.lang.String $r2, $r6;
        boolean $z0, $z1;
        java.security.cert.CertificateException r3, r4;
        java.lang.StringBuilder $r5;
        javax.net.ssl.X509TrustManager $r7;
        java.security.cert.X509Certificate $r8;

        r0 := @this: de.duenndns.ssl.MemorizingTrustManager;

        $r1 := @parameter0: java.security.cert.X509Certificate[];

        $r2 := @parameter1: java.lang.String;

        $z0 := @parameter2: boolean;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("checkCertTrusted(");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("MemorizingTrustManager", $r6);

     label01:
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("MemorizingTrustManager", "checkCertTrusted: trying appTrustManager");

     label02:
        if $z0 == 0 goto label05;

        $r7 = r0.<de.duenndns.ssl.MemorizingTrustManager: javax.net.ssl.X509TrustManager appTrustManager>;

     label03:
        interfaceinvoke $r7.<javax.net.ssl.X509TrustManager: void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String)>($r1, $r2);

     label04:
        return;

     label05:
        $r7 = r0.<de.duenndns.ssl.MemorizingTrustManager: javax.net.ssl.X509TrustManager appTrustManager>;

     label06:
        interfaceinvoke $r7.<javax.net.ssl.X509TrustManager: void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String)>($r1, $r2);

     label07:
        return;

     label08:
        r3 := @caughtexception;

        $z1 = specialinvoke r0.<de.duenndns.ssl.MemorizingTrustManager: boolean isExpiredException(java.lang.Throwable)>(r3);

        if $z1 == 0 goto label09;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("MemorizingTrustManager", "checkCertTrusted: accepting expired certificate from keystore");

        return;

     label09:
        $r8 = $r1[0];

        $z1 = specialinvoke r0.<de.duenndns.ssl.MemorizingTrustManager: boolean isCertKnown(java.security.cert.X509Certificate)>($r8);

        if $z1 == 0 goto label10;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("MemorizingTrustManager", "checkCertTrusted: accepting cert already stored in keystore");

        return;

     label10:
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("MemorizingTrustManager", "checkCertTrusted: trying defaultTrustManager");

     label11:
        if $z0 == 0 goto label15;

        $r7 = r0.<de.duenndns.ssl.MemorizingTrustManager: javax.net.ssl.X509TrustManager defaultTrustManager>;

     label12:
        interfaceinvoke $r7.<javax.net.ssl.X509TrustManager: void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String)>($r1, $r2);

     label13:
        return;

     label14:
        r4 := @caughtexception;

        $r6 = virtualinvoke r4.<java.security.cert.CertificateException: java.lang.String getMessage()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("MemorizingTrustManager", $r6, r4);

        virtualinvoke r0.<de.duenndns.ssl.MemorizingTrustManager: void interact(java.security.cert.X509Certificate[],java.lang.String,java.security.cert.CertificateException)>($r1, $r2, r4);

        return;

     label15:
        $r7 = r0.<de.duenndns.ssl.MemorizingTrustManager: javax.net.ssl.X509TrustManager defaultTrustManager>;

     label16:
        interfaceinvoke $r7.<javax.net.ssl.X509TrustManager: void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String)>($r1, $r2);

     label17:
        return;

        catch java.security.cert.CertificateException from label01 to label02 with label08;
        catch java.security.cert.CertificateException from label03 to label04 with label08;
        catch java.security.cert.CertificateException from label06 to label07 with label08;
        catch java.security.cert.CertificateException from label10 to label11 with label14;
        catch java.security.cert.CertificateException from label12 to label13 with label14;
        catch java.security.cert.CertificateException from label16 to label17 with label14;
    }
    public void checkClientTrusted(java.security.cert.X509Certificate[], java.lang.String) throws java.security.cert.CertificateException
    {
        de.duenndns.ssl.MemorizingTrustManager r0;
        java.security.cert.X509Certificate[] $r1;
        java.lang.String $r2;

        r0 := @this: de.duenndns.ssl.MemorizingTrustManager;

        $r1 := @parameter0: java.security.cert.X509Certificate[];

        $r2 := @parameter1: java.lang.String;

        virtualinvoke r0.<de.duenndns.ssl.MemorizingTrustManager: void checkCertTrusted(java.security.cert.X509Certificate[],java.lang.String,boolean)>($r1, $r2, 0);

        return;
    }
    public void checkServerTrusted(java.security.cert.X509Certificate[], java.lang.String) throws java.security.cert.CertificateException
    {
        de.duenndns.ssl.MemorizingTrustManager r0;
        java.security.cert.X509Certificate[] $r1;
        java.lang.String $r2;

        r0 := @this: de.duenndns.ssl.MemorizingTrustManager;

        $r1 := @parameter0: java.security.cert.X509Certificate[];

        $r2 := @parameter1: java.lang.String;

        virtualinvoke r0.<de.duenndns.ssl.MemorizingTrustManager: void checkCertTrusted(java.security.cert.X509Certificate[],java.lang.String,boolean)>($r1, $r2, 1);

        return;
    }
    public java.security.cert.X509Certificate[] getAcceptedIssuers()
    {
        de.duenndns.ssl.MemorizingTrustManager r0;
        java.security.cert.X509Certificate[] $r1;
        javax.net.ssl.X509TrustManager $r2;

        r0 := @this: de.duenndns.ssl.MemorizingTrustManager;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("MemorizingTrustManager", "getAcceptedIssuers()");

        $r2 = r0.<de.duenndns.ssl.MemorizingTrustManager: javax.net.ssl.X509TrustManager defaultTrustManager>;

        $r1 = interfaceinvoke $r2.<javax.net.ssl.X509TrustManager: java.security.cert.X509Certificate[] getAcceptedIssuers()>();

        return $r1;
    }
    javax.net.ssl.X509TrustManager getTrustManager(java.security.KeyStore)
    {
        de.duenndns.ssl.MemorizingTrustManager r0;
        java.security.KeyStore $r1;
        java.lang.Exception r2;
        boolean $z0;
        javax.net.ssl.TrustManagerFactory $r3;
        javax.net.ssl.TrustManager[] $r4;
        int $i0, $i1;
        javax.net.ssl.TrustManager r5;
        javax.net.ssl.X509TrustManager r6;
        java.lang.StringBuilder $r7;
        java.lang.String $r8;

        r0 := @this: de.duenndns.ssl.MemorizingTrustManager;

        $r1 := @parameter0: java.security.KeyStore;

     label01:
        $r3 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>("X509");

        virtualinvoke $r3.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>($r1);

        $r4 = virtualinvoke $r3.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>();

        $i0 = lengthof $r4;

     label02:
        $i1 = 0;

     label03:
        if $i1 >= $i0 goto label10;

     label04:
        r5 = $r4[$i1];

     label05:
        $z0 = r5 instanceof javax.net.ssl.X509TrustManager;

        if $z0 == 0 goto label08;

     label06:
        r6 = (javax.net.ssl.X509TrustManager) r5;

     label07:
        return r6;

     label08:
        $i1 = $i1 + 1;

        goto label03;

     label09:
        r2 := @caughtexception;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getTrustManager(");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("MemorizingTrustManager", $r8, r2);

     label10:
        return null;

        catch java.lang.Exception from label01 to label02 with label09;
        catch java.lang.Exception from label04 to label05 with label09;
        catch java.lang.Exception from label06 to label07 with label09;
    }
    android.content.Context getUI()
    {
        de.duenndns.ssl.MemorizingTrustManager r0;
        android.support.v7.app.AppCompatActivity $r1;
        android.content.Context r2;

        r0 := @this: de.duenndns.ssl.MemorizingTrustManager;

        $r1 = r0.<de.duenndns.ssl.MemorizingTrustManager: android.support.v7.app.AppCompatActivity foregroundAct>;

        if $r1 == null goto label1;

        $r1 = r0.<de.duenndns.ssl.MemorizingTrustManager: android.support.v7.app.AppCompatActivity foregroundAct>;

        return $r1;

     label1:
        r2 = r0.<de.duenndns.ssl.MemorizingTrustManager: android.content.Context master>;

        return r2;
    }
    void interact(java.security.cert.X509Certificate[], java.lang.String, java.security.cert.CertificateException) throws java.security.cert.CertificateException
    {
        de.duenndns.ssl.MemorizingTrustManager r0;
        java.security.cert.X509Certificate[] $r1;
        java.lang.String $r2, $r11;
        java.security.cert.CertificateException $r3;
        de.duenndns.ssl.MTMDecision r4;
        de.duenndns.ssl.MemorizingTrustManager$1 r5;
        java.lang.InterruptedException r6;
        int $i0;
        android.content.Context $r7, $r10;
        android.content.IntentFilter $r8;
        java.lang.StringBuilder $r9;
        android.os.Handler $r12;
        de.duenndns.ssl.MemorizingTrustManager$2 $r13;
        java.util.HashMap $r14;
        java.lang.Throwable $r15;

        r0 := @this: de.duenndns.ssl.MemorizingTrustManager;

        $r1 := @parameter0: java.security.cert.X509Certificate[];

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.security.cert.CertificateException;

        r4 = new de.duenndns.ssl.MTMDecision;

        specialinvoke r4.<de.duenndns.ssl.MTMDecision: void <init>()>();

        $i0 = specialinvoke r0.<de.duenndns.ssl.MemorizingTrustManager: int createDecisionId(de.duenndns.ssl.MTMDecision)>(r4);

        $r2 = specialinvoke r0.<de.duenndns.ssl.MemorizingTrustManager: java.lang.String certChainMessage(java.security.cert.X509Certificate[],java.security.cert.CertificateException)>($r1, $r3);

        r5 = new de.duenndns.ssl.MemorizingTrustManager$1;

        specialinvoke r5.<de.duenndns.ssl.MemorizingTrustManager$1: void <init>(de.duenndns.ssl.MemorizingTrustManager)>(r0);

        $r7 = r0.<de.duenndns.ssl.MemorizingTrustManager: android.content.Context master>;

        $r8 = new android.content.IntentFilter;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("de.duenndns.ssl.DECISION/");

        $r10 = r0.<de.duenndns.ssl.MemorizingTrustManager: android.content.Context master>;

        $r11 = virtualinvoke $r10.<android.content.Context: java.lang.String getPackageName()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<android.content.IntentFilter: void <init>(java.lang.String)>($r11);

        virtualinvoke $r7.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>(r5, $r8);

        $r12 = r0.<de.duenndns.ssl.MemorizingTrustManager: android.os.Handler masterHandler>;

        $r13 = new de.duenndns.ssl.MemorizingTrustManager$2;

        specialinvoke $r13.<de.duenndns.ssl.MemorizingTrustManager$2: void <init>(de.duenndns.ssl.MemorizingTrustManager,int,java.lang.String)>(r0, $i0, $r2);

        virtualinvoke $r12.<android.os.Handler: boolean post(java.lang.Runnable)>($r13);

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("openDecisions: ");

        $r14 = <de.duenndns.ssl.MemorizingTrustManager: java.util.HashMap openDecisions>;

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r2 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("MemorizingTrustManager", $r2);

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("waiting on ");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("MemorizingTrustManager", $r2);

        entermonitor r4;

     label1:
        virtualinvoke r4.<java.lang.Object: void wait()>();

        exitmonitor r4;

     label2:
        $r7 = r0.<de.duenndns.ssl.MemorizingTrustManager: android.content.Context master>;

        virtualinvoke $r7.<android.content.Context: void unregisterReceiver(android.content.BroadcastReceiver)>(r5);

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("finished wait on ");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $i0 = r4.<de.duenndns.ssl.MTMDecision: int state>;

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("MemorizingTrustManager", $r2);

        $i0 = r4.<de.duenndns.ssl.MTMDecision: int state>;

        lookupswitch($i0)
        {
            case 2: goto label9;
            case 3: goto label8;
            default: goto label3;
        };

     label3:
        throw $r3;

     label4:
        $r15 := @caughtexception;

     label5:
        exitmonitor r4;

     label6:
        throw $r15;

     label7:
        r6 := @caughtexception;

        virtualinvoke r6.<java.lang.InterruptedException: void printStackTrace()>();

        goto label2;

     label8:
        virtualinvoke r0.<de.duenndns.ssl.MemorizingTrustManager: void storeCert(java.security.cert.X509Certificate[])>($r1);

     label9:
        return;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
        catch java.lang.InterruptedException from label6 to label7 with label7;
    }
    java.security.KeyStore loadAppKeyStore()
    {
        de.duenndns.ssl.MemorizingTrustManager r0;
        java.lang.String $r1;
        java.security.KeyStore $r2;
        java.io.FileInputStream $r3;
        java.io.File $r4;
        char[] $r5;
        java.security.KeyStoreException r6;
        java.io.FileNotFoundException r7;
        java.lang.StringBuilder $r8;
        java.lang.Exception r9;

        r0 := @this: de.duenndns.ssl.MemorizingTrustManager;

     label01:
        $r1 = staticinvoke <java.security.KeyStore: java.lang.String getDefaultType()>();

        $r2 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>($r1);

     label02:
        virtualinvoke $r2.<java.security.KeyStore: void load(java.io.InputStream,char[])>(null, null);

     label03:
        $r3 = new java.io.FileInputStream;

     label04:
        $r4 = r0.<de.duenndns.ssl.MemorizingTrustManager: java.io.File keyStoreFile>;

     label05:
        specialinvoke $r3.<java.io.FileInputStream: void <init>(java.io.File)>($r4);

     label06:
        $r1 = "MTM";

     label07:
        $r5 = virtualinvoke $r1.<java.lang.String: char[] toCharArray()>();

        virtualinvoke $r2.<java.security.KeyStore: void load(java.io.InputStream,char[])>($r3, $r5);

     label08:
        return $r2;

     label09:
        r6 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("MemorizingTrustManager", "getAppKeyStore()", r6);

        return null;

     label10:
        r7 := @caughtexception;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getAppKeyStore(");

        $r4 = r0.<de.duenndns.ssl.MemorizingTrustManager: java.io.File keyStoreFile>;

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") - file does not exist");

        $r1 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("MemorizingTrustManager", $r1);

        return $r2;

     label11:
        r9 := @caughtexception;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getAppKeyStore(");

        $r4 = r0.<de.duenndns.ssl.MemorizingTrustManager: java.io.File keyStoreFile>;

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r1 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("MemorizingTrustManager", $r1, r9);

        return $r2;

        catch java.security.KeyStoreException from label01 to label02 with label09;
        catch java.io.FileNotFoundException from label02 to label03 with label10;
        catch java.io.FileNotFoundException from label05 to label06 with label10;
        catch java.io.FileNotFoundException from label07 to label08 with label10;
        catch java.lang.Exception from label02 to label03 with label11;
        catch java.lang.Exception from label04 to label06 with label11;
        catch java.lang.Exception from label07 to label08 with label11;
    }
    void storeCert(java.security.cert.X509Certificate[])
    {
        de.duenndns.ssl.MemorizingTrustManager r0;
        java.security.cert.X509Certificate[] $r1;
        java.security.cert.X509Certificate r2;
        java.io.FileOutputStream r3;
        int $i0, $i1;
        java.security.KeyStore $r4;
        java.security.Principal $r5;
        java.lang.String $r6;
        java.security.KeyStoreException r7;
        java.lang.StringBuilder $r8;
        javax.net.ssl.X509TrustManager $r9;
        java.io.File $r10;
        char[] $r11;
        java.lang.Exception r12;

        r0 := @this: de.duenndns.ssl.MemorizingTrustManager;

        $r1 := @parameter0: java.security.cert.X509Certificate[];

        $i0 = lengthof $r1;

        $i1 = 0;

     label01:
        if $i1 >= $i0 goto label05;

        r2 = $r1[$i1];

        $r4 = r0.<de.duenndns.ssl.MemorizingTrustManager: java.security.KeyStore appKeyStore>;

     label02:
        $r5 = virtualinvoke r2.<java.security.cert.X509Certificate: java.security.Principal getSubjectDN()>();

        $r6 = interfaceinvoke $r5.<java.security.Principal: java.lang.String toString()>();

        virtualinvoke $r4.<java.security.KeyStore: void setCertificateEntry(java.lang.String,java.security.cert.Certificate)>($r6, r2);

     label03:
        $i1 = $i1 + 1;

        goto label01;

     label04:
        r7 := @caughtexception;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("storeCert(");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r6 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("MemorizingTrustManager", $r6, r7);

        return;

     label05:
        $r4 = r0.<de.duenndns.ssl.MemorizingTrustManager: java.security.KeyStore appKeyStore>;

        $r9 = virtualinvoke r0.<de.duenndns.ssl.MemorizingTrustManager: javax.net.ssl.X509TrustManager getTrustManager(java.security.KeyStore)>($r4);

        r0.<de.duenndns.ssl.MemorizingTrustManager: javax.net.ssl.X509TrustManager appTrustManager> = $r9;

        r3 = new java.io.FileOutputStream;

     label06:
        $r10 = r0.<de.duenndns.ssl.MemorizingTrustManager: java.io.File keyStoreFile>;

        specialinvoke r3.<java.io.FileOutputStream: void <init>(java.io.File)>($r10);

        $r4 = r0.<de.duenndns.ssl.MemorizingTrustManager: java.security.KeyStore appKeyStore>;

     label07:
        $r6 = "MTM";

     label08:
        $r11 = virtualinvoke $r6.<java.lang.String: char[] toCharArray()>();

        virtualinvoke $r4.<java.security.KeyStore: void store(java.io.OutputStream,char[])>(r3, $r11);

        virtualinvoke r3.<java.io.FileOutputStream: void close()>();

     label09:
        return;

     label10:
        r12 := @caughtexception;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("storeCert(");

        $r10 = r0.<de.duenndns.ssl.MemorizingTrustManager: java.io.File keyStoreFile>;

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r6 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("MemorizingTrustManager", $r6, r12);

        return;

        catch java.security.KeyStoreException from label02 to label03 with label04;
        catch java.lang.Exception from label06 to label07 with label10;
        catch java.lang.Exception from label08 to label09 with label10;
    }
    public void unbindDisplayActivity(android.app.Activity)
    {
        de.duenndns.ssl.MemorizingTrustManager r0;
        android.app.Activity $r1;
        android.support.v7.app.AppCompatActivity $r2;

        r0 := @this: de.duenndns.ssl.MemorizingTrustManager;

        $r1 := @parameter0: android.app.Activity;

        $r2 = r0.<de.duenndns.ssl.MemorizingTrustManager: android.support.v7.app.AppCompatActivity foregroundAct>;

        if $r2 != $r1 goto label1;

        r0.<de.duenndns.ssl.MemorizingTrustManager: android.support.v7.app.AppCompatActivity foregroundAct> = null;

     label1:
        return;
    }
