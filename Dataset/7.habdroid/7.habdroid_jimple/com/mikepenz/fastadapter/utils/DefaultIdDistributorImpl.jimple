com.mikepenz.fastadapter.utils.DefaultIdDistributorImpl extends com.mikepenz.fastadapter.utils.DefaultIdDistributor
private final java.util.concurrent.atomic.AtomicLong idDistributor
    public void <init>()
    {
        com.mikepenz.fastadapter.utils.DefaultIdDistributorImpl r0;
        java.util.concurrent.atomic.AtomicLong $r1;

        r0 := @this: com.mikepenz.fastadapter.utils.DefaultIdDistributorImpl;

        specialinvoke r0.<com.mikepenz.fastadapter.utils.DefaultIdDistributor: void <init>()>();

        $r1 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(-2L);

        r0.<com.mikepenz.fastadapter.utils.DefaultIdDistributorImpl: java.util.concurrent.atomic.AtomicLong idDistributor> = $r1;

        return;
    }
    public long nextId(com.mikepenz.fastadapter.IIdentifyable)
    {
        com.mikepenz.fastadapter.utils.DefaultIdDistributorImpl r0;
        com.mikepenz.fastadapter.IIdentifyable r1;
        long $l0;
        java.util.concurrent.atomic.AtomicLong $r2;

        r0 := @this: com.mikepenz.fastadapter.utils.DefaultIdDistributorImpl;

        r1 := @parameter0: com.mikepenz.fastadapter.IIdentifyable;

        $r2 = r0.<com.mikepenz.fastadapter.utils.DefaultIdDistributorImpl: java.util.concurrent.atomic.AtomicLong idDistributor>;

        $l0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicLong: long decrementAndGet()>();

        return $l0;
    }
