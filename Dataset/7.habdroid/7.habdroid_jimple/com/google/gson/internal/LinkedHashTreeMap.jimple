com.google.gson.internal.LinkedHashTreeMap extends java.util.AbstractMap implements java.io.Serializable
static final boolean $assertionsDisabled
private static final java.util.Comparator NATURAL_ORDER
java.util.Comparator comparator
private com.google.gson.internal.LinkedHashTreeMap$EntrySet entrySet
final com.google.gson.internal.LinkedHashTreeMap$Node header
private com.google.gson.internal.LinkedHashTreeMap$KeySet keySet
int modCount
int size
com.google.gson.internal.LinkedHashTreeMap$Node[] table
int threshold
    static void <clinit>()
    {
        boolean $z0;
        java.lang.Class $r0;
        com.google.gson.internal.LinkedHashTreeMap$1 $r1;

        $r0 = class "Lcom/google/gson/internal/LinkedHashTreeMap;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label2;

        $z0 = 1;

     label1:
        <com.google.gson.internal.LinkedHashTreeMap: boolean $assertionsDisabled> = $z0;

        $r1 = new com.google.gson.internal.LinkedHashTreeMap$1;

        specialinvoke $r1.<com.google.gson.internal.LinkedHashTreeMap$1: void <init>()>();

        <com.google.gson.internal.LinkedHashTreeMap: java.util.Comparator NATURAL_ORDER> = $r1;

        return;

     label2:
        $z0 = 0;

        goto label1;
    }
    public void <init>()
    {
        com.google.gson.internal.LinkedHashTreeMap r0;
        java.util.Comparator $r1;

        r0 := @this: com.google.gson.internal.LinkedHashTreeMap;

        $r1 = <com.google.gson.internal.LinkedHashTreeMap: java.util.Comparator NATURAL_ORDER>;

        specialinvoke r0.<com.google.gson.internal.LinkedHashTreeMap: void <init>(java.util.Comparator)>($r1);

        return;
    }
    public void <init>(java.util.Comparator)
    {
        com.google.gson.internal.LinkedHashTreeMap r0;
        java.util.Comparator r1;
        com.google.gson.internal.LinkedHashTreeMap$Node $r2;
        com.google.gson.internal.LinkedHashTreeMap$Node[] $r3;
        int $i0, $i1;

        r0 := @this: com.google.gson.internal.LinkedHashTreeMap;

        r1 := @parameter0: java.util.Comparator;

        specialinvoke r0.<java.util.AbstractMap: void <init>()>();

        r0.<com.google.gson.internal.LinkedHashTreeMap: int size> = 0;

        r0.<com.google.gson.internal.LinkedHashTreeMap: int modCount> = 0;

        if r1 == null goto label2;

     label1:
        r0.<com.google.gson.internal.LinkedHashTreeMap: java.util.Comparator comparator> = r1;

        $r2 = new com.google.gson.internal.LinkedHashTreeMap$Node;

        specialinvoke $r2.<com.google.gson.internal.LinkedHashTreeMap$Node: void <init>()>();

        r0.<com.google.gson.internal.LinkedHashTreeMap: com.google.gson.internal.LinkedHashTreeMap$Node header> = $r2;

        $r3 = newarray (com.google.gson.internal.LinkedHashTreeMap$Node)[16];

        r0.<com.google.gson.internal.LinkedHashTreeMap: com.google.gson.internal.LinkedHashTreeMap$Node[] table> = $r3;

        $r3 = r0.<com.google.gson.internal.LinkedHashTreeMap: com.google.gson.internal.LinkedHashTreeMap$Node[] table>;

        $i0 = lengthof $r3;

        $i0 = $i0 / 2;

        $r3 = r0.<com.google.gson.internal.LinkedHashTreeMap: com.google.gson.internal.LinkedHashTreeMap$Node[] table>;

        $i1 = lengthof $r3;

        $i1 = $i1 / 4;

        $i0 = $i0 + $i1;

        r0.<com.google.gson.internal.LinkedHashTreeMap: int threshold> = $i0;

        return;

     label2:
        r1 = <com.google.gson.internal.LinkedHashTreeMap: java.util.Comparator NATURAL_ORDER>;

        goto label1;
    }
    private void doubleCapacity()
    {
        com.google.gson.internal.LinkedHashTreeMap r0;
        com.google.gson.internal.LinkedHashTreeMap$Node[] $r1;
        int $i0, $i1;

        r0 := @this: com.google.gson.internal.LinkedHashTreeMap;

        $r1 = r0.<com.google.gson.internal.LinkedHashTreeMap: com.google.gson.internal.LinkedHashTreeMap$Node[] table>;

        $r1 = staticinvoke <com.google.gson.internal.LinkedHashTreeMap: com.google.gson.internal.LinkedHashTreeMap$Node[] doubleCapacity(com.google.gson.internal.LinkedHashTreeMap$Node[])>($r1);

        r0.<com.google.gson.internal.LinkedHashTreeMap: com.google.gson.internal.LinkedHashTreeMap$Node[] table> = $r1;

        $r1 = r0.<com.google.gson.internal.LinkedHashTreeMap: com.google.gson.internal.LinkedHashTreeMap$Node[] table>;

        $i0 = lengthof $r1;

        $i0 = $i0 / 2;

        $r1 = r0.<com.google.gson.internal.LinkedHashTreeMap: com.google.gson.internal.LinkedHashTreeMap$Node[] table>;

        $i1 = lengthof $r1;

        $i1 = $i1 / 4;

        $i0 = $i0 + $i1;

        r0.<com.google.gson.internal.LinkedHashTreeMap: int threshold> = $i0;

        return;
    }
    static com.google.gson.internal.LinkedHashTreeMap$Node[] doubleCapacity(com.google.gson.internal.LinkedHashTreeMap$Node[])
    {
        com.google.gson.internal.LinkedHashTreeMap$Node[] r0, r3;
        com.google.gson.internal.LinkedHashTreeMap$AvlIterator r1;
        com.google.gson.internal.LinkedHashTreeMap$AvlBuilder r2, r4;
        int i0, $i1, $i2, i3, $i4;
        com.google.gson.internal.LinkedHashTreeMap$Node r5, $r6;

        r0 := @parameter0: com.google.gson.internal.LinkedHashTreeMap$Node[];

        i0 = lengthof r0;

        $i2 = i0 * 2;

        r3 = newarray (com.google.gson.internal.LinkedHashTreeMap$Node)[$i2];

        r1 = new com.google.gson.internal.LinkedHashTreeMap$AvlIterator;

        specialinvoke r1.<com.google.gson.internal.LinkedHashTreeMap$AvlIterator: void <init>()>();

        r2 = new com.google.gson.internal.LinkedHashTreeMap$AvlBuilder;

        specialinvoke r2.<com.google.gson.internal.LinkedHashTreeMap$AvlBuilder: void <init>()>();

        r4 = new com.google.gson.internal.LinkedHashTreeMap$AvlBuilder;

        specialinvoke r4.<com.google.gson.internal.LinkedHashTreeMap$AvlBuilder: void <init>()>();

        $i2 = 0;

     label01:
        if $i2 >= i0 goto label14;

        r5 = r0[$i2];

        if r5 != null goto label03;

     label02:
        $i2 = $i2 + 1;

        goto label01;

     label03:
        virtualinvoke r1.<com.google.gson.internal.LinkedHashTreeMap$AvlIterator: void reset(com.google.gson.internal.LinkedHashTreeMap$Node)>(r5);

        $i1 = 0;

        i3 = 0;

     label04:
        $r6 = virtualinvoke r1.<com.google.gson.internal.LinkedHashTreeMap$AvlIterator: com.google.gson.internal.LinkedHashTreeMap$Node next()>();

        if $r6 == null goto label06;

        $i4 = $r6.<com.google.gson.internal.LinkedHashTreeMap$Node: int hash>;

        $i4 = $i4 & i0;

        if $i4 != 0 goto label05;

        $i1 = $i1 + 1;

        goto label04;

     label05:
        i3 = i3 + 1;

        goto label04;

     label06:
        virtualinvoke r2.<com.google.gson.internal.LinkedHashTreeMap$AvlBuilder: void reset(int)>($i1);

        virtualinvoke r4.<com.google.gson.internal.LinkedHashTreeMap$AvlBuilder: void reset(int)>(i3);

        virtualinvoke r1.<com.google.gson.internal.LinkedHashTreeMap$AvlIterator: void reset(com.google.gson.internal.LinkedHashTreeMap$Node)>(r5);

     label07:
        r5 = virtualinvoke r1.<com.google.gson.internal.LinkedHashTreeMap$AvlIterator: com.google.gson.internal.LinkedHashTreeMap$Node next()>();

        if r5 == null goto label09;

        $i4 = r5.<com.google.gson.internal.LinkedHashTreeMap$Node: int hash>;

        $i4 = $i4 & i0;

        if $i4 != 0 goto label08;

        virtualinvoke r2.<com.google.gson.internal.LinkedHashTreeMap$AvlBuilder: void add(com.google.gson.internal.LinkedHashTreeMap$Node)>(r5);

        goto label07;

     label08:
        virtualinvoke r4.<com.google.gson.internal.LinkedHashTreeMap$AvlBuilder: void add(com.google.gson.internal.LinkedHashTreeMap$Node)>(r5);

        goto label07;

     label09:
        if $i1 <= 0 goto label12;

        r5 = virtualinvoke r2.<com.google.gson.internal.LinkedHashTreeMap$AvlBuilder: com.google.gson.internal.LinkedHashTreeMap$Node root()>();

     label10:
        r3[$i2] = r5;

        $i1 = $i2 + i0;

        if i3 <= 0 goto label13;

        r5 = virtualinvoke r4.<com.google.gson.internal.LinkedHashTreeMap$AvlBuilder: com.google.gson.internal.LinkedHashTreeMap$Node root()>();

     label11:
        r3[$i1] = r5;

        goto label02;

     label12:
        r5 = null;

        goto label10;

     label13:
        r5 = null;

        goto label11;

     label14:
        return r3;
    }
    private boolean equal(java.lang.Object, java.lang.Object)
    {
        com.google.gson.internal.LinkedHashTreeMap r0;
        java.lang.Object $r1, $r2;
        boolean $z0;

        r0 := @this: com.google.gson.internal.LinkedHashTreeMap;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        if $r1 == $r2 goto label1;

        if $r1 == null goto label2;

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    private void rebalance(com.google.gson.internal.LinkedHashTreeMap$Node, boolean)
    {
        com.google.gson.internal.LinkedHashTreeMap r0;
        com.google.gson.internal.LinkedHashTreeMap$Node r1, r2, r3, r4;
        boolean $z0, $z1;
        int i0, i1, i2;
        java.lang.AssertionError $r5;

        r0 := @this: com.google.gson.internal.LinkedHashTreeMap;

        r1 := @parameter0: com.google.gson.internal.LinkedHashTreeMap$Node;

        $z0 := @parameter1: boolean;

     label01:
        if r1 == null goto label27;

        r2 = r1.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node left>;

        r3 = r1.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node right>;

        if r2 == null goto label08;

        i1 = r2.<com.google.gson.internal.LinkedHashTreeMap$Node: int height>;

     label02:
        if r3 == null goto label09;

        i2 = r3.<com.google.gson.internal.LinkedHashTreeMap$Node: int height>;

     label03:
        i0 = i1 - i2;

        if i0 != -2 goto label14;

        r2 = r3.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node left>;

        r4 = r3.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node right>;

        if r4 == null goto label10;

        i0 = r4.<com.google.gson.internal.LinkedHashTreeMap$Node: int height>;

     label04:
        if r2 == null goto label11;

        i1 = r2.<com.google.gson.internal.LinkedHashTreeMap$Node: int height>;

     label05:
        i0 = i1 - i0;

        if i0 == -1 goto label06;

        if i0 != 0 goto label12;

        if $z0 != 0 goto label12;

     label06:
        specialinvoke r0.<com.google.gson.internal.LinkedHashTreeMap: void rotateLeft(com.google.gson.internal.LinkedHashTreeMap$Node)>(r1);

     label07:
        if $z0 == 0 goto label19;

        return;

     label08:
        i1 = 0;

        goto label02;

     label09:
        i2 = 0;

        goto label03;

     label10:
        i0 = 0;

        goto label04;

     label11:
        i1 = 0;

        goto label05;

     label12:
        $z1 = <com.google.gson.internal.LinkedHashTreeMap: boolean $assertionsDisabled>;

        if $z1 != 0 goto label13;

        if i0 == 1 goto label13;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label13:
        specialinvoke r0.<com.google.gson.internal.LinkedHashTreeMap: void rotateRight(com.google.gson.internal.LinkedHashTreeMap$Node)>(r3);

        specialinvoke r0.<com.google.gson.internal.LinkedHashTreeMap: void rotateLeft(com.google.gson.internal.LinkedHashTreeMap$Node)>(r1);

        goto label07;

     label14:
        if i0 != 2 goto label24;

        r3 = r2.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node left>;

        r4 = r2.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node right>;

        if r4 == null goto label20;

        i0 = r4.<com.google.gson.internal.LinkedHashTreeMap$Node: int height>;

     label15:
        if r3 == null goto label21;

        i1 = r3.<com.google.gson.internal.LinkedHashTreeMap$Node: int height>;

     label16:
        i0 = i1 - i0;

        if i0 == 1 goto label17;

        if i0 != 0 goto label22;

        if $z0 != 0 goto label22;

     label17:
        specialinvoke r0.<com.google.gson.internal.LinkedHashTreeMap: void rotateRight(com.google.gson.internal.LinkedHashTreeMap$Node)>(r1);

     label18:
        if $z0 != 0 goto label27;

     label19:
        r1 = r1.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node parent>;

        goto label01;

     label20:
        i0 = 0;

        goto label15;

     label21:
        i1 = 0;

        goto label16;

     label22:
        $z1 = <com.google.gson.internal.LinkedHashTreeMap: boolean $assertionsDisabled>;

        if $z1 != 0 goto label23;

        if i0 == -1 goto label23;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label23:
        specialinvoke r0.<com.google.gson.internal.LinkedHashTreeMap: void rotateLeft(com.google.gson.internal.LinkedHashTreeMap$Node)>(r2);

        specialinvoke r0.<com.google.gson.internal.LinkedHashTreeMap: void rotateRight(com.google.gson.internal.LinkedHashTreeMap$Node)>(r1);

        goto label18;

     label24:
        if i0 != 0 goto label25;

        i0 = i1 + 1;

        r1.<com.google.gson.internal.LinkedHashTreeMap$Node: int height> = i0;

        if $z0 == 0 goto label19;

        return;

     label25:
        $z1 = <com.google.gson.internal.LinkedHashTreeMap: boolean $assertionsDisabled>;

        if $z1 != 0 goto label26;

        if i0 == -1 goto label26;

        if i0 == 1 goto label26;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label26:
        i0 = staticinvoke <java.lang.Math: int max(int,int)>(i1, i2);

        i0 = i0 + 1;

        r1.<com.google.gson.internal.LinkedHashTreeMap$Node: int height> = i0;

        if $z0 != 0 goto label19;

     label27:
        return;
    }
    private void replaceInParent(com.google.gson.internal.LinkedHashTreeMap$Node, com.google.gson.internal.LinkedHashTreeMap$Node)
    {
        com.google.gson.internal.LinkedHashTreeMap r0;
        com.google.gson.internal.LinkedHashTreeMap$Node r1, r2, r3, $r4;
        int i0, $i1;
        boolean $z0;
        java.lang.AssertionError $r5;
        com.google.gson.internal.LinkedHashTreeMap$Node[] $r6;

        r0 := @this: com.google.gson.internal.LinkedHashTreeMap;

        r1 := @parameter0: com.google.gson.internal.LinkedHashTreeMap$Node;

        r2 := @parameter1: com.google.gson.internal.LinkedHashTreeMap$Node;

        r3 = r1.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node parent>;

        r1.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node parent> = null;

        if r2 == null goto label1;

        r2.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node parent> = r3;

     label1:
        if r3 == null goto label4;

        $r4 = r3.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node left>;

        if $r4 != r1 goto label2;

        r3.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node left> = r2;

        return;

     label2:
        $z0 = <com.google.gson.internal.LinkedHashTreeMap: boolean $assertionsDisabled>;

        if $z0 != 0 goto label3;

        $r4 = r3.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node right>;

        if $r4 == r1 goto label3;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label3:
        r3.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node right> = r2;

        return;

     label4:
        i0 = r1.<com.google.gson.internal.LinkedHashTreeMap$Node: int hash>;

        $r6 = r0.<com.google.gson.internal.LinkedHashTreeMap: com.google.gson.internal.LinkedHashTreeMap$Node[] table>;

        $i1 = lengthof $r6;

        $i1 = $i1 + -1;

        i0 = i0 & $i1;

        $r6 = r0.<com.google.gson.internal.LinkedHashTreeMap: com.google.gson.internal.LinkedHashTreeMap$Node[] table>;

        $r6[i0] = r2;

        return;
    }
    private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap$Node)
    {
        com.google.gson.internal.LinkedHashTreeMap r0;
        com.google.gson.internal.LinkedHashTreeMap$Node r1, r2, r3, r4, r5;
        int $i0, $i1, $i2;

        r0 := @this: com.google.gson.internal.LinkedHashTreeMap;

        r1 := @parameter0: com.google.gson.internal.LinkedHashTreeMap$Node;

        $i0 = 0;

        r2 = r1.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node left>;

        r3 = r1.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node right>;

        r4 = r3.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node left>;

        r5 = r3.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node right>;

        r1.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node right> = r4;

        if r4 == null goto label1;

        r4.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node parent> = r1;

     label1:
        specialinvoke r0.<com.google.gson.internal.LinkedHashTreeMap: void replaceInParent(com.google.gson.internal.LinkedHashTreeMap$Node,com.google.gson.internal.LinkedHashTreeMap$Node)>(r1, r3);

        r3.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node left> = r1;

        r1.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node parent> = r3;

        if r2 == null goto label5;

        $i1 = r2.<com.google.gson.internal.LinkedHashTreeMap$Node: int height>;

     label2:
        if r4 == null goto label6;

        $i2 = r4.<com.google.gson.internal.LinkedHashTreeMap$Node: int height>;

     label3:
        $i1 = staticinvoke <java.lang.Math: int max(int,int)>($i1, $i2);

        $i1 = $i1 + 1;

        r1.<com.google.gson.internal.LinkedHashTreeMap$Node: int height> = $i1;

        $i1 = r1.<com.google.gson.internal.LinkedHashTreeMap$Node: int height>;

        if r5 == null goto label4;

        $i0 = r5.<com.google.gson.internal.LinkedHashTreeMap$Node: int height>;

     label4:
        $i0 = staticinvoke <java.lang.Math: int max(int,int)>($i1, $i0);

        $i0 = $i0 + 1;

        r3.<com.google.gson.internal.LinkedHashTreeMap$Node: int height> = $i0;

        return;

     label5:
        $i1 = 0;

        goto label2;

     label6:
        $i2 = 0;

        goto label3;
    }
    private void rotateRight(com.google.gson.internal.LinkedHashTreeMap$Node)
    {
        com.google.gson.internal.LinkedHashTreeMap r0;
        com.google.gson.internal.LinkedHashTreeMap$Node r1, r2, r3, r4, r5;
        int $i0, $i1, $i2;

        r0 := @this: com.google.gson.internal.LinkedHashTreeMap;

        r1 := @parameter0: com.google.gson.internal.LinkedHashTreeMap$Node;

        $i0 = 0;

        r2 = r1.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node left>;

        r5 = r1.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node right>;

        r3 = r2.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node left>;

        r4 = r2.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node right>;

        r1.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node left> = r4;

        if r4 == null goto label1;

        r4.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node parent> = r1;

     label1:
        specialinvoke r0.<com.google.gson.internal.LinkedHashTreeMap: void replaceInParent(com.google.gson.internal.LinkedHashTreeMap$Node,com.google.gson.internal.LinkedHashTreeMap$Node)>(r1, r2);

        r2.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node right> = r1;

        r1.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node parent> = r2;

        if r5 == null goto label5;

        $i1 = r5.<com.google.gson.internal.LinkedHashTreeMap$Node: int height>;

     label2:
        if r4 == null goto label6;

        $i2 = r4.<com.google.gson.internal.LinkedHashTreeMap$Node: int height>;

     label3:
        $i1 = staticinvoke <java.lang.Math: int max(int,int)>($i1, $i2);

        $i1 = $i1 + 1;

        r1.<com.google.gson.internal.LinkedHashTreeMap$Node: int height> = $i1;

        $i1 = r1.<com.google.gson.internal.LinkedHashTreeMap$Node: int height>;

        if r3 == null goto label4;

        $i0 = r3.<com.google.gson.internal.LinkedHashTreeMap$Node: int height>;

     label4:
        $i0 = staticinvoke <java.lang.Math: int max(int,int)>($i1, $i0);

        $i0 = $i0 + 1;

        r2.<com.google.gson.internal.LinkedHashTreeMap$Node: int height> = $i0;

        return;

     label5:
        $i1 = 0;

        goto label2;

     label6:
        $i2 = 0;

        goto label3;
    }
    private static int secondaryHash(int)
    {
        int $i0, $i1, $i2;

        $i0 := @parameter0: int;

        $i1 = $i0 >>> 20;

        $i2 = $i0 >>> 12;

        $i1 = $i1 ^ $i2;

        $i0 = $i0 ^ $i1;

        $i1 = $i0 >>> 7;

        $i1 = $i1 ^ $i0;

        $i0 = $i0 >>> 4;

        $i0 = $i1 ^ $i0;

        return $i0;
    }
    private java.lang.Object writeReplace() throws java.io.ObjectStreamException
    {
        com.google.gson.internal.LinkedHashTreeMap r0;
        java.util.LinkedHashMap $r1;

        r0 := @this: com.google.gson.internal.LinkedHashTreeMap;

        $r1 = new java.util.LinkedHashMap;

        specialinvoke $r1.<java.util.LinkedHashMap: void <init>(java.util.Map)>(r0);

        return $r1;
    }
    public void clear()
    {
        com.google.gson.internal.LinkedHashTreeMap r0;
        com.google.gson.internal.LinkedHashTreeMap$Node r1, r2, r4;
        com.google.gson.internal.LinkedHashTreeMap$Node[] $r3;
        int $i0;

        r0 := @this: com.google.gson.internal.LinkedHashTreeMap;

        $r3 = r0.<com.google.gson.internal.LinkedHashTreeMap: com.google.gson.internal.LinkedHashTreeMap$Node[] table>;

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>($r3, null);

        r0.<com.google.gson.internal.LinkedHashTreeMap: int size> = 0;

        $i0 = r0.<com.google.gson.internal.LinkedHashTreeMap: int modCount>;

        $i0 = $i0 + 1;

        r0.<com.google.gson.internal.LinkedHashTreeMap: int modCount> = $i0;

        r1 = r0.<com.google.gson.internal.LinkedHashTreeMap: com.google.gson.internal.LinkedHashTreeMap$Node header>;

        r4 = r1.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node next>;

     label1:
        if r4 == r1 goto label2;

        r2 = r4.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node next>;

        r4.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node prev> = null;

        r4.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node next> = null;

        r4 = r2;

        goto label1;

     label2:
        r1.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node prev> = r1;

        r1.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node next> = r1;

        return;
    }
    public boolean containsKey(java.lang.Object)
    {
        com.google.gson.internal.LinkedHashTreeMap r0;
        java.lang.Object $r1;
        com.google.gson.internal.LinkedHashTreeMap$Node $r2;

        r0 := @this: com.google.gson.internal.LinkedHashTreeMap;

        $r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.google.gson.internal.LinkedHashTreeMap: com.google.gson.internal.LinkedHashTreeMap$Node findByObject(java.lang.Object)>($r1);

        if $r2 == null goto label1;

        return 1;

     label1:
        return 0;
    }
    public java.util.Set entrySet()
    {
        com.google.gson.internal.LinkedHashTreeMap r0;
        com.google.gson.internal.LinkedHashTreeMap$EntrySet r1;

        r0 := @this: com.google.gson.internal.LinkedHashTreeMap;

        r1 = r0.<com.google.gson.internal.LinkedHashTreeMap: com.google.gson.internal.LinkedHashTreeMap$EntrySet entrySet>;

        if r1 == null goto label1;

        return r1;

     label1:
        r1 = new com.google.gson.internal.LinkedHashTreeMap$EntrySet;

        specialinvoke r1.<com.google.gson.internal.LinkedHashTreeMap$EntrySet: void <init>(com.google.gson.internal.LinkedHashTreeMap)>(r0);

        r0.<com.google.gson.internal.LinkedHashTreeMap: com.google.gson.internal.LinkedHashTreeMap$EntrySet entrySet> = r1;

        return r1;
    }
    com.google.gson.internal.LinkedHashTreeMap$Node find(java.lang.Object, boolean)
    {
        com.google.gson.internal.LinkedHashTreeMap r0;
        java.lang.Object r1, $r8;
        boolean $z0;
        com.google.gson.internal.LinkedHashTreeMap$Node r2, r5, r13, $r14;
        java.util.Comparator r3, $r6;
        int i0, $i1, i2;
        com.google.gson.internal.LinkedHashTreeMap$Node[] r4;
        java.lang.Comparable $r7;
        java.lang.ClassCastException $r9;
        java.lang.StringBuilder $r10;
        java.lang.Class $r11;
        java.lang.String $r12;

        r0 := @this: com.google.gson.internal.LinkedHashTreeMap;

        r1 := @parameter0: java.lang.Object;

        $z0 := @parameter1: boolean;

        r3 = r0.<com.google.gson.internal.LinkedHashTreeMap: java.util.Comparator comparator>;

        r4 = r0.<com.google.gson.internal.LinkedHashTreeMap: com.google.gson.internal.LinkedHashTreeMap$Node[] table>;

        $i1 = virtualinvoke r1.<java.lang.Object: int hashCode()>();

        $i1 = staticinvoke <com.google.gson.internal.LinkedHashTreeMap: int secondaryHash(int)>($i1);

        i0 = lengthof r4;

        i0 = i0 + -1;

        i0 = $i1 & i0;

        r5 = r4[i0];

        i2 = 0;

        if r5 == null goto label07;

        $r6 = <com.google.gson.internal.LinkedHashTreeMap: java.util.Comparator NATURAL_ORDER>;

        if r3 != $r6 goto label03;

        $r7 = (java.lang.Comparable) r1;

     label01:
        if $r7 == null goto label04;

        $r8 = r5.<com.google.gson.internal.LinkedHashTreeMap$Node: java.lang.Object key>;

        i2 = interfaceinvoke $r7.<java.lang.Comparable: int compareTo(java.lang.Object)>($r8);

     label02:
        if i2 != 0 goto label05;

        return r5;

     label03:
        $r7 = null;

        goto label01;

     label04:
        $r8 = r5.<com.google.gson.internal.LinkedHashTreeMap$Node: java.lang.Object key>;

        i2 = interfaceinvoke r3.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r1, $r8);

        goto label02;

     label05:
        if i2 >= 0 goto label08;

        r2 = r5.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node left>;

     label06:
        if r2 != null goto label09;

     label07:
        if $z0 == 0 goto label16;

        r2 = r0.<com.google.gson.internal.LinkedHashTreeMap: com.google.gson.internal.LinkedHashTreeMap$Node header>;

        if r5 != null goto label13;

        $r6 = <com.google.gson.internal.LinkedHashTreeMap: java.util.Comparator NATURAL_ORDER>;

        if r3 != $r6 goto label10;

        $z0 = r1 instanceof java.lang.Comparable;

        if $z0 != 0 goto label10;

        $r9 = new java.lang.ClassCastException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.String getName()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not Comparable");

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.ClassCastException: void <init>(java.lang.String)>($r12);

        throw $r9;

     label08:
        r2 = r5.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node right>;

        goto label06;

     label09:
        r5 = r2;

        goto label01;

     label10:
        r13 = new com.google.gson.internal.LinkedHashTreeMap$Node;

        $r14 = r2.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node prev>;

        specialinvoke r13.<com.google.gson.internal.LinkedHashTreeMap$Node: void <init>(com.google.gson.internal.LinkedHashTreeMap$Node,java.lang.Object,int,com.google.gson.internal.LinkedHashTreeMap$Node,com.google.gson.internal.LinkedHashTreeMap$Node)>(r5, r1, $i1, r2, $r14);

        r4[i0] = r13;

     label11:
        $i1 = r0.<com.google.gson.internal.LinkedHashTreeMap: int size>;

        i0 = $i1 + 1;

        r0.<com.google.gson.internal.LinkedHashTreeMap: int size> = i0;

        i0 = r0.<com.google.gson.internal.LinkedHashTreeMap: int threshold>;

        if $i1 <= i0 goto label12;

        specialinvoke r0.<com.google.gson.internal.LinkedHashTreeMap: void doubleCapacity()>();

     label12:
        $i1 = r0.<com.google.gson.internal.LinkedHashTreeMap: int modCount>;

        $i1 = $i1 + 1;

        r0.<com.google.gson.internal.LinkedHashTreeMap: int modCount> = $i1;

        return r13;

     label13:
        r13 = new com.google.gson.internal.LinkedHashTreeMap$Node;

        $r14 = r2.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node prev>;

        specialinvoke r13.<com.google.gson.internal.LinkedHashTreeMap$Node: void <init>(com.google.gson.internal.LinkedHashTreeMap$Node,java.lang.Object,int,com.google.gson.internal.LinkedHashTreeMap$Node,com.google.gson.internal.LinkedHashTreeMap$Node)>(r5, r1, $i1, r2, $r14);

        if i2 >= 0 goto label15;

        r5.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node left> = r13;

     label14:
        specialinvoke r0.<com.google.gson.internal.LinkedHashTreeMap: void rebalance(com.google.gson.internal.LinkedHashTreeMap$Node,boolean)>(r5, 1);

        goto label11;

     label15:
        r5.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node right> = r13;

        goto label14;

     label16:
        return null;
    }
    com.google.gson.internal.LinkedHashTreeMap$Node findByEntry(java.util.Map$Entry)
    {
        com.google.gson.internal.LinkedHashTreeMap r0;
        java.util.Map$Entry r1;
        java.lang.Object $r2, $r4;
        com.google.gson.internal.LinkedHashTreeMap$Node $r3;
        boolean $z0;

        r0 := @this: com.google.gson.internal.LinkedHashTreeMap;

        r1 := @parameter0: java.util.Map$Entry;

        $r2 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r3 = virtualinvoke r0.<com.google.gson.internal.LinkedHashTreeMap: com.google.gson.internal.LinkedHashTreeMap$Node findByObject(java.lang.Object)>($r2);

        if $r3 == null goto label2;

        $r2 = $r3.<com.google.gson.internal.LinkedHashTreeMap$Node: java.lang.Object value>;

        $r4 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z0 = specialinvoke r0.<com.google.gson.internal.LinkedHashTreeMap: boolean equal(java.lang.Object,java.lang.Object)>($r2, $r4);

        if $z0 == 0 goto label2;

        $z0 = 1;

     label1:
        if $z0 == 0 goto label3;

        return $r3;

     label2:
        $z0 = 0;

        goto label1;

     label3:
        return null;
    }
    com.google.gson.internal.LinkedHashTreeMap$Node findByObject(java.lang.Object)
    {
        com.google.gson.internal.LinkedHashTreeMap r0;
        java.lang.Object $r1;
        java.lang.ClassCastException r2;
        com.google.gson.internal.LinkedHashTreeMap$Node $r3;

        r0 := @this: com.google.gson.internal.LinkedHashTreeMap;

        $r1 := @parameter0: java.lang.Object;

        if $r1 == null goto label4;

     label1:
        $r3 = virtualinvoke r0.<com.google.gson.internal.LinkedHashTreeMap: com.google.gson.internal.LinkedHashTreeMap$Node find(java.lang.Object,boolean)>($r1, 0);

     label2:
        return $r3;

     label3:
        r2 := @caughtexception;

     label4:
        return null;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }
    public java.lang.Object get(java.lang.Object)
    {
        com.google.gson.internal.LinkedHashTreeMap r0;
        java.lang.Object $r1;
        com.google.gson.internal.LinkedHashTreeMap$Node $r2;

        r0 := @this: com.google.gson.internal.LinkedHashTreeMap;

        $r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.google.gson.internal.LinkedHashTreeMap: com.google.gson.internal.LinkedHashTreeMap$Node findByObject(java.lang.Object)>($r1);

        if $r2 == null goto label1;

        $r1 = $r2.<com.google.gson.internal.LinkedHashTreeMap$Node: java.lang.Object value>;

        return $r1;

     label1:
        return null;
    }
    public java.util.Set keySet()
    {
        com.google.gson.internal.LinkedHashTreeMap r0;
        com.google.gson.internal.LinkedHashTreeMap$KeySet r1;

        r0 := @this: com.google.gson.internal.LinkedHashTreeMap;

        r1 = r0.<com.google.gson.internal.LinkedHashTreeMap: com.google.gson.internal.LinkedHashTreeMap$KeySet keySet>;

        if r1 == null goto label1;

        return r1;

     label1:
        r1 = new com.google.gson.internal.LinkedHashTreeMap$KeySet;

        specialinvoke r1.<com.google.gson.internal.LinkedHashTreeMap$KeySet: void <init>(com.google.gson.internal.LinkedHashTreeMap)>(r0);

        r0.<com.google.gson.internal.LinkedHashTreeMap: com.google.gson.internal.LinkedHashTreeMap$KeySet keySet> = r1;

        return r1;
    }
    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        com.google.gson.internal.LinkedHashTreeMap r0;
        java.lang.Object r1, r2;
        com.google.gson.internal.LinkedHashTreeMap$Node $r3;
        java.lang.NullPointerException $r4;

        r0 := @this: com.google.gson.internal.LinkedHashTreeMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        if r1 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("key == null");

        throw $r4;

     label1:
        $r3 = virtualinvoke r0.<com.google.gson.internal.LinkedHashTreeMap: com.google.gson.internal.LinkedHashTreeMap$Node find(java.lang.Object,boolean)>(r1, 1);

        r1 = $r3.<com.google.gson.internal.LinkedHashTreeMap$Node: java.lang.Object value>;

        $r3.<com.google.gson.internal.LinkedHashTreeMap$Node: java.lang.Object value> = r2;

        return r1;
    }
    public java.lang.Object remove(java.lang.Object)
    {
        com.google.gson.internal.LinkedHashTreeMap r0;
        java.lang.Object $r1;
        com.google.gson.internal.LinkedHashTreeMap$Node $r2;

        r0 := @this: com.google.gson.internal.LinkedHashTreeMap;

        $r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.google.gson.internal.LinkedHashTreeMap: com.google.gson.internal.LinkedHashTreeMap$Node removeInternalByKey(java.lang.Object)>($r1);

        if $r2 == null goto label1;

        $r1 = $r2.<com.google.gson.internal.LinkedHashTreeMap$Node: java.lang.Object value>;

        return $r1;

     label1:
        return null;
    }
    void removeInternal(com.google.gson.internal.LinkedHashTreeMap$Node, boolean)
    {
        com.google.gson.internal.LinkedHashTreeMap r0;
        com.google.gson.internal.LinkedHashTreeMap$Node r1, r2, $r3, r4;
        boolean $z0;
        int $i0, $i1;

        r0 := @this: com.google.gson.internal.LinkedHashTreeMap;

        r1 := @parameter0: com.google.gson.internal.LinkedHashTreeMap$Node;

        $z0 := @parameter1: boolean;

        if $z0 == 0 goto label1;

        r2 = r1.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node prev>;

        $r3 = r1.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node next>;

        r2.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node next> = $r3;

        r2 = r1.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node next>;

        $r3 = r1.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node prev>;

        r2.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node prev> = $r3;

        r1.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node prev> = null;

        r1.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node next> = null;

     label1:
        $r3 = r1.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node left>;

        r4 = r1.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node right>;

        r2 = r1.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node parent>;

        if $r3 == null goto label6;

        if r4 == null goto label6;

        $i0 = $r3.<com.google.gson.internal.LinkedHashTreeMap$Node: int height>;

        $i1 = r4.<com.google.gson.internal.LinkedHashTreeMap$Node: int height>;

        if $i0 <= $i1 goto label5;

        r2 = virtualinvoke $r3.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node last()>();

     label2:
        virtualinvoke r0.<com.google.gson.internal.LinkedHashTreeMap: void removeInternal(com.google.gson.internal.LinkedHashTreeMap$Node,boolean)>(r2, 0);

        $i0 = 0;

        $r3 = r1.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node left>;

        if $r3 == null goto label3;

        $i0 = $r3.<com.google.gson.internal.LinkedHashTreeMap$Node: int height>;

        r2.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node left> = $r3;

        $r3.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node parent> = r2;

        r1.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node left> = null;

     label3:
        $i1 = 0;

        $r3 = r1.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node right>;

        if $r3 == null goto label4;

        $i1 = $r3.<com.google.gson.internal.LinkedHashTreeMap$Node: int height>;

        r2.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node right> = $r3;

        $r3.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node parent> = r2;

        r1.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node right> = null;

     label4:
        $i0 = staticinvoke <java.lang.Math: int max(int,int)>($i0, $i1);

        $i0 = $i0 + 1;

        r2.<com.google.gson.internal.LinkedHashTreeMap$Node: int height> = $i0;

        specialinvoke r0.<com.google.gson.internal.LinkedHashTreeMap: void replaceInParent(com.google.gson.internal.LinkedHashTreeMap$Node,com.google.gson.internal.LinkedHashTreeMap$Node)>(r1, r2);

        return;

     label5:
        r2 = virtualinvoke r4.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node first()>();

        goto label2;

     label6:
        if $r3 == null goto label8;

        specialinvoke r0.<com.google.gson.internal.LinkedHashTreeMap: void replaceInParent(com.google.gson.internal.LinkedHashTreeMap$Node,com.google.gson.internal.LinkedHashTreeMap$Node)>(r1, $r3);

        r1.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node left> = null;

     label7:
        specialinvoke r0.<com.google.gson.internal.LinkedHashTreeMap: void rebalance(com.google.gson.internal.LinkedHashTreeMap$Node,boolean)>(r2, 0);

        $i0 = r0.<com.google.gson.internal.LinkedHashTreeMap: int size>;

        $i0 = $i0 + -1;

        r0.<com.google.gson.internal.LinkedHashTreeMap: int size> = $i0;

        $i0 = r0.<com.google.gson.internal.LinkedHashTreeMap: int modCount>;

        $i0 = $i0 + 1;

        r0.<com.google.gson.internal.LinkedHashTreeMap: int modCount> = $i0;

        return;

     label8:
        if r4 == null goto label9;

        specialinvoke r0.<com.google.gson.internal.LinkedHashTreeMap: void replaceInParent(com.google.gson.internal.LinkedHashTreeMap$Node,com.google.gson.internal.LinkedHashTreeMap$Node)>(r1, r4);

        r1.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node right> = null;

        goto label7;

     label9:
        specialinvoke r0.<com.google.gson.internal.LinkedHashTreeMap: void replaceInParent(com.google.gson.internal.LinkedHashTreeMap$Node,com.google.gson.internal.LinkedHashTreeMap$Node)>(r1, null);

        goto label7;
    }
    com.google.gson.internal.LinkedHashTreeMap$Node removeInternalByKey(java.lang.Object)
    {
        com.google.gson.internal.LinkedHashTreeMap r0;
        java.lang.Object $r1;
        com.google.gson.internal.LinkedHashTreeMap$Node $r2;

        r0 := @this: com.google.gson.internal.LinkedHashTreeMap;

        $r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.google.gson.internal.LinkedHashTreeMap: com.google.gson.internal.LinkedHashTreeMap$Node findByObject(java.lang.Object)>($r1);

        if $r2 == null goto label1;

        virtualinvoke r0.<com.google.gson.internal.LinkedHashTreeMap: void removeInternal(com.google.gson.internal.LinkedHashTreeMap$Node,boolean)>($r2, 1);

     label1:
        return $r2;
    }
    public int size()
    {
        com.google.gson.internal.LinkedHashTreeMap r0;
        int i0;

        r0 := @this: com.google.gson.internal.LinkedHashTreeMap;

        i0 = r0.<com.google.gson.internal.LinkedHashTreeMap: int size>;

        return i0;
    }
