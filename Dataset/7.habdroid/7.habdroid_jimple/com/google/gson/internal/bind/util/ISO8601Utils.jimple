com.google.gson.internal.bind.util.ISO8601Utils extends java.lang.Object
private static final java.util.TimeZone TIMEZONE_UTC
private static final java.lang.String UTC_ID
    static void <clinit>()
    {
        java.util.TimeZone $r0;

        $r0 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("UTC");

        <com.google.gson.internal.bind.util.ISO8601Utils: java.util.TimeZone TIMEZONE_UTC> = $r0;

        return;
    }
    public void <init>()
    {
        com.google.gson.internal.bind.util.ISO8601Utils r0;

        r0 := @this: com.google.gson.internal.bind.util.ISO8601Utils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    private static boolean checkOffset(java.lang.String, int, char)
    {
        java.lang.String $r0;
        int $i0, $i2;
        char $c1, $c3;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $c1 := @parameter2: char;

        $i2 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i0 >= $i2 goto label1;

        $c3 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i0);

        if $c3 != $c1 goto label1;

        return 1;

     label1:
        return 0;
    }
    public static java.lang.String format(java.util.Date)
    {
        java.util.Date $r0;
        java.util.TimeZone $r1;
        java.lang.String $r2;

        $r0 := @parameter0: java.util.Date;

        $r1 = <com.google.gson.internal.bind.util.ISO8601Utils: java.util.TimeZone TIMEZONE_UTC>;

        $r2 = staticinvoke <com.google.gson.internal.bind.util.ISO8601Utils: java.lang.String format(java.util.Date,boolean,java.util.TimeZone)>($r0, 0, $r1);

        return $r2;
    }
    public static java.lang.String format(java.util.Date, boolean)
    {
        java.util.Date $r0;
        boolean $z0;
        java.lang.String $r1;
        java.util.TimeZone $r2;

        $r0 := @parameter0: java.util.Date;

        $z0 := @parameter1: boolean;

        $r2 = <com.google.gson.internal.bind.util.ISO8601Utils: java.util.TimeZone TIMEZONE_UTC>;

        $r1 = staticinvoke <com.google.gson.internal.bind.util.ISO8601Utils: java.lang.String format(java.util.Date,boolean,java.util.TimeZone)>($r0, $z0, $r2);

        return $r1;
    }
    public static java.lang.String format(java.util.Date, boolean, java.util.TimeZone)
    {
        java.util.Date $r0;
        boolean $z0;
        java.util.TimeZone $r1;
        java.util.GregorianCalendar r2;
        java.lang.StringBuilder r3;
        java.util.Locale $r4;
        java.lang.String $r5;
        int $i0, $i1, $i3;
        long $l2;
        char $c4;

        $r0 := @parameter0: java.util.Date;

        $z0 := @parameter1: boolean;

        $r1 := @parameter2: java.util.TimeZone;

        r2 = new java.util.GregorianCalendar;

        $r4 = <java.util.Locale: java.util.Locale US>;

        specialinvoke r2.<java.util.GregorianCalendar: void <init>(java.util.TimeZone,java.util.Locale)>($r1, $r4);

        virtualinvoke r2.<java.util.Calendar: void setTime(java.util.Date)>($r0);

        $r5 = "yyyy-MM-ddThh:mm:ss";

        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $z0 == 0 goto label6;

        $r5 = ".sss";

        $i1 = virtualinvoke $r5.<java.lang.String: int length()>();

     label1:
        $i0 = $i0 + $i1;

        $i1 = virtualinvoke $r1.<java.util.TimeZone: int getRawOffset()>();

        if $i1 != 0 goto label7;

        $r5 = "Z";

        $i1 = virtualinvoke $r5.<java.lang.String: int length()>();

     label2:
        $i0 = $i0 + $i1;

        r3 = new java.lang.StringBuilder;

        specialinvoke r3.<java.lang.StringBuilder: void <init>(int)>($i0);

        $i0 = virtualinvoke r2.<java.util.Calendar: int get(int)>(1);

        $r5 = "yyyy";

        $i1 = virtualinvoke $r5.<java.lang.String: int length()>();

        staticinvoke <com.google.gson.internal.bind.util.ISO8601Utils: void padInt(java.lang.StringBuilder,int,int)>(r3, $i0, $i1);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);

        $i0 = virtualinvoke r2.<java.util.Calendar: int get(int)>(2);

        $i0 = $i0 + 1;

        $r5 = "MM";

        $i1 = virtualinvoke $r5.<java.lang.String: int length()>();

        staticinvoke <com.google.gson.internal.bind.util.ISO8601Utils: void padInt(java.lang.StringBuilder,int,int)>(r3, $i0, $i1);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);

        $i0 = virtualinvoke r2.<java.util.Calendar: int get(int)>(5);

        $r5 = "dd";

        $i1 = virtualinvoke $r5.<java.lang.String: int length()>();

        staticinvoke <com.google.gson.internal.bind.util.ISO8601Utils: void padInt(java.lang.StringBuilder,int,int)>(r3, $i0, $i1);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(84);

        $i0 = virtualinvoke r2.<java.util.Calendar: int get(int)>(11);

        $r5 = "hh";

        $i1 = virtualinvoke $r5.<java.lang.String: int length()>();

        staticinvoke <com.google.gson.internal.bind.util.ISO8601Utils: void padInt(java.lang.StringBuilder,int,int)>(r3, $i0, $i1);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        $i0 = virtualinvoke r2.<java.util.Calendar: int get(int)>(12);

        $r5 = "mm";

        $i1 = virtualinvoke $r5.<java.lang.String: int length()>();

        staticinvoke <com.google.gson.internal.bind.util.ISO8601Utils: void padInt(java.lang.StringBuilder,int,int)>(r3, $i0, $i1);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        $i0 = virtualinvoke r2.<java.util.Calendar: int get(int)>(13);

        $r5 = "ss";

        $i1 = virtualinvoke $r5.<java.lang.String: int length()>();

        staticinvoke <com.google.gson.internal.bind.util.ISO8601Utils: void padInt(java.lang.StringBuilder,int,int)>(r3, $i0, $i1);

        if $z0 == 0 goto label3;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $i0 = virtualinvoke r2.<java.util.Calendar: int get(int)>(14);

        $r5 = "sss";

        $i1 = virtualinvoke $r5.<java.lang.String: int length()>();

        staticinvoke <com.google.gson.internal.bind.util.ISO8601Utils: void padInt(java.lang.StringBuilder,int,int)>(r3, $i0, $i1);

     label3:
        $l2 = virtualinvoke r2.<java.util.Calendar: long getTimeInMillis()>();

        $i0 = virtualinvoke $r1.<java.util.TimeZone: int getOffset(long)>($l2);

        if $i0 == 0 goto label9;

        $i1 = $i0 / 60000;

        $i1 = $i1 / 60;

        $i1 = staticinvoke <java.lang.Math: int abs(int)>($i1);

        $i3 = $i0 / 60000;

        $i3 = $i3 % 60;

        $i3 = staticinvoke <java.lang.Math: int abs(int)>($i3);

        if $i0 >= 0 goto label8;

        $c4 = 45;

     label4:
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4);

        $r5 = "hh";

        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        staticinvoke <com.google.gson.internal.bind.util.ISO8601Utils: void padInt(java.lang.StringBuilder,int,int)>(r3, $i1, $i0);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        $r5 = "mm";

        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        staticinvoke <com.google.gson.internal.bind.util.ISO8601Utils: void padInt(java.lang.StringBuilder,int,int)>(r3, $i3, $i0);

     label5:
        $r5 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;

     label6:
        $i1 = 0;

        goto label1;

     label7:
        $r5 = "+hh:mm";

        $i1 = virtualinvoke $r5.<java.lang.String: int length()>();

        goto label2;

     label8:
        $c4 = 43;

        goto label4;

     label9:
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(90);

        goto label5;
    }
    private static int indexOfNonDigit(java.lang.String, int)
    {
        java.lang.String $r0;
        int $i0, $i1;
        char $c2;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

     label1:
        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i0 >= $i1 goto label3;

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i0);

        if $c2 < 48 goto label4;

        if $c2 <= 57 goto label2;

        return $i0;

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

     label4:
        return $i0;
    }
    private static void padInt(java.lang.StringBuilder, int, int)
    {
        java.lang.StringBuilder $r0;
        int $i0, $i1;
        java.lang.String $r1;

        $r0 := @parameter0: java.lang.StringBuilder;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0);

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i0 = $i1 - $i0;

     label1:
        if $i0 <= 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48);

        $i0 = $i0 + -1;

        goto label1;

     label2:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        return;
    }
    public static java.util.Date parse(java.lang.String, java.text.ParsePosition) throws java.text.ParseException
    {
        java.lang.String $r0, $r8, r9;
        java.text.ParsePosition $r1;
        java.text.ParseException r2;
        int $i0, i1, i2, i3, i4, i5, i6, i7, $i8, $i10;
        boolean $z0;
        java.util.GregorianCalendar r3;
        java.util.Date $r4;
        char $c9;
        java.lang.IllegalArgumentException $r5;
        java.lang.IndexOutOfBoundsException r6;
        java.lang.RuntimeException r7;
        java.lang.StringBuilder $r10;
        java.lang.Class $r11;
        java.util.TimeZone r12, $r13;
        java.lang.NumberFormatException r14;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.text.ParsePosition;

     label01:
        $i0 = virtualinvoke $r1.<java.text.ParsePosition: int getIndex()>();

     label02:
        i1 = $i0 + 4;

     label03:
        $i0 = staticinvoke <com.google.gson.internal.bind.util.ISO8601Utils: int parseInt(java.lang.String,int,int)>($r0, $i0, i1);

        $z0 = staticinvoke <com.google.gson.internal.bind.util.ISO8601Utils: boolean checkOffset(java.lang.String,int,char)>($r0, i1, 45);

     label04:
        if $z0 == 0 goto label05;

        i1 = i1 + 1;

     label05:
        i2 = i1 + 2;

     label06:
        i1 = staticinvoke <com.google.gson.internal.bind.util.ISO8601Utils: int parseInt(java.lang.String,int,int)>($r0, i1, i2);

        $z0 = staticinvoke <com.google.gson.internal.bind.util.ISO8601Utils: boolean checkOffset(java.lang.String,int,char)>($r0, i2, 45);

     label07:
        if $z0 == 0 goto label88;

        i2 = i2 + 1;

     label08:
        i3 = i2 + 2;

     label09:
        i2 = staticinvoke <com.google.gson.internal.bind.util.ISO8601Utils: int parseInt(java.lang.String,int,int)>($r0, i2, i3);

     label10:
        i4 = 0;

        i5 = 0;

        i6 = 0;

        i7 = 0;

     label11:
        $z0 = staticinvoke <com.google.gson.internal.bind.util.ISO8601Utils: boolean checkOffset(java.lang.String,int,char)>($r0, i3, 84);

     label12:
        if $z0 != 0 goto label17;

     label13:
        $i8 = virtualinvoke $r0.<java.lang.String: int length()>();

     label14:
        if $i8 > i3 goto label17;

        r3 = new java.util.GregorianCalendar;

        i1 = i1 + -1;

     label15:
        specialinvoke r3.<java.util.GregorianCalendar: void <init>(int,int,int)>($i0, i1, i2);

        virtualinvoke $r1.<java.text.ParsePosition: void setIndex(int)>(i3);

        $r4 = virtualinvoke r3.<java.util.Calendar: java.util.Date getTime()>();

     label16:
        return $r4;

     label17:
        if $z0 == 0 goto label38;

        i4 = i3 + 1;

        i5 = i4 + 2;

     label18:
        i4 = staticinvoke <com.google.gson.internal.bind.util.ISO8601Utils: int parseInt(java.lang.String,int,int)>($r0, i4, i5);

     label19:
        $z0 = staticinvoke <com.google.gson.internal.bind.util.ISO8601Utils: boolean checkOffset(java.lang.String,int,char)>($r0, i5, 58);

     label20:
        if $z0 == 0 goto label21;

        i5 = i5 + 1;

     label21:
        i3 = i5 + 2;

     label22:
        i5 = staticinvoke <com.google.gson.internal.bind.util.ISO8601Utils: int parseInt(java.lang.String,int,int)>($r0, i5, i3);

     label23:
        $z0 = staticinvoke <com.google.gson.internal.bind.util.ISO8601Utils: boolean checkOffset(java.lang.String,int,char)>($r0, i3, 58);

     label24:
        if $z0 == 0 goto label87;

        $i8 = i3 + 1;

     label25:
        i3 = virtualinvoke $r0.<java.lang.String: int length()>();

     label26:
        if i3 <= $i8 goto label86;

     label27:
        $c9 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i8);

     label28:
        if $c9 == 90 goto label86;

        if $c9 == 43 goto label86;

        if $c9 == 45 goto label86;

        i3 = $i8 + 2;

     label29:
        $i8 = staticinvoke <com.google.gson.internal.bind.util.ISO8601Utils: int parseInt(java.lang.String,int,int)>($r0, $i8, i3);

     label30:
        i6 = $i8;

        if $i8 <= 59 goto label31;

        if $i8 >= 63 goto label31;

        i6 = 59;

     label31:
        $z0 = staticinvoke <com.google.gson.internal.bind.util.ISO8601Utils: boolean checkOffset(java.lang.String,int,char)>($r0, i3, 46);

     label32:
        if $z0 == 0 goto label38;

        i7 = i3 + 1;

        i3 = i7 + 1;

     label33:
        i3 = staticinvoke <com.google.gson.internal.bind.util.ISO8601Utils: int indexOfNonDigit(java.lang.String,int)>($r0, i3);

     label34:
        $i8 = i7 + 3;

     label35:
        $i10 = staticinvoke <java.lang.Math: int min(int,int)>(i3, $i8);

        $i8 = staticinvoke <com.google.gson.internal.bind.util.ISO8601Utils: int parseInt(java.lang.String,int,int)>($r0, i7, $i10);

     label36:
        i7 = $i10 - i7;

        lookupswitch(i7)
        {
            case 1: goto label48;
            case 2: goto label47;
            default: goto label37;
        };

     label37:
        i7 = $i8;

     label38:
        $i8 = virtualinvoke $r0.<java.lang.String: int length()>();

     label39:
        if $i8 > i3 goto label49;

        $r5 = new java.lang.IllegalArgumentException;

     label40:
        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No time zone indicator");

     label41:
        throw $r5;

     label42:
        r6 := @caughtexception;

        r7 = r6;

     label43:
        if $r0 != null goto label85;

        $r0 = null;

     label44:
        $r8 = virtualinvoke r7.<java.lang.Exception: java.lang.String getMessage()>();

        r9 = $r8;

        if $r8 == null goto label45;

        $z0 = virtualinvoke $r8.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label46;

     label45:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r11 = virtualinvoke r7.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r11.<java.lang.Class: java.lang.String getName()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

     label46:
        r2 = new java.text.ParseException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to parse date [");

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]: ");

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        $r0 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $i0 = virtualinvoke $r1.<java.text.ParsePosition: int getIndex()>();

        specialinvoke r2.<java.text.ParseException: void <init>(java.lang.String,int)>($r0, $i0);

        virtualinvoke r2.<java.text.ParseException: java.lang.Throwable initCause(java.lang.Throwable)>(r7);

        throw r2;

     label47:
        i7 = $i8 * 10;

        goto label38;

     label48:
        i7 = $i8 * 100;

        goto label38;

     label49:
        $c9 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(i3);

     label50:
        if $c9 != 90 goto label56;

        r12 = <com.google.gson.internal.bind.util.ISO8601Utils: java.util.TimeZone TIMEZONE_UTC>;

        i3 = i3 + 1;

     label51:
        r3 = new java.util.GregorianCalendar;

     label52:
        specialinvoke r3.<java.util.GregorianCalendar: void <init>(java.util.TimeZone)>(r12);

        virtualinvoke r3.<java.util.Calendar: void setLenient(boolean)>(0);

        virtualinvoke r3.<java.util.Calendar: void set(int,int)>(1, $i0);

     label53:
        $i0 = i1 + -1;

     label54:
        virtualinvoke r3.<java.util.Calendar: void set(int,int)>(2, $i0);

        virtualinvoke r3.<java.util.Calendar: void set(int,int)>(5, i2);

        virtualinvoke r3.<java.util.Calendar: void set(int,int)>(11, i4);

        virtualinvoke r3.<java.util.Calendar: void set(int,int)>(12, i5);

        virtualinvoke r3.<java.util.Calendar: void set(int,int)>(13, i6);

        virtualinvoke r3.<java.util.Calendar: void set(int,int)>(14, i7);

        virtualinvoke $r1.<java.text.ParsePosition: void setIndex(int)>(i3);

        $r4 = virtualinvoke r3.<java.util.Calendar: java.util.Date getTime()>();

     label55:
        return $r4;

     label56:
        if $c9 == 43 goto label57;

        if $c9 != 45 goto label81;

     label57:
        r9 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int)>(i3);

     label58:
        $r8 = r9;

     label59:
        $i8 = virtualinvoke r9.<java.lang.String: int length()>();

     label60:
        if $i8 < 5 goto label68;

     label61:
        $i8 = virtualinvoke $r8.<java.lang.String: int length()>();

     label62:
        i3 = i3 + $i8;

        r9 = "+0000";

     label63:
        $z0 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>($r8);

     label64:
        if $z0 != 0 goto label67;

        r9 = "+00:00";

     label65:
        $z0 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>($r8);

     label66:
        if $z0 == 0 goto label71;

     label67:
        r12 = <com.google.gson.internal.bind.util.ISO8601Utils: java.util.TimeZone TIMEZONE_UTC>;

        goto label51;

     label68:
        $r10 = new java.lang.StringBuilder;

     label69:
        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("00");

        $r8 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

     label70:
        goto label61;

     label71:
        $r10 = new java.lang.StringBuilder;

     label72:
        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("GMT");

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r8 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>($r8);

     label73:
        r12 = $r13;

     label74:
        r9 = virtualinvoke $r13.<java.util.TimeZone: java.lang.String getID()>();

        $z0 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>($r8);

     label75:
        if $z0 != 0 goto label51;

     label76:
        r9 = virtualinvoke r9.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "");

        $z0 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>($r8);

     label77:
        if $z0 != 0 goto label51;

        r6 = new java.lang.IndexOutOfBoundsException;

        $r10 = new java.lang.StringBuilder;

     label78:
        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Mismatching time zone indicator: ");

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" given, resolves to ");

        $r8 = virtualinvoke $r13.<java.util.TimeZone: java.lang.String getID()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r8 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r6.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r8);

     label79:
        throw r6;

     label80:
        r14 := @caughtexception;

        r7 = r14;

        goto label43;

     label81:
        r6 = new java.lang.IndexOutOfBoundsException;

        $r10 = new java.lang.StringBuilder;

     label82:
        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid time zone indicator \'");

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c9);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r8 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r6.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r8);

     label83:
        throw r6;

     label84:
        $r5 := @caughtexception;

        r7 = $r5;

        goto label43;

     label85:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r0 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label44;

     label86:
        i3 = $i8;

        goto label38;

     label87:
        $i8 = i3;

        goto label25;

     label88:
        goto label08;

        catch java.lang.IndexOutOfBoundsException from label01 to label02 with label42;
        catch java.lang.IndexOutOfBoundsException from label03 to label04 with label42;
        catch java.lang.IndexOutOfBoundsException from label06 to label07 with label42;
        catch java.lang.IndexOutOfBoundsException from label09 to label10 with label42;
        catch java.lang.IndexOutOfBoundsException from label11 to label12 with label42;
        catch java.lang.IndexOutOfBoundsException from label13 to label14 with label42;
        catch java.lang.IndexOutOfBoundsException from label15 to label16 with label42;
        catch java.lang.IndexOutOfBoundsException from label18 to label19 with label42;
        catch java.lang.IndexOutOfBoundsException from label19 to label20 with label42;
        catch java.lang.IndexOutOfBoundsException from label22 to label23 with label42;
        catch java.lang.IndexOutOfBoundsException from label23 to label24 with label42;
        catch java.lang.IndexOutOfBoundsException from label25 to label26 with label42;
        catch java.lang.IndexOutOfBoundsException from label27 to label28 with label42;
        catch java.lang.IndexOutOfBoundsException from label29 to label30 with label42;
        catch java.lang.IndexOutOfBoundsException from label31 to label32 with label42;
        catch java.lang.IndexOutOfBoundsException from label33 to label34 with label42;
        catch java.lang.IndexOutOfBoundsException from label35 to label36 with label42;
        catch java.lang.IndexOutOfBoundsException from label38 to label39 with label42;
        catch java.lang.IndexOutOfBoundsException from label40 to label41 with label42;
        catch java.lang.NumberFormatException from label01 to label02 with label80;
        catch java.lang.NumberFormatException from label03 to label04 with label80;
        catch java.lang.NumberFormatException from label06 to label07 with label80;
        catch java.lang.NumberFormatException from label09 to label10 with label80;
        catch java.lang.NumberFormatException from label11 to label12 with label80;
        catch java.lang.NumberFormatException from label13 to label14 with label80;
        catch java.lang.NumberFormatException from label15 to label16 with label80;
        catch java.lang.NumberFormatException from label18 to label19 with label80;
        catch java.lang.NumberFormatException from label19 to label20 with label80;
        catch java.lang.NumberFormatException from label22 to label23 with label80;
        catch java.lang.NumberFormatException from label23 to label24 with label80;
        catch java.lang.NumberFormatException from label25 to label26 with label80;
        catch java.lang.NumberFormatException from label27 to label28 with label80;
        catch java.lang.NumberFormatException from label29 to label30 with label80;
        catch java.lang.NumberFormatException from label31 to label32 with label80;
        catch java.lang.NumberFormatException from label33 to label34 with label80;
        catch java.lang.NumberFormatException from label35 to label36 with label80;
        catch java.lang.NumberFormatException from label38 to label39 with label80;
        catch java.lang.NumberFormatException from label40 to label42 with label80;
        catch java.lang.IllegalArgumentException from label01 to label02 with label84;
        catch java.lang.IllegalArgumentException from label03 to label04 with label84;
        catch java.lang.IllegalArgumentException from label06 to label07 with label84;
        catch java.lang.IllegalArgumentException from label09 to label10 with label84;
        catch java.lang.IllegalArgumentException from label11 to label12 with label84;
        catch java.lang.IllegalArgumentException from label13 to label14 with label84;
        catch java.lang.IllegalArgumentException from label15 to label16 with label84;
        catch java.lang.IllegalArgumentException from label18 to label19 with label84;
        catch java.lang.IllegalArgumentException from label19 to label20 with label84;
        catch java.lang.IllegalArgumentException from label22 to label23 with label84;
        catch java.lang.IllegalArgumentException from label23 to label24 with label84;
        catch java.lang.IllegalArgumentException from label25 to label26 with label84;
        catch java.lang.IllegalArgumentException from label27 to label28 with label84;
        catch java.lang.IllegalArgumentException from label29 to label30 with label84;
        catch java.lang.IllegalArgumentException from label31 to label32 with label84;
        catch java.lang.IllegalArgumentException from label33 to label34 with label84;
        catch java.lang.IllegalArgumentException from label35 to label36 with label84;
        catch java.lang.IllegalArgumentException from label38 to label39 with label84;
        catch java.lang.IllegalArgumentException from label40 to label42 with label84;
        catch java.lang.IndexOutOfBoundsException from label49 to label50 with label42;
        catch java.lang.IndexOutOfBoundsException from label52 to label53 with label42;
        catch java.lang.IndexOutOfBoundsException from label54 to label55 with label42;
        catch java.lang.IndexOutOfBoundsException from label57 to label58 with label42;
        catch java.lang.IndexOutOfBoundsException from label59 to label60 with label42;
        catch java.lang.IndexOutOfBoundsException from label61 to label62 with label42;
        catch java.lang.IndexOutOfBoundsException from label63 to label64 with label42;
        catch java.lang.IndexOutOfBoundsException from label65 to label66 with label42;
        catch java.lang.IndexOutOfBoundsException from label69 to label70 with label42;
        catch java.lang.IndexOutOfBoundsException from label72 to label73 with label42;
        catch java.lang.IndexOutOfBoundsException from label74 to label75 with label42;
        catch java.lang.IndexOutOfBoundsException from label76 to label77 with label42;
        catch java.lang.IndexOutOfBoundsException from label78 to label80 with label42;
        catch java.lang.IndexOutOfBoundsException from label82 to label84 with label42;
        catch java.lang.NumberFormatException from label49 to label50 with label80;
        catch java.lang.NumberFormatException from label52 to label53 with label80;
        catch java.lang.NumberFormatException from label54 to label55 with label80;
        catch java.lang.NumberFormatException from label57 to label58 with label80;
        catch java.lang.NumberFormatException from label59 to label60 with label80;
        catch java.lang.NumberFormatException from label61 to label62 with label80;
        catch java.lang.NumberFormatException from label63 to label64 with label80;
        catch java.lang.NumberFormatException from label65 to label66 with label80;
        catch java.lang.NumberFormatException from label69 to label70 with label80;
        catch java.lang.NumberFormatException from label72 to label73 with label80;
        catch java.lang.NumberFormatException from label74 to label75 with label80;
        catch java.lang.NumberFormatException from label76 to label77 with label80;
        catch java.lang.NumberFormatException from label78 to label79 with label80;
        catch java.lang.NumberFormatException from label82 to label83 with label80;
        catch java.lang.IllegalArgumentException from label49 to label50 with label84;
        catch java.lang.IllegalArgumentException from label52 to label53 with label84;
        catch java.lang.IllegalArgumentException from label54 to label55 with label84;
        catch java.lang.IllegalArgumentException from label57 to label58 with label84;
        catch java.lang.IllegalArgumentException from label59 to label60 with label84;
        catch java.lang.IllegalArgumentException from label61 to label62 with label84;
        catch java.lang.IllegalArgumentException from label63 to label64 with label84;
        catch java.lang.IllegalArgumentException from label65 to label66 with label84;
        catch java.lang.IllegalArgumentException from label69 to label70 with label84;
        catch java.lang.IllegalArgumentException from label72 to label73 with label84;
        catch java.lang.IllegalArgumentException from label74 to label75 with label84;
        catch java.lang.IllegalArgumentException from label76 to label77 with label84;
        catch java.lang.IllegalArgumentException from label78 to label79 with label84;
        catch java.lang.IllegalArgumentException from label82 to label83 with label84;
    }
    private static int parseInt(java.lang.String, int, int) throws java.lang.NumberFormatException
    {
        java.lang.String $r0;
        int $i0, $i1, $i2, i3, i4;
        java.lang.NumberFormatException $r1;
        char $c5;
        java.lang.StringBuilder $r2;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if $i0 < 0 goto label1;

        $i2 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i1 > $i2 goto label1;

        if $i0 <= $i1 goto label2;

     label1:
        $r1 = new java.lang.NumberFormatException;

        specialinvoke $r1.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r0);

        throw $r1;

     label2:
        i3 = 0;

        if $i0 >= $i1 goto label7;

        i4 = $i0 + 1;

        $c5 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i0);

        $i2 = staticinvoke <java.lang.Character: int digit(char,int)>($c5, 10);

        if $i2 >= 0 goto label3;

        $r1 = new java.lang.NumberFormatException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid number: ");

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>($i0, $i1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r0);

        throw $r1;

     label3:
        i3 = neg $i2;

     label4:
        if i4 >= $i1 goto label6;

        $i2 = i4 + 1;

        $c5 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(i4);

        i4 = staticinvoke <java.lang.Character: int digit(char,int)>($c5, 10);

        if i4 >= 0 goto label5;

        $r1 = new java.lang.NumberFormatException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid number: ");

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>($i0, $i1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r0);

        throw $r1;

     label5:
        i3 = i3 * 10;

        i3 = i3 - i4;

        i4 = $i2;

        goto label4;

     label6:
        $i0 = neg i3;

        return $i0;

     label7:
        i4 = $i0;

        goto label4;
    }
