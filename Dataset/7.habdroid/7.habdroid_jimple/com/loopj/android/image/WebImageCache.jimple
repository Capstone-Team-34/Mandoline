com.loopj.android.image.WebImageCache extends java.lang.Object
private static final java.lang.String DISK_CACHE_PATH
private boolean diskCacheEnabled
private java.lang.String diskCachePath
private java.util.concurrent.ConcurrentHashMap memoryCache
private java.util.concurrent.ExecutorService writeThread
    public void <init>(android.content.Context)
    {
        com.loopj.android.image.WebImageCache r0;
        android.content.Context $r1;
        java.util.concurrent.ConcurrentHashMap $r2;
        java.lang.StringBuilder $r3;
        java.io.File $r4;
        java.lang.String $r5;
        boolean $z0;
        java.util.concurrent.ExecutorService $r6;

        r0 := @this: com.loopj.android.image.WebImageCache;

        $r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.loopj.android.image.WebImageCache: boolean diskCacheEnabled> = 0;

        $r2 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r2.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<com.loopj.android.image.WebImageCache: java.util.concurrent.ConcurrentHashMap memoryCache> = $r2;

        $r1 = virtualinvoke $r1.<android.content.Context: android.content.Context getApplicationContext()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r1.<android.content.Context: java.io.File getCacheDir()>();

        $r5 = virtualinvoke $r4.<java.io.File: java.lang.String getAbsolutePath()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/web_image_cache/");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<com.loopj.android.image.WebImageCache: java.lang.String diskCachePath> = $r5;

        $r4 = new java.io.File;

        $r5 = r0.<com.loopj.android.image.WebImageCache: java.lang.String diskCachePath>;

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>($r5);

        virtualinvoke $r4.<java.io.File: boolean mkdirs()>();

        $z0 = virtualinvoke $r4.<java.io.File: boolean exists()>();

        r0.<com.loopj.android.image.WebImageCache: boolean diskCacheEnabled> = $z0;

        $r6 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newSingleThreadExecutor()>();

        r0.<com.loopj.android.image.WebImageCache: java.util.concurrent.ExecutorService writeThread> = $r6;

        return;
    }
    static boolean access$000(com.loopj.android.image.WebImageCache)
    {
        com.loopj.android.image.WebImageCache $r0;
        boolean z0;

        $r0 := @parameter0: com.loopj.android.image.WebImageCache;

        z0 = $r0.<com.loopj.android.image.WebImageCache: boolean diskCacheEnabled>;

        return z0;
    }
    static java.lang.String access$100(com.loopj.android.image.WebImageCache)
    {
        com.loopj.android.image.WebImageCache $r0;
        java.lang.String r1;

        $r0 := @parameter0: com.loopj.android.image.WebImageCache;

        r1 = $r0.<com.loopj.android.image.WebImageCache: java.lang.String diskCachePath>;

        return r1;
    }
    static java.lang.String access$200(com.loopj.android.image.WebImageCache, java.lang.String)
    {
        com.loopj.android.image.WebImageCache $r0;
        java.lang.String $r1;

        $r0 := @parameter0: com.loopj.android.image.WebImageCache;

        $r1 := @parameter1: java.lang.String;

        $r1 = specialinvoke $r0.<com.loopj.android.image.WebImageCache: java.lang.String getCacheKey(java.lang.String)>($r1);

        return $r1;
    }
    private void cacheBitmapToDisk(java.lang.String, android.graphics.Bitmap)
    {
        com.loopj.android.image.WebImageCache r0;
        java.lang.String $r1;
        android.graphics.Bitmap $r2;
        java.util.concurrent.ExecutorService $r3;
        com.loopj.android.image.WebImageCache$1 $r4;

        r0 := @this: com.loopj.android.image.WebImageCache;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: android.graphics.Bitmap;

        $r3 = r0.<com.loopj.android.image.WebImageCache: java.util.concurrent.ExecutorService writeThread>;

        $r4 = new com.loopj.android.image.WebImageCache$1;

        specialinvoke $r4.<com.loopj.android.image.WebImageCache$1: void <init>(com.loopj.android.image.WebImageCache,java.lang.String,android.graphics.Bitmap)>(r0, $r1, $r2);

        interfaceinvoke $r3.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>($r4);

        return;
    }
    private void cacheBitmapToMemory(java.lang.String, android.graphics.Bitmap)
    {
        com.loopj.android.image.WebImageCache r0;
        java.lang.String $r1;
        android.graphics.Bitmap $r2;
        java.util.concurrent.ConcurrentHashMap $r3;
        java.lang.ref.SoftReference $r4;

        r0 := @this: com.loopj.android.image.WebImageCache;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: android.graphics.Bitmap;

        $r3 = r0.<com.loopj.android.image.WebImageCache: java.util.concurrent.ConcurrentHashMap memoryCache>;

        $r1 = specialinvoke r0.<com.loopj.android.image.WebImageCache: java.lang.String getCacheKey(java.lang.String)>($r1);

        $r4 = new java.lang.ref.SoftReference;

        specialinvoke $r4.<java.lang.ref.SoftReference: void <init>(java.lang.Object)>($r2);

        virtualinvoke $r3.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r4);

        return;
    }
    private android.graphics.Bitmap getBitmapFromDisk(java.lang.String)
    {
        com.loopj.android.image.WebImageCache r0;
        java.lang.String $r1;
        boolean $z0;
        java.io.File $r2;
        android.graphics.Bitmap $r3;

        r0 := @this: com.loopj.android.image.WebImageCache;

        $r1 := @parameter0: java.lang.String;

        $z0 = r0.<com.loopj.android.image.WebImageCache: boolean diskCacheEnabled>;

        if $z0 == 0 goto label1;

        $r1 = specialinvoke r0.<com.loopj.android.image.WebImageCache: java.lang.String getFilePath(java.lang.String)>($r1);

        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>($r1);

        $z0 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>($r1);

        return $r3;

     label1:
        return null;
    }
    private android.graphics.Bitmap getBitmapFromMemory(java.lang.String)
    {
        com.loopj.android.image.WebImageCache r0;
        java.lang.String $r1;
        java.util.concurrent.ConcurrentHashMap $r2;
        java.lang.Object $r3;
        java.lang.ref.SoftReference $r4;
        android.graphics.Bitmap $r5;

        r0 := @this: com.loopj.android.image.WebImageCache;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.loopj.android.image.WebImageCache: java.util.concurrent.ConcurrentHashMap memoryCache>;

        $r1 = specialinvoke r0.<com.loopj.android.image.WebImageCache: java.lang.String getCacheKey(java.lang.String)>($r1);

        $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r1);

        $r4 = (java.lang.ref.SoftReference) $r3;

        if $r4 == null goto label1;

        $r3 = virtualinvoke $r4.<java.lang.ref.SoftReference: java.lang.Object get()>();

        $r5 = (android.graphics.Bitmap) $r3;

        return $r5;

     label1:
        return null;
    }
    private java.lang.String getCacheKey(java.lang.String)
    {
        com.loopj.android.image.WebImageCache r0;
        java.lang.String $r1;
        java.lang.RuntimeException $r2;

        r0 := @this: com.loopj.android.image.WebImageCache;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Null url passed in");

        throw $r2;

     label1:
        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("[.:/,%?&=]", "+");

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("[+]+", "+");

        return $r1;
    }
    private java.lang.String getFilePath(java.lang.String)
    {
        com.loopj.android.image.WebImageCache r0;
        java.lang.String $r1, $r3;
        java.lang.StringBuilder $r2;

        r0 := @this: com.loopj.android.image.WebImageCache;

        $r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = r0.<com.loopj.android.image.WebImageCache: java.lang.String diskCachePath>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r1 = specialinvoke r0.<com.loopj.android.image.WebImageCache: java.lang.String getCacheKey(java.lang.String)>($r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;
    }
    public void clear()
    {
        com.loopj.android.image.WebImageCache r0;
        int $i0, $i1;
        java.io.File $r1;
        java.util.concurrent.ConcurrentHashMap $r2;
        java.lang.String $r3;
        boolean $z0;
        java.io.File[] $r4;

        r0 := @this: com.loopj.android.image.WebImageCache;

        $r2 = r0.<com.loopj.android.image.WebImageCache: java.util.concurrent.ConcurrentHashMap memoryCache>;

        virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: void clear()>();

        $r1 = new java.io.File;

        $r3 = r0.<com.loopj.android.image.WebImageCache: java.lang.String diskCachePath>;

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>($r3);

        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label3;

        $z0 = virtualinvoke $r1.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label3;

        $r4 = virtualinvoke $r1.<java.io.File: java.io.File[] listFiles()>();

        $i0 = lengthof $r4;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $r1 = $r4[$i1];

        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label2;

        $z0 = virtualinvoke $r1.<java.io.File: boolean isFile()>();

        if $z0 == 0 goto label2;

        virtualinvoke $r1.<java.io.File: boolean delete()>();

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return;
    }
    public android.graphics.Bitmap get(java.lang.String)
    {
        com.loopj.android.image.WebImageCache r0;
        java.lang.String $r1;
        android.graphics.Bitmap $r2;

        r0 := @this: com.loopj.android.image.WebImageCache;

        $r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<com.loopj.android.image.WebImageCache: android.graphics.Bitmap getBitmapFromMemory(java.lang.String)>($r1);

        if $r2 != null goto label1;

        $r2 = specialinvoke r0.<com.loopj.android.image.WebImageCache: android.graphics.Bitmap getBitmapFromDisk(java.lang.String)>($r1);

        if $r2 == null goto label1;

        specialinvoke r0.<com.loopj.android.image.WebImageCache: void cacheBitmapToMemory(java.lang.String,android.graphics.Bitmap)>($r1, $r2);

     label1:
        return $r2;
    }
    public void put(java.lang.String, android.graphics.Bitmap)
    {
        com.loopj.android.image.WebImageCache r0;
        java.lang.String $r1;
        android.graphics.Bitmap $r2;

        r0 := @this: com.loopj.android.image.WebImageCache;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: android.graphics.Bitmap;

        specialinvoke r0.<com.loopj.android.image.WebImageCache: void cacheBitmapToMemory(java.lang.String,android.graphics.Bitmap)>($r1, $r2);

        specialinvoke r0.<com.loopj.android.image.WebImageCache: void cacheBitmapToDisk(java.lang.String,android.graphics.Bitmap)>($r1, $r2);

        return;
    }
    public void remove(java.lang.String)
    {
        com.loopj.android.image.WebImageCache r0;
        java.lang.String $r1, $r3;
        java.util.concurrent.ConcurrentHashMap $r2;
        java.io.File $r4;
        boolean $z0;

        r0 := @this: com.loopj.android.image.WebImageCache;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        return;

     label1:
        $r2 = r0.<com.loopj.android.image.WebImageCache: java.util.concurrent.ConcurrentHashMap memoryCache>;

        $r3 = specialinvoke r0.<com.loopj.android.image.WebImageCache: java.lang.String getCacheKey(java.lang.String)>($r1);

        virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>($r3);

        $r4 = new java.io.File;

        $r3 = r0.<com.loopj.android.image.WebImageCache: java.lang.String diskCachePath>;

        $r1 = specialinvoke r0.<com.loopj.android.image.WebImageCache: java.lang.String getCacheKey(java.lang.String)>($r1);

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String,java.lang.String)>($r3, $r1);

        $z0 = virtualinvoke $r4.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label2;

        $z0 = virtualinvoke $r4.<java.io.File: boolean isFile()>();

        if $z0 == 0 goto label2;

        virtualinvoke $r4.<java.io.File: boolean delete()>();

     label2:
        return;
    }
