com.software.shell.fab.RippleEffectDrawer extends com.software.shell.fab.EffectDrawer
private static final org.slf4j.Logger LOGGER
private static final long POST_INVALIDATION_DELAY_MS
private static final int RADIUS_INCREMENT
private int currentRadius
    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/software/shell/fab/RippleEffectDrawer;");

        <com.software.shell.fab.RippleEffectDrawer: org.slf4j.Logger LOGGER> = $r0;

        return;
    }
    void <init>(com.software.shell.fab.ActionButton)
    {
        com.software.shell.fab.RippleEffectDrawer r0;
        com.software.shell.fab.ActionButton $r1;

        r0 := @this: com.software.shell.fab.RippleEffectDrawer;

        $r1 := @parameter0: com.software.shell.fab.ActionButton;

        specialinvoke r0.<com.software.shell.fab.EffectDrawer: void <init>(com.software.shell.fab.ActionButton)>($r1);

        return;
    }
    private void drawRipple(android.graphics.Canvas)
    {
        com.software.shell.fab.RippleEffectDrawer r0;
        android.graphics.Canvas $r1;
        android.graphics.Path $r2;
        android.graphics.Region$Op $r3;
        com.software.shell.fab.ActionButton $r4;
        com.software.shell.fab.TouchPoint $r5;
        float $f0, $f1, $f2;
        int $i0;
        android.graphics.Paint $r6;

        r0 := @this: com.software.shell.fab.RippleEffectDrawer;

        $r1 := @parameter0: android.graphics.Canvas;

        virtualinvoke $r1.<android.graphics.Canvas: int save()>();

        $r2 = specialinvoke r0.<com.software.shell.fab.RippleEffectDrawer: android.graphics.Path getCircleClipPath()>();

        $r3 = <android.graphics.Region$Op: android.graphics.Region$Op INTERSECT>;

        virtualinvoke $r1.<android.graphics.Canvas: boolean clipPath(android.graphics.Path,android.graphics.Region$Op)>($r2, $r3);

        $r4 = virtualinvoke r0.<com.software.shell.fab.RippleEffectDrawer: com.software.shell.fab.ActionButton getActionButton()>();

        $r5 = virtualinvoke $r4.<com.software.shell.fab.ActionButton: com.software.shell.fab.TouchPoint getTouchPoint()>();

        $f0 = virtualinvoke $r5.<com.software.shell.fab.TouchPoint: float getLastX()>();

        $f1 = virtualinvoke $r5.<com.software.shell.fab.TouchPoint: float getLastY()>();

        $i0 = r0.<com.software.shell.fab.RippleEffectDrawer: int currentRadius>;

        $f2 = (float) $i0;

        $r6 = specialinvoke r0.<com.software.shell.fab.RippleEffectDrawer: android.graphics.Paint getPreparedPaint()>();

        virtualinvoke $r1.<android.graphics.Canvas: void drawCircle(float,float,float,android.graphics.Paint)>($f0, $f1, $f2, $r6);

        virtualinvoke $r1.<android.graphics.Canvas: void restore()>();

        return;
    }
    private android.graphics.Path getCircleClipPath()
    {
        com.software.shell.fab.RippleEffectDrawer r0;
        android.graphics.Path $r1;
        android.graphics.Path$Direction $r2;
        com.software.shell.fab.ActionButton $r3;
        float $f0, $f1, $f2;

        r0 := @this: com.software.shell.fab.RippleEffectDrawer;

        $r1 = new android.graphics.Path;

        specialinvoke $r1.<android.graphics.Path: void <init>()>();

        $r3 = virtualinvoke r0.<com.software.shell.fab.RippleEffectDrawer: com.software.shell.fab.ActionButton getActionButton()>();

        $f0 = virtualinvoke $r3.<com.software.shell.fab.ActionButton: float calculateCenterX()>();

        $r3 = virtualinvoke r0.<com.software.shell.fab.RippleEffectDrawer: com.software.shell.fab.ActionButton getActionButton()>();

        $f1 = virtualinvoke $r3.<com.software.shell.fab.ActionButton: float calculateCenterY()>();

        $r3 = virtualinvoke r0.<com.software.shell.fab.RippleEffectDrawer: com.software.shell.fab.ActionButton getActionButton()>();

        $f2 = virtualinvoke $r3.<com.software.shell.fab.ActionButton: float calculateCircleRadius()>();

        $r2 = <android.graphics.Path$Direction: android.graphics.Path$Direction CW>;

        virtualinvoke $r1.<android.graphics.Path: void addCircle(float,float,float,android.graphics.Path$Direction)>($f0, $f1, $f2, $r2);

        return $r1;
    }
    private int getEndRippleRadius()
    {
        com.software.shell.fab.RippleEffectDrawer r0;
        com.software.shell.fab.ActionButton $r1;
        float $f0;
        int $i0;

        r0 := @this: com.software.shell.fab.RippleEffectDrawer;

        $r1 = virtualinvoke r0.<com.software.shell.fab.RippleEffectDrawer: com.software.shell.fab.ActionButton getActionButton()>();

        $f0 = virtualinvoke $r1.<com.software.shell.fab.ActionButton: float calculateCircleRadius()>();

        $f0 = $f0 * 2.0F;

        $i0 = (int) $f0;

        return $i0;
    }
    private android.graphics.Paint getPreparedPaint()
    {
        com.software.shell.fab.RippleEffectDrawer r0;
        com.software.shell.fab.ActionButton $r1;
        android.graphics.Paint $r2;
        android.graphics.Paint$Style $r3;
        int $i0;

        r0 := @this: com.software.shell.fab.RippleEffectDrawer;

        $r1 = virtualinvoke r0.<com.software.shell.fab.RippleEffectDrawer: com.software.shell.fab.ActionButton getActionButton()>();

        virtualinvoke $r1.<com.software.shell.fab.ActionButton: void resetPaint()>();

        $r1 = virtualinvoke r0.<com.software.shell.fab.RippleEffectDrawer: com.software.shell.fab.ActionButton getActionButton()>();

        $r2 = virtualinvoke $r1.<com.software.shell.fab.ActionButton: android.graphics.Paint getPaint()>();

        $r3 = <android.graphics.Paint$Style: android.graphics.Paint$Style FILL>;

        virtualinvoke $r2.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r3);

        $r1 = virtualinvoke r0.<com.software.shell.fab.RippleEffectDrawer: com.software.shell.fab.ActionButton getActionButton()>();

        $i0 = virtualinvoke $r1.<com.software.shell.fab.ActionButton: int getButtonColorRipple()>();

        virtualinvoke $r2.<android.graphics.Paint: void setColor(int)>($i0);

        return $r2;
    }
    private void updateRadius()
    {
        com.software.shell.fab.RippleEffectDrawer r0;
        boolean $z0;
        int $i0, $i1;
        org.slf4j.Logger $r1;
        java.lang.Integer $r2;

        r0 := @this: com.software.shell.fab.RippleEffectDrawer;

        $z0 = virtualinvoke r0.<com.software.shell.fab.RippleEffectDrawer: boolean isPressed()>();

        if $z0 == 0 goto label2;

        $i0 = r0.<com.software.shell.fab.RippleEffectDrawer: int currentRadius>;

        $i1 = specialinvoke r0.<com.software.shell.fab.RippleEffectDrawer: int getEndRippleRadius()>();

        if $i0 > $i1 goto label1;

        $i0 = r0.<com.software.shell.fab.RippleEffectDrawer: int currentRadius>;

        $i0 = $i0 + 5;

        r0.<com.software.shell.fab.RippleEffectDrawer: int currentRadius> = $i0;

     label1:
        $r1 = <com.software.shell.fab.RippleEffectDrawer: org.slf4j.Logger LOGGER>;

        $i0 = r0.<com.software.shell.fab.RippleEffectDrawer: int currentRadius>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r1.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Updated Ripple Effect radius to: {}", $r2);

        return;

     label2:
        $z0 = virtualinvoke r0.<com.software.shell.fab.RippleEffectDrawer: boolean isDrawingInProgress()>();

        if $z0 == 0 goto label3;

        $i0 = specialinvoke r0.<com.software.shell.fab.RippleEffectDrawer: int getEndRippleRadius()>();

        r0.<com.software.shell.fab.RippleEffectDrawer: int currentRadius> = $i0;

        goto label1;

     label3:
        $z0 = virtualinvoke r0.<com.software.shell.fab.RippleEffectDrawer: boolean isDrawingFinished()>();

        if $z0 == 0 goto label1;

        r0.<com.software.shell.fab.RippleEffectDrawer: int currentRadius> = 0;

        goto label1;
    }
    void draw(android.graphics.Canvas)
    {
        com.software.shell.fab.RippleEffectDrawer r0;
        android.graphics.Canvas $r1;
        com.software.shell.fab.ActionButton $r2;
        com.software.shell.fab.ViewInvalidator $r3;
        boolean $z0;
        org.slf4j.Logger $r4;

        r0 := @this: com.software.shell.fab.RippleEffectDrawer;

        $r1 := @parameter0: android.graphics.Canvas;

        specialinvoke r0.<com.software.shell.fab.RippleEffectDrawer: void updateRadius()>();

        specialinvoke r0.<com.software.shell.fab.RippleEffectDrawer: void drawRipple(android.graphics.Canvas)>($r1);

        $r2 = virtualinvoke r0.<com.software.shell.fab.RippleEffectDrawer: com.software.shell.fab.ActionButton getActionButton()>();

        $r3 = virtualinvoke $r2.<com.software.shell.fab.ActionButton: com.software.shell.fab.ViewInvalidator getInvalidator()>();

        $z0 = virtualinvoke r0.<com.software.shell.fab.RippleEffectDrawer: boolean isDrawingInProgress()>();

        if $z0 == 0 goto label1;

        virtualinvoke $r3.<com.software.shell.fab.ViewInvalidator: void requireInvalidation()>();

        $r4 = <com.software.shell.fab.RippleEffectDrawer: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r4.<org.slf4j.Logger: void trace(java.lang.String)>("Drawing Ripple Effect in progress, invalidating the Action Button");

        return;

     label1:
        $z0 = virtualinvoke r0.<com.software.shell.fab.RippleEffectDrawer: boolean isDrawingFinished()>();

        if $z0 == 0 goto label2;

        $z0 = virtualinvoke r0.<com.software.shell.fab.RippleEffectDrawer: boolean isPressed()>();

        if $z0 != 0 goto label2;

        virtualinvoke $r3.<com.software.shell.fab.ViewInvalidator: void requireDelayedInvalidation()>();

        virtualinvoke $r3.<com.software.shell.fab.ViewInvalidator: void setInvalidationDelay(long)>(100L);

        $r4 = <com.software.shell.fab.RippleEffectDrawer: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r4.<org.slf4j.Logger: void trace(java.lang.String)>("Completed Ripple Effect drawing, posting the last invalidate");

     label2:
        return;
    }
    boolean isDrawingFinished()
    {
        com.software.shell.fab.RippleEffectDrawer r0;
        int $i0, $i1;

        r0 := @this: com.software.shell.fab.RippleEffectDrawer;

        $i1 = r0.<com.software.shell.fab.RippleEffectDrawer: int currentRadius>;

        $i0 = specialinvoke r0.<com.software.shell.fab.RippleEffectDrawer: int getEndRippleRadius()>();

        if $i1 < $i0 goto label1;

        return 1;

     label1:
        return 0;
    }
    boolean isDrawingInProgress()
    {
        com.software.shell.fab.RippleEffectDrawer r0;
        boolean $z0;
        int $i0;

        r0 := @this: com.software.shell.fab.RippleEffectDrawer;

        $i0 = r0.<com.software.shell.fab.RippleEffectDrawer: int currentRadius>;

        if $i0 <= 0 goto label1;

        $z0 = virtualinvoke r0.<com.software.shell.fab.RippleEffectDrawer: boolean isDrawingFinished()>();

        if $z0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }
