com.software.shell.fab.ActionButton extends android.view.View
private static final org.slf4j.Logger LOGGER
private int buttonColor
private int buttonColorPressed
private int buttonColorRipple
private android.view.animation.Animation hideAnimation
private android.graphics.drawable.Drawable image
private float imageSize
private final com.software.shell.fab.ViewInvalidator invalidator
protected final com.software.shell.viewmover.movers.ViewMover mover
private final android.graphics.Paint paint
protected final com.software.shell.fab.EffectDrawer rippleEffectDrawer
private boolean rippleEffectEnabled
private int shadowColor
private float shadowRadius
protected final com.software.shell.fab.EffectDrawer shadowResponsiveDrawer
private boolean shadowResponsiveEffectEnabled
private float shadowXOffset
private float shadowYOffset
private android.view.animation.Animation showAnimation
private float size
private com.software.shell.fab.ActionButton$State state
private int strokeColor
private float strokeWidth
private com.software.shell.fab.TouchPoint touchPoint
private com.software.shell.fab.ActionButton$Type type
    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/software/shell/fab/ActionButton;");

        <com.software.shell.fab.ActionButton: org.slf4j.Logger LOGGER> = $r0;

        return;
    }
    public void <init>(android.content.Context)
    {
        com.software.shell.fab.ActionButton r0;
        android.content.Context $r1;
        com.software.shell.fab.ActionButton$Type $r2;
        float $f0;
        com.software.shell.fab.ActionButton$State $r3;
        int $i0;
        com.software.shell.fab.TouchPoint $r4;
        android.graphics.Paint $r5;
        com.software.shell.fab.ViewInvalidator $r6;
        com.software.shell.fab.RippleEffectDrawer $r7;
        com.software.shell.fab.ShadowResponsiveDrawer $r8;
        com.software.shell.viewmover.movers.ViewMover $r9;

        r0 := @this: com.software.shell.fab.ActionButton;

        $r1 := @parameter0: android.content.Context;

        specialinvoke r0.<android.view.View: void <init>(android.content.Context)>($r1);

        $r2 = <com.software.shell.fab.ActionButton$Type: com.software.shell.fab.ActionButton$Type DEFAULT>;

        r0.<com.software.shell.fab.ActionButton: com.software.shell.fab.ActionButton$Type type> = $r2;

        $r2 = r0.<com.software.shell.fab.ActionButton: com.software.shell.fab.ActionButton$Type type>;

        $f0 = virtualinvoke $r2.<com.software.shell.fab.ActionButton$Type: float getSize()>();

        $f0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float dpToPx(float)>($f0);

        r0.<com.software.shell.fab.ActionButton: float size> = $f0;

        $r3 = <com.software.shell.fab.ActionButton$State: com.software.shell.fab.ActionButton$State NORMAL>;

        r0.<com.software.shell.fab.ActionButton: com.software.shell.fab.ActionButton$State state> = $r3;

        $i0 = staticinvoke <android.graphics.Color: int parseColor(java.lang.String)>("#FF9B9B9B");

        r0.<com.software.shell.fab.ActionButton: int buttonColor> = $i0;

        $i0 = staticinvoke <android.graphics.Color: int parseColor(java.lang.String)>("#FF696969");

        r0.<com.software.shell.fab.ActionButton: int buttonColorPressed> = $i0;

        $i0 = specialinvoke r0.<com.software.shell.fab.ActionButton: int darkenButtonColorPressed()>();

        r0.<com.software.shell.fab.ActionButton: int buttonColorRipple> = $i0;

        $f0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float dpToPx(float)>(8.0F);

        r0.<com.software.shell.fab.ActionButton: float shadowRadius> = $f0;

        $f0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float dpToPx(float)>(0.0F);

        r0.<com.software.shell.fab.ActionButton: float shadowXOffset> = $f0;

        $f0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float dpToPx(float)>(8.0F);

        r0.<com.software.shell.fab.ActionButton: float shadowYOffset> = $f0;

        $i0 = staticinvoke <android.graphics.Color: int parseColor(java.lang.String)>("#42000000");

        r0.<com.software.shell.fab.ActionButton: int shadowColor> = $i0;

        r0.<com.software.shell.fab.ActionButton: boolean shadowResponsiveEffectEnabled> = 1;

        r0.<com.software.shell.fab.ActionButton: float strokeWidth> = 0.0F;

        r0.<com.software.shell.fab.ActionButton: int strokeColor> = -16777216;

        $f0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float dpToPx(float)>(24.0F);

        r0.<com.software.shell.fab.ActionButton: float imageSize> = $f0;

        $r4 = new com.software.shell.fab.TouchPoint;

        specialinvoke $r4.<com.software.shell.fab.TouchPoint: void <init>(float,float)>(0.0F, 0.0F);

        r0.<com.software.shell.fab.ActionButton: com.software.shell.fab.TouchPoint touchPoint> = $r4;

        $r5 = new android.graphics.Paint;

        specialinvoke $r5.<android.graphics.Paint: void <init>(int)>(1);

        r0.<com.software.shell.fab.ActionButton: android.graphics.Paint paint> = $r5;

        $r6 = new com.software.shell.fab.ViewInvalidator;

        specialinvoke $r6.<com.software.shell.fab.ViewInvalidator: void <init>(android.view.View)>(r0);

        r0.<com.software.shell.fab.ActionButton: com.software.shell.fab.ViewInvalidator invalidator> = $r6;

        $r7 = new com.software.shell.fab.RippleEffectDrawer;

        specialinvoke $r7.<com.software.shell.fab.RippleEffectDrawer: void <init>(com.software.shell.fab.ActionButton)>(r0);

        r0.<com.software.shell.fab.ActionButton: com.software.shell.fab.EffectDrawer rippleEffectDrawer> = $r7;

        $r8 = new com.software.shell.fab.ShadowResponsiveDrawer;

        specialinvoke $r8.<com.software.shell.fab.ShadowResponsiveDrawer: void <init>(com.software.shell.fab.ActionButton)>(r0);

        r0.<com.software.shell.fab.ActionButton: com.software.shell.fab.EffectDrawer shadowResponsiveDrawer> = $r8;

        $r9 = staticinvoke <com.software.shell.viewmover.movers.ViewMoverFactory: com.software.shell.viewmover.movers.ViewMover createInstance(android.view.View)>(r0);

        r0.<com.software.shell.fab.ActionButton: com.software.shell.viewmover.movers.ViewMover mover> = $r9;

        specialinvoke r0.<com.software.shell.fab.ActionButton: void initActionButton()>();

        return;
    }
    public void <init>(android.content.Context, android.util.AttributeSet)
    {
        com.software.shell.fab.ActionButton r0;
        android.content.Context $r1;
        android.util.AttributeSet $r2;
        com.software.shell.fab.ActionButton$Type $r3;
        float $f0;
        com.software.shell.fab.ActionButton$State $r4;
        int $i0;
        com.software.shell.fab.TouchPoint $r5;
        android.graphics.Paint $r6;
        com.software.shell.fab.ViewInvalidator $r7;
        com.software.shell.fab.RippleEffectDrawer $r8;
        com.software.shell.fab.ShadowResponsiveDrawer $r9;
        com.software.shell.viewmover.movers.ViewMover $r10;

        r0 := @this: com.software.shell.fab.ActionButton;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: android.util.AttributeSet;

        specialinvoke r0.<android.view.View: void <init>(android.content.Context,android.util.AttributeSet)>($r1, $r2);

        $r3 = <com.software.shell.fab.ActionButton$Type: com.software.shell.fab.ActionButton$Type DEFAULT>;

        r0.<com.software.shell.fab.ActionButton: com.software.shell.fab.ActionButton$Type type> = $r3;

        $r3 = r0.<com.software.shell.fab.ActionButton: com.software.shell.fab.ActionButton$Type type>;

        $f0 = virtualinvoke $r3.<com.software.shell.fab.ActionButton$Type: float getSize()>();

        $f0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float dpToPx(float)>($f0);

        r0.<com.software.shell.fab.ActionButton: float size> = $f0;

        $r4 = <com.software.shell.fab.ActionButton$State: com.software.shell.fab.ActionButton$State NORMAL>;

        r0.<com.software.shell.fab.ActionButton: com.software.shell.fab.ActionButton$State state> = $r4;

        $i0 = staticinvoke <android.graphics.Color: int parseColor(java.lang.String)>("#FF9B9B9B");

        r0.<com.software.shell.fab.ActionButton: int buttonColor> = $i0;

        $i0 = staticinvoke <android.graphics.Color: int parseColor(java.lang.String)>("#FF696969");

        r0.<com.software.shell.fab.ActionButton: int buttonColorPressed> = $i0;

        $i0 = specialinvoke r0.<com.software.shell.fab.ActionButton: int darkenButtonColorPressed()>();

        r0.<com.software.shell.fab.ActionButton: int buttonColorRipple> = $i0;

        $f0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float dpToPx(float)>(8.0F);

        r0.<com.software.shell.fab.ActionButton: float shadowRadius> = $f0;

        $f0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float dpToPx(float)>(0.0F);

        r0.<com.software.shell.fab.ActionButton: float shadowXOffset> = $f0;

        $f0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float dpToPx(float)>(8.0F);

        r0.<com.software.shell.fab.ActionButton: float shadowYOffset> = $f0;

        $i0 = staticinvoke <android.graphics.Color: int parseColor(java.lang.String)>("#42000000");

        r0.<com.software.shell.fab.ActionButton: int shadowColor> = $i0;

        r0.<com.software.shell.fab.ActionButton: boolean shadowResponsiveEffectEnabled> = 1;

        r0.<com.software.shell.fab.ActionButton: float strokeWidth> = 0.0F;

        r0.<com.software.shell.fab.ActionButton: int strokeColor> = -16777216;

        $f0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float dpToPx(float)>(24.0F);

        r0.<com.software.shell.fab.ActionButton: float imageSize> = $f0;

        $r5 = new com.software.shell.fab.TouchPoint;

        specialinvoke $r5.<com.software.shell.fab.TouchPoint: void <init>(float,float)>(0.0F, 0.0F);

        r0.<com.software.shell.fab.ActionButton: com.software.shell.fab.TouchPoint touchPoint> = $r5;

        $r6 = new android.graphics.Paint;

        specialinvoke $r6.<android.graphics.Paint: void <init>(int)>(1);

        r0.<com.software.shell.fab.ActionButton: android.graphics.Paint paint> = $r6;

        $r7 = new com.software.shell.fab.ViewInvalidator;

        specialinvoke $r7.<com.software.shell.fab.ViewInvalidator: void <init>(android.view.View)>(r0);

        r0.<com.software.shell.fab.ActionButton: com.software.shell.fab.ViewInvalidator invalidator> = $r7;

        $r8 = new com.software.shell.fab.RippleEffectDrawer;

        specialinvoke $r8.<com.software.shell.fab.RippleEffectDrawer: void <init>(com.software.shell.fab.ActionButton)>(r0);

        r0.<com.software.shell.fab.ActionButton: com.software.shell.fab.EffectDrawer rippleEffectDrawer> = $r8;

        $r9 = new com.software.shell.fab.ShadowResponsiveDrawer;

        specialinvoke $r9.<com.software.shell.fab.ShadowResponsiveDrawer: void <init>(com.software.shell.fab.ActionButton)>(r0);

        r0.<com.software.shell.fab.ActionButton: com.software.shell.fab.EffectDrawer shadowResponsiveDrawer> = $r9;

        $r10 = staticinvoke <com.software.shell.viewmover.movers.ViewMoverFactory: com.software.shell.viewmover.movers.ViewMover createInstance(android.view.View)>(r0);

        r0.<com.software.shell.fab.ActionButton: com.software.shell.viewmover.movers.ViewMover mover> = $r10;

        specialinvoke r0.<com.software.shell.fab.ActionButton: void initActionButton()>();

        specialinvoke r0.<com.software.shell.fab.ActionButton: void initActionButtonAttrs(android.content.Context,android.util.AttributeSet,int,int)>($r1, $r2, 0, 0);

        return;
    }
    public void <init>(android.content.Context, android.util.AttributeSet, int)
    {
        com.software.shell.fab.ActionButton r0;
        android.content.Context $r1;
        android.util.AttributeSet $r2;
        int $i0, $i1;
        com.software.shell.fab.ActionButton$Type $r3;
        float $f0;
        com.software.shell.fab.ActionButton$State $r4;
        com.software.shell.fab.TouchPoint $r5;
        android.graphics.Paint $r6;
        com.software.shell.fab.ViewInvalidator $r7;
        com.software.shell.fab.RippleEffectDrawer $r8;
        com.software.shell.fab.ShadowResponsiveDrawer $r9;
        com.software.shell.viewmover.movers.ViewMover $r10;

        r0 := @this: com.software.shell.fab.ActionButton;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: android.util.AttributeSet;

        $i0 := @parameter2: int;

        specialinvoke r0.<android.view.View: void <init>(android.content.Context,android.util.AttributeSet,int)>($r1, $r2, $i0);

        $r3 = <com.software.shell.fab.ActionButton$Type: com.software.shell.fab.ActionButton$Type DEFAULT>;

        r0.<com.software.shell.fab.ActionButton: com.software.shell.fab.ActionButton$Type type> = $r3;

        $r3 = r0.<com.software.shell.fab.ActionButton: com.software.shell.fab.ActionButton$Type type>;

        $f0 = virtualinvoke $r3.<com.software.shell.fab.ActionButton$Type: float getSize()>();

        $f0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float dpToPx(float)>($f0);

        r0.<com.software.shell.fab.ActionButton: float size> = $f0;

        $r4 = <com.software.shell.fab.ActionButton$State: com.software.shell.fab.ActionButton$State NORMAL>;

        r0.<com.software.shell.fab.ActionButton: com.software.shell.fab.ActionButton$State state> = $r4;

        $i1 = staticinvoke <android.graphics.Color: int parseColor(java.lang.String)>("#FF9B9B9B");

        r0.<com.software.shell.fab.ActionButton: int buttonColor> = $i1;

        $i1 = staticinvoke <android.graphics.Color: int parseColor(java.lang.String)>("#FF696969");

        r0.<com.software.shell.fab.ActionButton: int buttonColorPressed> = $i1;

        $i1 = specialinvoke r0.<com.software.shell.fab.ActionButton: int darkenButtonColorPressed()>();

        r0.<com.software.shell.fab.ActionButton: int buttonColorRipple> = $i1;

        $f0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float dpToPx(float)>(8.0F);

        r0.<com.software.shell.fab.ActionButton: float shadowRadius> = $f0;

        $f0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float dpToPx(float)>(0.0F);

        r0.<com.software.shell.fab.ActionButton: float shadowXOffset> = $f0;

        $f0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float dpToPx(float)>(8.0F);

        r0.<com.software.shell.fab.ActionButton: float shadowYOffset> = $f0;

        $i1 = staticinvoke <android.graphics.Color: int parseColor(java.lang.String)>("#42000000");

        r0.<com.software.shell.fab.ActionButton: int shadowColor> = $i1;

        r0.<com.software.shell.fab.ActionButton: boolean shadowResponsiveEffectEnabled> = 1;

        r0.<com.software.shell.fab.ActionButton: float strokeWidth> = 0.0F;

        r0.<com.software.shell.fab.ActionButton: int strokeColor> = -16777216;

        $f0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float dpToPx(float)>(24.0F);

        r0.<com.software.shell.fab.ActionButton: float imageSize> = $f0;

        $r5 = new com.software.shell.fab.TouchPoint;

        specialinvoke $r5.<com.software.shell.fab.TouchPoint: void <init>(float,float)>(0.0F, 0.0F);

        r0.<com.software.shell.fab.ActionButton: com.software.shell.fab.TouchPoint touchPoint> = $r5;

        $r6 = new android.graphics.Paint;

        specialinvoke $r6.<android.graphics.Paint: void <init>(int)>(1);

        r0.<com.software.shell.fab.ActionButton: android.graphics.Paint paint> = $r6;

        $r7 = new com.software.shell.fab.ViewInvalidator;

        specialinvoke $r7.<com.software.shell.fab.ViewInvalidator: void <init>(android.view.View)>(r0);

        r0.<com.software.shell.fab.ActionButton: com.software.shell.fab.ViewInvalidator invalidator> = $r7;

        $r8 = new com.software.shell.fab.RippleEffectDrawer;

        specialinvoke $r8.<com.software.shell.fab.RippleEffectDrawer: void <init>(com.software.shell.fab.ActionButton)>(r0);

        r0.<com.software.shell.fab.ActionButton: com.software.shell.fab.EffectDrawer rippleEffectDrawer> = $r8;

        $r9 = new com.software.shell.fab.ShadowResponsiveDrawer;

        specialinvoke $r9.<com.software.shell.fab.ShadowResponsiveDrawer: void <init>(com.software.shell.fab.ActionButton)>(r0);

        r0.<com.software.shell.fab.ActionButton: com.software.shell.fab.EffectDrawer shadowResponsiveDrawer> = $r9;

        $r10 = staticinvoke <com.software.shell.viewmover.movers.ViewMoverFactory: com.software.shell.viewmover.movers.ViewMover createInstance(android.view.View)>(r0);

        r0.<com.software.shell.fab.ActionButton: com.software.shell.viewmover.movers.ViewMover mover> = $r10;

        specialinvoke r0.<com.software.shell.fab.ActionButton: void initActionButton()>();

        specialinvoke r0.<com.software.shell.fab.ActionButton: void initActionButtonAttrs(android.content.Context,android.util.AttributeSet,int,int)>($r1, $r2, $i0, 0);

        return;
    }
    public void <init>(android.content.Context, android.util.AttributeSet, int, int)
    {
        com.software.shell.fab.ActionButton r0;
        android.content.Context $r1;
        android.util.AttributeSet $r2;
        int $i0, $i1, $i2;
        com.software.shell.fab.ActionButton$Type $r3;
        float $f0;
        com.software.shell.fab.ActionButton$State $r4;
        com.software.shell.fab.TouchPoint $r5;
        android.graphics.Paint $r6;
        com.software.shell.fab.ViewInvalidator $r7;
        com.software.shell.fab.RippleEffectDrawer $r8;
        com.software.shell.fab.ShadowResponsiveDrawer $r9;
        com.software.shell.viewmover.movers.ViewMover $r10;

        r0 := @this: com.software.shell.fab.ActionButton;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: android.util.AttributeSet;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        specialinvoke r0.<android.view.View: void <init>(android.content.Context,android.util.AttributeSet,int,int)>($r1, $r2, $i0, $i1);

        $r3 = <com.software.shell.fab.ActionButton$Type: com.software.shell.fab.ActionButton$Type DEFAULT>;

        r0.<com.software.shell.fab.ActionButton: com.software.shell.fab.ActionButton$Type type> = $r3;

        $r3 = r0.<com.software.shell.fab.ActionButton: com.software.shell.fab.ActionButton$Type type>;

        $f0 = virtualinvoke $r3.<com.software.shell.fab.ActionButton$Type: float getSize()>();

        $f0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float dpToPx(float)>($f0);

        r0.<com.software.shell.fab.ActionButton: float size> = $f0;

        $r4 = <com.software.shell.fab.ActionButton$State: com.software.shell.fab.ActionButton$State NORMAL>;

        r0.<com.software.shell.fab.ActionButton: com.software.shell.fab.ActionButton$State state> = $r4;

        $i2 = staticinvoke <android.graphics.Color: int parseColor(java.lang.String)>("#FF9B9B9B");

        r0.<com.software.shell.fab.ActionButton: int buttonColor> = $i2;

        $i2 = staticinvoke <android.graphics.Color: int parseColor(java.lang.String)>("#FF696969");

        r0.<com.software.shell.fab.ActionButton: int buttonColorPressed> = $i2;

        $i2 = specialinvoke r0.<com.software.shell.fab.ActionButton: int darkenButtonColorPressed()>();

        r0.<com.software.shell.fab.ActionButton: int buttonColorRipple> = $i2;

        $f0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float dpToPx(float)>(8.0F);

        r0.<com.software.shell.fab.ActionButton: float shadowRadius> = $f0;

        $f0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float dpToPx(float)>(0.0F);

        r0.<com.software.shell.fab.ActionButton: float shadowXOffset> = $f0;

        $f0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float dpToPx(float)>(8.0F);

        r0.<com.software.shell.fab.ActionButton: float shadowYOffset> = $f0;

        $i2 = staticinvoke <android.graphics.Color: int parseColor(java.lang.String)>("#42000000");

        r0.<com.software.shell.fab.ActionButton: int shadowColor> = $i2;

        r0.<com.software.shell.fab.ActionButton: boolean shadowResponsiveEffectEnabled> = 1;

        r0.<com.software.shell.fab.ActionButton: float strokeWidth> = 0.0F;

        r0.<com.software.shell.fab.ActionButton: int strokeColor> = -16777216;

        $f0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float dpToPx(float)>(24.0F);

        r0.<com.software.shell.fab.ActionButton: float imageSize> = $f0;

        $r5 = new com.software.shell.fab.TouchPoint;

        specialinvoke $r5.<com.software.shell.fab.TouchPoint: void <init>(float,float)>(0.0F, 0.0F);

        r0.<com.software.shell.fab.ActionButton: com.software.shell.fab.TouchPoint touchPoint> = $r5;

        $r6 = new android.graphics.Paint;

        specialinvoke $r6.<android.graphics.Paint: void <init>(int)>(1);

        r0.<com.software.shell.fab.ActionButton: android.graphics.Paint paint> = $r6;

        $r7 = new com.software.shell.fab.ViewInvalidator;

        specialinvoke $r7.<com.software.shell.fab.ViewInvalidator: void <init>(android.view.View)>(r0);

        r0.<com.software.shell.fab.ActionButton: com.software.shell.fab.ViewInvalidator invalidator> = $r7;

        $r8 = new com.software.shell.fab.RippleEffectDrawer;

        specialinvoke $r8.<com.software.shell.fab.RippleEffectDrawer: void <init>(com.software.shell.fab.ActionButton)>(r0);

        r0.<com.software.shell.fab.ActionButton: com.software.shell.fab.EffectDrawer rippleEffectDrawer> = $r8;

        $r9 = new com.software.shell.fab.ShadowResponsiveDrawer;

        specialinvoke $r9.<com.software.shell.fab.ShadowResponsiveDrawer: void <init>(com.software.shell.fab.ActionButton)>(r0);

        r0.<com.software.shell.fab.ActionButton: com.software.shell.fab.EffectDrawer shadowResponsiveDrawer> = $r9;

        $r10 = staticinvoke <com.software.shell.viewmover.movers.ViewMoverFactory: com.software.shell.viewmover.movers.ViewMover createInstance(android.view.View)>(r0);

        r0.<com.software.shell.fab.ActionButton: com.software.shell.viewmover.movers.ViewMover mover> = $r10;

        specialinvoke r0.<com.software.shell.fab.ActionButton: void initActionButton()>();

        specialinvoke r0.<com.software.shell.fab.ActionButton: void initActionButtonAttrs(android.content.Context,android.util.AttributeSet,int,int)>($r1, $r2, $i0, $i1);

        return;
    }
    private int calculateMeasuredHeight()
    {
        com.software.shell.fab.ActionButton r0;
        float $f0, $f1;
        int $i0;
        org.slf4j.Logger $r1;
        java.lang.Integer $r2;

        r0 := @this: com.software.shell.fab.ActionButton;

        $f0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float getSize()>();

        $i0 = specialinvoke r0.<com.software.shell.fab.ActionButton: int calculateShadowHeight()>();

        $f1 = (float) $i0;

        $f0 = $f0 + $f1;

        $i0 = specialinvoke r0.<com.software.shell.fab.ActionButton: int calculateStrokeWeight()>();

        $f1 = (float) $i0;

        $f0 = $f0 + $f1;

        $i0 = (int) $f0;

        $r1 = <com.software.shell.fab.ActionButton: org.slf4j.Logger LOGGER>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r1.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Calculated Action Button measured height: {}", $r2);

        return $i0;
    }
    private int calculateMeasuredWidth()
    {
        com.software.shell.fab.ActionButton r0;
        float $f0, $f1;
        int $i0;
        org.slf4j.Logger $r1;
        java.lang.Integer $r2;

        r0 := @this: com.software.shell.fab.ActionButton;

        $f0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float getSize()>();

        $i0 = specialinvoke r0.<com.software.shell.fab.ActionButton: int calculateShadowWidth()>();

        $f1 = (float) $i0;

        $f0 = $f0 + $f1;

        $i0 = specialinvoke r0.<com.software.shell.fab.ActionButton: int calculateStrokeWeight()>();

        $f1 = (float) $i0;

        $f0 = $f0 + $f1;

        $i0 = (int) $f0;

        $r1 = <com.software.shell.fab.ActionButton: org.slf4j.Logger LOGGER>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r1.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Calculated Action Button measured width: {}", $r2);

        return $i0;
    }
    private int calculateShadowHeight()
    {
        com.software.shell.fab.ActionButton r0;
        boolean $z0;
        com.software.shell.fab.EffectDrawer $r1;
        com.software.shell.fab.ShadowResponsiveDrawer $r2;
        float $f0, $f1;
        int $i0;
        org.slf4j.Logger $r3;
        java.lang.Integer $r4;

        r0 := @this: com.software.shell.fab.ActionButton;

        $z0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: boolean isShadowResponsiveEffectEnabled()>();

        if $z0 == 0 goto label3;

        $r1 = r0.<com.software.shell.fab.ActionButton: com.software.shell.fab.EffectDrawer shadowResponsiveDrawer>;

        $r2 = (com.software.shell.fab.ShadowResponsiveDrawer) $r1;

        $f0 = virtualinvoke $r2.<com.software.shell.fab.ShadowResponsiveDrawer: float getMaxShadowRadius()>();

     label1:
        $z0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: boolean hasShadow()>();

        if $z0 == 0 goto label4;

        $f1 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float getShadowYOffset()>();

        $f1 = staticinvoke <java.lang.Math: float abs(float)>($f1);

        $f0 = $f0 + $f1;

        $f0 = $f0 * 2.0F;

        $i0 = (int) $f0;

     label2:
        $r3 = <com.software.shell.fab.ActionButton: org.slf4j.Logger LOGGER>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r3.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Calculated Action Button shadow height: {}", $r4);

        return $i0;

     label3:
        $f0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float getShadowRadius()>();

        goto label1;

     label4:
        $i0 = 0;

        goto label2;
    }
    private int calculateShadowWidth()
    {
        com.software.shell.fab.ActionButton r0;
        boolean $z0;
        com.software.shell.fab.EffectDrawer $r1;
        com.software.shell.fab.ShadowResponsiveDrawer $r2;
        float $f0, $f1;
        int $i0;
        org.slf4j.Logger $r3;
        java.lang.Integer $r4;

        r0 := @this: com.software.shell.fab.ActionButton;

        $z0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: boolean isShadowResponsiveEffectEnabled()>();

        if $z0 == 0 goto label3;

        $r1 = r0.<com.software.shell.fab.ActionButton: com.software.shell.fab.EffectDrawer shadowResponsiveDrawer>;

        $r2 = (com.software.shell.fab.ShadowResponsiveDrawer) $r1;

        $f0 = virtualinvoke $r2.<com.software.shell.fab.ShadowResponsiveDrawer: float getMaxShadowRadius()>();

     label1:
        $z0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: boolean hasShadow()>();

        if $z0 == 0 goto label4;

        $f1 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float getShadowXOffset()>();

        $f1 = staticinvoke <java.lang.Math: float abs(float)>($f1);

        $f0 = $f0 + $f1;

        $f0 = $f0 * 2.0F;

        $i0 = (int) $f0;

     label2:
        $r3 = <com.software.shell.fab.ActionButton: org.slf4j.Logger LOGGER>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r3.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Calculated Action Button shadow width: {}", $r4);

        return $i0;

     label3:
        $f0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float getShadowRadius()>();

        goto label1;

     label4:
        $i0 = 0;

        goto label2;
    }
    private int calculateStrokeWeight()
    {
        com.software.shell.fab.ActionButton r0;
        float $f0;
        int $i0;
        org.slf4j.Logger $r1;
        java.lang.Float $r2;

        r0 := @this: com.software.shell.fab.ActionButton;

        $f0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float getStrokeWidth()>();

        $f0 = $f0 * 2.0F;

        $i0 = (int) $f0;

        $r1 = <com.software.shell.fab.ActionButton: org.slf4j.Logger LOGGER>;

        $f0 = r0.<com.software.shell.fab.ActionButton: float strokeWidth>;

        $r2 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        interfaceinvoke $r1.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Calculated Action Button stroke width: {}", $r2);

        return $i0;
    }
    private int darkenButtonColorPressed()
    {
        com.software.shell.fab.ActionButton r0;
        int $i0;

        r0 := @this: com.software.shell.fab.ActionButton;

        $i0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: int getButtonColorPressed()>();

        $i0 = staticinvoke <com.software.shell.uitools.resutils.color.ColorModifier: int modifyExposure(int,float)>($i0, 0.8F);

        return $i0;
    }
    private boolean hasElevation()
    {
        com.software.shell.fab.ActionButton r0;
        float $f0;
        int $i0;
        byte $b1;

        r0 := @this: com.software.shell.fab.ActionButton;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 21 goto label1;

        $f0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float getElevation()>();

        $b1 = $f0 cmpl 0.0F;

        if $b1 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    private void initActionButton()
    {
        com.software.shell.fab.ActionButton r0;
        org.slf4j.Logger $r1;

        r0 := @this: com.software.shell.fab.ActionButton;

        specialinvoke r0.<com.software.shell.fab.ActionButton: void initLayerType()>();

        $r1 = <com.software.shell.fab.ActionButton: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r1.<org.slf4j.Logger: void trace(java.lang.String)>("Initialized the Action Button");

        return;
    }
    private void initActionButtonAttrs(android.content.Context, android.util.AttributeSet, int, int)
    {
        com.software.shell.fab.ActionButton r0;
        android.content.Context $r1;
        android.util.AttributeSet $r2;
        int $i0, $i1;
        org.slf4j.Logger $r3;
        android.content.res.Resources$Theme $r4;
        int[] $r5;
        android.content.res.TypedArray $r6;
        java.lang.Exception $r7;
        java.lang.Throwable $r8;

        r0 := @this: com.software.shell.fab.ActionButton;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: android.util.AttributeSet;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $r4 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources$Theme getTheme()>();

        $r5 = <com.software.shell.fab.R$styleable: int[] ActionButton>;

        $r6 = virtualinvoke $r4.<android.content.res.Resources$Theme: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)>($r2, $r5, $i0, $i1);

     label1:
        specialinvoke r0.<com.software.shell.fab.ActionButton: void initType(android.content.res.TypedArray)>($r6);

        specialinvoke r0.<com.software.shell.fab.ActionButton: void initSize(android.content.res.TypedArray)>($r6);

        specialinvoke r0.<com.software.shell.fab.ActionButton: void initButtonColor(android.content.res.TypedArray)>($r6);

        specialinvoke r0.<com.software.shell.fab.ActionButton: void initButtonColorPressed(android.content.res.TypedArray)>($r6);

        specialinvoke r0.<com.software.shell.fab.ActionButton: void initRippleEffectEnabled(android.content.res.TypedArray)>($r6);

        specialinvoke r0.<com.software.shell.fab.ActionButton: void initButtonColorRipple(android.content.res.TypedArray)>($r6);

        specialinvoke r0.<com.software.shell.fab.ActionButton: void initShadowRadius(android.content.res.TypedArray)>($r6);

        specialinvoke r0.<com.software.shell.fab.ActionButton: void initShadowXOffset(android.content.res.TypedArray)>($r6);

        specialinvoke r0.<com.software.shell.fab.ActionButton: void initShadowYOffset(android.content.res.TypedArray)>($r6);

        specialinvoke r0.<com.software.shell.fab.ActionButton: void initShadowColor(android.content.res.TypedArray)>($r6);

        specialinvoke r0.<com.software.shell.fab.ActionButton: void initShadowResponsiveEffectEnabled(android.content.res.TypedArray)>($r6);

        specialinvoke r0.<com.software.shell.fab.ActionButton: void initStrokeWidth(android.content.res.TypedArray)>($r6);

        specialinvoke r0.<com.software.shell.fab.ActionButton: void initStrokeColor(android.content.res.TypedArray)>($r6);

        specialinvoke r0.<com.software.shell.fab.ActionButton: void initImage(android.content.res.TypedArray)>($r6);

        specialinvoke r0.<com.software.shell.fab.ActionButton: void initImageSize(android.content.res.TypedArray)>($r6);

        specialinvoke r0.<com.software.shell.fab.ActionButton: void initShowAnimation(android.content.res.TypedArray)>($r6);

        specialinvoke r0.<com.software.shell.fab.ActionButton: void initHideAnimation(android.content.res.TypedArray)>($r6);

     label2:
        virtualinvoke $r6.<android.content.res.TypedArray: void recycle()>();

     label3:
        $r3 = <com.software.shell.fab.ActionButton: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r3.<org.slf4j.Logger: void trace(java.lang.String)>("Successfully initialized the Action Button attributes");

        return;

     label4:
        $r7 := @caughtexception;

     label5:
        $r3 = <com.software.shell.fab.ActionButton: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r3.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Throwable)>("Failed to read attribute", $r7);

     label6:
        virtualinvoke $r6.<android.content.res.TypedArray: void recycle()>();

        goto label3;

     label7:
        $r8 := @caughtexception;

        virtualinvoke $r6.<android.content.res.TypedArray: void recycle()>();

        throw $r8;

        catch java.lang.Exception from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }
    private void initButtonColor(android.content.res.TypedArray)
    {
        com.software.shell.fab.ActionButton r0;
        android.content.res.TypedArray $r1;
        int $i0, $i1;
        boolean $z0;
        org.slf4j.Logger $r2;
        java.lang.Integer $r3;

        r0 := @this: com.software.shell.fab.ActionButton;

        $r1 := @parameter0: android.content.res.TypedArray;

        $i0 = <com.software.shell.fab.R$styleable: int ActionButton_button_color>;

        $z0 = virtualinvoke $r1.<android.content.res.TypedArray: boolean hasValue(int)>($i0);

        if $z0 == 0 goto label1;

        $i1 = r0.<com.software.shell.fab.ActionButton: int buttonColor>;

        $i0 = virtualinvoke $r1.<android.content.res.TypedArray: int getColor(int,int)>($i0, $i1);

        r0.<com.software.shell.fab.ActionButton: int buttonColor> = $i0;

        $r2 = <com.software.shell.fab.ActionButton: org.slf4j.Logger LOGGER>;

        $i0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: int getButtonColor()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r2.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Initialized Action Button color: {}", $r3);

     label1:
        return;
    }
    private void initButtonColorPressed(android.content.res.TypedArray)
    {
        com.software.shell.fab.ActionButton r0;
        android.content.res.TypedArray $r1;
        int $i0, $i1;
        boolean $z0;
        org.slf4j.Logger $r2;
        java.lang.Integer $r3;

        r0 := @this: com.software.shell.fab.ActionButton;

        $r1 := @parameter0: android.content.res.TypedArray;

        $i0 = <com.software.shell.fab.R$styleable: int ActionButton_button_colorPressed>;

        $z0 = virtualinvoke $r1.<android.content.res.TypedArray: boolean hasValue(int)>($i0);

        if $z0 == 0 goto label1;

        $i1 = r0.<com.software.shell.fab.ActionButton: int buttonColorPressed>;

        $i0 = virtualinvoke $r1.<android.content.res.TypedArray: int getColor(int,int)>($i0, $i1);

        r0.<com.software.shell.fab.ActionButton: int buttonColorPressed> = $i0;

        $i0 = specialinvoke r0.<com.software.shell.fab.ActionButton: int darkenButtonColorPressed()>();

        r0.<com.software.shell.fab.ActionButton: int buttonColorRipple> = $i0;

        $r2 = <com.software.shell.fab.ActionButton: org.slf4j.Logger LOGGER>;

        $i0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: int getButtonColorPressed()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r2.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Initialized Action Button color pressed: {}", $r3);

     label1:
        return;
    }
    private void initButtonColorRipple(android.content.res.TypedArray)
    {
        com.software.shell.fab.ActionButton r0;
        android.content.res.TypedArray $r1;
        int $i0, $i1;
        boolean $z0;
        org.slf4j.Logger $r2;
        java.lang.Integer $r3;

        r0 := @this: com.software.shell.fab.ActionButton;

        $r1 := @parameter0: android.content.res.TypedArray;

        $i0 = <com.software.shell.fab.R$styleable: int ActionButton_button_colorRipple>;

        $z0 = virtualinvoke $r1.<android.content.res.TypedArray: boolean hasValue(int)>($i0);

        if $z0 == 0 goto label1;

        $i1 = r0.<com.software.shell.fab.ActionButton: int buttonColorRipple>;

        $i0 = virtualinvoke $r1.<android.content.res.TypedArray: int getColor(int,int)>($i0, $i1);

        r0.<com.software.shell.fab.ActionButton: int buttonColorRipple> = $i0;

        $r2 = <com.software.shell.fab.ActionButton: org.slf4j.Logger LOGGER>;

        $i0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: int getButtonColorRipple()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r2.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Initialized Action Button Ripple Effect color: {}", $r3);

     label1:
        return;
    }
    private void initHideAnimation(android.content.res.TypedArray)
    {
        com.software.shell.fab.ActionButton r0;
        android.content.res.TypedArray $r1;
        int $i0, $i1;
        boolean $z0;
        com.software.shell.fab.ActionButton$Animations $r2;
        android.content.Context $r3;
        android.view.animation.Animation $r4;
        org.slf4j.Logger $r5;

        r0 := @this: com.software.shell.fab.ActionButton;

        $r1 := @parameter0: android.content.res.TypedArray;

        $i0 = <com.software.shell.fab.R$styleable: int ActionButton_hide_animation>;

        $z0 = virtualinvoke $r1.<android.content.res.TypedArray: boolean hasValue(int)>($i0);

        if $z0 == 0 goto label1;

        $r2 = <com.software.shell.fab.ActionButton$Animations: com.software.shell.fab.ActionButton$Animations NONE>;

        $i1 = $r2.<com.software.shell.fab.ActionButton$Animations: int animResId>;

        $i0 = virtualinvoke $r1.<android.content.res.TypedArray: int getResourceId(int,int)>($i0, $i1);

        $r3 = virtualinvoke r0.<com.software.shell.fab.ActionButton: android.content.Context getContext()>();

        $r4 = staticinvoke <com.software.shell.fab.ActionButton$Animations: android.view.animation.Animation load(android.content.Context,int)>($r3, $i0);

        r0.<com.software.shell.fab.ActionButton: android.view.animation.Animation hideAnimation> = $r4;

        $r5 = <com.software.shell.fab.ActionButton: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r5.<org.slf4j.Logger: void trace(java.lang.String)>("Initialized Action Button hide animation");

     label1:
        return;
    }
    private void initImage(android.content.res.TypedArray)
    {
        com.software.shell.fab.ActionButton r0;
        android.content.res.TypedArray $r1;
        int $i0;
        boolean $z0;
        android.graphics.drawable.Drawable $r2;
        org.slf4j.Logger $r3;

        r0 := @this: com.software.shell.fab.ActionButton;

        $r1 := @parameter0: android.content.res.TypedArray;

        $i0 = <com.software.shell.fab.R$styleable: int ActionButton_image>;

        $z0 = virtualinvoke $r1.<android.content.res.TypedArray: boolean hasValue(int)>($i0);

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke $r1.<android.content.res.TypedArray: android.graphics.drawable.Drawable getDrawable(int)>($i0);

        r0.<com.software.shell.fab.ActionButton: android.graphics.drawable.Drawable image> = $r2;

        $r3 = <com.software.shell.fab.ActionButton: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r3.<org.slf4j.Logger: void trace(java.lang.String)>("Initialized Action Button image");

     label1:
        return;
    }
    private void initImageSize(android.content.res.TypedArray)
    {
        com.software.shell.fab.ActionButton r0;
        android.content.res.TypedArray $r1;
        int $i0;
        boolean $z0;
        float $f0;
        org.slf4j.Logger $r2;
        java.lang.Float $r3;

        r0 := @this: com.software.shell.fab.ActionButton;

        $r1 := @parameter0: android.content.res.TypedArray;

        $i0 = <com.software.shell.fab.R$styleable: int ActionButton_image_size>;

        $z0 = virtualinvoke $r1.<android.content.res.TypedArray: boolean hasValue(int)>($i0);

        if $z0 == 0 goto label1;

        $f0 = r0.<com.software.shell.fab.ActionButton: float imageSize>;

        $f0 = virtualinvoke $r1.<android.content.res.TypedArray: float getDimension(int,float)>($i0, $f0);

        r0.<com.software.shell.fab.ActionButton: float imageSize> = $f0;

        $r2 = <com.software.shell.fab.ActionButton: org.slf4j.Logger LOGGER>;

        $f0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float getImageSize()>();

        $r3 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        interfaceinvoke $r2.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Initialized Action Button image size: {}", $r3);

     label1:
        return;
    }
    private void initLayerType()
    {
        com.software.shell.fab.ActionButton r0;
        android.graphics.Paint $r1;
        int $i0;
        org.slf4j.Logger $r2;

        r0 := @this: com.software.shell.fab.ActionButton;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 11 goto label1;

        $r1 = virtualinvoke r0.<com.software.shell.fab.ActionButton: android.graphics.Paint getPaint()>();

        virtualinvoke r0.<com.software.shell.fab.ActionButton: void setLayerType(int,android.graphics.Paint)>(1, $r1);

        $r2 = <com.software.shell.fab.ActionButton: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r2.<org.slf4j.Logger: void trace(java.lang.String)>("Initialized the layer type");

     label1:
        return;
    }
    private void initRippleEffectEnabled(android.content.res.TypedArray)
    {
        com.software.shell.fab.ActionButton r0;
        android.content.res.TypedArray $r1;
        int $i0;
        boolean $z0;
        org.slf4j.Logger $r2;
        java.lang.Boolean $r3;

        r0 := @this: com.software.shell.fab.ActionButton;

        $r1 := @parameter0: android.content.res.TypedArray;

        $i0 = <com.software.shell.fab.R$styleable: int ActionButton_rippleEffect_enabled>;

        $z0 = virtualinvoke $r1.<android.content.res.TypedArray: boolean hasValue(int)>($i0);

        if $z0 == 0 goto label1;

        $z0 = r0.<com.software.shell.fab.ActionButton: boolean rippleEffectEnabled>;

        $z0 = virtualinvoke $r1.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>($i0, $z0);

        r0.<com.software.shell.fab.ActionButton: boolean rippleEffectEnabled> = $z0;

        $r2 = <com.software.shell.fab.ActionButton: org.slf4j.Logger LOGGER>;

        $z0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: boolean isRippleEffectEnabled()>();

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        interfaceinvoke $r2.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Initialized Action Button Ripple Effect enabled: {}", $r3);

     label1:
        return;
    }
    private void initShadowColor(android.content.res.TypedArray)
    {
        com.software.shell.fab.ActionButton r0;
        android.content.res.TypedArray $r1;
        int $i0, $i1;
        boolean $z0;
        org.slf4j.Logger $r2;
        java.lang.Integer $r3;

        r0 := @this: com.software.shell.fab.ActionButton;

        $r1 := @parameter0: android.content.res.TypedArray;

        $i0 = <com.software.shell.fab.R$styleable: int ActionButton_shadow_color>;

        $z0 = virtualinvoke $r1.<android.content.res.TypedArray: boolean hasValue(int)>($i0);

        if $z0 == 0 goto label1;

        $i1 = r0.<com.software.shell.fab.ActionButton: int shadowColor>;

        $i0 = virtualinvoke $r1.<android.content.res.TypedArray: int getColor(int,int)>($i0, $i1);

        r0.<com.software.shell.fab.ActionButton: int shadowColor> = $i0;

        $r2 = <com.software.shell.fab.ActionButton: org.slf4j.Logger LOGGER>;

        $i0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: int getShadowColor()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r2.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Initialized Action Button shadow color: {}", $r3);

     label1:
        return;
    }
    private void initShadowRadius(android.content.res.TypedArray)
    {
        com.software.shell.fab.ActionButton r0;
        android.content.res.TypedArray $r1;
        int $i0;
        boolean $z0;
        float $f0;
        org.slf4j.Logger $r2;
        java.lang.Float $r3;

        r0 := @this: com.software.shell.fab.ActionButton;

        $r1 := @parameter0: android.content.res.TypedArray;

        $i0 = <com.software.shell.fab.R$styleable: int ActionButton_shadow_radius>;

        $z0 = virtualinvoke $r1.<android.content.res.TypedArray: boolean hasValue(int)>($i0);

        if $z0 == 0 goto label1;

        $f0 = r0.<com.software.shell.fab.ActionButton: float shadowRadius>;

        $f0 = virtualinvoke $r1.<android.content.res.TypedArray: float getDimension(int,float)>($i0, $f0);

        r0.<com.software.shell.fab.ActionButton: float shadowRadius> = $f0;

        $r2 = <com.software.shell.fab.ActionButton: org.slf4j.Logger LOGGER>;

        $f0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float getShadowRadius()>();

        $r3 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        interfaceinvoke $r2.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Initialized Action Button shadow radius: {}", $r3);

     label1:
        return;
    }
    private void initShadowResponsiveEffectEnabled(android.content.res.TypedArray)
    {
        com.software.shell.fab.ActionButton r0;
        android.content.res.TypedArray $r1;
        int $i0;
        boolean $z0;
        org.slf4j.Logger $r2;
        java.lang.Boolean $r3;

        r0 := @this: com.software.shell.fab.ActionButton;

        $r1 := @parameter0: android.content.res.TypedArray;

        $i0 = <com.software.shell.fab.R$styleable: int ActionButton_shadowResponsiveEffect_enabled>;

        $z0 = virtualinvoke $r1.<android.content.res.TypedArray: boolean hasValue(int)>($i0);

        if $z0 == 0 goto label1;

        $z0 = r0.<com.software.shell.fab.ActionButton: boolean shadowResponsiveEffectEnabled>;

        $z0 = virtualinvoke $r1.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>($i0, $z0);

        r0.<com.software.shell.fab.ActionButton: boolean shadowResponsiveEffectEnabled> = $z0;

        $r2 = <com.software.shell.fab.ActionButton: org.slf4j.Logger LOGGER>;

        $z0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: boolean isShadowResponsiveEffectEnabled()>();

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        interfaceinvoke $r2.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Initialized Action Button Shadow Responsive Effect enabled: {}", $r3);

     label1:
        return;
    }
    private void initShadowXOffset(android.content.res.TypedArray)
    {
        com.software.shell.fab.ActionButton r0;
        android.content.res.TypedArray $r1;
        int $i0;
        boolean $z0;
        float $f0;
        org.slf4j.Logger $r2;
        java.lang.Float $r3;

        r0 := @this: com.software.shell.fab.ActionButton;

        $r1 := @parameter0: android.content.res.TypedArray;

        $i0 = <com.software.shell.fab.R$styleable: int ActionButton_shadow_xOffset>;

        $z0 = virtualinvoke $r1.<android.content.res.TypedArray: boolean hasValue(int)>($i0);

        if $z0 == 0 goto label1;

        $f0 = r0.<com.software.shell.fab.ActionButton: float shadowXOffset>;

        $f0 = virtualinvoke $r1.<android.content.res.TypedArray: float getDimension(int,float)>($i0, $f0);

        r0.<com.software.shell.fab.ActionButton: float shadowXOffset> = $f0;

        $r2 = <com.software.shell.fab.ActionButton: org.slf4j.Logger LOGGER>;

        $f0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float getShadowXOffset()>();

        $r3 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        interfaceinvoke $r2.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Initialized Action Button X-axis offset: {}", $r3);

     label1:
        return;
    }
    private void initShadowYOffset(android.content.res.TypedArray)
    {
        com.software.shell.fab.ActionButton r0;
        android.content.res.TypedArray $r1;
        int $i0;
        boolean $z0;
        float $f0;
        org.slf4j.Logger $r2;
        java.lang.Float $r3;

        r0 := @this: com.software.shell.fab.ActionButton;

        $r1 := @parameter0: android.content.res.TypedArray;

        $i0 = <com.software.shell.fab.R$styleable: int ActionButton_shadow_yOffset>;

        $z0 = virtualinvoke $r1.<android.content.res.TypedArray: boolean hasValue(int)>($i0);

        if $z0 == 0 goto label1;

        $f0 = r0.<com.software.shell.fab.ActionButton: float shadowYOffset>;

        $f0 = virtualinvoke $r1.<android.content.res.TypedArray: float getDimension(int,float)>($i0, $f0);

        r0.<com.software.shell.fab.ActionButton: float shadowYOffset> = $f0;

        $r2 = <com.software.shell.fab.ActionButton: org.slf4j.Logger LOGGER>;

        $f0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float getShadowYOffset()>();

        $r3 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        interfaceinvoke $r2.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Initialized Action Button shadow Y-axis offset: {}", $r3);

     label1:
        return;
    }
    private void initShowAnimation(android.content.res.TypedArray)
    {
        com.software.shell.fab.ActionButton r0;
        android.content.res.TypedArray $r1;
        int $i0, $i1;
        boolean $z0;
        com.software.shell.fab.ActionButton$Animations $r2;
        android.content.Context $r3;
        android.view.animation.Animation $r4;
        org.slf4j.Logger $r5;

        r0 := @this: com.software.shell.fab.ActionButton;

        $r1 := @parameter0: android.content.res.TypedArray;

        $i0 = <com.software.shell.fab.R$styleable: int ActionButton_show_animation>;

        $z0 = virtualinvoke $r1.<android.content.res.TypedArray: boolean hasValue(int)>($i0);

        if $z0 == 0 goto label1;

        $r2 = <com.software.shell.fab.ActionButton$Animations: com.software.shell.fab.ActionButton$Animations NONE>;

        $i1 = $r2.<com.software.shell.fab.ActionButton$Animations: int animResId>;

        $i0 = virtualinvoke $r1.<android.content.res.TypedArray: int getResourceId(int,int)>($i0, $i1);

        $r3 = virtualinvoke r0.<com.software.shell.fab.ActionButton: android.content.Context getContext()>();

        $r4 = staticinvoke <com.software.shell.fab.ActionButton$Animations: android.view.animation.Animation load(android.content.Context,int)>($r3, $i0);

        r0.<com.software.shell.fab.ActionButton: android.view.animation.Animation showAnimation> = $r4;

        $r5 = <com.software.shell.fab.ActionButton: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r5.<org.slf4j.Logger: void trace(java.lang.String)>("Initialized Action Button show animation");

     label1:
        return;
    }
    private void initSize(android.content.res.TypedArray)
    {
        com.software.shell.fab.ActionButton r0;
        android.content.res.TypedArray $r1;
        int $i0;
        boolean $z0;
        float $f0;
        org.slf4j.Logger $r2;
        java.lang.Float $r3;
        com.software.shell.fab.ActionButton$Type $r4;

        r0 := @this: com.software.shell.fab.ActionButton;

        $r1 := @parameter0: android.content.res.TypedArray;

        $i0 = <com.software.shell.fab.R$styleable: int ActionButton_size>;

        $z0 = virtualinvoke $r1.<android.content.res.TypedArray: boolean hasValue(int)>($i0);

        if $z0 == 0 goto label2;

        $f0 = r0.<com.software.shell.fab.ActionButton: float size>;

        $f0 = virtualinvoke $r1.<android.content.res.TypedArray: float getDimension(int,float)>($i0, $f0);

        r0.<com.software.shell.fab.ActionButton: float size> = $f0;

     label1:
        $r2 = <com.software.shell.fab.ActionButton: org.slf4j.Logger LOGGER>;

        $f0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float getSize()>();

        $r3 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        interfaceinvoke $r2.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Initialized Action Button size: {}", $r3);

        return;

     label2:
        $r4 = r0.<com.software.shell.fab.ActionButton: com.software.shell.fab.ActionButton$Type type>;

        $f0 = virtualinvoke $r4.<com.software.shell.fab.ActionButton$Type: float getSize()>();

        $f0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float dpToPx(float)>($f0);

        r0.<com.software.shell.fab.ActionButton: float size> = $f0;

        goto label1;
    }
    private void initStrokeColor(android.content.res.TypedArray)
    {
        com.software.shell.fab.ActionButton r0;
        android.content.res.TypedArray $r1;
        int $i0, $i1;
        boolean $z0;
        org.slf4j.Logger $r2;
        java.lang.Integer $r3;

        r0 := @this: com.software.shell.fab.ActionButton;

        $r1 := @parameter0: android.content.res.TypedArray;

        $i0 = <com.software.shell.fab.R$styleable: int ActionButton_stroke_color>;

        $z0 = virtualinvoke $r1.<android.content.res.TypedArray: boolean hasValue(int)>($i0);

        if $z0 == 0 goto label1;

        $i1 = r0.<com.software.shell.fab.ActionButton: int strokeColor>;

        $i0 = virtualinvoke $r1.<android.content.res.TypedArray: int getColor(int,int)>($i0, $i1);

        r0.<com.software.shell.fab.ActionButton: int strokeColor> = $i0;

        $r2 = <com.software.shell.fab.ActionButton: org.slf4j.Logger LOGGER>;

        $i0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: int getStrokeColor()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r2.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Initialized Action Button stroke color: {}", $r3);

     label1:
        return;
    }
    private void initStrokeWidth(android.content.res.TypedArray)
    {
        com.software.shell.fab.ActionButton r0;
        android.content.res.TypedArray $r1;
        int $i0;
        boolean $z0;
        float $f0;
        org.slf4j.Logger $r2;
        java.lang.Float $r3;

        r0 := @this: com.software.shell.fab.ActionButton;

        $r1 := @parameter0: android.content.res.TypedArray;

        $i0 = <com.software.shell.fab.R$styleable: int ActionButton_stroke_width>;

        $z0 = virtualinvoke $r1.<android.content.res.TypedArray: boolean hasValue(int)>($i0);

        if $z0 == 0 goto label1;

        $f0 = r0.<com.software.shell.fab.ActionButton: float strokeWidth>;

        $f0 = virtualinvoke $r1.<android.content.res.TypedArray: float getDimension(int,float)>($i0, $f0);

        r0.<com.software.shell.fab.ActionButton: float strokeWidth> = $f0;

        $r2 = <com.software.shell.fab.ActionButton: org.slf4j.Logger LOGGER>;

        $f0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float getStrokeWidth()>();

        $r3 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        interfaceinvoke $r2.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Initialized Action Button stroke width: {}", $r3);

     label1:
        return;
    }
    private void initType(android.content.res.TypedArray)
    {
        com.software.shell.fab.ActionButton r0;
        android.content.res.TypedArray $r1;
        int $i0, $i1;
        boolean $z0;
        com.software.shell.fab.ActionButton$Type $r2;
        org.slf4j.Logger $r3;

        r0 := @this: com.software.shell.fab.ActionButton;

        $r1 := @parameter0: android.content.res.TypedArray;

        $i0 = <com.software.shell.fab.R$styleable: int ActionButton_type>;

        $z0 = virtualinvoke $r1.<android.content.res.TypedArray: boolean hasValue(int)>($i0);

        if $z0 == 0 goto label1;

        $r2 = r0.<com.software.shell.fab.ActionButton: com.software.shell.fab.ActionButton$Type type>;

        $i1 = virtualinvoke $r2.<com.software.shell.fab.ActionButton$Type: int getId()>();

        $i0 = virtualinvoke $r1.<android.content.res.TypedArray: int getInteger(int,int)>($i0, $i1);

        $r2 = staticinvoke <com.software.shell.fab.ActionButton$Type: com.software.shell.fab.ActionButton$Type forId(int)>($i0);

        r0.<com.software.shell.fab.ActionButton: com.software.shell.fab.ActionButton$Type type> = $r2;

        $r3 = <com.software.shell.fab.ActionButton: org.slf4j.Logger LOGGER>;

        $r2 = virtualinvoke r0.<com.software.shell.fab.ActionButton: com.software.shell.fab.ActionButton$Type getType()>();

        interfaceinvoke $r3.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Initialized Action Button type: {}", $r2);

     label1:
        return;
    }
    protected float calculateCenterX()
    {
        com.software.shell.fab.ActionButton r0;
        org.slf4j.Logger $r1;
        int $i0;
        float $f0;
        java.lang.Float $r2;

        r0 := @this: com.software.shell.fab.ActionButton;

        $i0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: int getMeasuredWidth()>();

        $i0 = $i0 / 2;

        $f0 = (float) $i0;

        $r1 = <com.software.shell.fab.ActionButton: org.slf4j.Logger LOGGER>;

        $r2 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        interfaceinvoke $r1.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Calculated Action Button center X: {}", $r2);

        return $f0;
    }
    protected float calculateCenterY()
    {
        com.software.shell.fab.ActionButton r0;
        org.slf4j.Logger $r1;
        int $i0;
        float $f0;
        java.lang.Float $r2;

        r0 := @this: com.software.shell.fab.ActionButton;

        $i0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: int getMeasuredHeight()>();

        $i0 = $i0 / 2;

        $f0 = (float) $i0;

        $r1 = <com.software.shell.fab.ActionButton: org.slf4j.Logger LOGGER>;

        $r2 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        interfaceinvoke $r1.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Calculated Action Button center Y: {}", $r2);

        return $f0;
    }
    protected final float calculateCircleRadius()
    {
        com.software.shell.fab.ActionButton r0;
        float $f0;
        org.slf4j.Logger $r1;
        java.lang.Float $r2;

        r0 := @this: com.software.shell.fab.ActionButton;

        $f0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float getSize()>();

        $f0 = $f0 / 2.0F;

        $r1 = <com.software.shell.fab.ActionButton: org.slf4j.Logger LOGGER>;

        $r2 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        interfaceinvoke $r1.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Calculated Action Button circle radius: {}", $r2);

        return $f0;
    }
    public void dismiss()
    {
        com.software.shell.fab.ActionButton r0;
        boolean $z0;
        android.view.ViewParent $r1;
        android.view.ViewGroup $r2;
        org.slf4j.Logger $r3;

        r0 := @this: com.software.shell.fab.ActionButton;

        $z0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: boolean isDismissed()>();

        if $z0 != 0 goto label2;

        $z0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: boolean isHidden()>();

        if $z0 != 0 goto label1;

        virtualinvoke r0.<com.software.shell.fab.ActionButton: void playHideAnimation()>();

     label1:
        virtualinvoke r0.<com.software.shell.fab.ActionButton: void setVisibility(int)>(8);

        $r1 = virtualinvoke r0.<com.software.shell.fab.ActionButton: android.view.ViewParent getParent()>();

        $r2 = (android.view.ViewGroup) $r1;

        virtualinvoke $r2.<android.view.ViewGroup: void removeView(android.view.View)>(r0);

        $r3 = <com.software.shell.fab.ActionButton: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r3.<org.slf4j.Logger: void trace(java.lang.String)>("Dismissed the Action Button");

     label2:
        return;
    }
    protected float dpToPx(float)
    {
        com.software.shell.fab.ActionButton r0;
        float $f0;
        android.content.Context $r1;

        r0 := @this: com.software.shell.fab.ActionButton;

        $f0 := @parameter0: float;

        $r1 = virtualinvoke r0.<com.software.shell.fab.ActionButton: android.content.Context getContext()>();

        $f0 = staticinvoke <com.software.shell.uitools.convert.DensityConverter: float dpToPx(android.content.Context,float)>($r1, $f0);

        return $f0;
    }
    protected void drawCircle(android.graphics.Canvas)
    {
        com.software.shell.fab.ActionButton r0;
        android.graphics.Canvas $r1;
        boolean $z0;
        com.software.shell.fab.EffectDrawer $r2;
        android.graphics.Paint $r3;
        android.graphics.Paint$Style $r4;
        com.software.shell.fab.RippleEffectDrawer $r5;
        com.software.shell.fab.ActionButton$State $r6, $r7;
        int $i0;
        float $f0, $f1, $f2;
        org.slf4j.Logger $r8;

        r0 := @this: com.software.shell.fab.ActionButton;

        $r1 := @parameter0: android.graphics.Canvas;

        virtualinvoke r0.<com.software.shell.fab.ActionButton: void resetPaint()>();

        $z0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: boolean hasShadow()>();

        if $z0 == 0 goto label1;

        $z0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: boolean isShadowResponsiveEffectEnabled()>();

        if $z0 == 0 goto label5;

        $r2 = r0.<com.software.shell.fab.ActionButton: com.software.shell.fab.EffectDrawer shadowResponsiveDrawer>;

        virtualinvoke $r2.<com.software.shell.fab.EffectDrawer: void draw(android.graphics.Canvas)>($r1);

     label1:
        $r3 = virtualinvoke r0.<com.software.shell.fab.ActionButton: android.graphics.Paint getPaint()>();

        $r4 = <android.graphics.Paint$Style: android.graphics.Paint$Style FILL>;

        virtualinvoke $r3.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r4);

        $z0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: boolean isRippleEffectEnabled()>();

        if $z0 == 0 goto label6;

        $r2 = r0.<com.software.shell.fab.ActionButton: com.software.shell.fab.EffectDrawer rippleEffectDrawer>;

        $r5 = (com.software.shell.fab.RippleEffectDrawer) $r2;

        $z0 = virtualinvoke $r5.<com.software.shell.fab.RippleEffectDrawer: boolean isDrawingInProgress()>();

        if $z0 == 0 goto label6;

        $z0 = 1;

     label2:
        $r3 = virtualinvoke r0.<com.software.shell.fab.ActionButton: android.graphics.Paint getPaint()>();

        $r6 = virtualinvoke r0.<com.software.shell.fab.ActionButton: com.software.shell.fab.ActionButton$State getState()>();

        $r7 = <com.software.shell.fab.ActionButton$State: com.software.shell.fab.ActionButton$State PRESSED>;

        if $r6 == $r7 goto label3;

        if $z0 == 0 goto label7;

     label3:
        $i0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: int getButtonColorPressed()>();

     label4:
        virtualinvoke $r3.<android.graphics.Paint: void setColor(int)>($i0);

        $f0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float calculateCenterX()>();

        $f1 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float calculateCenterY()>();

        $f2 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float calculateCircleRadius()>();

        $r3 = virtualinvoke r0.<com.software.shell.fab.ActionButton: android.graphics.Paint getPaint()>();

        virtualinvoke $r1.<android.graphics.Canvas: void drawCircle(float,float,float,android.graphics.Paint)>($f0, $f1, $f2, $r3);

        $r8 = <com.software.shell.fab.ActionButton: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r8.<org.slf4j.Logger: void trace(java.lang.String)>("Drawn the Action Button circle");

        return;

     label5:
        virtualinvoke r0.<com.software.shell.fab.ActionButton: void drawShadow()>();

        goto label1;

     label6:
        $z0 = 0;

        goto label2;

     label7:
        $i0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: int getButtonColor()>();

        goto label4;
    }
    protected void drawElevation()
    {
        com.software.shell.fab.ActionButton r0;
        int $i0, $i1, $i2, $i3;
        float $f0, $f1;
        com.software.shell.fab.ActionButton$1 $r1;
        org.slf4j.Logger $r2;

        r0 := @this: com.software.shell.fab.ActionButton;

        $f0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float getSize()>();

        $f0 = $f0 / 2.0F;

        $f1 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float calculateCenterX()>();

        $f1 = $f1 - $f0;

        $i0 = (int) $f1;

        $f1 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float calculateCenterY()>();

        $f1 = $f1 - $f0;

        $i1 = (int) $f1;

        $f1 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float calculateCenterX()>();

        $f1 = $f1 + $f0;

        $i2 = (int) $f1;

        $f1 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float calculateCenterY()>();

        $f0 = $f0 + $f1;

        $i3 = (int) $f0;

        $r1 = new com.software.shell.fab.ActionButton$1;

        specialinvoke $r1.<com.software.shell.fab.ActionButton$1: void <init>(com.software.shell.fab.ActionButton,int,int,int,int)>(r0, $i0, $i1, $i2, $i3);

        virtualinvoke r0.<com.software.shell.fab.ActionButton: void setOutlineProvider(android.view.ViewOutlineProvider)>($r1);

        $r2 = <com.software.shell.fab.ActionButton: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r2.<org.slf4j.Logger: void trace(java.lang.String)>("Drawn the Action Button elevation");

        return;
    }
    protected void drawImage(android.graphics.Canvas)
    {
        com.software.shell.fab.ActionButton r0;
        android.graphics.Canvas $r1;
        float $f0, $f1;
        int $i0, $i1, $i2, $i3;
        android.graphics.drawable.Drawable $r2;
        org.slf4j.Logger $r3;
        java.lang.Object[] $r4;
        java.lang.Integer $r5;

        r0 := @this: com.software.shell.fab.ActionButton;

        $r1 := @parameter0: android.graphics.Canvas;

        $f0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float calculateCenterX()>();

        $f1 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float getImageSize()>();

        $f1 = $f1 / 2.0F;

        $f0 = $f0 - $f1;

        $i0 = (int) $f0;

        $f0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float calculateCenterY()>();

        $f1 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float getImageSize()>();

        $f1 = $f1 / 2.0F;

        $f0 = $f0 - $f1;

        $i1 = (int) $f0;

        $f0 = (float) $i0;

        $f1 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float getImageSize()>();

        $f0 = $f0 + $f1;

        $i2 = (int) $f0;

        $f0 = (float) $i1;

        $f1 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float getImageSize()>();

        $f0 = $f0 + $f1;

        $i3 = (int) $f0;

        $r2 = virtualinvoke r0.<com.software.shell.fab.ActionButton: android.graphics.drawable.Drawable getImage()>();

        virtualinvoke $r2.<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>($i0, $i1, $i2, $i3);

        $r2 = virtualinvoke r0.<com.software.shell.fab.ActionButton: android.graphics.drawable.Drawable getImage()>();

        virtualinvoke $r2.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>($r1);

        $r3 = <com.software.shell.fab.ActionButton: org.slf4j.Logger LOGGER>;

        $r4 = newarray (java.lang.Object)[4];

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r4[0] = $r5;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r4[1] = $r5;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r4[2] = $r5;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r4[3] = $r5;

        interfaceinvoke $r3.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("Drawn the Action Button image on canvas with coordinates: X start point = {}, Y start point = {}, X end point = {}, Y end point = {}", $r4);

        return;
    }
    protected void drawRipple(android.graphics.Canvas)
    {
        com.software.shell.fab.ActionButton r0;
        android.graphics.Canvas $r1;
        com.software.shell.fab.EffectDrawer $r2;
        org.slf4j.Logger $r3;

        r0 := @this: com.software.shell.fab.ActionButton;

        $r1 := @parameter0: android.graphics.Canvas;

        $r2 = r0.<com.software.shell.fab.ActionButton: com.software.shell.fab.EffectDrawer rippleEffectDrawer>;

        virtualinvoke $r2.<com.software.shell.fab.EffectDrawer: void draw(android.graphics.Canvas)>($r1);

        $r3 = <com.software.shell.fab.ActionButton: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r3.<org.slf4j.Logger: void trace(java.lang.String)>("Drawn the Action Button Ripple Effect");

        return;
    }
    protected void drawShadow()
    {
        com.software.shell.fab.ActionButton r0;
        android.graphics.Paint $r1;
        float $f0, $f1, $f2;
        int $i0;
        org.slf4j.Logger $r2;

        r0 := @this: com.software.shell.fab.ActionButton;

        $r1 = virtualinvoke r0.<com.software.shell.fab.ActionButton: android.graphics.Paint getPaint()>();

        $f0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float getShadowRadius()>();

        $f1 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float getShadowXOffset()>();

        $f2 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float getShadowYOffset()>();

        $i0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: int getShadowColor()>();

        virtualinvoke $r1.<android.graphics.Paint: void setShadowLayer(float,float,float,int)>($f0, $f1, $f2, $i0);

        $r2 = <com.software.shell.fab.ActionButton: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r2.<org.slf4j.Logger: void trace(java.lang.String)>("Drawn the Action Button shadow");

        return;
    }
    protected void drawStroke(android.graphics.Canvas)
    {
        com.software.shell.fab.ActionButton r0;
        android.graphics.Canvas $r1;
        android.graphics.Paint $r2;
        android.graphics.Paint$Style $r3;
        float $f0, $f1, $f2;
        int $i0;
        org.slf4j.Logger $r4;

        r0 := @this: com.software.shell.fab.ActionButton;

        $r1 := @parameter0: android.graphics.Canvas;

        virtualinvoke r0.<com.software.shell.fab.ActionButton: void resetPaint()>();

        $r2 = virtualinvoke r0.<com.software.shell.fab.ActionButton: android.graphics.Paint getPaint()>();

        $r3 = <android.graphics.Paint$Style: android.graphics.Paint$Style STROKE>;

        virtualinvoke $r2.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r3);

        $r2 = virtualinvoke r0.<com.software.shell.fab.ActionButton: android.graphics.Paint getPaint()>();

        $f0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float getStrokeWidth()>();

        virtualinvoke $r2.<android.graphics.Paint: void setStrokeWidth(float)>($f0);

        $r2 = virtualinvoke r0.<com.software.shell.fab.ActionButton: android.graphics.Paint getPaint()>();

        $i0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: int getStrokeColor()>();

        virtualinvoke $r2.<android.graphics.Paint: void setColor(int)>($i0);

        $f0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float calculateCenterX()>();

        $f1 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float calculateCenterY()>();

        $f2 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float calculateCircleRadius()>();

        $r2 = virtualinvoke r0.<com.software.shell.fab.ActionButton: android.graphics.Paint getPaint()>();

        virtualinvoke $r1.<android.graphics.Canvas: void drawCircle(float,float,float,android.graphics.Paint)>($f0, $f1, $f2, $r2);

        $r4 = <com.software.shell.fab.ActionButton: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r4.<org.slf4j.Logger: void trace(java.lang.String)>("Drawn the Action Button stroke");

        return;
    }
    public int getButtonColor()
    {
        com.software.shell.fab.ActionButton r0;
        int i0;

        r0 := @this: com.software.shell.fab.ActionButton;

        i0 = r0.<com.software.shell.fab.ActionButton: int buttonColor>;

        return i0;
    }
    public int getButtonColorPressed()
    {
        com.software.shell.fab.ActionButton r0;
        int i0;

        r0 := @this: com.software.shell.fab.ActionButton;

        i0 = r0.<com.software.shell.fab.ActionButton: int buttonColorPressed>;

        return i0;
    }
    public int getButtonColorRipple()
    {
        com.software.shell.fab.ActionButton r0;
        int i0;

        r0 := @this: com.software.shell.fab.ActionButton;

        i0 = r0.<com.software.shell.fab.ActionButton: int buttonColorRipple>;

        return i0;
    }
    public int getButtonSize()
    {
        com.software.shell.fab.ActionButton r0;
        float $f0;
        int $i0;

        r0 := @this: com.software.shell.fab.ActionButton;

        $f0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float getSize()>();

        $i0 = (int) $f0;

        return $i0;
    }
    public android.view.animation.Animation getHideAnimation()
    {
        com.software.shell.fab.ActionButton r0;
        android.view.animation.Animation r1;

        r0 := @this: com.software.shell.fab.ActionButton;

        r1 = r0.<com.software.shell.fab.ActionButton: android.view.animation.Animation hideAnimation>;

        return r1;
    }
    public android.graphics.drawable.Drawable getImage()
    {
        com.software.shell.fab.ActionButton r0;
        android.graphics.drawable.Drawable r1;

        r0 := @this: com.software.shell.fab.ActionButton;

        r1 = r0.<com.software.shell.fab.ActionButton: android.graphics.drawable.Drawable image>;

        return r1;
    }
    public float getImageSize()
    {
        com.software.shell.fab.ActionButton r0;
        android.graphics.drawable.Drawable $r1;
        float f0;

        r0 := @this: com.software.shell.fab.ActionButton;

        $r1 = virtualinvoke r0.<com.software.shell.fab.ActionButton: android.graphics.drawable.Drawable getImage()>();

        if $r1 == null goto label1;

        f0 = r0.<com.software.shell.fab.ActionButton: float imageSize>;

        return f0;

     label1:
        return 0.0F;
    }
    protected com.software.shell.fab.ViewInvalidator getInvalidator()
    {
        com.software.shell.fab.ActionButton r0;
        com.software.shell.fab.ViewInvalidator r1;

        r0 := @this: com.software.shell.fab.ActionButton;

        r1 = r0.<com.software.shell.fab.ActionButton: com.software.shell.fab.ViewInvalidator invalidator>;

        return r1;
    }
    protected android.graphics.Paint getPaint()
    {
        com.software.shell.fab.ActionButton r0;
        android.graphics.Paint r1;

        r0 := @this: com.software.shell.fab.ActionButton;

        r1 = r0.<com.software.shell.fab.ActionButton: android.graphics.Paint paint>;

        return r1;
    }
    public int getShadowColor()
    {
        com.software.shell.fab.ActionButton r0;
        int i0;

        r0 := @this: com.software.shell.fab.ActionButton;

        i0 = r0.<com.software.shell.fab.ActionButton: int shadowColor>;

        return i0;
    }
    public float getShadowRadius()
    {
        com.software.shell.fab.ActionButton r0;
        float f0;

        r0 := @this: com.software.shell.fab.ActionButton;

        f0 = r0.<com.software.shell.fab.ActionButton: float shadowRadius>;

        return f0;
    }
    public float getShadowXOffset()
    {
        com.software.shell.fab.ActionButton r0;
        float f0;

        r0 := @this: com.software.shell.fab.ActionButton;

        f0 = r0.<com.software.shell.fab.ActionButton: float shadowXOffset>;

        return f0;
    }
    public float getShadowYOffset()
    {
        com.software.shell.fab.ActionButton r0;
        float f0;

        r0 := @this: com.software.shell.fab.ActionButton;

        f0 = r0.<com.software.shell.fab.ActionButton: float shadowYOffset>;

        return f0;
    }
    public android.view.animation.Animation getShowAnimation()
    {
        com.software.shell.fab.ActionButton r0;
        android.view.animation.Animation r1;

        r0 := @this: com.software.shell.fab.ActionButton;

        r1 = r0.<com.software.shell.fab.ActionButton: android.view.animation.Animation showAnimation>;

        return r1;
    }
    public float getSize()
    {
        com.software.shell.fab.ActionButton r0;
        float f0;

        r0 := @this: com.software.shell.fab.ActionButton;

        f0 = r0.<com.software.shell.fab.ActionButton: float size>;

        return f0;
    }
    public com.software.shell.fab.ActionButton$State getState()
    {
        com.software.shell.fab.ActionButton r0;
        com.software.shell.fab.ActionButton$State r1;

        r0 := @this: com.software.shell.fab.ActionButton;

        r1 = r0.<com.software.shell.fab.ActionButton: com.software.shell.fab.ActionButton$State state>;

        return r1;
    }
    public int getStrokeColor()
    {
        com.software.shell.fab.ActionButton r0;
        int i0;

        r0 := @this: com.software.shell.fab.ActionButton;

        i0 = r0.<com.software.shell.fab.ActionButton: int strokeColor>;

        return i0;
    }
    public float getStrokeWidth()
    {
        com.software.shell.fab.ActionButton r0;
        float f0;

        r0 := @this: com.software.shell.fab.ActionButton;

        f0 = r0.<com.software.shell.fab.ActionButton: float strokeWidth>;

        return f0;
    }
    public com.software.shell.fab.TouchPoint getTouchPoint()
    {
        com.software.shell.fab.ActionButton r0;
        com.software.shell.fab.TouchPoint r1;

        r0 := @this: com.software.shell.fab.ActionButton;

        r1 = r0.<com.software.shell.fab.ActionButton: com.software.shell.fab.TouchPoint touchPoint>;

        return r1;
    }
    public com.software.shell.fab.ActionButton$Type getType()
    {
        com.software.shell.fab.ActionButton r0;
        com.software.shell.fab.ActionButton$Type r1;

        r0 := @this: com.software.shell.fab.ActionButton;

        r1 = r0.<com.software.shell.fab.ActionButton: com.software.shell.fab.ActionButton$Type type>;

        return r1;
    }
    public boolean hasImage()
    {
        com.software.shell.fab.ActionButton r0;
        android.graphics.drawable.Drawable $r1;

        r0 := @this: com.software.shell.fab.ActionButton;

        $r1 = virtualinvoke r0.<com.software.shell.fab.ActionButton: android.graphics.drawable.Drawable getImage()>();

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean hasShadow()
    {
        com.software.shell.fab.ActionButton r0;
        boolean $z0;
        float $f0;
        byte $b0;

        r0 := @this: com.software.shell.fab.ActionButton;

        $z0 = specialinvoke r0.<com.software.shell.fab.ActionButton: boolean hasElevation()>();

        if $z0 != 0 goto label1;

        $f0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float getShadowRadius()>();

        $b0 = $f0 cmpl 0.0F;

        if $b0 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean hasStroke()
    {
        com.software.shell.fab.ActionButton r0;
        float $f0;
        byte $b0;

        r0 := @this: com.software.shell.fab.ActionButton;

        $f0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float getStrokeWidth()>();

        $b0 = $f0 cmpl 0.0F;

        if $b0 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public void hide()
    {
        com.software.shell.fab.ActionButton r0;
        boolean $z0;
        org.slf4j.Logger $r1;

        r0 := @this: com.software.shell.fab.ActionButton;

        $z0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: boolean isHidden()>();

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: boolean isDismissed()>();

        if $z0 != 0 goto label1;

        virtualinvoke r0.<com.software.shell.fab.ActionButton: void playHideAnimation()>();

        virtualinvoke r0.<com.software.shell.fab.ActionButton: void setVisibility(int)>(4);

        $r1 = <com.software.shell.fab.ActionButton: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r1.<org.slf4j.Logger: void trace(java.lang.String)>("Hidden the Action Button");

     label1:
        return;
    }
    public boolean isDismissed()
    {
        com.software.shell.fab.ActionButton r0;
        android.view.ViewParent $r1;

        r0 := @this: com.software.shell.fab.ActionButton;

        $r1 = virtualinvoke r0.<com.software.shell.fab.ActionButton: android.view.ViewParent getParent()>();

        if $r1 != null goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean isHidden()
    {
        com.software.shell.fab.ActionButton r0;
        int $i0;

        r0 := @this: com.software.shell.fab.ActionButton;

        $i0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: int getVisibility()>();

        if $i0 != 4 goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean isRippleEffectEnabled()
    {
        com.software.shell.fab.ActionButton r0;
        boolean z0;

        r0 := @this: com.software.shell.fab.ActionButton;

        z0 = r0.<com.software.shell.fab.ActionButton: boolean rippleEffectEnabled>;

        return z0;
    }
    public boolean isShadowResponsiveEffectEnabled()
    {
        com.software.shell.fab.ActionButton r0;
        boolean z0;

        r0 := @this: com.software.shell.fab.ActionButton;

        z0 = r0.<com.software.shell.fab.ActionButton: boolean shadowResponsiveEffectEnabled>;

        return z0;
    }
    public void move(com.software.shell.viewmover.configuration.MovingParams)
    {
        com.software.shell.fab.ActionButton r0;
        com.software.shell.viewmover.configuration.MovingParams $r1;
        org.slf4j.Logger $r2;
        float $f0;
        java.lang.Float $r3, $r4;
        com.software.shell.viewmover.movers.ViewMover $r5;

        r0 := @this: com.software.shell.fab.ActionButton;

        $r1 := @parameter0: com.software.shell.viewmover.configuration.MovingParams;

        $r2 = <com.software.shell.fab.ActionButton: org.slf4j.Logger LOGGER>;

        $f0 = virtualinvoke $r1.<com.software.shell.viewmover.configuration.MovingParams: float getXAxisDelta()>();

        $r3 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        $f0 = virtualinvoke $r1.<com.software.shell.viewmover.configuration.MovingParams: float getYAxisDelta()>();

        $r4 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        interfaceinvoke $r2.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("About to move the Action Button: X-axis delta = {}, Y-axis delta = {}", $r3, $r4);

        $r5 = r0.<com.software.shell.fab.ActionButton: com.software.shell.viewmover.movers.ViewMover mover>;

        virtualinvoke $r5.<com.software.shell.viewmover.movers.ViewMover: void move(com.software.shell.viewmover.configuration.MovingParams)>($r1);

        return;
    }
    public void moveDown(float)
    {
        com.software.shell.fab.ActionButton r0;
        float $f0;
        com.software.shell.viewmover.configuration.MovingParams $r1;
        android.content.Context $r2;

        r0 := @this: com.software.shell.fab.ActionButton;

        $f0 := @parameter0: float;

        $r1 = new com.software.shell.viewmover.configuration.MovingParams;

        $r2 = virtualinvoke r0.<com.software.shell.fab.ActionButton: android.content.Context getContext()>();

        specialinvoke $r1.<com.software.shell.viewmover.configuration.MovingParams: void <init>(android.content.Context,float,float)>($r2, 0.0F, $f0);

        virtualinvoke r0.<com.software.shell.fab.ActionButton: void move(com.software.shell.viewmover.configuration.MovingParams)>($r1);

        return;
    }
    public void moveLeft(float)
    {
        com.software.shell.fab.ActionButton r0;
        float $f0;
        com.software.shell.viewmover.configuration.MovingParams $r1;
        android.content.Context $r2;

        r0 := @this: com.software.shell.fab.ActionButton;

        $f0 := @parameter0: float;

        $r1 = new com.software.shell.viewmover.configuration.MovingParams;

        $r2 = virtualinvoke r0.<com.software.shell.fab.ActionButton: android.content.Context getContext()>();

        $f0 = neg $f0;

        specialinvoke $r1.<com.software.shell.viewmover.configuration.MovingParams: void <init>(android.content.Context,float,float)>($r2, $f0, 0.0F);

        virtualinvoke r0.<com.software.shell.fab.ActionButton: void move(com.software.shell.viewmover.configuration.MovingParams)>($r1);

        return;
    }
    public void moveRight(float)
    {
        com.software.shell.fab.ActionButton r0;
        float $f0;
        com.software.shell.viewmover.configuration.MovingParams $r1;
        android.content.Context $r2;

        r0 := @this: com.software.shell.fab.ActionButton;

        $f0 := @parameter0: float;

        $r1 = new com.software.shell.viewmover.configuration.MovingParams;

        $r2 = virtualinvoke r0.<com.software.shell.fab.ActionButton: android.content.Context getContext()>();

        specialinvoke $r1.<com.software.shell.viewmover.configuration.MovingParams: void <init>(android.content.Context,float,float)>($r2, $f0, 0.0F);

        virtualinvoke r0.<com.software.shell.fab.ActionButton: void move(com.software.shell.viewmover.configuration.MovingParams)>($r1);

        return;
    }
    public void moveUp(float)
    {
        com.software.shell.fab.ActionButton r0;
        float $f0;
        com.software.shell.viewmover.configuration.MovingParams $r1;
        android.content.Context $r2;

        r0 := @this: com.software.shell.fab.ActionButton;

        $f0 := @parameter0: float;

        $r1 = new com.software.shell.viewmover.configuration.MovingParams;

        $r2 = virtualinvoke r0.<com.software.shell.fab.ActionButton: android.content.Context getContext()>();

        $f0 = neg $f0;

        specialinvoke $r1.<com.software.shell.viewmover.configuration.MovingParams: void <init>(android.content.Context,float,float)>($r2, 0.0F, $f0);

        virtualinvoke r0.<com.software.shell.fab.ActionButton: void move(com.software.shell.viewmover.configuration.MovingParams)>($r1);

        return;
    }
    protected void onDraw(android.graphics.Canvas)
    {
        com.software.shell.fab.ActionButton r0;
        android.graphics.Canvas $r1;
        org.slf4j.Logger $r2;
        boolean $z0;
        com.software.shell.fab.ViewInvalidator $r3;

        r0 := @this: com.software.shell.fab.ActionButton;

        $r1 := @parameter0: android.graphics.Canvas;

        specialinvoke r0.<android.view.View: void onDraw(android.graphics.Canvas)>($r1);

        $r2 = <com.software.shell.fab.ActionButton: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r2.<org.slf4j.Logger: void trace(java.lang.String)>("Called Action Button onDraw");

        virtualinvoke r0.<com.software.shell.fab.ActionButton: void drawCircle(android.graphics.Canvas)>($r1);

        $z0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: boolean isRippleEffectEnabled()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.software.shell.fab.ActionButton: void drawRipple(android.graphics.Canvas)>($r1);

     label1:
        $z0 = specialinvoke r0.<com.software.shell.fab.ActionButton: boolean hasElevation()>();

        if $z0 == 0 goto label2;

        virtualinvoke r0.<com.software.shell.fab.ActionButton: void drawElevation()>();

     label2:
        $z0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: boolean hasStroke()>();

        if $z0 == 0 goto label3;

        virtualinvoke r0.<com.software.shell.fab.ActionButton: void drawStroke(android.graphics.Canvas)>($r1);

     label3:
        $z0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: boolean hasImage()>();

        if $z0 == 0 goto label4;

        virtualinvoke r0.<com.software.shell.fab.ActionButton: void drawImage(android.graphics.Canvas)>($r1);

     label4:
        $r3 = virtualinvoke r0.<com.software.shell.fab.ActionButton: com.software.shell.fab.ViewInvalidator getInvalidator()>();

        virtualinvoke $r3.<com.software.shell.fab.ViewInvalidator: void invalidate()>();

        return;
    }
    protected void onMeasure(int, int)
    {
        com.software.shell.fab.ActionButton r0;
        int $i0, $i1;
        org.slf4j.Logger $r1;
        java.lang.Integer $r2, $r3;

        r0 := @this: com.software.shell.fab.ActionButton;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        specialinvoke r0.<android.view.View: void onMeasure(int,int)>($i0, $i1);

        $r1 = <com.software.shell.fab.ActionButton: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r1.<org.slf4j.Logger: void trace(java.lang.String)>("Called Action Button onMeasure");

        $i0 = specialinvoke r0.<com.software.shell.fab.ActionButton: int calculateMeasuredWidth()>();

        $i1 = specialinvoke r0.<com.software.shell.fab.ActionButton: int calculateMeasuredHeight()>();

        virtualinvoke r0.<com.software.shell.fab.ActionButton: void setMeasuredDimension(int,int)>($i0, $i1);

        $r1 = <com.software.shell.fab.ActionButton: org.slf4j.Logger LOGGER>;

        $i0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: int getHeight()>();

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $i0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: int getWidth()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r1.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Measured the Action Button size: height = {}, width = {}", $r2, $r3);

        return;
    }
    public boolean onTouchEvent(android.view.MotionEvent)
    {
        com.software.shell.fab.ActionButton r0;
        android.view.MotionEvent $r1;
        com.software.shell.fab.TouchPoint $r2;
        float $f0, $f1, $f2;
        boolean $z0;
        int $i0;
        org.slf4j.Logger $r3;
        com.software.shell.fab.ActionButton$State $r4, $r5;

        r0 := @this: com.software.shell.fab.ActionButton;

        $r1 := @parameter0: android.view.MotionEvent;

        specialinvoke r0.<android.view.View: boolean onTouchEvent(android.view.MotionEvent)>($r1);

        $r2 = new com.software.shell.fab.TouchPoint;

        $f0 = virtualinvoke $r1.<android.view.MotionEvent: float getX()>();

        $f1 = virtualinvoke $r1.<android.view.MotionEvent: float getY()>();

        specialinvoke $r2.<com.software.shell.fab.TouchPoint: void <init>(float,float)>($f0, $f1);

        $f0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float calculateCenterX()>();

        $f1 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float calculateCenterY()>();

        $f2 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float calculateCircleRadius()>();

        $z0 = virtualinvoke $r2.<com.software.shell.fab.TouchPoint: boolean isInsideCircle(float,float,float)>($f0, $f1, $f2);

        $i0 = virtualinvoke $r1.<android.view.MotionEvent: int getAction()>();

        lookupswitch($i0)
        {
            case 0: goto label3;
            case 1: goto label4;
            case 2: goto label5;
            default: goto label1;
        };

     label1:
        $r3 = <com.software.shell.fab.ActionButton: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r3.<org.slf4j.Logger: void warn(java.lang.String)>("Detected unrecognized motion event");

     label2:
        return 0;

     label3:
        if $z0 == 0 goto label2;

        $r4 = <com.software.shell.fab.ActionButton$State: com.software.shell.fab.ActionButton$State PRESSED>;

        virtualinvoke r0.<com.software.shell.fab.ActionButton: void setState(com.software.shell.fab.ActionButton$State)>($r4);

        virtualinvoke r0.<com.software.shell.fab.ActionButton: void setTouchPoint(com.software.shell.fab.TouchPoint)>($r2);

        $r3 = <com.software.shell.fab.ActionButton: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r3.<org.slf4j.Logger: void trace(java.lang.String)>("Detected the ACTION_DOWN motion event");

        return 1;

     label4:
        if $z0 == 0 goto label2;

        $r4 = <com.software.shell.fab.ActionButton$State: com.software.shell.fab.ActionButton$State NORMAL>;

        virtualinvoke r0.<com.software.shell.fab.ActionButton: void setState(com.software.shell.fab.ActionButton$State)>($r4);

        $r2 = virtualinvoke r0.<com.software.shell.fab.ActionButton: com.software.shell.fab.TouchPoint getTouchPoint()>();

        virtualinvoke $r2.<com.software.shell.fab.TouchPoint: void reset()>();

        $r3 = <com.software.shell.fab.ActionButton: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r3.<org.slf4j.Logger: void trace(java.lang.String)>("Detected the ACTION_UP motion event");

        return 1;

     label5:
        if $z0 != 0 goto label2;

        $r4 = virtualinvoke r0.<com.software.shell.fab.ActionButton: com.software.shell.fab.ActionButton$State getState()>();

        $r5 = <com.software.shell.fab.ActionButton$State: com.software.shell.fab.ActionButton$State PRESSED>;

        if $r4 != $r5 goto label2;

        $r4 = <com.software.shell.fab.ActionButton$State: com.software.shell.fab.ActionButton$State NORMAL>;

        virtualinvoke r0.<com.software.shell.fab.ActionButton: void setState(com.software.shell.fab.ActionButton$State)>($r4);

        $r2 = virtualinvoke r0.<com.software.shell.fab.ActionButton: com.software.shell.fab.TouchPoint getTouchPoint()>();

        virtualinvoke $r2.<com.software.shell.fab.TouchPoint: void reset()>();

        $r3 = <com.software.shell.fab.ActionButton: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r3.<org.slf4j.Logger: void trace(java.lang.String)>("Detected the ACTION_MOVE motion event");

        return 1;
    }
    public void playHideAnimation()
    {
        com.software.shell.fab.ActionButton r0;
        android.view.animation.Animation $r1;

        r0 := @this: com.software.shell.fab.ActionButton;

        $r1 = virtualinvoke r0.<com.software.shell.fab.ActionButton: android.view.animation.Animation getHideAnimation()>();

        virtualinvoke r0.<com.software.shell.fab.ActionButton: void startAnimation(android.view.animation.Animation)>($r1);

        return;
    }
    public void playShowAnimation()
    {
        com.software.shell.fab.ActionButton r0;
        android.view.animation.Animation $r1;

        r0 := @this: com.software.shell.fab.ActionButton;

        $r1 = virtualinvoke r0.<com.software.shell.fab.ActionButton: android.view.animation.Animation getShowAnimation()>();

        virtualinvoke r0.<com.software.shell.fab.ActionButton: void startAnimation(android.view.animation.Animation)>($r1);

        return;
    }
    public void removeHideAnimation()
    {
        com.software.shell.fab.ActionButton r0;
        com.software.shell.fab.ActionButton$Animations $r1;
        org.slf4j.Logger $r2;

        r0 := @this: com.software.shell.fab.ActionButton;

        $r1 = <com.software.shell.fab.ActionButton$Animations: com.software.shell.fab.ActionButton$Animations NONE>;

        virtualinvoke r0.<com.software.shell.fab.ActionButton: void setHideAnimation(com.software.shell.fab.ActionButton$Animations)>($r1);

        $r2 = <com.software.shell.fab.ActionButton: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r2.<org.slf4j.Logger: void trace(java.lang.String)>("Removed the Action Button hide animation");

        return;
    }
    public void removeImage()
    {
        com.software.shell.fab.ActionButton r0;
        boolean $z0;

        r0 := @this: com.software.shell.fab.ActionButton;

        $z0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: boolean hasImage()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.software.shell.fab.ActionButton: void setImageDrawable(android.graphics.drawable.Drawable)>(null);

     label1:
        return;
    }
    public void removeShadow()
    {
        com.software.shell.fab.ActionButton r0;
        boolean $z0;

        r0 := @this: com.software.shell.fab.ActionButton;

        $z0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: boolean hasShadow()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.software.shell.fab.ActionButton: void setShadowRadius(float)>(0.0F);

     label1:
        return;
    }
    public void removeShowAnimation()
    {
        com.software.shell.fab.ActionButton r0;
        com.software.shell.fab.ActionButton$Animations $r1;
        org.slf4j.Logger $r2;

        r0 := @this: com.software.shell.fab.ActionButton;

        $r1 = <com.software.shell.fab.ActionButton$Animations: com.software.shell.fab.ActionButton$Animations NONE>;

        virtualinvoke r0.<com.software.shell.fab.ActionButton: void setShowAnimation(com.software.shell.fab.ActionButton$Animations)>($r1);

        $r2 = <com.software.shell.fab.ActionButton: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r2.<org.slf4j.Logger: void trace(java.lang.String)>("Removed the Action Button show animation");

        return;
    }
    public void removeStroke()
    {
        com.software.shell.fab.ActionButton r0;
        boolean $z0;

        r0 := @this: com.software.shell.fab.ActionButton;

        $z0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: boolean hasStroke()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.software.shell.fab.ActionButton: void setStrokeWidth(float)>(0.0F);

     label1:
        return;
    }
    protected final void resetPaint()
    {
        com.software.shell.fab.ActionButton r0;
        android.graphics.Paint $r1;
        org.slf4j.Logger $r2;

        r0 := @this: com.software.shell.fab.ActionButton;

        $r1 = virtualinvoke r0.<com.software.shell.fab.ActionButton: android.graphics.Paint getPaint()>();

        virtualinvoke $r1.<android.graphics.Paint: void reset()>();

        $r1 = virtualinvoke r0.<com.software.shell.fab.ActionButton: android.graphics.Paint getPaint()>();

        virtualinvoke $r1.<android.graphics.Paint: void setFlags(int)>(1);

        $r2 = <com.software.shell.fab.ActionButton: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r2.<org.slf4j.Logger: void trace(java.lang.String)>("Reset the Action Button paint");

        return;
    }
    public void setButtonColor(int)
    {
        com.software.shell.fab.ActionButton r0;
        int $i0;
        org.slf4j.Logger $r1;
        java.lang.Integer $r2;

        r0 := @this: com.software.shell.fab.ActionButton;

        $i0 := @parameter0: int;

        r0.<com.software.shell.fab.ActionButton: int buttonColor> = $i0;

        virtualinvoke r0.<com.software.shell.fab.ActionButton: void invalidate()>();

        $r1 = <com.software.shell.fab.ActionButton: org.slf4j.Logger LOGGER>;

        $i0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: int getButtonColor()>();

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r1.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Changed the Action Button color to: {}", $r2);

        return;
    }
    public void setButtonColorPressed(int)
    {
        com.software.shell.fab.ActionButton r0;
        int $i0;
        org.slf4j.Logger $r1;
        java.lang.Integer $r2;

        r0 := @this: com.software.shell.fab.ActionButton;

        $i0 := @parameter0: int;

        r0.<com.software.shell.fab.ActionButton: int buttonColorPressed> = $i0;

        $i0 = specialinvoke r0.<com.software.shell.fab.ActionButton: int darkenButtonColorPressed()>();

        virtualinvoke r0.<com.software.shell.fab.ActionButton: void setButtonColorRipple(int)>($i0);

        $r1 = <com.software.shell.fab.ActionButton: org.slf4j.Logger LOGGER>;

        $i0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: int getButtonColorPressed()>();

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r1.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Changed the Action Button color pressed to: {}", $r2);

        return;
    }
    public void setButtonColorRipple(int)
    {
        com.software.shell.fab.ActionButton r0;
        int $i0;
        org.slf4j.Logger $r1;
        java.lang.Integer $r2;

        r0 := @this: com.software.shell.fab.ActionButton;

        $i0 := @parameter0: int;

        r0.<com.software.shell.fab.ActionButton: int buttonColorRipple> = $i0;

        $r1 = <com.software.shell.fab.ActionButton: org.slf4j.Logger LOGGER>;

        $i0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: int getButtonColorRipple()>();

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r1.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Action Button Ripple Effect color changed to: {}", $r2);

        return;
    }
    public void setHideAnimation(android.view.animation.Animation)
    {
        com.software.shell.fab.ActionButton r0;
        android.view.animation.Animation $r1;
        org.slf4j.Logger $r2;

        r0 := @this: com.software.shell.fab.ActionButton;

        $r1 := @parameter0: android.view.animation.Animation;

        r0.<com.software.shell.fab.ActionButton: android.view.animation.Animation hideAnimation> = $r1;

        $r2 = <com.software.shell.fab.ActionButton: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r2.<org.slf4j.Logger: void trace(java.lang.String)>("Set the Action Button hide animation");

        return;
    }
    public void setHideAnimation(com.software.shell.fab.ActionButton$Animations)
    {
        com.software.shell.fab.ActionButton r0;
        com.software.shell.fab.ActionButton$Animations $r1;
        int $i0;
        android.content.Context $r2;
        android.view.animation.Animation $r3;

        r0 := @this: com.software.shell.fab.ActionButton;

        $r1 := @parameter0: com.software.shell.fab.ActionButton$Animations;

        $r2 = virtualinvoke r0.<com.software.shell.fab.ActionButton: android.content.Context getContext()>();

        $i0 = $r1.<com.software.shell.fab.ActionButton$Animations: int animResId>;

        $r3 = staticinvoke <com.software.shell.fab.ActionButton$Animations: android.view.animation.Animation load(android.content.Context,int)>($r2, $i0);

        virtualinvoke r0.<com.software.shell.fab.ActionButton: void setHideAnimation(android.view.animation.Animation)>($r3);

        return;
    }
    public void setImageBitmap(android.graphics.Bitmap)
    {
        com.software.shell.fab.ActionButton r0;
        android.graphics.Bitmap $r1;
        android.graphics.drawable.BitmapDrawable $r2;
        android.content.res.Resources $r3;

        r0 := @this: com.software.shell.fab.ActionButton;

        $r1 := @parameter0: android.graphics.Bitmap;

        $r2 = new android.graphics.drawable.BitmapDrawable;

        $r3 = virtualinvoke r0.<com.software.shell.fab.ActionButton: android.content.res.Resources getResources()>();

        specialinvoke $r2.<android.graphics.drawable.BitmapDrawable: void <init>(android.content.res.Resources,android.graphics.Bitmap)>($r3, $r1);

        virtualinvoke r0.<com.software.shell.fab.ActionButton: void setImageDrawable(android.graphics.drawable.Drawable)>($r2);

        return;
    }
    public void setImageDrawable(android.graphics.drawable.Drawable)
    {
        com.software.shell.fab.ActionButton r0;
        android.graphics.drawable.Drawable $r1;
        org.slf4j.Logger $r2;

        r0 := @this: com.software.shell.fab.ActionButton;

        $r1 := @parameter0: android.graphics.drawable.Drawable;

        r0.<com.software.shell.fab.ActionButton: android.graphics.drawable.Drawable image> = $r1;

        virtualinvoke r0.<com.software.shell.fab.ActionButton: void invalidate()>();

        $r2 = <com.software.shell.fab.ActionButton: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r2.<org.slf4j.Logger: void trace(java.lang.String)>("Set the Action Button image drawable");

        return;
    }
    public void setImageResource(int)
    {
        com.software.shell.fab.ActionButton r0;
        int $i0;
        android.content.res.Resources $r1;
        android.graphics.drawable.Drawable $r2;

        r0 := @this: com.software.shell.fab.ActionButton;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<com.software.shell.fab.ActionButton: android.content.res.Resources getResources()>();

        $r2 = virtualinvoke $r1.<android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(int)>($i0);

        virtualinvoke r0.<com.software.shell.fab.ActionButton: void setImageDrawable(android.graphics.drawable.Drawable)>($r2);

        return;
    }
    public void setImageSize(float)
    {
        com.software.shell.fab.ActionButton r0;
        float $f0;
        org.slf4j.Logger $r1;
        java.lang.Float $r2;

        r0 := @this: com.software.shell.fab.ActionButton;

        $f0 := @parameter0: float;

        $f0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float dpToPx(float)>($f0);

        r0.<com.software.shell.fab.ActionButton: float imageSize> = $f0;

        $r1 = <com.software.shell.fab.ActionButton: org.slf4j.Logger LOGGER>;

        $f0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float getImageSize()>();

        $r2 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        interfaceinvoke $r1.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Changed the Action Button image size to: {}", $r2);

        return;
    }
    public void setRippleEffectEnabled(boolean)
    {
        com.software.shell.fab.ActionButton r0;
        boolean $z0;
        org.slf4j.Logger $r1;
        java.lang.String $r2;

        r0 := @this: com.software.shell.fab.ActionButton;

        $z0 := @parameter0: boolean;

        r0.<com.software.shell.fab.ActionButton: boolean rippleEffectEnabled> = $z0;

        $r1 = <com.software.shell.fab.ActionButton: org.slf4j.Logger LOGGER>;

        $z0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: boolean isRippleEffectEnabled()>();

        if $z0 == 0 goto label2;

        $r2 = "Enabled";

     label1:
        interfaceinvoke $r1.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("{} the Action Button Ripple Effect", $r2);

        return;

     label2:
        $r2 = "Disabled";

        goto label1;
    }
    public void setShadowColor(int)
    {
        com.software.shell.fab.ActionButton r0;
        int $i0;
        org.slf4j.Logger $r1;
        java.lang.Integer $r2;

        r0 := @this: com.software.shell.fab.ActionButton;

        $i0 := @parameter0: int;

        r0.<com.software.shell.fab.ActionButton: int shadowColor> = $i0;

        virtualinvoke r0.<com.software.shell.fab.ActionButton: void invalidate()>();

        $r1 = <com.software.shell.fab.ActionButton: org.slf4j.Logger LOGGER>;

        $i0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: int getShadowColor()>();

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r1.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Changed the Action Button shadow color to: {}", $r2);

        return;
    }
    public void setShadowRadius(float)
    {
        com.software.shell.fab.ActionButton r0;
        float $f0;
        boolean $z0;
        com.software.shell.fab.EffectDrawer $r1;
        com.software.shell.fab.ShadowResponsiveDrawer $r2;
        org.slf4j.Logger $r3;
        java.lang.Float $r4;

        r0 := @this: com.software.shell.fab.ActionButton;

        $f0 := @parameter0: float;

        $f0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float dpToPx(float)>($f0);

        r0.<com.software.shell.fab.ActionButton: float shadowRadius> = $f0;

        $z0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: boolean isShadowResponsiveEffectEnabled()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<com.software.shell.fab.ActionButton: com.software.shell.fab.EffectDrawer shadowResponsiveDrawer>;

        $r2 = (com.software.shell.fab.ShadowResponsiveDrawer) $r1;

        $f0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float getShadowRadius()>();

        virtualinvoke $r2.<com.software.shell.fab.ShadowResponsiveDrawer: void setCurrentShadowRadius(float)>($f0);

     label1:
        virtualinvoke r0.<com.software.shell.fab.ActionButton: void requestLayout()>();

        $r3 = <com.software.shell.fab.ActionButton: org.slf4j.Logger LOGGER>;

        $f0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float getShadowRadius()>();

        $r4 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        interfaceinvoke $r3.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Action Button shadow radius changed to: {}", $r4);

        return;
    }
    public void setShadowResponsiveEffectEnabled(boolean)
    {
        com.software.shell.fab.ActionButton r0;
        boolean $z0;
        org.slf4j.Logger $r1;
        java.lang.String $r2;

        r0 := @this: com.software.shell.fab.ActionButton;

        $z0 := @parameter0: boolean;

        r0.<com.software.shell.fab.ActionButton: boolean shadowResponsiveEffectEnabled> = $z0;

        virtualinvoke r0.<com.software.shell.fab.ActionButton: void requestLayout()>();

        $r1 = <com.software.shell.fab.ActionButton: org.slf4j.Logger LOGGER>;

        $z0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: boolean isShadowResponsiveEffectEnabled()>();

        if $z0 == 0 goto label2;

        $r2 = "Enabled";

     label1:
        interfaceinvoke $r1.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("{} the Shadow Responsive Effect", $r2);

        return;

     label2:
        $r2 = "Disabled";

        goto label1;
    }
    public void setShadowXOffset(float)
    {
        com.software.shell.fab.ActionButton r0;
        float $f0;
        org.slf4j.Logger $r1;
        java.lang.Float $r2;

        r0 := @this: com.software.shell.fab.ActionButton;

        $f0 := @parameter0: float;

        $f0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float dpToPx(float)>($f0);

        r0.<com.software.shell.fab.ActionButton: float shadowXOffset> = $f0;

        virtualinvoke r0.<com.software.shell.fab.ActionButton: void requestLayout()>();

        $r1 = <com.software.shell.fab.ActionButton: org.slf4j.Logger LOGGER>;

        $f0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float getShadowXOffset()>();

        $r2 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        interfaceinvoke $r1.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Changed the Action Button shadow X offset to: {}", $r2);

        return;
    }
    public void setShadowYOffset(float)
    {
        com.software.shell.fab.ActionButton r0;
        float $f0;
        org.slf4j.Logger $r1;
        java.lang.Float $r2;

        r0 := @this: com.software.shell.fab.ActionButton;

        $f0 := @parameter0: float;

        $f0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float dpToPx(float)>($f0);

        r0.<com.software.shell.fab.ActionButton: float shadowYOffset> = $f0;

        virtualinvoke r0.<com.software.shell.fab.ActionButton: void requestLayout()>();

        $r1 = <com.software.shell.fab.ActionButton: org.slf4j.Logger LOGGER>;

        $f0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float getShadowYOffset()>();

        $r2 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        interfaceinvoke $r1.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Changed the Action Button shadow Y offset to: {}", $r2);

        return;
    }
    public void setShowAnimation(android.view.animation.Animation)
    {
        com.software.shell.fab.ActionButton r0;
        android.view.animation.Animation $r1;
        org.slf4j.Logger $r2;

        r0 := @this: com.software.shell.fab.ActionButton;

        $r1 := @parameter0: android.view.animation.Animation;

        r0.<com.software.shell.fab.ActionButton: android.view.animation.Animation showAnimation> = $r1;

        $r2 = <com.software.shell.fab.ActionButton: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r2.<org.slf4j.Logger: void trace(java.lang.String)>("Set the Action Button show animation");

        return;
    }
    public void setShowAnimation(com.software.shell.fab.ActionButton$Animations)
    {
        com.software.shell.fab.ActionButton r0;
        com.software.shell.fab.ActionButton$Animations $r1;
        int $i0;
        android.content.Context $r2;
        android.view.animation.Animation $r3;

        r0 := @this: com.software.shell.fab.ActionButton;

        $r1 := @parameter0: com.software.shell.fab.ActionButton$Animations;

        $r2 = virtualinvoke r0.<com.software.shell.fab.ActionButton: android.content.Context getContext()>();

        $i0 = $r1.<com.software.shell.fab.ActionButton$Animations: int animResId>;

        $r3 = staticinvoke <com.software.shell.fab.ActionButton$Animations: android.view.animation.Animation load(android.content.Context,int)>($r2, $i0);

        virtualinvoke r0.<com.software.shell.fab.ActionButton: void setShowAnimation(android.view.animation.Animation)>($r3);

        return;
    }
    public void setSize(float)
    {
        com.software.shell.fab.ActionButton r0;
        float $f0;
        org.slf4j.Logger $r1;
        java.lang.Float $r2;

        r0 := @this: com.software.shell.fab.ActionButton;

        $f0 := @parameter0: float;

        $f0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float dpToPx(float)>($f0);

        r0.<com.software.shell.fab.ActionButton: float size> = $f0;

        virtualinvoke r0.<com.software.shell.fab.ActionButton: void requestLayout()>();

        $r1 = <com.software.shell.fab.ActionButton: org.slf4j.Logger LOGGER>;

        $f0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float getSize()>();

        $r2 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        interfaceinvoke $r1.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Set the Action Button size to: {}", $r2);

        return;
    }
    public void setState(com.software.shell.fab.ActionButton$State)
    {
        com.software.shell.fab.ActionButton r0;
        com.software.shell.fab.ActionButton$State $r1;
        org.slf4j.Logger $r2;

        r0 := @this: com.software.shell.fab.ActionButton;

        $r1 := @parameter0: com.software.shell.fab.ActionButton$State;

        r0.<com.software.shell.fab.ActionButton: com.software.shell.fab.ActionButton$State state> = $r1;

        virtualinvoke r0.<com.software.shell.fab.ActionButton: void invalidate()>();

        $r2 = <com.software.shell.fab.ActionButton: org.slf4j.Logger LOGGER>;

        $r1 = virtualinvoke r0.<com.software.shell.fab.ActionButton: com.software.shell.fab.ActionButton$State getState()>();

        interfaceinvoke $r2.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Changed the Action Button state to: {}", $r1);

        return;
    }
    public void setStrokeColor(int)
    {
        com.software.shell.fab.ActionButton r0;
        int $i0;
        org.slf4j.Logger $r1;
        java.lang.Integer $r2;

        r0 := @this: com.software.shell.fab.ActionButton;

        $i0 := @parameter0: int;

        r0.<com.software.shell.fab.ActionButton: int strokeColor> = $i0;

        virtualinvoke r0.<com.software.shell.fab.ActionButton: void invalidate()>();

        $r1 = <com.software.shell.fab.ActionButton: org.slf4j.Logger LOGGER>;

        $i0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: int getStrokeColor()>();

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r1.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Changed the stroke color to: {}", $r2);

        return;
    }
    public void setStrokeWidth(float)
    {
        com.software.shell.fab.ActionButton r0;
        float $f0;
        org.slf4j.Logger $r1;
        java.lang.Float $r2;

        r0 := @this: com.software.shell.fab.ActionButton;

        $f0 := @parameter0: float;

        $f0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float dpToPx(float)>($f0);

        r0.<com.software.shell.fab.ActionButton: float strokeWidth> = $f0;

        virtualinvoke r0.<com.software.shell.fab.ActionButton: void requestLayout()>();

        $r1 = <com.software.shell.fab.ActionButton: org.slf4j.Logger LOGGER>;

        $f0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: float getStrokeWidth()>();

        $r2 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        interfaceinvoke $r1.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Changed the stroke width to: {}", $r2);

        return;
    }
    protected void setTouchPoint(com.software.shell.fab.TouchPoint)
    {
        com.software.shell.fab.ActionButton r0;
        com.software.shell.fab.TouchPoint $r1;

        r0 := @this: com.software.shell.fab.ActionButton;

        $r1 := @parameter0: com.software.shell.fab.TouchPoint;

        r0.<com.software.shell.fab.ActionButton: com.software.shell.fab.TouchPoint touchPoint> = $r1;

        return;
    }
    public void setType(com.software.shell.fab.ActionButton$Type)
    {
        com.software.shell.fab.ActionButton r0;
        com.software.shell.fab.ActionButton$Type $r1;
        org.slf4j.Logger $r2;
        float $f0;

        r0 := @this: com.software.shell.fab.ActionButton;

        $r1 := @parameter0: com.software.shell.fab.ActionButton$Type;

        r0.<com.software.shell.fab.ActionButton: com.software.shell.fab.ActionButton$Type type> = $r1;

        $r2 = <com.software.shell.fab.ActionButton: org.slf4j.Logger LOGGER>;

        $r1 = virtualinvoke r0.<com.software.shell.fab.ActionButton: com.software.shell.fab.ActionButton$Type getType()>();

        interfaceinvoke $r2.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Changed the Action Button type to: {}", $r1);

        $r1 = virtualinvoke r0.<com.software.shell.fab.ActionButton: com.software.shell.fab.ActionButton$Type getType()>();

        $f0 = virtualinvoke $r1.<com.software.shell.fab.ActionButton$Type: float getSize()>();

        virtualinvoke r0.<com.software.shell.fab.ActionButton: void setSize(float)>($f0);

        return;
    }
    public void show()
    {
        com.software.shell.fab.ActionButton r0;
        boolean $z0;
        org.slf4j.Logger $r1;

        r0 := @this: com.software.shell.fab.ActionButton;

        $z0 = virtualinvoke r0.<com.software.shell.fab.ActionButton: boolean isHidden()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.software.shell.fab.ActionButton: void playShowAnimation()>();

        virtualinvoke r0.<com.software.shell.fab.ActionButton: void setVisibility(int)>(0);

        $r1 = <com.software.shell.fab.ActionButton: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r1.<org.slf4j.Logger: void trace(java.lang.String)>("Shown the Action Button");

     label1:
        return;
    }
    public void startAnimation(android.view.animation.Animation)
    {
        com.software.shell.fab.ActionButton r0;
        android.view.animation.Animation $r1, $r2;
        boolean $z0;

        r0 := @this: com.software.shell.fab.ActionButton;

        $r1 := @parameter0: android.view.animation.Animation;

        if $r1 == null goto label2;

        $r2 = virtualinvoke r0.<com.software.shell.fab.ActionButton: android.view.animation.Animation getAnimation()>();

        if $r2 == null goto label1;

        $r2 = virtualinvoke r0.<com.software.shell.fab.ActionButton: android.view.animation.Animation getAnimation()>();

        $z0 = virtualinvoke $r2.<android.view.animation.Animation: boolean hasEnded()>();

        if $z0 == 0 goto label2;

     label1:
        specialinvoke r0.<android.view.View: void startAnimation(android.view.animation.Animation)>($r1);

     label2:
        return;
    }
