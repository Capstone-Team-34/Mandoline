com.software.shell.uitools.resutils.color.ColorModifier extends java.lang.Object
private static final org.slf4j.Logger LOGGER
    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/software/shell/uitools/resutils/color/ColorModifier;");

        <com.software.shell.uitools.resutils.color.ColorModifier: org.slf4j.Logger LOGGER> = $r0;

        return;
    }
    private void <init>()
    {
        com.software.shell.uitools.resutils.color.ColorModifier r0;

        r0 := @this: com.software.shell.uitools.resutils.color.ColorModifier;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static int modifyExposure(int, float)
    {
        int $i0;
        float $f0, $f1;
        byte $b1;
        org.slf4j.Logger $r0;
        java.lang.Float $r1;
        float[] $r2;

        $i0 := @parameter0: int;

        $f0 := @parameter1: float;

        $b1 = $f0 cmpl 0.0F;

        if $b1 < 0 goto label2;

     label1:
        $r0 = <com.software.shell.uitools.resutils.color.ColorModifier: org.slf4j.Logger LOGGER>;

        $r1 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        interfaceinvoke $r0.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Changing color exposure with factor: {}", $r1);

        $r2 = newarray (float)[3];

        staticinvoke <android.graphics.Color: void colorToHSV(int,float[])>($i0, $r2);

        $f1 = $r2[2];

        $f0 = $f1 * $f0;

        $r2[2] = $f0;

        $i0 = staticinvoke <android.graphics.Color: int HSVToColor(float[])>($r2);

        return $i0;

     label2:
        $f0 = 1.0F;

        goto label1;
    }
