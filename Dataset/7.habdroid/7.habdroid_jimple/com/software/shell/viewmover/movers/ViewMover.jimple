com.software.shell.viewmover.movers.ViewMover extends java.lang.Object
private static final org.slf4j.Logger LOGGER
private final android.view.View view
    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/software/shell/viewmover/movers/ViewMover;");

        <com.software.shell.viewmover.movers.ViewMover: org.slf4j.Logger LOGGER> = $r0;

        return;
    }
    void <init>(android.view.View)
    {
        com.software.shell.viewmover.movers.ViewMover r0;
        android.view.View $r1;

        r0 := @this: com.software.shell.viewmover.movers.ViewMover;

        $r1 := @parameter0: android.view.View;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.software.shell.viewmover.movers.ViewMover: android.view.View view> = $r1;

        return;
    }
    private android.view.animation.Animation createAnimation(com.software.shell.viewmover.configuration.MovingParams)
    {
        com.software.shell.viewmover.movers.ViewMover r0;
        com.software.shell.viewmover.configuration.MovingParams $r1;
        android.view.animation.TranslateAnimation $r2;
        float $f0, $f1;
        long $l0;
        android.view.animation.Interpolator $r3;
        com.software.shell.viewmover.movers.ViewMover$MoveAnimationListener $r4;

        r0 := @this: com.software.shell.viewmover.movers.ViewMover;

        $r1 := @parameter0: com.software.shell.viewmover.configuration.MovingParams;

        $r2 = new android.view.animation.TranslateAnimation;

        $f0 = virtualinvoke $r1.<com.software.shell.viewmover.configuration.MovingParams: float getXAxisDelta()>();

        $f1 = virtualinvoke $r1.<com.software.shell.viewmover.configuration.MovingParams: float getYAxisDelta()>();

        specialinvoke $r2.<android.view.animation.TranslateAnimation: void <init>(float,float,float,float)>(0.0F, $f0, 0.0F, $f1);

        virtualinvoke $r2.<android.view.animation.Animation: void setFillEnabled(boolean)>(1);

        virtualinvoke $r2.<android.view.animation.Animation: void setFillBefore(boolean)>(0);

        $l0 = virtualinvoke $r1.<com.software.shell.viewmover.configuration.MovingParams: long getAnimationDuration()>();

        virtualinvoke $r2.<android.view.animation.Animation: void setDuration(long)>($l0);

        $r3 = virtualinvoke $r1.<com.software.shell.viewmover.configuration.MovingParams: android.view.animation.Interpolator getAnimationInterpolator()>();

        if $r3 == null goto label1;

        virtualinvoke $r2.<android.view.animation.Animation: void setInterpolator(android.view.animation.Interpolator)>($r3);

     label1:
        $r4 = new com.software.shell.viewmover.movers.ViewMover$MoveAnimationListener;

        specialinvoke $r4.<com.software.shell.viewmover.movers.ViewMover$MoveAnimationListener: void <init>(com.software.shell.viewmover.movers.ViewMover,com.software.shell.viewmover.configuration.MovingParams,com.software.shell.viewmover.movers.ViewMover$1)>(r0, $r1, null);

        virtualinvoke $r2.<android.view.animation.Animation: void setAnimationListener(android.view.animation.Animation$AnimationListener)>($r4);

        return $r2;
    }
    private com.software.shell.viewmover.configuration.MovingParams getVerifiedMovingParams(com.software.shell.viewmover.configuration.MovingParams)
    {
        com.software.shell.viewmover.movers.ViewMover r0;
        com.software.shell.viewmover.configuration.MovingParams $r1, $r2;
        org.slf4j.Logger $r3;
        java.lang.Object[] $r4;
        float $f0;
        java.lang.Float $r5;

        r0 := @this: com.software.shell.viewmover.movers.ViewMover;

        $r1 := @parameter0: com.software.shell.viewmover.configuration.MovingParams;

        $r2 = new com.software.shell.viewmover.configuration.MovingParams;

        specialinvoke $r2.<com.software.shell.viewmover.configuration.MovingParams: void <init>(com.software.shell.viewmover.configuration.MovingParams)>($r1);

        specialinvoke r0.<com.software.shell.viewmover.movers.ViewMover: void updateXAxisDelta(com.software.shell.viewmover.configuration.MovingParams)>($r2);

        specialinvoke r0.<com.software.shell.viewmover.movers.ViewMover: void updateYAxisDelta(com.software.shell.viewmover.configuration.MovingParams)>($r2);

        $r3 = <com.software.shell.viewmover.movers.ViewMover: org.slf4j.Logger LOGGER>;

        $r4 = newarray (java.lang.Object)[4];

        $f0 = virtualinvoke $r1.<com.software.shell.viewmover.configuration.MovingParams: float getXAxisDelta()>();

        $r5 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        $r4[0] = $r5;

        $f0 = virtualinvoke $r2.<com.software.shell.viewmover.configuration.MovingParams: float getXAxisDelta()>();

        $r5 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        $r4[1] = $r5;

        $f0 = virtualinvoke $r1.<com.software.shell.viewmover.configuration.MovingParams: float getYAxisDelta()>();

        $r5 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        $r4[2] = $r5;

        $f0 = virtualinvoke $r2.<com.software.shell.viewmover.configuration.MovingParams: float getYAxisDelta()>();

        $r5 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        $r4[3] = $r5;

        interfaceinvoke $r3.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("Updated moving details values: X-axis from {} to {}, Y-axis from {} to {}", $r4);

        return $r2;
    }
    private boolean hasHorizontalSpaceToMove(float)
    {
        com.software.shell.viewmover.movers.ViewMover r0;
        float $f0;
        android.view.View $r1;
        int $i0, $i1, $i2;
        org.slf4j.Logger $r2;
        java.lang.Integer $r3, $r4;

        r0 := @this: com.software.shell.viewmover.movers.ViewMover;

        $f0 := @parameter0: float;

        $r1 = virtualinvoke r0.<com.software.shell.viewmover.movers.ViewMover: android.view.View getParentView()>();

        $i0 = virtualinvoke $r1.<android.view.View: int getWidth()>();

        $r2 = <com.software.shell.viewmover.movers.ViewMover: org.slf4j.Logger LOGGER>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r2.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Parent view width is: {}", $r3);

        $i1 = virtualinvoke r0.<com.software.shell.viewmover.movers.ViewMover: int calculateEndLeftBound(float)>($f0);

        $i2 = virtualinvoke r0.<com.software.shell.viewmover.movers.ViewMover: int calculateEndRightBound(float)>($f0);

        $r2 = <com.software.shell.viewmover.movers.ViewMover: org.slf4j.Logger LOGGER>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        interfaceinvoke $r2.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Calculated end bounds: left = {}, right = {}", $r3, $r4);

        if $i1 < 0 goto label1;

        if $i2 > $i0 goto label1;

        return 1;

     label1:
        return 0;
    }
    private boolean hasVerticalSpaceToMove(float)
    {
        com.software.shell.viewmover.movers.ViewMover r0;
        float $f0;
        android.view.View $r1;
        int $i0, $i1, $i2;
        org.slf4j.Logger $r2;
        java.lang.Integer $r3, $r4;

        r0 := @this: com.software.shell.viewmover.movers.ViewMover;

        $f0 := @parameter0: float;

        $r1 = virtualinvoke r0.<com.software.shell.viewmover.movers.ViewMover: android.view.View getParentView()>();

        $i0 = virtualinvoke $r1.<android.view.View: int getHeight()>();

        $r2 = <com.software.shell.viewmover.movers.ViewMover: org.slf4j.Logger LOGGER>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r2.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Parent view height is: {}", $r3);

        $i1 = virtualinvoke r0.<com.software.shell.viewmover.movers.ViewMover: int calculateEndTopBound(float)>($f0);

        $i2 = virtualinvoke r0.<com.software.shell.viewmover.movers.ViewMover: int calculateEndBottomBound(float)>($f0);

        $r2 = <com.software.shell.viewmover.movers.ViewMover: org.slf4j.Logger LOGGER>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        interfaceinvoke $r2.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Calculated end bounds: top = {}, bottom = {}", $r3, $r4);

        if $i1 < 0 goto label1;

        if $i2 > $i0 goto label1;

        return 1;

     label1:
        return 0;
    }
    private void updateXAxisDelta(com.software.shell.viewmover.configuration.MovingParams)
    {
        com.software.shell.viewmover.movers.ViewMover r0;
        com.software.shell.viewmover.configuration.MovingParams $r1;
        float $f0;
        boolean $z0;
        org.slf4j.Logger $r2;

        r0 := @this: com.software.shell.viewmover.movers.ViewMover;

        $r1 := @parameter0: com.software.shell.viewmover.configuration.MovingParams;

        $f0 = virtualinvoke $r1.<com.software.shell.viewmover.configuration.MovingParams: float getXAxisDelta()>();

        $z0 = specialinvoke r0.<com.software.shell.viewmover.movers.ViewMover: boolean hasHorizontalSpaceToMove(float)>($f0);

        if $z0 != 0 goto label1;

        $r2 = <com.software.shell.viewmover.movers.ViewMover: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r2.<org.slf4j.Logger: void warn(java.lang.String)>("Unable to move the view horizontally. No horizontal space left to move");

        virtualinvoke $r1.<com.software.shell.viewmover.configuration.MovingParams: void setXAxisDelta(float)>(0.0F);

     label1:
        return;
    }
    private void updateYAxisDelta(com.software.shell.viewmover.configuration.MovingParams)
    {
        com.software.shell.viewmover.movers.ViewMover r0;
        com.software.shell.viewmover.configuration.MovingParams $r1;
        float $f0;
        boolean $z0;
        org.slf4j.Logger $r2;

        r0 := @this: com.software.shell.viewmover.movers.ViewMover;

        $r1 := @parameter0: com.software.shell.viewmover.configuration.MovingParams;

        $f0 = virtualinvoke $r1.<com.software.shell.viewmover.configuration.MovingParams: float getYAxisDelta()>();

        $z0 = specialinvoke r0.<com.software.shell.viewmover.movers.ViewMover: boolean hasVerticalSpaceToMove(float)>($f0);

        if $z0 != 0 goto label1;

        $r2 = <com.software.shell.viewmover.movers.ViewMover: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r2.<org.slf4j.Logger: void warn(java.lang.String)>("Unable to move the view vertically. No vertical space left to move");

        virtualinvoke $r1.<com.software.shell.viewmover.configuration.MovingParams: void setYAxisDelta(float)>(0.0F);

     label1:
        return;
    }
abstract int calculateEndBottomBound(float) { 
// no body
} 
abstract int calculateEndLeftBound(float) { 
// no body
} 
abstract int calculateEndRightBound(float) { 
// no body
} 
abstract int calculateEndTopBound(float) { 
// no body
} 
abstract void changeViewPosition(float, float) { 
// no body
} 
    android.view.View getParentView()
    {
        com.software.shell.viewmover.movers.ViewMover r0;
        android.view.ViewParent $r1;
        android.view.View $r2;

        r0 := @this: com.software.shell.viewmover.movers.ViewMover;

        $r2 = r0.<com.software.shell.viewmover.movers.ViewMover: android.view.View view>;

        $r1 = virtualinvoke $r2.<android.view.View: android.view.ViewParent getParent()>();

        $r2 = (android.view.View) $r1;

        return $r2;
    }
    android.view.View getView()
    {
        com.software.shell.viewmover.movers.ViewMover r0;
        android.view.View r1;

        r0 := @this: com.software.shell.viewmover.movers.ViewMover;

        r1 = r0.<com.software.shell.viewmover.movers.ViewMover: android.view.View view>;

        return r1;
    }
    boolean isMoveNonZero(com.software.shell.viewmover.configuration.MovingParams)
    {
        com.software.shell.viewmover.movers.ViewMover r0;
        com.software.shell.viewmover.configuration.MovingParams $r1;
        float $f0;
        byte $b0;
        boolean $z0;
        org.slf4j.Logger $r2;

        r0 := @this: com.software.shell.viewmover.movers.ViewMover;

        $r1 := @parameter0: com.software.shell.viewmover.configuration.MovingParams;

        $f0 = virtualinvoke $r1.<com.software.shell.viewmover.configuration.MovingParams: float getXAxisDelta()>();

        $b0 = $f0 cmpl 0.0F;

        if $b0 != 0 goto label1;

        $f0 = virtualinvoke $r1.<com.software.shell.viewmover.configuration.MovingParams: float getYAxisDelta()>();

        $b0 = $f0 cmpl 0.0F;

        if $b0 == 0 goto label3;

     label1:
        $z0 = 1;

     label2:
        if $z0 != 0 goto label4;

        $r2 = <com.software.shell.viewmover.movers.ViewMover: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r2.<org.slf4j.Logger: void warn(java.lang.String)>("Zero movement detected. No movement will be performed");

        return $z0;

     label3:
        $z0 = 0;

        goto label2;

     label4:
        return $z0;
    }
    boolean isPreviousAnimationCompleted()
    {
        com.software.shell.viewmover.movers.ViewMover r0;
        org.slf4j.Logger $r1;
        android.view.View $r2;
        android.view.animation.Animation $r3;
        boolean $z0;

        r0 := @this: com.software.shell.viewmover.movers.ViewMover;

        $r2 = r0.<com.software.shell.viewmover.movers.ViewMover: android.view.View view>;

        $r3 = virtualinvoke $r2.<android.view.View: android.view.animation.Animation getAnimation()>();

        if $r3 == null goto label1;

        $z0 = virtualinvoke $r3.<android.view.animation.Animation: boolean hasEnded()>();

        if $z0 == 0 goto label3;

     label1:
        $z0 = 1;

     label2:
        if $z0 != 0 goto label4;

        $r1 = <com.software.shell.viewmover.movers.ViewMover: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r1.<org.slf4j.Logger: void warn(java.lang.String)>("Unable to move the view. View is being currently moving");

        return $z0;

     label3:
        $z0 = 0;

        goto label2;

     label4:
        return $z0;
    }
    public void move(com.software.shell.viewmover.configuration.MovingParams)
    {
        com.software.shell.viewmover.movers.ViewMover r0;
        com.software.shell.viewmover.configuration.MovingParams $r1;
        org.slf4j.Logger $r2;
        boolean $z0;
        android.view.animation.Animation $r3;
        float $f0;
        java.lang.Float $r4, $r5;
        android.view.View $r6;

        r0 := @this: com.software.shell.viewmover.movers.ViewMover;

        $r1 := @parameter0: com.software.shell.viewmover.configuration.MovingParams;

        $z0 = virtualinvoke r0.<com.software.shell.viewmover.movers.ViewMover: boolean isPreviousAnimationCompleted()>();

        if $z0 == 0 goto label1;

        $r1 = specialinvoke r0.<com.software.shell.viewmover.movers.ViewMover: com.software.shell.viewmover.configuration.MovingParams getVerifiedMovingParams(com.software.shell.viewmover.configuration.MovingParams)>($r1);

        $z0 = virtualinvoke r0.<com.software.shell.viewmover.movers.ViewMover: boolean isMoveNonZero(com.software.shell.viewmover.configuration.MovingParams)>($r1);

        if $z0 == 0 goto label1;

        $r3 = specialinvoke r0.<com.software.shell.viewmover.movers.ViewMover: android.view.animation.Animation createAnimation(com.software.shell.viewmover.configuration.MovingParams)>($r1);

        $r2 = <com.software.shell.viewmover.movers.ViewMover: org.slf4j.Logger LOGGER>;

        $f0 = virtualinvoke $r1.<com.software.shell.viewmover.configuration.MovingParams: float getXAxisDelta()>();

        $r4 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        $f0 = virtualinvoke $r1.<com.software.shell.viewmover.configuration.MovingParams: float getYAxisDelta()>();

        $r5 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        interfaceinvoke $r2.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("View is about to be moved at: delta X-axis = {}, delta Y-axis = {}", $r4, $r5);

        $r6 = r0.<com.software.shell.viewmover.movers.ViewMover: android.view.View view>;

        virtualinvoke $r6.<android.view.View: void startAnimation(android.view.animation.Animation)>($r3);

     label1:
        return;
    }
