android.arch.lifecycle.LifecycleRegistry extends android.arch.lifecycle.Lifecycle
private int mAddingObserverCounter
private boolean mHandlingEvent
private final android.arch.lifecycle.LifecycleOwner mLifecycleOwner
private boolean mNewEventOccurred
private android.arch.core.internal.FastSafeIterableMap mObserverMap
private java.util.ArrayList mParentStates
private android.arch.lifecycle.Lifecycle$State mState
    public void <init>(android.arch.lifecycle.LifecycleOwner)
    {
        android.arch.lifecycle.LifecycleRegistry r0;
        android.arch.lifecycle.LifecycleOwner $r1;
        android.arch.core.internal.FastSafeIterableMap $r2;
        java.util.ArrayList $r3;
        android.arch.lifecycle.Lifecycle$State $r4;

        r0 := @this: android.arch.lifecycle.LifecycleRegistry;

        $r1 := @parameter0: android.arch.lifecycle.LifecycleOwner;

        specialinvoke r0.<android.arch.lifecycle.Lifecycle: void <init>()>();

        $r2 = new android.arch.core.internal.FastSafeIterableMap;

        specialinvoke $r2.<android.arch.core.internal.FastSafeIterableMap: void <init>()>();

        r0.<android.arch.lifecycle.LifecycleRegistry: android.arch.core.internal.FastSafeIterableMap mObserverMap> = $r2;

        r0.<android.arch.lifecycle.LifecycleRegistry: int mAddingObserverCounter> = 0;

        r0.<android.arch.lifecycle.LifecycleRegistry: boolean mHandlingEvent> = 0;

        r0.<android.arch.lifecycle.LifecycleRegistry: boolean mNewEventOccurred> = 0;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<android.arch.lifecycle.LifecycleRegistry: java.util.ArrayList mParentStates> = $r3;

        r0.<android.arch.lifecycle.LifecycleRegistry: android.arch.lifecycle.LifecycleOwner mLifecycleOwner> = $r1;

        $r4 = <android.arch.lifecycle.Lifecycle$State: android.arch.lifecycle.Lifecycle$State INITIALIZED>;

        r0.<android.arch.lifecycle.LifecycleRegistry: android.arch.lifecycle.Lifecycle$State mState> = $r4;

        return;
    }
    private void backwardPass()
    {
        android.arch.lifecycle.LifecycleRegistry r0;
        android.arch.core.internal.FastSafeIterableMap $r1;
        java.util.Iterator $r2;
        boolean $z0;
        java.lang.Object $r3;
        java.util.Map$Entry r4;
        android.arch.lifecycle.LifecycleRegistry$ObserverWithState r5;
        android.arch.lifecycle.Lifecycle$State $r6, $r7;
        int $i0;
        android.arch.lifecycle.Lifecycle$Event $r8;
        android.arch.lifecycle.LifecycleOwner $r9;

        r0 := @this: android.arch.lifecycle.LifecycleRegistry;

        $r1 = r0.<android.arch.lifecycle.LifecycleRegistry: android.arch.core.internal.FastSafeIterableMap mObserverMap>;

        $r2 = virtualinvoke $r1.<android.arch.core.internal.FastSafeIterableMap: java.util.Iterator descendingIterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $z0 = r0.<android.arch.lifecycle.LifecycleRegistry: boolean mNewEventOccurred>;

        if $z0 != 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r3;

        $r3 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        r5 = (android.arch.lifecycle.LifecycleRegistry$ObserverWithState) $r3;

     label2:
        $r6 = r5.<android.arch.lifecycle.LifecycleRegistry$ObserverWithState: android.arch.lifecycle.Lifecycle$State mState>;

        $r7 = r0.<android.arch.lifecycle.LifecycleRegistry: android.arch.lifecycle.Lifecycle$State mState>;

        $i0 = virtualinvoke $r6.<android.arch.lifecycle.Lifecycle$State: int compareTo(java.lang.Enum)>($r7);

        if $i0 <= 0 goto label1;

        $z0 = r0.<android.arch.lifecycle.LifecycleRegistry: boolean mNewEventOccurred>;

        if $z0 != 0 goto label1;

        $r1 = r0.<android.arch.lifecycle.LifecycleRegistry: android.arch.core.internal.FastSafeIterableMap mObserverMap>;

        $r3 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $z0 = virtualinvoke $r1.<android.arch.core.internal.FastSafeIterableMap: boolean contains(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        $r6 = r5.<android.arch.lifecycle.LifecycleRegistry$ObserverWithState: android.arch.lifecycle.Lifecycle$State mState>;

        $r8 = staticinvoke <android.arch.lifecycle.LifecycleRegistry: android.arch.lifecycle.Lifecycle$Event downEvent(android.arch.lifecycle.Lifecycle$State)>($r6);

        $r6 = staticinvoke <android.arch.lifecycle.LifecycleRegistry: android.arch.lifecycle.Lifecycle$State getStateAfter(android.arch.lifecycle.Lifecycle$Event)>($r8);

        specialinvoke r0.<android.arch.lifecycle.LifecycleRegistry: void pushParentState(android.arch.lifecycle.Lifecycle$State)>($r6);

        $r9 = r0.<android.arch.lifecycle.LifecycleRegistry: android.arch.lifecycle.LifecycleOwner mLifecycleOwner>;

        virtualinvoke r5.<android.arch.lifecycle.LifecycleRegistry$ObserverWithState: void dispatchEvent(android.arch.lifecycle.LifecycleOwner,android.arch.lifecycle.Lifecycle$Event)>($r9, $r8);

        specialinvoke r0.<android.arch.lifecycle.LifecycleRegistry: void popParentState()>();

        goto label2;

     label3:
        return;
    }
    private android.arch.lifecycle.Lifecycle$State calculateTargetState(android.arch.lifecycle.LifecycleObserver)
    {
        android.arch.lifecycle.LifecycleRegistry r0;
        android.arch.lifecycle.LifecycleObserver $r1;
        android.arch.core.internal.FastSafeIterableMap $r2;
        java.util.Map$Entry $r3;
        java.lang.Object $r4;
        android.arch.lifecycle.LifecycleRegistry$ObserverWithState $r5;
        android.arch.lifecycle.Lifecycle$State r6, $r9, $r10;
        java.util.ArrayList $r7, $r8;
        boolean $z0;
        int $i0;

        r0 := @this: android.arch.lifecycle.LifecycleRegistry;

        $r1 := @parameter0: android.arch.lifecycle.LifecycleObserver;

        $r2 = r0.<android.arch.lifecycle.LifecycleRegistry: android.arch.core.internal.FastSafeIterableMap mObserverMap>;

        $r3 = virtualinvoke $r2.<android.arch.core.internal.FastSafeIterableMap: java.util.Map$Entry ceil(java.lang.Object)>($r1);

        if $r3 == null goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r5 = (android.arch.lifecycle.LifecycleRegistry$ObserverWithState) $r4;

        r6 = $r5.<android.arch.lifecycle.LifecycleRegistry$ObserverWithState: android.arch.lifecycle.Lifecycle$State mState>;

     label1:
        $r7 = r0.<android.arch.lifecycle.LifecycleRegistry: java.util.ArrayList mParentStates>;

        $z0 = virtualinvoke $r7.<java.util.ArrayList: boolean isEmpty()>();

        if $z0 != 0 goto label4;

        $r7 = r0.<android.arch.lifecycle.LifecycleRegistry: java.util.ArrayList mParentStates>;

        $r8 = r0.<android.arch.lifecycle.LifecycleRegistry: java.util.ArrayList mParentStates>;

        $i0 = virtualinvoke $r8.<java.util.ArrayList: int size()>();

        $i0 = $i0 + -1;

        $r4 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r9 = (android.arch.lifecycle.Lifecycle$State) $r4;

     label2:
        $r10 = r0.<android.arch.lifecycle.LifecycleRegistry: android.arch.lifecycle.Lifecycle$State mState>;

        r6 = staticinvoke <android.arch.lifecycle.LifecycleRegistry: android.arch.lifecycle.Lifecycle$State min(android.arch.lifecycle.Lifecycle$State,android.arch.lifecycle.Lifecycle$State)>($r10, r6);

        r6 = staticinvoke <android.arch.lifecycle.LifecycleRegistry: android.arch.lifecycle.Lifecycle$State min(android.arch.lifecycle.Lifecycle$State,android.arch.lifecycle.Lifecycle$State)>(r6, $r9);

        return r6;

     label3:
        r6 = null;

        goto label1;

     label4:
        $r9 = null;

        goto label2;
    }
    private static android.arch.lifecycle.Lifecycle$Event downEvent(android.arch.lifecycle.Lifecycle$State)
    {
        android.arch.lifecycle.Lifecycle$State $r0;
        int[] $r1;
        int $i0;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        android.arch.lifecycle.Lifecycle$Event r5;

        $r0 := @parameter0: android.arch.lifecycle.Lifecycle$State;

        $r1 = <android.arch.lifecycle.LifecycleRegistry$1: int[] $SwitchMap$android$arch$lifecycle$Lifecycle$State>;

        $i0 = virtualinvoke $r0.<android.arch.lifecycle.Lifecycle$State: int ordinal()>();

        $i0 = $r1[$i0];

        lookupswitch($i0)
        {
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            case 4: goto label5;
            case 5: goto label6;
            default: goto label1;
        };

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected state value ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label3:
        r5 = <android.arch.lifecycle.Lifecycle$Event: android.arch.lifecycle.Lifecycle$Event ON_DESTROY>;

        return r5;

     label4:
        r5 = <android.arch.lifecycle.Lifecycle$Event: android.arch.lifecycle.Lifecycle$Event ON_STOP>;

        return r5;

     label5:
        r5 = <android.arch.lifecycle.Lifecycle$Event: android.arch.lifecycle.Lifecycle$Event ON_PAUSE>;

        return r5;

     label6:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;
    }
    private void forwardPass()
    {
        android.arch.lifecycle.LifecycleRegistry r0;
        android.arch.core.internal.FastSafeIterableMap $r1;
        android.arch.core.internal.SafeIterableMap$IteratorWithAdditions $r2;
        boolean $z0;
        java.lang.Object $r3;
        java.util.Map$Entry r4;
        android.arch.lifecycle.LifecycleRegistry$ObserverWithState r5;
        android.arch.lifecycle.Lifecycle$State $r6, $r7;
        int $i0;
        android.arch.lifecycle.LifecycleOwner $r8;
        android.arch.lifecycle.Lifecycle$Event $r9;

        r0 := @this: android.arch.lifecycle.LifecycleRegistry;

        $r1 = r0.<android.arch.lifecycle.LifecycleRegistry: android.arch.core.internal.FastSafeIterableMap mObserverMap>;

        $r2 = virtualinvoke $r1.<android.arch.core.internal.FastSafeIterableMap: android.arch.core.internal.SafeIterableMap$IteratorWithAdditions iteratorWithAdditions()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $z0 = r0.<android.arch.lifecycle.LifecycleRegistry: boolean mNewEventOccurred>;

        if $z0 != 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r3;

        $r3 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        r5 = (android.arch.lifecycle.LifecycleRegistry$ObserverWithState) $r3;

     label2:
        $r6 = r5.<android.arch.lifecycle.LifecycleRegistry$ObserverWithState: android.arch.lifecycle.Lifecycle$State mState>;

        $r7 = r0.<android.arch.lifecycle.LifecycleRegistry: android.arch.lifecycle.Lifecycle$State mState>;

        $i0 = virtualinvoke $r6.<android.arch.lifecycle.Lifecycle$State: int compareTo(java.lang.Enum)>($r7);

        if $i0 >= 0 goto label1;

        $z0 = r0.<android.arch.lifecycle.LifecycleRegistry: boolean mNewEventOccurred>;

        if $z0 != 0 goto label1;

        $r1 = r0.<android.arch.lifecycle.LifecycleRegistry: android.arch.core.internal.FastSafeIterableMap mObserverMap>;

        $r3 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $z0 = virtualinvoke $r1.<android.arch.core.internal.FastSafeIterableMap: boolean contains(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        $r6 = r5.<android.arch.lifecycle.LifecycleRegistry$ObserverWithState: android.arch.lifecycle.Lifecycle$State mState>;

        specialinvoke r0.<android.arch.lifecycle.LifecycleRegistry: void pushParentState(android.arch.lifecycle.Lifecycle$State)>($r6);

        $r8 = r0.<android.arch.lifecycle.LifecycleRegistry: android.arch.lifecycle.LifecycleOwner mLifecycleOwner>;

        $r6 = r5.<android.arch.lifecycle.LifecycleRegistry$ObserverWithState: android.arch.lifecycle.Lifecycle$State mState>;

        $r9 = staticinvoke <android.arch.lifecycle.LifecycleRegistry: android.arch.lifecycle.Lifecycle$Event upEvent(android.arch.lifecycle.Lifecycle$State)>($r6);

        virtualinvoke r5.<android.arch.lifecycle.LifecycleRegistry$ObserverWithState: void dispatchEvent(android.arch.lifecycle.LifecycleOwner,android.arch.lifecycle.Lifecycle$Event)>($r8, $r9);

        specialinvoke r0.<android.arch.lifecycle.LifecycleRegistry: void popParentState()>();

        goto label2;

     label3:
        return;
    }
    static android.arch.lifecycle.Lifecycle$State getStateAfter(android.arch.lifecycle.Lifecycle$Event)
    {
        android.arch.lifecycle.Lifecycle$Event $r0;
        int[] $r1;
        int $i0;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        android.arch.lifecycle.Lifecycle$State r5;

        $r0 := @parameter0: android.arch.lifecycle.Lifecycle$Event;

        $r1 = <android.arch.lifecycle.LifecycleRegistry$1: int[] $SwitchMap$android$arch$lifecycle$Lifecycle$Event>;

        $i0 = virtualinvoke $r0.<android.arch.lifecycle.Lifecycle$Event: int ordinal()>();

        $i0 = $r1[$i0];

        lookupswitch($i0)
        {
            case 1: goto label2;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label3;
            case 5: goto label4;
            case 6: goto label5;
            default: goto label1;
        };

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected event value ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label2:
        r5 = <android.arch.lifecycle.Lifecycle$State: android.arch.lifecycle.Lifecycle$State CREATED>;

        return r5;

     label3:
        r5 = <android.arch.lifecycle.Lifecycle$State: android.arch.lifecycle.Lifecycle$State STARTED>;

        return r5;

     label4:
        r5 = <android.arch.lifecycle.Lifecycle$State: android.arch.lifecycle.Lifecycle$State RESUMED>;

        return r5;

     label5:
        r5 = <android.arch.lifecycle.Lifecycle$State: android.arch.lifecycle.Lifecycle$State DESTROYED>;

        return r5;
    }
    private boolean isSynced()
    {
        android.arch.lifecycle.LifecycleRegistry r0;
        android.arch.lifecycle.Lifecycle$State r1, r2;
        android.arch.core.internal.FastSafeIterableMap $r3;
        int $i0;
        java.util.Map$Entry $r4;
        java.lang.Object $r5;
        android.arch.lifecycle.LifecycleRegistry$ObserverWithState $r6;
        boolean $z0;

        r0 := @this: android.arch.lifecycle.LifecycleRegistry;

        $r3 = r0.<android.arch.lifecycle.LifecycleRegistry: android.arch.core.internal.FastSafeIterableMap mObserverMap>;

        $i0 = virtualinvoke $r3.<android.arch.core.internal.FastSafeIterableMap: int size()>();

        if $i0 != 0 goto label1;

        return 1;

     label1:
        $r3 = r0.<android.arch.lifecycle.LifecycleRegistry: android.arch.core.internal.FastSafeIterableMap mObserverMap>;

        $r4 = virtualinvoke $r3.<android.arch.core.internal.FastSafeIterableMap: java.util.Map$Entry eldest()>();

        $r5 = interfaceinvoke $r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r6 = (android.arch.lifecycle.LifecycleRegistry$ObserverWithState) $r5;

        r1 = $r6.<android.arch.lifecycle.LifecycleRegistry$ObserverWithState: android.arch.lifecycle.Lifecycle$State mState>;

        $r3 = r0.<android.arch.lifecycle.LifecycleRegistry: android.arch.core.internal.FastSafeIterableMap mObserverMap>;

        $r4 = virtualinvoke $r3.<android.arch.core.internal.FastSafeIterableMap: java.util.Map$Entry newest()>();

        $r5 = interfaceinvoke $r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r6 = (android.arch.lifecycle.LifecycleRegistry$ObserverWithState) $r5;

        r2 = $r6.<android.arch.lifecycle.LifecycleRegistry$ObserverWithState: android.arch.lifecycle.Lifecycle$State mState>;

        if r1 != r2 goto label3;

        r1 = r0.<android.arch.lifecycle.LifecycleRegistry: android.arch.lifecycle.Lifecycle$State mState>;

        if r1 != r2 goto label3;

        $z0 = 1;

     label2:
        return $z0;

     label3:
        $z0 = 0;

        goto label2;
    }
    static android.arch.lifecycle.Lifecycle$State min(android.arch.lifecycle.Lifecycle$State, android.arch.lifecycle.Lifecycle$State)
    {
        android.arch.lifecycle.Lifecycle$State $r0, r1;
        int $i0;

        $r0 := @parameter0: android.arch.lifecycle.Lifecycle$State;

        r1 := @parameter1: android.arch.lifecycle.Lifecycle$State;

        if r1 == null goto label1;

        $i0 = virtualinvoke r1.<android.arch.lifecycle.Lifecycle$State: int compareTo(java.lang.Enum)>($r0);

        if $i0 >= 0 goto label1;

        return r1;

     label1:
        return $r0;
    }
    private void popParentState()
    {
        android.arch.lifecycle.LifecycleRegistry r0;
        java.util.ArrayList $r1, $r2;
        int $i0;

        r0 := @this: android.arch.lifecycle.LifecycleRegistry;

        $r1 = r0.<android.arch.lifecycle.LifecycleRegistry: java.util.ArrayList mParentStates>;

        $r2 = r0.<android.arch.lifecycle.LifecycleRegistry: java.util.ArrayList mParentStates>;

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        $i0 = $i0 + -1;

        virtualinvoke $r1.<java.util.ArrayList: java.lang.Object remove(int)>($i0);

        return;
    }
    private void pushParentState(android.arch.lifecycle.Lifecycle$State)
    {
        android.arch.lifecycle.LifecycleRegistry r0;
        android.arch.lifecycle.Lifecycle$State $r1;
        java.util.ArrayList $r2;

        r0 := @this: android.arch.lifecycle.LifecycleRegistry;

        $r1 := @parameter0: android.arch.lifecycle.Lifecycle$State;

        $r2 = r0.<android.arch.lifecycle.LifecycleRegistry: java.util.ArrayList mParentStates>;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r1);

        return;
    }
    private void sync()
    {
        android.arch.lifecycle.LifecycleRegistry r0;
        boolean $z0;
        android.arch.lifecycle.Lifecycle$State $r1, $r6;
        android.arch.core.internal.FastSafeIterableMap $r2;
        java.util.Map$Entry $r3;
        java.lang.Object $r4;
        android.arch.lifecycle.LifecycleRegistry$ObserverWithState $r5;
        int $i0;

        r0 := @this: android.arch.lifecycle.LifecycleRegistry;

     label1:
        $z0 = specialinvoke r0.<android.arch.lifecycle.LifecycleRegistry: boolean isSynced()>();

        if $z0 != 0 goto label3;

        r0.<android.arch.lifecycle.LifecycleRegistry: boolean mNewEventOccurred> = 0;

        $r1 = r0.<android.arch.lifecycle.LifecycleRegistry: android.arch.lifecycle.Lifecycle$State mState>;

        $r2 = r0.<android.arch.lifecycle.LifecycleRegistry: android.arch.core.internal.FastSafeIterableMap mObserverMap>;

        $r3 = virtualinvoke $r2.<android.arch.core.internal.FastSafeIterableMap: java.util.Map$Entry eldest()>();

        $r4 = interfaceinvoke $r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r5 = (android.arch.lifecycle.LifecycleRegistry$ObserverWithState) $r4;

        $r6 = $r5.<android.arch.lifecycle.LifecycleRegistry$ObserverWithState: android.arch.lifecycle.Lifecycle$State mState>;

        $i0 = virtualinvoke $r1.<android.arch.lifecycle.Lifecycle$State: int compareTo(java.lang.Enum)>($r6);

        if $i0 >= 0 goto label2;

        specialinvoke r0.<android.arch.lifecycle.LifecycleRegistry: void backwardPass()>();

     label2:
        $r2 = r0.<android.arch.lifecycle.LifecycleRegistry: android.arch.core.internal.FastSafeIterableMap mObserverMap>;

        $r3 = virtualinvoke $r2.<android.arch.core.internal.FastSafeIterableMap: java.util.Map$Entry newest()>();

        $z0 = r0.<android.arch.lifecycle.LifecycleRegistry: boolean mNewEventOccurred>;

        if $z0 != 0 goto label1;

        if $r3 == null goto label1;

        $r1 = r0.<android.arch.lifecycle.LifecycleRegistry: android.arch.lifecycle.Lifecycle$State mState>;

        $r4 = interfaceinvoke $r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r5 = (android.arch.lifecycle.LifecycleRegistry$ObserverWithState) $r4;

        $r6 = $r5.<android.arch.lifecycle.LifecycleRegistry$ObserverWithState: android.arch.lifecycle.Lifecycle$State mState>;

        $i0 = virtualinvoke $r1.<android.arch.lifecycle.Lifecycle$State: int compareTo(java.lang.Enum)>($r6);

        if $i0 <= 0 goto label1;

        specialinvoke r0.<android.arch.lifecycle.LifecycleRegistry: void forwardPass()>();

        goto label1;

     label3:
        r0.<android.arch.lifecycle.LifecycleRegistry: boolean mNewEventOccurred> = 0;

        return;
    }
    private static android.arch.lifecycle.Lifecycle$Event upEvent(android.arch.lifecycle.Lifecycle$State)
    {
        android.arch.lifecycle.Lifecycle$State $r0;
        int[] $r1;
        int $i0;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        android.arch.lifecycle.Lifecycle$Event r5;

        $r0 := @parameter0: android.arch.lifecycle.Lifecycle$State;

        $r1 = <android.arch.lifecycle.LifecycleRegistry$1: int[] $SwitchMap$android$arch$lifecycle$Lifecycle$State>;

        $i0 = virtualinvoke $r0.<android.arch.lifecycle.Lifecycle$State: int ordinal()>();

        $i0 = $r1[$i0];

        lookupswitch($i0)
        {
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            case 4: goto label5;
            case 5: goto label2;
            default: goto label1;
        };

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected state value ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label2:
        r5 = <android.arch.lifecycle.Lifecycle$Event: android.arch.lifecycle.Lifecycle$Event ON_CREATE>;

        return r5;

     label3:
        r5 = <android.arch.lifecycle.Lifecycle$Event: android.arch.lifecycle.Lifecycle$Event ON_START>;

        return r5;

     label4:
        r5 = <android.arch.lifecycle.Lifecycle$Event: android.arch.lifecycle.Lifecycle$Event ON_RESUME>;

        return r5;

     label5:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;
    }
    public void addObserver(android.arch.lifecycle.LifecycleObserver)
    {
        android.arch.lifecycle.LifecycleRegistry r0;
        android.arch.lifecycle.LifecycleObserver $r1;
        android.arch.lifecycle.LifecycleRegistry$ObserverWithState r2, r7;
        android.arch.lifecycle.Lifecycle$State $r3, $r4;
        android.arch.core.internal.FastSafeIterableMap $r5;
        java.lang.Object $r6;
        int $i0;
        boolean $z0, $z1;
        android.arch.lifecycle.LifecycleOwner $r8;
        android.arch.lifecycle.Lifecycle$Event $r9;

        r0 := @this: android.arch.lifecycle.LifecycleRegistry;

        $r1 := @parameter0: android.arch.lifecycle.LifecycleObserver;

        $r3 = r0.<android.arch.lifecycle.LifecycleRegistry: android.arch.lifecycle.Lifecycle$State mState>;

        $r4 = <android.arch.lifecycle.Lifecycle$State: android.arch.lifecycle.Lifecycle$State DESTROYED>;

        if $r3 != $r4 goto label2;

        $r3 = <android.arch.lifecycle.Lifecycle$State: android.arch.lifecycle.Lifecycle$State DESTROYED>;

     label1:
        r2 = new android.arch.lifecycle.LifecycleRegistry$ObserverWithState;

        specialinvoke r2.<android.arch.lifecycle.LifecycleRegistry$ObserverWithState: void <init>(android.arch.lifecycle.LifecycleObserver,android.arch.lifecycle.Lifecycle$State)>($r1, $r3);

        $r5 = r0.<android.arch.lifecycle.LifecycleRegistry: android.arch.core.internal.FastSafeIterableMap mObserverMap>;

        $r6 = virtualinvoke $r5.<android.arch.core.internal.FastSafeIterableMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>($r1, r2);

        r7 = (android.arch.lifecycle.LifecycleRegistry$ObserverWithState) $r6;

        if r7 == null goto label3;

        return;

     label2:
        $r3 = <android.arch.lifecycle.Lifecycle$State: android.arch.lifecycle.Lifecycle$State INITIALIZED>;

        goto label1;

     label3:
        $i0 = r0.<android.arch.lifecycle.LifecycleRegistry: int mAddingObserverCounter>;

        if $i0 != 0 goto label4;

        $z0 = r0.<android.arch.lifecycle.LifecycleRegistry: boolean mHandlingEvent>;

        if $z0 == 0 goto label7;

     label4:
        $z0 = 1;

     label5:
        $r3 = specialinvoke r0.<android.arch.lifecycle.LifecycleRegistry: android.arch.lifecycle.Lifecycle$State calculateTargetState(android.arch.lifecycle.LifecycleObserver)>($r1);

        $i0 = r0.<android.arch.lifecycle.LifecycleRegistry: int mAddingObserverCounter>;

        $i0 = $i0 + 1;

        r0.<android.arch.lifecycle.LifecycleRegistry: int mAddingObserverCounter> = $i0;

     label6:
        $r4 = r2.<android.arch.lifecycle.LifecycleRegistry$ObserverWithState: android.arch.lifecycle.Lifecycle$State mState>;

        $i0 = virtualinvoke $r4.<android.arch.lifecycle.Lifecycle$State: int compareTo(java.lang.Enum)>($r3);

        if $i0 >= 0 goto label8;

        $r5 = r0.<android.arch.lifecycle.LifecycleRegistry: android.arch.core.internal.FastSafeIterableMap mObserverMap>;

        $z1 = virtualinvoke $r5.<android.arch.core.internal.FastSafeIterableMap: boolean contains(java.lang.Object)>($r1);

        if $z1 == 0 goto label8;

        $r3 = r2.<android.arch.lifecycle.LifecycleRegistry$ObserverWithState: android.arch.lifecycle.Lifecycle$State mState>;

        specialinvoke r0.<android.arch.lifecycle.LifecycleRegistry: void pushParentState(android.arch.lifecycle.Lifecycle$State)>($r3);

        $r8 = r0.<android.arch.lifecycle.LifecycleRegistry: android.arch.lifecycle.LifecycleOwner mLifecycleOwner>;

        $r3 = r2.<android.arch.lifecycle.LifecycleRegistry$ObserverWithState: android.arch.lifecycle.Lifecycle$State mState>;

        $r9 = staticinvoke <android.arch.lifecycle.LifecycleRegistry: android.arch.lifecycle.Lifecycle$Event upEvent(android.arch.lifecycle.Lifecycle$State)>($r3);

        virtualinvoke r2.<android.arch.lifecycle.LifecycleRegistry$ObserverWithState: void dispatchEvent(android.arch.lifecycle.LifecycleOwner,android.arch.lifecycle.Lifecycle$Event)>($r8, $r9);

        specialinvoke r0.<android.arch.lifecycle.LifecycleRegistry: void popParentState()>();

        $r3 = specialinvoke r0.<android.arch.lifecycle.LifecycleRegistry: android.arch.lifecycle.Lifecycle$State calculateTargetState(android.arch.lifecycle.LifecycleObserver)>($r1);

        goto label6;

     label7:
        $z0 = 0;

        goto label5;

     label8:
        if $z0 != 0 goto label9;

        specialinvoke r0.<android.arch.lifecycle.LifecycleRegistry: void sync()>();

     label9:
        $i0 = r0.<android.arch.lifecycle.LifecycleRegistry: int mAddingObserverCounter>;

        $i0 = $i0 + -1;

        r0.<android.arch.lifecycle.LifecycleRegistry: int mAddingObserverCounter> = $i0;

        return;
    }
    public android.arch.lifecycle.Lifecycle$State getCurrentState()
    {
        android.arch.lifecycle.LifecycleRegistry r0;
        android.arch.lifecycle.Lifecycle$State r1;

        r0 := @this: android.arch.lifecycle.LifecycleRegistry;

        r1 = r0.<android.arch.lifecycle.LifecycleRegistry: android.arch.lifecycle.Lifecycle$State mState>;

        return r1;
    }
    public int getObserverCount()
    {
        android.arch.lifecycle.LifecycleRegistry r0;
        int $i0;
        android.arch.core.internal.FastSafeIterableMap $r1;

        r0 := @this: android.arch.lifecycle.LifecycleRegistry;

        $r1 = r0.<android.arch.lifecycle.LifecycleRegistry: android.arch.core.internal.FastSafeIterableMap mObserverMap>;

        $i0 = virtualinvoke $r1.<android.arch.core.internal.FastSafeIterableMap: int size()>();

        return $i0;
    }
    public void handleLifecycleEvent(android.arch.lifecycle.Lifecycle$Event)
    {
        android.arch.lifecycle.LifecycleRegistry r0;
        android.arch.lifecycle.Lifecycle$Event $r1;
        android.arch.lifecycle.Lifecycle$State $r2;
        boolean $z0;
        int $i0;

        r0 := @this: android.arch.lifecycle.LifecycleRegistry;

        $r1 := @parameter0: android.arch.lifecycle.Lifecycle$Event;

        $r2 = staticinvoke <android.arch.lifecycle.LifecycleRegistry: android.arch.lifecycle.Lifecycle$State getStateAfter(android.arch.lifecycle.Lifecycle$Event)>($r1);

        r0.<android.arch.lifecycle.LifecycleRegistry: android.arch.lifecycle.Lifecycle$State mState> = $r2;

        $z0 = r0.<android.arch.lifecycle.LifecycleRegistry: boolean mHandlingEvent>;

        if $z0 != 0 goto label1;

        $i0 = r0.<android.arch.lifecycle.LifecycleRegistry: int mAddingObserverCounter>;

        if $i0 == 0 goto label2;

     label1:
        r0.<android.arch.lifecycle.LifecycleRegistry: boolean mNewEventOccurred> = 1;

        return;

     label2:
        r0.<android.arch.lifecycle.LifecycleRegistry: boolean mHandlingEvent> = 1;

        specialinvoke r0.<android.arch.lifecycle.LifecycleRegistry: void sync()>();

        r0.<android.arch.lifecycle.LifecycleRegistry: boolean mHandlingEvent> = 0;

        return;
    }
    public void markState(android.arch.lifecycle.Lifecycle$State)
    {
        android.arch.lifecycle.LifecycleRegistry r0;
        android.arch.lifecycle.Lifecycle$State $r1;

        r0 := @this: android.arch.lifecycle.LifecycleRegistry;

        $r1 := @parameter0: android.arch.lifecycle.Lifecycle$State;

        r0.<android.arch.lifecycle.LifecycleRegistry: android.arch.lifecycle.Lifecycle$State mState> = $r1;

        return;
    }
    public void removeObserver(android.arch.lifecycle.LifecycleObserver)
    {
        android.arch.lifecycle.LifecycleRegistry r0;
        android.arch.lifecycle.LifecycleObserver $r1;
        android.arch.core.internal.FastSafeIterableMap $r2;

        r0 := @this: android.arch.lifecycle.LifecycleRegistry;

        $r1 := @parameter0: android.arch.lifecycle.LifecycleObserver;

        $r2 = r0.<android.arch.lifecycle.LifecycleRegistry: android.arch.core.internal.FastSafeIterableMap mObserverMap>;

        virtualinvoke $r2.<android.arch.core.internal.FastSafeIterableMap: java.lang.Object remove(java.lang.Object)>($r1);

        return;
    }
