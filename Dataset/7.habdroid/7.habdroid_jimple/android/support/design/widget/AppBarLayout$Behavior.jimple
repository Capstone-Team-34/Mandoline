android.support.design.widget.AppBarLayout$Behavior extends android.support.design.widget.HeaderBehavior
private static final int INVALID_POSITION
private static final int MAX_OFFSET_ANIMATION_DURATION
private java.lang.ref.WeakReference mLastNestedScrollingChildRef
private android.animation.ValueAnimator mOffsetAnimator
private int mOffsetDelta
private int mOffsetToChildIndexOnLayout
private boolean mOffsetToChildIndexOnLayoutIsMinHeight
private float mOffsetToChildIndexOnLayoutPerc
private android.support.design.widget.AppBarLayout$Behavior$DragCallback mOnDragCallback
    public void <init>()
    {
        android.support.design.widget.AppBarLayout$Behavior r0;

        r0 := @this: android.support.design.widget.AppBarLayout$Behavior;

        specialinvoke r0.<android.support.design.widget.HeaderBehavior: void <init>()>();

        r0.<android.support.design.widget.AppBarLayout$Behavior: int mOffsetToChildIndexOnLayout> = -1;

        return;
    }
    public void <init>(android.content.Context, android.util.AttributeSet)
    {
        android.support.design.widget.AppBarLayout$Behavior r0;
        android.content.Context $r1;
        android.util.AttributeSet $r2;

        r0 := @this: android.support.design.widget.AppBarLayout$Behavior;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: android.util.AttributeSet;

        specialinvoke r0.<android.support.design.widget.HeaderBehavior: void <init>(android.content.Context,android.util.AttributeSet)>($r1, $r2);

        r0.<android.support.design.widget.AppBarLayout$Behavior: int mOffsetToChildIndexOnLayout> = -1;

        return;
    }
    static int access$000(android.support.design.widget.AppBarLayout$Behavior)
    {
        android.support.design.widget.AppBarLayout$Behavior $r0;
        int i0;

        $r0 := @parameter0: android.support.design.widget.AppBarLayout$Behavior;

        i0 = $r0.<android.support.design.widget.AppBarLayout$Behavior: int mOffsetDelta>;

        return i0;
    }
    private void animateOffsetTo(android.support.design.widget.CoordinatorLayout, android.support.design.widget.AppBarLayout, int, float)
    {
        android.support.design.widget.AppBarLayout$Behavior r0;
        android.support.design.widget.CoordinatorLayout $r1;
        android.support.design.widget.AppBarLayout $r2;
        int $i0, $i1;
        float f0, $f1;
        byte $b2;

        r0 := @this: android.support.design.widget.AppBarLayout$Behavior;

        $r1 := @parameter0: android.support.design.widget.CoordinatorLayout;

        $r2 := @parameter1: android.support.design.widget.AppBarLayout;

        $i0 := @parameter2: int;

        f0 := @parameter3: float;

        $i1 = virtualinvoke r0.<android.support.design.widget.AppBarLayout$Behavior: int getTopBottomOffsetForScrollingSibling()>();

        $i1 = $i1 - $i0;

        $i1 = staticinvoke <java.lang.Math: int abs(int)>($i1);

        f0 = staticinvoke <java.lang.Math: float abs(float)>(f0);

        $b2 = f0 cmpl 0.0F;

        if $b2 <= 0 goto label2;

        $f1 = (float) $i1;

        f0 = $f1 / f0;

        f0 = 1000.0F * f0;

        $i1 = staticinvoke <java.lang.Math: int round(float)>(f0);

        $i1 = $i1 * 3;

     label1:
        specialinvoke r0.<android.support.design.widget.AppBarLayout$Behavior: void animateOffsetWithDuration(android.support.design.widget.CoordinatorLayout,android.support.design.widget.AppBarLayout,int,int)>($r1, $r2, $i0, $i1);

        return;

     label2:
        f0 = (float) $i1;

        $i1 = virtualinvoke $r2.<android.support.design.widget.AppBarLayout: int getHeight()>();

        $f1 = (float) $i1;

        f0 = f0 / $f1;

        f0 = 1.0F + f0;

        f0 = f0 * 150.0F;

        $i1 = (int) f0;

        goto label1;
    }
    private void animateOffsetWithDuration(android.support.design.widget.CoordinatorLayout, android.support.design.widget.AppBarLayout, int, int)
    {
        android.support.design.widget.AppBarLayout$Behavior r0;
        android.support.design.widget.CoordinatorLayout $r1;
        android.support.design.widget.AppBarLayout $r2;
        int $i0, $i1, $i2;
        android.animation.ValueAnimator $r3;
        boolean $z0;
        android.view.animation.Interpolator $r4;
        android.support.design.widget.AppBarLayout$Behavior$1 $r5;
        long $l3;
        int[] $r6;

        r0 := @this: android.support.design.widget.AppBarLayout$Behavior;

        $r1 := @parameter0: android.support.design.widget.CoordinatorLayout;

        $r2 := @parameter1: android.support.design.widget.AppBarLayout;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $i2 = virtualinvoke r0.<android.support.design.widget.AppBarLayout$Behavior: int getTopBottomOffsetForScrollingSibling()>();

        if $i2 != $i0 goto label1;

        $r3 = r0.<android.support.design.widget.AppBarLayout$Behavior: android.animation.ValueAnimator mOffsetAnimator>;

        if $r3 == null goto label4;

        $r3 = r0.<android.support.design.widget.AppBarLayout$Behavior: android.animation.ValueAnimator mOffsetAnimator>;

        $z0 = virtualinvoke $r3.<android.animation.ValueAnimator: boolean isRunning()>();

        if $z0 == 0 goto label4;

        $r3 = r0.<android.support.design.widget.AppBarLayout$Behavior: android.animation.ValueAnimator mOffsetAnimator>;

        virtualinvoke $r3.<android.animation.ValueAnimator: void cancel()>();

        return;

     label1:
        $r3 = r0.<android.support.design.widget.AppBarLayout$Behavior: android.animation.ValueAnimator mOffsetAnimator>;

        if $r3 != null goto label3;

        $r3 = new android.animation.ValueAnimator;

        specialinvoke $r3.<android.animation.ValueAnimator: void <init>()>();

        r0.<android.support.design.widget.AppBarLayout$Behavior: android.animation.ValueAnimator mOffsetAnimator> = $r3;

        $r3 = r0.<android.support.design.widget.AppBarLayout$Behavior: android.animation.ValueAnimator mOffsetAnimator>;

        $r4 = <android.support.design.widget.AnimationUtils: android.view.animation.Interpolator DECELERATE_INTERPOLATOR>;

        virtualinvoke $r3.<android.animation.ValueAnimator: void setInterpolator(android.animation.TimeInterpolator)>($r4);

        $r3 = r0.<android.support.design.widget.AppBarLayout$Behavior: android.animation.ValueAnimator mOffsetAnimator>;

        $r5 = new android.support.design.widget.AppBarLayout$Behavior$1;

        specialinvoke $r5.<android.support.design.widget.AppBarLayout$Behavior$1: void <init>(android.support.design.widget.AppBarLayout$Behavior,android.support.design.widget.CoordinatorLayout,android.support.design.widget.AppBarLayout)>(r0, $r1, $r2);

        virtualinvoke $r3.<android.animation.ValueAnimator: void addUpdateListener(android.animation.ValueAnimator$AnimatorUpdateListener)>($r5);

     label2:
        $r3 = r0.<android.support.design.widget.AppBarLayout$Behavior: android.animation.ValueAnimator mOffsetAnimator>;

        $i1 = staticinvoke <java.lang.Math: int min(int,int)>($i1, 600);

        $l3 = (long) $i1;

        virtualinvoke $r3.<android.animation.ValueAnimator: android.animation.ValueAnimator setDuration(long)>($l3);

        $r3 = r0.<android.support.design.widget.AppBarLayout$Behavior: android.animation.ValueAnimator mOffsetAnimator>;

        $r6 = newarray (int)[2];

        $r6[0] = $i2;

        $r6[1] = $i0;

        virtualinvoke $r3.<android.animation.ValueAnimator: void setIntValues(int[])>($r6);

        $r3 = r0.<android.support.design.widget.AppBarLayout$Behavior: android.animation.ValueAnimator mOffsetAnimator>;

        virtualinvoke $r3.<android.animation.ValueAnimator: void start()>();

        return;

     label3:
        $r3 = r0.<android.support.design.widget.AppBarLayout$Behavior: android.animation.ValueAnimator mOffsetAnimator>;

        virtualinvoke $r3.<android.animation.ValueAnimator: void cancel()>();

        goto label2;

     label4:
        return;
    }
    private static boolean checkFlag(int, int)
    {
        int $i0, $i1;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i0 = $i0 & $i1;

        if $i0 != $i1 goto label1;

        return 1;

     label1:
        return 0;
    }
    private static android.view.View getAppBarChildOnOffset(android.support.design.widget.AppBarLayout, int)
    {
        android.support.design.widget.AppBarLayout $r0;
        int $i0, i1, $i2, $i3;
        android.view.View $r1;

        $r0 := @parameter0: android.support.design.widget.AppBarLayout;

        $i0 := @parameter1: int;

        $i0 = staticinvoke <java.lang.Math: int abs(int)>($i0);

        i1 = 0;

        $i2 = virtualinvoke $r0.<android.support.design.widget.AppBarLayout: int getChildCount()>();

     label1:
        if i1 >= $i2 goto label3;

        $r1 = virtualinvoke $r0.<android.support.design.widget.AppBarLayout: android.view.View getChildAt(int)>(i1);

        $i3 = virtualinvoke $r1.<android.view.View: int getTop()>();

        if $i0 < $i3 goto label2;

        $i3 = virtualinvoke $r1.<android.view.View: int getBottom()>();

        if $i0 > $i3 goto label2;

        return $r1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return null;
    }
    private int getChildIndexOnOffset(android.support.design.widget.AppBarLayout, int)
    {
        android.support.design.widget.AppBarLayout$Behavior r0;
        android.support.design.widget.AppBarLayout $r1;
        int $i0, i1, $i2, $i3, $i4;
        android.view.View $r2;

        r0 := @this: android.support.design.widget.AppBarLayout$Behavior;

        $r1 := @parameter0: android.support.design.widget.AppBarLayout;

        $i0 := @parameter1: int;

        i1 = 0;

        $i2 = virtualinvoke $r1.<android.support.design.widget.AppBarLayout: int getChildCount()>();

     label1:
        if i1 >= $i2 goto label3;

        $r2 = virtualinvoke $r1.<android.support.design.widget.AppBarLayout: android.view.View getChildAt(int)>(i1);

        $i3 = virtualinvoke $r2.<android.view.View: int getTop()>();

        $i4 = neg $i0;

        if $i3 > $i4 goto label2;

        $i3 = virtualinvoke $r2.<android.view.View: int getBottom()>();

        $i4 = neg $i0;

        if $i3 < $i4 goto label2;

        return i1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return -1;
    }
    private int interpolateOffset(android.support.design.widget.AppBarLayout, int)
    {
        android.support.design.widget.AppBarLayout$Behavior r0;
        android.support.design.widget.AppBarLayout $r1;
        int i0, i1, i2, $i3, $i4;
        float $f0, $f1, $f2;
        android.view.View $r2;
        android.view.ViewGroup$LayoutParams $r3;
        android.support.design.widget.AppBarLayout$LayoutParams r4;
        android.view.animation.Interpolator $r5;
        boolean $z0;

        r0 := @this: android.support.design.widget.AppBarLayout$Behavior;

        $r1 := @parameter0: android.support.design.widget.AppBarLayout;

        i1 := @parameter1: int;

        i0 = staticinvoke <java.lang.Math: int abs(int)>(i1);

        i2 = 0;

        $i3 = virtualinvoke $r1.<android.support.design.widget.AppBarLayout: int getChildCount()>();

     label1:
        if i2 >= $i3 goto label5;

        $r2 = virtualinvoke $r1.<android.support.design.widget.AppBarLayout: android.view.View getChildAt(int)>(i2);

        $r3 = virtualinvoke $r2.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        r4 = (android.support.design.widget.AppBarLayout$LayoutParams) $r3;

        $r5 = virtualinvoke r4.<android.support.design.widget.AppBarLayout$LayoutParams: android.view.animation.Interpolator getScrollInterpolator()>();

        $i4 = virtualinvoke $r2.<android.view.View: int getTop()>();

        if i0 < $i4 goto label4;

        $i4 = virtualinvoke $r2.<android.view.View: int getBottom()>();

        if i0 > $i4 goto label4;

        if $r5 == null goto label5;

        i2 = 0;

        $i3 = virtualinvoke r4.<android.support.design.widget.AppBarLayout$LayoutParams: int getScrollFlags()>();

        $i4 = $i3 & 1;

        if $i4 == 0 goto label2;

        i2 = virtualinvoke $r2.<android.view.View: int getHeight()>();

        $i4 = r4.<android.support.design.widget.AppBarLayout$LayoutParams: int topMargin>;

        i2 = i2 + $i4;

        $i4 = r4.<android.support.design.widget.AppBarLayout$LayoutParams: int bottomMargin>;

        i2 = i2 + $i4;

        $i3 = $i3 & 2;

        if $i3 == 0 goto label2;

        $i3 = staticinvoke <android.support.v4.view.ViewCompat: int getMinimumHeight(android.view.View)>($r2);

        i2 = i2 - $i3;

     label2:
        $z0 = staticinvoke <android.support.v4.view.ViewCompat: boolean getFitsSystemWindows(android.view.View)>($r2);

        if $z0 == 0 goto label3;

        $i3 = virtualinvoke $r1.<android.support.design.widget.AppBarLayout: int getTopInset()>();

        i2 = i2 - $i3;

     label3:
        if i2 <= 0 goto label5;

        $i3 = virtualinvoke $r2.<android.view.View: int getTop()>();

        i0 = i0 - $i3;

        $f1 = (float) i2;

        $f2 = (float) i0;

        $f0 = (float) i2;

        $f0 = $f2 / $f0;

        $f0 = interfaceinvoke $r5.<android.view.animation.Interpolator: float getInterpolation(float)>($f0);

        $f1 = $f1 * $f0;

        i0 = staticinvoke <java.lang.Math: int round(float)>($f1);

        i1 = staticinvoke <java.lang.Integer: int signum(int)>(i1);

        i2 = virtualinvoke $r2.<android.view.View: int getTop()>();

        i0 = i2 + i0;

        i1 = i1 * i0;

        return i1;

     label4:
        i2 = i2 + 1;

        goto label1;

     label5:
        return i1;
    }
    private boolean shouldJumpElevationState(android.support.design.widget.CoordinatorLayout, android.support.design.widget.AppBarLayout)
    {
        android.support.design.widget.AppBarLayout$Behavior r0;
        android.support.design.widget.CoordinatorLayout $r1;
        android.support.design.widget.AppBarLayout $r2;
        java.util.List $r3;
        int i0, $i1;
        java.lang.Object $r4;
        android.view.View r5;
        android.view.ViewGroup$LayoutParams $r6;
        android.support.design.widget.CoordinatorLayout$LayoutParams r7;
        android.support.design.widget.CoordinatorLayout$Behavior $r8;
        boolean $z0;
        android.support.design.widget.AppBarLayout$ScrollingViewBehavior r9;

        r0 := @this: android.support.design.widget.AppBarLayout$Behavior;

        $r1 := @parameter0: android.support.design.widget.CoordinatorLayout;

        $r2 := @parameter1: android.support.design.widget.AppBarLayout;

        $r3 = virtualinvoke $r1.<android.support.design.widget.CoordinatorLayout: java.util.List getDependents(android.view.View)>($r2);

        i0 = 0;

        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

     label1:
        if i0 >= $i1 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i0);

        r5 = (android.view.View) $r4;

        $r6 = virtualinvoke r5.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        r7 = (android.support.design.widget.CoordinatorLayout$LayoutParams) $r6;

        $r8 = virtualinvoke r7.<android.support.design.widget.CoordinatorLayout$LayoutParams: android.support.design.widget.CoordinatorLayout$Behavior getBehavior()>();

        $z0 = $r8 instanceof android.support.design.widget.AppBarLayout$ScrollingViewBehavior;

        if $z0 == 0 goto label2;

        r9 = (android.support.design.widget.AppBarLayout$ScrollingViewBehavior) $r8;

        i0 = virtualinvoke r9.<android.support.design.widget.AppBarLayout$ScrollingViewBehavior: int getOverlayTop()>();

        if i0 == 0 goto label3;

        return 1;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return 0;
    }
    private void snapToChildIfNeeded(android.support.design.widget.CoordinatorLayout, android.support.design.widget.AppBarLayout)
    {
        android.support.design.widget.AppBarLayout$Behavior r0;
        android.support.design.widget.CoordinatorLayout $r1;
        android.support.design.widget.AppBarLayout $r2;
        int i0, $i1, $i2, $i3, $i4, $i5;
        android.view.View $r3;
        android.view.ViewGroup$LayoutParams $r4;
        android.support.design.widget.AppBarLayout$LayoutParams r5;
        boolean $z0;

        r0 := @this: android.support.design.widget.AppBarLayout$Behavior;

        $r1 := @parameter0: android.support.design.widget.CoordinatorLayout;

        $r2 := @parameter1: android.support.design.widget.AppBarLayout;

        $i1 = virtualinvoke r0.<android.support.design.widget.AppBarLayout$Behavior: int getTopBottomOffsetForScrollingSibling()>();

        $i2 = specialinvoke r0.<android.support.design.widget.AppBarLayout$Behavior: int getChildIndexOnOffset(android.support.design.widget.AppBarLayout,int)>($r2, $i1);

        if $i2 < 0 goto label7;

        $r3 = virtualinvoke $r2.<android.support.design.widget.AppBarLayout: android.view.View getChildAt(int)>($i2);

        $r4 = virtualinvoke $r3.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        r5 = (android.support.design.widget.AppBarLayout$LayoutParams) $r4;

        i0 = virtualinvoke r5.<android.support.design.widget.AppBarLayout$LayoutParams: int getScrollFlags()>();

        $i3 = i0 & 17;

        if $i3 != 17 goto label7;

        $i3 = virtualinvoke $r3.<android.view.View: int getTop()>();

        $i3 = neg $i3;

        $i4 = virtualinvoke $r3.<android.view.View: int getBottom()>();

        $i4 = neg $i4;

        $i5 = virtualinvoke $r2.<android.support.design.widget.AppBarLayout: int getChildCount()>();

        $i5 = $i5 + -1;

        if $i2 != $i5 goto label1;

        $i2 = virtualinvoke $r2.<android.support.design.widget.AppBarLayout: int getTopInset()>();

        $i4 = $i4 + $i2;

     label1:
        $z0 = staticinvoke <android.support.design.widget.AppBarLayout$Behavior: boolean checkFlag(int,int)>(i0, 2);

        if $z0 == 0 goto label4;

        i0 = staticinvoke <android.support.v4.view.ViewCompat: int getMinimumHeight(android.view.View)>($r3);

        $i4 = $i4 + i0;

     label2:
        i0 = $i4 + $i3;

        i0 = i0 / 2;

        if $i1 >= i0 goto label6;

        $i1 = $i4;

     label3:
        $i3 = virtualinvoke $r2.<android.support.design.widget.AppBarLayout: int getTotalScrollRange()>();

        $i3 = neg $i3;

        $i1 = staticinvoke <android.support.v4.math.MathUtils: int clamp(int,int,int)>($i1, $i3, 0);

        specialinvoke r0.<android.support.design.widget.AppBarLayout$Behavior: void animateOffsetTo(android.support.design.widget.CoordinatorLayout,android.support.design.widget.AppBarLayout,int,float)>($r1, $r2, $i1, 0.0F);

        return;

     label4:
        $z0 = staticinvoke <android.support.design.widget.AppBarLayout$Behavior: boolean checkFlag(int,int)>(i0, 5);

        if $z0 == 0 goto label2;

        i0 = staticinvoke <android.support.v4.view.ViewCompat: int getMinimumHeight(android.view.View)>($r3);

        i0 = $i4 + i0;

        if $i1 >= i0 goto label5;

        $i3 = i0;

        goto label2;

     label5:
        $i4 = i0;

        goto label2;

     label6:
        $i1 = $i3;

        goto label3;

     label7:
        return;
    }
    private void updateAppBarLayoutDrawableState(android.support.design.widget.CoordinatorLayout, android.support.design.widget.AppBarLayout, int, int, boolean)
    {
        android.support.design.widget.AppBarLayout$Behavior r0;
        android.support.design.widget.CoordinatorLayout $r1;
        android.support.design.widget.AppBarLayout $r2;
        int $i0, $i1, $i2, $i3;
        boolean $z0, z1;
        android.view.View $r3;
        android.view.ViewGroup$LayoutParams $r4;
        android.support.design.widget.AppBarLayout$LayoutParams r5;

        r0 := @this: android.support.design.widget.AppBarLayout$Behavior;

        $r1 := @parameter0: android.support.design.widget.CoordinatorLayout;

        $r2 := @parameter1: android.support.design.widget.AppBarLayout;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $z0 := @parameter4: boolean;

        $r3 = staticinvoke <android.support.design.widget.AppBarLayout$Behavior: android.view.View getAppBarChildOnOffset(android.support.design.widget.AppBarLayout,int)>($r2, $i0);

        if $r3 == null goto label6;

        $r4 = virtualinvoke $r3.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        r5 = (android.support.design.widget.AppBarLayout$LayoutParams) $r4;

        $i2 = virtualinvoke r5.<android.support.design.widget.AppBarLayout$LayoutParams: int getScrollFlags()>();

        z1 = 0;

        $i3 = $i2 & 1;

        if $i3 == 0 goto label1;

        $i3 = staticinvoke <android.support.v4.view.ViewCompat: int getMinimumHeight(android.view.View)>($r3);

        if $i1 <= 0 goto label4;

        $i1 = $i2 & 12;

        if $i1 == 0 goto label4;

        $i0 = neg $i0;

        $i1 = virtualinvoke $r3.<android.view.View: int getBottom()>();

        $i1 = $i1 - $i3;

        $i3 = virtualinvoke $r2.<android.support.design.widget.AppBarLayout: int getTopInset()>();

        $i1 = $i1 - $i3;

        if $i0 < $i1 goto label3;

        z1 = 1;

     label1:
        z1 = virtualinvoke $r2.<android.support.design.widget.AppBarLayout: boolean setCollapsedState(boolean)>(z1);

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 11 goto label6;

        if $z0 != 0 goto label2;

        if z1 == 0 goto label6;

        $z0 = specialinvoke r0.<android.support.design.widget.AppBarLayout$Behavior: boolean shouldJumpElevationState(android.support.design.widget.CoordinatorLayout,android.support.design.widget.AppBarLayout)>($r1, $r2);

        if $z0 == 0 goto label6;

     label2:
        virtualinvoke $r2.<android.support.design.widget.AppBarLayout: void jumpDrawablesToCurrentState()>();

        return;

     label3:
        z1 = 0;

        goto label1;

     label4:
        $i1 = $i2 & 2;

        if $i1 == 0 goto label1;

        $i0 = neg $i0;

        $i1 = virtualinvoke $r3.<android.view.View: int getBottom()>();

        $i1 = $i1 - $i3;

        $i3 = virtualinvoke $r2.<android.support.design.widget.AppBarLayout: int getTopInset()>();

        $i1 = $i1 - $i3;

        if $i0 < $i1 goto label5;

        z1 = 1;

        goto label1;

     label5:
        z1 = 0;

        goto label1;

     label6:
        return;
    }
    boolean canDragView(android.support.design.widget.AppBarLayout)
    {
        android.support.design.widget.AppBarLayout$Behavior r0;
        android.support.design.widget.AppBarLayout $r1;
        android.support.design.widget.AppBarLayout$Behavior$DragCallback $r2;
        boolean $z0;
        java.lang.ref.WeakReference $r3;
        java.lang.Object $r4;
        android.view.View r5;

        r0 := @this: android.support.design.widget.AppBarLayout$Behavior;

        $r1 := @parameter0: android.support.design.widget.AppBarLayout;

        $r2 = r0.<android.support.design.widget.AppBarLayout$Behavior: android.support.design.widget.AppBarLayout$Behavior$DragCallback mOnDragCallback>;

        if $r2 == null goto label1;

        $r2 = r0.<android.support.design.widget.AppBarLayout$Behavior: android.support.design.widget.AppBarLayout$Behavior$DragCallback mOnDragCallback>;

        $z0 = virtualinvoke $r2.<android.support.design.widget.AppBarLayout$Behavior$DragCallback: boolean canDrag(android.support.design.widget.AppBarLayout)>($r1);

        return $z0;

     label1:
        $r3 = r0.<android.support.design.widget.AppBarLayout$Behavior: java.lang.ref.WeakReference mLastNestedScrollingChildRef>;

        if $r3 == null goto label3;

        $r3 = r0.<android.support.design.widget.AppBarLayout$Behavior: java.lang.ref.WeakReference mLastNestedScrollingChildRef>;

        $r4 = virtualinvoke $r3.<java.lang.ref.WeakReference: java.lang.Object get()>();

        r5 = (android.view.View) $r4;

        if r5 == null goto label2;

        $z0 = virtualinvoke r5.<android.view.View: boolean isShown()>();

        if $z0 == 0 goto label2;

        $z0 = virtualinvoke r5.<android.view.View: boolean canScrollVertically(int)>(-1);

        if $z0 == 0 goto label3;

     label2:
        return 0;

     label3:
        return 1;
    }
    volatile boolean canDragView(android.view.View)
    {
        android.support.design.widget.AppBarLayout$Behavior r0;
        boolean $z0;
        android.view.View $r1;
        android.support.design.widget.AppBarLayout $r2;

        r0 := @this: android.support.design.widget.AppBarLayout$Behavior;

        $r1 := @parameter0: android.view.View;

        $r2 = (android.support.design.widget.AppBarLayout) $r1;

        $z0 = virtualinvoke r0.<android.support.design.widget.AppBarLayout$Behavior: boolean canDragView(android.support.design.widget.AppBarLayout)>($r2);

        return $z0;
    }
    public volatile int getLeftAndRightOffset()
    {
        android.support.design.widget.AppBarLayout$Behavior r0;
        int $i0;

        r0 := @this: android.support.design.widget.AppBarLayout$Behavior;

        $i0 = specialinvoke r0.<android.support.design.widget.HeaderBehavior: int getLeftAndRightOffset()>();

        return $i0;
    }
    int getMaxDragOffset(android.support.design.widget.AppBarLayout)
    {
        android.support.design.widget.AppBarLayout$Behavior r0;
        android.support.design.widget.AppBarLayout $r1;
        int $i0;

        r0 := @this: android.support.design.widget.AppBarLayout$Behavior;

        $r1 := @parameter0: android.support.design.widget.AppBarLayout;

        $i0 = virtualinvoke $r1.<android.support.design.widget.AppBarLayout: int getDownNestedScrollRange()>();

        $i0 = neg $i0;

        return $i0;
    }
    volatile int getMaxDragOffset(android.view.View)
    {
        android.support.design.widget.AppBarLayout$Behavior r0;
        int $i0;
        android.view.View $r1;
        android.support.design.widget.AppBarLayout $r2;

        r0 := @this: android.support.design.widget.AppBarLayout$Behavior;

        $r1 := @parameter0: android.view.View;

        $r2 = (android.support.design.widget.AppBarLayout) $r1;

        $i0 = virtualinvoke r0.<android.support.design.widget.AppBarLayout$Behavior: int getMaxDragOffset(android.support.design.widget.AppBarLayout)>($r2);

        return $i0;
    }
    int getScrollRangeForDragFling(android.support.design.widget.AppBarLayout)
    {
        android.support.design.widget.AppBarLayout$Behavior r0;
        android.support.design.widget.AppBarLayout $r1;
        int $i0;

        r0 := @this: android.support.design.widget.AppBarLayout$Behavior;

        $r1 := @parameter0: android.support.design.widget.AppBarLayout;

        $i0 = virtualinvoke $r1.<android.support.design.widget.AppBarLayout: int getTotalScrollRange()>();

        return $i0;
    }
    volatile int getScrollRangeForDragFling(android.view.View)
    {
        android.support.design.widget.AppBarLayout$Behavior r0;
        int $i0;
        android.view.View $r1;
        android.support.design.widget.AppBarLayout $r2;

        r0 := @this: android.support.design.widget.AppBarLayout$Behavior;

        $r1 := @parameter0: android.view.View;

        $r2 = (android.support.design.widget.AppBarLayout) $r1;

        $i0 = virtualinvoke r0.<android.support.design.widget.AppBarLayout$Behavior: int getScrollRangeForDragFling(android.support.design.widget.AppBarLayout)>($r2);

        return $i0;
    }
    public volatile int getTopAndBottomOffset()
    {
        android.support.design.widget.AppBarLayout$Behavior r0;
        int $i0;

        r0 := @this: android.support.design.widget.AppBarLayout$Behavior;

        $i0 = specialinvoke r0.<android.support.design.widget.HeaderBehavior: int getTopAndBottomOffset()>();

        return $i0;
    }
    int getTopBottomOffsetForScrollingSibling()
    {
        android.support.design.widget.AppBarLayout$Behavior r0;
        int $i0, $i1;

        r0 := @this: android.support.design.widget.AppBarLayout$Behavior;

        $i1 = virtualinvoke r0.<android.support.design.widget.AppBarLayout$Behavior: int getTopAndBottomOffset()>();

        $i0 = r0.<android.support.design.widget.AppBarLayout$Behavior: int mOffsetDelta>;

        $i0 = $i1 + $i0;

        return $i0;
    }
    boolean isOffsetAnimatorRunning()
    {
        android.support.design.widget.AppBarLayout$Behavior r0;
        boolean $z0;
        android.animation.ValueAnimator $r1;

        r0 := @this: android.support.design.widget.AppBarLayout$Behavior;

        $r1 = r0.<android.support.design.widget.AppBarLayout$Behavior: android.animation.ValueAnimator mOffsetAnimator>;

        if $r1 == null goto label1;

        $r1 = r0.<android.support.design.widget.AppBarLayout$Behavior: android.animation.ValueAnimator mOffsetAnimator>;

        $z0 = virtualinvoke $r1.<android.animation.ValueAnimator: boolean isRunning()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    void onFlingFinished(android.support.design.widget.CoordinatorLayout, android.support.design.widget.AppBarLayout)
    {
        android.support.design.widget.AppBarLayout$Behavior r0;
        android.support.design.widget.CoordinatorLayout $r1;
        android.support.design.widget.AppBarLayout $r2;

        r0 := @this: android.support.design.widget.AppBarLayout$Behavior;

        $r1 := @parameter0: android.support.design.widget.CoordinatorLayout;

        $r2 := @parameter1: android.support.design.widget.AppBarLayout;

        specialinvoke r0.<android.support.design.widget.AppBarLayout$Behavior: void snapToChildIfNeeded(android.support.design.widget.CoordinatorLayout,android.support.design.widget.AppBarLayout)>($r1, $r2);

        return;
    }
    volatile void onFlingFinished(android.support.design.widget.CoordinatorLayout, android.view.View)
    {
        android.support.design.widget.AppBarLayout$Behavior r0;
        android.support.design.widget.CoordinatorLayout $r1;
        android.view.View $r2;
        android.support.design.widget.AppBarLayout $r3;

        r0 := @this: android.support.design.widget.AppBarLayout$Behavior;

        $r1 := @parameter0: android.support.design.widget.CoordinatorLayout;

        $r2 := @parameter1: android.view.View;

        $r3 = (android.support.design.widget.AppBarLayout) $r2;

        virtualinvoke r0.<android.support.design.widget.AppBarLayout$Behavior: void onFlingFinished(android.support.design.widget.CoordinatorLayout,android.support.design.widget.AppBarLayout)>($r1, $r3);

        return;
    }
    public boolean onLayoutChild(android.support.design.widget.CoordinatorLayout, android.support.design.widget.AppBarLayout, int)
    {
        android.support.design.widget.AppBarLayout$Behavior r0;
        android.support.design.widget.CoordinatorLayout $r1;
        android.support.design.widget.AppBarLayout $r2;
        int $i0, $i1, $i2;
        boolean $z0, $z1;
        android.view.View $r3;
        float $f0, $f1;

        r0 := @this: android.support.design.widget.AppBarLayout$Behavior;

        $r1 := @parameter0: android.support.design.widget.CoordinatorLayout;

        $r2 := @parameter1: android.support.design.widget.AppBarLayout;

        $i0 := @parameter2: int;

        $z0 = specialinvoke r0.<android.support.design.widget.HeaderBehavior: boolean onLayoutChild(android.support.design.widget.CoordinatorLayout,android.view.View,int)>($r1, $r2, $i0);

        $i0 = virtualinvoke $r2.<android.support.design.widget.AppBarLayout: int getPendingAction()>();

        $i1 = r0.<android.support.design.widget.AppBarLayout$Behavior: int mOffsetToChildIndexOnLayout>;

        if $i1 < 0 goto label4;

        $i1 = $i0 & 8;

        if $i1 != 0 goto label4;

        $i0 = r0.<android.support.design.widget.AppBarLayout$Behavior: int mOffsetToChildIndexOnLayout>;

        $r3 = virtualinvoke $r2.<android.support.design.widget.AppBarLayout: android.view.View getChildAt(int)>($i0);

        $i0 = virtualinvoke $r3.<android.view.View: int getBottom()>();

        $i0 = neg $i0;

        $z1 = r0.<android.support.design.widget.AppBarLayout$Behavior: boolean mOffsetToChildIndexOnLayoutIsMinHeight>;

        if $z1 == 0 goto label3;

        $i1 = staticinvoke <android.support.v4.view.ViewCompat: int getMinimumHeight(android.view.View)>($r3);

        $i2 = virtualinvoke $r2.<android.support.design.widget.AppBarLayout: int getTopInset()>();

        $i1 = $i1 + $i2;

        $i0 = $i0 + $i1;

     label1:
        virtualinvoke r0.<android.support.design.widget.AppBarLayout$Behavior: int setHeaderTopBottomOffset(android.support.design.widget.CoordinatorLayout,android.view.View,int)>($r1, $r2, $i0);

     label2:
        virtualinvoke $r2.<android.support.design.widget.AppBarLayout: void resetPendingAction()>();

        r0.<android.support.design.widget.AppBarLayout$Behavior: int mOffsetToChildIndexOnLayout> = -1;

        $i0 = virtualinvoke r0.<android.support.design.widget.AppBarLayout$Behavior: int getTopAndBottomOffset()>();

        $i1 = virtualinvoke $r2.<android.support.design.widget.AppBarLayout: int getTotalScrollRange()>();

        $i1 = neg $i1;

        $i0 = staticinvoke <android.support.v4.math.MathUtils: int clamp(int,int,int)>($i0, $i1, 0);

        virtualinvoke r0.<android.support.design.widget.AppBarLayout$Behavior: boolean setTopAndBottomOffset(int)>($i0);

        $i0 = virtualinvoke r0.<android.support.design.widget.AppBarLayout$Behavior: int getTopAndBottomOffset()>();

        specialinvoke r0.<android.support.design.widget.AppBarLayout$Behavior: void updateAppBarLayoutDrawableState(android.support.design.widget.CoordinatorLayout,android.support.design.widget.AppBarLayout,int,int,boolean)>($r1, $r2, $i0, 0, 1);

        $i0 = virtualinvoke r0.<android.support.design.widget.AppBarLayout$Behavior: int getTopAndBottomOffset()>();

        virtualinvoke $r2.<android.support.design.widget.AppBarLayout: void dispatchOffsetUpdates(int)>($i0);

        return $z0;

     label3:
        $i1 = virtualinvoke $r3.<android.view.View: int getHeight()>();

        $f0 = (float) $i1;

        $f1 = r0.<android.support.design.widget.AppBarLayout$Behavior: float mOffsetToChildIndexOnLayoutPerc>;

        $f0 = $f0 * $f1;

        $i1 = staticinvoke <java.lang.Math: int round(float)>($f0);

        $i0 = $i0 + $i1;

        goto label1;

     label4:
        if $i0 == 0 goto label2;

        $i1 = $i0 & 4;

        if $i1 == 0 goto label6;

        $z1 = 1;

     label5:
        $i1 = $i0 & 2;

        if $i1 == 0 goto label8;

        $i0 = virtualinvoke $r2.<android.support.design.widget.AppBarLayout: int getUpNestedPreScrollRange()>();

        $i0 = neg $i0;

        if $z1 == 0 goto label7;

        specialinvoke r0.<android.support.design.widget.AppBarLayout$Behavior: void animateOffsetTo(android.support.design.widget.CoordinatorLayout,android.support.design.widget.AppBarLayout,int,float)>($r1, $r2, $i0, 0.0F);

        goto label2;

     label6:
        $z1 = 0;

        goto label5;

     label7:
        virtualinvoke r0.<android.support.design.widget.AppBarLayout$Behavior: int setHeaderTopBottomOffset(android.support.design.widget.CoordinatorLayout,android.view.View,int)>($r1, $r2, $i0);

        goto label2;

     label8:
        $i0 = $i0 & 1;

        if $i0 == 0 goto label2;

        if $z1 == 0 goto label9;

        specialinvoke r0.<android.support.design.widget.AppBarLayout$Behavior: void animateOffsetTo(android.support.design.widget.CoordinatorLayout,android.support.design.widget.AppBarLayout,int,float)>($r1, $r2, 0, 0.0F);

        goto label2;

     label9:
        virtualinvoke r0.<android.support.design.widget.AppBarLayout$Behavior: int setHeaderTopBottomOffset(android.support.design.widget.CoordinatorLayout,android.view.View,int)>($r1, $r2, 0);

        goto label2;
    }
    public volatile boolean onLayoutChild(android.support.design.widget.CoordinatorLayout, android.view.View, int)
    {
        android.support.design.widget.AppBarLayout$Behavior r0;
        android.support.design.widget.CoordinatorLayout $r1;
        int $i0;
        boolean $z0;
        android.view.View $r2;
        android.support.design.widget.AppBarLayout $r3;

        r0 := @this: android.support.design.widget.AppBarLayout$Behavior;

        $r1 := @parameter0: android.support.design.widget.CoordinatorLayout;

        $r2 := @parameter1: android.view.View;

        $i0 := @parameter2: int;

        $r3 = (android.support.design.widget.AppBarLayout) $r2;

        $z0 = virtualinvoke r0.<android.support.design.widget.AppBarLayout$Behavior: boolean onLayoutChild(android.support.design.widget.CoordinatorLayout,android.support.design.widget.AppBarLayout,int)>($r1, $r3, $i0);

        return $z0;
    }
    public boolean onMeasureChild(android.support.design.widget.CoordinatorLayout, android.support.design.widget.AppBarLayout, int, int, int, int)
    {
        android.support.design.widget.AppBarLayout$Behavior r0;
        android.support.design.widget.CoordinatorLayout $r1;
        android.support.design.widget.AppBarLayout $r2;
        int $i0, $i1, $i2, $i3, $i4;
        android.view.ViewGroup$LayoutParams $r3;
        android.support.design.widget.CoordinatorLayout$LayoutParams r4;
        boolean $z0;

        r0 := @this: android.support.design.widget.AppBarLayout$Behavior;

        $r1 := @parameter0: android.support.design.widget.CoordinatorLayout;

        $r2 := @parameter1: android.support.design.widget.AppBarLayout;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        $i3 := @parameter5: int;

        $r3 = virtualinvoke $r2.<android.support.design.widget.AppBarLayout: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        r4 = (android.support.design.widget.CoordinatorLayout$LayoutParams) $r3;

        $i4 = r4.<android.support.design.widget.CoordinatorLayout$LayoutParams: int height>;

        if $i4 != -2 goto label1;

        $i2 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>(0, 0);

        virtualinvoke $r1.<android.support.design.widget.CoordinatorLayout: void onMeasureChild(android.view.View,int,int,int,int)>($r2, $i0, $i1, $i2, $i3);

        return 1;

     label1:
        $z0 = specialinvoke r0.<android.support.design.widget.HeaderBehavior: boolean onMeasureChild(android.support.design.widget.CoordinatorLayout,android.view.View,int,int,int,int)>($r1, $r2, $i0, $i1, $i2, $i3);

        return $z0;
    }
    public volatile boolean onMeasureChild(android.support.design.widget.CoordinatorLayout, android.view.View, int, int, int, int)
    {
        android.support.design.widget.AppBarLayout$Behavior r0;
        android.support.design.widget.CoordinatorLayout $r1;
        android.view.View $r2;
        int $i0, $i1, $i2, $i3;
        boolean $z0;
        android.support.design.widget.AppBarLayout $r3;

        r0 := @this: android.support.design.widget.AppBarLayout$Behavior;

        $r1 := @parameter0: android.support.design.widget.CoordinatorLayout;

        $r2 := @parameter1: android.view.View;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        $i3 := @parameter5: int;

        $r3 = (android.support.design.widget.AppBarLayout) $r2;

        $z0 = virtualinvoke r0.<android.support.design.widget.AppBarLayout$Behavior: boolean onMeasureChild(android.support.design.widget.CoordinatorLayout,android.support.design.widget.AppBarLayout,int,int,int,int)>($r1, $r3, $i0, $i1, $i2, $i3);

        return $z0;
    }
    public void onNestedPreScroll(android.support.design.widget.CoordinatorLayout, android.support.design.widget.AppBarLayout, android.view.View, int, int, int[], int)
    {
        android.support.design.widget.AppBarLayout$Behavior r0;
        android.support.design.widget.CoordinatorLayout $r1;
        android.support.design.widget.AppBarLayout $r2;
        android.view.View $r3;
        int $i0, $i1, $i2;
        int[] $r4;

        r0 := @this: android.support.design.widget.AppBarLayout$Behavior;

        $r1 := @parameter0: android.support.design.widget.CoordinatorLayout;

        $r2 := @parameter1: android.support.design.widget.AppBarLayout;

        $r3 := @parameter2: android.view.View;

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $r4 := @parameter5: int[];

        $i2 := @parameter6: int;

        if $i1 == 0 goto label3;

        if $i1 >= 0 goto label2;

        $i0 = virtualinvoke $r2.<android.support.design.widget.AppBarLayout: int getTotalScrollRange()>();

        $i0 = neg $i0;

        $i2 = virtualinvoke $r2.<android.support.design.widget.AppBarLayout: int getDownNestedPreScrollRange()>();

        $i2 = $i0 + $i2;

     label1:
        if $i0 == $i2 goto label3;

        $i0 = virtualinvoke r0.<android.support.design.widget.AppBarLayout$Behavior: int scroll(android.support.design.widget.CoordinatorLayout,android.view.View,int,int,int)>($r1, $r2, $i1, $i0, $i2);

        $r4[1] = $i0;

        return;

     label2:
        $i0 = virtualinvoke $r2.<android.support.design.widget.AppBarLayout: int getUpNestedPreScrollRange()>();

        $i0 = neg $i0;

        $i2 = 0;

        goto label1;

     label3:
        return;
    }
    public volatile void onNestedPreScroll(android.support.design.widget.CoordinatorLayout, android.view.View, android.view.View, int, int, int[], int)
    {
        android.support.design.widget.AppBarLayout$Behavior r0;
        android.support.design.widget.CoordinatorLayout $r1;
        android.view.View $r2, $r3;
        int $i0, $i1, $i2;
        int[] $r4;
        android.support.design.widget.AppBarLayout $r5;

        r0 := @this: android.support.design.widget.AppBarLayout$Behavior;

        $r1 := @parameter0: android.support.design.widget.CoordinatorLayout;

        $r2 := @parameter1: android.view.View;

        $r3 := @parameter2: android.view.View;

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $r4 := @parameter5: int[];

        $i2 := @parameter6: int;

        $r5 = (android.support.design.widget.AppBarLayout) $r2;

        virtualinvoke r0.<android.support.design.widget.AppBarLayout$Behavior: void onNestedPreScroll(android.support.design.widget.CoordinatorLayout,android.support.design.widget.AppBarLayout,android.view.View,int,int,int[],int)>($r1, $r5, $r3, $i0, $i1, $r4, $i2);

        return;
    }
    public void onNestedScroll(android.support.design.widget.CoordinatorLayout, android.support.design.widget.AppBarLayout, android.view.View, int, int, int, int, int)
    {
        android.support.design.widget.AppBarLayout$Behavior r0;
        android.support.design.widget.CoordinatorLayout $r1;
        android.support.design.widget.AppBarLayout $r2;
        android.view.View $r3;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: android.support.design.widget.AppBarLayout$Behavior;

        $r1 := @parameter0: android.support.design.widget.CoordinatorLayout;

        $r2 := @parameter1: android.support.design.widget.AppBarLayout;

        $r3 := @parameter2: android.view.View;

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $i2 := @parameter5: int;

        $i3 := @parameter6: int;

        $i4 := @parameter7: int;

        if $i3 >= 0 goto label1;

        $i0 = virtualinvoke $r2.<android.support.design.widget.AppBarLayout: int getDownNestedScrollRange()>();

        $i0 = neg $i0;

        virtualinvoke r0.<android.support.design.widget.AppBarLayout$Behavior: int scroll(android.support.design.widget.CoordinatorLayout,android.view.View,int,int,int)>($r1, $r2, $i3, $i0, 0);

     label1:
        return;
    }
    public volatile void onNestedScroll(android.support.design.widget.CoordinatorLayout, android.view.View, android.view.View, int, int, int, int, int)
    {
        android.support.design.widget.AppBarLayout$Behavior r0;
        android.support.design.widget.CoordinatorLayout $r1;
        android.view.View $r2, $r3;
        int $i0, $i1, $i2, $i3, $i4;
        android.support.design.widget.AppBarLayout $r4;

        r0 := @this: android.support.design.widget.AppBarLayout$Behavior;

        $r1 := @parameter0: android.support.design.widget.CoordinatorLayout;

        $r2 := @parameter1: android.view.View;

        $r3 := @parameter2: android.view.View;

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $i2 := @parameter5: int;

        $i3 := @parameter6: int;

        $i4 := @parameter7: int;

        $r4 = (android.support.design.widget.AppBarLayout) $r2;

        virtualinvoke r0.<android.support.design.widget.AppBarLayout$Behavior: void onNestedScroll(android.support.design.widget.CoordinatorLayout,android.support.design.widget.AppBarLayout,android.view.View,int,int,int,int,int)>($r1, $r4, $r3, $i0, $i1, $i2, $i3, $i4);

        return;
    }
    public void onRestoreInstanceState(android.support.design.widget.CoordinatorLayout, android.support.design.widget.AppBarLayout, android.os.Parcelable)
    {
        android.support.design.widget.AppBarLayout$Behavior r0;
        android.support.design.widget.CoordinatorLayout $r1;
        android.support.design.widget.AppBarLayout $r2;
        android.os.Parcelable $r3;
        boolean $z0;
        android.support.design.widget.AppBarLayout$Behavior$SavedState r4;
        int $i0;
        float $f0;

        r0 := @this: android.support.design.widget.AppBarLayout$Behavior;

        $r1 := @parameter0: android.support.design.widget.CoordinatorLayout;

        $r2 := @parameter1: android.support.design.widget.AppBarLayout;

        $r3 := @parameter2: android.os.Parcelable;

        $z0 = $r3 instanceof android.support.design.widget.AppBarLayout$Behavior$SavedState;

        if $z0 == 0 goto label1;

        r4 = (android.support.design.widget.AppBarLayout$Behavior$SavedState) $r3;

        $r3 = virtualinvoke r4.<android.support.design.widget.AppBarLayout$Behavior$SavedState: android.os.Parcelable getSuperState()>();

        specialinvoke r0.<android.support.design.widget.HeaderBehavior: void onRestoreInstanceState(android.support.design.widget.CoordinatorLayout,android.view.View,android.os.Parcelable)>($r1, $r2, $r3);

        $i0 = r4.<android.support.design.widget.AppBarLayout$Behavior$SavedState: int firstVisibleChildIndex>;

        r0.<android.support.design.widget.AppBarLayout$Behavior: int mOffsetToChildIndexOnLayout> = $i0;

        $f0 = r4.<android.support.design.widget.AppBarLayout$Behavior$SavedState: float firstVisibleChildPercentageShown>;

        r0.<android.support.design.widget.AppBarLayout$Behavior: float mOffsetToChildIndexOnLayoutPerc> = $f0;

        $z0 = r4.<android.support.design.widget.AppBarLayout$Behavior$SavedState: boolean firstVisibleChildAtMinimumHeight>;

        r0.<android.support.design.widget.AppBarLayout$Behavior: boolean mOffsetToChildIndexOnLayoutIsMinHeight> = $z0;

        return;

     label1:
        specialinvoke r0.<android.support.design.widget.HeaderBehavior: void onRestoreInstanceState(android.support.design.widget.CoordinatorLayout,android.view.View,android.os.Parcelable)>($r1, $r2, $r3);

        r0.<android.support.design.widget.AppBarLayout$Behavior: int mOffsetToChildIndexOnLayout> = -1;

        return;
    }
    public volatile void onRestoreInstanceState(android.support.design.widget.CoordinatorLayout, android.view.View, android.os.Parcelable)
    {
        android.support.design.widget.AppBarLayout$Behavior r0;
        android.support.design.widget.CoordinatorLayout $r1;
        android.os.Parcelable $r2;
        android.view.View $r3;
        android.support.design.widget.AppBarLayout $r4;

        r0 := @this: android.support.design.widget.AppBarLayout$Behavior;

        $r1 := @parameter0: android.support.design.widget.CoordinatorLayout;

        $r3 := @parameter1: android.view.View;

        $r2 := @parameter2: android.os.Parcelable;

        $r4 = (android.support.design.widget.AppBarLayout) $r3;

        virtualinvoke r0.<android.support.design.widget.AppBarLayout$Behavior: void onRestoreInstanceState(android.support.design.widget.CoordinatorLayout,android.support.design.widget.AppBarLayout,android.os.Parcelable)>($r1, $r4, $r2);

        return;
    }
    public android.os.Parcelable onSaveInstanceState(android.support.design.widget.CoordinatorLayout, android.support.design.widget.AppBarLayout)
    {
        android.support.design.widget.AppBarLayout$Behavior r0;
        android.support.design.widget.CoordinatorLayout $r1;
        android.support.design.widget.AppBarLayout $r2;
        int i0, $i1, i2, $i3, $i4;
        android.os.Parcelable $r3;
        android.view.View $r4;
        android.support.design.widget.AppBarLayout$Behavior$SavedState r5;
        boolean $z0;
        float $f0, $f1;

        r0 := @this: android.support.design.widget.AppBarLayout$Behavior;

        $r1 := @parameter0: android.support.design.widget.CoordinatorLayout;

        $r2 := @parameter1: android.support.design.widget.AppBarLayout;

        $r3 = specialinvoke r0.<android.support.design.widget.HeaderBehavior: android.os.Parcelable onSaveInstanceState(android.support.design.widget.CoordinatorLayout,android.view.View)>($r1, $r2);

        $i1 = virtualinvoke r0.<android.support.design.widget.AppBarLayout$Behavior: int getTopAndBottomOffset()>();

        i2 = 0;

        $i3 = virtualinvoke $r2.<android.support.design.widget.AppBarLayout: int getChildCount()>();

     label1:
        if i2 >= $i3 goto label5;

        $r4 = virtualinvoke $r2.<android.support.design.widget.AppBarLayout: android.view.View getChildAt(int)>(i2);

        i0 = virtualinvoke $r4.<android.view.View: int getBottom()>();

        i0 = i0 + $i1;

        $i4 = virtualinvoke $r4.<android.view.View: int getTop()>();

        $i4 = $i4 + $i1;

        if $i4 > 0 goto label4;

        if i0 < 0 goto label4;

        r5 = new android.support.design.widget.AppBarLayout$Behavior$SavedState;

        specialinvoke r5.<android.support.design.widget.AppBarLayout$Behavior$SavedState: void <init>(android.os.Parcelable)>($r3);

        r5.<android.support.design.widget.AppBarLayout$Behavior$SavedState: int firstVisibleChildIndex> = i2;

        $i1 = staticinvoke <android.support.v4.view.ViewCompat: int getMinimumHeight(android.view.View)>($r4);

        i2 = virtualinvoke $r2.<android.support.design.widget.AppBarLayout: int getTopInset()>();

        $i1 = $i1 + i2;

        if i0 != $i1 goto label3;

        $z0 = 1;

     label2:
        r5.<android.support.design.widget.AppBarLayout$Behavior$SavedState: boolean firstVisibleChildAtMinimumHeight> = $z0;

        $f0 = (float) i0;

        i0 = virtualinvoke $r4.<android.view.View: int getHeight()>();

        $f1 = (float) i0;

        $f0 = $f0 / $f1;

        r5.<android.support.design.widget.AppBarLayout$Behavior$SavedState: float firstVisibleChildPercentageShown> = $f0;

        return r5;

     label3:
        $z0 = 0;

        goto label2;

     label4:
        i2 = i2 + 1;

        goto label1;

     label5:
        return $r3;
    }
    public volatile android.os.Parcelable onSaveInstanceState(android.support.design.widget.CoordinatorLayout, android.view.View)
    {
        android.support.design.widget.AppBarLayout$Behavior r0;
        android.support.design.widget.CoordinatorLayout $r1;
        android.os.Parcelable $r2;
        android.view.View $r3;
        android.support.design.widget.AppBarLayout $r4;

        r0 := @this: android.support.design.widget.AppBarLayout$Behavior;

        $r1 := @parameter0: android.support.design.widget.CoordinatorLayout;

        $r3 := @parameter1: android.view.View;

        $r4 = (android.support.design.widget.AppBarLayout) $r3;

        $r2 = virtualinvoke r0.<android.support.design.widget.AppBarLayout$Behavior: android.os.Parcelable onSaveInstanceState(android.support.design.widget.CoordinatorLayout,android.support.design.widget.AppBarLayout)>($r1, $r4);

        return $r2;
    }
    public boolean onStartNestedScroll(android.support.design.widget.CoordinatorLayout, android.support.design.widget.AppBarLayout, android.view.View, android.view.View, int, int)
    {
        android.support.design.widget.AppBarLayout$Behavior r0;
        android.support.design.widget.CoordinatorLayout $r1;
        android.support.design.widget.AppBarLayout $r2;
        android.view.View $r3, $r4;
        int $i0, $i1;
        boolean $z0;
        android.animation.ValueAnimator $r5;

        r0 := @this: android.support.design.widget.AppBarLayout$Behavior;

        $r1 := @parameter0: android.support.design.widget.CoordinatorLayout;

        $r2 := @parameter1: android.support.design.widget.AppBarLayout;

        $r3 := @parameter2: android.view.View;

        $r4 := @parameter3: android.view.View;

        $i0 := @parameter4: int;

        $i1 := @parameter5: int;

        $i0 = $i0 & 2;

        if $i0 == 0 goto label3;

        $z0 = virtualinvoke $r2.<android.support.design.widget.AppBarLayout: boolean hasScrollableChildren()>();

        if $z0 == 0 goto label3;

        $i0 = virtualinvoke $r1.<android.support.design.widget.CoordinatorLayout: int getHeight()>();

        $i1 = virtualinvoke $r3.<android.view.View: int getHeight()>();

        $i0 = $i0 - $i1;

        $i1 = virtualinvoke $r2.<android.support.design.widget.AppBarLayout: int getHeight()>();

        if $i0 > $i1 goto label3;

        $z0 = 1;

     label1:
        if $z0 == 0 goto label2;

        $r5 = r0.<android.support.design.widget.AppBarLayout$Behavior: android.animation.ValueAnimator mOffsetAnimator>;

        if $r5 == null goto label2;

        $r5 = r0.<android.support.design.widget.AppBarLayout$Behavior: android.animation.ValueAnimator mOffsetAnimator>;

        virtualinvoke $r5.<android.animation.ValueAnimator: void cancel()>();

     label2:
        r0.<android.support.design.widget.AppBarLayout$Behavior: java.lang.ref.WeakReference mLastNestedScrollingChildRef> = null;

        return $z0;

     label3:
        $z0 = 0;

        goto label1;
    }
    public volatile boolean onStartNestedScroll(android.support.design.widget.CoordinatorLayout, android.view.View, android.view.View, android.view.View, int, int)
    {
        android.support.design.widget.AppBarLayout$Behavior r0;
        android.support.design.widget.CoordinatorLayout $r1;
        android.view.View $r2, $r3, $r4;
        int $i0, $i1;
        boolean $z0;
        android.support.design.widget.AppBarLayout $r5;

        r0 := @this: android.support.design.widget.AppBarLayout$Behavior;

        $r1 := @parameter0: android.support.design.widget.CoordinatorLayout;

        $r2 := @parameter1: android.view.View;

        $r3 := @parameter2: android.view.View;

        $r4 := @parameter3: android.view.View;

        $i0 := @parameter4: int;

        $i1 := @parameter5: int;

        $r5 = (android.support.design.widget.AppBarLayout) $r2;

        $z0 = virtualinvoke r0.<android.support.design.widget.AppBarLayout$Behavior: boolean onStartNestedScroll(android.support.design.widget.CoordinatorLayout,android.support.design.widget.AppBarLayout,android.view.View,android.view.View,int,int)>($r1, $r5, $r3, $r4, $i0, $i1);

        return $z0;
    }
    public void onStopNestedScroll(android.support.design.widget.CoordinatorLayout, android.support.design.widget.AppBarLayout, android.view.View, int)
    {
        android.support.design.widget.AppBarLayout$Behavior r0;
        android.support.design.widget.CoordinatorLayout $r1;
        android.support.design.widget.AppBarLayout $r2;
        android.view.View $r3;
        int $i0;
        java.lang.ref.WeakReference $r4;

        r0 := @this: android.support.design.widget.AppBarLayout$Behavior;

        $r1 := @parameter0: android.support.design.widget.CoordinatorLayout;

        $r2 := @parameter1: android.support.design.widget.AppBarLayout;

        $r3 := @parameter2: android.view.View;

        $i0 := @parameter3: int;

        if $i0 != 0 goto label1;

        specialinvoke r0.<android.support.design.widget.AppBarLayout$Behavior: void snapToChildIfNeeded(android.support.design.widget.CoordinatorLayout,android.support.design.widget.AppBarLayout)>($r1, $r2);

     label1:
        $r4 = new java.lang.ref.WeakReference;

        specialinvoke $r4.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>($r3);

        r0.<android.support.design.widget.AppBarLayout$Behavior: java.lang.ref.WeakReference mLastNestedScrollingChildRef> = $r4;

        return;
    }
    public volatile void onStopNestedScroll(android.support.design.widget.CoordinatorLayout, android.view.View, android.view.View, int)
    {
        android.support.design.widget.AppBarLayout$Behavior r0;
        android.support.design.widget.CoordinatorLayout $r1;
        android.view.View $r2, $r3;
        int $i0;
        android.support.design.widget.AppBarLayout $r4;

        r0 := @this: android.support.design.widget.AppBarLayout$Behavior;

        $r1 := @parameter0: android.support.design.widget.CoordinatorLayout;

        $r3 := @parameter1: android.view.View;

        $r2 := @parameter2: android.view.View;

        $i0 := @parameter3: int;

        $r4 = (android.support.design.widget.AppBarLayout) $r3;

        virtualinvoke r0.<android.support.design.widget.AppBarLayout$Behavior: void onStopNestedScroll(android.support.design.widget.CoordinatorLayout,android.support.design.widget.AppBarLayout,android.view.View,int)>($r1, $r4, $r2, $i0);

        return;
    }
    public void setDragCallback(android.support.design.widget.AppBarLayout$Behavior$DragCallback)
    {
        android.support.design.widget.AppBarLayout$Behavior r0;
        android.support.design.widget.AppBarLayout$Behavior$DragCallback $r1;

        r0 := @this: android.support.design.widget.AppBarLayout$Behavior;

        $r1 := @parameter0: android.support.design.widget.AppBarLayout$Behavior$DragCallback;

        r0.<android.support.design.widget.AppBarLayout$Behavior: android.support.design.widget.AppBarLayout$Behavior$DragCallback mOnDragCallback> = $r1;

        return;
    }
    int setHeaderTopBottomOffset(android.support.design.widget.CoordinatorLayout, android.support.design.widget.AppBarLayout, int, int, int)
    {
        android.support.design.widget.AppBarLayout$Behavior r0;
        android.support.design.widget.CoordinatorLayout $r1;
        android.support.design.widget.AppBarLayout $r2;
        int $i0, $i1, $i2, $i3;
        boolean $z0;
        byte $b4;

        r0 := @this: android.support.design.widget.AppBarLayout$Behavior;

        $r1 := @parameter0: android.support.design.widget.CoordinatorLayout;

        $r2 := @parameter1: android.support.design.widget.AppBarLayout;

        $i2 := @parameter2: int;

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $i3 = virtualinvoke r0.<android.support.design.widget.AppBarLayout$Behavior: int getTopBottomOffsetForScrollingSibling()>();

        if $i0 == 0 goto label6;

        if $i3 < $i0 goto label6;

        if $i3 > $i1 goto label6;

        $i2 = staticinvoke <android.support.v4.math.MathUtils: int clamp(int,int,int)>($i2, $i0, $i1);

        if $i3 == $i2 goto label7;

        $z0 = virtualinvoke $r2.<android.support.design.widget.AppBarLayout: boolean hasChildWithInterpolator()>();

        if $z0 == 0 goto label4;

        $i1 = specialinvoke r0.<android.support.design.widget.AppBarLayout$Behavior: int interpolateOffset(android.support.design.widget.AppBarLayout,int)>($r2, $i2);

     label1:
        $z0 = virtualinvoke r0.<android.support.design.widget.AppBarLayout$Behavior: boolean setTopAndBottomOffset(int)>($i1);

        $i0 = $i3 - $i2;

        $i1 = $i2 - $i1;

        r0.<android.support.design.widget.AppBarLayout$Behavior: int mOffsetDelta> = $i1;

        if $z0 != 0 goto label2;

        $z0 = virtualinvoke $r2.<android.support.design.widget.AppBarLayout: boolean hasChildWithInterpolator()>();

        if $z0 == 0 goto label2;

        virtualinvoke $r1.<android.support.design.widget.CoordinatorLayout: void dispatchDependentViewsChanged(android.view.View)>($r2);

     label2:
        $i1 = virtualinvoke r0.<android.support.design.widget.AppBarLayout$Behavior: int getTopAndBottomOffset()>();

        virtualinvoke $r2.<android.support.design.widget.AppBarLayout: void dispatchOffsetUpdates(int)>($i1);

        if $i2 >= $i3 goto label5;

        $b4 = -1;

     label3:
        specialinvoke r0.<android.support.design.widget.AppBarLayout$Behavior: void updateAppBarLayoutDrawableState(android.support.design.widget.CoordinatorLayout,android.support.design.widget.AppBarLayout,int,int,boolean)>($r1, $r2, $i2, $b4, 0);

        return $i0;

     label4:
        $i1 = $i2;

        goto label1;

     label5:
        $b4 = 1;

        goto label3;

     label6:
        r0.<android.support.design.widget.AppBarLayout$Behavior: int mOffsetDelta> = 0;

     label7:
        return 0;
    }
    volatile int setHeaderTopBottomOffset(android.support.design.widget.CoordinatorLayout, android.view.View, int, int, int)
    {
        android.support.design.widget.AppBarLayout$Behavior r0;
        android.support.design.widget.CoordinatorLayout $r1;
        android.view.View $r2;
        int $i0, $i1, $i2;
        android.support.design.widget.AppBarLayout $r3;

        r0 := @this: android.support.design.widget.AppBarLayout$Behavior;

        $r1 := @parameter0: android.support.design.widget.CoordinatorLayout;

        $r2 := @parameter1: android.view.View;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        $r3 = (android.support.design.widget.AppBarLayout) $r2;

        $i0 = virtualinvoke r0.<android.support.design.widget.AppBarLayout$Behavior: int setHeaderTopBottomOffset(android.support.design.widget.CoordinatorLayout,android.support.design.widget.AppBarLayout,int,int,int)>($r1, $r3, $i0, $i1, $i2);

        return $i0;
    }
    public volatile boolean setLeftAndRightOffset(int)
    {
        android.support.design.widget.AppBarLayout$Behavior r0;
        int $i0;
        boolean $z0;

        r0 := @this: android.support.design.widget.AppBarLayout$Behavior;

        $i0 := @parameter0: int;

        $z0 = specialinvoke r0.<android.support.design.widget.HeaderBehavior: boolean setLeftAndRightOffset(int)>($i0);

        return $z0;
    }
    public volatile boolean setTopAndBottomOffset(int)
    {
        android.support.design.widget.AppBarLayout$Behavior r0;
        int $i0;
        boolean $z0;

        r0 := @this: android.support.design.widget.AppBarLayout$Behavior;

        $i0 := @parameter0: int;

        $z0 = specialinvoke r0.<android.support.design.widget.HeaderBehavior: boolean setTopAndBottomOffset(int)>($i0);

        return $z0;
    }
