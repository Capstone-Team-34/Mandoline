android.support.v4.graphics.PathParser extends java.lang.Object
private static final java.lang.String LOGTAG
    public void <init>()
    {
        android.support.v4.graphics.PathParser r0;

        r0 := @this: android.support.v4.graphics.PathParser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    private static void addNode(java.util.ArrayList, char, float[])
    {
        java.util.ArrayList r0;
        char $c0;
        float[] $r1;
        android.support.v4.graphics.PathParser$PathDataNode $r2;

        r0 := @parameter0: java.util.ArrayList;

        $c0 := @parameter1: char;

        $r1 := @parameter2: float[];

        $r2 = new android.support.v4.graphics.PathParser$PathDataNode;

        specialinvoke $r2.<android.support.v4.graphics.PathParser$PathDataNode: void <init>(char,float[])>($c0, $r1);

        virtualinvoke r0.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

        return;
    }
    public static boolean canMorph(android.support.v4.graphics.PathParser$PathDataNode[], android.support.v4.graphics.PathParser$PathDataNode[])
    {
        android.support.v4.graphics.PathParser$PathDataNode[] $r0, $r1;
        int $i0, $i1, $i4;
        android.support.v4.graphics.PathParser$PathDataNode $r2;
        char $c2, $c3;
        float[] $r3;

        $r0 := @parameter0: android.support.v4.graphics.PathParser$PathDataNode[];

        $r1 := @parameter1: android.support.v4.graphics.PathParser$PathDataNode[];

        if $r0 == null goto label4;

        if $r1 != null goto label1;

        return 0;

     label1:
        $i0 = lengthof $r0;

        $i1 = lengthof $r1;

        if $i0 != $i1 goto label4;

        $i0 = 0;

     label2:
        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label3;

        $r2 = $r0[$i0];

        $c2 = $r2.<android.support.v4.graphics.PathParser$PathDataNode: char mType>;

        $r2 = $r1[$i0];

        $c3 = $r2.<android.support.v4.graphics.PathParser$PathDataNode: char mType>;

        if $c2 != $c3 goto label4;

        $r2 = $r0[$i0];

        $r3 = $r2.<android.support.v4.graphics.PathParser$PathDataNode: float[] mParams>;

        $i1 = lengthof $r3;

        $r2 = $r1[$i0];

        $r3 = $r2.<android.support.v4.graphics.PathParser$PathDataNode: float[] mParams>;

        $i4 = lengthof $r3;

        if $i1 != $i4 goto label4;

        $i0 = $i0 + 1;

        goto label2;

     label3:
        return 1;

     label4:
        return 0;
    }
    static float[] copyOfRange(float[], int, int)
    {
        float[] $r0, r1;
        int $i0, $i1, i2;
        java.lang.IllegalArgumentException $r2;
        java.lang.ArrayIndexOutOfBoundsException $r3;

        $r0 := @parameter0: float[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if $i0 <= $i1 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label1:
        i2 = lengthof $r0;

        if $i0 < 0 goto label2;

        if $i0 <= i2 goto label3;

     label2:
        $r3 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r3.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $r3;

     label3:
        $i1 = $i1 - $i0;

        i2 = i2 - $i0;

        i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, i2);

        r1 = newarray (float)[$i1];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, $i0, r1, 0, i2);

        return r1;
    }
    public static android.support.v4.graphics.PathParser$PathDataNode[] createNodesFromPathData(java.lang.String)
    {
        java.lang.String $r0, $r2;
        java.util.ArrayList r1;
        int i0, i1, $i2;
        float[] $r3;
        char $c3;
        android.support.v4.graphics.PathParser$PathDataNode[] $r4;
        java.lang.Object[] $r5;

        $r0 := @parameter0: java.lang.String;

        if $r0 != null goto label1;

        return null;

     label1:
        i0 = 0;

        i1 = 1;

        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>()>();

     label2:
        $i2 = virtualinvoke $r0.<java.lang.String: int length()>();

        if i1 >= $i2 goto label4;

        i1 = staticinvoke <android.support.v4.graphics.PathParser: int nextStart(java.lang.String,int)>($r0, i1);

        $r2 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(i0, i1);

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if i0 <= 0 goto label3;

        $r3 = staticinvoke <android.support.v4.graphics.PathParser: float[] getFloats(java.lang.String)>($r2);

        $c3 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(0);

        staticinvoke <android.support.v4.graphics.PathParser: void addNode(java.util.ArrayList,char,float[])>(r1, $c3, $r3);

     label3:
        i0 = i1;

        i1 = i1 + 1;

        goto label2;

     label4:
        i1 = i1 - i0;

        if i1 != 1 goto label5;

        i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        if i0 >= i1 goto label5;

        $c3 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(i0);

        $r3 = newarray (float)[0];

        staticinvoke <android.support.v4.graphics.PathParser: void addNode(java.util.ArrayList,char,float[])>(r1, $c3, $r3);

     label5:
        i0 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        $r4 = newarray (android.support.v4.graphics.PathParser$PathDataNode)[i0];

        $r5 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        $r4 = (android.support.v4.graphics.PathParser$PathDataNode[]) $r5;

        return $r4;
    }
    public static android.graphics.Path createPathFromPathData(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.RuntimeException r1, $r2;
        android.graphics.Path r3;
        android.support.v4.graphics.PathParser$PathDataNode[] $r4;
        java.lang.StringBuilder $r5;

        $r0 := @parameter0: java.lang.String;

        r3 = new android.graphics.Path;

        specialinvoke r3.<android.graphics.Path: void <init>()>();

        $r4 = staticinvoke <android.support.v4.graphics.PathParser: android.support.v4.graphics.PathParser$PathDataNode[] createNodesFromPathData(java.lang.String)>($r0);

        if $r4 == null goto label4;

     label1:
        staticinvoke <android.support.v4.graphics.PathParser$PathDataNode: void nodesToPath(android.support.v4.graphics.PathParser$PathDataNode[],android.graphics.Path)>($r4, r3);

     label2:
        return r3;

     label3:
        r1 := @caughtexception;

        $r2 = new java.lang.RuntimeException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error in parsing ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r0, r1);

        throw $r2;

     label4:
        return null;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }
    public static android.support.v4.graphics.PathParser$PathDataNode[] deepCopyNodes(android.support.v4.graphics.PathParser$PathDataNode[])
    {
        android.support.v4.graphics.PathParser$PathDataNode[] $r0, r2;
        android.support.v4.graphics.PathParser$PathDataNode $r1, $r3;
        int $i0, $i1;

        $r0 := @parameter0: android.support.v4.graphics.PathParser$PathDataNode[];

        if $r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof $r0;

        r2 = newarray (android.support.v4.graphics.PathParser$PathDataNode)[$i0];

        $i0 = 0;

     label2:
        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label3;

        $r3 = new android.support.v4.graphics.PathParser$PathDataNode;

        $r1 = $r0[$i0];

        specialinvoke $r3.<android.support.v4.graphics.PathParser$PathDataNode: void <init>(android.support.v4.graphics.PathParser$PathDataNode)>($r1);

        r2[$i0] = $r3;

        $i0 = $i0 + 1;

        goto label2;

     label3:
        return r2;
    }
    private static void extract(java.lang.String, int, android.support.v4.graphics.PathParser$ExtractFloatResult)
    {
        java.lang.String $r0;
        int $i0, i1, $i2;
        android.support.v4.graphics.PathParser$ExtractFloatResult $r1;
        boolean z0, z1, z2, z3;
        char $c3;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r1 := @parameter2: android.support.v4.graphics.PathParser$ExtractFloatResult;

        i1 = $i0;

        z1 = 0;

        $r1.<android.support.v4.graphics.PathParser$ExtractFloatResult: boolean mEndWithNegOrDot> = 0;

        z2 = 0;

        z3 = 0;

     label1:
        $i2 = virtualinvoke $r0.<java.lang.String: int length()>();

        if i1 >= $i2 goto label3;

        z0 = z3;

        z3 = 0;

        $c3 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(i1);

        lookupswitch($c3)
        {
            case 32: goto label4;
            case 44: goto label4;
            case 45: goto label5;
            case 46: goto label6;
            case 69: goto label8;
            case 101: goto label8;
            default: goto label2;
        };

     label2:
        if z1 == 0 goto label9;

     label3:
        $r1.<android.support.v4.graphics.PathParser$ExtractFloatResult: int mEndPosition> = i1;

        return;

     label4:
        z1 = 1;

        goto label2;

     label5:
        if i1 == $i0 goto label2;

        if z0 != 0 goto label2;

        z1 = 1;

        $r1.<android.support.v4.graphics.PathParser$ExtractFloatResult: boolean mEndWithNegOrDot> = 1;

        goto label2;

     label6:
        if z2 != 0 goto label7;

        z2 = 1;

        goto label2;

     label7:
        z1 = 1;

        $r1.<android.support.v4.graphics.PathParser$ExtractFloatResult: boolean mEndWithNegOrDot> = 1;

        goto label2;

     label8:
        z3 = 1;

        goto label2;

     label9:
        i1 = i1 + 1;

        goto label1;
    }
    private static float[] getFloats(java.lang.String)
    {
        java.lang.String $r0, $r4;
        java.lang.NumberFormatException r1;
        android.support.v4.graphics.PathParser$ExtractFloatResult r2;
        float[] r3;
        char $c0;
        int $i1, $i2, i3, i4, i5;
        float $f0;
        boolean $z0;
        java.lang.RuntimeException $r5;
        java.lang.StringBuilder $r6;

        $r0 := @parameter0: java.lang.String;

        $c0 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(0);

        if $c0 == 122 goto label01;

        $c0 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(0);

        if $c0 != 90 goto label02;

     label01:
        r3 = newarray (float)[0];

        return r3;

     label02:
        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

     label03:
        r3 = newarray (float)[$i1];

        $i1 = 1;

        r2 = new android.support.v4.graphics.PathParser$ExtractFloatResult;

     label04:
        specialinvoke r2.<android.support.v4.graphics.PathParser$ExtractFloatResult: void <init>()>();

        $i2 = virtualinvoke $r0.<java.lang.String: int length()>();

     label05:
        i3 = 0;

     label06:
        if $i1 >= $i2 goto label13;

     label07:
        staticinvoke <android.support.v4.graphics.PathParser: void extract(java.lang.String,int,android.support.v4.graphics.PathParser$ExtractFloatResult)>($r0, $i1, r2);

     label08:
        i4 = r2.<android.support.v4.graphics.PathParser$ExtractFloatResult: int mEndPosition>;

        if $i1 >= i4 goto label16;

        i5 = i3 + 1;

     label09:
        $r4 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>($i1, i4);

        $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r4);

     label10:
        r3[i3] = $f0;

     label11:
        $z0 = r2.<android.support.v4.graphics.PathParser$ExtractFloatResult: boolean mEndWithNegOrDot>;

        if $z0 == 0 goto label12;

        $i1 = i4;

        i3 = i5;

        goto label06;

     label12:
        $i1 = i4 + 1;

        i3 = i5;

        goto label06;

     label13:
        r3 = staticinvoke <android.support.v4.graphics.PathParser: float[] copyOfRange(float[],int,int)>(r3, 0, i3);

     label14:
        return r3;

     label15:
        r1 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("error in parsing \"");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r0 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r0, r1);

        throw $r5;

     label16:
        i5 = i3;

        goto label11;

        catch java.lang.NumberFormatException from label02 to label03 with label15;
        catch java.lang.NumberFormatException from label04 to label05 with label15;
        catch java.lang.NumberFormatException from label07 to label08 with label15;
        catch java.lang.NumberFormatException from label09 to label10 with label15;
        catch java.lang.NumberFormatException from label13 to label14 with label15;
    }
    private static int nextStart(java.lang.String, int)
    {
        java.lang.String $r0;
        int $i0, $i1, $i3;
        char $c2;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

     label1:
        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i0 >= $i1 goto label4;

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i0);

        $i1 = $c2 + -65;

        $i3 = $c2 + -90;

        $i1 = $i1 * $i3;

        if $i1 <= 0 goto label2;

        $i1 = $c2 + -97;

        $i3 = $c2 + -122;

        $i1 = $i1 * $i3;

        if $i1 > 0 goto label3;

     label2:
        if $c2 == 101 goto label3;

        if $c2 == 69 goto label3;

        return $i0;

     label3:
        $i0 = $i0 + 1;

        goto label1;

     label4:
        return $i0;
    }
    public static void updateNodes(android.support.v4.graphics.PathParser$PathDataNode[], android.support.v4.graphics.PathParser$PathDataNode[])
    {
        android.support.v4.graphics.PathParser$PathDataNode[] $r0, $r1;
        int i0, $i1, $i3;
        android.support.v4.graphics.PathParser$PathDataNode $r2, $r3;
        char $c2;
        float[] $r4, $r5;
        float $f0;

        $r0 := @parameter0: android.support.v4.graphics.PathParser$PathDataNode[];

        $r1 := @parameter1: android.support.v4.graphics.PathParser$PathDataNode[];

        i0 = 0;

     label1:
        $i1 = lengthof $r1;

        if i0 >= $i1 goto label4;

        $r2 = $r0[i0];

        $r3 = $r1[i0];

        $c2 = $r3.<android.support.v4.graphics.PathParser$PathDataNode: char mType>;

        $r2.<android.support.v4.graphics.PathParser$PathDataNode: char mType> = $c2;

        $i1 = 0;

     label2:
        $r2 = $r1[i0];

        $r4 = $r2.<android.support.v4.graphics.PathParser$PathDataNode: float[] mParams>;

        $i3 = lengthof $r4;

        if $i1 >= $i3 goto label3;

        $r2 = $r0[i0];

        $r4 = $r2.<android.support.v4.graphics.PathParser$PathDataNode: float[] mParams>;

        $r2 = $r1[i0];

        $r5 = $r2.<android.support.v4.graphics.PathParser$PathDataNode: float[] mParams>;

        $f0 = $r5[$i1];

        $r4[$i1] = $f0;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        i0 = i0 + 1;

        goto label1;

     label4:
        return;
    }
