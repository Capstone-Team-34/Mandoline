android.support.v4.graphics.TypefaceCompatUtil extends java.lang.Object
private static final java.lang.String CACHE_FILE_PREFIX
private static final java.lang.String TAG
    private void <init>()
    {
        android.support.v4.graphics.TypefaceCompatUtil r0;

        r0 := @this: android.support.v4.graphics.TypefaceCompatUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static void closeQuietly(java.io.Closeable)
    {
        java.io.Closeable $r0;
        java.io.IOException $r1;

        $r0 := @parameter0: java.io.Closeable;

        if $r0 == null goto label4;

     label1:
        interfaceinvoke $r0.<java.io.Closeable: void close()>();

     label2:
        return;

     label3:
        $r1 := @caughtexception;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }
    public static java.nio.ByteBuffer copyToDirectBuffer(android.content.Context, android.content.res.Resources, int)
    {
        android.content.Context $r0;
        android.content.res.Resources $r1;
        int $i0;
        java.io.File $r2;
        boolean $z0;
        java.nio.ByteBuffer $r3;
        java.lang.Throwable $r4;

        $r0 := @parameter0: android.content.Context;

        $r1 := @parameter1: android.content.res.Resources;

        $i0 := @parameter2: int;

        $r2 = staticinvoke <android.support.v4.graphics.TypefaceCompatUtil: java.io.File getTempFile(android.content.Context)>($r0);

        if $r2 != null goto label1;

        return null;

     label1:
        $z0 = staticinvoke <android.support.v4.graphics.TypefaceCompatUtil: boolean copyToFile(java.io.File,android.content.res.Resources,int)>($r2, $r1, $i0);

     label2:
        if $z0 != 0 goto label3;

        virtualinvoke $r2.<java.io.File: boolean delete()>();

        return null;

     label3:
        $r3 = staticinvoke <android.support.v4.graphics.TypefaceCompatUtil: java.nio.ByteBuffer mmap(java.io.File)>($r2);

     label4:
        virtualinvoke $r2.<java.io.File: boolean delete()>();

        return $r3;

     label5:
        $r4 := @caughtexception;

        virtualinvoke $r2.<java.io.File: boolean delete()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }
    public static boolean copyToFile(java.io.File, android.content.res.Resources, int)
    {
        java.io.File $r0;
        android.content.res.Resources $r1;
        int $i0;
        java.io.InputStream r2, $r3;
        boolean $z0;
        java.lang.Throwable $r4;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: android.content.res.Resources;

        $i0 := @parameter2: int;

        r2 = null;

     label1:
        $r3 = virtualinvoke $r1.<android.content.res.Resources: java.io.InputStream openRawResource(int)>($i0);

     label2:
        r2 = $r3;

     label3:
        $z0 = staticinvoke <android.support.v4.graphics.TypefaceCompatUtil: boolean copyToFile(java.io.File,java.io.InputStream)>($r0, $r3);

     label4:
        staticinvoke <android.support.v4.graphics.TypefaceCompatUtil: void closeQuietly(java.io.Closeable)>($r3);

        return $z0;

     label5:
        $r4 := @caughtexception;

        staticinvoke <android.support.v4.graphics.TypefaceCompatUtil: void closeQuietly(java.io.Closeable)>(r2);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }
    public static boolean copyToFile(java.io.File, java.io.InputStream)
    {
        java.io.File $r0;
        java.io.InputStream $r1;
        byte[] r2;
        java.io.FileOutputStream r3, r4;
        int $i0;
        java.io.IOException r5;
        java.lang.StringBuilder $r6;
        java.lang.String $r7;
        java.lang.Throwable $r8;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.InputStream;

        r4 = null;

     label01:
        r3 = new java.io.FileOutputStream;

     label02:
        specialinvoke r3.<java.io.FileOutputStream: void <init>(java.io.File,boolean)>($r0, 0);

     label03:
        r2 = newarray (byte)[1024];

     label04:
        $i0 = virtualinvoke $r1.<java.io.InputStream: int read(byte[])>(r2);

     label05:
        if $i0 == -1 goto label11;

     label06:
        virtualinvoke r3.<java.io.FileOutputStream: void write(byte[],int,int)>(r2, 0, $i0);

     label07:
        goto label04;

     label08:
        r5 := @caughtexception;

        r4 = r3;

     label09:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error copying resource contents to temp file: ");

        $r7 = virtualinvoke r5.<java.io.IOException: java.lang.String getMessage()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("TypefaceCompatUtil", $r7);

     label10:
        staticinvoke <android.support.v4.graphics.TypefaceCompatUtil: void closeQuietly(java.io.Closeable)>(r4);

        return 0;

     label11:
        staticinvoke <android.support.v4.graphics.TypefaceCompatUtil: void closeQuietly(java.io.Closeable)>(r3);

        return 1;

     label12:
        $r8 := @caughtexception;

     label13:
        staticinvoke <android.support.v4.graphics.TypefaceCompatUtil: void closeQuietly(java.io.Closeable)>(r4);

        throw $r8;

     label14:
        $r8 := @caughtexception;

        r4 = r3;

        goto label13;

     label15:
        r5 := @caughtexception;

        goto label09;

        catch java.io.IOException from label02 to label03 with label15;
        catch java.lang.Throwable from label01 to label03 with label12;
        catch java.io.IOException from label04 to label05 with label08;
        catch java.io.IOException from label06 to label07 with label08;
        catch java.lang.Throwable from label03 to label05 with label14;
        catch java.lang.Throwable from label06 to label07 with label14;
        catch java.lang.Throwable from label09 to label10 with label12;
    }
    public static java.io.File getTempFile(android.content.Context)
    {
        android.content.Context $r0;
        java.lang.StringBuilder $r1;
        int $i0;
        java.lang.String $r2, $r5;
        java.io.File r3, $r4;
        boolean $z0;
        java.io.IOException $r6;

        $r0 := @parameter0: android.content.Context;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".font");

        $i0 = staticinvoke <android.os.Process: int myPid()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $i0 = staticinvoke <android.os.Process: int myTid()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $i0 = 0;

     label1:
        if $i0 >= 100 goto label6;

        r3 = new java.io.File;

        $r4 = virtualinvoke $r0.<android.content.Context: java.io.File getCacheDir()>();

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r3.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, $r5);

     label2:
        $z0 = virtualinvoke r3.<java.io.File: boolean createNewFile()>();

     label3:
        if $z0 == 0 goto label5;

        return r3;

     label4:
        $r6 := @caughtexception;

     label5:
        $i0 = $i0 + 1;

        goto label1;

     label6:
        return null;

        catch java.io.IOException from label2 to label3 with label4;
    }
    public static java.nio.ByteBuffer mmap(android.content.Context, android.os.CancellationSignal, android.net.Uri)
    {
        android.content.Context $r0;
        android.os.CancellationSignal $r1;
        android.net.Uri $r2;
        java.io.IOException r3;
        java.io.FileInputStream r4;
        android.content.ContentResolver $r5;
        android.os.ParcelFileDescriptor $r6;
        java.io.FileDescriptor $r7;
        java.nio.channels.FileChannel $r8;
        long $l0;
        java.nio.channels.FileChannel$MapMode $r9;
        java.nio.MappedByteBuffer $r10;
        java.lang.Throwable $r11, $r12, $r13, $r14, $r15, $r16;

        $r0 := @parameter0: android.content.Context;

        $r1 := @parameter1: android.os.CancellationSignal;

        $r2 := @parameter2: android.net.Uri;

        $r5 = virtualinvoke $r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

     label01:
        $r6 = virtualinvoke $r5.<android.content.ContentResolver: android.os.ParcelFileDescriptor openFileDescriptor(android.net.Uri,java.lang.String,android.os.CancellationSignal)>($r2, "r", $r1);

     label02:
        r4 = new java.io.FileInputStream;

        $r7 = virtualinvoke $r6.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        specialinvoke r4.<java.io.FileInputStream: void <init>(java.io.FileDescriptor)>($r7);

     label03:
        $r8 = virtualinvoke r4.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>();

        $l0 = virtualinvoke $r8.<java.nio.channels.FileChannel: long size()>();

        $r9 = <java.nio.channels.FileChannel$MapMode: java.nio.channels.FileChannel$MapMode READ_ONLY>;

        $r10 = virtualinvoke $r8.<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>($r9, 0L, $l0);

     label04:
        if r4 == null goto label05;

        goto label12;

     label05:
        if $r6 == null goto label31;

        goto label14;

     label06:
        $r11 := @caughtexception;

     label07:
        throw $r11;

     label08:
        $r12 := @caughtexception;

        if $r6 == null goto label10;

        if $r11 == null goto label29;

     label09:
        virtualinvoke $r6.<android.os.ParcelFileDescriptor: void close()>();

     label10:
        throw $r12;

     label11:
        r3 := @caughtexception;

        return null;

     label12:
        virtualinvoke r4.<java.io.FileInputStream: void close()>();

     label13:
        goto label05;

     label14:
        virtualinvoke $r6.<android.os.ParcelFileDescriptor: void close()>();

     label15:
        return $r10;

     label16:
        $r13 := @caughtexception;

     label17:
        throw $r13;

     label18:
        $r14 := @caughtexception;

        if r4 == null goto label20;

        if $r13 == null goto label24;

     label19:
        virtualinvoke r4.<java.io.FileInputStream: void close()>();

     label20:
        throw $r14;

     label21:
        $r15 := @caughtexception;

     label22:
        virtualinvoke $r13.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r15);

     label23:
        goto label20;

     label24:
        virtualinvoke r4.<java.io.FileInputStream: void close()>();

     label25:
        goto label20;

     label26:
        $r16 := @caughtexception;

     label27:
        virtualinvoke $r11.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r16);

     label28:
        goto label10;

     label29:
        virtualinvoke $r6.<android.os.ParcelFileDescriptor: void close()>();

     label30:
        goto label10;

     label31:
        return $r10;

        catch java.io.IOException from label01 to label02 with label11;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label03 to label04 with label16;
        catch java.lang.Throwable from label07 to label08 with label08;
        catch java.lang.Throwable from label09 to label10 with label26;
        catch java.io.IOException from label10 to label11 with label11;
        catch java.lang.Throwable from label12 to label13 with label06;
        catch java.io.IOException from label14 to label15 with label11;
        catch java.lang.Throwable from label17 to label18 with label18;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label20 to label21 with label06;
        catch java.lang.Throwable from label22 to label23 with label06;
        catch java.lang.Throwable from label24 to label25 with label06;
        catch java.io.IOException from label27 to label28 with label11;
        catch java.io.IOException from label29 to label30 with label11;
    }
    private static java.nio.ByteBuffer mmap(java.io.File)
    {
        java.io.File $r0;
        java.lang.Throwable $r1, $r7, $r8;
        java.io.IOException r2;
        java.io.FileInputStream r3;
        java.nio.channels.FileChannel $r4;
        long $l0;
        java.nio.channels.FileChannel$MapMode $r5;
        java.nio.MappedByteBuffer $r6;

        $r0 := @parameter0: java.io.File;

        r3 = new java.io.FileInputStream;

     label01:
        specialinvoke r3.<java.io.FileInputStream: void <init>(java.io.File)>($r0);

     label02:
        $r4 = virtualinvoke r3.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>();

        $l0 = virtualinvoke $r4.<java.nio.channels.FileChannel: long size()>();

        $r5 = <java.nio.channels.FileChannel$MapMode: java.nio.channels.FileChannel$MapMode READ_ONLY>;

        $r6 = virtualinvoke $r4.<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>($r5, 0L, $l0);

     label03:
        if r3 == null goto label17;

        goto label05;

     label04:
        r2 := @caughtexception;

        return null;

     label05:
        virtualinvoke r3.<java.io.FileInputStream: void close()>();

     label06:
        return $r6;

     label07:
        $r7 := @caughtexception;

     label08:
        throw $r7;

     label09:
        $r8 := @caughtexception;

        if r3 == null goto label11;

        if $r7 == null goto label15;

     label10:
        virtualinvoke r3.<java.io.FileInputStream: void close()>();

     label11:
        throw $r8;

     label12:
        $r1 := @caughtexception;

     label13:
        virtualinvoke $r7.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r1);

     label14:
        goto label11;

     label15:
        virtualinvoke r3.<java.io.FileInputStream: void close()>();

     label16:
        goto label11;

     label17:
        return $r6;

        catch java.io.IOException from label01 to label02 with label04;
        catch java.lang.Throwable from label02 to label03 with label07;
        catch java.io.IOException from label05 to label06 with label04;
        catch java.lang.Throwable from label08 to label09 with label09;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.io.IOException from label11 to label12 with label04;
        catch java.io.IOException from label13 to label14 with label04;
        catch java.io.IOException from label15 to label16 with label04;
    }
