android.support.v4.content.res.FontResourcesParserCompat extends java.lang.Object
private static final int DEFAULT_TIMEOUT_MILLIS
public static final int FETCH_STRATEGY_ASYNC
public static final int FETCH_STRATEGY_BLOCKING
public static final int INFINITE_TIMEOUT_VALUE
private static final int ITALIC
private static final int NORMAL_WEIGHT
    public void <init>()
    {
        android.support.v4.content.res.FontResourcesParserCompat r0;

        r0 := @this: android.support.v4.content.res.FontResourcesParserCompat;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static android.support.v4.content.res.FontResourcesParserCompat$FamilyResourceEntry parse(org.xmlpull.v1.XmlPullParser, android.content.res.Resources) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        org.xmlpull.v1.XmlPullParser $r0;
        android.content.res.Resources $r1;
        int $i0;
        org.xmlpull.v1.XmlPullParserException $r2;
        android.support.v4.content.res.FontResourcesParserCompat$FamilyResourceEntry $r3;

        $r0 := @parameter0: org.xmlpull.v1.XmlPullParser;

        $r1 := @parameter1: android.content.res.Resources;

     label1:
        $i0 = interfaceinvoke $r0.<org.xmlpull.v1.XmlPullParser: int next()>();

        if $i0 == 2 goto label2;

        if $i0 != 1 goto label1;

     label2:
        if $i0 == 2 goto label3;

        $r2 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r2.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>("No start tag found");

        throw $r2;

     label3:
        $r3 = staticinvoke <android.support.v4.content.res.FontResourcesParserCompat: android.support.v4.content.res.FontResourcesParserCompat$FamilyResourceEntry readFamilies(org.xmlpull.v1.XmlPullParser,android.content.res.Resources)>($r0, $r1);

        return $r3;
    }
    public static java.util.List readCerts(android.content.res.Resources, int)
    {
        android.content.res.Resources $r0;
        int $i0, $i1;
        java.util.ArrayList r1;
        android.content.res.TypedArray $r2;
        boolean z0;
        java.lang.String[] $r3;
        java.util.List $r4;

        $r0 := @parameter0: android.content.res.Resources;

        $i0 := @parameter1: int;

        r1 = null;

        if $i0 == 0 goto label6;

        $r2 = virtualinvoke $r0.<android.content.res.Resources: android.content.res.TypedArray obtainTypedArray(int)>($i0);

        $i1 = virtualinvoke $r2.<android.content.res.TypedArray: int length()>();

        if $i1 <= 0 goto label5;

        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>()>();

        $i1 = virtualinvoke $r2.<android.content.res.TypedArray: int getResourceId(int,int)>(0, 0);

        if $i1 == 0 goto label3;

        z0 = 1;

     label1:
        if z0 == 0 goto label4;

        $i0 = 0;

     label2:
        $i1 = virtualinvoke $r2.<android.content.res.TypedArray: int length()>();

        if $i0 >= $i1 goto label5;

        $i1 = virtualinvoke $r2.<android.content.res.TypedArray: int getResourceId(int,int)>($i0, 0);

        $r3 = virtualinvoke $r0.<android.content.res.Resources: java.lang.String[] getStringArray(int)>($i1);

        $r4 = staticinvoke <android.support.v4.content.res.FontResourcesParserCompat: java.util.List toByteArrayList(java.lang.String[])>($r3);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r4);

        $i0 = $i0 + 1;

        goto label2;

     label3:
        z0 = 0;

        goto label1;

     label4:
        $r3 = virtualinvoke $r0.<android.content.res.Resources: java.lang.String[] getStringArray(int)>($i0);

        $r4 = staticinvoke <android.support.v4.content.res.FontResourcesParserCompat: java.util.List toByteArrayList(java.lang.String[])>($r3);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r4);

     label5:
        virtualinvoke $r2.<android.content.res.TypedArray: void recycle()>();

     label6:
        if r1 == null goto label7;

        return r1;

     label7:
        $r4 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r4;
    }
    private static android.support.v4.content.res.FontResourcesParserCompat$FamilyResourceEntry readFamilies(org.xmlpull.v1.XmlPullParser, android.content.res.Resources) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        org.xmlpull.v1.XmlPullParser $r0;
        android.content.res.Resources $r1;
        java.lang.String $r2;
        boolean $z0;
        android.support.v4.content.res.FontResourcesParserCompat$FamilyResourceEntry $r3;

        $r0 := @parameter0: org.xmlpull.v1.XmlPullParser;

        $r1 := @parameter1: android.content.res.Resources;

        interfaceinvoke $r0.<org.xmlpull.v1.XmlPullParser: void require(int,java.lang.String,java.lang.String)>(2, null, "font-family");

        $r2 = interfaceinvoke $r0.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("font-family");

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <android.support.v4.content.res.FontResourcesParserCompat: android.support.v4.content.res.FontResourcesParserCompat$FamilyResourceEntry readFamily(org.xmlpull.v1.XmlPullParser,android.content.res.Resources)>($r0, $r1);

        return $r3;

     label1:
        staticinvoke <android.support.v4.content.res.FontResourcesParserCompat: void skip(org.xmlpull.v1.XmlPullParser)>($r0);

        return null;
    }
    private static android.support.v4.content.res.FontResourcesParserCompat$FamilyResourceEntry readFamily(org.xmlpull.v1.XmlPullParser, android.content.res.Resources) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        org.xmlpull.v1.XmlPullParser $r0;
        android.content.res.Resources $r1;
        java.util.ArrayList r2;
        android.util.AttributeSet $r3;
        int[] $r4;
        android.content.res.TypedArray $r5;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r6, $r7, $r8;
        java.util.List $r9;
        android.support.v4.content.res.FontResourcesParserCompat$ProviderResourceEntry $r10;
        android.support.v4.provider.FontRequest $r11;
        boolean $z0;
        android.support.v4.content.res.FontResourcesParserCompat$FontFileResourceEntry $r12;
        android.support.v4.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry $r13;
        android.support.v4.content.res.FontResourcesParserCompat$FontFileResourceEntry[] $r14;
        java.lang.Object[] $r15;

        $r0 := @parameter0: org.xmlpull.v1.XmlPullParser;

        $r1 := @parameter1: android.content.res.Resources;

        $r3 = staticinvoke <android.util.Xml: android.util.AttributeSet asAttributeSet(org.xmlpull.v1.XmlPullParser)>($r0);

        $r4 = <android.support.compat.R$styleable: int[] FontFamily>;

        $r5 = virtualinvoke $r1.<android.content.res.Resources: android.content.res.TypedArray obtainAttributes(android.util.AttributeSet,int[])>($r3, $r4);

        $i0 = <android.support.compat.R$styleable: int FontFamily_fontProviderAuthority>;

        $r6 = virtualinvoke $r5.<android.content.res.TypedArray: java.lang.String getString(int)>($i0);

        $i0 = <android.support.compat.R$styleable: int FontFamily_fontProviderPackage>;

        $r7 = virtualinvoke $r5.<android.content.res.TypedArray: java.lang.String getString(int)>($i0);

        $i0 = <android.support.compat.R$styleable: int FontFamily_fontProviderQuery>;

        $r8 = virtualinvoke $r5.<android.content.res.TypedArray: java.lang.String getString(int)>($i0);

        $i0 = <android.support.compat.R$styleable: int FontFamily_fontProviderCerts>;

        $i0 = virtualinvoke $r5.<android.content.res.TypedArray: int getResourceId(int,int)>($i0, 0);

        $i1 = <android.support.compat.R$styleable: int FontFamily_fontProviderFetchStrategy>;

        $i1 = virtualinvoke $r5.<android.content.res.TypedArray: int getInteger(int,int)>($i1, 1);

        $i2 = <android.support.compat.R$styleable: int FontFamily_fontProviderFetchTimeout>;

        $i2 = virtualinvoke $r5.<android.content.res.TypedArray: int getInteger(int,int)>($i2, 500);

        virtualinvoke $r5.<android.content.res.TypedArray: void recycle()>();

        if $r6 == null goto label3;

        if $r7 == null goto label3;

        if $r8 == null goto label3;

     label1:
        $i3 = interfaceinvoke $r0.<org.xmlpull.v1.XmlPullParser: int next()>();

        if $i3 == 3 goto label2;

        staticinvoke <android.support.v4.content.res.FontResourcesParserCompat: void skip(org.xmlpull.v1.XmlPullParser)>($r0);

        goto label1;

     label2:
        $r9 = staticinvoke <android.support.v4.content.res.FontResourcesParserCompat: java.util.List readCerts(android.content.res.Resources,int)>($r1, $i0);

        $r10 = new android.support.v4.content.res.FontResourcesParserCompat$ProviderResourceEntry;

        $r11 = new android.support.v4.provider.FontRequest;

        specialinvoke $r11.<android.support.v4.provider.FontRequest: void <init>(java.lang.String,java.lang.String,java.lang.String,java.util.List)>($r6, $r7, $r8, $r9);

        specialinvoke $r10.<android.support.v4.content.res.FontResourcesParserCompat$ProviderResourceEntry: void <init>(android.support.v4.provider.FontRequest,int,int)>($r11, $i1, $i2);

        return $r10;

     label3:
        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

     label4:
        $i0 = interfaceinvoke $r0.<org.xmlpull.v1.XmlPullParser: int next()>();

        if $i0 == 3 goto label6;

        $i0 = interfaceinvoke $r0.<org.xmlpull.v1.XmlPullParser: int getEventType()>();

        if $i0 != 2 goto label4;

        $r6 = interfaceinvoke $r0.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("font");

        if $z0 == 0 goto label5;

        $r12 = staticinvoke <android.support.v4.content.res.FontResourcesParserCompat: android.support.v4.content.res.FontResourcesParserCompat$FontFileResourceEntry readFont(org.xmlpull.v1.XmlPullParser,android.content.res.Resources)>($r0, $r1);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r12);

        goto label4;

     label5:
        staticinvoke <android.support.v4.content.res.FontResourcesParserCompat: void skip(org.xmlpull.v1.XmlPullParser)>($r0);

        goto label4;

     label6:
        $z0 = interfaceinvoke r2.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label7;

        return null;

     label7:
        $r13 = new android.support.v4.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry;

        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        $r14 = newarray (android.support.v4.content.res.FontResourcesParserCompat$FontFileResourceEntry)[$i0];

        $r15 = interfaceinvoke r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r14);

        $r14 = (android.support.v4.content.res.FontResourcesParserCompat$FontFileResourceEntry[]) $r15;

        specialinvoke $r13.<android.support.v4.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry: void <init>(android.support.v4.content.res.FontResourcesParserCompat$FontFileResourceEntry[])>($r14);

        return $r13;
    }
    private static android.support.v4.content.res.FontResourcesParserCompat$FontFileResourceEntry readFont(org.xmlpull.v1.XmlPullParser, android.content.res.Resources) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        org.xmlpull.v1.XmlPullParser $r0;
        android.content.res.Resources $r1;
        boolean z0;
        android.util.AttributeSet $r2;
        int[] $r3;
        android.content.res.TypedArray $r4;
        int $i0, $i1, $i2;
        java.lang.String $r5;
        android.support.v4.content.res.FontResourcesParserCompat$FontFileResourceEntry $r6;

        $r0 := @parameter0: org.xmlpull.v1.XmlPullParser;

        $r1 := @parameter1: android.content.res.Resources;

        z0 = 1;

        $r2 = staticinvoke <android.util.Xml: android.util.AttributeSet asAttributeSet(org.xmlpull.v1.XmlPullParser)>($r0);

        $r3 = <android.support.compat.R$styleable: int[] FontFamilyFont>;

        $r4 = virtualinvoke $r1.<android.content.res.Resources: android.content.res.TypedArray obtainAttributes(android.util.AttributeSet,int[])>($r2, $r3);

        $i0 = <android.support.compat.R$styleable: int FontFamilyFont_fontWeight>;

        $i0 = virtualinvoke $r4.<android.content.res.TypedArray: int getInt(int,int)>($i0, 400);

        $i1 = <android.support.compat.R$styleable: int FontFamilyFont_fontStyle>;

        $i1 = virtualinvoke $r4.<android.content.res.TypedArray: int getInt(int,int)>($i1, 0);

        if 1 != $i1 goto label3;

     label1:
        $i1 = <android.support.compat.R$styleable: int FontFamilyFont_font>;

        $i1 = virtualinvoke $r4.<android.content.res.TypedArray: int getResourceId(int,int)>($i1, 0);

        $i2 = <android.support.compat.R$styleable: int FontFamilyFont_font>;

        $r5 = virtualinvoke $r4.<android.content.res.TypedArray: java.lang.String getString(int)>($i2);

        virtualinvoke $r4.<android.content.res.TypedArray: void recycle()>();

     label2:
        $i2 = interfaceinvoke $r0.<org.xmlpull.v1.XmlPullParser: int next()>();

        if $i2 == 3 goto label4;

        staticinvoke <android.support.v4.content.res.FontResourcesParserCompat: void skip(org.xmlpull.v1.XmlPullParser)>($r0);

        goto label2;

     label3:
        z0 = 0;

        goto label1;

     label4:
        $r6 = new android.support.v4.content.res.FontResourcesParserCompat$FontFileResourceEntry;

        specialinvoke $r6.<android.support.v4.content.res.FontResourcesParserCompat$FontFileResourceEntry: void <init>(java.lang.String,int,boolean,int)>($r5, $i0, z0, $i1);

        return $r6;
    }
    private static void skip(org.xmlpull.v1.XmlPullParser) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        org.xmlpull.v1.XmlPullParser $r0;
        int $i0, i1;

        $r0 := @parameter0: org.xmlpull.v1.XmlPullParser;

        i1 = 1;

     label1:
        if i1 <= 0 goto label5;

        $i0 = interfaceinvoke $r0.<org.xmlpull.v1.XmlPullParser: int next()>();

        lookupswitch($i0)
        {
            case 2: goto label3;
            case 3: goto label4;
            default: goto label2;
        };

     label2:
        goto label1;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        i1 = i1 + -1;

        goto label1;

     label5:
        return;
    }
    private static java.util.List toByteArrayList(java.lang.String[])
    {
        java.lang.String[] $r0;
        java.lang.String r1;
        java.util.ArrayList r2;
        int $i0, $i1;
        byte[] $r3;

        $r0 := @parameter0: java.lang.String[];

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        $i0 = lengthof $r0;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        r1 = $r0[$i1];

        $r3 = staticinvoke <android.util.Base64: byte[] decode(java.lang.String,int)>(r1, 0);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r3);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return r2;
    }
