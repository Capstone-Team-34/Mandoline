android.support.v4.view.ViewCompat$ViewCompatBaseImpl extends java.lang.Object
static boolean sAccessibilityDelegateCheckFailed
static java.lang.reflect.Field sAccessibilityDelegateField
private static java.lang.reflect.Method sChildrenDrawingOrderMethod
private static java.lang.reflect.Field sMinHeightField
private static boolean sMinHeightFieldFetched
private static java.lang.reflect.Field sMinWidthField
private static boolean sMinWidthFieldFetched
private static java.util.WeakHashMap sTransitionNameMap
private java.lang.reflect.Method mDispatchFinishTemporaryDetach
private java.lang.reflect.Method mDispatchStartTemporaryDetach
private boolean mTempDetachBound
java.util.WeakHashMap mViewPropertyAnimatorCompatMap
    static void <clinit>()
    {
        <android.support.v4.view.ViewCompat$ViewCompatBaseImpl: boolean sAccessibilityDelegateCheckFailed> = 0;

        return;
    }
    void <init>()
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.support.v4.view.ViewCompat$ViewCompatBaseImpl: java.util.WeakHashMap mViewPropertyAnimatorCompatMap> = null;

        return;
    }
    private void bindTempDetach()
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        java.lang.NoSuchMethodException r1;
        java.lang.Class $r2;
        java.lang.Class[] $r3;
        java.lang.reflect.Method $r4;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r2 = class "Landroid/view/View;";

        $r3 = newarray (java.lang.Class)[0];

     label1:
        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("dispatchStartTemporaryDetach", $r3);

     label2:
        r0.<android.support.v4.view.ViewCompat$ViewCompatBaseImpl: java.lang.reflect.Method mDispatchStartTemporaryDetach> = $r4;

        $r2 = class "Landroid/view/View;";

        $r3 = newarray (java.lang.Class)[0];

     label3:
        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("dispatchFinishTemporaryDetach", $r3);

     label4:
        r0.<android.support.v4.view.ViewCompat$ViewCompatBaseImpl: java.lang.reflect.Method mDispatchFinishTemporaryDetach> = $r4;

     label5:
        r0.<android.support.v4.view.ViewCompat$ViewCompatBaseImpl: boolean mTempDetachBound> = 1;

        return;

     label6:
        r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ViewCompat", "Couldn\'t find method", r1);

        goto label5;

        catch java.lang.NoSuchMethodException from label1 to label2 with label6;
        catch java.lang.NoSuchMethodException from label3 to label4 with label6;
    }
    private static void tickleInvalidationFlag(android.view.View)
    {
        android.view.View $r0;
        float $f0, $f1;

        $r0 := @parameter0: android.view.View;

        $f0 = virtualinvoke $r0.<android.view.View: float getTranslationY()>();

        $f1 = 1.0F + $f0;

        virtualinvoke $r0.<android.view.View: void setTranslationY(float)>($f1);

        virtualinvoke $r0.<android.view.View: void setTranslationY(float)>($f0);

        return;
    }
    public void addKeyboardNavigationClusters(android.view.View, java.util.Collection, int)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;
        java.util.Collection r2;
        int $i0;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        r2 := @parameter1: java.util.Collection;

        $i0 := @parameter2: int;

        return;
    }
    public android.support.v4.view.ViewPropertyAnimatorCompat animate(android.view.View)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;
        java.lang.Object $r2;
        java.util.WeakHashMap $r3;
        android.support.v4.view.ViewPropertyAnimatorCompat r4;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        $r3 = r0.<android.support.v4.view.ViewCompat$ViewCompatBaseImpl: java.util.WeakHashMap mViewPropertyAnimatorCompatMap>;

        if $r3 != null goto label1;

        $r3 = new java.util.WeakHashMap;

        specialinvoke $r3.<java.util.WeakHashMap: void <init>()>();

        r0.<android.support.v4.view.ViewCompat$ViewCompatBaseImpl: java.util.WeakHashMap mViewPropertyAnimatorCompatMap> = $r3;

     label1:
        $r3 = r0.<android.support.v4.view.ViewCompat$ViewCompatBaseImpl: java.util.WeakHashMap mViewPropertyAnimatorCompatMap>;

        $r2 = virtualinvoke $r3.<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>($r1);

        r4 = (android.support.v4.view.ViewPropertyAnimatorCompat) $r2;

        if r4 != null goto label2;

        r4 = new android.support.v4.view.ViewPropertyAnimatorCompat;

        specialinvoke r4.<android.support.v4.view.ViewPropertyAnimatorCompat: void <init>(android.view.View)>($r1);

        $r3 = r0.<android.support.v4.view.ViewCompat$ViewCompatBaseImpl: java.util.WeakHashMap mViewPropertyAnimatorCompatMap>;

        virtualinvoke $r3.<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, r4);

     label2:
        return r4;
    }
    public void cancelDragAndDrop(android.view.View)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        return;
    }
    public android.support.v4.view.WindowInsetsCompat dispatchApplyWindowInsets(android.view.View, android.support.v4.view.WindowInsetsCompat)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;
        android.support.v4.view.WindowInsetsCompat $r2;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        $r2 := @parameter1: android.support.v4.view.WindowInsetsCompat;

        return $r2;
    }
    public void dispatchFinishTemporaryDetach(android.view.View)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;
        java.lang.Exception r2;
        boolean $z0;
        java.lang.reflect.Method $r3;
        java.lang.Object[] $r4;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        $z0 = r0.<android.support.v4.view.ViewCompat$ViewCompatBaseImpl: boolean mTempDetachBound>;

        if $z0 != 0 goto label1;

        specialinvoke r0.<android.support.v4.view.ViewCompat$ViewCompatBaseImpl: void bindTempDetach()>();

     label1:
        $r3 = r0.<android.support.v4.view.ViewCompat$ViewCompatBaseImpl: java.lang.reflect.Method mDispatchFinishTemporaryDetach>;

        if $r3 == null goto label5;

     label2:
        $r3 = r0.<android.support.v4.view.ViewCompat$ViewCompatBaseImpl: java.lang.reflect.Method mDispatchFinishTemporaryDetach>;

        $r4 = newarray (java.lang.Object)[0];

        virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r1, $r4);

     label3:
        return;

     label4:
        r2 := @caughtexception;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>("ViewCompat", "Error calling dispatchFinishTemporaryDetach", r2);

        return;

     label5:
        virtualinvoke $r1.<android.view.View: void onFinishTemporaryDetach()>();

        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }
    public boolean dispatchNestedFling(android.view.View, float, float, boolean)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        float $f0, $f1;
        boolean $z0, $z1;
        android.view.View r1;
        android.support.v4.view.NestedScrollingChild r2;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        r1 := @parameter0: android.view.View;

        $f0 := @parameter1: float;

        $f1 := @parameter2: float;

        $z0 := @parameter3: boolean;

        $z1 = r1 instanceof android.support.v4.view.NestedScrollingChild;

        if $z1 == 0 goto label1;

        r2 = (android.support.v4.view.NestedScrollingChild) r1;

        $z0 = interfaceinvoke r2.<android.support.v4.view.NestedScrollingChild: boolean dispatchNestedFling(float,float,boolean)>($f0, $f1, $z0);

        return $z0;

     label1:
        return 0;
    }
    public boolean dispatchNestedPreFling(android.view.View, float, float)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        float $f0, $f1;
        boolean $z0;
        android.view.View r1;
        android.support.v4.view.NestedScrollingChild r2;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        r1 := @parameter0: android.view.View;

        $f0 := @parameter1: float;

        $f1 := @parameter2: float;

        $z0 = r1 instanceof android.support.v4.view.NestedScrollingChild;

        if $z0 == 0 goto label1;

        r2 = (android.support.v4.view.NestedScrollingChild) r1;

        $z0 = interfaceinvoke r2.<android.support.v4.view.NestedScrollingChild: boolean dispatchNestedPreFling(float,float)>($f0, $f1);

        return $z0;

     label1:
        return 0;
    }
    public boolean dispatchNestedPreScroll(android.view.View, int, int, int[], int[])
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        int $i0, $i1;
        int[] $r1, $r2;
        boolean $z0;
        android.view.View r3;
        android.support.v4.view.NestedScrollingChild r4;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        r3 := @parameter0: android.view.View;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r1 := @parameter3: int[];

        $r2 := @parameter4: int[];

        $z0 = r3 instanceof android.support.v4.view.NestedScrollingChild;

        if $z0 == 0 goto label1;

        r4 = (android.support.v4.view.NestedScrollingChild) r3;

        $z0 = interfaceinvoke r4.<android.support.v4.view.NestedScrollingChild: boolean dispatchNestedPreScroll(int,int,int[],int[])>($i0, $i1, $r1, $r2);

        return $z0;

     label1:
        return 0;
    }
    public boolean dispatchNestedScroll(android.view.View, int, int, int, int, int[])
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;
        int $i0, $i1, $i2, $i3;
        int[] $r2;
        boolean $z0;
        android.support.v4.view.NestedScrollingChild $r3;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        $r2 := @parameter5: int[];

        $z0 = $r1 instanceof android.support.v4.view.NestedScrollingChild;

        if $z0 == 0 goto label1;

        $r3 = (android.support.v4.view.NestedScrollingChild) $r1;

        $z0 = interfaceinvoke $r3.<android.support.v4.view.NestedScrollingChild: boolean dispatchNestedScroll(int,int,int,int,int[])>($i0, $i1, $i2, $i3, $r2);

        return $z0;

     label1:
        return 0;
    }
    public void dispatchStartTemporaryDetach(android.view.View)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;
        java.lang.Exception r2;
        boolean $z0;
        java.lang.reflect.Method $r3;
        java.lang.Object[] $r4;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        $z0 = r0.<android.support.v4.view.ViewCompat$ViewCompatBaseImpl: boolean mTempDetachBound>;

        if $z0 != 0 goto label1;

        specialinvoke r0.<android.support.v4.view.ViewCompat$ViewCompatBaseImpl: void bindTempDetach()>();

     label1:
        $r3 = r0.<android.support.v4.view.ViewCompat$ViewCompatBaseImpl: java.lang.reflect.Method mDispatchStartTemporaryDetach>;

        if $r3 == null goto label5;

     label2:
        $r3 = r0.<android.support.v4.view.ViewCompat$ViewCompatBaseImpl: java.lang.reflect.Method mDispatchStartTemporaryDetach>;

        $r4 = newarray (java.lang.Object)[0];

        virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r1, $r4);

     label3:
        return;

     label4:
        r2 := @caughtexception;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>("ViewCompat", "Error calling dispatchStartTemporaryDetach", r2);

        return;

     label5:
        virtualinvoke $r1.<android.view.View: void onStartTemporaryDetach()>();

        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }
    public int getAccessibilityLiveRegion(android.view.View)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        return 0;
    }
    public android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(android.view.View)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        return null;
    }
    public android.content.res.ColorStateList getBackgroundTintList(android.view.View)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.content.res.ColorStateList $r1;
        android.view.View r2;
        boolean $z0;
        android.support.v4.view.TintableBackgroundView r3;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        r2 := @parameter0: android.view.View;

        $z0 = r2 instanceof android.support.v4.view.TintableBackgroundView;

        if $z0 == 0 goto label1;

        r3 = (android.support.v4.view.TintableBackgroundView) r2;

        $r1 = interfaceinvoke r3.<android.support.v4.view.TintableBackgroundView: android.content.res.ColorStateList getSupportBackgroundTintList()>();

        return $r1;

     label1:
        return null;
    }
    public android.graphics.PorterDuff$Mode getBackgroundTintMode(android.view.View)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.graphics.PorterDuff$Mode $r1;
        android.view.View r2;
        boolean $z0;
        android.support.v4.view.TintableBackgroundView r3;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        r2 := @parameter0: android.view.View;

        $z0 = r2 instanceof android.support.v4.view.TintableBackgroundView;

        if $z0 == 0 goto label1;

        r3 = (android.support.v4.view.TintableBackgroundView) r2;

        $r1 = interfaceinvoke r3.<android.support.v4.view.TintableBackgroundView: android.graphics.PorterDuff$Mode getSupportBackgroundTintMode()>();

        return $r1;

     label1:
        return null;
    }
    public android.graphics.Rect getClipBounds(android.view.View)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        return null;
    }
    public android.view.Display getDisplay(android.view.View)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;
        boolean $z0;
        android.content.Context $r2;
        java.lang.Object $r3;
        android.view.WindowManager r4;
        android.view.Display $r5;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        $z0 = virtualinvoke r0.<android.support.v4.view.ViewCompat$ViewCompatBaseImpl: boolean isAttachedToWindow(android.view.View)>($r1);

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke $r1.<android.view.View: android.content.Context getContext()>();

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("window");

        r4 = (android.view.WindowManager) $r3;

        $r5 = interfaceinvoke r4.<android.view.WindowManager: android.view.Display getDefaultDisplay()>();

        return $r5;

     label1:
        return null;
    }
    public float getElevation(android.view.View)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        return 0.0F;
    }
    public boolean getFitsSystemWindows(android.view.View)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        return 0;
    }
    long getFrameTime()
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        long $l0;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $l0 = staticinvoke <android.animation.ValueAnimator: long getFrameDelay()>();

        return $l0;
    }
    public int getImportantForAccessibility(android.view.View)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        return 0;
    }
    public int getLabelFor(android.view.View)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        return 0;
    }
    public int getLayoutDirection(android.view.View)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        return 0;
    }
    public int getMinimumHeight(android.view.View)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;
        boolean $z0;
        java.lang.Class $r2;
        java.lang.reflect.Field $r3;
        java.lang.Object $r4;
        java.lang.Integer $r5;
        int $i0;
        java.lang.Exception $r6;
        java.lang.NoSuchFieldException $r7;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        $z0 = <android.support.v4.view.ViewCompat$ViewCompatBaseImpl: boolean sMinHeightFieldFetched>;

        if $z0 != 0 goto label05;

        $r2 = class "Landroid/view/View;";

     label01:
        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("mMinHeight");

     label02:
        <android.support.v4.view.ViewCompat$ViewCompatBaseImpl: java.lang.reflect.Field sMinHeightField> = $r3;

        $r3 = <android.support.v4.view.ViewCompat$ViewCompatBaseImpl: java.lang.reflect.Field sMinHeightField>;

     label03:
        virtualinvoke $r3.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

     label04:
        <android.support.v4.view.ViewCompat$ViewCompatBaseImpl: boolean sMinHeightFieldFetched> = 1;

     label05:
        $r3 = <android.support.v4.view.ViewCompat$ViewCompatBaseImpl: java.lang.reflect.Field sMinHeightField>;

        if $r3 == null goto label09;

        $r3 = <android.support.v4.view.ViewCompat$ViewCompatBaseImpl: java.lang.reflect.Field sMinHeightField>;

     label06:
        $r4 = virtualinvoke $r3.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>($r1);

        $r5 = (java.lang.Integer) $r4;

        $i0 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

     label07:
        return $i0;

     label08:
        $r6 := @caughtexception;

     label09:
        return 0;

     label10:
        $r7 := @caughtexception;

        goto label04;

        catch java.lang.NoSuchFieldException from label01 to label02 with label10;
        catch java.lang.NoSuchFieldException from label03 to label04 with label10;
        catch java.lang.Exception from label06 to label07 with label08;
    }
    public int getMinimumWidth(android.view.View)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;
        boolean $z0;
        java.lang.Class $r2;
        java.lang.reflect.Field $r3;
        java.lang.Object $r4;
        java.lang.Integer $r5;
        int $i0;
        java.lang.Exception $r6;
        java.lang.NoSuchFieldException $r7;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        $z0 = <android.support.v4.view.ViewCompat$ViewCompatBaseImpl: boolean sMinWidthFieldFetched>;

        if $z0 != 0 goto label05;

        $r2 = class "Landroid/view/View;";

     label01:
        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("mMinWidth");

     label02:
        <android.support.v4.view.ViewCompat$ViewCompatBaseImpl: java.lang.reflect.Field sMinWidthField> = $r3;

        $r3 = <android.support.v4.view.ViewCompat$ViewCompatBaseImpl: java.lang.reflect.Field sMinWidthField>;

     label03:
        virtualinvoke $r3.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

     label04:
        <android.support.v4.view.ViewCompat$ViewCompatBaseImpl: boolean sMinWidthFieldFetched> = 1;

     label05:
        $r3 = <android.support.v4.view.ViewCompat$ViewCompatBaseImpl: java.lang.reflect.Field sMinWidthField>;

        if $r3 == null goto label09;

        $r3 = <android.support.v4.view.ViewCompat$ViewCompatBaseImpl: java.lang.reflect.Field sMinWidthField>;

     label06:
        $r4 = virtualinvoke $r3.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>($r1);

        $r5 = (java.lang.Integer) $r4;

        $i0 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

     label07:
        return $i0;

     label08:
        $r6 := @caughtexception;

     label09:
        return 0;

     label10:
        $r7 := @caughtexception;

        goto label04;

        catch java.lang.NoSuchFieldException from label01 to label02 with label10;
        catch java.lang.NoSuchFieldException from label03 to label04 with label10;
        catch java.lang.Exception from label06 to label07 with label08;
    }
    public int getNextClusterForwardId(android.view.View)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        return -1;
    }
    public int getPaddingEnd(android.view.View)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;
        int $i0;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        $i0 = virtualinvoke $r1.<android.view.View: int getPaddingRight()>();

        return $i0;
    }
    public int getPaddingStart(android.view.View)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;
        int $i0;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        $i0 = virtualinvoke $r1.<android.view.View: int getPaddingLeft()>();

        return $i0;
    }
    public android.view.ViewParent getParentForAccessibility(android.view.View)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;
        android.view.ViewParent $r2;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        $r2 = virtualinvoke $r1.<android.view.View: android.view.ViewParent getParent()>();

        return $r2;
    }
    public int getScrollIndicators(android.view.View)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        return 0;
    }
    public java.lang.String getTransitionName(android.view.View)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;
        java.lang.Object $r2;
        java.util.WeakHashMap $r3;
        java.lang.String $r4;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        $r3 = <android.support.v4.view.ViewCompat$ViewCompatBaseImpl: java.util.WeakHashMap sTransitionNameMap>;

        if $r3 != null goto label1;

        return null;

     label1:
        $r3 = <android.support.v4.view.ViewCompat$ViewCompatBaseImpl: java.util.WeakHashMap sTransitionNameMap>;

        $r2 = virtualinvoke $r3.<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>($r1);

        $r4 = (java.lang.String) $r2;

        return $r4;
    }
    public float getTranslationZ(android.view.View)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        return 0.0F;
    }
    public int getWindowSystemUiVisibility(android.view.View)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        return 0;
    }
    public float getZ(android.view.View)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;
        float $f0, $f1;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        $f0 = virtualinvoke r0.<android.support.v4.view.ViewCompat$ViewCompatBaseImpl: float getTranslationZ(android.view.View)>($r1);

        $f1 = virtualinvoke r0.<android.support.v4.view.ViewCompat$ViewCompatBaseImpl: float getElevation(android.view.View)>($r1);

        $f0 = $f0 + $f1;

        return $f0;
    }
    public boolean hasAccessibilityDelegate(android.view.View)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;
        boolean $z0, $z1;
        java.lang.reflect.Field $r2;
        java.lang.Class $r3;
        java.lang.Object $r4;
        java.lang.Throwable r5, r6;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        $z0 = 1;

        $z1 = <android.support.v4.view.ViewCompat$ViewCompatBaseImpl: boolean sAccessibilityDelegateCheckFailed>;

        if $z1 == 0 goto label1;

        return 0;

     label1:
        $r2 = <android.support.v4.view.ViewCompat$ViewCompatBaseImpl: java.lang.reflect.Field sAccessibilityDelegateField>;

        if $r2 != null goto label3;

        $r3 = class "Landroid/view/View;";

     label2:
        $r2 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("mAccessibilityDelegate");

        <android.support.v4.view.ViewCompat$ViewCompatBaseImpl: java.lang.reflect.Field sAccessibilityDelegateField> = $r2;

        $r2 = <android.support.v4.view.ViewCompat$ViewCompatBaseImpl: java.lang.reflect.Field sAccessibilityDelegateField>;

        virtualinvoke $r2.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

     label3:
        $r2 = <android.support.v4.view.ViewCompat$ViewCompatBaseImpl: java.lang.reflect.Field sAccessibilityDelegateField>;

        $r4 = virtualinvoke $r2.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>($r1);

     label4:
        if $r4 == null goto label7;

     label5:
        return $z0;

     label6:
        r5 := @caughtexception;

        <android.support.v4.view.ViewCompat$ViewCompatBaseImpl: boolean sAccessibilityDelegateCheckFailed> = 1;

        return 0;

     label7:
        $z0 = 0;

        goto label5;

     label8:
        r6 := @caughtexception;

        <android.support.v4.view.ViewCompat$ViewCompatBaseImpl: boolean sAccessibilityDelegateCheckFailed> = 1;

        return 0;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label3 to label4 with label8;
    }
    public boolean hasExplicitFocusable(android.view.View)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;
        boolean $z0;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        $z0 = virtualinvoke $r1.<android.view.View: boolean hasFocusable()>();

        return $z0;
    }
    public boolean hasNestedScrollingParent(android.view.View)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        boolean $z0;
        android.view.View r1;
        android.support.v4.view.NestedScrollingChild r2;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        r1 := @parameter0: android.view.View;

        $z0 = r1 instanceof android.support.v4.view.NestedScrollingChild;

        if $z0 == 0 goto label1;

        r2 = (android.support.v4.view.NestedScrollingChild) r1;

        $z0 = interfaceinvoke r2.<android.support.v4.view.NestedScrollingChild: boolean hasNestedScrollingParent()>();

        return $z0;

     label1:
        return 0;
    }
    public boolean hasOnClickListeners(android.view.View)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        return 0;
    }
    public boolean hasOverlappingRendering(android.view.View)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        return 1;
    }
    public boolean hasTransientState(android.view.View)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        return 0;
    }
    public boolean isAttachedToWindow(android.view.View)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;
        android.os.IBinder $r2;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        $r2 = virtualinvoke $r1.<android.view.View: android.os.IBinder getWindowToken()>();

        if $r2 == null goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean isFocusedByDefault(android.view.View)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        return 0;
    }
    public boolean isImportantForAccessibility(android.view.View)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        return 1;
    }
    public boolean isInLayout(android.view.View)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        return 0;
    }
    public boolean isKeyboardNavigationCluster(android.view.View)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        return 0;
    }
    public boolean isLaidOut(android.view.View)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;
        int $i0;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        $i0 = virtualinvoke $r1.<android.view.View: int getWidth()>();

        if $i0 <= 0 goto label1;

        $i0 = virtualinvoke $r1.<android.view.View: int getHeight()>();

        if $i0 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean isLayoutDirectionResolved(android.view.View)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        return 0;
    }
    public boolean isNestedScrollingEnabled(android.view.View)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        boolean $z0;
        android.view.View r1;
        android.support.v4.view.NestedScrollingChild r2;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        r1 := @parameter0: android.view.View;

        $z0 = r1 instanceof android.support.v4.view.NestedScrollingChild;

        if $z0 == 0 goto label1;

        r2 = (android.support.v4.view.NestedScrollingChild) r1;

        $z0 = interfaceinvoke r2.<android.support.v4.view.NestedScrollingChild: boolean isNestedScrollingEnabled()>();

        return $z0;

     label1:
        return 0;
    }
    public boolean isPaddingRelative(android.view.View)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        return 0;
    }
    public android.view.View keyboardNavigationClusterSearch(android.view.View, android.view.View, int)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1, $r2;
        int $i0;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        $r2 := @parameter1: android.view.View;

        $i0 := @parameter2: int;

        return null;
    }
    public void offsetLeftAndRight(android.view.View, int)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;
        int $i0;
        android.view.ViewParent $r2;
        boolean $z0;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        $i0 := @parameter1: int;

        virtualinvoke $r1.<android.view.View: void offsetLeftAndRight(int)>($i0);

        $i0 = virtualinvoke $r1.<android.view.View: int getVisibility()>();

        if $i0 != 0 goto label1;

        staticinvoke <android.support.v4.view.ViewCompat$ViewCompatBaseImpl: void tickleInvalidationFlag(android.view.View)>($r1);

        $r2 = virtualinvoke $r1.<android.view.View: android.view.ViewParent getParent()>();

        $z0 = $r2 instanceof android.view.View;

        if $z0 == 0 goto label1;

        $r1 = (android.view.View) $r2;

        staticinvoke <android.support.v4.view.ViewCompat$ViewCompatBaseImpl: void tickleInvalidationFlag(android.view.View)>($r1);

     label1:
        return;
    }
    public void offsetTopAndBottom(android.view.View, int)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;
        int $i0;
        android.view.ViewParent $r2;
        boolean $z0;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        $i0 := @parameter1: int;

        virtualinvoke $r1.<android.view.View: void offsetTopAndBottom(int)>($i0);

        $i0 = virtualinvoke $r1.<android.view.View: int getVisibility()>();

        if $i0 != 0 goto label1;

        staticinvoke <android.support.v4.view.ViewCompat$ViewCompatBaseImpl: void tickleInvalidationFlag(android.view.View)>($r1);

        $r2 = virtualinvoke $r1.<android.view.View: android.view.ViewParent getParent()>();

        $z0 = $r2 instanceof android.view.View;

        if $z0 == 0 goto label1;

        $r1 = (android.view.View) $r2;

        staticinvoke <android.support.v4.view.ViewCompat$ViewCompatBaseImpl: void tickleInvalidationFlag(android.view.View)>($r1);

     label1:
        return;
    }
    public android.support.v4.view.WindowInsetsCompat onApplyWindowInsets(android.view.View, android.support.v4.view.WindowInsetsCompat)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;
        android.support.v4.view.WindowInsetsCompat $r2;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        $r2 := @parameter1: android.support.v4.view.WindowInsetsCompat;

        return $r2;
    }
    public void onInitializeAccessibilityNodeInfo(android.view.View, android.support.v4.view.accessibility.AccessibilityNodeInfoCompat)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat $r2;
        android.view.accessibility.AccessibilityNodeInfo $r3;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        $r2 := @parameter1: android.support.v4.view.accessibility.AccessibilityNodeInfoCompat;

        $r3 = virtualinvoke $r2.<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat: android.view.accessibility.AccessibilityNodeInfo unwrap()>();

        virtualinvoke $r1.<android.view.View: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)>($r3);

        return;
    }
    public boolean performAccessibilityAction(android.view.View, int, android.os.Bundle)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;
        int $i0;
        android.os.Bundle $r2;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        $i0 := @parameter1: int;

        $r2 := @parameter2: android.os.Bundle;

        return 0;
    }
    public void postInvalidateOnAnimation(android.view.View)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        virtualinvoke $r1.<android.view.View: void postInvalidate()>();

        return;
    }
    public void postInvalidateOnAnimation(android.view.View, int, int, int, int)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        virtualinvoke $r1.<android.view.View: void postInvalidate(int,int,int,int)>($i0, $i1, $i2, $i3);

        return;
    }
    public void postOnAnimation(android.view.View, java.lang.Runnable)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;
        java.lang.Runnable $r2;
        long $l0;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        $r2 := @parameter1: java.lang.Runnable;

        $l0 = virtualinvoke r0.<android.support.v4.view.ViewCompat$ViewCompatBaseImpl: long getFrameTime()>();

        virtualinvoke $r1.<android.view.View: boolean postDelayed(java.lang.Runnable,long)>($r2, $l0);

        return;
    }
    public void postOnAnimationDelayed(android.view.View, java.lang.Runnable, long)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;
        java.lang.Runnable $r2;
        long $l0, $l1;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        $r2 := @parameter1: java.lang.Runnable;

        $l0 := @parameter2: long;

        $l1 = virtualinvoke r0.<android.support.v4.view.ViewCompat$ViewCompatBaseImpl: long getFrameTime()>();

        $l0 = $l1 + $l0;

        virtualinvoke $r1.<android.view.View: boolean postDelayed(java.lang.Runnable,long)>($r2, $l0);

        return;
    }
    public void requestApplyInsets(android.view.View)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        return;
    }
    public boolean restoreDefaultFocus(android.view.View)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;
        boolean $z0;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        $z0 = virtualinvoke $r1.<android.view.View: boolean requestFocus()>();

        return $z0;
    }
    public void setAccessibilityDelegate(android.view.View, android.support.v4.view.AccessibilityDelegateCompat)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;
        android.support.v4.view.AccessibilityDelegateCompat $r2;
        android.view.View$AccessibilityDelegate $r3;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        $r2 := @parameter1: android.support.v4.view.AccessibilityDelegateCompat;

        if $r2 != null goto label2;

        $r3 = null;

     label1:
        virtualinvoke $r1.<android.view.View: void setAccessibilityDelegate(android.view.View$AccessibilityDelegate)>($r3);

        return;

     label2:
        $r3 = virtualinvoke $r2.<android.support.v4.view.AccessibilityDelegateCompat: android.view.View$AccessibilityDelegate getBridge()>();

        goto label1;
    }
    public void setAccessibilityLiveRegion(android.view.View, int)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;
        int $i0;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        $i0 := @parameter1: int;

        return;
    }
    public void setBackground(android.view.View, android.graphics.drawable.Drawable)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;
        android.graphics.drawable.Drawable $r2;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        $r2 := @parameter1: android.graphics.drawable.Drawable;

        virtualinvoke $r1.<android.view.View: void setBackgroundDrawable(android.graphics.drawable.Drawable)>($r2);

        return;
    }
    public void setBackgroundTintList(android.view.View, android.content.res.ColorStateList)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.content.res.ColorStateList $r1;
        boolean $z0;
        android.view.View $r2;
        android.support.v4.view.TintableBackgroundView $r3;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r2 := @parameter0: android.view.View;

        $r1 := @parameter1: android.content.res.ColorStateList;

        $z0 = $r2 instanceof android.support.v4.view.TintableBackgroundView;

        if $z0 == 0 goto label1;

        $r3 = (android.support.v4.view.TintableBackgroundView) $r2;

        interfaceinvoke $r3.<android.support.v4.view.TintableBackgroundView: void setSupportBackgroundTintList(android.content.res.ColorStateList)>($r1);

     label1:
        return;
    }
    public void setBackgroundTintMode(android.view.View, android.graphics.PorterDuff$Mode)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.graphics.PorterDuff$Mode $r1;
        boolean $z0;
        android.view.View $r2;
        android.support.v4.view.TintableBackgroundView $r3;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r2 := @parameter0: android.view.View;

        $r1 := @parameter1: android.graphics.PorterDuff$Mode;

        $z0 = $r2 instanceof android.support.v4.view.TintableBackgroundView;

        if $z0 == 0 goto label1;

        $r3 = (android.support.v4.view.TintableBackgroundView) $r2;

        interfaceinvoke $r3.<android.support.v4.view.TintableBackgroundView: void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode)>($r1);

     label1:
        return;
    }
    public void setChildrenDrawingOrderEnabled(android.view.ViewGroup, boolean)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.ViewGroup $r1;
        boolean $z0;
        java.lang.Class $r2, $r4;
        java.lang.reflect.Method $r3;
        java.lang.Class[] $r5;
        java.lang.Object[] $r6;
        java.lang.Boolean $r7;
        java.lang.NoSuchMethodException r8;
        java.lang.IllegalAccessException r9;
        java.lang.IllegalArgumentException r10;
        java.lang.reflect.InvocationTargetException r11;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.ViewGroup;

        $z0 := @parameter1: boolean;

        $r3 = <android.support.v4.view.ViewCompat$ViewCompatBaseImpl: java.lang.reflect.Method sChildrenDrawingOrderMethod>;

        if $r3 != null goto label04;

        $r4 = class "Landroid/view/ViewGroup;";

        $r5 = newarray (java.lang.Class)[1];

        $r2 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r5[0] = $r2;

     label01:
        $r3 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("setChildrenDrawingOrderEnabled", $r5);

     label02:
        <android.support.v4.view.ViewCompat$ViewCompatBaseImpl: java.lang.reflect.Method sChildrenDrawingOrderMethod> = $r3;

     label03:
        $r3 = <android.support.v4.view.ViewCompat$ViewCompatBaseImpl: java.lang.reflect.Method sChildrenDrawingOrderMethod>;

        virtualinvoke $r3.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

     label04:
        $r3 = <android.support.v4.view.ViewCompat$ViewCompatBaseImpl: java.lang.reflect.Method sChildrenDrawingOrderMethod>;

        $r6 = newarray (java.lang.Object)[1];

     label05:
        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

     label06:
        $r6[0] = $r7;

     label07:
        virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r1, $r6);

     label08:
        return;

     label09:
        r8 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ViewCompat", "Unable to find childrenDrawingOrderEnabled", r8);

        goto label03;

     label10:
        r9 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ViewCompat", "Unable to invoke childrenDrawingOrderEnabled", r9);

        return;

     label11:
        r10 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ViewCompat", "Unable to invoke childrenDrawingOrderEnabled", r10);

        return;

     label12:
        r11 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ViewCompat", "Unable to invoke childrenDrawingOrderEnabled", r11);

        return;

        catch java.lang.NoSuchMethodException from label01 to label02 with label09;
        catch java.lang.IllegalAccessException from label05 to label06 with label10;
        catch java.lang.IllegalAccessException from label07 to label08 with label10;
        catch java.lang.IllegalArgumentException from label05 to label06 with label11;
        catch java.lang.IllegalArgumentException from label07 to label08 with label11;
        catch java.lang.reflect.InvocationTargetException from label05 to label06 with label12;
        catch java.lang.reflect.InvocationTargetException from label07 to label08 with label12;
    }
    public void setClipBounds(android.view.View, android.graphics.Rect)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;
        android.graphics.Rect $r2;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        $r2 := @parameter1: android.graphics.Rect;

        return;
    }
    public void setElevation(android.view.View, float)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;
        float $f0;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        $f0 := @parameter1: float;

        return;
    }
    public void setFocusedByDefault(android.view.View, boolean)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;
        boolean $z0;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        $z0 := @parameter1: boolean;

        return;
    }
    public void setHasTransientState(android.view.View, boolean)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;
        boolean $z0;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        $z0 := @parameter1: boolean;

        return;
    }
    public void setImportantForAccessibility(android.view.View, int)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;
        int $i0;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        $i0 := @parameter1: int;

        return;
    }
    public void setKeyboardNavigationCluster(android.view.View, boolean)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;
        boolean $z0;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        $z0 := @parameter1: boolean;

        return;
    }
    public void setLabelFor(android.view.View, int)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;
        int $i0;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        $i0 := @parameter1: int;

        return;
    }
    public void setLayerPaint(android.view.View, android.graphics.Paint)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;
        android.graphics.Paint $r2;
        int $i0;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        $r2 := @parameter1: android.graphics.Paint;

        $i0 = virtualinvoke $r1.<android.view.View: int getLayerType()>();

        virtualinvoke $r1.<android.view.View: void setLayerType(int,android.graphics.Paint)>($i0, $r2);

        virtualinvoke $r1.<android.view.View: void invalidate()>();

        return;
    }
    public void setLayoutDirection(android.view.View, int)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;
        int $i0;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        $i0 := @parameter1: int;

        return;
    }
    public void setNestedScrollingEnabled(android.view.View, boolean)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        boolean $z0, $z1;
        android.view.View $r1;
        android.support.v4.view.NestedScrollingChild $r2;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        $z0 := @parameter1: boolean;

        $z1 = $r1 instanceof android.support.v4.view.NestedScrollingChild;

        if $z1 == 0 goto label1;

        $r2 = (android.support.v4.view.NestedScrollingChild) $r1;

        interfaceinvoke $r2.<android.support.v4.view.NestedScrollingChild: void setNestedScrollingEnabled(boolean)>($z0);

     label1:
        return;
    }
    public void setNextClusterForwardId(android.view.View, int)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;
        int $i0;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        $i0 := @parameter1: int;

        return;
    }
    public void setOnApplyWindowInsetsListener(android.view.View, android.support.v4.view.OnApplyWindowInsetsListener)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;
        android.support.v4.view.OnApplyWindowInsetsListener $r2;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        $r2 := @parameter1: android.support.v4.view.OnApplyWindowInsetsListener;

        return;
    }
    public void setPaddingRelative(android.view.View, int, int, int, int)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        virtualinvoke $r1.<android.view.View: void setPadding(int,int,int,int)>($i0, $i1, $i2, $i3);

        return;
    }
    public void setPointerIcon(android.view.View, android.support.v4.view.PointerIconCompat)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;
        android.support.v4.view.PointerIconCompat $r2;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        $r2 := @parameter1: android.support.v4.view.PointerIconCompat;

        return;
    }
    public void setScrollIndicators(android.view.View, int)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;
        int $i0;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        $i0 := @parameter1: int;

        return;
    }
    public void setScrollIndicators(android.view.View, int, int)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;
        int $i0, $i1;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        return;
    }
    public void setTooltipText(android.view.View, java.lang.CharSequence)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;
        java.lang.CharSequence $r2;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        $r2 := @parameter1: java.lang.CharSequence;

        return;
    }
    public void setTransitionName(android.view.View, java.lang.String)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;
        java.lang.String $r2;
        java.util.WeakHashMap $r3;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        $r2 := @parameter1: java.lang.String;

        $r3 = <android.support.v4.view.ViewCompat$ViewCompatBaseImpl: java.util.WeakHashMap sTransitionNameMap>;

        if $r3 != null goto label1;

        $r3 = new java.util.WeakHashMap;

        specialinvoke $r3.<java.util.WeakHashMap: void <init>()>();

        <android.support.v4.view.ViewCompat$ViewCompatBaseImpl: java.util.WeakHashMap sTransitionNameMap> = $r3;

     label1:
        $r3 = <android.support.v4.view.ViewCompat$ViewCompatBaseImpl: java.util.WeakHashMap sTransitionNameMap>;

        virtualinvoke $r3.<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        return;
    }
    public void setTranslationZ(android.view.View, float)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;
        float $f0;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        $f0 := @parameter1: float;

        return;
    }
    public void setZ(android.view.View, float)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;
        float $f0;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        $f0 := @parameter1: float;

        return;
    }
    public boolean startDragAndDrop(android.view.View, android.content.ClipData, android.view.View$DragShadowBuilder, java.lang.Object, int)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;
        android.content.ClipData $r2;
        android.view.View$DragShadowBuilder $r3;
        java.lang.Object $r4;
        int $i0;
        boolean $z0;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        $r2 := @parameter1: android.content.ClipData;

        $r3 := @parameter2: android.view.View$DragShadowBuilder;

        $r4 := @parameter3: java.lang.Object;

        $i0 := @parameter4: int;

        $z0 = virtualinvoke $r1.<android.view.View: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>($r2, $r3, $r4, $i0);

        return $z0;
    }
    public boolean startNestedScroll(android.view.View, int)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        int $i0;
        boolean $z0;
        android.view.View r1;
        android.support.v4.view.NestedScrollingChild r2;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        r1 := @parameter0: android.view.View;

        $i0 := @parameter1: int;

        $z0 = r1 instanceof android.support.v4.view.NestedScrollingChild;

        if $z0 == 0 goto label1;

        r2 = (android.support.v4.view.NestedScrollingChild) r1;

        $z0 = interfaceinvoke r2.<android.support.v4.view.NestedScrollingChild: boolean startNestedScroll(int)>($i0);

        return $z0;

     label1:
        return 0;
    }
    public void stopNestedScroll(android.view.View)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        boolean $z0;
        android.view.View $r1;
        android.support.v4.view.NestedScrollingChild $r2;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        $z0 = $r1 instanceof android.support.v4.view.NestedScrollingChild;

        if $z0 == 0 goto label1;

        $r2 = (android.support.v4.view.NestedScrollingChild) $r1;

        interfaceinvoke $r2.<android.support.v4.view.NestedScrollingChild: void stopNestedScroll()>();

     label1:
        return;
    }
    public void updateDragShadow(android.view.View, android.view.View$DragShadowBuilder)
    {
        android.support.v4.view.ViewCompat$ViewCompatBaseImpl r0;
        android.view.View $r1;
        android.view.View$DragShadowBuilder $r2;

        r0 := @this: android.support.v4.view.ViewCompat$ViewCompatBaseImpl;

        $r1 := @parameter0: android.view.View;

        $r2 := @parameter1: android.view.View$DragShadowBuilder;

        return;
    }
