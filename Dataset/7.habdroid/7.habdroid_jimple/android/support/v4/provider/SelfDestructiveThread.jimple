android.support.v4.provider.SelfDestructiveThread extends java.lang.Object
private static final int MSG_DESTRUCTION
private static final int MSG_INVOKE_RUNNABLE
private android.os.Handler$Callback mCallback
private final int mDestructAfterMillisec
private int mGeneration
private android.os.Handler mHandler
private final java.lang.Object mLock
private final int mPriority
private android.os.HandlerThread mThread
private final java.lang.String mThreadName
    public void <init>(java.lang.String, int, int)
    {
        android.support.v4.provider.SelfDestructiveThread r0;
        java.lang.String $r1;
        int $i0, $i1;
        java.lang.Object $r2;
        android.support.v4.provider.SelfDestructiveThread$1 $r3;

        r0 := @this: android.support.v4.provider.SelfDestructiveThread;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<android.support.v4.provider.SelfDestructiveThread: java.lang.Object mLock> = $r2;

        $r3 = new android.support.v4.provider.SelfDestructiveThread$1;

        specialinvoke $r3.<android.support.v4.provider.SelfDestructiveThread$1: void <init>(android.support.v4.provider.SelfDestructiveThread)>(r0);

        r0.<android.support.v4.provider.SelfDestructiveThread: android.os.Handler$Callback mCallback> = $r3;

        r0.<android.support.v4.provider.SelfDestructiveThread: java.lang.String mThreadName> = $r1;

        r0.<android.support.v4.provider.SelfDestructiveThread: int mPriority> = $i0;

        r0.<android.support.v4.provider.SelfDestructiveThread: int mDestructAfterMillisec> = $i1;

        r0.<android.support.v4.provider.SelfDestructiveThread: int mGeneration> = 0;

        return;
    }
    static void access$000(android.support.v4.provider.SelfDestructiveThread, java.lang.Runnable)
    {
        android.support.v4.provider.SelfDestructiveThread $r0;
        java.lang.Runnable $r1;

        $r0 := @parameter0: android.support.v4.provider.SelfDestructiveThread;

        $r1 := @parameter1: java.lang.Runnable;

        specialinvoke $r0.<android.support.v4.provider.SelfDestructiveThread: void onInvokeRunnable(java.lang.Runnable)>($r1);

        return;
    }
    static void access$100(android.support.v4.provider.SelfDestructiveThread)
    {
        android.support.v4.provider.SelfDestructiveThread $r0;

        $r0 := @parameter0: android.support.v4.provider.SelfDestructiveThread;

        specialinvoke $r0.<android.support.v4.provider.SelfDestructiveThread: void onDestruction()>();

        return;
    }
    private void onDestruction()
    {
        android.support.v4.provider.SelfDestructiveThread r0;
        java.lang.Object $r1;
        boolean $z0;
        android.os.Handler $r2;
        android.os.HandlerThread $r3;
        java.lang.Throwable $r4;

        r0 := @this: android.support.v4.provider.SelfDestructiveThread;

        $r1 = r0.<android.support.v4.provider.SelfDestructiveThread: java.lang.Object mLock>;

        entermonitor $r1;

     label1:
        $r2 = r0.<android.support.v4.provider.SelfDestructiveThread: android.os.Handler mHandler>;

        $z0 = virtualinvoke $r2.<android.os.Handler: boolean hasMessages(int)>(1);

        if $z0 == 0 goto label3;

        exitmonitor $r1;

     label2:
        return;

     label3:
        $r3 = r0.<android.support.v4.provider.SelfDestructiveThread: android.os.HandlerThread mThread>;

        virtualinvoke $r3.<android.os.HandlerThread: boolean quit()>();

        r0.<android.support.v4.provider.SelfDestructiveThread: android.os.HandlerThread mThread> = null;

        r0.<android.support.v4.provider.SelfDestructiveThread: android.os.Handler mHandler> = null;

        exitmonitor $r1;

     label4:
        return;

     label5:
        $r4 := @caughtexception;

        exitmonitor $r1;

     label6:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }
    private void onInvokeRunnable(java.lang.Runnable)
    {
        android.support.v4.provider.SelfDestructiveThread r0;
        java.lang.Runnable $r1;
        java.lang.Object $r2;
        long $l0;
        android.os.Message $r3;
        android.os.Handler $r4, $r5;
        int $i1;
        java.lang.Throwable $r6;

        r0 := @this: android.support.v4.provider.SelfDestructiveThread;

        $r1 := @parameter0: java.lang.Runnable;

        interfaceinvoke $r1.<java.lang.Runnable: void run()>();

        $r2 = r0.<android.support.v4.provider.SelfDestructiveThread: java.lang.Object mLock>;

        entermonitor $r2;

     label1:
        $r4 = r0.<android.support.v4.provider.SelfDestructiveThread: android.os.Handler mHandler>;

        virtualinvoke $r4.<android.os.Handler: void removeMessages(int)>(0);

        $r4 = r0.<android.support.v4.provider.SelfDestructiveThread: android.os.Handler mHandler>;

        $r5 = r0.<android.support.v4.provider.SelfDestructiveThread: android.os.Handler mHandler>;

        $r3 = virtualinvoke $r5.<android.os.Handler: android.os.Message obtainMessage(int)>(0);

        $i1 = r0.<android.support.v4.provider.SelfDestructiveThread: int mDestructAfterMillisec>;

        $l0 = (long) $i1;

        virtualinvoke $r4.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>($r3, $l0);

        exitmonitor $r2;

     label2:
        return;

     label3:
        $r6 := @caughtexception;

        exitmonitor $r2;

     label4:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
    private void post(java.lang.Runnable)
    {
        android.support.v4.provider.SelfDestructiveThread r0;
        java.lang.Runnable $r1;
        java.lang.Object $r2;
        android.os.HandlerThread $r3;
        java.lang.String $r4;
        int $i0;
        android.os.Handler $r5, $r8;
        android.os.Looper $r6;
        android.os.Handler$Callback $r7;
        android.os.Message $r9;
        java.lang.Throwable $r10;

        r0 := @this: android.support.v4.provider.SelfDestructiveThread;

        $r1 := @parameter0: java.lang.Runnable;

        $r2 = r0.<android.support.v4.provider.SelfDestructiveThread: java.lang.Object mLock>;

        entermonitor $r2;

     label1:
        $r3 = r0.<android.support.v4.provider.SelfDestructiveThread: android.os.HandlerThread mThread>;

        if $r3 != null goto label2;

        $r3 = new android.os.HandlerThread;

        $r4 = r0.<android.support.v4.provider.SelfDestructiveThread: java.lang.String mThreadName>;

        $i0 = r0.<android.support.v4.provider.SelfDestructiveThread: int mPriority>;

        specialinvoke $r3.<android.os.HandlerThread: void <init>(java.lang.String,int)>($r4, $i0);

        r0.<android.support.v4.provider.SelfDestructiveThread: android.os.HandlerThread mThread> = $r3;

        $r3 = r0.<android.support.v4.provider.SelfDestructiveThread: android.os.HandlerThread mThread>;

        virtualinvoke $r3.<android.os.HandlerThread: void start()>();

        $r5 = new android.os.Handler;

        $r3 = r0.<android.support.v4.provider.SelfDestructiveThread: android.os.HandlerThread mThread>;

        $r6 = virtualinvoke $r3.<android.os.HandlerThread: android.os.Looper getLooper()>();

        $r7 = r0.<android.support.v4.provider.SelfDestructiveThread: android.os.Handler$Callback mCallback>;

        specialinvoke $r5.<android.os.Handler: void <init>(android.os.Looper,android.os.Handler$Callback)>($r6, $r7);

        r0.<android.support.v4.provider.SelfDestructiveThread: android.os.Handler mHandler> = $r5;

        $i0 = r0.<android.support.v4.provider.SelfDestructiveThread: int mGeneration>;

        $i0 = $i0 + 1;

        r0.<android.support.v4.provider.SelfDestructiveThread: int mGeneration> = $i0;

     label2:
        $r5 = r0.<android.support.v4.provider.SelfDestructiveThread: android.os.Handler mHandler>;

        virtualinvoke $r5.<android.os.Handler: void removeMessages(int)>(0);

        $r5 = r0.<android.support.v4.provider.SelfDestructiveThread: android.os.Handler mHandler>;

        $r8 = r0.<android.support.v4.provider.SelfDestructiveThread: android.os.Handler mHandler>;

        $r9 = virtualinvoke $r8.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(1, $r1);

        virtualinvoke $r5.<android.os.Handler: boolean sendMessage(android.os.Message)>($r9);

        exitmonitor $r2;

     label3:
        return;

     label4:
        $r10 := @caughtexception;

        exitmonitor $r2;

     label5:
        throw $r10;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }
    public int getGeneration()
    {
        android.support.v4.provider.SelfDestructiveThread r0;
        java.lang.Object $r1;
        java.lang.Throwable $r2;
        int i0;

        r0 := @this: android.support.v4.provider.SelfDestructiveThread;

        $r1 = r0.<android.support.v4.provider.SelfDestructiveThread: java.lang.Object mLock>;

        entermonitor $r1;

     label1:
        i0 = r0.<android.support.v4.provider.SelfDestructiveThread: int mGeneration>;

        exitmonitor $r1;

     label2:
        return i0;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
    public boolean isRunning()
    {
        android.support.v4.provider.SelfDestructiveThread r0;
        java.lang.Object $r1;
        android.os.HandlerThread $r2;
        boolean $z0;
        java.lang.Throwable $r3;

        r0 := @this: android.support.v4.provider.SelfDestructiveThread;

        $r1 = r0.<android.support.v4.provider.SelfDestructiveThread: java.lang.Object mLock>;

        entermonitor $r1;

     label1:
        $r2 = r0.<android.support.v4.provider.SelfDestructiveThread: android.os.HandlerThread mThread>;

        if $r2 == null goto label4;

        $z0 = 1;

     label2:
        exitmonitor $r1;

     label3:
        return $z0;

     label4:
        $z0 = 0;

        goto label2;

     label5:
        $r3 := @caughtexception;

        exitmonitor $r1;

     label6:
        throw $r3;

        catch java.lang.Throwable from label1 to label3 with label5;
        catch java.lang.Throwable from label4 to label6 with label5;
    }
    public void postAndReply(java.util.concurrent.Callable, android.support.v4.provider.SelfDestructiveThread$ReplyCallback)
    {
        android.support.v4.provider.SelfDestructiveThread r0;
        java.util.concurrent.Callable r1;
        android.support.v4.provider.SelfDestructiveThread$ReplyCallback r2;
        android.os.Handler r3;
        android.support.v4.provider.SelfDestructiveThread$2 $r4;

        r0 := @this: android.support.v4.provider.SelfDestructiveThread;

        r1 := @parameter0: java.util.concurrent.Callable;

        r2 := @parameter1: android.support.v4.provider.SelfDestructiveThread$ReplyCallback;

        r3 = new android.os.Handler;

        specialinvoke r3.<android.os.Handler: void <init>()>();

        $r4 = new android.support.v4.provider.SelfDestructiveThread$2;

        specialinvoke $r4.<android.support.v4.provider.SelfDestructiveThread$2: void <init>(android.support.v4.provider.SelfDestructiveThread,java.util.concurrent.Callable,android.os.Handler,android.support.v4.provider.SelfDestructiveThread$ReplyCallback)>(r0, r1, r3, r2);

        specialinvoke r0.<android.support.v4.provider.SelfDestructiveThread: void post(java.lang.Runnable)>($r4);

        return;
    }
    public java.lang.Object postAndWait(java.util.concurrent.Callable, int) throws java.lang.InterruptedException
    {
        android.support.v4.provider.SelfDestructiveThread r0;
        java.util.concurrent.Callable r1;
        int $i0;
        java.util.concurrent.atomic.AtomicReference r2;
        java.util.concurrent.locks.ReentrantLock r3;
        java.util.concurrent.atomic.AtomicBoolean r4;
        long $l1, $l2;
        java.util.concurrent.locks.Condition $r5;
        android.support.v4.provider.SelfDestructiveThread$3 $r6;
        boolean $z0;
        java.lang.Object $r7;
        java.util.concurrent.TimeUnit $r8;
        byte $b3;
        java.lang.InterruptedException $r9;
        java.lang.Throwable $r10;

        r0 := @this: android.support.v4.provider.SelfDestructiveThread;

        r1 := @parameter0: java.util.concurrent.Callable;

        $i0 := @parameter1: int;

        r3 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke r3.<java.util.concurrent.locks.ReentrantLock: void <init>()>();

        $r5 = virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.Condition newCondition()>();

        r2 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke r2.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        r4 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke r4.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(1);

        $r6 = new android.support.v4.provider.SelfDestructiveThread$3;

        specialinvoke $r6.<android.support.v4.provider.SelfDestructiveThread$3: void <init>(android.support.v4.provider.SelfDestructiveThread,java.util.concurrent.atomic.AtomicReference,java.util.concurrent.Callable,java.util.concurrent.locks.ReentrantLock,java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.locks.Condition)>(r0, r2, r1, r3, r4, $r5);

        specialinvoke r0.<android.support.v4.provider.SelfDestructiveThread: void post(java.lang.Runnable)>($r6);

        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label01:
        $z0 = virtualinvoke r4.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

     label02:
        if $z0 != 0 goto label05;

     label03:
        $r7 = virtualinvoke r2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

     label04:
        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return $r7;

     label05:
        $r8 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

     label06:
        $l1 = (long) $i0;

     label07:
        $l1 = virtualinvoke $r8.<java.util.concurrent.TimeUnit: long toNanos(long)>($l1);

     label08:
        $l2 = interfaceinvoke $r5.<java.util.concurrent.locks.Condition: long awaitNanos(long)>($l1);

     label09:
        $l1 = $l2;

     label10:
        $z0 = virtualinvoke r4.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

     label11:
        if $z0 != 0 goto label14;

     label12:
        $r7 = virtualinvoke r2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

     label13:
        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return $r7;

     label14:
        $b3 = $l1 cmp 0L;

        if $b3 > 0 goto label08;

     label15:
        $r9 = new java.lang.InterruptedException;

        specialinvoke $r9.<java.lang.InterruptedException: void <init>(java.lang.String)>("timeout");

        throw $r9;

     label16:
        $r10 := @caughtexception;

        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw $r10;

     label17:
        $r9 := @caughtexception;

        goto label10;

        catch java.lang.Throwable from label01 to label02 with label16;
        catch java.lang.Throwable from label03 to label04 with label16;
        catch java.lang.Throwable from label05 to label06 with label16;
        catch java.lang.Throwable from label07 to label08 with label16;
        catch java.lang.InterruptedException from label08 to label09 with label17;
        catch java.lang.Throwable from label08 to label09 with label16;
        catch java.lang.Throwable from label10 to label11 with label16;
        catch java.lang.Throwable from label12 to label13 with label16;
        catch java.lang.Throwable from label15 to label16 with label16;
    }
