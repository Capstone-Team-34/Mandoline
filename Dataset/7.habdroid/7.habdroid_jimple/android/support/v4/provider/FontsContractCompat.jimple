android.support.v4.provider.FontsContractCompat extends java.lang.Object
private static final int BACKGROUND_THREAD_KEEP_ALIVE_DURATION_MS
public static final java.lang.String PARCEL_FONT_RESULTS
public static final int RESULT_CODE_PROVIDER_NOT_FOUND
public static final int RESULT_CODE_WRONG_CERTIFICATES
private static final java.lang.String TAG
private static final android.support.v4.provider.SelfDestructiveThread sBackgroundThread
private static final java.util.Comparator sByteArrayComparator
private static final java.lang.Object sLock
private static final android.support.v4.util.SimpleArrayMap sPendingReplies
private static final android.support.v4.util.LruCache sTypefaceCache
    static void <clinit>()
    {
        android.support.v4.util.LruCache $r0;
        android.support.v4.provider.SelfDestructiveThread $r1;
        java.lang.Object $r2;
        android.support.v4.util.SimpleArrayMap $r3;
        android.support.v4.provider.FontsContractCompat$5 $r4;

        $r0 = new android.support.v4.util.LruCache;

        specialinvoke $r0.<android.support.v4.util.LruCache: void <init>(int)>(16);

        <android.support.v4.provider.FontsContractCompat: android.support.v4.util.LruCache sTypefaceCache> = $r0;

        $r1 = new android.support.v4.provider.SelfDestructiveThread;

        specialinvoke $r1.<android.support.v4.provider.SelfDestructiveThread: void <init>(java.lang.String,int,int)>("fonts", 10, 10000);

        <android.support.v4.provider.FontsContractCompat: android.support.v4.provider.SelfDestructiveThread sBackgroundThread> = $r1;

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        <android.support.v4.provider.FontsContractCompat: java.lang.Object sLock> = $r2;

        $r3 = new android.support.v4.util.SimpleArrayMap;

        specialinvoke $r3.<android.support.v4.util.SimpleArrayMap: void <init>()>();

        <android.support.v4.provider.FontsContractCompat: android.support.v4.util.SimpleArrayMap sPendingReplies> = $r3;

        $r4 = new android.support.v4.provider.FontsContractCompat$5;

        specialinvoke $r4.<android.support.v4.provider.FontsContractCompat$5: void <init>()>();

        <android.support.v4.provider.FontsContractCompat: java.util.Comparator sByteArrayComparator> = $r4;

        return;
    }
    private void <init>()
    {
        android.support.v4.provider.FontsContractCompat r0;

        r0 := @this: android.support.v4.provider.FontsContractCompat;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    static android.graphics.Typeface access$000(android.content.Context, android.support.v4.provider.FontRequest, int)
    {
        android.content.Context $r0;
        android.support.v4.provider.FontRequest $r1;
        int $i0;
        android.graphics.Typeface $r2;

        $r0 := @parameter0: android.content.Context;

        $r1 := @parameter1: android.support.v4.provider.FontRequest;

        $i0 := @parameter2: int;

        $r2 = staticinvoke <android.support.v4.provider.FontsContractCompat: android.graphics.Typeface getFontInternal(android.content.Context,android.support.v4.provider.FontRequest,int)>($r0, $r1, $i0);

        return $r2;
    }
    static android.support.v4.util.LruCache access$100()
    {
        android.support.v4.util.LruCache r0;

        r0 = <android.support.v4.provider.FontsContractCompat: android.support.v4.util.LruCache sTypefaceCache>;

        return r0;
    }
    static java.lang.Object access$200()
    {
        java.lang.Object r0;

        r0 = <android.support.v4.provider.FontsContractCompat: java.lang.Object sLock>;

        return r0;
    }
    static android.support.v4.util.SimpleArrayMap access$300()
    {
        android.support.v4.util.SimpleArrayMap r0;

        r0 = <android.support.v4.provider.FontsContractCompat: android.support.v4.util.SimpleArrayMap sPendingReplies>;

        return r0;
    }
    public static android.graphics.Typeface buildTypeface(android.content.Context, android.os.CancellationSignal, android.support.v4.provider.FontsContractCompat$FontInfo[])
    {
        android.content.Context $r0;
        android.os.CancellationSignal $r1;
        android.support.v4.provider.FontsContractCompat$FontInfo[] $r2;
        android.graphics.Typeface $r3;

        $r0 := @parameter0: android.content.Context;

        $r1 := @parameter1: android.os.CancellationSignal;

        $r2 := @parameter2: android.support.v4.provider.FontsContractCompat$FontInfo[];

        $r3 = staticinvoke <android.support.v4.graphics.TypefaceCompat: android.graphics.Typeface createFromFontInfo(android.content.Context,android.os.CancellationSignal,android.support.v4.provider.FontsContractCompat$FontInfo[],int)>($r0, $r1, $r2, 0);

        return $r3;
    }
    private static java.util.List convertToByteArrayList(android.content.pm.Signature[])
    {
        android.content.pm.Signature[] $r0;
        java.util.ArrayList r1;
        byte[] $r2;
        int i0, $i1;
        android.content.pm.Signature $r3;

        $r0 := @parameter0: android.content.pm.Signature[];

        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>()>();

        i0 = 0;

     label1:
        $i1 = lengthof $r0;

        if i0 >= $i1 goto label2;

        $r3 = $r0[i0];

        $r2 = virtualinvoke $r3.<android.content.pm.Signature: byte[] toByteArray()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r2);

        i0 = i0 + 1;

        goto label1;

     label2:
        return r1;
    }
    private static boolean equalsByteArrayList(java.util.List, java.util.List)
    {
        java.util.List r0, r1;
        int $i0, $i1;
        java.lang.Object $r2;
        byte[] $r3, $r4;
        boolean $z0;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i0 == $i1 goto label1;

        return 0;

     label1:
        $i0 = 0;

     label2:
        $i1 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 >= $i1 goto label4;

        $r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>($i0);

        $r3 = (byte[]) $r2;

        $r2 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>($i0);

        $r4 = (byte[]) $r2;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r3, $r4);

        if $z0 != 0 goto label3;

        return 0;

     label3:
        $i0 = $i0 + 1;

        goto label2;

     label4:
        return 1;
    }
    public static android.support.v4.provider.FontsContractCompat$FontFamilyResult fetchFonts(android.content.Context, android.os.CancellationSignal, android.support.v4.provider.FontRequest) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.content.Context $r0;
        android.os.CancellationSignal $r1;
        android.support.v4.provider.FontRequest $r2;
        android.content.pm.PackageManager $r3;
        android.content.res.Resources $r4;
        android.content.pm.ProviderInfo $r5;
        android.support.v4.provider.FontsContractCompat$FontFamilyResult $r6;
        java.lang.String $r7;
        android.support.v4.provider.FontsContractCompat$FontInfo[] $r8;

        $r0 := @parameter0: android.content.Context;

        $r1 := @parameter1: android.os.CancellationSignal;

        $r2 := @parameter2: android.support.v4.provider.FontRequest;

        $r3 = virtualinvoke $r0.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r4 = virtualinvoke $r0.<android.content.Context: android.content.res.Resources getResources()>();

        $r5 = staticinvoke <android.support.v4.provider.FontsContractCompat: android.content.pm.ProviderInfo getProvider(android.content.pm.PackageManager,android.support.v4.provider.FontRequest,android.content.res.Resources)>($r3, $r2, $r4);

        if $r5 != null goto label1;

        $r6 = new android.support.v4.provider.FontsContractCompat$FontFamilyResult;

        specialinvoke $r6.<android.support.v4.provider.FontsContractCompat$FontFamilyResult: void <init>(int,android.support.v4.provider.FontsContractCompat$FontInfo[])>(1, null);

        return $r6;

     label1:
        $r7 = $r5.<android.content.pm.ProviderInfo: java.lang.String authority>;

        $r8 = staticinvoke <android.support.v4.provider.FontsContractCompat: android.support.v4.provider.FontsContractCompat$FontInfo[] getFontFromProvider(android.content.Context,android.support.v4.provider.FontRequest,java.lang.String,android.os.CancellationSignal)>($r0, $r2, $r7, $r1);

        $r6 = new android.support.v4.provider.FontsContractCompat$FontFamilyResult;

        specialinvoke $r6.<android.support.v4.provider.FontsContractCompat$FontFamilyResult: void <init>(int,android.support.v4.provider.FontsContractCompat$FontInfo[])>(0, $r8);

        return $r6;
    }
    private static java.util.List getCertificates(android.support.v4.provider.FontRequest, android.content.res.Resources)
    {
        android.support.v4.provider.FontRequest $r0;
        android.content.res.Resources $r1;
        java.util.List $r2;
        int $i0;

        $r0 := @parameter0: android.support.v4.provider.FontRequest;

        $r1 := @parameter1: android.content.res.Resources;

        $r2 = virtualinvoke $r0.<android.support.v4.provider.FontRequest: java.util.List getCertificates()>();

        if $r2 == null goto label1;

        $r2 = virtualinvoke $r0.<android.support.v4.provider.FontRequest: java.util.List getCertificates()>();

        return $r2;

     label1:
        $i0 = virtualinvoke $r0.<android.support.v4.provider.FontRequest: int getCertificatesArrayResId()>();

        $r2 = staticinvoke <android.support.v4.content.res.FontResourcesParserCompat: java.util.List readCerts(android.content.res.Resources,int)>($r1, $i0);

        return $r2;
    }
    static android.support.v4.provider.FontsContractCompat$FontInfo[] getFontFromProvider(android.content.Context, android.support.v4.provider.FontRequest, java.lang.String, android.os.CancellationSignal)
    {
        android.content.Context $r0;
        android.support.v4.provider.FontRequest $r1;
        java.lang.String $r2;
        android.os.CancellationSignal $r3;
        java.util.ArrayList r4;
        android.net.Uri$Builder $r5;
        android.net.Uri $r6, $r7, $r13;
        android.database.Cursor r8, $r12;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9, $i10;
        android.content.ContentResolver $r9;
        java.lang.String[] $r10, r11;
        boolean $z0;
        long $l8;
        android.support.v4.provider.FontsContractCompat$FontInfo $r14;
        java.lang.Throwable $r15;
        android.support.v4.provider.FontsContractCompat$FontInfo[] $r16;
        java.lang.Object[] $r17;

        $r0 := @parameter0: android.content.Context;

        $r1 := @parameter1: android.support.v4.provider.FontRequest;

        $r2 := @parameter2: java.lang.String;

        $r3 := @parameter3: android.os.CancellationSignal;

        r4 = new java.util.ArrayList;

        specialinvoke r4.<java.util.ArrayList: void <init>()>();

        $r5 = new android.net.Uri$Builder;

        specialinvoke $r5.<android.net.Uri$Builder: void <init>()>();

        $r5 = virtualinvoke $r5.<android.net.Uri$Builder: android.net.Uri$Builder scheme(java.lang.String)>("content");

        $r5 = virtualinvoke $r5.<android.net.Uri$Builder: android.net.Uri$Builder authority(java.lang.String)>($r2);

        $r6 = virtualinvoke $r5.<android.net.Uri$Builder: android.net.Uri build()>();

        $r5 = new android.net.Uri$Builder;

        specialinvoke $r5.<android.net.Uri$Builder: void <init>()>();

        $r5 = virtualinvoke $r5.<android.net.Uri$Builder: android.net.Uri$Builder scheme(java.lang.String)>("content");

        $r5 = virtualinvoke $r5.<android.net.Uri$Builder: android.net.Uri$Builder authority(java.lang.String)>($r2);

        $r5 = virtualinvoke $r5.<android.net.Uri$Builder: android.net.Uri$Builder appendPath(java.lang.String)>("file");

        $r7 = virtualinvoke $r5.<android.net.Uri$Builder: android.net.Uri build()>();

        r8 = null;

     label01:
        $i0 = <android.os.Build$VERSION: int SDK_INT>;

     label02:
        if $i0 <= 16 goto label27;

     label03:
        $r9 = virtualinvoke $r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r10 = newarray (java.lang.String)[7];

        $r10[0] = "_id";

        $r10[1] = "file_id";

        $r10[2] = "font_ttc_index";

        $r10[3] = "font_variation_settings";

        $r10[4] = "font_weight";

        $r10[5] = "font_italic";

        $r10[6] = "result_code";

        r11 = newarray (java.lang.String)[1];

        $r2 = virtualinvoke $r1.<android.support.v4.provider.FontRequest: java.lang.String getQuery()>();

        r11[0] = $r2;

        $r12 = virtualinvoke $r9.<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>($r6, $r10, "query = ?", r11, null, $r3);

     label04:
        r8 = $r12;

     label05:
        if r8 == null goto label35;

     label06:
        $i0 = interfaceinvoke r8.<android.database.Cursor: int getCount()>();

     label07:
        if $i0 <= 0 goto label35;

     label08:
        $i0 = interfaceinvoke r8.<android.database.Cursor: int getColumnIndex(java.lang.String)>("result_code");

        r4 = new java.util.ArrayList;

        specialinvoke r4.<java.util.ArrayList: void <init>()>();

     label09:
        $i1 = interfaceinvoke r8.<android.database.Cursor: int getColumnIndex(java.lang.String)>("_id");

        $i2 = interfaceinvoke r8.<android.database.Cursor: int getColumnIndex(java.lang.String)>("file_id");

        $i3 = interfaceinvoke r8.<android.database.Cursor: int getColumnIndex(java.lang.String)>("font_ttc_index");

        $i4 = interfaceinvoke r8.<android.database.Cursor: int getColumnIndex(java.lang.String)>("font_weight");

        $i5 = interfaceinvoke r8.<android.database.Cursor: int getColumnIndex(java.lang.String)>("font_italic");

     label10:
        $z0 = interfaceinvoke r8.<android.database.Cursor: boolean moveToNext()>();

     label11:
        if $z0 == 0 goto label35;

        if $i0 == -1 goto label29;

     label12:
        $i6 = interfaceinvoke r8.<android.database.Cursor: int getInt(int)>($i0);

     label13:
        if $i3 == -1 goto label30;

     label14:
        $i7 = interfaceinvoke r8.<android.database.Cursor: int getInt(int)>($i3);

     label15:
        if $i2 != -1 goto label31;

     label16:
        $l8 = interfaceinvoke r8.<android.database.Cursor: long getLong(int)>($i1);

        $r13 = staticinvoke <android.content.ContentUris: android.net.Uri withAppendedId(android.net.Uri,long)>($r6, $l8);

     label17:
        if $i4 == -1 goto label33;

     label18:
        $i9 = interfaceinvoke r8.<android.database.Cursor: int getInt(int)>($i4);

     label19:
        if $i5 == -1 goto label34;

     label20:
        $i10 = interfaceinvoke r8.<android.database.Cursor: int getInt(int)>($i5);

     label21:
        if $i10 != 1 goto label34;

        $z0 = 1;

     label22:
        $r14 = new android.support.v4.provider.FontsContractCompat$FontInfo;

        specialinvoke $r14.<android.support.v4.provider.FontsContractCompat$FontInfo: void <init>(android.net.Uri,int,int,boolean,int)>($r13, $i7, $i9, $z0, $i6);

        virtualinvoke r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r14);

     label23:
        goto label10;

     label24:
        $r15 := @caughtexception;

     label25:
        if r8 == null goto label26;

        interfaceinvoke r8.<android.database.Cursor: void close()>();

     label26:
        throw $r15;

     label27:
        $r9 = virtualinvoke $r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r10 = newarray (java.lang.String)[7];

        $r10[0] = "_id";

        $r10[1] = "file_id";

        $r10[2] = "font_ttc_index";

        $r10[3] = "font_variation_settings";

        $r10[4] = "font_weight";

        $r10[5] = "font_italic";

        $r10[6] = "result_code";

        r11 = newarray (java.lang.String)[1];

        $r2 = virtualinvoke $r1.<android.support.v4.provider.FontRequest: java.lang.String getQuery()>();

        r11[0] = $r2;

        $r12 = virtualinvoke $r9.<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>($r6, $r10, "query = ?", r11, null);

     label28:
        r8 = $r12;

        goto label05;

     label29:
        $i6 = 0;

        goto label13;

     label30:
        $i7 = 0;

        goto label15;

     label31:
        $l8 = interfaceinvoke r8.<android.database.Cursor: long getLong(int)>($i2);

        $r13 = staticinvoke <android.content.ContentUris: android.net.Uri withAppendedId(android.net.Uri,long)>($r7, $l8);

     label32:
        goto label17;

     label33:
        $i9 = 400;

        goto label19;

     label34:
        $z0 = 0;

        goto label22;

     label35:
        if r8 == null goto label36;

        interfaceinvoke r8.<android.database.Cursor: void close()>();

     label36:
        $r16 = newarray (android.support.v4.provider.FontsContractCompat$FontInfo)[0];

        $r17 = virtualinvoke r4.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r16);

        $r16 = (android.support.v4.provider.FontsContractCompat$FontInfo[]) $r17;

        return $r16;

     label37:
        $r15 := @caughtexception;

        goto label25;

        catch java.lang.Throwable from label01 to label02 with label37;
        catch java.lang.Throwable from label03 to label04 with label37;
        catch java.lang.Throwable from label06 to label07 with label37;
        catch java.lang.Throwable from label08 to label09 with label37;
        catch java.lang.Throwable from label09 to label11 with label24;
        catch java.lang.Throwable from label12 to label13 with label24;
        catch java.lang.Throwable from label14 to label15 with label24;
        catch java.lang.Throwable from label16 to label17 with label24;
        catch java.lang.Throwable from label18 to label19 with label24;
        catch java.lang.Throwable from label20 to label21 with label24;
        catch java.lang.Throwable from label22 to label23 with label24;
        catch java.lang.Throwable from label27 to label28 with label37;
        catch java.lang.Throwable from label31 to label32 with label24;
    }
    private static android.graphics.Typeface getFontInternal(android.content.Context, android.support.v4.provider.FontRequest, int)
    {
        android.content.Context $r0;
        android.support.v4.provider.FontRequest $r1;
        int $i0, $i1;
        android.content.pm.PackageManager$NameNotFoundException r2;
        android.support.v4.provider.FontsContractCompat$FontFamilyResult $r3;
        android.support.v4.provider.FontsContractCompat$FontInfo[] $r4;
        android.graphics.Typeface $r5;

        $r0 := @parameter0: android.content.Context;

        $r1 := @parameter1: android.support.v4.provider.FontRequest;

        $i0 := @parameter2: int;

     label1:
        $r3 = staticinvoke <android.support.v4.provider.FontsContractCompat: android.support.v4.provider.FontsContractCompat$FontFamilyResult fetchFonts(android.content.Context,android.os.CancellationSignal,android.support.v4.provider.FontRequest)>($r0, null, $r1);

     label2:
        $i1 = virtualinvoke $r3.<android.support.v4.provider.FontsContractCompat$FontFamilyResult: int getStatusCode()>();

        if $i1 != 0 goto label4;

        $r4 = virtualinvoke $r3.<android.support.v4.provider.FontsContractCompat$FontFamilyResult: android.support.v4.provider.FontsContractCompat$FontInfo[] getFonts()>();

        $r5 = staticinvoke <android.support.v4.graphics.TypefaceCompat: android.graphics.Typeface createFromFontInfo(android.content.Context,android.os.CancellationSignal,android.support.v4.provider.FontsContractCompat$FontInfo[],int)>($r0, null, $r4, $i0);

        return $r5;

     label3:
        r2 := @caughtexception;

     label4:
        return null;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label3;
    }
    public static android.graphics.Typeface getFontSync(android.content.Context, android.support.v4.provider.FontRequest, android.widget.TextView, int, int, int)
    {
        android.content.Context $r0;
        android.support.v4.provider.FontRequest $r1;
        android.widget.TextView $r2;
        int $i0, $i1, $i2;
        java.lang.InterruptedException r3;
        android.support.v4.provider.FontsContractCompat$1 r4;
        java.util.ArrayList r5;
        android.support.v4.provider.FontsContractCompat$2 r6;
        java.lang.ref.WeakReference r7;
        java.lang.StringBuilder $r8;
        java.lang.String $r9;
        android.support.v4.util.LruCache $r10;
        java.lang.Object $r11, $r15;
        android.graphics.Typeface r12;
        boolean z0;
        android.support.v4.provider.SelfDestructiveThread $r13;
        android.support.v4.util.SimpleArrayMap $r14;
        java.lang.Throwable $r16;
        android.support.v4.provider.FontsContractCompat$3 $r17;

        $r0 := @parameter0: android.content.Context;

        $r1 := @parameter1: android.support.v4.provider.FontRequest;

        $r2 := @parameter2: android.widget.TextView;

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $i2 := @parameter5: int;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r1.<android.support.v4.provider.FontRequest: java.lang.String getIdentifier()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = <android.support.v4.provider.FontsContractCompat: android.support.v4.util.LruCache sTypefaceCache>;

        $r11 = virtualinvoke $r10.<android.support.v4.util.LruCache: java.lang.Object get(java.lang.Object)>($r9);

        r12 = (android.graphics.Typeface) $r11;

        if r12 == null goto label01;

        return r12;

     label01:
        if $i0 != 0 goto label03;

        z0 = 1;

     label02:
        if z0 == 0 goto label04;

        if $i1 != -1 goto label04;

        r12 = staticinvoke <android.support.v4.provider.FontsContractCompat: android.graphics.Typeface getFontInternal(android.content.Context,android.support.v4.provider.FontRequest,int)>($r0, $r1, $i2);

        return r12;

     label03:
        z0 = 0;

        goto label02;

     label04:
        r4 = new android.support.v4.provider.FontsContractCompat$1;

        specialinvoke r4.<android.support.v4.provider.FontsContractCompat$1: void <init>(android.content.Context,android.support.v4.provider.FontRequest,int,java.lang.String)>($r0, $r1, $i2, $r9);

        if z0 == 0 goto label08;

        $r13 = <android.support.v4.provider.FontsContractCompat: android.support.v4.provider.SelfDestructiveThread sBackgroundThread>;

     label05:
        $r11 = virtualinvoke $r13.<android.support.v4.provider.SelfDestructiveThread: java.lang.Object postAndWait(java.util.concurrent.Callable,int)>(r4, $i1);

     label06:
        r12 = (android.graphics.Typeface) $r11;

        return r12;

     label07:
        r3 := @caughtexception;

        return null;

     label08:
        r7 = new java.lang.ref.WeakReference;

        specialinvoke r7.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>($r2);

        r6 = new android.support.v4.provider.FontsContractCompat$2;

        specialinvoke r6.<android.support.v4.provider.FontsContractCompat$2: void <init>(java.lang.ref.WeakReference,android.widget.TextView,int)>(r7, $r2, $i2);

        $r11 = <android.support.v4.provider.FontsContractCompat: java.lang.Object sLock>;

        entermonitor $r11;

     label09:
        $r14 = <android.support.v4.provider.FontsContractCompat: android.support.v4.util.SimpleArrayMap sPendingReplies>;

        z0 = virtualinvoke $r14.<android.support.v4.util.SimpleArrayMap: boolean containsKey(java.lang.Object)>($r9);

        if z0 == 0 goto label13;

        $r14 = <android.support.v4.provider.FontsContractCompat: android.support.v4.util.SimpleArrayMap sPendingReplies>;

        $r15 = virtualinvoke $r14.<android.support.v4.util.SimpleArrayMap: java.lang.Object get(java.lang.Object)>($r9);

        r5 = (java.util.ArrayList) $r15;

        virtualinvoke r5.<java.util.ArrayList: boolean add(java.lang.Object)>(r6);

        exitmonitor $r11;

     label10:
        return null;

     label11:
        $r16 := @caughtexception;

        exitmonitor $r11;

     label12:
        throw $r16;

     label13:
        r5 = new java.util.ArrayList;

        specialinvoke r5.<java.util.ArrayList: void <init>()>();

        virtualinvoke r5.<java.util.ArrayList: boolean add(java.lang.Object)>(r6);

        $r14 = <android.support.v4.provider.FontsContractCompat: android.support.v4.util.SimpleArrayMap sPendingReplies>;

        virtualinvoke $r14.<android.support.v4.util.SimpleArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, r5);

        exitmonitor $r11;

     label14:
        $r13 = <android.support.v4.provider.FontsContractCompat: android.support.v4.provider.SelfDestructiveThread sBackgroundThread>;

        $r17 = new android.support.v4.provider.FontsContractCompat$3;

        specialinvoke $r17.<android.support.v4.provider.FontsContractCompat$3: void <init>(java.lang.String)>($r9);

        virtualinvoke $r13.<android.support.v4.provider.SelfDestructiveThread: void postAndReply(java.util.concurrent.Callable,android.support.v4.provider.SelfDestructiveThread$ReplyCallback)>(r4, $r17);

        return null;

        catch java.lang.InterruptedException from label05 to label06 with label07;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
        catch java.lang.Throwable from label13 to label14 with label11;
    }
    public static android.content.pm.ProviderInfo getProvider(android.content.pm.PackageManager, android.support.v4.provider.FontRequest, android.content.res.Resources) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.content.pm.PackageManager $r0;
        android.support.v4.provider.FontRequest $r1;
        android.content.res.Resources $r2;
        java.util.ArrayList r3;
        java.lang.String $r4, $r8, $r9;
        android.content.pm.ProviderInfo $r5;
        android.content.pm.PackageManager$NameNotFoundException $r6;
        java.lang.StringBuilder $r7;
        boolean $z0;
        android.content.pm.PackageInfo $r10;
        android.content.pm.Signature[] $r11;
        java.util.List $r12, $r14;
        java.util.Comparator $r13;
        int i0, $i1;
        java.lang.Object $r15;
        java.util.Collection $r16;

        $r0 := @parameter0: android.content.pm.PackageManager;

        $r1 := @parameter1: android.support.v4.provider.FontRequest;

        $r2 := @parameter2: android.content.res.Resources;

        $r4 = virtualinvoke $r1.<android.support.v4.provider.FontRequest: java.lang.String getProviderAuthority()>();

        $r5 = virtualinvoke $r0.<android.content.pm.PackageManager: android.content.pm.ProviderInfo resolveContentProvider(java.lang.String,int)>($r4, 0);

        if $r5 != null goto label1;

        $r6 = new android.content.pm.PackageManager$NameNotFoundException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No package found for authority: ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<android.content.pm.PackageManager$NameNotFoundException: void <init>(java.lang.String)>($r4);

        throw $r6;

     label1:
        $r8 = $r5.<android.content.pm.ProviderInfo: java.lang.String packageName>;

        $r9 = virtualinvoke $r1.<android.support.v4.provider.FontRequest: java.lang.String getProviderPackage()>();

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z0 != 0 goto label2;

        $r6 = new android.content.pm.PackageManager$NameNotFoundException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Found content provider ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", but package was not ");

        $r4 = virtualinvoke $r1.<android.support.v4.provider.FontRequest: java.lang.String getProviderPackage()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<android.content.pm.PackageManager$NameNotFoundException: void <init>(java.lang.String)>($r4);

        throw $r6;

     label2:
        $r4 = $r5.<android.content.pm.ProviderInfo: java.lang.String packageName>;

        $r10 = virtualinvoke $r0.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>($r4, 64);

        $r11 = $r10.<android.content.pm.PackageInfo: android.content.pm.Signature[] signatures>;

        $r12 = staticinvoke <android.support.v4.provider.FontsContractCompat: java.util.List convertToByteArrayList(android.content.pm.Signature[])>($r11);

        $r13 = <android.support.v4.provider.FontsContractCompat: java.util.Comparator sByteArrayComparator>;

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r12, $r13);

        $r14 = staticinvoke <android.support.v4.provider.FontsContractCompat: java.util.List getCertificates(android.support.v4.provider.FontRequest,android.content.res.Resources)>($r1, $r2);

        i0 = 0;

     label3:
        $i1 = interfaceinvoke $r14.<java.util.List: int size()>();

        if i0 >= $i1 goto label5;

        r3 = new java.util.ArrayList;

        $r15 = interfaceinvoke $r14.<java.util.List: java.lang.Object get(int)>(i0);

        $r16 = (java.util.Collection) $r15;

        specialinvoke r3.<java.util.ArrayList: void <init>(java.util.Collection)>($r16);

        $r13 = <android.support.v4.provider.FontsContractCompat: java.util.Comparator sByteArrayComparator>;

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(r3, $r13);

        $z0 = staticinvoke <android.support.v4.provider.FontsContractCompat: boolean equalsByteArrayList(java.util.List,java.util.List)>($r12, r3);

        if $z0 == 0 goto label4;

        return $r5;

     label4:
        i0 = i0 + 1;

        goto label3;

     label5:
        return null;
    }
    public static java.util.Map prepareFontData(android.content.Context, android.support.v4.provider.FontsContractCompat$FontInfo[], android.os.CancellationSignal)
    {
        android.content.Context $r0;
        android.support.v4.provider.FontsContractCompat$FontInfo[] $r1;
        android.os.CancellationSignal $r2;
        android.support.v4.provider.FontsContractCompat$FontInfo r3;
        java.util.HashMap r4;
        int $i0, $i1, $i2;
        android.net.Uri $r5;
        boolean $z0;
        java.nio.ByteBuffer $r6;
        java.util.Map $r7;

        $r0 := @parameter0: android.content.Context;

        $r1 := @parameter1: android.support.v4.provider.FontsContractCompat$FontInfo[];

        $r2 := @parameter2: android.os.CancellationSignal;

        r4 = new java.util.HashMap;

        specialinvoke r4.<java.util.HashMap: void <init>()>();

        $i0 = lengthof $r1;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label4;

        r3 = $r1[$i1];

        $i2 = virtualinvoke r3.<android.support.v4.provider.FontsContractCompat$FontInfo: int getResultCode()>();

        if $i2 == 0 goto label3;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        $r5 = virtualinvoke r3.<android.support.v4.provider.FontsContractCompat$FontInfo: android.net.Uri getUri()>();

        $z0 = virtualinvoke r4.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r5);

        if $z0 != 0 goto label2;

        $r6 = staticinvoke <android.support.v4.graphics.TypefaceCompatUtil: java.nio.ByteBuffer mmap(android.content.Context,android.os.CancellationSignal,android.net.Uri)>($r0, $r2, $r5);

        virtualinvoke r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r6);

        goto label2;

     label4:
        $r7 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>(r4);

        return $r7;
    }
    public static void requestFont(android.content.Context, android.support.v4.provider.FontRequest, android.support.v4.provider.FontsContractCompat$FontRequestCallback, android.os.Handler)
    {
        android.content.Context $r0;
        android.support.v4.provider.FontRequest $r1;
        android.support.v4.provider.FontsContractCompat$FontRequestCallback $r2;
        android.os.Handler $r3, r4;
        android.support.v4.provider.FontsContractCompat$4 $r5;

        $r0 := @parameter0: android.content.Context;

        $r1 := @parameter1: android.support.v4.provider.FontRequest;

        $r2 := @parameter2: android.support.v4.provider.FontsContractCompat$FontRequestCallback;

        $r3 := @parameter3: android.os.Handler;

        r4 = new android.os.Handler;

        specialinvoke r4.<android.os.Handler: void <init>()>();

        $r5 = new android.support.v4.provider.FontsContractCompat$4;

        specialinvoke $r5.<android.support.v4.provider.FontsContractCompat$4: void <init>(android.content.Context,android.support.v4.provider.FontRequest,android.os.Handler,android.support.v4.provider.FontsContractCompat$FontRequestCallback)>($r0, $r1, r4, $r2);

        virtualinvoke $r3.<android.os.Handler: boolean post(java.lang.Runnable)>($r5);

        return;
    }
