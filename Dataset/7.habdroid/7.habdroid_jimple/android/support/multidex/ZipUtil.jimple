android.support.multidex.ZipUtil extends java.lang.Object
private static final int BUFFER_SIZE
private static final int ENDHDR
private static final int ENDSIG
    void <init>()
    {
        android.support.multidex.ZipUtil r0;

        r0 := @this: android.support.multidex.ZipUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    static long computeCrcOfCentralDir(java.io.RandomAccessFile, android.support.multidex.ZipUtil$CentralDirectory) throws java.io.IOException
    {
        java.io.RandomAccessFile $r0;
        android.support.multidex.ZipUtil$CentralDirectory $r1;
        byte[] r2;
        java.util.zip.CRC32 r3;
        long l0, $l1;
        int i2;
        byte $b3;

        $r0 := @parameter0: java.io.RandomAccessFile;

        $r1 := @parameter1: android.support.multidex.ZipUtil$CentralDirectory;

        r3 = new java.util.zip.CRC32;

        specialinvoke r3.<java.util.zip.CRC32: void <init>()>();

        l0 = $r1.<android.support.multidex.ZipUtil$CentralDirectory: long size>;

        $l1 = $r1.<android.support.multidex.ZipUtil$CentralDirectory: long offset>;

        virtualinvoke $r0.<java.io.RandomAccessFile: void seek(long)>($l1);

        $l1 = staticinvoke <java.lang.Math: long min(long,long)>(16384L, l0);

        i2 = (int) $l1;

        r2 = newarray (byte)[16384];

        i2 = virtualinvoke $r0.<java.io.RandomAccessFile: int read(byte[],int,int)>(r2, 0, i2);

     label1:
        if i2 == -1 goto label2;

        virtualinvoke r3.<java.util.zip.CRC32: void update(byte[],int,int)>(r2, 0, i2);

        $l1 = (long) i2;

        l0 = l0 - $l1;

        $b3 = l0 cmp 0L;

        if $b3 != 0 goto label3;

     label2:
        l0 = virtualinvoke r3.<java.util.zip.CRC32: long getValue()>();

        return l0;

     label3:
        $l1 = staticinvoke <java.lang.Math: long min(long,long)>(16384L, l0);

        i2 = (int) $l1;

        i2 = virtualinvoke $r0.<java.io.RandomAccessFile: int read(byte[],int,int)>(r2, 0, i2);

        goto label1;
    }
    static android.support.multidex.ZipUtil$CentralDirectory findCentralDirectory(java.io.RandomAccessFile) throws java.io.IOException, java.util.zip.ZipException
    {
        java.io.RandomAccessFile $r0;
        android.support.multidex.ZipUtil$CentralDirectory r1;
        long $l0, l2;
        byte $b1;
        java.util.zip.ZipException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        int $i3, $i4;

        $r0 := @parameter0: java.io.RandomAccessFile;

        $l0 = virtualinvoke $r0.<java.io.RandomAccessFile: long length()>();

        $l0 = $l0 - 22L;

        $b1 = $l0 cmp 0L;

        if $b1 >= 0 goto label1;

        $r2 = new java.util.zip.ZipException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File too short to be a zip file: ");

        $l0 = virtualinvoke $r0.<java.io.RandomAccessFile: long length()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.util.zip.ZipException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label1:
        l2 = $l0 - 65536L;

        $b1 = l2 cmp 0L;

        if $b1 >= 0 goto label2;

        l2 = 0L;

     label2:
        $i3 = staticinvoke <java.lang.Integer: int reverseBytes(int)>(101010256);

     label3:
        virtualinvoke $r0.<java.io.RandomAccessFile: void seek(long)>($l0);

        $i4 = virtualinvoke $r0.<java.io.RandomAccessFile: int readInt()>();

        if $i4 != $i3 goto label4;

        virtualinvoke $r0.<java.io.RandomAccessFile: int skipBytes(int)>(2);

        virtualinvoke $r0.<java.io.RandomAccessFile: int skipBytes(int)>(2);

        virtualinvoke $r0.<java.io.RandomAccessFile: int skipBytes(int)>(2);

        virtualinvoke $r0.<java.io.RandomAccessFile: int skipBytes(int)>(2);

        r1 = new android.support.multidex.ZipUtil$CentralDirectory;

        specialinvoke r1.<android.support.multidex.ZipUtil$CentralDirectory: void <init>()>();

        $i3 = virtualinvoke $r0.<java.io.RandomAccessFile: int readInt()>();

        $i3 = staticinvoke <java.lang.Integer: int reverseBytes(int)>($i3);

        $l0 = (long) $i3;

        $l0 = $l0 & 4294967295L;

        r1.<android.support.multidex.ZipUtil$CentralDirectory: long size> = $l0;

        $i3 = virtualinvoke $r0.<java.io.RandomAccessFile: int readInt()>();

        $i3 = staticinvoke <java.lang.Integer: int reverseBytes(int)>($i3);

        $l0 = (long) $i3;

        $l0 = $l0 & 4294967295L;

        r1.<android.support.multidex.ZipUtil$CentralDirectory: long offset> = $l0;

        return r1;

     label4:
        $l0 = $l0 - 1L;

        $b1 = $l0 cmp l2;

        if $b1 >= 0 goto label3;

        $r2 = new java.util.zip.ZipException;

        specialinvoke $r2.<java.util.zip.ZipException: void <init>(java.lang.String)>("End Of Central Directory signature not found");

        throw $r2;
    }
    static long getZipCrc(java.io.File) throws java.io.IOException
    {
        java.io.File $r0;
        java.io.RandomAccessFile r1;
        android.support.multidex.ZipUtil$CentralDirectory $r2;
        long $l0;
        java.lang.Throwable $r3;

        $r0 := @parameter0: java.io.File;

        r1 = new java.io.RandomAccessFile;

        specialinvoke r1.<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>($r0, "r");

     label1:
        $r2 = staticinvoke <android.support.multidex.ZipUtil: android.support.multidex.ZipUtil$CentralDirectory findCentralDirectory(java.io.RandomAccessFile)>(r1);

        $l0 = staticinvoke <android.support.multidex.ZipUtil: long computeCrcOfCentralDir(java.io.RandomAccessFile,android.support.multidex.ZipUtil$CentralDirectory)>(r1, $r2);

     label2:
        virtualinvoke r1.<java.io.RandomAccessFile: void close()>();

        return $l0;

     label3:
        $r3 := @caughtexception;

        virtualinvoke r1.<java.io.RandomAccessFile: void close()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
