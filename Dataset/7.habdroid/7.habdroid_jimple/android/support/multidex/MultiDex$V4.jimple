android.support.multidex.MultiDex$V4 extends java.lang.Object
    private void <init>()
    {
        android.support.multidex.MultiDex$V4 r0;

        r0 := @this: android.support.multidex.MultiDex$V4;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    static void access$200(java.lang.ClassLoader, java.util.List) throws java.lang.IllegalArgumentException, java.lang.IllegalAccessException, java.lang.NoSuchFieldException, java.io.IOException
    {
        java.lang.ClassLoader $r0;
        java.util.List $r1;

        $r0 := @parameter0: java.lang.ClassLoader;

        $r1 := @parameter1: java.util.List;

        staticinvoke <android.support.multidex.MultiDex$V4: void install(java.lang.ClassLoader,java.util.List)>($r0, $r1);

        return;
    }
    private static void install(java.lang.ClassLoader, java.util.List) throws java.lang.IllegalArgumentException, java.lang.IllegalAccessException, java.lang.NoSuchFieldException, java.io.IOException
    {
        java.lang.ClassLoader $r0;
        java.util.List r1;
        dalvik.system.DexFile[] r2;
        java.io.File[] r3;
        java.lang.String[] r4;
        java.util.zip.ZipFile[] r5;
        java.lang.StringBuilder r6, $r12;
        int $i0;
        java.lang.reflect.Field $r7;
        java.lang.Object $r8;
        java.lang.String $r9, $r14;
        java.util.ListIterator $r10;
        boolean $z0;
        java.io.File r11;
        java.util.zip.ZipFile $r13;
        dalvik.system.DexFile $r15;

        $r0 := @parameter0: java.lang.ClassLoader;

        r1 := @parameter1: java.util.List;

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        $r7 = staticinvoke <android.support.multidex.MultiDex: java.lang.reflect.Field access$300(java.lang.Object,java.lang.String)>($r0, "path");

        r6 = new java.lang.StringBuilder;

        $r8 = virtualinvoke $r7.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>($r0);

        $r9 = (java.lang.String) $r8;

        specialinvoke r6.<java.lang.StringBuilder: void <init>(java.lang.String)>($r9);

        r4 = newarray (java.lang.String)[$i0];

        r3 = newarray (java.io.File)[$i0];

        r5 = newarray (java.util.zip.ZipFile)[$i0];

        r2 = newarray (dalvik.system.DexFile)[$i0];

        $r10 = interfaceinvoke r1.<java.util.List: java.util.ListIterator listIterator()>();

     label1:
        $z0 = interfaceinvoke $r10.<java.util.ListIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke $r10.<java.util.ListIterator: java.lang.Object next()>();

        r11 = (java.io.File) $r8;

        $r9 = virtualinvoke r11.<java.io.File: java.lang.String getAbsolutePath()>();

        $r12 = virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $i0 = interfaceinvoke $r10.<java.util.ListIterator: int previousIndex()>();

        r4[$i0] = $r9;

        r3[$i0] = r11;

        $r13 = new java.util.zip.ZipFile;

        specialinvoke $r13.<java.util.zip.ZipFile: void <init>(java.io.File)>(r11);

        r5[$i0] = $r13;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".dex");

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r15 = staticinvoke <dalvik.system.DexFile: dalvik.system.DexFile loadDex(java.lang.String,java.lang.String,int)>($r9, $r14, 0);

        r2[$i0] = $r15;

        goto label1;

     label2:
        $r9 = virtualinvoke r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>($r0, $r9);

        staticinvoke <android.support.multidex.MultiDex: void access$400(java.lang.Object,java.lang.String,java.lang.Object[])>($r0, "mPaths", r4);

        staticinvoke <android.support.multidex.MultiDex: void access$400(java.lang.Object,java.lang.String,java.lang.Object[])>($r0, "mFiles", r3);

        staticinvoke <android.support.multidex.MultiDex: void access$400(java.lang.Object,java.lang.String,java.lang.Object[])>($r0, "mZips", r5);

        staticinvoke <android.support.multidex.MultiDex: void access$400(java.lang.Object,java.lang.String,java.lang.Object[])>($r0, "mDexs", r2);

        return;
    }
