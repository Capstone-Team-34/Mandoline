android.support.graphics.drawable.VectorDrawableCompat extends android.support.graphics.drawable.VectorDrawableCommon
private static final boolean DBG_VECTOR_DRAWABLE
static final android.graphics.PorterDuff$Mode DEFAULT_TINT_MODE
private static final int LINECAP_BUTT
private static final int LINECAP_ROUND
private static final int LINECAP_SQUARE
private static final int LINEJOIN_BEVEL
private static final int LINEJOIN_MITER
private static final int LINEJOIN_ROUND
static final java.lang.String LOGTAG
private static final int MAX_CACHED_BITMAP_SIZE
private static final java.lang.String SHAPE_CLIP_PATH
private static final java.lang.String SHAPE_GROUP
private static final java.lang.String SHAPE_PATH
private static final java.lang.String SHAPE_VECTOR
private boolean mAllowCaching
private android.graphics.drawable.Drawable$ConstantState mCachedConstantStateDelegate
private android.graphics.ColorFilter mColorFilter
private boolean mMutated
private android.graphics.PorterDuffColorFilter mTintFilter
private final android.graphics.Rect mTmpBounds
private final float[] mTmpFloats
private final android.graphics.Matrix mTmpMatrix
private android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState
    static void <clinit>()
    {
        android.graphics.PorterDuff$Mode $r0;

        $r0 = <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode SRC_IN>;

        <android.support.graphics.drawable.VectorDrawableCompat: android.graphics.PorterDuff$Mode DEFAULT_TINT_MODE> = $r0;

        return;
    }
    void <init>()
    {
        android.support.graphics.drawable.VectorDrawableCompat r0;
        float[] $r1;
        android.graphics.Matrix $r2;
        android.graphics.Rect $r3;
        android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState $r4;

        r0 := @this: android.support.graphics.drawable.VectorDrawableCompat;

        specialinvoke r0.<android.support.graphics.drawable.VectorDrawableCommon: void <init>()>();

        r0.<android.support.graphics.drawable.VectorDrawableCompat: boolean mAllowCaching> = 1;

        $r1 = newarray (float)[9];

        r0.<android.support.graphics.drawable.VectorDrawableCompat: float[] mTmpFloats> = $r1;

        $r2 = new android.graphics.Matrix;

        specialinvoke $r2.<android.graphics.Matrix: void <init>()>();

        r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.Matrix mTmpMatrix> = $r2;

        $r3 = new android.graphics.Rect;

        specialinvoke $r3.<android.graphics.Rect: void <init>()>();

        r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.Rect mTmpBounds> = $r3;

        $r4 = new android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState;

        specialinvoke $r4.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: void <init>()>();

        r0.<android.support.graphics.drawable.VectorDrawableCompat: android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState> = $r4;

        return;
    }
    void <init>(android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState)
    {
        android.support.graphics.drawable.VectorDrawableCompat r0;
        android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState $r1;
        android.content.res.ColorStateList $r2;
        android.graphics.PorterDuff$Mode $r3;
        android.graphics.PorterDuffColorFilter $r4;
        float[] $r5;
        android.graphics.Matrix $r6;
        android.graphics.Rect $r7;

        r0 := @this: android.support.graphics.drawable.VectorDrawableCompat;

        $r1 := @parameter0: android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState;

        specialinvoke r0.<android.support.graphics.drawable.VectorDrawableCommon: void <init>()>();

        r0.<android.support.graphics.drawable.VectorDrawableCompat: boolean mAllowCaching> = 1;

        $r5 = newarray (float)[9];

        r0.<android.support.graphics.drawable.VectorDrawableCompat: float[] mTmpFloats> = $r5;

        $r6 = new android.graphics.Matrix;

        specialinvoke $r6.<android.graphics.Matrix: void <init>()>();

        r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.Matrix mTmpMatrix> = $r6;

        $r7 = new android.graphics.Rect;

        specialinvoke $r7.<android.graphics.Rect: void <init>()>();

        r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.Rect mTmpBounds> = $r7;

        r0.<android.support.graphics.drawable.VectorDrawableCompat: android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState> = $r1;

        $r4 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.PorterDuffColorFilter mTintFilter>;

        $r2 = $r1.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.content.res.ColorStateList mTint>;

        $r3 = $r1.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.graphics.PorterDuff$Mode mTintMode>;

        $r4 = virtualinvoke r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.PorterDuffColorFilter updateTintFilter(android.graphics.PorterDuffColorFilter,android.content.res.ColorStateList,android.graphics.PorterDuff$Mode)>($r4, $r2, $r3);

        r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.PorterDuffColorFilter mTintFilter> = $r4;

        return;
    }
    static int applyAlpha(int, float)
    {
        float $f0, $f1;
        int $i0, $i1;

        $i1 := @parameter0: int;

        $f0 := @parameter1: float;

        $i0 = staticinvoke <android.graphics.Color: int alpha(int)>($i1);

        $i1 = $i1 & 16777215;

        $f1 = (float) $i0;

        $f0 = $f1 * $f0;

        $i0 = (int) $f0;

        $i0 = $i0 << 24;

        $i1 = $i1 | $i0;

        return $i1;
    }
    public static android.support.graphics.drawable.VectorDrawableCompat create(android.content.res.Resources, int, android.content.res.Resources$Theme)
    {
        android.content.res.Resources $r0;
        int $i0, $i1;
        android.content.res.Resources$Theme $r1;
        android.support.graphics.drawable.VectorDrawableCompat r2;
        android.graphics.drawable.Drawable $r3;
        android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableDelegateState $r4;
        android.graphics.drawable.Drawable$ConstantState $r5;
        android.content.res.XmlResourceParser $r6;
        android.util.AttributeSet $r7;
        org.xmlpull.v1.XmlPullParserException $r8;
        java.io.IOException r9;

        $r0 := @parameter0: android.content.res.Resources;

        $i0 := @parameter1: int;

        $r1 := @parameter2: android.content.res.Resources$Theme;

        $i1 = <android.os.Build$VERSION: int SDK_INT>;

        if $i1 < 24 goto label01;

        r2 = new android.support.graphics.drawable.VectorDrawableCompat;

        specialinvoke r2.<android.support.graphics.drawable.VectorDrawableCompat: void <init>()>();

        $r3 = staticinvoke <android.support.v4.content.res.ResourcesCompat: android.graphics.drawable.Drawable getDrawable(android.content.res.Resources,int,android.content.res.Resources$Theme)>($r0, $i0, $r1);

        r2.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable> = $r3;

        $r4 = new android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableDelegateState;

        $r3 = r2.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        $r5 = virtualinvoke $r3.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable$ConstantState getConstantState()>();

        specialinvoke $r4.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableDelegateState: void <init>(android.graphics.drawable.Drawable$ConstantState)>($r5);

        r2.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable$ConstantState mCachedConstantStateDelegate> = $r4;

        return r2;

     label01:
        $r6 = virtualinvoke $r0.<android.content.res.Resources: android.content.res.XmlResourceParser getXml(int)>($i0);

        $r7 = staticinvoke <android.util.Xml: android.util.AttributeSet asAttributeSet(org.xmlpull.v1.XmlPullParser)>($r6);

     label02:
        $i0 = interfaceinvoke $r6.<org.xmlpull.v1.XmlPullParser: int next()>();

     label03:
        if $i0 == 2 goto label04;

        if $i0 != 1 goto label02;

     label04:
        if $i0 == 2 goto label09;

        $r8 = new org.xmlpull.v1.XmlPullParserException;

     label05:
        specialinvoke $r8.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>("No start tag found");

     label06:
        throw $r8;

     label07:
        $r8 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("VectorDrawableCompat", "parser error", $r8);

     label08:
        return null;

     label09:
        r2 = staticinvoke <android.support.graphics.drawable.VectorDrawableCompat: android.support.graphics.drawable.VectorDrawableCompat createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>($r0, $r6, $r7, $r1);

     label10:
        return r2;

     label11:
        r9 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("VectorDrawableCompat", "parser error", r9);

        goto label08;

        catch org.xmlpull.v1.XmlPullParserException from label01 to label03 with label07;
        catch org.xmlpull.v1.XmlPullParserException from label05 to label07 with label07;
        catch java.io.IOException from label01 to label03 with label11;
        catch java.io.IOException from label05 to label06 with label11;
        catch org.xmlpull.v1.XmlPullParserException from label09 to label10 with label07;
        catch java.io.IOException from label09 to label10 with label11;
    }
    public static android.support.graphics.drawable.VectorDrawableCompat createFromXmlInner(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, android.content.res.Resources$Theme) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        android.content.res.Resources $r0;
        org.xmlpull.v1.XmlPullParser $r1;
        android.util.AttributeSet $r2;
        android.content.res.Resources$Theme $r3;
        android.support.graphics.drawable.VectorDrawableCompat r4;

        $r0 := @parameter0: android.content.res.Resources;

        $r1 := @parameter1: org.xmlpull.v1.XmlPullParser;

        $r2 := @parameter2: android.util.AttributeSet;

        $r3 := @parameter3: android.content.res.Resources$Theme;

        r4 = new android.support.graphics.drawable.VectorDrawableCompat;

        specialinvoke r4.<android.support.graphics.drawable.VectorDrawableCompat: void <init>()>();

        virtualinvoke r4.<android.support.graphics.drawable.VectorDrawableCompat: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>($r0, $r1, $r2, $r3);

        return r4;
    }
    private void inflateInternal(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, android.content.res.Resources$Theme) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        android.support.graphics.drawable.VectorDrawableCompat r0;
        android.content.res.Resources $r1;
        org.xmlpull.v1.XmlPullParser $r2;
        android.util.AttributeSet $r3;
        android.content.res.Resources$Theme $r4;
        java.util.Stack r5;
        int i0, i1, $i2;
        android.support.graphics.drawable.VectorDrawableCompat$VGroup r6, r12;
        android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer r7;
        android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState r8;
        java.lang.StringBuffer r9;
        boolean z0, $z1;
        java.lang.String $r10, $r13;
        java.lang.Object $r11;
        android.support.graphics.drawable.VectorDrawableCompat$VFullPath r14;
        java.util.ArrayList $r15;
        android.support.v4.util.ArrayMap $r16;
        android.support.graphics.drawable.VectorDrawableCompat$VClipPath r17;
        org.xmlpull.v1.XmlPullParserException $r18;
        java.lang.StringBuilder $r19;

        r0 := @this: android.support.graphics.drawable.VectorDrawableCompat;

        $r1 := @parameter0: android.content.res.Resources;

        $r2 := @parameter1: org.xmlpull.v1.XmlPullParser;

        $r3 := @parameter2: android.util.AttributeSet;

        $r4 := @parameter3: android.content.res.Resources$Theme;

        r8 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        r7 = r8.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer>;

        z0 = 1;

        r5 = new java.util.Stack;

        specialinvoke r5.<java.util.Stack: void <init>()>();

        r6 = r7.<android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer: android.support.graphics.drawable.VectorDrawableCompat$VGroup mRootGroup>;

        virtualinvoke r5.<java.util.Stack: java.lang.Object push(java.lang.Object)>(r6);

        i1 = interfaceinvoke $r2.<org.xmlpull.v1.XmlPullParser: int getEventType()>();

        i0 = interfaceinvoke $r2.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        i0 = i0 + 1;

     label01:
        if i1 == 1 goto label10;

        $i2 = interfaceinvoke $r2.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        if $i2 >= i0 goto label02;

        if i1 == 3 goto label10;

     label02:
        if i1 != 2 goto label09;

        $r10 = interfaceinvoke $r2.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $r11 = virtualinvoke r5.<java.util.Stack: java.lang.Object peek()>();

        r12 = (android.support.graphics.drawable.VectorDrawableCompat$VGroup) $r11;

        $r13 = "path";

        $z1 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z1 == 0 goto label05;

        r14 = new android.support.graphics.drawable.VectorDrawableCompat$VFullPath;

        specialinvoke r14.<android.support.graphics.drawable.VectorDrawableCompat$VFullPath: void <init>()>();

        virtualinvoke r14.<android.support.graphics.drawable.VectorDrawableCompat$VFullPath: void inflate(android.content.res.Resources,android.util.AttributeSet,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser)>($r1, $r3, $r4, $r2);

        $r15 = r12.<android.support.graphics.drawable.VectorDrawableCompat$VGroup: java.util.ArrayList mChildren>;

        virtualinvoke $r15.<java.util.ArrayList: boolean add(java.lang.Object)>(r14);

        $r10 = virtualinvoke r14.<android.support.graphics.drawable.VectorDrawableCompat$VFullPath: java.lang.String getPathName()>();

        if $r10 == null goto label03;

        $r16 = r7.<android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer: android.support.v4.util.ArrayMap mVGTargetsMap>;

        $r10 = virtualinvoke r14.<android.support.graphics.drawable.VectorDrawableCompat$VFullPath: java.lang.String getPathName()>();

        virtualinvoke $r16.<android.support.v4.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, r14);

     label03:
        z0 = 0;

        i1 = r8.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: int mChangingConfigurations>;

        $i2 = r14.<android.support.graphics.drawable.VectorDrawableCompat$VFullPath: int mChangingConfigurations>;

        i1 = i1 | $i2;

        r8.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: int mChangingConfigurations> = i1;

     label04:
        i1 = interfaceinvoke $r2.<org.xmlpull.v1.XmlPullParser: int next()>();

        goto label01;

     label05:
        $r13 = "clip-path";

        $z1 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z1 == 0 goto label07;

        r17 = new android.support.graphics.drawable.VectorDrawableCompat$VClipPath;

        specialinvoke r17.<android.support.graphics.drawable.VectorDrawableCompat$VClipPath: void <init>()>();

        virtualinvoke r17.<android.support.graphics.drawable.VectorDrawableCompat$VClipPath: void inflate(android.content.res.Resources,android.util.AttributeSet,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser)>($r1, $r3, $r4, $r2);

        $r15 = r12.<android.support.graphics.drawable.VectorDrawableCompat$VGroup: java.util.ArrayList mChildren>;

        virtualinvoke $r15.<java.util.ArrayList: boolean add(java.lang.Object)>(r17);

        $r10 = virtualinvoke r17.<android.support.graphics.drawable.VectorDrawableCompat$VClipPath: java.lang.String getPathName()>();

        if $r10 == null goto label06;

        $r16 = r7.<android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer: android.support.v4.util.ArrayMap mVGTargetsMap>;

        $r10 = virtualinvoke r17.<android.support.graphics.drawable.VectorDrawableCompat$VClipPath: java.lang.String getPathName()>();

        virtualinvoke $r16.<android.support.v4.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, r17);

     label06:
        i1 = r8.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: int mChangingConfigurations>;

        $i2 = r17.<android.support.graphics.drawable.VectorDrawableCompat$VClipPath: int mChangingConfigurations>;

        i1 = i1 | $i2;

        r8.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: int mChangingConfigurations> = i1;

        goto label04;

     label07:
        $r13 = "group";

        $z1 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z1 == 0 goto label04;

        r6 = new android.support.graphics.drawable.VectorDrawableCompat$VGroup;

        specialinvoke r6.<android.support.graphics.drawable.VectorDrawableCompat$VGroup: void <init>()>();

        virtualinvoke r6.<android.support.graphics.drawable.VectorDrawableCompat$VGroup: void inflate(android.content.res.Resources,android.util.AttributeSet,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser)>($r1, $r3, $r4, $r2);

        $r15 = r12.<android.support.graphics.drawable.VectorDrawableCompat$VGroup: java.util.ArrayList mChildren>;

        virtualinvoke $r15.<java.util.ArrayList: boolean add(java.lang.Object)>(r6);

        virtualinvoke r5.<java.util.Stack: java.lang.Object push(java.lang.Object)>(r6);

        $r10 = virtualinvoke r6.<android.support.graphics.drawable.VectorDrawableCompat$VGroup: java.lang.String getGroupName()>();

        if $r10 == null goto label08;

        $r16 = r7.<android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer: android.support.v4.util.ArrayMap mVGTargetsMap>;

        $r10 = virtualinvoke r6.<android.support.graphics.drawable.VectorDrawableCompat$VGroup: java.lang.String getGroupName()>();

        virtualinvoke $r16.<android.support.v4.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, r6);

     label08:
        i1 = r8.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: int mChangingConfigurations>;

        $i2 = r6.<android.support.graphics.drawable.VectorDrawableCompat$VGroup: int mChangingConfigurations>;

        i1 = i1 | $i2;

        r8.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: int mChangingConfigurations> = i1;

        goto label04;

     label09:
        if i1 != 3 goto label04;

        $r10 = interfaceinvoke $r2.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $r13 = "group";

        $z1 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z1 == 0 goto label04;

        virtualinvoke r5.<java.util.Stack: java.lang.Object pop()>();

        goto label04;

     label10:
        if z0 == 0 goto label12;

        r9 = new java.lang.StringBuffer;

        specialinvoke r9.<java.lang.StringBuffer: void <init>()>();

        i0 = virtualinvoke r9.<java.lang.StringBuffer: int length()>();

        if i0 <= 0 goto label11;

        virtualinvoke r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" or ");

     label11:
        virtualinvoke r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("path");

        $r18 = new org.xmlpull.v1.XmlPullParserException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("no ");

        $r19 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r9);

        $r19 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" defined");

        $r10 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($r10);

        throw $r18;

     label12:
        return;
    }
    private boolean needMirroring()
    {
        android.support.graphics.drawable.VectorDrawableCompat r0;
        int $i0;
        boolean $z0;

        r0 := @this: android.support.graphics.drawable.VectorDrawableCompat;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 17 goto label1;

        $z0 = virtualinvoke r0.<android.support.graphics.drawable.VectorDrawableCompat: boolean isAutoMirrored()>();

        if $z0 == 0 goto label1;

        $i0 = staticinvoke <android.support.v4.graphics.drawable.DrawableCompat: int getLayoutDirection(android.graphics.drawable.Drawable)>(r0);

        if $i0 != 1 goto label1;

        return 1;

     label1:
        return 0;
    }
    private static android.graphics.PorterDuff$Mode parseTintModeCompat(int, android.graphics.PorterDuff$Mode)
    {
        int $i0;
        android.graphics.PorterDuff$Mode r0;

        $i0 := @parameter0: int;

        r0 := @parameter1: android.graphics.PorterDuff$Mode;

        lookupswitch($i0)
        {
            case 3: goto label2;
            case 4: goto label1;
            case 5: goto label3;
            case 6: goto label1;
            case 7: goto label1;
            case 8: goto label1;
            case 9: goto label4;
            case 10: goto label1;
            case 11: goto label1;
            case 12: goto label1;
            case 13: goto label1;
            case 14: goto label5;
            case 15: goto label6;
            case 16: goto label7;
            default: goto label1;
        };

     label1:
        return r0;

     label2:
        r0 = <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode SRC_OVER>;

        return r0;

     label3:
        r0 = <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode SRC_IN>;

        return r0;

     label4:
        r0 = <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode SRC_ATOP>;

        return r0;

     label5:
        r0 = <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode MULTIPLY>;

        return r0;

     label6:
        r0 = <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode SCREEN>;

        return r0;

     label7:
        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 11 goto label8;

        r0 = <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode ADD>;

     label8:
        return r0;
    }
    private void printGroupTree(android.support.graphics.drawable.VectorDrawableCompat$VGroup, int)
    {
        android.support.graphics.drawable.VectorDrawableCompat r0;
        android.support.graphics.drawable.VectorDrawableCompat$VGroup $r1, r8;
        int $i0, i1, $i2;
        java.lang.String r2, $r4;
        java.lang.StringBuilder $r3;
        float $f0;
        android.graphics.Matrix $r5;
        java.util.ArrayList $r6;
        java.lang.Object $r7;
        boolean $z0;
        android.support.graphics.drawable.VectorDrawableCompat$VPath r9;

        r0 := @this: android.support.graphics.drawable.VectorDrawableCompat;

        $r1 := @parameter0: android.support.graphics.drawable.VectorDrawableCompat$VGroup;

        $i0 := @parameter1: int;

        r2 = "";

        i1 = 0;

     label1:
        if i1 >= $i0 goto label2;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("current group is :");

        $r4 = virtualinvoke $r1.<android.support.graphics.drawable.VectorDrawableCompat$VGroup: java.lang.String getGroupName()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" rotation is ");

        $f0 = $r1.<android.support.graphics.drawable.VectorDrawableCompat$VGroup: float mRotate>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("VectorDrawableCompat", $r4);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("matrix is :");

        $r5 = virtualinvoke $r1.<android.support.graphics.drawable.VectorDrawableCompat$VGroup: android.graphics.Matrix getLocalMatrix()>();

        r2 = virtualinvoke $r5.<android.graphics.Matrix: java.lang.String toString()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("VectorDrawableCompat", r2);

        i1 = 0;

     label3:
        $r6 = $r1.<android.support.graphics.drawable.VectorDrawableCompat$VGroup: java.util.ArrayList mChildren>;

        $i2 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

        if i1 >= $i2 goto label6;

        $r6 = $r1.<android.support.graphics.drawable.VectorDrawableCompat$VGroup: java.util.ArrayList mChildren>;

        $r7 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $z0 = $r7 instanceof android.support.graphics.drawable.VectorDrawableCompat$VGroup;

        if $z0 == 0 goto label5;

        r8 = (android.support.graphics.drawable.VectorDrawableCompat$VGroup) $r7;

        $i2 = $i0 + 1;

        specialinvoke r0.<android.support.graphics.drawable.VectorDrawableCompat: void printGroupTree(android.support.graphics.drawable.VectorDrawableCompat$VGroup,int)>(r8, $i2);

     label4:
        i1 = i1 + 1;

        goto label3;

     label5:
        r9 = (android.support.graphics.drawable.VectorDrawableCompat$VPath) $r7;

        $i2 = $i0 + 1;

        virtualinvoke r9.<android.support.graphics.drawable.VectorDrawableCompat$VPath: void printVPath(int)>($i2);

        goto label4;

     label6:
        return;
    }
    private void updateStateFromTypedArray(android.content.res.TypedArray, org.xmlpull.v1.XmlPullParser) throws org.xmlpull.v1.XmlPullParserException
    {
        android.support.graphics.drawable.VectorDrawableCompat r0;
        android.content.res.TypedArray $r1;
        org.xmlpull.v1.XmlPullParser $r2;
        android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer r3;
        android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState r4;
        int $i0;
        android.graphics.PorterDuff$Mode $r5;
        android.content.res.ColorStateList $r6;
        boolean $z0;
        float $f0;
        byte $b1;
        org.xmlpull.v1.XmlPullParserException $r7;
        java.lang.StringBuilder $r8;
        java.lang.String $r9;
        android.support.v4.util.ArrayMap $r10;

        r0 := @this: android.support.graphics.drawable.VectorDrawableCompat;

        $r1 := @parameter0: android.content.res.TypedArray;

        $r2 := @parameter1: org.xmlpull.v1.XmlPullParser;

        r4 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        r3 = r4.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer>;

        $i0 = staticinvoke <android.support.v4.content.res.TypedArrayUtils: int getNamedInt(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,int)>($r1, $r2, "tintMode", 6, -1);

        $r5 = <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode SRC_IN>;

        $r5 = staticinvoke <android.support.graphics.drawable.VectorDrawableCompat: android.graphics.PorterDuff$Mode parseTintModeCompat(int,android.graphics.PorterDuff$Mode)>($i0, $r5);

        r4.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.graphics.PorterDuff$Mode mTintMode> = $r5;

        $r6 = virtualinvoke $r1.<android.content.res.TypedArray: android.content.res.ColorStateList getColorStateList(int)>(1);

        if $r6 == null goto label1;

        r4.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.content.res.ColorStateList mTint> = $r6;

     label1:
        $z0 = r4.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: boolean mAutoMirrored>;

        $z0 = staticinvoke <android.support.v4.content.res.TypedArrayUtils: boolean getNamedBoolean(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,boolean)>($r1, $r2, "autoMirrored", 5, $z0);

        r4.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: boolean mAutoMirrored> = $z0;

        $f0 = r3.<android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer: float mViewportWidth>;

        $f0 = staticinvoke <android.support.v4.content.res.TypedArrayUtils: float getNamedFloat(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,float)>($r1, $r2, "viewportWidth", 7, $f0);

        r3.<android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer: float mViewportWidth> = $f0;

        $f0 = r3.<android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer: float mViewportHeight>;

        $f0 = staticinvoke <android.support.v4.content.res.TypedArrayUtils: float getNamedFloat(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,float)>($r1, $r2, "viewportHeight", 8, $f0);

        r3.<android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer: float mViewportHeight> = $f0;

        $f0 = r3.<android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer: float mViewportWidth>;

        $b1 = $f0 cmpg 0.0F;

        if $b1 > 0 goto label2;

        $r7 = new org.xmlpull.v1.XmlPullParserException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r1.<android.content.res.TypedArray: java.lang.String getPositionDescription()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<vector> tag requires viewportWidth > 0");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($r9);

        throw $r7;

     label2:
        $f0 = r3.<android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer: float mViewportHeight>;

        $b1 = $f0 cmpg 0.0F;

        if $b1 > 0 goto label3;

        $r7 = new org.xmlpull.v1.XmlPullParserException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r1.<android.content.res.TypedArray: java.lang.String getPositionDescription()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<vector> tag requires viewportHeight > 0");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($r9);

        throw $r7;

     label3:
        $f0 = r3.<android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer: float mBaseWidth>;

        $f0 = virtualinvoke $r1.<android.content.res.TypedArray: float getDimension(int,float)>(3, $f0);

        r3.<android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer: float mBaseWidth> = $f0;

        $f0 = r3.<android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer: float mBaseHeight>;

        $f0 = virtualinvoke $r1.<android.content.res.TypedArray: float getDimension(int,float)>(2, $f0);

        r3.<android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer: float mBaseHeight> = $f0;

        $f0 = r3.<android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer: float mBaseWidth>;

        $b1 = $f0 cmpg 0.0F;

        if $b1 > 0 goto label4;

        $r7 = new org.xmlpull.v1.XmlPullParserException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r1.<android.content.res.TypedArray: java.lang.String getPositionDescription()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<vector> tag requires width > 0");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($r9);

        throw $r7;

     label4:
        $f0 = r3.<android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer: float mBaseHeight>;

        $b1 = $f0 cmpg 0.0F;

        if $b1 > 0 goto label5;

        $r7 = new org.xmlpull.v1.XmlPullParserException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r1.<android.content.res.TypedArray: java.lang.String getPositionDescription()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<vector> tag requires height > 0");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($r9);

        throw $r7;

     label5:
        $f0 = virtualinvoke r3.<android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer: float getAlpha()>();

        $f0 = staticinvoke <android.support.v4.content.res.TypedArrayUtils: float getNamedFloat(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,float)>($r1, $r2, "alpha", 4, $f0);

        virtualinvoke r3.<android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer: void setAlpha(float)>($f0);

        $r9 = virtualinvoke $r1.<android.content.res.TypedArray: java.lang.String getString(int)>(0);

        if $r9 == null goto label6;

        r3.<android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer: java.lang.String mRootName> = $r9;

        $r10 = r3.<android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer: android.support.v4.util.ArrayMap mVGTargetsMap>;

        virtualinvoke $r10.<android.support.v4.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, r3);

     label6:
        return;
    }
    public volatile void applyTheme(android.content.res.Resources$Theme)
    {
        android.support.graphics.drawable.VectorDrawableCompat r0;
        android.content.res.Resources$Theme $r1;

        r0 := @this: android.support.graphics.drawable.VectorDrawableCompat;

        $r1 := @parameter0: android.content.res.Resources$Theme;

        specialinvoke r0.<android.support.graphics.drawable.VectorDrawableCommon: void applyTheme(android.content.res.Resources$Theme)>($r1);

        return;
    }
    public boolean canApplyTheme()
    {
        android.support.graphics.drawable.VectorDrawableCompat r0;
        android.graphics.drawable.Drawable $r1;

        r0 := @this: android.support.graphics.drawable.VectorDrawableCompat;

        $r1 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $r1 == null goto label1;

        $r1 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        staticinvoke <android.support.v4.graphics.drawable.DrawableCompat: boolean canApplyTheme(android.graphics.drawable.Drawable)>($r1);

     label1:
        return 0;
    }
    public volatile void clearColorFilter()
    {
        android.support.graphics.drawable.VectorDrawableCompat r0;

        r0 := @this: android.support.graphics.drawable.VectorDrawableCompat;

        specialinvoke r0.<android.support.graphics.drawable.VectorDrawableCommon: void clearColorFilter()>();

        return;
    }
    public void draw(android.graphics.Canvas)
    {
        android.support.graphics.drawable.VectorDrawableCompat r0;
        android.graphics.Canvas $r1;
        android.graphics.drawable.Drawable $r2;
        android.graphics.Rect $r3;
        int $i0, $i2, $i3, $i4;
        android.graphics.ColorFilter $r4;
        android.graphics.Matrix $r5;
        float[] $r6;
        float $f0, $f1, $f2, $f3;
        byte $b1;
        boolean $z0;
        android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState $r7;

        r0 := @this: android.support.graphics.drawable.VectorDrawableCompat;

        $r1 := @parameter0: android.graphics.Canvas;

        $r2 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $r2 == null goto label1;

        $r2 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        virtualinvoke $r2.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>($r1);

        return;

     label1:
        $r3 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.Rect mTmpBounds>;

        virtualinvoke r0.<android.support.graphics.drawable.VectorDrawableCompat: void copyBounds(android.graphics.Rect)>($r3);

        $r3 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.Rect mTmpBounds>;

        $i0 = virtualinvoke $r3.<android.graphics.Rect: int width()>();

        if $i0 <= 0 goto label9;

        $r3 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.Rect mTmpBounds>;

        $i0 = virtualinvoke $r3.<android.graphics.Rect: int height()>();

        if $i0 <= 0 goto label9;

        $r4 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.ColorFilter mColorFilter>;

        if $r4 != null goto label7;

        $r4 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.PorterDuffColorFilter mTintFilter>;

     label2:
        $r5 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.Matrix mTmpMatrix>;

        virtualinvoke $r1.<android.graphics.Canvas: void getMatrix(android.graphics.Matrix)>($r5);

        $r5 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.Matrix mTmpMatrix>;

        $r6 = r0.<android.support.graphics.drawable.VectorDrawableCompat: float[] mTmpFloats>;

        virtualinvoke $r5.<android.graphics.Matrix: void getValues(float[])>($r6);

        $r6 = r0.<android.support.graphics.drawable.VectorDrawableCompat: float[] mTmpFloats>;

        $f0 = $r6[0];

        $f0 = staticinvoke <java.lang.Math: float abs(float)>($f0);

        $r6 = r0.<android.support.graphics.drawable.VectorDrawableCompat: float[] mTmpFloats>;

        $f1 = $r6[4];

        $f1 = staticinvoke <java.lang.Math: float abs(float)>($f1);

        $r6 = r0.<android.support.graphics.drawable.VectorDrawableCompat: float[] mTmpFloats>;

        $f2 = $r6[1];

        $f2 = staticinvoke <java.lang.Math: float abs(float)>($f2);

        $r6 = r0.<android.support.graphics.drawable.VectorDrawableCompat: float[] mTmpFloats>;

        $f3 = $r6[3];

        $f3 = staticinvoke <java.lang.Math: float abs(float)>($f3);

        $b1 = $f2 cmpl 0.0F;

        if $b1 != 0 goto label3;

        $b1 = $f3 cmpl 0.0F;

        if $b1 == 0 goto label4;

     label3:
        $f0 = 1.0F;

        $f1 = 1.0F;

     label4:
        $r3 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.Rect mTmpBounds>;

        $i0 = virtualinvoke $r3.<android.graphics.Rect: int width()>();

        $f2 = (float) $i0;

        $f0 = $f2 * $f0;

        $i0 = (int) $f0;

        $r3 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.Rect mTmpBounds>;

        $i2 = virtualinvoke $r3.<android.graphics.Rect: int height()>();

        $f0 = (float) $i2;

        $f0 = $f0 * $f1;

        $i2 = (int) $f0;

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>(2048, $i0);

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>(2048, $i2);

        if $i0 <= 0 goto label9;

        if $i2 <= 0 goto label9;

        $i3 = virtualinvoke $r1.<android.graphics.Canvas: int save()>();

        $r3 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.Rect mTmpBounds>;

        $i4 = $r3.<android.graphics.Rect: int left>;

        $f0 = (float) $i4;

        $r3 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.Rect mTmpBounds>;

        $i4 = $r3.<android.graphics.Rect: int top>;

        $f1 = (float) $i4;

        virtualinvoke $r1.<android.graphics.Canvas: void translate(float,float)>($f0, $f1);

        $z0 = specialinvoke r0.<android.support.graphics.drawable.VectorDrawableCompat: boolean needMirroring()>();

        if $z0 == 0 goto label5;

        $r3 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.Rect mTmpBounds>;

        $i4 = virtualinvoke $r3.<android.graphics.Rect: int width()>();

        $f0 = (float) $i4;

        virtualinvoke $r1.<android.graphics.Canvas: void translate(float,float)>($f0, 0.0F);

        virtualinvoke $r1.<android.graphics.Canvas: void scale(float,float)>(-1.0F, 1.0F);

     label5:
        $r3 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.Rect mTmpBounds>;

        virtualinvoke $r3.<android.graphics.Rect: void offsetTo(int,int)>(0, 0);

        $r7 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        virtualinvoke $r7.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: void createCachedBitmapIfNeeded(int,int)>($i0, $i2);

        $z0 = r0.<android.support.graphics.drawable.VectorDrawableCompat: boolean mAllowCaching>;

        if $z0 != 0 goto label8;

        $r7 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        virtualinvoke $r7.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: void updateCachedBitmap(int,int)>($i0, $i2);

     label6:
        $r7 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $r3 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.Rect mTmpBounds>;

        virtualinvoke $r7.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: void drawCachedBitmapWithRootAlpha(android.graphics.Canvas,android.graphics.ColorFilter,android.graphics.Rect)>($r1, $r4, $r3);

        virtualinvoke $r1.<android.graphics.Canvas: void restoreToCount(int)>($i3);

        return;

     label7:
        $r4 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.ColorFilter mColorFilter>;

        goto label2;

     label8:
        $r7 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $z0 = virtualinvoke $r7.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: boolean canReuseCache()>();

        if $z0 != 0 goto label6;

        $r7 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        virtualinvoke $r7.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: void updateCachedBitmap(int,int)>($i0, $i2);

        $r7 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        virtualinvoke $r7.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: void updateCacheStates()>();

        goto label6;

     label9:
        return;
    }
    public int getAlpha()
    {
        android.support.graphics.drawable.VectorDrawableCompat r0;
        android.graphics.drawable.Drawable $r1;
        int $i0;
        android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState $r2;
        android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer $r3;

        r0 := @this: android.support.graphics.drawable.VectorDrawableCompat;

        $r1 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $r1 == null goto label1;

        $r1 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        $i0 = staticinvoke <android.support.v4.graphics.drawable.DrawableCompat: int getAlpha(android.graphics.drawable.Drawable)>($r1);

        return $i0;

     label1:
        $r2 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $r3 = $r2.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer>;

        $i0 = virtualinvoke $r3.<android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer: int getRootAlpha()>();

        return $i0;
    }
    public int getChangingConfigurations()
    {
        android.support.graphics.drawable.VectorDrawableCompat r0;
        android.graphics.drawable.Drawable $r1;
        int $i0, $i1;
        android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState $r2;

        r0 := @this: android.support.graphics.drawable.VectorDrawableCompat;

        $r1 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $r1 == null goto label1;

        $r1 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        $i0 = virtualinvoke $r1.<android.graphics.drawable.Drawable: int getChangingConfigurations()>();

        return $i0;

     label1:
        $i0 = specialinvoke r0.<android.support.graphics.drawable.VectorDrawableCommon: int getChangingConfigurations()>();

        $r2 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $i1 = virtualinvoke $r2.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: int getChangingConfigurations()>();

        $i0 = $i0 | $i1;

        return $i0;
    }
    public volatile android.graphics.ColorFilter getColorFilter()
    {
        android.support.graphics.drawable.VectorDrawableCompat r0;
        android.graphics.ColorFilter $r1;

        r0 := @this: android.support.graphics.drawable.VectorDrawableCompat;

        $r1 = specialinvoke r0.<android.support.graphics.drawable.VectorDrawableCommon: android.graphics.ColorFilter getColorFilter()>();

        return $r1;
    }
    public android.graphics.drawable.Drawable$ConstantState getConstantState()
    {
        android.support.graphics.drawable.VectorDrawableCompat r0;
        android.graphics.drawable.Drawable $r1;
        int $i0;
        android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableDelegateState $r2;
        android.graphics.drawable.Drawable$ConstantState $r3;
        android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState $r4;

        r0 := @this: android.support.graphics.drawable.VectorDrawableCompat;

        $r1 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $r1 == null goto label1;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 24 goto label1;

        $r2 = new android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableDelegateState;

        $r1 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        $r3 = virtualinvoke $r1.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable$ConstantState getConstantState()>();

        specialinvoke $r2.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableDelegateState: void <init>(android.graphics.drawable.Drawable$ConstantState)>($r3);

        return $r2;

     label1:
        $r4 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $i0 = virtualinvoke r0.<android.support.graphics.drawable.VectorDrawableCompat: int getChangingConfigurations()>();

        $r4.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: int mChangingConfigurations> = $i0;

        $r4 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        return $r4;
    }
    public volatile android.graphics.drawable.Drawable getCurrent()
    {
        android.support.graphics.drawable.VectorDrawableCompat r0;
        android.graphics.drawable.Drawable $r1;

        r0 := @this: android.support.graphics.drawable.VectorDrawableCompat;

        $r1 = specialinvoke r0.<android.support.graphics.drawable.VectorDrawableCommon: android.graphics.drawable.Drawable getCurrent()>();

        return $r1;
    }
    public int getIntrinsicHeight()
    {
        android.support.graphics.drawable.VectorDrawableCompat r0;
        int $i0;
        android.graphics.drawable.Drawable $r1;
        android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState $r2;
        android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer $r3;
        float $f0;

        r0 := @this: android.support.graphics.drawable.VectorDrawableCompat;

        $r1 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $r1 == null goto label1;

        $r1 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        $i0 = virtualinvoke $r1.<android.graphics.drawable.Drawable: int getIntrinsicHeight()>();

        return $i0;

     label1:
        $r2 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $r3 = $r2.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer>;

        $f0 = $r3.<android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer: float mBaseHeight>;

        $i0 = (int) $f0;

        return $i0;
    }
    public int getIntrinsicWidth()
    {
        android.support.graphics.drawable.VectorDrawableCompat r0;
        int $i0;
        android.graphics.drawable.Drawable $r1;
        android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState $r2;
        android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer $r3;
        float $f0;

        r0 := @this: android.support.graphics.drawable.VectorDrawableCompat;

        $r1 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $r1 == null goto label1;

        $r1 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        $i0 = virtualinvoke $r1.<android.graphics.drawable.Drawable: int getIntrinsicWidth()>();

        return $i0;

     label1:
        $r2 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $r3 = $r2.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer>;

        $f0 = $r3.<android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer: float mBaseWidth>;

        $i0 = (int) $f0;

        return $i0;
    }
    public volatile int getMinimumHeight()
    {
        android.support.graphics.drawable.VectorDrawableCompat r0;
        int $i0;

        r0 := @this: android.support.graphics.drawable.VectorDrawableCompat;

        $i0 = specialinvoke r0.<android.support.graphics.drawable.VectorDrawableCommon: int getMinimumHeight()>();

        return $i0;
    }
    public volatile int getMinimumWidth()
    {
        android.support.graphics.drawable.VectorDrawableCompat r0;
        int $i0;

        r0 := @this: android.support.graphics.drawable.VectorDrawableCompat;

        $i0 = specialinvoke r0.<android.support.graphics.drawable.VectorDrawableCommon: int getMinimumWidth()>();

        return $i0;
    }
    public int getOpacity()
    {
        android.support.graphics.drawable.VectorDrawableCompat r0;
        int $i0;
        android.graphics.drawable.Drawable $r1;

        r0 := @this: android.support.graphics.drawable.VectorDrawableCompat;

        $r1 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $r1 == null goto label1;

        $r1 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        $i0 = virtualinvoke $r1.<android.graphics.drawable.Drawable: int getOpacity()>();

        return $i0;

     label1:
        return -3;
    }
    public volatile boolean getPadding(android.graphics.Rect)
    {
        android.support.graphics.drawable.VectorDrawableCompat r0;
        android.graphics.Rect $r1;
        boolean $z0;

        r0 := @this: android.support.graphics.drawable.VectorDrawableCompat;

        $r1 := @parameter0: android.graphics.Rect;

        $z0 = specialinvoke r0.<android.support.graphics.drawable.VectorDrawableCommon: boolean getPadding(android.graphics.Rect)>($r1);

        return $z0;
    }
    public float getPixelSize()
    {
        android.support.graphics.drawable.VectorDrawableCompat r0;
        float f0, f1, f2, f3;
        android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState $r1;
        android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer $r2;
        byte $b0;

        r0 := @this: android.support.graphics.drawable.VectorDrawableCompat;

        $r1 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        if $r1 == null goto label1;

        $r1 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $r2 = $r1.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer>;

        if $r2 == null goto label1;

        $r1 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $r2 = $r1.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer>;

        f0 = $r2.<android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer: float mBaseWidth>;

        $b0 = f0 cmpl 0.0F;

        if $b0 == 0 goto label1;

        $r1 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $r2 = $r1.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer>;

        f0 = $r2.<android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer: float mBaseHeight>;

        $b0 = f0 cmpl 0.0F;

        if $b0 == 0 goto label1;

        $r1 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $r2 = $r1.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer>;

        f0 = $r2.<android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer: float mViewportHeight>;

        $b0 = f0 cmpl 0.0F;

        if $b0 == 0 goto label1;

        $r1 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $r2 = $r1.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer>;

        f0 = $r2.<android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer: float mViewportWidth>;

        $b0 = f0 cmpl 0.0F;

        if $b0 != 0 goto label2;

     label1:
        return 1.0F;

     label2:
        $r1 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $r2 = $r1.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer>;

        f1 = $r2.<android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer: float mBaseWidth>;

        $r1 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $r2 = $r1.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer>;

        f0 = $r2.<android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer: float mBaseHeight>;

        $r1 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $r2 = $r1.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer>;

        f3 = $r2.<android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer: float mViewportWidth>;

        $r1 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $r2 = $r1.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer>;

        f2 = $r2.<android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer: float mViewportHeight>;

        f1 = f3 / f1;

        f0 = f2 / f0;

        f0 = staticinvoke <java.lang.Math: float min(float,float)>(f1, f0);

        return f0;
    }
    public volatile int[] getState()
    {
        android.support.graphics.drawable.VectorDrawableCompat r0;
        int[] $r1;

        r0 := @this: android.support.graphics.drawable.VectorDrawableCompat;

        $r1 = specialinvoke r0.<android.support.graphics.drawable.VectorDrawableCommon: int[] getState()>();

        return $r1;
    }
    java.lang.Object getTargetByName(java.lang.String)
    {
        android.support.graphics.drawable.VectorDrawableCompat r0;
        java.lang.String $r1;
        java.lang.Object $r2;
        android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState $r3;
        android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer $r4;
        android.support.v4.util.ArrayMap $r5;

        r0 := @this: android.support.graphics.drawable.VectorDrawableCompat;

        $r1 := @parameter0: java.lang.String;

        $r3 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $r4 = $r3.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer>;

        $r5 = $r4.<android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer: android.support.v4.util.ArrayMap mVGTargetsMap>;

        $r2 = virtualinvoke $r5.<android.support.v4.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r1);

        return $r2;
    }
    public volatile android.graphics.Region getTransparentRegion()
    {
        android.support.graphics.drawable.VectorDrawableCompat r0;
        android.graphics.Region $r1;

        r0 := @this: android.support.graphics.drawable.VectorDrawableCompat;

        $r1 = specialinvoke r0.<android.support.graphics.drawable.VectorDrawableCommon: android.graphics.Region getTransparentRegion()>();

        return $r1;
    }
    public void inflate(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        android.support.graphics.drawable.VectorDrawableCompat r0;
        android.content.res.Resources $r1;
        org.xmlpull.v1.XmlPullParser $r2;
        android.util.AttributeSet $r3;
        android.graphics.drawable.Drawable $r4;

        r0 := @this: android.support.graphics.drawable.VectorDrawableCompat;

        $r1 := @parameter0: android.content.res.Resources;

        $r2 := @parameter1: org.xmlpull.v1.XmlPullParser;

        $r3 := @parameter2: android.util.AttributeSet;

        $r4 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $r4 == null goto label1;

        $r4 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        virtualinvoke $r4.<android.graphics.drawable.Drawable: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)>($r1, $r2, $r3);

        return;

     label1:
        virtualinvoke r0.<android.support.graphics.drawable.VectorDrawableCompat: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>($r1, $r2, $r3, null);

        return;
    }
    public void inflate(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, android.content.res.Resources$Theme) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        android.support.graphics.drawable.VectorDrawableCompat r0;
        android.content.res.Resources $r1;
        org.xmlpull.v1.XmlPullParser $r2;
        android.util.AttributeSet $r3;
        android.content.res.Resources$Theme $r4;
        android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer r5;
        android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState r6;
        android.content.res.ColorStateList $r7;
        android.graphics.PorterDuff$Mode $r8;
        android.graphics.drawable.Drawable $r9;
        int[] $r10;
        android.content.res.TypedArray $r11;
        int $i0;
        android.graphics.PorterDuffColorFilter $r12;

        r0 := @this: android.support.graphics.drawable.VectorDrawableCompat;

        $r1 := @parameter0: android.content.res.Resources;

        $r2 := @parameter1: org.xmlpull.v1.XmlPullParser;

        $r3 := @parameter2: android.util.AttributeSet;

        $r4 := @parameter3: android.content.res.Resources$Theme;

        $r9 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $r9 == null goto label1;

        $r9 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        staticinvoke <android.support.v4.graphics.drawable.DrawableCompat: void inflate(android.graphics.drawable.Drawable,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>($r9, $r1, $r2, $r3, $r4);

        return;

     label1:
        r6 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        r5 = new android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer;

        specialinvoke r5.<android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer: void <init>()>();

        r6.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer> = r5;

        $r10 = <android.support.graphics.drawable.AndroidResources: int[] STYLEABLE_VECTOR_DRAWABLE_TYPE_ARRAY>;

        $r11 = staticinvoke <android.support.v4.content.res.TypedArrayUtils: android.content.res.TypedArray obtainAttributes(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int[])>($r1, $r4, $r3, $r10);

        specialinvoke r0.<android.support.graphics.drawable.VectorDrawableCompat: void updateStateFromTypedArray(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser)>($r11, $r2);

        virtualinvoke $r11.<android.content.res.TypedArray: void recycle()>();

        $i0 = virtualinvoke r0.<android.support.graphics.drawable.VectorDrawableCompat: int getChangingConfigurations()>();

        r6.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: int mChangingConfigurations> = $i0;

        r6.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: boolean mCacheDirty> = 1;

        specialinvoke r0.<android.support.graphics.drawable.VectorDrawableCompat: void inflateInternal(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>($r1, $r2, $r3, $r4);

        $r12 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.PorterDuffColorFilter mTintFilter>;

        $r7 = r6.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.content.res.ColorStateList mTint>;

        $r8 = r6.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.graphics.PorterDuff$Mode mTintMode>;

        $r12 = virtualinvoke r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.PorterDuffColorFilter updateTintFilter(android.graphics.PorterDuffColorFilter,android.content.res.ColorStateList,android.graphics.PorterDuff$Mode)>($r12, $r7, $r8);

        r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.PorterDuffColorFilter mTintFilter> = $r12;

        return;
    }
    public void invalidateSelf()
    {
        android.support.graphics.drawable.VectorDrawableCompat r0;
        android.graphics.drawable.Drawable $r1;

        r0 := @this: android.support.graphics.drawable.VectorDrawableCompat;

        $r1 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $r1 == null goto label1;

        $r1 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        virtualinvoke $r1.<android.graphics.drawable.Drawable: void invalidateSelf()>();

        return;

     label1:
        specialinvoke r0.<android.support.graphics.drawable.VectorDrawableCommon: void invalidateSelf()>();

        return;
    }
    public boolean isAutoMirrored()
    {
        android.support.graphics.drawable.VectorDrawableCompat r0;
        boolean $z0;
        android.graphics.drawable.Drawable $r1;
        android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState $r2;

        r0 := @this: android.support.graphics.drawable.VectorDrawableCompat;

        $r1 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $r1 == null goto label1;

        $r1 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        $z0 = staticinvoke <android.support.v4.graphics.drawable.DrawableCompat: boolean isAutoMirrored(android.graphics.drawable.Drawable)>($r1);

        return $z0;

     label1:
        $r2 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $z0 = $r2.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: boolean mAutoMirrored>;

        return $z0;
    }
    public boolean isStateful()
    {
        android.support.graphics.drawable.VectorDrawableCompat r0;
        android.graphics.drawable.Drawable $r1;
        boolean $z0;
        android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState $r2;
        android.content.res.ColorStateList $r3;

        r0 := @this: android.support.graphics.drawable.VectorDrawableCompat;

        $r1 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $r1 == null goto label1;

        $r1 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        $z0 = virtualinvoke $r1.<android.graphics.drawable.Drawable: boolean isStateful()>();

        return $z0;

     label1:
        $z0 = specialinvoke r0.<android.support.graphics.drawable.VectorDrawableCommon: boolean isStateful()>();

        if $z0 != 0 goto label2;

        $r2 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        if $r2 == null goto label3;

        $r2 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $r3 = $r2.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.content.res.ColorStateList mTint>;

        if $r3 == null goto label3;

        $r2 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $r3 = $r2.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.content.res.ColorStateList mTint>;

        $z0 = virtualinvoke $r3.<android.content.res.ColorStateList: boolean isStateful()>();

        if $z0 == 0 goto label3;

     label2:
        return 1;

     label3:
        return 0;
    }
    public volatile void jumpToCurrentState()
    {
        android.support.graphics.drawable.VectorDrawableCompat r0;

        r0 := @this: android.support.graphics.drawable.VectorDrawableCompat;

        specialinvoke r0.<android.support.graphics.drawable.VectorDrawableCommon: void jumpToCurrentState()>();

        return;
    }
    public android.graphics.drawable.Drawable mutate()
    {
        android.support.graphics.drawable.VectorDrawableCompat r0;
        android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState $r1, $r3;
        android.graphics.drawable.Drawable $r2;
        boolean $z0;

        r0 := @this: android.support.graphics.drawable.VectorDrawableCompat;

        $r2 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $r2 == null goto label1;

        $r2 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        virtualinvoke $r2.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable mutate()>();

        return r0;

     label1:
        $z0 = r0.<android.support.graphics.drawable.VectorDrawableCompat: boolean mMutated>;

        if $z0 != 0 goto label2;

        $r2 = specialinvoke r0.<android.support.graphics.drawable.VectorDrawableCommon: android.graphics.drawable.Drawable mutate()>();

        if $r2 != r0 goto label2;

        $r3 = new android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState;

        $r1 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        specialinvoke $r3.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: void <init>(android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState)>($r1);

        r0.<android.support.graphics.drawable.VectorDrawableCompat: android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState> = $r3;

        r0.<android.support.graphics.drawable.VectorDrawableCompat: boolean mMutated> = 1;

     label2:
        return r0;
    }
    protected void onBoundsChange(android.graphics.Rect)
    {
        android.support.graphics.drawable.VectorDrawableCompat r0;
        android.graphics.Rect $r1;
        android.graphics.drawable.Drawable $r2;

        r0 := @this: android.support.graphics.drawable.VectorDrawableCompat;

        $r1 := @parameter0: android.graphics.Rect;

        $r2 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $r2 == null goto label1;

        $r2 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        virtualinvoke $r2.<android.graphics.drawable.Drawable: void setBounds(android.graphics.Rect)>($r1);

     label1:
        return;
    }
    protected boolean onStateChange(int[])
    {
        android.support.graphics.drawable.VectorDrawableCompat r0;
        int[] $r1;
        android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState r2;
        android.content.res.ColorStateList $r3;
        android.graphics.PorterDuff$Mode $r4;
        android.graphics.drawable.Drawable $r5;
        boolean $z0;
        android.graphics.PorterDuffColorFilter $r6;

        r0 := @this: android.support.graphics.drawable.VectorDrawableCompat;

        $r1 := @parameter0: int[];

        $r5 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $r5 == null goto label1;

        $r5 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        $z0 = virtualinvoke $r5.<android.graphics.drawable.Drawable: boolean setState(int[])>($r1);

        return $z0;

     label1:
        r2 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $r3 = r2.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.content.res.ColorStateList mTint>;

        if $r3 == null goto label2;

        $r4 = r2.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.graphics.PorterDuff$Mode mTintMode>;

        if $r4 == null goto label2;

        $r6 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.PorterDuffColorFilter mTintFilter>;

        $r3 = r2.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.content.res.ColorStateList mTint>;

        $r4 = r2.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.graphics.PorterDuff$Mode mTintMode>;

        $r6 = virtualinvoke r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.PorterDuffColorFilter updateTintFilter(android.graphics.PorterDuffColorFilter,android.content.res.ColorStateList,android.graphics.PorterDuff$Mode)>($r6, $r3, $r4);

        r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.PorterDuffColorFilter mTintFilter> = $r6;

        virtualinvoke r0.<android.support.graphics.drawable.VectorDrawableCompat: void invalidateSelf()>();

        return 1;

     label2:
        return 0;
    }
    public void scheduleSelf(java.lang.Runnable, long)
    {
        android.support.graphics.drawable.VectorDrawableCompat r0;
        java.lang.Runnable $r1;
        long $l0;
        android.graphics.drawable.Drawable $r2;

        r0 := @this: android.support.graphics.drawable.VectorDrawableCompat;

        $r1 := @parameter0: java.lang.Runnable;

        $l0 := @parameter1: long;

        $r2 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $r2 == null goto label1;

        $r2 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        virtualinvoke $r2.<android.graphics.drawable.Drawable: void scheduleSelf(java.lang.Runnable,long)>($r1, $l0);

        return;

     label1:
        specialinvoke r0.<android.support.graphics.drawable.VectorDrawableCommon: void scheduleSelf(java.lang.Runnable,long)>($r1, $l0);

        return;
    }
    void setAllowCaching(boolean)
    {
        android.support.graphics.drawable.VectorDrawableCompat r0;
        boolean $z0;

        r0 := @this: android.support.graphics.drawable.VectorDrawableCompat;

        $z0 := @parameter0: boolean;

        r0.<android.support.graphics.drawable.VectorDrawableCompat: boolean mAllowCaching> = $z0;

        return;
    }
    public void setAlpha(int)
    {
        android.support.graphics.drawable.VectorDrawableCompat r0;
        int $i0, $i1;
        android.graphics.drawable.Drawable $r1;
        android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState $r2;
        android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer $r3;

        r0 := @this: android.support.graphics.drawable.VectorDrawableCompat;

        $i0 := @parameter0: int;

        $r1 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $r1 == null goto label1;

        $r1 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        virtualinvoke $r1.<android.graphics.drawable.Drawable: void setAlpha(int)>($i0);

        return;

     label1:
        $r2 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $r3 = $r2.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer>;

        $i1 = virtualinvoke $r3.<android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer: int getRootAlpha()>();

        if $i1 == $i0 goto label2;

        $r2 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $r3 = $r2.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer>;

        virtualinvoke $r3.<android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer: void setRootAlpha(int)>($i0);

        virtualinvoke r0.<android.support.graphics.drawable.VectorDrawableCompat: void invalidateSelf()>();

     label2:
        return;
    }
    public void setAutoMirrored(boolean)
    {
        android.support.graphics.drawable.VectorDrawableCompat r0;
        boolean $z0;
        android.graphics.drawable.Drawable $r1;
        android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState $r2;

        r0 := @this: android.support.graphics.drawable.VectorDrawableCompat;

        $z0 := @parameter0: boolean;

        $r1 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $r1 == null goto label1;

        $r1 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        staticinvoke <android.support.v4.graphics.drawable.DrawableCompat: void setAutoMirrored(android.graphics.drawable.Drawable,boolean)>($r1, $z0);

        return;

     label1:
        $r2 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $r2.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: boolean mAutoMirrored> = $z0;

        return;
    }
    public volatile void setChangingConfigurations(int)
    {
        android.support.graphics.drawable.VectorDrawableCompat r0;
        int $i0;

        r0 := @this: android.support.graphics.drawable.VectorDrawableCompat;

        $i0 := @parameter0: int;

        specialinvoke r0.<android.support.graphics.drawable.VectorDrawableCommon: void setChangingConfigurations(int)>($i0);

        return;
    }
    public volatile void setColorFilter(int, android.graphics.PorterDuff$Mode)
    {
        android.support.graphics.drawable.VectorDrawableCompat r0;
        int $i0;
        android.graphics.PorterDuff$Mode $r1;

        r0 := @this: android.support.graphics.drawable.VectorDrawableCompat;

        $i0 := @parameter0: int;

        $r1 := @parameter1: android.graphics.PorterDuff$Mode;

        specialinvoke r0.<android.support.graphics.drawable.VectorDrawableCommon: void setColorFilter(int,android.graphics.PorterDuff$Mode)>($i0, $r1);

        return;
    }
    public void setColorFilter(android.graphics.ColorFilter)
    {
        android.support.graphics.drawable.VectorDrawableCompat r0;
        android.graphics.ColorFilter $r1;
        android.graphics.drawable.Drawable $r2;

        r0 := @this: android.support.graphics.drawable.VectorDrawableCompat;

        $r1 := @parameter0: android.graphics.ColorFilter;

        $r2 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $r2 == null goto label1;

        $r2 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        virtualinvoke $r2.<android.graphics.drawable.Drawable: void setColorFilter(android.graphics.ColorFilter)>($r1);

        return;

     label1:
        r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.ColorFilter mColorFilter> = $r1;

        virtualinvoke r0.<android.support.graphics.drawable.VectorDrawableCompat: void invalidateSelf()>();

        return;
    }
    public volatile void setFilterBitmap(boolean)
    {
        android.support.graphics.drawable.VectorDrawableCompat r0;
        boolean $z0;

        r0 := @this: android.support.graphics.drawable.VectorDrawableCompat;

        $z0 := @parameter0: boolean;

        specialinvoke r0.<android.support.graphics.drawable.VectorDrawableCommon: void setFilterBitmap(boolean)>($z0);

        return;
    }
    public volatile void setHotspot(float, float)
    {
        android.support.graphics.drawable.VectorDrawableCompat r0;
        float $f0, $f1;

        r0 := @this: android.support.graphics.drawable.VectorDrawableCompat;

        $f0 := @parameter0: float;

        $f1 := @parameter1: float;

        specialinvoke r0.<android.support.graphics.drawable.VectorDrawableCommon: void setHotspot(float,float)>($f0, $f1);

        return;
    }
    public volatile void setHotspotBounds(int, int, int, int)
    {
        android.support.graphics.drawable.VectorDrawableCompat r0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.support.graphics.drawable.VectorDrawableCompat;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        specialinvoke r0.<android.support.graphics.drawable.VectorDrawableCommon: void setHotspotBounds(int,int,int,int)>($i0, $i1, $i2, $i3);

        return;
    }
    public volatile boolean setState(int[])
    {
        android.support.graphics.drawable.VectorDrawableCompat r0;
        int[] $r1;
        boolean $z0;

        r0 := @this: android.support.graphics.drawable.VectorDrawableCompat;

        $r1 := @parameter0: int[];

        $z0 = specialinvoke r0.<android.support.graphics.drawable.VectorDrawableCommon: boolean setState(int[])>($r1);

        return $z0;
    }
    public void setTint(int)
    {
        android.support.graphics.drawable.VectorDrawableCompat r0;
        int $i0;
        android.content.res.ColorStateList $r1;
        android.graphics.drawable.Drawable $r2;

        r0 := @this: android.support.graphics.drawable.VectorDrawableCompat;

        $i0 := @parameter0: int;

        $r2 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $r2 == null goto label1;

        $r2 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        staticinvoke <android.support.v4.graphics.drawable.DrawableCompat: void setTint(android.graphics.drawable.Drawable,int)>($r2, $i0);

        return;

     label1:
        $r1 = staticinvoke <android.content.res.ColorStateList: android.content.res.ColorStateList valueOf(int)>($i0);

        virtualinvoke r0.<android.support.graphics.drawable.VectorDrawableCompat: void setTintList(android.content.res.ColorStateList)>($r1);

        return;
    }
    public void setTintList(android.content.res.ColorStateList)
    {
        android.support.graphics.drawable.VectorDrawableCompat r0;
        android.content.res.ColorStateList $r1, $r6;
        android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState r2;
        android.graphics.PorterDuff$Mode $r3;
        android.graphics.PorterDuffColorFilter $r4;
        android.graphics.drawable.Drawable $r5;

        r0 := @this: android.support.graphics.drawable.VectorDrawableCompat;

        $r1 := @parameter0: android.content.res.ColorStateList;

        $r5 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $r5 == null goto label1;

        $r5 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        staticinvoke <android.support.v4.graphics.drawable.DrawableCompat: void setTintList(android.graphics.drawable.Drawable,android.content.res.ColorStateList)>($r5, $r1);

        return;

     label1:
        r2 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $r6 = r2.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.content.res.ColorStateList mTint>;

        if $r6 == $r1 goto label2;

        r2.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.content.res.ColorStateList mTint> = $r1;

        $r4 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.PorterDuffColorFilter mTintFilter>;

        $r3 = r2.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.graphics.PorterDuff$Mode mTintMode>;

        $r4 = virtualinvoke r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.PorterDuffColorFilter updateTintFilter(android.graphics.PorterDuffColorFilter,android.content.res.ColorStateList,android.graphics.PorterDuff$Mode)>($r4, $r1, $r3);

        r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.PorterDuffColorFilter mTintFilter> = $r4;

        virtualinvoke r0.<android.support.graphics.drawable.VectorDrawableCompat: void invalidateSelf()>();

     label2:
        return;
    }
    public void setTintMode(android.graphics.PorterDuff$Mode)
    {
        android.support.graphics.drawable.VectorDrawableCompat r0;
        android.graphics.PorterDuff$Mode $r1, $r6;
        android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState r2;
        android.content.res.ColorStateList $r3;
        android.graphics.PorterDuffColorFilter $r4;
        android.graphics.drawable.Drawable $r5;

        r0 := @this: android.support.graphics.drawable.VectorDrawableCompat;

        $r1 := @parameter0: android.graphics.PorterDuff$Mode;

        $r5 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $r5 == null goto label1;

        $r5 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        staticinvoke <android.support.v4.graphics.drawable.DrawableCompat: void setTintMode(android.graphics.drawable.Drawable,android.graphics.PorterDuff$Mode)>($r5, $r1);

        return;

     label1:
        r2 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $r6 = r2.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.graphics.PorterDuff$Mode mTintMode>;

        if $r6 == $r1 goto label2;

        r2.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.graphics.PorterDuff$Mode mTintMode> = $r1;

        $r4 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.PorterDuffColorFilter mTintFilter>;

        $r3 = r2.<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.content.res.ColorStateList mTint>;

        $r4 = virtualinvoke r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.PorterDuffColorFilter updateTintFilter(android.graphics.PorterDuffColorFilter,android.content.res.ColorStateList,android.graphics.PorterDuff$Mode)>($r4, $r3, $r1);

        r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.PorterDuffColorFilter mTintFilter> = $r4;

        virtualinvoke r0.<android.support.graphics.drawable.VectorDrawableCompat: void invalidateSelf()>();

     label2:
        return;
    }
    public boolean setVisible(boolean, boolean)
    {
        android.support.graphics.drawable.VectorDrawableCompat r0;
        boolean $z0, $z1;
        android.graphics.drawable.Drawable $r1;

        r0 := @this: android.support.graphics.drawable.VectorDrawableCompat;

        $z0 := @parameter0: boolean;

        $z1 := @parameter1: boolean;

        $r1 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $r1 == null goto label1;

        $r1 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        $z0 = virtualinvoke $r1.<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>($z0, $z1);

        return $z0;

     label1:
        $z0 = specialinvoke r0.<android.support.graphics.drawable.VectorDrawableCommon: boolean setVisible(boolean,boolean)>($z0, $z1);

        return $z0;
    }
    public void unscheduleSelf(java.lang.Runnable)
    {
        android.support.graphics.drawable.VectorDrawableCompat r0;
        java.lang.Runnable $r1;
        android.graphics.drawable.Drawable $r2;

        r0 := @this: android.support.graphics.drawable.VectorDrawableCompat;

        $r1 := @parameter0: java.lang.Runnable;

        $r2 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $r2 == null goto label1;

        $r2 = r0.<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        virtualinvoke $r2.<android.graphics.drawable.Drawable: void unscheduleSelf(java.lang.Runnable)>($r1);

        return;

     label1:
        specialinvoke r0.<android.support.graphics.drawable.VectorDrawableCommon: void unscheduleSelf(java.lang.Runnable)>($r1);

        return;
    }
    android.graphics.PorterDuffColorFilter updateTintFilter(android.graphics.PorterDuffColorFilter, android.content.res.ColorStateList, android.graphics.PorterDuff$Mode)
    {
        android.support.graphics.drawable.VectorDrawableCompat r0;
        android.graphics.PorterDuffColorFilter $r1;
        android.content.res.ColorStateList $r2;
        android.graphics.PorterDuff$Mode $r3;
        int[] $r4;
        int $i0;

        r0 := @this: android.support.graphics.drawable.VectorDrawableCompat;

        $r1 := @parameter0: android.graphics.PorterDuffColorFilter;

        $r2 := @parameter1: android.content.res.ColorStateList;

        $r3 := @parameter2: android.graphics.PorterDuff$Mode;

        if $r2 == null goto label1;

        if $r3 != null goto label2;

     label1:
        return null;

     label2:
        $r4 = virtualinvoke r0.<android.support.graphics.drawable.VectorDrawableCompat: int[] getState()>();

        $i0 = virtualinvoke $r2.<android.content.res.ColorStateList: int getColorForState(int[],int)>($r4, 0);

        $r1 = new android.graphics.PorterDuffColorFilter;

        specialinvoke $r1.<android.graphics.PorterDuffColorFilter: void <init>(int,android.graphics.PorterDuff$Mode)>($i0, $r3);

        return $r1;
    }
