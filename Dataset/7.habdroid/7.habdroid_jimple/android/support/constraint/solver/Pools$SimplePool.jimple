android.support.constraint.solver.Pools$SimplePool extends java.lang.Object implements android.support.constraint.solver.Pools$Pool
private final java.lang.Object[] mPool
private int mPoolSize
    void <init>(int)
    {
        android.support.constraint.solver.Pools$SimplePool r0;
        int $i0;
        java.lang.IllegalArgumentException $r1;
        java.lang.Object[] $r2;

        r0 := @this: android.support.constraint.solver.Pools$SimplePool;

        $i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if $i0 > 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The max pool size must be > 0");

        throw $r1;

     label1:
        $r2 = newarray (java.lang.Object)[$i0];

        r0.<android.support.constraint.solver.Pools$SimplePool: java.lang.Object[] mPool> = $r2;

        return;
    }
    private boolean isInPool(java.lang.Object)
    {
        android.support.constraint.solver.Pools$SimplePool r0;
        java.lang.Object r1, $r3;
        int i0, $i1;
        java.lang.Object[] $r2;

        r0 := @this: android.support.constraint.solver.Pools$SimplePool;

        r1 := @parameter0: java.lang.Object;

        i0 = 0;

     label1:
        $i1 = r0.<android.support.constraint.solver.Pools$SimplePool: int mPoolSize>;

        if i0 >= $i1 goto label3;

        $r2 = r0.<android.support.constraint.solver.Pools$SimplePool: java.lang.Object[] mPool>;

        $r3 = $r2[i0];

        if $r3 != r1 goto label2;

        return 1;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return 0;
    }
    public java.lang.Object acquire()
    {
        android.support.constraint.solver.Pools$SimplePool r0;
        int i0;
        java.lang.Object[] $r1;
        java.lang.Object r2;

        r0 := @this: android.support.constraint.solver.Pools$SimplePool;

        i0 = r0.<android.support.constraint.solver.Pools$SimplePool: int mPoolSize>;

        if i0 <= 0 goto label1;

        i0 = r0.<android.support.constraint.solver.Pools$SimplePool: int mPoolSize>;

        i0 = i0 + -1;

        $r1 = r0.<android.support.constraint.solver.Pools$SimplePool: java.lang.Object[] mPool>;

        r2 = $r1[i0];

        $r1 = r0.<android.support.constraint.solver.Pools$SimplePool: java.lang.Object[] mPool>;

        $r1[i0] = null;

        i0 = r0.<android.support.constraint.solver.Pools$SimplePool: int mPoolSize>;

        i0 = i0 + -1;

        r0.<android.support.constraint.solver.Pools$SimplePool: int mPoolSize> = i0;

        return r2;

     label1:
        return null;
    }
    public boolean release(java.lang.Object)
    {
        android.support.constraint.solver.Pools$SimplePool r0;
        java.lang.Object r1;
        int $i0, $i1;
        java.lang.Object[] $r2;

        r0 := @this: android.support.constraint.solver.Pools$SimplePool;

        r1 := @parameter0: java.lang.Object;

        $i0 = r0.<android.support.constraint.solver.Pools$SimplePool: int mPoolSize>;

        $r2 = r0.<android.support.constraint.solver.Pools$SimplePool: java.lang.Object[] mPool>;

        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label1;

        $r2 = r0.<android.support.constraint.solver.Pools$SimplePool: java.lang.Object[] mPool>;

        $i0 = r0.<android.support.constraint.solver.Pools$SimplePool: int mPoolSize>;

        $r2[$i0] = r1;

        $i0 = r0.<android.support.constraint.solver.Pools$SimplePool: int mPoolSize>;

        $i0 = $i0 + 1;

        r0.<android.support.constraint.solver.Pools$SimplePool: int mPoolSize> = $i0;

        return 1;

     label1:
        return 0;
    }
    public void releaseAll(java.lang.Object[], int)
    {
        android.support.constraint.solver.Pools$SimplePool r0;
        java.lang.Object[] r1, $r3;
        java.lang.Object r2;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.support.constraint.solver.Pools$SimplePool;

        r1 := @parameter0: java.lang.Object[];

        $i0 := @parameter1: int;

        $i1 = lengthof r1;

        if $i0 <= $i1 goto label1;

        $i0 = lengthof r1;

     label1:
        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label4;

        r2 = r1[$i1];

        $i2 = r0.<android.support.constraint.solver.Pools$SimplePool: int mPoolSize>;

        $r3 = r0.<android.support.constraint.solver.Pools$SimplePool: java.lang.Object[] mPool>;

        $i3 = lengthof $r3;

        if $i2 >= $i3 goto label3;

        $r3 = r0.<android.support.constraint.solver.Pools$SimplePool: java.lang.Object[] mPool>;

        $i2 = r0.<android.support.constraint.solver.Pools$SimplePool: int mPoolSize>;

        $r3[$i2] = r2;

        $i2 = r0.<android.support.constraint.solver.Pools$SimplePool: int mPoolSize>;

        $i2 = $i2 + 1;

        r0.<android.support.constraint.solver.Pools$SimplePool: int mPoolSize> = $i2;

     label3:
        $i1 = $i1 + 1;

        goto label2;

     label4:
        return;
    }
