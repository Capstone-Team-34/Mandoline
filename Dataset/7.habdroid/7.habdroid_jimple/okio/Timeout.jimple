okio.Timeout extends java.lang.Object
public static final okio.Timeout NONE
private long deadlineNanoTime
private boolean hasDeadline
private long timeoutNanos
    static void <clinit>()
    {
        okio.Timeout$1 $r0;

        $r0 = new okio.Timeout$1;

        specialinvoke $r0.<okio.Timeout$1: void <init>()>();

        <okio.Timeout: okio.Timeout NONE> = $r0;

        return;
    }
    public void <init>()
    {
        okio.Timeout r0;

        r0 := @this: okio.Timeout;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public okio.Timeout clearDeadline()
    {
        okio.Timeout r0;

        r0 := @this: okio.Timeout;

        r0.<okio.Timeout: boolean hasDeadline> = 0;

        return r0;
    }
    public okio.Timeout clearTimeout()
    {
        okio.Timeout r0;

        r0 := @this: okio.Timeout;

        r0.<okio.Timeout: long timeoutNanos> = 0L;

        return r0;
    }
    public final okio.Timeout deadline(long, java.util.concurrent.TimeUnit)
    {
        okio.Timeout r0;
        long $l0, $l2;
        java.util.concurrent.TimeUnit $r1;
        byte $b1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;

        r0 := @this: okio.Timeout;

        $l0 := @parameter0: long;

        $r1 := @parameter1: java.util.concurrent.TimeUnit;

        $b1 = $l0 cmp 0L;

        if $b1 > 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("duration <= 0: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label1:
        if $r1 != null goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("unit == null");

        throw $r2;

     label2:
        $l2 = staticinvoke <java.lang.System: long nanoTime()>();

        $l0 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toNanos(long)>($l0);

        $l0 = $l2 + $l0;

        r0 = virtualinvoke r0.<okio.Timeout: okio.Timeout deadlineNanoTime(long)>($l0);

        return r0;
    }
    public long deadlineNanoTime()
    {
        okio.Timeout r0;
        boolean $z0;
        java.lang.IllegalStateException $r1;
        long l0;

        r0 := @this: okio.Timeout;

        $z0 = r0.<okio.Timeout: boolean hasDeadline>;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No deadline");

        throw $r1;

     label1:
        l0 = r0.<okio.Timeout: long deadlineNanoTime>;

        return l0;
    }
    public okio.Timeout deadlineNanoTime(long)
    {
        okio.Timeout r0;
        long $l0;

        r0 := @this: okio.Timeout;

        $l0 := @parameter0: long;

        r0.<okio.Timeout: boolean hasDeadline> = 1;

        r0.<okio.Timeout: long deadlineNanoTime> = $l0;

        return r0;
    }
    public boolean hasDeadline()
    {
        okio.Timeout r0;
        boolean z0;

        r0 := @this: okio.Timeout;

        z0 = r0.<okio.Timeout: boolean hasDeadline>;

        return z0;
    }
    public void throwIfReached() throws java.io.IOException
    {
        okio.Timeout r0;
        boolean $z0;
        java.io.InterruptedIOException $r1;
        long $l0, $l1;
        byte $b2;

        r0 := @this: okio.Timeout;

        $z0 = staticinvoke <java.lang.Thread: boolean interrupted()>();

        if $z0 == 0 goto label1;

        $r1 = new java.io.InterruptedIOException;

        specialinvoke $r1.<java.io.InterruptedIOException: void <init>(java.lang.String)>("thread interrupted");

        throw $r1;

     label1:
        $z0 = r0.<okio.Timeout: boolean hasDeadline>;

        if $z0 == 0 goto label2;

        $l0 = r0.<okio.Timeout: long deadlineNanoTime>;

        $l1 = staticinvoke <java.lang.System: long nanoTime()>();

        $l0 = $l0 - $l1;

        $b2 = $l0 cmp 0L;

        if $b2 > 0 goto label2;

        $r1 = new java.io.InterruptedIOException;

        specialinvoke $r1.<java.io.InterruptedIOException: void <init>(java.lang.String)>("deadline reached");

        throw $r1;

     label2:
        return;
    }
    public okio.Timeout timeout(long, java.util.concurrent.TimeUnit)
    {
        okio.Timeout r0;
        long $l0;
        java.util.concurrent.TimeUnit $r1;
        byte $b1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;

        r0 := @this: okio.Timeout;

        $l0 := @parameter0: long;

        $r1 := @parameter1: java.util.concurrent.TimeUnit;

        $b1 = $l0 cmp 0L;

        if $b1 >= 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("timeout < 0: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label1:
        if $r1 != null goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("unit == null");

        throw $r2;

     label2:
        $l0 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toNanos(long)>($l0);

        r0.<okio.Timeout: long timeoutNanos> = $l0;

        return r0;
    }
    public long timeoutNanos()
    {
        okio.Timeout r0;
        long l0;

        r0 := @this: okio.Timeout;

        l0 = r0.<okio.Timeout: long timeoutNanos>;

        return l0;
    }
    public final void waitUntilNotified(java.lang.Object) throws java.io.InterruptedIOException
    {
        okio.Timeout r0;
        java.lang.Object $r1;
        long l0, $l1, $l3, $l4;
        java.lang.InterruptedException r2;
        boolean $z0;
        byte $b2;
        int $i5;
        java.io.InterruptedIOException $r3;

        r0 := @this: okio.Timeout;

        $r1 := @parameter0: java.lang.Object;

     label01:
        $z0 = virtualinvoke r0.<okio.Timeout: boolean hasDeadline()>();

        $l1 = virtualinvoke r0.<okio.Timeout: long timeoutNanos()>();

     label02:
        if $z0 != 0 goto label05;

        $b2 = $l1 cmp 0L;

        if $b2 != 0 goto label05;

     label03:
        virtualinvoke $r1.<java.lang.Object: void wait()>();

     label04:
        return;

     label05:
        $l3 = staticinvoke <java.lang.System: long nanoTime()>();

     label06:
        if $z0 == 0 goto label17;

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label17;

     label07:
        l0 = virtualinvoke r0.<okio.Timeout: long deadlineNanoTime()>();

     label08:
        l0 = l0 - $l3;

     label09:
        $l1 = staticinvoke <java.lang.Math: long min(long,long)>($l1, l0);

     label10:
        l0 = 0L;

        $b2 = $l1 cmp 0L;

        if $b2 <= 0 goto label13;

        l0 = $l1 / 1000000L;

        $l4 = 1000000L * l0;

        $l4 = $l1 - $l4;

        $i5 = (int) $l4;

     label11:
        virtualinvoke $r1.<java.lang.Object: void wait(long,int)>(l0, $i5);

        l0 = staticinvoke <java.lang.System: long nanoTime()>();

     label12:
        l0 = l0 - $l3;

     label13:
        $b2 = l0 cmp $l1;

        if $b2 < 0 goto label21;

        $r3 = new java.io.InterruptedIOException;

     label14:
        specialinvoke $r3.<java.io.InterruptedIOException: void <init>(java.lang.String)>("timeout");

     label15:
        throw $r3;

     label16:
        r2 := @caughtexception;

        $r3 = new java.io.InterruptedIOException;

        specialinvoke $r3.<java.io.InterruptedIOException: void <init>(java.lang.String)>("interrupted");

        throw $r3;

     label17:
        if $z0 == 0 goto label20;

     label18:
        $l1 = virtualinvoke r0.<okio.Timeout: long deadlineNanoTime()>();

     label19:
        $l1 = $l1 - $l3;

        goto label10;

     label20:
        goto label10;

     label21:
        return;

        catch java.lang.InterruptedException from label01 to label02 with label16;
        catch java.lang.InterruptedException from label03 to label04 with label16;
        catch java.lang.InterruptedException from label05 to label06 with label16;
        catch java.lang.InterruptedException from label07 to label08 with label16;
        catch java.lang.InterruptedException from label09 to label10 with label16;
        catch java.lang.InterruptedException from label11 to label12 with label16;
        catch java.lang.InterruptedException from label14 to label15 with label16;
        catch java.lang.InterruptedException from label18 to label19 with label16;
    }
