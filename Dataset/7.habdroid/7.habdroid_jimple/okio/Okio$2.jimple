okio.Okio$2 extends java.lang.Object implements okio.Source
final java.io.InputStream val$in
final okio.Timeout val$timeout
    void <init>(okio.Timeout, java.io.InputStream)
    {
        okio.Okio$2 r0;
        okio.Timeout $r1;
        java.io.InputStream $r2;

        r0 := @this: okio.Okio$2;

        $r1 := @parameter0: okio.Timeout;

        $r2 := @parameter1: java.io.InputStream;

        r0.<okio.Okio$2: okio.Timeout val$timeout> = $r1;

        r0.<okio.Okio$2: java.io.InputStream val$in> = $r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public void close() throws java.io.IOException
    {
        okio.Okio$2 r0;
        java.io.InputStream $r1;

        r0 := @this: okio.Okio$2;

        $r1 = r0.<okio.Okio$2: java.io.InputStream val$in>;

        virtualinvoke $r1.<java.io.InputStream: void close()>();

        return;
    }
    public long read(okio.Buffer, long) throws java.io.IOException
    {
        okio.Okio$2 r0;
        okio.Buffer $r1;
        long $l0, $l3;
        java.lang.AssertionError r2;
        int i1, $i4;
        byte $b2;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        okio.Timeout $r6;
        okio.Segment $r7;
        java.io.InputStream $r8;
        byte[] $r9;
        boolean $z0;
        java.io.IOException $r10;

        r0 := @this: okio.Okio$2;

        $r1 := @parameter0: okio.Buffer;

        $l0 := @parameter1: long;

        $b2 = $l0 cmp 0L;

        if $b2 >= 0 goto label01;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("byteCount < 0: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label01:
        $b2 = $l0 cmp 0L;

        if $b2 != 0 goto label02;

        return 0L;

     label02:
        $r6 = r0.<okio.Okio$2: okio.Timeout val$timeout>;

     label03:
        virtualinvoke $r6.<okio.Timeout: void throwIfReached()>();

        $r7 = virtualinvoke $r1.<okio.Buffer: okio.Segment writableSegment(int)>(1);

     label04:
        i1 = $r7.<okio.Segment: int limit>;

        i1 = 8192 - i1;

        $l3 = (long) i1;

     label05:
        $l0 = staticinvoke <java.lang.Math: long min(long,long)>($l0, $l3);

     label06:
        i1 = (int) $l0;

        $r8 = r0.<okio.Okio$2: java.io.InputStream val$in>;

        $r9 = $r7.<okio.Segment: byte[] data>;

        $i4 = $r7.<okio.Segment: int limit>;

     label07:
        i1 = virtualinvoke $r8.<java.io.InputStream: int read(byte[],int,int)>($r9, $i4, i1);

     label08:
        if i1 != -1 goto label09;

        return -1L;

     label09:
        $i4 = $r7.<okio.Segment: int limit>;

        $i4 = $i4 + i1;

        $r7.<okio.Segment: int limit> = $i4;

        $l0 = $r1.<okio.Buffer: long size>;

        $l3 = (long) i1;

        $l0 = $l0 + $l3;

        $r1.<okio.Buffer: long size> = $l0;

        $l0 = (long) i1;

        return $l0;

     label10:
        r2 := @caughtexception;

        $z0 = staticinvoke <okio.Okio: boolean isAndroidGetsocknameError(java.lang.AssertionError)>(r2);

        if $z0 == 0 goto label11;

        $r10 = new java.io.IOException;

        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.Throwable)>(r2);

        throw $r10;

     label11:
        throw r2;

        catch java.lang.AssertionError from label03 to label04 with label10;
        catch java.lang.AssertionError from label05 to label06 with label10;
        catch java.lang.AssertionError from label07 to label08 with label10;
    }
    public okio.Timeout timeout()
    {
        okio.Okio$2 r0;
        okio.Timeout r1;

        r0 := @this: okio.Okio$2;

        r1 = r0.<okio.Okio$2: okio.Timeout val$timeout>;

        return r1;
    }
    public java.lang.String toString()
    {
        okio.Okio$2 r0;
        java.lang.StringBuilder $r1;
        java.io.InputStream $r2;
        java.lang.String $r3;

        r0 := @this: okio.Okio$2;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("source(");

        $r2 = r0.<okio.Okio$2: java.io.InputStream val$in>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }
