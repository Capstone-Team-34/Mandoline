okio.Options extends java.util.AbstractList implements java.util.RandomAccess
final okio.ByteString[] byteStrings
    private void <init>(okio.ByteString[])
    {
        okio.Options r0;
        okio.ByteString[] $r1;

        r0 := @this: okio.Options;

        $r1 := @parameter0: okio.ByteString[];

        specialinvoke r0.<java.util.AbstractList: void <init>()>();

        r0.<okio.Options: okio.ByteString[] byteStrings> = $r1;

        return;
    }
    public static transient okio.Options of(okio.ByteString[])
    {
        okio.ByteString[] $r0;
        okio.Options $r1;
        java.lang.Object $r2;

        $r0 := @parameter0: okio.ByteString[];

        $r1 = new okio.Options;

        $r2 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r0 = (okio.ByteString[]) $r2;

        specialinvoke $r1.<okio.Options: void <init>(okio.ByteString[])>($r0);

        return $r1;
    }
    public volatile java.lang.Object get(int)
    {
        okio.Options r0;
        int $i0;
        okio.ByteString $r1;

        r0 := @this: okio.Options;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<okio.Options: okio.ByteString get(int)>($i0);

        return $r1;
    }
    public okio.ByteString get(int)
    {
        okio.Options r0;
        int $i0;
        okio.ByteString[] $r1;
        okio.ByteString $r2;

        r0 := @this: okio.Options;

        $i0 := @parameter0: int;

        $r1 = r0.<okio.Options: okio.ByteString[] byteStrings>;

        $r2 = $r1[$i0];

        return $r2;
    }
    public int size()
    {
        okio.Options r0;
        okio.ByteString[] $r1;
        int $i0;

        r0 := @this: okio.Options;

        $r1 = r0.<okio.Options: okio.ByteString[] byteStrings>;

        $i0 = lengthof $r1;

        return $i0;
    }
