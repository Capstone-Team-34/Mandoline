okio.Util extends java.lang.Object
public static final java.nio.charset.Charset UTF_8
    static void <clinit>()
    {
        java.nio.charset.Charset $r0;

        $r0 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-8");

        <okio.Util: java.nio.charset.Charset UTF_8> = $r0;

        return;
    }
    private void <init>()
    {
        okio.Util r0;

        r0 := @this: okio.Util;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static boolean arrayRangeEquals(byte[], int, byte[], int, int)
    {
        byte[] $r0, $r1;
        int $i0, $i1, $i2, i3, $i4;
        byte $b5, $b6;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r1 := @parameter2: byte[];

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        i3 = 0;

     label1:
        if i3 >= $i2 goto label3;

        $i4 = i3 + $i0;

        $b5 = $r0[$i4];

        $i4 = i3 + $i1;

        $b6 = $r1[$i4];

        if $b5 == $b6 goto label2;

        return 0;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return 1;
    }
    public static void checkOffsetAndCount(long, long, long)
    {
        long $l0, $l1, $l2, $l3;
        byte $b4;
        java.lang.ArrayIndexOutOfBoundsException $r0;
        java.lang.Object[] $r1;
        java.lang.Long $r2;
        java.lang.String $r3;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $l2 := @parameter2: long;

        $l3 = $l1 | $l2;

        $b4 = $l3 cmp 0L;

        if $b4 < 0 goto label1;

        $b4 = $l1 cmp $l0;

        if $b4 > 0 goto label1;

        $l3 = $l0 - $l1;

        $b4 = $l3 cmp $l2;

        if $b4 >= 0 goto label2;

     label1:
        $r0 = new java.lang.ArrayIndexOutOfBoundsException;

        $r1 = newarray (java.lang.Object)[3];

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r1[0] = $r2;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $r1[1] = $r2;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        $r1[2] = $r2;

        $r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("size=%s offset=%s byteCount=%s", $r1);

        specialinvoke $r0.<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>($r3);

        throw $r0;

     label2:
        return;
    }
    public static int reverseBytesInt(int)
    {
        int $i0, $i1, $i2;

        $i0 := @parameter0: int;

        $i1 = -16777216 & $i0;

        $i1 = $i1 >>> 24;

        $i2 = 16711680 & $i0;

        $i2 = $i2 >>> 8;

        $i1 = $i1 | $i2;

        $i2 = 65280 & $i0;

        $i2 = $i2 << 8;

        $i1 = $i1 | $i2;

        $i0 = $i0 & 255;

        $i0 = $i0 << 24;

        $i0 = $i1 | $i0;

        return $i0;
    }
    public static long reverseBytesLong(long)
    {
        long $l0, $l1, $l2;

        $l0 := @parameter0: long;

        $l1 = -72057594037927936L & $l0;

        $l1 = $l1 >>> 56;

        $l2 = 71776119061217280L & $l0;

        $l2 = $l2 >>> 40;

        $l1 = $l1 | $l2;

        $l2 = 280375465082880L & $l0;

        $l2 = $l2 >>> 24;

        $l1 = $l1 | $l2;

        $l2 = 1095216660480L & $l0;

        $l2 = $l2 >>> 8;

        $l1 = $l1 | $l2;

        $l2 = 4278190080L & $l0;

        $l2 = $l2 << 8;

        $l1 = $l1 | $l2;

        $l2 = 16711680L & $l0;

        $l2 = $l2 << 24;

        $l1 = $l1 | $l2;

        $l2 = 65280L & $l0;

        $l2 = $l2 << 40;

        $l1 = $l1 | $l2;

        $l0 = 255L & $l0;

        $l0 = $l0 << 56;

        $l0 = $l1 | $l0;

        return $l0;
    }
    public static short reverseBytesShort(short)
    {
        short $s0;
        int i1, i2;

        $s0 := @parameter0: short;

        i1 = $s0 & 65535;

        i2 = 65280 & i1;

        i2 = i2 >>> 8;

        i1 = i1 & 255;

        i1 = i1 << 8;

        i2 = i2 | i1;

        $s0 = (short) i2;

        return $s0;
    }
    public static void sneakyRethrow(java.lang.Throwable)
    {
        java.lang.Throwable $r0;

        $r0 := @parameter0: java.lang.Throwable;

        staticinvoke <okio.Util: void sneakyThrow2(java.lang.Throwable)>($r0);

        return;
    }
    private static void sneakyThrow2(java.lang.Throwable) throws java.lang.Throwable
    {
        java.lang.Throwable $r0;

        $r0 := @parameter0: java.lang.Throwable;

        throw $r0;
    }
