okio.HashingSink extends okio.ForwardingSink
private final javax.crypto.Mac mac
private final java.security.MessageDigest messageDigest
    private void <init>(okio.Sink, java.lang.String)
    {
        okio.HashingSink r0;
        okio.Sink $r1;
        java.lang.String $r2;
        java.security.NoSuchAlgorithmException r3;
        java.security.MessageDigest $r4;
        java.lang.AssertionError $r5;

        r0 := @this: okio.HashingSink;

        $r1 := @parameter0: okio.Sink;

        $r2 := @parameter1: java.lang.String;

        specialinvoke r0.<okio.ForwardingSink: void <init>(okio.Sink)>($r1);

     label1:
        $r4 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r2);

     label2:
        r0.<okio.HashingSink: java.security.MessageDigest messageDigest> = $r4;

        r0.<okio.HashingSink: javax.crypto.Mac mac> = null;

        return;

     label3:
        r3 := @caughtexception;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
    }
    private void <init>(okio.Sink, okio.ByteString, java.lang.String)
    {
        okio.HashingSink r0;
        okio.Sink $r1;
        okio.ByteString $r2;
        java.lang.String $r3;
        javax.crypto.spec.SecretKeySpec $r4;
        javax.crypto.Mac $r5;
        byte[] $r6;
        java.security.NoSuchAlgorithmException r7;
        java.lang.AssertionError $r8;
        java.security.InvalidKeyException r9;
        java.lang.IllegalArgumentException $r10;

        r0 := @this: okio.HashingSink;

        $r1 := @parameter0: okio.Sink;

        $r2 := @parameter1: okio.ByteString;

        $r3 := @parameter2: java.lang.String;

        specialinvoke r0.<okio.ForwardingSink: void <init>(okio.Sink)>($r1);

     label1:
        $r5 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>($r3);

     label2:
        r0.<okio.HashingSink: javax.crypto.Mac mac> = $r5;

        $r5 = r0.<okio.HashingSink: javax.crypto.Mac mac>;

        $r4 = new javax.crypto.spec.SecretKeySpec;

     label3:
        $r6 = virtualinvoke $r2.<okio.ByteString: byte[] toByteArray()>();

        specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r6, $r3);

        virtualinvoke $r5.<javax.crypto.Mac: void init(java.security.Key)>($r4);

     label4:
        r0.<okio.HashingSink: java.security.MessageDigest messageDigest> = null;

        return;

     label5:
        r7 := @caughtexception;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label6:
        r9 := @caughtexception;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>(r9);

        throw $r10;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label5;
        catch java.security.NoSuchAlgorithmException from label3 to label4 with label5;
        catch java.security.InvalidKeyException from label1 to label2 with label6;
        catch java.security.InvalidKeyException from label3 to label4 with label6;
    }
    public static okio.HashingSink hmacSha1(okio.Sink, okio.ByteString)
    {
        okio.Sink $r0;
        okio.ByteString $r1;
        okio.HashingSink $r2;

        $r0 := @parameter0: okio.Sink;

        $r1 := @parameter1: okio.ByteString;

        $r2 = new okio.HashingSink;

        specialinvoke $r2.<okio.HashingSink: void <init>(okio.Sink,okio.ByteString,java.lang.String)>($r0, $r1, "HmacSHA1");

        return $r2;
    }
    public static okio.HashingSink hmacSha256(okio.Sink, okio.ByteString)
    {
        okio.Sink $r0;
        okio.ByteString $r1;
        okio.HashingSink $r2;

        $r0 := @parameter0: okio.Sink;

        $r1 := @parameter1: okio.ByteString;

        $r2 = new okio.HashingSink;

        specialinvoke $r2.<okio.HashingSink: void <init>(okio.Sink,okio.ByteString,java.lang.String)>($r0, $r1, "HmacSHA256");

        return $r2;
    }
    public static okio.HashingSink md5(okio.Sink)
    {
        okio.Sink $r0;
        okio.HashingSink $r1;

        $r0 := @parameter0: okio.Sink;

        $r1 = new okio.HashingSink;

        specialinvoke $r1.<okio.HashingSink: void <init>(okio.Sink,java.lang.String)>($r0, "MD5");

        return $r1;
    }
    public static okio.HashingSink sha1(okio.Sink)
    {
        okio.Sink $r0;
        okio.HashingSink $r1;

        $r0 := @parameter0: okio.Sink;

        $r1 = new okio.HashingSink;

        specialinvoke $r1.<okio.HashingSink: void <init>(okio.Sink,java.lang.String)>($r0, "SHA-1");

        return $r1;
    }
    public static okio.HashingSink sha256(okio.Sink)
    {
        okio.Sink $r0;
        okio.HashingSink $r1;

        $r0 := @parameter0: okio.Sink;

        $r1 = new okio.HashingSink;

        specialinvoke $r1.<okio.HashingSink: void <init>(okio.Sink,java.lang.String)>($r0, "SHA-256");

        return $r1;
    }
    public okio.ByteString hash()
    {
        okio.HashingSink r0;
        java.security.MessageDigest $r1;
        byte[] $r2;
        okio.ByteString $r3;
        javax.crypto.Mac $r4;

        r0 := @this: okio.HashingSink;

        $r1 = r0.<okio.HashingSink: java.security.MessageDigest messageDigest>;

        if $r1 == null goto label2;

        $r1 = r0.<okio.HashingSink: java.security.MessageDigest messageDigest>;

        $r2 = virtualinvoke $r1.<java.security.MessageDigest: byte[] digest()>();

     label1:
        $r3 = staticinvoke <okio.ByteString: okio.ByteString of(byte[])>($r2);

        return $r3;

     label2:
        $r4 = r0.<okio.HashingSink: javax.crypto.Mac mac>;

        $r2 = virtualinvoke $r4.<javax.crypto.Mac: byte[] doFinal()>();

        goto label1;
    }
    public void write(okio.Buffer, long) throws java.io.IOException
    {
        okio.HashingSink r0;
        okio.Buffer $r1;
        long $l0, $l2, $l3, $l6;
        int $i1, $i5;
        okio.Segment r2;
        byte $b4;
        java.security.MessageDigest $r3;
        byte[] $r4;
        javax.crypto.Mac $r5;

        r0 := @this: okio.HashingSink;

        $r1 := @parameter0: okio.Buffer;

        $l0 := @parameter1: long;

        $l3 = $r1.<okio.Buffer: long size>;

        staticinvoke <okio.Util: void checkOffsetAndCount(long,long,long)>($l3, 0L, $l0);

        $l3 = 0L;

        r2 = $r1.<okio.Buffer: okio.Segment head>;

     label1:
        $b4 = $l3 cmp $l0;

        if $b4 >= 0 goto label4;

        $l2 = $l0 - $l3;

        $i5 = r2.<okio.Segment: int limit>;

        $i1 = r2.<okio.Segment: int pos>;

        $i1 = $i5 - $i1;

        $l6 = (long) $i1;

        $l2 = staticinvoke <java.lang.Math: long min(long,long)>($l2, $l6);

        $i1 = (int) $l2;

        $r3 = r0.<okio.HashingSink: java.security.MessageDigest messageDigest>;

        if $r3 == null goto label3;

        $r3 = r0.<okio.HashingSink: java.security.MessageDigest messageDigest>;

        $r4 = r2.<okio.Segment: byte[] data>;

        $i5 = r2.<okio.Segment: int pos>;

        virtualinvoke $r3.<java.security.MessageDigest: void update(byte[],int,int)>($r4, $i5, $i1);

     label2:
        $l2 = (long) $i1;

        $l3 = $l3 + $l2;

        r2 = r2.<okio.Segment: okio.Segment next>;

        goto label1;

     label3:
        $r5 = r0.<okio.HashingSink: javax.crypto.Mac mac>;

        $r4 = r2.<okio.Segment: byte[] data>;

        $i5 = r2.<okio.Segment: int pos>;

        virtualinvoke $r5.<javax.crypto.Mac: void update(byte[],int,int)>($r4, $i5, $i1);

        goto label2;

     label4:
        specialinvoke r0.<okio.ForwardingSink: void write(okio.Buffer,long)>($r1, $l0);

        return;
    }
