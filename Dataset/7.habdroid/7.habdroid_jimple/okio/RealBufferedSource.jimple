okio.RealBufferedSource extends java.lang.Object implements okio.BufferedSource
public final okio.Buffer buffer
boolean closed
public final okio.Source source
    void <init>(okio.Source)
    {
        okio.RealBufferedSource r0;
        okio.Source $r1;
        okio.Buffer $r2;
        java.lang.NullPointerException $r3;

        r0 := @this: okio.RealBufferedSource;

        $r1 := @parameter0: okio.Source;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new okio.Buffer;

        specialinvoke $r2.<okio.Buffer: void <init>()>();

        r0.<okio.RealBufferedSource: okio.Buffer buffer> = $r2;

        if $r1 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("source == null");

        throw $r3;

     label1:
        r0.<okio.RealBufferedSource: okio.Source source> = $r1;

        return;
    }
    public okio.Buffer buffer()
    {
        okio.RealBufferedSource r0;
        okio.Buffer r1;

        r0 := @this: okio.RealBufferedSource;

        r1 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        return r1;
    }
    public void close() throws java.io.IOException
    {
        okio.RealBufferedSource r0;
        boolean $z0;
        okio.Source $r1;
        okio.Buffer $r2;

        r0 := @this: okio.RealBufferedSource;

        $z0 = r0.<okio.RealBufferedSource: boolean closed>;

        if $z0 == 0 goto label1;

        return;

     label1:
        r0.<okio.RealBufferedSource: boolean closed> = 1;

        $r1 = r0.<okio.RealBufferedSource: okio.Source source>;

        interfaceinvoke $r1.<okio.Source: void close()>();

        $r2 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        virtualinvoke $r2.<okio.Buffer: void clear()>();

        return;
    }
    public boolean exhausted() throws java.io.IOException
    {
        okio.RealBufferedSource r0;
        boolean $z0;
        java.lang.IllegalStateException $r1;
        okio.Buffer $r2;
        okio.Source $r3;
        long $l0;
        byte $b1;

        r0 := @this: okio.RealBufferedSource;

        $z0 = r0.<okio.RealBufferedSource: boolean closed>;

        if $z0 == 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("closed");

        throw $r1;

     label1:
        $r2 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        $z0 = virtualinvoke $r2.<okio.Buffer: boolean exhausted()>();

        if $z0 == 0 goto label2;

        $r3 = r0.<okio.RealBufferedSource: okio.Source source>;

        $r2 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        $l0 = interfaceinvoke $r3.<okio.Source: long read(okio.Buffer,long)>($r2, 8192L);

        $b1 = $l0 cmp -1L;

        if $b1 != 0 goto label2;

        return 1;

     label2:
        return 0;
    }
    public long indexOf(byte) throws java.io.IOException
    {
        okio.RealBufferedSource r0;
        byte $b0;
        long $l1;

        r0 := @this: okio.RealBufferedSource;

        $b0 := @parameter0: byte;

        $l1 = virtualinvoke r0.<okio.RealBufferedSource: long indexOf(byte,long)>($b0, 0L);

        return $l1;
    }
    public long indexOf(byte, long) throws java.io.IOException
    {
        okio.RealBufferedSource r0;
        byte $b0, $b3;
        long l1, $l2, $l4;
        okio.Buffer $r1;
        boolean $z0;
        java.lang.IllegalStateException $r2;
        okio.Source $r3;

        r0 := @this: okio.RealBufferedSource;

        $b0 := @parameter0: byte;

        $l2 := @parameter1: long;

        $z0 = r0.<okio.RealBufferedSource: boolean closed>;

        if $z0 == 0 goto label2;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("closed");

        throw $r2;

     label1:
        $l2 = staticinvoke <java.lang.Math: long max(long,long)>($l2, l1);

     label2:
        $r1 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        l1 = virtualinvoke $r1.<okio.Buffer: long indexOf(byte,long)>($b0, $l2);

        $b3 = l1 cmp -1L;

        if $b3 == 0 goto label3;

        return l1;

     label3:
        $r1 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        l1 = $r1.<okio.Buffer: long size>;

        $r3 = r0.<okio.RealBufferedSource: okio.Source source>;

        $r1 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        $l4 = interfaceinvoke $r3.<okio.Source: long read(okio.Buffer,long)>($r1, 8192L);

        $b3 = $l4 cmp -1L;

        if $b3 != 0 goto label1;

        return -1L;
    }
    public long indexOf(okio.ByteString) throws java.io.IOException
    {
        okio.RealBufferedSource r0;
        okio.ByteString $r1;
        long $l0;

        r0 := @this: okio.RealBufferedSource;

        $r1 := @parameter0: okio.ByteString;

        $l0 = virtualinvoke r0.<okio.RealBufferedSource: long indexOf(okio.ByteString,long)>($r1, 0L);

        return $l0;
    }
    public long indexOf(okio.ByteString, long) throws java.io.IOException
    {
        okio.RealBufferedSource r0;
        okio.ByteString $r1;
        long l0, $l1, $l3;
        okio.Buffer $r2;
        boolean $z0;
        java.lang.IllegalStateException $r3;
        int $i2;
        byte $b4;
        okio.Source $r4;

        r0 := @this: okio.RealBufferedSource;

        $r1 := @parameter0: okio.ByteString;

        $l1 := @parameter1: long;

        $z0 = r0.<okio.RealBufferedSource: boolean closed>;

        if $z0 == 0 goto label2;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("closed");

        throw $r3;

     label1:
        $i2 = virtualinvoke $r1.<okio.ByteString: int size()>();

        $l3 = (long) $i2;

        l0 = l0 - $l3;

        l0 = l0 + 1L;

        $l1 = staticinvoke <java.lang.Math: long max(long,long)>($l1, l0);

     label2:
        $r2 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        l0 = virtualinvoke $r2.<okio.Buffer: long indexOf(okio.ByteString,long)>($r1, $l1);

        $b4 = l0 cmp -1L;

        if $b4 == 0 goto label3;

        return l0;

     label3:
        $r2 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        l0 = $r2.<okio.Buffer: long size>;

        $r4 = r0.<okio.RealBufferedSource: okio.Source source>;

        $r2 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        $l3 = interfaceinvoke $r4.<okio.Source: long read(okio.Buffer,long)>($r2, 8192L);

        $b4 = $l3 cmp -1L;

        if $b4 != 0 goto label1;

        return -1L;
    }
    public long indexOfElement(okio.ByteString) throws java.io.IOException
    {
        okio.RealBufferedSource r0;
        okio.ByteString $r1;
        long $l0;

        r0 := @this: okio.RealBufferedSource;

        $r1 := @parameter0: okio.ByteString;

        $l0 = virtualinvoke r0.<okio.RealBufferedSource: long indexOfElement(okio.ByteString,long)>($r1, 0L);

        return $l0;
    }
    public long indexOfElement(okio.ByteString, long) throws java.io.IOException
    {
        okio.RealBufferedSource r0;
        okio.ByteString $r1;
        long l0, $l1, $l3;
        okio.Buffer $r2;
        boolean $z0;
        java.lang.IllegalStateException $r3;
        byte $b2;
        okio.Source $r4;

        r0 := @this: okio.RealBufferedSource;

        $r1 := @parameter0: okio.ByteString;

        $l1 := @parameter1: long;

        $z0 = r0.<okio.RealBufferedSource: boolean closed>;

        if $z0 == 0 goto label2;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("closed");

        throw $r3;

     label1:
        $l1 = staticinvoke <java.lang.Math: long max(long,long)>($l1, l0);

     label2:
        $r2 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        l0 = virtualinvoke $r2.<okio.Buffer: long indexOfElement(okio.ByteString,long)>($r1, $l1);

        $b2 = l0 cmp -1L;

        if $b2 == 0 goto label3;

        return l0;

     label3:
        $r2 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        l0 = $r2.<okio.Buffer: long size>;

        $r4 = r0.<okio.RealBufferedSource: okio.Source source>;

        $r2 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        $l3 = interfaceinvoke $r4.<okio.Source: long read(okio.Buffer,long)>($r2, 8192L);

        $b2 = $l3 cmp -1L;

        if $b2 != 0 goto label1;

        return -1L;
    }
    public java.io.InputStream inputStream()
    {
        okio.RealBufferedSource r0;
        okio.RealBufferedSource$1 $r1;

        r0 := @this: okio.RealBufferedSource;

        $r1 = new okio.RealBufferedSource$1;

        specialinvoke $r1.<okio.RealBufferedSource$1: void <init>(okio.RealBufferedSource)>(r0);

        return $r1;
    }
    public boolean rangeEquals(long, okio.ByteString) throws java.io.IOException
    {
        okio.RealBufferedSource r0;
        long $l0;
        okio.ByteString $r1;
        int $i1;
        boolean $z0;

        r0 := @this: okio.RealBufferedSource;

        $l0 := @parameter0: long;

        $r1 := @parameter1: okio.ByteString;

        $i1 = virtualinvoke $r1.<okio.ByteString: int size()>();

        $z0 = virtualinvoke r0.<okio.RealBufferedSource: boolean rangeEquals(long,okio.ByteString,int,int)>($l0, $r1, 0, $i1);

        return $z0;
    }
    public boolean rangeEquals(long, okio.ByteString, int, int) throws java.io.IOException
    {
        okio.RealBufferedSource r0;
        long $l0, l3, $l6;
        okio.ByteString $r1;
        int $i1, $i2, $i5, $i7;
        boolean $z0;
        java.lang.IllegalStateException $r2;
        byte $b4, $b8;
        okio.Buffer $r3;

        r0 := @this: okio.RealBufferedSource;

        $l0 := @parameter0: long;

        $r1 := @parameter1: okio.ByteString;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $z0 = r0.<okio.RealBufferedSource: boolean closed>;

        if $z0 == 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("closed");

        throw $r2;

     label1:
        $b4 = $l0 cmp 0L;

        if $b4 < 0 goto label5;

        if $i1 < 0 goto label5;

        if $i2 < 0 goto label5;

        $i5 = virtualinvoke $r1.<okio.ByteString: int size()>();

        $i5 = $i5 - $i1;

        if $i5 >= $i2 goto label2;

        return 0;

     label2:
        $i5 = 0;

     label3:
        if $i5 >= $i2 goto label4;

        l3 = (long) $i5;

        l3 = $l0 + l3;

        $l6 = 1L + l3;

        $z0 = virtualinvoke r0.<okio.RealBufferedSource: boolean request(long)>($l6);

        if $z0 == 0 goto label5;

        $r3 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        $b4 = virtualinvoke $r3.<okio.Buffer: byte getByte(long)>(l3);

        $i7 = $i1 + $i5;

        $b8 = virtualinvoke $r1.<okio.ByteString: byte getByte(int)>($i7);

        if $b4 != $b8 goto label5;

        $i5 = $i5 + 1;

        goto label3;

     label4:
        return 1;

     label5:
        return 0;
    }
    public int read(byte[]) throws java.io.IOException
    {
        okio.RealBufferedSource r0;
        byte[] $r1;
        int $i0;

        r0 := @this: okio.RealBufferedSource;

        $r1 := @parameter0: byte[];

        $i0 = lengthof $r1;

        $i0 = virtualinvoke r0.<okio.RealBufferedSource: int read(byte[],int,int)>($r1, 0, $i0);

        return $i0;
    }
    public int read(byte[], int, int) throws java.io.IOException
    {
        okio.RealBufferedSource r0;
        byte[] $r1;
        int $i0, $i1, $i3;
        okio.Buffer $r2;
        long $l2, $l4, $l5;
        byte $b6;
        okio.Source $r3;

        r0 := @this: okio.RealBufferedSource;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i3 = lengthof $r1;

        $l4 = (long) $i3;

        $l5 = (long) $i0;

        $l2 = (long) $i1;

        staticinvoke <okio.Util: void checkOffsetAndCount(long,long,long)>($l4, $l5, $l2);

        $r2 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        $l2 = $r2.<okio.Buffer: long size>;

        $b6 = $l2 cmp 0L;

        if $b6 != 0 goto label1;

        $r3 = r0.<okio.RealBufferedSource: okio.Source source>;

        $r2 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        $l2 = interfaceinvoke $r3.<okio.Source: long read(okio.Buffer,long)>($r2, 8192L);

        $b6 = $l2 cmp -1L;

        if $b6 != 0 goto label1;

        return -1;

     label1:
        $l2 = (long) $i1;

        $r2 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        $l4 = $r2.<okio.Buffer: long size>;

        $l2 = staticinvoke <java.lang.Math: long min(long,long)>($l2, $l4);

        $i1 = (int) $l2;

        $r2 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        $i0 = virtualinvoke $r2.<okio.Buffer: int read(byte[],int,int)>($r1, $i0, $i1);

        return $i0;
    }
    public long read(okio.Buffer, long) throws java.io.IOException
    {
        okio.RealBufferedSource r0;
        okio.Buffer $r1, $r2;
        long $l0, $l2;
        java.lang.IllegalArgumentException $r3;
        byte $b1;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        boolean $z0;
        java.lang.IllegalStateException $r6;
        okio.Source $r7;

        r0 := @this: okio.RealBufferedSource;

        $r1 := @parameter0: okio.Buffer;

        $l0 := @parameter1: long;

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("sink == null");

        throw $r3;

     label1:
        $b1 = $l0 cmp 0L;

        if $b1 >= 0 goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("byteCount < 0: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label2:
        $z0 = r0.<okio.RealBufferedSource: boolean closed>;

        if $z0 == 0 goto label3;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("closed");

        throw $r6;

     label3:
        $r2 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        $l2 = $r2.<okio.Buffer: long size>;

        $b1 = $l2 cmp 0L;

        if $b1 != 0 goto label4;

        $r7 = r0.<okio.RealBufferedSource: okio.Source source>;

        $r2 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        $l2 = interfaceinvoke $r7.<okio.Source: long read(okio.Buffer,long)>($r2, 8192L);

        $b1 = $l2 cmp -1L;

        if $b1 != 0 goto label4;

        return -1L;

     label4:
        $r2 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        $l2 = $r2.<okio.Buffer: long size>;

        $l0 = staticinvoke <java.lang.Math: long min(long,long)>($l0, $l2);

        $r2 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        $l0 = virtualinvoke $r2.<okio.Buffer: long read(okio.Buffer,long)>($r1, $l0);

        return $l0;
    }
    public long readAll(okio.Sink) throws java.io.IOException
    {
        okio.RealBufferedSource r0;
        okio.Sink $r1;
        java.lang.IllegalArgumentException $r2;
        long l0, $l1;
        okio.Source $r3;
        okio.Buffer $r4, $r5;
        byte $b2;

        r0 := @this: okio.RealBufferedSource;

        $r1 := @parameter0: okio.Sink;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("sink == null");

        throw $r2;

     label1:
        l0 = 0L;

     label2:
        $r3 = r0.<okio.RealBufferedSource: okio.Source source>;

        $r4 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        $l1 = interfaceinvoke $r3.<okio.Source: long read(okio.Buffer,long)>($r4, 8192L);

        $b2 = $l1 cmp -1L;

        if $b2 == 0 goto label3;

        $r4 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        $l1 = virtualinvoke $r4.<okio.Buffer: long completeSegmentByteCount()>();

        $b2 = $l1 cmp 0L;

        if $b2 <= 0 goto label2;

        l0 = l0 + $l1;

        $r4 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        interfaceinvoke $r1.<okio.Sink: void write(okio.Buffer,long)>($r4, $l1);

        goto label2;

     label3:
        $r4 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        $l1 = virtualinvoke $r4.<okio.Buffer: long size()>();

        $b2 = $l1 cmp 0L;

        if $b2 <= 0 goto label4;

        $r4 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        $l1 = virtualinvoke $r4.<okio.Buffer: long size()>();

        l0 = l0 + $l1;

        $r4 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        $r5 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        $l1 = virtualinvoke $r5.<okio.Buffer: long size()>();

        interfaceinvoke $r1.<okio.Sink: void write(okio.Buffer,long)>($r4, $l1);

     label4:
        return l0;
    }
    public byte readByte() throws java.io.IOException
    {
        okio.RealBufferedSource r0;
        byte $b0;
        okio.Buffer $r1;

        r0 := @this: okio.RealBufferedSource;

        virtualinvoke r0.<okio.RealBufferedSource: void require(long)>(1L);

        $r1 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        $b0 = virtualinvoke $r1.<okio.Buffer: byte readByte()>();

        return $b0;
    }
    public byte[] readByteArray() throws java.io.IOException
    {
        okio.RealBufferedSource r0;
        okio.Source $r1;
        byte[] $r2;
        okio.Buffer $r3;

        r0 := @this: okio.RealBufferedSource;

        $r3 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        $r1 = r0.<okio.RealBufferedSource: okio.Source source>;

        virtualinvoke $r3.<okio.Buffer: long writeAll(okio.Source)>($r1);

        $r3 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        $r2 = virtualinvoke $r3.<okio.Buffer: byte[] readByteArray()>();

        return $r2;
    }
    public byte[] readByteArray(long) throws java.io.IOException
    {
        okio.RealBufferedSource r0;
        long $l0;
        byte[] $r1;
        okio.Buffer $r2;

        r0 := @this: okio.RealBufferedSource;

        $l0 := @parameter0: long;

        virtualinvoke r0.<okio.RealBufferedSource: void require(long)>($l0);

        $r2 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        $r1 = virtualinvoke $r2.<okio.Buffer: byte[] readByteArray(long)>($l0);

        return $r1;
    }
    public okio.ByteString readByteString() throws java.io.IOException
    {
        okio.RealBufferedSource r0;
        okio.Source $r1;
        okio.ByteString $r2;
        okio.Buffer $r3;

        r0 := @this: okio.RealBufferedSource;

        $r3 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        $r1 = r0.<okio.RealBufferedSource: okio.Source source>;

        virtualinvoke $r3.<okio.Buffer: long writeAll(okio.Source)>($r1);

        $r3 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        $r2 = virtualinvoke $r3.<okio.Buffer: okio.ByteString readByteString()>();

        return $r2;
    }
    public okio.ByteString readByteString(long) throws java.io.IOException
    {
        okio.RealBufferedSource r0;
        long $l0;
        okio.ByteString $r1;
        okio.Buffer $r2;

        r0 := @this: okio.RealBufferedSource;

        $l0 := @parameter0: long;

        virtualinvoke r0.<okio.RealBufferedSource: void require(long)>($l0);

        $r2 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        $r1 = virtualinvoke $r2.<okio.Buffer: okio.ByteString readByteString(long)>($l0);

        return $r1;
    }
    public long readDecimalLong() throws java.io.IOException
    {
        okio.RealBufferedSource r0;
        int i0, $i1;
        long $l2;
        boolean $z0;
        okio.Buffer $r1;
        byte $b3;
        java.lang.NumberFormatException $r2;
        java.lang.Object[] $r3;
        java.lang.Byte $r4;
        java.lang.String $r5;

        r0 := @this: okio.RealBufferedSource;

        virtualinvoke r0.<okio.RealBufferedSource: void require(long)>(1L);

        i0 = 0;

     label1:
        $i1 = i0 + 1;

        $l2 = (long) $i1;

        $z0 = virtualinvoke r0.<okio.RealBufferedSource: boolean request(long)>($l2);

        if $z0 == 0 goto label5;

        $r1 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        $l2 = (long) i0;

        $b3 = virtualinvoke $r1.<okio.Buffer: byte getByte(long)>($l2);

        if $b3 < 48 goto label2;

        if $b3 <= 57 goto label4;

     label2:
        if i0 != 0 goto label3;

        if $b3 == 45 goto label4;

     label3:
        if i0 != 0 goto label5;

        $r2 = new java.lang.NumberFormatException;

        $r3 = newarray (java.lang.Object)[1];

        $r4 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b3);

        $r3[0] = $r4;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Expected leading [0-9] or \'-\' character but was %#x", $r3);

        specialinvoke $r2.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r5);

        throw $r2;

     label4:
        i0 = i0 + 1;

        goto label1;

     label5:
        $r1 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        $l2 = virtualinvoke $r1.<okio.Buffer: long readDecimalLong()>();

        return $l2;
    }
    public void readFully(okio.Buffer, long) throws java.io.IOException
    {
        okio.RealBufferedSource r0;
        okio.Buffer $r1, $r3;
        long $l0;
        java.io.EOFException r2;

        r0 := @this: okio.RealBufferedSource;

        $r1 := @parameter0: okio.Buffer;

        $l0 := @parameter1: long;

     label1:
        virtualinvoke r0.<okio.RealBufferedSource: void require(long)>($l0);

     label2:
        $r3 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        virtualinvoke $r3.<okio.Buffer: void readFully(okio.Buffer,long)>($r1, $l0);

        return;

     label3:
        r2 := @caughtexception;

        $r3 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        virtualinvoke $r1.<okio.Buffer: long writeAll(okio.Source)>($r3);

        throw r2;

        catch java.io.EOFException from label1 to label2 with label3;
    }
    public void readFully(byte[]) throws java.io.IOException
    {
        okio.RealBufferedSource r0;
        byte[] $r1;
        java.io.EOFException r2;
        int $i0, $i1;
        long $l2;
        okio.Buffer $r3, $r4;
        byte $b3;
        java.lang.AssertionError $r5;

        r0 := @this: okio.RealBufferedSource;

        $r1 := @parameter0: byte[];

        $i1 = lengthof $r1;

        $l2 = (long) $i1;

     label1:
        virtualinvoke r0.<okio.RealBufferedSource: void require(long)>($l2);

     label2:
        $r3 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        virtualinvoke $r3.<okio.Buffer: void readFully(byte[])>($r1);

        return;

     label3:
        r2 := @caughtexception;

        $i1 = 0;

     label4:
        $r3 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        $l2 = $r3.<okio.Buffer: long size>;

        $b3 = $l2 cmp 0L;

        if $b3 <= 0 goto label6;

        $r3 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        $r4 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        $l2 = $r4.<okio.Buffer: long size>;

        $i0 = (int) $l2;

        $i0 = virtualinvoke $r3.<okio.Buffer: int read(byte[],int,int)>($r1, $i1, $i0);

        if $i0 != -1 goto label5;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label5:
        $i1 = $i1 + $i0;

        goto label4;

     label6:
        throw r2;

        catch java.io.EOFException from label1 to label2 with label3;
    }
    public long readHexadecimalUnsignedLong() throws java.io.IOException
    {
        okio.RealBufferedSource r0;
        int i0, $i1;
        long $l2;
        boolean $z0;
        okio.Buffer $r1;
        byte $b3;
        java.lang.NumberFormatException $r2;
        java.lang.Object[] $r3;
        java.lang.Byte $r4;
        java.lang.String $r5;

        r0 := @this: okio.RealBufferedSource;

        virtualinvoke r0.<okio.RealBufferedSource: void require(long)>(1L);

        i0 = 0;

     label1:
        $i1 = i0 + 1;

        $l2 = (long) $i1;

        $z0 = virtualinvoke r0.<okio.RealBufferedSource: boolean request(long)>($l2);

        if $z0 == 0 goto label6;

        $r1 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        $l2 = (long) i0;

        $b3 = virtualinvoke $r1.<okio.Buffer: byte getByte(long)>($l2);

        if $b3 < 48 goto label2;

        if $b3 <= 57 goto label5;

     label2:
        if $b3 < 97 goto label3;

        if $b3 <= 102 goto label5;

     label3:
        if $b3 < 65 goto label4;

        if $b3 <= 70 goto label5;

     label4:
        if i0 != 0 goto label6;

        $r2 = new java.lang.NumberFormatException;

        $r3 = newarray (java.lang.Object)[1];

        $r4 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b3);

        $r3[0] = $r4;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Expected leading [0-9a-fA-F] character but was %#x", $r3);

        specialinvoke $r2.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r5);

        throw $r2;

     label5:
        i0 = i0 + 1;

        goto label1;

     label6:
        $r1 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        $l2 = virtualinvoke $r1.<okio.Buffer: long readHexadecimalUnsignedLong()>();

        return $l2;
    }
    public int readInt() throws java.io.IOException
    {
        okio.RealBufferedSource r0;
        int $i0;
        okio.Buffer $r1;

        r0 := @this: okio.RealBufferedSource;

        virtualinvoke r0.<okio.RealBufferedSource: void require(long)>(4L);

        $r1 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        $i0 = virtualinvoke $r1.<okio.Buffer: int readInt()>();

        return $i0;
    }
    public int readIntLe() throws java.io.IOException
    {
        okio.RealBufferedSource r0;
        int $i0;
        okio.Buffer $r1;

        r0 := @this: okio.RealBufferedSource;

        virtualinvoke r0.<okio.RealBufferedSource: void require(long)>(4L);

        $r1 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        $i0 = virtualinvoke $r1.<okio.Buffer: int readIntLe()>();

        return $i0;
    }
    public long readLong() throws java.io.IOException
    {
        okio.RealBufferedSource r0;
        long $l0;
        okio.Buffer $r1;

        r0 := @this: okio.RealBufferedSource;

        virtualinvoke r0.<okio.RealBufferedSource: void require(long)>(8L);

        $r1 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        $l0 = virtualinvoke $r1.<okio.Buffer: long readLong()>();

        return $l0;
    }
    public long readLongLe() throws java.io.IOException
    {
        okio.RealBufferedSource r0;
        long $l0;
        okio.Buffer $r1;

        r0 := @this: okio.RealBufferedSource;

        virtualinvoke r0.<okio.RealBufferedSource: void require(long)>(8L);

        $r1 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        $l0 = virtualinvoke $r1.<okio.Buffer: long readLongLe()>();

        return $l0;
    }
    public short readShort() throws java.io.IOException
    {
        okio.RealBufferedSource r0;
        short $s0;
        okio.Buffer $r1;

        r0 := @this: okio.RealBufferedSource;

        virtualinvoke r0.<okio.RealBufferedSource: void require(long)>(2L);

        $r1 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        $s0 = virtualinvoke $r1.<okio.Buffer: short readShort()>();

        return $s0;
    }
    public short readShortLe() throws java.io.IOException
    {
        okio.RealBufferedSource r0;
        short $s0;
        okio.Buffer $r1;

        r0 := @this: okio.RealBufferedSource;

        virtualinvoke r0.<okio.RealBufferedSource: void require(long)>(2L);

        $r1 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        $s0 = virtualinvoke $r1.<okio.Buffer: short readShortLe()>();

        return $s0;
    }
    public java.lang.String readString(long, java.nio.charset.Charset) throws java.io.IOException
    {
        okio.RealBufferedSource r0;
        long $l0;
        java.nio.charset.Charset $r1;
        java.lang.String $r2;
        java.lang.IllegalArgumentException $r3;
        okio.Buffer $r4;

        r0 := @this: okio.RealBufferedSource;

        $l0 := @parameter0: long;

        $r1 := @parameter1: java.nio.charset.Charset;

        virtualinvoke r0.<okio.RealBufferedSource: void require(long)>($l0);

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("charset == null");

        throw $r3;

     label1:
        $r4 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        $r2 = virtualinvoke $r4.<okio.Buffer: java.lang.String readString(long,java.nio.charset.Charset)>($l0, $r1);

        return $r2;
    }
    public java.lang.String readString(java.nio.charset.Charset) throws java.io.IOException
    {
        okio.RealBufferedSource r0;
        java.nio.charset.Charset $r1;
        java.lang.String $r2;
        java.lang.IllegalArgumentException $r3;
        okio.Buffer $r4;
        okio.Source $r5;

        r0 := @this: okio.RealBufferedSource;

        $r1 := @parameter0: java.nio.charset.Charset;

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("charset == null");

        throw $r3;

     label1:
        $r4 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        $r5 = r0.<okio.RealBufferedSource: okio.Source source>;

        virtualinvoke $r4.<okio.Buffer: long writeAll(okio.Source)>($r5);

        $r4 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        $r2 = virtualinvoke $r4.<okio.Buffer: java.lang.String readString(java.nio.charset.Charset)>($r1);

        return $r2;
    }
    public java.lang.String readUtf8() throws java.io.IOException
    {
        okio.RealBufferedSource r0;
        okio.Source $r1;
        java.lang.String $r2;
        okio.Buffer $r3;

        r0 := @this: okio.RealBufferedSource;

        $r3 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        $r1 = r0.<okio.RealBufferedSource: okio.Source source>;

        virtualinvoke $r3.<okio.Buffer: long writeAll(okio.Source)>($r1);

        $r3 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        $r2 = virtualinvoke $r3.<okio.Buffer: java.lang.String readUtf8()>();

        return $r2;
    }
    public java.lang.String readUtf8(long) throws java.io.IOException
    {
        okio.RealBufferedSource r0;
        long $l0;
        java.lang.String $r1;
        okio.Buffer $r2;

        r0 := @this: okio.RealBufferedSource;

        $l0 := @parameter0: long;

        virtualinvoke r0.<okio.RealBufferedSource: void require(long)>($l0);

        $r2 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        $r1 = virtualinvoke $r2.<okio.Buffer: java.lang.String readUtf8(long)>($l0);

        return $r1;
    }
    public int readUtf8CodePoint() throws java.io.IOException
    {
        okio.RealBufferedSource r0;
        okio.Buffer $r1;
        byte $b0;
        int $i1;

        r0 := @this: okio.RealBufferedSource;

        virtualinvoke r0.<okio.RealBufferedSource: void require(long)>(1L);

        $r1 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        $b0 = virtualinvoke $r1.<okio.Buffer: byte getByte(long)>(0L);

        $i1 = $b0 & 224;

        if $i1 != 192 goto label2;

        virtualinvoke r0.<okio.RealBufferedSource: void require(long)>(2L);

     label1:
        $r1 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        $i1 = virtualinvoke $r1.<okio.Buffer: int readUtf8CodePoint()>();

        return $i1;

     label2:
        $i1 = $b0 & 240;

        if $i1 != 224 goto label3;

        virtualinvoke r0.<okio.RealBufferedSource: void require(long)>(3L);

        goto label1;

     label3:
        $i1 = $b0 & 248;

        if $i1 != 240 goto label1;

        virtualinvoke r0.<okio.RealBufferedSource: void require(long)>(4L);

        goto label1;
    }
    public java.lang.String readUtf8Line() throws java.io.IOException
    {
        okio.RealBufferedSource r0;
        long $l0;
        byte $b1;
        okio.Buffer $r1;
        java.lang.String $r2;

        r0 := @this: okio.RealBufferedSource;

        $l0 = virtualinvoke r0.<okio.RealBufferedSource: long indexOf(byte)>(10);

        $b1 = $l0 cmp -1L;

        if $b1 != 0 goto label2;

        $r1 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        $l0 = $r1.<okio.Buffer: long size>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label1;

        $r1 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        $l0 = $r1.<okio.Buffer: long size>;

        $r2 = virtualinvoke r0.<okio.RealBufferedSource: java.lang.String readUtf8(long)>($l0);

        return $r2;

     label1:
        return null;

     label2:
        $r1 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        $r2 = virtualinvoke $r1.<okio.Buffer: java.lang.String readUtf8Line(long)>($l0);

        return $r2;
    }
    public java.lang.String readUtf8LineStrict() throws java.io.IOException
    {
        okio.RealBufferedSource r0;
        okio.Buffer r1, $r2, $r3;
        long $l0;
        byte $b1;
        java.io.EOFException $r4;
        java.lang.StringBuilder $r5;
        okio.ByteString $r6;
        java.lang.String $r7;

        r0 := @this: okio.RealBufferedSource;

        $l0 = virtualinvoke r0.<okio.RealBufferedSource: long indexOf(byte)>(10);

        $b1 = $l0 cmp -1L;

        if $b1 != 0 goto label1;

        r1 = new okio.Buffer;

        specialinvoke r1.<okio.Buffer: void <init>()>();

        $r2 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        $r3 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        $l0 = virtualinvoke $r3.<okio.Buffer: long size()>();

        $l0 = staticinvoke <java.lang.Math: long min(long,long)>(32L, $l0);

        virtualinvoke $r2.<okio.Buffer: okio.Buffer copyTo(okio.Buffer,long,long)>(r1, 0L, $l0);

        $r4 = new java.io.EOFException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\n not found: size=");

        $r2 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        $l0 = virtualinvoke $r2.<okio.Buffer: long size()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" content=");

        $r6 = virtualinvoke r1.<okio.Buffer: okio.ByteString readByteString()>();

        $r7 = virtualinvoke $r6.<okio.ByteString: java.lang.String hex()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\u2026");

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.io.EOFException: void <init>(java.lang.String)>($r7);

        throw $r4;

     label1:
        r1 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        $r7 = virtualinvoke r1.<okio.Buffer: java.lang.String readUtf8Line(long)>($l0);

        return $r7;
    }
    public boolean request(long) throws java.io.IOException
    {
        okio.RealBufferedSource r0;
        long $l0, $l2;
        byte $b1;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        boolean $z0;
        java.lang.IllegalStateException $r4;
        okio.Buffer $r5;
        okio.Source $r6;

        r0 := @this: okio.RealBufferedSource;

        $l0 := @parameter0: long;

        $b1 = $l0 cmp 0L;

        if $b1 >= 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("byteCount < 0: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label1:
        $z0 = r0.<okio.RealBufferedSource: boolean closed>;

        if $z0 == 0 goto label2;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("closed");

        throw $r4;

     label2:
        $r5 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        $l2 = $r5.<okio.Buffer: long size>;

        $b1 = $l2 cmp $l0;

        if $b1 >= 0 goto label3;

        $r6 = r0.<okio.RealBufferedSource: okio.Source source>;

        $r5 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        $l2 = interfaceinvoke $r6.<okio.Source: long read(okio.Buffer,long)>($r5, 8192L);

        $b1 = $l2 cmp -1L;

        if $b1 != 0 goto label2;

        return 0;

     label3:
        return 1;
    }
    public void require(long) throws java.io.IOException
    {
        okio.RealBufferedSource r0;
        long $l0;
        boolean $z0;
        java.io.EOFException $r1;

        r0 := @this: okio.RealBufferedSource;

        $l0 := @parameter0: long;

        $z0 = virtualinvoke r0.<okio.RealBufferedSource: boolean request(long)>($l0);

        if $z0 != 0 goto label1;

        $r1 = new java.io.EOFException;

        specialinvoke $r1.<java.io.EOFException: void <init>()>();

        throw $r1;

     label1:
        return;
    }
    public int select(okio.Options) throws java.io.IOException
    {
        okio.RealBufferedSource r0;
        okio.Options $r1;
        boolean $z0;
        java.lang.IllegalStateException $r2;
        okio.Buffer $r3;
        int $i0, $i1;
        okio.ByteString[] $r4;
        okio.ByteString $r5;
        long $l2, $l3;
        byte $b4;
        okio.Source $r6;

        r0 := @this: okio.RealBufferedSource;

        $r1 := @parameter0: okio.Options;

        $z0 = r0.<okio.RealBufferedSource: boolean closed>;

        if $z0 == 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("closed");

        throw $r2;

     label1:
        $r3 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        $i0 = virtualinvoke $r3.<okio.Buffer: int selectPrefix(okio.Options)>($r1);

        if $i0 != -1 goto label2;

        return -1;

     label2:
        $r4 = $r1.<okio.Options: okio.ByteString[] byteStrings>;

        $r5 = $r4[$i0];

        $i1 = virtualinvoke $r5.<okio.ByteString: int size()>();

        $l2 = (long) $i1;

        $r3 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        $l3 = $r3.<okio.Buffer: long size>;

        $b4 = $l2 cmp $l3;

        if $b4 > 0 goto label3;

        $r3 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        $l2 = (long) $i1;

        virtualinvoke $r3.<okio.Buffer: void skip(long)>($l2);

        return $i0;

     label3:
        $r6 = r0.<okio.RealBufferedSource: okio.Source source>;

        $r3 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        $l2 = interfaceinvoke $r6.<okio.Source: long read(okio.Buffer,long)>($r3, 8192L);

        $b4 = $l2 cmp -1L;

        if $b4 != 0 goto label1;

        return -1;
    }
    public void skip(long) throws java.io.IOException
    {
        okio.RealBufferedSource r0;
        long $l0, $l1;
        boolean $z0;
        java.lang.IllegalStateException $r1;
        okio.Buffer $r2;
        byte $b2;
        okio.Source $r3;
        java.io.EOFException $r4;

        r0 := @this: okio.RealBufferedSource;

        $l0 := @parameter0: long;

        $z0 = r0.<okio.RealBufferedSource: boolean closed>;

        if $z0 == 0 goto label2;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("closed");

        throw $r1;

     label1:
        $r2 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        $l1 = virtualinvoke $r2.<okio.Buffer: long size()>();

        $l1 = staticinvoke <java.lang.Math: long min(long,long)>($l0, $l1);

        $r2 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        virtualinvoke $r2.<okio.Buffer: void skip(long)>($l1);

        $l0 = $l0 - $l1;

     label2:
        $b2 = $l0 cmp 0L;

        if $b2 <= 0 goto label3;

        $r2 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        $l1 = $r2.<okio.Buffer: long size>;

        $b2 = $l1 cmp 0L;

        if $b2 != 0 goto label1;

        $r3 = r0.<okio.RealBufferedSource: okio.Source source>;

        $r2 = r0.<okio.RealBufferedSource: okio.Buffer buffer>;

        $l1 = interfaceinvoke $r3.<okio.Source: long read(okio.Buffer,long)>($r2, 8192L);

        $b2 = $l1 cmp -1L;

        if $b2 != 0 goto label1;

        $r4 = new java.io.EOFException;

        specialinvoke $r4.<java.io.EOFException: void <init>()>();

        throw $r4;

     label3:
        return;
    }
    public okio.Timeout timeout()
    {
        okio.RealBufferedSource r0;
        okio.Timeout $r1;
        okio.Source $r2;

        r0 := @this: okio.RealBufferedSource;

        $r2 = r0.<okio.RealBufferedSource: okio.Source source>;

        $r1 = interfaceinvoke $r2.<okio.Source: okio.Timeout timeout()>();

        return $r1;
    }
    public java.lang.String toString()
    {
        okio.RealBufferedSource r0;
        java.lang.StringBuilder $r1;
        okio.Source $r2;
        java.lang.String $r3;

        r0 := @this: okio.RealBufferedSource;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("buffer(");

        $r2 = r0.<okio.RealBufferedSource: okio.Source source>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }
