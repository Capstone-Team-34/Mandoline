io.fabric.sdk.android.services.concurrency.internal.ExponentialBackoff extends java.lang.Object implements io.fabric.sdk.android.services.concurrency.internal.Backoff
private static final int DEFAULT_POWER
private final long baseTimeMillis
private final int power
    public void <init>(long)
    {
        io.fabric.sdk.android.services.concurrency.internal.ExponentialBackoff r0;
        long $l0;

        r0 := @this: io.fabric.sdk.android.services.concurrency.internal.ExponentialBackoff;

        $l0 := @parameter0: long;

        specialinvoke r0.<io.fabric.sdk.android.services.concurrency.internal.ExponentialBackoff: void <init>(long,int)>($l0, 2);

        return;
    }
    public void <init>(long, int)
    {
        io.fabric.sdk.android.services.concurrency.internal.ExponentialBackoff r0;
        long $l0;
        int $i1;

        r0 := @this: io.fabric.sdk.android.services.concurrency.internal.ExponentialBackoff;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<io.fabric.sdk.android.services.concurrency.internal.ExponentialBackoff: long baseTimeMillis> = $l0;

        r0.<io.fabric.sdk.android.services.concurrency.internal.ExponentialBackoff: int power> = $i1;

        return;
    }
    public long getDelayMillis(int)
    {
        io.fabric.sdk.android.services.concurrency.internal.ExponentialBackoff r0;
        int $i0, $i2;
        double $d0, $d1, $d2;
        long $l1;

        r0 := @this: io.fabric.sdk.android.services.concurrency.internal.ExponentialBackoff;

        $i0 := @parameter0: int;

        $l1 = r0.<io.fabric.sdk.android.services.concurrency.internal.ExponentialBackoff: long baseTimeMillis>;

        $d1 = (double) $l1;

        $i2 = r0.<io.fabric.sdk.android.services.concurrency.internal.ExponentialBackoff: int power>;

        $d2 = (double) $i2;

        $d0 = (double) $i0;

        $d0 = staticinvoke <java.lang.Math: double pow(double,double)>($d2, $d0);

        $d1 = $d1 * $d0;

        $l1 = (long) $d1;

        return $l1;
    }
