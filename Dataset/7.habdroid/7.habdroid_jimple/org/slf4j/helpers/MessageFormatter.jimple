org.slf4j.helpers.MessageFormatter extends java.lang.Object
static final char DELIM_START
static final char DELIM_STOP
static final java.lang.String DELIM_STR
private static final char ESCAPE_CHAR
    public void <init>()
    {
        org.slf4j.helpers.MessageFormatter r0;

        r0 := @this: org.slf4j.helpers.MessageFormatter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static final org.slf4j.helpers.FormattingTuple arrayFormat(java.lang.String, java.lang.Object[])
    {
        java.lang.String $r0;
        java.lang.Object[] $r1, r3;
        java.lang.Throwable $r2;
        org.slf4j.helpers.FormattingTuple $r4;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object[];

        $r2 = staticinvoke <org.slf4j.helpers.MessageFormatter: java.lang.Throwable getThrowableCandidate(java.lang.Object[])>($r1);

        r3 = $r1;

        if $r2 == null goto label1;

        r3 = staticinvoke <org.slf4j.helpers.MessageFormatter: java.lang.Object[] trimmedCopy(java.lang.Object[])>($r1);

     label1:
        $r4 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[],java.lang.Throwable)>($r0, r3, $r2);

        return $r4;
    }
    public static final org.slf4j.helpers.FormattingTuple arrayFormat(java.lang.String, java.lang.Object[], java.lang.Throwable)
    {
        java.lang.String $r0;
        java.lang.Object[] $r1;
        java.lang.Throwable $r2;
        java.lang.StringBuilder r3;
        org.slf4j.helpers.FormattingTuple $r4;
        int i0, $i1, $i2, $i3;
        boolean $z0;
        java.lang.Object $r5;
        java.util.HashMap $r6;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object[];

        $r2 := @parameter2: java.lang.Throwable;

        if $r0 != null goto label1;

        $r4 = new org.slf4j.helpers.FormattingTuple;

        specialinvoke $r4.<org.slf4j.helpers.FormattingTuple: void <init>(java.lang.String,java.lang.Object[],java.lang.Throwable)>(null, $r1, $r2);

        return $r4;

     label1:
        if $r1 != null goto label2;

        $r4 = new org.slf4j.helpers.FormattingTuple;

        specialinvoke $r4.<org.slf4j.helpers.FormattingTuple: void <init>(java.lang.String)>($r0);

        return $r4;

     label2:
        i0 = 0;

        r3 = new java.lang.StringBuilder;

        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        $i1 = $i1 + 50;

        specialinvoke r3.<java.lang.StringBuilder: void <init>(int)>($i1);

        $i1 = 0;

     label3:
        $i2 = lengthof $r1;

        if $i1 >= $i2 goto label9;

        $i2 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String,int)>("{}", i0);

        if $i2 != -1 goto label5;

        if i0 != 0 goto label4;

        $r4 = new org.slf4j.helpers.FormattingTuple;

        specialinvoke $r4.<org.slf4j.helpers.FormattingTuple: void <init>(java.lang.String,java.lang.Object[],java.lang.Throwable)>($r0, $r1, $r2);

        return $r4;

     label4:
        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>($r0, i0, $i1);

        $r4 = new org.slf4j.helpers.FormattingTuple;

        $r0 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<org.slf4j.helpers.FormattingTuple: void <init>(java.lang.String,java.lang.Object[],java.lang.Throwable)>($r0, $r1, $r2);

        return $r4;

     label5:
        $z0 = staticinvoke <org.slf4j.helpers.MessageFormatter: boolean isEscapedDelimeter(java.lang.String,int)>($r0, $i2);

        if $z0 == 0 goto label8;

        $z0 = staticinvoke <org.slf4j.helpers.MessageFormatter: boolean isDoubleEscaped(java.lang.String,int)>($r0, $i2);

        if $z0 != 0 goto label7;

        $i1 = $i1 + -1;

        $i3 = $i2 + -1;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>($r0, i0, $i3);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(123);

        i0 = $i2 + 1;

     label6:
        $i1 = $i1 + 1;

        goto label3;

     label7:
        $i3 = $i2 + -1;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>($r0, i0, $i3);

        $r5 = $r1[$i1];

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        staticinvoke <org.slf4j.helpers.MessageFormatter: void deeplyAppendParameter(java.lang.StringBuilder,java.lang.Object,java.util.Map)>(r3, $r5, $r6);

        i0 = $i2 + 2;

        goto label6;

     label8:
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>($r0, i0, $i2);

        $r5 = $r1[$i1];

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        staticinvoke <org.slf4j.helpers.MessageFormatter: void deeplyAppendParameter(java.lang.StringBuilder,java.lang.Object,java.util.Map)>(r3, $r5, $r6);

        i0 = $i2 + 2;

        goto label6;

     label9:
        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>($r0, i0, $i1);

        $r4 = new org.slf4j.helpers.FormattingTuple;

        $r0 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<org.slf4j.helpers.FormattingTuple: void <init>(java.lang.String,java.lang.Object[],java.lang.Throwable)>($r0, $r1, $r2);

        return $r4;
    }
    private static void booleanArrayAppend(java.lang.StringBuilder, boolean[])
    {
        java.lang.StringBuilder $r0;
        boolean[] $r1;
        int i0, i1, $i2;
        boolean $z0;

        $r0 := @parameter0: java.lang.StringBuilder;

        $r1 := @parameter1: boolean[];

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        i0 = lengthof $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $z0 = $r1[i1];

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $i2 = i0 + -1;

        if i1 == $i2 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        return;
    }
    private static void byteArrayAppend(java.lang.StringBuilder, byte[])
    {
        java.lang.StringBuilder $r0;
        byte[] $r1;
        int i0, i1, $i3;
        byte $b2;

        $r0 := @parameter0: java.lang.StringBuilder;

        $r1 := @parameter1: byte[];

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        i0 = lengthof $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $b2 = $r1[i1];

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($b2);

        $i3 = i0 + -1;

        if i1 == $i3 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        return;
    }
    private static void charArrayAppend(java.lang.StringBuilder, char[])
    {
        java.lang.StringBuilder $r0;
        char[] $r1;
        int i0, i1, $i3;
        char $c2;

        $r0 := @parameter0: java.lang.StringBuilder;

        $r1 := @parameter1: char[];

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        i0 = lengthof $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $c2 = $r1[i1];

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        $i3 = i0 + -1;

        if i1 == $i3 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        return;
    }
    private static void deeplyAppendParameter(java.lang.StringBuilder, java.lang.Object, java.util.Map)
    {
        java.lang.StringBuilder $r0;
        java.util.Map r1;
        java.lang.Object r2;
        java.lang.Class $r3;
        boolean $z0;
        boolean[] r4;
        byte[] r5;
        char[] r6;
        short[] r7;
        int[] r8;
        long[] r9;
        float[] r10;
        double[] r11;
        java.lang.Object[] r12;

        $r0 := @parameter0: java.lang.StringBuilder;

        r2 := @parameter1: java.lang.Object;

        r1 := @parameter2: java.util.Map;

        if r2 != null goto label01;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("null");

        return;

     label01:
        $r3 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r3.<java.lang.Class: boolean isArray()>();

        if $z0 != 0 goto label02;

        staticinvoke <org.slf4j.helpers.MessageFormatter: void safeObjectAppend(java.lang.StringBuilder,java.lang.Object)>($r0, r2);

        return;

     label02:
        $z0 = r2 instanceof boolean[];

        if $z0 == 0 goto label03;

        r4 = (boolean[]) r2;

        staticinvoke <org.slf4j.helpers.MessageFormatter: void booleanArrayAppend(java.lang.StringBuilder,boolean[])>($r0, r4);

        return;

     label03:
        $z0 = r2 instanceof byte[];

        if $z0 == 0 goto label04;

        r5 = (byte[]) r2;

        staticinvoke <org.slf4j.helpers.MessageFormatter: void byteArrayAppend(java.lang.StringBuilder,byte[])>($r0, r5);

        return;

     label04:
        $z0 = r2 instanceof char[];

        if $z0 == 0 goto label05;

        r6 = (char[]) r2;

        staticinvoke <org.slf4j.helpers.MessageFormatter: void charArrayAppend(java.lang.StringBuilder,char[])>($r0, r6);

        return;

     label05:
        $z0 = r2 instanceof short[];

        if $z0 == 0 goto label06;

        r7 = (short[]) r2;

        staticinvoke <org.slf4j.helpers.MessageFormatter: void shortArrayAppend(java.lang.StringBuilder,short[])>($r0, r7);

        return;

     label06:
        $z0 = r2 instanceof int[];

        if $z0 == 0 goto label07;

        r8 = (int[]) r2;

        staticinvoke <org.slf4j.helpers.MessageFormatter: void intArrayAppend(java.lang.StringBuilder,int[])>($r0, r8);

        return;

     label07:
        $z0 = r2 instanceof long[];

        if $z0 == 0 goto label08;

        r9 = (long[]) r2;

        staticinvoke <org.slf4j.helpers.MessageFormatter: void longArrayAppend(java.lang.StringBuilder,long[])>($r0, r9);

        return;

     label08:
        $z0 = r2 instanceof float[];

        if $z0 == 0 goto label09;

        r10 = (float[]) r2;

        staticinvoke <org.slf4j.helpers.MessageFormatter: void floatArrayAppend(java.lang.StringBuilder,float[])>($r0, r10);

        return;

     label09:
        $z0 = r2 instanceof double[];

        if $z0 == 0 goto label10;

        r11 = (double[]) r2;

        staticinvoke <org.slf4j.helpers.MessageFormatter: void doubleArrayAppend(java.lang.StringBuilder,double[])>($r0, r11);

        return;

     label10:
        r12 = (java.lang.Object[]) r2;

        staticinvoke <org.slf4j.helpers.MessageFormatter: void objectArrayAppend(java.lang.StringBuilder,java.lang.Object[],java.util.Map)>($r0, r12, r1);

        return;
    }
    private static void doubleArrayAppend(java.lang.StringBuilder, double[])
    {
        java.lang.StringBuilder $r0;
        double[] $r1;
        int i0, i1, $i2;
        double $d0;

        $r0 := @parameter0: java.lang.StringBuilder;

        $r1 := @parameter1: double[];

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        i0 = lengthof $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $d0 = $r1[i1];

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $i2 = i0 + -1;

        if i1 == $i2 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        return;
    }
    private static void floatArrayAppend(java.lang.StringBuilder, float[])
    {
        java.lang.StringBuilder $r0;
        float[] $r1;
        int i0, i1, $i2;
        float $f0;

        $r0 := @parameter0: java.lang.StringBuilder;

        $r1 := @parameter1: float[];

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        i0 = lengthof $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $f0 = $r1[i1];

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        $i2 = i0 + -1;

        if i1 == $i2 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        return;
    }
    public static final org.slf4j.helpers.FormattingTuple format(java.lang.String, java.lang.Object)
    {
        java.lang.String $r0;
        java.lang.Object $r1;
        org.slf4j.helpers.FormattingTuple $r2;
        java.lang.Object[] $r3;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = $r1;

        $r2 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>($r0, $r3);

        return $r2;
    }
    public static final org.slf4j.helpers.FormattingTuple format(java.lang.String, java.lang.Object, java.lang.Object)
    {
        java.lang.String $r0;
        java.lang.Object $r1, $r2;
        org.slf4j.helpers.FormattingTuple $r3;
        java.lang.Object[] $r4;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.lang.Object;

        $r4 = newarray (java.lang.Object)[2];

        $r4[0] = $r1;

        $r4[1] = $r2;

        $r3 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>($r0, $r4);

        return $r3;
    }
    static final java.lang.Throwable getThrowableCandidate(java.lang.Object[])
    {
        java.lang.Object[] $r0;
        int $i0;
        java.lang.Object r1;
        boolean $z0;
        java.lang.Throwable r2;

        $r0 := @parameter0: java.lang.Object[];

        if $r0 == null goto label1;

        $i0 = lengthof $r0;

        if $i0 != 0 goto label2;

     label1:
        return null;

     label2:
        $i0 = lengthof $r0;

        $i0 = $i0 + -1;

        r1 = $r0[$i0];

        $z0 = r1 instanceof java.lang.Throwable;

        if $z0 == 0 goto label3;

        r2 = (java.lang.Throwable) r1;

        return r2;

     label3:
        return null;
    }
    private static void intArrayAppend(java.lang.StringBuilder, int[])
    {
        java.lang.StringBuilder $r0;
        int[] $r1;
        int i0, i1, $i2;

        $r0 := @parameter0: java.lang.StringBuilder;

        $r1 := @parameter1: int[];

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        i0 = lengthof $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $i2 = $r1[i1];

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $i2 = i0 + -1;

        if i1 == $i2 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        return;
    }
    static final boolean isDoubleEscaped(java.lang.String, int)
    {
        java.lang.String $r0;
        int $i0;
        char $c1;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        if $i0 < 2 goto label1;

        $i0 = $i0 + -2;

        $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i0);

        if $c1 != 92 goto label1;

        return 1;

     label1:
        return 0;
    }
    static final boolean isEscapedDelimeter(java.lang.String, int)
    {
        java.lang.String $r0;
        int $i0;
        char $c1;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        if $i0 != 0 goto label1;

        return 0;

     label1:
        $i0 = $i0 + -1;

        $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i0);

        if $c1 != 92 goto label2;

        return 1;

     label2:
        return 0;
    }
    private static void longArrayAppend(java.lang.StringBuilder, long[])
    {
        java.lang.StringBuilder $r0;
        long[] $r1;
        int i0, i1, $i3;
        long $l2;

        $r0 := @parameter0: java.lang.StringBuilder;

        $r1 := @parameter1: long[];

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        i0 = lengthof $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $l2 = $r1[i1];

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2);

        $i3 = i0 + -1;

        if i1 == $i3 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        return;
    }
    private static void objectArrayAppend(java.lang.StringBuilder, java.lang.Object[], java.util.Map)
    {
        java.lang.StringBuilder $r0;
        java.lang.Object[] $r1;
        java.util.Map r2;
        int i0, i1, $i2;
        boolean $z0;
        java.lang.Object $r3;

        $r0 := @parameter0: java.lang.StringBuilder;

        $r1 := @parameter1: java.lang.Object[];

        r2 := @parameter2: java.util.Map;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        $z0 = interfaceinvoke r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        if $z0 != 0 goto label5;

        interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, null);

        i0 = lengthof $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r3 = $r1[i1];

        staticinvoke <org.slf4j.helpers.MessageFormatter: void deeplyAppendParameter(java.lang.StringBuilder,java.lang.Object,java.util.Map)>($r0, $r3, r2);

        $i2 = i0 + -1;

        if i1 == $i2 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        interfaceinvoke r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r1);

     label4:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        return;

     label5:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("...");

        goto label4;
    }
    private static void safeObjectAppend(java.lang.StringBuilder, java.lang.Object)
    {
        java.lang.StringBuilder $r0, $r4;
        java.lang.Object $r1;
        java.lang.Throwable r2;
        java.lang.String $r3;
        java.lang.Class $r5;

        $r0 := @parameter0: java.lang.StringBuilder;

        $r1 := @parameter1: java.lang.Object;

     label1:
        $r3 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

     label2:
        return;

     label3:
        r2 := @caughtexception;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SLF4J: Failed toString() invocation on an object of type [");

        $r5 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r3 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.slf4j.helpers.Util: void report(java.lang.String,java.lang.Throwable)>($r3, r2);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[FAILED toString()]");

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    private static void shortArrayAppend(java.lang.StringBuilder, short[])
    {
        java.lang.StringBuilder $r0;
        short[] $r1;
        int i0, i1, $i3;
        short $s2;

        $r0 := @parameter0: java.lang.StringBuilder;

        $r1 := @parameter1: short[];

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        i0 = lengthof $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $s2 = $r1[i1];

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($s2);

        $i3 = i0 + -1;

        if i1 == $i3 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        return;
    }
    private static java.lang.Object[] trimmedCopy(java.lang.Object[])
    {
        java.lang.Object[] $r0, r1;
        int i0;
        java.lang.IllegalStateException $r2;

        $r0 := @parameter0: java.lang.Object[];

        if $r0 == null goto label1;

        i0 = lengthof $r0;

        if i0 != 0 goto label2;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("non-sensical empty or null argument array");

        throw $r2;

     label2:
        i0 = lengthof $r0;

        i0 = i0 + -1;

        r1 = newarray (java.lang.Object)[i0];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, r1, 0, i0);

        return r1;
    }
