org.slf4j.helpers.SubstituteLoggerFactory extends java.lang.Object implements org.slf4j.ILoggerFactory
final java.util.List eventList
final java.util.concurrent.ConcurrentMap loggers
    public void <init>()
    {
        org.slf4j.helpers.SubstituteLoggerFactory r0;
        java.util.List $r1;
        java.util.concurrent.ConcurrentHashMap $r2;
        java.util.ArrayList $r3;

        r0 := @this: org.slf4j.helpers.SubstituteLoggerFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r2.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.slf4j.helpers.SubstituteLoggerFactory: java.util.concurrent.ConcurrentMap loggers> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r1 = staticinvoke <java.util.Collections: java.util.List synchronizedList(java.util.List)>($r3);

        r0.<org.slf4j.helpers.SubstituteLoggerFactory: java.util.List eventList> = $r1;

        return;
    }
    public void clear()
    {
        org.slf4j.helpers.SubstituteLoggerFactory r0;
        java.util.concurrent.ConcurrentMap $r1;
        java.util.List $r2;

        r0 := @this: org.slf4j.helpers.SubstituteLoggerFactory;

        $r1 = r0.<org.slf4j.helpers.SubstituteLoggerFactory: java.util.concurrent.ConcurrentMap loggers>;

        interfaceinvoke $r1.<java.util.concurrent.ConcurrentMap: void clear()>();

        $r2 = r0.<org.slf4j.helpers.SubstituteLoggerFactory: java.util.List eventList>;

        interfaceinvoke $r2.<java.util.List: void clear()>();

        return;
    }
    public java.util.List getEventList()
    {
        org.slf4j.helpers.SubstituteLoggerFactory r0;
        java.util.List r1;

        r0 := @this: org.slf4j.helpers.SubstituteLoggerFactory;

        r1 = r0.<org.slf4j.helpers.SubstituteLoggerFactory: java.util.List eventList>;

        return r1;
    }
    public org.slf4j.Logger getLogger(java.lang.String)
    {
        org.slf4j.helpers.SubstituteLoggerFactory r0;
        java.lang.String $r1;
        java.util.concurrent.ConcurrentMap $r2;
        java.lang.Object $r3;
        org.slf4j.helpers.SubstituteLogger r4, r6;
        java.util.List $r5;

        r0 := @this: org.slf4j.helpers.SubstituteLoggerFactory;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.slf4j.helpers.SubstituteLoggerFactory: java.util.concurrent.ConcurrentMap loggers>;

        $r3 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>($r1);

        r4 = (org.slf4j.helpers.SubstituteLogger) $r3;

        if r4 != null goto label1;

        r4 = new org.slf4j.helpers.SubstituteLogger;

        $r5 = r0.<org.slf4j.helpers.SubstituteLoggerFactory: java.util.List eventList>;

        specialinvoke r4.<org.slf4j.helpers.SubstituteLogger: void <init>(java.lang.String,java.util.List)>($r1, $r5);

        $r2 = r0.<org.slf4j.helpers.SubstituteLoggerFactory: java.util.concurrent.ConcurrentMap loggers>;

        $r3 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>($r1, r4);

        r6 = (org.slf4j.helpers.SubstituteLogger) $r3;

        if r6 == null goto label1;

        return r6;

     label1:
        return r4;
    }
    public java.util.List getLoggerNames()
    {
        org.slf4j.helpers.SubstituteLoggerFactory r0;
        java.util.ArrayList $r1;
        java.util.Set $r2;
        java.util.concurrent.ConcurrentMap $r3;

        r0 := @this: org.slf4j.helpers.SubstituteLoggerFactory;

        $r1 = new java.util.ArrayList;

        $r3 = r0.<org.slf4j.helpers.SubstituteLoggerFactory: java.util.concurrent.ConcurrentMap loggers>;

        $r2 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: java.util.Set keySet()>();

        specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        return $r1;
    }
    public java.util.List getLoggers()
    {
        org.slf4j.helpers.SubstituteLoggerFactory r0;
        java.util.ArrayList $r1;
        java.util.Collection $r2;
        java.util.concurrent.ConcurrentMap $r3;

        r0 := @this: org.slf4j.helpers.SubstituteLoggerFactory;

        $r1 = new java.util.ArrayList;

        $r3 = r0.<org.slf4j.helpers.SubstituteLoggerFactory: java.util.concurrent.ConcurrentMap loggers>;

        $r2 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: java.util.Collection values()>();

        specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        return $r1;
    }
