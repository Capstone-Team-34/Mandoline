org.slf4j.helpers.BasicMarkerFactory extends java.lang.Object implements org.slf4j.IMarkerFactory
private final java.util.concurrent.ConcurrentMap markerMap
    public void <init>()
    {
        org.slf4j.helpers.BasicMarkerFactory r0;
        java.util.concurrent.ConcurrentHashMap $r1;

        r0 := @this: org.slf4j.helpers.BasicMarkerFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.slf4j.helpers.BasicMarkerFactory: java.util.concurrent.ConcurrentMap markerMap> = $r1;

        return;
    }
    public boolean detachMarker(java.lang.String)
    {
        org.slf4j.helpers.BasicMarkerFactory r0;
        java.lang.String $r1;
        java.lang.Object $r2;
        java.util.concurrent.ConcurrentMap $r3;

        r0 := @this: org.slf4j.helpers.BasicMarkerFactory;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r3 = r0.<org.slf4j.helpers.BasicMarkerFactory: java.util.concurrent.ConcurrentMap markerMap>;

        $r2 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: java.lang.Object remove(java.lang.Object)>($r1);

        if $r2 == null goto label2;

        return 1;

     label2:
        return 0;
    }
    public boolean exists(java.lang.String)
    {
        org.slf4j.helpers.BasicMarkerFactory r0;
        java.lang.String $r1;
        boolean $z0;
        java.util.concurrent.ConcurrentMap $r2;

        r0 := @this: org.slf4j.helpers.BasicMarkerFactory;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r2 = r0.<org.slf4j.helpers.BasicMarkerFactory: java.util.concurrent.ConcurrentMap markerMap>;

        $z0 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: boolean containsKey(java.lang.Object)>($r1);

        return $z0;
    }
    public org.slf4j.Marker getDetachedMarker(java.lang.String)
    {
        org.slf4j.helpers.BasicMarkerFactory r0;
        java.lang.String $r1;
        org.slf4j.helpers.BasicMarker $r2;

        r0 := @this: org.slf4j.helpers.BasicMarkerFactory;

        $r1 := @parameter0: java.lang.String;

        $r2 = new org.slf4j.helpers.BasicMarker;

        specialinvoke $r2.<org.slf4j.helpers.BasicMarker: void <init>(java.lang.String)>($r1);

        return $r2;
    }
    public org.slf4j.Marker getMarker(java.lang.String)
    {
        org.slf4j.helpers.BasicMarkerFactory r0;
        java.lang.String $r1;
        java.lang.IllegalArgumentException $r2;
        java.util.concurrent.ConcurrentMap $r3;
        java.lang.Object $r4;
        org.slf4j.Marker r5;
        org.slf4j.helpers.BasicMarker r6;

        r0 := @this: org.slf4j.helpers.BasicMarkerFactory;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Marker name cannot be null");

        throw $r2;

     label1:
        $r3 = r0.<org.slf4j.helpers.BasicMarkerFactory: java.util.concurrent.ConcurrentMap markerMap>;

        $r4 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>($r1);

        r5 = (org.slf4j.Marker) $r4;

        if r5 != null goto label2;

        r6 = new org.slf4j.helpers.BasicMarker;

        specialinvoke r6.<org.slf4j.helpers.BasicMarker: void <init>(java.lang.String)>($r1);

        $r3 = r0.<org.slf4j.helpers.BasicMarkerFactory: java.util.concurrent.ConcurrentMap markerMap>;

        $r4 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>($r1, r6);

        r5 = (org.slf4j.Marker) $r4;

        if r5 == null goto label3;

     label2:
        return r5;

     label3:
        return r6;
    }
