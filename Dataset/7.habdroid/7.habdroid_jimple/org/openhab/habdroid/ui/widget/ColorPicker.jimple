org.openhab.habdroid.ui.widget.ColorPicker extends android.view.View
private static final int[] COLORS
private static final java.lang.String STATE_ANGLE
private static final java.lang.String STATE_PARENT
private static final java.lang.String TAG
int[] BCOLORS
private float mAngle
private float mBrightness
private int mBrightnessColor
private android.graphics.Paint mBrightnessPointerBorderPaint
private android.graphics.Paint mBrightnessPointerColor
private android.graphics.Paint mBrightnessPointerHaloPaint
private float mBrightnessSliderEndY
private android.graphics.Paint mBrightnessSliderPaint
private float mBrightnessSliderStartY
private float mBrightnessSliderX
private float mBrightnessY
private int mColor
private android.graphics.Paint mColorWheelPaint
private float mColorWheelRadius
private android.graphics.RectF mColorWheelRectangle
private int mColorWheelStrokeWidth
private float[] mHSVColor
private org.openhab.habdroid.ui.widget.OnColorChangedListener mListener
private android.graphics.Paint mPointerColor
private android.graphics.Paint mPointerHaloPaint
private int mPointerRadius
private float mSaturation
private int mSaturationColor
private android.graphics.Paint mSaturationPointerColor
private android.graphics.Paint mSaturationPointerHaloPaint
private float mSaturationSliderEndY
private android.graphics.Paint mSaturationSliderPaint
private float mSaturationSliderStartY
private float mSaturationSliderX
private float mSaturationY
private float mTranslationOffset
private boolean mUserIsMovingBrightnessPointer
private boolean mUserIsMovingPointer
private boolean mUserIsMovingSaturationPointer
    static void <clinit>()
    {
        java.lang.String $r0;
        java.lang.Class $r1;
        int[] $r2;

        $r1 = class "Lorg/openhab/habdroid/ui/widget/ColorPicker;";

        $r0 = virtualinvoke $r1.<java.lang.Class: java.lang.String getSimpleName()>();

        <org.openhab.habdroid.ui.widget.ColorPicker: java.lang.String TAG> = $r0;

        $r2 = newarray (int)[7];

        $r2[0] = -65536;

        $r2[1] = -65281;

        $r2[2] = -16776961;

        $r2[3] = -16711681;

        $r2[4] = -16711936;

        $r2[5] = -256;

        $r2[6] = -65536;

        <org.openhab.habdroid.ui.widget.ColorPicker: int[] COLORS> = $r2;

        return;
    }
    public void <init>(android.content.Context)
    {
        org.openhab.habdroid.ui.widget.ColorPicker r0;
        android.content.Context $r1;
        int[] $r2;
        android.graphics.RectF $r3;
        float[] $r4;

        r0 := @this: org.openhab.habdroid.ui.widget.ColorPicker;

        $r1 := @parameter0: android.content.Context;

        specialinvoke r0.<android.view.View: void <init>(android.content.Context)>($r1);

        $r2 = newarray (int)[3];

        $r2[0] = 0;

        $r2[1] = 0;

        $r2[2] = 0;

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: int[] BCOLORS> = $r2;

        $r3 = new android.graphics.RectF;

        specialinvoke $r3.<android.graphics.RectF: void <init>()>();

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: android.graphics.RectF mColorWheelRectangle> = $r3;

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: boolean mUserIsMovingPointer> = 0;

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: boolean mUserIsMovingBrightnessPointer> = 0;

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: boolean mUserIsMovingSaturationPointer> = 0;

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mBrightness> = 1.0F;

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mSaturation> = 1.0F;

        $r4 = newarray (float)[3];

        $r4[0] = 0.0F;

        $r4[1] = 0.0F;

        $r4[2] = 0.0F;

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: float[] mHSVColor> = $r4;

        specialinvoke r0.<org.openhab.habdroid.ui.widget.ColorPicker: void init(android.util.AttributeSet,int)>(null, 0);

        return;
    }
    public void <init>(android.content.Context, android.util.AttributeSet)
    {
        org.openhab.habdroid.ui.widget.ColorPicker r0;
        android.content.Context $r1;
        android.util.AttributeSet $r2;
        int[] $r3;
        android.graphics.RectF $r4;
        float[] $r5;

        r0 := @this: org.openhab.habdroid.ui.widget.ColorPicker;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: android.util.AttributeSet;

        specialinvoke r0.<android.view.View: void <init>(android.content.Context,android.util.AttributeSet)>($r1, $r2);

        $r3 = newarray (int)[3];

        $r3[0] = 0;

        $r3[1] = 0;

        $r3[2] = 0;

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: int[] BCOLORS> = $r3;

        $r4 = new android.graphics.RectF;

        specialinvoke $r4.<android.graphics.RectF: void <init>()>();

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: android.graphics.RectF mColorWheelRectangle> = $r4;

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: boolean mUserIsMovingPointer> = 0;

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: boolean mUserIsMovingBrightnessPointer> = 0;

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: boolean mUserIsMovingSaturationPointer> = 0;

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mBrightness> = 1.0F;

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mSaturation> = 1.0F;

        $r5 = newarray (float)[3];

        $r5[0] = 0.0F;

        $r5[1] = 0.0F;

        $r5[2] = 0.0F;

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: float[] mHSVColor> = $r5;

        specialinvoke r0.<org.openhab.habdroid.ui.widget.ColorPicker: void init(android.util.AttributeSet,int)>($r2, 0);

        return;
    }
    public void <init>(android.content.Context, android.util.AttributeSet, int)
    {
        org.openhab.habdroid.ui.widget.ColorPicker r0;
        android.content.Context $r1;
        android.util.AttributeSet $r2;
        int $i0;
        int[] $r3;
        android.graphics.RectF $r4;
        float[] $r5;

        r0 := @this: org.openhab.habdroid.ui.widget.ColorPicker;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: android.util.AttributeSet;

        $i0 := @parameter2: int;

        specialinvoke r0.<android.view.View: void <init>(android.content.Context,android.util.AttributeSet,int)>($r1, $r2, $i0);

        $r3 = newarray (int)[3];

        $r3[0] = 0;

        $r3[1] = 0;

        $r3[2] = 0;

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: int[] BCOLORS> = $r3;

        $r4 = new android.graphics.RectF;

        specialinvoke $r4.<android.graphics.RectF: void <init>()>();

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: android.graphics.RectF mColorWheelRectangle> = $r4;

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: boolean mUserIsMovingPointer> = 0;

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: boolean mUserIsMovingBrightnessPointer> = 0;

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: boolean mUserIsMovingSaturationPointer> = 0;

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mBrightness> = 1.0F;

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mSaturation> = 1.0F;

        $r5 = newarray (float)[3];

        $r5[0] = 0.0F;

        $r5[1] = 0.0F;

        $r5[2] = 0.0F;

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: float[] mHSVColor> = $r5;

        specialinvoke r0.<org.openhab.habdroid.ui.widget.ColorPicker: void init(android.util.AttributeSet,int)>($r2, $i0);

        return;
    }
    public void <init>(android.content.Context, org.openhab.habdroid.ui.widget.OnColorChangedListener)
    {
        org.openhab.habdroid.ui.widget.ColorPicker r0;
        android.content.Context $r1;
        org.openhab.habdroid.ui.widget.OnColorChangedListener $r2;
        int[] $r3;
        android.graphics.RectF $r4;
        float[] $r5;

        r0 := @this: org.openhab.habdroid.ui.widget.ColorPicker;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: org.openhab.habdroid.ui.widget.OnColorChangedListener;

        specialinvoke r0.<android.view.View: void <init>(android.content.Context)>($r1);

        $r3 = newarray (int)[3];

        $r3[0] = 0;

        $r3[1] = 0;

        $r3[2] = 0;

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: int[] BCOLORS> = $r3;

        $r4 = new android.graphics.RectF;

        specialinvoke $r4.<android.graphics.RectF: void <init>()>();

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: android.graphics.RectF mColorWheelRectangle> = $r4;

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: boolean mUserIsMovingPointer> = 0;

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: boolean mUserIsMovingBrightnessPointer> = 0;

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: boolean mUserIsMovingSaturationPointer> = 0;

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mBrightness> = 1.0F;

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mSaturation> = 1.0F;

        $r5 = newarray (float)[3];

        $r5[0] = 0.0F;

        $r5[1] = 0.0F;

        $r5[2] = 0.0F;

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: float[] mHSVColor> = $r5;

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: org.openhab.habdroid.ui.widget.OnColorChangedListener mListener> = $r2;

        specialinvoke r0.<org.openhab.habdroid.ui.widget.ColorPicker: void init(android.util.AttributeSet,int)>(null, 0);

        return;
    }
    private int ave(int, int, float)
    {
        org.openhab.habdroid.ui.widget.ColorPicker r0;
        int $i0, $i1;
        float $f0, $f1;

        r0 := @this: org.openhab.habdroid.ui.widget.ColorPicker;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $f0 := @parameter2: float;

        $i1 = $i1 - $i0;

        $f1 = (float) $i1;

        $f0 = $f1 * $f0;

        $i1 = staticinvoke <java.lang.Math: int round(float)>($f0);

        $i0 = $i1 + $i0;

        return $i0;
    }
    private int calculateColor(float)
    {
        org.openhab.habdroid.ui.widget.ColorPicker r0;
        float $f0, $f1;
        int i0, i1, i2, $i4, $i5, $i6;
        double $d0;
        byte $b3;
        int[] $r1, $r2;

        r0 := @this: org.openhab.habdroid.ui.widget.ColorPicker;

        $f0 := @parameter0: float;

        $d0 = (double) $f0;

        $d0 = $d0 / 6.283185307179586;

        $f0 = (float) $d0;

        $b3 = $f0 cmpg 0.0F;

        if $b3 >= 0 goto label1;

        $f0 = $f0 + 1.0F;

     label1:
        $b3 = $f0 cmpg 0.0F;

        if $b3 > 0 goto label2;

        $r1 = <org.openhab.habdroid.ui.widget.ColorPicker: int[] COLORS>;

        i0 = $r1[0];

        return i0;

     label2:
        $b3 = $f0 cmpl 1.0F;

        if $b3 < 0 goto label3;

        $r1 = <org.openhab.habdroid.ui.widget.ColorPicker: int[] COLORS>;

        $r2 = <org.openhab.habdroid.ui.widget.ColorPicker: int[] COLORS>;

        i0 = lengthof $r2;

        i0 = i0 + -1;

        i0 = $r1[i0];

        return i0;

     label3:
        $r1 = <org.openhab.habdroid.ui.widget.ColorPicker: int[] COLORS>;

        i0 = lengthof $r1;

        i0 = i0 + -1;

        $f1 = (float) i0;

        $f0 = $f0 * $f1;

        i2 = (int) $f0;

        $f1 = (float) i2;

        $f0 = $f0 - $f1;

        $r1 = <org.openhab.habdroid.ui.widget.ColorPicker: int[] COLORS>;

        i0 = $r1[i2];

        $r1 = <org.openhab.habdroid.ui.widget.ColorPicker: int[] COLORS>;

        i2 = i2 + 1;

        i1 = $r1[i2];

        i2 = staticinvoke <android.graphics.Color: int alpha(int)>(i0);

        $i4 = staticinvoke <android.graphics.Color: int alpha(int)>(i1);

        i2 = specialinvoke r0.<org.openhab.habdroid.ui.widget.ColorPicker: int ave(int,int,float)>(i2, $i4, $f0);

        $i4 = staticinvoke <android.graphics.Color: int red(int)>(i0);

        $i5 = staticinvoke <android.graphics.Color: int red(int)>(i1);

        $i4 = specialinvoke r0.<org.openhab.habdroid.ui.widget.ColorPicker: int ave(int,int,float)>($i4, $i5, $f0);

        $i5 = staticinvoke <android.graphics.Color: int green(int)>(i0);

        $i6 = staticinvoke <android.graphics.Color: int green(int)>(i1);

        $i5 = specialinvoke r0.<org.openhab.habdroid.ui.widget.ColorPicker: int ave(int,int,float)>($i5, $i6, $f0);

        i0 = staticinvoke <android.graphics.Color: int blue(int)>(i0);

        i1 = staticinvoke <android.graphics.Color: int blue(int)>(i1);

        i0 = specialinvoke r0.<org.openhab.habdroid.ui.widget.ColorPicker: int ave(int,int,float)>(i0, i1, $f0);

        i1 = staticinvoke <android.graphics.Color: int argb(int,int,int,int)>(i2, $i4, $i5, i0);

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: int mColor> = i1;

        i0 = staticinvoke <android.graphics.Color: int argb(int,int,int,int)>(i2, $i4, $i5, i0);

        return i0;
    }
    private int calculateFinalColor(int, float)
    {
        org.openhab.habdroid.ui.widget.ColorPicker r0;
        int $i0, $i1, $i2;
        float $f0, $f1;
        float[] r1;

        r0 := @this: org.openhab.habdroid.ui.widget.ColorPicker;

        $i0 := @parameter0: int;

        $f0 := @parameter1: float;

        r1 = newarray (float)[3];

        r1[0] = 0.0F;

        r1[1] = 0.0F;

        r1[2] = 0.0F;

        $i1 = staticinvoke <android.graphics.Color: int red(int)>($i0);

        $i2 = staticinvoke <android.graphics.Color: int green(int)>($i0);

        $i0 = staticinvoke <android.graphics.Color: int blue(int)>($i0);

        staticinvoke <android.graphics.Color: void RGBToHSV(int,int,int,float[])>($i1, $i2, $i0, r1);

        $f1 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mSaturation>;

        r1[1] = $f1;

        $f0 = 1.0F - $f0;

        r1[2] = $f0;

        $i0 = staticinvoke <android.graphics.Color: int HSVToColor(float[])>(r1);

        return $i0;
    }
    private float[] calculatePointerPosition(float)
    {
        org.openhab.habdroid.ui.widget.ColorPicker r0;
        float $f0, f1, $f2;
        double $d0, $d1;
        float[] $r1;

        r0 := @this: org.openhab.habdroid.ui.widget.ColorPicker;

        $f0 := @parameter0: float;

        f1 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mColorWheelRadius>;

        $d0 = (double) f1;

        $d1 = (double) $f0;

        $d1 = staticinvoke <java.lang.Math: double cos(double)>($d1);

        $d0 = $d0 * $d1;

        f1 = (float) $d0;

        $f2 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mColorWheelRadius>;

        $d0 = (double) $f2;

        $d1 = (double) $f0;

        $d1 = staticinvoke <java.lang.Math: double sin(double)>($d1);

        $d0 = $d0 * $d1;

        $f0 = (float) $d0;

        $r1 = newarray (float)[2];

        $r1[0] = f1;

        $r1[1] = $f0;

        return $r1;
    }
    private int calculateSaturationColor(int, float)
    {
        org.openhab.habdroid.ui.widget.ColorPicker r0;
        int $i0, $i1, $i2;
        float $f0;
        float[] r1;

        r0 := @this: org.openhab.habdroid.ui.widget.ColorPicker;

        $i0 := @parameter0: int;

        $f0 := @parameter1: float;

        r1 = newarray (float)[3];

        r1[0] = 0.0F;

        r1[1] = 0.0F;

        r1[2] = 0.0F;

        $i1 = staticinvoke <android.graphics.Color: int red(int)>($i0);

        $i2 = staticinvoke <android.graphics.Color: int green(int)>($i0);

        $i0 = staticinvoke <android.graphics.Color: int blue(int)>($i0);

        staticinvoke <android.graphics.Color: void RGBToHSV(int,int,int,float[])>($i1, $i2, $i0, r1);

        r1[1] = $f0;

        $i0 = staticinvoke <android.graphics.Color: int HSVToColor(float[])>(r1);

        return $i0;
    }
    private float calculateSliderValue(float, float, float)
    {
        org.openhab.habdroid.ui.widget.ColorPicker r0;
        float $f0, $f1, $f2, f3;
        byte $b0;

        r0 := @this: org.openhab.habdroid.ui.widget.ColorPicker;

        $f0 := @parameter0: float;

        $f1 := @parameter1: float;

        $f2 := @parameter2: float;

        $b0 = $f0 cmpg $f1;

        if $b0 >= 0 goto label2;

        f3 = $f1 - $f0;

     label1:
        $f0 = $f2 - $f0;

        $f0 = $f0 / f3;

        return $f0;

     label2:
        f3 = $f0 - $f1;

        $f0 = $f1;

        goto label1;
    }
    private float colorToAngle(int)
    {
        org.openhab.habdroid.ui.widget.ColorPicker r0;
        int $i0, i1, i2, i3, i4, i5;
        double d0, $d1;
        int[] $r1;
        float f0;
        byte $b6;

        r0 := @this: org.openhab.habdroid.ui.widget.ColorPicker;

        $i0 := @parameter0: int;

        $r1 = specialinvoke r0.<org.openhab.habdroid.ui.widget.ColorPicker: int[] normalizeColor(int)>($i0);

        i3 = $r1[0];

        i1 = $r1[1];

        i5 = $r1[2];

        $i0 = i1 ^ -1;

        $i0 = i3 & $i0;

        i4 = 0;

     label01:
        $r1 = <org.openhab.habdroid.ui.widget.ColorPicker: int[] COLORS>;

        i2 = lengthof $r1;

        i2 = i2 + -1;

        if i4 >= i2 goto label09;

        $r1 = <org.openhab.habdroid.ui.widget.ColorPicker: int[] COLORS>;

        i2 = $r1[i4];

        if i2 != $i0 goto label08;

        $r1 = <org.openhab.habdroid.ui.widget.ColorPicker: int[] COLORS>;

        i2 = i4 + 1;

        i2 = $r1[i2];

        i3 = i3 >> i5;

        i3 = i3 & 255;

        d0 = (double) i3;

        d0 = d0 / 255.0;

        i3 = i2 & i1;

        i1 = $i0 & i1;

        if i3 == i1 goto label04;

        if i2 >= $i0 goto label03;

        $i0 = i4 + 1;

        $d1 = (double) $i0;

        d0 = $d1 - d0;

     label02:
        d0 = 6.283185307179586 * d0;

        $r1 = <org.openhab.habdroid.ui.widget.ColorPicker: int[] COLORS>;

        $i0 = lengthof $r1;

        $i0 = $i0 + -1;

        $d1 = (double) $i0;

        d0 = d0 / $d1;

        f0 = (float) d0;

        d0 = (double) f0;

        $b6 = d0 cmpl 3.141592653589793;

        if $b6 <= 0 goto label10;

        d0 = (double) f0;

        d0 = d0 - 6.283185307179586;

        f0 = (float) d0;

        return f0;

     label03:
        $d1 = (double) i4;

        d0 = $d1 + d0;

        goto label02;

     label04:
        if i4 != 0 goto label06;

        $r1 = <org.openhab.habdroid.ui.widget.ColorPicker: int[] COLORS>;

        i1 = lengthof $r1;

        i1 = i1 + -1;

     label05:
        $r1 = <org.openhab.habdroid.ui.widget.ColorPicker: int[] COLORS>;

        i4 = i1 + -1;

        i4 = $r1[i4];

        if i4 >= $i0 goto label07;

        $i0 = i1 + -1;

        $d1 = (double) $i0;

        d0 = $d1 + d0;

        goto label02;

     label06:
        i1 = i4;

        goto label05;

     label07:
        $d1 = (double) i1;

        d0 = $d1 - d0;

        goto label02;

     label08:
        i4 = i4 + 1;

        goto label01;

     label09:
        return 0.0F;

     label10:
        return f0;
    }
    private void init(android.util.AttributeSet, int)
    {
        org.openhab.habdroid.ui.widget.ColorPicker r0;
        android.util.AttributeSet $r1;
        int $i0;
        android.graphics.SweepGradient r2;
        android.content.Context $r3;
        int[] $r4;
        android.content.res.TypedArray $r5;
        float $f0;
        java.lang.String $r6, $r9;
        java.lang.Object[] $r7;
        java.lang.Float $r8;
        android.graphics.Paint $r10;
        android.graphics.Paint$Style $r11;

        r0 := @this: org.openhab.habdroid.ui.widget.ColorPicker;

        $r1 := @parameter0: android.util.AttributeSet;

        $i0 := @parameter1: int;

        $r3 = virtualinvoke r0.<org.openhab.habdroid.ui.widget.ColorPicker: android.content.Context getContext()>();

        $r4 = <org.openhab.habdroid.R$styleable: int[] ColorPicker>;

        $r5 = virtualinvoke $r3.<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)>($r1, $r4, $i0, 0);

        $i0 = virtualinvoke $r5.<android.content.res.TypedArray: int getInteger(int,int)>(1, 16);

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: int mColorWheelStrokeWidth> = $i0;

        $i0 = virtualinvoke $r5.<android.content.res.TypedArray: int getInteger(int,int)>(0, 32);

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: int mPointerRadius> = $i0;

        $i0 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: int mPointerRadius>;

        $i0 = $i0 * 2;

        $f0 = (float) $i0;

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mBrightnessSliderX> = $f0;

        $i0 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: int mPointerRadius>;

        $i0 = neg $i0;

        $i0 = $i0 * 2;

        $f0 = (float) $i0;

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mSaturationSliderX> = $f0;

        $r6 = <org.openhab.habdroid.ui.widget.ColorPicker: java.lang.String TAG>;

        $r7 = newarray (java.lang.Object)[4];

        $f0 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mBrightnessSliderStartY>;

        $r8 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        $r7[0] = $r8;

        $f0 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mBrightnessSliderEndY>;

        $r8 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        $r7[1] = $r8;

        $f0 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mSaturationSliderStartY>;

        $r8 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        $r7[2] = $r8;

        $f0 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mSaturationSliderEndY>;

        $r8 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        $r7[3] = $r8;

        $r9 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("init %f %f %f %f", $r7);

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r6, $r9);

        virtualinvoke $r5.<android.content.res.TypedArray: void recycle()>();

        r2 = new android.graphics.SweepGradient;

        $r4 = <org.openhab.habdroid.ui.widget.ColorPicker: int[] COLORS>;

        specialinvoke r2.<android.graphics.SweepGradient: void <init>(float,float,int[],float[])>(0.0F, 0.0F, $r4, null);

        $r10 = new android.graphics.Paint;

        specialinvoke $r10.<android.graphics.Paint: void <init>(int)>(1);

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: android.graphics.Paint mColorWheelPaint> = $r10;

        $r10 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: android.graphics.Paint mColorWheelPaint>;

        virtualinvoke $r10.<android.graphics.Paint: android.graphics.Shader setShader(android.graphics.Shader)>(r2);

        $r10 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: android.graphics.Paint mColorWheelPaint>;

        $r11 = <android.graphics.Paint$Style: android.graphics.Paint$Style STROKE>;

        virtualinvoke $r10.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r11);

        $r10 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: android.graphics.Paint mColorWheelPaint>;

        $i0 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: int mColorWheelStrokeWidth>;

        $f0 = (float) $i0;

        virtualinvoke $r10.<android.graphics.Paint: void setStrokeWidth(float)>($f0);

        $r10 = new android.graphics.Paint;

        specialinvoke $r10.<android.graphics.Paint: void <init>(int)>(1);

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: android.graphics.Paint mBrightnessSliderPaint> = $r10;

        $r10 = new android.graphics.Paint;

        specialinvoke $r10.<android.graphics.Paint: void <init>(int)>(1);

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: android.graphics.Paint mPointerHaloPaint> = $r10;

        $r10 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: android.graphics.Paint mPointerHaloPaint>;

        virtualinvoke $r10.<android.graphics.Paint: void setColor(int)>(-16777216);

        $r10 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: android.graphics.Paint mPointerHaloPaint>;

        virtualinvoke $r10.<android.graphics.Paint: void setStrokeWidth(float)>(5.0F);

        $r10 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: android.graphics.Paint mPointerHaloPaint>;

        virtualinvoke $r10.<android.graphics.Paint: void setAlpha(int)>(96);

        $r10 = new android.graphics.Paint;

        specialinvoke $r10.<android.graphics.Paint: void <init>(int)>(1);

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: android.graphics.Paint mPointerColor> = $r10;

        $r10 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: android.graphics.Paint mPointerColor>;

        virtualinvoke $r10.<android.graphics.Paint: void setStrokeWidth(float)>(5.0F);

        $r10 = new android.graphics.Paint;

        specialinvoke $r10.<android.graphics.Paint: void <init>(int)>(1);

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: android.graphics.Paint mBrightnessPointerHaloPaint> = $r10;

        $r10 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: android.graphics.Paint mBrightnessPointerHaloPaint>;

        virtualinvoke $r10.<android.graphics.Paint: void setColor(int)>(-16777216);

        $r10 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: android.graphics.Paint mBrightnessPointerHaloPaint>;

        virtualinvoke $r10.<android.graphics.Paint: void setStrokeWidth(float)>(5.0F);

        $r10 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: android.graphics.Paint mBrightnessPointerHaloPaint>;

        virtualinvoke $r10.<android.graphics.Paint: void setAlpha(int)>(96);

        $r10 = new android.graphics.Paint;

        specialinvoke $r10.<android.graphics.Paint: void <init>(int)>(1);

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: android.graphics.Paint mBrightnessPointerBorderPaint> = $r10;

        $r10 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: android.graphics.Paint mBrightnessPointerBorderPaint>;

        virtualinvoke $r10.<android.graphics.Paint: void setColor(int)>(-1);

        $r10 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: android.graphics.Paint mBrightnessPointerBorderPaint>;

        virtualinvoke $r10.<android.graphics.Paint: void setStrokeWidth(float)>(2.0F);

        $r10 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: android.graphics.Paint mBrightnessPointerBorderPaint>;

        virtualinvoke $r10.<android.graphics.Paint: void setAlpha(int)>(96);

        $r10 = new android.graphics.Paint;

        specialinvoke $r10.<android.graphics.Paint: void <init>(int)>(1);

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: android.graphics.Paint mBrightnessPointerColor> = $r10;

        $r10 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: android.graphics.Paint mBrightnessPointerColor>;

        virtualinvoke $r10.<android.graphics.Paint: void setStrokeWidth(float)>(5.0F);

        $r10 = new android.graphics.Paint;

        specialinvoke $r10.<android.graphics.Paint: void <init>(int)>(1);

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: android.graphics.Paint mSaturationSliderPaint> = $r10;

        $r10 = new android.graphics.Paint;

        specialinvoke $r10.<android.graphics.Paint: void <init>(int)>(1);

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: android.graphics.Paint mSaturationPointerHaloPaint> = $r10;

        $r10 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: android.graphics.Paint mSaturationPointerHaloPaint>;

        virtualinvoke $r10.<android.graphics.Paint: void setColor(int)>(-16777216);

        $r10 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: android.graphics.Paint mSaturationPointerHaloPaint>;

        virtualinvoke $r10.<android.graphics.Paint: void setStrokeWidth(float)>(5.0F);

        $r10 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: android.graphics.Paint mSaturationPointerHaloPaint>;

        virtualinvoke $r10.<android.graphics.Paint: void setAlpha(int)>(96);

        $r10 = new android.graphics.Paint;

        specialinvoke $r10.<android.graphics.Paint: void <init>(int)>(1);

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: android.graphics.Paint mSaturationPointerColor> = $r10;

        $r10 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: android.graphics.Paint mSaturationPointerColor>;

        virtualinvoke $r10.<android.graphics.Paint: void setStrokeWidth(float)>(5.0F);

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mAngle> = -1.5707964F;

        $r10 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: android.graphics.Paint mPointerColor>;

        $f0 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mAngle>;

        $i0 = specialinvoke r0.<org.openhab.habdroid.ui.widget.ColorPicker: int calculateColor(float)>($f0);

        virtualinvoke $r10.<android.graphics.Paint: void setColor(int)>($i0);

        $r10 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: android.graphics.Paint mBrightnessPointerColor>;

        virtualinvoke $r10.<android.graphics.Paint: void setColor(int)>(-16777216);

        return;
    }
    private int[] normalizeColor(int)
    {
        org.openhab.habdroid.ui.widget.ColorPicker r0;
        int $i0, $i1, $i2, i3, i4, i5;
        short s6, s7, s8;
        byte b9;
        int[] $r1;

        r0 := @this: org.openhab.habdroid.ui.widget.ColorPicker;

        $i0 := @parameter0: int;

        $i1 = staticinvoke <android.graphics.Color: int red(int)>($i0);

        $i2 = staticinvoke <android.graphics.Color: int green(int)>($i0);

        $i0 = staticinvoke <android.graphics.Color: int blue(int)>($i0);

        i3 = $i1;

        i4 = $i2;

        i5 = $i0;

        s6 = 0;

        s7 = 0;

        s8 = 0;

        if $i1 >= $i2 goto label3;

        if $i1 >= $i0 goto label3;

        i3 = 0;

        if $i2 <= $i0 goto label2;

        b9 = 0;

        s8 = 255;

        i4 = 255;

     label1:
        $i0 = staticinvoke <android.graphics.Color: int argb(int,int,int,int)>(255, i3, i4, i5);

        $i1 = staticinvoke <android.graphics.Color: int argb(int,int,int,int)>(0, s6, s7, s8);

        $r1 = newarray (int)[3];

        $r1[0] = $i0;

        $r1[1] = $i1;

        $r1[2] = b9;

        return $r1;

     label2:
        b9 = 8;

        s7 = 255;

        i5 = 255;

        goto label1;

     label3:
        if $i2 >= $i1 goto label5;

        if $i2 >= $i0 goto label5;

        i4 = 0;

        if $i1 <= $i0 goto label4;

        b9 = 0;

        s8 = 255;

        i3 = 255;

        goto label1;

     label4:
        b9 = 16;

        s6 = 255;

        i5 = 255;

        goto label1;

     label5:
        i5 = 0;

        if $i1 <= $i2 goto label6;

        b9 = 8;

        s7 = 255;

        i3 = 255;

        goto label1;

     label6:
        b9 = 16;

        s6 = 255;

        i4 = 255;

        goto label1;
    }
    private void updateBrightnessAndSaturation()
    {
        org.openhab.habdroid.ui.widget.ColorPicker r0;
        float $f0, $f1, $f2;
        android.graphics.Paint $r1;
        int $i0;
        float[] $r2;

        r0 := @this: org.openhab.habdroid.ui.widget.ColorPicker;

        $f0 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mBrightnessSliderStartY>;

        $f1 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mBrightnessSliderEndY>;

        $f2 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mBrightnessSliderStartY>;

        $f1 = $f1 - $f2;

        $f2 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mBrightness>;

        $f1 = $f1 * $f2;

        $f0 = $f0 + $f1;

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mBrightnessY> = $f0;

        $f0 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mSaturationSliderStartY>;

        $f1 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mSaturationSliderEndY>;

        $f2 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mSaturationSliderStartY>;

        $f1 = $f1 - $f2;

        $f2 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mSaturation>;

        $f1 = $f1 * $f2;

        $f0 = $f0 + $f1;

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mSaturationY> = $f0;

        $r1 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: android.graphics.Paint mPointerColor>;

        $i0 = virtualinvoke $r1.<android.graphics.Paint: int getColor()>();

        $f0 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mSaturation>;

        $i0 = specialinvoke r0.<org.openhab.habdroid.ui.widget.ColorPicker: int calculateSaturationColor(int,float)>($i0, $f0);

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: int mSaturationColor> = $i0;

        $i0 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: int mSaturationColor>;

        $f0 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mBrightness>;

        $i0 = specialinvoke r0.<org.openhab.habdroid.ui.widget.ColorPicker: int calculateFinalColor(int,float)>($i0, $f0);

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: int mBrightnessColor> = $i0;

        $i0 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: int mBrightnessColor>;

        $r2 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float[] mHSVColor>;

        staticinvoke <android.graphics.Color: void colorToHSV(int,float[])>($i0, $r2);

        return;
    }
    public int getColor()
    {
        org.openhab.habdroid.ui.widget.ColorPicker r0;
        int i0;

        r0 := @this: org.openhab.habdroid.ui.widget.ColorPicker;

        i0 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: int mColor>;

        return i0;
    }
    protected void onDraw(android.graphics.Canvas)
    {
        org.openhab.habdroid.ui.widget.ColorPicker r0;
        android.graphics.Canvas $r1;
        android.graphics.LinearGradient r2;
        android.graphics.Shader$TileMode $r3;
        java.lang.String $r4;
        float $f0, $f1, $f2, $f3;
        android.graphics.RectF $r5;
        android.graphics.Paint $r6;
        int $i0;
        android.graphics.Paint$Style $r7;
        float[] $r8;
        double $d0;

        r0 := @this: org.openhab.habdroid.ui.widget.ColorPicker;

        $r1 := @parameter0: android.graphics.Canvas;

        $r4 = <org.openhab.habdroid.ui.widget.ColorPicker: java.lang.String TAG>;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r4, "onDraw");

        $f0 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mTranslationOffset>;

        $f1 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mTranslationOffset>;

        virtualinvoke $r1.<android.graphics.Canvas: void translate(float,float)>($f0, $f1);

        $r5 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: android.graphics.RectF mColorWheelRectangle>;

        $r6 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: android.graphics.Paint mColorWheelPaint>;

        virtualinvoke $r1.<android.graphics.Canvas: void drawOval(android.graphics.RectF,android.graphics.Paint)>($r5, $r6);

        specialinvoke r0.<org.openhab.habdroid.ui.widget.ColorPicker: void updateBrightnessAndSaturation()>();

        r2 = new android.graphics.LinearGradient;

        $f0 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mBrightnessSliderX>;

        $f1 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mBrightnessSliderStartY>;

        $f2 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mBrightnessSliderX>;

        $f3 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mBrightnessSliderEndY>;

        $i0 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: int mSaturationColor>;

        $r3 = <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode CLAMP>;

        specialinvoke r2.<android.graphics.LinearGradient: void <init>(float,float,float,float,int,int,android.graphics.Shader$TileMode)>($f0, $f1, $f2, $f3, $i0, -16777216, $r3);

        $r6 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: android.graphics.Paint mBrightnessSliderPaint>;

        virtualinvoke $r6.<android.graphics.Paint: android.graphics.Shader setShader(android.graphics.Shader)>(r2);

        $r6 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: android.graphics.Paint mBrightnessSliderPaint>;

        $r7 = <android.graphics.Paint$Style: android.graphics.Paint$Style STROKE>;

        virtualinvoke $r6.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r7);

        $r6 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: android.graphics.Paint mBrightnessSliderPaint>;

        $i0 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: int mColorWheelStrokeWidth>;

        $f0 = (float) $i0;

        virtualinvoke $r6.<android.graphics.Paint: void setStrokeWidth(float)>($f0);

        $f0 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mBrightnessSliderX>;

        $f1 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mBrightnessSliderStartY>;

        $f2 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mBrightnessSliderX>;

        $f3 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mBrightnessSliderEndY>;

        $r6 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: android.graphics.Paint mBrightnessSliderPaint>;

        virtualinvoke $r1.<android.graphics.Canvas: void drawLine(float,float,float,float,android.graphics.Paint)>($f0, $f1, $f2, $f3, $r6);

        r2 = new android.graphics.LinearGradient;

        $f0 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mSaturationSliderX>;

        $f1 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mSaturationSliderStartY>;

        $f2 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mSaturationSliderX>;

        $f3 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mBrightnessSliderEndY>;

        $r6 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: android.graphics.Paint mPointerColor>;

        $i0 = virtualinvoke $r6.<android.graphics.Paint: int getColor()>();

        $r3 = <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode CLAMP>;

        specialinvoke r2.<android.graphics.LinearGradient: void <init>(float,float,float,float,int,int,android.graphics.Shader$TileMode)>($f0, $f1, $f2, $f3, -1, $i0, $r3);

        $r6 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: android.graphics.Paint mSaturationSliderPaint>;

        virtualinvoke $r6.<android.graphics.Paint: android.graphics.Shader setShader(android.graphics.Shader)>(r2);

        $r6 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: android.graphics.Paint mSaturationSliderPaint>;

        $r7 = <android.graphics.Paint$Style: android.graphics.Paint$Style STROKE>;

        virtualinvoke $r6.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r7);

        $r6 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: android.graphics.Paint mSaturationSliderPaint>;

        $i0 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: int mColorWheelStrokeWidth>;

        $f0 = (float) $i0;

        virtualinvoke $r6.<android.graphics.Paint: void setStrokeWidth(float)>($f0);

        $f0 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mSaturationSliderX>;

        $f1 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mSaturationSliderStartY>;

        $f2 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mSaturationSliderX>;

        $f3 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mSaturationSliderEndY>;

        $r6 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: android.graphics.Paint mSaturationSliderPaint>;

        virtualinvoke $r1.<android.graphics.Canvas: void drawLine(float,float,float,float,android.graphics.Paint)>($f0, $f1, $f2, $f3, $r6);

        $f0 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mAngle>;

        $r8 = specialinvoke r0.<org.openhab.habdroid.ui.widget.ColorPicker: float[] calculatePointerPosition(float)>($f0);

        $f0 = $r8[0];

        $f1 = $r8[1];

        $i0 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: int mPointerRadius>;

        $f2 = (float) $i0;

        $r6 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: android.graphics.Paint mPointerHaloPaint>;

        virtualinvoke $r1.<android.graphics.Canvas: void drawCircle(float,float,float,android.graphics.Paint)>($f0, $f1, $f2, $r6);

        $f0 = $r8[0];

        $f1 = $r8[1];

        $i0 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: int mPointerRadius>;

        $d0 = (double) $i0;

        $d0 = $d0 / 1.2;

        $f2 = (float) $d0;

        $r6 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: android.graphics.Paint mPointerColor>;

        virtualinvoke $r1.<android.graphics.Canvas: void drawCircle(float,float,float,android.graphics.Paint)>($f0, $f1, $f2, $r6);

        $f0 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mBrightnessSliderX>;

        $f1 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mBrightnessY>;

        $i0 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: int mPointerRadius>;

        $f2 = (float) $i0;

        $r6 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: android.graphics.Paint mBrightnessPointerHaloPaint>;

        virtualinvoke $r1.<android.graphics.Canvas: void drawCircle(float,float,float,android.graphics.Paint)>($f0, $f1, $f2, $r6);

        $f0 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mBrightnessSliderX>;

        $f1 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mBrightnessY>;

        $i0 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: int mPointerRadius>;

        $i0 = $i0 + -2;

        $f2 = (float) $i0;

        $r6 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: android.graphics.Paint mBrightnessPointerBorderPaint>;

        virtualinvoke $r1.<android.graphics.Canvas: void drawCircle(float,float,float,android.graphics.Paint)>($f0, $f1, $f2, $r6);

        $r6 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: android.graphics.Paint mBrightnessPointerColor>;

        $i0 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: int mBrightnessColor>;

        virtualinvoke $r6.<android.graphics.Paint: void setColor(int)>($i0);

        $f0 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mBrightnessSliderX>;

        $f1 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mBrightnessY>;

        $i0 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: int mPointerRadius>;

        $d0 = (double) $i0;

        $d0 = $d0 / 1.2;

        $f2 = (float) $d0;

        $r6 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: android.graphics.Paint mBrightnessPointerColor>;

        virtualinvoke $r1.<android.graphics.Canvas: void drawCircle(float,float,float,android.graphics.Paint)>($f0, $f1, $f2, $r6);

        $f0 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mSaturationSliderX>;

        $f1 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mSaturationY>;

        $i0 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: int mPointerRadius>;

        $f2 = (float) $i0;

        $r6 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: android.graphics.Paint mSaturationPointerHaloPaint>;

        virtualinvoke $r1.<android.graphics.Canvas: void drawCircle(float,float,float,android.graphics.Paint)>($f0, $f1, $f2, $r6);

        $r6 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: android.graphics.Paint mSaturationPointerColor>;

        $i0 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: int mSaturationColor>;

        virtualinvoke $r6.<android.graphics.Paint: void setColor(int)>($i0);

        $f0 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mSaturationSliderX>;

        $f1 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mSaturationY>;

        $i0 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: int mPointerRadius>;

        $d0 = (double) $i0;

        $d0 = $d0 / 1.2;

        $f2 = (float) $d0;

        $r6 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: android.graphics.Paint mSaturationPointerColor>;

        virtualinvoke $r1.<android.graphics.Canvas: void drawCircle(float,float,float,android.graphics.Paint)>($f0, $f1, $f2, $r6);

        return;
    }
    protected void onMeasure(int, int)
    {
        org.openhab.habdroid.ui.widget.ColorPicker r0;
        int $i0, $i1, $i2;
        float $f0, $f1, $f2, $f3;
        android.graphics.RectF $r1;
        double $d0;

        r0 := @this: org.openhab.habdroid.ui.widget.ColorPicker;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 = virtualinvoke r0.<org.openhab.habdroid.ui.widget.ColorPicker: int getSuggestedMinimumHeight()>();

        $i1 = staticinvoke <org.openhab.habdroid.ui.widget.ColorPicker: int getDefaultSize(int,int)>($i2, $i1);

        $i2 = virtualinvoke r0.<org.openhab.habdroid.ui.widget.ColorPicker: int getSuggestedMinimumWidth()>();

        $i0 = staticinvoke <org.openhab.habdroid.ui.widget.ColorPicker: int getDefaultSize(int,int)>($i2, $i0);

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        virtualinvoke r0.<org.openhab.habdroid.ui.widget.ColorPicker: void setMeasuredDimension(int,int)>($i0, $i0);

        $f2 = (float) $i0;

        $f2 = $f2 * 0.5F;

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mTranslationOffset> = $f2;

        $f2 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mTranslationOffset>;

        $i0 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: int mPointerRadius>;

        $f0 = (float) $i0;

        $f2 = $f2 - $f0;

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mColorWheelRadius> = $f2;

        $r1 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: android.graphics.RectF mColorWheelRectangle>;

        $f2 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mColorWheelRadius>;

        $f2 = neg $f2;

        $f0 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mColorWheelRadius>;

        $f3 = neg $f0;

        $f0 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mColorWheelRadius>;

        $f1 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mColorWheelRadius>;

        virtualinvoke $r1.<android.graphics.RectF: void set(float,float,float,float)>($f2, $f3, $f0, $f1);

        $f2 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mColorWheelRadius>;

        $d0 = (double) $f2;

        $d0 = $d0 * 0.5;

        $f2 = (float) $d0;

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mBrightnessSliderEndY> = $f2;

        $f2 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mColorWheelRadius>;

        $f2 = neg $f2;

        $d0 = (double) $f2;

        $d0 = $d0 * 0.5;

        $f2 = (float) $d0;

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mBrightnessSliderStartY> = $f2;

        $f2 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mColorWheelRadius>;

        $d0 = (double) $f2;

        $d0 = $d0 * 0.5;

        $f2 = (float) $d0;

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mSaturationSliderEndY> = $f2;

        $f2 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mColorWheelRadius>;

        $f2 = neg $f2;

        $d0 = (double) $f2;

        $d0 = $d0 * 0.5;

        $f2 = (float) $d0;

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mSaturationSliderStartY> = $f2;

        return;
    }
    protected void onRestoreInstanceState(android.os.Parcelable)
    {
        org.openhab.habdroid.ui.widget.ColorPicker r0;
        android.os.Parcelable $r1;
        android.os.Bundle r2;
        float $f0;
        android.graphics.Paint $r3;
        int $i0;

        r0 := @this: org.openhab.habdroid.ui.widget.ColorPicker;

        $r1 := @parameter0: android.os.Parcelable;

        r2 = (android.os.Bundle) $r1;

        $r1 = virtualinvoke r2.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>("parent");

        specialinvoke r0.<android.view.View: void onRestoreInstanceState(android.os.Parcelable)>($r1);

        $f0 = virtualinvoke r2.<android.os.Bundle: float getFloat(java.lang.String)>("angle");

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mAngle> = $f0;

        $r3 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: android.graphics.Paint mPointerColor>;

        $f0 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mAngle>;

        $i0 = specialinvoke r0.<org.openhab.habdroid.ui.widget.ColorPicker: int calculateColor(float)>($f0);

        virtualinvoke $r3.<android.graphics.Paint: void setColor(int)>($i0);

        return;
    }
    protected android.os.Parcelable onSaveInstanceState()
    {
        org.openhab.habdroid.ui.widget.ColorPicker r0;
        android.os.Bundle r1;
        float $f0;
        android.os.Parcelable $r2;

        r0 := @this: org.openhab.habdroid.ui.widget.ColorPicker;

        $r2 = specialinvoke r0.<android.view.View: android.os.Parcelable onSaveInstanceState()>();

        r1 = new android.os.Bundle;

        specialinvoke r1.<android.os.Bundle: void <init>()>();

        virtualinvoke r1.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("parent", $r2);

        $f0 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mAngle>;

        virtualinvoke r1.<android.os.Bundle: void putFloat(java.lang.String,float)>("angle", $f0);

        return r1;
    }
    public boolean onTouchEvent(android.view.MotionEvent)
    {
        org.openhab.habdroid.ui.widget.ColorPicker r0;
        android.view.MotionEvent $r1;
        float f0, $f1, $f2, $f3;
        int $i0;
        float[] $r2;
        byte $b1;
        boolean $z0;
        double $d0, $d1;
        android.graphics.Paint $r3;
        org.openhab.habdroid.ui.widget.OnColorChangedListener $r4;

        r0 := @this: org.openhab.habdroid.ui.widget.ColorPicker;

        $r1 := @parameter0: android.view.MotionEvent;

        $f1 = virtualinvoke $r1.<android.view.MotionEvent: float getX()>();

        f0 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mTranslationOffset>;

        f0 = $f1 - f0;

        $f1 = virtualinvoke $r1.<android.view.MotionEvent: float getY()>();

        $f2 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mTranslationOffset>;

        $f1 = $f1 - $f2;

        $i0 = virtualinvoke $r1.<android.view.MotionEvent: int getAction()>();

        lookupswitch($i0)
        {
            case 0: goto label02;
            case 1: goto label12;
            case 2: goto label05;
            default: goto label01;
        };

     label01:
        return 1;

     label02:
        $f2 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mAngle>;

        $r2 = specialinvoke r0.<org.openhab.habdroid.ui.widget.ColorPicker: float[] calculatePointerPosition(float)>($f2);

        $f2 = $r2[0];

        $f2 = $f2 - 48.0F;

        $b1 = f0 cmpl $f2;

        if $b1 < 0 goto label03;

        $f2 = $r2[0];

        $f2 = $f2 + 48.0F;

        $b1 = f0 cmpg $f2;

        if $b1 > 0 goto label03;

        $f2 = $r2[1];

        $f2 = $f2 - 48.0F;

        $b1 = $f1 cmpl $f2;

        if $b1 < 0 goto label03;

        $f2 = $r2[1];

        $f2 = $f2 + 48.0F;

        $b1 = $f1 cmpg $f2;

        if $b1 > 0 goto label03;

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: boolean mUserIsMovingPointer> = 1;

        virtualinvoke r0.<org.openhab.habdroid.ui.widget.ColorPicker: void invalidate()>();

        return 1;

     label03:
        $f2 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mBrightnessSliderX>;

        $i0 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: int mPointerRadius>;

        $f3 = (float) $i0;

        $f2 = $f2 - $f3;

        $b1 = f0 cmpl $f2;

        if $b1 < 0 goto label04;

        $f2 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mBrightnessSliderX>;

        $i0 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: int mPointerRadius>;

        $f3 = (float) $i0;

        $f2 = $f2 + $f3;

        $b1 = f0 cmpg $f2;

        if $b1 > 0 goto label04;

        $f2 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mBrightnessSliderStartY>;

        $i0 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: int mPointerRadius>;

        $i0 = $i0 / 2;

        $f3 = (float) $i0;

        $f2 = $f2 - $f3;

        $b1 = $f1 cmpl $f2;

        if $b1 < 0 goto label04;

        $f2 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mBrightnessSliderEndY>;

        $i0 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: int mPointerRadius>;

        $i0 = $i0 / 2;

        $f3 = (float) $i0;

        $f2 = $f2 + $f3;

        $b1 = $f1 cmpg $f2;

        if $b1 > 0 goto label04;

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: boolean mUserIsMovingBrightnessPointer> = 1;

        return 1;

     label04:
        $f2 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mSaturationSliderX>;

        $i0 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: int mPointerRadius>;

        $i0 = $i0 / 2;

        $f3 = (float) $i0;

        $f2 = $f2 - $f3;

        $b1 = f0 cmpl $f2;

        if $b1 < 0 goto label13;

        $f2 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mSaturationSliderX>;

        $i0 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: int mPointerRadius>;

        $i0 = $i0 / 2;

        $f3 = (float) $i0;

        $f2 = $f2 + $f3;

        $b1 = f0 cmpg $f2;

        if $b1 > 0 goto label13;

        f0 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mSaturationSliderStartY>;

        $i0 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: int mPointerRadius>;

        $i0 = $i0 / 2;

        $f2 = (float) $i0;

        f0 = f0 - $f2;

        $b1 = $f1 cmpl f0;

        if $b1 < 0 goto label13;

        f0 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mSaturationSliderEndY>;

        $i0 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: int mPointerRadius>;

        $i0 = $i0 / 2;

        $f2 = (float) $i0;

        f0 = f0 + $f2;

        $b1 = $f1 cmpg f0;

        if $b1 > 0 goto label13;

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: boolean mUserIsMovingSaturationPointer> = 1;

        return 1;

     label05:
        $z0 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: boolean mUserIsMovingPointer>;

        if $z0 == 0 goto label06;

        $d0 = (double) $f1;

        $d1 = (double) f0;

        $d0 = staticinvoke <java.lang.Math: double atan2(double,double)>($d0, $d1);

        $f1 = (float) $d0;

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mAngle> = $f1;

        $r3 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: android.graphics.Paint mPointerColor>;

        $f1 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mAngle>;

        $i0 = specialinvoke r0.<org.openhab.habdroid.ui.widget.ColorPicker: int calculateColor(float)>($f1);

        virtualinvoke $r3.<android.graphics.Paint: void setColor(int)>($i0);

        virtualinvoke r0.<org.openhab.habdroid.ui.widget.ColorPicker: void invalidate()>();

        return 1;

     label06:
        $z0 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: boolean mUserIsMovingBrightnessPointer>;

        if $z0 == 0 goto label09;

        f0 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mBrightnessSliderStartY>;

        $b1 = $f1 cmpg f0;

        if $b1 >= 0 goto label07;

        $f1 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mBrightnessSliderStartY>;

     label07:
        f0 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mBrightnessSliderEndY>;

        $b1 = $f1 cmpl f0;

        if $b1 <= 0 goto label08;

        $f1 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mBrightnessSliderEndY>;

     label08:
        f0 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mBrightnessSliderEndY>;

        $f2 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mBrightnessSliderStartY>;

        $f1 = specialinvoke r0.<org.openhab.habdroid.ui.widget.ColorPicker: float calculateSliderValue(float,float,float)>(f0, $f2, $f1);

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mBrightness> = $f1;

        virtualinvoke r0.<org.openhab.habdroid.ui.widget.ColorPicker: void invalidate()>();

        return 1;

     label09:
        $z0 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: boolean mUserIsMovingSaturationPointer>;

        if $z0 == 0 goto label13;

        f0 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mSaturationSliderStartY>;

        $b1 = $f1 cmpg f0;

        if $b1 >= 0 goto label10;

        $f1 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mSaturationSliderStartY>;

     label10:
        f0 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mSaturationSliderEndY>;

        $b1 = $f1 cmpl f0;

        if $b1 <= 0 goto label11;

        $f1 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mSaturationSliderEndY>;

     label11:
        f0 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mSaturationSliderEndY>;

        $f2 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mSaturationSliderStartY>;

        $f1 = specialinvoke r0.<org.openhab.habdroid.ui.widget.ColorPicker: float calculateSliderValue(float,float,float)>(f0, $f2, $f1);

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mSaturation> = $f1;

        virtualinvoke r0.<org.openhab.habdroid.ui.widget.ColorPicker: void invalidate()>();

        return 1;

     label12:
        r0.<org.openhab.habdroid.ui.widget.ColorPicker: boolean mUserIsMovingPointer> = 0;

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: boolean mUserIsMovingBrightnessPointer> = 0;

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: boolean mUserIsMovingSaturationPointer> = 0;

        $r4 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: org.openhab.habdroid.ui.widget.OnColorChangedListener mListener>;

        if $r4 == null goto label13;

        $r4 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: org.openhab.habdroid.ui.widget.OnColorChangedListener mListener>;

        $r2 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float[] mHSVColor>;

        interfaceinvoke $r4.<org.openhab.habdroid.ui.widget.OnColorChangedListener: void colorChanged(float[],android.view.View)>($r2, r0);

     label13:
        return 1;
    }
    public void setColor(int)
    {
        org.openhab.habdroid.ui.widget.ColorPicker r0;
        int $i0;
        float $f0;
        android.graphics.Paint $r1;

        r0 := @this: org.openhab.habdroid.ui.widget.ColorPicker;

        $i0 := @parameter0: int;

        $f0 = specialinvoke r0.<org.openhab.habdroid.ui.widget.ColorPicker: float colorToAngle(int)>($i0);

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mAngle> = $f0;

        $r1 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: android.graphics.Paint mPointerColor>;

        $f0 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mAngle>;

        $i0 = specialinvoke r0.<org.openhab.habdroid.ui.widget.ColorPicker: int calculateColor(float)>($f0);

        virtualinvoke $r1.<android.graphics.Paint: void setColor(int)>($i0);

        virtualinvoke r0.<org.openhab.habdroid.ui.widget.ColorPicker: void invalidate()>();

        return;
    }
    public void setHSVColor(float[])
    {
        org.openhab.habdroid.ui.widget.ColorPicker r0;
        float[] $r1;
        java.lang.String $r2, $r5;
        java.lang.Object[] $r3;
        float $f0;
        java.lang.Float $r4;
        int $i0;
        android.graphics.Paint $r6;

        r0 := @this: org.openhab.habdroid.ui.widget.ColorPicker;

        $r1 := @parameter0: float[];

        $r2 = <org.openhab.habdroid.ui.widget.ColorPicker: java.lang.String TAG>;

        $r3 = newarray (java.lang.Object)[3];

        $f0 = $r1[0];

        $r4 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        $r3[0] = $r4;

        $f0 = $r1[1];

        $r4 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        $r3[1] = $r4;

        $f0 = $r1[2];

        $r4 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        $r3[2] = $r4;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Setting color to %f %f %f", $r3);

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r2, $r5);

        $i0 = staticinvoke <android.graphics.Color: int HSVToColor(float[])>($r1);

        $f0 = specialinvoke r0.<org.openhab.habdroid.ui.widget.ColorPicker: float colorToAngle(int)>($i0);

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mAngle> = $f0;

        $f0 = $r1[1];

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mSaturation> = $f0;

        $f0 = $r1[2];

        $f0 = 1.0F - $f0;

        r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mBrightness> = $f0;

        $r6 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: android.graphics.Paint mPointerColor>;

        $f0 = r0.<org.openhab.habdroid.ui.widget.ColorPicker: float mAngle>;

        $i0 = specialinvoke r0.<org.openhab.habdroid.ui.widget.ColorPicker: int calculateColor(float)>($f0);

        virtualinvoke $r6.<android.graphics.Paint: void setColor(int)>($i0);

        specialinvoke r0.<org.openhab.habdroid.ui.widget.ColorPicker: void updateBrightnessAndSaturation()>();

        virtualinvoke r0.<org.openhab.habdroid.ui.widget.ColorPicker: void postInvalidate()>();

        return;
    }
