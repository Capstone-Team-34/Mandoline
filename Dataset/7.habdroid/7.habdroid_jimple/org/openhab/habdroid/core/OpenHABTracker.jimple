org.openhab.habdroid.core.OpenHABTracker extends java.lang.Object implements org.openhab.habdroid.util.AsyncServiceResolverListener
private static final java.lang.String TAG
org.openhab.habdroid.core.ConnectivityChangeReceiver mConnectivityChangeReceiver
android.content.Context mCtx
java.lang.String mOpenHABServiceType
java.lang.String mOpenHABUrl
org.openhab.habdroid.core.OpenHABTrackerReceiver mReceiver
org.openhab.habdroid.util.AsyncServiceResolver mServiceResolver
    static void <clinit>()
    {
        java.lang.String $r0;
        java.lang.Class $r1;

        $r1 = class "Lorg/openhab/habdroid/core/OpenHABTracker;";

        $r0 = virtualinvoke $r1.<java.lang.Class: java.lang.String getSimpleName()>();

        <org.openhab.habdroid.core.OpenHABTracker: java.lang.String TAG> = $r0;

        return;
    }
    public void <init>(android.content.Context, java.lang.String)
    {
        org.openhab.habdroid.core.OpenHABTracker r0;
        java.lang.String $r1;
        android.content.Context $r2;
        boolean $z0;
        org.openhab.habdroid.core.OpenHABTrackerReceiver $r3;
        org.openhab.habdroid.core.ConnectivityChangeReceiver $r4;

        r0 := @this: org.openhab.habdroid.core.OpenHABTracker;

        $r2 := @parameter0: android.content.Context;

        $r1 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.openhab.habdroid.core.OpenHABTracker: android.content.Context mCtx> = $r2;

        $z0 = $r2 instanceof org.openhab.habdroid.core.OpenHABTrackerReceiver;

        if $z0 == 0 goto label1;

        $r3 = (org.openhab.habdroid.core.OpenHABTrackerReceiver) $r2;

        r0.<org.openhab.habdroid.core.OpenHABTracker: org.openhab.habdroid.core.OpenHABTrackerReceiver mReceiver> = $r3;

     label1:
        r0.<org.openhab.habdroid.core.OpenHABTracker: java.lang.String mOpenHABServiceType> = $r1;

        $r4 = new org.openhab.habdroid.core.ConnectivityChangeReceiver;

        specialinvoke $r4.<org.openhab.habdroid.core.ConnectivityChangeReceiver: void <init>()>();

        r0.<org.openhab.habdroid.core.OpenHABTracker: org.openhab.habdroid.core.ConnectivityChangeReceiver mConnectivityChangeReceiver> = $r4;

        return;
    }
    static java.lang.String access$000()
    {
        java.lang.String r0;

        r0 = <org.openhab.habdroid.core.OpenHABTracker: java.lang.String TAG>;

        return r0;
    }
    private void bonjourDiscoveryFinished()
    {
        org.openhab.habdroid.core.OpenHABTracker r0;
        org.openhab.habdroid.core.OpenHABTrackerReceiver $r1;

        r0 := @this: org.openhab.habdroid.core.OpenHABTracker;

        $r1 = r0.<org.openhab.habdroid.core.OpenHABTracker: org.openhab.habdroid.core.OpenHABTrackerReceiver mReceiver>;

        if $r1 == null goto label1;

        $r1 = r0.<org.openhab.habdroid.core.OpenHABTracker: org.openhab.habdroid.core.OpenHABTrackerReceiver mReceiver>;

        interfaceinvoke $r1.<org.openhab.habdroid.core.OpenHABTrackerReceiver: void onBonjourDiscoveryFinished()>();

     label1:
        return;
    }
    private void bonjourDiscoveryStarted()
    {
        org.openhab.habdroid.core.OpenHABTracker r0;
        org.openhab.habdroid.core.OpenHABTrackerReceiver $r1;

        r0 := @this: org.openhab.habdroid.core.OpenHABTracker;

        $r1 = r0.<org.openhab.habdroid.core.OpenHABTracker: org.openhab.habdroid.core.OpenHABTrackerReceiver mReceiver>;

        if $r1 == null goto label1;

        $r1 = r0.<org.openhab.habdroid.core.OpenHABTracker: org.openhab.habdroid.core.OpenHABTrackerReceiver mReceiver>;

        interfaceinvoke $r1.<org.openhab.habdroid.core.OpenHABTrackerReceiver: void onBonjourDiscoveryStarted()>();

     label1:
        return;
    }
    private boolean checkUrlReachability(java.lang.String)
    {
        org.openhab.habdroid.core.OpenHABTracker r0;
        java.lang.String $r1, $r2, $r4;
        java.lang.StringBuilder $r3;
        org.openhab.habdroid.core.OpenHABTracker$1 $r5;
        java.util.concurrent.Executor $r6;
        java.lang.String[] $r7;
        android.os.AsyncTask $r8;
        java.lang.Object $r9;
        java.lang.Boolean $r10;
        boolean $z0;
        java.lang.InterruptedException r11;
        java.util.concurrent.ExecutionException r12;

        r0 := @this: org.openhab.habdroid.core.OpenHABTracker;

        $r1 := @parameter0: java.lang.String;

        $r2 = <org.openhab.habdroid.core.OpenHABTracker: java.lang.String TAG>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Checking reachability of ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r2, $r4);

        $r5 = new org.openhab.habdroid.core.OpenHABTracker$1;

     label1:
        specialinvoke $r5.<org.openhab.habdroid.core.OpenHABTracker$1: void <init>(org.openhab.habdroid.core.OpenHABTracker)>(r0);

     label2:
        $r6 = <android.os.AsyncTask: java.util.concurrent.Executor THREAD_POOL_EXECUTOR>;

        $r7 = newarray (java.lang.String)[1];

        $r7[0] = $r1;

     label3:
        $r8 = virtualinvoke $r5.<org.openhab.habdroid.core.OpenHABTracker$1: android.os.AsyncTask executeOnExecutor(java.util.concurrent.Executor,java.lang.Object[])>($r6, $r7);

        $r9 = virtualinvoke $r8.<android.os.AsyncTask: java.lang.Object get()>();

     label4:
        $r10 = (java.lang.Boolean) $r9;

     label5:
        $z0 = virtualinvoke $r10.<java.lang.Boolean: boolean booleanValue()>();

     label6:
        return $z0;

     label7:
        r11 := @caughtexception;

        $r1 = <org.openhab.habdroid.core.OpenHABTracker: java.lang.String TAG>;

        $r2 = virtualinvoke r11.<java.lang.InterruptedException: java.lang.String getMessage()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r1, $r2);

        return 0;

     label8:
        r12 := @caughtexception;

        $r1 = <org.openhab.habdroid.core.OpenHABTracker: java.lang.String TAG>;

        $r2 = virtualinvoke r12.<java.util.concurrent.ExecutionException: java.lang.String getMessage()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r1, $r2);

        return 0;

        catch java.lang.InterruptedException from label1 to label2 with label7;
        catch java.lang.InterruptedException from label3 to label4 with label7;
        catch java.lang.InterruptedException from label5 to label6 with label7;
        catch java.util.concurrent.ExecutionException from label1 to label2 with label8;
        catch java.util.concurrent.ExecutionException from label3 to label4 with label8;
        catch java.util.concurrent.ExecutionException from label5 to label6 with label8;
    }
    public static int getCurrentNetworkConnectivityType(android.content.Context)
    {
        android.content.Context $r0;
        java.lang.Object $r1;
        android.net.ConnectivityManager r2;
        android.net.NetworkInfo $r3;
        int $i0;

        $r0 := @parameter0: android.content.Context;

        $r1 = virtualinvoke $r0.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("connectivity");

        r2 = (android.net.ConnectivityManager) $r1;

        $r3 = virtualinvoke r2.<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>();

        if $r3 == null goto label1;

        $i0 = virtualinvoke $r3.<android.net.NetworkInfo: int getType()>();

        return $i0;

     label1:
        return -1;
    }
    private void openHABMessage(java.lang.String, int, int)
    {
        org.openhab.habdroid.core.OpenHABTracker r0;
        java.lang.String $r1;
        int $i0, $i1;
        org.openhab.habdroid.core.OpenHABTrackerReceiver $r2;

        r0 := @this: org.openhab.habdroid.core.OpenHABTracker;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = r0.<org.openhab.habdroid.core.OpenHABTracker: org.openhab.habdroid.core.OpenHABTrackerReceiver mReceiver>;

        if $r2 == null goto label1;

        $r2 = r0.<org.openhab.habdroid.core.OpenHABTracker: org.openhab.habdroid.core.OpenHABTrackerReceiver mReceiver>;

        interfaceinvoke $r2.<org.openhab.habdroid.core.OpenHABTrackerReceiver: void showMessageToUser(java.lang.String,int,int)>($r1, $i0, $i1);

     label1:
        return;
    }
    private void openHABTracked(java.lang.String)
    {
        org.openhab.habdroid.core.OpenHABTracker r0;
        java.lang.String $r1;
        org.openhab.habdroid.core.OpenHABTrackerReceiver $r2;

        r0 := @this: org.openhab.habdroid.core.OpenHABTracker;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.openhab.habdroid.core.OpenHABTracker: org.openhab.habdroid.core.OpenHABTrackerReceiver mReceiver>;

        if $r2 == null goto label1;

        $r2 = r0.<org.openhab.habdroid.core.OpenHABTracker: org.openhab.habdroid.core.OpenHABTrackerReceiver mReceiver>;

        $r1 = r0.<org.openhab.habdroid.core.OpenHABTracker: java.lang.String mOpenHABUrl>;

        interfaceinvoke $r2.<org.openhab.habdroid.core.OpenHABTrackerReceiver: void onOpenHABTracked(java.lang.String)>($r1);

     label1:
        return;
    }
    public void onServiceResolveFailed()
    {
        org.openhab.habdroid.core.OpenHABTracker r0;
        java.lang.String $r1, $r5;
        android.content.Context $r2;
        android.content.SharedPreferences $r3;
        int $i0;
        java.lang.StringBuilder $r4;

        r0 := @this: org.openhab.habdroid.core.OpenHABTracker;

        specialinvoke r0.<org.openhab.habdroid.core.OpenHABTracker: void bonjourDiscoveryFinished()>();

        $r1 = <org.openhab.habdroid.core.OpenHABTracker: java.lang.String TAG>;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>($r1, "Service resolve failed, switching to remote URL");

        $r2 = r0.<org.openhab.habdroid.core.OpenHABTracker: android.content.Context mCtx>;

        $r3 = staticinvoke <android.preference.PreferenceManager: android.content.SharedPreferences getDefaultSharedPreferences(android.content.Context)>($r2);

        $r1 = interfaceinvoke $r3.<android.content.SharedPreferences: java.lang.String getString(java.lang.String,java.lang.String)>("default_openhab_alturl", "");

        $r1 = staticinvoke <org.openhab.habdroid.util.Util: java.lang.String normalizeUrl(java.lang.String)>($r1);

        r0.<org.openhab.habdroid.core.OpenHABTracker: java.lang.String mOpenHABUrl> = $r1;

        $r1 = r0.<org.openhab.habdroid.core.OpenHABTracker: java.lang.String mOpenHABUrl>;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        $r1 = <org.openhab.habdroid.core.OpenHABTracker: java.lang.String TAG>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Connecting to remote URL ");

        $r5 = r0.<org.openhab.habdroid.core.OpenHABTracker: java.lang.String mOpenHABUrl>;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r1, $r5);

        $r1 = r0.<org.openhab.habdroid.core.OpenHABTracker: java.lang.String mOpenHABUrl>;

        specialinvoke r0.<org.openhab.habdroid.core.OpenHABTracker: void openHABTracked(java.lang.String)>($r1);

        $r2 = r0.<org.openhab.habdroid.core.OpenHABTracker: android.content.Context mCtx>;

        $r1 = virtualinvoke $r2.<android.content.Context: java.lang.String getString(int)>(2131624242);

        specialinvoke r0.<org.openhab.habdroid.core.OpenHABTracker: void openHABMessage(java.lang.String,int,int)>($r1, 2, 2);

        return;

     label1:
        $r2 = r0.<org.openhab.habdroid.core.OpenHABTracker: android.content.Context mCtx>;

        $r1 = virtualinvoke $r2.<android.content.Context: java.lang.String getString(int)>(2131624231);

        specialinvoke r0.<org.openhab.habdroid.core.OpenHABTracker: void openHABMessage(java.lang.String,int,int)>($r1, 1, 5);

        return;
    }
    public void onServiceResolved(javax.jmdns.ServiceInfo)
    {
        org.openhab.habdroid.core.OpenHABTracker r0;
        javax.jmdns.ServiceInfo $r1;
        java.lang.String $r2, $r5;
        java.lang.StringBuilder $r3;
        java.lang.String[] $r4;
        int $i0;

        r0 := @this: org.openhab.habdroid.core.OpenHABTracker;

        $r1 := @parameter0: javax.jmdns.ServiceInfo;

        specialinvoke r0.<org.openhab.habdroid.core.OpenHABTracker: void bonjourDiscoveryFinished()>();

        $r2 = <org.openhab.habdroid.core.OpenHABTracker: java.lang.String TAG>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Service resolved: ");

        $r4 = virtualinvoke $r1.<javax.jmdns.ServiceInfo: java.lang.String[] getHostAddresses()>();

        $r5 = $r4[0];

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" port:");

        $i0 = virtualinvoke $r1.<javax.jmdns.ServiceInfo: int getPort()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r2, $r5);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("https://");

        $r4 = virtualinvoke $r1.<javax.jmdns.ServiceInfo: java.lang.String[] getHostAddresses()>();

        $r2 = $r4[0];

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $i0 = virtualinvoke $r1.<javax.jmdns.ServiceInfo: int getPort()>();

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<org.openhab.habdroid.core.OpenHABTracker: java.lang.String mOpenHABUrl> = $r2;

        $r2 = r0.<org.openhab.habdroid.core.OpenHABTracker: java.lang.String mOpenHABUrl>;

        specialinvoke r0.<org.openhab.habdroid.core.OpenHABTracker: void openHABTracked(java.lang.String)>($r2);

        return;
    }
    public void start()
    {
        org.openhab.habdroid.core.OpenHABTracker r0;
        android.content.Context $r1;
        android.content.SharedPreferences $r2;
        java.lang.Object $r3;
        android.net.ConnectivityManager r4;
        android.net.NetworkInfo $r5;
        boolean $z0;
        java.lang.String $r6, $r8;
        java.lang.StringBuilder $r7;
        int $i0;
        org.openhab.habdroid.util.AsyncServiceResolver $r9;
        java.lang.Object[] $r10;

        r0 := @this: org.openhab.habdroid.core.OpenHABTracker;

        $r1 = r0.<org.openhab.habdroid.core.OpenHABTracker: android.content.Context mCtx>;

        $r2 = staticinvoke <android.preference.PreferenceManager: android.content.SharedPreferences getDefaultSharedPreferences(android.content.Context)>($r1);

        $r1 = r0.<org.openhab.habdroid.core.OpenHABTracker: android.content.Context mCtx>;

        $r3 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("connectivity");

        r4 = (android.net.ConnectivityManager) $r3;

        $r5 = virtualinvoke r4.<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>();

        if $r5 == null goto label8;

        $z0 = interfaceinvoke $r2.<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>("default_openhab_demomode", 0);

        if $z0 == 0 goto label1;

        $r1 = r0.<org.openhab.habdroid.core.OpenHABTracker: android.content.Context mCtx>;

        $r6 = virtualinvoke $r1.<android.content.Context: java.lang.String getString(int)>(2131626377);

        r0.<org.openhab.habdroid.core.OpenHABTracker: java.lang.String mOpenHABUrl> = $r6;

        $r6 = <org.openhab.habdroid.core.OpenHABTracker: java.lang.String TAG>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Demo mode, url = ");

        $r8 = r0.<org.openhab.habdroid.core.OpenHABTracker: java.lang.String mOpenHABUrl>;

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r6, $r8);

        $r6 = r0.<org.openhab.habdroid.core.OpenHABTracker: java.lang.String mOpenHABUrl>;

        specialinvoke r0.<org.openhab.habdroid.core.OpenHABTracker: void openHABTracked(java.lang.String)>($r6);

        $r1 = r0.<org.openhab.habdroid.core.OpenHABTracker: android.content.Context mCtx>;

        $r6 = virtualinvoke $r1.<android.content.Context: java.lang.String getString(int)>(2131624245);

        specialinvoke r0.<org.openhab.habdroid.core.OpenHABTracker: void openHABMessage(java.lang.String,int,int)>($r6, 2, 5);

        return;

     label1:
        $i0 = virtualinvoke $r5.<android.net.NetworkInfo: int getType()>();

        if $i0 != 0 goto label3;

        $r6 = interfaceinvoke $r2.<android.content.SharedPreferences: java.lang.String getString(java.lang.String,java.lang.String)>("default_openhab_alturl", "");

        $r6 = staticinvoke <org.openhab.habdroid.util.Util: java.lang.String normalizeUrl(java.lang.String)>($r6);

        r0.<org.openhab.habdroid.core.OpenHABTracker: java.lang.String mOpenHABUrl> = $r6;

        $r6 = r0.<org.openhab.habdroid.core.OpenHABTracker: java.lang.String mOpenHABUrl>;

        $i0 = virtualinvoke $r6.<java.lang.String: int length()>();

        if $i0 <= 0 goto label2;

        $r6 = <org.openhab.habdroid.core.OpenHABTracker: java.lang.String TAG>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Connecting to remote URL ");

        $r8 = r0.<org.openhab.habdroid.core.OpenHABTracker: java.lang.String mOpenHABUrl>;

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r6, $r8);

        $r6 = r0.<org.openhab.habdroid.core.OpenHABTracker: java.lang.String mOpenHABUrl>;

        specialinvoke r0.<org.openhab.habdroid.core.OpenHABTracker: void openHABTracked(java.lang.String)>($r6);

        $r1 = r0.<org.openhab.habdroid.core.OpenHABTracker: android.content.Context mCtx>;

        $r6 = virtualinvoke $r1.<android.content.Context: java.lang.String getString(int)>(2131624242);

        specialinvoke r0.<org.openhab.habdroid.core.OpenHABTracker: void openHABMessage(java.lang.String,int,int)>($r6, 2, 2);

        return;

     label2:
        $r1 = r0.<org.openhab.habdroid.core.OpenHABTracker: android.content.Context mCtx>;

        $r6 = virtualinvoke $r1.<android.content.Context: java.lang.String getString(int)>(2131624231);

        specialinvoke r0.<org.openhab.habdroid.core.OpenHABTracker: void openHABMessage(java.lang.String,int,int)>($r6, 1, 5);

        return;

     label3:
        $i0 = virtualinvoke $r5.<android.net.NetworkInfo: int getType()>();

        if $i0 == 1 goto label4;

        $i0 = virtualinvoke $r5.<android.net.NetworkInfo: int getType()>();

        if $i0 != 9 goto label7;

     label4:
        $r6 = interfaceinvoke $r2.<android.content.SharedPreferences: java.lang.String getString(java.lang.String,java.lang.String)>("default_openhab_url", "");

        $r6 = staticinvoke <org.openhab.habdroid.util.Util: java.lang.String normalizeUrl(java.lang.String)>($r6);

        r0.<org.openhab.habdroid.core.OpenHABTracker: java.lang.String mOpenHABUrl> = $r6;

        $r6 = r0.<org.openhab.habdroid.core.OpenHABTracker: java.lang.String mOpenHABUrl>;

        $i0 = virtualinvoke $r6.<java.lang.String: int length()>();

        if $i0 <= 0 goto label5;

        $r6 = r0.<org.openhab.habdroid.core.OpenHABTracker: java.lang.String mOpenHABUrl>;

        $z0 = specialinvoke r0.<org.openhab.habdroid.core.OpenHABTracker: boolean checkUrlReachability(java.lang.String)>($r6);

        if $z0 == 0 goto label5;

        $r6 = <org.openhab.habdroid.core.OpenHABTracker: java.lang.String TAG>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Connecting to local URL = ");

        $r8 = r0.<org.openhab.habdroid.core.OpenHABTracker: java.lang.String mOpenHABUrl>;

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r6, $r8);

        $r6 = r0.<org.openhab.habdroid.core.OpenHABTracker: java.lang.String mOpenHABUrl>;

        specialinvoke r0.<org.openhab.habdroid.core.OpenHABTracker: void openHABTracked(java.lang.String)>($r6);

        $r1 = r0.<org.openhab.habdroid.core.OpenHABTracker: android.content.Context mCtx>;

        $r6 = virtualinvoke $r1.<android.content.Context: java.lang.String getString(int)>(2131624243);

        specialinvoke r0.<org.openhab.habdroid.core.OpenHABTracker: void openHABMessage(java.lang.String,int,int)>($r6, 2, 1);

        return;

     label5:
        $r6 = interfaceinvoke $r2.<android.content.SharedPreferences: java.lang.String getString(java.lang.String,java.lang.String)>("default_openhab_alturl", "");

        $r6 = staticinvoke <org.openhab.habdroid.util.Util: java.lang.String normalizeUrl(java.lang.String)>($r6);

        r0.<org.openhab.habdroid.core.OpenHABTracker: java.lang.String mOpenHABUrl> = $r6;

        $r6 = r0.<org.openhab.habdroid.core.OpenHABTracker: java.lang.String mOpenHABUrl>;

        $i0 = virtualinvoke $r6.<java.lang.String: int length()>();

        if $i0 <= 0 goto label6;

        $r6 = <org.openhab.habdroid.core.OpenHABTracker: java.lang.String TAG>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Connecting to remote URL ");

        $r8 = r0.<org.openhab.habdroid.core.OpenHABTracker: java.lang.String mOpenHABUrl>;

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r6, $r8);

        $r6 = r0.<org.openhab.habdroid.core.OpenHABTracker: java.lang.String mOpenHABUrl>;

        specialinvoke r0.<org.openhab.habdroid.core.OpenHABTracker: void openHABTracked(java.lang.String)>($r6);

        $r1 = r0.<org.openhab.habdroid.core.OpenHABTracker: android.content.Context mCtx>;

        $r6 = virtualinvoke $r1.<android.content.Context: java.lang.String getString(int)>(2131624242);

        specialinvoke r0.<org.openhab.habdroid.core.OpenHABTracker: void openHABMessage(java.lang.String,int,int)>($r6, 2, 2);

        return;

     label6:
        $r9 = new org.openhab.habdroid.util.AsyncServiceResolver;

        $r1 = r0.<org.openhab.habdroid.core.OpenHABTracker: android.content.Context mCtx>;

        $r6 = r0.<org.openhab.habdroid.core.OpenHABTracker: java.lang.String mOpenHABServiceType>;

        specialinvoke $r9.<org.openhab.habdroid.util.AsyncServiceResolver: void <init>(android.content.Context,org.openhab.habdroid.util.AsyncServiceResolverListener,java.lang.String)>($r1, r0, $r6);

        r0.<org.openhab.habdroid.core.OpenHABTracker: org.openhab.habdroid.util.AsyncServiceResolver mServiceResolver> = $r9;

        specialinvoke r0.<org.openhab.habdroid.core.OpenHABTracker: void bonjourDiscoveryStarted()>();

        $r9 = r0.<org.openhab.habdroid.core.OpenHABTracker: org.openhab.habdroid.util.AsyncServiceResolver mServiceResolver>;

        virtualinvoke $r9.<org.openhab.habdroid.util.AsyncServiceResolver: void start()>();

        return;

     label7:
        $r6 = <org.openhab.habdroid.core.OpenHABTracker: java.lang.String TAG>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Network type (");

        $r8 = virtualinvoke $r5.<android.net.NetworkInfo: java.lang.String getTypeName()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is unsupported");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r6, $r8);

        $r1 = r0.<org.openhab.habdroid.core.OpenHABTracker: android.content.Context mCtx>;

        $r6 = virtualinvoke $r1.<android.content.Context: java.lang.String getString(int)>(2131624230);

        $r10 = newarray (java.lang.Object)[1];

        $r8 = virtualinvoke $r5.<android.net.NetworkInfo: java.lang.String getTypeName()>();

        $r10[0] = $r8;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>($r6, $r10);

        specialinvoke r0.<org.openhab.habdroid.core.OpenHABTracker: void openHABMessage(java.lang.String,int,int)>($r6, 1, 5);

        return;

     label8:
        $r6 = <org.openhab.habdroid.core.OpenHABTracker: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r6, "Network is not available");

        $r1 = r0.<org.openhab.habdroid.core.OpenHABTracker: android.content.Context mCtx>;

        $r6 = virtualinvoke $r1.<android.content.Context: java.lang.String getString(int)>(2131624229);

        specialinvoke r0.<org.openhab.habdroid.core.OpenHABTracker: void openHABMessage(java.lang.String,int,int)>($r6, 1, 5);

        return;
    }
    public void stop()
    {
        org.openhab.habdroid.core.OpenHABTracker r0;
        java.lang.RuntimeException r1;
        java.lang.String $r2, $r5;
        android.content.Context $r3;
        org.openhab.habdroid.core.ConnectivityChangeReceiver $r4;

        r0 := @this: org.openhab.habdroid.core.OpenHABTracker;

     label1:
        $r3 = r0.<org.openhab.habdroid.core.OpenHABTracker: android.content.Context mCtx>;

        $r4 = r0.<org.openhab.habdroid.core.OpenHABTracker: org.openhab.habdroid.core.ConnectivityChangeReceiver mConnectivityChangeReceiver>;

        virtualinvoke $r3.<android.content.Context: void unregisterReceiver(android.content.BroadcastReceiver)>($r4);

     label2:
        return;

     label3:
        r1 := @caughtexception;

        $r5 = <org.openhab.habdroid.core.OpenHABTracker: java.lang.String TAG>;

        $r2 = virtualinvoke r1.<java.lang.RuntimeException: java.lang.String getMessage()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r5, $r2);

        return;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }
