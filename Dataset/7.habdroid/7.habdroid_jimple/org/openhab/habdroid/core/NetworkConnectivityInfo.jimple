org.openhab.habdroid.core.NetworkConnectivityInfo extends java.lang.Object implements android.os.Parcelable
public static final android.os.Parcelable$Creator CREATOR
private int mNetworkType
private java.lang.String mSsid
    static void <clinit>()
    {
        org.openhab.habdroid.core.NetworkConnectivityInfo$1 $r0;

        $r0 = new org.openhab.habdroid.core.NetworkConnectivityInfo$1;

        specialinvoke $r0.<org.openhab.habdroid.core.NetworkConnectivityInfo$1: void <init>()>();

        <org.openhab.habdroid.core.NetworkConnectivityInfo: android.os.Parcelable$Creator CREATOR> = $r0;

        return;
    }
    public void <init>()
    {
        org.openhab.habdroid.core.NetworkConnectivityInfo r0;

        r0 := @this: org.openhab.habdroid.core.NetworkConnectivityInfo;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.openhab.habdroid.core.NetworkConnectivityInfo: java.lang.String mSsid> = "";

        r0.<org.openhab.habdroid.core.NetworkConnectivityInfo: int mNetworkType> = -1;

        return;
    }
    private void <init>(android.os.Parcel)
    {
        org.openhab.habdroid.core.NetworkConnectivityInfo r0;
        android.os.Parcel $r1;
        int $i0;
        java.lang.String $r2;

        r0 := @this: org.openhab.habdroid.core.NetworkConnectivityInfo;

        $r1 := @parameter0: android.os.Parcel;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.openhab.habdroid.core.NetworkConnectivityInfo: java.lang.String mSsid> = "";

        r0.<org.openhab.habdroid.core.NetworkConnectivityInfo: int mNetworkType> = -1;

        $i0 = virtualinvoke $r1.<android.os.Parcel: int readInt()>();

        virtualinvoke r0.<org.openhab.habdroid.core.NetworkConnectivityInfo: void setNetworkType(int)>($i0);

        $r2 = virtualinvoke $r1.<android.os.Parcel: java.lang.String readString()>();

        virtualinvoke r0.<org.openhab.habdroid.core.NetworkConnectivityInfo: void setSsid(java.lang.String)>($r2);

        return;
    }
    void <init>(android.os.Parcel, org.openhab.habdroid.core.NetworkConnectivityInfo$1)
    {
        org.openhab.habdroid.core.NetworkConnectivityInfo r0;
        android.os.Parcel $r1;
        org.openhab.habdroid.core.NetworkConnectivityInfo$1 $r2;

        r0 := @this: org.openhab.habdroid.core.NetworkConnectivityInfo;

        $r1 := @parameter0: android.os.Parcel;

        $r2 := @parameter1: org.openhab.habdroid.core.NetworkConnectivityInfo$1;

        specialinvoke r0.<org.openhab.habdroid.core.NetworkConnectivityInfo: void <init>(android.os.Parcel)>($r1);

        return;
    }
    public static org.openhab.habdroid.core.NetworkConnectivityInfo currentNetworkConnectivityInfo(android.content.Context)
    {
        android.content.Context $r0;
        org.openhab.habdroid.core.NetworkConnectivityInfo r1;
        java.lang.Object $r2;
        android.net.ConnectivityManager r3;
        android.net.NetworkInfo $r4;
        boolean $z0;
        int $i0;
        android.net.wifi.WifiManager r5;
        android.net.wifi.WifiInfo $r6;
        java.lang.String $r7;

        $r0 := @parameter0: android.content.Context;

        $r2 = virtualinvoke $r0.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("connectivity");

        r3 = (android.net.ConnectivityManager) $r2;

        r1 = new org.openhab.habdroid.core.NetworkConnectivityInfo;

        specialinvoke r1.<org.openhab.habdroid.core.NetworkConnectivityInfo: void <init>()>();

        $r4 = virtualinvoke r3.<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>();

        if $r4 == null goto label1;

        $z0 = virtualinvoke $r4.<android.net.NetworkInfo: boolean isConnected()>();

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke $r4.<android.net.NetworkInfo: int getType()>();

        virtualinvoke r1.<org.openhab.habdroid.core.NetworkConnectivityInfo: void setNetworkType(int)>($i0);

        $i0 = virtualinvoke $r4.<android.net.NetworkInfo: int getType()>();

        if $i0 != 1 goto label1;

        $r0 = virtualinvoke $r0.<android.content.Context: android.content.Context getApplicationContext()>();

        $r2 = virtualinvoke $r0.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("wifi");

        r5 = (android.net.wifi.WifiManager) $r2;

        $r6 = virtualinvoke r5.<android.net.wifi.WifiManager: android.net.wifi.WifiInfo getConnectionInfo()>();

        if $r6 == null goto label1;

        $r7 = virtualinvoke $r6.<android.net.wifi.WifiInfo: java.lang.String getSSID()>();

        virtualinvoke r1.<org.openhab.habdroid.core.NetworkConnectivityInfo: void setSsid(java.lang.String)>($r7);

     label1:
        return r1;
    }
    public int describeContents()
    {
        org.openhab.habdroid.core.NetworkConnectivityInfo r0;

        r0 := @this: org.openhab.habdroid.core.NetworkConnectivityInfo;

        return 0;
    }
    public boolean equals(org.openhab.habdroid.core.NetworkConnectivityInfo)
    {
        org.openhab.habdroid.core.NetworkConnectivityInfo r0, $r1;
        int $i0, $i1;
        java.lang.String $r2, $r3;
        boolean $z0;

        r0 := @this: org.openhab.habdroid.core.NetworkConnectivityInfo;

        $r1 := @parameter0: org.openhab.habdroid.core.NetworkConnectivityInfo;

        $i0 = virtualinvoke $r1.<org.openhab.habdroid.core.NetworkConnectivityInfo: int getNetworkType()>();

        if $i0 != 1 goto label1;

        $r2 = virtualinvoke $r1.<org.openhab.habdroid.core.NetworkConnectivityInfo: java.lang.String getSsid()>();

        $r3 = virtualinvoke r0.<org.openhab.habdroid.core.NetworkConnectivityInfo: java.lang.String getSsid()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label2;

        return 1;

     label1:
        $i0 = virtualinvoke $r1.<org.openhab.habdroid.core.NetworkConnectivityInfo: int getNetworkType()>();

        $i1 = virtualinvoke r0.<org.openhab.habdroid.core.NetworkConnectivityInfo: int getNetworkType()>();

        if $i0 == $i1 goto label3;

     label2:
        return 0;

     label3:
        return 1;
    }
    public int getNetworkType()
    {
        org.openhab.habdroid.core.NetworkConnectivityInfo r0;
        int i0;

        r0 := @this: org.openhab.habdroid.core.NetworkConnectivityInfo;

        i0 = r0.<org.openhab.habdroid.core.NetworkConnectivityInfo: int mNetworkType>;

        return i0;
    }
    public java.lang.String getSsid()
    {
        org.openhab.habdroid.core.NetworkConnectivityInfo r0;
        java.lang.String r1;

        r0 := @this: org.openhab.habdroid.core.NetworkConnectivityInfo;

        r1 = r0.<org.openhab.habdroid.core.NetworkConnectivityInfo: java.lang.String mSsid>;

        return r1;
    }
    public void setNetworkType(int)
    {
        org.openhab.habdroid.core.NetworkConnectivityInfo r0;
        int $i0;

        r0 := @this: org.openhab.habdroid.core.NetworkConnectivityInfo;

        $i0 := @parameter0: int;

        r0.<org.openhab.habdroid.core.NetworkConnectivityInfo: int mNetworkType> = $i0;

        return;
    }
    public void setSsid(java.lang.String)
    {
        org.openhab.habdroid.core.NetworkConnectivityInfo r0;
        java.lang.String $r1;

        r0 := @this: org.openhab.habdroid.core.NetworkConnectivityInfo;

        $r1 := @parameter0: java.lang.String;

        r0.<org.openhab.habdroid.core.NetworkConnectivityInfo: java.lang.String mSsid> = $r1;

        return;
    }
    public void writeToParcel(android.os.Parcel, int)
    {
        org.openhab.habdroid.core.NetworkConnectivityInfo r0;
        android.os.Parcel $r1;
        int $i0;
        java.lang.String $r2;

        r0 := @this: org.openhab.habdroid.core.NetworkConnectivityInfo;

        $r1 := @parameter0: android.os.Parcel;

        $i0 := @parameter1: int;

        $i0 = virtualinvoke r0.<org.openhab.habdroid.core.NetworkConnectivityInfo: int getNetworkType()>();

        virtualinvoke $r1.<android.os.Parcel: void writeInt(int)>($i0);

        $r2 = virtualinvoke r0.<org.openhab.habdroid.core.NetworkConnectivityInfo: java.lang.String getSsid()>();

        virtualinvoke $r1.<android.os.Parcel: void writeString(java.lang.String)>($r2);

        return;
    }
