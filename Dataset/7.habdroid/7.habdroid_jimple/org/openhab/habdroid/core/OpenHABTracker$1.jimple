org.openhab.habdroid.core.OpenHABTracker$1 extends android.os.AsyncTask
final org.openhab.habdroid.core.OpenHABTracker this$0
    void <init>(org.openhab.habdroid.core.OpenHABTracker)
    {
        org.openhab.habdroid.core.OpenHABTracker$1 r0;
        org.openhab.habdroid.core.OpenHABTracker $r1;

        r0 := @this: org.openhab.habdroid.core.OpenHABTracker$1;

        $r1 := @parameter0: org.openhab.habdroid.core.OpenHABTracker;

        r0.<org.openhab.habdroid.core.OpenHABTracker$1: org.openhab.habdroid.core.OpenHABTracker this$0> = $r1;

        specialinvoke r0.<android.os.AsyncTask: void <init>()>();

        return;
    }
    protected transient java.lang.Boolean doInBackground(java.lang.String[])
    {
        org.openhab.habdroid.core.OpenHABTracker$1 r0;
        java.lang.String[] $r1;
        java.lang.Exception r2;
        java.net.Socket r3;
        java.net.URL r4;
        java.lang.String $r5, $r8;
        int $i0, i1;
        boolean $z0;
        java.net.InetSocketAddress $r6;
        java.lang.Boolean $r7;

        r0 := @this: org.openhab.habdroid.core.OpenHABTracker$1;

        $r1 := @parameter0: java.lang.String[];

        r4 = new java.net.URL;

     label01:
        $r5 = $r1[0];

        specialinvoke r4.<java.net.URL: void <init>(java.lang.String)>($r5);

        $i0 = virtualinvoke r4.<java.net.URL: int getPort()>();

     label02:
        i1 = $i0;

     label03:
        $r5 = virtualinvoke r4.<java.net.URL: java.lang.String getProtocol()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("http");

     label04:
        if $z0 == 0 goto label05;

        if $i0 != -1 goto label05;

        i1 = 80;

     label05:
        $r5 = virtualinvoke r4.<java.net.URL: java.lang.String getProtocol()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("https");

     label06:
        if $z0 == 0 goto label07;

        if i1 != -1 goto label07;

        i1 = 443;

     label07:
        r3 = new java.net.Socket;

     label08:
        specialinvoke r3.<java.net.Socket: void <init>()>();

     label09:
        $r6 = new java.net.InetSocketAddress;

     label10:
        $r5 = virtualinvoke r4.<java.net.URL: java.lang.String getHost()>();

        specialinvoke $r6.<java.net.InetSocketAddress: void <init>(java.lang.String,int)>($r5, i1);

        virtualinvoke r3.<java.net.Socket: void connect(java.net.SocketAddress,int)>($r6, 1000);

        $r5 = staticinvoke <org.openhab.habdroid.core.OpenHABTracker: java.lang.String access$000()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r5, "Socket connected");

        virtualinvoke r3.<java.net.Socket: void close()>();

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

     label11:
        return $r7;

     label12:
        r2 := @caughtexception;

        $r5 = staticinvoke <org.openhab.habdroid.core.OpenHABTracker: java.lang.String access$000()>();

        $r8 = virtualinvoke r2.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r5, $r8);

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        return $r7;

        catch java.lang.Exception from label01 to label02 with label12;
        catch java.lang.Exception from label03 to label04 with label12;
        catch java.lang.Exception from label05 to label06 with label12;
        catch java.lang.Exception from label08 to label09 with label12;
        catch java.lang.Exception from label10 to label11 with label12;
    }
    protected volatile java.lang.Object doInBackground(java.lang.Object[])
    {
        org.openhab.habdroid.core.OpenHABTracker$1 r0;
        java.lang.Boolean $r1;
        java.lang.Object[] $r2;
        java.lang.String[] $r3;

        r0 := @this: org.openhab.habdroid.core.OpenHABTracker$1;

        $r2 := @parameter0: java.lang.Object[];

        $r3 = (java.lang.String[]) $r2;

        $r1 = virtualinvoke r0.<org.openhab.habdroid.core.OpenHABTracker$1: java.lang.Boolean doInBackground(java.lang.String[])>($r3);

        return $r1;
    }
