org.openhab.habdroid.core.notifications.NotificationSettings extends java.lang.Object
private static final java.lang.String GCM_OBJECT_KEY
private static final java.lang.String GCM_SENDER_ID_KEY
private static final java.lang.String SETTINGS_ROUTE
private static final java.lang.String TAG
private org.openhab.habdroid.util.MySyncHttpClient httpClient
private boolean isLoaded
private java.lang.String openHABCloudPassword
private java.net.URL openHABCloudURL
private java.lang.String openHABCloudUsername
private org.json.JSONObject settings
    static void <clinit>()
    {
        java.lang.String $r0;
        java.lang.Class $r1;

        $r1 = class "Lorg/openhab/habdroid/core/notifications/NotificationSettings;";

        $r0 = virtualinvoke $r1.<java.lang.Class: java.lang.String getSimpleName()>();

        <org.openhab.habdroid.core.notifications.NotificationSettings: java.lang.String TAG> = $r0;

        return;
    }
    public void <init>(java.lang.String, org.openhab.habdroid.util.MySyncHttpClient) throws java.net.MalformedURLException
    {
        org.openhab.habdroid.core.notifications.NotificationSettings r0;
        java.lang.String $r1;
        org.openhab.habdroid.util.MySyncHttpClient $r2;
        java.net.URL $r3;

        r0 := @this: org.openhab.habdroid.core.notifications.NotificationSettings;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.openhab.habdroid.util.MySyncHttpClient;

        $r3 = new java.net.URL;

        specialinvoke $r3.<java.net.URL: void <init>(java.lang.String)>($r1);

        specialinvoke r0.<org.openhab.habdroid.core.notifications.NotificationSettings: void <init>(java.net.URL,org.openhab.habdroid.util.MySyncHttpClient)>($r3, $r2);

        return;
    }
    public void <init>(java.net.URL, org.openhab.habdroid.util.MySyncHttpClient)
    {
        org.openhab.habdroid.core.notifications.NotificationSettings r0;
        java.net.URL $r1;
        org.openhab.habdroid.util.MySyncHttpClient $r2;
        org.json.JSONObject $r3;

        r0 := @this: org.openhab.habdroid.core.notifications.NotificationSettings;

        $r1 := @parameter0: java.net.URL;

        $r2 := @parameter1: org.openhab.habdroid.util.MySyncHttpClient;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new org.json.JSONObject;

        specialinvoke $r3.<org.json.JSONObject: void <init>()>();

        r0.<org.openhab.habdroid.core.notifications.NotificationSettings: org.json.JSONObject settings> = $r3;

        r0.<org.openhab.habdroid.core.notifications.NotificationSettings: boolean isLoaded> = 0;

        r0.<org.openhab.habdroid.core.notifications.NotificationSettings: java.net.URL openHABCloudURL> = $r1;

        r0.<org.openhab.habdroid.core.notifications.NotificationSettings: org.openhab.habdroid.util.MySyncHttpClient httpClient> = $r2;

        return;
    }
    static java.lang.String access$100()
    {
        java.lang.String r0;

        r0 = <org.openhab.habdroid.core.notifications.NotificationSettings: java.lang.String TAG>;

        return r0;
    }
    static boolean access$202(org.openhab.habdroid.core.notifications.NotificationSettings, boolean)
    {
        org.openhab.habdroid.core.notifications.NotificationSettings $r0;
        boolean $z0;

        $r0 := @parameter0: org.openhab.habdroid.core.notifications.NotificationSettings;

        $z0 := @parameter1: boolean;

        $r0.<org.openhab.habdroid.core.notifications.NotificationSettings: boolean isLoaded> = $z0;

        return $z0;
    }
    static org.json.JSONObject access$302(org.openhab.habdroid.core.notifications.NotificationSettings, org.json.JSONObject)
    {
        org.openhab.habdroid.core.notifications.NotificationSettings $r0;
        org.json.JSONObject $r1;

        $r0 := @parameter0: org.openhab.habdroid.core.notifications.NotificationSettings;

        $r1 := @parameter1: org.json.JSONObject;

        $r0.<org.openhab.habdroid.core.notifications.NotificationSettings: org.json.JSONObject settings> = $r1;

        return $r1;
    }
    private void loadSettings()
    {
        org.openhab.habdroid.core.notifications.NotificationSettings r0;
        java.net.MalformedURLException r1;
        boolean $z0;
        java.lang.String $r2, $r5, $r7;
        java.net.URL $r3, $r4;
        java.lang.StringBuilder $r6;
        org.openhab.habdroid.util.MySyncHttpClient $r8;
        org.openhab.habdroid.core.notifications.NotificationSettings$SettingsAsyncHttpResponseHandler $r9;

        r0 := @this: org.openhab.habdroid.core.notifications.NotificationSettings;

        $z0 = r0.<org.openhab.habdroid.core.notifications.NotificationSettings: boolean isLoaded>;

        if $z0 == 0 goto label1;

        $r2 = <org.openhab.habdroid.core.notifications.NotificationSettings: java.lang.String TAG>;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r2, "Requested to load notifications settings, but it is loaded already.");

        return;

     label1:
        $r3 = new java.net.URL;

        $r4 = r0.<org.openhab.habdroid.core.notifications.NotificationSettings: java.net.URL openHABCloudURL>;

     label2:
        specialinvoke $r3.<java.net.URL: void <init>(java.net.URL,java.lang.String)>($r4, "/api/v1/settings/notifications");

        $r2 = virtualinvoke $r3.<java.net.URL: java.lang.String toString()>();

     label3:
        $r5 = <org.openhab.habdroid.core.notifications.NotificationSettings: java.lang.String TAG>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Request notification settings from: ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r5, $r7);

        $r8 = r0.<org.openhab.habdroid.core.notifications.NotificationSettings: org.openhab.habdroid.util.MySyncHttpClient httpClient>;

        $r9 = new org.openhab.habdroid.core.notifications.NotificationSettings$SettingsAsyncHttpResponseHandler;

        specialinvoke $r9.<org.openhab.habdroid.core.notifications.NotificationSettings$SettingsAsyncHttpResponseHandler: void <init>(org.openhab.habdroid.core.notifications.NotificationSettings,org.openhab.habdroid.core.notifications.NotificationSettings$1)>(r0, null);

        virtualinvoke $r8.<org.openhab.habdroid.util.MySyncHttpClient: java.lang.Object get(java.lang.String,org.openhab.habdroid.util.MyHttpClient$ResponseHandler)>($r2, $r9);

        return;

     label4:
        r1 := @caughtexception;

        $r2 = <org.openhab.habdroid.core.notifications.NotificationSettings: java.lang.String TAG>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to build request URL, got error: ");

        $r5 = virtualinvoke r1.<java.net.MalformedURLException: java.lang.String getMessage()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>($r2, $r5, r1);

        return;

        catch java.net.MalformedURLException from label2 to label3 with label4;
    }
    private void updateHttpClientAuth()
    {
        org.openhab.habdroid.core.notifications.NotificationSettings r0;
        org.openhab.habdroid.util.MySyncHttpClient $r1;
        java.lang.String $r2, $r3;

        r0 := @this: org.openhab.habdroid.core.notifications.NotificationSettings;

        $r1 = r0.<org.openhab.habdroid.core.notifications.NotificationSettings: org.openhab.habdroid.util.MySyncHttpClient httpClient>;

        $r2 = r0.<org.openhab.habdroid.core.notifications.NotificationSettings: java.lang.String openHABCloudUsername>;

        $r3 = r0.<org.openhab.habdroid.core.notifications.NotificationSettings: java.lang.String openHABCloudPassword>;

        virtualinvoke $r1.<org.openhab.habdroid.util.MySyncHttpClient: void setBasicAuth(java.lang.String,java.lang.String)>($r2, $r3);

        return;
    }
    org.openhab.habdroid.util.MyHttpClient getHttpClient()
    {
        org.openhab.habdroid.core.notifications.NotificationSettings r0;
        org.openhab.habdroid.util.MySyncHttpClient r1;

        r0 := @this: org.openhab.habdroid.core.notifications.NotificationSettings;

        r1 = r0.<org.openhab.habdroid.core.notifications.NotificationSettings: org.openhab.habdroid.util.MySyncHttpClient httpClient>;

        return r1;
    }
    public java.lang.String getOpenHABCloudPassword()
    {
        org.openhab.habdroid.core.notifications.NotificationSettings r0;
        java.lang.String r1;

        r0 := @this: org.openhab.habdroid.core.notifications.NotificationSettings;

        r1 = r0.<org.openhab.habdroid.core.notifications.NotificationSettings: java.lang.String openHABCloudPassword>;

        return r1;
    }
    public java.net.URL getOpenHABCloudURL()
    {
        org.openhab.habdroid.core.notifications.NotificationSettings r0;
        java.net.URL r1;

        r0 := @this: org.openhab.habdroid.core.notifications.NotificationSettings;

        r1 = r0.<org.openhab.habdroid.core.notifications.NotificationSettings: java.net.URL openHABCloudURL>;

        return r1;
    }
    public java.lang.String getOpenHABCloudUsername()
    {
        org.openhab.habdroid.core.notifications.NotificationSettings r0;
        java.lang.String r1;

        r0 := @this: org.openhab.habdroid.core.notifications.NotificationSettings;

        r1 = r0.<org.openhab.habdroid.core.notifications.NotificationSettings: java.lang.String openHABCloudUsername>;

        return r1;
    }
    public java.lang.String getSenderId()
    {
        org.openhab.habdroid.core.notifications.NotificationSettings r0;
        org.json.JSONException r1;
        java.lang.String $r2;
        boolean $z0;
        org.json.JSONObject $r3;

        r0 := @this: org.openhab.habdroid.core.notifications.NotificationSettings;

        $z0 = r0.<org.openhab.habdroid.core.notifications.NotificationSettings: boolean isLoaded>;

        if $z0 != 0 goto label1;

        specialinvoke r0.<org.openhab.habdroid.core.notifications.NotificationSettings: void loadSettings()>();

     label1:
        $r3 = r0.<org.openhab.habdroid.core.notifications.NotificationSettings: org.json.JSONObject settings>;

     label2:
        $r2 = virtualinvoke $r3.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("senderId");

     label3:
        return $r2;

     label4:
        r1 := @caughtexception;

        $r2 = <org.openhab.habdroid.core.notifications.NotificationSettings: java.lang.String TAG>;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r2, "The settings does not contain a senderId, return the default one.");

        return "737820980945";

        catch org.json.JSONException from label2 to label3 with label4;
    }
    public void setOpenHABCloudPassword(java.lang.String)
    {
        org.openhab.habdroid.core.notifications.NotificationSettings r0;
        java.lang.String $r1;

        r0 := @this: org.openhab.habdroid.core.notifications.NotificationSettings;

        $r1 := @parameter0: java.lang.String;

        r0.<org.openhab.habdroid.core.notifications.NotificationSettings: java.lang.String openHABCloudPassword> = $r1;

        specialinvoke r0.<org.openhab.habdroid.core.notifications.NotificationSettings: void updateHttpClientAuth()>();

        return;
    }
    public void setOpenHABCloudUsername(java.lang.String)
    {
        org.openhab.habdroid.core.notifications.NotificationSettings r0;
        java.lang.String $r1;

        r0 := @this: org.openhab.habdroid.core.notifications.NotificationSettings;

        $r1 := @parameter0: java.lang.String;

        r0.<org.openhab.habdroid.core.notifications.NotificationSettings: java.lang.String openHABCloudUsername> = $r1;

        specialinvoke r0.<org.openhab.habdroid.core.notifications.NotificationSettings: void updateHttpClientAuth()>();

        return;
    }
