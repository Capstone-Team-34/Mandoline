org.openhab.habdroid.util.MyHttpClient extends java.lang.Object
private static final java.lang.String TAG
protected okhttp3.OkHttpClient client
protected okhttp3.OkHttpClient$Builder clientBuilder
protected java.util.Map headers
    static void <clinit>()
    {
        java.lang.String $r0;
        java.lang.Class $r1;

        $r1 = class "Lorg/openhab/habdroid/util/MyHttpClient;";

        $r0 = virtualinvoke $r1.<java.lang.Class: java.lang.String getSimpleName()>();

        <org.openhab.habdroid.util.MyHttpClient: java.lang.String TAG> = $r0;

        return;
    }
    public void <init>()
    {
        org.openhab.habdroid.util.MyHttpClient r0;
        okhttp3.OkHttpClient $r1;
        java.util.HashMap $r2;
        okhttp3.OkHttpClient$Builder $r3;

        r0 := @this: org.openhab.habdroid.util.MyHttpClient;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.openhab.habdroid.util.MyHttpClient: java.util.Map headers> = $r2;

        $r3 = new okhttp3.OkHttpClient$Builder;

        specialinvoke $r3.<okhttp3.OkHttpClient$Builder: void <init>()>();

        r0.<org.openhab.habdroid.util.MyHttpClient: okhttp3.OkHttpClient$Builder clientBuilder> = $r3;

        $r3 = r0.<org.openhab.habdroid.util.MyHttpClient: okhttp3.OkHttpClient$Builder clientBuilder>;

        $r1 = virtualinvoke $r3.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>();

        r0.<org.openhab.habdroid.util.MyHttpClient: okhttp3.OkHttpClient client> = $r1;

        return;
    }
    private org.openhab.habdroid.util.MyHttpClient$ResponseHandler getResponseHandler(org.openhab.habdroid.util.MyHttpClient$TextResponseHandler)
    {
        org.openhab.habdroid.util.MyHttpClient r0;
        org.openhab.habdroid.util.MyHttpClient$TextResponseHandler $r1;
        org.openhab.habdroid.util.MyHttpClient$3 $r2;

        r0 := @this: org.openhab.habdroid.util.MyHttpClient;

        $r1 := @parameter0: org.openhab.habdroid.util.MyHttpClient$TextResponseHandler;

        $r2 = new org.openhab.habdroid.util.MyHttpClient$3;

        specialinvoke $r2.<org.openhab.habdroid.util.MyHttpClient$3: void <init>(org.openhab.habdroid.util.MyHttpClient,org.openhab.habdroid.util.MyHttpClient$TextResponseHandler)>(r0, $r1);

        return $r2;
    }
    public void addHeader(java.lang.String, java.lang.String)
    {
        org.openhab.habdroid.util.MyHttpClient r0;
        java.lang.String $r1, $r2;
        java.util.Map $r3;

        r0 := @this: org.openhab.habdroid.util.MyHttpClient;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.openhab.habdroid.util.MyHttpClient: java.util.Map headers>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        return;
    }
    protected void clientSSLSetup(android.content.Context, java.lang.Boolean, java.lang.Boolean)
    {
        org.openhab.habdroid.util.MyHttpClient r0;
        android.content.Context $r1;
        java.lang.Boolean $r2, $r3;
        javax.net.ssl.TrustManager r4;
        boolean $z0;
        okhttp3.OkHttpClient$Builder $r5;
        javax.net.ssl.X509TrustManager r6, $r15;
        javax.net.ssl.SSLContext $r7;
        javax.net.ssl.KeyManager[] $r8;
        javax.net.ssl.TrustManager[] $r9;
        javax.net.ssl.SSLSocketFactory $r11;
        okhttp3.OkHttpClient $r12;
        java.lang.String $r13;
        javax.net.ssl.TrustManagerFactory $r14;
        int $i0, $i1;
        java.lang.Exception r16, r17;
        org.openhab.habdroid.util.MyHttpClient$1 $r18;
        org.openhab.habdroid.util.MyHttpClient$2 $r19;
        java.security.SecureRandom $r20;

        r0 := @this: org.openhab.habdroid.util.MyHttpClient;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: java.lang.Boolean;

        $r3 := @parameter2: java.lang.Boolean;

        $z0 = virtualinvoke $r2.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label01;

        $r5 = r0.<org.openhab.habdroid.util.MyHttpClient: okhttp3.OkHttpClient$Builder clientBuilder>;

        $r18 = new org.openhab.habdroid.util.MyHttpClient$1;

        specialinvoke $r18.<org.openhab.habdroid.util.MyHttpClient$1: void <init>(org.openhab.habdroid.util.MyHttpClient)>(r0);

        virtualinvoke $r5.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder hostnameVerifier(javax.net.ssl.HostnameVerifier)>($r18);

     label01:
        r6 = null;

        $z0 = virtualinvoke $r3.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label06;

        $r19 = new org.openhab.habdroid.util.MyHttpClient$2;

        r6 = $r19;

        specialinvoke $r19.<org.openhab.habdroid.util.MyHttpClient$2: void <init>(org.openhab.habdroid.util.MyHttpClient)>(r0);

     label02:
        $r7 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>("TLS");

        $r8 = staticinvoke <org.openhab.habdroid.util.MyKeyManager: javax.net.ssl.KeyManager[] getInstance(android.content.Context)>($r1);

        $r9 = newarray (javax.net.ssl.TrustManager)[1];

        $r9[0] = r6;

     label03:
        $r20 = new java.security.SecureRandom;

     label04:
        specialinvoke $r20.<java.security.SecureRandom: void <init>()>();

        virtualinvoke $r7.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r8, $r9, $r20);

        $r11 = virtualinvoke $r7.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>();

        $r5 = r0.<org.openhab.habdroid.util.MyHttpClient: okhttp3.OkHttpClient$Builder clientBuilder>;

        virtualinvoke $r5.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder sslSocketFactory(javax.net.ssl.SSLSocketFactory,javax.net.ssl.X509TrustManager)>($r11, r6);

     label05:
        $r5 = r0.<org.openhab.habdroid.util.MyHttpClient: okhttp3.OkHttpClient$Builder clientBuilder>;

        $r12 = virtualinvoke $r5.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>();

        r0.<org.openhab.habdroid.util.MyHttpClient: okhttp3.OkHttpClient client> = $r12;

        return;

     label06:
        $r13 = staticinvoke <javax.net.ssl.TrustManagerFactory: java.lang.String getDefaultAlgorithm()>();

        $r14 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>($r13);

        virtualinvoke $r14.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>(null);

        $r9 = virtualinvoke $r14.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>();

        $i0 = lengthof $r9;

     label07:
        $i1 = 0;

     label08:
        if $i1 >= $i0 goto label02;

     label09:
        r4 = $r9[$i1];

     label10:
        $z0 = r4 instanceof javax.net.ssl.X509TrustManager;

        if $z0 == 0 goto label13;

     label11:
        $r15 = (javax.net.ssl.X509TrustManager) r4;

     label12:
        r6 = $r15;

        goto label02;

     label13:
        $i1 = $i1 + 1;

        goto label08;

     label14:
        r16 := @caughtexception;

        $r13 = <org.openhab.habdroid.util.MyHttpClient: java.lang.String TAG>;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>($r13, "Getting default trust manager failed", r16);

        goto label02;

     label15:
        r17 := @caughtexception;

        $r13 = <org.openhab.habdroid.util.MyHttpClient: java.lang.String TAG>;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>($r13, "Applying certificate trust settings failed", r17);

        goto label05;

        catch java.lang.Exception from label02 to label03 with label15;
        catch java.lang.Exception from label04 to label05 with label15;
        catch java.lang.Exception from label06 to label07 with label14;
        catch java.lang.Exception from label09 to label10 with label14;
        catch java.lang.Exception from label11 to label12 with label14;
    }
    public java.lang.Object delete(java.lang.String, org.openhab.habdroid.util.MyHttpClient$ResponseHandler)
    {
        org.openhab.habdroid.util.MyHttpClient r0;
        java.lang.String $r1;
        org.openhab.habdroid.util.MyHttpClient$ResponseHandler $r2;
        java.lang.Object $r3;

        r0 := @this: org.openhab.habdroid.util.MyHttpClient;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.openhab.habdroid.util.MyHttpClient$ResponseHandler;

        $r3 = virtualinvoke r0.<org.openhab.habdroid.util.MyHttpClient: java.lang.Object method(java.lang.String,java.lang.String,java.util.Map,java.lang.String,java.lang.String,org.openhab.habdroid.util.MyHttpClient$ResponseHandler)>($r1, "DELETE", null, null, null, $r2);

        return $r3;
    }
    public java.lang.Object get(java.lang.String, java.util.Map, org.openhab.habdroid.util.MyHttpClient$ResponseHandler)
    {
        org.openhab.habdroid.util.MyHttpClient r0;
        java.lang.String $r1;
        java.util.Map r2;
        org.openhab.habdroid.util.MyHttpClient$ResponseHandler $r3;
        java.lang.Object $r4;

        r0 := @this: org.openhab.habdroid.util.MyHttpClient;

        $r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Map;

        $r3 := @parameter2: org.openhab.habdroid.util.MyHttpClient$ResponseHandler;

        $r4 = virtualinvoke r0.<org.openhab.habdroid.util.MyHttpClient: java.lang.Object method(java.lang.String,java.lang.String,java.util.Map,java.lang.String,java.lang.String,org.openhab.habdroid.util.MyHttpClient$ResponseHandler)>($r1, "GET", r2, null, null, $r3);

        return $r4;
    }
    public java.lang.Object get(java.lang.String, org.openhab.habdroid.util.MyHttpClient$ResponseHandler)
    {
        org.openhab.habdroid.util.MyHttpClient r0;
        java.lang.String $r1;
        org.openhab.habdroid.util.MyHttpClient$ResponseHandler $r2;
        java.lang.Object $r3;

        r0 := @this: org.openhab.habdroid.util.MyHttpClient;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.openhab.habdroid.util.MyHttpClient$ResponseHandler;

        $r3 = virtualinvoke r0.<org.openhab.habdroid.util.MyHttpClient: java.lang.Object method(java.lang.String,java.lang.String,java.util.Map,java.lang.String,java.lang.String,org.openhab.habdroid.util.MyHttpClient$ResponseHandler)>($r1, "GET", null, null, null, $r2);

        return $r3;
    }
    public java.lang.Object get(java.lang.String, org.openhab.habdroid.util.MyHttpClient$TextResponseHandler)
    {
        org.openhab.habdroid.util.MyHttpClient r0;
        java.lang.String $r1;
        org.openhab.habdroid.util.MyHttpClient$TextResponseHandler $r2;
        org.openhab.habdroid.util.MyHttpClient$ResponseHandler $r3;
        java.lang.Object $r4;

        r0 := @this: org.openhab.habdroid.util.MyHttpClient;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.openhab.habdroid.util.MyHttpClient$TextResponseHandler;

        $r3 = specialinvoke r0.<org.openhab.habdroid.util.MyHttpClient: org.openhab.habdroid.util.MyHttpClient$ResponseHandler getResponseHandler(org.openhab.habdroid.util.MyHttpClient$TextResponseHandler)>($r2);

        $r4 = virtualinvoke r0.<org.openhab.habdroid.util.MyHttpClient: java.lang.Object get(java.lang.String,org.openhab.habdroid.util.MyHttpClient$ResponseHandler)>($r1, $r3);

        return $r4;
    }
protected abstract java.lang.Object method(java.lang.String, java.lang.String, java.util.Map, java.lang.String, java.lang.String, org.openhab.habdroid.util.MyHttpClient$ResponseHandler) { 
// no body
} 
    public java.lang.Object post(java.lang.String, java.lang.String, java.lang.String, org.openhab.habdroid.util.MyHttpClient$ResponseHandler)
    {
        org.openhab.habdroid.util.MyHttpClient r0;
        java.lang.String $r1, $r2, $r3;
        org.openhab.habdroid.util.MyHttpClient$ResponseHandler $r4;
        java.lang.Object $r5;

        r0 := @this: org.openhab.habdroid.util.MyHttpClient;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: org.openhab.habdroid.util.MyHttpClient$ResponseHandler;

        $r5 = virtualinvoke r0.<org.openhab.habdroid.util.MyHttpClient: java.lang.Object method(java.lang.String,java.lang.String,java.util.Map,java.lang.String,java.lang.String,org.openhab.habdroid.util.MyHttpClient$ResponseHandler)>($r1, "POST", null, $r2, $r3, $r4);

        return $r5;
    }
    public java.lang.Object post(java.lang.String, java.lang.String, java.lang.String, org.openhab.habdroid.util.MyHttpClient$TextResponseHandler)
    {
        org.openhab.habdroid.util.MyHttpClient r0;
        java.lang.String $r1, $r2, $r3;
        org.openhab.habdroid.util.MyHttpClient$TextResponseHandler $r4;
        org.openhab.habdroid.util.MyHttpClient$ResponseHandler $r5;
        java.lang.Object $r6;

        r0 := @this: org.openhab.habdroid.util.MyHttpClient;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: org.openhab.habdroid.util.MyHttpClient$TextResponseHandler;

        $r5 = specialinvoke r0.<org.openhab.habdroid.util.MyHttpClient: org.openhab.habdroid.util.MyHttpClient$ResponseHandler getResponseHandler(org.openhab.habdroid.util.MyHttpClient$TextResponseHandler)>($r4);

        $r6 = virtualinvoke r0.<org.openhab.habdroid.util.MyHttpClient: java.lang.Object post(java.lang.String,java.lang.String,java.lang.String,org.openhab.habdroid.util.MyHttpClient$ResponseHandler)>($r1, $r2, $r3, $r5);

        return $r6;
    }
    public void setBasicAuth(java.lang.String, java.lang.String)
    {
        org.openhab.habdroid.util.MyHttpClient r0;
        java.lang.String $r1, $r2;

        r0 := @this: org.openhab.habdroid.util.MyHttpClient;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        virtualinvoke r0.<org.openhab.habdroid.util.MyHttpClient: void setBasicAuth(java.lang.String,java.lang.String,boolean)>($r1, $r2, 0);

        return;
    }
    public void setBasicAuth(java.lang.String, java.lang.String, boolean)
    {
        org.openhab.habdroid.util.MyHttpClient r0;
        java.lang.String $r1, $r2;
        boolean $z0;
        java.util.Map $r3;

        r0 := @this: org.openhab.habdroid.util.MyHttpClient;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $z0 := @parameter2: boolean;

        $r1 = staticinvoke <okhttp3.Credentials: java.lang.String basic(java.lang.String,java.lang.String)>($r1, $r2);

        $r3 = r0.<org.openhab.habdroid.util.MyHttpClient: java.util.Map headers>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("Authorization", $r1);

        return;
    }
    public void setTimeout(int)
    {
        org.openhab.habdroid.util.MyHttpClient r0;
        int $i0;
        java.util.concurrent.TimeUnit $r1;
        long $l1;
        okhttp3.OkHttpClient $r2;
        okhttp3.OkHttpClient$Builder $r3;

        r0 := @this: org.openhab.habdroid.util.MyHttpClient;

        $i0 := @parameter0: int;

        $r3 = r0.<org.openhab.habdroid.util.MyHttpClient: okhttp3.OkHttpClient$Builder clientBuilder>;

        $l1 = (long) $i0;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        virtualinvoke $r3.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder readTimeout(long,java.util.concurrent.TimeUnit)>($l1, $r1);

        $r3 = r0.<org.openhab.habdroid.util.MyHttpClient: okhttp3.OkHttpClient$Builder clientBuilder>;

        $r2 = virtualinvoke $r3.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>();

        r0.<org.openhab.habdroid.util.MyHttpClient: okhttp3.OkHttpClient client> = $r2;

        return;
    }
