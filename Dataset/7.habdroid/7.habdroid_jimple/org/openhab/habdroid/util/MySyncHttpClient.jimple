org.openhab.habdroid.util.MySyncHttpClient extends org.openhab.habdroid.util.MyHttpClient
    public void <init>(android.content.Context, java.lang.Boolean, java.lang.Boolean)
    {
        org.openhab.habdroid.util.MySyncHttpClient r0;
        android.content.Context $r1;
        java.lang.Boolean $r2, $r3;

        r0 := @this: org.openhab.habdroid.util.MySyncHttpClient;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: java.lang.Boolean;

        $r3 := @parameter2: java.lang.Boolean;

        specialinvoke r0.<org.openhab.habdroid.util.MyHttpClient: void <init>()>();

        virtualinvoke r0.<org.openhab.habdroid.util.MySyncHttpClient: void clientSSLSetup(android.content.Context,java.lang.Boolean,java.lang.Boolean)>($r1, $r2, $r3);

        return;
    }
    private org.openhab.habdroid.util.MyHttpClient$ResponseHandler getResponseHandler(org.openhab.habdroid.util.MyHttpClient$TextResponseHandler)
    {
        org.openhab.habdroid.util.MySyncHttpClient r0;
        org.openhab.habdroid.util.MyHttpClient$TextResponseHandler $r1;
        org.openhab.habdroid.util.MySyncHttpClient$1 $r2;

        r0 := @this: org.openhab.habdroid.util.MySyncHttpClient;

        $r1 := @parameter0: org.openhab.habdroid.util.MyHttpClient$TextResponseHandler;

        $r2 = new org.openhab.habdroid.util.MySyncHttpClient$1;

        specialinvoke $r2.<org.openhab.habdroid.util.MySyncHttpClient$1: void <init>(org.openhab.habdroid.util.MySyncHttpClient,org.openhab.habdroid.util.MyHttpClient$TextResponseHandler)>(r0, $r1);

        return $r2;
    }
    private void runOnUiThread(java.lang.Runnable)
    {
        org.openhab.habdroid.util.MySyncHttpClient r0;
        java.lang.Runnable $r1;
        android.os.Handler $r2;
        android.os.Looper $r3;

        r0 := @this: org.openhab.habdroid.util.MySyncHttpClient;

        $r1 := @parameter0: java.lang.Runnable;

        $r2 = new android.os.Handler;

        $r3 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        specialinvoke $r2.<android.os.Handler: void <init>(android.os.Looper)>($r3);

        virtualinvoke $r2.<android.os.Handler: boolean post(java.lang.Runnable)>($r1);

        return;
    }
    protected volatile java.lang.Object method(java.lang.String, java.lang.String, java.util.Map, java.lang.String, java.lang.String, org.openhab.habdroid.util.MyHttpClient$ResponseHandler)
    {
        org.openhab.habdroid.util.MySyncHttpClient r0;
        java.lang.String $r1, $r2, $r4, $r5;
        java.util.Map $r3;
        org.openhab.habdroid.util.MyHttpClient$ResponseHandler $r6;
        okhttp3.Response $r7;

        r0 := @this: org.openhab.habdroid.util.MySyncHttpClient;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.util.Map;

        $r4 := @parameter3: java.lang.String;

        $r5 := @parameter4: java.lang.String;

        $r6 := @parameter5: org.openhab.habdroid.util.MyHttpClient$ResponseHandler;

        $r7 = virtualinvoke r0.<org.openhab.habdroid.util.MySyncHttpClient: okhttp3.Response method(java.lang.String,java.lang.String,java.util.Map,java.lang.String,java.lang.String,org.openhab.habdroid.util.MyHttpClient$ResponseHandler)>($r1, $r2, $r3, $r4, $r5, $r6);

        return $r7;
    }
    protected okhttp3.Response method(java.lang.String, java.lang.String, java.util.Map, java.lang.String, java.lang.String, org.openhab.habdroid.util.MyHttpClient$ResponseHandler)
    {
        org.openhab.habdroid.util.MySyncHttpClient r0;
        java.lang.String $r1, $r2, $r4, $r5, $r13;
        java.util.Map r3, $r8;
        org.openhab.habdroid.util.MyHttpClient$ResponseHandler $r6;
        okhttp3.Request$Builder r7;
        java.util.Set $r9;
        java.util.Iterator $r10;
        boolean $z0;
        java.lang.Object $r11;
        java.util.Map$Entry r12;
        okhttp3.MediaType $r14;
        okhttp3.RequestBody $r15;
        okhttp3.Request $r16;
        okhttp3.OkHttpClient $r17;
        okhttp3.Call $r18;
        okhttp3.Response $r19;
        int $i0, $i1;
        okhttp3.Headers $r20;
        okhttp3.ResponseBody $r21;
        byte[] $r22;
        java.io.IOException r23;
        java.lang.StringBuilder $r24;
        okhttp3.Headers$Builder $r25;
        okhttp3.Response$Builder $r26;
        java.lang.Class $r27;
        okhttp3.Protocol $r28;

        r0 := @this: org.openhab.habdroid.util.MySyncHttpClient;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.Map;

        $r4 := @parameter3: java.lang.String;

        $r5 := @parameter4: java.lang.String;

        $r6 := @parameter5: org.openhab.habdroid.util.MyHttpClient$ResponseHandler;

        r7 = new okhttp3.Request$Builder;

        specialinvoke r7.<okhttp3.Request$Builder: void <init>()>();

        virtualinvoke r7.<okhttp3.Request$Builder: okhttp3.Request$Builder url(java.lang.String)>($r1);

        $r8 = r0.<org.openhab.habdroid.util.MySyncHttpClient: java.util.Map headers>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Set entrySet()>();

        $r10 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label02;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (java.util.Map$Entry) $r11;

        $r11 = interfaceinvoke r12.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r1 = (java.lang.String) $r11;

        $r11 = interfaceinvoke r12.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r13 = (java.lang.String) $r11;

        virtualinvoke r7.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r1, $r13);

        goto label01;

     label02:
        if r3 == null goto label04;

        $r9 = interfaceinvoke r3.<java.util.Map: java.util.Set entrySet()>();

        $r10 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label03:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label04;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (java.util.Map$Entry) $r11;

        $r11 = interfaceinvoke r12.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r1 = (java.lang.String) $r11;

        $r11 = interfaceinvoke r12.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r13 = (java.lang.String) $r11;

        virtualinvoke r7.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r1, $r13);

        goto label03;

     label04:
        if $r4 == null goto label05;

        $r14 = staticinvoke <okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>($r5);

        $r15 = staticinvoke <okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,java.lang.String)>($r14, $r4);

        virtualinvoke r7.<okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)>($r2, $r15);

     label05:
        $r16 = virtualinvoke r7.<okhttp3.Request$Builder: okhttp3.Request build()>();

        $r17 = r0.<org.openhab.habdroid.util.MySyncHttpClient: okhttp3.OkHttpClient client>;

        $r18 = virtualinvoke $r17.<okhttp3.OkHttpClient: okhttp3.Call newCall(okhttp3.Request)>($r16);

     label06:
        $r19 = interfaceinvoke $r18.<okhttp3.Call: okhttp3.Response execute()>();

        $z0 = virtualinvoke $r19.<okhttp3.Response: boolean isSuccessful()>();

     label07:
        if $z0 == 0 goto label10;

     label08:
        $i0 = virtualinvoke $r19.<okhttp3.Response: int code()>();

        $r20 = virtualinvoke $r19.<okhttp3.Response: okhttp3.Headers headers()>();

        $r21 = virtualinvoke $r19.<okhttp3.Response: okhttp3.ResponseBody body()>();

        $r22 = virtualinvoke $r21.<okhttp3.ResponseBody: byte[] bytes()>();

        interfaceinvoke $r6.<org.openhab.habdroid.util.MyHttpClient$ResponseHandler: void onSuccess(okhttp3.Call,int,okhttp3.Headers,byte[])>($r18, $i0, $r20, $r22);

     label09:
        return $r19;

     label10:
        $i0 = virtualinvoke $r19.<okhttp3.Response: int code()>();

        $r20 = virtualinvoke $r19.<okhttp3.Response: okhttp3.Headers headers()>();

        $r21 = virtualinvoke $r19.<okhttp3.Response: okhttp3.ResponseBody body()>();

        $r22 = virtualinvoke $r21.<okhttp3.ResponseBody: byte[] bytes()>();

     label11:
        r23 = new java.io.IOException;

        $r24 = new java.lang.StringBuilder;

     label12:
        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $i1 = virtualinvoke $r19.<okhttp3.Response: int code()>();

        $r24 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r24 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r1 = virtualinvoke $r19.<okhttp3.Response: java.lang.String message()>();

        $r24 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r23.<java.io.IOException: void <init>(java.lang.String)>($r1);

        interfaceinvoke $r6.<org.openhab.habdroid.util.MyHttpClient$ResponseHandler: void onFailure(okhttp3.Call,int,okhttp3.Headers,byte[],java.lang.Throwable)>($r18, $i0, $r20, $r22, r23);

     label13:
        return $r19;

     label14:
        r23 := @caughtexception;

        $r25 = new okhttp3.Headers$Builder;

        specialinvoke $r25.<okhttp3.Headers$Builder: void <init>()>();

        $r20 = virtualinvoke $r25.<okhttp3.Headers$Builder: okhttp3.Headers build()>();

        interfaceinvoke $r6.<org.openhab.habdroid.util.MyHttpClient$ResponseHandler: void onFailure(okhttp3.Call,int,okhttp3.Headers,byte[],java.lang.Throwable)>($r18, 0, $r20, null, r23);

        $r26 = new okhttp3.Response$Builder;

        specialinvoke $r26.<okhttp3.Response$Builder: void <init>()>();

        $r26 = virtualinvoke $r26.<okhttp3.Response$Builder: okhttp3.Response$Builder code(int)>(500);

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke r23.<java.lang.Object: java.lang.Class getClass()>();

        $r1 = virtualinvoke $r27.<java.lang.Class: java.lang.String getName()>();

        $r24 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r24 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r1 = virtualinvoke r23.<java.io.IOException: java.lang.String getMessage()>();

        $r24 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        $r26 = virtualinvoke $r26.<okhttp3.Response$Builder: okhttp3.Response$Builder message(java.lang.String)>($r1);

        $r26 = virtualinvoke $r26.<okhttp3.Response$Builder: okhttp3.Response$Builder request(okhttp3.Request)>($r16);

        $r28 = <okhttp3.Protocol: okhttp3.Protocol HTTP_1_0>;

        $r26 = virtualinvoke $r26.<okhttp3.Response$Builder: okhttp3.Response$Builder protocol(okhttp3.Protocol)>($r28);

        $r19 = virtualinvoke $r26.<okhttp3.Response$Builder: okhttp3.Response build()>();

        return $r19;

        catch java.io.IOException from label06 to label07 with label14;
        catch java.io.IOException from label08 to label09 with label14;
        catch java.io.IOException from label10 to label11 with label14;
        catch java.io.IOException from label12 to label13 with label14;
    }
