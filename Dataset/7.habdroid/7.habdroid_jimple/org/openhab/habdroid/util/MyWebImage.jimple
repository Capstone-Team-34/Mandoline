org.openhab.habdroid.util.MyWebImage extends java.lang.Object implements com.loopj.android.image.SmartImage
private static final int CONNECT_TIMEOUT
private static final int READ_TIMEOUT
private static final java.lang.String TAG
private static com.loopj.android.image.WebImageCache sWebImageCache
private java.lang.String authPassword
private java.lang.String authUsername
private boolean shouldAuth
private java.lang.String url
private boolean useCache
    public void <init>(java.lang.String, boolean, java.lang.String, java.lang.String)
    {
        org.openhab.habdroid.util.MyWebImage r0;
        java.lang.String $r1, $r2, $r3;
        boolean $z0;

        r0 := @this: org.openhab.habdroid.util.MyWebImage;

        $r1 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $r2 := @parameter2: java.lang.String;

        $r3 := @parameter3: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.openhab.habdroid.util.MyWebImage: boolean useCache> = 1;

        r0.<org.openhab.habdroid.util.MyWebImage: boolean shouldAuth> = 0;

        r0.<org.openhab.habdroid.util.MyWebImage: java.lang.String url> = $r1;

        r0.<org.openhab.habdroid.util.MyWebImage: boolean useCache> = $z0;

        virtualinvoke r0.<org.openhab.habdroid.util.MyWebImage: void setAuthentication(java.lang.String,java.lang.String)>($r2, $r3);

        return;
    }
    static android.graphics.Bitmap access$000(org.openhab.habdroid.util.MyWebImage, java.lang.String, java.io.InputStream)
    {
        org.openhab.habdroid.util.MyWebImage $r0;
        java.lang.String $r1;
        java.io.InputStream $r2;
        android.graphics.Bitmap $r3;

        $r0 := @parameter0: org.openhab.habdroid.util.MyWebImage;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.io.InputStream;

        $r3 = specialinvoke $r0.<org.openhab.habdroid.util.MyWebImage: android.graphics.Bitmap getBitmapFromInputStream(java.lang.String,java.io.InputStream)>($r1, $r2);

        return $r3;
    }
    private android.graphics.Bitmap getBitmapFromInputStream(java.lang.String, java.io.InputStream)
    {
        org.openhab.habdroid.util.MyWebImage r0;
        java.lang.String $r1, $r3;
        java.io.InputStream $r2;
        boolean $z0;
        android.graphics.Bitmap $r4;

        r0 := @this: org.openhab.habdroid.util.MyWebImage;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.io.InputStream;

        $r3 = "SVG";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $r4 = specialinvoke r0.<org.openhab.habdroid.util.MyWebImage: android.graphics.Bitmap getBitmapFromSvgInputstream(java.io.InputStream)>($r2);

        return $r4;

     label1:
        $r4 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream)>($r2);

        return $r4;
    }
    private android.graphics.Bitmap getBitmapFromSvgInputstream(java.io.InputStream)
    {
        org.openhab.habdroid.util.MyWebImage r0;
        java.io.InputStream $r1;
        android.graphics.Canvas r2;
        com.caverock.androidsvg.SVGParseException r3;
        android.graphics.Bitmap r4, $r8;
        com.caverock.androidsvg.SVG $r5;
        double d0, d1;
        android.graphics.RectF $r6;
        float $f0;
        int $i0, $i1;
        android.graphics.Bitmap$Config $r7;
        android.graphics.PorterDuff$Mode $r9;

        r0 := @this: org.openhab.habdroid.util.MyWebImage;

        $r1 := @parameter0: java.io.InputStream;

        r4 = null;

     label01:
        $r5 = staticinvoke <com.caverock.androidsvg.SVG: com.caverock.androidsvg.SVG getFromInputStream(java.io.InputStream)>($r1);

     label02:
        d0 = 16.0;

        d1 = 16.0;

     label03:
        $r6 = virtualinvoke $r5.<com.caverock.androidsvg.SVG: android.graphics.RectF getDocumentViewBox()>();

     label04:
        if $r6 == null goto label19;

     label05:
        $r6 = virtualinvoke $r5.<com.caverock.androidsvg.SVG: android.graphics.RectF getDocumentViewBox()>();

        $f0 = virtualinvoke $r6.<android.graphics.RectF: float width()>();

     label06:
        d0 = (double) $f0;

     label07:
        $r6 = virtualinvoke $r5.<com.caverock.androidsvg.SVG: android.graphics.RectF getDocumentViewBox()>();

        $f0 = virtualinvoke $r6.<android.graphics.RectF: float height()>();

     label08:
        d1 = (double) $f0;

     label09:
        d0 = staticinvoke <java.lang.Math: double ceil(double)>(d0);

     label10:
        $i0 = (int) d0;

     label11:
        d1 = staticinvoke <java.lang.Math: double ceil(double)>(d1);

     label12:
        $i1 = (int) d1;

        $r7 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

     label13:
        $r8 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>($i0, $i1, $r7);

     label14:
        r4 = $r8;

        r2 = new android.graphics.Canvas;

     label15:
        specialinvoke r2.<android.graphics.Canvas: void <init>(android.graphics.Bitmap)>($r8);

     label16:
        $r9 = <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode CLEAR>;

     label17:
        virtualinvoke r2.<android.graphics.Canvas: void drawColor(int,android.graphics.PorterDuff$Mode)>(0, $r9);

        virtualinvoke $r5.<com.caverock.androidsvg.SVG: void renderToCanvas(android.graphics.Canvas)>(r2);

     label18:
        return $r8;

     label19:
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("MyWebImage", "DocumentViewBox is null. assuming width and heigh of 16px.");

     label20:
        goto label09;

     label21:
        r3 := @caughtexception;

        virtualinvoke r3.<com.caverock.androidsvg.SVGParseException: void printStackTrace()>();

        return r4;

        catch com.caverock.androidsvg.SVGParseException from label01 to label02 with label21;
        catch com.caverock.androidsvg.SVGParseException from label03 to label04 with label21;
        catch com.caverock.androidsvg.SVGParseException from label05 to label06 with label21;
        catch com.caverock.androidsvg.SVGParseException from label07 to label08 with label21;
        catch com.caverock.androidsvg.SVGParseException from label09 to label10 with label21;
        catch com.caverock.androidsvg.SVGParseException from label11 to label12 with label21;
        catch com.caverock.androidsvg.SVGParseException from label13 to label14 with label21;
        catch com.caverock.androidsvg.SVGParseException from label15 to label16 with label21;
        catch com.caverock.androidsvg.SVGParseException from label17 to label18 with label21;
        catch com.caverock.androidsvg.SVGParseException from label19 to label20 with label21;
    }
    private android.graphics.Bitmap getBitmapFromUrl(android.content.Context, java.lang.String, java.lang.String)
    {
        org.openhab.habdroid.util.MyWebImage r0;
        android.content.Context $r1;
        java.lang.String $r2, $r3, $r10, $r11;
        org.openhab.habdroid.util.MyAsyncHttpClient r4;
        java.lang.InterruptedException r5;
        java.util.HashMap r6;
        android.content.SharedPreferences $r7;
        boolean $z0;
        java.lang.Boolean $r8, $r9;
        org.openhab.habdroid.util.MyWebImage$1 $r12;
        java.lang.StringBuilder $r13;
        java.lang.Throwable $r14;
        java.lang.Object $r15;
        android.graphics.Bitmap $r16;

        r0 := @this: org.openhab.habdroid.util.MyWebImage;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        r6 = new java.util.HashMap;

        specialinvoke r6.<java.util.HashMap: void <init>()>();

        $r7 = staticinvoke <android.preference.PreferenceManager: android.content.SharedPreferences getDefaultSharedPreferences(android.content.Context)>($r1);

        r4 = new org.openhab.habdroid.util.MyAsyncHttpClient;

        $z0 = interfaceinvoke $r7.<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>("default_openhab_sslhost", 0);

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $z0 = interfaceinvoke $r7.<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>("default_openhab_sslcert", 0);

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        specialinvoke r4.<org.openhab.habdroid.util.MyAsyncHttpClient: void <init>(android.content.Context,java.lang.Boolean,java.lang.Boolean)>($r1, $r8, $r9);

        virtualinvoke r4.<org.openhab.habdroid.util.MyAsyncHttpClient: void setTimeout(int)>(10000);

        $z0 = r0.<org.openhab.habdroid.util.MyWebImage: boolean shouldAuth>;

        if $z0 == 0 goto label01;

        $r10 = r0.<org.openhab.habdroid.util.MyWebImage: java.lang.String authUsername>;

        $r11 = r0.<org.openhab.habdroid.util.MyWebImage: java.lang.String authPassword>;

        virtualinvoke r4.<org.openhab.habdroid.util.MyAsyncHttpClient: void setBasicAuth(java.lang.String,java.lang.String)>($r10, $r11);

     label01:
        $r12 = new org.openhab.habdroid.util.MyWebImage$1;

        specialinvoke $r12.<org.openhab.habdroid.util.MyWebImage$1: void <init>(org.openhab.habdroid.util.MyWebImage,java.lang.String,java.util.Map,java.lang.String)>(r0, $r2, r6, $r3);

        virtualinvoke r4.<org.openhab.habdroid.util.MyAsyncHttpClient: java.lang.Object get(java.lang.String,org.openhab.habdroid.util.MyHttpClient$ResponseHandler)>($r2, $r12);

        entermonitor r6;

     label02:
        virtualinvoke r6.<java.lang.Object: void wait(long)>(60000L);

     label03:
        $z0 = interfaceinvoke r6.<java.util.Map: boolean containsKey(java.lang.Object)>("error");

        if $z0 == 0 goto label09;

        exitmonitor r6;

     label04:
        return null;

     label05:
        r5 := @caughtexception;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Timeout fetching ");

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("MyWebImage", $r2);

        exitmonitor r6;

     label06:
        return null;

     label07:
        $r14 := @caughtexception;

        exitmonitor r6;

     label08:
        throw $r14;

     label09:
        exitmonitor r6;

     label10:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("fetched bitmap for ");

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("MyWebImage", $r2);

        $r15 = interfaceinvoke r6.<java.util.Map: java.lang.Object get(java.lang.Object)>("bitmap");

        $r16 = (android.graphics.Bitmap) $r15;

        return $r16;

        catch java.lang.InterruptedException from label02 to label03 with label05;
        catch java.lang.Throwable from label02 to label03 with label07;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
        catch java.lang.Throwable from label09 to label10 with label07;
    }
    public static com.loopj.android.image.WebImageCache getWebImageCache()
    {
        com.loopj.android.image.WebImageCache r0;

        r0 = <org.openhab.habdroid.util.MyWebImage: com.loopj.android.image.WebImageCache sWebImageCache>;

        return r0;
    }
    public static com.loopj.android.image.WebImageCache getWebImageCache(android.content.Context)
    {
        android.content.Context $r0;
        com.loopj.android.image.WebImageCache $r1;

        $r0 := @parameter0: android.content.Context;

        $r1 = <org.openhab.habdroid.util.MyWebImage: com.loopj.android.image.WebImageCache sWebImageCache>;

        if $r1 != null goto label1;

        $r1 = new com.loopj.android.image.WebImageCache;

        specialinvoke $r1.<com.loopj.android.image.WebImageCache: void <init>(android.content.Context)>($r0);

        <org.openhab.habdroid.util.MyWebImage: com.loopj.android.image.WebImageCache sWebImageCache> = $r1;

     label1:
        $r1 = <org.openhab.habdroid.util.MyWebImage: com.loopj.android.image.WebImageCache sWebImageCache>;

        return $r1;
    }
    public static void removeFromCache(java.lang.String)
    {
        java.lang.String $r0;
        com.loopj.android.image.WebImageCache $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.openhab.habdroid.util.MyWebImage: com.loopj.android.image.WebImageCache getWebImageCache()>();

        if $r1 == null goto label1;

        virtualinvoke $r1.<com.loopj.android.image.WebImageCache: void remove(java.lang.String)>($r0);

     label1:
        return;
    }
    public android.graphics.Bitmap getBitmap(android.content.Context)
    {
        org.openhab.habdroid.util.MyWebImage r0;
        android.content.Context $r1;
        android.graphics.Bitmap r2;
        java.lang.String $r3, $r6;
        boolean $z0;
        com.loopj.android.image.WebImageCache $r4;
        java.lang.StringBuilder $r5;

        r0 := @this: org.openhab.habdroid.util.MyWebImage;

        $r1 := @parameter0: android.content.Context;

        r2 = null;

        $r3 = r0.<org.openhab.habdroid.util.MyWebImage: java.lang.String url>;

        if $r3 == null goto label3;

        $z0 = r0.<org.openhab.habdroid.util.MyWebImage: boolean useCache>;

        if $z0 == 0 goto label1;

        $r4 = staticinvoke <org.openhab.habdroid.util.MyWebImage: com.loopj.android.image.WebImageCache getWebImageCache(android.content.Context)>($r1);

        $r3 = r0.<org.openhab.habdroid.util.MyWebImage: java.lang.String url>;

        r2 = virtualinvoke $r4.<com.loopj.android.image.WebImageCache: android.graphics.Bitmap get(java.lang.String)>($r3);

     label1:
        if r2 != null goto label4;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cache for ");

        $r3 = r0.<org.openhab.habdroid.util.MyWebImage: java.lang.String url>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is empty, getting image");

        $r3 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("MyWebImage", $r3);

        $r3 = "PNG";

        $r6 = r0.<org.openhab.habdroid.util.MyWebImage: java.lang.String url>;

        $z0 = virtualinvoke $r6.<java.lang.String: boolean contains(java.lang.CharSequence)>("format=SVG");

        if $z0 == 0 goto label2;

        $r3 = "SVG";

     label2:
        $r6 = r0.<org.openhab.habdroid.util.MyWebImage: java.lang.String url>;

        r2 = specialinvoke r0.<org.openhab.habdroid.util.MyWebImage: android.graphics.Bitmap getBitmapFromUrl(android.content.Context,java.lang.String,java.lang.String)>($r1, $r6, $r3);

        if r2 == null goto label4;

        $z0 = r0.<org.openhab.habdroid.util.MyWebImage: boolean useCache>;

        if $z0 == 0 goto label4;

        $r4 = staticinvoke <org.openhab.habdroid.util.MyWebImage: com.loopj.android.image.WebImageCache getWebImageCache(android.content.Context)>($r1);

        $r3 = r0.<org.openhab.habdroid.util.MyWebImage: java.lang.String url>;

        virtualinvoke $r4.<com.loopj.android.image.WebImageCache: void put(java.lang.String,android.graphics.Bitmap)>($r3, r2);

        return r2;

     label3:
        return null;

     label4:
        return r2;
    }
    public android.graphics.Bitmap getCachedBitmap()
    {
        org.openhab.habdroid.util.MyWebImage r0;
        boolean $z0;
        com.loopj.android.image.WebImageCache $r1;
        java.lang.String $r2;
        android.graphics.Bitmap $r3;

        r0 := @this: org.openhab.habdroid.util.MyWebImage;

        $z0 = r0.<org.openhab.habdroid.util.MyWebImage: boolean useCache>;

        if $z0 == 0 goto label2;

        $r1 = staticinvoke <org.openhab.habdroid.util.MyWebImage: com.loopj.android.image.WebImageCache getWebImageCache()>();

     label1:
        if $r1 == null goto label3;

        $r2 = r0.<org.openhab.habdroid.util.MyWebImage: java.lang.String url>;

        $r3 = virtualinvoke $r1.<com.loopj.android.image.WebImageCache: android.graphics.Bitmap get(java.lang.String)>($r2);

        return $r3;

     label2:
        $r1 = null;

        goto label1;

     label3:
        return null;
    }
    public void setAuthentication(java.lang.String, java.lang.String)
    {
        org.openhab.habdroid.util.MyWebImage r0;
        java.lang.String $r1, $r2;
        int $i0;

        r0 := @this: org.openhab.habdroid.util.MyWebImage;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        r0.<org.openhab.habdroid.util.MyWebImage: java.lang.String authUsername> = $r1;

        r0.<org.openhab.habdroid.util.MyWebImage: java.lang.String authPassword> = $r2;

        $r1 = r0.<org.openhab.habdroid.util.MyWebImage: java.lang.String authUsername>;

        if $r1 == null goto label1;

        $r1 = r0.<org.openhab.habdroid.util.MyWebImage: java.lang.String authUsername>;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        $r1 = r0.<org.openhab.habdroid.util.MyWebImage: java.lang.String authPassword>;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        r0.<org.openhab.habdroid.util.MyWebImage: boolean shouldAuth> = 1;

     label1:
        return;
    }
