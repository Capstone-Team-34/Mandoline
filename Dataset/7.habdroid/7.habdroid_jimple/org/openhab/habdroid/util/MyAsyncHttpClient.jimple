org.openhab.habdroid.util.MyAsyncHttpClient extends org.openhab.habdroid.util.MyHttpClient
    public void <init>(android.content.Context, java.lang.Boolean, java.lang.Boolean)
    {
        org.openhab.habdroid.util.MyAsyncHttpClient r0;
        android.content.Context $r1;
        java.lang.Boolean $r2, $r3;

        r0 := @this: org.openhab.habdroid.util.MyAsyncHttpClient;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: java.lang.Boolean;

        $r3 := @parameter2: java.lang.Boolean;

        specialinvoke r0.<org.openhab.habdroid.util.MyHttpClient: void <init>()>();

        virtualinvoke r0.<org.openhab.habdroid.util.MyAsyncHttpClient: void clientSSLSetup(android.content.Context,java.lang.Boolean,java.lang.Boolean)>($r1, $r2, $r3);

        return;
    }
    static void access$000(org.openhab.habdroid.util.MyAsyncHttpClient, java.lang.Runnable)
    {
        org.openhab.habdroid.util.MyAsyncHttpClient $r0;
        java.lang.Runnable $r1;

        $r0 := @parameter0: org.openhab.habdroid.util.MyAsyncHttpClient;

        $r1 := @parameter1: java.lang.Runnable;

        specialinvoke $r0.<org.openhab.habdroid.util.MyAsyncHttpClient: void runOnUiThread(java.lang.Runnable)>($r1);

        return;
    }
    private void runOnUiThread(java.lang.Runnable)
    {
        org.openhab.habdroid.util.MyAsyncHttpClient r0;
        java.lang.Runnable $r1;
        android.os.Handler $r2;
        android.os.Looper $r3;

        r0 := @this: org.openhab.habdroid.util.MyAsyncHttpClient;

        $r1 := @parameter0: java.lang.Runnable;

        $r2 = new android.os.Handler;

        $r3 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        specialinvoke $r2.<android.os.Handler: void <init>(android.os.Looper)>($r3);

        virtualinvoke $r2.<android.os.Handler: boolean post(java.lang.Runnable)>($r1);

        return;
    }
    protected volatile java.lang.Object method(java.lang.String, java.lang.String, java.util.Map, java.lang.String, java.lang.String, org.openhab.habdroid.util.MyHttpClient$ResponseHandler)
    {
        org.openhab.habdroid.util.MyAsyncHttpClient r0;
        java.lang.String $r1, $r2, $r4, $r5;
        java.util.Map $r3;
        org.openhab.habdroid.util.MyHttpClient$ResponseHandler $r6;
        okhttp3.Call $r7;

        r0 := @this: org.openhab.habdroid.util.MyAsyncHttpClient;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.util.Map;

        $r4 := @parameter3: java.lang.String;

        $r5 := @parameter4: java.lang.String;

        $r6 := @parameter5: org.openhab.habdroid.util.MyHttpClient$ResponseHandler;

        $r7 = virtualinvoke r0.<org.openhab.habdroid.util.MyAsyncHttpClient: okhttp3.Call method(java.lang.String,java.lang.String,java.util.Map,java.lang.String,java.lang.String,org.openhab.habdroid.util.MyHttpClient$ResponseHandler)>($r1, $r2, $r3, $r4, $r5, $r6);

        return $r7;
    }
    protected okhttp3.Call method(java.lang.String, java.lang.String, java.util.Map, java.lang.String, java.lang.String, org.openhab.habdroid.util.MyHttpClient$ResponseHandler)
    {
        org.openhab.habdroid.util.MyAsyncHttpClient r0;
        java.lang.String $r1, $r2, $r4, $r5, $r13;
        java.util.Map r3, $r8;
        org.openhab.habdroid.util.MyHttpClient$ResponseHandler $r6;
        okhttp3.Request$Builder r7;
        java.util.Set $r9;
        java.util.Iterator $r10;
        boolean $z0;
        java.lang.Object $r11;
        java.util.Map$Entry r12;
        okhttp3.MediaType $r14;
        okhttp3.RequestBody $r15;
        okhttp3.OkHttpClient $r16;
        okhttp3.Request $r17;
        okhttp3.Call $r18;
        org.openhab.habdroid.util.MyAsyncHttpClient$1 $r19;

        r0 := @this: org.openhab.habdroid.util.MyAsyncHttpClient;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.Map;

        $r4 := @parameter3: java.lang.String;

        $r5 := @parameter4: java.lang.String;

        $r6 := @parameter5: org.openhab.habdroid.util.MyHttpClient$ResponseHandler;

        r7 = new okhttp3.Request$Builder;

        specialinvoke r7.<okhttp3.Request$Builder: void <init>()>();

        virtualinvoke r7.<okhttp3.Request$Builder: okhttp3.Request$Builder url(java.lang.String)>($r1);

        $r8 = r0.<org.openhab.habdroid.util.MyAsyncHttpClient: java.util.Map headers>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Set entrySet()>();

        $r10 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (java.util.Map$Entry) $r11;

        $r11 = interfaceinvoke r12.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r1 = (java.lang.String) $r11;

        $r11 = interfaceinvoke r12.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r13 = (java.lang.String) $r11;

        virtualinvoke r7.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r1, $r13);

        goto label1;

     label2:
        if r3 == null goto label4;

        $r9 = interfaceinvoke r3.<java.util.Map: java.util.Set entrySet()>();

        $r10 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (java.util.Map$Entry) $r11;

        $r11 = interfaceinvoke r12.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r1 = (java.lang.String) $r11;

        $r11 = interfaceinvoke r12.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r13 = (java.lang.String) $r11;

        virtualinvoke r7.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r1, $r13);

        goto label3;

     label4:
        if $r4 == null goto label5;

        $r14 = staticinvoke <okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>($r5);

        $r15 = staticinvoke <okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,java.lang.String)>($r14, $r4);

        virtualinvoke r7.<okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)>($r2, $r15);

     label5:
        $r16 = r0.<org.openhab.habdroid.util.MyAsyncHttpClient: okhttp3.OkHttpClient client>;

        $r17 = virtualinvoke r7.<okhttp3.Request$Builder: okhttp3.Request build()>();

        $r18 = virtualinvoke $r16.<okhttp3.OkHttpClient: okhttp3.Call newCall(okhttp3.Request)>($r17);

        $r19 = new org.openhab.habdroid.util.MyAsyncHttpClient$1;

        specialinvoke $r19.<org.openhab.habdroid.util.MyAsyncHttpClient$1: void <init>(org.openhab.habdroid.util.MyAsyncHttpClient,org.openhab.habdroid.util.MyHttpClient$ResponseHandler)>(r0, $r6);

        interfaceinvoke $r18.<okhttp3.Call: void enqueue(okhttp3.Callback)>($r19);

        return $r18;
    }
