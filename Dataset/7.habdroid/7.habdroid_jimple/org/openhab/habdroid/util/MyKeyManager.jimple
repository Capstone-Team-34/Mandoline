org.openhab.habdroid.util.MyKeyManager extends java.lang.Object implements javax.net.ssl.X509KeyManager
private static final java.lang.String TAG
private java.lang.String alias
private java.security.cert.X509Certificate[] certificateChain
private java.security.PrivateKey privateKey
    static void <clinit>()
    {
        java.lang.String $r0;
        java.lang.Class $r1;

        $r1 = class "Lorg/openhab/habdroid/util/MyKeyManager;";

        $r0 = virtualinvoke $r1.<java.lang.Class: java.lang.String getSimpleName()>();

        <org.openhab.habdroid.util.MyKeyManager: java.lang.String TAG> = $r0;

        return;
    }
    private void <init>(android.content.Context)
    {
        org.openhab.habdroid.util.MyKeyManager r0;
        android.content.Context $r1;
        android.content.SharedPreferences $r2;
        java.lang.String $r3, $r4;
        boolean $z0;
        java.security.cert.X509Certificate[] $r5;
        java.security.PrivateKey $r6;
        java.lang.Thread $r7;
        org.openhab.habdroid.util.MyKeyManager$1 $r8;

        r0 := @this: org.openhab.habdroid.util.MyKeyManager;

        $r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <android.preference.PreferenceManager: android.content.SharedPreferences getDefaultSharedPreferences(android.content.Context)>($r1);

        $r3 = interfaceinvoke $r2.<android.content.SharedPreferences: java.lang.String getString(java.lang.String,java.lang.String)>("default_openhab_sslclientcert", null);

        if $r3 != null goto label1;

        r0.<org.openhab.habdroid.util.MyKeyManager: java.lang.String alias> = null;

        r0.<org.openhab.habdroid.util.MyKeyManager: java.security.cert.X509Certificate[] certificateChain> = null;

        r0.<org.openhab.habdroid.util.MyKeyManager: java.security.PrivateKey privateKey> = null;

        return;

     label1:
        $r4 = r0.<org.openhab.habdroid.util.MyKeyManager: java.lang.String alias>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        $r5 = r0.<org.openhab.habdroid.util.MyKeyManager: java.security.cert.X509Certificate[] certificateChain>;

        if $r5 == null goto label2;

        $r6 = r0.<org.openhab.habdroid.util.MyKeyManager: java.security.PrivateKey privateKey>;

        if $r6 != null goto label3;

     label2:
        $r7 = new java.lang.Thread;

        $r8 = new org.openhab.habdroid.util.MyKeyManager$1;

        specialinvoke $r8.<org.openhab.habdroid.util.MyKeyManager$1: void <init>(org.openhab.habdroid.util.MyKeyManager,android.content.Context,java.lang.String)>(r0, $r1, $r3);

        specialinvoke $r7.<java.lang.Thread: void <init>(java.lang.Runnable)>($r8);

        virtualinvoke $r7.<java.lang.Thread: void start()>();

     label3:
        return;
    }
    static java.security.cert.X509Certificate[] access$002(org.openhab.habdroid.util.MyKeyManager, java.security.cert.X509Certificate[])
    {
        org.openhab.habdroid.util.MyKeyManager $r0;
        java.security.cert.X509Certificate[] $r1;

        $r0 := @parameter0: org.openhab.habdroid.util.MyKeyManager;

        $r1 := @parameter1: java.security.cert.X509Certificate[];

        $r0.<org.openhab.habdroid.util.MyKeyManager: java.security.cert.X509Certificate[] certificateChain> = $r1;

        return $r1;
    }
    static java.security.PrivateKey access$102(org.openhab.habdroid.util.MyKeyManager, java.security.PrivateKey)
    {
        org.openhab.habdroid.util.MyKeyManager $r0;
        java.security.PrivateKey $r1;

        $r0 := @parameter0: org.openhab.habdroid.util.MyKeyManager;

        $r1 := @parameter1: java.security.PrivateKey;

        $r0.<org.openhab.habdroid.util.MyKeyManager: java.security.PrivateKey privateKey> = $r1;

        return $r1;
    }
    static java.lang.String access$202(org.openhab.habdroid.util.MyKeyManager, java.lang.String)
    {
        org.openhab.habdroid.util.MyKeyManager $r0;
        java.lang.String $r1;

        $r0 := @parameter0: org.openhab.habdroid.util.MyKeyManager;

        $r1 := @parameter1: java.lang.String;

        $r0.<org.openhab.habdroid.util.MyKeyManager: java.lang.String alias> = $r1;

        return $r1;
    }
    static java.lang.String access$300()
    {
        java.lang.String r0;

        r0 = <org.openhab.habdroid.util.MyKeyManager: java.lang.String TAG>;

        return r0;
    }
    public static javax.net.ssl.KeyManager[] getInstance(android.content.Context)
    {
        android.content.Context $r0;
        org.openhab.habdroid.util.MyKeyManager $r1;
        javax.net.ssl.KeyManager[] $r2;

        $r0 := @parameter0: android.content.Context;

        $r2 = newarray (javax.net.ssl.KeyManager)[1];

        $r1 = new org.openhab.habdroid.util.MyKeyManager;

        specialinvoke $r1.<org.openhab.habdroid.util.MyKeyManager: void <init>(android.content.Context)>($r0);

        $r2[0] = $r1;

        return $r2;
    }
    public java.lang.String chooseClientAlias(java.lang.String[], java.security.Principal[], java.net.Socket)
    {
        org.openhab.habdroid.util.MyKeyManager r0;
        java.lang.String[] $r1;
        java.security.Principal[] $r2;
        java.net.Socket $r3;
        java.lang.String $r4, $r6;
        java.lang.StringBuilder $r5;

        r0 := @this: org.openhab.habdroid.util.MyKeyManager;

        $r1 := @parameter0: java.lang.String[];

        $r2 := @parameter1: java.security.Principal[];

        $r3 := @parameter2: java.net.Socket;

        $r4 = <org.openhab.habdroid.util.MyKeyManager: java.lang.String TAG>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("chooseClientAlias - alias: ");

        $r6 = r0.<org.openhab.habdroid.util.MyKeyManager: java.lang.String alias>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r4, $r6);

        $r4 = r0.<org.openhab.habdroid.util.MyKeyManager: java.lang.String alias>;

        return $r4;
    }
    public java.lang.String chooseServerAlias(java.lang.String, java.security.Principal[], java.net.Socket)
    {
        org.openhab.habdroid.util.MyKeyManager r0;
        java.lang.String $r1;
        java.security.Principal[] $r2;
        java.net.Socket $r3;

        r0 := @this: org.openhab.habdroid.util.MyKeyManager;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.security.Principal[];

        $r3 := @parameter2: java.net.Socket;

        $r1 = <org.openhab.habdroid.util.MyKeyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r1, "chooseServerAlias");

        return null;
    }
    public java.security.cert.X509Certificate[] getCertificateChain(java.lang.String)
    {
        org.openhab.habdroid.util.MyKeyManager r0;
        java.lang.String $r1;
        java.security.cert.X509Certificate[] r2;

        r0 := @this: org.openhab.habdroid.util.MyKeyManager;

        $r1 := @parameter0: java.lang.String;

        $r1 = <org.openhab.habdroid.util.MyKeyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r1, "getCertificateChain");

        r2 = r0.<org.openhab.habdroid.util.MyKeyManager: java.security.cert.X509Certificate[] certificateChain>;

        return r2;
    }
    public java.lang.String[] getClientAliases(java.lang.String, java.security.Principal[])
    {
        org.openhab.habdroid.util.MyKeyManager r0;
        java.lang.String $r1;
        java.security.Principal[] $r2;
        java.lang.String[] $r3;

        r0 := @this: org.openhab.habdroid.util.MyKeyManager;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.security.Principal[];

        $r1 = <org.openhab.habdroid.util.MyKeyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r1, "getClientAliases");

        $r1 = r0.<org.openhab.habdroid.util.MyKeyManager: java.lang.String alias>;

        if $r1 == null goto label1;

        $r3 = newarray (java.lang.String)[1];

        $r1 = r0.<org.openhab.habdroid.util.MyKeyManager: java.lang.String alias>;

        $r3[0] = $r1;

        return $r3;

     label1:
        return null;
    }
    public java.security.PrivateKey getPrivateKey(java.lang.String)
    {
        org.openhab.habdroid.util.MyKeyManager r0;
        java.lang.String $r1;
        java.security.PrivateKey r2;

        r0 := @this: org.openhab.habdroid.util.MyKeyManager;

        $r1 := @parameter0: java.lang.String;

        $r1 = <org.openhab.habdroid.util.MyKeyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r1, "getPrivateKey");

        r2 = r0.<org.openhab.habdroid.util.MyKeyManager: java.security.PrivateKey privateKey>;

        return r2;
    }
    public java.lang.String[] getServerAliases(java.lang.String, java.security.Principal[])
    {
        org.openhab.habdroid.util.MyKeyManager r0;
        java.lang.String $r1;
        java.security.Principal[] $r2;

        r0 := @this: org.openhab.habdroid.util.MyKeyManager;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.security.Principal[];

        $r1 = <org.openhab.habdroid.util.MyKeyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r1, "getServerAliases");

        return null;
    }
