org.openhab.habdroid.util.AsyncServiceResolver extends java.lang.Thread implements javax.jmdns.ServiceListener
private static final int DEFAULT_DISCOVERY_TIMEOUT
private static final java.lang.String TAG
private android.content.Context mCtx
private boolean mIsResolved
private javax.jmdns.JmDNS mJmdns
private org.openhab.habdroid.util.AsyncServiceResolverListener mListener
private android.net.wifi.WifiManager$MulticastLock mMulticastLock
private javax.jmdns.ServiceInfo mResolvedServiceInfo
private java.lang.String mServiceType
private java.lang.Thread mSleepingThread
    static void <clinit>()
    {
        java.lang.String $r0;
        java.lang.Class $r1;

        $r1 = class "Lorg/openhab/habdroid/util/AsyncServiceResolver;";

        $r0 = virtualinvoke $r1.<java.lang.Class: java.lang.String getSimpleName()>();

        <org.openhab.habdroid.util.AsyncServiceResolver: java.lang.String TAG> = $r0;

        return;
    }
    public void <init>(android.content.Context, java.lang.String)
    {
        org.openhab.habdroid.util.AsyncServiceResolver r0;
        java.lang.String $r1;
        android.content.Context $r2;
        boolean $z0;
        org.openhab.habdroid.util.AsyncServiceResolverListener $r3;

        r0 := @this: org.openhab.habdroid.util.AsyncServiceResolver;

        $r2 := @parameter0: android.content.Context;

        $r1 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Thread: void <init>()>();

        r0.<org.openhab.habdroid.util.AsyncServiceResolver: boolean mIsResolved> = 0;

        r0.<org.openhab.habdroid.util.AsyncServiceResolver: android.content.Context mCtx> = $r2;

        r0.<org.openhab.habdroid.util.AsyncServiceResolver: java.lang.String mServiceType> = $r1;

        $z0 = $r2 instanceof org.openhab.habdroid.util.AsyncServiceResolverListener;

        if $z0 == 0 goto label1;

        $r3 = (org.openhab.habdroid.util.AsyncServiceResolverListener) $r2;

        r0.<org.openhab.habdroid.util.AsyncServiceResolver: org.openhab.habdroid.util.AsyncServiceResolverListener mListener> = $r3;

     label1:
        return;
    }
    public void <init>(android.content.Context, org.openhab.habdroid.util.AsyncServiceResolverListener, java.lang.String)
    {
        org.openhab.habdroid.util.AsyncServiceResolver r0;
        android.content.Context $r1;
        org.openhab.habdroid.util.AsyncServiceResolverListener $r2;
        java.lang.String $r3;

        r0 := @this: org.openhab.habdroid.util.AsyncServiceResolver;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: org.openhab.habdroid.util.AsyncServiceResolverListener;

        $r3 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Thread: void <init>()>();

        r0.<org.openhab.habdroid.util.AsyncServiceResolver: boolean mIsResolved> = 0;

        r0.<org.openhab.habdroid.util.AsyncServiceResolver: android.content.Context mCtx> = $r1;

        r0.<org.openhab.habdroid.util.AsyncServiceResolver: java.lang.String mServiceType> = $r3;

        r0.<org.openhab.habdroid.util.AsyncServiceResolver: org.openhab.habdroid.util.AsyncServiceResolverListener mListener> = $r2;

        return;
    }
    static org.openhab.habdroid.util.AsyncServiceResolverListener access$000(org.openhab.habdroid.util.AsyncServiceResolver)
    {
        org.openhab.habdroid.util.AsyncServiceResolver $r0;
        org.openhab.habdroid.util.AsyncServiceResolverListener r1;

        $r0 := @parameter0: org.openhab.habdroid.util.AsyncServiceResolver;

        r1 = $r0.<org.openhab.habdroid.util.AsyncServiceResolver: org.openhab.habdroid.util.AsyncServiceResolverListener mListener>;

        return r1;
    }
    static javax.jmdns.ServiceInfo access$100(org.openhab.habdroid.util.AsyncServiceResolver)
    {
        org.openhab.habdroid.util.AsyncServiceResolver $r0;
        javax.jmdns.ServiceInfo r1;

        $r0 := @parameter0: org.openhab.habdroid.util.AsyncServiceResolver;

        r1 = $r0.<org.openhab.habdroid.util.AsyncServiceResolver: javax.jmdns.ServiceInfo mResolvedServiceInfo>;

        return r1;
    }
    private java.net.InetAddress getLocalIpv4Address()
    {
        org.openhab.habdroid.util.AsyncServiceResolver r0;
        java.net.SocketException r1;
        java.util.Enumeration $r2, $r5;
        boolean $z0;
        java.lang.Object $r3;
        java.net.NetworkInterface r4;
        java.net.InetAddress r6;
        java.lang.String $r7, $r9;
        java.lang.StringBuilder $r8;

        r0 := @this: org.openhab.habdroid.util.AsyncServiceResolver;

     label01:
        $r2 = staticinvoke <java.net.NetworkInterface: java.util.Enumeration getNetworkInterfaces()>();

     label02:
        $z0 = interfaceinvoke $r2.<java.util.Enumeration: boolean hasMoreElements()>();

     label03:
        if $z0 == 0 goto label20;

     label04:
        $r3 = interfaceinvoke $r2.<java.util.Enumeration: java.lang.Object nextElement()>();

     label05:
        r4 = (java.net.NetworkInterface) $r3;

     label06:
        $r5 = virtualinvoke r4.<java.net.NetworkInterface: java.util.Enumeration getInetAddresses()>();

     label07:
        $z0 = interfaceinvoke $r5.<java.util.Enumeration: boolean hasMoreElements()>();

     label08:
        if $z0 == 0 goto label02;

     label09:
        $r3 = interfaceinvoke $r5.<java.util.Enumeration: java.lang.Object nextElement()>();

     label10:
        r6 = (java.net.InetAddress) $r3;

        $r7 = <org.openhab.habdroid.util.AsyncServiceResolver: java.lang.String TAG>;

        $r8 = new java.lang.StringBuilder;

     label11:
        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IP: ");

        $r9 = virtualinvoke r6.<java.net.InetAddress: java.lang.String getHostAddress()>();

        $r9 = virtualinvoke $r9.<java.lang.String: java.lang.String toString()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>($r7, $r9);

     label12:
        $r7 = <org.openhab.habdroid.util.AsyncServiceResolver: java.lang.String TAG>;

        $r8 = new java.lang.StringBuilder;

     label13:
        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Is IPV4 = ");

     label14:
        $z0 = r6 instanceof java.net.Inet4Address;

     label15:
        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>($r7, $r9);

        $z0 = virtualinvoke r6.<java.net.InetAddress: boolean isLoopbackAddress()>();

     label16:
        if $z0 != 0 goto label07;

        $z0 = r6 instanceof java.net.Inet4Address;

        if $z0 == 0 goto label07;

        $r7 = <org.openhab.habdroid.util.AsyncServiceResolver: java.lang.String TAG>;

        $r8 = new java.lang.StringBuilder;

     label17:
        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Selected ");

        $r9 = virtualinvoke r6.<java.net.InetAddress: java.lang.String getHostAddress()>();

        $r9 = virtualinvoke $r9.<java.lang.String: java.lang.String toString()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>($r7, $r9);

     label18:
        return r6;

     label19:
        r1 := @caughtexception;

        $r7 = <org.openhab.habdroid.util.AsyncServiceResolver: java.lang.String TAG>;

        $r9 = virtualinvoke r1.<java.net.SocketException: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r7, $r9);

     label20:
        return null;

        catch java.net.SocketException from label01 to label03 with label19;
        catch java.net.SocketException from label04 to label05 with label19;
        catch java.net.SocketException from label06 to label08 with label19;
        catch java.net.SocketException from label09 to label10 with label19;
        catch java.net.SocketException from label11 to label12 with label19;
        catch java.net.SocketException from label13 to label14 with label19;
        catch java.net.SocketException from label15 to label16 with label19;
        catch java.net.SocketException from label17 to label18 with label19;
    }
    private void shutdown()
    {
        org.openhab.habdroid.util.AsyncServiceResolver r0;
        java.io.IOException r1;
        java.lang.String $r2, $r5;
        android.net.wifi.WifiManager$MulticastLock $r3;
        javax.jmdns.JmDNS $r4;

        r0 := @this: org.openhab.habdroid.util.AsyncServiceResolver;

        $r3 = r0.<org.openhab.habdroid.util.AsyncServiceResolver: android.net.wifi.WifiManager$MulticastLock mMulticastLock>;

        if $r3 == null goto label1;

        $r3 = r0.<org.openhab.habdroid.util.AsyncServiceResolver: android.net.wifi.WifiManager$MulticastLock mMulticastLock>;

        virtualinvoke $r3.<android.net.wifi.WifiManager$MulticastLock: void release()>();

     label1:
        $r4 = r0.<org.openhab.habdroid.util.AsyncServiceResolver: javax.jmdns.JmDNS mJmdns>;

        if $r4 == null goto label5;

        $r4 = r0.<org.openhab.habdroid.util.AsyncServiceResolver: javax.jmdns.JmDNS mJmdns>;

        $r2 = r0.<org.openhab.habdroid.util.AsyncServiceResolver: java.lang.String mServiceType>;

        virtualinvoke $r4.<javax.jmdns.JmDNS: void removeServiceListener(java.lang.String,javax.jmdns.ServiceListener)>($r2, r0);

        $r4 = r0.<org.openhab.habdroid.util.AsyncServiceResolver: javax.jmdns.JmDNS mJmdns>;

     label2:
        virtualinvoke $r4.<javax.jmdns.JmDNS: void close()>();

     label3:
        return;

     label4:
        r1 := @caughtexception;

        $r5 = <org.openhab.habdroid.util.AsyncServiceResolver: java.lang.String TAG>;

        $r2 = virtualinvoke r1.<java.io.IOException: java.lang.String getMessage()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r5, $r2);

     label5:
        return;

        catch java.io.IOException from label2 to label3 with label4;
    }
    public void run()
    {
        org.openhab.habdroid.util.AsyncServiceResolver r0;
        android.content.Context $r1;
        java.lang.Object $r2;
        android.net.wifi.WifiManager r3;
        android.net.wifi.WifiManager$MulticastLock $r4;
        java.lang.Thread $r5;
        java.lang.String $r6, $r8;
        java.lang.StringBuilder $r7;
        java.net.InetAddress $r9;
        javax.jmdns.JmDNS $r10;
        boolean $z0;
        android.os.Handler $r11;
        android.os.Looper $r12;
        org.openhab.habdroid.util.AsyncServiceResolver$1 $r13;
        java.lang.SecurityException r14;
        java.io.IOException r15;
        java.lang.InterruptedException $r16;

        r0 := @this: org.openhab.habdroid.util.AsyncServiceResolver;

        $r1 = r0.<org.openhab.habdroid.util.AsyncServiceResolver: android.content.Context mCtx>;

        $r1 = virtualinvoke $r1.<android.content.Context: android.content.Context getApplicationContext()>();

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("wifi");

        r3 = (android.net.wifi.WifiManager) $r2;

        $r4 = virtualinvoke r3.<android.net.wifi.WifiManager: android.net.wifi.WifiManager$MulticastLock createMulticastLock(java.lang.String)>("HABDroidMulticastLock");

        r0.<org.openhab.habdroid.util.AsyncServiceResolver: android.net.wifi.WifiManager$MulticastLock mMulticastLock> = $r4;

        $r4 = r0.<org.openhab.habdroid.util.AsyncServiceResolver: android.net.wifi.WifiManager$MulticastLock mMulticastLock>;

        virtualinvoke $r4.<android.net.wifi.WifiManager$MulticastLock: void setReferenceCounted(boolean)>(1);

        $r4 = r0.<org.openhab.habdroid.util.AsyncServiceResolver: android.net.wifi.WifiManager$MulticastLock mMulticastLock>;

     label01:
        virtualinvoke $r4.<android.net.wifi.WifiManager$MulticastLock: void acquire()>();

     label02:
        $r5 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r0.<org.openhab.habdroid.util.AsyncServiceResolver: java.lang.Thread mSleepingThread> = $r5;

        $r6 = <org.openhab.habdroid.util.AsyncServiceResolver: java.lang.String TAG>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Discovering service ");

        $r8 = r0.<org.openhab.habdroid.util.AsyncServiceResolver: java.lang.String mServiceType>;

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>($r6, $r8);

     label03:
        $r9 = specialinvoke r0.<org.openhab.habdroid.util.AsyncServiceResolver: java.net.InetAddress getLocalIpv4Address()>();

        $r10 = staticinvoke <javax.jmdns.JmDNS: javax.jmdns.JmDNS create(java.net.InetAddress)>($r9);

     label04:
        r0.<org.openhab.habdroid.util.AsyncServiceResolver: javax.jmdns.JmDNS mJmdns> = $r10;

        $r10 = r0.<org.openhab.habdroid.util.AsyncServiceResolver: javax.jmdns.JmDNS mJmdns>;

        $r6 = r0.<org.openhab.habdroid.util.AsyncServiceResolver: java.lang.String mServiceType>;

     label05:
        virtualinvoke $r10.<javax.jmdns.JmDNS: void addServiceListener(java.lang.String,javax.jmdns.ServiceListener)>($r6, r0);

     label06:
        staticinvoke <java.lang.Thread: void sleep(long)>(3000L);

     label07:
        $z0 = r0.<org.openhab.habdroid.util.AsyncServiceResolver: boolean mIsResolved>;

        if $z0 != 0 goto label15;

        $r11 = new android.os.Handler;

     label08:
        $r12 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        specialinvoke $r11.<android.os.Handler: void <init>(android.os.Looper)>($r12);

     label09:
        $r13 = new org.openhab.habdroid.util.AsyncServiceResolver$1;

     label10:
        specialinvoke $r13.<org.openhab.habdroid.util.AsyncServiceResolver$1: void <init>(org.openhab.habdroid.util.AsyncServiceResolver)>(r0);

        virtualinvoke $r11.<android.os.Handler: boolean post(java.lang.Runnable)>($r13);

        specialinvoke r0.<org.openhab.habdroid.util.AsyncServiceResolver: void shutdown()>();

     label11:
        return;

     label12:
        r14 := @caughtexception;

        $r6 = <org.openhab.habdroid.util.AsyncServiceResolver: java.lang.String TAG>;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>($r6, "Security exception during multicast lock");

        goto label02;

     label13:
        r15 := @caughtexception;

        $r6 = <org.openhab.habdroid.util.AsyncServiceResolver: java.lang.String TAG>;

        $r8 = virtualinvoke r15.<java.io.IOException: java.lang.String getMessage()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r6, $r8);

        goto label06;

     label14:
        $r16 := @caughtexception;

     label15:
        return;

        catch java.lang.SecurityException from label01 to label02 with label12;
        catch java.io.IOException from label03 to label04 with label13;
        catch java.io.IOException from label05 to label06 with label13;
        catch java.lang.InterruptedException from label06 to label07 with label14;
        catch java.lang.InterruptedException from label08 to label09 with label14;
        catch java.lang.InterruptedException from label10 to label11 with label14;
    }
    public void serviceAdded(javax.jmdns.ServiceEvent)
    {
        org.openhab.habdroid.util.AsyncServiceResolver r0;
        javax.jmdns.ServiceEvent $r1;
        java.lang.String $r2, $r4;
        java.lang.StringBuilder $r3;
        javax.jmdns.JmDNS $r5;

        r0 := @this: org.openhab.habdroid.util.AsyncServiceResolver;

        $r1 := @parameter0: javax.jmdns.ServiceEvent;

        $r2 = <org.openhab.habdroid.util.AsyncServiceResolver: java.lang.String TAG>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Service Added ");

        $r4 = virtualinvoke $r1.<javax.jmdns.ServiceEvent: java.lang.String getName()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r2, $r4);

        $r5 = r0.<org.openhab.habdroid.util.AsyncServiceResolver: javax.jmdns.JmDNS mJmdns>;

        $r2 = virtualinvoke $r1.<javax.jmdns.ServiceEvent: java.lang.String getType()>();

        $r4 = virtualinvoke $r1.<javax.jmdns.ServiceEvent: java.lang.String getName()>();

        virtualinvoke $r5.<javax.jmdns.JmDNS: void requestServiceInfo(java.lang.String,java.lang.String,long)>($r2, $r4, 1L);

        return;
    }
    public void serviceRemoved(javax.jmdns.ServiceEvent)
    {
        org.openhab.habdroid.util.AsyncServiceResolver r0;
        javax.jmdns.ServiceEvent $r1;

        r0 := @this: org.openhab.habdroid.util.AsyncServiceResolver;

        $r1 := @parameter0: javax.jmdns.ServiceEvent;

        return;
    }
    public void serviceResolved(javax.jmdns.ServiceEvent)
    {
        org.openhab.habdroid.util.AsyncServiceResolver r0;
        javax.jmdns.ServiceEvent $r1;
        javax.jmdns.ServiceInfo $r2;
        android.os.Handler $r3;
        android.os.Looper $r4;
        org.openhab.habdroid.util.AsyncServiceResolver$2 $r5;
        java.lang.Thread $r6;

        r0 := @this: org.openhab.habdroid.util.AsyncServiceResolver;

        $r1 := @parameter0: javax.jmdns.ServiceEvent;

        $r2 = virtualinvoke $r1.<javax.jmdns.ServiceEvent: javax.jmdns.ServiceInfo getInfo()>();

        r0.<org.openhab.habdroid.util.AsyncServiceResolver: javax.jmdns.ServiceInfo mResolvedServiceInfo> = $r2;

        r0.<org.openhab.habdroid.util.AsyncServiceResolver: boolean mIsResolved> = 1;

        $r3 = new android.os.Handler;

        $r4 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        specialinvoke $r3.<android.os.Handler: void <init>(android.os.Looper)>($r4);

        $r5 = new org.openhab.habdroid.util.AsyncServiceResolver$2;

        specialinvoke $r5.<org.openhab.habdroid.util.AsyncServiceResolver$2: void <init>(org.openhab.habdroid.util.AsyncServiceResolver)>(r0);

        virtualinvoke $r3.<android.os.Handler: boolean post(java.lang.Runnable)>($r5);

        specialinvoke r0.<org.openhab.habdroid.util.AsyncServiceResolver: void shutdown()>();

        $r6 = r0.<org.openhab.habdroid.util.AsyncServiceResolver: java.lang.Thread mSleepingThread>;

        virtualinvoke $r6.<java.lang.Thread: void interrupt()>();

        return;
    }
