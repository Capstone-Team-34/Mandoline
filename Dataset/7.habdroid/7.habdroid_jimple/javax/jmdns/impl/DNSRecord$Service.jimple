javax.jmdns.impl.DNSRecord$Service extends javax.jmdns.impl.DNSRecord
private static org.slf4j.Logger logger1
private final int _port
private final int _priority
private final java.lang.String _server
private final int _weight
    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        org.slf4j.Logger $r2;

        $r0 = class "Ljavax/jmdns/impl/DNSRecord$Service;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.String)>($r1);

        <javax.jmdns.impl.DNSRecord$Service: org.slf4j.Logger logger1> = $r2;

        return;
    }
    public void <init>(java.lang.String, javax.jmdns.impl.constants.DNSRecordClass, boolean, int, int, int, int, java.lang.String)
    {
        javax.jmdns.impl.DNSRecord$Service r0;
        java.lang.String $r1, $r3;
        javax.jmdns.impl.constants.DNSRecordClass $r2;
        boolean $z0;
        int $i0, $i1, $i2, $i3;
        javax.jmdns.impl.constants.DNSRecordType $r4;

        r0 := @this: javax.jmdns.impl.DNSRecord$Service;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: javax.jmdns.impl.constants.DNSRecordClass;

        $z0 := @parameter2: boolean;

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $i2 := @parameter5: int;

        $i3 := @parameter6: int;

        $r3 := @parameter7: java.lang.String;

        $r4 = <javax.jmdns.impl.constants.DNSRecordType: javax.jmdns.impl.constants.DNSRecordType TYPE_SRV>;

        specialinvoke r0.<javax.jmdns.impl.DNSRecord: void <init>(java.lang.String,javax.jmdns.impl.constants.DNSRecordType,javax.jmdns.impl.constants.DNSRecordClass,boolean,int)>($r1, $r4, $r2, $z0, $i0);

        r0.<javax.jmdns.impl.DNSRecord$Service: int _priority> = $i1;

        r0.<javax.jmdns.impl.DNSRecord$Service: int _weight> = $i2;

        r0.<javax.jmdns.impl.DNSRecord$Service: int _port> = $i3;

        r0.<javax.jmdns.impl.DNSRecord$Service: java.lang.String _server> = $r3;

        return;
    }
    javax.jmdns.impl.DNSOutgoing addAnswer(javax.jmdns.impl.JmDNSImpl, javax.jmdns.impl.DNSIncoming, java.net.InetAddress, int, javax.jmdns.impl.DNSOutgoing) throws java.io.IOException
    {
        javax.jmdns.impl.DNSRecord$Service r0;
        javax.jmdns.impl.JmDNSImpl $r1;
        javax.jmdns.impl.DNSIncoming $r2;
        java.net.InetAddress $r3;
        int $i0, $i1, $i2, $i3;
        javax.jmdns.impl.DNSOutgoing r4;
        java.util.Map $r5;
        java.lang.String $r6, $r10;
        java.lang.Object $r7;
        javax.jmdns.impl.ServiceInfoImpl r8;
        boolean $z0, $z1;
        javax.jmdns.impl.HostInfo $r9;
        javax.jmdns.impl.constants.DNSRecordClass $r11;

        r0 := @this: javax.jmdns.impl.DNSRecord$Service;

        $r1 := @parameter0: javax.jmdns.impl.JmDNSImpl;

        $r2 := @parameter1: javax.jmdns.impl.DNSIncoming;

        $r3 := @parameter2: java.net.InetAddress;

        $i0 := @parameter3: int;

        r4 := @parameter4: javax.jmdns.impl.DNSOutgoing;

        $r5 = virtualinvoke $r1.<javax.jmdns.impl.JmDNSImpl: java.util.Map getServices()>();

        $r6 = virtualinvoke r0.<javax.jmdns.impl.DNSRecord$Service: java.lang.String getKey()>();

        $r7 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6);

        r8 = (javax.jmdns.impl.ServiceInfoImpl) $r7;

        if r8 == null goto label3;

        $i1 = r0.<javax.jmdns.impl.DNSRecord$Service: int _port>;

        $i2 = virtualinvoke r8.<javax.jmdns.impl.ServiceInfoImpl: int getPort()>();

        if $i1 != $i2 goto label2;

        $z0 = 1;

     label1:
        $r6 = r0.<javax.jmdns.impl.DNSRecord$Service: java.lang.String _server>;

        $r9 = virtualinvoke $r1.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.HostInfo getLocalHost()>();

        $r10 = virtualinvoke $r9.<javax.jmdns.impl.HostInfo: java.lang.String getName()>();

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z0 == $z1 goto label3;

        r0 = new javax.jmdns.impl.DNSRecord$Service;

        $r6 = virtualinvoke r8.<javax.jmdns.impl.ServiceInfoImpl: java.lang.String getQualifiedName()>();

        $r11 = <javax.jmdns.impl.constants.DNSRecordClass: javax.jmdns.impl.constants.DNSRecordClass CLASS_IN>;

        $i1 = virtualinvoke r8.<javax.jmdns.impl.ServiceInfoImpl: int getPriority()>();

        $i2 = virtualinvoke r8.<javax.jmdns.impl.ServiceInfoImpl: int getWeight()>();

        $i3 = virtualinvoke r8.<javax.jmdns.impl.ServiceInfoImpl: int getPort()>();

        $r9 = virtualinvoke $r1.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.HostInfo getLocalHost()>();

        $r10 = virtualinvoke $r9.<javax.jmdns.impl.HostInfo: java.lang.String getName()>();

        specialinvoke r0.<javax.jmdns.impl.DNSRecord$Service: void <init>(java.lang.String,javax.jmdns.impl.constants.DNSRecordClass,boolean,int,int,int,int,java.lang.String)>($r6, $r11, 1, 3600, $i1, $i2, $i3, $r10);

        r4 = virtualinvoke $r1.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.DNSOutgoing addAnswer(javax.jmdns.impl.DNSIncoming,java.net.InetAddress,int,javax.jmdns.impl.DNSOutgoing,javax.jmdns.impl.DNSRecord)>($r2, $r3, $i0, r4, r0);

        return r4;

     label2:
        $z0 = 0;

        goto label1;

     label3:
        return r4;
    }
    public int getPort()
    {
        javax.jmdns.impl.DNSRecord$Service r0;
        int i0;

        r0 := @this: javax.jmdns.impl.DNSRecord$Service;

        i0 = r0.<javax.jmdns.impl.DNSRecord$Service: int _port>;

        return i0;
    }
    public int getPriority()
    {
        javax.jmdns.impl.DNSRecord$Service r0;
        int i0;

        r0 := @this: javax.jmdns.impl.DNSRecord$Service;

        i0 = r0.<javax.jmdns.impl.DNSRecord$Service: int _priority>;

        return i0;
    }
    java.lang.String getServer()
    {
        javax.jmdns.impl.DNSRecord$Service r0;
        java.lang.String r1;

        r0 := @this: javax.jmdns.impl.DNSRecord$Service;

        r1 = r0.<javax.jmdns.impl.DNSRecord$Service: java.lang.String _server>;

        return r1;
    }
    public javax.jmdns.ServiceEvent getServiceEvent(javax.jmdns.impl.JmDNSImpl)
    {
        javax.jmdns.impl.DNSRecord$Service r0;
        javax.jmdns.impl.JmDNSImpl $r1;
        javax.jmdns.ServiceInfo $r2;
        javax.jmdns.impl.ServiceInfoImpl $r3;
        javax.jmdns.impl.ServiceEventImpl $r4;
        java.lang.String $r5, $r6;

        r0 := @this: javax.jmdns.impl.DNSRecord$Service;

        $r1 := @parameter0: javax.jmdns.impl.JmDNSImpl;

        $r2 = virtualinvoke r0.<javax.jmdns.impl.DNSRecord$Service: javax.jmdns.ServiceInfo getServiceInfo(boolean)>(0);

        $r3 = (javax.jmdns.impl.ServiceInfoImpl) $r2;

        virtualinvoke $r3.<javax.jmdns.impl.ServiceInfoImpl: void setDns(javax.jmdns.impl.JmDNSImpl)>($r1);

        $r4 = new javax.jmdns.impl.ServiceEventImpl;

        $r5 = virtualinvoke $r2.<javax.jmdns.ServiceInfo: java.lang.String getType()>();

        $r6 = virtualinvoke $r2.<javax.jmdns.ServiceInfo: java.lang.String getName()>();

        specialinvoke $r4.<javax.jmdns.impl.ServiceEventImpl: void <init>(javax.jmdns.impl.JmDNSImpl,java.lang.String,java.lang.String,javax.jmdns.ServiceInfo)>($r1, $r5, $r6, $r2);

        return $r4;
    }
    public javax.jmdns.ServiceInfo getServiceInfo(boolean)
    {
        javax.jmdns.impl.DNSRecord$Service r0;
        boolean $z0;
        javax.jmdns.impl.ServiceInfoImpl $r1;
        int $i0, $i1, $i2;
        java.util.Map $r2;

        r0 := @this: javax.jmdns.impl.DNSRecord$Service;

        $z0 := @parameter0: boolean;

        $r1 = new javax.jmdns.impl.ServiceInfoImpl;

        $r2 = virtualinvoke r0.<javax.jmdns.impl.DNSRecord$Service: java.util.Map getQualifiedNameMap()>();

        $i0 = r0.<javax.jmdns.impl.DNSRecord$Service: int _port>;

        $i1 = r0.<javax.jmdns.impl.DNSRecord$Service: int _weight>;

        $i2 = r0.<javax.jmdns.impl.DNSRecord$Service: int _priority>;

        specialinvoke $r1.<javax.jmdns.impl.ServiceInfoImpl: void <init>(java.util.Map,int,int,int,boolean,byte[])>($r2, $i0, $i1, $i2, $z0, null);

        return $r1;
    }
    public int getWeight()
    {
        javax.jmdns.impl.DNSRecord$Service r0;
        int i0;

        r0 := @this: javax.jmdns.impl.DNSRecord$Service;

        i0 = r0.<javax.jmdns.impl.DNSRecord$Service: int _weight>;

        return i0;
    }
    boolean handleQuery(javax.jmdns.impl.JmDNSImpl, long)
    {
        javax.jmdns.impl.DNSRecord$Service r0, r2;
        javax.jmdns.impl.JmDNSImpl $r1;
        long $l0;
        java.io.IOException r3;
        java.util.Map $r4;
        java.lang.String $r5, $r9;
        java.lang.Object $r6;
        javax.jmdns.impl.ServiceInfoImpl r7;
        boolean $z0;
        int $i1, $i2, $i3;
        javax.jmdns.impl.HostInfo $r8;
        org.slf4j.Logger $r10;
        java.lang.StringBuilder $r11;
        java.net.InetAddress $r12, $r14;
        javax.jmdns.impl.constants.DNSRecordClass $r13;
        javax.jmdns.impl.NameRegister $r15;
        javax.jmdns.impl.NameRegister$NameType $r16;

        r0 := @this: javax.jmdns.impl.DNSRecord$Service;

        $r1 := @parameter0: javax.jmdns.impl.JmDNSImpl;

        $l0 := @parameter1: long;

        $r4 = virtualinvoke $r1.<javax.jmdns.impl.JmDNSImpl: java.util.Map getServices()>();

        $r5 = virtualinvoke r0.<javax.jmdns.impl.DNSRecord$Service: java.lang.String getKey()>();

        $r6 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        r7 = (javax.jmdns.impl.ServiceInfoImpl) $r6;

        if r7 == null goto label10;

        $z0 = virtualinvoke r7.<javax.jmdns.impl.ServiceInfoImpl: boolean isAnnouncing()>();

        if $z0 != 0 goto label01;

        $z0 = virtualinvoke r7.<javax.jmdns.impl.ServiceInfoImpl: boolean isAnnounced()>();

        if $z0 == 0 goto label10;

     label01:
        $i1 = r0.<javax.jmdns.impl.DNSRecord$Service: int _port>;

        $i2 = virtualinvoke r7.<javax.jmdns.impl.ServiceInfoImpl: int getPort()>();

        if $i1 != $i2 goto label02;

        $r5 = r0.<javax.jmdns.impl.DNSRecord$Service: java.lang.String _server>;

        $r8 = virtualinvoke $r1.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.HostInfo getLocalHost()>();

        $r9 = virtualinvoke $r8.<javax.jmdns.impl.HostInfo: java.lang.String getName()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r9);

        if $z0 != 0 goto label10;

     label02:
        $r10 = <javax.jmdns.impl.DNSRecord$Service: org.slf4j.Logger logger1>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("handleQuery() Conflicting probe detected from: ");

        $r12 = virtualinvoke r0.<javax.jmdns.impl.DNSRecord$Service: java.net.InetAddress getRecordSource()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r5 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r10.<org.slf4j.Logger: void debug(java.lang.String)>($r5);

        r2 = new javax.jmdns.impl.DNSRecord$Service;

        $r5 = virtualinvoke r7.<javax.jmdns.impl.ServiceInfoImpl: java.lang.String getQualifiedName()>();

        $r13 = <javax.jmdns.impl.constants.DNSRecordClass: javax.jmdns.impl.constants.DNSRecordClass CLASS_IN>;

        $i1 = virtualinvoke r7.<javax.jmdns.impl.ServiceInfoImpl: int getPriority()>();

        $i2 = virtualinvoke r7.<javax.jmdns.impl.ServiceInfoImpl: int getWeight()>();

        $i3 = virtualinvoke r7.<javax.jmdns.impl.ServiceInfoImpl: int getPort()>();

        $r8 = virtualinvoke $r1.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.HostInfo getLocalHost()>();

        $r9 = virtualinvoke $r8.<javax.jmdns.impl.HostInfo: java.lang.String getName()>();

        specialinvoke r2.<javax.jmdns.impl.DNSRecord$Service: void <init>(java.lang.String,javax.jmdns.impl.constants.DNSRecordClass,boolean,int,int,int,int,java.lang.String)>($r5, $r13, 1, 3600, $i1, $i2, $i3, $r9);

     label03:
        $r12 = virtualinvoke $r1.<javax.jmdns.impl.JmDNSImpl: java.net.InetAddress getInetAddress()>();

        $r14 = virtualinvoke r0.<javax.jmdns.impl.DNSRecord$Service: java.net.InetAddress getRecordSource()>();

        $z0 = virtualinvoke $r12.<java.net.InetAddress: boolean equals(java.lang.Object)>($r14);

     label04:
        if $z0 == 0 goto label06;

        $r10 = <javax.jmdns.impl.DNSRecord$Service: org.slf4j.Logger logger1>;

        $r11 = new java.lang.StringBuilder;

     label05:
        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Got conflicting probe from ourselves\nincoming: ");

        $r5 = virtualinvoke r0.<javax.jmdns.impl.DNSRecord$Service: java.lang.String toString()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("local   : ");

        $r5 = virtualinvoke r2.<javax.jmdns.impl.DNSRecord$Service: java.lang.String toString()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r10.<org.slf4j.Logger: void warn(java.lang.String)>($r5);

     label06:
        $i1 = virtualinvoke r0.<javax.jmdns.impl.DNSRecord$Service: int compareTo(javax.jmdns.impl.DNSEntry)>(r2);

        if $i1 != 0 goto label08;

        $r10 = <javax.jmdns.impl.DNSRecord$Service: org.slf4j.Logger logger1>;

        interfaceinvoke $r10.<org.slf4j.Logger: void debug(java.lang.String)>("handleQuery() Ignoring a identical service query");

        return 0;

     label07:
        r3 := @caughtexception;

        $r10 = <javax.jmdns.impl.DNSRecord$Service: org.slf4j.Logger logger1>;

        interfaceinvoke $r10.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("IOException", r3);

        goto label06;

     label08:
        $z0 = virtualinvoke r7.<javax.jmdns.impl.ServiceInfoImpl: boolean isProbing()>();

        if $z0 == 0 goto label09;

        if $i1 <= 0 goto label09;

        $r5 = virtualinvoke r7.<javax.jmdns.impl.ServiceInfoImpl: java.lang.String getQualifiedName()>();

        $r5 = virtualinvoke $r5.<java.lang.String: java.lang.String toLowerCase()>();

        $r15 = staticinvoke <javax.jmdns.impl.NameRegister$Factory: javax.jmdns.impl.NameRegister getRegistry()>();

        $r8 = virtualinvoke $r1.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.HostInfo getLocalHost()>();

        $r12 = virtualinvoke $r8.<javax.jmdns.impl.HostInfo: java.net.InetAddress getInetAddress()>();

        $r9 = virtualinvoke r7.<javax.jmdns.impl.ServiceInfoImpl: java.lang.String getName()>();

        $r16 = <javax.jmdns.impl.NameRegister$NameType: javax.jmdns.impl.NameRegister$NameType SERVICE>;

        $r9 = interfaceinvoke $r15.<javax.jmdns.impl.NameRegister: java.lang.String incrementName(java.net.InetAddress,java.lang.String,javax.jmdns.impl.NameRegister$NameType)>($r12, $r9, $r16);

        virtualinvoke r7.<javax.jmdns.impl.ServiceInfoImpl: void setName(java.lang.String)>($r9);

        $r4 = virtualinvoke $r1.<javax.jmdns.impl.JmDNSImpl: java.util.Map getServices()>();

        interfaceinvoke $r4.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r5);

        $r4 = virtualinvoke $r1.<javax.jmdns.impl.JmDNSImpl: java.util.Map getServices()>();

        $r5 = virtualinvoke r7.<javax.jmdns.impl.ServiceInfoImpl: java.lang.String getQualifiedName()>();

        $r5 = virtualinvoke $r5.<java.lang.String: java.lang.String toLowerCase()>();

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r7);

        $r10 = <javax.jmdns.impl.DNSRecord$Service: org.slf4j.Logger logger1>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("handleQuery() Lost tie break: new unique name chosen:");

        $r5 = virtualinvoke r7.<javax.jmdns.impl.ServiceInfoImpl: java.lang.String getName()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r10.<org.slf4j.Logger: void debug(java.lang.String)>($r5);

        virtualinvoke r7.<javax.jmdns.impl.ServiceInfoImpl: boolean revertState()>();

        return 1;

     label09:
        return 0;

     label10:
        return 0;

        catch java.io.IOException from label03 to label04 with label07;
        catch java.io.IOException from label05 to label06 with label07;
    }
    boolean handleResponse(javax.jmdns.impl.JmDNSImpl)
    {
        javax.jmdns.impl.DNSRecord$Service r0;
        javax.jmdns.impl.JmDNSImpl $r1;
        javax.jmdns.impl.NameRegister$NameType $r2;
        java.util.Map $r3;
        java.lang.String $r4, $r8;
        java.lang.Object $r5;
        javax.jmdns.impl.ServiceInfoImpl r6;
        int $i0, $i1;
        javax.jmdns.impl.HostInfo $r7;
        boolean $z0;
        org.slf4j.Logger $r9;
        javax.jmdns.impl.NameRegister $r10;
        java.net.InetAddress $r11;
        java.lang.StringBuilder $r12;

        r0 := @this: javax.jmdns.impl.DNSRecord$Service;

        $r1 := @parameter0: javax.jmdns.impl.JmDNSImpl;

        $r3 = virtualinvoke $r1.<javax.jmdns.impl.JmDNSImpl: java.util.Map getServices()>();

        $r4 = virtualinvoke r0.<javax.jmdns.impl.DNSRecord$Service: java.lang.String getKey()>();

        $r5 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        r6 = (javax.jmdns.impl.ServiceInfoImpl) $r5;

        if r6 == null goto label3;

        $i0 = r0.<javax.jmdns.impl.DNSRecord$Service: int _port>;

        $i1 = virtualinvoke r6.<javax.jmdns.impl.ServiceInfoImpl: int getPort()>();

        if $i0 != $i1 goto label1;

        $r4 = r0.<javax.jmdns.impl.DNSRecord$Service: java.lang.String _server>;

        $r7 = virtualinvoke $r1.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.HostInfo getLocalHost()>();

        $r8 = virtualinvoke $r7.<javax.jmdns.impl.HostInfo: java.lang.String getName()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r8);

        if $z0 != 0 goto label3;

     label1:
        $r9 = <javax.jmdns.impl.DNSRecord$Service: org.slf4j.Logger logger1>;

        interfaceinvoke $r9.<org.slf4j.Logger: void debug(java.lang.String)>("handleResponse() Denial detected");

        $z0 = virtualinvoke r6.<javax.jmdns.impl.ServiceInfoImpl: boolean isProbing()>();

        if $z0 == 0 goto label2;

        $r4 = virtualinvoke r6.<javax.jmdns.impl.ServiceInfoImpl: java.lang.String getQualifiedName()>();

        $r4 = virtualinvoke $r4.<java.lang.String: java.lang.String toLowerCase()>();

        $r10 = staticinvoke <javax.jmdns.impl.NameRegister$Factory: javax.jmdns.impl.NameRegister getRegistry()>();

        $r7 = virtualinvoke $r1.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.HostInfo getLocalHost()>();

        $r11 = virtualinvoke $r7.<javax.jmdns.impl.HostInfo: java.net.InetAddress getInetAddress()>();

        $r8 = virtualinvoke r6.<javax.jmdns.impl.ServiceInfoImpl: java.lang.String getName()>();

        $r2 = <javax.jmdns.impl.NameRegister$NameType: javax.jmdns.impl.NameRegister$NameType SERVICE>;

        $r8 = interfaceinvoke $r10.<javax.jmdns.impl.NameRegister: java.lang.String incrementName(java.net.InetAddress,java.lang.String,javax.jmdns.impl.NameRegister$NameType)>($r11, $r8, $r2);

        virtualinvoke r6.<javax.jmdns.impl.ServiceInfoImpl: void setName(java.lang.String)>($r8);

        $r3 = virtualinvoke $r1.<javax.jmdns.impl.JmDNSImpl: java.util.Map getServices()>();

        interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r4);

        $r3 = virtualinvoke $r1.<javax.jmdns.impl.JmDNSImpl: java.util.Map getServices()>();

        $r4 = virtualinvoke r6.<javax.jmdns.impl.ServiceInfoImpl: java.lang.String getQualifiedName()>();

        $r4 = virtualinvoke $r4.<java.lang.String: java.lang.String toLowerCase()>();

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, r6);

        $r9 = <javax.jmdns.impl.DNSRecord$Service: org.slf4j.Logger logger1>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("handleResponse() New unique name chose:");

        $r4 = virtualinvoke r6.<javax.jmdns.impl.ServiceInfoImpl: java.lang.String getName()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r9.<org.slf4j.Logger: void debug(java.lang.String)>($r4);

     label2:
        virtualinvoke r6.<javax.jmdns.impl.ServiceInfoImpl: boolean revertState()>();

        return 1;

     label3:
        return 0;
    }
    public boolean isSingleValued()
    {
        javax.jmdns.impl.DNSRecord$Service r0;

        r0 := @this: javax.jmdns.impl.DNSRecord$Service;

        return 1;
    }
    boolean sameValue(javax.jmdns.impl.DNSRecord)
    {
        javax.jmdns.impl.DNSRecord$Service r0, r2;
        javax.jmdns.impl.DNSRecord $r1;
        boolean $z0;
        int $i0, $i1;
        java.lang.String $r3, $r4;

        r0 := @this: javax.jmdns.impl.DNSRecord$Service;

        $r1 := @parameter0: javax.jmdns.impl.DNSRecord;

        $z0 = $r1 instanceof javax.jmdns.impl.DNSRecord$Service;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = (javax.jmdns.impl.DNSRecord$Service) $r1;

        $i0 = r0.<javax.jmdns.impl.DNSRecord$Service: int _priority>;

        $i1 = r2.<javax.jmdns.impl.DNSRecord$Service: int _priority>;

        if $i0 != $i1 goto label2;

        $i0 = r0.<javax.jmdns.impl.DNSRecord$Service: int _weight>;

        $i1 = r2.<javax.jmdns.impl.DNSRecord$Service: int _weight>;

        if $i0 != $i1 goto label2;

        $i0 = r0.<javax.jmdns.impl.DNSRecord$Service: int _port>;

        $i1 = r2.<javax.jmdns.impl.DNSRecord$Service: int _port>;

        if $i0 != $i1 goto label2;

        $r3 = r0.<javax.jmdns.impl.DNSRecord$Service: java.lang.String _server>;

        $r4 = r2.<javax.jmdns.impl.DNSRecord$Service: java.lang.String _server>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }
    protected void toByteArray(java.io.DataOutputStream) throws java.io.IOException
    {
        javax.jmdns.impl.DNSRecord$Service r0;
        java.io.DataOutputStream $r1;
        byte[] $r2;
        int $i0;
        java.lang.String $r3;
        java.io.UnsupportedEncodingException $r4;

        r0 := @this: javax.jmdns.impl.DNSRecord$Service;

        $r1 := @parameter0: java.io.DataOutputStream;

        specialinvoke r0.<javax.jmdns.impl.DNSRecord: void toByteArray(java.io.DataOutputStream)>($r1);

        $i0 = r0.<javax.jmdns.impl.DNSRecord$Service: int _priority>;

        virtualinvoke $r1.<java.io.DataOutputStream: void writeShort(int)>($i0);

        $i0 = r0.<javax.jmdns.impl.DNSRecord$Service: int _weight>;

        virtualinvoke $r1.<java.io.DataOutputStream: void writeShort(int)>($i0);

        $i0 = r0.<javax.jmdns.impl.DNSRecord$Service: int _port>;

        virtualinvoke $r1.<java.io.DataOutputStream: void writeShort(int)>($i0);

        $r3 = r0.<javax.jmdns.impl.DNSRecord$Service: java.lang.String _server>;

     label1:
        $r2 = virtualinvoke $r3.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        virtualinvoke $r1.<java.io.DataOutputStream: void write(byte[])>($r2);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        return;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }
    protected void toString(java.lang.StringBuilder)
    {
        javax.jmdns.impl.DNSRecord$Service r0;
        java.lang.StringBuilder $r1, $r2;
        java.lang.String $r3;
        int $i0;

        r0 := @this: javax.jmdns.impl.DNSRecord$Service;

        $r1 := @parameter0: java.lang.StringBuilder;

        specialinvoke r0.<javax.jmdns.impl.DNSRecord: void toString(java.lang.StringBuilder)>($r1);

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" server: \'");

        $r3 = r0.<javax.jmdns.impl.DNSRecord$Service: java.lang.String _server>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $i0 = r0.<javax.jmdns.impl.DNSRecord$Service: int _port>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        return;
    }
    void write(javax.jmdns.impl.DNSOutgoing$MessageOutputStream)
    {
        javax.jmdns.impl.DNSRecord$Service r0;
        javax.jmdns.impl.DNSOutgoing$MessageOutputStream $r1;
        int $i0;
        boolean $z0;
        java.lang.String $r2, $r3;

        r0 := @this: javax.jmdns.impl.DNSRecord$Service;

        $r1 := @parameter0: javax.jmdns.impl.DNSOutgoing$MessageOutputStream;

        $i0 = r0.<javax.jmdns.impl.DNSRecord$Service: int _priority>;

        virtualinvoke $r1.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: void writeShort(int)>($i0);

        $i0 = r0.<javax.jmdns.impl.DNSRecord$Service: int _weight>;

        virtualinvoke $r1.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: void writeShort(int)>($i0);

        $i0 = r0.<javax.jmdns.impl.DNSRecord$Service: int _port>;

        virtualinvoke $r1.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: void writeShort(int)>($i0);

        $z0 = <javax.jmdns.impl.DNSIncoming: boolean USE_DOMAIN_NAME_FORMAT_FOR_SRV_TARGET>;

        if $z0 == 0 goto label1;

        $r2 = r0.<javax.jmdns.impl.DNSRecord$Service: java.lang.String _server>;

        virtualinvoke $r1.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: void writeName(java.lang.String)>($r2);

        return;

     label1:
        $r2 = r0.<javax.jmdns.impl.DNSRecord$Service: java.lang.String _server>;

        $r3 = r0.<javax.jmdns.impl.DNSRecord$Service: java.lang.String _server>;

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        virtualinvoke $r1.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: void writeUTF(java.lang.String,int,int)>($r2, 0, $i0);

        virtualinvoke $r1.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: void writeByte(int)>(0);

        return;
    }
