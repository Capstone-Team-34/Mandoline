javax.jmdns.impl.JmmDNSImpl$5 extends java.lang.Object implements java.lang.Runnable
final javax.jmdns.impl.JmmDNSImpl this$0
final javax.jmdns.JmDNS val$dns
final java.util.Collection val$infos
final java.util.Map val$serviceListeners
final java.util.Collection val$typeListeners
final java.util.Collection val$types
    void <init>(javax.jmdns.impl.JmmDNSImpl, java.util.Collection, javax.jmdns.JmDNS, java.util.Collection, java.util.Collection, java.util.Map)
    {
        javax.jmdns.impl.JmmDNSImpl$5 r0;
        javax.jmdns.impl.JmmDNSImpl $r1;
        java.util.Collection $r2, $r4, $r5;
        javax.jmdns.JmDNS $r3;
        java.util.Map $r6;

        r0 := @this: javax.jmdns.impl.JmmDNSImpl$5;

        $r1 := @parameter0: javax.jmdns.impl.JmmDNSImpl;

        $r2 := @parameter1: java.util.Collection;

        $r3 := @parameter2: javax.jmdns.JmDNS;

        $r4 := @parameter3: java.util.Collection;

        $r5 := @parameter4: java.util.Collection;

        $r6 := @parameter5: java.util.Map;

        r0.<javax.jmdns.impl.JmmDNSImpl$5: javax.jmdns.impl.JmmDNSImpl this$0> = $r1;

        r0.<javax.jmdns.impl.JmmDNSImpl$5: java.util.Collection val$types> = $r2;

        r0.<javax.jmdns.impl.JmmDNSImpl$5: javax.jmdns.JmDNS val$dns> = $r3;

        r0.<javax.jmdns.impl.JmmDNSImpl$5: java.util.Collection val$infos> = $r4;

        r0.<javax.jmdns.impl.JmmDNSImpl$5: java.util.Collection val$typeListeners> = $r5;

        r0.<javax.jmdns.impl.JmmDNSImpl$5: java.util.Map val$serviceListeners> = $r6;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public void run()
    {
        javax.jmdns.impl.JmmDNSImpl$5 r0;
        java.util.Collection $r1;
        java.util.Iterator $r2, $r13;
        boolean $z0;
        java.lang.Object $r3;
        java.lang.String r4;
        javax.jmdns.JmDNS $r5;
        javax.jmdns.ServiceInfo r6;
        java.io.IOException $r7, $r9;
        javax.jmdns.ServiceTypeListener r8;
        java.util.Map $r10;
        java.util.Set $r11;
        java.util.List r12;
        javax.jmdns.ServiceListener r14;
        java.lang.Throwable $r15;

        r0 := @this: javax.jmdns.impl.JmmDNSImpl$5;

        $r1 = r0.<javax.jmdns.impl.JmmDNSImpl$5: java.util.Collection val$types>;

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label02;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r3;

        $r5 = r0.<javax.jmdns.impl.JmmDNSImpl$5: javax.jmdns.JmDNS val$dns>;

        virtualinvoke $r5.<javax.jmdns.JmDNS: boolean registerServiceType(java.lang.String)>(r4);

        goto label01;

     label02:
        $r1 = r0.<javax.jmdns.impl.JmmDNSImpl$5: java.util.Collection val$infos>;

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label03:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label07;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r6 = (javax.jmdns.ServiceInfo) $r3;

        $r5 = r0.<javax.jmdns.impl.JmmDNSImpl$5: javax.jmdns.JmDNS val$dns>;

     label04:
        r6 = virtualinvoke r6.<javax.jmdns.ServiceInfo: javax.jmdns.ServiceInfo clone()>();

        virtualinvoke $r5.<javax.jmdns.JmDNS: void registerService(javax.jmdns.ServiceInfo)>(r6);

     label05:
        goto label03;

     label06:
        $r7 := @caughtexception;

        goto label03;

     label07:
        $r1 = r0.<javax.jmdns.impl.JmmDNSImpl$5: java.util.Collection val$typeListeners>;

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label08:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label12;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r8 = (javax.jmdns.ServiceTypeListener) $r3;

        $r5 = r0.<javax.jmdns.impl.JmmDNSImpl$5: javax.jmdns.JmDNS val$dns>;

     label09:
        virtualinvoke $r5.<javax.jmdns.JmDNS: void addServiceTypeListener(javax.jmdns.ServiceTypeListener)>(r8);

     label10:
        goto label08;

     label11:
        $r9 := @caughtexception;

        goto label08;

     label12:
        $r10 = r0.<javax.jmdns.impl.JmmDNSImpl$5: java.util.Map val$serviceListeners>;

        $r11 = interfaceinvoke $r10.<java.util.Map: java.util.Set keySet()>();

        $r2 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>();

     label13:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label20;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r3;

        $r10 = r0.<javax.jmdns.impl.JmmDNSImpl$5: java.util.Map val$serviceListeners>;

        $r3 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        r12 = (java.util.List) $r3;

        entermonitor r12;

     label14:
        $r13 = interfaceinvoke r12.<java.util.List: java.util.Iterator iterator()>();

     label15:
        $z0 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label18;

        $r3 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r14 = (javax.jmdns.ServiceListener) $r3;

        $r5 = r0.<javax.jmdns.impl.JmmDNSImpl$5: javax.jmdns.JmDNS val$dns>;

        virtualinvoke $r5.<javax.jmdns.JmDNS: void addServiceListener(java.lang.String,javax.jmdns.ServiceListener)>(r4, r14);

        goto label15;

     label16:
        $r15 := @caughtexception;

        exitmonitor r12;

     label17:
        throw $r15;

     label18:
        exitmonitor r12;

     label19:
        goto label13;

     label20:
        return;

        catch java.io.IOException from label04 to label05 with label06;
        catch java.io.IOException from label09 to label10 with label11;
        catch java.lang.Throwable from label14 to label17 with label16;
        catch java.lang.Throwable from label18 to label19 with label16;
    }
