javax.jmdns.impl.NameRegister$UniqueNamePerInterface extends javax.jmdns.impl.NameRegister$BaseRegister
private final java.util.concurrent.ConcurrentMap _hostNames
private final java.util.concurrent.ConcurrentMap _serviceNames
    public void <init>()
    {
        javax.jmdns.impl.NameRegister$UniqueNamePerInterface r0;
        java.util.concurrent.ConcurrentHashMap $r1;

        r0 := @this: javax.jmdns.impl.NameRegister$UniqueNamePerInterface;

        specialinvoke r0.<javax.jmdns.impl.NameRegister$BaseRegister: void <init>()>();

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<javax.jmdns.impl.NameRegister$UniqueNamePerInterface: java.util.concurrent.ConcurrentMap _hostNames> = $r1;

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<javax.jmdns.impl.NameRegister$UniqueNamePerInterface: java.util.concurrent.ConcurrentMap _serviceNames> = $r1;

        return;
    }
    public boolean checkName(java.net.InetAddress, java.lang.String, javax.jmdns.impl.NameRegister$NameType)
    {
        javax.jmdns.impl.NameRegister$UniqueNamePerInterface r0;
        java.net.InetAddress $r1;
        java.lang.String $r2, r7;
        javax.jmdns.impl.NameRegister$NameType $r3;
        int[] $r4;
        int $i0;
        java.util.concurrent.ConcurrentMap $r5;
        java.lang.Object $r6;
        boolean $z0;
        java.util.Set r8;

        r0 := @this: javax.jmdns.impl.NameRegister$UniqueNamePerInterface;

        $r1 := @parameter0: java.net.InetAddress;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: javax.jmdns.impl.NameRegister$NameType;

        $r4 = <javax.jmdns.impl.NameRegister$1: int[] $SwitchMap$javax$jmdns$impl$NameRegister$NameType>;

        $i0 = virtualinvoke $r3.<javax.jmdns.impl.NameRegister$NameType: int ordinal()>();

        $i0 = $r4[$i0];

        lookupswitch($i0)
        {
            case 1: goto label2;
            case 2: goto label4;
            default: goto label1;
        };

     label1:
        return 0;

     label2:
        $r5 = r0.<javax.jmdns.impl.NameRegister$UniqueNamePerInterface: java.util.concurrent.ConcurrentMap _hostNames>;

        $r6 = interfaceinvoke $r5.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>($r1);

        r7 = (java.lang.String) $r6;

        if r7 == null goto label3;

        $z0 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label6;

     label3:
        return 0;

     label4:
        $r5 = r0.<javax.jmdns.impl.NameRegister$UniqueNamePerInterface: java.util.concurrent.ConcurrentMap _serviceNames>;

        $r6 = interfaceinvoke $r5.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>($r1);

        r8 = (java.util.Set) $r6;

        if r8 == null goto label5;

        $z0 = interfaceinvoke r8.<java.util.Set: boolean contains(java.lang.Object)>($r2);

        if $z0 != 0 goto label6;

     label5:
        return 0;

     label6:
        return 1;
    }
    public java.lang.String incrementName(java.net.InetAddress, java.lang.String, javax.jmdns.impl.NameRegister$NameType)
    {
        javax.jmdns.impl.NameRegister$UniqueNamePerInterface r0;
        java.net.InetAddress $r1;
        javax.jmdns.impl.NameRegister$NameType $r2;
        java.lang.String r3;
        int[] $r4;
        int $i0;

        r0 := @this: javax.jmdns.impl.NameRegister$UniqueNamePerInterface;

        $r1 := @parameter0: java.net.InetAddress;

        r3 := @parameter1: java.lang.String;

        $r2 := @parameter2: javax.jmdns.impl.NameRegister$NameType;

        $r4 = <javax.jmdns.impl.NameRegister$1: int[] $SwitchMap$javax$jmdns$impl$NameRegister$NameType>;

        $i0 = virtualinvoke $r2.<javax.jmdns.impl.NameRegister$NameType: int ordinal()>();

        $i0 = $r4[$i0];

        lookupswitch($i0)
        {
            case 1: goto label2;
            case 2: goto label3;
            default: goto label1;
        };

     label1:
        return r3;

     label2:
        r3 = virtualinvoke r0.<javax.jmdns.impl.NameRegister$UniqueNamePerInterface: java.lang.String incrementNameWithDash(java.lang.String)>(r3);

        return r3;

     label3:
        r3 = virtualinvoke r0.<javax.jmdns.impl.NameRegister$UniqueNamePerInterface: java.lang.String incrementNameWithParentesis(java.lang.String)>(r3);

        return r3;
    }
    public void register(java.net.InetAddress, java.lang.String, javax.jmdns.impl.NameRegister$NameType)
    {
        javax.jmdns.impl.NameRegister$UniqueNamePerInterface r0;
        java.net.InetAddress $r1;
        java.lang.String $r2;
        javax.jmdns.impl.NameRegister$NameType $r3;
        int $i0;
        int[] $r4;

        r0 := @this: javax.jmdns.impl.NameRegister$UniqueNamePerInterface;

        $r1 := @parameter0: java.net.InetAddress;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: javax.jmdns.impl.NameRegister$NameType;

        $r4 = <javax.jmdns.impl.NameRegister$1: int[] $SwitchMap$javax$jmdns$impl$NameRegister$NameType>;

        $i0 = virtualinvoke $r3.<javax.jmdns.impl.NameRegister$NameType: int ordinal()>();

        $i0 = $r4[$i0];

        lookupswitch($i0)
        {
            case 1: goto label1;
            case 2: goto label1;
            default: goto label1;
        };

     label1:
        return;
    }
