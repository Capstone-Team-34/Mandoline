javax.jmdns.impl.JmDNSImpl extends javax.jmdns.JmDNS implements javax.jmdns.impl.DNSStatefulObject javax.jmdns.impl.DNSTaskStarter
private static final java.util.Random _random
private static org.slf4j.Logger logger
private final javax.jmdns.impl.DNSCache _cache
private volatile javax.jmdns.JmDNS$Delegate _delegate
private final java.util.concurrent.ExecutorService _executor
private volatile java.net.InetAddress _group
private java.lang.Thread _incomingListener
private final java.util.concurrent.locks.ReentrantLock _ioLock
private long _lastThrottleIncrement
private final java.util.List _listeners
private javax.jmdns.impl.HostInfo _localHost
private final java.lang.String _name
private javax.jmdns.impl.DNSIncoming _plannedAnswer
private final java.lang.Object _recoverLock
private final java.util.concurrent.ConcurrentMap _serviceCollectors
final java.util.concurrent.ConcurrentMap _serviceListeners
private final java.util.concurrent.ConcurrentMap _serviceTypes
private final java.util.concurrent.ConcurrentMap _services
protected java.lang.Thread _shutdown
private volatile java.net.MulticastSocket _socket
private int _throttle
private final java.util.Set _typeListeners
    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        org.slf4j.Logger $r2;
        java.util.Random $r3;

        $r0 = class "Ljavax/jmdns/impl/JmDNSImpl;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.String)>($r1);

        <javax.jmdns.impl.JmDNSImpl: org.slf4j.Logger logger> = $r2;

        $r3 = new java.util.Random;

        specialinvoke $r3.<java.util.Random: void <init>()>();

        <javax.jmdns.impl.JmDNSImpl: java.util.Random _random> = $r3;

        return;
    }
    public void <init>(java.net.InetAddress, java.lang.String) throws java.io.IOException
    {
        javax.jmdns.impl.JmDNSImpl r0;
        java.net.InetAddress $r1;
        java.lang.String r2;
        javax.jmdns.impl.util.NamedThreadFactory $r3;
        java.util.concurrent.ExecutorService $r4;
        java.util.concurrent.locks.ReentrantLock $r5;
        java.lang.Object $r6;
        org.slf4j.Logger $r7;
        boolean $z0;
        javax.jmdns.impl.DNSCache $r8;
        java.util.ArrayList $r9;
        java.util.List $r10;
        java.util.concurrent.ConcurrentHashMap $r11;
        java.util.HashSet $r12;
        java.util.Set $r13;
        javax.jmdns.impl.HostInfo $r14;
        java.util.Map $r15;
        java.util.Collection $r16;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 := @parameter0: java.net.InetAddress;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<javax.jmdns.JmDNS: void <init>()>();

        $r3 = new javax.jmdns.impl.util.NamedThreadFactory;

        specialinvoke $r3.<javax.jmdns.impl.util.NamedThreadFactory: void <init>(java.lang.String)>("JmDNS");

        $r4 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newSingleThreadExecutor(java.util.concurrent.ThreadFactory)>($r3);

        r0.<javax.jmdns.impl.JmDNSImpl: java.util.concurrent.ExecutorService _executor> = $r4;

        $r5 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r5.<java.util.concurrent.locks.ReentrantLock: void <init>()>();

        r0.<javax.jmdns.impl.JmDNSImpl: java.util.concurrent.locks.ReentrantLock _ioLock> = $r5;

        $r6 = new java.lang.Object;

        specialinvoke $r6.<java.lang.Object: void <init>()>();

        r0.<javax.jmdns.impl.JmDNSImpl: java.lang.Object _recoverLock> = $r6;

        $r7 = <javax.jmdns.impl.JmDNSImpl: org.slf4j.Logger logger>;

        $z0 = interfaceinvoke $r7.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r7 = <javax.jmdns.impl.JmDNSImpl: org.slf4j.Logger logger>;

        interfaceinvoke $r7.<org.slf4j.Logger: void debug(java.lang.String)>("JmDNS instance created");

     label1:
        $r8 = new javax.jmdns.impl.DNSCache;

        specialinvoke $r8.<javax.jmdns.impl.DNSCache: void <init>(int)>(100);

        r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.DNSCache _cache> = $r8;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        $r10 = staticinvoke <java.util.Collections: java.util.List synchronizedList(java.util.List)>($r9);

        r0.<javax.jmdns.impl.JmDNSImpl: java.util.List _listeners> = $r10;

        $r11 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r11.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<javax.jmdns.impl.JmDNSImpl: java.util.concurrent.ConcurrentMap _serviceListeners> = $r11;

        $r12 = new java.util.HashSet;

        specialinvoke $r12.<java.util.HashSet: void <init>()>();

        $r13 = staticinvoke <java.util.Collections: java.util.Set synchronizedSet(java.util.Set)>($r12);

        r0.<javax.jmdns.impl.JmDNSImpl: java.util.Set _typeListeners> = $r13;

        $r11 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r11.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<javax.jmdns.impl.JmDNSImpl: java.util.concurrent.ConcurrentMap _serviceCollectors> = $r11;

        $r11 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r11.<java.util.concurrent.ConcurrentHashMap: void <init>(int)>(20);

        r0.<javax.jmdns.impl.JmDNSImpl: java.util.concurrent.ConcurrentMap _services> = $r11;

        $r11 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r11.<java.util.concurrent.ConcurrentHashMap: void <init>(int)>(20);

        r0.<javax.jmdns.impl.JmDNSImpl: java.util.concurrent.ConcurrentMap _serviceTypes> = $r11;

        $r14 = staticinvoke <javax.jmdns.impl.HostInfo: javax.jmdns.impl.HostInfo newHostInfo(java.net.InetAddress,javax.jmdns.impl.JmDNSImpl,java.lang.String)>($r1, r0, r2);

        r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.HostInfo _localHost> = $r14;

        if r2 == null goto label3;

     label2:
        r0.<javax.jmdns.impl.JmDNSImpl: java.lang.String _name> = r2;

        $r14 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.HostInfo getLocalHost()>();

        specialinvoke r0.<javax.jmdns.impl.JmDNSImpl: void openMulticastSocket(javax.jmdns.impl.HostInfo)>($r14);

        $r15 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: java.util.Map getServices()>();

        $r16 = interfaceinvoke $r15.<java.util.Map: java.util.Collection values()>();

        specialinvoke r0.<javax.jmdns.impl.JmDNSImpl: void start(java.util.Collection)>($r16);

        virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: void startReaper()>();

        return;

     label3:
        $r14 = r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.HostInfo _localHost>;

        r2 = virtualinvoke $r14.<javax.jmdns.impl.HostInfo: java.lang.String getName()>();

        goto label2;
    }
    private java.util.List aRecordsLast(java.util.List)
    {
        javax.jmdns.impl.JmDNSImpl r0;
        java.util.List r1;
        java.util.ArrayList r2, r3;
        int $i0;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        javax.jmdns.impl.DNSRecord r6;
        javax.jmdns.impl.constants.DNSRecordType $r7, $r8;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        r1 := @parameter0: java.util.List;

        r3 = new java.util.ArrayList;

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        specialinvoke r3.<java.util.ArrayList: void <init>(int)>($i0);

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        $r4 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (javax.jmdns.impl.DNSRecord) $r5;

        $r7 = virtualinvoke r6.<javax.jmdns.impl.DNSRecord: javax.jmdns.impl.constants.DNSRecordType getRecordType()>();

        $r8 = <javax.jmdns.impl.constants.DNSRecordType: javax.jmdns.impl.constants.DNSRecordType TYPE_A>;

        $z0 = virtualinvoke $r7.<javax.jmdns.impl.constants.DNSRecordType: boolean equals(java.lang.Object)>($r8);

        if $z0 != 0 goto label2;

        $r7 = virtualinvoke r6.<javax.jmdns.impl.DNSRecord: javax.jmdns.impl.constants.DNSRecordType getRecordType()>();

        $r8 = <javax.jmdns.impl.constants.DNSRecordType: javax.jmdns.impl.constants.DNSRecordType TYPE_AAAA>;

        $z0 = virtualinvoke $r7.<javax.jmdns.impl.constants.DNSRecordType: boolean equals(java.lang.Object)>($r8);

        if $z0 == 0 goto label3;

     label2:
        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r6);

        goto label1;

     label3:
        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r6);

        goto label1;

     label4:
        virtualinvoke r3.<java.util.ArrayList: boolean addAll(java.util.Collection)>(r2);

        return r3;
    }
    private void addServiceListener(java.lang.String, javax.jmdns.ServiceListener, boolean)
    {
        javax.jmdns.impl.JmDNSImpl r0;
        java.lang.String $r1, $r5, $r18, $r20, $r21;
        javax.jmdns.ServiceListener $r2;
        boolean $z0;
        java.util.ArrayList r3;
        javax.jmdns.impl.ListenerStatus$ServiceListenerStatus r4;
        java.util.concurrent.ConcurrentMap $r6;
        java.lang.Object $r7;
        java.util.List r8;
        java.util.LinkedList $r9;
        javax.jmdns.impl.JmDNSImpl$ServiceCollector $r10;
        javax.jmdns.impl.DNSCache $r11;
        java.util.Collection $r12;
        java.util.Iterator $r13;
        javax.jmdns.impl.DNSEntry r14;
        javax.jmdns.impl.DNSRecord r15;
        javax.jmdns.impl.constants.DNSRecordType $r16, $r17;
        javax.jmdns.impl.ServiceEventImpl $r19;
        javax.jmdns.ServiceInfo $r22;
        java.lang.Throwable $r23;
        javax.jmdns.ServiceEvent r24;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: javax.jmdns.ServiceListener;

        $z0 := @parameter2: boolean;

        r4 = new javax.jmdns.impl.ListenerStatus$ServiceListenerStatus;

        specialinvoke r4.<javax.jmdns.impl.ListenerStatus$ServiceListenerStatus: void <init>(javax.jmdns.ServiceListener,boolean)>($r2, $z0);

        $r5 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        $r6 = r0.<javax.jmdns.impl.JmDNSImpl: java.util.concurrent.ConcurrentMap _serviceListeners>;

        $r7 = interfaceinvoke $r6.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>($r5);

        r8 = (java.util.List) $r7;

        if r8 != null goto label02;

        $r6 = r0.<javax.jmdns.impl.JmDNSImpl: java.util.concurrent.ConcurrentMap _serviceListeners>;

        $r9 = new java.util.LinkedList;

        specialinvoke $r9.<java.util.LinkedList: void <init>()>();

        $r7 = interfaceinvoke $r6.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>($r5, $r9);

        if $r7 != null goto label01;

        $r6 = r0.<javax.jmdns.impl.JmDNSImpl: java.util.concurrent.ConcurrentMap _serviceCollectors>;

        $r10 = new javax.jmdns.impl.JmDNSImpl$ServiceCollector;

        specialinvoke $r10.<javax.jmdns.impl.JmDNSImpl$ServiceCollector: void <init>(java.lang.String)>($r1);

        $r7 = interfaceinvoke $r6.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>($r5, $r10);

        if $r7 != null goto label01;

        $r6 = r0.<javax.jmdns.impl.JmDNSImpl: java.util.concurrent.ConcurrentMap _serviceCollectors>;

        $r7 = interfaceinvoke $r6.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>($r5);

        $r2 = (javax.jmdns.ServiceListener) $r7;

        specialinvoke r0.<javax.jmdns.impl.JmDNSImpl: void addServiceListener(java.lang.String,javax.jmdns.ServiceListener,boolean)>($r5, $r2, 1);

     label01:
        $r6 = r0.<javax.jmdns.impl.JmDNSImpl: java.util.concurrent.ConcurrentMap _serviceListeners>;

        $r7 = interfaceinvoke $r6.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>($r5);

        r8 = (java.util.List) $r7;

     label02:
        if r8 == null goto label05;

        entermonitor r8;

     label03:
        $z0 = interfaceinvoke r8.<java.util.List: boolean contains(java.lang.Object)>(r4);

        if $z0 != 0 goto label04;

        interfaceinvoke r8.<java.util.List: boolean add(java.lang.Object)>(r4);

     label04:
        exitmonitor r8;

     label05:
        r3 = new java.util.ArrayList;

        specialinvoke r3.<java.util.ArrayList: void <init>()>();

        $r11 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.DNSCache getCache()>();

        $r12 = virtualinvoke $r11.<javax.jmdns.impl.DNSCache: java.util.Collection allValues()>();

        $r13 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();

     label06:
        $z0 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r7 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r14 = (javax.jmdns.impl.DNSEntry) $r7;

        r15 = (javax.jmdns.impl.DNSRecord) r14;

        $r16 = virtualinvoke r15.<javax.jmdns.impl.DNSRecord: javax.jmdns.impl.constants.DNSRecordType getRecordType()>();

        $r17 = <javax.jmdns.impl.constants.DNSRecordType: javax.jmdns.impl.constants.DNSRecordType TYPE_SRV>;

        if $r16 != $r17 goto label06;

        $r18 = virtualinvoke r15.<javax.jmdns.impl.DNSRecord: java.lang.String getKey()>();

        $z0 = virtualinvoke $r18.<java.lang.String: boolean endsWith(java.lang.String)>($r5);

        if $z0 == 0 goto label06;

        $r19 = new javax.jmdns.impl.ServiceEventImpl;

        $r18 = virtualinvoke r15.<javax.jmdns.impl.DNSRecord: java.lang.String getType()>();

        $r20 = virtualinvoke r15.<javax.jmdns.impl.DNSRecord: java.lang.String getType()>();

        $r21 = virtualinvoke r15.<javax.jmdns.impl.DNSRecord: java.lang.String getName()>();

        $r20 = staticinvoke <javax.jmdns.impl.JmDNSImpl: java.lang.String toUnqualifiedName(java.lang.String,java.lang.String)>($r20, $r21);

        $r22 = virtualinvoke r15.<javax.jmdns.impl.DNSRecord: javax.jmdns.ServiceInfo getServiceInfo()>();

        specialinvoke $r19.<javax.jmdns.impl.ServiceEventImpl: void <init>(javax.jmdns.impl.JmDNSImpl,java.lang.String,java.lang.String,javax.jmdns.ServiceInfo)>(r0, $r18, $r20, $r22);

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r19);

        goto label06;

     label07:
        $r23 := @caughtexception;

     label08:
        exitmonitor r8;

     label09:
        throw $r23;

     label10:
        $r13 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label11:
        $z0 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label12;

        $r7 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r24 = (javax.jmdns.ServiceEvent) $r7;

        virtualinvoke r4.<javax.jmdns.impl.ListenerStatus$ServiceListenerStatus: void serviceAdded(javax.jmdns.ServiceEvent)>(r24);

        goto label11;

     label12:
        virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: void startServiceResolver(java.lang.String)>($r1);

        return;

        catch java.lang.Throwable from label03 to label05 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
    }
    private void closeMulticastSocket()
    {
        javax.jmdns.impl.JmDNSImpl r0;
        java.lang.Exception r1;
        org.slf4j.Logger $r2;
        boolean $z0;
        java.net.MulticastSocket $r3;
        java.net.InetAddress $r4;
        java.lang.Thread $r5;
        java.lang.Throwable $r6;
        java.lang.InterruptedException $r7;
        java.net.SocketException $r8;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r2 = <javax.jmdns.impl.JmDNSImpl: org.slf4j.Logger logger>;

        $z0 = interfaceinvoke $r2.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label01;

        $r2 = <javax.jmdns.impl.JmDNSImpl: org.slf4j.Logger logger>;

        interfaceinvoke $r2.<org.slf4j.Logger: void debug(java.lang.String)>("closeMulticastSocket()");

     label01:
        $r3 = r0.<javax.jmdns.impl.JmDNSImpl: java.net.MulticastSocket _socket>;

        if $r3 == null goto label27;

     label02:
        $r3 = r0.<javax.jmdns.impl.JmDNSImpl: java.net.MulticastSocket _socket>;

        $r4 = r0.<javax.jmdns.impl.JmDNSImpl: java.net.InetAddress _group>;

     label03:
        virtualinvoke $r3.<java.net.MulticastSocket: void leaveGroup(java.net.InetAddress)>($r4);

     label04:
        $r3 = r0.<javax.jmdns.impl.JmDNSImpl: java.net.MulticastSocket _socket>;

        virtualinvoke $r3.<java.net.MulticastSocket: void close()>();

     label05:
        $r5 = r0.<javax.jmdns.impl.JmDNSImpl: java.lang.Thread _incomingListener>;

     label06:
        if $r5 == null goto label23;

     label07:
        $r5 = r0.<javax.jmdns.impl.JmDNSImpl: java.lang.Thread _incomingListener>;

        $z0 = virtualinvoke $r5.<java.lang.Thread: boolean isAlive()>();

     label08:
        if $z0 == 0 goto label23;

     label09:
        entermonitor r0;

     label10:
        $r5 = r0.<javax.jmdns.impl.JmDNSImpl: java.lang.Thread _incomingListener>;

        if $r5 == null goto label17;

        $r5 = r0.<javax.jmdns.impl.JmDNSImpl: java.lang.Thread _incomingListener>;

     label11:
        $z0 = virtualinvoke $r5.<java.lang.Thread: boolean isAlive()>();

     label12:
        if $z0 == 0 goto label17;

        $r2 = <javax.jmdns.impl.JmDNSImpl: org.slf4j.Logger logger>;

     label13:
        $z0 = interfaceinvoke $r2.<org.slf4j.Logger: boolean isDebugEnabled()>();

     label14:
        if $z0 == 0 goto label16;

        $r2 = <javax.jmdns.impl.JmDNSImpl: org.slf4j.Logger logger>;

     label15:
        interfaceinvoke $r2.<org.slf4j.Logger: void debug(java.lang.String)>("closeMulticastSocket(): waiting for jmDNS monitor");

     label16:
        virtualinvoke r0.<java.lang.Object: void wait(long)>(1000L);

     label17:
        exitmonitor r0;

     label18:
        goto label05;

     label19:
        $r6 := @caughtexception;

        exitmonitor r0;

     label20:
        throw $r6;

     label21:
        r1 := @caughtexception;

        $r2 = <javax.jmdns.impl.JmDNSImpl: org.slf4j.Logger logger>;

        interfaceinvoke $r2.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("closeMulticastSocket() Close socket exception ", r1);

     label22:
        r0.<javax.jmdns.impl.JmDNSImpl: java.net.MulticastSocket _socket> = null;

        return;

     label23:
        r0.<javax.jmdns.impl.JmDNSImpl: java.lang.Thread _incomingListener> = null;

     label24:
        goto label22;

     label25:
        $r7 := @caughtexception;

        goto label17;

     label26:
        $r8 := @caughtexception;

        goto label04;

     label27:
        return;

        catch java.net.SocketException from label03 to label04 with label26;
        catch java.lang.Exception from label02 to label04 with label21;
        catch java.lang.Exception from label04 to label06 with label21;
        catch java.lang.Exception from label07 to label08 with label21;
        catch java.lang.Exception from label09 to label10 with label21;
        catch java.lang.InterruptedException from label11 to label12 with label25;
        catch java.lang.InterruptedException from label13 to label14 with label25;
        catch java.lang.InterruptedException from label15 to label17 with label25;
        catch java.lang.Throwable from label10 to label17 with label19;
        catch java.lang.Throwable from label17 to label18 with label19;
        catch java.lang.Throwable from label19 to label20 with label19;
        catch java.lang.Exception from label20 to label21 with label21;
        catch java.lang.Exception from label23 to label24 with label21;
    }
    private void disposeServiceCollectors()
    {
        javax.jmdns.impl.JmDNSImpl r0;
        org.slf4j.Logger $r1;
        boolean $z0;
        java.util.concurrent.ConcurrentMap $r2;
        java.util.Set $r3;
        java.util.Iterator $r4;
        java.lang.Object $r5;
        java.lang.String r6;
        javax.jmdns.impl.JmDNSImpl$ServiceCollector r7;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 = <javax.jmdns.impl.JmDNSImpl: org.slf4j.Logger logger>;

        $z0 = interfaceinvoke $r1.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r1 = <javax.jmdns.impl.JmDNSImpl: org.slf4j.Logger logger>;

        interfaceinvoke $r1.<org.slf4j.Logger: void debug(java.lang.String)>("disposeServiceCollectors()");

     label1:
        $r2 = r0.<javax.jmdns.impl.JmDNSImpl: java.util.concurrent.ConcurrentMap _serviceCollectors>;

        $r3 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: java.util.Set keySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.String) $r5;

        $r2 = r0.<javax.jmdns.impl.JmDNSImpl: java.util.concurrent.ConcurrentMap _serviceCollectors>;

        $r5 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r6);

        r7 = (javax.jmdns.impl.JmDNSImpl$ServiceCollector) $r5;

        if r7 == null goto label2;

        virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: void removeServiceListener(java.lang.String,javax.jmdns.ServiceListener)>(r6, r7);

        $r2 = r0.<javax.jmdns.impl.JmDNSImpl: java.util.concurrent.ConcurrentMap _serviceCollectors>;

        interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: boolean remove(java.lang.Object,java.lang.Object)>(r6, r7);

        goto label2;

     label3:
        return;
    }
    public static java.util.Random getRandom()
    {
        java.util.Random r0;

        r0 = <javax.jmdns.impl.JmDNSImpl: java.util.Random _random>;

        return r0;
    }
    public static void main(java.lang.String[])
    {
        java.lang.String[] $r0;
        java.lang.Exception r1;
        java.util.Properties r2;
        java.lang.Class $r3;
        java.io.InputStream $r4;
        java.lang.String $r5;
        java.io.PrintStream $r6;
        java.lang.StringBuilder $r7;

        $r0 := @parameter0: java.lang.String[];

        r2 = new java.util.Properties;

     label1:
        specialinvoke r2.<java.util.Properties: void <init>()>();

     label2:
        $r3 = class "Ljavax/jmdns/impl/JmDNSImpl;";

     label3:
        $r4 = virtualinvoke $r3.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>("/META-INF/maven/javax.jmdns/jmdns/pom.properties");

        virtualinvoke r2.<java.util.Properties: void load(java.io.InputStream)>($r4);

        $r5 = virtualinvoke r2.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("version");

     label4:
        $r6 = <java.lang.System: java.io.PrintStream out>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("JmDNS version \"");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r5 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r5);

        $r6 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>(" ");

        $r6 = <java.lang.System: java.io.PrintStream out>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Running on java version \"");

        $r5 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.version");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (build ");

        $r5 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.runtime.version");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from ");

        $r5 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.vendor");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r5);

        $r6 = <java.lang.System: java.io.PrintStream out>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Operating environment \"");

        $r5 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.name");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" version ");

        $r5 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.version");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" on ");

        $r5 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.arch");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r5);

        $r6 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>("For more information on JmDNS please visit http://jmdns.org");

        return;

     label5:
        r1 := @caughtexception;

        $r5 = "RUNNING.IN.IDE.FULL";

        goto label4;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Exception from label3 to label4 with label5;
    }
    private boolean makeServiceNameUnique(javax.jmdns.impl.ServiceInfoImpl)
    {
        javax.jmdns.impl.JmDNSImpl r0;
        javax.jmdns.impl.ServiceInfoImpl $r1;
        java.lang.String $r2, $r4, $r13;
        long $l0;
        boolean z0, $z1;
        javax.jmdns.impl.DNSCache $r3;
        java.util.Collection $r5;
        java.util.Iterator $r6;
        java.lang.Object $r7;
        javax.jmdns.impl.DNSEntry r8;
        javax.jmdns.impl.constants.DNSRecordType $r9, $r10;
        javax.jmdns.impl.DNSRecord$Service r11;
        int $i1, $i2;
        javax.jmdns.impl.HostInfo $r12;
        org.slf4j.Logger $r14;
        java.lang.StringBuilder $r15;
        javax.jmdns.impl.NameRegister $r16;
        java.net.InetAddress $r17;
        javax.jmdns.impl.NameRegister$NameType $r18;
        java.util.concurrent.ConcurrentMap $r19;
        javax.jmdns.ServiceInfo r20;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 := @parameter0: javax.jmdns.impl.ServiceInfoImpl;

        $r2 = virtualinvoke $r1.<javax.jmdns.impl.ServiceInfoImpl: java.lang.String getKey()>();

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

     label1:
        z0 = 0;

        $r3 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.DNSCache getCache()>();

        $r4 = virtualinvoke $r1.<javax.jmdns.impl.ServiceInfoImpl: java.lang.String getKey()>();

        $r5 = virtualinvoke $r3.<javax.jmdns.impl.DNSCache: java.util.Collection getDNSEntryList(java.lang.String)>($r4);

        $r6 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (javax.jmdns.impl.DNSEntry) $r7;

        $r9 = <javax.jmdns.impl.constants.DNSRecordType: javax.jmdns.impl.constants.DNSRecordType TYPE_SRV>;

        $r10 = virtualinvoke r8.<javax.jmdns.impl.DNSEntry: javax.jmdns.impl.constants.DNSRecordType getRecordType()>();

        $z1 = virtualinvoke $r9.<javax.jmdns.impl.constants.DNSRecordType: boolean equals(java.lang.Object)>($r10);

        if $z1 == 0 goto label2;

        $z1 = virtualinvoke r8.<javax.jmdns.impl.DNSEntry: boolean isExpired(long)>($l0);

        if $z1 != 0 goto label2;

        r11 = (javax.jmdns.impl.DNSRecord$Service) r8;

        $i1 = virtualinvoke r11.<javax.jmdns.impl.DNSRecord$Service: int getPort()>();

        $i2 = virtualinvoke $r1.<javax.jmdns.impl.ServiceInfoImpl: int getPort()>();

        if $i1 != $i2 goto label3;

        $r4 = virtualinvoke r11.<javax.jmdns.impl.DNSRecord$Service: java.lang.String getServer()>();

        $r12 = r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.HostInfo _localHost>;

        $r13 = virtualinvoke $r12.<javax.jmdns.impl.HostInfo: java.lang.String getName()>();

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r13);

        if $z1 != 0 goto label2;

     label3:
        $r14 = <javax.jmdns.impl.JmDNSImpl: org.slf4j.Logger logger>;

        z0 = interfaceinvoke $r14.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if z0 == 0 goto label4;

        $r14 = <javax.jmdns.impl.JmDNSImpl: org.slf4j.Logger logger>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("makeServiceNameUnique() JmDNS.makeServiceNameUnique srv collision:");

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r8);

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" s.server=");

        $r4 = virtualinvoke r11.<javax.jmdns.impl.DNSRecord$Service: java.lang.String getServer()>();

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r12 = r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.HostInfo _localHost>;

        $r4 = virtualinvoke $r12.<javax.jmdns.impl.HostInfo: java.lang.String getName()>();

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" equals:");

        $r4 = virtualinvoke r11.<javax.jmdns.impl.DNSRecord$Service: java.lang.String getServer()>();

        $r12 = r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.HostInfo _localHost>;

        $r13 = virtualinvoke $r12.<javax.jmdns.impl.HostInfo: java.lang.String getName()>();

        z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r4 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r14.<org.slf4j.Logger: void debug(java.lang.String)>($r4);

     label4:
        $r16 = staticinvoke <javax.jmdns.impl.NameRegister$Factory: javax.jmdns.impl.NameRegister getRegistry()>();

        $r12 = r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.HostInfo _localHost>;

        $r17 = virtualinvoke $r12.<javax.jmdns.impl.HostInfo: java.net.InetAddress getInetAddress()>();

        $r4 = virtualinvoke $r1.<javax.jmdns.impl.ServiceInfoImpl: java.lang.String getName()>();

        $r18 = <javax.jmdns.impl.NameRegister$NameType: javax.jmdns.impl.NameRegister$NameType SERVICE>;

        $r4 = interfaceinvoke $r16.<javax.jmdns.impl.NameRegister: java.lang.String incrementName(java.net.InetAddress,java.lang.String,javax.jmdns.impl.NameRegister$NameType)>($r17, $r4, $r18);

        virtualinvoke $r1.<javax.jmdns.impl.ServiceInfoImpl: void setName(java.lang.String)>($r4);

        z0 = 1;

     label5:
        $r19 = r0.<javax.jmdns.impl.JmDNSImpl: java.util.concurrent.ConcurrentMap _services>;

        $r4 = virtualinvoke $r1.<javax.jmdns.impl.ServiceInfoImpl: java.lang.String getKey()>();

        $r7 = interfaceinvoke $r19.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>($r4);

        r20 = (javax.jmdns.ServiceInfo) $r7;

        if r20 == null goto label6;

        if r20 == $r1 goto label6;

        $r16 = staticinvoke <javax.jmdns.impl.NameRegister$Factory: javax.jmdns.impl.NameRegister getRegistry()>();

        $r12 = r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.HostInfo _localHost>;

        $r17 = virtualinvoke $r12.<javax.jmdns.impl.HostInfo: java.net.InetAddress getInetAddress()>();

        $r4 = virtualinvoke $r1.<javax.jmdns.impl.ServiceInfoImpl: java.lang.String getName()>();

        $r18 = <javax.jmdns.impl.NameRegister$NameType: javax.jmdns.impl.NameRegister$NameType SERVICE>;

        $r4 = interfaceinvoke $r16.<javax.jmdns.impl.NameRegister: java.lang.String incrementName(java.net.InetAddress,java.lang.String,javax.jmdns.impl.NameRegister$NameType)>($r17, $r4, $r18);

        virtualinvoke $r1.<javax.jmdns.impl.ServiceInfoImpl: void setName(java.lang.String)>($r4);

        z0 = 1;

     label6:
        if z0 != 0 goto label1;

        $r4 = virtualinvoke $r1.<javax.jmdns.impl.ServiceInfoImpl: java.lang.String getKey()>();

        z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if z0 != 0 goto label7;

        return 1;

     label7:
        return 0;
    }
    private void openMulticastSocket(javax.jmdns.impl.HostInfo) throws java.io.IOException
    {
        javax.jmdns.impl.JmDNSImpl r0;
        javax.jmdns.impl.HostInfo $r1;
        java.net.SocketException r2;
        java.net.InetAddress $r3;
        boolean $z0;
        java.net.MulticastSocket $r4;
        int $i0;
        java.net.NetworkInterface $r5;
        org.slf4j.Logger $r6;
        java.lang.StringBuilder $r7;
        java.lang.String $r8;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 := @parameter0: javax.jmdns.impl.HostInfo;

        $r3 = r0.<javax.jmdns.impl.JmDNSImpl: java.net.InetAddress _group>;

        if $r3 != null goto label1;

        $r3 = virtualinvoke $r1.<javax.jmdns.impl.HostInfo: java.net.InetAddress getInetAddress()>();

        $z0 = $r3 instanceof java.net.Inet6Address;

        if $z0 == 0 goto label5;

        $r3 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>("FF02::FB");

        r0.<javax.jmdns.impl.JmDNSImpl: java.net.InetAddress _group> = $r3;

     label1:
        $r4 = r0.<javax.jmdns.impl.JmDNSImpl: java.net.MulticastSocket _socket>;

        if $r4 == null goto label2;

        specialinvoke r0.<javax.jmdns.impl.JmDNSImpl: void closeMulticastSocket()>();

     label2:
        $r4 = new java.net.MulticastSocket;

        $i0 = <javax.jmdns.impl.constants.DNSConstants: int MDNS_PORT>;

        specialinvoke $r4.<java.net.MulticastSocket: void <init>(int)>($i0);

        r0.<javax.jmdns.impl.JmDNSImpl: java.net.MulticastSocket _socket> = $r4;

        if $r1 == null goto label4;

        $r5 = virtualinvoke $r1.<javax.jmdns.impl.HostInfo: java.net.NetworkInterface getInterface()>();

        if $r5 == null goto label4;

        $r4 = r0.<javax.jmdns.impl.JmDNSImpl: java.net.MulticastSocket _socket>;

     label3:
        $r5 = virtualinvoke $r1.<javax.jmdns.impl.HostInfo: java.net.NetworkInterface getInterface()>();

        virtualinvoke $r4.<java.net.MulticastSocket: void setNetworkInterface(java.net.NetworkInterface)>($r5);

     label4:
        $r4 = r0.<javax.jmdns.impl.JmDNSImpl: java.net.MulticastSocket _socket>;

        virtualinvoke $r4.<java.net.MulticastSocket: void setTimeToLive(int)>(255);

        $r4 = r0.<javax.jmdns.impl.JmDNSImpl: java.net.MulticastSocket _socket>;

        $r3 = r0.<javax.jmdns.impl.JmDNSImpl: java.net.InetAddress _group>;

        virtualinvoke $r4.<java.net.MulticastSocket: void joinGroup(java.net.InetAddress)>($r3);

        return;

     label5:
        $r3 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>("224.0.0.251");

        r0.<javax.jmdns.impl.JmDNSImpl: java.net.InetAddress _group> = $r3;

        goto label1;

     label6:
        r2 := @caughtexception;

        $r6 = <javax.jmdns.impl.JmDNSImpl: org.slf4j.Logger logger>;

        $z0 = interfaceinvoke $r6.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label4;

        $r6 = <javax.jmdns.impl.JmDNSImpl: org.slf4j.Logger logger>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("openMulticastSocket() Set network interface exception: ");

        $r8 = virtualinvoke r2.<java.net.SocketException: java.lang.String getMessage()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r6.<org.slf4j.Logger: void debug(java.lang.String)>($r8);

        goto label4;

        catch java.net.SocketException from label3 to label4 with label6;
    }
    private void start(java.util.Collection)
    {
        javax.jmdns.impl.JmDNSImpl r0;
        java.util.Collection r1;
        java.lang.Exception r2;
        java.lang.Thread $r3;
        javax.jmdns.impl.SocketListener $r4;
        java.util.Iterator $r5;
        boolean $z0;
        java.lang.Object $r6;
        javax.jmdns.ServiceInfo r7;
        javax.jmdns.impl.ServiceInfoImpl $r8;
        org.slf4j.Logger $r9;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        r1 := @parameter0: java.util.Collection;

        $r3 = r0.<javax.jmdns.impl.JmDNSImpl: java.lang.Thread _incomingListener>;

        if $r3 != null goto label1;

        $r4 = new javax.jmdns.impl.SocketListener;

        specialinvoke $r4.<javax.jmdns.impl.SocketListener: void <init>(javax.jmdns.impl.JmDNSImpl)>(r0);

        r0.<javax.jmdns.impl.JmDNSImpl: java.lang.Thread _incomingListener> = $r4;

        $r3 = r0.<javax.jmdns.impl.JmDNSImpl: java.lang.Thread _incomingListener>;

        virtualinvoke $r3.<java.lang.Thread: void start()>();

     label1:
        virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: void startProber()>();

        $r5 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (javax.jmdns.ServiceInfo) $r6;

        $r8 = new javax.jmdns.impl.ServiceInfoImpl;

     label3:
        specialinvoke $r8.<javax.jmdns.impl.ServiceInfoImpl: void <init>(javax.jmdns.ServiceInfo)>(r7);

        virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: void registerService(javax.jmdns.ServiceInfo)>($r8);

     label4:
        goto label2;

     label5:
        r2 := @caughtexception;

        $r9 = <javax.jmdns.impl.JmDNSImpl: org.slf4j.Logger logger>;

        interfaceinvoke $r9.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("start() Registration exception ", r2);

        goto label2;

     label6:
        return;

        catch java.lang.Exception from label3 to label4 with label5;
    }
    static java.lang.String toUnqualifiedName(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1, $r2, $r3;
        boolean $z0;
        int $i0, $i1;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke $r0.<java.lang.String: java.lang.String toLowerCase()>();

        $r3 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean endsWith(java.lang.String)>($r2);

        if $z0 == 0 goto label1;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        $i0 = $i0 - $i1;

        $i0 = $i0 + -1;

        $r0 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        return $r0;

     label1:
        return $r1;
    }
    private void waitForInfoData(javax.jmdns.ServiceInfo, long)
    {
        javax.jmdns.impl.JmDNSImpl r0;
        javax.jmdns.ServiceInfo $r1;
        long $l0, $l3;
        boolean $z0;
        byte $b1;
        int i2;
        java.lang.Throwable $r2;
        java.lang.InterruptedException $r3;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 := @parameter0: javax.jmdns.ServiceInfo;

        $l0 := @parameter1: long;

        entermonitor $r1;

     label01:
        $l0 = $l0 / 200L;

        $b1 = $l0 cmp 1L;

        if $b1 >= 0 goto label02;

        $l0 = 1L;

     label02:
        i2 = 0;

     label03:
        $l3 = (long) i2;

        $b1 = $l3 cmp $l0;

        if $b1 >= 0 goto label04;

        $z0 = virtualinvoke $r1.<javax.jmdns.ServiceInfo: boolean hasData()>();

        if $z0 == 0 goto label06;

     label04:
        exitmonitor $r1;

     label05:
        return;

     label06:
        virtualinvoke $r1.<java.lang.Object: void wait(long)>(200L);

     label07:
        i2 = i2 + 1;

        goto label03;

     label08:
        $r2 := @caughtexception;

     label09:
        exitmonitor $r1;

     label10:
        throw $r2;

     label11:
        $r3 := @caughtexception;

        goto label07;

        catch java.lang.Throwable from label01 to label05 with label08;
        catch java.lang.InterruptedException from label06 to label07 with label11;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }
    void __recover()
    {
        javax.jmdns.impl.JmDNSImpl r0;
        java.lang.Exception r1;
        java.util.ArrayList r2;
        org.slf4j.Logger $r3;
        boolean $z0;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        java.util.Map $r6;
        java.util.Collection $r7;
        javax.jmdns.impl.DNSCache $r8;
        java.util.Iterator $r9;
        java.lang.Object $r10;
        javax.jmdns.ServiceInfo r11;
        javax.jmdns.impl.ServiceInfoImpl r12;
        javax.jmdns.impl.HostInfo $r13;
        javax.jmdns.JmDNS$Delegate $r14;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r3 = <javax.jmdns.impl.JmDNSImpl: org.slf4j.Logger logger>;

        $z0 = interfaceinvoke $r3.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r3 = <javax.jmdns.impl.JmDNSImpl: org.slf4j.Logger logger>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: java.lang.String getName()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("recover() Cleanning up");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r3.<org.slf4j.Logger: void debug(java.lang.String)>($r5);

     label1:
        $r3 = <javax.jmdns.impl.JmDNSImpl: org.slf4j.Logger logger>;

        interfaceinvoke $r3.<org.slf4j.Logger: void warn(java.lang.String)>("RECOVERING");

        virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: void purgeTimer()>();

        r2 = new java.util.ArrayList;

        $r6 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: java.util.Map getServices()>();

        $r7 = interfaceinvoke $r6.<java.util.Map: java.util.Collection values()>();

        specialinvoke r2.<java.util.ArrayList: void <init>(java.util.Collection)>($r7);

        virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: void unregisterAllServices()>();

        specialinvoke r0.<javax.jmdns.impl.JmDNSImpl: void disposeServiceCollectors()>();

        virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: boolean waitForCanceled(long)>(5000L);

        virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: void purgeStateTimer()>();

        specialinvoke r0.<javax.jmdns.impl.JmDNSImpl: void closeMulticastSocket()>();

        $r8 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.DNSCache getCache()>();

        virtualinvoke $r8.<javax.jmdns.impl.DNSCache: void clear()>();

        $r3 = <javax.jmdns.impl.JmDNSImpl: org.slf4j.Logger logger>;

        $z0 = interfaceinvoke $r3.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label2;

        $r3 = <javax.jmdns.impl.JmDNSImpl: org.slf4j.Logger logger>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: java.lang.String getName()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("recover() All is clean");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r3.<org.slf4j.Logger: void debug(java.lang.String)>($r5);

     label2:
        $z0 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: boolean isCanceled()>();

        if $z0 == 0 goto label8;

        $r9 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r11 = (javax.jmdns.ServiceInfo) $r10;

        r12 = (javax.jmdns.impl.ServiceInfoImpl) r11;

        virtualinvoke r12.<javax.jmdns.impl.ServiceInfoImpl: boolean recoverState()>();

        goto label3;

     label4:
        virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: boolean recoverState()>();

     label5:
        $r13 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.HostInfo getLocalHost()>();

        specialinvoke r0.<javax.jmdns.impl.JmDNSImpl: void openMulticastSocket(javax.jmdns.impl.HostInfo)>($r13);

        specialinvoke r0.<javax.jmdns.impl.JmDNSImpl: void start(java.util.Collection)>(r2);

     label6:
        $r3 = <javax.jmdns.impl.JmDNSImpl: org.slf4j.Logger logger>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: java.lang.String getName()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("recover() We are back!");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r3.<org.slf4j.Logger: void warn(java.lang.String)>($r5);

        return;

     label7:
        r1 := @caughtexception;

        $r3 = <javax.jmdns.impl.JmDNSImpl: org.slf4j.Logger logger>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: java.lang.String getName()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("recover() Start services exception ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r3.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>($r5, r1);

        goto label6;

     label8:
        $r3 = <javax.jmdns.impl.JmDNSImpl: org.slf4j.Logger logger>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: java.lang.String getName()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("recover() Could not recover we are Down!");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r3.<org.slf4j.Logger: void warn(java.lang.String)>($r5);

        $r14 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.JmDNS$Delegate getDelegate()>();

        if $r14 == null goto label9;

        $r14 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.JmDNS$Delegate getDelegate()>();

        r0 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.JmDNSImpl getDns()>();

        interfaceinvoke $r14.<javax.jmdns.JmDNS$Delegate: void cannotRecoverFromIOError(javax.jmdns.JmDNS,java.util.Collection)>(r0, r2);

     label9:
        return;

        catch java.lang.Exception from label5 to label6 with label7;
    }
    public javax.jmdns.impl.DNSOutgoing addAnswer(javax.jmdns.impl.DNSIncoming, java.net.InetAddress, int, javax.jmdns.impl.DNSOutgoing, javax.jmdns.impl.DNSRecord) throws java.io.IOException
    {
        javax.jmdns.impl.JmDNSImpl r0;
        javax.jmdns.impl.DNSIncoming $r1;
        java.net.InetAddress $r2;
        int $i0;
        javax.jmdns.impl.DNSOutgoing $r3, r6;
        javax.jmdns.impl.DNSRecord $r4;
        java.io.IOException r5;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 := @parameter0: javax.jmdns.impl.DNSIncoming;

        $r2 := @parameter1: java.net.InetAddress;

        $i0 := @parameter2: int;

        $r3 := @parameter3: javax.jmdns.impl.DNSOutgoing;

        $r4 := @parameter4: javax.jmdns.impl.DNSRecord;

        r6 = $r3;

        if $r3 != null goto label1;

        r6 = new javax.jmdns.impl.DNSOutgoing;

        $i0 = virtualinvoke $r1.<javax.jmdns.impl.DNSIncoming: int getSenderUDPPayload()>();

        specialinvoke r6.<javax.jmdns.impl.DNSOutgoing: void <init>(int,boolean,int)>(33792, 0, $i0);

     label1:
        virtualinvoke r6.<javax.jmdns.impl.DNSOutgoing: void addAnswer(javax.jmdns.impl.DNSIncoming,javax.jmdns.impl.DNSRecord)>($r1, $r4);

     label2:
        return r6;

     label3:
        r5 := @caughtexception;

        $i0 = virtualinvoke r6.<javax.jmdns.impl.DNSOutgoing: int getFlags()>();

        $i0 = $i0 | 512;

        virtualinvoke r6.<javax.jmdns.impl.DNSOutgoing: void setFlags(int)>($i0);

        $i0 = virtualinvoke $r1.<javax.jmdns.impl.DNSIncoming: int getId()>();

        virtualinvoke r6.<javax.jmdns.impl.DNSOutgoing: void setId(int)>($i0);

        virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>(r6);

        $r3 = new javax.jmdns.impl.DNSOutgoing;

        $i0 = virtualinvoke $r1.<javax.jmdns.impl.DNSIncoming: int getSenderUDPPayload()>();

        specialinvoke $r3.<javax.jmdns.impl.DNSOutgoing: void <init>(int,boolean,int)>(33792, 0, $i0);

        virtualinvoke $r3.<javax.jmdns.impl.DNSOutgoing: void addAnswer(javax.jmdns.impl.DNSIncoming,javax.jmdns.impl.DNSRecord)>($r1, $r4);

        return $r3;

        catch java.io.IOException from label1 to label2 with label3;
    }
    public void addListener(javax.jmdns.impl.DNSListener, javax.jmdns.impl.DNSQuestion)
    {
        javax.jmdns.impl.JmDNSImpl r0;
        javax.jmdns.impl.DNSListener $r1;
        javax.jmdns.impl.DNSQuestion $r2;
        long $l0;
        java.util.List $r3;
        javax.jmdns.impl.DNSCache $r4;
        java.lang.String $r5;
        java.util.Collection $r6;
        java.util.Iterator $r7;
        boolean $z0;
        java.lang.Object $r8;
        javax.jmdns.impl.DNSEntry r9;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 := @parameter0: javax.jmdns.impl.DNSListener;

        $r2 := @parameter1: javax.jmdns.impl.DNSQuestion;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r3 = r0.<javax.jmdns.impl.JmDNSImpl: java.util.List _listeners>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r1);

        if $r2 == null goto label2;

        $r4 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.DNSCache getCache()>();

        $r5 = virtualinvoke $r2.<javax.jmdns.impl.DNSQuestion: java.lang.String getName()>();

        $r5 = virtualinvoke $r5.<java.lang.String: java.lang.String toLowerCase()>();

        $r6 = virtualinvoke $r4.<javax.jmdns.impl.DNSCache: java.util.Collection getDNSEntryList(java.lang.String)>($r5);

        $r7 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (javax.jmdns.impl.DNSEntry) $r8;

        $z0 = virtualinvoke $r2.<javax.jmdns.impl.DNSQuestion: boolean answeredBy(javax.jmdns.impl.DNSEntry)>(r9);

        if $z0 == 0 goto label1;

        $z0 = virtualinvoke r9.<javax.jmdns.impl.DNSEntry: boolean isExpired(long)>($l0);

        if $z0 != 0 goto label1;

        $r4 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.DNSCache getCache()>();

        interfaceinvoke $r1.<javax.jmdns.impl.DNSListener: void updateRecord(javax.jmdns.impl.DNSCache,long,javax.jmdns.impl.DNSEntry)>($r4, $l0, r9);

        goto label1;

     label2:
        return;
    }
    public void addServiceListener(java.lang.String, javax.jmdns.ServiceListener)
    {
        javax.jmdns.impl.JmDNSImpl r0;
        java.lang.String $r1;
        javax.jmdns.ServiceListener $r2;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: javax.jmdns.ServiceListener;

        specialinvoke r0.<javax.jmdns.impl.JmDNSImpl: void addServiceListener(java.lang.String,javax.jmdns.ServiceListener,boolean)>($r1, $r2, 0);

        return;
    }
    public void addServiceTypeListener(javax.jmdns.ServiceTypeListener) throws java.io.IOException
    {
        javax.jmdns.impl.JmDNSImpl r0;
        javax.jmdns.ServiceTypeListener $r1;
        javax.jmdns.impl.ListenerStatus$ServiceTypeListenerStatus r2;
        java.util.Set $r3;
        java.util.concurrent.ConcurrentMap $r4;
        java.util.Iterator $r5;
        boolean $z0;
        java.lang.Object $r6;
        java.lang.String r7;
        javax.jmdns.impl.ServiceEventImpl $r8;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 := @parameter0: javax.jmdns.ServiceTypeListener;

        r2 = new javax.jmdns.impl.ListenerStatus$ServiceTypeListenerStatus;

        specialinvoke r2.<javax.jmdns.impl.ListenerStatus$ServiceTypeListenerStatus: void <init>(javax.jmdns.ServiceTypeListener,boolean)>($r1, 0);

        $r3 = r0.<javax.jmdns.impl.JmDNSImpl: java.util.Set _typeListeners>;

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>(r2);

        $r4 = r0.<javax.jmdns.impl.JmDNSImpl: java.util.concurrent.ConcurrentMap _serviceTypes>;

        $r3 = interfaceinvoke $r4.<java.util.concurrent.ConcurrentMap: java.util.Set keySet()>();

        $r5 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.lang.String) $r6;

        $r8 = new javax.jmdns.impl.ServiceEventImpl;

        specialinvoke $r8.<javax.jmdns.impl.ServiceEventImpl: void <init>(javax.jmdns.impl.JmDNSImpl,java.lang.String,java.lang.String,javax.jmdns.ServiceInfo)>(r0, r7, "", null);

        virtualinvoke r2.<javax.jmdns.impl.ListenerStatus$ServiceTypeListenerStatus: void serviceTypeAdded(javax.jmdns.ServiceEvent)>($r8);

        goto label1;

     label2:
        virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: void startTypeResolver()>();

        return;
    }
    public boolean advanceState(javax.jmdns.impl.tasks.DNSTask)
    {
        javax.jmdns.impl.JmDNSImpl r0;
        javax.jmdns.impl.tasks.DNSTask $r1;
        boolean $z0;
        javax.jmdns.impl.HostInfo $r2;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 := @parameter0: javax.jmdns.impl.tasks.DNSTask;

        $r2 = r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.HostInfo _localHost>;

        $z0 = virtualinvoke $r2.<javax.jmdns.impl.HostInfo: boolean advanceState(javax.jmdns.impl.tasks.DNSTask)>($r1);

        return $z0;
    }
    public void associateWithTask(javax.jmdns.impl.tasks.DNSTask, javax.jmdns.impl.constants.DNSState)
    {
        javax.jmdns.impl.JmDNSImpl r0;
        javax.jmdns.impl.tasks.DNSTask $r1;
        javax.jmdns.impl.constants.DNSState $r2;
        javax.jmdns.impl.HostInfo $r3;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 := @parameter0: javax.jmdns.impl.tasks.DNSTask;

        $r2 := @parameter1: javax.jmdns.impl.constants.DNSState;

        $r3 = r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.HostInfo _localHost>;

        virtualinvoke $r3.<javax.jmdns.impl.HostInfo: void associateWithTask(javax.jmdns.impl.tasks.DNSTask,javax.jmdns.impl.constants.DNSState)>($r1, $r2);

        return;
    }
    public boolean cancelState()
    {
        javax.jmdns.impl.JmDNSImpl r0;
        boolean $z0;
        javax.jmdns.impl.HostInfo $r1;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 = r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.HostInfo _localHost>;

        $z0 = virtualinvoke $r1.<javax.jmdns.impl.HostInfo: boolean cancelState()>();

        return $z0;
    }
    public void cancelStateTimer()
    {
        javax.jmdns.impl.JmDNSImpl r0;
        javax.jmdns.impl.DNSTaskStarter$Factory $r1;
        javax.jmdns.impl.DNSTaskStarter $r2;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 = staticinvoke <javax.jmdns.impl.DNSTaskStarter$Factory: javax.jmdns.impl.DNSTaskStarter$Factory getInstance()>();

        r0 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.JmDNSImpl getDns()>();

        $r2 = virtualinvoke $r1.<javax.jmdns.impl.DNSTaskStarter$Factory: javax.jmdns.impl.DNSTaskStarter getStarter(javax.jmdns.impl.JmDNSImpl)>(r0);

        interfaceinvoke $r2.<javax.jmdns.impl.DNSTaskStarter: void cancelStateTimer()>();

        return;
    }
    public void cancelTimer()
    {
        javax.jmdns.impl.JmDNSImpl r0;
        javax.jmdns.impl.DNSTaskStarter$Factory $r1;
        javax.jmdns.impl.DNSTaskStarter $r2;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 = staticinvoke <javax.jmdns.impl.DNSTaskStarter$Factory: javax.jmdns.impl.DNSTaskStarter$Factory getInstance()>();

        r0 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.JmDNSImpl getDns()>();

        $r2 = virtualinvoke $r1.<javax.jmdns.impl.DNSTaskStarter$Factory: javax.jmdns.impl.DNSTaskStarter getStarter(javax.jmdns.impl.JmDNSImpl)>(r0);

        interfaceinvoke $r2.<javax.jmdns.impl.DNSTaskStarter: void cancelTimer()>();

        return;
    }
    public void cleanCache()
    {
        javax.jmdns.impl.JmDNSImpl r0;
        java.lang.Exception r1;
        java.util.HashSet r2;
        long $l0;
        javax.jmdns.impl.DNSCache $r3;
        java.util.Collection $r4;
        java.util.Iterator $r5;
        boolean $z0;
        java.lang.Object $r6;
        javax.jmdns.impl.DNSEntry r7;
        javax.jmdns.impl.DNSRecord $r8;
        javax.jmdns.impl.JmDNSImpl$Operation $r9;
        org.slf4j.Logger $r10;
        java.lang.StringBuilder $r11;
        java.lang.String $r12;
        javax.jmdns.ServiceInfo $r13;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r2 = new java.util.HashSet;

        specialinvoke r2.<java.util.HashSet: void <init>()>();

        $r3 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.DNSCache getCache()>();

        $r4 = virtualinvoke $r3.<javax.jmdns.impl.DNSCache: java.util.Collection allValues()>();

        $r5 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label13;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (javax.jmdns.impl.DNSEntry) $r6;

     label02:
        $r8 = (javax.jmdns.impl.DNSRecord) r7;

        $z0 = virtualinvoke $r8.<javax.jmdns.impl.DNSRecord: boolean isExpired(long)>($l0);

     label03:
        if $z0 == 0 goto label07;

        $r9 = <javax.jmdns.impl.JmDNSImpl$Operation: javax.jmdns.impl.JmDNSImpl$Operation Remove>;

     label04:
        virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: void updateRecord(long,javax.jmdns.impl.DNSRecord,javax.jmdns.impl.JmDNSImpl$Operation)>($l0, $r8, $r9);

        $r3 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.DNSCache getCache()>();

        virtualinvoke $r3.<javax.jmdns.impl.DNSCache: boolean removeDNSEntry(javax.jmdns.impl.DNSEntry)>($r8);

     label05:
        goto label01;

     label06:
        r1 := @caughtexception;

        $r10 = <javax.jmdns.impl.JmDNSImpl: org.slf4j.Logger logger>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: java.lang.String getName()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".Error while reaping records: ");

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r10.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>($r12, r1);

        $r10 = <javax.jmdns.impl.JmDNSImpl: org.slf4j.Logger logger>;

        $r12 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: java.lang.String toString()>();

        interfaceinvoke $r10.<org.slf4j.Logger: void warn(java.lang.String)>($r12);

        goto label01;

     label07:
        $z0 = virtualinvoke $r8.<javax.jmdns.impl.DNSRecord: boolean isStaleAndShouldBeRefreshed(long)>($l0);

     label08:
        if $z0 == 0 goto label01;

     label09:
        virtualinvoke $r8.<javax.jmdns.impl.DNSRecord: void incrementRefreshPercentage()>();

        $r13 = virtualinvoke $r8.<javax.jmdns.impl.DNSRecord: javax.jmdns.ServiceInfo getServiceInfo()>();

        $r12 = virtualinvoke $r13.<javax.jmdns.ServiceInfo: java.lang.String getType()>();

        $r12 = virtualinvoke $r12.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>($r12);

     label10:
        if $z0 == 0 goto label01;

     label11:
        virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: void renewServiceCollector(java.lang.String)>($r12);

     label12:
        goto label01;

     label13:
        return;

        catch java.lang.Exception from label02 to label03 with label06;
        catch java.lang.Exception from label04 to label05 with label06;
        catch java.lang.Exception from label07 to label08 with label06;
        catch java.lang.Exception from label09 to label10 with label06;
        catch java.lang.Exception from label11 to label12 with label06;
    }
    public void close()
    {
        javax.jmdns.impl.JmDNSImpl r0, $r8;
        boolean $z0;
        org.slf4j.Logger $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        java.util.concurrent.ExecutorService $r4;
        java.lang.Thread $r5;
        java.lang.Runtime $r6;
        javax.jmdns.impl.DNSTaskStarter$Factory $r7;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $z0 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: boolean isClosing()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = <javax.jmdns.impl.JmDNSImpl: org.slf4j.Logger logger>;

        $z0 = interfaceinvoke $r1.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label2;

        $r1 = <javax.jmdns.impl.JmDNSImpl: org.slf4j.Logger logger>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cancelling JmDNS: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r1.<org.slf4j.Logger: void debug(java.lang.String)>($r3);

     label2:
        $z0 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: boolean closeState()>();

        if $z0 == 0 goto label5;

        $r1 = <javax.jmdns.impl.JmDNSImpl: org.slf4j.Logger logger>;

        interfaceinvoke $r1.<org.slf4j.Logger: void debug(java.lang.String)>("Canceling the timer");

        virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: void cancelTimer()>();

        virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: void unregisterAllServices()>();

        specialinvoke r0.<javax.jmdns.impl.JmDNSImpl: void disposeServiceCollectors()>();

        $r1 = <javax.jmdns.impl.JmDNSImpl: org.slf4j.Logger logger>;

        $z0 = interfaceinvoke $r1.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label3;

        $r1 = <javax.jmdns.impl.JmDNSImpl: org.slf4j.Logger logger>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wait for JmDNS cancel: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r1.<org.slf4j.Logger: void debug(java.lang.String)>($r3);

     label3:
        virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: boolean waitForCanceled(long)>(5000L);

        $r1 = <javax.jmdns.impl.JmDNSImpl: org.slf4j.Logger logger>;

        interfaceinvoke $r1.<org.slf4j.Logger: void debug(java.lang.String)>("Canceling the state timer");

        virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: void cancelStateTimer()>();

        $r4 = r0.<javax.jmdns.impl.JmDNSImpl: java.util.concurrent.ExecutorService _executor>;

        interfaceinvoke $r4.<java.util.concurrent.ExecutorService: void shutdown()>();

        specialinvoke r0.<javax.jmdns.impl.JmDNSImpl: void closeMulticastSocket()>();

        $r5 = r0.<javax.jmdns.impl.JmDNSImpl: java.lang.Thread _shutdown>;

        if $r5 == null goto label4;

        $r6 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $r5 = r0.<javax.jmdns.impl.JmDNSImpl: java.lang.Thread _shutdown>;

        virtualinvoke $r6.<java.lang.Runtime: boolean removeShutdownHook(java.lang.Thread)>($r5);

     label4:
        $r7 = staticinvoke <javax.jmdns.impl.DNSTaskStarter$Factory: javax.jmdns.impl.DNSTaskStarter$Factory getInstance()>();

        $r8 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.JmDNSImpl getDns()>();

        virtualinvoke $r7.<javax.jmdns.impl.DNSTaskStarter$Factory: void disposeStarter(javax.jmdns.impl.JmDNSImpl)>($r8);

        $r1 = <javax.jmdns.impl.JmDNSImpl: org.slf4j.Logger logger>;

        $z0 = interfaceinvoke $r1.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label5;

        $r1 = <javax.jmdns.impl.JmDNSImpl: org.slf4j.Logger logger>;

        interfaceinvoke $r1.<org.slf4j.Logger: void debug(java.lang.String)>("JmDNS closed.");

     label5:
        virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: boolean advanceState(javax.jmdns.impl.tasks.DNSTask)>(null);

        return;
    }
    public boolean closeState()
    {
        javax.jmdns.impl.JmDNSImpl r0;
        boolean $z0;
        javax.jmdns.impl.HostInfo $r1;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 = r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.HostInfo _localHost>;

        $z0 = virtualinvoke $r1.<javax.jmdns.impl.HostInfo: boolean closeState()>();

        return $z0;
    }
    public javax.jmdns.impl.DNSCache getCache()
    {
        javax.jmdns.impl.JmDNSImpl r0;
        javax.jmdns.impl.DNSCache r1;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        r1 = r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.DNSCache _cache>;

        return r1;
    }
    public javax.jmdns.JmDNS$Delegate getDelegate()
    {
        javax.jmdns.impl.JmDNSImpl r0;
        javax.jmdns.JmDNS$Delegate r1;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        r1 = r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.JmDNS$Delegate _delegate>;

        return r1;
    }
    public javax.jmdns.impl.JmDNSImpl getDns()
    {
        javax.jmdns.impl.JmDNSImpl r0;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        return r0;
    }
    public java.net.InetAddress getGroup()
    {
        javax.jmdns.impl.JmDNSImpl r0;
        java.net.InetAddress r1;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        r1 = r0.<javax.jmdns.impl.JmDNSImpl: java.net.InetAddress _group>;

        return r1;
    }
    public java.lang.String getHostName()
    {
        javax.jmdns.impl.JmDNSImpl r0;
        java.lang.String $r1;
        javax.jmdns.impl.HostInfo $r2;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r2 = r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.HostInfo _localHost>;

        $r1 = virtualinvoke $r2.<javax.jmdns.impl.HostInfo: java.lang.String getName()>();

        return $r1;
    }
    public java.net.InetAddress getInetAddress() throws java.io.IOException
    {
        javax.jmdns.impl.JmDNSImpl r0;
        java.net.InetAddress $r1;
        javax.jmdns.impl.HostInfo $r2;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r2 = r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.HostInfo _localHost>;

        $r1 = virtualinvoke $r2.<javax.jmdns.impl.HostInfo: java.net.InetAddress getInetAddress()>();

        return $r1;
    }
    public java.net.InetAddress getInterface() throws java.io.IOException
    {
        javax.jmdns.impl.JmDNSImpl r0;
        java.net.InetAddress $r1;
        java.net.MulticastSocket $r2;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r2 = r0.<javax.jmdns.impl.JmDNSImpl: java.net.MulticastSocket _socket>;

        $r1 = virtualinvoke $r2.<java.net.MulticastSocket: java.net.InetAddress getInterface()>();

        return $r1;
    }
    public long getLastThrottleIncrement()
    {
        javax.jmdns.impl.JmDNSImpl r0;
        long l0;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        l0 = r0.<javax.jmdns.impl.JmDNSImpl: long _lastThrottleIncrement>;

        return l0;
    }
    public javax.jmdns.impl.HostInfo getLocalHost()
    {
        javax.jmdns.impl.JmDNSImpl r0;
        javax.jmdns.impl.HostInfo r1;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        r1 = r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.HostInfo _localHost>;

        return r1;
    }
    public java.lang.String getName()
    {
        javax.jmdns.impl.JmDNSImpl r0;
        java.lang.String r1;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        r1 = r0.<javax.jmdns.impl.JmDNSImpl: java.lang.String _name>;

        return r1;
    }
    public javax.jmdns.impl.DNSIncoming getPlannedAnswer()
    {
        javax.jmdns.impl.JmDNSImpl r0;
        javax.jmdns.impl.DNSIncoming r1;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        r1 = r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.DNSIncoming _plannedAnswer>;

        return r1;
    }
    public javax.jmdns.ServiceInfo getServiceInfo(java.lang.String, java.lang.String)
    {
        javax.jmdns.impl.JmDNSImpl r0;
        java.lang.String $r1, $r2;
        javax.jmdns.ServiceInfo $r3;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.ServiceInfo getServiceInfo(java.lang.String,java.lang.String,boolean,long)>($r1, $r2, 0, 6000L);

        return $r3;
    }
    public javax.jmdns.ServiceInfo getServiceInfo(java.lang.String, java.lang.String, long)
    {
        javax.jmdns.impl.JmDNSImpl r0;
        java.lang.String $r1, $r2;
        long $l0;
        javax.jmdns.ServiceInfo $r3;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $l0 := @parameter2: long;

        $r3 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.ServiceInfo getServiceInfo(java.lang.String,java.lang.String,boolean,long)>($r1, $r2, 0, $l0);

        return $r3;
    }
    public javax.jmdns.ServiceInfo getServiceInfo(java.lang.String, java.lang.String, boolean)
    {
        javax.jmdns.impl.JmDNSImpl r0;
        java.lang.String $r1, $r2;
        boolean $z0;
        javax.jmdns.ServiceInfo $r3;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $z0 := @parameter2: boolean;

        $r3 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.ServiceInfo getServiceInfo(java.lang.String,java.lang.String,boolean,long)>($r1, $r2, $z0, 6000L);

        return $r3;
    }
    public javax.jmdns.ServiceInfo getServiceInfo(java.lang.String, java.lang.String, boolean, long)
    {
        javax.jmdns.impl.JmDNSImpl r0;
        java.lang.String $r1, $r2;
        boolean $z0;
        long $l0;
        javax.jmdns.impl.ServiceInfoImpl $r3;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $z0 := @parameter2: boolean;

        $l0 := @parameter3: long;

        $r3 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.ServiceInfoImpl resolveServiceInfo(java.lang.String,java.lang.String,java.lang.String,boolean)>($r1, $r2, "", $z0);

        specialinvoke r0.<javax.jmdns.impl.JmDNSImpl: void waitForInfoData(javax.jmdns.ServiceInfo,long)>($r3, $l0);

        $z0 = virtualinvoke $r3.<javax.jmdns.impl.ServiceInfoImpl: boolean hasData()>();

        if $z0 == 0 goto label1;

        return $r3;

     label1:
        return null;
    }
    javax.jmdns.impl.ServiceInfoImpl getServiceInfoFromCache(java.lang.String, java.lang.String, java.lang.String, boolean)
    {
        javax.jmdns.impl.JmDNSImpl r0;
        java.lang.String $r1, $r2, $r3;
        boolean $z0, $z1;
        javax.jmdns.impl.ServiceInfoImpl r4, r11;
        javax.jmdns.impl.DNSCache $r5;
        javax.jmdns.impl.DNSRecord$Pointer r6;
        javax.jmdns.impl.constants.DNSRecordClass $r7;
        javax.jmdns.impl.DNSEntry $r8;
        javax.jmdns.impl.DNSRecord r9;
        javax.jmdns.ServiceInfo $r10;
        java.util.Map $r12;
        byte[] r13, $r20;
        javax.jmdns.impl.constants.DNSRecordType $r14;
        int $i0, $i1, $i2;
        java.util.Collection $r15;
        java.util.Iterator $r16;
        java.lang.Object $r17;
        java.net.Inet4Address[] $r18;
        java.net.Inet4Address r19;
        java.net.Inet6Address[] $r21;
        java.net.Inet6Address r22;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $z0 := @parameter3: boolean;

        r4 = new javax.jmdns.impl.ServiceInfoImpl;

        specialinvoke r4.<javax.jmdns.impl.ServiceInfoImpl: void <init>(java.lang.String,java.lang.String,java.lang.String,int,int,int,boolean,byte[])>($r1, $r2, $r3, 0, 0, 0, $z0, null);

        $r5 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.DNSCache getCache()>();

        r6 = new javax.jmdns.impl.DNSRecord$Pointer;

        $r7 = <javax.jmdns.impl.constants.DNSRecordClass: javax.jmdns.impl.constants.DNSRecordClass CLASS_ANY>;

        $r2 = virtualinvoke r4.<javax.jmdns.impl.ServiceInfoImpl: java.lang.String getQualifiedName()>();

        specialinvoke r6.<javax.jmdns.impl.DNSRecord$Pointer: void <init>(java.lang.String,javax.jmdns.impl.constants.DNSRecordClass,boolean,int,java.lang.String)>($r1, $r7, 0, 0, $r2);

        $r8 = virtualinvoke $r5.<javax.jmdns.impl.DNSCache: javax.jmdns.impl.DNSEntry getDNSEntry(javax.jmdns.impl.DNSEntry)>(r6);

        $z1 = $r8 instanceof javax.jmdns.impl.DNSRecord;

        if $z1 == 0 goto label12;

        r9 = (javax.jmdns.impl.DNSRecord) $r8;

        $r10 = virtualinvoke r9.<javax.jmdns.impl.DNSRecord: javax.jmdns.ServiceInfo getServiceInfo(boolean)>($z0);

        r11 = (javax.jmdns.impl.ServiceInfoImpl) $r10;

        if r11 == null goto label12;

        $r12 = virtualinvoke r11.<javax.jmdns.impl.ServiceInfoImpl: java.util.Map getQualifiedNameMap()>();

        r13 = null;

        $r1 = "";

        $r5 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.DNSCache getCache()>();

        $r2 = virtualinvoke r4.<javax.jmdns.impl.ServiceInfoImpl: java.lang.String getQualifiedName()>();

        $r14 = <javax.jmdns.impl.constants.DNSRecordType: javax.jmdns.impl.constants.DNSRecordType TYPE_SRV>;

        $r7 = <javax.jmdns.impl.constants.DNSRecordClass: javax.jmdns.impl.constants.DNSRecordClass CLASS_ANY>;

        $r8 = virtualinvoke $r5.<javax.jmdns.impl.DNSCache: javax.jmdns.impl.DNSEntry getDNSEntry(java.lang.String,javax.jmdns.impl.constants.DNSRecordType,javax.jmdns.impl.constants.DNSRecordClass)>($r2, $r14, $r7);

        $z1 = $r8 instanceof javax.jmdns.impl.DNSRecord;

        if $z1 == 0 goto label01;

        r9 = (javax.jmdns.impl.DNSRecord) $r8;

        $r10 = virtualinvoke r9.<javax.jmdns.impl.DNSRecord: javax.jmdns.ServiceInfo getServiceInfo(boolean)>($z0);

        if $r10 == null goto label01;

        r11 = new javax.jmdns.impl.ServiceInfoImpl;

        $i0 = virtualinvoke $r10.<javax.jmdns.ServiceInfo: int getPort()>();

        $i1 = virtualinvoke $r10.<javax.jmdns.ServiceInfo: int getWeight()>();

        $i2 = virtualinvoke $r10.<javax.jmdns.ServiceInfo: int getPriority()>();

        specialinvoke r11.<javax.jmdns.impl.ServiceInfoImpl: void <init>(java.util.Map,int,int,int,boolean,byte[])>($r12, $i0, $i1, $i2, $z0, null);

        r13 = virtualinvoke $r10.<javax.jmdns.ServiceInfo: byte[] getTextBytes()>();

        $r1 = virtualinvoke $r10.<javax.jmdns.ServiceInfo: java.lang.String getServer()>();

     label01:
        $r5 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.DNSCache getCache()>();

        $r14 = <javax.jmdns.impl.constants.DNSRecordType: javax.jmdns.impl.constants.DNSRecordType TYPE_A>;

        $r7 = <javax.jmdns.impl.constants.DNSRecordClass: javax.jmdns.impl.constants.DNSRecordClass CLASS_ANY>;

        $r15 = virtualinvoke $r5.<javax.jmdns.impl.DNSCache: java.util.Collection getDNSEntryList(java.lang.String,javax.jmdns.impl.constants.DNSRecordType,javax.jmdns.impl.constants.DNSRecordClass)>($r1, $r14, $r7);

        $r16 = interfaceinvoke $r15.<java.util.Collection: java.util.Iterator iterator()>();

     label02:
        $z1 = interfaceinvoke $r16.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label05;

        $r17 = interfaceinvoke $r16.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (javax.jmdns.impl.DNSEntry) $r17;

        $z1 = $r8 instanceof javax.jmdns.impl.DNSRecord;

        if $z1 == 0 goto label02;

        r9 = (javax.jmdns.impl.DNSRecord) $r8;

        $r10 = virtualinvoke r9.<javax.jmdns.impl.DNSRecord: javax.jmdns.ServiceInfo getServiceInfo(boolean)>($z0);

        if $r10 == null goto label02;

        $r18 = virtualinvoke $r10.<javax.jmdns.ServiceInfo: java.net.Inet4Address[] getInet4Addresses()>();

        $i0 = lengthof $r18;

        $i1 = 0;

     label03:
        if $i1 >= $i0 goto label04;

        r19 = $r18[$i1];

        virtualinvoke r11.<javax.jmdns.impl.ServiceInfoImpl: void addAddress(java.net.Inet4Address)>(r19);

        $i1 = $i1 + 1;

        goto label03;

     label04:
        $r20 = virtualinvoke $r10.<javax.jmdns.ServiceInfo: byte[] getTextBytes()>();

        virtualinvoke r11.<javax.jmdns.impl.ServiceInfoImpl: void _setText(byte[])>($r20);

        goto label02;

     label05:
        $r5 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.DNSCache getCache()>();

        $r14 = <javax.jmdns.impl.constants.DNSRecordType: javax.jmdns.impl.constants.DNSRecordType TYPE_AAAA>;

        $r7 = <javax.jmdns.impl.constants.DNSRecordClass: javax.jmdns.impl.constants.DNSRecordClass CLASS_ANY>;

        $r15 = virtualinvoke $r5.<javax.jmdns.impl.DNSCache: java.util.Collection getDNSEntryList(java.lang.String,javax.jmdns.impl.constants.DNSRecordType,javax.jmdns.impl.constants.DNSRecordClass)>($r1, $r14, $r7);

        $r16 = interfaceinvoke $r15.<java.util.Collection: java.util.Iterator iterator()>();

     label06:
        $z1 = interfaceinvoke $r16.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label09;

        $r17 = interfaceinvoke $r16.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (javax.jmdns.impl.DNSEntry) $r17;

        $z1 = $r8 instanceof javax.jmdns.impl.DNSRecord;

        if $z1 == 0 goto label06;

        r9 = (javax.jmdns.impl.DNSRecord) $r8;

        $r10 = virtualinvoke r9.<javax.jmdns.impl.DNSRecord: javax.jmdns.ServiceInfo getServiceInfo(boolean)>($z0);

        if $r10 == null goto label06;

        $r21 = virtualinvoke $r10.<javax.jmdns.ServiceInfo: java.net.Inet6Address[] getInet6Addresses()>();

        $i0 = lengthof $r21;

        $i1 = 0;

     label07:
        if $i1 >= $i0 goto label08;

        r22 = $r21[$i1];

        virtualinvoke r11.<javax.jmdns.impl.ServiceInfoImpl: void addAddress(java.net.Inet6Address)>(r22);

        $i1 = $i1 + 1;

        goto label07;

     label08:
        $r20 = virtualinvoke $r10.<javax.jmdns.ServiceInfo: byte[] getTextBytes()>();

        virtualinvoke r11.<javax.jmdns.impl.ServiceInfoImpl: void _setText(byte[])>($r20);

        goto label06;

     label09:
        $r5 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.DNSCache getCache()>();

        $r1 = virtualinvoke r11.<javax.jmdns.impl.ServiceInfoImpl: java.lang.String getQualifiedName()>();

        $r14 = <javax.jmdns.impl.constants.DNSRecordType: javax.jmdns.impl.constants.DNSRecordType TYPE_TXT>;

        $r7 = <javax.jmdns.impl.constants.DNSRecordClass: javax.jmdns.impl.constants.DNSRecordClass CLASS_ANY>;

        $r8 = virtualinvoke $r5.<javax.jmdns.impl.DNSCache: javax.jmdns.impl.DNSEntry getDNSEntry(java.lang.String,javax.jmdns.impl.constants.DNSRecordType,javax.jmdns.impl.constants.DNSRecordClass)>($r1, $r14, $r7);

        $z1 = $r8 instanceof javax.jmdns.impl.DNSRecord;

        if $z1 == 0 goto label10;

        r9 = (javax.jmdns.impl.DNSRecord) $r8;

        $r10 = virtualinvoke r9.<javax.jmdns.impl.DNSRecord: javax.jmdns.ServiceInfo getServiceInfo(boolean)>($z0);

        if $r10 == null goto label10;

        $r20 = virtualinvoke $r10.<javax.jmdns.ServiceInfo: byte[] getTextBytes()>();

        virtualinvoke r11.<javax.jmdns.impl.ServiceInfoImpl: void _setText(byte[])>($r20);

     label10:
        $r20 = virtualinvoke r11.<javax.jmdns.impl.ServiceInfoImpl: byte[] getTextBytes()>();

        $i0 = lengthof $r20;

        if $i0 != 0 goto label11;

        virtualinvoke r11.<javax.jmdns.impl.ServiceInfoImpl: void _setText(byte[])>(r13);

     label11:
        $z0 = virtualinvoke r11.<javax.jmdns.impl.ServiceInfoImpl: boolean hasData()>();

        if $z0 == 0 goto label12;

        return r11;

     label12:
        return r4;
    }
    public java.util.Map getServiceTypes()
    {
        javax.jmdns.impl.JmDNSImpl r0;
        java.util.concurrent.ConcurrentMap r1;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        r1 = r0.<javax.jmdns.impl.JmDNSImpl: java.util.concurrent.ConcurrentMap _serviceTypes>;

        return r1;
    }
    public java.util.Map getServices()
    {
        javax.jmdns.impl.JmDNSImpl r0;
        java.util.concurrent.ConcurrentMap r1;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        r1 = r0.<javax.jmdns.impl.JmDNSImpl: java.util.concurrent.ConcurrentMap _services>;

        return r1;
    }
    public java.net.MulticastSocket getSocket()
    {
        javax.jmdns.impl.JmDNSImpl r0;
        java.net.MulticastSocket r1;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        r1 = r0.<javax.jmdns.impl.JmDNSImpl: java.net.MulticastSocket _socket>;

        return r1;
    }
    public int getThrottle()
    {
        javax.jmdns.impl.JmDNSImpl r0;
        int i0;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        i0 = r0.<javax.jmdns.impl.JmDNSImpl: int _throttle>;

        return i0;
    }
    void handleQuery(javax.jmdns.impl.DNSIncoming, java.net.InetAddress, int) throws java.io.IOException
    {
        javax.jmdns.impl.JmDNSImpl r0;
        javax.jmdns.impl.DNSIncoming $r1, $r10;
        java.net.InetAddress $r2;
        int $i0;
        long l1;
        org.slf4j.Logger $r3;
        boolean $z0, $z1;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        java.util.List $r6;
        java.util.Iterator $r7;
        java.lang.Object $r8;
        javax.jmdns.impl.DNSRecord r9;
        java.util.Collection $r11;
        java.lang.Throwable $r12;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 := @parameter0: javax.jmdns.impl.DNSIncoming;

        $r2 := @parameter1: java.net.InetAddress;

        $i0 := @parameter2: int;

        $r3 = <javax.jmdns.impl.JmDNSImpl: org.slf4j.Logger logger>;

        $z0 = interfaceinvoke $r3.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label01;

        $r3 = <javax.jmdns.impl.JmDNSImpl: org.slf4j.Logger logger>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: java.lang.String getName()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".handle query: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r3.<org.slf4j.Logger: void debug(java.lang.String)>($r5);

     label01:
        $z0 = 0;

        l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        l1 = l1 + 120L;

        $r6 = virtualinvoke $r1.<javax.jmdns.impl.DNSIncoming: java.util.List getAllAnswers()>();

        $r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label03;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (javax.jmdns.impl.DNSRecord) $r8;

        $z1 = virtualinvoke r9.<javax.jmdns.impl.DNSRecord: boolean handleQuery(javax.jmdns.impl.JmDNSImpl,long)>(r0, l1);

        $z0 = $z0 | $z1;

        goto label02;

     label03:
        virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: void ioLock()>();

     label04:
        $r10 = r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.DNSIncoming _plannedAnswer>;

     label05:
        if $r10 == null goto label09;

     label06:
        $r10 = r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.DNSIncoming _plannedAnswer>;

        virtualinvoke $r10.<javax.jmdns.impl.DNSIncoming: void append(javax.jmdns.impl.DNSIncoming)>($r1);

     label07:
        virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: void ioUnlock()>();

        l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r11 = virtualinvoke $r1.<javax.jmdns.impl.DNSIncoming: java.util.Collection getAnswers()>();

        $r7 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();

     label08:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label15;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (javax.jmdns.impl.DNSRecord) $r8;

        virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: void handleRecord(javax.jmdns.impl.DNSRecord,long)>(r9, l1);

        goto label08;

     label09:
        $r10 = virtualinvoke $r1.<javax.jmdns.impl.DNSIncoming: javax.jmdns.impl.DNSIncoming clone()>();

        $z1 = virtualinvoke $r1.<javax.jmdns.impl.DNSIncoming: boolean isTruncated()>();

     label10:
        if $z1 == 0 goto label12;

     label11:
        r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.DNSIncoming _plannedAnswer> = $r10;

     label12:
        virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: void startResponder(javax.jmdns.impl.DNSIncoming,java.net.InetAddress,int)>($r10, $r2, $i0);

     label13:
        goto label07;

     label14:
        $r12 := @caughtexception;

        virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: void ioUnlock()>();

        throw $r12;

     label15:
        if $z0 == 0 goto label16;

        virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: void startProber()>();

     label16:
        return;

        catch java.lang.Throwable from label04 to label05 with label14;
        catch java.lang.Throwable from label06 to label07 with label14;
        catch java.lang.Throwable from label09 to label10 with label14;
        catch java.lang.Throwable from label11 to label13 with label14;
    }
    void handleRecord(javax.jmdns.impl.DNSRecord, long)
    {
        javax.jmdns.impl.JmDNSImpl r0;
        javax.jmdns.impl.DNSRecord $r1, r2, r9, r17;
        long $l0;
        javax.jmdns.impl.JmDNSImpl$Operation r3, $r19;
        boolean $z0, $z1, $z2;
        org.slf4j.Logger $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;
        javax.jmdns.impl.DNSCache $r7;
        javax.jmdns.impl.DNSEntry $r8;
        java.util.Collection $r10;
        java.util.Iterator $r11;
        java.lang.Object $r12;
        javax.jmdns.impl.constants.DNSRecordType $r13, $r14;
        javax.jmdns.impl.constants.DNSRecordClass $r15, $r16;
        int $i1;
        javax.jmdns.impl.DNSRecord$Pointer r18;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 := @parameter0: javax.jmdns.impl.DNSRecord;

        $l0 := @parameter1: long;

        r2 = $r1;

        r3 = <javax.jmdns.impl.JmDNSImpl$Operation: javax.jmdns.impl.JmDNSImpl$Operation Noop>;

        $z0 = virtualinvoke $r1.<javax.jmdns.impl.DNSRecord: boolean isExpired(long)>($l0);

        $r4 = <javax.jmdns.impl.JmDNSImpl: org.slf4j.Logger logger>;

        $z1 = interfaceinvoke $r4.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z1 == 0 goto label01;

        $r4 = <javax.jmdns.impl.JmDNSImpl: org.slf4j.Logger logger>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: java.lang.String getName()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" handle response: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r4.<org.slf4j.Logger: void debug(java.lang.String)>($r6);

     label01:
        $z1 = virtualinvoke $r1.<javax.jmdns.impl.DNSRecord: boolean isServicesDiscoveryMetaQuery()>();

        if $z1 != 0 goto label05;

        $z1 = virtualinvoke $r1.<javax.jmdns.impl.DNSRecord: boolean isDomainDiscoveryQuery()>();

        if $z1 != 0 goto label05;

        $z1 = virtualinvoke $r1.<javax.jmdns.impl.DNSRecord: boolean isUnique()>();

        $r7 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.DNSCache getCache()>();

        $r8 = virtualinvoke $r7.<javax.jmdns.impl.DNSCache: javax.jmdns.impl.DNSEntry getDNSEntry(javax.jmdns.impl.DNSEntry)>($r1);

        r9 = (javax.jmdns.impl.DNSRecord) $r8;

        $r4 = <javax.jmdns.impl.JmDNSImpl: org.slf4j.Logger logger>;

        $z2 = interfaceinvoke $r4.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z2 == 0 goto label02;

        $r4 = <javax.jmdns.impl.JmDNSImpl: org.slf4j.Logger logger>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: java.lang.String getName()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" handle response cached record: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r9);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r4.<org.slf4j.Logger: void debug(java.lang.String)>($r6);

     label02:
        if $z1 == 0 goto label04;

        $r7 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.DNSCache getCache()>();

        $r6 = virtualinvoke $r1.<javax.jmdns.impl.DNSRecord: java.lang.String getKey()>();

        $r10 = virtualinvoke $r7.<javax.jmdns.impl.DNSCache: java.util.Collection getDNSEntryList(java.lang.String)>($r6);

        $r11 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();

     label03:
        $z1 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label04;

        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (javax.jmdns.impl.DNSEntry) $r12;

        $r13 = virtualinvoke $r1.<javax.jmdns.impl.DNSRecord: javax.jmdns.impl.constants.DNSRecordType getRecordType()>();

        $r14 = virtualinvoke $r8.<javax.jmdns.impl.DNSEntry: javax.jmdns.impl.constants.DNSRecordType getRecordType()>();

        $z1 = virtualinvoke $r13.<javax.jmdns.impl.constants.DNSRecordType: boolean equals(java.lang.Object)>($r14);

        if $z1 == 0 goto label03;

        $r15 = virtualinvoke $r1.<javax.jmdns.impl.DNSRecord: javax.jmdns.impl.constants.DNSRecordClass getRecordClass()>();

        $r16 = virtualinvoke $r8.<javax.jmdns.impl.DNSEntry: javax.jmdns.impl.constants.DNSRecordClass getRecordClass()>();

        $z1 = virtualinvoke $r15.<javax.jmdns.impl.constants.DNSRecordClass: boolean equals(java.lang.Object)>($r16);

        if $z1 == 0 goto label03;

        if $r8 == r9 goto label03;

        r17 = (javax.jmdns.impl.DNSRecord) $r8;

        virtualinvoke r17.<javax.jmdns.impl.DNSRecord: void setWillExpireSoon(long)>($l0);

        goto label03;

     label04:
        if r9 == null goto label11;

        if $z0 == 0 goto label07;

        $i1 = virtualinvoke $r1.<javax.jmdns.impl.DNSRecord: int getTTL()>();

        if $i1 != 0 goto label06;

        r3 = <javax.jmdns.impl.JmDNSImpl$Operation: javax.jmdns.impl.JmDNSImpl$Operation Noop>;

        virtualinvoke r9.<javax.jmdns.impl.DNSRecord: void setWillExpireSoon(long)>($l0);

     label05:
        $r13 = virtualinvoke r2.<javax.jmdns.impl.DNSRecord: javax.jmdns.impl.constants.DNSRecordType getRecordType()>();

        $r14 = <javax.jmdns.impl.constants.DNSRecordType: javax.jmdns.impl.constants.DNSRecordType TYPE_PTR>;

        if $r13 != $r14 goto label13;

        $z1 = virtualinvoke r2.<javax.jmdns.impl.DNSRecord: boolean isServicesDiscoveryMetaQuery()>();

        if $z1 == 0 goto label12;

        if $z0 != 0 goto label14;

        r18 = (javax.jmdns.impl.DNSRecord$Pointer) r2;

        $r6 = virtualinvoke r18.<javax.jmdns.impl.DNSRecord$Pointer: java.lang.String getAlias()>();

        virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: boolean registerServiceType(java.lang.String)>($r6);

        return;

     label06:
        r3 = <javax.jmdns.impl.JmDNSImpl$Operation: javax.jmdns.impl.JmDNSImpl$Operation Remove>;

        $r7 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.DNSCache getCache()>();

        virtualinvoke $r7.<javax.jmdns.impl.DNSCache: boolean removeDNSEntry(javax.jmdns.impl.DNSEntry)>(r9);

        goto label05;

     label07:
        $z1 = virtualinvoke $r1.<javax.jmdns.impl.DNSRecord: boolean sameValue(javax.jmdns.impl.DNSRecord)>(r9);

        if $z1 == 0 goto label08;

        $z1 = virtualinvoke $r1.<javax.jmdns.impl.DNSRecord: boolean sameSubtype(javax.jmdns.impl.DNSEntry)>(r9);

        if $z1 != 0 goto label10;

        $r6 = virtualinvoke $r1.<javax.jmdns.impl.DNSRecord: java.lang.String getSubtype()>();

        $i1 = virtualinvoke $r6.<java.lang.String: int length()>();

        if $i1 <= 0 goto label10;

     label08:
        $z1 = virtualinvoke $r1.<javax.jmdns.impl.DNSRecord: boolean isSingleValued()>();

        if $z1 == 0 goto label09;

        r3 = <javax.jmdns.impl.JmDNSImpl$Operation: javax.jmdns.impl.JmDNSImpl$Operation Update>;

        $r7 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.DNSCache getCache()>();

        virtualinvoke $r7.<javax.jmdns.impl.DNSCache: boolean replaceDNSEntry(javax.jmdns.impl.DNSEntry,javax.jmdns.impl.DNSEntry)>($r1, r9);

        goto label05;

     label09:
        r3 = <javax.jmdns.impl.JmDNSImpl$Operation: javax.jmdns.impl.JmDNSImpl$Operation Add>;

        $r7 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.DNSCache getCache()>();

        virtualinvoke $r7.<javax.jmdns.impl.DNSCache: boolean addDNSEntry(javax.jmdns.impl.DNSEntry)>($r1);

        goto label05;

     label10:
        virtualinvoke r9.<javax.jmdns.impl.DNSRecord: void resetTTL(javax.jmdns.impl.DNSRecord)>($r1);

        r2 = r9;

        goto label05;

     label11:
        if $z0 != 0 goto label05;

        r3 = <javax.jmdns.impl.JmDNSImpl$Operation: javax.jmdns.impl.JmDNSImpl$Operation Add>;

        $r7 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.DNSCache getCache()>();

        virtualinvoke $r7.<javax.jmdns.impl.DNSCache: boolean addDNSEntry(javax.jmdns.impl.DNSEntry)>($r1);

        goto label05;

     label12:
        $r6 = virtualinvoke r2.<javax.jmdns.impl.DNSRecord: java.lang.String getName()>();

        $z0 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: boolean registerServiceType(java.lang.String)>($r6);

        if $z0 == 0 goto label13;

        $r19 = <javax.jmdns.impl.JmDNSImpl$Operation: javax.jmdns.impl.JmDNSImpl$Operation Noop>;

        if r3 != $r19 goto label13;

        r3 = <javax.jmdns.impl.JmDNSImpl$Operation: javax.jmdns.impl.JmDNSImpl$Operation RegisterServiceType>;

     label13:
        $r19 = <javax.jmdns.impl.JmDNSImpl$Operation: javax.jmdns.impl.JmDNSImpl$Operation Noop>;

        if r3 == $r19 goto label14;

        virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: void updateRecord(long,javax.jmdns.impl.DNSRecord,javax.jmdns.impl.JmDNSImpl$Operation)>($l0, r2, r3);

     label14:
        return;
    }
    void handleResponse(javax.jmdns.impl.DNSIncoming) throws java.io.IOException
    {
        javax.jmdns.impl.JmDNSImpl r0;
        javax.jmdns.impl.DNSIncoming $r1;
        long $l0;
        boolean z0, z1, $z2;
        java.util.List $r2;
        java.util.Iterator $r3;
        java.lang.Object $r4;
        javax.jmdns.impl.DNSRecord r5;
        javax.jmdns.impl.constants.DNSRecordType $r6, $r7;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 := @parameter0: javax.jmdns.impl.DNSIncoming;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        z0 = 0;

        z1 = 0;

        $r2 = virtualinvoke $r1.<javax.jmdns.impl.DNSIncoming: java.util.List getAllAnswers()>();

        $r2 = specialinvoke r0.<javax.jmdns.impl.JmDNSImpl: java.util.List aRecordsLast(java.util.List)>($r2);

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (javax.jmdns.impl.DNSRecord) $r4;

        virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: void handleRecord(javax.jmdns.impl.DNSRecord,long)>(r5, $l0);

        $r6 = <javax.jmdns.impl.constants.DNSRecordType: javax.jmdns.impl.constants.DNSRecordType TYPE_A>;

        $r7 = virtualinvoke r5.<javax.jmdns.impl.DNSRecord: javax.jmdns.impl.constants.DNSRecordType getRecordType()>();

        $z2 = virtualinvoke $r6.<javax.jmdns.impl.constants.DNSRecordType: boolean equals(java.lang.Object)>($r7);

        if $z2 != 0 goto label2;

        $r6 = <javax.jmdns.impl.constants.DNSRecordType: javax.jmdns.impl.constants.DNSRecordType TYPE_AAAA>;

        $r7 = virtualinvoke r5.<javax.jmdns.impl.DNSRecord: javax.jmdns.impl.constants.DNSRecordType getRecordType()>();

        $z2 = virtualinvoke $r6.<javax.jmdns.impl.constants.DNSRecordType: boolean equals(java.lang.Object)>($r7);

        if $z2 == 0 goto label3;

     label2:
        $z2 = virtualinvoke r5.<javax.jmdns.impl.DNSRecord: boolean handleResponse(javax.jmdns.impl.JmDNSImpl)>(r0);

        z0 = z0 | $z2;

        goto label1;

     label3:
        $z2 = virtualinvoke r5.<javax.jmdns.impl.DNSRecord: boolean handleResponse(javax.jmdns.impl.JmDNSImpl)>(r0);

        z1 = z1 | $z2;

        goto label1;

     label4:
        if z0 != 0 goto label5;

        if z1 == 0 goto label6;

     label5:
        virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: void startProber()>();

     label6:
        return;
    }
    void handleServiceResolved(javax.jmdns.ServiceEvent)
    {
        javax.jmdns.impl.JmDNSImpl r0;
        javax.jmdns.ServiceEvent $r1;
        java.util.ArrayList r2;
        java.util.concurrent.ConcurrentMap $r3;
        java.lang.String $r4;
        java.lang.Object $r5;
        java.util.List r6;
        boolean $z0;
        javax.jmdns.ServiceInfo $r7;
        java.util.Iterator $r8;
        javax.jmdns.impl.ListenerStatus$ServiceListenerStatus r9;
        java.util.concurrent.ExecutorService $r10;
        javax.jmdns.impl.JmDNSImpl$1 $r11;
        java.lang.Throwable $r12;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 := @parameter0: javax.jmdns.ServiceEvent;

        $r3 = r0.<javax.jmdns.impl.JmDNSImpl: java.util.concurrent.ConcurrentMap _serviceListeners>;

        $r4 = virtualinvoke $r1.<javax.jmdns.ServiceEvent: java.lang.String getType()>();

        $r4 = virtualinvoke $r4.<java.lang.String: java.lang.String toLowerCase()>();

        $r5 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>($r4);

        r6 = (java.util.List) $r5;

        if r6 == null goto label7;

        $z0 = interfaceinvoke r6.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label7;

        $r7 = virtualinvoke $r1.<javax.jmdns.ServiceEvent: javax.jmdns.ServiceInfo getInfo()>();

        if $r7 == null goto label7;

        $r7 = virtualinvoke $r1.<javax.jmdns.ServiceEvent: javax.jmdns.ServiceInfo getInfo()>();

        $z0 = virtualinvoke $r7.<javax.jmdns.ServiceInfo: boolean hasData()>();

        if $z0 == 0 goto label7;

        entermonitor r6;

     label1:
        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>(java.util.Collection)>(r6);

        exitmonitor r6;

     label2:
        $r8 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r5 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r9 = (javax.jmdns.impl.ListenerStatus$ServiceListenerStatus) $r5;

        $r10 = r0.<javax.jmdns.impl.JmDNSImpl: java.util.concurrent.ExecutorService _executor>;

        $r11 = new javax.jmdns.impl.JmDNSImpl$1;

        specialinvoke $r11.<javax.jmdns.impl.JmDNSImpl$1: void <init>(javax.jmdns.impl.JmDNSImpl,javax.jmdns.impl.ListenerStatus$ServiceListenerStatus,javax.jmdns.ServiceEvent)>(r0, r9, $r1);

        interfaceinvoke $r10.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>($r11);

        goto label3;

     label4:
        $r12 := @caughtexception;

     label5:
        exitmonitor r6;

     label6:
        throw $r12;

     label7:
        return;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }
    public void ioLock()
    {
        javax.jmdns.impl.JmDNSImpl r0;
        java.util.concurrent.locks.ReentrantLock $r1;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 = r0.<javax.jmdns.impl.JmDNSImpl: java.util.concurrent.locks.ReentrantLock _ioLock>;

        virtualinvoke $r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

        return;
    }
    public void ioUnlock()
    {
        javax.jmdns.impl.JmDNSImpl r0;
        java.util.concurrent.locks.ReentrantLock $r1;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 = r0.<javax.jmdns.impl.JmDNSImpl: java.util.concurrent.locks.ReentrantLock _ioLock>;

        virtualinvoke $r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return;
    }
    public boolean isAnnounced()
    {
        javax.jmdns.impl.JmDNSImpl r0;
        boolean $z0;
        javax.jmdns.impl.HostInfo $r1;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 = r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.HostInfo _localHost>;

        $z0 = virtualinvoke $r1.<javax.jmdns.impl.HostInfo: boolean isAnnounced()>();

        return $z0;
    }
    public boolean isAnnouncing()
    {
        javax.jmdns.impl.JmDNSImpl r0;
        boolean $z0;
        javax.jmdns.impl.HostInfo $r1;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 = r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.HostInfo _localHost>;

        $z0 = virtualinvoke $r1.<javax.jmdns.impl.HostInfo: boolean isAnnouncing()>();

        return $z0;
    }
    public boolean isAssociatedWithTask(javax.jmdns.impl.tasks.DNSTask, javax.jmdns.impl.constants.DNSState)
    {
        javax.jmdns.impl.JmDNSImpl r0;
        javax.jmdns.impl.tasks.DNSTask $r1;
        javax.jmdns.impl.constants.DNSState $r2;
        boolean $z0;
        javax.jmdns.impl.HostInfo $r3;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 := @parameter0: javax.jmdns.impl.tasks.DNSTask;

        $r2 := @parameter1: javax.jmdns.impl.constants.DNSState;

        $r3 = r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.HostInfo _localHost>;

        $z0 = virtualinvoke $r3.<javax.jmdns.impl.HostInfo: boolean isAssociatedWithTask(javax.jmdns.impl.tasks.DNSTask,javax.jmdns.impl.constants.DNSState)>($r1, $r2);

        return $z0;
    }
    public boolean isCanceled()
    {
        javax.jmdns.impl.JmDNSImpl r0;
        boolean $z0;
        javax.jmdns.impl.HostInfo $r1;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 = r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.HostInfo _localHost>;

        $z0 = virtualinvoke $r1.<javax.jmdns.impl.HostInfo: boolean isCanceled()>();

        return $z0;
    }
    public boolean isCanceling()
    {
        javax.jmdns.impl.JmDNSImpl r0;
        boolean $z0;
        javax.jmdns.impl.HostInfo $r1;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 = r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.HostInfo _localHost>;

        $z0 = virtualinvoke $r1.<javax.jmdns.impl.HostInfo: boolean isCanceling()>();

        return $z0;
    }
    public boolean isClosed()
    {
        javax.jmdns.impl.JmDNSImpl r0;
        boolean $z0;
        javax.jmdns.impl.HostInfo $r1;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 = r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.HostInfo _localHost>;

        $z0 = virtualinvoke $r1.<javax.jmdns.impl.HostInfo: boolean isClosed()>();

        return $z0;
    }
    public boolean isClosing()
    {
        javax.jmdns.impl.JmDNSImpl r0;
        boolean $z0;
        javax.jmdns.impl.HostInfo $r1;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 = r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.HostInfo _localHost>;

        $z0 = virtualinvoke $r1.<javax.jmdns.impl.HostInfo: boolean isClosing()>();

        return $z0;
    }
    public boolean isProbing()
    {
        javax.jmdns.impl.JmDNSImpl r0;
        boolean $z0;
        javax.jmdns.impl.HostInfo $r1;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 = r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.HostInfo _localHost>;

        $z0 = virtualinvoke $r1.<javax.jmdns.impl.HostInfo: boolean isProbing()>();

        return $z0;
    }
    public javax.jmdns.ServiceInfo[] list(java.lang.String)
    {
        javax.jmdns.impl.JmDNSImpl r0;
        java.lang.String $r1;
        javax.jmdns.ServiceInfo[] $r2;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.ServiceInfo[] list(java.lang.String,long)>($r1, 6000L);

        return $r2;
    }
    public javax.jmdns.ServiceInfo[] list(java.lang.String, long)
    {
        javax.jmdns.impl.JmDNSImpl r0;
        java.lang.String $r1, $r2;
        long $l0;
        boolean $z0;
        java.io.PrintStream $r3;
        javax.jmdns.ServiceInfo[] $r4;
        java.util.concurrent.ConcurrentMap $r5;
        java.lang.Object $r6;
        javax.jmdns.impl.JmDNSImpl$ServiceCollector r7;
        org.slf4j.Logger $r8;
        java.lang.StringBuilder $r9;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 := @parameter0: java.lang.String;

        $l0 := @parameter1: long;

        virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: void cleanCache()>();

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: boolean isCanceling()>();

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: boolean isCanceled()>();

        if $z0 == 0 goto label2;

     label1:
        $r3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("JmDNS Cancelling.");

        $r4 = newarray (javax.jmdns.ServiceInfo)[0];

        return $r4;

     label2:
        $r5 = r0.<javax.jmdns.impl.JmDNSImpl: java.util.concurrent.ConcurrentMap _serviceCollectors>;

        $r6 = interfaceinvoke $r5.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>($r2);

        r7 = (javax.jmdns.impl.JmDNSImpl$ServiceCollector) $r6;

        if r7 != null goto label4;

        $r5 = r0.<javax.jmdns.impl.JmDNSImpl: java.util.concurrent.ConcurrentMap _serviceCollectors>;

        r7 = new javax.jmdns.impl.JmDNSImpl$ServiceCollector;

        specialinvoke r7.<javax.jmdns.impl.JmDNSImpl$ServiceCollector: void <init>(java.lang.String)>($r1);

        $r6 = interfaceinvoke $r5.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>($r2, r7);

        if $r6 != null goto label6;

        $z0 = 1;

     label3:
        $r5 = r0.<javax.jmdns.impl.JmDNSImpl: java.util.concurrent.ConcurrentMap _serviceCollectors>;

        $r6 = interfaceinvoke $r5.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>($r2);

        r7 = (javax.jmdns.impl.JmDNSImpl$ServiceCollector) $r6;

        if $z0 == 0 goto label4;

        specialinvoke r0.<javax.jmdns.impl.JmDNSImpl: void addServiceListener(java.lang.String,javax.jmdns.ServiceListener,boolean)>($r1, r7, 1);

     label4:
        $r8 = <javax.jmdns.impl.JmDNSImpl: org.slf4j.Logger logger>;

        $z0 = interfaceinvoke $r8.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label5;

        $r8 = <javax.jmdns.impl.JmDNSImpl: org.slf4j.Logger logger>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: java.lang.String getName()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-collector: ");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r1 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r8.<org.slf4j.Logger: void debug(java.lang.String)>($r1);

     label5:
        if r7 == null goto label7;

        $r4 = virtualinvoke r7.<javax.jmdns.impl.JmDNSImpl$ServiceCollector: javax.jmdns.ServiceInfo[] list(long)>($l0);

        return $r4;

     label6:
        $z0 = 0;

        goto label3;

     label7:
        $r4 = newarray (javax.jmdns.ServiceInfo)[0];

        return $r4;
    }
    public java.util.Map listBySubtype(java.lang.String)
    {
        javax.jmdns.impl.JmDNSImpl r0;
        java.lang.String $r1;
        java.util.Map $r2;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: java.util.Map listBySubtype(java.lang.String,long)>($r1, 6000L);

        return $r2;
    }
    public java.util.Map listBySubtype(java.lang.String, long)
    {
        javax.jmdns.impl.JmDNSImpl r0;
        java.lang.String $r1;
        long $l0;
        javax.jmdns.ServiceInfo r2;
        int i1, i2;
        java.util.HashMap r3, r4;
        javax.jmdns.ServiceInfo[] $r5;
        boolean $z0;
        java.util.ArrayList $r6;
        java.lang.Object $r7;
        java.util.List $r8;
        java.util.Set $r9;
        java.util.Iterator $r10;
        java.lang.Object[] $r11;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 := @parameter0: java.lang.String;

        $l0 := @parameter1: long;

        r3 = new java.util.HashMap;

        specialinvoke r3.<java.util.HashMap: void <init>(int)>(5);

        $r5 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.ServiceInfo[] list(java.lang.String,long)>($r1, $l0);

        i1 = lengthof $r5;

        i2 = 0;

     label1:
        if i2 >= i1 goto label3;

        r2 = $r5[i2];

        $r1 = virtualinvoke r2.<javax.jmdns.ServiceInfo: java.lang.String getSubtype()>();

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = interfaceinvoke r3.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        if $z0 != 0 goto label2;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>(int)>(10);

        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r6);

     label2:
        $r7 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r8 = (java.util.List) $r7;

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>(r2);

        i2 = i2 + 1;

        goto label1;

     label3:
        r4 = new java.util.HashMap;

        i1 = interfaceinvoke r3.<java.util.Map: int size()>();

        specialinvoke r4.<java.util.HashMap: void <init>(int)>(i1);

        $r9 = interfaceinvoke r3.<java.util.Map: java.util.Set keySet()>();

        $r10 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r7 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        $r1 = (java.lang.String) $r7;

        $r7 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r8 = (java.util.List) $r7;

        i1 = interfaceinvoke $r8.<java.util.List: int size()>();

        $r5 = newarray (javax.jmdns.ServiceInfo)[i1];

        $r11 = interfaceinvoke $r8.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r5);

        interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r11);

        goto label4;

     label5:
        return r4;
    }
    public void printServices()
    {
        javax.jmdns.impl.JmDNSImpl r0;
        java.io.PrintStream $r1;
        java.lang.String $r2;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 = <java.lang.System: java.io.PrintStream err>;

        $r2 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r2);

        return;
    }
    public void purgeStateTimer()
    {
        javax.jmdns.impl.JmDNSImpl r0;
        javax.jmdns.impl.DNSTaskStarter$Factory $r1;
        javax.jmdns.impl.DNSTaskStarter $r2;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 = staticinvoke <javax.jmdns.impl.DNSTaskStarter$Factory: javax.jmdns.impl.DNSTaskStarter$Factory getInstance()>();

        r0 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.JmDNSImpl getDns()>();

        $r2 = virtualinvoke $r1.<javax.jmdns.impl.DNSTaskStarter$Factory: javax.jmdns.impl.DNSTaskStarter getStarter(javax.jmdns.impl.JmDNSImpl)>(r0);

        interfaceinvoke $r2.<javax.jmdns.impl.DNSTaskStarter: void purgeStateTimer()>();

        return;
    }
    public void purgeTimer()
    {
        javax.jmdns.impl.JmDNSImpl r0;
        javax.jmdns.impl.DNSTaskStarter$Factory $r1;
        javax.jmdns.impl.DNSTaskStarter $r2;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 = staticinvoke <javax.jmdns.impl.DNSTaskStarter$Factory: javax.jmdns.impl.DNSTaskStarter$Factory getInstance()>();

        r0 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.JmDNSImpl getDns()>();

        $r2 = virtualinvoke $r1.<javax.jmdns.impl.DNSTaskStarter$Factory: javax.jmdns.impl.DNSTaskStarter getStarter(javax.jmdns.impl.JmDNSImpl)>(r0);

        interfaceinvoke $r2.<javax.jmdns.impl.DNSTaskStarter: void purgeTimer()>();

        return;
    }
    public void recover()
    {
        javax.jmdns.impl.JmDNSImpl r0;
        javax.jmdns.impl.JmDNSImpl$6 r1;
        org.slf4j.Logger $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        boolean $z0;
        java.lang.Object $r5;
        java.lang.Thread $r6;
        java.lang.Throwable $r7;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r2 = <javax.jmdns.impl.JmDNSImpl: org.slf4j.Logger logger>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: java.lang.String getName()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("recover()");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r2.<org.slf4j.Logger: void debug(java.lang.String)>($r4);

        $z0 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: boolean isClosing()>();

        if $z0 != 0 goto label7;

        $z0 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: boolean isClosed()>();

        if $z0 != 0 goto label7;

        $z0 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: boolean isCanceling()>();

        if $z0 != 0 goto label7;

        $z0 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: boolean isCanceled()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r5 = r0.<javax.jmdns.impl.JmDNSImpl: java.lang.Object _recoverLock>;

        entermonitor $r5;

     label2:
        $z0 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: boolean cancelState()>();

        if $z0 == 0 goto label3;

        $r2 = <javax.jmdns.impl.JmDNSImpl: org.slf4j.Logger logger>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: java.lang.String getName()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("recover() thread ");

        $r6 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r4 = virtualinvoke $r6.<java.lang.Thread: java.lang.String getName()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r2.<org.slf4j.Logger: void debug(java.lang.String)>($r4);

        r1 = new javax.jmdns.impl.JmDNSImpl$6;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: java.lang.String getName()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".recover()");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r1.<javax.jmdns.impl.JmDNSImpl$6: void <init>(javax.jmdns.impl.JmDNSImpl,java.lang.String)>(r0, $r4);

        virtualinvoke r1.<java.lang.Thread: void start()>();

     label3:
        exitmonitor $r5;

     label4:
        return;

     label5:
        $r7 := @caughtexception;

        exitmonitor $r5;

     label6:
        throw $r7;

     label7:
        return;

        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }
    public boolean recoverState()
    {
        javax.jmdns.impl.JmDNSImpl r0;
        boolean $z0;
        javax.jmdns.impl.HostInfo $r1;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 = r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.HostInfo _localHost>;

        $z0 = virtualinvoke $r1.<javax.jmdns.impl.HostInfo: boolean recoverState()>();

        return $z0;
    }
    public void registerService(javax.jmdns.ServiceInfo) throws java.io.IOException
    {
        javax.jmdns.impl.JmDNSImpl r0, $r4;
        javax.jmdns.ServiceInfo $r1;
        boolean $z0;
        java.lang.IllegalStateException $r2;
        javax.jmdns.impl.ServiceInfoImpl r3;
        java.util.concurrent.ConcurrentMap $r5;
        java.lang.String $r6;
        java.lang.Object $r7;
        javax.jmdns.impl.HostInfo $r8;
        java.net.Inet4Address $r9;
        java.net.Inet6Address $r10;
        org.slf4j.Logger $r11;
        java.lang.StringBuilder $r12;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 := @parameter0: javax.jmdns.ServiceInfo;

        $z0 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: boolean isClosing()>();

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: boolean isClosed()>();

        if $z0 == 0 goto label2;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("This DNS is closed.");

        throw $r2;

     label2:
        r3 = (javax.jmdns.impl.ServiceInfoImpl) $r1;

        $r4 = virtualinvoke r3.<javax.jmdns.impl.ServiceInfoImpl: javax.jmdns.impl.JmDNSImpl getDns()>();

        if $r4 == null goto label4;

        $r4 = virtualinvoke r3.<javax.jmdns.impl.ServiceInfoImpl: javax.jmdns.impl.JmDNSImpl getDns()>();

        if $r4 == r0 goto label3;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("A service information can only be registered with a single instamce of JmDNS.");

        throw $r2;

     label3:
        $r5 = r0.<javax.jmdns.impl.JmDNSImpl: java.util.concurrent.ConcurrentMap _services>;

        $r6 = virtualinvoke r3.<javax.jmdns.impl.ServiceInfoImpl: java.lang.String getKey()>();

        $r7 = interfaceinvoke $r5.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>($r6);

        if $r7 == null goto label4;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("A service information can only be registered once.");

        throw $r2;

     label4:
        virtualinvoke r3.<javax.jmdns.impl.ServiceInfoImpl: void setDns(javax.jmdns.impl.JmDNSImpl)>(r0);

        $r6 = virtualinvoke r3.<javax.jmdns.impl.ServiceInfoImpl: java.lang.String getTypeWithSubtype()>();

        virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: boolean registerServiceType(java.lang.String)>($r6);

        virtualinvoke r3.<javax.jmdns.impl.ServiceInfoImpl: boolean recoverState()>();

        $r8 = r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.HostInfo _localHost>;

        $r6 = virtualinvoke $r8.<javax.jmdns.impl.HostInfo: java.lang.String getName()>();

        virtualinvoke r3.<javax.jmdns.impl.ServiceInfoImpl: void setServer(java.lang.String)>($r6);

        $r8 = r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.HostInfo _localHost>;

        $r9 = virtualinvoke $r8.<javax.jmdns.impl.HostInfo: java.net.Inet4Address getInet4Address()>();

        virtualinvoke r3.<javax.jmdns.impl.ServiceInfoImpl: void addAddress(java.net.Inet4Address)>($r9);

        $r8 = r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.HostInfo _localHost>;

        $r10 = virtualinvoke $r8.<javax.jmdns.impl.HostInfo: java.net.Inet6Address getInet6Address()>();

        virtualinvoke r3.<javax.jmdns.impl.ServiceInfoImpl: void addAddress(java.net.Inet6Address)>($r10);

        virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: boolean waitForAnnounced(long)>(6000L);

        specialinvoke r0.<javax.jmdns.impl.JmDNSImpl: boolean makeServiceNameUnique(javax.jmdns.impl.ServiceInfoImpl)>(r3);

     label5:
        $r5 = r0.<javax.jmdns.impl.JmDNSImpl: java.util.concurrent.ConcurrentMap _services>;

        $r6 = virtualinvoke r3.<javax.jmdns.impl.ServiceInfoImpl: java.lang.String getKey()>();

        $r7 = interfaceinvoke $r5.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>($r6, r3);

        if $r7 == null goto label6;

        specialinvoke r0.<javax.jmdns.impl.JmDNSImpl: boolean makeServiceNameUnique(javax.jmdns.impl.ServiceInfoImpl)>(r3);

        goto label5;

     label6:
        virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: void startProber()>();

        virtualinvoke r3.<javax.jmdns.impl.ServiceInfoImpl: boolean waitForAnnounced(long)>(6000L);

        $r11 = <javax.jmdns.impl.JmDNSImpl: org.slf4j.Logger logger>;

        $z0 = interfaceinvoke $r11.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label7;

        $r11 = <javax.jmdns.impl.JmDNSImpl: org.slf4j.Logger logger>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("registerService() JmDNS registered service as ");

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r6 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r11.<org.slf4j.Logger: void debug(java.lang.String)>($r6);

     label7:
        return;
    }
    public boolean registerServiceType(java.lang.String)
    {
        javax.jmdns.impl.JmDNSImpl r0;
        java.lang.String $r1, r5, r6, r7, r8, $r11, $r13;
        boolean z0, $z1;
        java.util.Map $r2;
        javax.jmdns.ServiceInfo$Fields $r3;
        java.lang.Object $r4;
        java.lang.StringBuilder $r9, $r10;
        int $i0, i1;
        org.slf4j.Logger $r12;
        java.util.concurrent.ConcurrentMap $r14;
        javax.jmdns.impl.JmDNSImpl$ServiceTypeEntry $r15;
        java.util.Set $r16, $r17;
        javax.jmdns.impl.ListenerStatus$ServiceTypeListenerStatus[] $r18;
        java.lang.Object[] $r19;
        javax.jmdns.impl.ServiceEventImpl r20;
        javax.jmdns.impl.ListenerStatus$ServiceTypeListenerStatus r21;
        java.util.concurrent.ExecutorService $r22;
        javax.jmdns.impl.JmDNSImpl$2 $r23;
        javax.jmdns.impl.JmDNSImpl$3 $r24;
        java.lang.Throwable $r25;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 := @parameter0: java.lang.String;

        z0 = 0;

        $r2 = staticinvoke <javax.jmdns.impl.ServiceInfoImpl: java.util.Map decodeQualifiedNameMapForType(java.lang.String)>($r1);

        $r3 = <javax.jmdns.ServiceInfo$Fields: javax.jmdns.ServiceInfo$Fields Domain>;

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        r5 = (java.lang.String) $r4;

        $r3 = <javax.jmdns.ServiceInfo$Fields: javax.jmdns.ServiceInfo$Fields Protocol>;

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        r6 = (java.lang.String) $r4;

        $r3 = <javax.jmdns.ServiceInfo$Fields: javax.jmdns.ServiceInfo$Fields Application>;

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        r7 = (java.lang.String) $r4;

        $r3 = <javax.jmdns.ServiceInfo$Fields: javax.jmdns.ServiceInfo$Fields Subtype>;

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        r8 = (java.lang.String) $r4;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $i0 = virtualinvoke r7.<java.lang.String: int length()>();

        if $i0 <= 0 goto label07;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_");

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

     label01:
        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $i0 = virtualinvoke r6.<java.lang.String: int length()>();

        if $i0 <= 0 goto label08;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_");

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        r6 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

     label02:
        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        r6 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = virtualinvoke r6.<java.lang.String: java.lang.String toLowerCase()>();

        $r12 = <javax.jmdns.impl.JmDNSImpl: org.slf4j.Logger logger>;

        $z1 = interfaceinvoke $r12.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z1 == 0 goto label04;

        $r12 = <javax.jmdns.impl.JmDNSImpl: org.slf4j.Logger logger>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: java.lang.String getName()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".registering service type: ");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as: ");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $i0 = virtualinvoke r8.<java.lang.String: int length()>();

        if $i0 <= 0 goto label09;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" subtype: ");

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r1 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

     label03:
        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r12.<org.slf4j.Logger: void debug(java.lang.String)>($r1);

     label04:
        $r14 = r0.<javax.jmdns.impl.JmDNSImpl: java.util.concurrent.ConcurrentMap _serviceTypes>;

        $z1 = interfaceinvoke $r14.<java.util.concurrent.ConcurrentMap: boolean containsKey(java.lang.Object)>($r11);

        if $z1 != 0 goto label11;

        $r1 = virtualinvoke r7.<java.lang.String: java.lang.String toLowerCase()>();

        $z1 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("dns-sd");

        if $z1 != 0 goto label11;

        $r1 = virtualinvoke r5.<java.lang.String: java.lang.String toLowerCase()>();

        $z1 = virtualinvoke $r1.<java.lang.String: boolean endsWith(java.lang.String)>("in-addr.arpa");

        if $z1 != 0 goto label11;

        $r1 = virtualinvoke r5.<java.lang.String: java.lang.String toLowerCase()>();

        $z1 = virtualinvoke $r1.<java.lang.String: boolean endsWith(java.lang.String)>("ip6.arpa");

        if $z1 != 0 goto label11;

        $r14 = r0.<javax.jmdns.impl.JmDNSImpl: java.util.concurrent.ConcurrentMap _serviceTypes>;

        $r15 = new javax.jmdns.impl.JmDNSImpl$ServiceTypeEntry;

        specialinvoke $r15.<javax.jmdns.impl.JmDNSImpl$ServiceTypeEntry: void <init>(java.lang.String)>(r6);

        $r4 = interfaceinvoke $r14.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>($r11, $r15);

        if $r4 != null goto label10;

        z0 = 1;

     label05:
        if z0 == 0 goto label11;

        $r16 = r0.<javax.jmdns.impl.JmDNSImpl: java.util.Set _typeListeners>;

        $r17 = r0.<javax.jmdns.impl.JmDNSImpl: java.util.Set _typeListeners>;

        $i0 = interfaceinvoke $r17.<java.util.Set: int size()>();

        $r18 = newarray (javax.jmdns.impl.ListenerStatus$ServiceTypeListenerStatus)[$i0];

        $r19 = interfaceinvoke $r16.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r18);

        $r18 = (javax.jmdns.impl.ListenerStatus$ServiceTypeListenerStatus[]) $r19;

        r20 = new javax.jmdns.impl.ServiceEventImpl;

        specialinvoke r20.<javax.jmdns.impl.ServiceEventImpl: void <init>(javax.jmdns.impl.JmDNSImpl,java.lang.String,java.lang.String,javax.jmdns.ServiceInfo)>(r0, r6, "", null);

        $i0 = lengthof $r18;

        i1 = 0;

     label06:
        if i1 >= $i0 goto label11;

        r21 = $r18[i1];

        $r22 = r0.<javax.jmdns.impl.JmDNSImpl: java.util.concurrent.ExecutorService _executor>;

        $r23 = new javax.jmdns.impl.JmDNSImpl$2;

        specialinvoke $r23.<javax.jmdns.impl.JmDNSImpl$2: void <init>(javax.jmdns.impl.JmDNSImpl,javax.jmdns.impl.ListenerStatus$ServiceTypeListenerStatus,javax.jmdns.ServiceEvent)>(r0, r21, r20);

        interfaceinvoke $r22.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>($r23);

        i1 = i1 + 1;

        goto label06;

     label07:
        $r11 = "";

        goto label01;

     label08:
        r6 = "";

        goto label02;

     label09:
        $r1 = "";

        goto label03;

     label10:
        z0 = 0;

        goto label05;

     label11:
        $i0 = virtualinvoke r8.<java.lang.String: int length()>();

        if $i0 <= 0 goto label18;

        $r14 = r0.<javax.jmdns.impl.JmDNSImpl: java.util.concurrent.ConcurrentMap _serviceTypes>;

        $r4 = interfaceinvoke $r14.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>($r11);

        $r15 = (javax.jmdns.impl.JmDNSImpl$ServiceTypeEntry) $r4;

        if $r15 == null goto label18;

        $z1 = virtualinvoke $r15.<javax.jmdns.impl.JmDNSImpl$ServiceTypeEntry: boolean contains(java.lang.String)>(r8);

        if $z1 != 0 goto label18;

        entermonitor $r15;

     label12:
        $z1 = virtualinvoke $r15.<javax.jmdns.impl.JmDNSImpl$ServiceTypeEntry: boolean contains(java.lang.String)>(r8);

        if $z1 != 0 goto label14;

        z0 = 1;

        virtualinvoke $r15.<javax.jmdns.impl.JmDNSImpl$ServiceTypeEntry: boolean add(java.lang.String)>(r8);

        $r16 = r0.<javax.jmdns.impl.JmDNSImpl: java.util.Set _typeListeners>;

        $r17 = r0.<javax.jmdns.impl.JmDNSImpl: java.util.Set _typeListeners>;

        $i0 = interfaceinvoke $r17.<java.util.Set: int size()>();

        $r18 = newarray (javax.jmdns.impl.ListenerStatus$ServiceTypeListenerStatus)[$i0];

        $r19 = interfaceinvoke $r16.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r18);

        $r18 = (javax.jmdns.impl.ListenerStatus$ServiceTypeListenerStatus[]) $r19;

        r20 = new javax.jmdns.impl.ServiceEventImpl;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("._sub.");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r1 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r20.<javax.jmdns.impl.ServiceEventImpl: void <init>(javax.jmdns.impl.JmDNSImpl,java.lang.String,java.lang.String,javax.jmdns.ServiceInfo)>(r0, $r1, "", null);

        $i0 = lengthof $r18;

        i1 = 0;

     label13:
        if i1 >= $i0 goto label14;

        r21 = $r18[i1];

        $r22 = r0.<javax.jmdns.impl.JmDNSImpl: java.util.concurrent.ExecutorService _executor>;

        $r24 = new javax.jmdns.impl.JmDNSImpl$3;

        specialinvoke $r24.<javax.jmdns.impl.JmDNSImpl$3: void <init>(javax.jmdns.impl.JmDNSImpl,javax.jmdns.impl.ListenerStatus$ServiceTypeListenerStatus,javax.jmdns.ServiceEvent)>(r0, r21, r20);

        interfaceinvoke $r22.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>($r24);

        i1 = i1 + 1;

        goto label13;

     label14:
        exitmonitor $r15;

     label15:
        return z0;

     label16:
        $r25 := @caughtexception;

        exitmonitor $r15;

     label17:
        throw $r25;

     label18:
        return z0;

        catch java.lang.Throwable from label12 to label15 with label16;
        catch java.lang.Throwable from label16 to label17 with label16;
    }
    public void removeAssociationWithTask(javax.jmdns.impl.tasks.DNSTask)
    {
        javax.jmdns.impl.JmDNSImpl r0;
        javax.jmdns.impl.tasks.DNSTask $r1;
        javax.jmdns.impl.HostInfo $r2;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 := @parameter0: javax.jmdns.impl.tasks.DNSTask;

        $r2 = r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.HostInfo _localHost>;

        virtualinvoke $r2.<javax.jmdns.impl.HostInfo: void removeAssociationWithTask(javax.jmdns.impl.tasks.DNSTask)>($r1);

        return;
    }
    public void removeListener(javax.jmdns.impl.DNSListener)
    {
        javax.jmdns.impl.JmDNSImpl r0;
        javax.jmdns.impl.DNSListener $r1;
        java.util.List $r2;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 := @parameter0: javax.jmdns.impl.DNSListener;

        $r2 = r0.<javax.jmdns.impl.JmDNSImpl: java.util.List _listeners>;

        interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>($r1);

        return;
    }
    public void removeServiceListener(java.lang.String, javax.jmdns.ServiceListener)
    {
        javax.jmdns.impl.JmDNSImpl r0;
        java.lang.String $r1;
        javax.jmdns.ServiceListener $r2;
        javax.jmdns.impl.ListenerStatus$ServiceListenerStatus r3;
        java.util.concurrent.ConcurrentMap $r4;
        java.lang.Object $r5;
        java.util.List r6;
        boolean $z0;
        java.lang.Throwable $r7;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: javax.jmdns.ServiceListener;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        $r4 = r0.<javax.jmdns.impl.JmDNSImpl: java.util.concurrent.ConcurrentMap _serviceListeners>;

        $r5 = interfaceinvoke $r4.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>($r1);

        r6 = (java.util.List) $r5;

        if r6 == null goto label6;

        entermonitor r6;

     label1:
        r3 = new javax.jmdns.impl.ListenerStatus$ServiceListenerStatus;

        specialinvoke r3.<javax.jmdns.impl.ListenerStatus$ServiceListenerStatus: void <init>(javax.jmdns.ServiceListener,boolean)>($r2, 0);

        interfaceinvoke r6.<java.util.List: boolean remove(java.lang.Object)>(r3);

        $z0 = interfaceinvoke r6.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        $r4 = r0.<javax.jmdns.impl.JmDNSImpl: java.util.concurrent.ConcurrentMap _serviceListeners>;

        interfaceinvoke $r4.<java.util.concurrent.ConcurrentMap: boolean remove(java.lang.Object,java.lang.Object)>($r1, r6);

     label2:
        exitmonitor r6;

     label3:
        return;

     label4:
        $r7 := @caughtexception;

        exitmonitor r6;

     label5:
        throw $r7;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }
    public void removeServiceTypeListener(javax.jmdns.ServiceTypeListener)
    {
        javax.jmdns.impl.JmDNSImpl r0;
        javax.jmdns.ServiceTypeListener $r1;
        javax.jmdns.impl.ListenerStatus$ServiceTypeListenerStatus r2;
        java.util.Set $r3;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 := @parameter0: javax.jmdns.ServiceTypeListener;

        r2 = new javax.jmdns.impl.ListenerStatus$ServiceTypeListenerStatus;

        specialinvoke r2.<javax.jmdns.impl.ListenerStatus$ServiceTypeListenerStatus: void <init>(javax.jmdns.ServiceTypeListener,boolean)>($r1, 0);

        $r3 = r0.<javax.jmdns.impl.JmDNSImpl: java.util.Set _typeListeners>;

        interfaceinvoke $r3.<java.util.Set: boolean remove(java.lang.Object)>(r2);

        return;
    }
    public void renewServiceCollector(java.lang.String)
    {
        javax.jmdns.impl.JmDNSImpl r0;
        java.lang.String $r1, $r3;
        java.util.concurrent.ConcurrentMap $r2;
        boolean $z0;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<javax.jmdns.impl.JmDNSImpl: java.util.concurrent.ConcurrentMap _serviceCollectors>;

        $r3 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: boolean containsKey(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: void startServiceResolver(java.lang.String)>($r1);

     label1:
        return;
    }
    public void requestServiceInfo(java.lang.String, java.lang.String)
    {
        javax.jmdns.impl.JmDNSImpl r0;
        java.lang.String $r1, $r2;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: void requestServiceInfo(java.lang.String,java.lang.String,boolean,long)>($r1, $r2, 0, 6000L);

        return;
    }
    public void requestServiceInfo(java.lang.String, java.lang.String, long)
    {
        javax.jmdns.impl.JmDNSImpl r0;
        java.lang.String $r1, $r2;
        long $l0;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $l0 := @parameter2: long;

        virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: void requestServiceInfo(java.lang.String,java.lang.String,boolean,long)>($r1, $r2, 0, 6000L);

        return;
    }
    public void requestServiceInfo(java.lang.String, java.lang.String, boolean)
    {
        javax.jmdns.impl.JmDNSImpl r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $z0 := @parameter2: boolean;

        virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: void requestServiceInfo(java.lang.String,java.lang.String,boolean,long)>($r1, $r2, $z0, 6000L);

        return;
    }
    public void requestServiceInfo(java.lang.String, java.lang.String, boolean, long)
    {
        javax.jmdns.impl.JmDNSImpl r0;
        java.lang.String $r1, $r2;
        boolean $z0;
        long $l0;
        javax.jmdns.impl.ServiceInfoImpl $r3;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $z0 := @parameter2: boolean;

        $l0 := @parameter3: long;

        $r3 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.ServiceInfoImpl resolveServiceInfo(java.lang.String,java.lang.String,java.lang.String,boolean)>($r1, $r2, "", $z0);

        specialinvoke r0.<javax.jmdns.impl.JmDNSImpl: void waitForInfoData(javax.jmdns.ServiceInfo,long)>($r3, $l0);

        return;
    }
    javax.jmdns.impl.ServiceInfoImpl resolveServiceInfo(java.lang.String, java.lang.String, java.lang.String, boolean)
    {
        javax.jmdns.impl.JmDNSImpl r0;
        java.lang.String $r1, $r2, $r3, $r4;
        boolean $z0;
        java.util.concurrent.ConcurrentMap $r5;
        javax.jmdns.impl.JmDNSImpl$ServiceCollector $r6;
        java.lang.Object $r7;
        javax.jmdns.ServiceListener $r8;
        javax.jmdns.impl.ServiceInfoImpl $r9;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $z0 := @parameter3: boolean;

        virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: void cleanCache()>();

        $r4 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: boolean registerServiceType(java.lang.String)>($r1);

        $r5 = r0.<javax.jmdns.impl.JmDNSImpl: java.util.concurrent.ConcurrentMap _serviceCollectors>;

        $r6 = new javax.jmdns.impl.JmDNSImpl$ServiceCollector;

        specialinvoke $r6.<javax.jmdns.impl.JmDNSImpl$ServiceCollector: void <init>(java.lang.String)>($r1);

        $r7 = interfaceinvoke $r5.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>($r4, $r6);

        if $r7 != null goto label1;

        $r5 = r0.<javax.jmdns.impl.JmDNSImpl: java.util.concurrent.ConcurrentMap _serviceCollectors>;

        $r7 = interfaceinvoke $r5.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>($r4);

        $r8 = (javax.jmdns.ServiceListener) $r7;

        specialinvoke r0.<javax.jmdns.impl.JmDNSImpl: void addServiceListener(java.lang.String,javax.jmdns.ServiceListener,boolean)>($r4, $r8, 1);

     label1:
        $r9 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.ServiceInfoImpl getServiceInfoFromCache(java.lang.String,java.lang.String,java.lang.String,boolean)>($r1, $r2, $r3, $z0);

        virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: void startServiceInfoResolver(javax.jmdns.impl.ServiceInfoImpl)>($r9);

        return $r9;
    }
    public void respondToQuery(javax.jmdns.impl.DNSIncoming)
    {
        javax.jmdns.impl.JmDNSImpl r0;
        javax.jmdns.impl.DNSIncoming $r1, $r2;
        java.lang.Throwable $r3;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 := @parameter0: javax.jmdns.impl.DNSIncoming;

        virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: void ioLock()>();

     label1:
        $r2 = r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.DNSIncoming _plannedAnswer>;

     label2:
        if $r2 != $r1 goto label4;

     label3:
        r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.DNSIncoming _plannedAnswer> = null;

     label4:
        virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: void ioUnlock()>();

        return;

     label5:
        $r3 := @caughtexception;

        virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: void ioUnlock()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }
    public boolean revertState()
    {
        javax.jmdns.impl.JmDNSImpl r0;
        boolean $z0;
        javax.jmdns.impl.HostInfo $r1;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 = r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.HostInfo _localHost>;

        $z0 = virtualinvoke $r1.<javax.jmdns.impl.HostInfo: boolean revertState()>();

        return $z0;
    }
    public void send(javax.jmdns.impl.DNSOutgoing) throws java.io.IOException
    {
        javax.jmdns.impl.JmDNSImpl r0;
        javax.jmdns.impl.DNSOutgoing $r1;
        java.io.IOException r2;
        java.net.MulticastSocket r3;
        javax.jmdns.impl.DNSIncoming r4;
        java.net.DatagramPacket r5;
        boolean $z0;
        java.net.InetSocketAddress $r6;
        java.net.InetAddress $r7;
        int $i0, $i1;
        byte[] $r8;
        org.slf4j.Logger $r9;
        java.lang.StringBuilder $r10;
        java.lang.String $r11, $r13;
        java.lang.Class $r12;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 := @parameter0: javax.jmdns.impl.DNSOutgoing;

        $z0 = virtualinvoke $r1.<javax.jmdns.impl.DNSOutgoing: boolean isEmpty()>();

        if $z0 != 0 goto label10;

        $r6 = virtualinvoke $r1.<javax.jmdns.impl.DNSOutgoing: java.net.InetSocketAddress getDestination()>();

        if $r6 == null goto label08;

        $r6 = virtualinvoke $r1.<javax.jmdns.impl.DNSOutgoing: java.net.InetSocketAddress getDestination()>();

        $r7 = virtualinvoke $r6.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();

        $r6 = virtualinvoke $r1.<javax.jmdns.impl.DNSOutgoing: java.net.InetSocketAddress getDestination()>();

        $i0 = virtualinvoke $r6.<java.net.InetSocketAddress: int getPort()>();

     label01:
        $r8 = virtualinvoke $r1.<javax.jmdns.impl.DNSOutgoing: byte[] data()>();

        r5 = new java.net.DatagramPacket;

        $i1 = lengthof $r8;

        specialinvoke r5.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r8, $i1, $r7, $i0);

        $r9 = <javax.jmdns.impl.JmDNSImpl: org.slf4j.Logger logger>;

        $z0 = interfaceinvoke $r9.<org.slf4j.Logger: boolean isTraceEnabled()>();

        if $z0 == 0 goto label07;

        r4 = new javax.jmdns.impl.DNSIncoming;

     label02:
        specialinvoke r4.<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>(r5);

     label03:
        $r9 = <javax.jmdns.impl.JmDNSImpl: org.slf4j.Logger logger>;

     label04:
        $z0 = interfaceinvoke $r9.<org.slf4j.Logger: boolean isTraceEnabled()>();

     label05:
        if $z0 == 0 goto label07;

        $r9 = <javax.jmdns.impl.JmDNSImpl: org.slf4j.Logger logger>;

        $r10 = new java.lang.StringBuilder;

     label06:
        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("send(");

        $r11 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: java.lang.String getName()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") JmDNS out:");

        $r11 = virtualinvoke r4.<javax.jmdns.impl.DNSIncoming: java.lang.String print(boolean)>(1);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r9.<org.slf4j.Logger: void trace(java.lang.String)>($r11);

     label07:
        r3 = r0.<javax.jmdns.impl.JmDNSImpl: java.net.MulticastSocket _socket>;

        if r3 == null goto label10;

        $z0 = virtualinvoke r3.<java.net.MulticastSocket: boolean isClosed()>();

        if $z0 != 0 goto label10;

        virtualinvoke r3.<java.net.MulticastSocket: void send(java.net.DatagramPacket)>(r5);

        return;

     label08:
        $r7 = r0.<javax.jmdns.impl.JmDNSImpl: java.net.InetAddress _group>;

        $i0 = <javax.jmdns.impl.constants.DNSConstants: int MDNS_PORT>;

        goto label01;

     label09:
        r2 := @caughtexception;

        $r9 = <javax.jmdns.impl.JmDNSImpl: org.slf4j.Logger logger>;

        $r12 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r11 = virtualinvoke $r12.<java.lang.Class: java.lang.String toString()>();

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("send(");

        $r13 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: java.lang.String getName()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") - JmDNS can not parse what it sends!!!");

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r9.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>($r11, $r13, r2);

        goto label07;

     label10:
        return;

        catch java.io.IOException from label02 to label03 with label09;
        catch java.io.IOException from label04 to label05 with label09;
        catch java.io.IOException from label06 to label07 with label09;
    }
    public javax.jmdns.JmDNS$Delegate setDelegate(javax.jmdns.JmDNS$Delegate)
    {
        javax.jmdns.impl.JmDNSImpl r0;
        javax.jmdns.JmDNS$Delegate $r1, r2;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 := @parameter0: javax.jmdns.JmDNS$Delegate;

        r2 = r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.JmDNS$Delegate _delegate>;

        r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.JmDNS$Delegate _delegate> = $r1;

        return r2;
    }
    public void setLastThrottleIncrement(long)
    {
        javax.jmdns.impl.JmDNSImpl r0;
        long $l0;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $l0 := @parameter0: long;

        r0.<javax.jmdns.impl.JmDNSImpl: long _lastThrottleIncrement> = $l0;

        return;
    }
    void setLocalHost(javax.jmdns.impl.HostInfo)
    {
        javax.jmdns.impl.JmDNSImpl r0;
        javax.jmdns.impl.HostInfo $r1;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 := @parameter0: javax.jmdns.impl.HostInfo;

        r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.HostInfo _localHost> = $r1;

        return;
    }
    public void setPlannedAnswer(javax.jmdns.impl.DNSIncoming)
    {
        javax.jmdns.impl.JmDNSImpl r0;
        javax.jmdns.impl.DNSIncoming $r1;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 := @parameter0: javax.jmdns.impl.DNSIncoming;

        r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.DNSIncoming _plannedAnswer> = $r1;

        return;
    }
    public void setThrottle(int)
    {
        javax.jmdns.impl.JmDNSImpl r0;
        int $i0;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $i0 := @parameter0: int;

        r0.<javax.jmdns.impl.JmDNSImpl: int _throttle> = $i0;

        return;
    }
    public void startAnnouncer()
    {
        javax.jmdns.impl.JmDNSImpl r0;
        javax.jmdns.impl.DNSTaskStarter$Factory $r1;
        javax.jmdns.impl.DNSTaskStarter $r2;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 = staticinvoke <javax.jmdns.impl.DNSTaskStarter$Factory: javax.jmdns.impl.DNSTaskStarter$Factory getInstance()>();

        r0 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.JmDNSImpl getDns()>();

        $r2 = virtualinvoke $r1.<javax.jmdns.impl.DNSTaskStarter$Factory: javax.jmdns.impl.DNSTaskStarter getStarter(javax.jmdns.impl.JmDNSImpl)>(r0);

        interfaceinvoke $r2.<javax.jmdns.impl.DNSTaskStarter: void startAnnouncer()>();

        return;
    }
    public void startCanceler()
    {
        javax.jmdns.impl.JmDNSImpl r0;
        javax.jmdns.impl.DNSTaskStarter$Factory $r1;
        javax.jmdns.impl.DNSTaskStarter $r2;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 = staticinvoke <javax.jmdns.impl.DNSTaskStarter$Factory: javax.jmdns.impl.DNSTaskStarter$Factory getInstance()>();

        r0 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.JmDNSImpl getDns()>();

        $r2 = virtualinvoke $r1.<javax.jmdns.impl.DNSTaskStarter$Factory: javax.jmdns.impl.DNSTaskStarter getStarter(javax.jmdns.impl.JmDNSImpl)>(r0);

        interfaceinvoke $r2.<javax.jmdns.impl.DNSTaskStarter: void startCanceler()>();

        return;
    }
    public void startProber()
    {
        javax.jmdns.impl.JmDNSImpl r0;
        javax.jmdns.impl.DNSTaskStarter$Factory $r1;
        javax.jmdns.impl.DNSTaskStarter $r2;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 = staticinvoke <javax.jmdns.impl.DNSTaskStarter$Factory: javax.jmdns.impl.DNSTaskStarter$Factory getInstance()>();

        r0 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.JmDNSImpl getDns()>();

        $r2 = virtualinvoke $r1.<javax.jmdns.impl.DNSTaskStarter$Factory: javax.jmdns.impl.DNSTaskStarter getStarter(javax.jmdns.impl.JmDNSImpl)>(r0);

        interfaceinvoke $r2.<javax.jmdns.impl.DNSTaskStarter: void startProber()>();

        return;
    }
    public void startReaper()
    {
        javax.jmdns.impl.JmDNSImpl r0;
        javax.jmdns.impl.DNSTaskStarter$Factory $r1;
        javax.jmdns.impl.DNSTaskStarter $r2;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 = staticinvoke <javax.jmdns.impl.DNSTaskStarter$Factory: javax.jmdns.impl.DNSTaskStarter$Factory getInstance()>();

        r0 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.JmDNSImpl getDns()>();

        $r2 = virtualinvoke $r1.<javax.jmdns.impl.DNSTaskStarter$Factory: javax.jmdns.impl.DNSTaskStarter getStarter(javax.jmdns.impl.JmDNSImpl)>(r0);

        interfaceinvoke $r2.<javax.jmdns.impl.DNSTaskStarter: void startReaper()>();

        return;
    }
    public void startRenewer()
    {
        javax.jmdns.impl.JmDNSImpl r0;
        javax.jmdns.impl.DNSTaskStarter$Factory $r1;
        javax.jmdns.impl.DNSTaskStarter $r2;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 = staticinvoke <javax.jmdns.impl.DNSTaskStarter$Factory: javax.jmdns.impl.DNSTaskStarter$Factory getInstance()>();

        r0 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.JmDNSImpl getDns()>();

        $r2 = virtualinvoke $r1.<javax.jmdns.impl.DNSTaskStarter$Factory: javax.jmdns.impl.DNSTaskStarter getStarter(javax.jmdns.impl.JmDNSImpl)>(r0);

        interfaceinvoke $r2.<javax.jmdns.impl.DNSTaskStarter: void startRenewer()>();

        return;
    }
    public void startResponder(javax.jmdns.impl.DNSIncoming, java.net.InetAddress, int)
    {
        javax.jmdns.impl.JmDNSImpl r0;
        javax.jmdns.impl.DNSIncoming $r1;
        java.net.InetAddress $r2;
        int $i0;
        javax.jmdns.impl.DNSTaskStarter$Factory $r3;
        javax.jmdns.impl.DNSTaskStarter $r4;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 := @parameter0: javax.jmdns.impl.DNSIncoming;

        $r2 := @parameter1: java.net.InetAddress;

        $i0 := @parameter2: int;

        $r3 = staticinvoke <javax.jmdns.impl.DNSTaskStarter$Factory: javax.jmdns.impl.DNSTaskStarter$Factory getInstance()>();

        r0 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.JmDNSImpl getDns()>();

        $r4 = virtualinvoke $r3.<javax.jmdns.impl.DNSTaskStarter$Factory: javax.jmdns.impl.DNSTaskStarter getStarter(javax.jmdns.impl.JmDNSImpl)>(r0);

        interfaceinvoke $r4.<javax.jmdns.impl.DNSTaskStarter: void startResponder(javax.jmdns.impl.DNSIncoming,java.net.InetAddress,int)>($r1, $r2, $i0);

        return;
    }
    public void startServiceInfoResolver(javax.jmdns.impl.ServiceInfoImpl)
    {
        javax.jmdns.impl.JmDNSImpl r0;
        javax.jmdns.impl.ServiceInfoImpl $r1;
        javax.jmdns.impl.DNSTaskStarter$Factory $r2;
        javax.jmdns.impl.DNSTaskStarter $r3;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 := @parameter0: javax.jmdns.impl.ServiceInfoImpl;

        $r2 = staticinvoke <javax.jmdns.impl.DNSTaskStarter$Factory: javax.jmdns.impl.DNSTaskStarter$Factory getInstance()>();

        r0 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.JmDNSImpl getDns()>();

        $r3 = virtualinvoke $r2.<javax.jmdns.impl.DNSTaskStarter$Factory: javax.jmdns.impl.DNSTaskStarter getStarter(javax.jmdns.impl.JmDNSImpl)>(r0);

        interfaceinvoke $r3.<javax.jmdns.impl.DNSTaskStarter: void startServiceInfoResolver(javax.jmdns.impl.ServiceInfoImpl)>($r1);

        return;
    }
    public void startServiceResolver(java.lang.String)
    {
        javax.jmdns.impl.JmDNSImpl r0;
        java.lang.String $r1;
        javax.jmdns.impl.DNSTaskStarter$Factory $r2;
        javax.jmdns.impl.DNSTaskStarter $r3;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <javax.jmdns.impl.DNSTaskStarter$Factory: javax.jmdns.impl.DNSTaskStarter$Factory getInstance()>();

        r0 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.JmDNSImpl getDns()>();

        $r3 = virtualinvoke $r2.<javax.jmdns.impl.DNSTaskStarter$Factory: javax.jmdns.impl.DNSTaskStarter getStarter(javax.jmdns.impl.JmDNSImpl)>(r0);

        interfaceinvoke $r3.<javax.jmdns.impl.DNSTaskStarter: void startServiceResolver(java.lang.String)>($r1);

        return;
    }
    public void startTypeResolver()
    {
        javax.jmdns.impl.JmDNSImpl r0;
        javax.jmdns.impl.DNSTaskStarter$Factory $r1;
        javax.jmdns.impl.DNSTaskStarter $r2;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 = staticinvoke <javax.jmdns.impl.DNSTaskStarter$Factory: javax.jmdns.impl.DNSTaskStarter$Factory getInstance()>();

        r0 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.JmDNSImpl getDns()>();

        $r2 = virtualinvoke $r1.<javax.jmdns.impl.DNSTaskStarter$Factory: javax.jmdns.impl.DNSTaskStarter getStarter(javax.jmdns.impl.JmDNSImpl)>(r0);

        interfaceinvoke $r2.<javax.jmdns.impl.DNSTaskStarter: void startTypeResolver()>();

        return;
    }
    public java.lang.String toString()
    {
        javax.jmdns.impl.JmDNSImpl r0;
        javax.jmdns.impl.HostInfo $r2;
        java.util.concurrent.ConcurrentMap $r3;
        java.util.Set $r4;
        java.util.Iterator $r5;
        boolean $z0;
        java.lang.Object $r6;
        java.lang.String r7;
        javax.jmdns.impl.DNSCache $r8;
        java.lang.StringBuilder $r9;
        javax.jmdns.impl.JmDNSImpl$ServiceTypeEntry $r10;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(int)>(2048);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t---- Local Host -----");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\t");

        $r2 = r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.HostInfo _localHost>;

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\t---- Services -----");

        $r3 = r0.<javax.jmdns.impl.JmDNSImpl: java.util.concurrent.ConcurrentMap _services>;

        $r4 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: java.util.Set keySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.lang.String) $r6;

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\t\tService: ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r3 = r0.<javax.jmdns.impl.JmDNSImpl: java.util.concurrent.ConcurrentMap _services>;

        $r6 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r7);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        goto label1;

     label2:
        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t---- Types ----");

        $r3 = r0.<javax.jmdns.impl.JmDNSImpl: java.util.concurrent.ConcurrentMap _serviceTypes>;

        $r4 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: java.util.Set keySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.lang.String) $r6;

        $r3 = r0.<javax.jmdns.impl.JmDNSImpl: java.util.concurrent.ConcurrentMap _serviceTypes>;

        $r6 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r7);

        $r6 = (javax.jmdns.impl.JmDNSImpl$ServiceTypeEntry) $r6;

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\t\tType: ");

        $r10 = (javax.jmdns.impl.JmDNSImpl$ServiceTypeEntry) $r6;

        r7 = virtualinvoke $r10.<javax.jmdns.impl.JmDNSImpl$ServiceTypeEntry: java.lang.String getType()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r10 = (javax.jmdns.impl.JmDNSImpl$ServiceTypeEntry) $r6;

        $z0 = virtualinvoke $r10.<javax.jmdns.impl.JmDNSImpl$ServiceTypeEntry: boolean isEmpty()>();

        if $z0 == 0 goto label4;

        $r6 = "no subtypes";

     label4:
        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        goto label3;

     label5:
        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r8 = r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.DNSCache _cache>;

        r7 = virtualinvoke $r8.<javax.jmdns.impl.DNSCache: java.lang.String toString()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t---- Service Collectors ----");

        $r3 = r0.<javax.jmdns.impl.JmDNSImpl: java.util.concurrent.ConcurrentMap _serviceCollectors>;

        $r4 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: java.util.Set keySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label6:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.lang.String) $r6;

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\t\tService Collector: ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r3 = r0.<javax.jmdns.impl.JmDNSImpl: java.util.concurrent.ConcurrentMap _serviceCollectors>;

        $r6 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r7);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        goto label6;

     label7:
        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t---- Service Listeners ----");

        $r3 = r0.<javax.jmdns.impl.JmDNSImpl: java.util.concurrent.ConcurrentMap _serviceListeners>;

        $r4 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: java.util.Set keySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label8:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label9;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.lang.String) $r6;

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\t\tService Listener: ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r3 = r0.<javax.jmdns.impl.JmDNSImpl: java.util.concurrent.ConcurrentMap _serviceListeners>;

        $r6 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r7);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        goto label8;

     label9:
        r7 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return r7;
    }
    public void unregisterAllServices()
    {
        javax.jmdns.impl.JmDNSImpl r0;
        org.slf4j.Logger $r1;
        boolean $z0;
        java.util.concurrent.ConcurrentMap $r2;
        java.util.Set $r3;
        java.util.Iterator $r4;
        java.lang.Object $r5;
        java.lang.String r6, $r9;
        javax.jmdns.impl.ServiceInfoImpl r7;
        java.lang.StringBuilder $r8;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 = <javax.jmdns.impl.JmDNSImpl: org.slf4j.Logger logger>;

        $z0 = interfaceinvoke $r1.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r1 = <javax.jmdns.impl.JmDNSImpl: org.slf4j.Logger logger>;

        interfaceinvoke $r1.<org.slf4j.Logger: void debug(java.lang.String)>("unregisterAllServices()");

     label1:
        $r2 = r0.<javax.jmdns.impl.JmDNSImpl: java.util.concurrent.ConcurrentMap _services>;

        $r3 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: java.util.Set keySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.String) $r5;

        $r2 = r0.<javax.jmdns.impl.JmDNSImpl: java.util.concurrent.ConcurrentMap _services>;

        $r5 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r6);

        r7 = (javax.jmdns.impl.ServiceInfoImpl) $r5;

        if r7 == null goto label2;

        $r1 = <javax.jmdns.impl.JmDNSImpl: org.slf4j.Logger logger>;

        $z0 = interfaceinvoke $r1.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label3;

        $r1 = <javax.jmdns.impl.JmDNSImpl: org.slf4j.Logger logger>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cancelling service info: ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        r6 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r1.<org.slf4j.Logger: void debug(java.lang.String)>(r6);

     label3:
        virtualinvoke r7.<javax.jmdns.impl.ServiceInfoImpl: boolean cancelState()>();

        goto label2;

     label4:
        virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: void startCanceler()>();

        $r2 = r0.<javax.jmdns.impl.JmDNSImpl: java.util.concurrent.ConcurrentMap _services>;

        $r3 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: java.util.Set keySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.String) $r5;

        $r2 = r0.<javax.jmdns.impl.JmDNSImpl: java.util.concurrent.ConcurrentMap _services>;

        $r5 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r6);

        r7 = (javax.jmdns.impl.ServiceInfoImpl) $r5;

        if r7 == null goto label5;

        $r1 = <javax.jmdns.impl.JmDNSImpl: org.slf4j.Logger logger>;

        $z0 = interfaceinvoke $r1.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label6;

        $r1 = <javax.jmdns.impl.JmDNSImpl: org.slf4j.Logger logger>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wait for service info cancel: ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r1.<org.slf4j.Logger: void debug(java.lang.String)>($r9);

     label6:
        virtualinvoke r7.<javax.jmdns.impl.ServiceInfoImpl: boolean waitForCanceled(long)>(5000L);

        $r2 = r0.<javax.jmdns.impl.JmDNSImpl: java.util.concurrent.ConcurrentMap _services>;

        interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: boolean remove(java.lang.Object,java.lang.Object)>(r6, r7);

        goto label5;

     label7:
        return;
    }
    public void unregisterService(javax.jmdns.ServiceInfo)
    {
        javax.jmdns.impl.JmDNSImpl r0;
        javax.jmdns.ServiceInfo $r1;
        java.util.concurrent.ConcurrentMap $r2;
        java.lang.String $r3;
        java.lang.Object $r4;
        javax.jmdns.impl.ServiceInfoImpl r5;
        org.slf4j.Logger $r6;
        boolean $z0;
        java.lang.StringBuilder $r7;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $r1 := @parameter0: javax.jmdns.ServiceInfo;

        $r2 = r0.<javax.jmdns.impl.JmDNSImpl: java.util.concurrent.ConcurrentMap _services>;

        $r3 = virtualinvoke $r1.<javax.jmdns.ServiceInfo: java.lang.String getKey()>();

        $r4 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>($r3);

        r5 = (javax.jmdns.impl.ServiceInfoImpl) $r4;

        if r5 == null goto label1;

        virtualinvoke r5.<javax.jmdns.impl.ServiceInfoImpl: boolean cancelState()>();

        virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: void startCanceler()>();

        virtualinvoke r5.<javax.jmdns.impl.ServiceInfoImpl: boolean waitForCanceled(long)>(5000L);

        $r2 = r0.<javax.jmdns.impl.JmDNSImpl: java.util.concurrent.ConcurrentMap _services>;

        $r3 = virtualinvoke r5.<javax.jmdns.impl.ServiceInfoImpl: java.lang.String getKey()>();

        interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: boolean remove(java.lang.Object,java.lang.Object)>($r3, r5);

        $r6 = <javax.jmdns.impl.JmDNSImpl: org.slf4j.Logger logger>;

        $z0 = interfaceinvoke $r6.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label2;

        $r6 = <javax.jmdns.impl.JmDNSImpl: org.slf4j.Logger logger>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unregisterService() JmDNS ");

        $r3 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: java.lang.String getName()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" unregistered service as ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r3 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r6.<org.slf4j.Logger: void debug(java.lang.String)>($r3);

        return;

     label1:
        $r6 = <javax.jmdns.impl.JmDNSImpl: org.slf4j.Logger logger>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: java.lang.String getName()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" removing unregistered service info: ");

        $r3 = virtualinvoke $r1.<javax.jmdns.ServiceInfo: java.lang.String getKey()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r6.<org.slf4j.Logger: void warn(java.lang.String)>($r3);

     label2:
        return;
    }
    public void updateRecord(long, javax.jmdns.impl.DNSRecord, javax.jmdns.impl.JmDNSImpl$Operation)
    {
        javax.jmdns.impl.JmDNSImpl r0;
        long $l0;
        javax.jmdns.impl.DNSRecord $r1;
        javax.jmdns.impl.JmDNSImpl$Operation $r2;
        java.util.ArrayList r3, $r26;
        javax.jmdns.ServiceEvent r4, r14;
        java.util.List $r5, $r6;
        java.util.Iterator $r7;
        boolean $z0;
        java.lang.Object $r8;
        javax.jmdns.impl.DNSListener r9;
        javax.jmdns.impl.DNSCache $r10;
        java.lang.Throwable $r11, $r23;
        javax.jmdns.impl.constants.DNSRecordType $r12, $r13;
        javax.jmdns.ServiceInfo $r15;
        java.lang.String $r16, $r17;
        javax.jmdns.impl.ServiceInfoImpl $r18;
        java.util.concurrent.ConcurrentMap $r19;
        org.slf4j.Logger $r20;
        java.lang.StringBuilder $r21, $r28;
        int[] $r22;
        int $i1;
        javax.jmdns.impl.ListenerStatus$ServiceListenerStatus r24;
        java.util.concurrent.ExecutorService $r25;
        javax.jmdns.impl.ServiceEventImpl $r27;
        javax.jmdns.impl.JmDNSImpl$4 $r29;
        javax.jmdns.impl.JmDNSImpl$5 $r30;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $l0 := @parameter0: long;

        $r1 := @parameter1: javax.jmdns.impl.DNSRecord;

        $r2 := @parameter2: javax.jmdns.impl.JmDNSImpl$Operation;

        $r5 = r0.<javax.jmdns.impl.JmDNSImpl: java.util.List _listeners>;

        entermonitor $r5;

     label01:
        $r26 = new java.util.ArrayList;

        $r6 = r0.<javax.jmdns.impl.JmDNSImpl: java.util.List _listeners>;

        specialinvoke $r26.<java.util.ArrayList: void <init>(java.util.Collection)>($r6);

     label02:
        exitmonitor $r5;

     label03:
        $r7 = interfaceinvoke $r26.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (javax.jmdns.impl.DNSListener) $r8;

        $r10 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.DNSCache getCache()>();

        interfaceinvoke r9.<javax.jmdns.impl.DNSListener: void updateRecord(javax.jmdns.impl.DNSCache,long,javax.jmdns.impl.DNSEntry)>($r10, $l0, $r1);

        goto label04;

     label05:
        $r11 := @caughtexception;

     label06:
        exitmonitor $r5;

     label07:
        throw $r11;

     label08:
        $r12 = <javax.jmdns.impl.constants.DNSRecordType: javax.jmdns.impl.constants.DNSRecordType TYPE_PTR>;

        $r13 = virtualinvoke $r1.<javax.jmdns.impl.DNSRecord: javax.jmdns.impl.constants.DNSRecordType getRecordType()>();

        $z0 = virtualinvoke $r12.<javax.jmdns.impl.constants.DNSRecordType: boolean equals(java.lang.Object)>($r13);

        if $z0 == 0 goto label26;

        r4 = virtualinvoke $r1.<javax.jmdns.impl.DNSRecord: javax.jmdns.ServiceEvent getServiceEvent(javax.jmdns.impl.JmDNSImpl)>(r0);

        r14 = r4;

        $r15 = virtualinvoke r4.<javax.jmdns.ServiceEvent: javax.jmdns.ServiceInfo getInfo()>();

        if $r15 == null goto label09;

        $r15 = virtualinvoke r4.<javax.jmdns.ServiceEvent: javax.jmdns.ServiceInfo getInfo()>();

        $z0 = virtualinvoke $r15.<javax.jmdns.ServiceInfo: boolean hasData()>();

        if $z0 != 0 goto label10;

     label09:
        $r16 = virtualinvoke r4.<javax.jmdns.ServiceEvent: java.lang.String getType()>();

        $r17 = virtualinvoke r4.<javax.jmdns.ServiceEvent: java.lang.String getName()>();

        $r18 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.ServiceInfoImpl getServiceInfoFromCache(java.lang.String,java.lang.String,java.lang.String,boolean)>($r16, $r17, "", 0);

        $z0 = virtualinvoke $r18.<javax.jmdns.ServiceInfo: boolean hasData()>();

        if $z0 == 0 goto label10;

        $r27 = new javax.jmdns.impl.ServiceEventImpl;

        $r16 = virtualinvoke r4.<javax.jmdns.ServiceEvent: java.lang.String getType()>();

        $r17 = virtualinvoke r4.<javax.jmdns.ServiceEvent: java.lang.String getName()>();

        specialinvoke $r27.<javax.jmdns.impl.ServiceEventImpl: void <init>(javax.jmdns.impl.JmDNSImpl,java.lang.String,java.lang.String,javax.jmdns.ServiceInfo)>(r0, $r16, $r17, $r18);

        r14 = $r27;

     label10:
        $r19 = r0.<javax.jmdns.impl.JmDNSImpl: java.util.concurrent.ConcurrentMap _serviceListeners>;

        $r16 = virtualinvoke r14.<javax.jmdns.ServiceEvent: java.lang.String getType()>();

        $r16 = virtualinvoke $r16.<java.lang.String: java.lang.String toLowerCase()>();

        $r8 = interfaceinvoke $r19.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>($r16);

        $r5 = (java.util.List) $r8;

        if $r5 == null goto label18;

        entermonitor $r5;

     label11:
        r3 = new java.util.ArrayList;

        $r6 = r3;

        specialinvoke r3.<java.util.ArrayList: void <init>(java.util.Collection)>($r5);

        exitmonitor $r5;

     label12:
        $r20 = <javax.jmdns.impl.JmDNSImpl: org.slf4j.Logger logger>;

        $z0 = interfaceinvoke $r20.<org.slf4j.Logger: boolean isTraceEnabled()>();

        if $z0 == 0 goto label13;

        $r20 = <javax.jmdns.impl.JmDNSImpl: org.slf4j.Logger logger>;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl: java.lang.String getName()>();

        $r21 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r21 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".updating record for event: ");

        $r21 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r14);

        $r21 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" list ");

        $r21 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r21 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" operation: ");

        $r21 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r16 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r20.<org.slf4j.Logger: void trace(java.lang.String)>($r16);

     label13:
        $z0 = interfaceinvoke $r6.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label26;

        r4 = r14;

        $r22 = <javax.jmdns.impl.JmDNSImpl$7: int[] $SwitchMap$javax$jmdns$impl$JmDNSImpl$Operation>;

        $i1 = virtualinvoke $r2.<javax.jmdns.impl.JmDNSImpl$Operation: int ordinal()>();

        $i1 = $r22[$i1];

        lookupswitch($i1)
        {
            case 1: goto label19;
            case 2: goto label22;
            default: goto label14;
        };

     label14:
        return;

     label15:
        $r23 := @caughtexception;

     label16:
        exitmonitor $r5;

     label17:
        throw $r23;

     label18:
        $r6 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        goto label12;

     label19:
        $r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label20:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label26;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r24 = (javax.jmdns.impl.ListenerStatus$ServiceListenerStatus) $r8;

        $z0 = virtualinvoke r24.<javax.jmdns.impl.ListenerStatus$ServiceListenerStatus: boolean isSynchronous()>();

        if $z0 == 0 goto label21;

        virtualinvoke r24.<javax.jmdns.impl.ListenerStatus$ServiceListenerStatus: void serviceAdded(javax.jmdns.ServiceEvent)>(r4);

        goto label20;

     label21:
        $r25 = r0.<javax.jmdns.impl.JmDNSImpl: java.util.concurrent.ExecutorService _executor>;

        $r29 = new javax.jmdns.impl.JmDNSImpl$4;

        specialinvoke $r29.<javax.jmdns.impl.JmDNSImpl$4: void <init>(javax.jmdns.impl.JmDNSImpl,javax.jmdns.impl.ListenerStatus$ServiceListenerStatus,javax.jmdns.ServiceEvent)>(r0, r24, r4);

        interfaceinvoke $r25.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>($r29);

        goto label20;

     label22:
        $r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label23:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label26;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r24 = (javax.jmdns.impl.ListenerStatus$ServiceListenerStatus) $r8;

        $z0 = virtualinvoke r24.<javax.jmdns.impl.ListenerStatus$ServiceListenerStatus: boolean isSynchronous()>();

        if $z0 == 0 goto label24;

        virtualinvoke r24.<javax.jmdns.impl.ListenerStatus$ServiceListenerStatus: void serviceRemoved(javax.jmdns.ServiceEvent)>(r4);

        goto label23;

     label24:
        $r25 = r0.<javax.jmdns.impl.JmDNSImpl: java.util.concurrent.ExecutorService _executor>;

        $r30 = new javax.jmdns.impl.JmDNSImpl$5;

        specialinvoke $r30.<javax.jmdns.impl.JmDNSImpl$5: void <init>(javax.jmdns.impl.JmDNSImpl,javax.jmdns.impl.ListenerStatus$ServiceListenerStatus,javax.jmdns.ServiceEvent)>(r0, r24, r4);

        interfaceinvoke $r25.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>($r30);

        goto label23;

     label25:
        $r11 := @caughtexception;

        goto label06;

     label26:
        return;

        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.lang.Throwable from label02 to label03 with label25;
        catch java.lang.Throwable from label06 to label07 with label05;
        catch java.lang.Throwable from label11 to label12 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
    }
    public boolean waitForAnnounced(long)
    {
        javax.jmdns.impl.JmDNSImpl r0;
        long $l0;
        boolean $z0;
        javax.jmdns.impl.HostInfo $r1;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $l0 := @parameter0: long;

        $r1 = r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.HostInfo _localHost>;

        $z0 = virtualinvoke $r1.<javax.jmdns.impl.HostInfo: boolean waitForAnnounced(long)>($l0);

        return $z0;
    }
    public boolean waitForCanceled(long)
    {
        javax.jmdns.impl.JmDNSImpl r0;
        long $l0;
        boolean $z0;
        javax.jmdns.impl.HostInfo $r1;

        r0 := @this: javax.jmdns.impl.JmDNSImpl;

        $l0 := @parameter0: long;

        $r1 = r0.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.HostInfo _localHost>;

        $z0 = virtualinvoke $r1.<javax.jmdns.impl.HostInfo: boolean waitForCanceled(long)>($l0);

        return $z0;
    }
