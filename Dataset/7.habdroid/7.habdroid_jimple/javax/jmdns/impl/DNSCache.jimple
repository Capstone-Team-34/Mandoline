javax.jmdns.impl.DNSCache extends java.util.concurrent.ConcurrentHashMap
private static final long serialVersionUID
    public void <init>()
    {
        javax.jmdns.impl.DNSCache r0;

        r0 := @this: javax.jmdns.impl.DNSCache;

        specialinvoke r0.<javax.jmdns.impl.DNSCache: void <init>(int)>(1024);

        return;
    }
    public void <init>(int)
    {
        javax.jmdns.impl.DNSCache r0;
        int $i0;

        r0 := @this: javax.jmdns.impl.DNSCache;

        $i0 := @parameter0: int;

        specialinvoke r0.<java.util.concurrent.ConcurrentHashMap: void <init>(int)>($i0);

        return;
    }
    public void <init>(javax.jmdns.impl.DNSCache)
    {
        javax.jmdns.impl.DNSCache r0, $r1;
        int $i0;

        r0 := @this: javax.jmdns.impl.DNSCache;

        $r1 := @parameter0: javax.jmdns.impl.DNSCache;

        if $r1 == null goto label2;

        $i0 = virtualinvoke $r1.<javax.jmdns.impl.DNSCache: int size()>();

     label1:
        specialinvoke r0.<javax.jmdns.impl.DNSCache: void <init>(int)>($i0);

        if $r1 == null goto label3;

        virtualinvoke r0.<javax.jmdns.impl.DNSCache: void putAll(java.util.Map)>($r1);

        return;

     label2:
        $i0 = 1024;

        goto label1;

     label3:
        return;
    }
    private java.util.Collection _getDNSEntryList(java.lang.String)
    {
        javax.jmdns.impl.DNSCache r0;
        java.lang.String $r1;
        java.lang.Object $r2;
        java.util.Collection $r3;

        r0 := @this: javax.jmdns.impl.DNSCache;

        $r1 := @parameter0: java.lang.String;

        if $r1 == null goto label2;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

     label1:
        $r2 = virtualinvoke r0.<javax.jmdns.impl.DNSCache: java.lang.Object get(java.lang.Object)>($r1);

        $r3 = (java.util.Collection) $r2;

        return $r3;

     label2:
        $r1 = null;

        goto label1;
    }
    public boolean addDNSEntry(javax.jmdns.impl.DNSEntry)
    {
        javax.jmdns.impl.DNSCache r0;
        javax.jmdns.impl.DNSEntry $r1;
        java.util.ArrayList $r2;
        java.lang.String $r3;
        java.lang.Object $r4;
        java.util.List r5;
        java.lang.Throwable $r6;

        r0 := @this: javax.jmdns.impl.DNSCache;

        $r1 := @parameter0: javax.jmdns.impl.DNSEntry;

        if $r1 == null goto label6;

        $r3 = virtualinvoke $r1.<javax.jmdns.impl.DNSEntry: java.lang.String getKey()>();

        $r4 = virtualinvoke r0.<javax.jmdns.impl.DNSCache: java.lang.Object get(java.lang.Object)>($r3);

        r5 = (java.util.List) $r4;

        if r5 != null goto label1;

        $r3 = virtualinvoke $r1.<javax.jmdns.impl.DNSEntry: java.lang.String getKey()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        virtualinvoke r0.<javax.jmdns.impl.DNSCache: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>($r3, $r2);

        $r3 = virtualinvoke $r1.<javax.jmdns.impl.DNSEntry: java.lang.String getKey()>();

        $r4 = virtualinvoke r0.<javax.jmdns.impl.DNSCache: java.lang.Object get(java.lang.Object)>($r3);

        r5 = (java.util.List) $r4;

     label1:
        entermonitor r5;

     label2:
        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r1);

        exitmonitor r5;

     label3:
        return 1;

     label4:
        $r6 := @caughtexception;

        exitmonitor r5;

     label5:
        throw $r6;

     label6:
        return 0;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }
    public java.util.Collection allValues()
    {
        javax.jmdns.impl.DNSCache r0;
        java.util.ArrayList r1;
        java.util.Collection $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        java.util.List r5;

        r0 := @this: javax.jmdns.impl.DNSCache;

        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>()>();

        $r2 = virtualinvoke r0.<javax.jmdns.impl.DNSCache: java.util.Collection values()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.List) $r4;

        if r5 == null goto label1;

        interfaceinvoke r1.<java.util.List: boolean addAll(java.util.Collection)>(r5);

        goto label1;

     label2:
        return r1;
    }
    protected java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        javax.jmdns.impl.DNSCache r0, $r1;

        r0 := @this: javax.jmdns.impl.DNSCache;

        $r1 = new javax.jmdns.impl.DNSCache;

        specialinvoke $r1.<javax.jmdns.impl.DNSCache: void <init>(javax.jmdns.impl.DNSCache)>(r0);

        return $r1;
    }
    public javax.jmdns.impl.DNSEntry getDNSEntry(java.lang.String, javax.jmdns.impl.constants.DNSRecordType, javax.jmdns.impl.constants.DNSRecordClass)
    {
        javax.jmdns.impl.DNSCache r0;
        java.lang.String $r1;
        javax.jmdns.impl.constants.DNSRecordType $r2;
        javax.jmdns.impl.constants.DNSRecordClass $r3;
        javax.jmdns.impl.DNSEntry r4, r8;
        java.util.Collection $r5;
        java.util.Iterator $r6;
        boolean $z0;
        java.lang.Object $r7;
        java.lang.Throwable $r9;

        r0 := @this: javax.jmdns.impl.DNSCache;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: javax.jmdns.impl.constants.DNSRecordType;

        $r3 := @parameter2: javax.jmdns.impl.constants.DNSRecordClass;

        r4 = null;

        $r5 = specialinvoke r0.<javax.jmdns.impl.DNSCache: java.util.Collection _getDNSEntryList(java.lang.String)>($r1);

        if $r5 == null goto label7;

        entermonitor $r5;

     label1:
        $r6 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (javax.jmdns.impl.DNSEntry) $r7;

        $z0 = virtualinvoke r8.<javax.jmdns.impl.DNSEntry: boolean matchRecordType(javax.jmdns.impl.constants.DNSRecordType)>($r2);

        if $z0 == 0 goto label2;

        $z0 = virtualinvoke r8.<javax.jmdns.impl.DNSEntry: boolean matchRecordClass(javax.jmdns.impl.constants.DNSRecordClass)>($r3);

        if $z0 == 0 goto label2;

        r4 = r8;

     label3:
        exitmonitor $r5;

     label4:
        return r4;

     label5:
        $r9 := @caughtexception;

        exitmonitor $r5;

     label6:
        throw $r9;

     label7:
        return null;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }
    public javax.jmdns.impl.DNSEntry getDNSEntry(javax.jmdns.impl.DNSEntry)
    {
        javax.jmdns.impl.DNSCache r0;
        javax.jmdns.impl.DNSEntry $r1, r2, r7;
        java.lang.String $r3;
        java.util.Collection $r4;
        java.util.Iterator $r5;
        boolean $z0;
        java.lang.Object $r6;
        java.lang.Throwable $r8;

        r0 := @this: javax.jmdns.impl.DNSCache;

        $r1 := @parameter0: javax.jmdns.impl.DNSEntry;

        r2 = null;

        if $r1 == null goto label7;

        $r3 = virtualinvoke $r1.<javax.jmdns.impl.DNSEntry: java.lang.String getKey()>();

        $r4 = specialinvoke r0.<javax.jmdns.impl.DNSCache: java.util.Collection _getDNSEntryList(java.lang.String)>($r3);

        if $r4 == null goto label7;

        entermonitor $r4;

     label1:
        $r5 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (javax.jmdns.impl.DNSEntry) $r6;

        $z0 = virtualinvoke r7.<javax.jmdns.impl.DNSEntry: boolean isSameEntry(javax.jmdns.impl.DNSEntry)>($r1);

        if $z0 == 0 goto label2;

        r2 = r7;

     label3:
        exitmonitor $r4;

     label4:
        return r2;

     label5:
        $r8 := @caughtexception;

        exitmonitor $r4;

     label6:
        throw $r8;

     label7:
        return null;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }
    public java.util.Collection getDNSEntryList(java.lang.String)
    {
        javax.jmdns.impl.DNSCache r0;
        java.lang.String $r1;
        java.util.Collection $r2;
        java.util.ArrayList r3;
        java.lang.Throwable $r4;
        java.util.List $r5;

        r0 := @this: javax.jmdns.impl.DNSCache;

        $r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<javax.jmdns.impl.DNSCache: java.util.Collection _getDNSEntryList(java.lang.String)>($r1);

        if $r2 == null goto label7;

        entermonitor $r2;

     label1:
        r3 = new java.util.ArrayList;

        specialinvoke r3.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

     label2:
        exitmonitor $r2;

     label3:
        return r3;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor $r2;

     label6:
        throw $r4;

     label7:
        $r5 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r5;

     label8:
        $r4 := @caughtexception;

        goto label5;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label8;
        catch java.lang.Throwable from label4 to label6 with label8;
    }
    public java.util.Collection getDNSEntryList(java.lang.String, javax.jmdns.impl.constants.DNSRecordType, javax.jmdns.impl.constants.DNSRecordClass)
    {
        javax.jmdns.impl.DNSCache r0;
        java.lang.String $r1;
        javax.jmdns.impl.constants.DNSRecordType $r2;
        javax.jmdns.impl.constants.DNSRecordClass $r3;
        java.util.Collection $r4;
        java.util.ArrayList r5;
        java.util.Iterator $r6;
        boolean $z0;
        java.lang.Object $r7;
        javax.jmdns.impl.DNSEntry r8;
        java.lang.Throwable $r9;
        java.util.List $r10;

        r0 := @this: javax.jmdns.impl.DNSCache;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: javax.jmdns.impl.constants.DNSRecordType;

        $r3 := @parameter2: javax.jmdns.impl.constants.DNSRecordClass;

        $r4 = specialinvoke r0.<javax.jmdns.impl.DNSCache: java.util.Collection _getDNSEntryList(java.lang.String)>($r1);

        if $r4 == null goto label10;

        entermonitor $r4;

     label01:
        r5 = new java.util.ArrayList;

        specialinvoke r5.<java.util.ArrayList: void <init>(java.util.Collection)>($r4);

     label02:
        $r6 = interfaceinvoke r5.<java.util.Collection: java.util.Iterator iterator()>();

     label03:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (javax.jmdns.impl.DNSEntry) $r7;

        $z0 = virtualinvoke r8.<javax.jmdns.impl.DNSEntry: boolean matchRecordType(javax.jmdns.impl.constants.DNSRecordType)>($r2);

        if $z0 == 0 goto label04;

        $z0 = virtualinvoke r8.<javax.jmdns.impl.DNSEntry: boolean matchRecordClass(javax.jmdns.impl.constants.DNSRecordClass)>($r3);

        if $z0 != 0 goto label03;

     label04:
        interfaceinvoke $r6.<java.util.Iterator: void remove()>();

        goto label03;

     label05:
        $r9 := @caughtexception;

     label06:
        exitmonitor $r4;

     label07:
        throw $r9;

     label08:
        exitmonitor $r4;

     label09:
        return r5;

     label10:
        $r10 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r10;

     label11:
        $r9 := @caughtexception;

        goto label06;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label02 to label07 with label05;
        catch java.lang.Throwable from label08 to label09 with label05;
    }
    public boolean removeDNSEntry(javax.jmdns.impl.DNSEntry)
    {
        javax.jmdns.impl.DNSCache r0;
        javax.jmdns.impl.DNSEntry $r1;
        java.lang.String $r2;
        java.lang.Object $r3;
        java.util.List r4;
        java.lang.Throwable $r5;

        r0 := @this: javax.jmdns.impl.DNSCache;

        $r1 := @parameter0: javax.jmdns.impl.DNSEntry;

        if $r1 == null goto label5;

        $r2 = virtualinvoke $r1.<javax.jmdns.impl.DNSEntry: java.lang.String getKey()>();

        $r3 = virtualinvoke r0.<javax.jmdns.impl.DNSCache: java.lang.Object get(java.lang.Object)>($r2);

        r4 = (java.util.List) $r3;

        if r4 == null goto label5;

        entermonitor r4;

     label1:
        interfaceinvoke r4.<java.util.List: boolean remove(java.lang.Object)>($r1);

        exitmonitor r4;

     label2:
        return 0;

     label3:
        $r5 := @caughtexception;

        exitmonitor r4;

     label4:
        throw $r5;

     label5:
        return 0;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
    public boolean replaceDNSEntry(javax.jmdns.impl.DNSEntry, javax.jmdns.impl.DNSEntry)
    {
        javax.jmdns.impl.DNSCache r0;
        javax.jmdns.impl.DNSEntry $r1, $r2;
        java.lang.String $r3, $r4;
        boolean $z0;
        java.lang.Object $r5;
        java.util.List r6;
        java.util.ArrayList $r7;
        java.lang.Throwable $r8;

        r0 := @this: javax.jmdns.impl.DNSCache;

        $r1 := @parameter0: javax.jmdns.impl.DNSEntry;

        $r2 := @parameter1: javax.jmdns.impl.DNSEntry;

        if $r1 == null goto label6;

        if $r2 == null goto label6;

        $r3 = virtualinvoke $r1.<javax.jmdns.impl.DNSEntry: java.lang.String getKey()>();

        $r4 = virtualinvoke $r2.<javax.jmdns.impl.DNSEntry: java.lang.String getKey()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label6;

        $r3 = virtualinvoke $r1.<javax.jmdns.impl.DNSEntry: java.lang.String getKey()>();

        $r5 = virtualinvoke r0.<javax.jmdns.impl.DNSCache: java.lang.Object get(java.lang.Object)>($r3);

        r6 = (java.util.List) $r5;

        if r6 != null goto label1;

        $r3 = virtualinvoke $r1.<javax.jmdns.impl.DNSEntry: java.lang.String getKey()>();

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        virtualinvoke r0.<javax.jmdns.impl.DNSCache: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>($r3, $r7);

        $r3 = virtualinvoke $r1.<javax.jmdns.impl.DNSEntry: java.lang.String getKey()>();

        $r5 = virtualinvoke r0.<javax.jmdns.impl.DNSCache: java.lang.Object get(java.lang.Object)>($r3);

        r6 = (java.util.List) $r5;

     label1:
        entermonitor r6;

     label2:
        interfaceinvoke r6.<java.util.List: boolean remove(java.lang.Object)>($r2);

        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>($r1);

        exitmonitor r6;

     label3:
        return 1;

     label4:
        $r8 := @caughtexception;

        exitmonitor r6;

     label5:
        throw $r8;

     label6:
        return 0;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }
    public java.lang.String toString()
    {
        javax.jmdns.impl.DNSCache r0;
        java.lang.StringBuffer r1;
        java.util.Enumeration $r2;
        boolean $z0;
        java.lang.Object $r3;
        java.lang.String r4;
        java.util.List r5;
        java.util.Iterator $r6;
        javax.jmdns.impl.DNSEntry r7;
        java.lang.Throwable $r8, $r9;

        r0 := @this: javax.jmdns.impl.DNSCache;

        entermonitor r0;

     label01:
        r1 = new java.lang.StringBuffer;

        specialinvoke r1.<java.lang.StringBuffer: void <init>(int)>(2000);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\t---- cache ----");

        $r2 = virtualinvoke r0.<javax.jmdns.impl.DNSCache: java.util.Enumeration keys()>();

     label02:
        $z0 = interfaceinvoke $r2.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label11;

        $r3 = interfaceinvoke $r2.<java.util.Enumeration: java.lang.Object nextElement()>();

        r4 = (java.lang.String) $r3;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t\t");

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t\tname \'");

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' ");

        $r3 = virtualinvoke r0.<javax.jmdns.impl.DNSCache: java.lang.Object get(java.lang.Object)>(r4);

        r5 = (java.util.List) $r3;

        if r5 == null goto label10;

        $z0 = interfaceinvoke r5.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label10;

        entermonitor r5;

     label03:
        $r6 = interfaceinvoke r5.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r3 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (javax.jmdns.impl.DNSEntry) $r3;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t\t\t");

        r4 = virtualinvoke r7.<javax.jmdns.impl.DNSEntry: java.lang.String toString()>();

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        goto label04;

     label05:
        $r8 := @caughtexception;

        exitmonitor r5;

     label06:
        throw $r8;

     label07:
        $r9 := @caughtexception;

        exitmonitor r0;

        throw $r9;

     label08:
        exitmonitor r5;

     label09:
        goto label02;

     label10:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" no entries");

        goto label02;

     label11:
        r4 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();

     label12:
        exitmonitor r0;

        return r4;

        catch java.lang.Throwable from label01 to label03 with label07;
        catch java.lang.Throwable from label03 to label06 with label05;
        catch java.lang.Throwable from label06 to label07 with label07;
        catch java.lang.Throwable from label08 to label09 with label05;
        catch java.lang.Throwable from label10 to label12 with label07;
    }
