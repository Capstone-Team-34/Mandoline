javax.jmdns.impl.JmmDNSImpl$NetworkChecker extends java.util.TimerTask
private static org.slf4j.Logger logger1
private java.util.Set _knownAddresses
private final javax.jmdns.NetworkTopologyListener _mmDNS
private final javax.jmdns.NetworkTopologyDiscovery _topology
    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        org.slf4j.Logger $r2;

        $r0 = class "Ljavax/jmdns/impl/JmmDNSImpl$NetworkChecker;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.String)>($r1);

        <javax.jmdns.impl.JmmDNSImpl$NetworkChecker: org.slf4j.Logger logger1> = $r2;

        return;
    }
    public void <init>(javax.jmdns.NetworkTopologyListener, javax.jmdns.NetworkTopologyDiscovery)
    {
        javax.jmdns.impl.JmmDNSImpl$NetworkChecker r0;
        javax.jmdns.NetworkTopologyListener $r1;
        javax.jmdns.NetworkTopologyDiscovery $r2;
        java.util.Set $r3;
        java.util.HashSet $r4;

        r0 := @this: javax.jmdns.impl.JmmDNSImpl$NetworkChecker;

        $r1 := @parameter0: javax.jmdns.NetworkTopologyListener;

        $r2 := @parameter1: javax.jmdns.NetworkTopologyDiscovery;

        specialinvoke r0.<java.util.TimerTask: void <init>()>();

        r0.<javax.jmdns.impl.JmmDNSImpl$NetworkChecker: javax.jmdns.NetworkTopologyListener _mmDNS> = $r1;

        r0.<javax.jmdns.impl.JmmDNSImpl$NetworkChecker: javax.jmdns.NetworkTopologyDiscovery _topology> = $r2;

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        $r3 = staticinvoke <java.util.Collections: java.util.Set synchronizedSet(java.util.Set)>($r4);

        r0.<javax.jmdns.impl.JmmDNSImpl$NetworkChecker: java.util.Set _knownAddresses> = $r3;

        return;
    }
    public void run()
    {
        javax.jmdns.impl.JmmDNSImpl$NetworkChecker r0;
        java.util.HashSet r1;
        java.lang.Exception r2;
        int i0, i1;
        javax.jmdns.NetworkTopologyDiscovery $r3;
        java.net.InetAddress[] $r4;
        java.net.InetAddress r5;
        java.util.Set $r6;
        boolean $z0;
        javax.jmdns.impl.NetworkTopologyEventImpl r7;
        javax.jmdns.NetworkTopologyListener $r8;
        java.util.Iterator $r9;
        java.lang.Object $r10;
        org.slf4j.Logger $r11;
        java.lang.StringBuilder $r12;
        java.lang.String $r13;

        r0 := @this: javax.jmdns.impl.JmmDNSImpl$NetworkChecker;

     label01:
        $r3 = r0.<javax.jmdns.impl.JmmDNSImpl$NetworkChecker: javax.jmdns.NetworkTopologyDiscovery _topology>;

        $r4 = interfaceinvoke $r3.<javax.jmdns.NetworkTopologyDiscovery: java.net.InetAddress[] getInetAddresses()>();

     label02:
        r1 = new java.util.HashSet;

     label03:
        i0 = lengthof $r4;

        specialinvoke r1.<java.util.HashSet: void <init>(int)>(i0);

        i0 = lengthof $r4;

     label04:
        i1 = 0;

     label05:
        if i1 >= i0 goto label10;

     label06:
        r5 = $r4[i1];

        interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>(r5);

        $r6 = r0.<javax.jmdns.impl.JmmDNSImpl$NetworkChecker: java.util.Set _knownAddresses>;

        $z0 = interfaceinvoke $r6.<java.util.Set: boolean contains(java.lang.Object)>(r5);

     label07:
        if $z0 != 0 goto label09;

        r7 = new javax.jmdns.impl.NetworkTopologyEventImpl;

     label08:
        $r8 = r0.<javax.jmdns.impl.JmmDNSImpl$NetworkChecker: javax.jmdns.NetworkTopologyListener _mmDNS>;

        specialinvoke r7.<javax.jmdns.impl.NetworkTopologyEventImpl: void <init>(javax.jmdns.NetworkTopologyListener,java.net.InetAddress)>($r8, r5);

        $r8 = r0.<javax.jmdns.impl.JmmDNSImpl$NetworkChecker: javax.jmdns.NetworkTopologyListener _mmDNS>;

        interfaceinvoke $r8.<javax.jmdns.NetworkTopologyListener: void inetAddressAdded(javax.jmdns.NetworkTopologyEvent)>(r7);

     label09:
        i1 = i1 + 1;

        goto label05;

     label10:
        $r6 = r0.<javax.jmdns.impl.JmmDNSImpl$NetworkChecker: java.util.Set _knownAddresses>;

        $r9 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label11:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

     label12:
        if $z0 == 0 goto label18;

     label13:
        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.net.InetAddress) $r10;

        $z0 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>(r5);

     label14:
        if $z0 != 0 goto label11;

        r7 = new javax.jmdns.impl.NetworkTopologyEventImpl;

     label15:
        $r8 = r0.<javax.jmdns.impl.JmmDNSImpl$NetworkChecker: javax.jmdns.NetworkTopologyListener _mmDNS>;

        specialinvoke r7.<javax.jmdns.impl.NetworkTopologyEventImpl: void <init>(javax.jmdns.NetworkTopologyListener,java.net.InetAddress)>($r8, r5);

        $r8 = r0.<javax.jmdns.impl.JmmDNSImpl$NetworkChecker: javax.jmdns.NetworkTopologyListener _mmDNS>;

        interfaceinvoke $r8.<javax.jmdns.NetworkTopologyListener: void inetAddressRemoved(javax.jmdns.NetworkTopologyEvent)>(r7);

     label16:
        goto label11;

     label17:
        r2 := @caughtexception;

        $r11 = <javax.jmdns.impl.JmmDNSImpl$NetworkChecker: org.slf4j.Logger logger1>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected unhandled exception: ");

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r11.<org.slf4j.Logger: void warn(java.lang.String)>($r13);

        return;

     label18:
        r0.<javax.jmdns.impl.JmmDNSImpl$NetworkChecker: java.util.Set _knownAddresses> = r1;

     label19:
        return;

        catch java.lang.Exception from label01 to label02 with label17;
        catch java.lang.Exception from label03 to label04 with label17;
        catch java.lang.Exception from label06 to label07 with label17;
        catch java.lang.Exception from label08 to label09 with label17;
        catch java.lang.Exception from label10 to label12 with label17;
        catch java.lang.Exception from label13 to label14 with label17;
        catch java.lang.Exception from label15 to label16 with label17;
        catch java.lang.Exception from label18 to label19 with label17;
    }
    public void start(java.util.Timer)
    {
        javax.jmdns.impl.JmmDNSImpl$NetworkChecker r0;
        java.util.Timer $r1;

        r0 := @this: javax.jmdns.impl.JmmDNSImpl$NetworkChecker;

        $r1 := @parameter0: java.util.Timer;

        virtualinvoke r0.<javax.jmdns.impl.JmmDNSImpl$NetworkChecker: void run()>();

        virtualinvoke $r1.<java.util.Timer: void schedule(java.util.TimerTask,long,long)>(r0, 10000L, 10000L);

        return;
    }
