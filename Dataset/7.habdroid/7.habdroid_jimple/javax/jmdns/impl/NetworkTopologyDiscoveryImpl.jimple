javax.jmdns.impl.NetworkTopologyDiscoveryImpl extends java.lang.Object implements javax.jmdns.NetworkTopologyDiscovery
private static final org.slf4j.Logger logger
    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        org.slf4j.Logger $r2;

        $r0 = class "Ljavax/jmdns/impl/NetworkTopologyDiscoveryImpl;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.String)>($r1);

        <javax.jmdns.impl.NetworkTopologyDiscoveryImpl: org.slf4j.Logger logger> = $r2;

        return;
    }
    public void <init>()
    {
        javax.jmdns.impl.NetworkTopologyDiscoveryImpl r0;

        r0 := @this: javax.jmdns.impl.NetworkTopologyDiscoveryImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public java.net.InetAddress[] getInetAddresses()
    {
        javax.jmdns.impl.NetworkTopologyDiscoveryImpl r0;
        java.util.HashSet r1;
        java.net.SocketException r2;
        java.util.Enumeration $r3, $r6;
        boolean $z0;
        java.lang.Object $r4;
        java.net.NetworkInterface r5;
        java.net.InetAddress r7;
        org.slf4j.Logger $r8;
        java.lang.StringBuilder $r9;
        java.lang.String $r10;
        int $i0;
        java.net.InetAddress[] $r11;
        java.lang.Object[] $r12;

        r0 := @this: javax.jmdns.impl.NetworkTopologyDiscoveryImpl;

        r1 = new java.util.HashSet;

        specialinvoke r1.<java.util.HashSet: void <init>()>();

     label01:
        $r3 = staticinvoke <java.net.NetworkInterface: java.util.Enumeration getNetworkInterfaces()>();

     label02:
        $z0 = interfaceinvoke $r3.<java.util.Enumeration: boolean hasMoreElements()>();

     label03:
        if $z0 == 0 goto label19;

     label04:
        $r4 = interfaceinvoke $r3.<java.util.Enumeration: java.lang.Object nextElement()>();

     label05:
        r5 = (java.net.NetworkInterface) $r4;

     label06:
        $r6 = virtualinvoke r5.<java.net.NetworkInterface: java.util.Enumeration getInetAddresses()>();

     label07:
        $z0 = interfaceinvoke $r6.<java.util.Enumeration: boolean hasMoreElements()>();

     label08:
        if $z0 == 0 goto label02;

     label09:
        $r4 = interfaceinvoke $r6.<java.util.Enumeration: java.lang.Object nextElement()>();

     label10:
        r7 = (java.net.InetAddress) $r4;

        $r8 = <javax.jmdns.impl.NetworkTopologyDiscoveryImpl: org.slf4j.Logger logger>;

     label11:
        $z0 = interfaceinvoke $r8.<org.slf4j.Logger: boolean isTraceEnabled()>();

     label12:
        if $z0 == 0 goto label14;

        $r8 = <javax.jmdns.impl.NetworkTopologyDiscoveryImpl: org.slf4j.Logger logger>;

        $r9 = new java.lang.StringBuilder;

     label13:
        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Found NetworkInterface/InetAddress: ");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -- ");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r8.<org.slf4j.Logger: void trace(java.lang.String)>($r10);

     label14:
        $z0 = virtualinvoke r0.<javax.jmdns.impl.NetworkTopologyDiscoveryImpl: boolean useInetAddress(java.net.NetworkInterface,java.net.InetAddress)>(r5, r7);

     label15:
        if $z0 == 0 goto label07;

     label16:
        interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>(r7);

     label17:
        goto label07;

     label18:
        r2 := @caughtexception;

        $r8 = <javax.jmdns.impl.NetworkTopologyDiscoveryImpl: org.slf4j.Logger logger>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error while fetching network interfaces addresses: ");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r8.<org.slf4j.Logger: void warn(java.lang.String)>($r10);

     label19:
        $i0 = interfaceinvoke r1.<java.util.Set: int size()>();

        $r11 = newarray (java.net.InetAddress)[$i0];

        $r12 = interfaceinvoke r1.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r11);

        $r11 = (java.net.InetAddress[]) $r12;

        return $r11;

        catch java.net.SocketException from label01 to label03 with label18;
        catch java.net.SocketException from label04 to label05 with label18;
        catch java.net.SocketException from label06 to label08 with label18;
        catch java.net.SocketException from label09 to label10 with label18;
        catch java.net.SocketException from label11 to label12 with label18;
        catch java.net.SocketException from label13 to label15 with label18;
        catch java.net.SocketException from label16 to label17 with label18;
    }
    public void lockInetAddress(java.net.InetAddress)
    {
        javax.jmdns.impl.NetworkTopologyDiscoveryImpl r0;
        java.net.InetAddress $r1;

        r0 := @this: javax.jmdns.impl.NetworkTopologyDiscoveryImpl;

        $r1 := @parameter0: java.net.InetAddress;

        return;
    }
    public void unlockInetAddress(java.net.InetAddress)
    {
        javax.jmdns.impl.NetworkTopologyDiscoveryImpl r0;
        java.net.InetAddress $r1;

        r0 := @this: javax.jmdns.impl.NetworkTopologyDiscoveryImpl;

        $r1 := @parameter0: java.net.InetAddress;

        return;
    }
    public boolean useInetAddress(java.net.NetworkInterface, java.net.InetAddress)
    {
        javax.jmdns.impl.NetworkTopologyDiscoveryImpl r0;
        java.net.NetworkInterface $r1;
        java.net.InetAddress $r2;
        java.lang.Exception r3;
        boolean $z0;

        r0 := @this: javax.jmdns.impl.NetworkTopologyDiscoveryImpl;

        $r1 := @parameter0: java.net.NetworkInterface;

        $r2 := @parameter1: java.net.InetAddress;

     label1:
        $z0 = virtualinvoke $r1.<java.net.NetworkInterface: boolean isUp()>();

     label2:
        if $z0 != 0 goto label3;

        return 0;

     label3:
        $z0 = virtualinvoke $r1.<java.net.NetworkInterface: boolean supportsMulticast()>();

     label4:
        if $z0 == 0 goto label8;

     label5:
        $z0 = virtualinvoke $r1.<java.net.NetworkInterface: boolean isLoopback()>();

     label6:
        if $z0 != 0 goto label8;

        return 1;

     label7:
        r3 := @caughtexception;

     label8:
        return 0;

        catch java.lang.Exception from label1 to label2 with label7;
        catch java.lang.Exception from label3 to label4 with label7;
        catch java.lang.Exception from label5 to label6 with label7;
    }
