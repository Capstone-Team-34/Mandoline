javax.jmdns.impl.DNSRecord$Text extends javax.jmdns.impl.DNSRecord
private final byte[] _text
    public void <init>(java.lang.String, javax.jmdns.impl.constants.DNSRecordClass, boolean, int, byte[])
    {
        javax.jmdns.impl.DNSRecord$Text r0;
        java.lang.String $r1;
        javax.jmdns.impl.constants.DNSRecordClass $r2;
        boolean $z0;
        int $i0;
        javax.jmdns.impl.constants.DNSRecordType $r3;
        byte[] r4;

        r0 := @this: javax.jmdns.impl.DNSRecord$Text;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: javax.jmdns.impl.constants.DNSRecordClass;

        $z0 := @parameter2: boolean;

        $i0 := @parameter3: int;

        r4 := @parameter4: byte[];

        $r3 = <javax.jmdns.impl.constants.DNSRecordType: javax.jmdns.impl.constants.DNSRecordType TYPE_TXT>;

        specialinvoke r0.<javax.jmdns.impl.DNSRecord: void <init>(java.lang.String,javax.jmdns.impl.constants.DNSRecordType,javax.jmdns.impl.constants.DNSRecordClass,boolean,int)>($r1, $r3, $r2, $z0, $i0);

        if r4 == null goto label2;

        $i0 = lengthof r4;

        if $i0 <= 0 goto label2;

     label1:
        r0.<javax.jmdns.impl.DNSRecord$Text: byte[] _text> = r4;

        return;

     label2:
        r4 = <javax.jmdns.impl.DNSRecord$Text: byte[] EMPTY_TXT>;

        goto label1;
    }
    javax.jmdns.impl.DNSOutgoing addAnswer(javax.jmdns.impl.JmDNSImpl, javax.jmdns.impl.DNSIncoming, java.net.InetAddress, int, javax.jmdns.impl.DNSOutgoing) throws java.io.IOException
    {
        javax.jmdns.impl.DNSRecord$Text r0;
        javax.jmdns.impl.JmDNSImpl $r1;
        javax.jmdns.impl.DNSIncoming $r2;
        java.net.InetAddress $r3;
        int $i0;
        javax.jmdns.impl.DNSOutgoing $r4;

        r0 := @this: javax.jmdns.impl.DNSRecord$Text;

        $r1 := @parameter0: javax.jmdns.impl.JmDNSImpl;

        $r2 := @parameter1: javax.jmdns.impl.DNSIncoming;

        $r3 := @parameter2: java.net.InetAddress;

        $i0 := @parameter3: int;

        $r4 := @parameter4: javax.jmdns.impl.DNSOutgoing;

        return $r4;
    }
    public javax.jmdns.ServiceEvent getServiceEvent(javax.jmdns.impl.JmDNSImpl)
    {
        javax.jmdns.impl.DNSRecord$Text r0;
        javax.jmdns.impl.JmDNSImpl $r1;
        javax.jmdns.ServiceInfo $r2;
        javax.jmdns.impl.ServiceInfoImpl $r3;
        javax.jmdns.impl.ServiceEventImpl $r4;
        java.lang.String $r5, $r6;

        r0 := @this: javax.jmdns.impl.DNSRecord$Text;

        $r1 := @parameter0: javax.jmdns.impl.JmDNSImpl;

        $r2 = virtualinvoke r0.<javax.jmdns.impl.DNSRecord$Text: javax.jmdns.ServiceInfo getServiceInfo(boolean)>(0);

        $r3 = (javax.jmdns.impl.ServiceInfoImpl) $r2;

        virtualinvoke $r3.<javax.jmdns.impl.ServiceInfoImpl: void setDns(javax.jmdns.impl.JmDNSImpl)>($r1);

        $r4 = new javax.jmdns.impl.ServiceEventImpl;

        $r5 = virtualinvoke $r2.<javax.jmdns.ServiceInfo: java.lang.String getType()>();

        $r6 = virtualinvoke $r2.<javax.jmdns.ServiceInfo: java.lang.String getName()>();

        specialinvoke $r4.<javax.jmdns.impl.ServiceEventImpl: void <init>(javax.jmdns.impl.JmDNSImpl,java.lang.String,java.lang.String,javax.jmdns.ServiceInfo)>($r1, $r5, $r6, $r2);

        return $r4;
    }
    public javax.jmdns.ServiceInfo getServiceInfo(boolean)
    {
        javax.jmdns.impl.DNSRecord$Text r0;
        boolean $z0;
        javax.jmdns.impl.ServiceInfoImpl $r1;
        byte[] $r2;
        java.util.Map $r3;

        r0 := @this: javax.jmdns.impl.DNSRecord$Text;

        $z0 := @parameter0: boolean;

        $r1 = new javax.jmdns.impl.ServiceInfoImpl;

        $r3 = virtualinvoke r0.<javax.jmdns.impl.DNSRecord$Text: java.util.Map getQualifiedNameMap()>();

        $r2 = r0.<javax.jmdns.impl.DNSRecord$Text: byte[] _text>;

        specialinvoke $r1.<javax.jmdns.impl.ServiceInfoImpl: void <init>(java.util.Map,int,int,int,boolean,byte[])>($r3, 0, 0, 0, $z0, $r2);

        return $r1;
    }
    byte[] getText()
    {
        javax.jmdns.impl.DNSRecord$Text r0;
        byte[] r1;

        r0 := @this: javax.jmdns.impl.DNSRecord$Text;

        r1 = r0.<javax.jmdns.impl.DNSRecord$Text: byte[] _text>;

        return r1;
    }
    boolean handleQuery(javax.jmdns.impl.JmDNSImpl, long)
    {
        javax.jmdns.impl.DNSRecord$Text r0;
        javax.jmdns.impl.JmDNSImpl $r1;
        long $l0;

        r0 := @this: javax.jmdns.impl.DNSRecord$Text;

        $r1 := @parameter0: javax.jmdns.impl.JmDNSImpl;

        $l0 := @parameter1: long;

        return 0;
    }
    boolean handleResponse(javax.jmdns.impl.JmDNSImpl)
    {
        javax.jmdns.impl.DNSRecord$Text r0;
        javax.jmdns.impl.JmDNSImpl $r1;

        r0 := @this: javax.jmdns.impl.DNSRecord$Text;

        $r1 := @parameter0: javax.jmdns.impl.JmDNSImpl;

        return 0;
    }
    public boolean isSingleValued()
    {
        javax.jmdns.impl.DNSRecord$Text r0;

        r0 := @this: javax.jmdns.impl.DNSRecord$Text;

        return 1;
    }
    boolean sameValue(javax.jmdns.impl.DNSRecord)
    {
        javax.jmdns.impl.DNSRecord$Text r0, r2;
        javax.jmdns.impl.DNSRecord $r1;
        boolean $z0;
        byte[] $r3;
        int $i0, $i1;
        byte $b2, $b3;

        r0 := @this: javax.jmdns.impl.DNSRecord$Text;

        $r1 := @parameter0: javax.jmdns.impl.DNSRecord;

        $z0 = $r1 instanceof javax.jmdns.impl.DNSRecord$Text;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = (javax.jmdns.impl.DNSRecord$Text) $r1;

        $r3 = r0.<javax.jmdns.impl.DNSRecord$Text: byte[] _text>;

        if $r3 != null goto label2;

        $r3 = r2.<javax.jmdns.impl.DNSRecord$Text: byte[] _text>;

        if $r3 != null goto label5;

     label2:
        $r3 = r2.<javax.jmdns.impl.DNSRecord$Text: byte[] _text>;

        $i0 = lengthof $r3;

        $r3 = r0.<javax.jmdns.impl.DNSRecord$Text: byte[] _text>;

        $i1 = lengthof $r3;

        if $i0 != $i1 goto label5;

        $r3 = r0.<javax.jmdns.impl.DNSRecord$Text: byte[] _text>;

        $i0 = lengthof $r3;

     label3:
        $i1 = $i0 + -1;

        if $i0 <= 0 goto label4;

        $r3 = r2.<javax.jmdns.impl.DNSRecord$Text: byte[] _text>;

        $b2 = $r3[$i1];

        $r3 = r0.<javax.jmdns.impl.DNSRecord$Text: byte[] _text>;

        $b3 = $r3[$i1];

        if $b2 != $b3 goto label5;

        $i0 = $i1;

        goto label3;

     label4:
        return 1;

     label5:
        return 0;
    }
    protected void toString(java.lang.StringBuilder)
    {
        javax.jmdns.impl.DNSRecord$Text r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        byte[] $r2;
        int $i0;
        java.lang.String $r5;

        r0 := @this: javax.jmdns.impl.DNSRecord$Text;

        $r1 := @parameter0: java.lang.StringBuilder;

        specialinvoke r0.<javax.jmdns.impl.DNSRecord: void toString(java.lang.StringBuilder)>($r1);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" text: \'");

        $r2 = r0.<javax.jmdns.impl.DNSRecord$Text: byte[] _text>;

        $i0 = lengthof $r2;

        if $i0 <= 20 goto label2;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = new java.lang.String;

        $r2 = r0.<javax.jmdns.impl.DNSRecord$Text: byte[] _text>;

        specialinvoke $r5.<java.lang.String: void <init>(byte[],int,int)>($r2, 0, 17);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("...");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        return;

     label2:
        $r5 = new java.lang.String;

        $r2 = r0.<javax.jmdns.impl.DNSRecord$Text: byte[] _text>;

        specialinvoke $r5.<java.lang.String: void <init>(byte[])>($r2);

        goto label1;
    }
    void write(javax.jmdns.impl.DNSOutgoing$MessageOutputStream)
    {
        javax.jmdns.impl.DNSRecord$Text r0;
        javax.jmdns.impl.DNSOutgoing$MessageOutputStream $r1;
        byte[] $r2, $r3;
        int $i0;

        r0 := @this: javax.jmdns.impl.DNSRecord$Text;

        $r1 := @parameter0: javax.jmdns.impl.DNSOutgoing$MessageOutputStream;

        $r2 = r0.<javax.jmdns.impl.DNSRecord$Text: byte[] _text>;

        $r3 = r0.<javax.jmdns.impl.DNSRecord$Text: byte[] _text>;

        $i0 = lengthof $r3;

        virtualinvoke $r1.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: void writeBytes(byte[],int,int)>($r2, 0, $i0);

        return;
    }
