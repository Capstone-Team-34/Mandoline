javax.jmdns.impl.DNSTaskStarter$DNSTaskStarterImpl$StarterTimer extends java.util.Timer
private volatile boolean _cancelled
    public void <init>()
    {
        javax.jmdns.impl.DNSTaskStarter$DNSTaskStarterImpl$StarterTimer r0;

        r0 := @this: javax.jmdns.impl.DNSTaskStarter$DNSTaskStarterImpl$StarterTimer;

        specialinvoke r0.<java.util.Timer: void <init>()>();

        r0.<javax.jmdns.impl.DNSTaskStarter$DNSTaskStarterImpl$StarterTimer: boolean _cancelled> = 0;

        return;
    }
    public void <init>(java.lang.String)
    {
        javax.jmdns.impl.DNSTaskStarter$DNSTaskStarterImpl$StarterTimer r0;
        java.lang.String $r1;

        r0 := @this: javax.jmdns.impl.DNSTaskStarter$DNSTaskStarterImpl$StarterTimer;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.util.Timer: void <init>(java.lang.String)>($r1);

        r0.<javax.jmdns.impl.DNSTaskStarter$DNSTaskStarterImpl$StarterTimer: boolean _cancelled> = 0;

        return;
    }
    public void <init>(java.lang.String, boolean)
    {
        javax.jmdns.impl.DNSTaskStarter$DNSTaskStarterImpl$StarterTimer r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: javax.jmdns.impl.DNSTaskStarter$DNSTaskStarterImpl$StarterTimer;

        $r1 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        specialinvoke r0.<java.util.Timer: void <init>(java.lang.String,boolean)>($r1, $z0);

        r0.<javax.jmdns.impl.DNSTaskStarter$DNSTaskStarterImpl$StarterTimer: boolean _cancelled> = 0;

        return;
    }
    public void <init>(boolean)
    {
        javax.jmdns.impl.DNSTaskStarter$DNSTaskStarterImpl$StarterTimer r0;
        boolean $z0;

        r0 := @this: javax.jmdns.impl.DNSTaskStarter$DNSTaskStarterImpl$StarterTimer;

        $z0 := @parameter0: boolean;

        specialinvoke r0.<java.util.Timer: void <init>(boolean)>($z0);

        r0.<javax.jmdns.impl.DNSTaskStarter$DNSTaskStarterImpl$StarterTimer: boolean _cancelled> = 0;

        return;
    }
    public void cancel()
    {
        javax.jmdns.impl.DNSTaskStarter$DNSTaskStarterImpl$StarterTimer r0;
        boolean $z0;
        java.lang.Throwable $r1;

        r0 := @this: javax.jmdns.impl.DNSTaskStarter$DNSTaskStarterImpl$StarterTimer;

        entermonitor r0;

     label1:
        $z0 = r0.<javax.jmdns.impl.DNSTaskStarter$DNSTaskStarterImpl$StarterTimer: boolean _cancelled>;

     label2:
        if $z0 == 0 goto label4;

     label3:
        exitmonitor r0;

        return;

     label4:
        r0.<javax.jmdns.impl.DNSTaskStarter$DNSTaskStarterImpl$StarterTimer: boolean _cancelled> = 1;

        specialinvoke r0.<java.util.Timer: void cancel()>();

     label5:
        goto label3;

     label6:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }
    public void schedule(java.util.TimerTask, long)
    {
        javax.jmdns.impl.DNSTaskStarter$DNSTaskStarterImpl$StarterTimer r0;
        java.util.TimerTask $r1;
        long $l0;
        boolean $z0;
        java.lang.Throwable $r2;

        r0 := @this: javax.jmdns.impl.DNSTaskStarter$DNSTaskStarterImpl$StarterTimer;

        $r1 := @parameter0: java.util.TimerTask;

        $l0 := @parameter1: long;

        entermonitor r0;

     label1:
        $z0 = r0.<javax.jmdns.impl.DNSTaskStarter$DNSTaskStarterImpl$StarterTimer: boolean _cancelled>;

     label2:
        if $z0 == 0 goto label4;

     label3:
        exitmonitor r0;

        return;

     label4:
        specialinvoke r0.<java.util.Timer: void schedule(java.util.TimerTask,long)>($r1, $l0);

     label5:
        goto label3;

     label6:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }
    public void schedule(java.util.TimerTask, long, long)
    {
        javax.jmdns.impl.DNSTaskStarter$DNSTaskStarterImpl$StarterTimer r0;
        java.util.TimerTask $r1;
        long $l0, $l1;
        boolean $z0;
        java.lang.Throwable $r2;

        r0 := @this: javax.jmdns.impl.DNSTaskStarter$DNSTaskStarterImpl$StarterTimer;

        $r1 := @parameter0: java.util.TimerTask;

        $l0 := @parameter1: long;

        $l1 := @parameter2: long;

        entermonitor r0;

     label1:
        $z0 = r0.<javax.jmdns.impl.DNSTaskStarter$DNSTaskStarterImpl$StarterTimer: boolean _cancelled>;

     label2:
        if $z0 == 0 goto label4;

     label3:
        exitmonitor r0;

        return;

     label4:
        specialinvoke r0.<java.util.Timer: void schedule(java.util.TimerTask,long,long)>($r1, $l0, $l1);

     label5:
        goto label3;

     label6:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }
    public void schedule(java.util.TimerTask, java.util.Date)
    {
        javax.jmdns.impl.DNSTaskStarter$DNSTaskStarterImpl$StarterTimer r0;
        java.util.TimerTask $r1;
        java.util.Date $r2;
        boolean $z0;
        java.lang.Throwable $r3;

        r0 := @this: javax.jmdns.impl.DNSTaskStarter$DNSTaskStarterImpl$StarterTimer;

        $r1 := @parameter0: java.util.TimerTask;

        $r2 := @parameter1: java.util.Date;

        entermonitor r0;

     label1:
        $z0 = r0.<javax.jmdns.impl.DNSTaskStarter$DNSTaskStarterImpl$StarterTimer: boolean _cancelled>;

     label2:
        if $z0 == 0 goto label4;

     label3:
        exitmonitor r0;

        return;

     label4:
        specialinvoke r0.<java.util.Timer: void schedule(java.util.TimerTask,java.util.Date)>($r1, $r2);

     label5:
        goto label3;

     label6:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }
    public void schedule(java.util.TimerTask, java.util.Date, long)
    {
        javax.jmdns.impl.DNSTaskStarter$DNSTaskStarterImpl$StarterTimer r0;
        java.util.TimerTask $r1;
        java.util.Date $r2;
        long $l0;
        boolean $z0;
        java.lang.Throwable $r3;

        r0 := @this: javax.jmdns.impl.DNSTaskStarter$DNSTaskStarterImpl$StarterTimer;

        $r1 := @parameter0: java.util.TimerTask;

        $r2 := @parameter1: java.util.Date;

        $l0 := @parameter2: long;

        entermonitor r0;

     label1:
        $z0 = r0.<javax.jmdns.impl.DNSTaskStarter$DNSTaskStarterImpl$StarterTimer: boolean _cancelled>;

     label2:
        if $z0 == 0 goto label4;

     label3:
        exitmonitor r0;

        return;

     label4:
        specialinvoke r0.<java.util.Timer: void schedule(java.util.TimerTask,java.util.Date,long)>($r1, $r2, $l0);

     label5:
        goto label3;

     label6:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }
    public void scheduleAtFixedRate(java.util.TimerTask, long, long)
    {
        javax.jmdns.impl.DNSTaskStarter$DNSTaskStarterImpl$StarterTimer r0;
        java.util.TimerTask $r1;
        long $l0, $l1;
        boolean $z0;
        java.lang.Throwable $r2;

        r0 := @this: javax.jmdns.impl.DNSTaskStarter$DNSTaskStarterImpl$StarterTimer;

        $r1 := @parameter0: java.util.TimerTask;

        $l0 := @parameter1: long;

        $l1 := @parameter2: long;

        entermonitor r0;

     label1:
        $z0 = r0.<javax.jmdns.impl.DNSTaskStarter$DNSTaskStarterImpl$StarterTimer: boolean _cancelled>;

     label2:
        if $z0 == 0 goto label4;

     label3:
        exitmonitor r0;

        return;

     label4:
        specialinvoke r0.<java.util.Timer: void scheduleAtFixedRate(java.util.TimerTask,long,long)>($r1, $l0, $l1);

     label5:
        goto label3;

     label6:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }
    public void scheduleAtFixedRate(java.util.TimerTask, java.util.Date, long)
    {
        javax.jmdns.impl.DNSTaskStarter$DNSTaskStarterImpl$StarterTimer r0;
        java.util.TimerTask $r1;
        java.util.Date $r2;
        long $l0;
        boolean $z0;
        java.lang.Throwable $r3;

        r0 := @this: javax.jmdns.impl.DNSTaskStarter$DNSTaskStarterImpl$StarterTimer;

        $r1 := @parameter0: java.util.TimerTask;

        $r2 := @parameter1: java.util.Date;

        $l0 := @parameter2: long;

        entermonitor r0;

     label1:
        $z0 = r0.<javax.jmdns.impl.DNSTaskStarter$DNSTaskStarterImpl$StarterTimer: boolean _cancelled>;

     label2:
        if $z0 == 0 goto label4;

     label3:
        exitmonitor r0;

        return;

     label4:
        specialinvoke r0.<java.util.Timer: void scheduleAtFixedRate(java.util.TimerTask,java.util.Date,long)>($r1, $r2, $l0);

     label5:
        goto label3;

     label6:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }
