javax.jmdns.impl.constants.DNSRecordClass extends java.lang.Enum
private static final javax.jmdns.impl.constants.DNSRecordClass[] $VALUES
public static final enum javax.jmdns.impl.constants.DNSRecordClass CLASS_ANY
public static final enum javax.jmdns.impl.constants.DNSRecordClass CLASS_CH
public static final enum javax.jmdns.impl.constants.DNSRecordClass CLASS_CS
public static final enum javax.jmdns.impl.constants.DNSRecordClass CLASS_HS
public static final enum javax.jmdns.impl.constants.DNSRecordClass CLASS_IN
public static final int CLASS_MASK
public static final enum javax.jmdns.impl.constants.DNSRecordClass CLASS_NONE
public static final int CLASS_UNIQUE
public static final enum javax.jmdns.impl.constants.DNSRecordClass CLASS_UNKNOWN
public static final boolean NOT_UNIQUE
public static final boolean UNIQUE
private static org.slf4j.Logger logger
private final java.lang.String _externalName
private final int _index
    static void <clinit>()
    {
        javax.jmdns.impl.constants.DNSRecordClass $r0;
        javax.jmdns.impl.constants.DNSRecordClass[] $r1;
        java.lang.Class $r2;
        java.lang.String $r3;
        org.slf4j.Logger $r4;

        $r0 = new javax.jmdns.impl.constants.DNSRecordClass;

        specialinvoke $r0.<javax.jmdns.impl.constants.DNSRecordClass: void <init>(java.lang.String,int,java.lang.String,int)>("CLASS_UNKNOWN", 0, "?", 0);

        <javax.jmdns.impl.constants.DNSRecordClass: javax.jmdns.impl.constants.DNSRecordClass CLASS_UNKNOWN> = $r0;

        $r0 = new javax.jmdns.impl.constants.DNSRecordClass;

        specialinvoke $r0.<javax.jmdns.impl.constants.DNSRecordClass: void <init>(java.lang.String,int,java.lang.String,int)>("CLASS_IN", 1, "in", 1);

        <javax.jmdns.impl.constants.DNSRecordClass: javax.jmdns.impl.constants.DNSRecordClass CLASS_IN> = $r0;

        $r0 = new javax.jmdns.impl.constants.DNSRecordClass;

        specialinvoke $r0.<javax.jmdns.impl.constants.DNSRecordClass: void <init>(java.lang.String,int,java.lang.String,int)>("CLASS_CS", 2, "cs", 2);

        <javax.jmdns.impl.constants.DNSRecordClass: javax.jmdns.impl.constants.DNSRecordClass CLASS_CS> = $r0;

        $r0 = new javax.jmdns.impl.constants.DNSRecordClass;

        specialinvoke $r0.<javax.jmdns.impl.constants.DNSRecordClass: void <init>(java.lang.String,int,java.lang.String,int)>("CLASS_CH", 3, "ch", 3);

        <javax.jmdns.impl.constants.DNSRecordClass: javax.jmdns.impl.constants.DNSRecordClass CLASS_CH> = $r0;

        $r0 = new javax.jmdns.impl.constants.DNSRecordClass;

        specialinvoke $r0.<javax.jmdns.impl.constants.DNSRecordClass: void <init>(java.lang.String,int,java.lang.String,int)>("CLASS_HS", 4, "hs", 4);

        <javax.jmdns.impl.constants.DNSRecordClass: javax.jmdns.impl.constants.DNSRecordClass CLASS_HS> = $r0;

        $r0 = new javax.jmdns.impl.constants.DNSRecordClass;

        specialinvoke $r0.<javax.jmdns.impl.constants.DNSRecordClass: void <init>(java.lang.String,int,java.lang.String,int)>("CLASS_NONE", 5, "none", 254);

        <javax.jmdns.impl.constants.DNSRecordClass: javax.jmdns.impl.constants.DNSRecordClass CLASS_NONE> = $r0;

        $r0 = new javax.jmdns.impl.constants.DNSRecordClass;

        specialinvoke $r0.<javax.jmdns.impl.constants.DNSRecordClass: void <init>(java.lang.String,int,java.lang.String,int)>("CLASS_ANY", 6, "any", 255);

        <javax.jmdns.impl.constants.DNSRecordClass: javax.jmdns.impl.constants.DNSRecordClass CLASS_ANY> = $r0;

        $r1 = newarray (javax.jmdns.impl.constants.DNSRecordClass)[7];

        $r0 = <javax.jmdns.impl.constants.DNSRecordClass: javax.jmdns.impl.constants.DNSRecordClass CLASS_UNKNOWN>;

        $r1[0] = $r0;

        $r0 = <javax.jmdns.impl.constants.DNSRecordClass: javax.jmdns.impl.constants.DNSRecordClass CLASS_IN>;

        $r1[1] = $r0;

        $r0 = <javax.jmdns.impl.constants.DNSRecordClass: javax.jmdns.impl.constants.DNSRecordClass CLASS_CS>;

        $r1[2] = $r0;

        $r0 = <javax.jmdns.impl.constants.DNSRecordClass: javax.jmdns.impl.constants.DNSRecordClass CLASS_CH>;

        $r1[3] = $r0;

        $r0 = <javax.jmdns.impl.constants.DNSRecordClass: javax.jmdns.impl.constants.DNSRecordClass CLASS_HS>;

        $r1[4] = $r0;

        $r0 = <javax.jmdns.impl.constants.DNSRecordClass: javax.jmdns.impl.constants.DNSRecordClass CLASS_NONE>;

        $r1[5] = $r0;

        $r0 = <javax.jmdns.impl.constants.DNSRecordClass: javax.jmdns.impl.constants.DNSRecordClass CLASS_ANY>;

        $r1[6] = $r0;

        <javax.jmdns.impl.constants.DNSRecordClass: javax.jmdns.impl.constants.DNSRecordClass[] $VALUES> = $r1;

        $r2 = class "Ljavax/jmdns/impl/constants/DNSRecordClass;";

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r4 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.String)>($r3);

        <javax.jmdns.impl.constants.DNSRecordClass: org.slf4j.Logger logger> = $r4;

        return;
    }
    private void <init>(java.lang.String, int, java.lang.String, int)
    {
        javax.jmdns.impl.constants.DNSRecordClass r0;
        java.lang.String $r1, $r2;
        int $i0, $i1;

        r0 := @this: javax.jmdns.impl.constants.DNSRecordClass;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 := @parameter2: java.lang.String;

        $i1 := @parameter3: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0);

        r0.<javax.jmdns.impl.constants.DNSRecordClass: java.lang.String _externalName> = $r2;

        r0.<javax.jmdns.impl.constants.DNSRecordClass: int _index> = $i1;

        return;
    }
    public static javax.jmdns.impl.constants.DNSRecordClass classForIndex(int)
    {
        int $i0, i1, i2, i3, $i4;
        javax.jmdns.impl.constants.DNSRecordClass[] $r0;
        javax.jmdns.impl.constants.DNSRecordClass r1;
        org.slf4j.Logger $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;

        $i0 := @parameter0: int;

        i2 = $i0 & 32767;

        $r0 = staticinvoke <javax.jmdns.impl.constants.DNSRecordClass: javax.jmdns.impl.constants.DNSRecordClass[] values()>();

        i1 = lengthof $r0;

        i3 = 0;

     label1:
        if i3 >= i1 goto label3;

        r1 = $r0[i3];

        $i4 = r1.<javax.jmdns.impl.constants.DNSRecordClass: int _index>;

        if $i4 != i2 goto label2;

        return r1;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        $r2 = <javax.jmdns.impl.constants.DNSRecordClass: org.slf4j.Logger logger>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not find record class for index: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r2.<org.slf4j.Logger: void warn(java.lang.String)>($r4);

        r1 = <javax.jmdns.impl.constants.DNSRecordClass: javax.jmdns.impl.constants.DNSRecordClass CLASS_UNKNOWN>;

        return r1;
    }
    public static javax.jmdns.impl.constants.DNSRecordClass classForName(java.lang.String)
    {
        java.lang.String $r0, $r1, $r4;
        int i0, i1;
        javax.jmdns.impl.constants.DNSRecordClass[] $r2;
        javax.jmdns.impl.constants.DNSRecordClass r3;
        boolean $z0;
        org.slf4j.Logger $r5;
        java.lang.StringBuilder $r6;

        $r0 := @parameter0: java.lang.String;

        if $r0 == null goto label3;

        $r1 = virtualinvoke $r0.<java.lang.String: java.lang.String toLowerCase()>();

        $r2 = staticinvoke <javax.jmdns.impl.constants.DNSRecordClass: javax.jmdns.impl.constants.DNSRecordClass[] values()>();

        i0 = lengthof $r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r3 = $r2[i1];

        $r4 = r3.<javax.jmdns.impl.constants.DNSRecordClass: java.lang.String _externalName>;

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        return r3;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r5 = <javax.jmdns.impl.constants.DNSRecordClass: org.slf4j.Logger logger>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not find record class for name: ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r5.<org.slf4j.Logger: void warn(java.lang.String)>($r0);

        r3 = <javax.jmdns.impl.constants.DNSRecordClass: javax.jmdns.impl.constants.DNSRecordClass CLASS_UNKNOWN>;

        return r3;
    }
    public static javax.jmdns.impl.constants.DNSRecordClass valueOf(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.Enum $r1;
        javax.jmdns.impl.constants.DNSRecordClass $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Ljavax/jmdns/impl/constants/DNSRecordClass;", $r0);

        $r2 = (javax.jmdns.impl.constants.DNSRecordClass) $r1;

        return $r2;
    }
    public static javax.jmdns.impl.constants.DNSRecordClass[] values()
    {
        java.lang.Object $r0;
        javax.jmdns.impl.constants.DNSRecordClass[] $r1;

        $r1 = <javax.jmdns.impl.constants.DNSRecordClass: javax.jmdns.impl.constants.DNSRecordClass[] $VALUES>;

        $r0 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r1 = (javax.jmdns.impl.constants.DNSRecordClass[]) $r0;

        return $r1;
    }
    public java.lang.String externalName()
    {
        javax.jmdns.impl.constants.DNSRecordClass r0;
        java.lang.String r1;

        r0 := @this: javax.jmdns.impl.constants.DNSRecordClass;

        r1 = r0.<javax.jmdns.impl.constants.DNSRecordClass: java.lang.String _externalName>;

        return r1;
    }
    public int indexValue()
    {
        javax.jmdns.impl.constants.DNSRecordClass r0;
        int i0;

        r0 := @this: javax.jmdns.impl.constants.DNSRecordClass;

        i0 = r0.<javax.jmdns.impl.constants.DNSRecordClass: int _index>;

        return i0;
    }
    public boolean isUnique(int)
    {
        javax.jmdns.impl.constants.DNSRecordClass r0, $r1;
        int $i0;

        r0 := @this: javax.jmdns.impl.constants.DNSRecordClass;

        $i0 := @parameter0: int;

        $r1 = <javax.jmdns.impl.constants.DNSRecordClass: javax.jmdns.impl.constants.DNSRecordClass CLASS_UNKNOWN>;

        if r0 == $r1 goto label1;

        $i0 = 32768 & $i0;

        if $i0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public java.lang.String toString()
    {
        javax.jmdns.impl.constants.DNSRecordClass r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        int $i0;

        r0 := @this: javax.jmdns.impl.constants.DNSRecordClass;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r0.<javax.jmdns.impl.constants.DNSRecordClass: java.lang.String name()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" index ");

        $i0 = virtualinvoke r0.<javax.jmdns.impl.constants.DNSRecordClass: int indexValue()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
