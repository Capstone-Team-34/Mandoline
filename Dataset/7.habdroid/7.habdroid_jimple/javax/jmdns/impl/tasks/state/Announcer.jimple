javax.jmdns.impl.tasks.state.Announcer extends javax.jmdns.impl.tasks.state.DNSStateTask
static org.slf4j.Logger logger
    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        org.slf4j.Logger $r2;

        $r0 = class "Ljavax/jmdns/impl/tasks/state/Announcer;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.String)>($r1);

        <javax.jmdns.impl.tasks.state.Announcer: org.slf4j.Logger logger> = $r2;

        return;
    }
    public void <init>(javax.jmdns.impl.JmDNSImpl)
    {
        javax.jmdns.impl.tasks.state.Announcer r0;
        javax.jmdns.impl.JmDNSImpl $r1;
        int $i0;
        javax.jmdns.impl.constants.DNSState $r2;

        r0 := @this: javax.jmdns.impl.tasks.state.Announcer;

        $r1 := @parameter0: javax.jmdns.impl.JmDNSImpl;

        $i0 = staticinvoke <javax.jmdns.impl.tasks.state.Announcer: int defaultTTL()>();

        specialinvoke r0.<javax.jmdns.impl.tasks.state.DNSStateTask: void <init>(javax.jmdns.impl.JmDNSImpl,int)>($r1, $i0);

        $r2 = <javax.jmdns.impl.constants.DNSState: javax.jmdns.impl.constants.DNSState ANNOUNCING_1>;

        virtualinvoke r0.<javax.jmdns.impl.tasks.state.Announcer: void setTaskState(javax.jmdns.impl.constants.DNSState)>($r2);

        $r2 = <javax.jmdns.impl.constants.DNSState: javax.jmdns.impl.constants.DNSState ANNOUNCING_1>;

        virtualinvoke r0.<javax.jmdns.impl.tasks.state.Announcer: void associate(javax.jmdns.impl.constants.DNSState)>($r2);

        return;
    }
    protected void advanceTask()
    {
        javax.jmdns.impl.tasks.state.Announcer r0;
        javax.jmdns.impl.constants.DNSState $r1;
        boolean $z0;
        javax.jmdns.impl.JmDNSImpl $r2;

        r0 := @this: javax.jmdns.impl.tasks.state.Announcer;

        $r1 = virtualinvoke r0.<javax.jmdns.impl.tasks.state.Announcer: javax.jmdns.impl.constants.DNSState getTaskState()>();

        $r1 = virtualinvoke $r1.<javax.jmdns.impl.constants.DNSState: javax.jmdns.impl.constants.DNSState advance()>();

        virtualinvoke r0.<javax.jmdns.impl.tasks.state.Announcer: void setTaskState(javax.jmdns.impl.constants.DNSState)>($r1);

        $r1 = virtualinvoke r0.<javax.jmdns.impl.tasks.state.Announcer: javax.jmdns.impl.constants.DNSState getTaskState()>();

        $z0 = virtualinvoke $r1.<javax.jmdns.impl.constants.DNSState: boolean isAnnouncing()>();

        if $z0 != 0 goto label1;

        virtualinvoke r0.<javax.jmdns.impl.tasks.state.Announcer: boolean cancel()>();

        $r2 = virtualinvoke r0.<javax.jmdns.impl.tasks.state.Announcer: javax.jmdns.impl.JmDNSImpl getDns()>();

        virtualinvoke $r2.<javax.jmdns.impl.JmDNSImpl: void startRenewer()>();

     label1:
        return;
    }
    protected javax.jmdns.impl.DNSOutgoing buildOutgoingForDNS(javax.jmdns.impl.DNSOutgoing) throws java.io.IOException
    {
        javax.jmdns.impl.tasks.state.Announcer r0;
        javax.jmdns.impl.DNSOutgoing $r1;
        javax.jmdns.impl.constants.DNSRecordClass $r2;
        javax.jmdns.impl.JmDNSImpl $r3;
        javax.jmdns.impl.HostInfo $r4;
        int $i0;
        java.util.Collection $r5;
        java.util.Iterator $r6;
        boolean $z0;
        java.lang.Object $r7;
        javax.jmdns.impl.DNSRecord r8;

        r0 := @this: javax.jmdns.impl.tasks.state.Announcer;

        $r1 := @parameter0: javax.jmdns.impl.DNSOutgoing;

        $r3 = virtualinvoke r0.<javax.jmdns.impl.tasks.state.Announcer: javax.jmdns.impl.JmDNSImpl getDns()>();

        $r4 = virtualinvoke $r3.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.HostInfo getLocalHost()>();

        $r2 = <javax.jmdns.impl.constants.DNSRecordClass: javax.jmdns.impl.constants.DNSRecordClass CLASS_ANY>;

        $i0 = virtualinvoke r0.<javax.jmdns.impl.tasks.state.Announcer: int getTTL()>();

        $r5 = virtualinvoke $r4.<javax.jmdns.impl.HostInfo: java.util.Collection answers(javax.jmdns.impl.constants.DNSRecordClass,boolean,int)>($r2, 1, $i0);

        $r6 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (javax.jmdns.impl.DNSRecord) $r7;

        $r1 = virtualinvoke r0.<javax.jmdns.impl.tasks.state.Announcer: javax.jmdns.impl.DNSOutgoing addAnswer(javax.jmdns.impl.DNSOutgoing,javax.jmdns.impl.DNSIncoming,javax.jmdns.impl.DNSRecord)>($r1, null, r8);

        goto label1;

     label2:
        return $r1;
    }
    protected javax.jmdns.impl.DNSOutgoing buildOutgoingForInfo(javax.jmdns.impl.ServiceInfoImpl, javax.jmdns.impl.DNSOutgoing) throws java.io.IOException
    {
        javax.jmdns.impl.tasks.state.Announcer r0;
        javax.jmdns.impl.ServiceInfoImpl $r1;
        javax.jmdns.impl.DNSOutgoing $r2;
        javax.jmdns.impl.constants.DNSRecordClass $r3;
        int $i0;
        javax.jmdns.impl.JmDNSImpl $r4;
        javax.jmdns.impl.HostInfo $r5;
        java.util.Collection $r6;
        java.util.Iterator $r7;
        boolean $z0;
        java.lang.Object $r8;
        javax.jmdns.impl.DNSRecord r9;

        r0 := @this: javax.jmdns.impl.tasks.state.Announcer;

        $r1 := @parameter0: javax.jmdns.impl.ServiceInfoImpl;

        $r2 := @parameter1: javax.jmdns.impl.DNSOutgoing;

        $r3 = <javax.jmdns.impl.constants.DNSRecordClass: javax.jmdns.impl.constants.DNSRecordClass CLASS_ANY>;

        $i0 = virtualinvoke r0.<javax.jmdns.impl.tasks.state.Announcer: int getTTL()>();

        $r4 = virtualinvoke r0.<javax.jmdns.impl.tasks.state.Announcer: javax.jmdns.impl.JmDNSImpl getDns()>();

        $r5 = virtualinvoke $r4.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.HostInfo getLocalHost()>();

        $r6 = virtualinvoke $r1.<javax.jmdns.impl.ServiceInfoImpl: java.util.Collection answers(javax.jmdns.impl.constants.DNSRecordClass,boolean,int,javax.jmdns.impl.HostInfo)>($r3, 1, $i0, $r5);

        $r7 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (javax.jmdns.impl.DNSRecord) $r8;

        $r2 = virtualinvoke r0.<javax.jmdns.impl.tasks.state.Announcer: javax.jmdns.impl.DNSOutgoing addAnswer(javax.jmdns.impl.DNSOutgoing,javax.jmdns.impl.DNSIncoming,javax.jmdns.impl.DNSRecord)>($r2, null, r9);

        goto label1;

     label2:
        return $r2;
    }
    public boolean cancel()
    {
        javax.jmdns.impl.tasks.state.Announcer r0;
        boolean $z0;

        r0 := @this: javax.jmdns.impl.tasks.state.Announcer;

        virtualinvoke r0.<javax.jmdns.impl.tasks.state.Announcer: void removeAssociation()>();

        $z0 = specialinvoke r0.<javax.jmdns.impl.tasks.state.DNSStateTask: boolean cancel()>();

        return $z0;
    }
    protected boolean checkRunCondition()
    {
        javax.jmdns.impl.tasks.state.Announcer r0;
        javax.jmdns.impl.JmDNSImpl $r1;
        boolean $z0;

        r0 := @this: javax.jmdns.impl.tasks.state.Announcer;

        $r1 = virtualinvoke r0.<javax.jmdns.impl.tasks.state.Announcer: javax.jmdns.impl.JmDNSImpl getDns()>();

        $z0 = virtualinvoke $r1.<javax.jmdns.impl.JmDNSImpl: boolean isCanceling()>();

        if $z0 != 0 goto label1;

        $r1 = virtualinvoke r0.<javax.jmdns.impl.tasks.state.Announcer: javax.jmdns.impl.JmDNSImpl getDns()>();

        $z0 = virtualinvoke $r1.<javax.jmdns.impl.JmDNSImpl: boolean isCanceled()>();

        if $z0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    protected javax.jmdns.impl.DNSOutgoing createOugoing()
    {
        javax.jmdns.impl.tasks.state.Announcer r0;
        javax.jmdns.impl.DNSOutgoing $r1;

        r0 := @this: javax.jmdns.impl.tasks.state.Announcer;

        $r1 = new javax.jmdns.impl.DNSOutgoing;

        specialinvoke $r1.<javax.jmdns.impl.DNSOutgoing: void <init>(int)>(33792);

        return $r1;
    }
    public java.lang.String getName()
    {
        javax.jmdns.impl.tasks.state.Announcer r0;
        java.lang.StringBuilder $r1;
        javax.jmdns.impl.JmDNSImpl $r2;
        java.lang.String $r3;

        r0 := @this: javax.jmdns.impl.tasks.state.Announcer;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Announcer(");

        $r2 = virtualinvoke r0.<javax.jmdns.impl.tasks.state.Announcer: javax.jmdns.impl.JmDNSImpl getDns()>();

        if $r2 == null goto label2;

        $r2 = virtualinvoke r0.<javax.jmdns.impl.tasks.state.Announcer: javax.jmdns.impl.JmDNSImpl getDns()>();

        $r3 = virtualinvoke $r2.<javax.jmdns.impl.JmDNSImpl: java.lang.String getName()>();

     label1:
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;

     label2:
        $r3 = "";

        goto label1;
    }
    public java.lang.String getTaskDescription()
    {
        javax.jmdns.impl.tasks.state.Announcer r0;

        r0 := @this: javax.jmdns.impl.tasks.state.Announcer;

        return "announcing";
    }
    protected void recoverTask(java.lang.Throwable)
    {
        javax.jmdns.impl.tasks.state.Announcer r0;
        java.lang.Throwable $r1;
        javax.jmdns.impl.JmDNSImpl $r2;

        r0 := @this: javax.jmdns.impl.tasks.state.Announcer;

        $r1 := @parameter0: java.lang.Throwable;

        $r2 = virtualinvoke r0.<javax.jmdns.impl.tasks.state.Announcer: javax.jmdns.impl.JmDNSImpl getDns()>();

        virtualinvoke $r2.<javax.jmdns.impl.JmDNSImpl: void recover()>();

        return;
    }
    public void start(java.util.Timer)
    {
        javax.jmdns.impl.tasks.state.Announcer r0;
        java.util.Timer $r1;
        javax.jmdns.impl.JmDNSImpl $r2;
        boolean $z0;

        r0 := @this: javax.jmdns.impl.tasks.state.Announcer;

        $r1 := @parameter0: java.util.Timer;

        $r2 = virtualinvoke r0.<javax.jmdns.impl.tasks.state.Announcer: javax.jmdns.impl.JmDNSImpl getDns()>();

        $z0 = virtualinvoke $r2.<javax.jmdns.impl.JmDNSImpl: boolean isCanceling()>();

        if $z0 != 0 goto label1;

        $r2 = virtualinvoke r0.<javax.jmdns.impl.tasks.state.Announcer: javax.jmdns.impl.JmDNSImpl getDns()>();

        $z0 = virtualinvoke $r2.<javax.jmdns.impl.JmDNSImpl: boolean isCanceled()>();

        if $z0 != 0 goto label1;

        virtualinvoke $r1.<java.util.Timer: void schedule(java.util.TimerTask,long,long)>(r0, 1000L, 1000L);

     label1:
        return;
    }
    public java.lang.String toString()
    {
        javax.jmdns.impl.tasks.state.Announcer r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        javax.jmdns.impl.constants.DNSState $r3;

        r0 := @this: javax.jmdns.impl.tasks.state.Announcer;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = specialinvoke r0.<javax.jmdns.impl.tasks.state.DNSStateTask: java.lang.String toString()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" state: ");

        $r3 = virtualinvoke r0.<javax.jmdns.impl.tasks.state.Announcer: javax.jmdns.impl.constants.DNSState getTaskState()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
