javax.jmdns.JmDNS extends java.lang.Object implements java.io.Closeable
public static java.lang.String VERSION
    static void <clinit>()
    {
        java.lang.Exception r0;
        java.util.Properties r1;
        java.lang.Class $r2;
        java.lang.ClassLoader $r3;
        java.io.InputStream $r4;
        java.lang.String $r5;
        java.lang.Throwable $r6;

        $r2 = class "Ljavax/jmdns/JmDNS;";

     label1:
        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r4 = virtualinvoke $r3.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>("version.properties");

     label2:
        r1 = new java.util.Properties;

        specialinvoke r1.<java.util.Properties: void <init>()>();

        virtualinvoke r1.<java.util.Properties: void load(java.io.InputStream)>($r4);

        $r5 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("jmdns.version");

        <javax.jmdns.JmDNS: java.lang.String VERSION> = $r5;

     label3:
        virtualinvoke $r4.<java.io.InputStream: void close()>();

     label4:
        return;

     label5:
        $r6 := @caughtexception;

     label6:
        virtualinvoke $r4.<java.io.InputStream: void close()>();

        throw $r6;

     label7:
        r0 := @caughtexception;

        <javax.jmdns.JmDNS: java.lang.String VERSION> = "VERSION MISSING";

        return;

        catch java.lang.Exception from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Exception from label3 to label4 with label7;
        catch java.lang.Exception from label6 to label7 with label7;
    }
    public void <init>()
    {
        javax.jmdns.JmDNS r0;

        r0 := @this: javax.jmdns.JmDNS;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static javax.jmdns.JmDNS create() throws java.io.IOException
    {
        javax.jmdns.impl.JmDNSImpl $r0;

        $r0 = new javax.jmdns.impl.JmDNSImpl;

        specialinvoke $r0.<javax.jmdns.impl.JmDNSImpl: void <init>(java.net.InetAddress,java.lang.String)>(null, null);

        return $r0;
    }
    public static javax.jmdns.JmDNS create(java.lang.String) throws java.io.IOException
    {
        java.lang.String $r0;
        javax.jmdns.impl.JmDNSImpl $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 = new javax.jmdns.impl.JmDNSImpl;

        specialinvoke $r1.<javax.jmdns.impl.JmDNSImpl: void <init>(java.net.InetAddress,java.lang.String)>(null, $r0);

        return $r1;
    }
    public static javax.jmdns.JmDNS create(java.net.InetAddress) throws java.io.IOException
    {
        java.net.InetAddress $r0;
        javax.jmdns.impl.JmDNSImpl $r1;

        $r0 := @parameter0: java.net.InetAddress;

        $r1 = new javax.jmdns.impl.JmDNSImpl;

        specialinvoke $r1.<javax.jmdns.impl.JmDNSImpl: void <init>(java.net.InetAddress,java.lang.String)>($r0, null);

        return $r1;
    }
    public static javax.jmdns.JmDNS create(java.net.InetAddress, java.lang.String) throws java.io.IOException
    {
        java.net.InetAddress $r0;
        java.lang.String $r1;
        javax.jmdns.impl.JmDNSImpl $r2;

        $r0 := @parameter0: java.net.InetAddress;

        $r1 := @parameter1: java.lang.String;

        $r2 = new javax.jmdns.impl.JmDNSImpl;

        specialinvoke $r2.<javax.jmdns.impl.JmDNSImpl: void <init>(java.net.InetAddress,java.lang.String)>($r0, $r1);

        return $r2;
    }
public abstract void addServiceListener(java.lang.String, javax.jmdns.ServiceListener) { 
// no body
} 
public abstract void addServiceTypeListener(javax.jmdns.ServiceTypeListener) throws java.io.IOException { 
// no body
} 
public abstract javax.jmdns.JmDNS$Delegate getDelegate() { 
// no body
} 
public abstract java.lang.String getHostName() { 
// no body
} 
public abstract java.net.InetAddress getInetAddress() throws java.io.IOException { 
// no body
} 
public abstract java.net.InetAddress getInterface() throws java.io.IOException { 
// no body
} 
public abstract java.lang.String getName() { 
// no body
} 
public abstract javax.jmdns.ServiceInfo getServiceInfo(java.lang.String, java.lang.String) { 
// no body
} 
public abstract javax.jmdns.ServiceInfo getServiceInfo(java.lang.String, java.lang.String, long) { 
// no body
} 
public abstract javax.jmdns.ServiceInfo getServiceInfo(java.lang.String, java.lang.String, boolean) { 
// no body
} 
public abstract javax.jmdns.ServiceInfo getServiceInfo(java.lang.String, java.lang.String, boolean, long) { 
// no body
} 
public abstract javax.jmdns.ServiceInfo[] list(java.lang.String) { 
// no body
} 
public abstract javax.jmdns.ServiceInfo[] list(java.lang.String, long) { 
// no body
} 
public abstract java.util.Map listBySubtype(java.lang.String) { 
// no body
} 
public abstract java.util.Map listBySubtype(java.lang.String, long) { 
// no body
} 
public abstract void printServices() { 
// no body
} 
public abstract void registerService(javax.jmdns.ServiceInfo) throws java.io.IOException { 
// no body
} 
public abstract boolean registerServiceType(java.lang.String) { 
// no body
} 
public abstract void removeServiceListener(java.lang.String, javax.jmdns.ServiceListener) { 
// no body
} 
public abstract void removeServiceTypeListener(javax.jmdns.ServiceTypeListener) { 
// no body
} 
public abstract void requestServiceInfo(java.lang.String, java.lang.String) { 
// no body
} 
public abstract void requestServiceInfo(java.lang.String, java.lang.String, long) { 
// no body
} 
public abstract void requestServiceInfo(java.lang.String, java.lang.String, boolean) { 
// no body
} 
public abstract void requestServiceInfo(java.lang.String, java.lang.String, boolean, long) { 
// no body
} 
public abstract javax.jmdns.JmDNS$Delegate setDelegate(javax.jmdns.JmDNS$Delegate) { 
// no body
} 
public abstract void unregisterAllServices() { 
// no body
} 
public abstract void unregisterService(javax.jmdns.ServiceInfo) { 
// no body
} 
