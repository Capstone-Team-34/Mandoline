okhttp3.CacheControl extends java.lang.Object
public static final okhttp3.CacheControl FORCE_CACHE
public static final okhttp3.CacheControl FORCE_NETWORK
java.lang.String headerValue
private final boolean isPrivate
private final boolean isPublic
private final int maxAgeSeconds
private final int maxStaleSeconds
private final int minFreshSeconds
private final boolean mustRevalidate
private final boolean noCache
private final boolean noStore
private final boolean noTransform
private final boolean onlyIfCached
private final int sMaxAgeSeconds
    static void <clinit>()
    {
        java.util.concurrent.TimeUnit $r0;
        okhttp3.CacheControl$Builder $r1;
        okhttp3.CacheControl $r2;

        $r1 = new okhttp3.CacheControl$Builder;

        specialinvoke $r1.<okhttp3.CacheControl$Builder: void <init>()>();

        $r1 = virtualinvoke $r1.<okhttp3.CacheControl$Builder: okhttp3.CacheControl$Builder noCache()>();

        $r2 = virtualinvoke $r1.<okhttp3.CacheControl$Builder: okhttp3.CacheControl build()>();

        <okhttp3.CacheControl: okhttp3.CacheControl FORCE_NETWORK> = $r2;

        $r1 = new okhttp3.CacheControl$Builder;

        specialinvoke $r1.<okhttp3.CacheControl$Builder: void <init>()>();

        $r1 = virtualinvoke $r1.<okhttp3.CacheControl$Builder: okhttp3.CacheControl$Builder onlyIfCached()>();

        $r0 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $r1 = virtualinvoke $r1.<okhttp3.CacheControl$Builder: okhttp3.CacheControl$Builder maxStale(int,java.util.concurrent.TimeUnit)>(2147483647, $r0);

        $r2 = virtualinvoke $r1.<okhttp3.CacheControl$Builder: okhttp3.CacheControl build()>();

        <okhttp3.CacheControl: okhttp3.CacheControl FORCE_CACHE> = $r2;

        return;
    }
    void <init>(okhttp3.CacheControl$Builder)
    {
        okhttp3.CacheControl r0;
        okhttp3.CacheControl$Builder $r1;
        boolean $z0;
        int $i0;

        r0 := @this: okhttp3.CacheControl;

        $r1 := @parameter0: okhttp3.CacheControl$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = $r1.<okhttp3.CacheControl$Builder: boolean noCache>;

        r0.<okhttp3.CacheControl: boolean noCache> = $z0;

        $z0 = $r1.<okhttp3.CacheControl$Builder: boolean noStore>;

        r0.<okhttp3.CacheControl: boolean noStore> = $z0;

        $i0 = $r1.<okhttp3.CacheControl$Builder: int maxAgeSeconds>;

        r0.<okhttp3.CacheControl: int maxAgeSeconds> = $i0;

        r0.<okhttp3.CacheControl: int sMaxAgeSeconds> = -1;

        r0.<okhttp3.CacheControl: boolean isPrivate> = 0;

        r0.<okhttp3.CacheControl: boolean isPublic> = 0;

        r0.<okhttp3.CacheControl: boolean mustRevalidate> = 0;

        $i0 = $r1.<okhttp3.CacheControl$Builder: int maxStaleSeconds>;

        r0.<okhttp3.CacheControl: int maxStaleSeconds> = $i0;

        $i0 = $r1.<okhttp3.CacheControl$Builder: int minFreshSeconds>;

        r0.<okhttp3.CacheControl: int minFreshSeconds> = $i0;

        $z0 = $r1.<okhttp3.CacheControl$Builder: boolean onlyIfCached>;

        r0.<okhttp3.CacheControl: boolean onlyIfCached> = $z0;

        $z0 = $r1.<okhttp3.CacheControl$Builder: boolean noTransform>;

        r0.<okhttp3.CacheControl: boolean noTransform> = $z0;

        return;
    }
    private void <init>(boolean, boolean, int, int, boolean, boolean, boolean, int, int, boolean, boolean, java.lang.String)
    {
        okhttp3.CacheControl r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r1;

        r0 := @this: okhttp3.CacheControl;

        $z0 := @parameter0: boolean;

        $z1 := @parameter1: boolean;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $z2 := @parameter4: boolean;

        $z3 := @parameter5: boolean;

        $z4 := @parameter6: boolean;

        $i2 := @parameter7: int;

        $i3 := @parameter8: int;

        $z5 := @parameter9: boolean;

        $z6 := @parameter10: boolean;

        $r1 := @parameter11: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<okhttp3.CacheControl: boolean noCache> = $z0;

        r0.<okhttp3.CacheControl: boolean noStore> = $z1;

        r0.<okhttp3.CacheControl: int maxAgeSeconds> = $i0;

        r0.<okhttp3.CacheControl: int sMaxAgeSeconds> = $i1;

        r0.<okhttp3.CacheControl: boolean isPrivate> = $z2;

        r0.<okhttp3.CacheControl: boolean isPublic> = $z3;

        r0.<okhttp3.CacheControl: boolean mustRevalidate> = $z4;

        r0.<okhttp3.CacheControl: int maxStaleSeconds> = $i2;

        r0.<okhttp3.CacheControl: int minFreshSeconds> = $i3;

        r0.<okhttp3.CacheControl: boolean onlyIfCached> = $z5;

        r0.<okhttp3.CacheControl: boolean noTransform> = $z6;

        r0.<okhttp3.CacheControl: java.lang.String headerValue> = $r1;

        return;
    }
    private java.lang.String headerValue()
    {
        okhttp3.CacheControl r0;
        java.lang.StringBuilder r1, $r2;
        boolean $z0;
        int $i0, $i1;
        java.lang.String $r3;

        r0 := @this: okhttp3.CacheControl;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        $z0 = r0.<okhttp3.CacheControl: boolean noCache>;

        if $z0 == 0 goto label01;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("no-cache, ");

     label01:
        $z0 = r0.<okhttp3.CacheControl: boolean noStore>;

        if $z0 == 0 goto label02;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("no-store, ");

     label02:
        $i0 = r0.<okhttp3.CacheControl: int maxAgeSeconds>;

        if $i0 == -1 goto label03;

        $r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("max-age=");

        $i0 = r0.<okhttp3.CacheControl: int maxAgeSeconds>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label03:
        $i0 = r0.<okhttp3.CacheControl: int sMaxAgeSeconds>;

        if $i0 == -1 goto label04;

        $r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s-maxage=");

        $i0 = r0.<okhttp3.CacheControl: int sMaxAgeSeconds>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label04:
        $z0 = r0.<okhttp3.CacheControl: boolean isPrivate>;

        if $z0 == 0 goto label05;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("private, ");

     label05:
        $z0 = r0.<okhttp3.CacheControl: boolean isPublic>;

        if $z0 == 0 goto label06;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("public, ");

     label06:
        $z0 = r0.<okhttp3.CacheControl: boolean mustRevalidate>;

        if $z0 == 0 goto label07;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("must-revalidate, ");

     label07:
        $i0 = r0.<okhttp3.CacheControl: int maxStaleSeconds>;

        if $i0 == -1 goto label08;

        $r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("max-stale=");

        $i0 = r0.<okhttp3.CacheControl: int maxStaleSeconds>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label08:
        $i0 = r0.<okhttp3.CacheControl: int minFreshSeconds>;

        if $i0 == -1 goto label09;

        $r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("min-fresh=");

        $i0 = r0.<okhttp3.CacheControl: int minFreshSeconds>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label09:
        $z0 = r0.<okhttp3.CacheControl: boolean onlyIfCached>;

        if $z0 == 0 goto label10;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("only-if-cached, ");

     label10:
        $z0 = r0.<okhttp3.CacheControl: boolean noTransform>;

        if $z0 == 0 goto label11;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("no-transform, ");

     label11:
        $i0 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        if $i0 != 0 goto label12;

        return "";

     label12:
        $i0 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        $i0 = $i0 + -2;

        $i1 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>($i0, $i1);

        $r3 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }
    public static okhttp3.CacheControl parse(okhttp3.Headers)
    {
        okhttp3.Headers $r0;
        boolean z0, z1, z2, z3, z4, z5, z6, z7, $z8;
        int i0, i1, i2, i3, i4, $i5, i6, $i7, $i9;
        java.lang.String r1, $r2, $r3, r4, $r5;
        char $c8;
        okhttp3.CacheControl $r6;

        $r0 := @parameter0: okhttp3.Headers;

        z0 = 0;

        z1 = 0;

        i0 = -1;

        i1 = -1;

        z2 = 0;

        z3 = 0;

        z4 = 0;

        i2 = -1;

        i3 = -1;

        z5 = 0;

        z6 = 0;

        z7 = 1;

        r1 = null;

        i4 = 0;

        $i5 = virtualinvoke $r0.<okhttp3.Headers: int size()>();

     label01:
        if i4 >= $i5 goto label21;

        $r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>(i4);

        $r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>(i4);

        $z8 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("Cache-Control");

        if $z8 == 0 goto label07;

        if r1 == null goto label06;

        z7 = 0;

     label02:
        i6 = 0;

     label03:
        $i7 = virtualinvoke $r3.<java.lang.String: int length()>();

        if i6 >= $i7 goto label20;

        $i7 = staticinvoke <okhttp3.internal.http.HttpHeaders: int skipUntil(java.lang.String,int,java.lang.String)>($r3, i6, "=,;");

        $r2 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>(i6, $i7);

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        i6 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i7 == i6 goto label04;

        $c8 = virtualinvoke $r3.<java.lang.String: char charAt(int)>($i7);

        if $c8 == 44 goto label04;

        $c8 = virtualinvoke $r3.<java.lang.String: char charAt(int)>($i7);

        if $c8 != 59 goto label08;

     label04:
        i6 = $i7 + 1;

        r4 = null;

     label05:
        $r5 = "no-cache";

        $z8 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r2);

        if $z8 == 0 goto label10;

        z0 = 1;

        goto label03;

     label06:
        r1 = $r3;

        goto label02;

     label07:
        $z8 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("Pragma");

        if $z8 == 0 goto label20;

        z7 = 0;

        goto label02;

     label08:
        i6 = $i7 + 1;

        $i7 = staticinvoke <okhttp3.internal.http.HttpHeaders: int skipWhitespace(java.lang.String,int)>($r3, i6);

        i6 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i7 >= i6 goto label09;

        $c8 = virtualinvoke $r3.<java.lang.String: char charAt(int)>($i7);

        if $c8 != 34 goto label09;

        i6 = $i7 + 1;

        $i7 = staticinvoke <okhttp3.internal.http.HttpHeaders: int skipUntil(java.lang.String,int,java.lang.String)>($r3, i6, "\"");

        r4 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>(i6, $i7);

        i6 = $i7 + 1;

        goto label05;

     label09:
        $i9 = staticinvoke <okhttp3.internal.http.HttpHeaders: int skipUntil(java.lang.String,int,java.lang.String)>($r3, $i7, ",;");

        i6 = $i9;

        r4 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>($i7, $i9);

        r4 = virtualinvoke r4.<java.lang.String: java.lang.String trim()>();

        goto label05;

     label10:
        $r5 = "no-store";

        $z8 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r2);

        if $z8 == 0 goto label11;

        z1 = 1;

        goto label03;

     label11:
        $r5 = "max-age";

        $z8 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r2);

        if $z8 == 0 goto label12;

        i0 = staticinvoke <okhttp3.internal.http.HttpHeaders: int parseSeconds(java.lang.String,int)>(r4, -1);

        goto label03;

     label12:
        $r5 = "s-maxage";

        $z8 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r2);

        if $z8 == 0 goto label13;

        i1 = staticinvoke <okhttp3.internal.http.HttpHeaders: int parseSeconds(java.lang.String,int)>(r4, -1);

        goto label03;

     label13:
        $r5 = "private";

        $z8 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r2);

        if $z8 == 0 goto label14;

        z2 = 1;

        goto label03;

     label14:
        $r5 = "public";

        $z8 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r2);

        if $z8 == 0 goto label15;

        z3 = 1;

        goto label03;

     label15:
        $r5 = "must-revalidate";

        $z8 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r2);

        if $z8 == 0 goto label16;

        z4 = 1;

        goto label03;

     label16:
        $r5 = "max-stale";

        $z8 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r2);

        if $z8 == 0 goto label17;

        i2 = staticinvoke <okhttp3.internal.http.HttpHeaders: int parseSeconds(java.lang.String,int)>(r4, 2147483647);

        goto label03;

     label17:
        $r5 = "min-fresh";

        $z8 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r2);

        if $z8 == 0 goto label18;

        i3 = staticinvoke <okhttp3.internal.http.HttpHeaders: int parseSeconds(java.lang.String,int)>(r4, -1);

        goto label03;

     label18:
        r4 = "only-if-cached";

        $z8 = virtualinvoke r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r2);

        if $z8 == 0 goto label19;

        z5 = 1;

        goto label03;

     label19:
        r4 = "no-transform";

        $z8 = virtualinvoke r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r2);

        if $z8 == 0 goto label03;

        z6 = 1;

        goto label03;

     label20:
        i4 = i4 + 1;

        goto label01;

     label21:
        if z7 != 0 goto label22;

        r1 = null;

     label22:
        $r6 = new okhttp3.CacheControl;

        specialinvoke $r6.<okhttp3.CacheControl: void <init>(boolean,boolean,int,int,boolean,boolean,boolean,int,int,boolean,boolean,java.lang.String)>(z0, z1, i0, i1, z2, z3, z4, i2, i3, z5, z6, r1);

        return $r6;
    }
    public boolean isPrivate()
    {
        okhttp3.CacheControl r0;
        boolean z0;

        r0 := @this: okhttp3.CacheControl;

        z0 = r0.<okhttp3.CacheControl: boolean isPrivate>;

        return z0;
    }
    public boolean isPublic()
    {
        okhttp3.CacheControl r0;
        boolean z0;

        r0 := @this: okhttp3.CacheControl;

        z0 = r0.<okhttp3.CacheControl: boolean isPublic>;

        return z0;
    }
    public int maxAgeSeconds()
    {
        okhttp3.CacheControl r0;
        int i0;

        r0 := @this: okhttp3.CacheControl;

        i0 = r0.<okhttp3.CacheControl: int maxAgeSeconds>;

        return i0;
    }
    public int maxStaleSeconds()
    {
        okhttp3.CacheControl r0;
        int i0;

        r0 := @this: okhttp3.CacheControl;

        i0 = r0.<okhttp3.CacheControl: int maxStaleSeconds>;

        return i0;
    }
    public int minFreshSeconds()
    {
        okhttp3.CacheControl r0;
        int i0;

        r0 := @this: okhttp3.CacheControl;

        i0 = r0.<okhttp3.CacheControl: int minFreshSeconds>;

        return i0;
    }
    public boolean mustRevalidate()
    {
        okhttp3.CacheControl r0;
        boolean z0;

        r0 := @this: okhttp3.CacheControl;

        z0 = r0.<okhttp3.CacheControl: boolean mustRevalidate>;

        return z0;
    }
    public boolean noCache()
    {
        okhttp3.CacheControl r0;
        boolean z0;

        r0 := @this: okhttp3.CacheControl;

        z0 = r0.<okhttp3.CacheControl: boolean noCache>;

        return z0;
    }
    public boolean noStore()
    {
        okhttp3.CacheControl r0;
        boolean z0;

        r0 := @this: okhttp3.CacheControl;

        z0 = r0.<okhttp3.CacheControl: boolean noStore>;

        return z0;
    }
    public boolean noTransform()
    {
        okhttp3.CacheControl r0;
        boolean z0;

        r0 := @this: okhttp3.CacheControl;

        z0 = r0.<okhttp3.CacheControl: boolean noTransform>;

        return z0;
    }
    public boolean onlyIfCached()
    {
        okhttp3.CacheControl r0;
        boolean z0;

        r0 := @this: okhttp3.CacheControl;

        z0 = r0.<okhttp3.CacheControl: boolean onlyIfCached>;

        return z0;
    }
    public int sMaxAgeSeconds()
    {
        okhttp3.CacheControl r0;
        int i0;

        r0 := @this: okhttp3.CacheControl;

        i0 = r0.<okhttp3.CacheControl: int sMaxAgeSeconds>;

        return i0;
    }
    public java.lang.String toString()
    {
        okhttp3.CacheControl r0;
        java.lang.String $r1;

        r0 := @this: okhttp3.CacheControl;

        $r1 = r0.<okhttp3.CacheControl: java.lang.String headerValue>;

        if $r1 == null goto label1;

        return $r1;

     label1:
        $r1 = specialinvoke r0.<okhttp3.CacheControl: java.lang.String headerValue()>();

        r0.<okhttp3.CacheControl: java.lang.String headerValue> = $r1;

        return $r1;
    }
