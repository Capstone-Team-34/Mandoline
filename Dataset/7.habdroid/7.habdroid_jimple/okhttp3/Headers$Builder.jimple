okhttp3.Headers$Builder extends java.lang.Object
final java.util.List namesAndValues
    public void <init>()
    {
        okhttp3.Headers$Builder r0;
        java.util.ArrayList $r1;

        r0 := @this: okhttp3.Headers$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(20);

        r0.<okhttp3.Headers$Builder: java.util.List namesAndValues> = $r1;

        return;
    }
    private void checkNameAndValue(java.lang.String, java.lang.String)
    {
        okhttp3.Headers$Builder r0;
        java.lang.String $r1, $r2;
        java.lang.NullPointerException $r3;
        boolean $z0;
        java.lang.IllegalArgumentException $r4;
        int i0, $i1;
        char $c2;
        java.lang.Object[] $r5;
        java.lang.Integer $r6;

        r0 := @this: okhttp3.Headers$Builder;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        if $r1 != null goto label01;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("name == null");

        throw $r3;

     label01:
        $z0 = virtualinvoke $r1.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label02;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("name is empty");

        throw $r4;

     label02:
        i0 = 0;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

     label03:
        if i0 >= $i1 goto label06;

        $c2 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(i0);

        if $c2 <= 32 goto label04;

        if $c2 < 127 goto label05;

     label04:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = newarray (java.lang.Object)[3];

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($c2);

        $r5[0] = $r6;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5[1] = $r6;

        $r5[2] = $r1;

        $r1 = staticinvoke <okhttp3.internal.Util: java.lang.String format(java.lang.String,java.lang.Object[])>("Unexpected char %#04x at %d in header name: %s", $r5);

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r4;

     label05:
        i0 = i0 + 1;

        goto label03;

     label06:
        if $r2 != null goto label07;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("value == null");

        throw $r3;

     label07:
        i0 = 0;

        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

     label08:
        if i0 >= $i1 goto label12;

        $c2 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(i0);

        if $c2 > 31 goto label09;

        if $c2 != 9 goto label10;

     label09:
        if $c2 < 127 goto label11;

     label10:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = newarray (java.lang.Object)[4];

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($c2);

        $r5[0] = $r6;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5[1] = $r6;

        $r5[2] = $r1;

        $r5[3] = $r2;

        $r1 = staticinvoke <okhttp3.internal.Util: java.lang.String format(java.lang.String,java.lang.Object[])>("Unexpected char %#04x at %d in %s value: %s", $r5);

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r4;

     label11:
        i0 = i0 + 1;

        goto label08;

     label12:
        return;
    }
    public okhttp3.Headers$Builder add(java.lang.String)
    {
        okhttp3.Headers$Builder r0;
        java.lang.String $r1, $r4;
        int $i0;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3;

        r0 := @this: okhttp3.Headers$Builder;

        $r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r1.<java.lang.String: int indexOf(java.lang.String)>(":");

        if $i0 != -1 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected header: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r2;

     label1:
        $r4 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $r4 = virtualinvoke $r4.<java.lang.String: java.lang.String trim()>();

        $i0 = $i0 + 1;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i0);

        r0 = virtualinvoke r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r4, $r1);

        return r0;
    }
    public okhttp3.Headers$Builder add(java.lang.String, java.lang.String)
    {
        okhttp3.Headers$Builder r0;
        java.lang.String $r1, $r2;

        r0 := @this: okhttp3.Headers$Builder;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        specialinvoke r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2);

        r0 = virtualinvoke r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2);

        return r0;
    }
    okhttp3.Headers$Builder addLenient(java.lang.String)
    {
        okhttp3.Headers$Builder r0;
        java.lang.String $r1, $r2;
        int $i0;
        boolean $z0;

        r0 := @this: okhttp3.Headers$Builder;

        $r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r1.<java.lang.String: int indexOf(java.lang.String,int)>(":", 1);

        if $i0 == -1 goto label1;

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $i0 = $i0 + 1;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i0);

        r0 = virtualinvoke r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1);

        return r0;

     label1:
        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>(":");

        if $z0 == 0 goto label2;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>(1);

        r0 = virtualinvoke r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>("", $r1);

        return r0;

     label2:
        r0 = virtualinvoke r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>("", $r1);

        return r0;
    }
    okhttp3.Headers$Builder addLenient(java.lang.String, java.lang.String)
    {
        okhttp3.Headers$Builder r0;
        java.lang.String $r1, $r2;
        java.util.List $r3;

        r0 := @this: okhttp3.Headers$Builder;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = r0.<okhttp3.Headers$Builder: java.util.List namesAndValues>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r1);

        $r3 = r0.<okhttp3.Headers$Builder: java.util.List namesAndValues>;

        $r1 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r1);

        return r0;
    }
    public okhttp3.Headers build()
    {
        okhttp3.Headers$Builder r0;
        okhttp3.Headers $r1;

        r0 := @this: okhttp3.Headers$Builder;

        $r1 = new okhttp3.Headers;

        specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>(r0);

        return $r1;
    }
    public java.lang.String get(java.lang.String)
    {
        okhttp3.Headers$Builder r0;
        java.lang.String $r1, $r4;
        int $i0;
        java.util.List $r2;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: okhttp3.Headers$Builder;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<okhttp3.Headers$Builder: java.util.List namesAndValues>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i0 = $i0 + -2;

     label1:
        if $i0 < 0 goto label3;

        $r2 = r0.<okhttp3.Headers$Builder: java.util.List namesAndValues>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i0);

        $r4 = (java.lang.String) $r3;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r4);

        if $z0 == 0 goto label2;

        $r2 = r0.<okhttp3.Headers$Builder: java.util.List namesAndValues>;

        $i0 = $i0 + 1;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i0);

        $r1 = (java.lang.String) $r3;

        return $r1;

     label2:
        $i0 = $i0 + -2;

        goto label1;

     label3:
        return null;
    }
    public okhttp3.Headers$Builder removeAll(java.lang.String)
    {
        okhttp3.Headers$Builder r0;
        java.lang.String $r1, $r4;
        int i0, $i1;
        java.util.List $r2;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: okhttp3.Headers$Builder;

        $r1 := @parameter0: java.lang.String;

        i0 = 0;

     label1:
        $r2 = r0.<okhttp3.Headers$Builder: java.util.List namesAndValues>;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        if i0 >= $i1 goto label3;

        $r2 = r0.<okhttp3.Headers$Builder: java.util.List namesAndValues>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i0);

        $r4 = (java.lang.String) $r3;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r4);

        if $z0 == 0 goto label2;

        $r2 = r0.<okhttp3.Headers$Builder: java.util.List namesAndValues>;

        interfaceinvoke $r2.<java.util.List: java.lang.Object remove(int)>(i0);

        $r2 = r0.<okhttp3.Headers$Builder: java.util.List namesAndValues>;

        interfaceinvoke $r2.<java.util.List: java.lang.Object remove(int)>(i0);

        i0 = i0 + -2;

     label2:
        i0 = i0 + 2;

        goto label1;

     label3:
        return r0;
    }
    public okhttp3.Headers$Builder set(java.lang.String, java.lang.String)
    {
        okhttp3.Headers$Builder r0;
        java.lang.String $r1, $r2;

        r0 := @this: okhttp3.Headers$Builder;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        specialinvoke r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2);

        virtualinvoke r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1);

        virtualinvoke r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2);

        return r0;
    }
