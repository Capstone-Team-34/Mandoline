okhttp3.Response$Builder extends java.lang.Object
okhttp3.ResponseBody body
okhttp3.Response cacheResponse
int code
okhttp3.Handshake handshake
okhttp3.Headers$Builder headers
java.lang.String message
okhttp3.Response networkResponse
okhttp3.Response priorResponse
okhttp3.Protocol protocol
long receivedResponseAtMillis
okhttp3.Request request
long sentRequestAtMillis
    public void <init>()
    {
        okhttp3.Response$Builder r0;
        okhttp3.Headers$Builder $r1;

        r0 := @this: okhttp3.Response$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<okhttp3.Response$Builder: int code> = -1;

        $r1 = new okhttp3.Headers$Builder;

        specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>();

        r0.<okhttp3.Response$Builder: okhttp3.Headers$Builder headers> = $r1;

        return;
    }
    void <init>(okhttp3.Response)
    {
        okhttp3.Response$Builder r0;
        okhttp3.Response $r1, $r9;
        okhttp3.Headers$Builder $r2;
        okhttp3.Request $r3;
        okhttp3.Protocol $r4;
        int $i0;
        java.lang.String $r5;
        okhttp3.Handshake $r6;
        okhttp3.Headers $r7;
        okhttp3.ResponseBody $r8;
        long $l1;

        r0 := @this: okhttp3.Response$Builder;

        $r1 := @parameter0: okhttp3.Response;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<okhttp3.Response$Builder: int code> = -1;

        $r3 = $r1.<okhttp3.Response: okhttp3.Request request>;

        r0.<okhttp3.Response$Builder: okhttp3.Request request> = $r3;

        $r4 = $r1.<okhttp3.Response: okhttp3.Protocol protocol>;

        r0.<okhttp3.Response$Builder: okhttp3.Protocol protocol> = $r4;

        $i0 = $r1.<okhttp3.Response: int code>;

        r0.<okhttp3.Response$Builder: int code> = $i0;

        $r5 = $r1.<okhttp3.Response: java.lang.String message>;

        r0.<okhttp3.Response$Builder: java.lang.String message> = $r5;

        $r6 = $r1.<okhttp3.Response: okhttp3.Handshake handshake>;

        r0.<okhttp3.Response$Builder: okhttp3.Handshake handshake> = $r6;

        $r7 = $r1.<okhttp3.Response: okhttp3.Headers headers>;

        $r2 = virtualinvoke $r7.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>();

        r0.<okhttp3.Response$Builder: okhttp3.Headers$Builder headers> = $r2;

        $r8 = $r1.<okhttp3.Response: okhttp3.ResponseBody body>;

        r0.<okhttp3.Response$Builder: okhttp3.ResponseBody body> = $r8;

        $r9 = $r1.<okhttp3.Response: okhttp3.Response networkResponse>;

        r0.<okhttp3.Response$Builder: okhttp3.Response networkResponse> = $r9;

        $r9 = $r1.<okhttp3.Response: okhttp3.Response cacheResponse>;

        r0.<okhttp3.Response$Builder: okhttp3.Response cacheResponse> = $r9;

        $r9 = $r1.<okhttp3.Response: okhttp3.Response priorResponse>;

        r0.<okhttp3.Response$Builder: okhttp3.Response priorResponse> = $r9;

        $l1 = $r1.<okhttp3.Response: long sentRequestAtMillis>;

        r0.<okhttp3.Response$Builder: long sentRequestAtMillis> = $l1;

        $l1 = $r1.<okhttp3.Response: long receivedResponseAtMillis>;

        r0.<okhttp3.Response$Builder: long receivedResponseAtMillis> = $l1;

        return;
    }
    private void checkPriorResponse(okhttp3.Response)
    {
        okhttp3.Response$Builder r0;
        okhttp3.Response $r1;
        okhttp3.ResponseBody $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: okhttp3.Response$Builder;

        $r1 := @parameter0: okhttp3.Response;

        $r2 = $r1.<okhttp3.Response: okhttp3.ResponseBody body>;

        if $r2 == null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("priorResponse.body != null");

        throw $r3;

     label1:
        return;
    }
    private void checkSupportResponse(java.lang.String, okhttp3.Response)
    {
        okhttp3.Response$Builder r0;
        java.lang.String $r1;
        okhttp3.Response $r2, $r6;
        okhttp3.ResponseBody $r3;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5;

        r0 := @this: okhttp3.Response$Builder;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: okhttp3.Response;

        $r3 = $r2.<okhttp3.Response: okhttp3.ResponseBody body>;

        if $r3 == null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".body != null");

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r4;

     label1:
        $r6 = $r2.<okhttp3.Response: okhttp3.Response networkResponse>;

        if $r6 == null goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".networkResponse != null");

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r4;

     label2:
        $r6 = $r2.<okhttp3.Response: okhttp3.Response cacheResponse>;

        if $r6 == null goto label3;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".cacheResponse != null");

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r4;

     label3:
        $r2 = $r2.<okhttp3.Response: okhttp3.Response priorResponse>;

        if $r2 == null goto label4;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".priorResponse != null");

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r4;

     label4:
        return;
    }
    public okhttp3.Response$Builder addHeader(java.lang.String, java.lang.String)
    {
        okhttp3.Response$Builder r0;
        java.lang.String $r1, $r2;
        okhttp3.Headers$Builder $r3;

        r0 := @this: okhttp3.Response$Builder;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = r0.<okhttp3.Response$Builder: okhttp3.Headers$Builder headers>;

        virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2);

        return r0;
    }
    public okhttp3.Response$Builder body(okhttp3.ResponseBody)
    {
        okhttp3.Response$Builder r0;
        okhttp3.ResponseBody $r1;

        r0 := @this: okhttp3.Response$Builder;

        $r1 := @parameter0: okhttp3.ResponseBody;

        r0.<okhttp3.Response$Builder: okhttp3.ResponseBody body> = $r1;

        return r0;
    }
    public okhttp3.Response build()
    {
        okhttp3.Response$Builder r0;
        okhttp3.Request $r1;
        java.lang.IllegalStateException $r2;
        okhttp3.Protocol $r3;
        int $i0;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        okhttp3.Response $r6;

        r0 := @this: okhttp3.Response$Builder;

        $r1 = r0.<okhttp3.Response$Builder: okhttp3.Request request>;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("request == null");

        throw $r2;

     label1:
        $r3 = r0.<okhttp3.Response$Builder: okhttp3.Protocol protocol>;

        if $r3 != null goto label2;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("protocol == null");

        throw $r2;

     label2:
        $i0 = r0.<okhttp3.Response$Builder: int code>;

        if $i0 >= 0 goto label3;

        $r2 = new java.lang.IllegalStateException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("code < 0: ");

        $i0 = r0.<okhttp3.Response$Builder: int code>;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

        throw $r2;

     label3:
        $r6 = new okhttp3.Response;

        specialinvoke $r6.<okhttp3.Response: void <init>(okhttp3.Response$Builder)>(r0);

        return $r6;
    }
    public okhttp3.Response$Builder cacheResponse(okhttp3.Response)
    {
        okhttp3.Response$Builder r0;
        okhttp3.Response $r1;

        r0 := @this: okhttp3.Response$Builder;

        $r1 := @parameter0: okhttp3.Response;

        if $r1 == null goto label1;

        specialinvoke r0.<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>("cacheResponse", $r1);

     label1:
        r0.<okhttp3.Response$Builder: okhttp3.Response cacheResponse> = $r1;

        return r0;
    }
    public okhttp3.Response$Builder code(int)
    {
        okhttp3.Response$Builder r0;
        int $i0;

        r0 := @this: okhttp3.Response$Builder;

        $i0 := @parameter0: int;

        r0.<okhttp3.Response$Builder: int code> = $i0;

        return r0;
    }
    public okhttp3.Response$Builder handshake(okhttp3.Handshake)
    {
        okhttp3.Response$Builder r0;
        okhttp3.Handshake $r1;

        r0 := @this: okhttp3.Response$Builder;

        $r1 := @parameter0: okhttp3.Handshake;

        r0.<okhttp3.Response$Builder: okhttp3.Handshake handshake> = $r1;

        return r0;
    }
    public okhttp3.Response$Builder header(java.lang.String, java.lang.String)
    {
        okhttp3.Response$Builder r0;
        java.lang.String $r1, $r2;
        okhttp3.Headers$Builder $r3;

        r0 := @this: okhttp3.Response$Builder;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = r0.<okhttp3.Response$Builder: okhttp3.Headers$Builder headers>;

        virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2);

        return r0;
    }
    public okhttp3.Response$Builder headers(okhttp3.Headers)
    {
        okhttp3.Response$Builder r0;
        okhttp3.Headers $r1;
        okhttp3.Headers$Builder $r2;

        r0 := @this: okhttp3.Response$Builder;

        $r1 := @parameter0: okhttp3.Headers;

        $r2 = virtualinvoke $r1.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>();

        r0.<okhttp3.Response$Builder: okhttp3.Headers$Builder headers> = $r2;

        return r0;
    }
    public okhttp3.Response$Builder message(java.lang.String)
    {
        okhttp3.Response$Builder r0;
        java.lang.String $r1;

        r0 := @this: okhttp3.Response$Builder;

        $r1 := @parameter0: java.lang.String;

        r0.<okhttp3.Response$Builder: java.lang.String message> = $r1;

        return r0;
    }
    public okhttp3.Response$Builder networkResponse(okhttp3.Response)
    {
        okhttp3.Response$Builder r0;
        okhttp3.Response $r1;

        r0 := @this: okhttp3.Response$Builder;

        $r1 := @parameter0: okhttp3.Response;

        if $r1 == null goto label1;

        specialinvoke r0.<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>("networkResponse", $r1);

     label1:
        r0.<okhttp3.Response$Builder: okhttp3.Response networkResponse> = $r1;

        return r0;
    }
    public okhttp3.Response$Builder priorResponse(okhttp3.Response)
    {
        okhttp3.Response$Builder r0;
        okhttp3.Response $r1;

        r0 := @this: okhttp3.Response$Builder;

        $r1 := @parameter0: okhttp3.Response;

        if $r1 == null goto label1;

        specialinvoke r0.<okhttp3.Response$Builder: void checkPriorResponse(okhttp3.Response)>($r1);

     label1:
        r0.<okhttp3.Response$Builder: okhttp3.Response priorResponse> = $r1;

        return r0;
    }
    public okhttp3.Response$Builder protocol(okhttp3.Protocol)
    {
        okhttp3.Response$Builder r0;
        okhttp3.Protocol $r1;

        r0 := @this: okhttp3.Response$Builder;

        $r1 := @parameter0: okhttp3.Protocol;

        r0.<okhttp3.Response$Builder: okhttp3.Protocol protocol> = $r1;

        return r0;
    }
    public okhttp3.Response$Builder receivedResponseAtMillis(long)
    {
        okhttp3.Response$Builder r0;
        long $l0;

        r0 := @this: okhttp3.Response$Builder;

        $l0 := @parameter0: long;

        r0.<okhttp3.Response$Builder: long receivedResponseAtMillis> = $l0;

        return r0;
    }
    public okhttp3.Response$Builder removeHeader(java.lang.String)
    {
        okhttp3.Response$Builder r0;
        java.lang.String $r1;
        okhttp3.Headers$Builder $r2;

        r0 := @this: okhttp3.Response$Builder;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<okhttp3.Response$Builder: okhttp3.Headers$Builder headers>;

        virtualinvoke $r2.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1);

        return r0;
    }
    public okhttp3.Response$Builder request(okhttp3.Request)
    {
        okhttp3.Response$Builder r0;
        okhttp3.Request $r1;

        r0 := @this: okhttp3.Response$Builder;

        $r1 := @parameter0: okhttp3.Request;

        r0.<okhttp3.Response$Builder: okhttp3.Request request> = $r1;

        return r0;
    }
    public okhttp3.Response$Builder sentRequestAtMillis(long)
    {
        okhttp3.Response$Builder r0;
        long $l0;

        r0 := @this: okhttp3.Response$Builder;

        $l0 := @parameter0: long;

        r0.<okhttp3.Response$Builder: long sentRequestAtMillis> = $l0;

        return r0;
    }
