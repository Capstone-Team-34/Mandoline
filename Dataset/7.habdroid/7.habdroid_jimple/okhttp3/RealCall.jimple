okhttp3.RealCall extends java.lang.Object implements okhttp3.Call
final okhttp3.OkHttpClient client
private boolean executed
final boolean forWebSocket
final okhttp3.Request originalRequest
final okhttp3.internal.http.RetryAndFollowUpInterceptor retryAndFollowUpInterceptor
    void <init>(okhttp3.OkHttpClient, okhttp3.Request, boolean)
    {
        okhttp3.RealCall r0;
        okhttp3.OkHttpClient $r1;
        okhttp3.Request $r2;
        boolean $z0;
        okhttp3.internal.http.RetryAndFollowUpInterceptor $r3;

        r0 := @this: okhttp3.RealCall;

        $r1 := @parameter0: okhttp3.OkHttpClient;

        $r2 := @parameter1: okhttp3.Request;

        $z0 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<okhttp3.RealCall: okhttp3.OkHttpClient client> = $r1;

        r0.<okhttp3.RealCall: okhttp3.Request originalRequest> = $r2;

        r0.<okhttp3.RealCall: boolean forWebSocket> = $z0;

        $r3 = new okhttp3.internal.http.RetryAndFollowUpInterceptor;

        specialinvoke $r3.<okhttp3.internal.http.RetryAndFollowUpInterceptor: void <init>(okhttp3.OkHttpClient,boolean)>($r1, $z0);

        r0.<okhttp3.RealCall: okhttp3.internal.http.RetryAndFollowUpInterceptor retryAndFollowUpInterceptor> = $r3;

        return;
    }
    private void captureCallStackTrace()
    {
        okhttp3.RealCall r0;
        okhttp3.internal.platform.Platform $r1;
        java.lang.Object $r2;
        okhttp3.internal.http.RetryAndFollowUpInterceptor $r3;

        r0 := @this: okhttp3.RealCall;

        $r1 = staticinvoke <okhttp3.internal.platform.Platform: okhttp3.internal.platform.Platform get()>();

        $r2 = virtualinvoke $r1.<okhttp3.internal.platform.Platform: java.lang.Object getStackTraceForCloseable(java.lang.String)>("response.body().close()");

        $r3 = r0.<okhttp3.RealCall: okhttp3.internal.http.RetryAndFollowUpInterceptor retryAndFollowUpInterceptor>;

        virtualinvoke $r3.<okhttp3.internal.http.RetryAndFollowUpInterceptor: void setCallStackTrace(java.lang.Object)>($r2);

        return;
    }
    public void cancel()
    {
        okhttp3.RealCall r0;
        okhttp3.internal.http.RetryAndFollowUpInterceptor $r1;

        r0 := @this: okhttp3.RealCall;

        $r1 = r0.<okhttp3.RealCall: okhttp3.internal.http.RetryAndFollowUpInterceptor retryAndFollowUpInterceptor>;

        virtualinvoke $r1.<okhttp3.internal.http.RetryAndFollowUpInterceptor: void cancel()>();

        return;
    }
    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        okhttp3.RealCall r0;

        r0 := @this: okhttp3.RealCall;

        r0 = virtualinvoke r0.<okhttp3.RealCall: okhttp3.RealCall clone()>();

        return r0;
    }
    public volatile okhttp3.Call clone()
    {
        okhttp3.RealCall r0;

        r0 := @this: okhttp3.RealCall;

        r0 = virtualinvoke r0.<okhttp3.RealCall: okhttp3.RealCall clone()>();

        return r0;
    }
    public okhttp3.RealCall clone()
    {
        okhttp3.RealCall r0, $r1;
        okhttp3.OkHttpClient $r2;
        okhttp3.Request $r3;
        boolean $z0;

        r0 := @this: okhttp3.RealCall;

        $r1 = new okhttp3.RealCall;

        $r2 = r0.<okhttp3.RealCall: okhttp3.OkHttpClient client>;

        $r3 = r0.<okhttp3.RealCall: okhttp3.Request originalRequest>;

        $z0 = r0.<okhttp3.RealCall: boolean forWebSocket>;

        specialinvoke $r1.<okhttp3.RealCall: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean)>($r2, $r3, $z0);

        return $r1;
    }
    public void enqueue(okhttp3.Callback)
    {
        okhttp3.RealCall r0;
        okhttp3.Callback $r1;
        okhttp3.Dispatcher $r2;
        boolean $z0;
        java.lang.IllegalStateException $r3;
        java.lang.Throwable $r4;
        okhttp3.OkHttpClient $r5;
        okhttp3.RealCall$AsyncCall $r6;

        r0 := @this: okhttp3.RealCall;

        $r1 := @parameter0: okhttp3.Callback;

        entermonitor r0;

     label1:
        $z0 = r0.<okhttp3.RealCall: boolean executed>;

        if $z0 == 0 goto label4;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Already Executed");

        throw $r3;

     label2:
        $r4 := @caughtexception;

        exitmonitor r0;

     label3:
        throw $r4;

     label4:
        r0.<okhttp3.RealCall: boolean executed> = 1;

        exitmonitor r0;

     label5:
        specialinvoke r0.<okhttp3.RealCall: void captureCallStackTrace()>();

        $r5 = r0.<okhttp3.RealCall: okhttp3.OkHttpClient client>;

        $r2 = virtualinvoke $r5.<okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher()>();

        $r6 = new okhttp3.RealCall$AsyncCall;

        specialinvoke $r6.<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback)>(r0, $r1);

        virtualinvoke $r2.<okhttp3.Dispatcher: void enqueue(okhttp3.RealCall$AsyncCall)>($r6);

        return;

        catch java.lang.Throwable from label1 to label3 with label2;
        catch java.lang.Throwable from label4 to label5 with label2;
    }
    public okhttp3.Response execute() throws java.io.IOException
    {
        okhttp3.RealCall r0;
        boolean $z0;
        java.lang.IllegalStateException $r1;
        java.lang.Throwable $r2, $r7;
        okhttp3.OkHttpClient $r3;
        okhttp3.Dispatcher $r4;
        okhttp3.Response $r5;
        java.io.IOException $r6;

        r0 := @this: okhttp3.RealCall;

        entermonitor r0;

     label01:
        $z0 = r0.<okhttp3.RealCall: boolean executed>;

        if $z0 == 0 goto label04;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Already Executed");

        throw $r1;

     label02:
        $r2 := @caughtexception;

        exitmonitor r0;

     label03:
        throw $r2;

     label04:
        r0.<okhttp3.RealCall: boolean executed> = 1;

        exitmonitor r0;

     label05:
        specialinvoke r0.<okhttp3.RealCall: void captureCallStackTrace()>();

     label06:
        $r3 = r0.<okhttp3.RealCall: okhttp3.OkHttpClient client>;

        $r4 = virtualinvoke $r3.<okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher()>();

        virtualinvoke $r4.<okhttp3.Dispatcher: void executed(okhttp3.RealCall)>(r0);

        $r5 = virtualinvoke r0.<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain()>();

     label07:
        if $r5 != null goto label10;

     label08:
        $r6 = new java.io.IOException;

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>("Canceled");

        throw $r6;

     label09:
        $r7 := @caughtexception;

        $r3 = r0.<okhttp3.RealCall: okhttp3.OkHttpClient client>;

        $r4 = virtualinvoke $r3.<okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher()>();

        virtualinvoke $r4.<okhttp3.Dispatcher: void finished(okhttp3.RealCall)>(r0);

        throw $r7;

     label10:
        $r3 = r0.<okhttp3.RealCall: okhttp3.OkHttpClient client>;

        $r4 = virtualinvoke $r3.<okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher()>();

        virtualinvoke $r4.<okhttp3.Dispatcher: void finished(okhttp3.RealCall)>(r0);

        return $r5;

        catch java.lang.Throwable from label01 to label03 with label02;
        catch java.lang.Throwable from label04 to label05 with label02;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label08 to label09 with label09;
    }
    okhttp3.Response getResponseWithInterceptorChain() throws java.io.IOException
    {
        okhttp3.RealCall r0;
        okhttp3.internal.http.RealInterceptorChain r1;
        java.util.ArrayList r2;
        okhttp3.Request $r3;
        okhttp3.OkHttpClient $r4;
        java.util.List $r5;
        okhttp3.internal.http.RetryAndFollowUpInterceptor $r6;
        okhttp3.internal.http.BridgeInterceptor $r7;
        okhttp3.CookieJar $r8;
        okhttp3.internal.cache.CacheInterceptor $r9;
        okhttp3.internal.cache.InternalCache $r10;
        okhttp3.internal.connection.ConnectInterceptor $r11;
        boolean $z0;
        okhttp3.internal.http.CallServerInterceptor $r12;
        okhttp3.Response $r13;

        r0 := @this: okhttp3.RealCall;

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        $r4 = r0.<okhttp3.RealCall: okhttp3.OkHttpClient client>;

        $r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>();

        interfaceinvoke r2.<java.util.List: boolean addAll(java.util.Collection)>($r5);

        $r6 = r0.<okhttp3.RealCall: okhttp3.internal.http.RetryAndFollowUpInterceptor retryAndFollowUpInterceptor>;

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r6);

        $r7 = new okhttp3.internal.http.BridgeInterceptor;

        $r4 = r0.<okhttp3.RealCall: okhttp3.OkHttpClient client>;

        $r8 = virtualinvoke $r4.<okhttp3.OkHttpClient: okhttp3.CookieJar cookieJar()>();

        specialinvoke $r7.<okhttp3.internal.http.BridgeInterceptor: void <init>(okhttp3.CookieJar)>($r8);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r7);

        $r9 = new okhttp3.internal.cache.CacheInterceptor;

        $r4 = r0.<okhttp3.RealCall: okhttp3.OkHttpClient client>;

        $r10 = virtualinvoke $r4.<okhttp3.OkHttpClient: okhttp3.internal.cache.InternalCache internalCache()>();

        specialinvoke $r9.<okhttp3.internal.cache.CacheInterceptor: void <init>(okhttp3.internal.cache.InternalCache)>($r10);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r9);

        $r11 = new okhttp3.internal.connection.ConnectInterceptor;

        $r4 = r0.<okhttp3.RealCall: okhttp3.OkHttpClient client>;

        specialinvoke $r11.<okhttp3.internal.connection.ConnectInterceptor: void <init>(okhttp3.OkHttpClient)>($r4);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r11);

        $z0 = r0.<okhttp3.RealCall: boolean forWebSocket>;

        if $z0 != 0 goto label1;

        $r4 = r0.<okhttp3.RealCall: okhttp3.OkHttpClient client>;

        $r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List networkInterceptors()>();

        interfaceinvoke r2.<java.util.List: boolean addAll(java.util.Collection)>($r5);

     label1:
        $r12 = new okhttp3.internal.http.CallServerInterceptor;

        $z0 = r0.<okhttp3.RealCall: boolean forWebSocket>;

        specialinvoke $r12.<okhttp3.internal.http.CallServerInterceptor: void <init>(boolean)>($z0);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r12);

        r1 = new okhttp3.internal.http.RealInterceptorChain;

        $r3 = r0.<okhttp3.RealCall: okhttp3.Request originalRequest>;

        specialinvoke r1.<okhttp3.internal.http.RealInterceptorChain: void <init>(java.util.List,okhttp3.internal.connection.StreamAllocation,okhttp3.internal.http.HttpCodec,okhttp3.Connection,int,okhttp3.Request)>(r2, null, null, null, 0, $r3);

        $r3 = r0.<okhttp3.RealCall: okhttp3.Request originalRequest>;

        $r13 = interfaceinvoke r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r3);

        return $r13;
    }
    public boolean isCanceled()
    {
        okhttp3.RealCall r0;
        boolean $z0;
        okhttp3.internal.http.RetryAndFollowUpInterceptor $r1;

        r0 := @this: okhttp3.RealCall;

        $r1 = r0.<okhttp3.RealCall: okhttp3.internal.http.RetryAndFollowUpInterceptor retryAndFollowUpInterceptor>;

        $z0 = virtualinvoke $r1.<okhttp3.internal.http.RetryAndFollowUpInterceptor: boolean isCanceled()>();

        return $z0;
    }
    public boolean isExecuted()
    {
        okhttp3.RealCall r0;
        java.lang.Throwable $r1;
        boolean z0;

        r0 := @this: okhttp3.RealCall;

        entermonitor r0;

     label1:
        z0 = r0.<okhttp3.RealCall: boolean executed>;

     label2:
        exitmonitor r0;

        return z0;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    java.lang.String redactedUrl()
    {
        okhttp3.RealCall r0;
        okhttp3.Request $r1;
        okhttp3.HttpUrl $r2;
        java.lang.String $r3;

        r0 := @this: okhttp3.RealCall;

        $r1 = r0.<okhttp3.RealCall: okhttp3.Request originalRequest>;

        $r2 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>();

        $r3 = virtualinvoke $r2.<okhttp3.HttpUrl: java.lang.String redact()>();

        return $r3;
    }
    public okhttp3.Request request()
    {
        okhttp3.RealCall r0;
        okhttp3.Request r1;

        r0 := @this: okhttp3.RealCall;

        r1 = r0.<okhttp3.RealCall: okhttp3.Request originalRequest>;

        return r1;
    }
    okhttp3.internal.connection.StreamAllocation streamAllocation()
    {
        okhttp3.RealCall r0;
        okhttp3.internal.connection.StreamAllocation $r1;
        okhttp3.internal.http.RetryAndFollowUpInterceptor $r2;

        r0 := @this: okhttp3.RealCall;

        $r2 = r0.<okhttp3.RealCall: okhttp3.internal.http.RetryAndFollowUpInterceptor retryAndFollowUpInterceptor>;

        $r1 = virtualinvoke $r2.<okhttp3.internal.http.RetryAndFollowUpInterceptor: okhttp3.internal.connection.StreamAllocation streamAllocation()>();

        return $r1;
    }
    java.lang.String toLoggableString()
    {
        okhttp3.RealCall r0;
        java.lang.StringBuilder $r1;
        boolean $z0;
        java.lang.String $r2;

        r0 := @this: okhttp3.RealCall;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $z0 = virtualinvoke r0.<okhttp3.RealCall: boolean isCanceled()>();

        if $z0 == 0 goto label3;

        $r2 = "canceled ";

     label1:
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $z0 = r0.<okhttp3.RealCall: boolean forWebSocket>;

        if $z0 == 0 goto label4;

        $r2 = "web socket";

     label2:
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r2 = virtualinvoke r0.<okhttp3.RealCall: java.lang.String redactedUrl()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;

     label3:
        $r2 = "";

        goto label1;

     label4:
        $r2 = "call";

        goto label2;
    }
