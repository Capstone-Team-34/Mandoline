okhttp3.Cache extends java.lang.Object implements java.io.Closeable java.io.Flushable
private static final int ENTRY_BODY
private static final int ENTRY_COUNT
private static final int ENTRY_METADATA
private static final int VERSION
final okhttp3.internal.cache.DiskLruCache cache
private int hitCount
final okhttp3.internal.cache.InternalCache internalCache
private int networkCount
private int requestCount
int writeAbortCount
int writeSuccessCount
    public void <init>(java.io.File, long)
    {
        okhttp3.Cache r0;
        java.io.File $r1;
        long $l0;
        okhttp3.internal.io.FileSystem $r2;

        r0 := @this: okhttp3.Cache;

        $r1 := @parameter0: java.io.File;

        $l0 := @parameter1: long;

        $r2 = <okhttp3.internal.io.FileSystem: okhttp3.internal.io.FileSystem SYSTEM>;

        specialinvoke r0.<okhttp3.Cache: void <init>(java.io.File,long,okhttp3.internal.io.FileSystem)>($r1, $l0, $r2);

        return;
    }
    void <init>(java.io.File, long, okhttp3.internal.io.FileSystem)
    {
        okhttp3.Cache r0;
        java.io.File $r1;
        long $l0;
        okhttp3.internal.io.FileSystem $r2;
        okhttp3.internal.cache.DiskLruCache $r3;
        okhttp3.Cache$1 $r4;

        r0 := @this: okhttp3.Cache;

        $r1 := @parameter0: java.io.File;

        $l0 := @parameter1: long;

        $r2 := @parameter2: okhttp3.internal.io.FileSystem;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = new okhttp3.Cache$1;

        specialinvoke $r4.<okhttp3.Cache$1: void <init>(okhttp3.Cache)>(r0);

        r0.<okhttp3.Cache: okhttp3.internal.cache.InternalCache internalCache> = $r4;

        $r3 = staticinvoke <okhttp3.internal.cache.DiskLruCache: okhttp3.internal.cache.DiskLruCache create(okhttp3.internal.io.FileSystem,java.io.File,int,int,long)>($r2, $r1, 201105, 2, $l0);

        r0.<okhttp3.Cache: okhttp3.internal.cache.DiskLruCache cache> = $r3;

        return;
    }
    private void abortQuietly(okhttp3.internal.cache.DiskLruCache$Editor)
    {
        okhttp3.Cache r0;
        okhttp3.internal.cache.DiskLruCache$Editor $r1;
        java.io.IOException $r2;

        r0 := @this: okhttp3.Cache;

        $r1 := @parameter0: okhttp3.internal.cache.DiskLruCache$Editor;

        if $r1 == null goto label4;

     label1:
        virtualinvoke $r1.<okhttp3.internal.cache.DiskLruCache$Editor: void abort()>();

     label2:
        return;

     label3:
        $r2 := @caughtexception;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }
    public static java.lang.String key(okhttp3.HttpUrl)
    {
        okhttp3.HttpUrl $r0;
        java.lang.String $r1;
        okio.ByteString $r2;

        $r0 := @parameter0: okhttp3.HttpUrl;

        $r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String toString()>();

        $r2 = staticinvoke <okio.ByteString: okio.ByteString encodeUtf8(java.lang.String)>($r1);

        $r2 = virtualinvoke $r2.<okio.ByteString: okio.ByteString md5()>();

        $r1 = virtualinvoke $r2.<okio.ByteString: java.lang.String hex()>();

        return $r1;
    }
    static int readInt(okio.BufferedSource) throws java.io.IOException
    {
        okio.BufferedSource $r0;
        java.lang.NumberFormatException r1;
        long $l0;
        java.lang.String $r2;
        byte $b1;
        boolean $z0;
        java.io.IOException $r3;
        java.lang.StringBuilder $r4;
        int $i2;

        $r0 := @parameter0: okio.BufferedSource;

     label1:
        $l0 = interfaceinvoke $r0.<okio.BufferedSource: long readDecimalLong()>();

        $r2 = interfaceinvoke $r0.<okio.BufferedSource: java.lang.String readUtf8LineStrict()>();

     label2:
        $b1 = $l0 cmp 0L;

        if $b1 < 0 goto label5;

        $b1 = $l0 cmp 2147483647L;

        if $b1 > 0 goto label5;

     label3:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean isEmpty()>();

     label4:
        if $z0 != 0 goto label9;

     label5:
        $r3 = new java.io.IOException;

        $r4 = new java.lang.StringBuilder;

     label6:
        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected an int but was \"");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r2 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>($r2);

     label7:
        throw $r3;

     label8:
        r1 := @caughtexception;

        $r3 = new java.io.IOException;

        $r2 = virtualinvoke r1.<java.lang.NumberFormatException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>($r2);

        throw $r3;

     label9:
        $i2 = (int) $l0;

        return $i2;

        catch java.lang.NumberFormatException from label1 to label2 with label8;
        catch java.lang.NumberFormatException from label3 to label4 with label8;
        catch java.lang.NumberFormatException from label6 to label7 with label8;
    }
    public void close() throws java.io.IOException
    {
        okhttp3.Cache r0;
        okhttp3.internal.cache.DiskLruCache $r1;

        r0 := @this: okhttp3.Cache;

        $r1 = r0.<okhttp3.Cache: okhttp3.internal.cache.DiskLruCache cache>;

        virtualinvoke $r1.<okhttp3.internal.cache.DiskLruCache: void close()>();

        return;
    }
    public void delete() throws java.io.IOException
    {
        okhttp3.Cache r0;
        okhttp3.internal.cache.DiskLruCache $r1;

        r0 := @this: okhttp3.Cache;

        $r1 = r0.<okhttp3.Cache: okhttp3.internal.cache.DiskLruCache cache>;

        virtualinvoke $r1.<okhttp3.internal.cache.DiskLruCache: void delete()>();

        return;
    }
    public java.io.File directory()
    {
        okhttp3.Cache r0;
        java.io.File $r1;
        okhttp3.internal.cache.DiskLruCache $r2;

        r0 := @this: okhttp3.Cache;

        $r2 = r0.<okhttp3.Cache: okhttp3.internal.cache.DiskLruCache cache>;

        $r1 = virtualinvoke $r2.<okhttp3.internal.cache.DiskLruCache: java.io.File getDirectory()>();

        return $r1;
    }
    public void evictAll() throws java.io.IOException
    {
        okhttp3.Cache r0;
        okhttp3.internal.cache.DiskLruCache $r1;

        r0 := @this: okhttp3.Cache;

        $r1 = r0.<okhttp3.Cache: okhttp3.internal.cache.DiskLruCache cache>;

        virtualinvoke $r1.<okhttp3.internal.cache.DiskLruCache: void evictAll()>();

        return;
    }
    public void flush() throws java.io.IOException
    {
        okhttp3.Cache r0;
        okhttp3.internal.cache.DiskLruCache $r1;

        r0 := @this: okhttp3.Cache;

        $r1 = r0.<okhttp3.Cache: okhttp3.internal.cache.DiskLruCache cache>;

        virtualinvoke $r1.<okhttp3.internal.cache.DiskLruCache: void flush()>();

        return;
    }
    okhttp3.Response get(okhttp3.Request)
    {
        okhttp3.Cache r0;
        okhttp3.Request $r1;
        okhttp3.Cache$Entry r2;
        okhttp3.HttpUrl $r3;
        java.lang.String $r4;
        okhttp3.internal.cache.DiskLruCache $r5;
        okhttp3.internal.cache.DiskLruCache$Snapshot $r6;
        java.io.IOException r7, r11;
        okio.Source $r8;
        okhttp3.Response $r9;
        boolean $z0;
        okhttp3.ResponseBody $r10;

        r0 := @this: okhttp3.Cache;

        $r1 := @parameter0: okhttp3.Request;

        $r3 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>();

        $r4 = staticinvoke <okhttp3.Cache: java.lang.String key(okhttp3.HttpUrl)>($r3);

        $r5 = r0.<okhttp3.Cache: okhttp3.internal.cache.DiskLruCache cache>;

     label1:
        $r6 = virtualinvoke $r5.<okhttp3.internal.cache.DiskLruCache: okhttp3.internal.cache.DiskLruCache$Snapshot get(java.lang.String)>($r4);

     label2:
        if $r6 != null goto label4;

        return null;

     label3:
        r7 := @caughtexception;

        return null;

     label4:
        r2 = new okhttp3.Cache$Entry;

     label5:
        $r8 = virtualinvoke $r6.<okhttp3.internal.cache.DiskLruCache$Snapshot: okio.Source getSource(int)>(0);

        specialinvoke r2.<okhttp3.Cache$Entry: void <init>(okio.Source)>($r8);

     label6:
        $r9 = virtualinvoke r2.<okhttp3.Cache$Entry: okhttp3.Response response(okhttp3.internal.cache.DiskLruCache$Snapshot)>($r6);

        $z0 = virtualinvoke r2.<okhttp3.Cache$Entry: boolean matches(okhttp3.Request,okhttp3.Response)>($r1, $r9);

        if $z0 != 0 goto label8;

        $r10 = virtualinvoke $r9.<okhttp3.Response: okhttp3.ResponseBody body()>();

        staticinvoke <okhttp3.internal.Util: void closeQuietly(java.io.Closeable)>($r10);

        return null;

     label7:
        r11 := @caughtexception;

        staticinvoke <okhttp3.internal.Util: void closeQuietly(java.io.Closeable)>($r6);

        return null;

     label8:
        return $r9;

        catch java.io.IOException from label1 to label2 with label3;
        catch java.io.IOException from label5 to label6 with label7;
    }
    public int hitCount()
    {
        okhttp3.Cache r0;
        java.lang.Throwable $r1;
        int i0;

        r0 := @this: okhttp3.Cache;

        entermonitor r0;

     label1:
        i0 = r0.<okhttp3.Cache: int hitCount>;

     label2:
        exitmonitor r0;

        return i0;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public void initialize() throws java.io.IOException
    {
        okhttp3.Cache r0;
        okhttp3.internal.cache.DiskLruCache $r1;

        r0 := @this: okhttp3.Cache;

        $r1 = r0.<okhttp3.Cache: okhttp3.internal.cache.DiskLruCache cache>;

        virtualinvoke $r1.<okhttp3.internal.cache.DiskLruCache: void initialize()>();

        return;
    }
    public boolean isClosed()
    {
        okhttp3.Cache r0;
        boolean $z0;
        okhttp3.internal.cache.DiskLruCache $r1;

        r0 := @this: okhttp3.Cache;

        $r1 = r0.<okhttp3.Cache: okhttp3.internal.cache.DiskLruCache cache>;

        $z0 = virtualinvoke $r1.<okhttp3.internal.cache.DiskLruCache: boolean isClosed()>();

        return $z0;
    }
    public long maxSize()
    {
        okhttp3.Cache r0;
        long $l0;
        okhttp3.internal.cache.DiskLruCache $r1;

        r0 := @this: okhttp3.Cache;

        $r1 = r0.<okhttp3.Cache: okhttp3.internal.cache.DiskLruCache cache>;

        $l0 = virtualinvoke $r1.<okhttp3.internal.cache.DiskLruCache: long getMaxSize()>();

        return $l0;
    }
    public int networkCount()
    {
        okhttp3.Cache r0;
        java.lang.Throwable $r1;
        int i0;

        r0 := @this: okhttp3.Cache;

        entermonitor r0;

     label1:
        i0 = r0.<okhttp3.Cache: int networkCount>;

     label2:
        exitmonitor r0;

        return i0;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    okhttp3.internal.cache.CacheRequest put(okhttp3.Response)
    {
        okhttp3.Cache r0;
        okhttp3.Response $r1;
        java.io.IOException r2, $r12;
        okhttp3.Cache$Entry r3;
        okhttp3.Request $r4;
        java.lang.String $r5, $r6;
        boolean $z0;
        okhttp3.internal.cache.DiskLruCache$Editor r7, $r10;
        okhttp3.internal.cache.DiskLruCache $r8;
        okhttp3.HttpUrl $r9;
        okhttp3.Cache$CacheRequestImpl $r11;

        r0 := @this: okhttp3.Cache;

        $r1 := @parameter0: okhttp3.Response;

        $r4 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Request request()>();

        $r5 = virtualinvoke $r4.<okhttp3.Request: java.lang.String method()>();

        $r4 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Request request()>();

        $r6 = virtualinvoke $r4.<okhttp3.Request: java.lang.String method()>();

        $z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean invalidatesCache(java.lang.String)>($r6);

        if $z0 == 0 goto label03;

     label01:
        $r4 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Request request()>();

        virtualinvoke r0.<okhttp3.Cache: void remove(okhttp3.Request)>($r4);

     label02:
        return null;

     label03:
        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("GET");

        if $z0 == 0 goto label12;

        $z0 = staticinvoke <okhttp3.internal.http.HttpHeaders: boolean hasVaryAll(okhttp3.Response)>($r1);

        if $z0 != 0 goto label12;

        r3 = new okhttp3.Cache$Entry;

        specialinvoke r3.<okhttp3.Cache$Entry: void <init>(okhttp3.Response)>($r1);

        r7 = null;

        $r8 = r0.<okhttp3.Cache: okhttp3.internal.cache.DiskLruCache cache>;

     label04:
        $r4 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Request request()>();

        $r9 = virtualinvoke $r4.<okhttp3.Request: okhttp3.HttpUrl url()>();

        $r5 = staticinvoke <okhttp3.Cache: java.lang.String key(okhttp3.HttpUrl)>($r9);

        $r10 = virtualinvoke $r8.<okhttp3.internal.cache.DiskLruCache: okhttp3.internal.cache.DiskLruCache$Editor edit(java.lang.String)>($r5);

     label05:
        r7 = $r10;

        if $r10 == null goto label12;

     label06:
        virtualinvoke r3.<okhttp3.Cache$Entry: void writeTo(okhttp3.internal.cache.DiskLruCache$Editor)>($r10);

     label07:
        $r11 = new okhttp3.Cache$CacheRequestImpl;

     label08:
        specialinvoke $r11.<okhttp3.Cache$CacheRequestImpl: void <init>(okhttp3.Cache,okhttp3.internal.cache.DiskLruCache$Editor)>(r0, $r10);

     label09:
        return $r11;

     label10:
        r2 := @caughtexception;

        specialinvoke r0.<okhttp3.Cache: void abortQuietly(okhttp3.internal.cache.DiskLruCache$Editor)>(r7);

        return null;

     label11:
        $r12 := @caughtexception;

     label12:
        return null;

        catch java.io.IOException from label01 to label02 with label11;
        catch java.io.IOException from label04 to label05 with label10;
        catch java.io.IOException from label06 to label07 with label10;
        catch java.io.IOException from label08 to label09 with label10;
    }
    void remove(okhttp3.Request) throws java.io.IOException
    {
        okhttp3.Cache r0;
        okhttp3.Request $r1;
        okhttp3.internal.cache.DiskLruCache $r2;
        okhttp3.HttpUrl $r3;
        java.lang.String $r4;

        r0 := @this: okhttp3.Cache;

        $r1 := @parameter0: okhttp3.Request;

        $r2 = r0.<okhttp3.Cache: okhttp3.internal.cache.DiskLruCache cache>;

        $r3 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>();

        $r4 = staticinvoke <okhttp3.Cache: java.lang.String key(okhttp3.HttpUrl)>($r3);

        virtualinvoke $r2.<okhttp3.internal.cache.DiskLruCache: boolean remove(java.lang.String)>($r4);

        return;
    }
    public int requestCount()
    {
        okhttp3.Cache r0;
        java.lang.Throwable $r1;
        int i0;

        r0 := @this: okhttp3.Cache;

        entermonitor r0;

     label1:
        i0 = r0.<okhttp3.Cache: int requestCount>;

     label2:
        exitmonitor r0;

        return i0;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public long size() throws java.io.IOException
    {
        okhttp3.Cache r0;
        long $l0;
        okhttp3.internal.cache.DiskLruCache $r1;

        r0 := @this: okhttp3.Cache;

        $r1 = r0.<okhttp3.Cache: okhttp3.internal.cache.DiskLruCache cache>;

        $l0 = virtualinvoke $r1.<okhttp3.internal.cache.DiskLruCache: long size()>();

        return $l0;
    }
    void trackConditionalCacheHit()
    {
        okhttp3.Cache r0;
        int $i0;
        java.lang.Throwable $r1;

        r0 := @this: okhttp3.Cache;

        entermonitor r0;

     label1:
        $i0 = r0.<okhttp3.Cache: int hitCount>;

        $i0 = $i0 + 1;

        r0.<okhttp3.Cache: int hitCount> = $i0;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    void trackResponse(okhttp3.internal.cache.CacheStrategy)
    {
        okhttp3.Cache r0;
        okhttp3.internal.cache.CacheStrategy $r1;
        int $i0;
        okhttp3.Request $r2;
        okhttp3.Response $r3;
        java.lang.Throwable $r4;

        r0 := @this: okhttp3.Cache;

        $r1 := @parameter0: okhttp3.internal.cache.CacheStrategy;

        entermonitor r0;

     label1:
        $i0 = r0.<okhttp3.Cache: int requestCount>;

        $i0 = $i0 + 1;

        r0.<okhttp3.Cache: int requestCount> = $i0;

        $r2 = $r1.<okhttp3.internal.cache.CacheStrategy: okhttp3.Request networkRequest>;

        if $r2 == null goto label3;

        $i0 = r0.<okhttp3.Cache: int networkCount>;

        $i0 = $i0 + 1;

        r0.<okhttp3.Cache: int networkCount> = $i0;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 = $r1.<okhttp3.internal.cache.CacheStrategy: okhttp3.Response cacheResponse>;

        if $r3 == null goto label2;

        $i0 = r0.<okhttp3.Cache: int hitCount>;

        $i0 = $i0 + 1;

        r0.<okhttp3.Cache: int hitCount> = $i0;

     label4:
        goto label2;

     label5:
        $r4 := @caughtexception;

        exitmonitor r0;

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }
    void update(okhttp3.Response, okhttp3.Response)
    {
        okhttp3.Cache r0;
        okhttp3.Response $r1, $r2;
        java.io.IOException r3;
        okhttp3.Cache$Entry r4;
        okhttp3.internal.cache.DiskLruCache$Snapshot r5;
        okhttp3.ResponseBody $r6;
        okhttp3.Cache$CacheResponseBody $r7;
        okhttp3.internal.cache.DiskLruCache$Editor r8, $r9;

        r0 := @this: okhttp3.Cache;

        $r1 := @parameter0: okhttp3.Response;

        $r2 := @parameter1: okhttp3.Response;

        r4 = new okhttp3.Cache$Entry;

        specialinvoke r4.<okhttp3.Cache$Entry: void <init>(okhttp3.Response)>($r2);

        $r6 = virtualinvoke $r1.<okhttp3.Response: okhttp3.ResponseBody body()>();

        $r7 = (okhttp3.Cache$CacheResponseBody) $r6;

        r5 = $r7.<okhttp3.Cache$CacheResponseBody: okhttp3.internal.cache.DiskLruCache$Snapshot snapshot>;

        r8 = null;

     label1:
        $r9 = virtualinvoke r5.<okhttp3.internal.cache.DiskLruCache$Snapshot: okhttp3.internal.cache.DiskLruCache$Editor edit()>();

     label2:
        r8 = $r9;

        if $r9 == null goto label6;

     label3:
        virtualinvoke r4.<okhttp3.Cache$Entry: void writeTo(okhttp3.internal.cache.DiskLruCache$Editor)>($r9);

        virtualinvoke $r9.<okhttp3.internal.cache.DiskLruCache$Editor: void commit()>();

     label4:
        return;

     label5:
        r3 := @caughtexception;

        specialinvoke r0.<okhttp3.Cache: void abortQuietly(okhttp3.internal.cache.DiskLruCache$Editor)>(r8);

     label6:
        return;

        catch java.io.IOException from label1 to label2 with label5;
        catch java.io.IOException from label3 to label4 with label5;
    }
    public java.util.Iterator urls() throws java.io.IOException
    {
        okhttp3.Cache r0;
        okhttp3.Cache$2 $r1;

        r0 := @this: okhttp3.Cache;

        $r1 = new okhttp3.Cache$2;

        specialinvoke $r1.<okhttp3.Cache$2: void <init>(okhttp3.Cache)>(r0);

        return $r1;
    }
    public int writeAbortCount()
    {
        okhttp3.Cache r0;
        java.lang.Throwable $r1;
        int i0;

        r0 := @this: okhttp3.Cache;

        entermonitor r0;

     label1:
        i0 = r0.<okhttp3.Cache: int writeAbortCount>;

     label2:
        exitmonitor r0;

        return i0;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public int writeSuccessCount()
    {
        okhttp3.Cache r0;
        java.lang.Throwable $r1;
        int i0;

        r0 := @this: okhttp3.Cache;

        entermonitor r0;

     label1:
        i0 = r0.<okhttp3.Cache: int writeSuccessCount>;

     label2:
        exitmonitor r0;

        return i0;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
