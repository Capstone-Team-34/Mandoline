okhttp3.FormBody extends okhttp3.RequestBody
private static final okhttp3.MediaType CONTENT_TYPE
private final java.util.List encodedNames
private final java.util.List encodedValues
    static void <clinit>()
    {
        okhttp3.MediaType $r0;

        $r0 = staticinvoke <okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>("application/x-www-form-urlencoded");

        <okhttp3.FormBody: okhttp3.MediaType CONTENT_TYPE> = $r0;

        return;
    }
    void <init>(java.util.List, java.util.List)
    {
        okhttp3.FormBody r0;
        java.util.List r1, r2;

        r0 := @this: okhttp3.FormBody;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.List;

        specialinvoke r0.<okhttp3.RequestBody: void <init>()>();

        r1 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>(r1);

        r0.<okhttp3.FormBody: java.util.List encodedNames> = r1;

        r1 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>(r2);

        r0.<okhttp3.FormBody: java.util.List encodedValues> = r1;

        return;
    }
    private long writeOrCountBytes(okio.BufferedSink, boolean)
    {
        okhttp3.FormBody r0;
        okio.BufferedSink $r1;
        boolean $z0;
        okio.Buffer r2;
        int i0, $i1;
        java.util.List $r3;
        java.lang.Object $r4;
        java.lang.String $r5;
        long $l2;

        r0 := @this: okhttp3.FormBody;

        $r1 := @parameter0: okio.BufferedSink;

        $z0 := @parameter1: boolean;

        if $z0 == 0 goto label4;

        r2 = new okio.Buffer;

        specialinvoke r2.<okio.Buffer: void <init>()>();

     label1:
        i0 = 0;

        $r3 = r0.<okhttp3.FormBody: java.util.List encodedNames>;

        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

     label2:
        if i0 >= $i1 goto label5;

        if i0 <= 0 goto label3;

        virtualinvoke r2.<okio.Buffer: okio.Buffer writeByte(int)>(38);

     label3:
        $r3 = r0.<okhttp3.FormBody: java.util.List encodedNames>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i0);

        $r5 = (java.lang.String) $r4;

        virtualinvoke r2.<okio.Buffer: okio.Buffer writeUtf8(java.lang.String)>($r5);

        virtualinvoke r2.<okio.Buffer: okio.Buffer writeByte(int)>(61);

        $r3 = r0.<okhttp3.FormBody: java.util.List encodedValues>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i0);

        $r5 = (java.lang.String) $r4;

        virtualinvoke r2.<okio.Buffer: okio.Buffer writeUtf8(java.lang.String)>($r5);

        i0 = i0 + 1;

        goto label2;

     label4:
        r2 = interfaceinvoke $r1.<okio.BufferedSink: okio.Buffer buffer()>();

        goto label1;

     label5:
        if $z0 == 0 goto label6;

        $l2 = virtualinvoke r2.<okio.Buffer: long size()>();

        virtualinvoke r2.<okio.Buffer: void clear()>();

        return $l2;

     label6:
        return 0L;
    }
    public long contentLength()
    {
        okhttp3.FormBody r0;
        long $l0;

        r0 := @this: okhttp3.FormBody;

        $l0 = specialinvoke r0.<okhttp3.FormBody: long writeOrCountBytes(okio.BufferedSink,boolean)>(null, 1);

        return $l0;
    }
    public okhttp3.MediaType contentType()
    {
        okhttp3.FormBody r0;
        okhttp3.MediaType r1;

        r0 := @this: okhttp3.FormBody;

        r1 = <okhttp3.FormBody: okhttp3.MediaType CONTENT_TYPE>;

        return r1;
    }
    public java.lang.String encodedName(int)
    {
        okhttp3.FormBody r0;
        int $i0;
        java.lang.Object $r1;
        java.util.List $r2;
        java.lang.String $r3;

        r0 := @this: okhttp3.FormBody;

        $i0 := @parameter0: int;

        $r2 = r0.<okhttp3.FormBody: java.util.List encodedNames>;

        $r1 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i0);

        $r3 = (java.lang.String) $r1;

        return $r3;
    }
    public java.lang.String encodedValue(int)
    {
        okhttp3.FormBody r0;
        int $i0;
        java.lang.Object $r1;
        java.util.List $r2;
        java.lang.String $r3;

        r0 := @this: okhttp3.FormBody;

        $i0 := @parameter0: int;

        $r2 = r0.<okhttp3.FormBody: java.util.List encodedValues>;

        $r1 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i0);

        $r3 = (java.lang.String) $r1;

        return $r3;
    }
    public java.lang.String name(int)
    {
        okhttp3.FormBody r0;
        int $i0;
        java.lang.String $r1;

        r0 := @this: okhttp3.FormBody;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<okhttp3.FormBody: java.lang.String encodedName(int)>($i0);

        $r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r1, 1);

        return $r1;
    }
    public int size()
    {
        okhttp3.FormBody r0;
        int $i0;
        java.util.List $r1;

        r0 := @this: okhttp3.FormBody;

        $r1 = r0.<okhttp3.FormBody: java.util.List encodedNames>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }
    public java.lang.String value(int)
    {
        okhttp3.FormBody r0;
        int $i0;
        java.lang.String $r1;

        r0 := @this: okhttp3.FormBody;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<okhttp3.FormBody: java.lang.String encodedValue(int)>($i0);

        $r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r1, 1);

        return $r1;
    }
    public void writeTo(okio.BufferedSink) throws java.io.IOException
    {
        okhttp3.FormBody r0;
        okio.BufferedSink $r1;

        r0 := @this: okhttp3.FormBody;

        $r1 := @parameter0: okio.BufferedSink;

        specialinvoke r0.<okhttp3.FormBody: long writeOrCountBytes(okio.BufferedSink,boolean)>($r1, 0);

        return;
    }
