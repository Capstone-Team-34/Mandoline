okhttp3.RealCall$AsyncCall extends okhttp3.internal.NamedRunnable
private final okhttp3.Callback responseCallback
final okhttp3.RealCall this$0
    void <init>(okhttp3.RealCall, okhttp3.Callback)
    {
        okhttp3.RealCall$AsyncCall r0;
        okhttp3.RealCall $r1;
        okhttp3.Callback $r2;
        java.lang.String $r3;
        java.lang.Object[] $r4;

        r0 := @this: okhttp3.RealCall$AsyncCall;

        $r1 := @parameter0: okhttp3.RealCall;

        $r2 := @parameter1: okhttp3.Callback;

        r0.<okhttp3.RealCall$AsyncCall: okhttp3.RealCall this$0> = $r1;

        $r4 = newarray (java.lang.Object)[1];

        $r3 = virtualinvoke $r1.<okhttp3.RealCall: java.lang.String redactedUrl()>();

        $r4[0] = $r3;

        specialinvoke r0.<okhttp3.internal.NamedRunnable: void <init>(java.lang.String,java.lang.Object[])>("OkHttp %s", $r4);

        r0.<okhttp3.RealCall$AsyncCall: okhttp3.Callback responseCallback> = $r2;

        return;
    }
    protected void execute()
    {
        okhttp3.RealCall$AsyncCall r0;
        java.io.IOException r1;
        boolean z0, $z1;
        okhttp3.RealCall $r2;
        okhttp3.Response $r3;
        okhttp3.internal.http.RetryAndFollowUpInterceptor $r4;
        okhttp3.Callback $r5;
        okhttp3.OkHttpClient $r6;
        okhttp3.Dispatcher $r7;
        okhttp3.internal.platform.Platform $r8;
        java.lang.StringBuilder $r9;
        java.lang.String $r10;
        java.lang.Throwable $r11;

        r0 := @this: okhttp3.RealCall$AsyncCall;

        z0 = 0;

     label01:
        $r2 = r0.<okhttp3.RealCall$AsyncCall: okhttp3.RealCall this$0>;

     label02:
        $r3 = virtualinvoke $r2.<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain()>();

     label03:
        $r2 = r0.<okhttp3.RealCall$AsyncCall: okhttp3.RealCall this$0>;

        $r4 = $r2.<okhttp3.RealCall: okhttp3.internal.http.RetryAndFollowUpInterceptor retryAndFollowUpInterceptor>;

     label04:
        $z1 = virtualinvoke $r4.<okhttp3.internal.http.RetryAndFollowUpInterceptor: boolean isCanceled()>();

     label05:
        if $z1 == 0 goto label09;

        z0 = 1;

     label06:
        $r5 = r0.<okhttp3.RealCall$AsyncCall: okhttp3.Callback responseCallback>;

        $r2 = r0.<okhttp3.RealCall$AsyncCall: okhttp3.RealCall this$0>;

        r1 = new java.io.IOException;

     label07:
        specialinvoke r1.<java.io.IOException: void <init>(java.lang.String)>("Canceled");

        interfaceinvoke $r5.<okhttp3.Callback: void onFailure(okhttp3.Call,java.io.IOException)>($r2, r1);

     label08:
        $r2 = r0.<okhttp3.RealCall$AsyncCall: okhttp3.RealCall this$0>;

        $r6 = $r2.<okhttp3.RealCall: okhttp3.OkHttpClient client>;

        $r7 = virtualinvoke $r6.<okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher()>();

        virtualinvoke $r7.<okhttp3.Dispatcher: void finished(okhttp3.RealCall$AsyncCall)>(r0);

        return;

     label09:
        z0 = 1;

     label10:
        $r5 = r0.<okhttp3.RealCall$AsyncCall: okhttp3.Callback responseCallback>;

        $r2 = r0.<okhttp3.RealCall$AsyncCall: okhttp3.RealCall this$0>;

     label11:
        interfaceinvoke $r5.<okhttp3.Callback: void onResponse(okhttp3.Call,okhttp3.Response)>($r2, $r3);

     label12:
        goto label08;

     label13:
        r1 := @caughtexception;

        if z0 == 0 goto label16;

     label14:
        $r8 = staticinvoke <okhttp3.internal.platform.Platform: okhttp3.internal.platform.Platform get()>();

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Callback failure for ");

        $r2 = r0.<okhttp3.RealCall$AsyncCall: okhttp3.RealCall this$0>;

        $r10 = virtualinvoke $r2.<okhttp3.RealCall: java.lang.String toLoggableString()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<okhttp3.internal.platform.Platform: void log(int,java.lang.String,java.lang.Throwable)>(4, $r10, r1);

     label15:
        $r2 = r0.<okhttp3.RealCall$AsyncCall: okhttp3.RealCall this$0>;

        $r6 = $r2.<okhttp3.RealCall: okhttp3.OkHttpClient client>;

        $r7 = virtualinvoke $r6.<okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher()>();

        virtualinvoke $r7.<okhttp3.Dispatcher: void finished(okhttp3.RealCall$AsyncCall)>(r0);

        return;

     label16:
        $r5 = r0.<okhttp3.RealCall$AsyncCall: okhttp3.Callback responseCallback>;

        $r2 = r0.<okhttp3.RealCall$AsyncCall: okhttp3.RealCall this$0>;

        interfaceinvoke $r5.<okhttp3.Callback: void onFailure(okhttp3.Call,java.io.IOException)>($r2, r1);

     label17:
        goto label15;

     label18:
        $r11 := @caughtexception;

        $r2 = r0.<okhttp3.RealCall$AsyncCall: okhttp3.RealCall this$0>;

        $r6 = $r2.<okhttp3.RealCall: okhttp3.OkHttpClient client>;

        $r7 = virtualinvoke $r6.<okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher()>();

        virtualinvoke $r7.<okhttp3.Dispatcher: void finished(okhttp3.RealCall$AsyncCall)>(r0);

        throw $r11;

        catch java.io.IOException from label02 to label03 with label13;
        catch java.io.IOException from label04 to label05 with label13;
        catch java.io.IOException from label07 to label08 with label13;
        catch java.lang.Throwable from label01 to label05 with label18;
        catch java.lang.Throwable from label06 to label08 with label18;
        catch java.io.IOException from label11 to label12 with label13;
        catch java.lang.Throwable from label10 to label12 with label18;
        catch java.lang.Throwable from label14 to label15 with label18;
        catch java.lang.Throwable from label16 to label17 with label18;
    }
    okhttp3.RealCall get()
    {
        okhttp3.RealCall$AsyncCall r0;
        okhttp3.RealCall r1;

        r0 := @this: okhttp3.RealCall$AsyncCall;

        r1 = r0.<okhttp3.RealCall$AsyncCall: okhttp3.RealCall this$0>;

        return r1;
    }
    java.lang.String host()
    {
        okhttp3.RealCall$AsyncCall r0;
        okhttp3.RealCall $r1;
        okhttp3.Request $r2;
        okhttp3.HttpUrl $r3;
        java.lang.String $r4;

        r0 := @this: okhttp3.RealCall$AsyncCall;

        $r1 = r0.<okhttp3.RealCall$AsyncCall: okhttp3.RealCall this$0>;

        $r2 = $r1.<okhttp3.RealCall: okhttp3.Request originalRequest>;

        $r3 = virtualinvoke $r2.<okhttp3.Request: okhttp3.HttpUrl url()>();

        $r4 = virtualinvoke $r3.<okhttp3.HttpUrl: java.lang.String host()>();

        return $r4;
    }
    okhttp3.Request request()
    {
        okhttp3.RealCall$AsyncCall r0;
        okhttp3.RealCall $r1;
        okhttp3.Request r2;

        r0 := @this: okhttp3.RealCall$AsyncCall;

        $r1 = r0.<okhttp3.RealCall$AsyncCall: okhttp3.RealCall this$0>;

        r2 = $r1.<okhttp3.RealCall: okhttp3.Request originalRequest>;

        return r2;
    }
