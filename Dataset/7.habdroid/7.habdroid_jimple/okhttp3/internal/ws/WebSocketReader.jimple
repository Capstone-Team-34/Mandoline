okhttp3.internal.ws.WebSocketReader extends java.lang.Object
boolean closed
long frameBytesRead
final okhttp3.internal.ws.WebSocketReader$FrameCallback frameCallback
long frameLength
final boolean isClient
boolean isControlFrame
boolean isFinalFrame
boolean isMasked
final byte[] maskBuffer
final byte[] maskKey
int opcode
final okio.BufferedSource source
    void <init>(boolean, okio.BufferedSource, okhttp3.internal.ws.WebSocketReader$FrameCallback)
    {
        okhttp3.internal.ws.WebSocketReader r0;
        boolean $z0;
        okio.BufferedSource $r1;
        okhttp3.internal.ws.WebSocketReader$FrameCallback $r2;
        byte[] $r3;
        java.lang.NullPointerException $r4;

        r0 := @this: okhttp3.internal.ws.WebSocketReader;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: okio.BufferedSource;

        $r2 := @parameter2: okhttp3.internal.ws.WebSocketReader$FrameCallback;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = newarray (byte)[4];

        r0.<okhttp3.internal.ws.WebSocketReader: byte[] maskKey> = $r3;

        $r3 = newarray (byte)[8192];

        r0.<okhttp3.internal.ws.WebSocketReader: byte[] maskBuffer> = $r3;

        if $r1 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("source == null");

        throw $r4;

     label1:
        if $r2 != null goto label2;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("frameCallback == null");

        throw $r4;

     label2:
        r0.<okhttp3.internal.ws.WebSocketReader: boolean isClient> = $z0;

        r0.<okhttp3.internal.ws.WebSocketReader: okio.BufferedSource source> = $r1;

        r0.<okhttp3.internal.ws.WebSocketReader: okhttp3.internal.ws.WebSocketReader$FrameCallback frameCallback> = $r2;

        return;
    }
    private void readControlFrame() throws java.io.IOException
    {
        okhttp3.internal.ws.WebSocketReader r0;
        byte[] $r1, $r7;
        long $l0, $l2;
        okio.Buffer r2;
        int i1;
        byte $b3;
        boolean $z0;
        okio.BufferedSource $r3;
        java.net.ProtocolException $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6, $r11;
        java.io.EOFException $r8;
        okhttp3.internal.ws.WebSocketReader$FrameCallback $r9;
        okio.ByteString $r10;
        short s4, $s5;

        r0 := @this: okhttp3.internal.ws.WebSocketReader;

        r2 = new okio.Buffer;

        specialinvoke r2.<okio.Buffer: void <init>()>();

        $l0 = r0.<okhttp3.internal.ws.WebSocketReader: long frameBytesRead>;

        $l2 = r0.<okhttp3.internal.ws.WebSocketReader: long frameLength>;

        $b3 = $l0 cmp $l2;

        if $b3 >= 0 goto label1;

        $z0 = r0.<okhttp3.internal.ws.WebSocketReader: boolean isClient>;

        if $z0 == 0 goto label4;

        $r3 = r0.<okhttp3.internal.ws.WebSocketReader: okio.BufferedSource source>;

        $l0 = r0.<okhttp3.internal.ws.WebSocketReader: long frameLength>;

        interfaceinvoke $r3.<okio.BufferedSource: void readFully(okio.Buffer,long)>(r2, $l0);

     label1:
        i1 = r0.<okhttp3.internal.ws.WebSocketReader: int opcode>;

        lookupswitch(i1)
        {
            case 8: goto label7;
            case 9: goto label5;
            case 10: goto label6;
            default: goto label2;
        };

     label2:
        $r4 = new java.net.ProtocolException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown control opcode: ");

        i1 = r0.<okhttp3.internal.ws.WebSocketReader: int opcode>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.net.ProtocolException: void <init>(java.lang.String)>($r6);

        throw $r4;

     label3:
        $r7 = r0.<okhttp3.internal.ws.WebSocketReader: byte[] maskBuffer>;

        $l2 = (long) i1;

        $r1 = r0.<okhttp3.internal.ws.WebSocketReader: byte[] maskKey>;

        $l0 = r0.<okhttp3.internal.ws.WebSocketReader: long frameBytesRead>;

        staticinvoke <okhttp3.internal.ws.WebSocketProtocol: void toggleMask(byte[],long,byte[],long)>($r7, $l2, $r1, $l0);

        $r1 = r0.<okhttp3.internal.ws.WebSocketReader: byte[] maskBuffer>;

        virtualinvoke r2.<okio.Buffer: okio.Buffer write(byte[],int,int)>($r1, 0, i1);

        $l0 = r0.<okhttp3.internal.ws.WebSocketReader: long frameBytesRead>;

        $l2 = (long) i1;

        $l0 = $l0 + $l2;

        r0.<okhttp3.internal.ws.WebSocketReader: long frameBytesRead> = $l0;

     label4:
        $l0 = r0.<okhttp3.internal.ws.WebSocketReader: long frameBytesRead>;

        $l2 = r0.<okhttp3.internal.ws.WebSocketReader: long frameLength>;

        $b3 = $l0 cmp $l2;

        if $b3 >= 0 goto label1;

        $l0 = r0.<okhttp3.internal.ws.WebSocketReader: long frameLength>;

        $l2 = r0.<okhttp3.internal.ws.WebSocketReader: long frameBytesRead>;

        $l0 = $l0 - $l2;

        $r1 = r0.<okhttp3.internal.ws.WebSocketReader: byte[] maskBuffer>;

        i1 = lengthof $r1;

        $l2 = (long) i1;

        $l0 = staticinvoke <java.lang.Math: long min(long,long)>($l0, $l2);

        i1 = (int) $l0;

        $r3 = r0.<okhttp3.internal.ws.WebSocketReader: okio.BufferedSource source>;

        $r1 = r0.<okhttp3.internal.ws.WebSocketReader: byte[] maskBuffer>;

        i1 = interfaceinvoke $r3.<okio.BufferedSource: int read(byte[],int,int)>($r1, 0, i1);

        if i1 != -1 goto label3;

        $r8 = new java.io.EOFException;

        specialinvoke $r8.<java.io.EOFException: void <init>()>();

        throw $r8;

     label5:
        $r9 = r0.<okhttp3.internal.ws.WebSocketReader: okhttp3.internal.ws.WebSocketReader$FrameCallback frameCallback>;

        $r10 = virtualinvoke r2.<okio.Buffer: okio.ByteString readByteString()>();

        interfaceinvoke $r9.<okhttp3.internal.ws.WebSocketReader$FrameCallback: void onReadPing(okio.ByteString)>($r10);

        return;

     label6:
        $r9 = r0.<okhttp3.internal.ws.WebSocketReader: okhttp3.internal.ws.WebSocketReader$FrameCallback frameCallback>;

        $r10 = virtualinvoke r2.<okio.Buffer: okio.ByteString readByteString()>();

        interfaceinvoke $r9.<okhttp3.internal.ws.WebSocketReader$FrameCallback: void onReadPong(okio.ByteString)>($r10);

        return;

     label7:
        s4 = 1005;

        $r6 = "";

        $l0 = virtualinvoke r2.<okio.Buffer: long size()>();

        $b3 = $l0 cmp 1L;

        if $b3 != 0 goto label8;

        $r4 = new java.net.ProtocolException;

        specialinvoke $r4.<java.net.ProtocolException: void <init>(java.lang.String)>("Malformed close payload length of 1.");

        throw $r4;

     label8:
        $b3 = $l0 cmp 0L;

        if $b3 == 0 goto label9;

        $s5 = virtualinvoke r2.<okio.Buffer: short readShort()>();

        s4 = $s5;

        $r6 = virtualinvoke r2.<okio.Buffer: java.lang.String readUtf8()>();

        $r11 = staticinvoke <okhttp3.internal.ws.WebSocketProtocol: java.lang.String closeCodeExceptionMessage(int)>($s5);

        if $r11 == null goto label9;

        $r4 = new java.net.ProtocolException;

        specialinvoke $r4.<java.net.ProtocolException: void <init>(java.lang.String)>($r11);

        throw $r4;

     label9:
        $r9 = r0.<okhttp3.internal.ws.WebSocketReader: okhttp3.internal.ws.WebSocketReader$FrameCallback frameCallback>;

        interfaceinvoke $r9.<okhttp3.internal.ws.WebSocketReader$FrameCallback: void onReadClose(int,java.lang.String)>(s4, $r6);

        r0.<okhttp3.internal.ws.WebSocketReader: boolean closed> = 1;

        return;
    }
    private void readHeader() throws java.io.IOException
    {
        okhttp3.internal.ws.WebSocketReader r0;
        int i0, $i3;
        boolean $z0, $z1, z2, z3;
        java.io.IOException $r1;
        okio.BufferedSource $r2;
        okio.Timeout $r3;
        long $l1;
        byte $b2;
        java.util.concurrent.TimeUnit $r4;
        java.net.ProtocolException $r5;
        java.lang.Throwable $r6;
        java.lang.String $r7;
        short $s4;
        java.lang.StringBuilder $r8;
        byte[] $r9;

        r0 := @this: okhttp3.internal.ws.WebSocketReader;

        $z0 = 1;

        $z1 = r0.<okhttp3.internal.ws.WebSocketReader: boolean closed>;

        if $z1 == 0 goto label01;

        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("closed");

        throw $r1;

     label01:
        $r2 = r0.<okhttp3.internal.ws.WebSocketReader: okio.BufferedSource source>;

        $r3 = interfaceinvoke $r2.<okio.BufferedSource: okio.Timeout timeout()>();

        $l1 = virtualinvoke $r3.<okio.Timeout: long timeoutNanos()>();

        $r2 = r0.<okhttp3.internal.ws.WebSocketReader: okio.BufferedSource source>;

        $r3 = interfaceinvoke $r2.<okio.BufferedSource: okio.Timeout timeout()>();

        virtualinvoke $r3.<okio.Timeout: okio.Timeout clearTimeout()>();

     label02:
        $r2 = r0.<okhttp3.internal.ws.WebSocketReader: okio.BufferedSource source>;

        $b2 = interfaceinvoke $r2.<okio.BufferedSource: byte readByte()>();

     label03:
        i0 = $b2 & 255;

        $r2 = r0.<okhttp3.internal.ws.WebSocketReader: okio.BufferedSource source>;

        $r3 = interfaceinvoke $r2.<okio.BufferedSource: okio.Timeout timeout()>();

        $r4 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        virtualinvoke $r3.<okio.Timeout: okio.Timeout timeout(long,java.util.concurrent.TimeUnit)>($l1, $r4);

        $i3 = i0 & 15;

        r0.<okhttp3.internal.ws.WebSocketReader: int opcode> = $i3;

        $i3 = i0 & 128;

        if $i3 == 0 goto label07;

        $z1 = 1;

     label04:
        r0.<okhttp3.internal.ws.WebSocketReader: boolean isFinalFrame> = $z1;

        $i3 = i0 & 8;

        if $i3 == 0 goto label08;

        $z1 = 1;

     label05:
        r0.<okhttp3.internal.ws.WebSocketReader: boolean isControlFrame> = $z1;

        $z1 = r0.<okhttp3.internal.ws.WebSocketReader: boolean isControlFrame>;

        if $z1 == 0 goto label09;

        $z1 = r0.<okhttp3.internal.ws.WebSocketReader: boolean isFinalFrame>;

        if $z1 != 0 goto label09;

        $r5 = new java.net.ProtocolException;

        specialinvoke $r5.<java.net.ProtocolException: void <init>(java.lang.String)>("Control frames must be final.");

        throw $r5;

     label06:
        $r6 := @caughtexception;

        $r2 = r0.<okhttp3.internal.ws.WebSocketReader: okio.BufferedSource source>;

        $r3 = interfaceinvoke $r2.<okio.BufferedSource: okio.Timeout timeout()>();

        $r4 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        virtualinvoke $r3.<okio.Timeout: okio.Timeout timeout(long,java.util.concurrent.TimeUnit)>($l1, $r4);

        throw $r6;

     label07:
        $z1 = 0;

        goto label04;

     label08:
        $z1 = 0;

        goto label05;

     label09:
        $i3 = i0 & 64;

        if $i3 == 0 goto label14;

        $z1 = 1;

     label10:
        $i3 = i0 & 32;

        if $i3 == 0 goto label15;

        z2 = 1;

     label11:
        i0 = i0 & 16;

        if i0 == 0 goto label16;

        z3 = 1;

     label12:
        if $z1 != 0 goto label13;

        if z2 != 0 goto label13;

        if z3 == 0 goto label17;

     label13:
        $r5 = new java.net.ProtocolException;

        specialinvoke $r5.<java.net.ProtocolException: void <init>(java.lang.String)>("Reserved flags are unsupported.");

        throw $r5;

     label14:
        $z1 = 0;

        goto label10;

     label15:
        z2 = 0;

        goto label11;

     label16:
        z3 = 0;

        goto label12;

     label17:
        $r2 = r0.<okhttp3.internal.ws.WebSocketReader: okio.BufferedSource source>;

        $b2 = interfaceinvoke $r2.<okio.BufferedSource: byte readByte()>();

        i0 = $b2 & 255;

        $i3 = i0 & 128;

        if $i3 == 0 goto label20;

     label18:
        r0.<okhttp3.internal.ws.WebSocketReader: boolean isMasked> = $z0;

        $z0 = r0.<okhttp3.internal.ws.WebSocketReader: boolean isMasked>;

        $z1 = r0.<okhttp3.internal.ws.WebSocketReader: boolean isClient>;

        if $z0 != $z1 goto label22;

        $r5 = new java.net.ProtocolException;

        $z0 = r0.<okhttp3.internal.ws.WebSocketReader: boolean isClient>;

        if $z0 == 0 goto label21;

        $r7 = "Server-sent frames must not be masked.";

     label19:
        specialinvoke $r5.<java.net.ProtocolException: void <init>(java.lang.String)>($r7);

        throw $r5;

     label20:
        $z0 = 0;

        goto label18;

     label21:
        $r7 = "Client-sent frames must be masked.";

        goto label19;

     label22:
        i0 = i0 & 127;

        $l1 = (long) i0;

        r0.<okhttp3.internal.ws.WebSocketReader: long frameLength> = $l1;

        $l1 = r0.<okhttp3.internal.ws.WebSocketReader: long frameLength>;

        $b2 = $l1 cmp 126L;

        if $b2 != 0 goto label24;

        $r2 = r0.<okhttp3.internal.ws.WebSocketReader: okio.BufferedSource source>;

        $s4 = interfaceinvoke $r2.<okio.BufferedSource: short readShort()>();

        $l1 = (long) $s4;

        $l1 = $l1 & 65535L;

        r0.<okhttp3.internal.ws.WebSocketReader: long frameLength> = $l1;

     label23:
        r0.<okhttp3.internal.ws.WebSocketReader: long frameBytesRead> = 0L;

        $z0 = r0.<okhttp3.internal.ws.WebSocketReader: boolean isControlFrame>;

        if $z0 == 0 goto label25;

        $l1 = r0.<okhttp3.internal.ws.WebSocketReader: long frameLength>;

        $b2 = $l1 cmp 125L;

        if $b2 <= 0 goto label25;

        $r5 = new java.net.ProtocolException;

        specialinvoke $r5.<java.net.ProtocolException: void <init>(java.lang.String)>("Control frame must be less than 125B.");

        throw $r5;

     label24:
        $l1 = r0.<okhttp3.internal.ws.WebSocketReader: long frameLength>;

        $b2 = $l1 cmp 127L;

        if $b2 != 0 goto label23;

        $r2 = r0.<okhttp3.internal.ws.WebSocketReader: okio.BufferedSource source>;

        $l1 = interfaceinvoke $r2.<okio.BufferedSource: long readLong()>();

        r0.<okhttp3.internal.ws.WebSocketReader: long frameLength> = $l1;

        $l1 = r0.<okhttp3.internal.ws.WebSocketReader: long frameLength>;

        $b2 = $l1 cmp 0L;

        if $b2 >= 0 goto label23;

        $r5 = new java.net.ProtocolException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Frame length 0x");

        $l1 = r0.<okhttp3.internal.ws.WebSocketReader: long frameLength>;

        $r7 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($l1);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" > 0x7FFFFFFFFFFFFFFF");

        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.net.ProtocolException: void <init>(java.lang.String)>($r7);

        throw $r5;

     label25:
        $z0 = r0.<okhttp3.internal.ws.WebSocketReader: boolean isMasked>;

        if $z0 == 0 goto label26;

        $r2 = r0.<okhttp3.internal.ws.WebSocketReader: okio.BufferedSource source>;

        $r9 = r0.<okhttp3.internal.ws.WebSocketReader: byte[] maskKey>;

        interfaceinvoke $r2.<okio.BufferedSource: void readFully(byte[])>($r9);

     label26:
        return;

        catch java.lang.Throwable from label02 to label03 with label06;
    }
    private void readMessage(okio.Buffer) throws java.io.IOException
    {
        okhttp3.internal.ws.WebSocketReader r0;
        okio.Buffer $r1;
        boolean $z0;
        java.io.IOException $r2;
        long $l0, $l1;
        byte $b2;
        int $i3;
        java.net.ProtocolException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        byte[] $r6, $r9;
        okio.BufferedSource $r7;
        java.io.EOFException $r8;

        r0 := @this: okhttp3.internal.ws.WebSocketReader;

        $r1 := @parameter0: okio.Buffer;

     label1:
        $z0 = r0.<okhttp3.internal.ws.WebSocketReader: boolean closed>;

        if $z0 == 0 goto label2;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("closed");

        throw $r2;

     label2:
        $l0 = r0.<okhttp3.internal.ws.WebSocketReader: long frameBytesRead>;

        $l1 = r0.<okhttp3.internal.ws.WebSocketReader: long frameLength>;

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label5;

        $z0 = r0.<okhttp3.internal.ws.WebSocketReader: boolean isFinalFrame>;

        if $z0 == 0 goto label3;

        return;

     label3:
        virtualinvoke r0.<okhttp3.internal.ws.WebSocketReader: void readUntilNonControlFrame()>();

        $i3 = r0.<okhttp3.internal.ws.WebSocketReader: int opcode>;

        if $i3 == 0 goto label4;

        $r3 = new java.net.ProtocolException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected continuation opcode. Got: ");

        $i3 = r0.<okhttp3.internal.ws.WebSocketReader: int opcode>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i3);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.net.ProtocolException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label4:
        $z0 = r0.<okhttp3.internal.ws.WebSocketReader: boolean isFinalFrame>;

        if $z0 == 0 goto label5;

        $l0 = r0.<okhttp3.internal.ws.WebSocketReader: long frameLength>;

        $b2 = $l0 cmp 0L;

        if $b2 == 0 goto label9;

     label5:
        $l0 = r0.<okhttp3.internal.ws.WebSocketReader: long frameLength>;

        $l1 = r0.<okhttp3.internal.ws.WebSocketReader: long frameBytesRead>;

        $l0 = $l0 - $l1;

        $z0 = r0.<okhttp3.internal.ws.WebSocketReader: boolean isMasked>;

        if $z0 == 0 goto label8;

        $r6 = r0.<okhttp3.internal.ws.WebSocketReader: byte[] maskBuffer>;

        $i3 = lengthof $r6;

        $l1 = (long) $i3;

        $l0 = staticinvoke <java.lang.Math: long min(long,long)>($l0, $l1);

        $r7 = r0.<okhttp3.internal.ws.WebSocketReader: okio.BufferedSource source>;

        $r6 = r0.<okhttp3.internal.ws.WebSocketReader: byte[] maskBuffer>;

        $i3 = (int) $l0;

        $i3 = interfaceinvoke $r7.<okio.BufferedSource: int read(byte[],int,int)>($r6, 0, $i3);

        $l0 = (long) $i3;

        $b2 = $l0 cmp -1L;

        if $b2 != 0 goto label6;

        $r8 = new java.io.EOFException;

        specialinvoke $r8.<java.io.EOFException: void <init>()>();

        throw $r8;

     label6:
        $r6 = r0.<okhttp3.internal.ws.WebSocketReader: byte[] maskBuffer>;

        $r9 = r0.<okhttp3.internal.ws.WebSocketReader: byte[] maskKey>;

        $l1 = r0.<okhttp3.internal.ws.WebSocketReader: long frameBytesRead>;

        staticinvoke <okhttp3.internal.ws.WebSocketProtocol: void toggleMask(byte[],long,byte[],long)>($r6, $l0, $r9, $l1);

        $r6 = r0.<okhttp3.internal.ws.WebSocketReader: byte[] maskBuffer>;

        $i3 = (int) $l0;

        virtualinvoke $r1.<okio.Buffer: okio.Buffer write(byte[],int,int)>($r6, 0, $i3);

     label7:
        $l1 = r0.<okhttp3.internal.ws.WebSocketReader: long frameBytesRead>;

        $l0 = $l1 + $l0;

        r0.<okhttp3.internal.ws.WebSocketReader: long frameBytesRead> = $l0;

        goto label1;

     label8:
        $r7 = r0.<okhttp3.internal.ws.WebSocketReader: okio.BufferedSource source>;

        $l1 = interfaceinvoke $r7.<okio.BufferedSource: long read(okio.Buffer,long)>($r1, $l0);

        $l0 = $l1;

        $b2 = $l1 cmp -1L;

        if $b2 != 0 goto label7;

        $r8 = new java.io.EOFException;

        specialinvoke $r8.<java.io.EOFException: void <init>()>();

        throw $r8;

     label9:
        return;
    }
    private void readMessageFrame() throws java.io.IOException
    {
        okhttp3.internal.ws.WebSocketReader r0;
        okio.Buffer r1;
        int i0;
        java.net.ProtocolException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        okhttp3.internal.ws.WebSocketReader$FrameCallback $r5;
        okio.ByteString $r6;

        r0 := @this: okhttp3.internal.ws.WebSocketReader;

        i0 = r0.<okhttp3.internal.ws.WebSocketReader: int opcode>;

        if i0 == 1 goto label1;

        if i0 == 2 goto label1;

        $r2 = new java.net.ProtocolException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown opcode: ");

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.net.ProtocolException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label1:
        r1 = new okio.Buffer;

        specialinvoke r1.<okio.Buffer: void <init>()>();

        specialinvoke r0.<okhttp3.internal.ws.WebSocketReader: void readMessage(okio.Buffer)>(r1);

        if i0 != 1 goto label2;

        $r5 = r0.<okhttp3.internal.ws.WebSocketReader: okhttp3.internal.ws.WebSocketReader$FrameCallback frameCallback>;

        $r4 = virtualinvoke r1.<okio.Buffer: java.lang.String readUtf8()>();

        interfaceinvoke $r5.<okhttp3.internal.ws.WebSocketReader$FrameCallback: void onReadMessage(java.lang.String)>($r4);

        return;

     label2:
        $r5 = r0.<okhttp3.internal.ws.WebSocketReader: okhttp3.internal.ws.WebSocketReader$FrameCallback frameCallback>;

        $r6 = virtualinvoke r1.<okio.Buffer: okio.ByteString readByteString()>();

        interfaceinvoke $r5.<okhttp3.internal.ws.WebSocketReader$FrameCallback: void onReadMessage(okio.ByteString)>($r6);

        return;
    }
    void processNextFrame() throws java.io.IOException
    {
        okhttp3.internal.ws.WebSocketReader r0;
        boolean $z0;

        r0 := @this: okhttp3.internal.ws.WebSocketReader;

        specialinvoke r0.<okhttp3.internal.ws.WebSocketReader: void readHeader()>();

        $z0 = r0.<okhttp3.internal.ws.WebSocketReader: boolean isControlFrame>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<okhttp3.internal.ws.WebSocketReader: void readControlFrame()>();

        return;

     label1:
        specialinvoke r0.<okhttp3.internal.ws.WebSocketReader: void readMessageFrame()>();

        return;
    }
    void readUntilNonControlFrame() throws java.io.IOException
    {
        okhttp3.internal.ws.WebSocketReader r0;
        boolean $z0;

        r0 := @this: okhttp3.internal.ws.WebSocketReader;

     label1:
        $z0 = r0.<okhttp3.internal.ws.WebSocketReader: boolean closed>;

        if $z0 != 0 goto label3;

        specialinvoke r0.<okhttp3.internal.ws.WebSocketReader: void readHeader()>();

        $z0 = r0.<okhttp3.internal.ws.WebSocketReader: boolean isControlFrame>;

        if $z0 != 0 goto label2;

        return;

     label2:
        specialinvoke r0.<okhttp3.internal.ws.WebSocketReader: void readControlFrame()>();

        goto label1;

     label3:
        return;
    }
