okhttp3.internal.ws.WebSocketProtocol extends java.lang.Object
static final java.lang.String ACCEPT_MAGIC
static final int B0_FLAG_FIN
static final int B0_FLAG_RSV1
static final int B0_FLAG_RSV2
static final int B0_FLAG_RSV3
static final int B0_MASK_OPCODE
static final int B1_FLAG_MASK
static final int B1_MASK_LENGTH
static final int CLOSE_ABNORMAL_TERMINATION
static final int CLOSE_CLIENT_GOING_AWAY
static final long CLOSE_MESSAGE_MAX
static final int CLOSE_NO_STATUS_CODE
static final int CLOSE_PROTOCOL_EXCEPTION
static final int OPCODE_BINARY
static final int OPCODE_CONTINUATION
static final int OPCODE_CONTROL_CLOSE
static final int OPCODE_CONTROL_PING
static final int OPCODE_CONTROL_PONG
static final int OPCODE_FLAG_CONTROL
static final int OPCODE_TEXT
static final long PAYLOAD_BYTE_MAX
static final int PAYLOAD_LONG
static final int PAYLOAD_SHORT
static final long PAYLOAD_SHORT_MAX
    private void <init>()
    {
        okhttp3.internal.ws.WebSocketProtocol r0;
        java.lang.AssertionError $r1;

        r0 := @this: okhttp3.internal.ws.WebSocketProtocol;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>(java.lang.Object)>("No instances.");

        throw $r1;
    }
    public static java.lang.String acceptHeader(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.StringBuilder $r1;
        okio.ByteString $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("258EAFA5-E914-47DA-95CA-C5AB0DC85B11");

        $r0 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r2 = staticinvoke <okio.ByteString: okio.ByteString encodeUtf8(java.lang.String)>($r0);

        $r2 = virtualinvoke $r2.<okio.ByteString: okio.ByteString sha1()>();

        $r0 = virtualinvoke $r2.<okio.ByteString: java.lang.String base64()>();

        return $r0;
    }
    static java.lang.String closeCodeExceptionMessage(int)
    {
        int $i0;
        java.lang.StringBuilder $r0;
        java.lang.String $r1;

        $i0 := @parameter0: int;

        if $i0 < 1000 goto label1;

        if $i0 < 5000 goto label2;

     label1:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Code must be in range [1000,5000): ");

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;

     label2:
        if $i0 < 1004 goto label3;

        if $i0 <= 1006 goto label4;

     label3:
        if $i0 < 1012 goto label5;

        if $i0 > 2999 goto label5;

     label4:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Code ");

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is reserved and may not be used.");

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;

     label5:
        return null;
    }
    static void toggleMask(byte[], long, byte[], long)
    {
        byte[] $r0, $r1;
        long $l0, $l3, $l5;
        int i1, i2, i4;
        byte $b6, $b7;

        $r0 := @parameter0: byte[];

        $l0 := @parameter1: long;

        $r1 := @parameter2: byte[];

        $l3 := @parameter3: long;

        i2 = lengthof $r1;

        i4 = 0;

     label1:
        $l5 = (long) i4;

        $b6 = $l5 cmp $l0;

        if $b6 >= 0 goto label2;

        $l5 = (long) i2;

        $l5 = $l3 % $l5;

        i1 = (int) $l5;

        $b6 = $r0[i4];

        $b7 = $r1[i1];

        i1 = $b6 ^ $b7;

        $b6 = (byte) i1;

        $r0[i4] = $b6;

        i4 = i4 + 1;

        $l3 = $l3 + 1L;

        goto label1;

     label2:
        return;
    }
    static void validateCloseCode(int)
    {
        int $i0;
        java.lang.IllegalArgumentException $r0;
        java.lang.String $r1;

        $i0 := @parameter0: int;

        $r1 = staticinvoke <okhttp3.internal.ws.WebSocketProtocol: java.lang.String closeCodeExceptionMessage(int)>($i0);

        if $r1 == null goto label1;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r0;

     label1:
        return;
    }
