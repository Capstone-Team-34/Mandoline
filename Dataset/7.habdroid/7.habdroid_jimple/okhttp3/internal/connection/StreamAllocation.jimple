okhttp3.internal.connection.StreamAllocation extends java.lang.Object
static final boolean $assertionsDisabled
public final okhttp3.Address address
private final java.lang.Object callStackTrace
private boolean canceled
private okhttp3.internal.http.HttpCodec codec
private okhttp3.internal.connection.RealConnection connection
private final okhttp3.ConnectionPool connectionPool
private int refusedStreamCount
private boolean released
private okhttp3.Route route
private final okhttp3.internal.connection.RouteSelector routeSelector
    static void <clinit>()
    {
        boolean $z0;
        java.lang.Class $r0;

        $r0 = class "Lokhttp3/internal/connection/StreamAllocation;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label2;

        $z0 = 1;

     label1:
        <okhttp3.internal.connection.StreamAllocation: boolean $assertionsDisabled> = $z0;

        return;

     label2:
        $z0 = 0;

        goto label1;
    }
    public void <init>(okhttp3.ConnectionPool, okhttp3.Address, java.lang.Object)
    {
        okhttp3.internal.connection.StreamAllocation r0;
        okhttp3.ConnectionPool $r1;
        okhttp3.Address $r2;
        java.lang.Object $r3;
        okhttp3.internal.connection.RouteSelector $r4;
        okhttp3.internal.connection.RouteDatabase $r5;

        r0 := @this: okhttp3.internal.connection.StreamAllocation;

        $r1 := @parameter0: okhttp3.ConnectionPool;

        $r2 := @parameter1: okhttp3.Address;

        $r3 := @parameter2: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.ConnectionPool connectionPool> = $r1;

        r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.Address address> = $r2;

        $r4 = new okhttp3.internal.connection.RouteSelector;

        $r5 = specialinvoke r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.internal.connection.RouteDatabase routeDatabase()>();

        specialinvoke $r4.<okhttp3.internal.connection.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.connection.RouteDatabase)>($r2, $r5);

        r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.internal.connection.RouteSelector routeSelector> = $r4;

        r0.<okhttp3.internal.connection.StreamAllocation: java.lang.Object callStackTrace> = $r3;

        return;
    }
    private java.net.Socket deallocate(boolean, boolean, boolean)
    {
        okhttp3.internal.connection.StreamAllocation r0;
        boolean $z0, $z1, $z2, $z3;
        okhttp3.internal.connection.RealConnection $r1;
        okhttp3.ConnectionPool $r2;
        java.lang.AssertionError $r3;
        java.net.Socket r4;
        okhttp3.internal.http.HttpCodec $r5;
        java.util.List $r6;
        long $l0;
        okhttp3.internal.Internal $r7;

        r0 := @this: okhttp3.internal.connection.StreamAllocation;

        $z0 := @parameter0: boolean;

        $z1 := @parameter1: boolean;

        $z2 := @parameter2: boolean;

        $z3 = <okhttp3.internal.connection.StreamAllocation: boolean $assertionsDisabled>;

        if $z3 != 0 goto label1;

        $r2 = r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.ConnectionPool connectionPool>;

        $z3 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r2);

        if $z3 != 0 goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        if $z2 == 0 goto label2;

        r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.internal.http.HttpCodec codec> = null;

     label2:
        if $z1 == 0 goto label3;

        r0.<okhttp3.internal.connection.StreamAllocation: boolean released> = 1;

     label3:
        r4 = null;

        $r1 = r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.internal.connection.RealConnection connection>;

        if $r1 == null goto label7;

        if $z0 == 0 goto label4;

        $r1 = r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.internal.connection.RealConnection connection>;

        $r1.<okhttp3.internal.connection.RealConnection: boolean noNewStreams> = 1;

     label4:
        $r5 = r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.internal.http.HttpCodec codec>;

        if $r5 != null goto label7;

        $z0 = r0.<okhttp3.internal.connection.StreamAllocation: boolean released>;

        if $z0 != 0 goto label5;

        $r1 = r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.internal.connection.RealConnection connection>;

        $z0 = $r1.<okhttp3.internal.connection.RealConnection: boolean noNewStreams>;

        if $z0 == 0 goto label7;

     label5:
        $r1 = r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.internal.connection.RealConnection connection>;

        specialinvoke r0.<okhttp3.internal.connection.StreamAllocation: void release(okhttp3.internal.connection.RealConnection)>($r1);

        $r1 = r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.internal.connection.RealConnection connection>;

        $r6 = $r1.<okhttp3.internal.connection.RealConnection: java.util.List allocations>;

        $z0 = interfaceinvoke $r6.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label6;

        $r1 = r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.internal.connection.RealConnection connection>;

        $l0 = staticinvoke <java.lang.System: long nanoTime()>();

        $r1.<okhttp3.internal.connection.RealConnection: long idleAtNanos> = $l0;

        $r7 = <okhttp3.internal.Internal: okhttp3.internal.Internal instance>;

        $r2 = r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.ConnectionPool connectionPool>;

        $r1 = r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.internal.connection.RealConnection connection>;

        $z0 = virtualinvoke $r7.<okhttp3.internal.Internal: boolean connectionBecameIdle(okhttp3.ConnectionPool,okhttp3.internal.connection.RealConnection)>($r2, $r1);

        if $z0 == 0 goto label6;

        $r1 = r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.internal.connection.RealConnection connection>;

        r4 = virtualinvoke $r1.<okhttp3.internal.connection.RealConnection: java.net.Socket socket()>();

     label6:
        r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.internal.connection.RealConnection connection> = null;

        return r4;

     label7:
        return null;
    }
    private okhttp3.internal.connection.RealConnection findConnection(int, int, int, boolean) throws java.io.IOException
    {
        okhttp3.internal.connection.StreamAllocation r0;
        int $i0, $i1, $i2;
        boolean $z0, $z1;
        okhttp3.ConnectionPool $r1, $r8;
        java.lang.IllegalStateException $r2;
        java.lang.Throwable $r3, $r12, $r15;
        okhttp3.internal.http.HttpCodec $r4;
        java.io.IOException $r5;
        okhttp3.internal.connection.RealConnection r6;
        okhttp3.internal.Internal $r7;
        okhttp3.Address $r9;
        okhttp3.Route r10;
        okhttp3.internal.connection.RouteSelector $r11;
        okhttp3.internal.connection.RouteDatabase $r13;
        java.net.Socket r14;

        r0 := @this: okhttp3.internal.connection.StreamAllocation;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $r1 = r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.ConnectionPool connectionPool>;

        entermonitor $r1;

     label01:
        $z1 = r0.<okhttp3.internal.connection.StreamAllocation: boolean released>;

        if $z1 == 0 goto label04;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("released");

        throw $r2;

     label02:
        $r3 := @caughtexception;

        exitmonitor $r1;

     label03:
        throw $r3;

     label04:
        $r4 = r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.internal.http.HttpCodec codec>;

        if $r4 == null goto label05;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("codec != null");

        throw $r2;

     label05:
        $z1 = r0.<okhttp3.internal.connection.StreamAllocation: boolean canceled>;

        if $z1 == 0 goto label06;

        $r5 = new java.io.IOException;

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>("Canceled");

        throw $r5;

     label06:
        r6 = r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.internal.connection.RealConnection connection>;

        if r6 == null goto label08;

        $z1 = r6.<okhttp3.internal.connection.RealConnection: boolean noNewStreams>;

        if $z1 != 0 goto label08;

        exitmonitor $r1;

     label07:
        return r6;

     label08:
        $r7 = <okhttp3.internal.Internal: okhttp3.internal.Internal instance>;

        $r8 = r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.ConnectionPool connectionPool>;

        $r9 = r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.Address address>;

        virtualinvoke $r7.<okhttp3.internal.Internal: okhttp3.internal.connection.RealConnection get(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.connection.StreamAllocation)>($r8, $r9, r0);

        r6 = r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.internal.connection.RealConnection connection>;

        if r6 == null goto label10;

        r6 = r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.internal.connection.RealConnection connection>;

        exitmonitor $r1;

     label09:
        return r6;

     label10:
        r10 = r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.Route route>;

        exitmonitor $r1;

     label11:
        if r10 != null goto label12;

        $r11 = r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.internal.connection.RouteSelector routeSelector>;

        r10 = virtualinvoke $r11.<okhttp3.internal.connection.RouteSelector: okhttp3.Route next()>();

     label12:
        $r1 = r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.ConnectionPool connectionPool>;

        entermonitor $r1;

     label13:
        r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.Route route> = r10;

        r0.<okhttp3.internal.connection.StreamAllocation: int refusedStreamCount> = 0;

        r6 = new okhttp3.internal.connection.RealConnection;

        $r8 = r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.ConnectionPool connectionPool>;

        specialinvoke r6.<okhttp3.internal.connection.RealConnection: void <init>(okhttp3.ConnectionPool,okhttp3.Route)>($r8, r10);

        virtualinvoke r0.<okhttp3.internal.connection.StreamAllocation: void acquire(okhttp3.internal.connection.RealConnection)>(r6);

        $z1 = r0.<okhttp3.internal.connection.StreamAllocation: boolean canceled>;

        if $z1 == 0 goto label16;

        $r5 = new java.io.IOException;

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>("Canceled");

        throw $r5;

     label14:
        $r12 := @caughtexception;

        exitmonitor $r1;

     label15:
        throw $r12;

     label16:
        exitmonitor $r1;

     label17:
        virtualinvoke r6.<okhttp3.internal.connection.RealConnection: void connect(int,int,int,boolean)>($i0, $i1, $i2, $z0);

        $r13 = specialinvoke r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.internal.connection.RouteDatabase routeDatabase()>();

        r10 = virtualinvoke r6.<okhttp3.internal.connection.RealConnection: okhttp3.Route route()>();

        virtualinvoke $r13.<okhttp3.internal.connection.RouteDatabase: void connected(okhttp3.Route)>(r10);

        r14 = null;

        $r1 = r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.ConnectionPool connectionPool>;

        entermonitor $r1;

     label18:
        $r7 = <okhttp3.internal.Internal: okhttp3.internal.Internal instance>;

        $r8 = r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.ConnectionPool connectionPool>;

        virtualinvoke $r7.<okhttp3.internal.Internal: void put(okhttp3.ConnectionPool,okhttp3.internal.connection.RealConnection)>($r8, r6);

        $z0 = virtualinvoke r6.<okhttp3.internal.connection.RealConnection: boolean isMultiplexed()>();

        if $z0 == 0 goto label19;

        $r7 = <okhttp3.internal.Internal: okhttp3.internal.Internal instance>;

        $r8 = r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.ConnectionPool connectionPool>;

        $r9 = r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.Address address>;

        r14 = virtualinvoke $r7.<okhttp3.internal.Internal: java.net.Socket deduplicate(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.connection.StreamAllocation)>($r8, $r9, r0);

        r6 = r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.internal.connection.RealConnection connection>;

     label19:
        exitmonitor $r1;

     label20:
        staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>(r14);

        return r6;

     label21:
        $r15 := @caughtexception;

     label22:
        exitmonitor $r1;

     label23:
        throw $r15;

        catch java.lang.Throwable from label01 to label03 with label02;
        catch java.lang.Throwable from label04 to label07 with label02;
        catch java.lang.Throwable from label08 to label09 with label02;
        catch java.lang.Throwable from label10 to label11 with label02;
        catch java.lang.Throwable from label13 to label15 with label14;
        catch java.lang.Throwable from label16 to label17 with label14;
        catch java.lang.Throwable from label18 to label20 with label21;
        catch java.lang.Throwable from label22 to label23 with label21;
    }
    private okhttp3.internal.connection.RealConnection findHealthyConnection(int, int, int, boolean, boolean) throws java.io.IOException
    {
        okhttp3.internal.connection.StreamAllocation r0;
        int $i0, $i1, $i2, $i3;
        boolean $z0, $z1, $z2;
        okhttp3.ConnectionPool $r1;
        okhttp3.internal.connection.RealConnection $r2;
        java.lang.Throwable $r3;

        r0 := @this: okhttp3.internal.connection.StreamAllocation;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $z1 := @parameter4: boolean;

     label1:
        $r2 = specialinvoke r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.internal.connection.RealConnection findConnection(int,int,int,boolean)>($i0, $i1, $i2, $z0);

        $r1 = r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.ConnectionPool connectionPool>;

        entermonitor $r1;

     label2:
        $i3 = $r2.<okhttp3.internal.connection.RealConnection: int successCount>;

        if $i3 != 0 goto label4;

        exitmonitor $r1;

     label3:
        return $r2;

     label4:
        exitmonitor $r1;

     label5:
        $z2 = virtualinvoke $r2.<okhttp3.internal.connection.RealConnection: boolean isHealthy(boolean)>($z1);

        if $z2 != 0 goto label9;

        virtualinvoke r0.<okhttp3.internal.connection.StreamAllocation: void noNewStreams()>();

        goto label1;

     label6:
        $r3 := @caughtexception;

     label7:
        exitmonitor $r1;

     label8:
        throw $r3;

     label9:
        return $r2;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }
    private void release(okhttp3.internal.connection.RealConnection)
    {
        okhttp3.internal.connection.StreamAllocation r0;
        okhttp3.internal.connection.RealConnection $r1;
        int i0, $i1;
        java.util.List $r2;
        java.lang.Object $r3;
        java.lang.ref.Reference r4;
        java.lang.IllegalStateException $r5;

        r0 := @this: okhttp3.internal.connection.StreamAllocation;

        $r1 := @parameter0: okhttp3.internal.connection.RealConnection;

        i0 = 0;

        $r2 = $r1.<okhttp3.internal.connection.RealConnection: java.util.List allocations>;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

     label1:
        if i0 >= $i1 goto label3;

        $r2 = $r1.<okhttp3.internal.connection.RealConnection: java.util.List allocations>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i0);

        r4 = (java.lang.ref.Reference) $r3;

        $r3 = virtualinvoke r4.<java.lang.ref.Reference: java.lang.Object get()>();

        if $r3 != r0 goto label2;

        $r2 = $r1.<okhttp3.internal.connection.RealConnection: java.util.List allocations>;

        interfaceinvoke $r2.<java.util.List: java.lang.Object remove(int)>(i0);

        return;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>()>();

        throw $r5;
    }
    private okhttp3.internal.connection.RouteDatabase routeDatabase()
    {
        okhttp3.internal.connection.StreamAllocation r0;
        okhttp3.ConnectionPool $r1;
        okhttp3.internal.connection.RouteDatabase $r2;
        okhttp3.internal.Internal $r3;

        r0 := @this: okhttp3.internal.connection.StreamAllocation;

        $r3 = <okhttp3.internal.Internal: okhttp3.internal.Internal instance>;

        $r1 = r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.ConnectionPool connectionPool>;

        $r2 = virtualinvoke $r3.<okhttp3.internal.Internal: okhttp3.internal.connection.RouteDatabase routeDatabase(okhttp3.ConnectionPool)>($r1);

        return $r2;
    }
    public void acquire(okhttp3.internal.connection.RealConnection)
    {
        okhttp3.internal.connection.StreamAllocation r0;
        okhttp3.internal.connection.RealConnection $r1, $r6;
        okhttp3.internal.connection.StreamAllocation$StreamAllocationReference $r2;
        java.lang.Object $r3;
        boolean $z0;
        okhttp3.ConnectionPool $r4;
        java.lang.AssertionError $r5;
        java.lang.IllegalStateException $r7;
        java.util.List $r8;

        r0 := @this: okhttp3.internal.connection.StreamAllocation;

        $r1 := @parameter0: okhttp3.internal.connection.RealConnection;

        $z0 = <okhttp3.internal.connection.StreamAllocation: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r4 = r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.ConnectionPool connectionPool>;

        $z0 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r4);

        if $z0 != 0 goto label1;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label1:
        $r6 = r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.internal.connection.RealConnection connection>;

        if $r6 == null goto label2;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>()>();

        throw $r7;

     label2:
        r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.internal.connection.RealConnection connection> = $r1;

        $r8 = $r1.<okhttp3.internal.connection.RealConnection: java.util.List allocations>;

        $r2 = new okhttp3.internal.connection.StreamAllocation$StreamAllocationReference;

        $r3 = r0.<okhttp3.internal.connection.StreamAllocation: java.lang.Object callStackTrace>;

        specialinvoke $r2.<okhttp3.internal.connection.StreamAllocation$StreamAllocationReference: void <init>(okhttp3.internal.connection.StreamAllocation,java.lang.Object)>(r0, $r3);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r2);

        return;
    }
    public void cancel()
    {
        okhttp3.internal.connection.StreamAllocation r0;
        okhttp3.internal.http.HttpCodec r1;
        okhttp3.internal.connection.RealConnection r2;
        okhttp3.ConnectionPool $r3;
        java.lang.Throwable $r4;

        r0 := @this: okhttp3.internal.connection.StreamAllocation;

        $r3 = r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.ConnectionPool connectionPool>;

        entermonitor $r3;

     label1:
        r0.<okhttp3.internal.connection.StreamAllocation: boolean canceled> = 1;

        r1 = r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.internal.http.HttpCodec codec>;

        r2 = r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.internal.connection.RealConnection connection>;

        exitmonitor $r3;

     label2:
        if r1 == null goto label6;

        interfaceinvoke r1.<okhttp3.internal.http.HttpCodec: void cancel()>();

        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor $r3;

     label5:
        throw $r4;

     label6:
        if r2 == null goto label7;

        virtualinvoke r2.<okhttp3.internal.connection.RealConnection: void cancel()>();

     label7:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }
    public okhttp3.internal.http.HttpCodec codec()
    {
        okhttp3.internal.connection.StreamAllocation r0;
        okhttp3.ConnectionPool $r1;
        java.lang.Throwable $r2;
        okhttp3.internal.http.HttpCodec r3;

        r0 := @this: okhttp3.internal.connection.StreamAllocation;

        $r1 = r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.ConnectionPool connectionPool>;

        entermonitor $r1;

     label1:
        r3 = r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.internal.http.HttpCodec codec>;

        exitmonitor $r1;

     label2:
        return r3;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
    public okhttp3.internal.connection.RealConnection connection()
    {
        okhttp3.internal.connection.StreamAllocation r0;
        java.lang.Throwable $r1;
        okhttp3.internal.connection.RealConnection r2;

        r0 := @this: okhttp3.internal.connection.StreamAllocation;

        entermonitor r0;

     label1:
        r2 = r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.internal.connection.RealConnection connection>;

     label2:
        exitmonitor r0;

        return r2;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public boolean hasMoreRoutes()
    {
        okhttp3.internal.connection.StreamAllocation r0;
        boolean $z0;
        okhttp3.Route $r1;
        okhttp3.internal.connection.RouteSelector $r2;

        r0 := @this: okhttp3.internal.connection.StreamAllocation;

        $r1 = r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.Route route>;

        if $r1 != null goto label1;

        $r2 = r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.internal.connection.RouteSelector routeSelector>;

        $z0 = virtualinvoke $r2.<okhttp3.internal.connection.RouteSelector: boolean hasNext()>();

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    public okhttp3.internal.http.HttpCodec newStream(okhttp3.OkHttpClient, boolean)
    {
        okhttp3.internal.connection.StreamAllocation r0;
        okhttp3.OkHttpClient $r1;
        boolean $z0, $z1;
        java.io.IOException r2;
        int $i0, $i1, $i2;
        okhttp3.internal.connection.RealConnection $r3;
        okhttp3.internal.http.HttpCodec $r4;
        okhttp3.ConnectionPool $r5;
        java.lang.Throwable $r6;
        okhttp3.internal.connection.RouteException $r7;

        r0 := @this: okhttp3.internal.connection.StreamAllocation;

        $r1 := @parameter0: okhttp3.OkHttpClient;

        $z0 := @parameter1: boolean;

        $i0 = virtualinvoke $r1.<okhttp3.OkHttpClient: int connectTimeoutMillis()>();

        $i1 = virtualinvoke $r1.<okhttp3.OkHttpClient: int readTimeoutMillis()>();

        $i2 = virtualinvoke $r1.<okhttp3.OkHttpClient: int writeTimeoutMillis()>();

        $z1 = virtualinvoke $r1.<okhttp3.OkHttpClient: boolean retryOnConnectionFailure()>();

     label1:
        $r3 = specialinvoke r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.internal.connection.RealConnection findHealthyConnection(int,int,int,boolean,boolean)>($i0, $i1, $i2, $z1, $z0);

        $r4 = virtualinvoke $r3.<okhttp3.internal.connection.RealConnection: okhttp3.internal.http.HttpCodec newCodec(okhttp3.OkHttpClient,okhttp3.internal.connection.StreamAllocation)>($r1, r0);

     label2:
        $r5 = r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.ConnectionPool connectionPool>;

        entermonitor $r5;

     label3:
        r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.internal.http.HttpCodec codec> = $r4;

        exitmonitor $r5;

     label4:
        return $r4;

     label5:
        $r6 := @caughtexception;

        exitmonitor $r5;

     label6:
        throw $r6;

     label7:
        r2 := @caughtexception;

        $r7 = new okhttp3.internal.connection.RouteException;

        specialinvoke $r7.<okhttp3.internal.connection.RouteException: void <init>(java.io.IOException)>(r2);

        throw $r7;

        catch java.io.IOException from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
        catch java.io.IOException from label6 to label7 with label7;
    }
    public void noNewStreams()
    {
        okhttp3.internal.connection.StreamAllocation r0;
        okhttp3.ConnectionPool $r1;
        java.net.Socket $r2;
        java.lang.Throwable $r3;

        r0 := @this: okhttp3.internal.connection.StreamAllocation;

        $r1 = r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.ConnectionPool connectionPool>;

        entermonitor $r1;

     label1:
        $r2 = specialinvoke r0.<okhttp3.internal.connection.StreamAllocation: java.net.Socket deallocate(boolean,boolean,boolean)>(1, 0, 0);

        exitmonitor $r1;

     label2:
        staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r2);

        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor $r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }
    public void release()
    {
        okhttp3.internal.connection.StreamAllocation r0;
        okhttp3.ConnectionPool $r1;
        java.net.Socket $r2;
        java.lang.Throwable $r3;

        r0 := @this: okhttp3.internal.connection.StreamAllocation;

        $r1 = r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.ConnectionPool connectionPool>;

        entermonitor $r1;

     label1:
        $r2 = specialinvoke r0.<okhttp3.internal.connection.StreamAllocation: java.net.Socket deallocate(boolean,boolean,boolean)>(0, 1, 0);

        exitmonitor $r1;

     label2:
        staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r2);

        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor $r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }
    public java.net.Socket releaseAndAcquire(okhttp3.internal.connection.RealConnection)
    {
        okhttp3.internal.connection.StreamAllocation r0;
        okhttp3.internal.connection.RealConnection $r1, $r5;
        boolean $z0;
        okhttp3.ConnectionPool $r2;
        java.lang.AssertionError $r3;
        okhttp3.internal.http.HttpCodec $r4;
        java.util.List $r6;
        int $i0;
        java.lang.IllegalStateException $r7;
        java.lang.Object $r8;
        java.lang.ref.Reference r9;
        java.net.Socket $r10;

        r0 := @this: okhttp3.internal.connection.StreamAllocation;

        $r1 := @parameter0: okhttp3.internal.connection.RealConnection;

        $z0 = <okhttp3.internal.connection.StreamAllocation: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r2 = r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.ConnectionPool connectionPool>;

        $z0 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        $r4 = r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.internal.http.HttpCodec codec>;

        if $r4 != null goto label2;

        $r5 = r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.internal.connection.RealConnection connection>;

        $r6 = $r5.<okhttp3.internal.connection.RealConnection: java.util.List allocations>;

        $i0 = interfaceinvoke $r6.<java.util.List: int size()>();

        if $i0 == 1 goto label3;

     label2:
        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>()>();

        throw $r7;

     label3:
        $r5 = r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.internal.connection.RealConnection connection>;

        $r6 = $r5.<okhttp3.internal.connection.RealConnection: java.util.List allocations>;

        $r8 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>(0);

        r9 = (java.lang.ref.Reference) $r8;

        $r10 = specialinvoke r0.<okhttp3.internal.connection.StreamAllocation: java.net.Socket deallocate(boolean,boolean,boolean)>(1, 0, 0);

        r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.internal.connection.RealConnection connection> = $r1;

        $r6 = $r1.<okhttp3.internal.connection.RealConnection: java.util.List allocations>;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r9);

        return $r10;
    }
    public void streamFailed(java.io.IOException)
    {
        okhttp3.internal.connection.StreamAllocation r0;
        java.io.IOException $r1;
        okhttp3.ConnectionPool $r2;
        boolean z0, $z1;
        okhttp3.internal.http2.StreamResetException $r3;
        okhttp3.internal.http2.ErrorCode $r4, $r5;
        int $i0;
        java.net.Socket $r6;
        okhttp3.internal.connection.RealConnection $r7;
        okhttp3.Route $r8;
        okhttp3.internal.connection.RouteSelector $r9;
        java.lang.Throwable $r10;

        r0 := @this: okhttp3.internal.connection.StreamAllocation;

        $r1 := @parameter0: java.io.IOException;

        z0 = 0;

        $r2 = r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.ConnectionPool connectionPool>;

        entermonitor $r2;

     label01:
        $z1 = $r1 instanceof okhttp3.internal.http2.StreamResetException;

        if $z1 == 0 goto label06;

        $r3 = (okhttp3.internal.http2.StreamResetException) $r1;

        $r4 = $r3.<okhttp3.internal.http2.StreamResetException: okhttp3.internal.http2.ErrorCode errorCode>;

        $r5 = <okhttp3.internal.http2.ErrorCode: okhttp3.internal.http2.ErrorCode REFUSED_STREAM>;

        if $r4 != $r5 goto label02;

        $i0 = r0.<okhttp3.internal.connection.StreamAllocation: int refusedStreamCount>;

        $i0 = $i0 + 1;

        r0.<okhttp3.internal.connection.StreamAllocation: int refusedStreamCount> = $i0;

     label02:
        $r4 = $r3.<okhttp3.internal.http2.StreamResetException: okhttp3.internal.http2.ErrorCode errorCode>;

        $r5 = <okhttp3.internal.http2.ErrorCode: okhttp3.internal.http2.ErrorCode REFUSED_STREAM>;

        if $r4 != $r5 goto label03;

        $i0 = r0.<okhttp3.internal.connection.StreamAllocation: int refusedStreamCount>;

        if $i0 <= 1 goto label04;

     label03:
        z0 = 1;

        r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.Route route> = null;

     label04:
        $r6 = specialinvoke r0.<okhttp3.internal.connection.StreamAllocation: java.net.Socket deallocate(boolean,boolean,boolean)>(z0, 0, 1);

        exitmonitor $r2;

     label05:
        staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r6);

        return;

     label06:
        $r7 = r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.internal.connection.RealConnection connection>;

        if $r7 == null goto label04;

        $r7 = r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.internal.connection.RealConnection connection>;

        $z1 = virtualinvoke $r7.<okhttp3.internal.connection.RealConnection: boolean isMultiplexed()>();

        if $z1 == 0 goto label07;

        $z1 = $r1 instanceof okhttp3.internal.http2.ConnectionShutdownException;

        if $z1 == 0 goto label04;

     label07:
        z0 = 1;

        $r7 = r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.internal.connection.RealConnection connection>;

        $i0 = $r7.<okhttp3.internal.connection.RealConnection: int successCount>;

        if $i0 != 0 goto label04;

        $r8 = r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.Route route>;

        if $r8 == null goto label08;

        if $r1 == null goto label08;

        $r9 = r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.internal.connection.RouteSelector routeSelector>;

        $r8 = r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.Route route>;

        virtualinvoke $r9.<okhttp3.internal.connection.RouteSelector: void connectFailed(okhttp3.Route,java.io.IOException)>($r8, $r1);

     label08:
        r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.Route route> = null;

        goto label04;

     label09:
        $r10 := @caughtexception;

        exitmonitor $r2;

     label10:
        throw $r10;

        catch java.lang.Throwable from label01 to label05 with label09;
        catch java.lang.Throwable from label06 to label10 with label09;
    }
    public void streamFinished(boolean, okhttp3.internal.http.HttpCodec)
    {
        okhttp3.internal.connection.StreamAllocation r0;
        boolean $z0;
        okhttp3.internal.http.HttpCodec $r1, $r3;
        okhttp3.ConnectionPool $r2;
        java.lang.IllegalStateException $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;
        java.lang.Throwable $r7;
        okhttp3.internal.connection.RealConnection $r8;
        int $i0;
        java.net.Socket $r9;

        r0 := @this: okhttp3.internal.connection.StreamAllocation;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: okhttp3.internal.http.HttpCodec;

        $r2 = r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.ConnectionPool connectionPool>;

        entermonitor $r2;

        if $r1 == null goto label2;

     label1:
        $r3 = r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.internal.http.HttpCodec codec>;

        if $r1 == $r3 goto label5;

     label2:
        $r4 = new java.lang.IllegalStateException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected ");

        $r3 = r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.internal.http.HttpCodec codec>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but was ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        throw $r4;

     label3:
        $r7 := @caughtexception;

        exitmonitor $r2;

     label4:
        throw $r7;

     label5:
        if $z0 != 0 goto label7;

     label6:
        $r8 = r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.internal.connection.RealConnection connection>;

        $i0 = $r8.<okhttp3.internal.connection.RealConnection: int successCount>;

        $i0 = $i0 + 1;

        $r8.<okhttp3.internal.connection.RealConnection: int successCount> = $i0;

     label7:
        $r9 = specialinvoke r0.<okhttp3.internal.connection.StreamAllocation: java.net.Socket deallocate(boolean,boolean,boolean)>($z0, 0, 1);

        exitmonitor $r2;

     label8:
        staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r9);

        return;

        catch java.lang.Throwable from label1 to label4 with label3;
        catch java.lang.Throwable from label6 to label8 with label3;
    }
    public java.lang.String toString()
    {
        okhttp3.internal.connection.StreamAllocation r0;
        okhttp3.internal.connection.RealConnection $r1;
        java.lang.String $r2;
        okhttp3.Address $r3;

        r0 := @this: okhttp3.internal.connection.StreamAllocation;

        $r1 = virtualinvoke r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.internal.connection.RealConnection connection()>();

        if $r1 == null goto label1;

        $r2 = virtualinvoke $r1.<okhttp3.internal.connection.RealConnection: java.lang.String toString()>();

        return $r2;

     label1:
        $r3 = r0.<okhttp3.internal.connection.StreamAllocation: okhttp3.Address address>;

        $r2 = virtualinvoke $r3.<okhttp3.Address: java.lang.String toString()>();

        return $r2;
    }
