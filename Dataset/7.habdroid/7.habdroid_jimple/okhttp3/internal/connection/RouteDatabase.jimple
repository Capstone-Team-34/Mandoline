okhttp3.internal.connection.RouteDatabase extends java.lang.Object
private final java.util.Set failedRoutes
    public void <init>()
    {
        okhttp3.internal.connection.RouteDatabase r0;
        java.util.LinkedHashSet $r1;

        r0 := @this: okhttp3.internal.connection.RouteDatabase;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.LinkedHashSet;

        specialinvoke $r1.<java.util.LinkedHashSet: void <init>()>();

        r0.<okhttp3.internal.connection.RouteDatabase: java.util.Set failedRoutes> = $r1;

        return;
    }
    public void connected(okhttp3.Route)
    {
        okhttp3.internal.connection.RouteDatabase r0;
        okhttp3.Route $r1;
        java.util.Set $r2;
        java.lang.Throwable $r3;

        r0 := @this: okhttp3.internal.connection.RouteDatabase;

        $r1 := @parameter0: okhttp3.Route;

        entermonitor r0;

     label1:
        $r2 = r0.<okhttp3.internal.connection.RouteDatabase: java.util.Set failedRoutes>;

        interfaceinvoke $r2.<java.util.Set: boolean remove(java.lang.Object)>($r1);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public void failed(okhttp3.Route)
    {
        okhttp3.internal.connection.RouteDatabase r0;
        okhttp3.Route $r1;
        java.util.Set $r2;
        java.lang.Throwable $r3;

        r0 := @this: okhttp3.internal.connection.RouteDatabase;

        $r1 := @parameter0: okhttp3.Route;

        entermonitor r0;

     label1:
        $r2 = r0.<okhttp3.internal.connection.RouteDatabase: java.util.Set failedRoutes>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r1);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public boolean shouldPostpone(okhttp3.Route)
    {
        okhttp3.internal.connection.RouteDatabase r0;
        okhttp3.Route $r1;
        boolean $z0;
        java.util.Set $r2;
        java.lang.Throwable $r3;

        r0 := @this: okhttp3.internal.connection.RouteDatabase;

        $r1 := @parameter0: okhttp3.Route;

        entermonitor r0;

     label1:
        $r2 = r0.<okhttp3.internal.connection.RouteDatabase: java.util.Set failedRoutes>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r1);

     label2:
        exitmonitor r0;

        return $z0;

     label3:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
