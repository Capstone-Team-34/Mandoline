okhttp3.internal.cache.CacheStrategy$Factory extends java.lang.Object
private int ageSeconds
final okhttp3.Response cacheResponse
private java.lang.String etag
private java.util.Date expires
private java.util.Date lastModified
private java.lang.String lastModifiedString
final long nowMillis
private long receivedResponseMillis
final okhttp3.Request request
private long sentRequestMillis
private java.util.Date servedDate
private java.lang.String servedDateString
    public void <init>(long, okhttp3.Request, okhttp3.Response)
    {
        okhttp3.internal.cache.CacheStrategy$Factory r0;
        long $l0;
        okhttp3.Request $r1;
        okhttp3.Response $r2;
        okhttp3.Headers $r3;
        int i1, $i2, $i3;
        java.lang.String $r4, $r5, $r6;
        boolean $z0;
        java.util.Date $r7;

        r0 := @this: okhttp3.internal.cache.CacheStrategy$Factory;

        $l0 := @parameter0: long;

        $r1 := @parameter1: okhttp3.Request;

        $r2 := @parameter2: okhttp3.Response;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<okhttp3.internal.cache.CacheStrategy$Factory: int ageSeconds> = -1;

        r0.<okhttp3.internal.cache.CacheStrategy$Factory: long nowMillis> = $l0;

        r0.<okhttp3.internal.cache.CacheStrategy$Factory: okhttp3.Request request> = $r1;

        r0.<okhttp3.internal.cache.CacheStrategy$Factory: okhttp3.Response cacheResponse> = $r2;

        if $r2 == null goto label7;

        $l0 = virtualinvoke $r2.<okhttp3.Response: long sentRequestAtMillis()>();

        r0.<okhttp3.internal.cache.CacheStrategy$Factory: long sentRequestMillis> = $l0;

        $l0 = virtualinvoke $r2.<okhttp3.Response: long receivedResponseAtMillis()>();

        r0.<okhttp3.internal.cache.CacheStrategy$Factory: long receivedResponseMillis> = $l0;

        $r3 = virtualinvoke $r2.<okhttp3.Response: okhttp3.Headers headers()>();

        i1 = 0;

        $i2 = virtualinvoke $r3.<okhttp3.Headers: int size()>();

     label1:
        if i1 >= $i2 goto label7;

        $r4 = virtualinvoke $r3.<okhttp3.Headers: java.lang.String name(int)>(i1);

        $r5 = virtualinvoke $r3.<okhttp3.Headers: java.lang.String value(int)>(i1);

        $r6 = "Date";

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r4);

        if $z0 == 0 goto label3;

        $r7 = staticinvoke <okhttp3.internal.http.HttpDate: java.util.Date parse(java.lang.String)>($r5);

        r0.<okhttp3.internal.cache.CacheStrategy$Factory: java.util.Date servedDate> = $r7;

        r0.<okhttp3.internal.cache.CacheStrategy$Factory: java.lang.String servedDateString> = $r5;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r6 = "Expires";

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r4);

        if $z0 == 0 goto label4;

        $r7 = staticinvoke <okhttp3.internal.http.HttpDate: java.util.Date parse(java.lang.String)>($r5);

        r0.<okhttp3.internal.cache.CacheStrategy$Factory: java.util.Date expires> = $r7;

        goto label2;

     label4:
        $r6 = "Last-Modified";

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r4);

        if $z0 == 0 goto label5;

        $r7 = staticinvoke <okhttp3.internal.http.HttpDate: java.util.Date parse(java.lang.String)>($r5);

        r0.<okhttp3.internal.cache.CacheStrategy$Factory: java.util.Date lastModified> = $r7;

        r0.<okhttp3.internal.cache.CacheStrategy$Factory: java.lang.String lastModifiedString> = $r5;

        goto label2;

     label5:
        $r6 = "ETag";

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r4);

        if $z0 == 0 goto label6;

        r0.<okhttp3.internal.cache.CacheStrategy$Factory: java.lang.String etag> = $r5;

        goto label2;

     label6:
        $r6 = "Age";

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r4);

        if $z0 == 0 goto label2;

        $i3 = staticinvoke <okhttp3.internal.http.HttpHeaders: int parseSeconds(java.lang.String,int)>($r5, -1);

        r0.<okhttp3.internal.cache.CacheStrategy$Factory: int ageSeconds> = $i3;

        goto label2;

     label7:
        return;
    }
    private long cacheResponseAge()
    {
        okhttp3.internal.cache.CacheStrategy$Factory r0;
        long l0, l1, l2, $l4;
        java.util.Date $r1;
        int $i3;
        java.util.concurrent.TimeUnit $r2;

        r0 := @this: okhttp3.internal.cache.CacheStrategy$Factory;

        l2 = 0L;

        $r1 = r0.<okhttp3.internal.cache.CacheStrategy$Factory: java.util.Date servedDate>;

        if $r1 == null goto label1;

        l2 = r0.<okhttp3.internal.cache.CacheStrategy$Factory: long receivedResponseMillis>;

        $r1 = r0.<okhttp3.internal.cache.CacheStrategy$Factory: java.util.Date servedDate>;

        l1 = virtualinvoke $r1.<java.util.Date: long getTime()>();

        l2 = l2 - l1;

        l2 = staticinvoke <java.lang.Math: long max(long,long)>(0L, l2);

     label1:
        $i3 = r0.<okhttp3.internal.cache.CacheStrategy$Factory: int ageSeconds>;

        if $i3 == -1 goto label3;

        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $i3 = r0.<okhttp3.internal.cache.CacheStrategy$Factory: int ageSeconds>;

        l1 = (long) $i3;

        l1 = virtualinvoke $r2.<java.util.concurrent.TimeUnit: long toMillis(long)>(l1);

        l2 = staticinvoke <java.lang.Math: long max(long,long)>(l2, l1);

     label2:
        l1 = r0.<okhttp3.internal.cache.CacheStrategy$Factory: long receivedResponseMillis>;

        l0 = r0.<okhttp3.internal.cache.CacheStrategy$Factory: long sentRequestMillis>;

        l1 = l1 - l0;

        l0 = r0.<okhttp3.internal.cache.CacheStrategy$Factory: long nowMillis>;

        $l4 = r0.<okhttp3.internal.cache.CacheStrategy$Factory: long receivedResponseMillis>;

        l0 = l0 - $l4;

        l2 = l2 + l1;

        l2 = l2 + l0;

        return l2;

     label3:
        goto label2;
    }
    private long computeFreshnessLifetime()
    {
        okhttp3.internal.cache.CacheStrategy$Factory r0;
        okhttp3.Response $r1;
        okhttp3.CacheControl $r2;
        int $i0;
        java.util.concurrent.TimeUnit $r3;
        long $l1, $l2;
        java.util.Date $r4;
        byte $b3;
        okhttp3.Request $r5;
        okhttp3.HttpUrl $r6;
        java.lang.String $r7;

        r0 := @this: okhttp3.internal.cache.CacheStrategy$Factory;

        $r1 = r0.<okhttp3.internal.cache.CacheStrategy$Factory: okhttp3.Response cacheResponse>;

        $r2 = virtualinvoke $r1.<okhttp3.Response: okhttp3.CacheControl cacheControl()>();

        $i0 = virtualinvoke $r2.<okhttp3.CacheControl: int maxAgeSeconds()>();

        if $i0 == -1 goto label1;

        $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $i0 = virtualinvoke $r2.<okhttp3.CacheControl: int maxAgeSeconds()>();

        $l1 = (long) $i0;

        $l1 = virtualinvoke $r3.<java.util.concurrent.TimeUnit: long toMillis(long)>($l1);

        return $l1;

     label1:
        $r4 = r0.<okhttp3.internal.cache.CacheStrategy$Factory: java.util.Date expires>;

        if $r4 == null goto label6;

        $r4 = r0.<okhttp3.internal.cache.CacheStrategy$Factory: java.util.Date servedDate>;

        if $r4 == null goto label4;

        $r4 = r0.<okhttp3.internal.cache.CacheStrategy$Factory: java.util.Date servedDate>;

        $l1 = virtualinvoke $r4.<java.util.Date: long getTime()>();

     label2:
        $r4 = r0.<okhttp3.internal.cache.CacheStrategy$Factory: java.util.Date expires>;

        $l2 = virtualinvoke $r4.<java.util.Date: long getTime()>();

        $l1 = $l2 - $l1;

        $b3 = $l1 cmp 0L;

        if $b3 <= 0 goto label5;

     label3:
        return $l1;

     label4:
        $l1 = r0.<okhttp3.internal.cache.CacheStrategy$Factory: long receivedResponseMillis>;

        goto label2;

     label5:
        $l1 = 0L;

        goto label3;

     label6:
        $r4 = r0.<okhttp3.internal.cache.CacheStrategy$Factory: java.util.Date lastModified>;

        if $r4 == null goto label9;

        $r1 = r0.<okhttp3.internal.cache.CacheStrategy$Factory: okhttp3.Response cacheResponse>;

        $r5 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Request request()>();

        $r6 = virtualinvoke $r5.<okhttp3.Request: okhttp3.HttpUrl url()>();

        $r7 = virtualinvoke $r6.<okhttp3.HttpUrl: java.lang.String query()>();

        if $r7 != null goto label9;

        $r4 = r0.<okhttp3.internal.cache.CacheStrategy$Factory: java.util.Date servedDate>;

        if $r4 == null goto label8;

        $r4 = r0.<okhttp3.internal.cache.CacheStrategy$Factory: java.util.Date servedDate>;

        $l1 = virtualinvoke $r4.<java.util.Date: long getTime()>();

     label7:
        $r4 = r0.<okhttp3.internal.cache.CacheStrategy$Factory: java.util.Date lastModified>;

        $l2 = virtualinvoke $r4.<java.util.Date: long getTime()>();

        $l1 = $l1 - $l2;

        $b3 = $l1 cmp 0L;

        if $b3 <= 0 goto label9;

        $l1 = $l1 / 10L;

        return $l1;

     label8:
        $l1 = r0.<okhttp3.internal.cache.CacheStrategy$Factory: long sentRequestMillis>;

        goto label7;

     label9:
        return 0L;
    }
    private okhttp3.internal.cache.CacheStrategy getCandidate()
    {
        okhttp3.internal.cache.CacheStrategy$Factory r0;
        long $l0, $l1, $l2, l3, $l5;
        okhttp3.Response $r1;
        okhttp3.internal.cache.CacheStrategy $r2;
        okhttp3.Request $r3;
        boolean $z0;
        okhttp3.Handshake $r4;
        okhttp3.CacheControl $r5, $r7;
        int $i4;
        java.util.concurrent.TimeUnit $r6;
        byte $b6;
        okhttp3.Response$Builder $r8;
        java.lang.String $r9, r10;
        okhttp3.Headers $r11;
        okhttp3.Headers$Builder $r12;
        okhttp3.internal.Internal $r13;
        okhttp3.Request$Builder $r14;
        java.util.Date $r15;

        r0 := @this: okhttp3.internal.cache.CacheStrategy$Factory;

        $r1 = r0.<okhttp3.internal.cache.CacheStrategy$Factory: okhttp3.Response cacheResponse>;

        if $r1 != null goto label01;

        $r2 = new okhttp3.internal.cache.CacheStrategy;

        $r3 = r0.<okhttp3.internal.cache.CacheStrategy$Factory: okhttp3.Request request>;

        specialinvoke $r2.<okhttp3.internal.cache.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response)>($r3, null);

        return $r2;

     label01:
        $r3 = r0.<okhttp3.internal.cache.CacheStrategy$Factory: okhttp3.Request request>;

        $z0 = virtualinvoke $r3.<okhttp3.Request: boolean isHttps()>();

        if $z0 == 0 goto label02;

        $r1 = r0.<okhttp3.internal.cache.CacheStrategy$Factory: okhttp3.Response cacheResponse>;

        $r4 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Handshake handshake()>();

        if $r4 != null goto label02;

        $r2 = new okhttp3.internal.cache.CacheStrategy;

        $r3 = r0.<okhttp3.internal.cache.CacheStrategy$Factory: okhttp3.Request request>;

        specialinvoke $r2.<okhttp3.internal.cache.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response)>($r3, null);

        return $r2;

     label02:
        $r1 = r0.<okhttp3.internal.cache.CacheStrategy$Factory: okhttp3.Response cacheResponse>;

        $r3 = r0.<okhttp3.internal.cache.CacheStrategy$Factory: okhttp3.Request request>;

        $z0 = staticinvoke <okhttp3.internal.cache.CacheStrategy: boolean isCacheable(okhttp3.Response,okhttp3.Request)>($r1, $r3);

        if $z0 != 0 goto label03;

        $r2 = new okhttp3.internal.cache.CacheStrategy;

        $r3 = r0.<okhttp3.internal.cache.CacheStrategy$Factory: okhttp3.Request request>;

        specialinvoke $r2.<okhttp3.internal.cache.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response)>($r3, null);

        return $r2;

     label03:
        $r3 = r0.<okhttp3.internal.cache.CacheStrategy$Factory: okhttp3.Request request>;

        $r5 = virtualinvoke $r3.<okhttp3.Request: okhttp3.CacheControl cacheControl()>();

        $z0 = virtualinvoke $r5.<okhttp3.CacheControl: boolean noCache()>();

        if $z0 != 0 goto label04;

        $r3 = r0.<okhttp3.internal.cache.CacheStrategy$Factory: okhttp3.Request request>;

        $z0 = staticinvoke <okhttp3.internal.cache.CacheStrategy$Factory: boolean hasConditions(okhttp3.Request)>($r3);

        if $z0 == 0 goto label05;

     label04:
        $r2 = new okhttp3.internal.cache.CacheStrategy;

        $r3 = r0.<okhttp3.internal.cache.CacheStrategy$Factory: okhttp3.Request request>;

        specialinvoke $r2.<okhttp3.internal.cache.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response)>($r3, null);

        return $r2;

     label05:
        $l1 = specialinvoke r0.<okhttp3.internal.cache.CacheStrategy$Factory: long cacheResponseAge()>();

        $l2 = specialinvoke r0.<okhttp3.internal.cache.CacheStrategy$Factory: long computeFreshnessLifetime()>();

        l3 = $l2;

        $i4 = virtualinvoke $r5.<okhttp3.CacheControl: int maxAgeSeconds()>();

        if $i4 == -1 goto label06;

        $r6 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $i4 = virtualinvoke $r5.<okhttp3.CacheControl: int maxAgeSeconds()>();

        l3 = (long) $i4;

        l3 = virtualinvoke $r6.<java.util.concurrent.TimeUnit: long toMillis(long)>(l3);

        l3 = staticinvoke <java.lang.Math: long min(long,long)>($l2, l3);

     label06:
        $l2 = 0L;

        $i4 = virtualinvoke $r5.<okhttp3.CacheControl: int minFreshSeconds()>();

        if $i4 == -1 goto label07;

        $r6 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $i4 = virtualinvoke $r5.<okhttp3.CacheControl: int minFreshSeconds()>();

        $l2 = (long) $i4;

        $l2 = virtualinvoke $r6.<java.util.concurrent.TimeUnit: long toMillis(long)>($l2);

     label07:
        $l0 = 0L;

        $r1 = r0.<okhttp3.internal.cache.CacheStrategy$Factory: okhttp3.Response cacheResponse>;

        $r7 = virtualinvoke $r1.<okhttp3.Response: okhttp3.CacheControl cacheControl()>();

        $z0 = virtualinvoke $r7.<okhttp3.CacheControl: boolean mustRevalidate()>();

        if $z0 != 0 goto label08;

        $i4 = virtualinvoke $r5.<okhttp3.CacheControl: int maxStaleSeconds()>();

        if $i4 == -1 goto label08;

        $r6 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $i4 = virtualinvoke $r5.<okhttp3.CacheControl: int maxStaleSeconds()>();

        $l5 = (long) $i4;

        $l0 = virtualinvoke $r6.<java.util.concurrent.TimeUnit: long toMillis(long)>($l5);

     label08:
        $z0 = virtualinvoke $r7.<okhttp3.CacheControl: boolean noCache()>();

        if $z0 != 0 goto label11;

        $l5 = $l1 + $l2;

        $l0 = l3 + $l0;

        $b6 = $l5 cmp $l0;

        if $b6 >= 0 goto label11;

        $r1 = r0.<okhttp3.internal.cache.CacheStrategy$Factory: okhttp3.Response cacheResponse>;

        $r8 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Response$Builder newBuilder()>();

        $l2 = $l1 + $l2;

        $b6 = $l2 cmp l3;

        if $b6 < 0 goto label09;

        virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder addHeader(java.lang.String,java.lang.String)>("Warning", "110 HttpURLConnection \"Response is stale\"");

     label09:
        $b6 = $l1 cmp 86400000L;

        if $b6 <= 0 goto label10;

        $z0 = specialinvoke r0.<okhttp3.internal.cache.CacheStrategy$Factory: boolean isFreshnessLifetimeHeuristic()>();

        if $z0 == 0 goto label10;

        virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder addHeader(java.lang.String,java.lang.String)>("Warning", "113 HttpURLConnection \"Heuristic expiration\"");

     label10:
        $r2 = new okhttp3.internal.cache.CacheStrategy;

        $r1 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response build()>();

        specialinvoke $r2.<okhttp3.internal.cache.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response)>(null, $r1);

        return $r2;

     label11:
        $r9 = r0.<okhttp3.internal.cache.CacheStrategy$Factory: java.lang.String etag>;

        if $r9 == null goto label13;

        $r9 = "If-None-Match";

        r10 = r0.<okhttp3.internal.cache.CacheStrategy$Factory: java.lang.String etag>;

     label12:
        $r3 = r0.<okhttp3.internal.cache.CacheStrategy$Factory: okhttp3.Request request>;

        $r11 = virtualinvoke $r3.<okhttp3.Request: okhttp3.Headers headers()>();

        $r12 = virtualinvoke $r11.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>();

        $r13 = <okhttp3.internal.Internal: okhttp3.internal.Internal instance>;

        virtualinvoke $r13.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String,java.lang.String)>($r12, $r9, r10);

        $r3 = r0.<okhttp3.internal.cache.CacheStrategy$Factory: okhttp3.Request request>;

        $r14 = virtualinvoke $r3.<okhttp3.Request: okhttp3.Request$Builder newBuilder()>();

        $r11 = virtualinvoke $r12.<okhttp3.Headers$Builder: okhttp3.Headers build()>();

        $r14 = virtualinvoke $r14.<okhttp3.Request$Builder: okhttp3.Request$Builder headers(okhttp3.Headers)>($r11);

        $r3 = virtualinvoke $r14.<okhttp3.Request$Builder: okhttp3.Request build()>();

        $r2 = new okhttp3.internal.cache.CacheStrategy;

        $r1 = r0.<okhttp3.internal.cache.CacheStrategy$Factory: okhttp3.Response cacheResponse>;

        specialinvoke $r2.<okhttp3.internal.cache.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response)>($r3, $r1);

        return $r2;

     label13:
        $r15 = r0.<okhttp3.internal.cache.CacheStrategy$Factory: java.util.Date lastModified>;

        if $r15 == null goto label14;

        $r9 = "If-Modified-Since";

        r10 = r0.<okhttp3.internal.cache.CacheStrategy$Factory: java.lang.String lastModifiedString>;

        goto label12;

     label14:
        $r15 = r0.<okhttp3.internal.cache.CacheStrategy$Factory: java.util.Date servedDate>;

        if $r15 == null goto label15;

        $r9 = "If-Modified-Since";

        r10 = r0.<okhttp3.internal.cache.CacheStrategy$Factory: java.lang.String servedDateString>;

        goto label12;

     label15:
        $r2 = new okhttp3.internal.cache.CacheStrategy;

        $r3 = r0.<okhttp3.internal.cache.CacheStrategy$Factory: okhttp3.Request request>;

        specialinvoke $r2.<okhttp3.internal.cache.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response)>($r3, null);

        return $r2;
    }
    private static boolean hasConditions(okhttp3.Request)
    {
        okhttp3.Request $r0;
        java.lang.String $r1;

        $r0 := @parameter0: okhttp3.Request;

        $r1 = virtualinvoke $r0.<okhttp3.Request: java.lang.String header(java.lang.String)>("If-Modified-Since");

        if $r1 != null goto label1;

        $r1 = virtualinvoke $r0.<okhttp3.Request: java.lang.String header(java.lang.String)>("If-None-Match");

        if $r1 == null goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    private boolean isFreshnessLifetimeHeuristic()
    {
        okhttp3.internal.cache.CacheStrategy$Factory r0;
        okhttp3.Response $r1;
        okhttp3.CacheControl $r2;
        int $i0;
        java.util.Date $r3;

        r0 := @this: okhttp3.internal.cache.CacheStrategy$Factory;

        $r1 = r0.<okhttp3.internal.cache.CacheStrategy$Factory: okhttp3.Response cacheResponse>;

        $r2 = virtualinvoke $r1.<okhttp3.Response: okhttp3.CacheControl cacheControl()>();

        $i0 = virtualinvoke $r2.<okhttp3.CacheControl: int maxAgeSeconds()>();

        if $i0 != -1 goto label1;

        $r3 = r0.<okhttp3.internal.cache.CacheStrategy$Factory: java.util.Date expires>;

        if $r3 != null goto label1;

        return 1;

     label1:
        return 0;
    }
    public okhttp3.internal.cache.CacheStrategy get()
    {
        okhttp3.internal.cache.CacheStrategy$Factory r0;
        okhttp3.internal.cache.CacheStrategy $r1;
        okhttp3.Request $r2;
        okhttp3.CacheControl $r3;
        boolean $z0;

        r0 := @this: okhttp3.internal.cache.CacheStrategy$Factory;

        $r1 = specialinvoke r0.<okhttp3.internal.cache.CacheStrategy$Factory: okhttp3.internal.cache.CacheStrategy getCandidate()>();

        $r2 = $r1.<okhttp3.internal.cache.CacheStrategy: okhttp3.Request networkRequest>;

        if $r2 == null goto label1;

        $r2 = r0.<okhttp3.internal.cache.CacheStrategy$Factory: okhttp3.Request request>;

        $r3 = virtualinvoke $r2.<okhttp3.Request: okhttp3.CacheControl cacheControl()>();

        $z0 = virtualinvoke $r3.<okhttp3.CacheControl: boolean onlyIfCached()>();

        if $z0 == 0 goto label1;

        $r1 = new okhttp3.internal.cache.CacheStrategy;

        specialinvoke $r1.<okhttp3.internal.cache.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response)>(null, null);

     label1:
        return $r1;
    }
