okhttp3.internal.cache.CacheInterceptor extends java.lang.Object implements okhttp3.Interceptor
final okhttp3.internal.cache.InternalCache cache
    public void <init>(okhttp3.internal.cache.InternalCache)
    {
        okhttp3.internal.cache.CacheInterceptor r0;
        okhttp3.internal.cache.InternalCache $r1;

        r0 := @this: okhttp3.internal.cache.CacheInterceptor;

        $r1 := @parameter0: okhttp3.internal.cache.InternalCache;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<okhttp3.internal.cache.CacheInterceptor: okhttp3.internal.cache.InternalCache cache> = $r1;

        return;
    }
    private okhttp3.Response cacheWritingResponse(okhttp3.internal.cache.CacheRequest, okhttp3.Response) throws java.io.IOException
    {
        okhttp3.internal.cache.CacheInterceptor r0;
        okhttp3.internal.cache.CacheRequest $r1;
        okhttp3.internal.cache.CacheInterceptor$1 r2;
        okhttp3.internal.http.RealResponseBody $r3;
        okhttp3.Response r4;
        okio.Sink $r5;
        okhttp3.ResponseBody $r6;
        okio.BufferedSource $r7;
        okio.BufferedSink $r8;
        okhttp3.Response$Builder $r9;
        okhttp3.Headers $r10;

        r0 := @this: okhttp3.internal.cache.CacheInterceptor;

        $r1 := @parameter0: okhttp3.internal.cache.CacheRequest;

        r4 := @parameter1: okhttp3.Response;

        if $r1 != null goto label1;

        return r4;

     label1:
        $r5 = interfaceinvoke $r1.<okhttp3.internal.cache.CacheRequest: okio.Sink body()>();

        if $r5 == null goto label2;

        $r6 = virtualinvoke r4.<okhttp3.Response: okhttp3.ResponseBody body()>();

        $r7 = virtualinvoke $r6.<okhttp3.ResponseBody: okio.BufferedSource source()>();

        $r8 = staticinvoke <okio.Okio: okio.BufferedSink buffer(okio.Sink)>($r5);

        r2 = new okhttp3.internal.cache.CacheInterceptor$1;

        specialinvoke r2.<okhttp3.internal.cache.CacheInterceptor$1: void <init>(okhttp3.internal.cache.CacheInterceptor,okio.BufferedSource,okhttp3.internal.cache.CacheRequest,okio.BufferedSink)>(r0, $r7, $r1, $r8);

        $r9 = virtualinvoke r4.<okhttp3.Response: okhttp3.Response$Builder newBuilder()>();

        $r3 = new okhttp3.internal.http.RealResponseBody;

        $r10 = virtualinvoke r4.<okhttp3.Response: okhttp3.Headers headers()>();

        $r7 = staticinvoke <okio.Okio: okio.BufferedSource buffer(okio.Source)>(r2);

        specialinvoke $r3.<okhttp3.internal.http.RealResponseBody: void <init>(okhttp3.Headers,okio.BufferedSource)>($r10, $r7);

        $r9 = virtualinvoke $r9.<okhttp3.Response$Builder: okhttp3.Response$Builder body(okhttp3.ResponseBody)>($r3);

        r4 = virtualinvoke $r9.<okhttp3.Response$Builder: okhttp3.Response build()>();

     label2:
        return r4;
    }
    private static okhttp3.Headers combine(okhttp3.Headers, okhttp3.Headers)
    {
        okhttp3.Headers $r0, $r1;
        okhttp3.Headers$Builder r2;
        int i0, $i1;
        java.lang.String $r3, $r4, $r5;
        boolean $z0;
        okhttp3.internal.Internal $r6;

        $r0 := @parameter0: okhttp3.Headers;

        $r1 := @parameter1: okhttp3.Headers;

        r2 = new okhttp3.Headers$Builder;

        specialinvoke r2.<okhttp3.Headers$Builder: void <init>()>();

        i0 = 0;

        $i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>();

     label1:
        if i0 >= $i1 goto label5;

        $r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>(i0);

        $r4 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>(i0);

        $r5 = "Warning";

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r3);

        if $z0 == 0 goto label3;

        $z0 = virtualinvoke $r4.<java.lang.String: boolean startsWith(java.lang.String)>("1");

        if $z0 == 0 goto label3;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        $z0 = staticinvoke <okhttp3.internal.cache.CacheInterceptor: boolean isEndToEnd(java.lang.String)>($r3);

        if $z0 == 0 goto label4;

        $r5 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r3);

        if $r5 != null goto label2;

     label4:
        $r6 = <okhttp3.internal.Internal: okhttp3.internal.Internal instance>;

        virtualinvoke $r6.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String,java.lang.String)>(r2, $r3, $r4);

        goto label2;

     label5:
        i0 = 0;

        $i1 = virtualinvoke $r1.<okhttp3.Headers: int size()>();

     label6:
        if i0 >= $i1 goto label9;

        $r3 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>(i0);

        $r4 = "Content-Length";

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r3);

        if $z0 == 0 goto label8;

     label7:
        i0 = i0 + 1;

        goto label6;

     label8:
        $z0 = staticinvoke <okhttp3.internal.cache.CacheInterceptor: boolean isEndToEnd(java.lang.String)>($r3);

        if $z0 == 0 goto label7;

        $r6 = <okhttp3.internal.Internal: okhttp3.internal.Internal instance>;

        $r4 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>(i0);

        virtualinvoke $r6.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String,java.lang.String)>(r2, $r3, $r4);

        goto label7;

     label9:
        $r0 = virtualinvoke r2.<okhttp3.Headers$Builder: okhttp3.Headers build()>();

        return $r0;
    }
    static boolean isEndToEnd(java.lang.String)
    {
        java.lang.String $r0, $r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r1 = "Connection";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r0);

        if $z0 != 0 goto label1;

        $r1 = "Keep-Alive";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r0);

        if $z0 != 0 goto label1;

        $r1 = "Proxy-Authenticate";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r0);

        if $z0 != 0 goto label1;

        $r1 = "Proxy-Authorization";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r0);

        if $z0 != 0 goto label1;

        $r1 = "TE";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r0);

        if $z0 != 0 goto label1;

        $r1 = "Trailers";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r0);

        if $z0 != 0 goto label1;

        $r1 = "Transfer-Encoding";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r0);

        if $z0 != 0 goto label1;

        $r1 = "Upgrade";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r0);

        if $z0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    private okhttp3.internal.cache.CacheRequest maybeCache(okhttp3.Response, okhttp3.Request, okhttp3.internal.cache.InternalCache) throws java.io.IOException
    {
        okhttp3.internal.cache.CacheInterceptor r0;
        okhttp3.Response $r1;
        okhttp3.Request $r2;
        okhttp3.internal.cache.InternalCache $r3;
        boolean $z0;
        java.lang.String $r4;
        java.io.IOException $r5;
        okhttp3.internal.cache.CacheRequest $r6;

        r0 := @this: okhttp3.internal.cache.CacheInterceptor;

        $r1 := @parameter0: okhttp3.Response;

        $r2 := @parameter1: okhttp3.Request;

        $r3 := @parameter2: okhttp3.internal.cache.InternalCache;

        if $r3 != null goto label1;

        return null;

     label1:
        $z0 = staticinvoke <okhttp3.internal.cache.CacheStrategy: boolean isCacheable(okhttp3.Response,okhttp3.Request)>($r1, $r2);

        if $z0 != 0 goto label5;

        $r4 = virtualinvoke $r2.<okhttp3.Request: java.lang.String method()>();

        $z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean invalidatesCache(java.lang.String)>($r4);

        if $z0 == 0 goto label6;

     label2:
        interfaceinvoke $r3.<okhttp3.internal.cache.InternalCache: void remove(okhttp3.Request)>($r2);

     label3:
        return null;

     label4:
        $r5 := @caughtexception;

        return null;

     label5:
        $r6 = interfaceinvoke $r3.<okhttp3.internal.cache.InternalCache: okhttp3.internal.cache.CacheRequest put(okhttp3.Response)>($r1);

        return $r6;

     label6:
        return null;

        catch java.io.IOException from label2 to label3 with label4;
    }
    private static okhttp3.Response stripBody(okhttp3.Response)
    {
        okhttp3.Response $r0;
        okhttp3.ResponseBody $r1;
        okhttp3.Response$Builder $r2;

        $r0 := @parameter0: okhttp3.Response;

        if $r0 == null goto label1;

        $r1 = virtualinvoke $r0.<okhttp3.Response: okhttp3.ResponseBody body()>();

        if $r1 == null goto label1;

        $r2 = virtualinvoke $r0.<okhttp3.Response: okhttp3.Response$Builder newBuilder()>();

        $r2 = virtualinvoke $r2.<okhttp3.Response$Builder: okhttp3.Response$Builder body(okhttp3.ResponseBody)>(null);

        $r0 = virtualinvoke $r2.<okhttp3.Response$Builder: okhttp3.Response build()>();

     label1:
        return $r0;
    }
    public okhttp3.Response intercept(okhttp3.Interceptor$Chain) throws java.io.IOException
    {
        okhttp3.internal.cache.CacheInterceptor r0;
        okhttp3.Interceptor$Chain $r1;
        okhttp3.Response r2, $r5, r6;
        okhttp3.Request r3;
        okhttp3.internal.cache.InternalCache $r4;
        long $l0;
        okhttp3.internal.cache.CacheStrategy$Factory $r7;
        okhttp3.internal.cache.CacheStrategy $r8;
        okhttp3.ResponseBody $r9;
        okhttp3.Response$Builder $r10;
        okhttp3.Protocol $r11;
        int $i1;
        okhttp3.Headers $r12, $r13;
        java.lang.Throwable $r14;
        boolean $z0;
        okhttp3.internal.cache.CacheRequest $r15;

        r0 := @this: okhttp3.internal.cache.CacheInterceptor;

        $r1 := @parameter0: okhttp3.Interceptor$Chain;

        $r4 = r0.<okhttp3.internal.cache.CacheInterceptor: okhttp3.internal.cache.InternalCache cache>;

        if $r4 == null goto label04;

        $r4 = r0.<okhttp3.internal.cache.CacheInterceptor: okhttp3.internal.cache.InternalCache cache>;

        r3 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Request request()>();

        r6 = interfaceinvoke $r4.<okhttp3.internal.cache.InternalCache: okhttp3.Response get(okhttp3.Request)>(r3);

     label01:
        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r7 = new okhttp3.internal.cache.CacheStrategy$Factory;

        r3 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Request request()>();

        specialinvoke $r7.<okhttp3.internal.cache.CacheStrategy$Factory: void <init>(long,okhttp3.Request,okhttp3.Response)>($l0, r3, r6);

        $r8 = virtualinvoke $r7.<okhttp3.internal.cache.CacheStrategy$Factory: okhttp3.internal.cache.CacheStrategy get()>();

        r3 = $r8.<okhttp3.internal.cache.CacheStrategy: okhttp3.Request networkRequest>;

        r2 = $r8.<okhttp3.internal.cache.CacheStrategy: okhttp3.Response cacheResponse>;

        $r4 = r0.<okhttp3.internal.cache.CacheInterceptor: okhttp3.internal.cache.InternalCache cache>;

        if $r4 == null goto label02;

        $r4 = r0.<okhttp3.internal.cache.CacheInterceptor: okhttp3.internal.cache.InternalCache cache>;

        interfaceinvoke $r4.<okhttp3.internal.cache.InternalCache: void trackResponse(okhttp3.internal.cache.CacheStrategy)>($r8);

     label02:
        if r6 == null goto label03;

        if r2 != null goto label03;

        $r9 = virtualinvoke r6.<okhttp3.Response: okhttp3.ResponseBody body()>();

        staticinvoke <okhttp3.internal.Util: void closeQuietly(java.io.Closeable)>($r9);

     label03:
        if r3 != null goto label05;

        if r2 != null goto label05;

        $r10 = new okhttp3.Response$Builder;

        specialinvoke $r10.<okhttp3.Response$Builder: void <init>()>();

        r3 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Request request()>();

        $r10 = virtualinvoke $r10.<okhttp3.Response$Builder: okhttp3.Response$Builder request(okhttp3.Request)>(r3);

        $r11 = <okhttp3.Protocol: okhttp3.Protocol HTTP_1_1>;

        $r10 = virtualinvoke $r10.<okhttp3.Response$Builder: okhttp3.Response$Builder protocol(okhttp3.Protocol)>($r11);

        $r10 = virtualinvoke $r10.<okhttp3.Response$Builder: okhttp3.Response$Builder code(int)>(504);

        $r10 = virtualinvoke $r10.<okhttp3.Response$Builder: okhttp3.Response$Builder message(java.lang.String)>("Unsatisfiable Request (only-if-cached)");

        $r9 = <okhttp3.internal.Util: okhttp3.ResponseBody EMPTY_RESPONSE>;

        $r10 = virtualinvoke $r10.<okhttp3.Response$Builder: okhttp3.Response$Builder body(okhttp3.ResponseBody)>($r9);

        $r10 = virtualinvoke $r10.<okhttp3.Response$Builder: okhttp3.Response$Builder sentRequestAtMillis(long)>(-1L);

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r10 = virtualinvoke $r10.<okhttp3.Response$Builder: okhttp3.Response$Builder receivedResponseAtMillis(long)>($l0);

        $r5 = virtualinvoke $r10.<okhttp3.Response$Builder: okhttp3.Response build()>();

        return $r5;

     label04:
        r6 = null;

        goto label01;

     label05:
        if r3 != null goto label06;

        $r10 = virtualinvoke r2.<okhttp3.Response: okhttp3.Response$Builder newBuilder()>();

        $r5 = staticinvoke <okhttp3.internal.cache.CacheInterceptor: okhttp3.Response stripBody(okhttp3.Response)>(r2);

        $r10 = virtualinvoke $r10.<okhttp3.Response$Builder: okhttp3.Response$Builder cacheResponse(okhttp3.Response)>($r5);

        $r5 = virtualinvoke $r10.<okhttp3.Response$Builder: okhttp3.Response build()>();

        return $r5;

     label06:
        $r5 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>(r3);

     label07:
        if $r5 != null goto label08;

        if r6 == null goto label08;

        $r9 = virtualinvoke r6.<okhttp3.Response: okhttp3.ResponseBody body()>();

        staticinvoke <okhttp3.internal.Util: void closeQuietly(java.io.Closeable)>($r9);

     label08:
        if r2 == null goto label12;

        $i1 = virtualinvoke $r5.<okhttp3.Response: int code()>();

        if $i1 != 304 goto label11;

        $r10 = virtualinvoke r2.<okhttp3.Response: okhttp3.Response$Builder newBuilder()>();

        $r12 = virtualinvoke r2.<okhttp3.Response: okhttp3.Headers headers()>();

        $r13 = virtualinvoke $r5.<okhttp3.Response: okhttp3.Headers headers()>();

        $r12 = staticinvoke <okhttp3.internal.cache.CacheInterceptor: okhttp3.Headers combine(okhttp3.Headers,okhttp3.Headers)>($r12, $r13);

        $r10 = virtualinvoke $r10.<okhttp3.Response$Builder: okhttp3.Response$Builder headers(okhttp3.Headers)>($r12);

        $l0 = virtualinvoke $r5.<okhttp3.Response: long sentRequestAtMillis()>();

        $r10 = virtualinvoke $r10.<okhttp3.Response$Builder: okhttp3.Response$Builder sentRequestAtMillis(long)>($l0);

        $l0 = virtualinvoke $r5.<okhttp3.Response: long receivedResponseAtMillis()>();

        $r10 = virtualinvoke $r10.<okhttp3.Response$Builder: okhttp3.Response$Builder receivedResponseAtMillis(long)>($l0);

        r6 = staticinvoke <okhttp3.internal.cache.CacheInterceptor: okhttp3.Response stripBody(okhttp3.Response)>(r2);

        $r10 = virtualinvoke $r10.<okhttp3.Response$Builder: okhttp3.Response$Builder cacheResponse(okhttp3.Response)>(r6);

        r6 = staticinvoke <okhttp3.internal.cache.CacheInterceptor: okhttp3.Response stripBody(okhttp3.Response)>($r5);

        $r10 = virtualinvoke $r10.<okhttp3.Response$Builder: okhttp3.Response$Builder networkResponse(okhttp3.Response)>(r6);

        r6 = virtualinvoke $r10.<okhttp3.Response$Builder: okhttp3.Response build()>();

        $r9 = virtualinvoke $r5.<okhttp3.Response: okhttp3.ResponseBody body()>();

        virtualinvoke $r9.<okhttp3.ResponseBody: void close()>();

        $r4 = r0.<okhttp3.internal.cache.CacheInterceptor: okhttp3.internal.cache.InternalCache cache>;

        interfaceinvoke $r4.<okhttp3.internal.cache.InternalCache: void trackConditionalCacheHit()>();

        $r4 = r0.<okhttp3.internal.cache.CacheInterceptor: okhttp3.internal.cache.InternalCache cache>;

        interfaceinvoke $r4.<okhttp3.internal.cache.InternalCache: void update(okhttp3.Response,okhttp3.Response)>(r2, r6);

        return r6;

     label09:
        $r14 := @caughtexception;

        if r6 == null goto label10;

        $r9 = virtualinvoke r6.<okhttp3.Response: okhttp3.ResponseBody body()>();

        staticinvoke <okhttp3.internal.Util: void closeQuietly(java.io.Closeable)>($r9);

     label10:
        throw $r14;

     label11:
        $r9 = virtualinvoke r2.<okhttp3.Response: okhttp3.ResponseBody body()>();

        staticinvoke <okhttp3.internal.Util: void closeQuietly(java.io.Closeable)>($r9);

     label12:
        $r10 = virtualinvoke $r5.<okhttp3.Response: okhttp3.Response$Builder newBuilder()>();

        r2 = staticinvoke <okhttp3.internal.cache.CacheInterceptor: okhttp3.Response stripBody(okhttp3.Response)>(r2);

        $r10 = virtualinvoke $r10.<okhttp3.Response$Builder: okhttp3.Response$Builder cacheResponse(okhttp3.Response)>(r2);

        r2 = staticinvoke <okhttp3.internal.cache.CacheInterceptor: okhttp3.Response stripBody(okhttp3.Response)>($r5);

        $r10 = virtualinvoke $r10.<okhttp3.Response$Builder: okhttp3.Response$Builder networkResponse(okhttp3.Response)>(r2);

        r2 = virtualinvoke $r10.<okhttp3.Response$Builder: okhttp3.Response build()>();

        $z0 = staticinvoke <okhttp3.internal.http.HttpHeaders: boolean hasBody(okhttp3.Response)>(r2);

        if $z0 == 0 goto label13;

        r3 = virtualinvoke $r5.<okhttp3.Response: okhttp3.Request request()>();

        $r4 = r0.<okhttp3.internal.cache.CacheInterceptor: okhttp3.internal.cache.InternalCache cache>;

        $r15 = specialinvoke r0.<okhttp3.internal.cache.CacheInterceptor: okhttp3.internal.cache.CacheRequest maybeCache(okhttp3.Response,okhttp3.Request,okhttp3.internal.cache.InternalCache)>(r2, r3, $r4);

        $r5 = specialinvoke r0.<okhttp3.internal.cache.CacheInterceptor: okhttp3.Response cacheWritingResponse(okhttp3.internal.cache.CacheRequest,okhttp3.Response)>($r15, r2);

        return $r5;

     label13:
        return r2;

        catch java.lang.Throwable from label06 to label07 with label09;
    }
