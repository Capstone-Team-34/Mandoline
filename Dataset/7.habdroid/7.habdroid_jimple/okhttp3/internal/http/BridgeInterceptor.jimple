okhttp3.internal.http.BridgeInterceptor extends java.lang.Object implements okhttp3.Interceptor
private final okhttp3.CookieJar cookieJar
    public void <init>(okhttp3.CookieJar)
    {
        okhttp3.internal.http.BridgeInterceptor r0;
        okhttp3.CookieJar $r1;

        r0 := @this: okhttp3.internal.http.BridgeInterceptor;

        $r1 := @parameter0: okhttp3.CookieJar;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<okhttp3.internal.http.BridgeInterceptor: okhttp3.CookieJar cookieJar> = $r1;

        return;
    }
    private java.lang.String cookieHeader(java.util.List)
    {
        okhttp3.internal.http.BridgeInterceptor r0;
        java.util.List r1;
        java.lang.StringBuilder r2, $r6;
        int i0, $i1;
        java.lang.Object $r3;
        okhttp3.Cookie r4;
        java.lang.String $r5;

        r0 := @this: okhttp3.internal.http.BridgeInterceptor;

        r1 := @parameter0: java.util.List;

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        i0 = 0;

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

     label1:
        if i0 >= $i1 goto label3;

        if i0 <= 0 goto label2;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; ");

     label2:
        $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i0);

        r4 = (okhttp3.Cookie) $r3;

        $r5 = virtualinvoke r4.<okhttp3.Cookie: java.lang.String name()>();

        $r6 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61);

        $r5 = virtualinvoke r4.<okhttp3.Cookie: java.lang.String value()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        i0 = i0 + 1;

        goto label1;

     label3:
        $r5 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }
    public okhttp3.Response intercept(okhttp3.Interceptor$Chain) throws java.io.IOException
    {
        okhttp3.internal.http.BridgeInterceptor r0;
        okhttp3.Interceptor$Chain $r1;
        okio.GzipSource r2;
        okhttp3.Request $r3, $r11;
        okhttp3.Request$Builder $r4;
        okhttp3.RequestBody $r5;
        okhttp3.MediaType $r6;
        java.lang.String $r7, $r15;
        long $l0;
        byte $b1;
        okhttp3.HttpUrl $r8;
        boolean z0, $z1;
        okhttp3.CookieJar $r9;
        java.util.List $r10;
        okhttp3.Response $r12;
        okhttp3.Headers $r13;
        okhttp3.Response$Builder $r14;
        okhttp3.ResponseBody $r16;
        okio.BufferedSource $r17;
        okhttp3.Headers$Builder $r18;
        okhttp3.internal.http.RealResponseBody $r19;

        r0 := @this: okhttp3.internal.http.BridgeInterceptor;

        $r1 := @parameter0: okhttp3.Interceptor$Chain;

        $r3 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Request request()>();

        $r4 = virtualinvoke $r3.<okhttp3.Request: okhttp3.Request$Builder newBuilder()>();

        $r5 = virtualinvoke $r3.<okhttp3.Request: okhttp3.RequestBody body()>();

        if $r5 == null goto label2;

        $r6 = virtualinvoke $r5.<okhttp3.RequestBody: okhttp3.MediaType contentType()>();

        if $r6 == null goto label1;

        $r7 = virtualinvoke $r6.<okhttp3.MediaType: java.lang.String toString()>();

        virtualinvoke $r4.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Content-Type", $r7);

     label1:
        $l0 = virtualinvoke $r5.<okhttp3.RequestBody: long contentLength()>();

        $b1 = $l0 cmp -1L;

        if $b1 == 0 goto label9;

        $r7 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l0);

        virtualinvoke $r4.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Content-Length", $r7);

        virtualinvoke $r4.<okhttp3.Request$Builder: okhttp3.Request$Builder removeHeader(java.lang.String)>("Transfer-Encoding");

     label2:
        $r7 = virtualinvoke $r3.<okhttp3.Request: java.lang.String header(java.lang.String)>("Host");

        if $r7 != null goto label3;

        $r8 = virtualinvoke $r3.<okhttp3.Request: okhttp3.HttpUrl url()>();

        $r7 = staticinvoke <okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>($r8, 0);

        virtualinvoke $r4.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Host", $r7);

     label3:
        $r7 = virtualinvoke $r3.<okhttp3.Request: java.lang.String header(java.lang.String)>("Connection");

        if $r7 != null goto label4;

        virtualinvoke $r4.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Connection", "Keep-Alive");

     label4:
        z0 = 0;

        $r7 = virtualinvoke $r3.<okhttp3.Request: java.lang.String header(java.lang.String)>("Accept-Encoding");

        if $r7 != null goto label5;

        $r7 = virtualinvoke $r3.<okhttp3.Request: java.lang.String header(java.lang.String)>("Range");

        if $r7 != null goto label5;

        z0 = 1;

        virtualinvoke $r4.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Accept-Encoding", "gzip");

     label5:
        $r9 = r0.<okhttp3.internal.http.BridgeInterceptor: okhttp3.CookieJar cookieJar>;

        $r8 = virtualinvoke $r3.<okhttp3.Request: okhttp3.HttpUrl url()>();

        $r10 = interfaceinvoke $r9.<okhttp3.CookieJar: java.util.List loadForRequest(okhttp3.HttpUrl)>($r8);

        $z1 = interfaceinvoke $r10.<java.util.List: boolean isEmpty()>();

        if $z1 != 0 goto label6;

        $r7 = specialinvoke r0.<okhttp3.internal.http.BridgeInterceptor: java.lang.String cookieHeader(java.util.List)>($r10);

        virtualinvoke $r4.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Cookie", $r7);

     label6:
        $r7 = virtualinvoke $r3.<okhttp3.Request: java.lang.String header(java.lang.String)>("User-Agent");

        if $r7 != null goto label7;

        $r7 = staticinvoke <okhttp3.internal.Version: java.lang.String userAgent()>();

        virtualinvoke $r4.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("User-Agent", $r7);

     label7:
        $r11 = virtualinvoke $r4.<okhttp3.Request$Builder: okhttp3.Request build()>();

        $r12 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r11);

        $r9 = r0.<okhttp3.internal.http.BridgeInterceptor: okhttp3.CookieJar cookieJar>;

        $r8 = virtualinvoke $r3.<okhttp3.Request: okhttp3.HttpUrl url()>();

        $r13 = virtualinvoke $r12.<okhttp3.Response: okhttp3.Headers headers()>();

        staticinvoke <okhttp3.internal.http.HttpHeaders: void receiveHeaders(okhttp3.CookieJar,okhttp3.HttpUrl,okhttp3.Headers)>($r9, $r8, $r13);

        $r14 = virtualinvoke $r12.<okhttp3.Response: okhttp3.Response$Builder newBuilder()>();

        $r14 = virtualinvoke $r14.<okhttp3.Response$Builder: okhttp3.Response$Builder request(okhttp3.Request)>($r3);

        if z0 == 0 goto label8;

        $r7 = "gzip";

        $r15 = virtualinvoke $r12.<okhttp3.Response: java.lang.String header(java.lang.String)>("Content-Encoding");

        z0 = virtualinvoke $r7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r15);

        if z0 == 0 goto label8;

        z0 = staticinvoke <okhttp3.internal.http.HttpHeaders: boolean hasBody(okhttp3.Response)>($r12);

        if z0 == 0 goto label8;

        r2 = new okio.GzipSource;

        $r16 = virtualinvoke $r12.<okhttp3.Response: okhttp3.ResponseBody body()>();

        $r17 = virtualinvoke $r16.<okhttp3.ResponseBody: okio.BufferedSource source()>();

        specialinvoke r2.<okio.GzipSource: void <init>(okio.Source)>($r17);

        $r13 = virtualinvoke $r12.<okhttp3.Response: okhttp3.Headers headers()>();

        $r18 = virtualinvoke $r13.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>();

        $r18 = virtualinvoke $r18.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>("Content-Encoding");

        $r18 = virtualinvoke $r18.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>("Content-Length");

        $r13 = virtualinvoke $r18.<okhttp3.Headers$Builder: okhttp3.Headers build()>();

        virtualinvoke $r14.<okhttp3.Response$Builder: okhttp3.Response$Builder headers(okhttp3.Headers)>($r13);

        $r19 = new okhttp3.internal.http.RealResponseBody;

        $r17 = staticinvoke <okio.Okio: okio.BufferedSource buffer(okio.Source)>(r2);

        specialinvoke $r19.<okhttp3.internal.http.RealResponseBody: void <init>(okhttp3.Headers,okio.BufferedSource)>($r13, $r17);

        virtualinvoke $r14.<okhttp3.Response$Builder: okhttp3.Response$Builder body(okhttp3.ResponseBody)>($r19);

     label8:
        $r12 = virtualinvoke $r14.<okhttp3.Response$Builder: okhttp3.Response build()>();

        return $r12;

     label9:
        virtualinvoke $r4.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Transfer-Encoding", "chunked");

        virtualinvoke $r4.<okhttp3.Request$Builder: okhttp3.Request$Builder removeHeader(java.lang.String)>("Content-Length");

        goto label2;
    }
