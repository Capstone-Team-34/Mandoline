okhttp3.internal.http.CallServerInterceptor extends java.lang.Object implements okhttp3.Interceptor
private final boolean forWebSocket
    public void <init>(boolean)
    {
        okhttp3.internal.http.CallServerInterceptor r0;
        boolean $z0;

        r0 := @this: okhttp3.internal.http.CallServerInterceptor;

        $z0 := @parameter0: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<okhttp3.internal.http.CallServerInterceptor: boolean forWebSocket> = $z0;

        return;
    }
    public okhttp3.Response intercept(okhttp3.Interceptor$Chain) throws java.io.IOException
    {
        okhttp3.internal.http.CallServerInterceptor r0;
        okhttp3.Interceptor$Chain $r1;
        okhttp3.internal.http.RealInterceptorChain $r2;
        okhttp3.internal.http.HttpCodec $r3;
        okhttp3.internal.connection.StreamAllocation $r4;
        okhttp3.Request $r5;
        long $l0, $l1;
        okhttp3.Response$Builder r6;
        java.lang.String $r7, $r9;
        boolean $z0;
        okhttp3.RequestBody $r8;
        okio.Sink $r10;
        okio.BufferedSink $r11;
        okhttp3.internal.connection.RealConnection $r12;
        okhttp3.Handshake $r13;
        okhttp3.Response $r14;
        int $i2;
        okhttp3.ResponseBody $r15;
        byte $b3;
        java.net.ProtocolException $r16;
        java.lang.StringBuilder $r17;

        r0 := @this: okhttp3.internal.http.CallServerInterceptor;

        $r1 := @parameter0: okhttp3.Interceptor$Chain;

        $r2 = (okhttp3.internal.http.RealInterceptorChain) $r1;

        $r3 = virtualinvoke $r2.<okhttp3.internal.http.RealInterceptorChain: okhttp3.internal.http.HttpCodec httpStream()>();

        $r2 = (okhttp3.internal.http.RealInterceptorChain) $r1;

        $r4 = virtualinvoke $r2.<okhttp3.internal.http.RealInterceptorChain: okhttp3.internal.connection.StreamAllocation streamAllocation()>();

        $r5 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Request request()>();

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        interfaceinvoke $r3.<okhttp3.internal.http.HttpCodec: void writeRequestHeaders(okhttp3.Request)>($r5);

        r6 = null;

        $r7 = virtualinvoke $r5.<okhttp3.Request: java.lang.String method()>();

        $z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean permitsRequestBody(java.lang.String)>($r7);

        if $z0 == 0 goto label2;

        $r8 = virtualinvoke $r5.<okhttp3.Request: okhttp3.RequestBody body()>();

        if $r8 == null goto label2;

        $r7 = "100-continue";

        $r9 = virtualinvoke $r5.<okhttp3.Request: java.lang.String header(java.lang.String)>("Expect");

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r9);

        if $z0 == 0 goto label1;

        interfaceinvoke $r3.<okhttp3.internal.http.HttpCodec: void flushRequest()>();

        r6 = interfaceinvoke $r3.<okhttp3.internal.http.HttpCodec: okhttp3.Response$Builder readResponseHeaders(boolean)>(1);

     label1:
        if r6 != null goto label2;

        $r8 = virtualinvoke $r5.<okhttp3.Request: okhttp3.RequestBody body()>();

        $l1 = virtualinvoke $r8.<okhttp3.RequestBody: long contentLength()>();

        $r10 = interfaceinvoke $r3.<okhttp3.internal.http.HttpCodec: okio.Sink createRequestBody(okhttp3.Request,long)>($r5, $l1);

        $r11 = staticinvoke <okio.Okio: okio.BufferedSink buffer(okio.Sink)>($r10);

        $r8 = virtualinvoke $r5.<okhttp3.Request: okhttp3.RequestBody body()>();

        virtualinvoke $r8.<okhttp3.RequestBody: void writeTo(okio.BufferedSink)>($r11);

        interfaceinvoke $r11.<okio.BufferedSink: void close()>();

     label2:
        interfaceinvoke $r3.<okhttp3.internal.http.HttpCodec: void finishRequest()>();

        if r6 != null goto label3;

        r6 = interfaceinvoke $r3.<okhttp3.internal.http.HttpCodec: okhttp3.Response$Builder readResponseHeaders(boolean)>(0);

     label3:
        r6 = virtualinvoke r6.<okhttp3.Response$Builder: okhttp3.Response$Builder request(okhttp3.Request)>($r5);

        $r12 = virtualinvoke $r4.<okhttp3.internal.connection.StreamAllocation: okhttp3.internal.connection.RealConnection connection()>();

        $r13 = virtualinvoke $r12.<okhttp3.internal.connection.RealConnection: okhttp3.Handshake handshake()>();

        r6 = virtualinvoke r6.<okhttp3.Response$Builder: okhttp3.Response$Builder handshake(okhttp3.Handshake)>($r13);

        r6 = virtualinvoke r6.<okhttp3.Response$Builder: okhttp3.Response$Builder sentRequestAtMillis(long)>($l0);

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r6 = virtualinvoke r6.<okhttp3.Response$Builder: okhttp3.Response$Builder receivedResponseAtMillis(long)>($l0);

        $r14 = virtualinvoke r6.<okhttp3.Response$Builder: okhttp3.Response build()>();

        $i2 = virtualinvoke $r14.<okhttp3.Response: int code()>();

        $z0 = r0.<okhttp3.internal.http.CallServerInterceptor: boolean forWebSocket>;

        if $z0 == 0 goto label8;

        if $i2 != 101 goto label8;

        r6 = virtualinvoke $r14.<okhttp3.Response: okhttp3.Response$Builder newBuilder()>();

        $r15 = <okhttp3.internal.Util: okhttp3.ResponseBody EMPTY_RESPONSE>;

        r6 = virtualinvoke r6.<okhttp3.Response$Builder: okhttp3.Response$Builder body(okhttp3.ResponseBody)>($r15);

        $r14 = virtualinvoke r6.<okhttp3.Response$Builder: okhttp3.Response build()>();

     label4:
        $r7 = "close";

        $r5 = virtualinvoke $r14.<okhttp3.Response: okhttp3.Request request()>();

        $r9 = virtualinvoke $r5.<okhttp3.Request: java.lang.String header(java.lang.String)>("Connection");

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r9);

        if $z0 != 0 goto label5;

        $r7 = "close";

        $r9 = virtualinvoke $r14.<okhttp3.Response: java.lang.String header(java.lang.String)>("Connection");

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r9);

        if $z0 == 0 goto label6;

     label5:
        virtualinvoke $r4.<okhttp3.internal.connection.StreamAllocation: void noNewStreams()>();

     label6:
        if $i2 == 204 goto label7;

        if $i2 != 205 goto label9;

     label7:
        $r15 = virtualinvoke $r14.<okhttp3.Response: okhttp3.ResponseBody body()>();

        $l0 = virtualinvoke $r15.<okhttp3.ResponseBody: long contentLength()>();

        $b3 = $l0 cmp 0L;

        if $b3 <= 0 goto label9;

        $r16 = new java.net.ProtocolException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HTTP ");

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" had non-zero Content-Length: ");

        $r15 = virtualinvoke $r14.<okhttp3.Response: okhttp3.ResponseBody body()>();

        $l0 = virtualinvoke $r15.<okhttp3.ResponseBody: long contentLength()>();

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r7 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.net.ProtocolException: void <init>(java.lang.String)>($r7);

        throw $r16;

     label8:
        r6 = virtualinvoke $r14.<okhttp3.Response: okhttp3.Response$Builder newBuilder()>();

        $r15 = interfaceinvoke $r3.<okhttp3.internal.http.HttpCodec: okhttp3.ResponseBody openResponseBody(okhttp3.Response)>($r14);

        r6 = virtualinvoke r6.<okhttp3.Response$Builder: okhttp3.Response$Builder body(okhttp3.ResponseBody)>($r15);

        $r14 = virtualinvoke r6.<okhttp3.Response$Builder: okhttp3.Response build()>();

        goto label4;

     label9:
        return $r14;
    }
