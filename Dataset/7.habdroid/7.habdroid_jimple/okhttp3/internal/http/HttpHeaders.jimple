okhttp3.internal.http.HttpHeaders extends java.lang.Object
private static final java.util.regex.Pattern PARAMETER
private static final java.lang.String QUOTED_STRING
private static final java.lang.String TOKEN
    static void <clinit>()
    {
        java.util.regex.Pattern $r0;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(" +([^ \"=]*)=(:?\"([^\"]*)\"|([^ \"=]*)) *(:?,|$)");

        <okhttp3.internal.http.HttpHeaders: java.util.regex.Pattern PARAMETER> = $r0;

        return;
    }
    private void <init>()
    {
        okhttp3.internal.http.HttpHeaders r0;

        r0 := @this: okhttp3.internal.http.HttpHeaders;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static long contentLength(okhttp3.Headers)
    {
        okhttp3.Headers $r0;
        java.lang.String $r1;
        long $l0;

        $r0 := @parameter0: okhttp3.Headers;

        $r1 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Length");

        $l0 = staticinvoke <okhttp3.internal.http.HttpHeaders: long stringToLong(java.lang.String)>($r1);

        return $l0;
    }
    public static long contentLength(okhttp3.Response)
    {
        okhttp3.Response $r0;
        okhttp3.Headers $r1;
        long $l0;

        $r0 := @parameter0: okhttp3.Response;

        $r1 = virtualinvoke $r0.<okhttp3.Response: okhttp3.Headers headers()>();

        $l0 = staticinvoke <okhttp3.internal.http.HttpHeaders: long contentLength(okhttp3.Headers)>($r1);

        return $l0;
    }
    public static boolean hasBody(okhttp3.Response)
    {
        okhttp3.Response $r0;
        okhttp3.Request $r1;
        java.lang.String $r2, $r3;
        boolean $z0;
        int $i0;
        long $l1;
        byte $b2;

        $r0 := @parameter0: okhttp3.Response;

        $r1 = virtualinvoke $r0.<okhttp3.Response: okhttp3.Request request()>();

        $r2 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("HEAD");

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $i0 = virtualinvoke $r0.<okhttp3.Response: int code()>();

        if $i0 < 100 goto label2;

        if $i0 < 200 goto label3;

     label2:
        if $i0 == 204 goto label3;

        if $i0 == 304 goto label3;

        return 1;

     label3:
        $l1 = staticinvoke <okhttp3.internal.http.HttpHeaders: long contentLength(okhttp3.Response)>($r0);

        $b2 = $l1 cmp -1L;

        if $b2 != 0 goto label4;

        $r2 = "chunked";

        $r3 = virtualinvoke $r0.<okhttp3.Response: java.lang.String header(java.lang.String)>("Transfer-Encoding");

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r3);

        if $z0 == 0 goto label5;

     label4:
        return 1;

     label5:
        return 0;
    }
    public static boolean hasVaryAll(okhttp3.Headers)
    {
        okhttp3.Headers $r0;
        java.util.Set $r1;
        boolean $z0;

        $r0 := @parameter0: okhttp3.Headers;

        $r1 = staticinvoke <okhttp3.internal.http.HttpHeaders: java.util.Set varyFields(okhttp3.Headers)>($r0);

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean contains(java.lang.Object)>("*");

        return $z0;
    }
    public static boolean hasVaryAll(okhttp3.Response)
    {
        okhttp3.Response $r0;
        okhttp3.Headers $r1;
        boolean $z0;

        $r0 := @parameter0: okhttp3.Response;

        $r1 = virtualinvoke $r0.<okhttp3.Response: okhttp3.Headers headers()>();

        $z0 = staticinvoke <okhttp3.internal.http.HttpHeaders: boolean hasVaryAll(okhttp3.Headers)>($r1);

        return $z0;
    }
    public static java.util.List parseChallenges(okhttp3.Headers, java.lang.String)
    {
        okhttp3.Headers $r0;
        java.lang.String $r1, $r8, $r9;
        java.util.ArrayList r2;
        java.util.List $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        int $i0, i1;
        java.util.regex.Pattern $r6;
        java.util.regex.Matcher $r7;
        okhttp3.Challenge $r10;

        $r0 := @parameter0: okhttp3.Headers;

        $r1 := @parameter1: java.lang.String;

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        $r3 = virtualinvoke $r0.<okhttp3.Headers: java.util.List values(java.lang.String)>($r1);

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r1 = (java.lang.String) $r5;

        $i0 = virtualinvoke $r1.<java.lang.String: int indexOf(int)>(32);

        if $i0 == -1 goto label1;

        $r6 = <okhttp3.internal.http.HttpHeaders: java.util.regex.Pattern PARAMETER>;

        $r7 = virtualinvoke $r6.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r1);

        i1 = $i0;

     label2:
        $z0 = virtualinvoke $r7.<java.util.regex.Matcher: boolean find(int)>(i1);

        if $z0 == 0 goto label1;

        i1 = virtualinvoke $r7.<java.util.regex.Matcher: int start(int)>(1);

        $z0 = virtualinvoke $r1.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, i1, "realm", 0, 5);

        if $z0 == 0 goto label3;

        $r8 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $r9 = virtualinvoke $r7.<java.util.regex.Matcher: java.lang.String group(int)>(3);

        if $r9 == null goto label3;

        $r10 = new okhttp3.Challenge;

        specialinvoke $r10.<okhttp3.Challenge: void <init>(java.lang.String,java.lang.String)>($r8, $r9);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r10);

        goto label1;

     label3:
        i1 = virtualinvoke $r7.<java.util.regex.Matcher: int end()>();

        goto label2;

     label4:
        return r2;
    }
    public static int parseSeconds(java.lang.String, int)
    {
        java.lang.String $r0;
        java.lang.NumberFormatException r1;
        long $l0;
        int i1;
        byte $b2;

        $r0 := @parameter0: java.lang.String;

        i1 := @parameter1: int;

     label1:
        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r0);

     label2:
        $b2 = $l0 cmp 2147483647L;

        if $b2 <= 0 goto label3;

        return 2147483647;

     label3:
        $b2 = $l0 cmp 0L;

        if $b2 >= 0 goto label4;

        return 0;

     label4:
        i1 = (int) $l0;

        return i1;

     label5:
        r1 := @caughtexception;

        return i1;

        catch java.lang.NumberFormatException from label1 to label2 with label5;
    }
    public static void receiveHeaders(okhttp3.CookieJar, okhttp3.HttpUrl, okhttp3.Headers)
    {
        okhttp3.CookieJar $r0, $r3;
        okhttp3.HttpUrl $r1;
        okhttp3.Headers $r2;
        java.util.List $r4;
        boolean $z0;

        $r0 := @parameter0: okhttp3.CookieJar;

        $r1 := @parameter1: okhttp3.HttpUrl;

        $r2 := @parameter2: okhttp3.Headers;

        $r3 = <okhttp3.CookieJar: okhttp3.CookieJar NO_COOKIES>;

        if $r0 != $r3 goto label1;

        return;

     label1:
        $r4 = staticinvoke <okhttp3.Cookie: java.util.List parseAll(okhttp3.HttpUrl,okhttp3.Headers)>($r1, $r2);

        $z0 = interfaceinvoke $r4.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        interfaceinvoke $r0.<okhttp3.CookieJar: void saveFromResponse(okhttp3.HttpUrl,java.util.List)>($r1, $r4);

     label2:
        return;
    }
    public static int skipUntil(java.lang.String, int, java.lang.String)
    {
        java.lang.String $r0, $r1;
        int $i0, $i1;
        char $c2;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r1 := @parameter2: java.lang.String;

     label1:
        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i0 >= $i1 goto label3;

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i0);

        $i1 = virtualinvoke $r1.<java.lang.String: int indexOf(int)>($c2);

        if $i1 == -1 goto label2;

        return $i0;

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        return $i0;
    }
    public static int skipWhitespace(java.lang.String, int)
    {
        java.lang.String $r0;
        int $i0, $i1;
        char $c2;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

     label1:
        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i0 >= $i1 goto label3;

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i0);

        if $c2 == 32 goto label2;

        if $c2 == 9 goto label2;

        return $i0;

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        return $i0;
    }
    private static long stringToLong(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.NumberFormatException r1;
        long $l0;

        $r0 := @parameter0: java.lang.String;

        if $r0 != null goto label1;

        return -1L;

     label1:
        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r0);

     label2:
        return $l0;

     label3:
        r1 := @caughtexception;

        return -1L;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }
    public static java.util.Set varyFields(okhttp3.Headers)
    {
        okhttp3.Headers $r0;
        java.lang.String r1, $r3;
        int $i0, i1, $i2, $i3;
        java.util.Set $r2;
        boolean $z0;
        java.util.Comparator $r4;
        java.lang.String[] $r5;
        java.util.TreeSet $r6;

        $r0 := @parameter0: okhttp3.Headers;

        $r2 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

        i1 = 0;

        $i2 = virtualinvoke $r0.<okhttp3.Headers: int size()>();

     label1:
        if i1 >= $i2 goto label6;

        r1 = "Vary";

        $r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>(i1);

        $z0 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r3);

        if $z0 != 0 goto label3;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        r1 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>(i1);

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean isEmpty()>();

        if $z0 == 0 goto label4;

        $r6 = new java.util.TreeSet;

        $r2 = $r6;

        $r4 = <java.lang.String: java.util.Comparator CASE_INSENSITIVE_ORDER>;

        specialinvoke $r6.<java.util.TreeSet: void <init>(java.util.Comparator)>($r4);

     label4:
        $r5 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        $i0 = lengthof $r5;

        $i3 = 0;

     label5:
        if $i3 >= $i0 goto label2;

        r1 = $r5[$i3];

        r1 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>();

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        $i3 = $i3 + 1;

        goto label5;

     label6:
        return $r2;
    }
    private static java.util.Set varyFields(okhttp3.Response)
    {
        okhttp3.Response $r0;
        okhttp3.Headers $r1;
        java.util.Set $r2;

        $r0 := @parameter0: okhttp3.Response;

        $r1 = virtualinvoke $r0.<okhttp3.Response: okhttp3.Headers headers()>();

        $r2 = staticinvoke <okhttp3.internal.http.HttpHeaders: java.util.Set varyFields(okhttp3.Headers)>($r1);

        return $r2;
    }
    public static okhttp3.Headers varyHeaders(okhttp3.Headers, okhttp3.Headers)
    {
        okhttp3.Headers $r0, $r1;
        okhttp3.Headers$Builder r2;
        java.util.Set $r3;
        boolean $z0;
        int i0, $i1;
        java.lang.String $r4, $r5;

        $r0 := @parameter0: okhttp3.Headers;

        $r1 := @parameter1: okhttp3.Headers;

        $r3 = staticinvoke <okhttp3.internal.http.HttpHeaders: java.util.Set varyFields(okhttp3.Headers)>($r1);

        $z0 = interfaceinvoke $r3.<java.util.Set: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        r2 = new okhttp3.Headers$Builder;

        specialinvoke r2.<okhttp3.Headers$Builder: void <init>()>();

        $r0 = virtualinvoke r2.<okhttp3.Headers$Builder: okhttp3.Headers build()>();

        return $r0;

     label1:
        r2 = new okhttp3.Headers$Builder;

        specialinvoke r2.<okhttp3.Headers$Builder: void <init>()>();

        i0 = 0;

        $i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>();

     label2:
        if i0 >= $i1 goto label4;

        $r4 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>(i0);

        $z0 = interfaceinvoke $r3.<java.util.Set: boolean contains(java.lang.Object)>($r4);

        if $z0 == 0 goto label3;

        $r5 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>(i0);

        virtualinvoke r2.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r4, $r5);

     label3:
        i0 = i0 + 1;

        goto label2;

     label4:
        $r0 = virtualinvoke r2.<okhttp3.Headers$Builder: okhttp3.Headers build()>();

        return $r0;
    }
    public static okhttp3.Headers varyHeaders(okhttp3.Response)
    {
        okhttp3.Response $r0, $r1;
        okhttp3.Request $r2;
        okhttp3.Headers $r3, $r4;

        $r0 := @parameter0: okhttp3.Response;

        $r1 = virtualinvoke $r0.<okhttp3.Response: okhttp3.Response networkResponse()>();

        $r2 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Request request()>();

        $r3 = virtualinvoke $r2.<okhttp3.Request: okhttp3.Headers headers()>();

        $r4 = virtualinvoke $r0.<okhttp3.Response: okhttp3.Headers headers()>();

        $r3 = staticinvoke <okhttp3.internal.http.HttpHeaders: okhttp3.Headers varyHeaders(okhttp3.Headers,okhttp3.Headers)>($r3, $r4);

        return $r3;
    }
    public static boolean varyMatches(okhttp3.Response, okhttp3.Headers, okhttp3.Request)
    {
        okhttp3.Response $r0;
        okhttp3.Headers $r1;
        okhttp3.Request $r2;
        java.util.Set $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        java.lang.String r6;
        java.util.List $r7, $r8;

        $r0 := @parameter0: okhttp3.Response;

        $r1 := @parameter1: okhttp3.Headers;

        $r2 := @parameter2: okhttp3.Request;

        $r3 = staticinvoke <okhttp3.internal.http.HttpHeaders: java.util.Set varyFields(okhttp3.Response)>($r0);

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.String) $r5;

        $r7 = virtualinvoke $r1.<okhttp3.Headers: java.util.List values(java.lang.String)>(r6);

        $r8 = virtualinvoke $r2.<okhttp3.Request: java.util.List headers(java.lang.String)>(r6);

        $z0 = staticinvoke <okhttp3.internal.Util: boolean equal(java.lang.Object,java.lang.Object)>($r7, $r8);

        if $z0 != 0 goto label1;

        return 0;

     label2:
        return 1;
    }
