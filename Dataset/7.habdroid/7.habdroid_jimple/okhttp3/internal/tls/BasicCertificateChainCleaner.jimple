okhttp3.internal.tls.BasicCertificateChainCleaner extends okhttp3.internal.tls.CertificateChainCleaner
private static final int MAX_SIGNERS
private final okhttp3.internal.tls.TrustRootIndex trustRootIndex
    public void <init>(okhttp3.internal.tls.TrustRootIndex)
    {
        okhttp3.internal.tls.BasicCertificateChainCleaner r0;
        okhttp3.internal.tls.TrustRootIndex $r1;

        r0 := @this: okhttp3.internal.tls.BasicCertificateChainCleaner;

        $r1 := @parameter0: okhttp3.internal.tls.TrustRootIndex;

        specialinvoke r0.<okhttp3.internal.tls.CertificateChainCleaner: void <init>()>();

        r0.<okhttp3.internal.tls.BasicCertificateChainCleaner: okhttp3.internal.tls.TrustRootIndex trustRootIndex> = $r1;

        return;
    }
    private boolean verifySignature(java.security.cert.X509Certificate, java.security.cert.X509Certificate)
    {
        okhttp3.internal.tls.BasicCertificateChainCleaner r0;
        java.security.cert.X509Certificate $r1, $r2;
        java.security.GeneralSecurityException r3;
        java.security.Principal $r4, $r5;
        boolean $z0;
        java.security.PublicKey $r6;

        r0 := @this: okhttp3.internal.tls.BasicCertificateChainCleaner;

        $r1 := @parameter0: java.security.cert.X509Certificate;

        $r2 := @parameter1: java.security.cert.X509Certificate;

        $r4 = virtualinvoke $r1.<java.security.cert.X509Certificate: java.security.Principal getIssuerDN()>();

        $r5 = virtualinvoke $r2.<java.security.cert.X509Certificate: java.security.Principal getSubjectDN()>();

        $z0 = interfaceinvoke $r4.<java.security.Principal: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r6 = virtualinvoke $r2.<java.security.cert.X509Certificate: java.security.PublicKey getPublicKey()>();

        virtualinvoke $r1.<java.security.cert.X509Certificate: void verify(java.security.PublicKey)>($r6);

     label2:
        return 1;

     label3:
        r3 := @caughtexception;

        return 0;

        catch java.security.GeneralSecurityException from label1 to label2 with label3;
    }
    public java.util.List clean(java.util.List, java.lang.String) throws javax.net.ssl.SSLPeerUnverifiedException
    {
        okhttp3.internal.tls.BasicCertificateChainCleaner r0;
        java.util.List r1;
        java.lang.String $r2;
        java.util.ArrayDeque r3;
        java.util.ArrayList r4;
        java.lang.Object $r5;
        boolean z0, $z1;
        int i0, $i1;
        java.security.cert.X509Certificate r6, $r8;
        okhttp3.internal.tls.TrustRootIndex $r7;
        java.util.Iterator $r9;
        javax.net.ssl.SSLPeerUnverifiedException $r10;
        java.lang.StringBuilder $r11;

        r0 := @this: okhttp3.internal.tls.BasicCertificateChainCleaner;

        r1 := @parameter0: java.util.List;

        $r2 := @parameter1: java.lang.String;

        r3 = new java.util.ArrayDeque;

        specialinvoke r3.<java.util.ArrayDeque: void <init>(java.util.Collection)>(r1);

        r4 = new java.util.ArrayList;

        specialinvoke r4.<java.util.ArrayList: void <init>()>();

        $r5 = interfaceinvoke r3.<java.util.Deque: java.lang.Object removeFirst()>();

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r5);

        z0 = 0;

        i0 = 0;

     label01:
        if i0 >= 9 goto label09;

        $i1 = interfaceinvoke r4.<java.util.List: int size()>();

        $i1 = $i1 + -1;

        $r5 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>($i1);

        r6 = (java.security.cert.X509Certificate) $r5;

        $r7 = r0.<okhttp3.internal.tls.BasicCertificateChainCleaner: okhttp3.internal.tls.TrustRootIndex trustRootIndex>;

        $r8 = virtualinvoke $r7.<okhttp3.internal.tls.TrustRootIndex: java.security.cert.X509Certificate findByIssuerAndSignature(java.security.cert.X509Certificate)>(r6);

        if $r8 == null goto label06;

        $i1 = interfaceinvoke r4.<java.util.List: int size()>();

        if $i1 > 1 goto label02;

        z0 = virtualinvoke r6.<java.security.cert.X509Certificate: boolean equals(java.lang.Object)>($r8);

        if z0 != 0 goto label03;

     label02:
        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r8);

     label03:
        z0 = specialinvoke r0.<okhttp3.internal.tls.BasicCertificateChainCleaner: boolean verifySignature(java.security.cert.X509Certificate,java.security.cert.X509Certificate)>($r8, $r8);

        if z0 == 0 goto label04;

        return r4;

     label04:
        z0 = 1;

     label05:
        i0 = i0 + 1;

        goto label01;

     label06:
        $r9 = interfaceinvoke r3.<java.util.Deque: java.util.Iterator iterator()>();

     label07:
        $z1 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label08;

        $r5 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (java.security.cert.X509Certificate) $r5;

        $z1 = specialinvoke r0.<okhttp3.internal.tls.BasicCertificateChainCleaner: boolean verifySignature(java.security.cert.X509Certificate,java.security.cert.X509Certificate)>(r6, $r8);

        if $z1 == 0 goto label07;

        interfaceinvoke $r9.<java.util.Iterator: void remove()>();

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r8);

        goto label05;

     label08:
        if z0 != 0 goto label10;

        $r10 = new javax.net.ssl.SSLPeerUnverifiedException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to find a trusted cert that signed ");

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r2 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<javax.net.ssl.SSLPeerUnverifiedException: void <init>(java.lang.String)>($r2);

        throw $r10;

     label09:
        $r10 = new javax.net.ssl.SSLPeerUnverifiedException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Certificate chain too long: ");

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r2 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<javax.net.ssl.SSLPeerUnverifiedException: void <init>(java.lang.String)>($r2);

        throw $r10;

     label10:
        return r4;
    }
    public boolean equals(java.lang.Object)
    {
        okhttp3.internal.tls.BasicCertificateChainCleaner r0, r3;
        okhttp3.internal.tls.TrustRootIndex $r1, $r4;
        boolean $z0;
        java.lang.Object r2;

        r0 := @this: okhttp3.internal.tls.BasicCertificateChainCleaner;

        r2 := @parameter0: java.lang.Object;

        if r2 != r0 goto label1;

        return 1;

     label1:
        $z0 = r2 instanceof okhttp3.internal.tls.BasicCertificateChainCleaner;

        if $z0 == 0 goto label2;

        r3 = (okhttp3.internal.tls.BasicCertificateChainCleaner) r2;

        $r4 = r3.<okhttp3.internal.tls.BasicCertificateChainCleaner: okhttp3.internal.tls.TrustRootIndex trustRootIndex>;

        $r1 = r0.<okhttp3.internal.tls.BasicCertificateChainCleaner: okhttp3.internal.tls.TrustRootIndex trustRootIndex>;

        $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label3;

     label2:
        return 0;

     label3:
        return 1;
    }
    public int hashCode()
    {
        okhttp3.internal.tls.BasicCertificateChainCleaner r0;
        int $i0;
        okhttp3.internal.tls.TrustRootIndex $r1;

        r0 := @this: okhttp3.internal.tls.BasicCertificateChainCleaner;

        $r1 = r0.<okhttp3.internal.tls.BasicCertificateChainCleaner: okhttp3.internal.tls.TrustRootIndex trustRootIndex>;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        return $i0;
    }
