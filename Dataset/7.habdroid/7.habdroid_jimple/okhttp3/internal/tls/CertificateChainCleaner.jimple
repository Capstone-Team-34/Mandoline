okhttp3.internal.tls.CertificateChainCleaner extends java.lang.Object
    public void <init>()
    {
        okhttp3.internal.tls.CertificateChainCleaner r0;

        r0 := @this: okhttp3.internal.tls.CertificateChainCleaner;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static okhttp3.internal.tls.CertificateChainCleaner get(javax.net.ssl.X509TrustManager)
    {
        javax.net.ssl.X509TrustManager $r0;
        okhttp3.internal.platform.Platform $r1;
        okhttp3.internal.tls.CertificateChainCleaner $r2;

        $r0 := @parameter0: javax.net.ssl.X509TrustManager;

        $r1 = staticinvoke <okhttp3.internal.platform.Platform: okhttp3.internal.platform.Platform get()>();

        $r2 = virtualinvoke $r1.<okhttp3.internal.platform.Platform: okhttp3.internal.tls.CertificateChainCleaner buildCertificateChainCleaner(javax.net.ssl.X509TrustManager)>($r0);

        return $r2;
    }
    public static transient okhttp3.internal.tls.CertificateChainCleaner get(java.security.cert.X509Certificate[])
    {
        java.security.cert.X509Certificate[] $r0;
        okhttp3.internal.tls.BasicCertificateChainCleaner $r1;
        okhttp3.internal.tls.TrustRootIndex $r2;

        $r0 := @parameter0: java.security.cert.X509Certificate[];

        $r1 = new okhttp3.internal.tls.BasicCertificateChainCleaner;

        $r2 = staticinvoke <okhttp3.internal.tls.TrustRootIndex: okhttp3.internal.tls.TrustRootIndex get(java.security.cert.X509Certificate[])>($r0);

        specialinvoke $r1.<okhttp3.internal.tls.BasicCertificateChainCleaner: void <init>(okhttp3.internal.tls.TrustRootIndex)>($r2);

        return $r1;
    }
public abstract java.util.List clean(java.util.List, java.lang.String) throws javax.net.ssl.SSLPeerUnverifiedException { 
// no body
} 
