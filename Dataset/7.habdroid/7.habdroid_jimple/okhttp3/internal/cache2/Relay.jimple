okhttp3.internal.cache2.Relay extends java.lang.Object
private static final long FILE_HEADER_SIZE
static final okio.ByteString PREFIX_CLEAN
static final okio.ByteString PREFIX_DIRTY
private static final int SOURCE_FILE
private static final int SOURCE_UPSTREAM
final okio.Buffer buffer
final long bufferMaxSize
boolean complete
java.io.RandomAccessFile file
private final okio.ByteString metadata
int sourceCount
okio.Source upstream
final okio.Buffer upstreamBuffer
long upstreamPos
java.lang.Thread upstreamReader
    static void <clinit>()
    {
        okio.ByteString $r0;

        $r0 = staticinvoke <okio.ByteString: okio.ByteString encodeUtf8(java.lang.String)>("OkHttp cache v1\n");

        <okhttp3.internal.cache2.Relay: okio.ByteString PREFIX_CLEAN> = $r0;

        $r0 = staticinvoke <okio.ByteString: okio.ByteString encodeUtf8(java.lang.String)>("OkHttp DIRTY :(\n");

        <okhttp3.internal.cache2.Relay: okio.ByteString PREFIX_DIRTY> = $r0;

        return;
    }
    private void <init>(java.io.RandomAccessFile, okio.Source, long, okio.ByteString, long)
    {
        okhttp3.internal.cache2.Relay r0;
        java.io.RandomAccessFile $r1;
        okio.Source $r2;
        long $l0, $l1;
        okio.ByteString $r3;
        okio.Buffer $r4;
        boolean $z0;

        r0 := @this: okhttp3.internal.cache2.Relay;

        $r1 := @parameter0: java.io.RandomAccessFile;

        $r2 := @parameter1: okio.Source;

        $l0 := @parameter2: long;

        $r3 := @parameter3: okio.ByteString;

        $l1 := @parameter4: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = new okio.Buffer;

        specialinvoke $r4.<okio.Buffer: void <init>()>();

        r0.<okhttp3.internal.cache2.Relay: okio.Buffer upstreamBuffer> = $r4;

        $r4 = new okio.Buffer;

        specialinvoke $r4.<okio.Buffer: void <init>()>();

        r0.<okhttp3.internal.cache2.Relay: okio.Buffer buffer> = $r4;

        r0.<okhttp3.internal.cache2.Relay: java.io.RandomAccessFile file> = $r1;

        r0.<okhttp3.internal.cache2.Relay: okio.Source upstream> = $r2;

        if $r2 != null goto label2;

        $z0 = 1;

     label1:
        r0.<okhttp3.internal.cache2.Relay: boolean complete> = $z0;

        r0.<okhttp3.internal.cache2.Relay: long upstreamPos> = $l0;

        r0.<okhttp3.internal.cache2.Relay: okio.ByteString metadata> = $r3;

        r0.<okhttp3.internal.cache2.Relay: long bufferMaxSize> = $l1;

        return;

     label2:
        $z0 = 0;

        goto label1;
    }
    public static okhttp3.internal.cache2.Relay edit(java.io.File, okio.Source, okio.ByteString, long) throws java.io.IOException
    {
        java.io.File $r0;
        okio.Source $r1;
        okio.ByteString $r2;
        long $l0;
        okhttp3.internal.cache2.Relay r3;
        java.io.RandomAccessFile r4;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: okio.Source;

        $r2 := @parameter2: okio.ByteString;

        $l0 := @parameter3: long;

        r4 = new java.io.RandomAccessFile;

        specialinvoke r4.<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>($r0, "rw");

        r3 = new okhttp3.internal.cache2.Relay;

        specialinvoke r3.<okhttp3.internal.cache2.Relay: void <init>(java.io.RandomAccessFile,okio.Source,long,okio.ByteString,long)>(r4, $r1, 0L, $r2, $l0);

        virtualinvoke r4.<java.io.RandomAccessFile: void setLength(long)>(0L);

        $r2 = <okhttp3.internal.cache2.Relay: okio.ByteString PREFIX_DIRTY>;

        specialinvoke r3.<okhttp3.internal.cache2.Relay: void writeHeader(okio.ByteString,long,long)>($r2, -1L, -1L);

        return r3;
    }
    public static okhttp3.internal.cache2.Relay read(java.io.File) throws java.io.IOException
    {
        java.io.File $r0;
        okhttp3.internal.cache2.FileOperator r1;
        okio.Buffer r2;
        long $l0, $l2, $l3;
        okhttp3.internal.cache2.Relay $r3;
        java.io.RandomAccessFile r4;
        java.nio.channels.FileChannel $r5;
        okio.ByteString $r6, $r7;
        int $i1;
        boolean $z0;
        java.io.IOException $r8;

        $r0 := @parameter0: java.io.File;

        r4 = new java.io.RandomAccessFile;

        specialinvoke r4.<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>($r0, "rw");

        r1 = new okhttp3.internal.cache2.FileOperator;

        $r5 = virtualinvoke r4.<java.io.RandomAccessFile: java.nio.channels.FileChannel getChannel()>();

        specialinvoke r1.<okhttp3.internal.cache2.FileOperator: void <init>(java.nio.channels.FileChannel)>($r5);

        r2 = new okio.Buffer;

        specialinvoke r2.<okio.Buffer: void <init>()>();

        virtualinvoke r1.<okhttp3.internal.cache2.FileOperator: void read(long,okio.Buffer,long)>(0L, r2, 32L);

        $r6 = <okhttp3.internal.cache2.Relay: okio.ByteString PREFIX_CLEAN>;

        $i1 = virtualinvoke $r6.<okio.ByteString: int size()>();

        $l0 = (long) $i1;

        $r6 = virtualinvoke r2.<okio.Buffer: okio.ByteString readByteString(long)>($l0);

        $r7 = <okhttp3.internal.cache2.Relay: okio.ByteString PREFIX_CLEAN>;

        $z0 = virtualinvoke $r6.<okio.ByteString: boolean equals(java.lang.Object)>($r7);

        if $z0 != 0 goto label1;

        $r8 = new java.io.IOException;

        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>("unreadable cache file");

        throw $r8;

     label1:
        $l2 = virtualinvoke r2.<okio.Buffer: long readLong()>();

        $l3 = virtualinvoke r2.<okio.Buffer: long readLong()>();

        r2 = new okio.Buffer;

        specialinvoke r2.<okio.Buffer: void <init>()>();

        $l0 = 32L + $l2;

        virtualinvoke r1.<okhttp3.internal.cache2.FileOperator: void read(long,okio.Buffer,long)>($l0, r2, $l3);

        $r6 = virtualinvoke r2.<okio.Buffer: okio.ByteString readByteString()>();

        $r3 = new okhttp3.internal.cache2.Relay;

        specialinvoke $r3.<okhttp3.internal.cache2.Relay: void <init>(java.io.RandomAccessFile,okio.Source,long,okio.ByteString,long)>(r4, null, $l2, $r6, 0L);

        return $r3;
    }
    private void writeHeader(okio.ByteString, long, long) throws java.io.IOException
    {
        okhttp3.internal.cache2.Relay r0;
        okio.ByteString $r1;
        long $l0, $l1;
        okhttp3.internal.cache2.FileOperator r2;
        okio.Buffer r3;
        byte $b2;
        java.lang.IllegalArgumentException $r4;
        java.io.RandomAccessFile $r5;
        java.nio.channels.FileChannel $r6;

        r0 := @this: okhttp3.internal.cache2.Relay;

        $r1 := @parameter0: okio.ByteString;

        $l0 := @parameter1: long;

        $l1 := @parameter2: long;

        r3 = new okio.Buffer;

        specialinvoke r3.<okio.Buffer: void <init>()>();

        virtualinvoke r3.<okio.Buffer: okio.Buffer write(okio.ByteString)>($r1);

        virtualinvoke r3.<okio.Buffer: okio.Buffer writeLong(long)>($l0);

        virtualinvoke r3.<okio.Buffer: okio.Buffer writeLong(long)>($l1);

        $l0 = virtualinvoke r3.<okio.Buffer: long size()>();

        $b2 = $l0 cmp 32L;

        if $b2 == 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r4;

     label1:
        r2 = new okhttp3.internal.cache2.FileOperator;

        $r5 = r0.<okhttp3.internal.cache2.Relay: java.io.RandomAccessFile file>;

        $r6 = virtualinvoke $r5.<java.io.RandomAccessFile: java.nio.channels.FileChannel getChannel()>();

        specialinvoke r2.<okhttp3.internal.cache2.FileOperator: void <init>(java.nio.channels.FileChannel)>($r6);

        virtualinvoke r2.<okhttp3.internal.cache2.FileOperator: void write(long,okio.Buffer,long)>(0L, r3, 32L);

        return;
    }
    private void writeMetadata(long) throws java.io.IOException
    {
        okhttp3.internal.cache2.Relay r0;
        long $l0, $l2;
        okhttp3.internal.cache2.FileOperator r1;
        okio.Buffer r2;
        okio.ByteString $r3;
        java.io.RandomAccessFile $r4;
        java.nio.channels.FileChannel $r5;
        int $i1;

        r0 := @this: okhttp3.internal.cache2.Relay;

        $l0 := @parameter0: long;

        r2 = new okio.Buffer;

        specialinvoke r2.<okio.Buffer: void <init>()>();

        $r3 = r0.<okhttp3.internal.cache2.Relay: okio.ByteString metadata>;

        virtualinvoke r2.<okio.Buffer: okio.Buffer write(okio.ByteString)>($r3);

        r1 = new okhttp3.internal.cache2.FileOperator;

        $r4 = r0.<okhttp3.internal.cache2.Relay: java.io.RandomAccessFile file>;

        $r5 = virtualinvoke $r4.<java.io.RandomAccessFile: java.nio.channels.FileChannel getChannel()>();

        specialinvoke r1.<okhttp3.internal.cache2.FileOperator: void <init>(java.nio.channels.FileChannel)>($r5);

        $l0 = 32L + $l0;

        $r3 = r0.<okhttp3.internal.cache2.Relay: okio.ByteString metadata>;

        $i1 = virtualinvoke $r3.<okio.ByteString: int size()>();

        $l2 = (long) $i1;

        virtualinvoke r1.<okhttp3.internal.cache2.FileOperator: void write(long,okio.Buffer,long)>($l0, r2, $l2);

        return;
    }
    void commit(long) throws java.io.IOException
    {
        okhttp3.internal.cache2.Relay r0;
        long $l0, $l1;
        okio.ByteString $r1, $r4;
        java.io.RandomAccessFile $r2;
        java.nio.channels.FileChannel $r3;
        int $i2;
        okio.Source $r5;
        java.lang.Throwable $r6;

        r0 := @this: okhttp3.internal.cache2.Relay;

        $l0 := @parameter0: long;

        specialinvoke r0.<okhttp3.internal.cache2.Relay: void writeMetadata(long)>($l0);

        $r2 = r0.<okhttp3.internal.cache2.Relay: java.io.RandomAccessFile file>;

        $r3 = virtualinvoke $r2.<java.io.RandomAccessFile: java.nio.channels.FileChannel getChannel()>();

        virtualinvoke $r3.<java.nio.channels.FileChannel: void force(boolean)>(0);

        $r1 = <okhttp3.internal.cache2.Relay: okio.ByteString PREFIX_CLEAN>;

        $r4 = r0.<okhttp3.internal.cache2.Relay: okio.ByteString metadata>;

        $i2 = virtualinvoke $r4.<okio.ByteString: int size()>();

        $l1 = (long) $i2;

        specialinvoke r0.<okhttp3.internal.cache2.Relay: void writeHeader(okio.ByteString,long,long)>($r1, $l0, $l1);

        $r2 = r0.<okhttp3.internal.cache2.Relay: java.io.RandomAccessFile file>;

        $r3 = virtualinvoke $r2.<java.io.RandomAccessFile: java.nio.channels.FileChannel getChannel()>();

        virtualinvoke $r3.<java.nio.channels.FileChannel: void force(boolean)>(0);

        entermonitor r0;

     label1:
        r0.<okhttp3.internal.cache2.Relay: boolean complete> = 1;

        exitmonitor r0;

     label2:
        $r5 = r0.<okhttp3.internal.cache2.Relay: okio.Source upstream>;

        staticinvoke <okhttp3.internal.Util: void closeQuietly(java.io.Closeable)>($r5);

        r0.<okhttp3.internal.cache2.Relay: okio.Source upstream> = null;

        return;

     label3:
        $r6 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }
    boolean isClosed()
    {
        okhttp3.internal.cache2.Relay r0;
        java.io.RandomAccessFile $r1;

        r0 := @this: okhttp3.internal.cache2.Relay;

        $r1 = r0.<okhttp3.internal.cache2.Relay: java.io.RandomAccessFile file>;

        if $r1 != null goto label1;

        return 1;

     label1:
        return 0;
    }
    public okio.ByteString metadata()
    {
        okhttp3.internal.cache2.Relay r0;
        okio.ByteString r1;

        r0 := @this: okhttp3.internal.cache2.Relay;

        r1 = r0.<okhttp3.internal.cache2.Relay: okio.ByteString metadata>;

        return r1;
    }
    public okio.Source newSource()
    {
        okhttp3.internal.cache2.Relay r0;
        java.io.RandomAccessFile $r1;
        int $i0;
        okhttp3.internal.cache2.Relay$RelaySource $r2;
        java.lang.Throwable $r3;

        r0 := @this: okhttp3.internal.cache2.Relay;

        entermonitor r0;

     label1:
        $r1 = r0.<okhttp3.internal.cache2.Relay: java.io.RandomAccessFile file>;

        if $r1 != null goto label3;

        exitmonitor r0;

     label2:
        return null;

     label3:
        $i0 = r0.<okhttp3.internal.cache2.Relay: int sourceCount>;

        $i0 = $i0 + 1;

        r0.<okhttp3.internal.cache2.Relay: int sourceCount> = $i0;

        exitmonitor r0;

     label4:
        $r2 = new okhttp3.internal.cache2.Relay$RelaySource;

        specialinvoke $r2.<okhttp3.internal.cache2.Relay$RelaySource: void <init>(okhttp3.internal.cache2.Relay)>(r0);

        return $r2;

     label5:
        $r3 := @caughtexception;

     label6:
        exitmonitor r0;

     label7:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }
