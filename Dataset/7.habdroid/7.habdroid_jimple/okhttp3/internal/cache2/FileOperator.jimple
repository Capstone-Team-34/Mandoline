okhttp3.internal.cache2.FileOperator extends java.lang.Object
private static final int BUFFER_SIZE
private final byte[] byteArray
private final java.nio.ByteBuffer byteBuffer
private final java.nio.channels.FileChannel fileChannel
    public void <init>(java.nio.channels.FileChannel)
    {
        okhttp3.internal.cache2.FileOperator r0;
        java.nio.channels.FileChannel $r1;
        java.nio.ByteBuffer $r2;
        byte[] $r3;

        r0 := @this: okhttp3.internal.cache2.FileOperator;

        $r1 := @parameter0: java.nio.channels.FileChannel;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = newarray (byte)[8192];

        r0.<okhttp3.internal.cache2.FileOperator: byte[] byteArray> = $r3;

        $r3 = r0.<okhttp3.internal.cache2.FileOperator: byte[] byteArray>;

        $r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($r3);

        r0.<okhttp3.internal.cache2.FileOperator: java.nio.ByteBuffer byteBuffer> = $r2;

        r0.<okhttp3.internal.cache2.FileOperator: java.nio.channels.FileChannel fileChannel> = $r1;

        return;
    }
    public void read(long, okio.Buffer, long) throws java.io.IOException
    {
        okhttp3.internal.cache2.FileOperator r0;
        okio.Buffer $r1;
        long $l0, $l1, $l4;
        byte $b2;
        java.lang.IndexOutOfBoundsException $r2;
        java.nio.ByteBuffer $r3;
        int $i3;
        byte[] $r4;
        java.nio.channels.FileChannel $r5;
        java.io.EOFException $r6;
        java.lang.Throwable $r7;

        r0 := @this: okhttp3.internal.cache2.FileOperator;

        $l0 := @parameter0: long;

        $r1 := @parameter1: okio.Buffer;

        $l1 := @parameter2: long;

        $b2 = $l1 cmp 0L;

        if $b2 >= 0 goto label03;

        $r2 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r2;

     label01:
        $r3 = r0.<okhttp3.internal.cache2.FileOperator: java.nio.ByteBuffer byteBuffer>;

        $i3 = virtualinvoke $r3.<java.nio.ByteBuffer: int position()>();

        $r4 = r0.<okhttp3.internal.cache2.FileOperator: byte[] byteArray>;

        virtualinvoke $r1.<okio.Buffer: okio.Buffer write(byte[],int,int)>($r4, 0, $i3);

     label02:
        $l4 = (long) $i3;

        $l0 = $l0 + $l4;

        $l4 = (long) $i3;

        $l1 = $l1 - $l4;

        $r3 = r0.<okhttp3.internal.cache2.FileOperator: java.nio.ByteBuffer byteBuffer>;

        virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.Buffer clear()>();

     label03:
        $b2 = $l1 cmp 0L;

        if $b2 <= 0 goto label10;

     label04:
        $r3 = r0.<okhttp3.internal.cache2.FileOperator: java.nio.ByteBuffer byteBuffer>;

        $l4 = staticinvoke <java.lang.Math: long min(long,long)>(8192L, $l1);

     label05:
        $i3 = (int) $l4;

     label06:
        virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>($i3);

        $r5 = r0.<okhttp3.internal.cache2.FileOperator: java.nio.channels.FileChannel fileChannel>;

        $r3 = r0.<okhttp3.internal.cache2.FileOperator: java.nio.ByteBuffer byteBuffer>;

        $i3 = virtualinvoke $r5.<java.nio.channels.FileChannel: int read(java.nio.ByteBuffer,long)>($r3, $l0);

     label07:
        if $i3 != -1 goto label01;

     label08:
        $r6 = new java.io.EOFException;

        specialinvoke $r6.<java.io.EOFException: void <init>()>();

        throw $r6;

     label09:
        $r7 := @caughtexception;

        $r3 = r0.<okhttp3.internal.cache2.FileOperator: java.nio.ByteBuffer byteBuffer>;

        virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.Buffer clear()>();

        throw $r7;

     label10:
        return;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label08 to label09 with label09;
    }
    public void write(long, okio.Buffer, long) throws java.io.IOException
    {
        okhttp3.internal.cache2.FileOperator r0;
        okio.Buffer $r1;
        int i0, $i5;
        long $l1, $l2, $l4;
        byte $b3;
        java.lang.IndexOutOfBoundsException $r2;
        byte[] $r3;
        java.nio.ByteBuffer $r4;
        java.nio.channels.FileChannel $r5;
        boolean $z0;
        java.lang.Throwable $r6;

        r0 := @this: okhttp3.internal.cache2.FileOperator;

        $l1 := @parameter0: long;

        $r1 := @parameter1: okio.Buffer;

        $l2 := @parameter2: long;

        $b3 = $l2 cmp 0L;

        if $b3 < 0 goto label01;

        $l4 = virtualinvoke $r1.<okio.Buffer: long size()>();

        $b3 = $l2 cmp $l4;

        if $b3 <= 0 goto label02;

     label01:
        $r2 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r2;

     label02:
        $b3 = $l2 cmp 0L;

        if $b3 <= 0 goto label11;

     label03:
        $l4 = staticinvoke <java.lang.Math: long min(long,long)>(8192L, $l2);

     label04:
        i0 = (int) $l4;

     label05:
        $r3 = r0.<okhttp3.internal.cache2.FileOperator: byte[] byteArray>;

        virtualinvoke $r1.<okio.Buffer: int read(byte[],int,int)>($r3, 0, i0);

        $r4 = r0.<okhttp3.internal.cache2.FileOperator: java.nio.ByteBuffer byteBuffer>;

        virtualinvoke $r4.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>(i0);

     label06:
        $r5 = r0.<okhttp3.internal.cache2.FileOperator: java.nio.channels.FileChannel fileChannel>;

        $r4 = r0.<okhttp3.internal.cache2.FileOperator: java.nio.ByteBuffer byteBuffer>;

        $i5 = virtualinvoke $r5.<java.nio.channels.FileChannel: int write(java.nio.ByteBuffer,long)>($r4, $l1);

     label07:
        $l4 = (long) $i5;

        $l1 = $l1 + $l4;

     label08:
        $r4 = r0.<okhttp3.internal.cache2.FileOperator: java.nio.ByteBuffer byteBuffer>;

        $z0 = virtualinvoke $r4.<java.nio.ByteBuffer: boolean hasRemaining()>();

     label09:
        if $z0 != 0 goto label06;

        $l4 = (long) i0;

        $l2 = $l2 - $l4;

        $r4 = r0.<okhttp3.internal.cache2.FileOperator: java.nio.ByteBuffer byteBuffer>;

        virtualinvoke $r4.<java.nio.ByteBuffer: java.nio.Buffer clear()>();

        goto label02;

     label10:
        $r6 := @caughtexception;

        $r4 = r0.<okhttp3.internal.cache2.FileOperator: java.nio.ByteBuffer byteBuffer>;

        virtualinvoke $r4.<java.nio.ByteBuffer: java.nio.Buffer clear()>();

        throw $r6;

     label11:
        return;

        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
    }
