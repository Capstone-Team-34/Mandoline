okhttp3.internal.http2.Http2Codec extends java.lang.Object implements okhttp3.internal.http.HttpCodec
private static final okio.ByteString CONNECTION
private static final okio.ByteString ENCODING
private static final okio.ByteString HOST
private static final java.util.List HTTP_2_SKIPPED_REQUEST_HEADERS
private static final java.util.List HTTP_2_SKIPPED_RESPONSE_HEADERS
private static final okio.ByteString KEEP_ALIVE
private static final okio.ByteString PROXY_CONNECTION
private static final okio.ByteString TE
private static final okio.ByteString TRANSFER_ENCODING
private static final okio.ByteString UPGRADE
private final okhttp3.OkHttpClient client
private final okhttp3.internal.http2.Http2Connection connection
private okhttp3.internal.http2.Http2Stream stream
final okhttp3.internal.connection.StreamAllocation streamAllocation
    static void <clinit>()
    {
        okio.ByteString $r0;
        okio.ByteString[] $r1;
        java.util.List $r2;

        $r0 = staticinvoke <okio.ByteString: okio.ByteString encodeUtf8(java.lang.String)>("connection");

        <okhttp3.internal.http2.Http2Codec: okio.ByteString CONNECTION> = $r0;

        $r0 = staticinvoke <okio.ByteString: okio.ByteString encodeUtf8(java.lang.String)>("host");

        <okhttp3.internal.http2.Http2Codec: okio.ByteString HOST> = $r0;

        $r0 = staticinvoke <okio.ByteString: okio.ByteString encodeUtf8(java.lang.String)>("keep-alive");

        <okhttp3.internal.http2.Http2Codec: okio.ByteString KEEP_ALIVE> = $r0;

        $r0 = staticinvoke <okio.ByteString: okio.ByteString encodeUtf8(java.lang.String)>("proxy-connection");

        <okhttp3.internal.http2.Http2Codec: okio.ByteString PROXY_CONNECTION> = $r0;

        $r0 = staticinvoke <okio.ByteString: okio.ByteString encodeUtf8(java.lang.String)>("transfer-encoding");

        <okhttp3.internal.http2.Http2Codec: okio.ByteString TRANSFER_ENCODING> = $r0;

        $r0 = staticinvoke <okio.ByteString: okio.ByteString encodeUtf8(java.lang.String)>("te");

        <okhttp3.internal.http2.Http2Codec: okio.ByteString TE> = $r0;

        $r0 = staticinvoke <okio.ByteString: okio.ByteString encodeUtf8(java.lang.String)>("encoding");

        <okhttp3.internal.http2.Http2Codec: okio.ByteString ENCODING> = $r0;

        $r0 = staticinvoke <okio.ByteString: okio.ByteString encodeUtf8(java.lang.String)>("upgrade");

        <okhttp3.internal.http2.Http2Codec: okio.ByteString UPGRADE> = $r0;

        $r1 = newarray (okio.ByteString)[12];

        $r0 = <okhttp3.internal.http2.Http2Codec: okio.ByteString CONNECTION>;

        $r1[0] = $r0;

        $r0 = <okhttp3.internal.http2.Http2Codec: okio.ByteString HOST>;

        $r1[1] = $r0;

        $r0 = <okhttp3.internal.http2.Http2Codec: okio.ByteString KEEP_ALIVE>;

        $r1[2] = $r0;

        $r0 = <okhttp3.internal.http2.Http2Codec: okio.ByteString PROXY_CONNECTION>;

        $r1[3] = $r0;

        $r0 = <okhttp3.internal.http2.Http2Codec: okio.ByteString TE>;

        $r1[4] = $r0;

        $r0 = <okhttp3.internal.http2.Http2Codec: okio.ByteString TRANSFER_ENCODING>;

        $r1[5] = $r0;

        $r0 = <okhttp3.internal.http2.Http2Codec: okio.ByteString ENCODING>;

        $r1[6] = $r0;

        $r0 = <okhttp3.internal.http2.Http2Codec: okio.ByteString UPGRADE>;

        $r1[7] = $r0;

        $r0 = <okhttp3.internal.http2.Header: okio.ByteString TARGET_METHOD>;

        $r1[8] = $r0;

        $r0 = <okhttp3.internal.http2.Header: okio.ByteString TARGET_PATH>;

        $r1[9] = $r0;

        $r0 = <okhttp3.internal.http2.Header: okio.ByteString TARGET_SCHEME>;

        $r1[10] = $r0;

        $r0 = <okhttp3.internal.http2.Header: okio.ByteString TARGET_AUTHORITY>;

        $r1[11] = $r0;

        $r2 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.lang.Object[])>($r1);

        <okhttp3.internal.http2.Http2Codec: java.util.List HTTP_2_SKIPPED_REQUEST_HEADERS> = $r2;

        $r1 = newarray (okio.ByteString)[8];

        $r0 = <okhttp3.internal.http2.Http2Codec: okio.ByteString CONNECTION>;

        $r1[0] = $r0;

        $r0 = <okhttp3.internal.http2.Http2Codec: okio.ByteString HOST>;

        $r1[1] = $r0;

        $r0 = <okhttp3.internal.http2.Http2Codec: okio.ByteString KEEP_ALIVE>;

        $r1[2] = $r0;

        $r0 = <okhttp3.internal.http2.Http2Codec: okio.ByteString PROXY_CONNECTION>;

        $r1[3] = $r0;

        $r0 = <okhttp3.internal.http2.Http2Codec: okio.ByteString TE>;

        $r1[4] = $r0;

        $r0 = <okhttp3.internal.http2.Http2Codec: okio.ByteString TRANSFER_ENCODING>;

        $r1[5] = $r0;

        $r0 = <okhttp3.internal.http2.Http2Codec: okio.ByteString ENCODING>;

        $r1[6] = $r0;

        $r0 = <okhttp3.internal.http2.Http2Codec: okio.ByteString UPGRADE>;

        $r1[7] = $r0;

        $r2 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.lang.Object[])>($r1);

        <okhttp3.internal.http2.Http2Codec: java.util.List HTTP_2_SKIPPED_RESPONSE_HEADERS> = $r2;

        return;
    }
    public void <init>(okhttp3.OkHttpClient, okhttp3.internal.connection.StreamAllocation, okhttp3.internal.http2.Http2Connection)
    {
        okhttp3.internal.http2.Http2Codec r0;
        okhttp3.OkHttpClient $r1;
        okhttp3.internal.connection.StreamAllocation $r2;
        okhttp3.internal.http2.Http2Connection $r3;

        r0 := @this: okhttp3.internal.http2.Http2Codec;

        $r1 := @parameter0: okhttp3.OkHttpClient;

        $r2 := @parameter1: okhttp3.internal.connection.StreamAllocation;

        $r3 := @parameter2: okhttp3.internal.http2.Http2Connection;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<okhttp3.internal.http2.Http2Codec: okhttp3.OkHttpClient client> = $r1;

        r0.<okhttp3.internal.http2.Http2Codec: okhttp3.internal.connection.StreamAllocation streamAllocation> = $r2;

        r0.<okhttp3.internal.http2.Http2Codec: okhttp3.internal.http2.Http2Connection connection> = $r3;

        return;
    }
    public static java.util.List http2HeadersList(okhttp3.Request)
    {
        okhttp3.Request $r0;
        java.util.ArrayList r1;
        okhttp3.Headers $r2;
        int $i0, $i1;
        okhttp3.internal.http2.Header $r3;
        okio.ByteString $r4;
        java.lang.String $r5;
        okhttp3.HttpUrl $r6;
        java.util.Locale $r7;
        java.util.List $r8;
        boolean $z0;

        $r0 := @parameter0: okhttp3.Request;

        $r2 = virtualinvoke $r0.<okhttp3.Request: okhttp3.Headers headers()>();

        r1 = new java.util.ArrayList;

        $i0 = virtualinvoke $r2.<okhttp3.Headers: int size()>();

        $i0 = $i0 + 4;

        specialinvoke r1.<java.util.ArrayList: void <init>(int)>($i0);

        $r3 = new okhttp3.internal.http2.Header;

        $r4 = <okhttp3.internal.http2.Header: okio.ByteString TARGET_METHOD>;

        $r5 = virtualinvoke $r0.<okhttp3.Request: java.lang.String method()>();

        specialinvoke $r3.<okhttp3.internal.http2.Header: void <init>(okio.ByteString,java.lang.String)>($r4, $r5);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r3);

        $r3 = new okhttp3.internal.http2.Header;

        $r4 = <okhttp3.internal.http2.Header: okio.ByteString TARGET_PATH>;

        $r6 = virtualinvoke $r0.<okhttp3.Request: okhttp3.HttpUrl url()>();

        $r5 = staticinvoke <okhttp3.internal.http.RequestLine: java.lang.String requestPath(okhttp3.HttpUrl)>($r6);

        specialinvoke $r3.<okhttp3.internal.http2.Header: void <init>(okio.ByteString,java.lang.String)>($r4, $r5);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r0.<okhttp3.Request: java.lang.String header(java.lang.String)>("Host");

        if $r5 == null goto label1;

        $r3 = new okhttp3.internal.http2.Header;

        $r4 = <okhttp3.internal.http2.Header: okio.ByteString TARGET_AUTHORITY>;

        specialinvoke $r3.<okhttp3.internal.http2.Header: void <init>(okio.ByteString,java.lang.String)>($r4, $r5);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r3);

     label1:
        $r3 = new okhttp3.internal.http2.Header;

        $r4 = <okhttp3.internal.http2.Header: okio.ByteString TARGET_SCHEME>;

        $r6 = virtualinvoke $r0.<okhttp3.Request: okhttp3.HttpUrl url()>();

        $r5 = virtualinvoke $r6.<okhttp3.HttpUrl: java.lang.String scheme()>();

        specialinvoke $r3.<okhttp3.internal.http2.Header: void <init>(okio.ByteString,java.lang.String)>($r4, $r5);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r3);

        $i0 = 0;

        $i1 = virtualinvoke $r2.<okhttp3.Headers: int size()>();

     label2:
        if $i0 >= $i1 goto label4;

        $r5 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String name(int)>($i0);

        $r7 = <java.util.Locale: java.util.Locale US>;

        $r5 = virtualinvoke $r5.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r7);

        $r4 = staticinvoke <okio.ByteString: okio.ByteString encodeUtf8(java.lang.String)>($r5);

        $r8 = <okhttp3.internal.http2.Http2Codec: java.util.List HTTP_2_SKIPPED_REQUEST_HEADERS>;

        $z0 = interfaceinvoke $r8.<java.util.List: boolean contains(java.lang.Object)>($r4);

        if $z0 != 0 goto label3;

        $r3 = new okhttp3.internal.http2.Header;

        $r5 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String value(int)>($i0);

        specialinvoke $r3.<okhttp3.internal.http2.Header: void <init>(okio.ByteString,java.lang.String)>($r4, $r5);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r3);

     label3:
        $i0 = $i0 + 1;

        goto label2;

     label4:
        return r1;
    }
    public static okhttp3.Response$Builder readHttp2HeadersList(java.util.List) throws java.io.IOException
    {
        java.util.List r0, $r9;
        okio.ByteString r1, $r6;
        okhttp3.internal.http.StatusLine r2;
        okhttp3.Headers$Builder r3;
        int i0, $i1, $i2;
        java.lang.Object $r4;
        okhttp3.internal.http2.Header r5;
        java.lang.String $r7, $r11;
        boolean $z0;
        java.lang.StringBuilder $r8;
        okhttp3.internal.Internal $r10;
        java.net.ProtocolException $r12;
        okhttp3.Response$Builder $r13;
        okhttp3.Protocol $r14;
        okhttp3.Headers $r15;

        r0 := @parameter0: java.util.List;

        r2 = null;

        r3 = new okhttp3.Headers$Builder;

        specialinvoke r3.<okhttp3.Headers$Builder: void <init>()>();

        i0 = 0;

        $i1 = interfaceinvoke r0.<java.util.List: int size()>();

     label1:
        if i0 >= $i1 goto label5;

        $r4 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i0);

        r5 = (okhttp3.internal.http2.Header) $r4;

        if r5 != null goto label3;

        if r2 == null goto label2;

        $i2 = r2.<okhttp3.internal.http.StatusLine: int code>;

        if $i2 != 100 goto label2;

        r2 = null;

        r3 = new okhttp3.Headers$Builder;

        specialinvoke r3.<okhttp3.Headers$Builder: void <init>()>();

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        r1 = r5.<okhttp3.internal.http2.Header: okio.ByteString name>;

        $r6 = r5.<okhttp3.internal.http2.Header: okio.ByteString value>;

        $r7 = virtualinvoke $r6.<okio.ByteString: java.lang.String utf8()>();

        $r6 = <okhttp3.internal.http2.Header: okio.ByteString RESPONSE_STATUS>;

        $z0 = virtualinvoke r1.<okio.ByteString: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label4;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HTTP/1.1 ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        r2 = staticinvoke <okhttp3.internal.http.StatusLine: okhttp3.internal.http.StatusLine parse(java.lang.String)>($r7);

        goto label2;

     label4:
        $r9 = <okhttp3.internal.http2.Http2Codec: java.util.List HTTP_2_SKIPPED_RESPONSE_HEADERS>;

        $z0 = interfaceinvoke $r9.<java.util.List: boolean contains(java.lang.Object)>(r1);

        if $z0 != 0 goto label2;

        $r10 = <okhttp3.internal.Internal: okhttp3.internal.Internal instance>;

        $r11 = virtualinvoke r1.<okio.ByteString: java.lang.String utf8()>();

        virtualinvoke $r10.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String,java.lang.String)>(r3, $r11, $r7);

        goto label2;

     label5:
        if r2 != null goto label6;

        $r12 = new java.net.ProtocolException;

        specialinvoke $r12.<java.net.ProtocolException: void <init>(java.lang.String)>("Expected \':status\' header not present");

        throw $r12;

     label6:
        $r13 = new okhttp3.Response$Builder;

        specialinvoke $r13.<okhttp3.Response$Builder: void <init>()>();

        $r14 = <okhttp3.Protocol: okhttp3.Protocol HTTP_2>;

        $r13 = virtualinvoke $r13.<okhttp3.Response$Builder: okhttp3.Response$Builder protocol(okhttp3.Protocol)>($r14);

        i0 = r2.<okhttp3.internal.http.StatusLine: int code>;

        $r13 = virtualinvoke $r13.<okhttp3.Response$Builder: okhttp3.Response$Builder code(int)>(i0);

        $r7 = r2.<okhttp3.internal.http.StatusLine: java.lang.String message>;

        $r13 = virtualinvoke $r13.<okhttp3.Response$Builder: okhttp3.Response$Builder message(java.lang.String)>($r7);

        $r15 = virtualinvoke r3.<okhttp3.Headers$Builder: okhttp3.Headers build()>();

        $r13 = virtualinvoke $r13.<okhttp3.Response$Builder: okhttp3.Response$Builder headers(okhttp3.Headers)>($r15);

        return $r13;
    }
    public void cancel()
    {
        okhttp3.internal.http2.Http2Codec r0;
        okhttp3.internal.http2.ErrorCode $r1;
        okhttp3.internal.http2.Http2Stream $r2;

        r0 := @this: okhttp3.internal.http2.Http2Codec;

        $r2 = r0.<okhttp3.internal.http2.Http2Codec: okhttp3.internal.http2.Http2Stream stream>;

        if $r2 == null goto label1;

        $r2 = r0.<okhttp3.internal.http2.Http2Codec: okhttp3.internal.http2.Http2Stream stream>;

        $r1 = <okhttp3.internal.http2.ErrorCode: okhttp3.internal.http2.ErrorCode CANCEL>;

        virtualinvoke $r2.<okhttp3.internal.http2.Http2Stream: void closeLater(okhttp3.internal.http2.ErrorCode)>($r1);

     label1:
        return;
    }
    public okio.Sink createRequestBody(okhttp3.Request, long)
    {
        okhttp3.internal.http2.Http2Codec r0;
        okhttp3.Request $r1;
        long $l0;
        okio.Sink $r2;
        okhttp3.internal.http2.Http2Stream $r3;

        r0 := @this: okhttp3.internal.http2.Http2Codec;

        $r1 := @parameter0: okhttp3.Request;

        $l0 := @parameter1: long;

        $r3 = r0.<okhttp3.internal.http2.Http2Codec: okhttp3.internal.http2.Http2Stream stream>;

        $r2 = virtualinvoke $r3.<okhttp3.internal.http2.Http2Stream: okio.Sink getSink()>();

        return $r2;
    }
    public void finishRequest() throws java.io.IOException
    {
        okhttp3.internal.http2.Http2Codec r0;
        okio.Sink $r1;
        okhttp3.internal.http2.Http2Stream $r2;

        r0 := @this: okhttp3.internal.http2.Http2Codec;

        $r2 = r0.<okhttp3.internal.http2.Http2Codec: okhttp3.internal.http2.Http2Stream stream>;

        $r1 = virtualinvoke $r2.<okhttp3.internal.http2.Http2Stream: okio.Sink getSink()>();

        interfaceinvoke $r1.<okio.Sink: void close()>();

        return;
    }
    public void flushRequest() throws java.io.IOException
    {
        okhttp3.internal.http2.Http2Codec r0;
        okhttp3.internal.http2.Http2Connection $r1;

        r0 := @this: okhttp3.internal.http2.Http2Codec;

        $r1 = r0.<okhttp3.internal.http2.Http2Codec: okhttp3.internal.http2.Http2Connection connection>;

        virtualinvoke $r1.<okhttp3.internal.http2.Http2Connection: void flush()>();

        return;
    }
    public okhttp3.ResponseBody openResponseBody(okhttp3.Response) throws java.io.IOException
    {
        okhttp3.internal.http2.Http2Codec r0;
        okhttp3.Response $r1;
        okhttp3.internal.http2.Http2Codec$StreamFinishingSource r2;
        okhttp3.internal.http2.Http2Stream $r3;
        okio.Source $r4;
        okhttp3.internal.http.RealResponseBody $r5;
        okhttp3.Headers $r6;
        okio.BufferedSource $r7;

        r0 := @this: okhttp3.internal.http2.Http2Codec;

        $r1 := @parameter0: okhttp3.Response;

        r2 = new okhttp3.internal.http2.Http2Codec$StreamFinishingSource;

        $r3 = r0.<okhttp3.internal.http2.Http2Codec: okhttp3.internal.http2.Http2Stream stream>;

        $r4 = virtualinvoke $r3.<okhttp3.internal.http2.Http2Stream: okio.Source getSource()>();

        specialinvoke r2.<okhttp3.internal.http2.Http2Codec$StreamFinishingSource: void <init>(okhttp3.internal.http2.Http2Codec,okio.Source)>(r0, $r4);

        $r5 = new okhttp3.internal.http.RealResponseBody;

        $r6 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Headers headers()>();

        $r7 = staticinvoke <okio.Okio: okio.BufferedSource buffer(okio.Source)>(r2);

        specialinvoke $r5.<okhttp3.internal.http.RealResponseBody: void <init>(okhttp3.Headers,okio.BufferedSource)>($r6, $r7);

        return $r5;
    }
    public okhttp3.Response$Builder readResponseHeaders(boolean) throws java.io.IOException
    {
        okhttp3.internal.http2.Http2Codec r0;
        boolean $z0;
        okhttp3.internal.http2.Http2Stream $r1;
        java.util.List $r2;
        okhttp3.Response$Builder $r3;
        okhttp3.internal.Internal $r4;
        int $i0;

        r0 := @this: okhttp3.internal.http2.Http2Codec;

        $z0 := @parameter0: boolean;

        $r1 = r0.<okhttp3.internal.http2.Http2Codec: okhttp3.internal.http2.Http2Stream stream>;

        $r2 = virtualinvoke $r1.<okhttp3.internal.http2.Http2Stream: java.util.List takeResponseHeaders()>();

        $r3 = staticinvoke <okhttp3.internal.http2.Http2Codec: okhttp3.Response$Builder readHttp2HeadersList(java.util.List)>($r2);

        if $z0 == 0 goto label1;

        $r4 = <okhttp3.internal.Internal: okhttp3.internal.Internal instance>;

        $i0 = virtualinvoke $r4.<okhttp3.internal.Internal: int code(okhttp3.Response$Builder)>($r3);

        if $i0 != 100 goto label1;

        return null;

     label1:
        return $r3;
    }
    public void writeRequestHeaders(okhttp3.Request) throws java.io.IOException
    {
        okhttp3.internal.http2.Http2Codec r0;
        okhttp3.Request $r1;
        okhttp3.internal.http2.Http2Stream $r2;
        okhttp3.RequestBody $r3;
        boolean z0;
        java.util.List $r4;
        okhttp3.internal.http2.Http2Connection $r5;
        okio.Timeout $r6;
        okhttp3.OkHttpClient $r7;
        int $i0;
        long $l1;
        java.util.concurrent.TimeUnit $r8;

        r0 := @this: okhttp3.internal.http2.Http2Codec;

        $r1 := @parameter0: okhttp3.Request;

        $r2 = r0.<okhttp3.internal.http2.Http2Codec: okhttp3.internal.http2.Http2Stream stream>;

        if $r2 == null goto label1;

        return;

     label1:
        $r3 = virtualinvoke $r1.<okhttp3.Request: okhttp3.RequestBody body()>();

        if $r3 == null goto label3;

        z0 = 1;

     label2:
        $r4 = staticinvoke <okhttp3.internal.http2.Http2Codec: java.util.List http2HeadersList(okhttp3.Request)>($r1);

        $r5 = r0.<okhttp3.internal.http2.Http2Codec: okhttp3.internal.http2.Http2Connection connection>;

        $r2 = virtualinvoke $r5.<okhttp3.internal.http2.Http2Connection: okhttp3.internal.http2.Http2Stream newStream(java.util.List,boolean)>($r4, z0);

        r0.<okhttp3.internal.http2.Http2Codec: okhttp3.internal.http2.Http2Stream stream> = $r2;

        $r2 = r0.<okhttp3.internal.http2.Http2Codec: okhttp3.internal.http2.Http2Stream stream>;

        $r6 = virtualinvoke $r2.<okhttp3.internal.http2.Http2Stream: okio.Timeout readTimeout()>();

        $r7 = r0.<okhttp3.internal.http2.Http2Codec: okhttp3.OkHttpClient client>;

        $i0 = virtualinvoke $r7.<okhttp3.OkHttpClient: int readTimeoutMillis()>();

        $l1 = (long) $i0;

        $r8 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        virtualinvoke $r6.<okio.Timeout: okio.Timeout timeout(long,java.util.concurrent.TimeUnit)>($l1, $r8);

        $r2 = r0.<okhttp3.internal.http2.Http2Codec: okhttp3.internal.http2.Http2Stream stream>;

        $r6 = virtualinvoke $r2.<okhttp3.internal.http2.Http2Stream: okio.Timeout writeTimeout()>();

        $r7 = r0.<okhttp3.internal.http2.Http2Codec: okhttp3.OkHttpClient client>;

        $i0 = virtualinvoke $r7.<okhttp3.OkHttpClient: int writeTimeoutMillis()>();

        $l1 = (long) $i0;

        $r8 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        virtualinvoke $r6.<okio.Timeout: okio.Timeout timeout(long,java.util.concurrent.TimeUnit)>($l1, $r8);

        return;

     label3:
        z0 = 0;

        goto label2;
    }
